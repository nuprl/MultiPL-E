language: jl
name: HumanEval_104_unique_digits
results:
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    if length(x) ==0\n        return Vector{Int64}()\n    end\n    flag = x[1]\n\
    \    flag2 = flag^2\n    \n    unique = Vector{Int64}()\n    unique_digit(x[1:end-1],\
    \ flag2, unique)\n    unique_digit(x[2:end], flag2, unique)\n    unique\nend\n\
    using Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmp84zusz33.jl:26

    '
  stdout: "test set: Error During Test at /tmp/tmp84zusz33.jl:29\n  Test threw exception\n\
    \  Expression: candidate([15, 33, 1422, 1]) == [1, 15, 33]\n  UndefVarError: unique_digit\
    \ not defined\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main\
    \ /tmp/tmp84zusz33.jl:20\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp84zusz33.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp84zusz33.jl:28\ntest set:\
    \ Error During Test at /tmp/tmp84zusz33.jl:30\n  Test threw exception\n  Expression:\
    \ candidate([152, 323, 1422, 10]) == Vector{Int64}([])\n  UndefVarError: unique_digit\
    \ not defined\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main\
    \ /tmp/tmp84zusz33.jl:20\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp84zusz33.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp84zusz33.jl:28\ntest set:\
    \ Error During Test at /tmp/tmp84zusz33.jl:31\n  Test threw exception\n  Expression:\
    \ candidate([12345, 2033, 111, 151]) == [111, 151]\n  UndefVarError: unique_digit\
    \ not defined\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main\
    \ /tmp/tmp84zusz33.jl:20\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp84zusz33.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp84zusz33.jl:28\ntest set:\
    \ Error During Test at /tmp/tmp84zusz33.jl:32\n  Test threw exception\n  Expression:\
    \ candidate([135, 103, 31]) == [31, 135]\n  UndefVarError: unique_digit not defined\n\
    \  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main /tm"
  timestamp: 1659978025
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    \n    sorted_digits = sort(x)\n    unique_digits = Set()\n    for k in sorted_digits\n\
    \        unique_digits += find_unique_digits(k)\n    end\nusing Test\n\n@testset\
    \ begin\n\ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) ==\
    \ [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpj3v1cyy_.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpj3v1cyy_.jl:1\n\
    in expression starting at /tmp/tmpj3v1cyy_.jl:1\n"
  stdout: ''
  timestamp: 1659978023
- exit_code: -1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    unique_vals = Set()\n    for val in x\n        if val%2 == 0\n          \
    \  unique_vals.add(val)\n        end\n    end\n    return unique_vals\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: Timeout
  stderr: 'b''ERROR: LoadError: '''
  stdout: 'b''test set: Error During Test at /tmp/tmpv_sju2cp.jl:26\n  Test threw
    exception\n  Expression: candidate([15, 33, 1422, 1]) == [1, 15, 33]\n  type Set
    has no field add\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2]
    unique_digits(x::Vector{Int64})\n     @ Main /tmp/tmpv_sju2cp.jl:16\n   [3] macro
    expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [4] macro expansion\n     @ /tmp/tmpv_sju2cp.jl:26 [inlined]\n   [5]
    macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [6] top-level scope\n     @ /tmp/tmpv_sju2cp.jl:25\ntest set: Error
    During Test at /tmp/tmpv_sju2cp.jl:27\n  Test threw exception\n  Expression: candidate([152,
    323, 1422, 10]) == Vector{Int64}([])\n  type Set has no field add\n  Stacktrace:\n   [1]
    getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] unique_digits(x::Vector{Int64})\n     @
    Main /tmp/tmpv_sju2cp.jl:16\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [4] macro expansion\n     @ /tmp/tmpv_sju2cp.jl:27 [inlined]\n   [5]
    macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [6] top-level scope\n     @ /tmp/tmpv_sju2cp.jl:25\ntest set: Error
    During Test at /tmp/tmpv_sju2cp.jl:28\n  Test threw exception\n  Expression: candidate([12345,
    2033, 111, 151]) == [111, 151]\n  MethodError: Cannot `convert` an object of type
    Set{Any} to an object of type Vector{Int64}\n  Closest candidates are:\n    convert(::Type{T},
    !Matched::LinearAlgebra.Factorization) where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n    convert(::Type{T},
    !Matched::AbstractArray) where T<:Array at ~/.conda/envs/polyglot/share/julia/base/array.jl:554\n    convert(::Type{T},
    !Matched::T) where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/base/abstractarray.jl:16\n    ...\n  Stacktrace:\n   [1]
    unique_digits(x::Vector{'
  timestamp: 1659978026
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    if length(x) == 0 then return [] end\n    flag = x.!=0::Vector{Int64}\n \
    \   count = count_elem(divrem(x .- flag, 2))::Vector{Int64}\n    \n    count_unique_digits(flag,\
    \ count, x)\nend\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\
    \t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpue35t5tq.jl:13\nin expression starting at /tmp/tmpue35t5tq.jl:13\n"
  stdout: ''
  timestamp: 1659978023
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    digits = unique(x.collect{|x| x % 10})\n    \n    for d in digits[2:end]\n\
    \        if x == 0\n            return x\n        elseif x == d % 10\n       \
    \     return x\n        else\n            return x + d % 10\n        end\n   \
    \ end\n    return x\nend\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\
    \t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"|\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5eoqa3m3.jl:13\nin expression starting at\
    \ /tmp/tmp5eoqa3m3.jl:13\n"
  stdout: ''
  timestamp: 1659978023
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    unique = Set()\n    \n    for i in x\n        if unique.contains(i)\n   \
    \         continue\n        push!(unique, i)\n    end\n    return unique\nend\n\
    </cell>\n<code language=julia-1.4>\nunique_digits([15, 33, 1422, 1])\n</cell>\n\
    <text>\nProblem 9\nGiven a vector of positive integers x. return a sorted vector\
    \ of all elements that hasn't any even digit from x.\nusing Test\n\n@testset begin\n\
    \ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) == [1, 15,\
    \ 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345,\
    \ 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpimtmtqff.jl:22\nin expression starting at\
    \ /tmp/tmpimtmtqff.jl:22\n"
  stdout: ''
  timestamp: 1659978023
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    unique_digits = Vector{Int64}()\n    for elem in x\n        if elem % 2 ==\
    \ 0\n            unique_digits = [elem | unique_digits]\n        end\n    end\n\
    \    unique_digits\nend\n</cell>\n<text>\nExercise 5: Unique Letters\nWrite a\
    \ function that returns a sorted vector of all elements that hasn't \nany duplicate\
    \ letters.\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkypse7wv.jl:21\nin expression starting at\
    \ /tmp/tmpkypse7wv.jl:21\n"
  stdout: ''
  timestamp: 1659978023
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    \n\"\"\"\nGiven a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any odd digit.\nusing Test\n\n@testset begin\n\
    \ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) == [1, 15,\
    \ 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345,\
    \ 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjm7zs3h9.jl:1\nin expression starting at /tmp/tmpjm7zs3h9.jl:1\n"
  stdout: ''
  timestamp: 1659978023
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    return sorted( x[findfirst(x->x==0)==0] )\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) == [1, 15,\
    \ 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345,\
    \ 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmp36v6i4th.jl:17

    '
  stdout: "test set: Error During Test at /tmp/tmp36v6i4th.jl:20\n  Test threw exception\n\
    \  Expression: candidate([15, 33, 1422, 1]) == [1, 15, 33]\n  MethodError: no\
    \ method matching keys(::var\"#1#2\")\n  Closest candidates are:\n    keys(!Matched::GenericArray)\
    \ at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1823\n  \
    \  keys(!Matched::Tuple) at ~/.conda/envs/polyglot/share/julia/base/tuple.jl:72\n\
    \    keys(!Matched::Tuple, !Matched::Tuple...) at ~/.conda/envs/polyglot/share/julia/base/tuple.jl:77\n\
    \    ...\n  Stacktrace:\n   [1] pairs(collection::Function)\n     @ Base ./abstractdict.jl:138\n\
    \   [2] findfirst(A::Function)\n     @ Base ./array.jl:1911\n   [3] unique_digits(x::Vector{Int64})\n\
    \     @ Main /tmp/tmp36v6i4th.jl:13\n   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmp36v6i4th.jl:20 [inlined]\n\
    \   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmp36v6i4th.jl:19\ntest set:\
    \ Error During Test at /tmp/tmp36v6i4th.jl:21\n  Test threw exception\n  Expression:\
    \ candidate([152, 323, 1422, 10]) == Vector{Int64}([])\n  MethodError: no method\
    \ matching keys(::var\"#1#2\")\n  Closest candidates are:\n    keys(!Matched::GenericArray)\
    \ at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1823\n  \
    \  keys(!Matched::Tuple) at ~/.conda/envs/polyglot/share/julia/base/tuple.jl:72\n\
    \    keys(!Matched::Tuple, !Matched::Tuple...) at ~/.conda/envs/polyglot/share/julia/base/tuple.jl:77\n\
    \    ...\n  Stacktrace:\n   [1] pairs(collection::Function)\n     @ Base ./abstractdict.jl:138\n\
    \   [2] findfirst(A::Function)\n     @ Base ./array.jl:1911\n   [3] unique_digits(x::Vector{Int64})\n\
    \     @ Main /tmp/tmp36v6i4th.jl:13\n   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmp36v6i4th.jl:21 [inlined]\n\
    \   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Tes"
  timestamp: 1659978026
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    \n    sorted_digits = sort(x)\n    \n    new_digits = []\n    for i in x\n\
    \        if i mod 2 == 0\n            new_digits.push(i)\n        end\n    end\n\
    using Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"2\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp2cjbdgh_.jl:18\nin expression starting at /tmp/tmp2cjbdgh_.jl:18\n"
  stdout: ''
  timestamp: 1659978023
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    \n    unique = Set()\n    result = Vector{Int64}()\n    for x in x\n    \
    \    push!(unique, mod(x, 10))\n    end\n    for i in unique\n        push!(result,\
    \ i)\n    end\n    sort(unique, by = x->x)\n    result\nend\n</cell>\n<cell>\n\
    \"\"\"Given a vector of positive integers, return the first and last unique elements.\n\
    using Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptdx1iva9.jl:25\nin expression starting at\
    \ /tmp/tmptdx1iva9.jl:25\n"
  stdout: ''
  timestamp: 1659978023
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    if length(x)==0 \n        return [] \n    \n    digits = unique(digits(x))\n\
    \    \n    unique_digits = Set{Int64}()\n    unique_digits = unique_digits + digits\n\
    \    \n    unique_digits = unique_digits - digits\n    \n    unique_digits = Vector{Int64}(unique_digits)\n\
    \    \n    unique_digits\nend\n</cell>\n<code language=julia-1.6>\nusing Test\n\
    \n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422,\
    \ 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpm1lzdum8.jl:27\nin expression starting at\
    \ /tmp/tmpm1lzdum8.jl:27\n"
  stdout: ''
  timestamp: 1659978023
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    \n    unique_digits = Vector{Int64}(undef, length(x))\n    for ii in eachindex(x)\n\
    \        if ii > 0 && mod(x[ii], 10) == 0 \n            push!(unique_digits, x[ii])\n\
    \        end\n    end\n    return unique_digits\nend\n</cell>\n<text>\nQuestion\
    \ 6. How many digits (from 1 to 20) in the vector below?\nusing Test\n\n@testset\
    \ begin\n\ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) ==\
    \ [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpw9ll9yl1.jl:22\nin expression starting at\
    \ /tmp/tmpw9ll9yl1.jl:22\n"
  stdout: ''
  timestamp: 1659978023
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    if length(x)==0 \n        return x \n    \n    # Initialize a flag and an\
    \ auxiliary vector\n    flag=trues(length(x))\n    aux=zeros(Int, length(x))\n\
    using Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxmm2zl5r.jl:1\nin expression starting at /tmp/tmpxmm2zl5r.jl:1\n"
  stdout: ''
  timestamp: 1659978023
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    if length(x) == 0 \n        return Vector{Int64}() \n    else \n        result\
    \ = []\n        for i in 1:length(x) \n            if x[i] % 2 != 0 \n       \
    \         push!(result, x[i]) \n            end \n        end \n    end \n   \
    \ unique_digits2(result)\nend \n</cell>\n<code language=julia-1.5>\n# Preparing\
    \ data for modeling\ndf = CSV.read(\"../data/german_credit_data.csv\")\nx = convert(Vector{Int64},\
    \ df.Creditability)\n</cell>\n<code language=julia-1.5>\n# Splitting data into\
    \ training and test data\nx_train, x_test, y_train, y_test = train_test_split(x,\
    \ df.default,\n                                                    test_size=0.2,\
    \ shuffle=true);\n</cell>\n<code language=julia-1.5>\n# Fitting Naive Bayes model\n\
    # clf = NaiveBayes(BayesClassifier)\nclf = NaiveBayes(MultinomialClassifier)\n\
    clf.fit(x_train, y_train);\n</cell>\n<code language=julia-1.5>\n# Testing the\
    \ model\ny_pred = clf.predict(x_test)\n</cell>\n<code language=julia-1.5>\n# Creating\
    \ confusion matrix \ncm = confusion_matrix_plot([y_test, y_pred], [\"true\", \"\
    pred\"]);\n</cell>\n<code language=julia-1.5>\n# Testing model\naccuracy = accuracy_score(y_test,\
    \ y_pred);\nprecision = precision_score(y_test, y_pred);\nrecall = recall_score(y_test,\
    \ y_pred);\nf1 = f1_score(y_test, y_pred);\n</cell>\n<code language=julia-1.5>\n\
    # Plotting ROC curve\n# Plotting ROC curve\nroc = roc_curve(y_test, clf.predict_proba(x_test)[:,\
    \ 1]);\nplot(roc[1], roc[2])\n</cell>\n<code language=julia-1.5>\n# Predicting\
    \ probabilities\nprobabilities = clf.predict_proba(x_test)[:, 1]\n</cell>\n<code\
    \ language=julia-1.5>\n# Predicting probabilities\nprobabilities = clf.predict_proba(x_test)[:,\
    \ 1]\n</cell>\n<code language=julia-1.5>\n# Predicting probabilities\nprobabilities\
    \ = clf.predict_proba(x_test)[:, 1]\n</cell>\n<code language=julia-1.5>\n# Getting\
    \ y_score\ny_score = clf.predict_proba(x_test)[:, 1]\n</cell>\n<code language=julia-1.5>\n\
    # Getting class with max probability\nprediction = argmax(y_score);\nprediction\n\
    </cell>\n<code language=julia-1.5>\n# Getting class with max probability\nprediction\
    \ = argmax(y_score);\nprediction\n</cell>\n<code language=julia-1.5>\n# \nusing\
    \ Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpj7mzv5z8.jl:25\nin expression starting at\
    \ /tmp/tmpj7mzv5z8.jl:25\n"
  stdout: ''
  timestamp: 1659978023
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    for i in eachindex(x)\n        digit = mod(x[i], 10)\n        if digit ==\
    \ 0 \n            continue\n        x[i] = x[i] // 10\n        if x[i] % 2 ==\
    \ 0\n            x = append(x, x[i])\n        else\n            x = x[1:end]\n\
    \        end\n    end\n    return x\nend\n</cell>\n<cell>\nunique_digits([15,\
    \ 33, 1422, 1])\n</cell>\n<text>\nExercise: \nWrite a function to count the number\
    \ of unique digits within a vector.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpd2_k53p0.jl:26\nin expression starting at\
    \ /tmp/tmpd2_k53p0.jl:26\n"
  stdout: ''
  timestamp: 1659978023
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    \n    \n    for i in x\n        even_index = (rem(x, 10)%2) == 0\n      \
    \  push!(unique_digits, x[i]) if(even_index)\n    end\n    return x\nend\n</cell>\n\
    <code language=julia-1.3>\n@testset \"unique_digits\" begin\n    vector1 = [15,\
    \ 33, 1422, 1]\n    vector2 = [152, 323, 1422, 10]\n    \n    ans1 = [1, 15, 33]\n\
    \    ans2 = []\n    @test unique_digits(vector1) isa Vector{Int64} && @test unique_digits(vector2)\
    \ isa Vector{Int64}\n    @test unique_digits(ans1) isa Vector{Int64} && @test\
    \ unique_digits(ans2) isa Vector{Int64}\n    @test unique_digits(vector1) ===\
    \ ans1 && @test unique_digits(vector2) === ans2\nend\n</cell>\n<text>\nProblem\
    \ 4.5 Finding unique characters in string and their count\nGiven a string s, find\
    \ the number of unique characters and the count of each character. Return the\
    \ sorted vector [ (unique characters, count of characters) ] sorted. Sorted is\
    \ descending. \nIf the character occurs more than once, count only once.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmpv1a0nzme.jl:15 expected \"\
    end\", got \"if\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpv1a0nzme.jl:17\n\
    in expression starting at /tmp/tmpv1a0nzme.jl:17\n"
  stdout: ''
  timestamp: 1659978023
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \ \n    for i in x:\n        \n        if x[i] == 0\n            \n          \
    \  continue\n            \n        elseif i%2 == 0\n            \n           \
    \ return x\n            \n        else\n            \n            x[i] = x[i]/2\n\
    \            \n            return unique_digits(x)\n            \n        end\n\
    \        \n    end\n    return unique(x)\nend\n</cell>\n<text>\nWrite a function\
    \ that given two positive integers x and y, will return whether or not they are\
    \ palindrome.\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t\
    @test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323,\
    \ 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111, 151])\
    \ == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmg__06hs.jl:15\nin expression starting at\
    \ /tmp/tmpmg__06hs.jl:15\n"
  stdout: ''
  timestamp: 1659978023
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    for i in x\n        !iszero(i % 10) ? (push!(res, i) : nothing) \n    end\n\
    \    res\nend\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t\
    @test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323,\
    \ 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111, 151])\
    \ == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: colon expected in \"?\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpde4xv087.jl:15\nin expression starting at\
    \ /tmp/tmpde4xv087.jl:15\n"
  stdout: ''
  timestamp: 1659978023
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    \n    for i in 1..length(x)\n        push!(x, x[i]) \n    end\n    x\nend\n\
    \    \n\"\"\"\n    Solution to question 2\n\"\"\"\nusing Test\n\n@testset begin\n\
    \ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) == [1, 15,\
    \ 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345,\
    \ 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nusing Test\n\
    \nStacktrace:\n [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level\
    \ scope\n   @ /tmp/tmpmbyqqpue.jl:20\nin expression starting at /tmp/tmpmbyqqpue.jl:20\n"
  stdout: ''
  timestamp: 1659978023
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    sorted=sort(x)\n    sorted\n    last=sorted[1]\n    for i in last:\n    \
    \    sorted=sorted[findfirst(x .== i) == 1]\n    end\n    last\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422,\
    \ 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2ygmjfgv.jl:17\nin expression starting at\
    \ /tmp/tmp2ygmjfgv.jl:17\n"
  stdout: ''
  timestamp: 1659978023
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    if length(x) == 0\n        []\n    else\n        [i for i in x if !(i % 2)]\n\
    \    end\nend\n</cell>\n<code language=julia-0.4>\n@test unique_digits([1,3])\
    \ == [1,3]\n@test unique_digits([1]) == [1]\n@test unique_digits([1,2,3]) == [1,3,2]\n\
    @test unique_digits([2,7,9]) == [2,3,7,9]\n@test unique_digits([12,2,3,4]) ==\
    \ [1,2,3,4,12]\n@test unique_digits([1, 3]) == [1, 3]\n</cell>\n<text>\n4. Sort\
    \ a vector of positive integers\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\
    \t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5to5s6bg.jl:19\nin expression starting at\
    \ /tmp/tmp5to5s6bg.jl:19\n"
  stdout: ''
  timestamp: 1659978023
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    uniques = Set{Int64}() \n    for i in x\n        if i in uniques\n      \
    \      continue \n        push!(uniques, i) \n    end\n    uniques\nend\n</cell>\n\
    <code language=julia-1.3>\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\
    \t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpe87mgplg.jl:21\nin expression starting at\
    \ /tmp/tmpe87mgplg.jl:21\n"
  stdout: ''
  timestamp: 1659978023
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) ==\
    \ [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpyhjm1m03.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpyhjm1m03.jl:1\n\
    in expression starting at /tmp/tmpyhjm1m03.jl:1\n"
  stdout: ''
  timestamp: 1659978025
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    \n    unique_digits = Vector{Int64}()\n    \n    for n in x\n        if n\
    \ % 2 == 0\n            push!(unique_digits, n)\n        end\n    end\nusing Test\n\
    \n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422,\
    \ 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp82stqia5.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp82stqia5.jl:1\n\
    in expression starting at /tmp/tmp82stqia5.jl:1\n"
  stdout: ''
  timestamp: 1659978025
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    \n    answer = Vector{Int64}()\n    \n    for i in x\n        \n        local\
    \ found = false\n        \n        for j in answer\n            if i % 10 == j\
    \ % 10\n                found = true\n                break\n            end\n\
    \        end\n        \n        if found == false\n            push!(answer, i)\n\
    \        end\n    end\n    return answer\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyi5ap6qp.jl:33\nin expression starting at\
    \ /tmp/tmpyi5ap6qp.jl:33\n"
  stdout: ''
  timestamp: 1659978025
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    y=sort(x)\n    map(x->push!(y[x],Int64(0)),2:end-1)\n    y\nend\n</cell>\n\
    <text>\n2.8 Sorting by descending order and increasing order\nGiven a vector of\
    \ positive integers x. return a sorted vector of all \n    elements that hasn't\
    \ any odd digit and all elements that hasn't any even digit.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) ==\
    \ [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"2:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpf47ycgjc.jl:14\nin expression\
    \ starting at /tmp/tmpf47ycgjc.jl:14\n"
  stdout: ''
  timestamp: 1659978025
- exit_code: -1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    unique_digits = Vector{Int64}[]\n    for n in x\n        if n % 2 == 0 &&\
    \ length(unique_digits) < length(unique_digits) + 1 \n            push!(unique_digits,\
    \ n) \n        else\n            unique_digits = [] \n        end\n    end\n \
    \   unique_digits\nend\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\
    \t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Test Failed at /tmp/tmpykljxj3j.jl:28\n  Expression: candidate([15,
    33, 1422, 1]) == [1, 15, 33]\n   Evaluated: Int64[] == [1, 15, 33]\nStacktrace:\n
    [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n [2] macro expansion\n   @ /tmp/tmpykljxj3j.jl:28 [inlined]\n [3] macro
    expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n [4] top-level scope\n   @ /tmp/tmpykljxj3j.jl:27\ntest set: Error
    During Test at /tmp/tmpykljxj3j.jl:29\n  Test threw exception\n  Expression: candidate([152,
    323, 1422, 10]) == Vector{Int64}([])\n  MethodError: Cannot `convert` an object
    of type Int64 to an object of type Vector{Int64}\n  Closest candidates are:\n    convert(::Type{T},
    !Matched::LinearAlgebra.Factorization) where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n    convert(::Type{T},
    !Matched::AbstractArray) where T<:Array at ~/.conda/envs/polyglot/share/julia/base/array.jl:554\n    convert(::Type{T},
    !Matched::T) where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/base/abstractarray.jl:16\n    ...\n  Stacktrace:\n   [1]
    push!(a::Vector{Vector{Int64}}, item::Int64)\n     @ Base ./array.jl:994\n   [2]
    unique_digits(x::Vector{Int64})\n     @ Main /tmp/tmpykljxj3j.jl:16\n   [3] macro
    expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [4] macro expansion\n     @ /tmp/tmpykljxj3j.jl:29 [inlined]\n   [5]
    macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [6] top-level scope\n     @ /tmp/tmpykljxj3j.jl:27\ntest set: Test
    Failed at /tmp/tmpykljxj3j.jl:30\n  Expression: candidate([12345, 2033, 111, 151])
    == [111, 151]\n   Evaluated: Int64[] == [111, 151]\nStacktrace:\n [1] macro expansion\n   @
    ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n
    [2] macro expansion\n   @ /tmp/tmpykljxj3j.jl:30 [inlined]\n [3] macro expansion\n   @ '
  timestamp: 1659978028
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    if length(x)==0 \n        return x \n    \n    # Initialize result vector\n\
    \    res = Vector{Int64}() \n    \n    # Sort x first\n    sort(x) \n    \n  \
    \  # Initialize a variable to store the last element of x\n    # Since x is sorted,\
    \ the last element must be the first element of x \n    last = x[1]\n    \n  \
    \  # Iterate through the vector\n    for element in x \n        \n        # If\
    \ element is even, remove it from the vector\n        if (element % 2) == 0 \n\
    \            res = delete(res, first(res, last)) \n        end\n        \n   \
    \     # Update last \n        last = element\n    end\n    \n    # Return result\n\
    \    res\nend\n</cell>\n<code language=julia-1.3>\n@testset \"Test unique_digits\"\
    \ begin\n    vector1 = [15, 33, 1422, 1]\n    \n    @test unique_digits(vector1)\
    \ === [1, 1, 15, 33]\n    @test unique_digits(Vector{Int}()) === []\nend\n</cell>\n\
    <text>\nPart 6: Palindrome number check\nWrite a function that checks if a number\
    \ is a palindrome. Your function should accept a vector of any integers, and should\
    \ return a vector of booleans.\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\
    \t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzbx3wqzn.jl:41\nin expression starting at\
    \ /tmp/tmpzbx3wqzn.jl:41\n"
  stdout: ''
  timestamp: 1659978025
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    \n    n=length(x)\n    y=Vector{Int64}()\n    \n    for k=1:n\n        \n\
    \        if mod(x,k)==0 \n            push!(y,x)\n        end\n    end\nusing\
    \ Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmphpgcvrm9.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmphpgcvrm9.jl:1\n\
    in expression starting at /tmp/tmphpgcvrm9.jl:1\n"
  stdout: ''
  timestamp: 1659978025
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    \n\"\"\"\nGiven a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit and all elements that hasn't any\
    \ \n    odd digit.\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\
    \t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpg85y6yya.jl:1\nin expression starting at /tmp/tmpg85y6yya.jl:1\n"
  stdout: ''
  timestamp: 1659978025
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \   for i in eachindex(x) do \n    if x[i] % 2 == 0 then \n        push!(x, x[i])\
    \ \n    end \n   end\n   return x \nend\n</cell>\n<code language=julia-1.0>\n\
    using Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdzrrr0_l.jl:20\nin expression starting at\
    \ /tmp/tmpdzrrr0_l.jl:20\n"
  stdout: ''
  timestamp: 1659978025
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    unique_digits_helper(x)\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpj1fiwqlg.jl:17

    '
  stdout: "test set: Error During Test at /tmp/tmpj1fiwqlg.jl:20\n  Test threw exception\n\
    \  Expression: candidate([15, 33, 1422, 1]) == [1, 15, 33]\n  UndefVarError: unique_digits_helper\
    \ not defined\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main\
    \ /tmp/tmpj1fiwqlg.jl:13\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpj1fiwqlg.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpj1fiwqlg.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpj1fiwqlg.jl:21\n  Test threw exception\n  Expression:\
    \ candidate([152, 323, 1422, 10]) == Vector{Int64}([])\n  UndefVarError: unique_digits_helper\
    \ not defined\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main\
    \ /tmp/tmpj1fiwqlg.jl:13\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpj1fiwqlg.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpj1fiwqlg.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpj1fiwqlg.jl:22\n  Test threw exception\n  Expression:\
    \ candidate([12345, 2033, 111, 151]) == [111, 151]\n  UndefVarError: unique_digits_helper\
    \ not defined\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main\
    \ /tmp/tmpj1fiwqlg.jl:13\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpj1fiwqlg.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpj1fiwqlg.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpj1fiwqlg.jl:23\n  Test threw exception\n  Expression:\
    \ candidate([135, 103, 31]) == [31, 135]\n  UndefVarError: unique_digits_helper\
    \ not defined\n  Stacktrace:\n   [1] unique_digits(x"
  timestamp: 1659978027
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    digits = unique(x) // filter using no even numbers\n    \n    return sort(filter(x->x\
    \ % 2 != 0, digits)) \nend\n</cell>\n<code language=julia-1.4>\n@code_warntype\
    \ unique_digits([15, 33, 1422, 1])\n</cell>\n<code language=julia-1.4>\n@code_warntype\
    \ unique_digits([152, 323, 1422, 10])\n</cell>\n<text>\nExercise: Create a function\
    \ that can return all the prime numbers that less than or equal to given number.\n\
    This function is similar to unique_digits(). Try to use filter function in filter\
    \ function\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"function\" at /tmp/tmpgjnvr3h5.jl:12 expected\
    \ \"end\", got \"using\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpgjnvr3h5.jl:13\n\
    in expression starting at /tmp/tmpgjnvr3h5.jl:13\n"
  stdout: ''
  timestamp: 1659978025
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    unique_numbers = Vector{Int64}()\n    for i in x\n        if i mod 2 eq 0\n\
    \            push!(unique_numbers, i)\n        end\n    end\n    return unique_numbers\n\
    end\n</cell>\n<text>\nExercise\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\
    \t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"2\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpqcqz56xd.jl:15\nin expression starting at /tmp/tmpqcqz56xd.jl:15\n"
  stdout: ''
  timestamp: 1659978025
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    \n    return x[x>0] \nend\n</cell>\n<code language=julia-1.3>\nusing Test\n\
    \n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422,\
    \ 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7vxythfh.jl:16\nin expression starting at\
    \ /tmp/tmp7vxythfh.jl:16\n"
  stdout: ''
  timestamp: 1659978025
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    for i in x:\n        if i mod 2 ==0\n            x.push(i)\n        end\n\
    \    end\n    return x\nend\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\
    \t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2e26xj8z.jl:14\nin expression starting at\
    \ /tmp/tmp2e26xj8z.jl:14\n"
  stdout: ''
  timestamp: 1659978025
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    \n    local res\n    local i\n    for i = 1:length(x) do\n        if x[i]\
    \ mod 2 == 0 then\n            if !contains(res, x[i]) then\n                push!(res,\
    \ x[i])\n            end\n        end\n    end\n    return res\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422,\
    \ 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"2\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpx772qaj1.jl:17\nin expression starting at /tmp/tmpx772qaj1.jl:17\n"
  stdout: ''
  timestamp: 1659978025
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    \n    if isnothing(x) || x == []\n        return Vector{Int64}()\n    end\n\
    using Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmptihs2exo.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmptihs2exo.jl:1\n\
    in expression starting at /tmp/tmptihs2exo.jl:1\n"
  stdout: ''
  timestamp: 1659978025
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    \n    unique_digits=[]\n    \n    local u=0\n    local j=0\n    \n    for\
    \ i in length(x)\n        \n        if x[i]%2==0\n            u=u+(x[i]/2)\n \
    \       else\n            j=j+1\n            \n            while x[j]%2==0\n \
    \               j=j+1\n            end\n            \n            unique_digits=[u,i,j]\
    \ \n            \n            if j==length(x)\n                \n            \
    \    unique_digits=[x[1],x[2],u]\n            end\n        end\n    end\n    \n\
    \    return unique_digits\nend\nunique_digits([15,33,1422,1])\n</cell>\n<code\
    \ language=julia-0.6>\n@assert unique_digits([15,33,1422,1]) == [1, 15, 33]\n\
    @assert unique_digits([152,323,1422,10]) == []\n</cell>\n<text>\nProblem 3\nWrite\
    \ a function that counts how many times a given value is repeated in the given\
    \ array. \nFor example, if the given array is [14, 11, 10, 8, 8, 7, 11, 15] it\
    \ should return that 11 appears 3 times and 10 appears 2 times.\nusing Test\n\n\
    @testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422,\
    \ 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpq1frszt2.jl:42\nin expression starting at\
    \ /tmp/tmpq1frszt2.jl:42\n"
  stdout: ''
  timestamp: 1659978025
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    len = length(x)\n    even = findall(x .== 0)\n    odd = findall(x  mod 2\
    \ .!= 0)\n    return setdiff(unique(x), even)\nend\n</cell>\n<code language=julia-0.6>\n\
    unique_digits(x)\n</cell>\n<code language=julia-0.6>\ny = rand(10)\nunique_digits(y)\n\
    </cell>\n<code language=julia-0.6>\nusing PyPlot\nx = 1:10\ny = rand(10)\np =\
    \ plot(x,y)\n</cell>\n<code language=julia-0.6>\nunique_digits(y)\n</cell>\n<code\
    \ language=julia-0.6>\np = plot(x,unique_digits(y))\n</cell>\n<code language=julia-0.6>\n\
    # find the unique digits of the numbers in x using PyPlot\nusing PyPlot\nx = rand(10)\n\
    y = rand(10)\np = plot(x,y)\n</cell>\n<code language=julia-0.6>\nunique_digits(y)\n\
    </cell>\n<code language=julia-0.6>\np = plot(x,unique_digits(y))\n</cell>\n<code\
    \ language=julia-0.6>\nusing PyPlot\nx = 1:10\ny = rand(10)\np = plot(x,y)\n</cell>\n\
    <code language=julia-0.6>\nunique_digits(y)\n</cell>\n<code language=julia-0.6>\n\
    p = plot(x,unique_digits(y))\n</cell>\n<code language=julia-0.6>\nusing PyPlot\n\
    x = 1:10\ny = rand(10)\np = plot(x,y)\n</cell>\n<code language=julia-0.6>\nunique_digits(y)\n\
    </cell>\n<code language=julia-0.6>\np = plot(x,unique_digits(y))\n</cell>\n<code\
    \ language=julia-0.6>\nusing PyPlot\nx = 1:10\ny = rand(10)\np = plot(x,y)\n</cell>\n\
    <code language=julia-0.6>\nunique_digits(y)\n</cell>\n<code language=julia-0.6>\n\
    p = plot(x,unique_digits(y))\n</cell>\n<code language=julia-0.6>\nusing PyPlot\n\
    x = 1:10\ny = rand(10)\np = plot(x,y)\n</cell>\n<code language=julia-0.6>\nunique_digits(y)\n\
    </cell>\n<code language=julia-0.6>\np = plot(x,unique_digits(y))\n</cell>\n<code\
    \ language=julia-0.6>\nusing PyPlot\nx = 1:10\ny = rand(10)\np = plot(x,y)\n</cell>\n\
    <code language=julia-0.6>\nunique_digits(y)\n</cell>\n<code language=julia-0.6>\n\
    p = plot(x,unique_digits(y))\n</\nusing Test\n\n@testset begin\n\ncandidate =\
    \ unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8ohdy5oa.jl:15\nin expression starting at\
    \ /tmp/tmp8ohdy5oa.jl:15\n"
  stdout: ''
  timestamp: 1659978025
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    digits = map(x % 10, x)\n    uniq_digits = filter(x -> all(x != digits),\
    \ x)\n    uniq_digits.sort\nend\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\
    \t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpznom4o81.jl:19

    '
  stdout: "test set: Error During Test at /tmp/tmpznom4o81.jl:22\n  Test threw exception\n\
    \  Expression: candidate([15, 33, 1422, 1]) == [1, 15, 33]\n  MethodError: no\
    \ method matching rem(::Vector{Int64}, ::Int64)\n  Closest candidates are:\n \
    \   rem(::Any, ::Any, !Matched::RoundingMode{:ToZero}) at ~/.conda/envs/polyglot/share/julia/base/div.jl:80\n\
    \    rem(::Any, ::Any, !Matched::RoundingMode{:Down}) at ~/.conda/envs/polyglot/share/julia/base/div.jl:81\n\
    \    rem(::Any, ::Any, !Matched::RoundingMode{:Up}) at ~/.conda/envs/polyglot/share/julia/base/div.jl:82\n\
    \    ...\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main /tmp/tmpznom4o81.jl:13\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpznom4o81.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpznom4o81.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpznom4o81.jl:23\n  Test threw exception\n  Expression:\
    \ candidate([152, 323, 1422, 10]) == Vector{Int64}([])\n  MethodError: no method\
    \ matching rem(::Vector{Int64}, ::Int64)\n  Closest candidates are:\n    rem(::Any,\
    \ ::Any, !Matched::RoundingMode{:ToZero}) at ~/.conda/envs/polyglot/share/julia/base/div.jl:80\n\
    \    rem(::Any, ::Any, !Matched::RoundingMode{:Down}) at ~/.conda/envs/polyglot/share/julia/base/div.jl:81\n\
    \    rem(::Any, ::Any, !Matched::RoundingMode{:Up}) at ~/.conda/envs/polyglot/share/julia/base/div.jl:82\n\
    \    ...\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main /tmp/tmpznom4o81.jl:13\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpznom4o81.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpznom4o81.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpznom4o81.jl:24\n  Test threw exception\n  Expression:\
    \ cand"
  timestamp: 1659978028
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    unique_digits_ = Set()\n    unique_digits_ = [i for i in x if i not in unique_digits_]\
    \ \n    return unique_digits_\nend \n    \n\"\"\"\n    Solution of the problem\
    \ is more or less same as before.\n    We add 'x' to the vector of all digits\
    \ and then sort the vector.\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\
    \t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: expected \"]\"\nStacktrace:\n [1] top-level scope\n\
    \   @ /tmp/tmp8fblmdvb.jl:14\nin expression starting at /tmp/tmp8fblmdvb.jl:14\n"
  stdout: ''
  timestamp: 1659978025
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    y = Vector{Int64}()\n    for i in x\n        if i mod 2 == 0\n          \
    \  push!(y, i)\n        end\n    end\n    y\nend\n</cell>\n<text>\nQ. Implement\
    \ function unique_digits_v2() that does the same thing as unique_digits() but\
    \ returns indices of the elements that hasn't any even digit.\nusing Test\n\n\
    @testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422,\
    \ 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"2\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp69_0f2cl.jl:15\nin expression starting at /tmp/tmp69_0f2cl.jl:15\n"
  stdout: ''
  timestamp: 1659978026
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    \n    sz = length(x)\n    seen = Set()\n    \n    # sort x\n    sorted =\
    \ sort(x)\n    \n    # traverse x to check if it has a seen digit\n    for i in\
    \ 1:sz\n        if !seen[x[i]]\n            x[i] = Int64(-1)\n            seen[x[i]]\
    \ = true\n        end\n    end\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\
    \t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpfqr65jqr.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpfqr65jqr.jl:1\n\
    in expression starting at /tmp/tmpfqr65jqr.jl:1\n"
  stdout: ''
  timestamp: 1659978026
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    digits_not_even = filter(x->mod(x,2) ~= 0, x)\n    return sort(unique(digits_not_even))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"=\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpwpkdl_f3.jl:13\nin expression starting at /tmp/tmpwpkdl_f3.jl:13\n"
  stdout: ''
  timestamp: 1659978026
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) ==\
    \ [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpvkaa4uv9.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpvkaa4uv9.jl:1\n\
    in expression starting at /tmp/tmpvkaa4uv9.jl:1\n"
  stdout: ''
  timestamp: 1659978026
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \  unique = Set{Int64}()\n  for e in x \n    if unique[e % 10] == 0 \n      unique[e\
    \ % 10] = e\n    else\n      return []\n    end\n  end\n  return sort(unique)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpy92vb0lj.jl:25

    '
  stdout: "test set: Error During Test at /tmp/tmpy92vb0lj.jl:28\n  Test threw exception\n\
    \  Expression: candidate([15, 33, 1422, 1]) == [1, 15, 33]\n  MethodError: no\
    \ method matching getindex(::Set{Int64}, ::Int64)\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n\
    \     @ Main /tmp/tmpy92vb0lj.jl:15\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpy92vb0lj.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpy92vb0lj.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpy92vb0lj.jl:29\n  Test threw exception\n  Expression:\
    \ candidate([152, 323, 1422, 10]) == Vector{Int64}([])\n  MethodError: no method\
    \ matching getindex(::Set{Int64}, ::Int64)\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n\
    \     @ Main /tmp/tmpy92vb0lj.jl:15\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpy92vb0lj.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpy92vb0lj.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpy92vb0lj.jl:30\n  Test threw exception\n  Expression:\
    \ candidate([12345, 2033, 111, 151]) == [111, 151]\n  MethodError: no method matching\
    \ getindex(::Set{Int64}, ::Int64)\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n\
    \     @ Main /tmp/tmpy92vb0lj.jl:15\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpy92vb0lj.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpy92vb0lj.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpy92vb0lj.jl:31\n  Test threw exception\n  Expression:\
    \ candidate([135, 103, 31]) == [31, 135]\n  MethodError: no method matching geti"
  timestamp: 1659978029
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    for n in x do \n        if n%2 == 0 \n            push!(results,n) \n   \
    \     end\n    end\n    sort(results) \nend\n</cell>\n<code language=julia-1.1>\n\
    #1\n\"\"\"\n    unique_digits(x::Vector{Int})\nusing Test\n\n@testset begin\n\n\
    candidate = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\
    \t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345,\
    \ 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid \"do\" syntax\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp4v3lnrvk.jl:13\nin expression starting at /tmp/tmp4v3lnrvk.jl:13\n"
  stdout: ''
  timestamp: 1659978026
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    l = length(x)\n    if l == 0\n        return []\n    unique_digit_set = Set()\n\
    \    for i in x\n        unique_digit_set.add(i)\n    end\n    unique_digit_set\n\
    end\n</cell>\n<code language=julia-1.5>\nunique_digits([10, 2, 11, 3, 3])\n</cell>\n\
    <text>\nProblem 9: Find all possible combinations of sums of numbers in vector\n\
    using Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplf68cm39.jl:22\nin expression starting at\
    \ /tmp/tmplf68cm39.jl:22\n"
  stdout: ''
  timestamp: 1659978026
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    uniques = Set()\n    for i in x\n        uniques += digits(i)\n    end\n\
    \    return collect(uniques)\nend\n</cell>\n<code language=julia-1.4>\n\"\"\"\n\
    Given a vector of positive integers x. return a sorted vector of all \n    elements\
    \ that hasn't any odd digit.\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\
    \t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyc_ntqo_.jl:19\nin expression starting at\
    \ /tmp/tmpyc_ntqo_.jl:19\n"
  stdout: ''
  timestamp: 1659978026
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    \n    # Create a dictionary to store the sorted unique elements\n    unique_digits\
    \ = Dict()\n    \n    for i in x\n        unique_digits[i] = i \n    end\n   \
    \ \n    return collect(keys(unique_digits))\nend\n</code>\nAnd this one is the\
    \ solution of the problem in Python:\n<code>\ndef unique_digits(x):\n    \n  \
    \  # create a dictionary to store a unique elements \n    unique_digits = dict()\n\
    \    \n    for i in x:\n        unique_digits[i] = i\n    \n    return list(unique_digits.keys())\n\
    using Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpw6_qca8t.jl:23\nin expression starting at\
    \ /tmp/tmpw6_qca8t.jl:23\n"
  stdout: ''
  timestamp: 1659978026
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    \n    digits = [i for i in x if i > 0]\n    \n    seen = Set()\n    output\
    \ = Vector{Int64}()\n    \n    for digit in digits\n        if digit in seen\n\
    \            continue\n        \n        seen = union(seen, digit)\n        push!(output,\
    \ digit)\n    end\n    \n    return output\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) == [1, 15,\
    \ 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345,\
    \ 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpjyqh1502.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjyqh1502.jl:1\n\
    in expression starting at /tmp/tmpjyqh1502.jl:1\n"
  stdout: ''
  timestamp: 1659978026
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    ans=[]\n    for i in x \n        if rem(i,10)==0 \n            push!(ans,\
    \ i)\n        end\n    end\n    ans\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp9_ny0nhk.jl:23

    '
  stdout: "test set: Test Failed at /tmp/tmp9_ny0nhk.jl:26\n  Expression: candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n   Evaluated: Int64[] == [1, 15, 33]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9_ny0nhk.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9_ny0nhk.jl:25\ntest set: Test\
    \ Failed at /tmp/tmp9_ny0nhk.jl:27\n  Expression: candidate([152, 323, 1422, 10])\
    \ == Vector{Int64}([])\n   Evaluated: [10] == Int64[]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9_ny0nhk.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9_ny0nhk.jl:25\ntest set: Test\
    \ Failed at /tmp/tmp9_ny0nhk.jl:28\n  Expression: candidate([12345, 2033, 111,\
    \ 151]) == [111, 151]\n   Evaluated: Int64[] == [111, 151]\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9_ny0nhk.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9_ny0nhk.jl:25\ntest set: Test\
    \ Failed at /tmp/tmp9_ny0nhk.jl:29\n  Expression: candidate([135, 103, 31]) ==\
    \ [31, 135]\n   Evaluated: Int64[] == [31, 135]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp9_ny0nhk.jl:29 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp9_ny0nhk.jl:25\nTest Summary: | Fail  Total\n\
    test set      |    4      4\n"
  timestamp: 1659978028
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    flag = zeros(Int, length(x))\n    flag[x] = true\n    z = zeros(Int, length(x))\n\
    \    for (i in 1:length(x))\n        if i==1 || flag[i-1]\n            continue\n\
    \        j = 1\n        z = z + x[i]\n        while x[j] <= z && j < length(x)\n\
    \            if flag[j-1]\n                flag[j] = false\n            end\n\
    \            z = z + x[j]\n            j = j + 1\n        end\n        if z ==\
    \ x[i]\n            flag[i] = false\n        end\n    end\n    return unique(x[flag])\n\
    end\n\"\"\"\nGiven a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any odd digit.\nusing Test\n\n@testset begin\n\
    \ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) == [1, 15,\
    \ 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345,\
    \ 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid iteration specification\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppm_srou5.jl:17\nin expression starting at\
    \ /tmp/tmppm_srou5.jl:17\n"
  stdout: ''
  timestamp: 1659978026
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    unique_digits= Vector{Int64}[]\n    for i in x\n        if i.rem == 0\n \
    \           if i not in unique_digits\n                push!(unique_digits,i)\n\
    \            end\n        end\n    end\n    return unique_digits\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422,\
    \ 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpcqtusinp.jl:25

    '
  stdout: "test set: Error During Test at /tmp/tmpcqtusinp.jl:28\n  Test threw exception\n\
    \  Expression: candidate([15, 33, 1422, 1]) == [1, 15, 33]\n  type Int64 has no\
    \ field rem\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n\
    \   [2] unique_digits(x::Vector{Int64})\n     @ Main /tmp/tmpcqtusinp.jl:15\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpcqtusinp.jl:28 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpcqtusinp.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpcqtusinp.jl:29\n  Test threw exception\n  Expression:\
    \ candidate([152, 323, 1422, 10]) == Vector{Int64}([])\n  type Int64 has no field\
    \ rem\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2]\
    \ unique_digits(x::Vector{Int64})\n     @ Main /tmp/tmpcqtusinp.jl:15\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpcqtusinp.jl:29 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpcqtusinp.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpcqtusinp.jl:30\n  Test threw exception\n  Expression:\
    \ candidate([12345, 2033, 111, 151]) == [111, 151]\n  type Int64 has no field\
    \ rem\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2]\
    \ unique_digits(x::Vector{Int64})\n     @ Main /tmp/tmpcqtusinp.jl:15\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpcqtusinp.jl:30 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpcqtusinp.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpcqtusinp.jl:31\n  Test threw exception\n  Expression:\
    \ candidate([135, 103, 31]) == [31, 135]"
  timestamp: 1659978028
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    unique_digits_rec([], x)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpgb8lkvlw.jl:17

    '
  stdout: "test set: Error During Test at /tmp/tmpgb8lkvlw.jl:20\n  Test threw exception\n\
    \  Expression: candidate([15, 33, 1422, 1]) == [1, 15, 33]\n  UndefVarError: unique_digits_rec\
    \ not defined\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main\
    \ /tmp/tmpgb8lkvlw.jl:13\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpgb8lkvlw.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpgb8lkvlw.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpgb8lkvlw.jl:21\n  Test threw exception\n  Expression:\
    \ candidate([152, 323, 1422, 10]) == Vector{Int64}([])\n  UndefVarError: unique_digits_rec\
    \ not defined\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main\
    \ /tmp/tmpgb8lkvlw.jl:13\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpgb8lkvlw.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpgb8lkvlw.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpgb8lkvlw.jl:22\n  Test threw exception\n  Expression:\
    \ candidate([12345, 2033, 111, 151]) == [111, 151]\n  UndefVarError: unique_digits_rec\
    \ not defined\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main\
    \ /tmp/tmpgb8lkvlw.jl:13\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpgb8lkvlw.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpgb8lkvlw.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpgb8lkvlw.jl:23\n  Test threw exception\n  Expression:\
    \ candidate([135, 103, 31]) == [31, 135]\n  UndefVarError: unique_digits_rec not\
    \ defined\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int"
  timestamp: 1659978028
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    # implement here\nend\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\
    \t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpx1w1xf42.jl:17

    '
  stdout: "test set: Error During Test at /tmp/tmpx1w1xf42.jl:20\n  Test threw exception\n\
    \  Expression: candidate([15, 33, 1422, 1]) == [1, 15, 33]\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type Vector{Int64}\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at ~/.conda/envs/polyglot/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main /tmp/tmpx1w1xf42.jl:14\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpx1w1xf42.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpx1w1xf42.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpx1w1xf42.jl:21\n  Test threw exception\n  Expression:\
    \ candidate([152, 323, 1422, 10]) == Vector{Int64}([])\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type Vector{Int64}\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at ~/.conda/envs/polyglot/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main /tmp/tmpx1w1xf42.jl:14\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpx1w1xf42.jl:21 [inlined]\n\
    \   [4] "
  timestamp: 1659978030
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    x = sort(x)\n    \n    for i in 2:length(unique(x))\n        if iseven(x[i])\n\
    \            push!(unique(x), x[i])\n        end\n    end\n    return unique(x)\n\
    end\n</cell>\n<code language=julia-0.5>\nunique_digits([15,33,1422,1])\n</cell>\n\
    <code language=julia-0.5>\nunique_digits([152, 323, 1422, 10])\n</cell>\n<text>\n\
    2.3 The first 500 odd numbers\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\
    \t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_010omul.jl:22\nin expression starting at\
    \ /tmp/tmp_010omul.jl:22\n"
  stdout: ''
  timestamp: 1659978026
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    # write your code in Julia 0.6 or later\n    # Solution 2\n    return sort(unique(x))\
    \ \nend\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp9ee6xbr4.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmp9ee6xbr4.jl:22\n  Expression: candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n   Evaluated: [1, 15, 33, 1422] == [1, 15, 33]\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9ee6xbr4.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9ee6xbr4.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp9ee6xbr4.jl:23\n  Expression: candidate([152, 323, 1422, 10])\
    \ == Vector{Int64}([])\n   Evaluated: [10, 152, 323, 1422] == Int64[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9ee6xbr4.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9ee6xbr4.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp9ee6xbr4.jl:24\n  Expression: candidate([12345, 2033, 111,\
    \ 151]) == [111, 151]\n   Evaluated: [111, 151, 2033, 12345] == [111, 151]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9ee6xbr4.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9ee6xbr4.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp9ee6xbr4.jl:25\n  Expression: candidate([135, 103, 31]) ==\
    \ [31, 135]\n   Evaluated: [31, 103, 135] == [31, 135]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9ee6xbr4.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9ee6xbr4.jl:21\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  timestamp: 1659978028
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    for n in unique(x) do if div(n,10) == 0 then push!(x, n) else break end end\n\
    \    x\nend\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"push!\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp4rls_hdd.jl:13\nin expression starting at /tmp/tmp4rls_hdd.jl:13\n"
  stdout: ''
  timestamp: 1659978027
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    if length(x)==0 \n        return [] \n    else \n        sorted_x = sort(x)\
    \ \n        no_even_digit = sorted_x[findall(x .%2 == 0)] \n        unique_digits\
    \ = unique_digits(no_even_digit) \n        unique_digits += x \n        return\
    \ unique_digits \nend\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\
    \t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpsdvpyz8c.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpsdvpyz8c.jl:1\n\
    in expression starting at /tmp/tmpsdvpyz8c.jl:1\n"
  stdout: ''
  timestamp: 1659978027
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    vec = Vector{Int64}[]\n    vec_copy=Vector{Int64}(x)\n    vec_copy[1]=NaN\n\
    \    vec_copy.sort\n    for i in 2:length(vec_copy)\n        if isnan(vec_copy[i])\n\
    \            continue \n        end\n        if vec_copy[i]%2==0\n           \
    \ push!(vec,vec_copy[i])\n        end\n    end\n    sort(vec)\nend\n</code>\n\
    <|/ a |>\n<| a tags=function,sorting,algorithm,vector,julia |>\n<code>\nusing\
    \ BenchmarkTools\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\
    \t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9byocbsx.jl:27\nin expression starting at\
    \ /tmp/tmp9byocbsx.jl:27\n"
  stdout: ''
  timestamp: 1659978028
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    \n    ans = Vector{Int64}()\n    for i in x\n        for j in 1:length(ans)\n\
    \            if (ans[j] == 0)\n                ans[j] = i\n            end\n \
    \       end\n    end\n    ans\nend\n</cell>\n<code language=julia-1.4>\n\"\"\"\
    \nGiven a vector of positive integers, sort them into increasing order and \n\
    remove duplicates. If the original vector has duplicates, keep the first \none.\n\
    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwojtgzjr.jl:24\nin expression starting at\
    \ /tmp/tmpwojtgzjr.jl:24\n"
  stdout: ''
  timestamp: 1659978028
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    unique_x = Vector{Int64}()\n    for i in x\n        if i %% 2 == 0\n    \
    \        unique_x << i\n        end\n    end\n    return unique_x\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"%\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphtbwmae2.jl:15\nin expression starting at\
    \ /tmp/tmphtbwmae2.jl:15\n"
  stdout: ''
  timestamp: 1659978028
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    digits = []\n    for i in x\n        push!(digits, digits(i))\n    end\n\
    \    digits = sort(digits)\n    return digits[2:end]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) ==\
    \ [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmp1hh5stsb.jl:22

    '
  stdout: "test set: Error During Test at /tmp/tmp1hh5stsb.jl:25\n  Test threw exception\n\
    \  Expression: candidate([15, 33, 1422, 1]) == [1, 15, 33]\n  MethodError: objects\
    \ of type Vector{Any} are not callable\n  Use square brackets [] for indexing\
    \ an Array.\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main\
    \ /tmp/tmp1hh5stsb.jl:15\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp1hh5stsb.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp1hh5stsb.jl:24\ntest set:\
    \ Error During Test at /tmp/tmp1hh5stsb.jl:26\n  Test threw exception\n  Expression:\
    \ candidate([152, 323, 1422, 10]) == Vector{Int64}([])\n  MethodError: objects\
    \ of type Vector{Any} are not callable\n  Use square brackets [] for indexing\
    \ an Array.\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main\
    \ /tmp/tmp1hh5stsb.jl:15\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp1hh5stsb.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp1hh5stsb.jl:24\ntest set:\
    \ Error During Test at /tmp/tmp1hh5stsb.jl:27\n  Test threw exception\n  Expression:\
    \ candidate([12345, 2033, 111, 151]) == [111, 151]\n  MethodError: objects of\
    \ type Vector{Any} are not callable\n  Use square brackets [] for indexing an\
    \ Array.\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main /tmp/tmp1hh5stsb.jl:15\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp1hh5stsb.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp1hh5stsb.jl:24\ntest set:\
    \ Error During Test at /tmp/tmp1hh"
  timestamp: 1659978031
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    digits = Vector{Int64}()\n    for i in x\n        push!(digits, floor(i))\n\
    \    end\n    filter!((x -> x % 2 != 0), (digits))\nend\n</cell>\n<code language=julia-1.3>\n\
    unique_digits([15, 33, 1422, 1])\n</cell>\n<text>\nPart 5: Problem Solving - Q10\n\
    Given a vector of numbers, return a new vector where each element is the product\
    \ of all the numbers before it.\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\
    \t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptooajzyb.jl:19\nin expression starting at\
    \ /tmp/tmptooajzyb.jl:19\n"
  stdout: ''
  timestamp: 1659978028
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \ \n    if length(x) == 0 \n        return x \n    end\nusing Test\n\n@testset\
    \ begin\n\ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) ==\
    \ [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpgld4ji22.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpgld4ji22.jl:1\n\
    in expression starting at /tmp/tmpgld4ji22.jl:1\n"
  stdout: ''
  timestamp: 1659978028
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    if length(x)==0 \n        x \n    else \n        unique_digits([x[0]] + unique_digits(filter(x->x\
    \ %% 2 ==0, x:(last(x))))) \n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"%\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7gt_l3j7.jl:16\nin expression starting at\
    \ /tmp/tmp7gt_l3j7.jl:16\n"
  stdout: ''
  timestamp: 1659978028
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    v = Vector{Int64}()\n    push!(v, 0)\n    for i in x\n        if mod(i, 10)\
    \ == 0 && i > 0\n            if !contains(v, i-10)\n                push!(v, i-10)\n\
    \            end\n        end\n    end\n    return v\nend\n</cell>\n<code language=julia-1.6>\n\
    @assert unique_digits([15, 33, 1422, 1]) == [1 ; 15 ; 33]\n@assert unique_digits([152,\
    \ 323, 1422, 10]) == []\n</cell>\n<code language=julia-1.6>\n\"\"\"Find out all\
    \ prime factor of given number\"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpue5wemlj.jl:24\nin expression starting at\
    \ /tmp/tmpue5wemlj.jl:24\n"
  stdout: ''
  timestamp: 1659978028
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \ \n    if sum(x) == 0 \n        Vector{Int64}() \n    else\n        Vector{Int64}(x[x\
    \ .!= 0]) \n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\
    \t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp1q0h0267.jl:22

    '
  stdout: "test set: Test Failed at /tmp/tmp1q0h0267.jl:25\n  Expression: candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n   Evaluated: [15, 33, 1422, 1] == [1, 15, 33]\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1q0h0267.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1q0h0267.jl:24\ntest set: Test\
    \ Failed at /tmp/tmp1q0h0267.jl:26\n  Expression: candidate([152, 323, 1422, 10])\
    \ == Vector{Int64}([])\n   Evaluated: [152, 323, 1422, 10] == Int64[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1q0h0267.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1q0h0267.jl:24\ntest set: Test\
    \ Failed at /tmp/tmp1q0h0267.jl:27\n  Expression: candidate([12345, 2033, 111,\
    \ 151]) == [111, 151]\n   Evaluated: [12345, 2033, 111, 151] == [111, 151]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1q0h0267.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1q0h0267.jl:24\ntest set: Test\
    \ Failed at /tmp/tmp1q0h0267.jl:28\n  Expression: candidate([135, 103, 31]) ==\
    \ [31, 135]\n   Evaluated: [135, 103, 31] == [31, 135]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1q0h0267.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1q0h0267.jl:24\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  timestamp: 1659978029
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    unique_digits_1 = Vector{Int64}()\n    for i in x:\n        if i mod 2 ==\
    \ 0 && i !=0 \n            push!(unique_digits_1, i)\n        end\n    end\n \
    \   return unique_digits_1\nend\n</cell>\n<text>\nExercise 4\nDefine a function\
    \ called digits that takes a positive integer and returns a Vector containing\
    \ its digits.  For example digits(15) should return [1, 1, 3].  It should work\
    \ even if x is negative.\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\
    \t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp96dr2rmx.jl:15\nin expression starting at\
    \ /tmp/tmp96dr2rmx.jl:15\n"
  stdout: ''
  timestamp: 1659978028
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    if x.sum() == 0 return []\n    v = x[find(x) != x] \n    if length(v) ==\
    \ 1 \n        return v\n    else \n        return [v[1]] + unique_digits(v[2:end])\n\
    end\n</code>\n<|/ a dscore=4 |>\n<| c |>\nThis is a nice recursive solution. However,\
    \ the complexity is `O(N^2)` where N is the number of elements in the original\
    \ vector.\n<|/ c |>\n<| a dscore=4 |>\nTo expand on answer, this solution will\
    \ work with an arbitrary set of elements, not just Int64. \n<code>\nusing Sets\n\
    using Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpe__0zl2i.jl:20\nin expression starting at\
    \ /tmp/tmpe__0zl2i.jl:20\n"
  stdout: ''
  timestamp: 1659978028
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    for i in sort(x)\n        if even(i) == false\n            return Vector{Int64}([i])\n\
    \        end\n    end\n    return Vector{Int64}[]\nend\n</cell>\n<code language=julia-1.4>\n\
    unique_digits([15, 33, 1422, 1])\n</cell>\n<code language=julia-1.4>\nusing Test\n\
    \n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422,\
    \ 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzwy9hqe1.jl:20\nin expression starting at\
    \ /tmp/tmpzwy9hqe1.jl:20\n"
  stdout: ''
  timestamp: 1659978028
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    if length(x) == 0 \n        return x \n    \n    unique_digits_tmp = x\n\
    \    for i = 2:length(x) \n        flag = trues(length(x))\n        for j = 1:length(x)\
    \ \n            if x[j] % i == 0 \n                flag[j] = 0\n            else\
    \ \n                break\n        end\n        if any(flag)\n            unique_digits_tmp\
    \ = setdiff(unique_digits_tmp, x)\n            break\n        else\n         \
    \   push!(unique_digits_tmp, i)\n        end\n    end\n    \n    unique_digits_tmp\n\
    end\n</cell>\n<code language=julia-1.5>\nunique_digits([1, 12])\n</cell>\n<code\
    \ language=julia-1.5>\nunique_digits([1])\n</cell>\n<code language=julia-1.5>\n\
    unique_digits([1, 2])\n</cell>\n<code language=julia-1.5>\nunique_digits([1, 2,\
    \ 3])\n</cell>\n<code language=julia-1.5>\nunique_digits([1, 2, 3, 5])\n</cell>\n\
    <code language=julia-1.5>\nunique_digits([1, 2, 3, 5])\n</cell>\n<code language=julia-1.5>\n\
    unique_digits([1, 2, 3, 5])\n</cell>\n<code language=julia-1.5>\nunique_digits([1,\
    \ 2, 3, 5])\n</cell>\n<code language=julia-1.5>\nunique_digits([1, 2, 3, 5])\n\
    </cell>\n<code language=julia-1.5>\nunique_digits([1, 2, 3, 5])\n</cell>\n<code\
    \ language=julia-1.5>\nunique_digits([1, 2, 3, 5])\n</cell>\n<code language=julia-1.5>\n\
    unique_digits([1, 2, 3, 5])\n</cell>\n<code language=julia-1.5>\nunique_digits([1,\
    \ 2, 3, 5])\n</cell>\n<code language=julia-1.5>\nunique_digits([1, 2, 3, 5])\n\
    </cell>\n<code language=julia-1.5>\nunique_digits([1, 2, 3, 5])\n</cell>\n<code\
    \ language=julia-1.5>\nunique_digits([1, 2, 3, 5])\n</cell>\n<code language=julia-1.5>\n\
    unique_digits([1, 2, 3, 5])\n</cell>\n<code language=julia-1.5>\nunique_digits([1,\
    \ 2, 3, 5])\n</cell>\n<code language=julia-1.5>\nunique_digits([1, 2, 3, 5])\n\
    </cell>\n<code language=julia-1.5>\nunique_digits([1, 2, 3, 5])\n</cell>\n<code\
    \ language=julia-1.5>\nunique_digits([1, 2, 3, 5])\n</cell>\n<code language=julia-1.5>\n\
    unique_digits([1, 2, 3, 5])\n</cell>\n<code language=julia-1.5>\nunique_digits([1,\
    \ 2, 3, 5])\n</cell>\n<code language=julia-1.5>\nunique_digits([1, 2, 3, 5])\n\
    </cell>\n<code language=\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\
    \t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqwumuovy.jl:35\nin expression starting at\
    \ /tmp/tmpqwumuovy.jl:35\n"
  stdout: ''
  timestamp: 1659978028
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    \"\"\"\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>>\
    \ unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    return [xx for\
    \ xx in x if ! (xx % 2)]\nend\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\
    \t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmptc849bw3.jl:23

    '
  stdout: "test set: Error During Test at /tmp/tmptc849bw3.jl:26\n  Test threw exception\n\
    \  Expression: candidate([15, 33, 1422, 1]) == [1, 15, 33]\n  MethodError: no\
    \ method matching !(::Int64)\n  Closest candidates are:\n    !(!Matched::Function)\
    \ at ~/.conda/envs/polyglot/share/julia/base/operators.jl:1117\n    !(!Matched::Bool)\
    \ at ~/.conda/envs/polyglot/share/julia/base/bool.jl:35\n    !(!Matched::Missing)\
    \ at ~/.conda/envs/polyglot/share/julia/base/missing.jl:101\n  Stacktrace:\n \
    \   [1] (::var\"#1#2\")(xx::Int64)\n      @ Main ./none:0\n    [2] iterate\n \
    \     @ ./iterators.jl:447 [inlined]\n    [3] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [4] grow_to!\n      @ ./array.jl:797 [inlined]\n    [5] collect\n\
    \      @ ./array.jl:721 [inlined]\n    [6] unique_digits(x::Vector{Int64})\n \
    \     @ Main /tmp/tmptc849bw3.jl:19\n    [7] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [8] macro expansion\n      @ /tmp/tmptc849bw3.jl:26 [inlined]\n\
    \    [9] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [10] top-level scope\n      @ /tmp/tmptc849bw3.jl:25\ntest set:\
    \ Error During Test at /tmp/tmptc849bw3.jl:27\n  Test threw exception\n  Expression:\
    \ candidate([152, 323, 1422, 10]) == Vector{Int64}([])\n  MethodError: no method\
    \ matching !(::Int64)\n  Closest candidates are:\n    !(!Matched::Function) at\
    \ ~/.conda/envs/polyglot/share/julia/base/operators.jl:1117\n    !(!Matched::Bool)\
    \ at ~/.conda/envs/polyglot/share/julia/base/bool.jl:35\n    !(!Matched::Missing)\
    \ at ~/.conda/envs/polyglot/share/julia/base/missing.jl:101\n  Stacktrace:\n \
    \   [1] (::var\"#1#2\")(xx::Int64)\n      @ Main ./none:0\n    [2] iterate\n \
    \     @ ./iterators.jl:447 [inlined]\n    [3] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [4] grow_to!\n      @ ./array.jl:797 [inlined]\n    [5] collect\n\
    \      @ ./array.jl:721 [inlined]\n    [6] unique_digits(x::Vector{Int64})\n \
    \     @ Main /tmp/tmptc849bw3.jl:19\n    [7] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:"
  timestamp: 1659978031
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    for x in unique_digits(x)\n        if x % 2 == 0\n        else append(x,\
    \ x)\n    end\n    return x\nend\n</code>\n<|/ a tags=functional-programming,julia,recursion\
    \ dscore=1 |>\n<| a dscore=1 |>\nA very basic functional approach could look like\
    \ this:\n<code>\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t\
    @test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323,\
    \ 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111, 151])\
    \ == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5yay5nv2.jl:19\nin expression starting at\
    \ /tmp/tmp5yay5nv2.jl:19\n"
  stdout: ''
  timestamp: 1659978029
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    # Your code here\nend\n</cell>\n<code language=julia-0.6>\n# Test Your Code\n\
    using Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpaco9xncd.jl:15\nin expression starting at\
    \ /tmp/tmpaco9xncd.jl:15\n"
  stdout: ''
  timestamp: 1659978030
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    digits = unique(sort(x))\n    evens = filter(x -> rem(x, 10) == 0, x)\n \
    \   return evens\nend\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\
    \t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpizhftqrk.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmpizhftqrk.jl:22\n  Expression: candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n   Evaluated: Int64[] == [1, 15, 33]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpizhftqrk.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpizhftqrk.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpizhftqrk.jl:23\n  Expression: candidate([152, 323, 1422, 10])\
    \ == Vector{Int64}([])\n   Evaluated: [10] == Int64[]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpizhftqrk.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpizhftqrk.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpizhftqrk.jl:24\n  Expression: candidate([12345, 2033, 111,\
    \ 151]) == [111, 151]\n   Evaluated: Int64[] == [111, 151]\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpizhftqrk.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpizhftqrk.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpizhftqrk.jl:25\n  Expression: candidate([135, 103, 31]) ==\
    \ [31, 135]\n   Evaluated: Int64[] == [31, 135]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpizhftqrk.jl:25 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpizhftqrk.jl:21\nTest Summary: | Fail  Total\n\
    test set      |    4      4\n"
  timestamp: 1659978031
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    unique_digits = Set{Int64}()\n    for i in x \n        if i%2 == 0 \n   \
    \         unique_digits += [i] \n        end \n    end \n    return unique_digits[end]\n\
    end \nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmp8k38zqmd.jl:23

    '
  stdout: "test set: Error During Test at /tmp/tmp8k38zqmd.jl:26\n  Test threw exception\n\
    \  Expression: candidate([15, 33, 1422, 1]) == [1, 15, 33]\n  MethodError: no\
    \ method matching +(::Set{Int64}, ::Vector{Int64})\n  Closest candidates are:\n\
    \    +(::Any, ::Any, !Matched::Any, !Matched::Any...) at ~/.conda/envs/polyglot/share/julia/base/operators.jl:655\n\
    \    +(!Matched::SparseArrays.AbstractSparseMatrixCSC, ::Array) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/SparseArrays/src/sparsematrix.jl:1774\n\
    \    +(!Matched::Array, ::Array...) at ~/.conda/envs/polyglot/share/julia/base/arraymath.jl:43\n\
    \    ...\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main /tmp/tmp8k38zqmd.jl:16\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp8k38zqmd.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp8k38zqmd.jl:25\ntest set:\
    \ Error During Test at /tmp/tmp8k38zqmd.jl:27\n  Test threw exception\n  Expression:\
    \ candidate([152, 323, 1422, 10]) == Vector{Int64}([])\n  MethodError: no method\
    \ matching +(::Set{Int64}, ::Vector{Int64})\n  Closest candidates are:\n    +(::Any,\
    \ ::Any, !Matched::Any, !Matched::Any...) at ~/.conda/envs/polyglot/share/julia/base/operators.jl:655\n\
    \    +(!Matched::SparseArrays.AbstractSparseMatrixCSC, ::Array) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/SparseArrays/src/sparsematrix.jl:1774\n\
    \    +(!Matched::Array, ::Array...) at ~/.conda/envs/polyglot/share/julia/base/arraymath.jl:43\n\
    \    ...\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main /tmp/tmp8k38zqmd.jl:16\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp8k38zqmd.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp8k38zqmd.jl:25\ntest set:"
  timestamp: 1659978033
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    \n    result = Vector{Int64}()\n    for i in x\n        if i > 0 && mod(i,\
    \ 10) == 0\n            push!(result, i)\n        end\n    end\n    sort!(result)\n\
    \    return result\nend\n</cell>\n<text>\nQuestion 1.\nGiven a vector of positive\
    \ integers x. return a sorted vector of all elements that hasn't any even digit\
    \ and also contains some negative integer y.\nusing Test\n\n@testset begin\n\n\
    candidate = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\
    \t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345,\
    \ 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3lat05ae.jl:23\nin expression starting at\
    \ /tmp/tmp3lat05ae.jl:23\n"
  stdout: ''
  timestamp: 1659978030
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \"\"\"\n    \n\"\"\"\n    Vector: unique_digits(x::Vector)\n    \n    Function\
    \ that return unique integers inside vector\n    \n    x -- vector of numbers\n\
    \    \n    For example:\n    >>> unique_digits([0, 1, 2, 5])\n    [0, 2, 5]\n\
    \    >>> unique_digits([152, 323, 1422, 10])\n    [10, 1422, 323]\n\"\"\"\nusing\
    \ Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"function\" at /tmp/tmpidmx4fmn.jl:12 expected\
    \ \"end\", got \"that\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpidmx4fmn.jl:18\n\
    in expression starting at /tmp/tmpidmx4fmn.jl:18\n"
  stdout: ''
  timestamp: 1659978030
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    if length(x) == 0\n        return []\n    else if length(x) == 1\n      \
    \  if x % 2 == 0\n            return [x]\n        else\n            return []\n\
    \    end\n    digits = sort(x, by = x->mod(x, 10))\n    return digits[2:end-1]\n\
    end\n</cell>\n<text>\nSolution:\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\
    \t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptel3d7zx.jl:15\nin expression starting at\
    \ /tmp/tmptel3d7zx.jl:15\n"
  stdout: ''
  timestamp: 1659978030
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    \n    unique_digits = Int64[]\n    \n    for i = 1:length(x)\n        if\
    \ x[i] % 2 != 0\n            push!(unique_digits, x[i])\n        end\n    end\n\
    \    \n    return sort(unique_digits)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp10drjiy2.jl:26

    '
  stdout: "test set: Test Failed at /tmp/tmp10drjiy2.jl:30\n  Expression: candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([])\n   Evaluated: [323] == Int64[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp10drjiy2.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp10drjiy2.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp10drjiy2.jl:31\n  Expression: candidate([12345, 2033, 111,\
    \ 151]) == [111, 151]\n   Evaluated: [111, 151, 2033, 12345] == [111, 151]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp10drjiy2.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp10drjiy2.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp10drjiy2.jl:32\n  Expression: candidate([135, 103, 31]) ==\
    \ [31, 135]\n   Evaluated: [31, 103, 135] == [31, 135]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp10drjiy2.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp10drjiy2.jl:28\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  timestamp: 1659978031
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    unique = Set()\n    for el in x \n        if el%2 == 0 \n            if !has(unique,\
    \ el) \n                insert(unique, el)\n            end\n        end\n   \
    \ end\n    unique\nend\n</cell>\n<code language=julia-1.4>\nunique_digits(1:10)\n\
    </cell>\n<text>\nWrite a program that returns all permutations of the given string.\n\
    using Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfrb__4cz.jl:23\nin expression starting at\
    \ /tmp/tmpfrb__4cz.jl:23\n"
  stdout: ''
  timestamp: 1659978030
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    for i in x\n        dig = log10(i)\n        if dig > 0\n            digit\
    \ = div(digit, 10)\n            if digit == 0\n                push!(result, i)\n\
    \            end\n        end\n    end\n    return result\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422,\
    \ 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmphuffyvyv.jl:26

    '
  stdout: "test set: Error During Test at /tmp/tmphuffyvyv.jl:29\n  Test threw exception\n\
    \  Expression: candidate([15, 33, 1422, 1]) == [1, 15, 33]\n  UndefVarError: digit\
    \ not defined\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main\
    \ /tmp/tmphuffyvyv.jl:16\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmphuffyvyv.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmphuffyvyv.jl:28\ntest set:\
    \ Error During Test at /tmp/tmphuffyvyv.jl:30\n  Test threw exception\n  Expression:\
    \ candidate([152, 323, 1422, 10]) == Vector{Int64}([])\n  UndefVarError: digit\
    \ not defined\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main\
    \ /tmp/tmphuffyvyv.jl:16\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmphuffyvyv.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmphuffyvyv.jl:28\ntest set:\
    \ Error During Test at /tmp/tmphuffyvyv.jl:31\n  Test threw exception\n  Expression:\
    \ candidate([12345, 2033, 111, 151]) == [111, 151]\n  UndefVarError: digit not\
    \ defined\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main\
    \ /tmp/tmphuffyvyv.jl:16\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmphuffyvyv.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmphuffyvyv.jl:28\ntest set:\
    \ Error During Test at /tmp/tmphuffyvyv.jl:32\n  Test threw exception\n  Expression:\
    \ candidate([135, 103, 31]) == [31, 135]\n  UndefVarError: digit not defined\n\
    \  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main /tmp/tmphuffyvyv.jl:16\n\
    \   [2] m"
  timestamp: 1659978031
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    length = length(x)\n    unique_digits = Vector{Int64}()\n    for i = 1:length\n\
    \        if x[i] % 2 != 0\n            push!(unique_digits, x[i])\n        end\n\
    \    end\n    return sort(unique_digits)\nend\n</cell>\n<text>\nExercise 9\nWrite\
    \ a Julia code to compute the following function:\n$$\n\\begin{equation}\n   \
    \ \\begin{cases}\n    \\dot{x} & = \\begin{cases}\n    1 & \\text{if } x \\gt\
    \ 0 \\\\\n    0 & \\text{if } x \\leq 0 \n    \\end{cases} \\\\\n    \\dot{x}\
    \ & = \\begin{cases}\n    -1 & \\text{if } x \\gt 0 \\\\\n    0 & \\text{if }\
    \ x \\leq 0 \n    \\end{cases}\n    \\end{cases}\n\\end{equation}\n$$\nusing Test\n\
    \n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422,\
    \ 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjsxhx1_5.jl:22\nin expression starting at\
    \ /tmp/tmpjsxhx1_5.jl:22\n"
  stdout: ''
  timestamp: 1659978030
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    # write your code in here\nend\n</cell>\n<text>\nProblem 3.2\nWrite a function\
    \ to get all positive integers less than a certain number n.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) ==\
    \ [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1niwvywh.jl:15\nin expression starting at\
    \ /tmp/tmp1niwvywh.jl:15\n"
  stdout: ''
  timestamp: 1659978030
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    if length(x) == 0 \n        return Vector{Int64}() \n    else if length(x)\
    \ == 1 \n        return x \n    end\n    evens = filter(x->mod(x, 2) == 0, x)\
    \ \n    return unique_digits(filter(x->!iszero(x), x)) \nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) ==\
    \ [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkrilbr7i.jl:15\nin expression starting at\
    \ /tmp/tmpkrilbr7i.jl:15\n"
  stdout: ''
  timestamp: 1659978030
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    unique_digits = Set()\n    for i in x\n        push!(unique_digits, Int(i))\n\
    \    end\n    unique_digits\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpeef2_hji.jl:21

    '
  stdout: "test set: Error During Test at /tmp/tmpeef2_hji.jl:24\n  Test threw exception\n\
    \  Expression: candidate([15, 33, 1422, 1]) == [1, 15, 33]\n  MethodError: Cannot\
    \ `convert` an object of type Set{Any} to an object of type Vector{Int64}\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at ~/.conda/envs/polyglot/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main /tmp/tmpeef2_hji.jl:17\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpeef2_hji.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpeef2_hji.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpeef2_hji.jl:25\n  Test threw exception\n  Expression:\
    \ candidate([152, 323, 1422, 10]) == Vector{Int64}([])\n  MethodError: Cannot\
    \ `convert` an object of type Set{Any} to an object of type Vector{Int64}\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at ~/.conda/envs/polyglot/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main /tmp/tmpeef2_hji.jl:17\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpeef2_hji.jl:25 [inlined]\n\
    \   [4"
  timestamp: 1659978033
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    if x.isEmpty || x.size < 2 \n        return x \n    \n    \n        digits\
    \ = [Int64[] for _ in 1:x.size]\n        for e in x \n            digits[e % 10]\
    \ <- (digits[e % 10] .+ [e])\n        end\n        for d in digits\n         \
    \   push!(d, 0) \n        end\n        \n        for i in 1:x.size-1\n       \
    \     if digits[i][1] != digits[i+1][1] && digits[i][1] == 0 \n              \
    \  push!(digits[i], digits[i+1][1])\n            end\n        end\n        \n\
    \        \n    \n        return Vector{Int64}(digits)\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422,\
    \ 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpscnth97s.jl:38

    '
  stdout: "test set: Error During Test at /tmp/tmpscnth97s.jl:41\n  Test threw exception\n\
    \  Expression: candidate([15, 33, 1422, 1]) == [1, 15, 33]\n  type Array has no\
    \ field isEmpty\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n\
    \   [2] unique_digits(x::Vector{Int64})\n     @ Main /tmp/tmpscnth97s.jl:13\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpscnth97s.jl:41 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpscnth97s.jl:40\ntest set:\
    \ Error During Test at /tmp/tmpscnth97s.jl:42\n  Test threw exception\n  Expression:\
    \ candidate([152, 323, 1422, 10]) == Vector{Int64}([])\n  type Array has no field\
    \ isEmpty\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n\
    \   [2] unique_digits(x::Vector{Int64})\n     @ Main /tmp/tmpscnth97s.jl:13\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpscnth97s.jl:42 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpscnth97s.jl:40\ntest set:\
    \ Error During Test at /tmp/tmpscnth97s.jl:43\n  Test threw exception\n  Expression:\
    \ candidate([12345, 2033, 111, 151]) == [111, 151]\n  type Array has no field\
    \ isEmpty\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n\
    \   [2] unique_digits(x::Vector{Int64})\n     @ Main /tmp/tmpscnth97s.jl:13\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpscnth97s.jl:43 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpscnth97s.jl:40\ntest set:\
    \ Error During Test at /tmp/tmpscnth97s.jl:44\n  Test threw exception\n  Expression:\
    \ candidate([135, 103, 31]) "
  timestamp: 1659978032
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    for i in x\n        if i%2==0 \n            continue\n        push!(result,\
    \ i)\n    end\n    return result\nend\n</cell>\n<text>\nQuestion 13\nLet us write\
    \ a function that checks if a number is a palindrome or not.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) ==\
    \ [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8p3tpm6f.jl:20\nin expression starting at\
    \ /tmp/tmp8p3tpm6f.jl:20\n"
  stdout: ''
  timestamp: 1659978030
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    if length(x) == 0\n        []\n    elseif length(x) == 1\n        [1]\n \
    \   else\n        unique(sort(x)) .+ unique_digits(map(x -> mod(x, 10), x))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpqwx2i1fw.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpqwx2i1fw.jl:1\n\
    in expression starting at /tmp/tmpqwx2i1fw.jl:1\n"
  stdout: ''
  timestamp: 1659978030
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    if length(x) == 0 \n        return Vector{Int64}()\n    \n    let m = minimum(x)\n\
    \    \n    if m % 2 == 0 \n        push!(result, m)\n    \n    for i in x\n  \
    \      if i % 2 == 0\n            push!(result, i)\n        end\n    end\n   \
    \ \n    return result\nend\n</cell>\n<code language=julia-1.5>\n@assert length(unique_digits([15,\
    \ 33, 1422, 1])) == 3\n@assert length(unique_digits([152, 323, 1422, 10])) ==\
    \ 0\n</cell>\n<text>\n4.3 The maximum product of given three integers\nDefine\
    \ a function that takes three integers and returns the product of the three given\
    \ integers, also return the maximum product of the three given integers.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmph7u5y4m0.jl:29\nin expression starting at\
    \ /tmp/tmph7u5y4m0.jl:29\n"
  stdout: ''
  timestamp: 1659978030
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    for i in sort(x)\n        if i mod 2 == 0 && i > 0\n            return filter(x->x!=i,\
    \ x)\n        end\n    end\n    return x\nend\n</cell>\n<code language=julia-1.0>\n\
    \"\"\"\n    unique_evens(x)\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\
    \t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"2\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpuh2050az.jl:14\nin expression starting at /tmp/tmpuh2050az.jl:14\n"
  stdout: ''
  timestamp: 1659978031
- exit_code: -1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    return unique_digits(x)\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659978035
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    return sort(unique(x)) \nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpbrqnkgkx.jl:17

    '
  stdout: "test set: Test Failed at /tmp/tmpbrqnkgkx.jl:20\n  Expression: candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n   Evaluated: [1, 15, 33, 1422] == [1, 15, 33]\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbrqnkgkx.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbrqnkgkx.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpbrqnkgkx.jl:21\n  Expression: candidate([152, 323, 1422, 10])\
    \ == Vector{Int64}([])\n   Evaluated: [10, 152, 323, 1422] == Int64[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbrqnkgkx.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbrqnkgkx.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpbrqnkgkx.jl:22\n  Expression: candidate([12345, 2033, 111,\
    \ 151]) == [111, 151]\n   Evaluated: [111, 151, 2033, 12345] == [111, 151]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbrqnkgkx.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbrqnkgkx.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpbrqnkgkx.jl:23\n  Expression: candidate([135, 103, 31]) ==\
    \ [31, 135]\n   Evaluated: [31, 103, 135] == [31, 135]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbrqnkgkx.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbrqnkgkx.jl:19\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  timestamp: 1659978032
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    for i in 1:length(x)\n        if even(x[i]) == false && x[i] % 2 == 0\n \
    \           push!(ys, x[i])\n        end\n    end\n    return ys\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422,\
    \ 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmp3qdow2nz.jl:22

    '
  stdout: "test set: Error During Test at /tmp/tmp3qdow2nz.jl:25\n  Test threw exception\n\
    \  Expression: candidate([15, 33, 1422, 1]) == [1, 15, 33]\n  UndefVarError: even\
    \ not defined\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main\
    \ /tmp/tmp3qdow2nz.jl:14\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp3qdow2nz.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp3qdow2nz.jl:24\ntest set:\
    \ Error During Test at /tmp/tmp3qdow2nz.jl:26\n  Test threw exception\n  Expression:\
    \ candidate([152, 323, 1422, 10]) == Vector{Int64}([])\n  UndefVarError: even\
    \ not defined\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main\
    \ /tmp/tmp3qdow2nz.jl:14\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp3qdow2nz.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp3qdow2nz.jl:24\ntest set:\
    \ Error During Test at /tmp/tmp3qdow2nz.jl:27\n  Test threw exception\n  Expression:\
    \ candidate([12345, 2033, 111, 151]) == [111, 151]\n  UndefVarError: even not\
    \ defined\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main\
    \ /tmp/tmp3qdow2nz.jl:14\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp3qdow2nz.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp3qdow2nz.jl:24\ntest set:\
    \ Error During Test at /tmp/tmp3qdow2nz.jl:28\n  Test threw exception\n  Expression:\
    \ candidate([135, 103, 31]) == [31, 135]\n  UndefVarError: even not defined\n\
    \  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main /tmp/tmp3qdow2nz.jl:14\n\
    \   [2] macro"
  timestamp: 1659978033
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    unique_digits = []\n    for i in x\n        append!(unique_digits, findall(x->x==i,\
    \ 1:i))\n    end\n    return unique_digits\nend\n</cell>\n<code language=julia-1.5>\n\
    unique_digits([15, 33, 1422, 1])\n</cell>\n<text>\n4.8 Find all the numbers in\
    \ an interval with given range\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\
    \t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpeelkcblf.jl:19\nin expression starting at\
    \ /tmp/tmpeelkcblf.jl:19\n"
  stdout: ''
  timestamp: 1659978031
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    N = length(x)\n    digit_vector = Vector{Int64}(undef, N)\n    \n    for\
    \ i in 1:N\n        digit_vector[i] = digits(x[i])\n    end\n    \n    unique_digit_vector\
    \ = Array{Int64}(undef, N-1)\n    unique_digit_vector[1] = Set{Int64}(digit_vector[1])\n\
    \    unique_digit_vector[2] = Set{Int64}(digit_vector[2])\n    for i in 3:N-1\n\
    \        if !has_even_digit(digit_vector[i])\n            unique_digit_vector[i]\
    \ = Set{Int64}(digit_vector[i])\n        else\n            unique_digit_vector[i+1]\
    \ = union(unique_digit_vector[i], digit_vector[i])\n        end\n    end\n   \
    \ unique_digit_vector[N] = Set{Int64}(digit_vector[N])\n    \n    return unique_digit_vector\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpou3sbzgu.jl:36

    '
  stdout: "test set: Error During Test at /tmp/tmpou3sbzgu.jl:39\n  Test threw exception\n\
    \  Expression: candidate([15, 33, 1422, 1]) == [1, 15, 33]\n  MethodError: Cannot\
    \ `convert` an object of type Vector{Int64} to an object of type Int64\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::Ptr) where T<:Integer at ~/.conda/envs/polyglot/share/julia/base/pointer.jl:23\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:7\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(A::Vector{Int64}, x::Vector{Int64},\
    \ i1::Int64)\n     @ Base ./array.jl:903\n   [2] unique_digits(x::Vector{Int64})\n\
    \     @ Main /tmp/tmpou3sbzgu.jl:17\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpou3sbzgu.jl:39 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpou3sbzgu.jl:38\ntest set:\
    \ Error During Test at /tmp/tmpou3sbzgu.jl:40\n  Test threw exception\n  Expression:\
    \ candidate([152, 323, 1422, 10]) == Vector{Int64}([])\n  MethodError: Cannot\
    \ `convert` an object of type Vector{Int64} to an object of type Int64\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::Ptr) where T<:Integer at ~/.conda/envs/polyglot/share/julia/base/pointer.jl:23\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:7\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(A::Vector{Int64}, x::Vector{Int64},\
    \ i1::Int64)\n     @ Base ./array.jl:903\n   [2] unique_digits(x::Vector{Int64})\n\
    \     @ Main /tmp/tmpou3sbzgu.jl:17\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpou3sbzgu.jl:40 [inli"
  timestamp: 1659978035
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    unique_digits = Vector{Int64}()\n    for i in x\n        if mod(i,2) == 0\n\
    \            push!(unique_digits, i)\n        end\n    end\n    return unique_digits\n\
    end\n</cell>\n<text>\n4.2.4 Solution\nusing Test\n\n@testset begin\n\ncandidate\
    \ = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5uq34y5l.jl:21\nin expression starting at\
    \ /tmp/tmp5uq34y5l.jl:21\n"
  stdout: ''
  timestamp: 1659978031
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    x = [i for i in x]\n    for i in eachindex(x) do \n        if x[i] % 2 ==\
    \ 0 then \n            removeat(x,i) \n        end\n    end\n    return x\nend\n\
    </cell>\n<code language=julia-1.4>\n\"\"\"\nGiven a vector of positive integers\
    \ x. return a sorted vector of all \nelements that haven't any odd digit.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsfwb69hp.jl:21\nin expression starting at\
    \ /tmp/tmpsfwb69hp.jl:21\n"
  stdout: ''
  timestamp: 1659978032
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    for i in eachindex(x)\n        push!(v,x[i])\n    end\n    return v\nend\n\
    using Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpmlbc17j1.jl:20

    '
  stdout: "test set: Error During Test at /tmp/tmpmlbc17j1.jl:23\n  Test threw exception\n\
    \  Expression: candidate([15, 33, 1422, 1]) == [1, 15, 33]\n  UndefVarError: v\
    \ not defined\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main\
    \ /tmp/tmpmlbc17j1.jl:14\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpmlbc17j1.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpmlbc17j1.jl:22\ntest set:\
    \ Error During Test at /tmp/tmpmlbc17j1.jl:24\n  Test threw exception\n  Expression:\
    \ candidate([152, 323, 1422, 10]) == Vector{Int64}([])\n  UndefVarError: v not\
    \ defined\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main\
    \ /tmp/tmpmlbc17j1.jl:14\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpmlbc17j1.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpmlbc17j1.jl:22\ntest set:\
    \ Error During Test at /tmp/tmpmlbc17j1.jl:25\n  Test threw exception\n  Expression:\
    \ candidate([12345, 2033, 111, 151]) == [111, 151]\n  UndefVarError: v not defined\n\
    \  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main /tmp/tmpmlbc17j1.jl:14\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpmlbc17j1.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpmlbc17j1.jl:22\ntest set:\
    \ Error During Test at /tmp/tmpmlbc17j1.jl:26\n  Test threw exception\n  Expression:\
    \ candidate([135, 103, 31]) == [31, 135]\n  UndefVarError: v not defined\n  Stacktrace:\n\
    \   [1] unique_digits(x::Vector{Int64})\n     @ Main /tmp/tmpmlbc17j1.jl:14\n\
    \   [2] macro expansion\n "
  timestamp: 1659978033
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    if x.iszero() || x.size < 2\n        return [x]\n    end\n    unique_digits_aux(x,\
    \ [], 0)\nend\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t\
    @test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323,\
    \ 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111, 151])\
    \ == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpyi_7bpl1.jl:20

    '
  stdout: "test set: Error During Test at /tmp/tmpyi_7bpl1.jl:23\n  Test threw exception\n\
    \  Expression: candidate([15, 33, 1422, 1]) == [1, 15, 33]\n  type Array has no\
    \ field iszero\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n\
    \   [2] unique_digits(x::Vector{Int64})\n     @ Main /tmp/tmpyi_7bpl1.jl:13\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpyi_7bpl1.jl:23 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpyi_7bpl1.jl:22\ntest set:\
    \ Error During Test at /tmp/tmpyi_7bpl1.jl:24\n  Test threw exception\n  Expression:\
    \ candidate([152, 323, 1422, 10]) == Vector{Int64}([])\n  type Array has no field\
    \ iszero\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n \
    \  [2] unique_digits(x::Vector{Int64})\n     @ Main /tmp/tmpyi_7bpl1.jl:13\n \
    \  [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpyi_7bpl1.jl:24 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpyi_7bpl1.jl:22\ntest set:\
    \ Error During Test at /tmp/tmpyi_7bpl1.jl:25\n  Test threw exception\n  Expression:\
    \ candidate([12345, 2033, 111, 151]) == [111, 151]\n  type Array has no field\
    \ iszero\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n \
    \  [2] unique_digits(x::Vector{Int64})\n     @ Main /tmp/tmpyi_7bpl1.jl:13\n \
    \  [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpyi_7bpl1.jl:25 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpyi_7bpl1.jl:22\ntest set:\
    \ Error During Test at /tmp/tmpyi_7bpl1.jl:26\n  Test threw exception\n  Expression:\
    \ candidate([135, 103, 31]) == "
  timestamp: 1659978033
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    \n    \n    \n    for i in eachindex(x)\n        for j in i:i:x\n       \
    \     if j mod 2 == 0\n                push!(unique, j)\n                \n  \
    \          else\n                continue \n            end\n        end\n   \
    \ end\n    return unique\nend\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\
    \t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"2\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp_o4uvj1e.jl:18\nin expression starting at /tmp/tmp_o4uvj1e.jl:18\n"
  stdout: ''
  timestamp: 1659978031
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \"\"\"\n    Given a vector of positive integers x. return a sorted vector of all\
    \ \n    elements that hasn't any even digit.\nusing Test\n\n@testset begin\n\n\
    candidate = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\
    \t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345,\
    \ 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmy8cqa_j.jl:1\nin expression starting at /tmp/tmpmy8cqa_j.jl:1\n"
  stdout: ''
  timestamp: 1659978032
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    sorted = sort(x)\n    even = filter(x -> x % 2 == 0, sorted)\n    return\
    \ sorted(filter(x -> x != 0, even))\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpps0f8hju.jl:19

    '
  stdout: "test set: Error During Test at /tmp/tmpps0f8hju.jl:22\n  Test threw exception\n\
    \  Expression: candidate([15, 33, 1422, 1]) == [1, 15, 33]\n  MethodError: objects\
    \ of type Vector{Int64} are not callable\n  Use square brackets [] for indexing\
    \ an Array.\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main\
    \ /tmp/tmpps0f8hju.jl:15\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpps0f8hju.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpps0f8hju.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpps0f8hju.jl:23\n  Test threw exception\n  Expression:\
    \ candidate([152, 323, 1422, 10]) == Vector{Int64}([])\n  MethodError: objects\
    \ of type Vector{Int64} are not callable\n  Use square brackets [] for indexing\
    \ an Array.\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main\
    \ /tmp/tmpps0f8hju.jl:15\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpps0f8hju.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpps0f8hju.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpps0f8hju.jl:24\n  Test threw exception\n  Expression:\
    \ candidate([12345, 2033, 111, 151]) == [111, 151]\n  MethodError: objects of\
    \ type Vector{Int64} are not callable\n  Use square brackets [] for indexing an\
    \ Array.\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main /tmp/tmpps0f8hju.jl:15\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpps0f8hju.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpps0f8hju.jl:21\ntest set:\
    \ Error During Test at /tmp/"
  timestamp: 1659978035
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    unique_digits = Set()\n    unique_digits = unique_digits + Set(x[i] for i\
    \ = 1:length(x))\n    unique_digits\nend\n</cell>\n<text>\nSort the Vector of\
    \ unique digits and return it.\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\
    \t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjjdn47bd.jl:17\nin expression starting at\
    \ /tmp/tmpjjdn47bd.jl:17\n"
  stdout: ''
  timestamp: 1659978032
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    if x == []\n        Vector{Int64}()\n    else\n        unique_digits_helper(x)\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t\
    @test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323,\
    \ 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111, 151])\
    \ == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpvwixs19p.jl:21

    '
  stdout: "test set: Error During Test at /tmp/tmpvwixs19p.jl:24\n  Test threw exception\n\
    \  Expression: candidate([15, 33, 1422, 1]) == [1, 15, 33]\n  UndefVarError: unique_digits_helper\
    \ not defined\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main\
    \ /tmp/tmpvwixs19p.jl:16\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpvwixs19p.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvwixs19p.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpvwixs19p.jl:25\n  Test threw exception\n  Expression:\
    \ candidate([152, 323, 1422, 10]) == Vector{Int64}([])\n  UndefVarError: unique_digits_helper\
    \ not defined\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main\
    \ /tmp/tmpvwixs19p.jl:16\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpvwixs19p.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvwixs19p.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpvwixs19p.jl:26\n  Test threw exception\n  Expression:\
    \ candidate([12345, 2033, 111, 151]) == [111, 151]\n  UndefVarError: unique_digits_helper\
    \ not defined\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main\
    \ /tmp/tmpvwixs19p.jl:16\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpvwixs19p.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvwixs19p.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpvwixs19p.jl:27\n  Test threw exception\n  Expression:\
    \ candidate([135, 103, 31]) == [31, 135]\n  UndefVarError: unique_digits_helper\
    \ not defined\n  Stacktrace:\n   [1] unique_digits(x"
  timestamp: 1659978034
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    \n    for i in 1:length(nums)\n        if nums[i]%2 == 0\n            push!(unique_digits,\
    \ nums[i])\n        end\n    end\n    return unique_digits\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422,\
    \ 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmp00bbyxzd.jl:23

    '
  stdout: "test set: Error During Test at /tmp/tmp00bbyxzd.jl:26\n  Test threw exception\n\
    \  Expression: candidate([15, 33, 1422, 1]) == [1, 15, 33]\n  UndefVarError: nums\
    \ not defined\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main\
    \ /tmp/tmp00bbyxzd.jl:14\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp00bbyxzd.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp00bbyxzd.jl:25\ntest set:\
    \ Error During Test at /tmp/tmp00bbyxzd.jl:27\n  Test threw exception\n  Expression:\
    \ candidate([152, 323, 1422, 10]) == Vector{Int64}([])\n  UndefVarError: nums\
    \ not defined\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main\
    \ /tmp/tmp00bbyxzd.jl:14\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp00bbyxzd.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp00bbyxzd.jl:25\ntest set:\
    \ Error During Test at /tmp/tmp00bbyxzd.jl:28\n  Test threw exception\n  Expression:\
    \ candidate([12345, 2033, 111, 151]) == [111, 151]\n  UndefVarError: nums not\
    \ defined\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main\
    \ /tmp/tmp00bbyxzd.jl:14\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp00bbyxzd.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp00bbyxzd.jl:25\ntest set:\
    \ Error During Test at /tmp/tmp00bbyxzd.jl:29\n  Test threw exception\n  Expression:\
    \ candidate([135, 103, 31]) == [31, 135]\n  UndefVarError: nums not defined\n\
    \  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main /tmp/tmp00bbyxzd.jl:14\n\
    \   [2] macro"
  timestamp: 1659978034
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \   \n    for i in 1:length(x)-1\n        if x[i]%2 == 0\n            push!(x,x[i])\n\
    \        end\n    end\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\
    \t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp_fi7r86d.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp_fi7r86d.jl:1\n\
    in expression starting at /tmp/tmp_fi7r86d.jl:1\n"
  stdout: ''
  timestamp: 1659978033
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    if length(x) < 1 then return [] end\n    unique_set = Set{Int64}()\n    unique_result\
    \ = Vector{Int64}()\n    for element in x do\n        if element % 2 == 0 \n \
    \           push!(unique_set, element)\n        elseif length(unique_set) > 0\n\
    \            if element in unique_set\n                push!(unique_result, element)\n\
    \            end\n        else\n            push!(unique_result, element)\n  \
    \      end\n    end\n    return unique_result\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) == [1, 15,\
    \ 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345,\
    \ 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpn3m8pphm.jl:13\nin expression starting at /tmp/tmpn3m8pphm.jl:13\n"
  stdout: ''
  timestamp: 1659978033
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    if length(x) == 0 || sum(x) == 0\n        []\n    else\n        x = sort(x)\n\
    \        result = [x[1] for i = 2:length(x)]\n        remove!(result, 1)\n   \
    \ end\n    result\nend\n</cell>\n<cell>\n## @title ## Testing `unique_digits`\
    \ function\n\"\"\"\n    >>> x = [1, 2, 3, 5]\n    >>> unique_digits(x)\n    [1,\
    \ 3, 5]\n    >>> x = [1, 5, 5]\n    >>> unique_digits(x)\n    []\n\"\"\"\n</cell>\n\
    <text>\nNo. of unique digits\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\
    \t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2yv_f7sq.jl:22\nin expression starting at\
    \ /tmp/tmp2yv_f7sq.jl:22\n"
  stdout: ''
  timestamp: 1659978033
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    # Write your function description here\n    \n    return x \nend\nusing Test\n\
    \n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422,\
    \ 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpnq4q79de.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmpnq4q79de.jl:22\n  Expression: candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n   Evaluated: [15, 33, 1422, 1] == [1, 15, 33]\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnq4q79de.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnq4q79de.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpnq4q79de.jl:23\n  Expression: candidate([152, 323, 1422, 10])\
    \ == Vector{Int64}([])\n   Evaluated: [152, 323, 1422, 10] == Int64[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnq4q79de.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnq4q79de.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpnq4q79de.jl:24\n  Expression: candidate([12345, 2033, 111,\
    \ 151]) == [111, 151]\n   Evaluated: [12345, 2033, 111, 151] == [111, 151]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnq4q79de.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnq4q79de.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpnq4q79de.jl:25\n  Expression: candidate([135, 103, 31]) ==\
    \ [31, 135]\n   Evaluated: [135, 103, 31] == [31, 135]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnq4q79de.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnq4q79de.jl:21\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  timestamp: 1659978034
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    uniq_x = Set()\n    for elem in x\n        if elem < 10 \n            uniq_x\
    \ << elem\n        end\n    end\n    uniq_x --# {x for x \u2208 uniq_x if all(x\
    \ mod 2 .== 0)}\n    uniq_x --# {x for x \u2208 uniq_x if all(x mod 2 .!= 0)}\n\
    end\nunique_digits(x::Vector{Int64}) = sort(x)\nend\n</cell>\n<code language=julia-0.5>\n\
    @assert unique_digits([15, 33, 1422, 1]) == [1, 15, 33]\n@assert unique_digits([152,\
    \ 323, 1422, 10]) == []\n</cell>\n<text>\nPart 2: Problem Solving\nOnce you've\
    \ tested your code, run the code cell below to run your performance test suite.\n\
    using Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid operator \"--\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp2csrh41v.jl:19\nin expression starting at /tmp/tmp2csrh41v.jl:19\n"
  stdout: ''
  timestamp: 1659978033
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    unique_digit = Set()\n    digits = Set()\n    unique_digits = Set()\n   \
    \ \n    for i in x\n        if !digits.contains(i) && i >= 10\n            digits.add(i)\n\
    \        else\n            unique_digit.add(i)\n        end\n    end\n    unique_digits\
    \ += unique_digit\n    return unique_digits\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert unique_digits([3, 7, 9, 6, 4, 10]) == [3, 6, 9, 10]\n@assert unique_digits([152,\
    \ 323, 1422, 10]) == []\n</cell>\n<text>\n\u0422\u0435\u043E\u0440\u0435\u043C\
    \u0430 B. \u041A\u043E\u043F\u0438\u0440\u043E\u0432\u0430\u043D\u0438\u0435 \u043C\
    \u043D\u043E\u0436\u0435\u0441\u0442\u0432\n\u0414\u0430\u043D \u043D\u0430\u0431\
    \u043E\u0440 \u0442\u0440\u0438 \u0437\u043D\u0430\u0447\u0435\u043D\u0438\u0439\
    . \u041D\u0430\u043F\u0438\u0441\u0430\u0442\u044C \u043D\u0430\u0438\u0431\u043E\
    \u043B\u0435\u0435 \u0443\u0441\u043F\u0435\u0448\u043D\u044B\u0439 \u043A\u043E\
    \u0434, \u043A\u043E\u0442\u043E\u0440\u044B\u0439 \u0432\u044B\u0432\u043E\u0434\
    \u0438\u0442 \n\u0441\u0430\u043C\u044B\u0439 \u043C\u0430\u043B\u0435\u043D\u044C\
    \u043A\u0438\u0439 \u0438\u0437 \u043D\u0438\u0445. \u0412\u044B\u0432\u043E\u0434\
    \u0438\u0442\u044C \u043D\u0443\u043C\u0435\u0440\u043E\u0432\u0430\u043D\u043D\
    \u044B\u0439 \u0432 \u0441\u0442\u0430\u0442\u044C\u0435 \u043F\u0440\u043E \u0442\
    \u0435\u043E\u0440\u0435\u043C\u0443 A\nusing Test\n\n@testset begin\n\ncandidate\
    \ = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpydsarsub.jl:27\nin expression starting at\
    \ /tmp/tmpydsarsub.jl:27\n"
  stdout: ''
  timestamp: 1659978033
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    unique_digits = sort(unique(x))\n    if length(unique_digits) <= 0\n    \
    \    return unique_digits\n    else\n        unique_digits[end] = unique_digits[end]\
    \ - 1\n    end\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t\
    @test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323,\
    \ 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111, 151])\
    \ == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp2sc8l6_4.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp2sc8l6_4.jl:1\n\
    in expression starting at /tmp/tmp2sc8l6_4.jl:1\n"
  stdout: ''
  timestamp: 1659978033
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    even_idx = find(x==0)\n    return x[even_idx].>=0? x : unique_digits(x[x!=0]+x[x==0])\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: space required before \"?\" operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_afd0e78.jl:14\nin expression starting at\
    \ /tmp/tmp_afd0e78.jl:14\n"
  stdout: ''
  timestamp: 1659978033
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    for i in x\n        if i % 2 == 0\n            return Int64[i | 0]\n    \
    \    end\n    end\n    return x\nend\n</cell>\n<code language=julia-1.5>\nunique_digits([15,\
    \ 33, 1422, 1])\n</cell>\n<text>\nProblem 7. Unique characters\nGiven a vector\
    \ of strings, return a sorted vector of all characters in all strings \n    that\
    \ hasn't any duplicate.\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\
    \t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpva9gz_vi.jl:20\nin expression starting at\
    \ /tmp/tmpva9gz_vi.jl:20\n"
  stdout: ''
  timestamp: 1659978033
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    unique_digits_result = []\n    \n    for i in x : \n        if i%2 == 0 \n\
    \            unique_digits_result += [i] \n        else \n            unique_digits_result\
    \ += [i] \n            \n    unique_digits_result\nend\n</cell>\n<text>\nExercise:\
    \ Define a function unique that takes a vector of integers and returns the vector\
    \ with all unique integers removed, i.e., \ngiven [1, 1, 2, 3] the function should\
    \ return [1, 2, 3]. \nWrite a test case for this function.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) ==\
    \ [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpj9bug1wu.jl:16\nin expression starting at\
    \ /tmp/tmpj9bug1wu.jl:16\n"
  stdout: ''
  timestamp: 1659978033
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    \n    xsort = sort(x)\n    \n    for i in 1 : (length(x) - length(unique(xsort)))\n\
    \        if rem(x[i], 10) == 0\n            xsort = [xsort[i] | xsort[i - 1]]\n\
    \        end\n    end\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\
    \t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp8ol1qzc6.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp8ol1qzc6.jl:1\n\
    in expression starting at /tmp/tmp8ol1qzc6.jl:1\n"
  stdout: ''
  timestamp: 1659978033
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    if length(x) == 0 \n        return []\n    unique_vec=copy(unique_digits_aux(x,0))\n\
    \    append!(unique_vec,0)\n    return unique_vec\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) ==\
    \ [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxjtswwg0.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxjtswwg0.jl:1\n\
    in expression starting at /tmp/tmpxjtswwg0.jl:1\n"
  stdout: ''
  timestamp: 1659978034
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \   \n    digit = zeros(Int64, length(x));\n    for i = 1:length(digit)\n    \
    \    digit[i] = 0\n    end\n    for i = 1:length(digit)\n        digit[i] = (x[i]//10)%10\n\
    \    end\n    return digit\nend\n\"\"\"\n    \n    Given a vector of positive\
    \ integers x. return a sorted vector of all \n    elements that hasn't any even\
    \ digit.\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4g14s7k2.jl:23\nin expression starting at\
    \ /tmp/tmp4g14s7k2.jl:23\n"
  stdout: ''
  timestamp: 1659978034
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    unique_digits(x.filter(x -> x % 2 != 0))\nend\nunique_digits(x)\nusing Test\n\
    \n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422,\
    \ 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: UndefVarError: x not defined\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp3h5pdv7t.jl:15\nin expression starting at /tmp/tmp3h5pdv7t.jl:15\n"
  stdout: ''
  timestamp: 1659978034
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    ans = unique(x)\n    for n in ans\n        pos = find(x .== n)\n        if\
    \ pos == 1\n            delete!(ans, pos)\n        end\n    end\n    ans\nend\n\
    using Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpt3fapysh.jl:24

    '
  stdout: "test set: Error During Test at /tmp/tmpt3fapysh.jl:27\n  Test threw exception\n\
    \  Expression: candidate([15, 33, 1422, 1]) == [1, 15, 33]\n  UndefVarError: find\
    \ not defined\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main\
    \ /tmp/tmpt3fapysh.jl:15\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpt3fapysh.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpt3fapysh.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpt3fapysh.jl:28\n  Test threw exception\n  Expression:\
    \ candidate([152, 323, 1422, 10]) == Vector{Int64}([])\n  UndefVarError: find\
    \ not defined\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main\
    \ /tmp/tmpt3fapysh.jl:15\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpt3fapysh.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpt3fapysh.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpt3fapysh.jl:29\n  Test threw exception\n  Expression:\
    \ candidate([12345, 2033, 111, 151]) == [111, 151]\n  UndefVarError: find not\
    \ defined\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main\
    \ /tmp/tmpt3fapysh.jl:15\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpt3fapysh.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpt3fapysh.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpt3fapysh.jl:30\n  Test threw exception\n  Expression:\
    \ candidate([135, 103, 31]) == [31, 135]\n  UndefVarError: find not defined\n\
    \  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main /tmp/tmpt3fapysh.jl:15\n\
    \   [2] macro"
  timestamp: 1659978036
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    x = sort(x)\n    x = x[end-1:end]\n    x = x./10\n    x = x .- mod(x,2)\n\
    \    x = unique(x)\n    return x\nend\n</cell>\n<code language=julia-1.1>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwj03vl7e.jl:20\nin expression starting at\
    \ /tmp/tmpwj03vl7e.jl:20\n"
  stdout: ''
  timestamp: 1659978034
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    return sort(unique(x)) # Sort then filter out duplicates\nend\n</cell>\n\
    <text>\nQuestion 6: Print the unique digits of vector [152,323,1422,10]\nusing\
    \ Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp59338jo2.jl:15\nin expression starting at\
    \ /tmp/tmp59338jo2.jl:15\n"
  stdout: ''
  timestamp: 1659978034
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    digits::Set{Int64} = Set()\n    for i in x\n        digits.add(Int(i))\n\
    \    end\n    return filter( x -> x rem 2 != 0, digits)\nend\n</cell>\n<code language=julia-1.3>\n\
    using Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyoatn38g.jl:17\nin expression starting at\
    \ /tmp/tmpyoatn38g.jl:17\n"
  stdout: ''
  timestamp: 1659978035
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    if length(x) ==0\n        return []\n    \n    for i in x:\n        \n  \
    \      \n        if i==0\n            continue\n            \n        for j in\
    \ x:\n            if j%i>0\n                j+=1\n                break\n    \
    \        if j==i\n                continue\n            push!(ret, j)\n      \
    \      break\n    end\n    \n    ret\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpk7wjr5_j.jl:17\nin expression starting at\
    \ /tmp/tmpk7wjr5_j.jl:17\n"
  stdout: ''
  timestamp: 1659978035
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    @assert x == sort(x) \n    @assert all(xx <=> 0 for xx in x) \n    @assert\
    \ all(xx <=> 9 for xx in x) \n    x = x[findall(x .== x .%10) .!= 0] \n    @assert\
    \ length(x) == 1 \n    return x \nend\n</cell>\n<text>\nProblem 7.7\nGiven the\
    \ vector [4, 8, 4, 12, 16, 16, 20], write a function that returns another vector\
    \ with all the unique integers from 0 to 2^n-1.\nusing Test\n\n@testset begin\n\
    \ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) == [1, 15,\
    \ 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345,\
    \ 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \">\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcnaest19.jl:14\nin expression starting at\
    \ /tmp/tmpcnaest19.jl:14\n"
  stdout: ''
  timestamp: 1659978035
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    \n    evens = x .% 2 == 0 .% 2\n    \n    x.sort! \n    \n    if evens\n\
    \        x[evens]\n    else\n        x[x .!= 0]\n    end\nend\n</cell>\n<code\
    \ language=julia-1.0>\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\
    \t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwhvrmzy0.jl:24\nin expression starting at\
    \ /tmp/tmpwhvrmzy0.jl:24\n"
  stdout: ''
  timestamp: 1659978035
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    \n    \n    return sort(unique(digits(x)))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) == [1, 15,\
    \ 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345,\
    \ 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmp53rrs5_n.jl:19

    '
  stdout: "test set: Error During Test at /tmp/tmp53rrs5_n.jl:22\n  Test threw exception\n\
    \  Expression: candidate([15, 33, 1422, 1]) == [1, 15, 33]\n  MethodError: no\
    \ method matching digits(::Vector{Int64})\n  Closest candidates are:\n    digits(!Matched::Integer;\
    \ base, pad) at ~/.conda/envs/polyglot/share/julia/base/intfuncs.jl:854\n    digits(!Matched::Type{<:Integer},\
    \ !Matched::Integer; base, pad) at ~/.conda/envs/polyglot/share/julia/base/intfuncs.jl:857\n\
    \  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main /tmp/tmp53rrs5_n.jl:15\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp53rrs5_n.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp53rrs5_n.jl:21\ntest set:\
    \ Error During Test at /tmp/tmp53rrs5_n.jl:23\n  Test threw exception\n  Expression:\
    \ candidate([152, 323, 1422, 10]) == Vector{Int64}([])\n  MethodError: no method\
    \ matching digits(::Vector{Int64})\n  Closest candidates are:\n    digits(!Matched::Integer;\
    \ base, pad) at ~/.conda/envs/polyglot/share/julia/base/intfuncs.jl:854\n    digits(!Matched::Type{<:Integer},\
    \ !Matched::Integer; base, pad) at ~/.conda/envs/polyglot/share/julia/base/intfuncs.jl:857\n\
    \  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main /tmp/tmp53rrs5_n.jl:15\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp53rrs5_n.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp53rrs5_n.jl:21\ntest set:\
    \ Error During Test at /tmp/tmp53rrs5_n.jl:24\n  Test threw exception\n  Expression:\
    \ candidate([12345, 2033, 111, 151]) == [111, 151]\n  MethodError: no method matching\
    \ digits(::Vector{Int64})\n  Closest candidates are:\n    digits(!Matched::Integer;\
    \ base, pad) at ~/.conda/envs/polyglot/share/julia/ba"
  timestamp: 1659978038
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    #x = [15, 33, 1422, 10]\n    unique_digit_count = 0\n    for i in x\n   \
    \     unique_digit_count = unique_digit_count+1 if i%2 == 0 \n    end\nusing Test\n\
    \n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422,\
    \ 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmpexbh55jk.jl:15 expected \"\
    end\", got \"if\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpexbh55jk.jl:16\n\
    in expression starting at /tmp/tmpexbh55jk.jl:16\n"
  stdout: ''
  timestamp: 1659978035
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    \"\"\"\n    Author: Junjie\n    \n    Sorted Unique digit vector.\n    \"\
    \"\"\n    \n    unique_digits_vector = []\n    for number in x\n        for each\
    \ in unique(number)\n            if length(number) == length(each)\n         \
    \       unique_digits_vector = [each, number]\n                break\n       \
    \     end\n        end\n    end\n    \n    return unique_digits_vector\nend\n\
    </cell>\n<code language=julia-1.5>\n@time unique_digits([15, 33, 1422, 1])\n</cell>\n\
    <code language=julia-1.5>\n@time unique_digits([152, 323, 1422, 10])\n</cell>\n\
    <text>\nExercise: Remove Duplicates\nusing Test\n\n@testset begin\n\ncandidate\
    \ = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpirr0sen4.jl:31\nin expression starting at\
    \ /tmp/tmpirr0sen4.jl:31\n"
  stdout: ''
  timestamp: 1659978035
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    \"\"\"Given a vector of positive integers x. return a sorted vector of all\
    \ \n    elements that hasn't any even digit.\nusing Test\n\n@testset begin\n\n\
    candidate = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\
    \t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345,\
    \ 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5jie0gul.jl:1\nin expression starting at /tmp/tmp5jie0gul.jl:1\n"
  stdout: ''
  timestamp: 1659978035
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    x .= filter( x -> x==0, x)\n    x .= sort(x)\n    x .= filter( x -> x!=0\
    \ ,x)\n    return x\nend\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\
    \t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpuk3274o1.jl:20

    '
  stdout: "test set: Error During Test at /tmp/tmpuk3274o1.jl:23\n  Test threw exception\n\
    \  Expression: candidate([15, 33, 1422, 1]) == [1, 15, 33]\n  DimensionMismatch(\"\
    array could not be broadcast to match destination\")\n  Stacktrace:\n    [1] check_broadcast_shape\n\
    \      @ ./broadcast.jl:540 [inlined]\n    [2] check_broadcast_axes\n      @ ./broadcast.jl:543\
    \ [inlined]\n    [3] instantiate\n      @ ./broadcast.jl:284 [inlined]\n    [4]\
    \ materialize!\n      @ ./broadcast.jl:871 [inlined]\n    [5] materialize!\n \
    \     @ ./broadcast.jl:868 [inlined]\n    [6] unique_digits(x::Vector{Int64})\n\
    \      @ Main /tmp/tmpuk3274o1.jl:13\n    [7] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [8] macro expansion\n      @ /tmp/tmpuk3274o1.jl:23 [inlined]\n\
    \    [9] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [10] top-level scope\n      @ /tmp/tmpuk3274o1.jl:22\ntest set:\
    \ Error During Test at /tmp/tmpuk3274o1.jl:24\n  Test threw exception\n  Expression:\
    \ candidate([152, 323, 1422, 10]) == Vector{Int64}([])\n  DimensionMismatch(\"\
    array could not be broadcast to match destination\")\n  Stacktrace:\n    [1] check_broadcast_shape\n\
    \      @ ./broadcast.jl:540 [inlined]\n    [2] check_broadcast_axes\n      @ ./broadcast.jl:543\
    \ [inlined]\n    [3] instantiate\n      @ ./broadcast.jl:284 [inlined]\n    [4]\
    \ materialize!\n      @ ./broadcast.jl:871 [inlined]\n    [5] materialize!\n \
    \     @ ./broadcast.jl:868 [inlined]\n    [6] unique_digits(x::Vector{Int64})\n\
    \      @ Main /tmp/tmpuk3274o1.jl:13\n    [7] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [8] macro expansion\n      @ /tmp/tmpuk3274o1.jl:24 [inlined]\n\
    \    [9] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [10] top-level scope\n      @ /tmp/tmpuk3274o1.jl:22\ntest set:\
    \ Error During Test at /tmp/tmpuk3274o1.jl:25\n  Test threw exception\n  Expression:\
    \ candidate([12345, 2033, 111, 151]) == [111, 151]\n  Dimensi"
  timestamp: 1659978037
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    \n    unique_digits = Vector{Int64}()\n    for i in x : push!(unique_digits,\
    \ i)\n    unique_digits\nend\n</cell>\n<text>\nNotice that there are two new variables\
    \ declared, unique_digits, which stores the unique digits and unique_digits2 to\
    \ store the unique odd digits. Now let's see how unique_digits work:\nusing Test\n\
    \n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422,\
    \ 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpib7frmkx.jl:18\nin expression starting at\
    \ /tmp/tmpib7frmkx.jl:18\n"
  stdout: ''
  timestamp: 1659978035
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    unique_digits_result = []\n    for digit in x\n        if iszero(digit)\n\
    \            unique_digits_result = []\n        else\n            if length(unique_digits_result)\
    \ == 0\n                unique_digits_result = [digit]\n            else\n   \
    \             if digit==unique_digits_result[1]\n                    push!(unique_digits_result,digit)\n\
    \                else\n                    push!(unique_digits_result,0)\n   \
    \                 push!(unique_digits_result,digit)\n                end\n   \
    \         end\n        end\n    end\n    unique_digits_result\nend\n</cell>\n\
    <code language=julia-0.6>\n\"\"\"\nGiven an integer x, write an efficient function\
    \ that returns the number of \ntimes x appears in the integer range 0 to x. \n\
    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmxx8ttl1.jl:32\nin expression starting at\
    \ /tmp/tmpmxx8ttl1.jl:32\n"
  stdout: ''
  timestamp: 1659978035
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    vector=Vector{Int64}()\n    for i in x \n        if i.even? \n          \
    \  push!(vector,i) \n        end\n    end\n    vector\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"Given a vector of positive integers x. return a sorted vector of all \n\
    \    elements that has one even digit and another one odd digit.\nusing Test\n\
    \n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422,\
    \ 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: space required before \"?\" operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwuzydhfe.jl:15\nin expression starting at\
    \ /tmp/tmpwuzydhfe.jl:15\n"
  stdout: ''
  timestamp: 1659978036
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    if length(x)==0 then return [] end\n    \n    y=copy(unique(x) )\n    map!(deleteat,\
    \ y) \n    return y\nend\n</cell>\n<code language=julia-1.6>\n\"\"\"Given a vector\
    \ of positive integers x. return a sorted vector of all \n    elements that has\
    \ only unique digits.\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\
    \t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpe9yuqrib.jl:13\nin expression starting at /tmp/tmpe9yuqrib.jl:13\n"
  stdout: ''
  timestamp: 1659978036
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    # write your code here\n    n = length(x)\n    digits = {}\n    for i in\
    \ x \n        if digits[i] == 0 \n            digits[i] = 1\n        else\n  \
    \          digits[i] = digits[i] + 1\n        end\n    end\nusing Test\n\n@testset\
    \ begin\n\ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) ==\
    \ [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpaigyfluy.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpaigyfluy.jl:1\n\
    in expression starting at /tmp/tmpaigyfluy.jl:1\n"
  stdout: ''
  timestamp: 1659978036
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \ \n    for n in x: \n        if n rem 2 == 0 \n            push!(res, n) \n \
    \       end\n \n    return res \nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpuax19ksy.jl:15\nin expression starting at\
    \ /tmp/tmpuax19ksy.jl:15\n"
  stdout: ''
  timestamp: 1659978036
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    return sort(set(x))\nend\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\
    \t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpoeodp7nj.jl:17

    '
  stdout: "test set: Error During Test at /tmp/tmpoeodp7nj.jl:20\n  Test threw exception\n\
    \  Expression: candidate([15, 33, 1422, 1]) == [1, 15, 33]\n  UndefVarError: set\
    \ not defined\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main\
    \ /tmp/tmpoeodp7nj.jl:13\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpoeodp7nj.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpoeodp7nj.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpoeodp7nj.jl:21\n  Test threw exception\n  Expression:\
    \ candidate([152, 323, 1422, 10]) == Vector{Int64}([])\n  UndefVarError: set not\
    \ defined\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main\
    \ /tmp/tmpoeodp7nj.jl:13\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpoeodp7nj.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpoeodp7nj.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpoeodp7nj.jl:22\n  Test threw exception\n  Expression:\
    \ candidate([12345, 2033, 111, 151]) == [111, 151]\n  UndefVarError: set not defined\n\
    \  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main /tmp/tmpoeodp7nj.jl:13\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpoeodp7nj.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpoeodp7nj.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpoeodp7nj.jl:23\n  Test threw exception\n  Expression:\
    \ candidate([135, 103, 31]) == [31, 135]\n  UndefVarError: set not defined\n \
    \ Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main /tmp/tmpoeodp7nj.jl:13\n\
    \   [2] macro exp"
  timestamp: 1659978038
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    # remove any empty element\n    x.remove!((0,0))\n    # sort the vector\n\
    \    x.sort!\n    # add zeros to the end \n    x += (zeros(0,x.size),)\n    #\
    \ remove any element that is not odd\n    x = filter(x->!(x%2),x)\n    # remove\
    \ any element that has only 1 digit\n    x = filter(x->x[1]==1,x)\n    return\
    \ x\nend\n</cell>\n<code language=julia-1.1>\nusing LinearAlgebra\n</cell>\n<text>\n\
    3. Vectorized Matrix Operation\nNow you know about vectorization and matrix multiplication,\
    \ let's explore the performance of vectorized matrix operation.\nusing Test\n\n\
    @testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422,\
    \ 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0zrgspbb.jl:25\nin expression starting at\
    \ /tmp/tmp0zrgspbb.jl:25\n"
  stdout: ''
  timestamp: 1659978036
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    \n    # Initialization\n    unique_digits::Vector{Int64} = []\n    \n   \
    \ # Traverse and check \n    for i in x\n        if i %% 2 == 0\n            if\
    \ i not in unique_digits\n                unique_digits += [i]\n            else\n\
    \                continue # Do not append\n            end\n        end\n    end\n\
    \    return unique_digits\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422,\
    \ 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"%\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmpdt68d0.jl:19\nin expression starting at\
    \ /tmp/tmpmpdt68d0.jl:19\n"
  stdout: ''
  timestamp: 1659978036
- exit_code: -1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    unique_digits_vec = []\n    for elem in x \n        if elem % 2 == 0 \n \
    \           unique_digits_vec[end+1] = elem \n        end\n    end\n    unique_digits_vec\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: Timeout
  stderr: 'b''ERROR: '''
  stdout: 'b''test set: Error During Test at /tmp/tmp_75nuold.jl:26\n  Test threw
    exception\n  Expression: candidate([15, 33, 1422, 1]) == [1, 15, 33]\n  BoundsError:
    attempt to access 0-element Vector{Any} at index [1]\n  Stacktrace:\n   [1] setindex!\n     @
    ./essentials.jl:479 [inlined]\n   [2] unique_digits(x::Vector{Int64})\n     @
    Main /tmp/tmp_75nuold.jl:16\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [4] macro expansion\n     @ /tmp/tmp_75nuold.jl:26 [inlined]\n   [5]
    macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [6] top-level scope\n     @ /tmp/tmp_75nuold.jl:25\ntest set: Error
    During Test at /tmp/tmp_75nuold.jl:27\n  Test threw exception\n  Expression: candidate([152,
    323, 1422, 10]) == Vector{Int64}([])\n  BoundsError: attempt to access 0-element
    Vector{Any} at index [1]\n  Stacktrace:\n   [1] setindex!\n     @ ./essentials.jl:479
    [inlined]\n   [2] unique_digits(x::Vector{Int64})\n     @ Main /tmp/tmp_75nuold.jl:16\n   [3]
    macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [4] macro expansion\n     @ /tmp/tmp_75nuold.jl:27 [inlined]\n   [5]
    macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [6] top-level scope\n     @ /tmp/tmp_75nuold.jl:25\ntest set: Test
    Failed at /tmp/tmp_75nuold.jl:28\n  Expression: candidate([12345, 2033, 111, 151])
    == [111, 151]\n   Evaluated: Int64[] == [111, 151]\nStacktrace:\n [1] macro expansion\n   @
    ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n
    [2] macro expansion\n   @ /tmp/tmp_75nuold.jl:28 [inlined]\n [3] macro expansion\n   @
    ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n
    [4] top-level scope\n   @ /tmp/tmp_75nuold.jl:25\ntest set: Test Failed at /tmp/tmp_75nuold.jl:29\n  Expression:
    candidate([135, 103, 31]) == [31, 135]\n   Evaluated: Int64[] == [31, 135]\nStacktrace:\n
    [1] ma'
  timestamp: 1659978040
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    if length(x) == 0 \n        return x \n    else \n        unique_digits(x[1:end-1])\
    \ \n    end\nend \n    \n\"\"\"Given a vector of positive integers x. return a\
    \ sorted vector of all \n    elements that hasn't any odd digit.\nusing Test\n\
    \n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422,\
    \ 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6hgwqv35.jl:20\nin expression starting at\
    \ /tmp/tmp6hgwqv35.jl:20\n"
  stdout: ''
  timestamp: 1659978036
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    #using filter function\n    filter((i) -> not isdigit(i), x)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpoosj0ycn.jl:14\nin expression starting at\
    \ /tmp/tmpoosj0ycn.jl:14\n"
  stdout: ''
  timestamp: 1659978036
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    digits = x.map(x->mod(x, 10)).filter(x->x==0)\n    unique_digits = sort!(unique(digits))\
    \ # sort is necessary in case \n                                          # x\
    \ contains duplicates \n                                          # (which we\
    \ do not want to remove) \n    return unique_digits\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) ==\
    \ [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpbieiij00.jl:21

    '
  stdout: "test set: Error During Test at /tmp/tmpbieiij00.jl:24\n  Test threw exception\n\
    \  Expression: candidate([15, 33, 1422, 1]) == [1, 15, 33]\n  type Array has no\
    \ field map\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n\
    \   [2] unique_digits(x::Vector{Int64})\n     @ Main /tmp/tmpbieiij00.jl:13\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpbieiij00.jl:24 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpbieiij00.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpbieiij00.jl:25\n  Test threw exception\n  Expression:\
    \ candidate([152, 323, 1422, 10]) == Vector{Int64}([])\n  type Array has no field\
    \ map\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2]\
    \ unique_digits(x::Vector{Int64})\n     @ Main /tmp/tmpbieiij00.jl:13\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpbieiij00.jl:25 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpbieiij00.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpbieiij00.jl:26\n  Test threw exception\n  Expression:\
    \ candidate([12345, 2033, 111, 151]) == [111, 151]\n  type Array has no field\
    \ map\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2]\
    \ unique_digits(x::Vector{Int64})\n     @ Main /tmp/tmpbieiij00.jl:13\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpbieiij00.jl:26 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpbieiij00.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpbieiij00.jl:27\n  Test threw exception\n  Expression:\
    \ candidate([135, 103, 31]) == [31, 135]"
  timestamp: 1659978038
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    xset = Set(x)\n    return filter(x -> !(xset==Set(x.digits(2))), x)\nend\n\
    </cell>\n<text>\nProblem 9: Permutation Function\nusing Test\n\n@testset begin\n\
    \ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) == [1, 15,\
    \ 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345,\
    \ 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbkf7wazb.jl:16\nin expression starting at\
    \ /tmp/tmpbkf7wazb.jl:16\n"
  stdout: ''
  timestamp: 1659978037
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    unique_digits_array = []\n    unique_digits_array2 = []\n    unique_digits_array3\
    \ = []\n    for i in x\n        if i%2 == 0\n            unique_digits_array +=\
    \ [i]\n        elseif length(unique_digits_array) == 0\n            unique_digits_array2\
    \ += [i]\n        else\n            unique_digits_array3 += [i]\n        end\n\
    \    end\n    unique_digits_array = [i for i in unique_digits_array if isdigit(i)]\n\
    \    unique_digits_array2 = [i for i in unique_digits_array2 if isdigit(i)]\n\
    \    unique_digits_array3 = [i for i in unique_digits_array3 if isdigit(i)]\n\
    \    \n    unique_digits_array = unique_digits_array[2:end]\n    unique_digits_array2\
    \ = unique_digits_array2[2:end]\n    unique_digits_array3 = unique_digits_array3[2:end]\n\
    \    \n    unique_digits_array = sort(unique_digits_array)\n    unique_digits_array2\
    \ = sort(unique_digits_array2)\n    unique_digits_array3 = sort(unique_digits_array3)\n\
    \    \n    unique_digits_array = [i for i in unique_digits_array if !isdigit(i)]\n\
    \    unique_digits_array2 = [i for i in unique_digits_array2 if !isdigit(i)]\n\
    \    unique_digits_array3 = [i for i in unique_digits_array3 if !isdigit(i)]\n\
    \    \n    unique_digits_array = sort(unique_digits_array)\n    unique_digits_array2\
    \ = sort(unique_digits_array2)\n    unique_digits_array3 = sort(unique_digits_array3)\n\
    \    \n    unique_digits_array = unique_digits_array[2:end]\n    unique_digits_array2\
    \ = unique_digits_array2[2:end]\n    unique_digits_array3 = unique_digits_array3[2:end]\n\
    \    \n    unique_digits_array = sort(unique_digits_array)\n    unique_digits_array2\
    \ = sort(unique_digits_array2)\n    unique_digits_array3 = sort(unique_digits_array3)\n\
    \    \n    unique_digits_array = unique_digits_array[2:end]\n    unique_digits_array2\
    \ = unique_digits_array2[2:end]\n    unique_digits_array3 = unique_digits_array3[2:end]\n\
    \    \n    unique_digits_array = sort(unique_digits_array)\n    unique_digits_array2\
    \ = sort(unique_digits_array2)\n    unique_digits_array3 = sort(unique_digits_array3)\n\
    \    \n    unique_digits_array = unique_digits_array[2:end]\n    unique_digits_array2\
    \ = unique_digits_array2[2:end]\n    unique_digits_array3 = unique_digits_array3[2:end]\n\
    \    \n\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpoqq8lqs6.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpoqq8lqs6.jl:1\n\
    in expression starting at /tmp/tmpoqq8lqs6.jl:1\n"
  stdout: ''
  timestamp: 1659978037
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    if isa(x[1],Int64)\n        return unique_digits(drop(x,1))\n    elseif x<0\
    \ || length(x) == 0\n        return Vector{Int64}()\n    elseif x%2 == 0 && length(x)\
    \ == 2\n        push!(x,0)\n    else\n        push!(x,1)\n        unique_digits(drop(x,1))\n\
    \    end\n    return x\nend\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\
    \t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpke8jdqu0.jl:27

    '
  stdout: "test set: Error During Test at /tmp/tmpke8jdqu0.jl:30\n  Test threw exception\n\
    \  Expression: candidate([15, 33, 1422, 1]) == [1, 15, 33]\n  UndefVarError: drop\
    \ not defined\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main\
    \ /tmp/tmpke8jdqu0.jl:14\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpke8jdqu0.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpke8jdqu0.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpke8jdqu0.jl:31\n  Test threw exception\n  Expression:\
    \ candidate([152, 323, 1422, 10]) == Vector{Int64}([])\n  UndefVarError: drop\
    \ not defined\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main\
    \ /tmp/tmpke8jdqu0.jl:14\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpke8jdqu0.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpke8jdqu0.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpke8jdqu0.jl:32\n  Test threw exception\n  Expression:\
    \ candidate([12345, 2033, 111, 151]) == [111, 151]\n  UndefVarError: drop not\
    \ defined\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main\
    \ /tmp/tmpke8jdqu0.jl:14\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpke8jdqu0.jl:32 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpke8jdqu0.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpke8jdqu0.jl:33\n  Test threw exception\n  Expression:\
    \ candidate([135, 103, 31]) == [31, 135]\n  UndefVarError: drop not defined\n\
    \  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main /tmp/tmpke8jdqu0.jl:14\n\
    \   [2] macro"
  timestamp: 1659978039
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \     ans = Set()\n     for i in x\n         if iszero(i)\n             continue\n\
    \         elseif ans.contains(i) == false && digit(i) == 0\n             push!(ans,\
    \ i)\n         end\n     end\n    return ans \nend\nusing Test\n\n@testset begin\n\
    \ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) == [1, 15,\
    \ 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345,\
    \ 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmp_1cz33u5.jl:25

    '
  stdout: "test set: Error During Test at /tmp/tmp_1cz33u5.jl:28\n  Test threw exception\n\
    \  Expression: candidate([15, 33, 1422, 1]) == [1, 15, 33]\n  type Set has no\
    \ field contains\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n\
    \   [2] unique_digits(x::Vector{Int64})\n     @ Main /tmp/tmp_1cz33u5.jl:17\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp_1cz33u5.jl:28 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp_1cz33u5.jl:27\ntest set:\
    \ Error During Test at /tmp/tmp_1cz33u5.jl:29\n  Test threw exception\n  Expression:\
    \ candidate([152, 323, 1422, 10]) == Vector{Int64}([])\n  type Set has no field\
    \ contains\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n\
    \   [2] unique_digits(x::Vector{Int64})\n     @ Main /tmp/tmp_1cz33u5.jl:17\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp_1cz33u5.jl:29 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp_1cz33u5.jl:27\ntest set:\
    \ Error During Test at /tmp/tmp_1cz33u5.jl:30\n  Test threw exception\n  Expression:\
    \ candidate([12345, 2033, 111, 151]) == [111, 151]\n  type Set has no field contains\n\
    \  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] unique_digits(x::Vector{Int64})\n\
    \     @ Main /tmp/tmp_1cz33u5.jl:17\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp_1cz33u5.jl:30 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp_1cz33u5.jl:27\ntest set:\
    \ Error During Test at /tmp/tmp_1cz33u5.jl:31\n  Test threw exception\n  Expression:\
    \ candidate([135, 103, 31]) == "
  timestamp: 1659978039
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    if length(x) == 0 return []\n    q = sort(x)\n    return filter(x->x%2 ==\
    \ 0, q)\nend\n</cell>\n<cell>\n@doc rawview(A::Vector{Int64}; b::AbstractVector=nothing)::Vector{Int64}\n\
    \"\"\"Given a vector of positive integers x. return a sorted vector of all \n\
    \    elements that hasn't any even digit.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpprckyf2h.jl:17\nin expression starting at\
    \ /tmp/tmpprckyf2h.jl:17\n"
  stdout: ''
  timestamp: 1659978037
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    for i in 1:length(x)\n        if mod(i, 2) == 0 \n            continue\n\
    \        else\n            push!(xs, i)\n        end\n    end\n    return xs\n\
    end\n</cell>\n<code language=julia-1.0>\nunique_digits(x)\n</cell>\n<code language=julia-1.0>\n\
    unique_digits([1,3,5,7,5,3])\n</cell>\n<text>\nQuestion 4 (5 Points)\nWe have\
    \ seen above how to get the unique elements in an array.  Now we would like to\
    \ get the unique elements in an array that only has even digits.  That is, we\
    \ need to find all those numbers in the array that only have even digits.  We\
    \ want to do this without using any built-in function.  For example, we can write\
    \ a function to do this:\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\
    \t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsq1dwr5i.jl:22\nin expression starting at\
    \ /tmp/tmpsq1dwr5i.jl:22\n"
  stdout: ''
  timestamp: 1659978037
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    \"\"\"Given a vector of positive integers x. return a sorted vector of all\
    \ \n    elements that hasn't any even digit.\nusing Test\n\n@testset begin\n\n\
    candidate = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\
    \t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345,\
    \ 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5jie0gul.jl:1\nin expression starting at /tmp/tmp5jie0gul.jl:1\n"
  stdout: ''
  timestamp: 1659978035
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \        unique_digit_list = Vector{Int64}()\n        for i in x\n           \
    \ if mod (i,10) == 0 \n                unique_digit_list += i\n            end\n\
    \        end\n        unique_digit_list\n    end\nusing Test\n\n@testset begin\n\
    \ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) == [1, 15,\
    \ 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345,\
    \ 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: space before \"(\" not allowed in \"mod (\" at\
    \ /tmp/tmpp76xjhky.jl:15\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpp76xjhky.jl:15\n\
    in expression starting at /tmp/tmpp76xjhky.jl:15\n"
  stdout: ''
  timestamp: 1659978037
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    x.sort!()\n    unique_elements = Set{Int64}()\n    for i in x\n        unique_elements\
    \ |= Set(i.digits)\n    end\n    return unique_elements - set(x...)\nend\n</cell>\n\
    <text>\nProblem 10\nGiven an array, write a function that returns true if the\
    \ array contains any duplicate elements. \nFor example, given [5, 7, 7, 9, 7]\
    \ it should return true. The array size could be up to 1,000,000 elements. \n\
    It is guaranteed the array does not contain nil or any other value.\nusing Test\n\
    \n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422,\
    \ 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmps8b_t5c_.jl:20\nin expression starting at\
    \ /tmp/tmps8b_t5c_.jl:20\n"
  stdout: ''
  timestamp: 1659978037
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    if length(x) == 0\n        return Vector{Int64}()\n    \n    unique_digits(x)\n\
    \    \n    function uniq(x)\n        local seen = Set{Int64}()\n        local\
    \ result = Set{Int64}()\n        for x in x\n            if seen[x] == 0\n   \
    \             result.insert(x)\n                seen[x] = 1\n            end\n\
    \        end\n        return result\n    end\n    \n    unique_digits(x) = sort(unique(unique(sort(x))...))\n\
    end\n</code>\n<|/ a |>\n<| c |>\nThank you for your answer. Yes, this code is\
    \ working correctly. But, unfortunately, I couldn't make it work in Julia.\n<|/\
    \ c |>\n<| a |>\nHere's a vectorized solution:\n<code>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) ==\
    \ [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxpyy71j6.jl:32\nin expression starting at\
    \ /tmp/tmpxpyy71j6.jl:32\n"
  stdout: ''
  timestamp: 1659978037
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    for i in x: \n        if i%2 == 0 \n            push!(unique, i)\n      \
    \  else\n            continue\n    end\n    return unique\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422,\
    \ 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmv5_z9je.jl:14\nin expression starting at\
    \ /tmp/tmpmv5_z9je.jl:14\n"
  stdout: ''
  timestamp: 1659978037
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    \"\"\"\n    Idea: use sort to sort and then remove all even digit\n    \"\
    \"\"\n    @assert x.max <= 360 \"x should contains 360 at most digits\"\n    digits\
    \ = sort(x)\n    even_removed = filter(i -> i mod 2 ==0, digits)\n    return even_removed\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpaf4jabyk.jl:18\nin expression starting at\
    \ /tmp/tmpaf4jabyk.jl:18\n"
  stdout: ''
  timestamp: 1659978037
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    if x.isEmpty return x else unique_digits(x[1:end-1]) \n    \n    local a\
    \ = unique(sort(x))\n    if length(a) == 0 return a\n    local b = []\n    for\
    \ k in a \n        if mod(k, 10) == 0 then push!(b, k) end\n    end\n    return\
    \ b\nend\n\"\"\"Given a vector of positive integers x. return a sorted vector\
    \ of all \n    elements that has only odd digit.\nusing Test\n\n@testset begin\n\
    \ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) == [1, 15,\
    \ 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345,\
    \ 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"push!\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpk7__4n0u.jl:19\nin expression starting at /tmp/tmpk7__4n0u.jl:19\n"
  stdout: ''
  timestamp: 1659978038
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    non_even_res = x\n    for i in n\u220Asort(unique(x)) \n        push!(non_even_res,\
    \ i)\n    end\n    return non_even_res\nend\nusing Test\n\n@testset begin\n\n\
    candidate = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\
    \t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345,\
    \ 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"\u220A\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpusl_53bz.jl:14\nin expression starting at\
    \ /tmp/tmpusl_53bz.jl:14\n"
  stdout: ''
  timestamp: 1659978038
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    digit_count = zeros(Int, 0)\n    for i in x\n        if i < 10\n        \
    \    digit_count[i] = digit_count[i] + 1\n        else\n            digit_count[i]\
    \ = digit_count[i] + 1\n            if digit_count[i] % 2 == 0\n             \
    \   push!(digit_count, 0)\n            end\n        end\n    end\nusing Test\n\
    \n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422,\
    \ 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmptai8iytv.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmptai8iytv.jl:1\n\
    in expression starting at /tmp/tmptai8iytv.jl:1\n"
  stdout: ''
  timestamp: 1659978038
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    \n    # find all the even digits in x\n    evens = filter( x -> x % 2 ==\
    \ 0, x)\n    # sort by odd digits\n    odd = sort!(evens)\n    # return only odd\
    \ digits\n    vec = (evens - odd)\n    # return sorted odd vector\n    vec\nend\n\
    \"\"\"Given a vector of positive integers x. return a sorted vector of all \n\
    \    elements that hasn't any even digit.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3ssdf3k1.jl:23\nin expression starting at\
    \ /tmp/tmp3ssdf3k1.jl:23\n"
  stdout: ''
  timestamp: 1659978038
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    \n    @assert all(digits(x) == Int64)\nusing Test\n\n@testset begin\n\ncandidate\
    \ = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpm41ogv01.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpm41ogv01.jl:1\n\
    in expression starting at /tmp/tmpm41ogv01.jl:1\n"
  stdout: ''
  timestamp: 1659978038
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    if is_empty(x) \n        return x \n    unique_digits = unique_digits(tail(x))\
    \ \n    unique_digits.push(head(x)) \n    unique_digits \nend \nusing Test\n\n\
    @testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422,\
    \ 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpbv60ibdt.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpbv60ibdt.jl:1\n\
    in expression starting at /tmp/tmpbv60ibdt.jl:1\n"
  stdout: ''
  timestamp: 1659978038
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    ans = zeros(Int, length(unique(x)))\n    for a in x\n        for b in ans[2:end]\n\
    \            if mod(a, b) == 0 && b != 0\n                ans = vcat(ans, b)\n\
    \                break\n        end\n    end\n    ans\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) ==\
    \ [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmppplar4fk.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmppplar4fk.jl:1\n\
    in expression starting at /tmp/tmppplar4fk.jl:1\n"
  stdout: ''
  timestamp: 1659978038
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    \n    # Your code here\n    \n    return [] \nend \n</cell>\n<code language=julia-0.6>\n\
    @assert unique_digits([15, 33, 1422, 1]) == [1, 15, 33]\n@assert unique_digits([152,\
    \ 323, 1422, 10]) == []\n</cell>\n<text>\n3. Sort all elements by ascending order\n\
    using Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp74h74tfj.jl:18\nin expression starting at\
    \ /tmp/tmp74h74tfj.jl:18\n"
  stdout: ''
  timestamp: 1659978038
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    result = []\n    for i in x\n        if iseven(i)\n            result = []\n\
    \        else\n            push!(result, i)\n        end\n    end\n    return\
    \ result\nend\n</cell>\n<code language=julia-0.6>\nunique_digits([152, 323, 1422,\
    \ 10])\n</cell>\n<text>\nProblem #2\nGiven a vector x, return a vector where each\
    \ element is the product of all the numbers in x.\nusing Test\n\n@testset begin\n\
    \ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) == [1, 15,\
    \ 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345,\
    \ 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxujraf2f.jl:23\nin expression starting at\
    \ /tmp/tmpxujraf2f.jl:23\n"
  stdout: ''
  timestamp: 1659978039
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \  usetd = Set{Int64}()\n  for i in x\n    if i mod 2 == 0 && !usetd.contains(i)\n\
    \      usetd += i\n    end\n  end\n  usetd\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) == [1, 15,\
    \ 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345,\
    \ 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"2\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpxyathkjc.jl:15\nin expression starting at /tmp/tmpxyathkjc.jl:15\n"
  stdout: ''
  timestamp: 1659978038
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    result = []\n    for i in x \n        if iszero(i) == true\n            continue\n\
    \        else \n            push!(result, i)\n        end\n    end\n    return\
    \ result\nend\n</cell>\n<text>\nQ9. Write a function that removes all the numbers\
    \ that has zero digit from a list of numbers. \nusing Test\n\n@testset begin\n\
    \ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) == [1, 15,\
    \ 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345,\
    \ 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvq7s_xn4.jl:23\nin expression starting at\
    \ /tmp/tmpvq7s_xn4.jl:23\n"
  stdout: ''
  timestamp: 1659978039
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    if length(x) == 0 return x\n    \n    sorted_x = sort(x)\n    sorted_x0 =\
    \ zeros(0)\n    unique_digits_idxs = Vector{Int64}[]\n    \n    for i in sorted_x\n\
    \        if i % 2 == 0\n            push!(unique_digits_idxs, i)\n        else\n\
    \            push!(sorted_x0, i)\n        end\n    end\n    \n    unique_digits\
    \ = SortedVector(unique_digits_idxs)\n    push!(unique_digits, sorted_x0[end])\n\
    \    \n    return unique_digits\nend\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ unique_digits([15, 33, 1422, 1])\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ unique_digits([152, 323, 1422, 10])\n</cell>\n<text>\n2.3 Palindrome Number\n\
    using Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpm_1x2ptq.jl:32\nin expression starting at\
    \ /tmp/tmpm_1x2ptq.jl:32\n"
  stdout: ''
  timestamp: 1659978039
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    if length(x) == 0 || sum(x) == 0\n        return vec()\n    \n    x = sort(x)\n\
    \    \n    l = length(x)\n    \n    i = 2\n    while i < l\n        if x[i] ==\
    \ 0\n            x = delete(x, i)\n        elseif x[i-1] != 0 && (x[i]%10) ==\
    \ x[i-1]%10\n            x = delete(x, i)\n        else\n            i += 1\n\
    \        end\n    end\n    \n    return x\nend\n\"\"\"\n    \n    Given a vector\
    \ of positive integers x. return a sorted vector of all \n    elements that hasn't\
    \ any non-negative integer digit.\nusing Test\n\n@testset begin\n\ncandidate =\
    \ unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmqlha8kp.jl:1\nin expression starting at /tmp/tmpmqlha8kp.jl:1\n"
  stdout: ''
  timestamp: 1659978039
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    ans = Vector{Int64}()\n    for n in x\n        idx = find(x .== n)\n    \
    \    if idx == length(x)\n            push!(ans, n)\n        else\n          \
    \  ans1 = unique_digits(x[idx+1:end])\n            if any(x .== n .& x == 1 .&\
    \ x .== 1 .& x .== 1)\n                push!(ans1, n)\n            end\n     \
    \   end\n    end\n    return ans\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmps65cqeo4.jl:29

    '
  stdout: "test set: Error During Test at /tmp/tmps65cqeo4.jl:32\n  Test threw exception\n\
    \  Expression: candidate([15, 33, 1422, 1]) == [1, 15, 33]\n  UndefVarError: find\
    \ not defined\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main\
    \ /tmp/tmps65cqeo4.jl:15\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmps65cqeo4.jl:32 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmps65cqeo4.jl:31\ntest set:\
    \ Error During Test at /tmp/tmps65cqeo4.jl:33\n  Test threw exception\n  Expression:\
    \ candidate([152, 323, 1422, 10]) == Vector{Int64}([])\n  UndefVarError: find\
    \ not defined\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main\
    \ /tmp/tmps65cqeo4.jl:15\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmps65cqeo4.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmps65cqeo4.jl:31\ntest set:\
    \ Error During Test at /tmp/tmps65cqeo4.jl:34\n  Test threw exception\n  Expression:\
    \ candidate([12345, 2033, 111, 151]) == [111, 151]\n  UndefVarError: find not\
    \ defined\n  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main\
    \ /tmp/tmps65cqeo4.jl:15\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmps65cqeo4.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmps65cqeo4.jl:31\ntest set:\
    \ Error During Test at /tmp/tmps65cqeo4.jl:35\n  Test threw exception\n  Expression:\
    \ candidate([135, 103, 31]) == [31, 135]\n  UndefVarError: find not defined\n\
    \  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main /tmp/tmps65cqeo4.jl:15\n\
    \   [2] macro"
  timestamp: 1659978041
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    unique_digits = Set()\n    for n in x\n        if iszero(n) == true\n   \
    \         unique_digits += n\n        else\n            if unique_digits == Set(n)\n\
    \                unique_digits += n\n            else\n                unique_digits\
    \ += Set(n)\n            end\n        end\n    end\n    return unique_digits\n\
    end\n\"\"\"\n    Given a vector of positive integers x. return a sorted vector\
    \ of all \n    elements that hasn't any odd digit.\nusing Test\n\n@testset begin\n\
    \ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) == [1, 15,\
    \ 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345,\
    \ 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpuxibuvi6.jl:27\nin expression starting at\
    \ /tmp/tmpuxibuvi6.jl:27\n"
  stdout: ''
  timestamp: 1659978039
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    result = x.copy()\n    \n    for (i, value) in enumerate(result)\n      \
    \  \n        if value == 0 \n            continue\n            \n        if iszero(value\
    \ % 10) == 0\n            result[i] = 0\n        end\n    end\n    \n    return\
    \ result\nend\n</cell>\n<code language=julia-1.0>\n# TASKS\n# TASK - Part 1\n\
    using Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbgkvp8tm.jl:27\nin expression starting at\
    \ /tmp/tmpbgkvp8tm.jl:27\n"
  stdout: ''
  timestamp: 1659978039
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    res=[]\n    for i in x:\n        if iseven(i)==0\n            push!(res,\
    \ i)\n        end\n    end\n    return res\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) == [1, 15,\
    \ 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345,\
    \ 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9lqjxjpi.jl:15\nin expression starting at\
    \ /tmp/tmp9lqjxjpi.jl:15\n"
  stdout: ''
  timestamp: 1659978039
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    return sort(x) == unique_digits_impl(x)\nend\n</cell>\n<code language=julia-0.6>\n\
    @code_warntype unique_digits([15, 33, 1422, 1])\n</cell>\n<code language=julia-0.6>\n\
    @code_warntype unique_digits(1:100)\n</cell>\n<code language=julia-0.6>\n@code_warntype\
    \ unique_digits([152, 323, 1422, 10])\n</cell>\n<code language=julia-0.6>\n@code_warntype\
    \ unique_digits([-1, 0, 1, 2, 4, 9, 18])\n</cell>\n<code language=julia-0.6>\n\
    @code_warntype unique_digits([-100, 100, 0, 0])\n</cell>\n<code language=julia-0.6>\n\
    @code_warntype unique_digits(zeros(3))\n</cell>\n<code language=julia-0.6>\n@code_warntype\
    \ unique_digits(zeros(3, 5))\n</cell>\n<text>\nGiven a vector of positive integers\
    \ x. return a sorted vector of all \n    elements that hasn't any odd digit.\n\
    using Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3560423h.jl:15\nin expression starting at\
    \ /tmp/tmp3560423h.jl:15\n"
  stdout: ''
  timestamp: 1659978040
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    \"\"\"\n    Code by Daniel Lambert\n    \"\"\"\n    unique_digits_ = Set()\n\
    \    for i in x\n        if i mod 2 == 0\n            if !contains(unique_digits_,\
    \ i)\n                unique_digits_ += i\n            end\n        end\n    end\n\
    \    unique_digits= unique_digits_\n    unique_digits_ = sort(unique_digits)\n\
    \    \n    return unique_digits_\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"2\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpq_bh_yb3.jl:18\nin expression starting at /tmp/tmpq_bh_yb3.jl:18\n"
  stdout: ''
  timestamp: 1659978039
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    \n    if length(x) == 0  \n        \n        return Vector{Int64}()\n   \
    \ end\n    \n    unique_digits = Vector{Int64}()\n    \n    for x in x\n     \
    \   if x % 2 == 0 \n            push!(unique_digits, x)\n        end\n    end\n\
    \    return unique_digits\nend\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\
    \t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpxevl0h75.jl:30

    '
  stdout: "test set: Test Failed at /tmp/tmpxevl0h75.jl:33\n  Expression: candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n   Evaluated: [1422] == [1, 15, 33]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxevl0h75.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxevl0h75.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpxevl0h75.jl:34\n  Expression: candidate([152, 323, 1422, 10])\
    \ == Vector{Int64}([])\n   Evaluated: [152, 1422, 10] == Int64[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxevl0h75.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxevl0h75.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpxevl0h75.jl:35\n  Expression: candidate([12345, 2033, 111,\
    \ 151]) == [111, 151]\n   Evaluated: Int64[] == [111, 151]\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxevl0h75.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxevl0h75.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpxevl0h75.jl:36\n  Expression: candidate([135, 103, 31]) ==\
    \ [31, 135]\n   Evaluated: Int64[] == [31, 135]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpxevl0h75.jl:36 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpxevl0h75.jl:32\nTest Summary: | Fail  Total\n\
    test set      |    4      4\n"
  timestamp: 1659978041
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    \n    unique_digits = Vector{Int64}(undef, length(x))\n    unique_digits[1]\
    \ = x[1]\n    unique_digits[2] = x[end]\n    for i in 3:length(x)\n        if\
    \ x[i] % 2 != 0\n            unique_digits[i] = x[i]\n        end\n    end\n \
    \   \n    return unique_digits\nend\n</cell>\n<code language=julia-1.5>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpb9bf0s11.jl:25\nin expression starting at\
    \ /tmp/tmpb9bf0s11.jl:25\n"
  stdout: ''
  timestamp: 1659978040
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    \n    unique_digits_list = Vector{Int64}()\n    unique_digits_list_new =\
    \ []\n    \n    for element in x \n        if element mod 2 != 0 \n          \
    \  push!(unique_digits_list, element)\n        end\n    end\n    \n    for i in\
    \ unique_digits_list\n        push!(unique_digits_list_new, i)\n    end\n    \n\
    \    push!(unique_digits_list_new, 10)\n    \n    return unique_digits_list_new\n\
    end\n</cell>\n<code language=julia-1.5>\nunique_digits([1, 15, 33, 1422, 1])\n\
    </cell>\n<code language=julia-1.5>\n# test unique_digits\nunique_digits(Vector{Int64}([1,\
    \ 15, 33, 1422, 1]))\n</cell>\n<text>\nThe function digits(x) takes a vector of\
    \ integers and returns back a vector of integers \ncontaining all the digits in\
    \ the number. Here is an example:\nusing Test\n\n@testset begin\n\ncandidate =\
    \ unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"2\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpv93q4yfz.jl:18\nin expression starting at /tmp/tmpv93q4yfz.jl:18\n"
  stdout: ''
  timestamp: 1659978040
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    \"\"\"\n    Implement unique_digits(x) here\n    \"\"\"\n    unique_digits([])\
    \ = []\n    unique_digits([x]) | unique_digits(filter(x->x % 2 != 0, x)) = x\n\
    end\n</cell>\n<code language=julia-1.3>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"[]\" is not a valid function argument name\
    \ around /tmp/tmp4v2lren8.jl:16\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp4v2lren8.jl:1\n\
    in expression starting at /tmp/tmp4v2lren8.jl:1\n"
  stdout: ''
  timestamp: 1659978040
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    \n    # your code goes here \n    return x\nend\n</cell>\n<code language=julia-1.4>\n\
    using Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdnunjw_3.jl:17\nin expression starting at\
    \ /tmp/tmpdnunjw_3.jl:17\n"
  stdout: ''
  timestamp: 1659978040
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    answer = Vector{Int64}()\n    for i in x\n        if i %% 2 == 0\n      \
    \      push!(answer, i)\n        end\n    end\n    answer\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422,\
    \ 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"%\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpc3jhzro3.jl:15\nin expression starting at\
    \ /tmp/tmpc3jhzro3.jl:15\n"
  stdout: ''
  timestamp: 1659978040
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    if length(x) == 0\n        return x \n    else\n        ys = x .% 10\n  \
    \      z = y .< 10 ? ys : ys .== 0 ? x : x.*10 + (10 - ys)\n        z = unique_digits(z)\n\
    \        z = z ++ unique_digits(z .- y)\n    end\n    return z \nend\n</code>\n\
    <|/ a |>\n<| c |>\nA few issues with this one.  You don't need the `unique` since\
    \ you only have a vector.  Also `y` shouldn't be changed.  `y` should remain the\
    \ same.  Also, in case `x` is empty this will be a infinite loop.  Finally, the\
    \ function isn't a true unique (it returns `x` if the vector is empty).  It also\
    \ isn't the most efficient.\n<|/ c |>\n<| a |>\nYou can use a combination of filter\
    \ and uniq.\n<code>\nusing Base.Iterators\nusing Test\n\n@testset begin\n\ncandidate\
    \ = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpk8ill8tu.jl:23\nin expression starting at\
    \ /tmp/tmpk8ill8tu.jl:23\n"
  stdout: ''
  timestamp: 1659978040
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    # write your code in Python 3 or Python 2 code style and press Run button\n\
    using Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp_lrhd_re.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp_lrhd_re.jl:1\n\
    in expression starting at /tmp/tmp_lrhd_re.jl:1\n"
  stdout: ''
  timestamp: 1659978040
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    # Create a vector to store unique digits.\n    unique_digits=Vector{Int64}()\n\
    \    \n    # Iterate the vector and check for even digit.\n    for i in x\n  \
    \      if i%2==0\n            if !contains(unique_digits,i) \n               \
    \ push!(unique_digits,i)\n            end\n        end\n    end\n    return unique_digits\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 2 failed, 2 errored,
    0 broken.

    in expression starting at /tmp/tmpelhqufbm.jl:28

    '
  stdout: "test set: Error During Test at /tmp/tmpelhqufbm.jl:31\n  Test threw exception\n\
    \  Expression: candidate([15, 33, 1422, 1]) == [1, 15, 33]\n  MethodError: no\
    \ method matching contains(::Vector{Int64}, ::Int64)\n  Closest candidates are:\n\
    \    contains(!Matched::AbstractString, ::Any) at ~/.conda/envs/polyglot/share/julia/base/strings/util.jl:100\n\
    \    contains(::Any) at ~/.conda/envs/polyglot/share/julia/base/strings/util.jl:161\n\
    \  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main /tmp/tmpelhqufbm.jl:19\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpelhqufbm.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpelhqufbm.jl:30\ntest set:\
    \ Error During Test at /tmp/tmpelhqufbm.jl:32\n  Test threw exception\n  Expression:\
    \ candidate([152, 323, 1422, 10]) == Vector{Int64}([])\n  MethodError: no method\
    \ matching contains(::Vector{Int64}, ::Int64)\n  Closest candidates are:\n   \
    \ contains(!Matched::AbstractString, ::Any) at ~/.conda/envs/polyglot/share/julia/base/strings/util.jl:100\n\
    \    contains(::Any) at ~/.conda/envs/polyglot/share/julia/base/strings/util.jl:161\n\
    \  Stacktrace:\n   [1] unique_digits(x::Vector{Int64})\n     @ Main /tmp/tmpelhqufbm.jl:19\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpelhqufbm.jl:32 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpelhqufbm.jl:30\ntest set:\
    \ Test Failed at /tmp/tmpelhqufbm.jl:33\n  Expression: candidate([12345, 2033,\
    \ 111, 151]) == [111, 151]\n   Evaluated: Int64[] == [111, 151]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpelhqufbm.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.co"
  timestamp: 1659978043
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \"\"\"\n    A function that remove all duplicate numbers from a vector.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9746am8t.jl:1\nin expression starting at /tmp/tmp9746am8t.jl:1\n"
  stdout: ''
  timestamp: 1659978040
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    if len(x)==0\n        error(\"empty vector\")\n    end\n    vec =[]\n   \
    \ for i in x\n        if i mod 2 != 0\n            push!(vec, i)\n        end\n\
    \    end\n    vec\nend\n</cell>\n<code language=julia-1.5>\n# Tests\n@testset\
    \ \"unique_digits\" begin\n@test unique_digits([15, 33, 1422, 1]) == [1, 15, 33]\n\
    @test unique_digits([152, 323, 1422, 10]) == []\nend\n</cell>\n<text>\nExercise:\
    \ find number of digits in each number\nusing Test\n\n@testset begin\n\ncandidate\
    \ = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"2\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp12fzxdwc.jl:18\nin expression starting at /tmp/tmp12fzxdwc.jl:18\n"
  stdout: ''
  timestamp: 1659978040
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    return sort(x)[findall(x .% == 0)]\nend\n</cell>\n<code language=julia-1.1>\n\
    \"\"\"\n    unique_words_of_length(word, length)\n    \n    Input: word (String),\
    \ length (Int64)\n    Output: Vector of words with given length\n\"\"\"\nusing\
    \ Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"==\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphhpk_za9.jl:13\nin expression starting at\
    \ /tmp/tmphhpk_za9.jl:13\n"
  stdout: ''
  timestamp: 1659978040
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    if length(x) < 1\n        return Vector{Int64}()\n    else\n        aux =\
    \ sort(x)\n        aux[1::2] = 0\n    end\n    return aux\nend\n</cell>\n<cell>\n\
    # export\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpj9_f2sss.jl:21\nin expression starting at\
    \ /tmp/tmpj9_f2sss.jl:21\n"
  stdout: ''
  timestamp: 1659978040
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    \n    len = length(x)\n    seen = Set{Int64}()\n    answer = Vector{Int64}()\n\
    \    \n    for i in 1:len\n        if !seen[get(i)]\n            push!(answer,\
    \ get(i))\n            seen[get(i)] = true\n        else\n            continue\n\
    \        end\n    end\n    answer\nend\n</cell>\n<code language=julia-1.5>\nunique_digits([15,\
    \ 33, 1422, 1])\n</cell>\n<text>\n\u0417\u0430\u0434\u0430\u0447\u0430. \u0423\
    \u043C\u0435\u043D\u044C\u0448\u0438\u0442\u044C \u043E\u0431\u0449\u0438\u0439\
    \ \u0442\u0435\u043A\u0443\u0449\u0443\u044E \u0447\u0438\u0441\u043B\u043E \u0438\
    \u0437 \u0441\u043F\u0438\u0441\u043A\u0430 \u0447\u0438\u0441\u0435\u043B \u0432\
    \ \u043F\u0440\u043E\u0438\u0437\u0432\u043E\u043B\u044C\u043D\u043E\u0435 \u043A\
    \u043E\u043B\u0438\u0447\u0435\u0441\u0442\u0432\u043E \u0438\u0437 \u0434\u0432\
    \u0443\u0445 \u0442\u0440\u0435\u0445 \u0447\u0438\u0441\u0435\u043B.\nusing Test\n\
    \n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422,\
    \ 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgonyt07s.jl:28\nin expression starting at\
    \ /tmp/tmpgonyt07s.jl:28\n"
  stdout: ''
  timestamp: 1659978040
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    \n    unique_digits_vec = Vector{Int64}()\n    unique_digits_vec = sort(unique_digits_vec)\n\
    \    \n    unique_digits_vec_size = length(unique_digits_vec)\n    \n    unique_digits_vec_sort\
    \ = Vector{Int64}()\n    \n    \n    for digits in unique_digits_vec\n       \
    \ if digits == 0 \n            unique_digits_vec_sort[unique_digits_vec_size]\
    \ = 0 \n        else \n            unique_digits_vec_sort[unique_digits_vec_size]\
    \ = digits\n        end\n        unique_digits_vec_size += 1 \n    end\n    \n\
    \    for digits in unique_digits_vec_sort\n        if digits_remainder == 0 \n\
    \            return unique_digits_vec\n        else \n            if digits_remainder\
    \ == 1\n                unique_digits_vec[digits] = 0 \n            end\n    \
    \        digits_remainder = digits_remainder - 1 \n        end\n    end\n    return\
    \ unique_digits_vec\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) ==\
    \ [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcpuca_ed.jl:43\nin expression starting at\
    \ /tmp/tmpcpuca_ed.jl:43\n"
  stdout: ''
  timestamp: 1659978040
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    unique_digits = x.==0\n    unique_digits = [i for i=1:length(unique_digits)\
    \ if x[i]==0]\n    return unique_digits\nend\n</cell>\n<code language=julia-1.0>\n\
    unique_digits([15, 33, 1422, 1])\n</cell>\n<code language=julia-1.0>\nunique_digits([152,\
    \ 323, 1422, 10])\n</cell>\n<text>\nQuestion 9\nLet's redefine the problem with\
    \ a different set of digits. We want to get rid of even numbers. \nYou might be\
    \ tempted to use unique_digits to get rid of the even numbers. But what if instead\
    \ of numbers, we had some letters (strings?)? This approach will not work!\nusing\
    \ Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7emg0uug.jl:17\nin expression starting at\
    \ /tmp/tmp7emg0uug.jl:17\n"
  stdout: ''
  timestamp: 1659978041
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    len = length(x)\n    digits = Int64[i for i in 1:len]\n    evens = digits[digits[digits]%2\
    \ == 0]\n    unique_digits = x.-evens\n    unique_digits\nend\n</cell>\n<text>\n\
    Exercise. How can we improve the performance of unique_digits using parallel?\n\
    using Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpg0uwbexy.jl:19\nin expression starting at\
    \ /tmp/tmpg0uwbexy.jl:19\n"
  stdout: ''
  timestamp: 1659978041
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    if length(x) == 0 \n        x \n    else \n        x \n        |> sort()\
    \ \n        |> unique_digits(x) \n        |> sort() \n    end\nend\n</cell>\n\
    <code language=julia-0.5>\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\
    \t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"|>\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpy8f3am6a.jl:17\nin expression starting at\
    \ /tmp/tmpy8f3am6a.jl:17\n"
  stdout: ''
  timestamp: 1659978041
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    x .= unique(x) \n    x .= sort(x) \n    \n    if length(x) == 0 \n      \
    \  return x \n    \n    for i \u2208 x \n        if mod(i, 2) == 0 \n        \
    \    x[findall(x == i)] .= [] \n        else \n            x[findall(x == i)]\
    \ .= i \n    endfor \n    x \nendfunction \n</cell>\n<text>\n2. Find all subsets\
    \ of given set with given cardinality \nusing Test\n\n@testset begin\n\ncandidate\
    \ = unique_digits;\n\t@test(candidate([15, 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152,\
    \ 323, 1422, 10]) == Vector{Int64}([]))\n\t@test(candidate([12345, 2033, 111,\
    \ 151]) == [111, 151])\n\t@test(candidate([135, 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpldd9gdy6.jl:27\nin expression starting at\
    \ /tmp/tmpldd9gdy6.jl:27\n"
  stdout: ''
  timestamp: 1659978041
- exit_code: 1
  program: "\"\"\"Given a vector of positive integers x. return a sorted vector of\
    \ all \n    elements that hasn't any even digit.\n\n    Note: Returned vector\
    \ should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15,\
    \ 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n\
    \    []\n    \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n\
    \    \n    @assert(x >= 0, \"x must be non-negative\")\n    \n    unique_digits\
    \ = Set()\n    \n    for el in x\n        \n        if mod(el, 2) == 0 \n    \
    \        unique_digits.add(el)\n        end\n    end\n    \n    return unique_digits\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
    \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
    \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
    \ 103, 31]) == [31, 135])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmppcqoju_0.jl:29

    '
  stdout: "test set: Error During Test at /tmp/tmppcqoju_0.jl:32\n  Test threw exception\n\
    \  Expression: candidate([15, 33, 1422, 1]) == [1, 15, 33]\n  MethodError: no\
    \ method matching isless(::Int64, ::Vector{Int64})\n  Closest candidates are:\n\
    \    isless(!Matched::AbstractVector, ::AbstractVector) at ~/.conda/envs/polyglot/share/julia/base/abstractarray.jl:2550\n\
    \    isless(::Real, !Matched::AbstractFloat) at ~/.conda/envs/polyglot/share/julia/base/operators.jl:185\n\
    \    isless(::Real, !Matched::Real) at ~/.conda/envs/polyglot/share/julia/base/operators.jl:430\n\
    \    ...\n  Stacktrace:\n   [1] <(x::Int64, y::Vector{Int64})\n     @ Base ./operators.jl:352\n\
    \   [2] <=(x::Int64, y::Vector{Int64})\n     @ Base ./operators.jl:401\n   [3]\
    \ >=(x::Vector{Int64}, y::Int64)\n     @ Base ./operators.jl:425\n   [4] unique_digits(x::Vector{Int64})\n\
    \     @ Main /tmp/tmppcqoju_0.jl:14\n   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmppcqoju_0.jl:32 [inlined]\n\
    \   [7] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmppcqoju_0.jl:31\ntest set:\
    \ Error During Test at /tmp/tmppcqoju_0.jl:33\n  Test threw exception\n  Expression:\
    \ candidate([152, 323, 1422, 10]) == Vector{Int64}([])\n  MethodError: no method\
    \ matching isless(::Int64, ::Vector{Int64})\n  Closest candidates are:\n    isless(!Matched::AbstractVector,\
    \ ::AbstractVector) at ~/.conda/envs/polyglot/share/julia/base/abstractarray.jl:2550\n\
    \    isless(::Real, !Matched::AbstractFloat) at ~/.conda/envs/polyglot/share/julia/base/operators.jl:185\n\
    \    isless(::Real, !Matched::Real) at ~/.conda/envs/polyglot/share/julia/base/operators.jl:430\n\
    \    ...\n  Stacktrace:\n   [1] <(x::Int64, y::Vector{Int64})\n     @ Base ./operators.jl:352\n\
    \   [2] <=(x::Int64, y::Vector{Int64})\n     @ Base ./operators.jl:401\n   [3]\
    \ >=(x::Vector{Int64}, y::Int64)\n     @ Base ./operators.jl:425\n   [4] unique_digits(x::Vector{Int64})\n\
    \     @ Main /tmp/tmppcqoju_0.jl:14\n   [5] m"
  timestamp: 1659978043
