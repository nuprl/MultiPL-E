language: jl
name: HumanEval_66_digitSum
results:
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the digits only'\n    ASCII codes.\nusing Test\n\n@testset begin\n\
    \ncandidate = digitSum;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\"\
    ) == 131)\n\t@test(candidate(\"abcCd\") == 67)\n\t@test(candidate(\"helloE\")\
    \ == 69)\n\t@test(candidate(\"woArBld\") == 131)\n\t@test(candidate(\"aAaaaXa\"\
    ) == 153)\n\t@test(candidate(\" How are yOu?\") == 151)\n\t@test(candidate(\"\
    You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkq19mahi.jl:1\nin expression starting at /tmp/tmpkq19mahi.jl:1\n"
  stdout: ''
  timestamp: 1659978988
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    \"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the numbers\n    in its ASCII codes.\nusing Test\n\n@testset begin\n\
    \ncandidate = digitSum;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\"\
    ) == 131)\n\t@test(candidate(\"abcCd\") == 67)\n\t@test(candidate(\"helloE\")\
    \ == 69)\n\t@test(candidate(\"woArBld\") == 131)\n\t@test(candidate(\"aAaaaXa\"\
    ) == 153)\n\t@test(candidate(\" How are yOu?\") == 151)\n\t@test(candidate(\"\
    You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxlh9onud.jl:1\nin expression starting at /tmp/tmpxlh9onud.jl:1\n"
  stdout: ''
  timestamp: 1659978988
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    \"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the characters\n    in the string.\nusing Test\n\n@testset begin\n\
    \ncandidate = digitSum;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\"\
    ) == 131)\n\t@test(candidate(\"abcCd\") == 67)\n\t@test(candidate(\"helloE\")\
    \ == 69)\n\t@test(candidate(\"woArBld\") == 131)\n\t@test(candidate(\"aAaaaXa\"\
    ) == 153)\n\t@test(candidate(\" How are yOu?\") == 151)\n\t@test(candidate(\"\
    You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1vl0cjto.jl:1\nin expression starting at /tmp/tmp1vl0cjto.jl:1\n"
  stdout: ''
  timestamp: 1659978988
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    \"\"\"\n    \"\"\"\n    if s == \"\"\n        0\n    else\n        sumDigits(s)\n\
    \    end\nend\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\nusing Test\n\n@testset begin\n\n\
    candidate = digitSum;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\"\
    ) == 131)\n\t@test(candidate(\"abcCd\") == 67)\n\t@test(candidate(\"helloE\")\
    \ == 69)\n\t@test(candidate(\"woArBld\") == 131)\n\t@test(candidate(\"aAaaaXa\"\
    ) == 153)\n\t@test(candidate(\" How are yOu?\") == 151)\n\t@test(candidate(\"\
    You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: cannot document the following expression:\n\n\"\"\n\n\
    Stacktrace:\n [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level\
    \ scope\n   @ /tmp/tmp3s8041s6.jl:28\nin expression starting at /tmp/tmp3s8041s6.jl:28\n"
  stdout: ''
  timestamp: 1659978988
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    let s:String = dropwhile(isUpper, s) in\n    let chars:Vec<Char> = split(s,\
    \ \"\") in\n    let s:Vec<Int> = map(digitToInt, chars) in\n    let total:Int64\
    \ = foldl(+, s) in\n    return total\nusing Test\n\n@testset begin\n\ncandidate\
    \ = digitSum;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\
    \t@test(candidate(\"abcCd\") == 67)\n\t@test(candidate(\"helloE\") == 69)\n\t\
    @test(candidate(\"woArBld\") == 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\
    \t@test(candidate(\" How are yOu?\") == 151)\n\t@test(candidate(\"You arE Very\
    \ Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"=\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpu6to_a23.jl:21\nin expression starting at /tmp/tmpu6to_a23.jl:21\n"
  stdout: ''
  timestamp: 1659978988
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    if s == \"\" then 0 else 1 + sum((x xor x) for (x,_) in zip((ord x for\
    \ x in s), digitSum(drop(s,1))))\nend\n</cell>\n<code language=julia-1.5>\ndigitSum(\"\
    \")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"abAB\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"abcCd\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"helloE\")\n\
    </cell>\n<code language=julia-1.5>\ndigitSum(\"woArBld\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"aAaaaXa\")\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    abAB\") == 131)\n\t@test(candidate(\"abcCd\") == 67)\n\t@test(candidate(\"helloE\"\
    ) == 69)\n\t@test(candidate(\"woArBld\") == 131)\n\t@test(candidate(\"aAaaaXa\"\
    ) == 153)\n\t@test(candidate(\" How are yOu?\") == 151)\n\t@test(candidate(\"\
    You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"0\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpcu1p23yd.jl:20\nin expression starting at /tmp/tmpcu1p23yd.jl:20\n"
  stdout: ''
  timestamp: 1659978988
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    \"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the ASCII codes.\nusing Test\n\n@testset begin\n\ncandidate = digitSum;\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"\
    abcCd\") == 67)\n\t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\"\
    ) == 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are\
    \ yOu?\") == 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpx5od4xw2.jl:1\nin expression starting at /tmp/tmpx5od4xw2.jl:1\n"
  stdout: ''
  timestamp: 1659978988
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    if length(s) == 0 \n        0\n    else \n        if isASCII(head(s),\
    \ 1) = false \n            digitSum(tail(s))\n        else\n            let digit\
    \ = digitSum(tail(s))\n            let sum = toASCII(head(s), 1) + digit\n   \
    \         if sum < 128 \n                sum\n            else \n            \
    \    sum\n        end\nend\n</code>\n<|/ a |>\n<| c |>\nThis does not handle non-ASCII\
    \ characters or other control characters, and the recursive call on `tail(tail(s))`\
    \ is wrong. Also, please don't compare booleans with `=`. Just use `if ... then\
    \ ... else ...` instead, which is much clearer.\n<|/ c |>\n<| c |>\n\"The recursive\
    \ call on tail(tail(s)) is wrong\" -- it's not. There is no tail(tail(s)) call\
    \ in this code. \"Please don't compare booleans with =\" -- you're right, thanks.\
    \ But I believe `if ... then ... else ...` is much clearer than `isASCII(head(s),\
    \ 1) = false ? digitSum(tail(s)) : digitSum(tail(tail(s)))` because `isASCII(head(s),\
    \ 1) = false` is only true if the first character is a control character, and\
    \ `digitSum(tail(s))` is only true if the first character is non-ASCII.\n<|/ c\
    \ |>\n<| c |>\nAlso, this solution does not handle ASCII characters whose code\
    \ points are out of range.\n<|/ c |>\n<| c |>\n\"Please don't compare booleans\
    \ with =\" -- You're right, thanks. But I believe `if ... then ... else ...` is\
    \ much clearer than `isASCII(head(s), 1) = false ? digitSum(tail(s)) : digitSum(tail(tail(s)))`\
    \ because `isASCII(head(s), 1) = false` is only true if the first character is\
    \ a control character, and `digitSum(tail(s))` is only true if the first character\
    \ is non-ASCII.\n<|/ c |>\n<| a tags=string,haskell,ascii dscore=1 |>\nHere's\
    \ a simpler solution that does not require any libraries. \n<code>\ndigitSum ::\
    \ String -> Int\ndigitSum \"\" = 0\ndigitSum (x:xs) = x + digitSum xs\n</code>\n\
    <|/ a |>\n<| a tags=string,haskell,ascii dscore=1 |>\n<code>\ntoASCII :: Char\
    \ -> Int\ntoASCII c\n  | isAlpha c  = (toInt c - 64) + 1\n  | otherwise  = toInt\
    \ c\nusing Test\n\n@testset begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"abcCd\") ==\
    \ 67)\n\t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\") ==\
    \ 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are yOu?\"\
    ) == 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"=\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpy_q27k6p.jl:23\nin expression starting at /tmp/tmpy_q27k6p.jl:23\n"
  stdout: ''
  timestamp: 1659978988
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = sum::Int64(0)\n    for x in s:\n        if x >= 'A' and x\
    \ <= 'Z':\n            sum += x::Int64\n    return sum::Int64\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    abAB\") == 131)\n\t@test(candidate(\"abcCd\") == 67)\n\t@test(candidate(\"helloE\"\
    ) == 69)\n\t@test(candidate(\"woArBld\") == 131)\n\t@test(candidate(\"aAaaaXa\"\
    ) == 153)\n\t@test(candidate(\" How are yOu?\") == 151)\n\t@test(candidate(\"\
    You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9hvqt3zn.jl:22\nin expression starting at\
    \ /tmp/tmp9hvqt3zn.jl:22\n"
  stdout: ''
  timestamp: 1659978988
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n  sum::Int64 = 0\n  for i in s\n    if i isUpper then sum += i else return\
    \ sum\n  end\n  sum\nend\nusing Test\n\n@testset begin\n\ncandidate = digitSum;\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"\
    abcCd\") == 67)\n\t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\"\
    ) == 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are\
    \ yOu?\") == 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"then\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpxyegr5o_.jl:22\nin expression starting at /tmp/tmpxyegr5o_.jl:22\n"
  stdout: ''
  timestamp: 1659978988
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the lower characters only'\n    ASCII codes.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    abAB\") == 131)\n\t@test(candidate(\"abcCd\") == 67)\n\t@test(candidate(\"helloE\"\
    ) == 69)\n\t@test(candidate(\"woArBld\") == 131)\n\t@test(candidate(\"aAaaaXa\"\
    ) == 153)\n\t@test(candidate(\" How are yOu?\") == 151)\n\t@test(candidate(\"\
    You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpodf7ikkq.jl:1\nin expression starting at /tmp/tmpodf7ikkq.jl:1\n"
  stdout: ''
  timestamp: 1659978988
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum = 0\n    for c in s:\n        if c in \"123456789\":\n           \
    \ sum += Int(c)\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.4>\n\
    \"\"\"Task\n    Write a function that takes a string as input and returns the\
    \ sum of the lowercase characters only'\n    ASCII codes.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    abAB\") == 131)\n\t@test(candidate(\"abcCd\") == 67)\n\t@test(candidate(\"helloE\"\
    ) == 69)\n\t@test(candidate(\"woArBld\") == 131)\n\t@test(candidate(\"aAaaaXa\"\
    ) == 153)\n\t@test(candidate(\" How are yOu?\") == 151)\n\t@test(candidate(\"\
    You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6rxzy6e7.jl:22\nin expression starting at\
    \ /tmp/tmp6rxzy6e7.jl:22\n"
  stdout: ''
  timestamp: 1659978988
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    \"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the first digits only'\n    ASCII codes.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    abAB\") == 131)\n\t@test(candidate(\"abcCd\") == 67)\n\t@test(candidate(\"helloE\"\
    ) == 69)\n\t@test(candidate(\"woArBld\") == 131)\n\t@test(candidate(\"aAaaaXa\"\
    ) == 153)\n\t@test(candidate(\" How are yOu?\") == 151)\n\t@test(candidate(\"\
    You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpocgkzn60.jl:1\nin expression starting at /tmp/tmpocgkzn60.jl:1\n"
  stdout: ''
  timestamp: 1659978988
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n| s == \"_\" | s == \"_\" = digitSum(tail(s))\n| s == \"_\" = 0\n| s == \"\
    _\" || s > \"9\" = digitSum(tail(s)) + digitSum(head(s)) - digitSum(tail(s))\n\
    | s == \"_\" || s > \"9\" = digitSum(tail(s)) - digitSum(head(s)) - digitSum(tail(s))\n\
    | s == \"_\" = digitSum(tail(s)) + digitSum(head(s)) + digitSum(tail(s))\n| s\
    \ == \"_\" = digitSum(tail(s)) + digitSum(head(s)) + digitSum(head(s) + tail(s))\n\
    | s == \"_\" = digitSum(tail(s)) + digitSum(head(s)) - digitSum(head(s) + tail(s))\n\
    | s == \"_\" = digitSum(tail(s)) + digitSum(head(s)) + digitSum(tail(s))\n| s\
    \ == \"_\" = digitSum(tail(s)) + digitSum(head(s)) - digitSum(head(s) + tail(s))\n\
    | s == \"_\" = digitSum(tail(s)) + digitSum(head(s)) + digitSum(tail(s))\n| s\
    \ == \"_\" = digitSum(tail(s)) + digitSum(head(s)) + digitSum(head(s) + tail(s))\n\
    | s == \"_\" = digitSum(tail(s)) + digitSum(head(s)) + digitSum(head(s) + tail(s))\n\
    | s == \"_\" = digitSum(tail(s)) + digitSum(head(s)) - digitSum(head(s) + tail(s))\n\
    | s == \"_\" = digitSum(tail(s)) + digitSum(head(s)) + digitSum(head(s) + tail(s))\n\
    | s == \"_\" = digitSum(tail(s)) + digitSum(head(s)) + digitSum(head(s) + tail(s))\n\
    | s == \"_\" = digitSum(tail(s)) + digitSum(head(s)) + digitSum(head(s) + tail(s))\n\
    | s == \"_\" = digitSum(tail(s)) + digitSum(head(s)) + digitSum(head(s) + tail(s))\n\
    | s == \"_\" = digitSum(tail(s)) + digitSum(head(s)) - digitSum(head(s) + tail(s))\n\
    | s == \"_\" = digitSum(tail(s)) + digitSum(head(s)) + digitSum(head(s) + tail(s))\n\
    | s == \"_\" = digitSum(tail(s)) + digitSum(head(s)) - digit\nusing Test\n\n@testset\
    \ begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    abAB\") == 131)\n\t@test(candidate(\"abcCd\") == 67)\n\t@test(candidate(\"helloE\"\
    ) == 69)\n\t@test(candidate(\"woArBld\") == 131)\n\t@test(candidate(\"aAaaaXa\"\
    ) == 153)\n\t@test(candidate(\" How are yOu?\") == 151)\n\t@test(candidate(\"\
    You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"|\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpm8xkwd8f.jl:20\nin expression starting at\
    \ /tmp/tmpm8xkwd8f.jl:20\n"
  stdout: ''
  timestamp: 1659978988
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    total::Int64 = 0\n    for character in s {\n        if character > 9 {\n\
    \            total += character - '0'\n        }\n    }\n    return total\nend\n\
    using Test\n\n@testset begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\"\
    ) == 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"abcCd\") ==\
    \ 67)\n\t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\") ==\
    \ 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are yOu?\"\
    ) == 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: space before \"{\" not allowed in \"s {\" at\
    \ /tmp/tmpymxv6upp.jl:21\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpymxv6upp.jl:21\n\
    in expression starting at /tmp/tmpymxv6upp.jl:21\n"
  stdout: ''
  timestamp: 1659978988
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    result := 0\n    for c in s:\n        if ('A' <= c <='Z'):\n         \
    \   result <- result + (c - 'A' + 10)\n    return result\nend \"\"\"\nusing Test\n\
    \n@testset begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    abAB\") == 131)\n\t@test(candidate(\"abcCd\") == 67)\n\t@test(candidate(\"helloE\"\
    ) == 69)\n\t@test(candidate(\"woArBld\") == 131)\n\t@test(candidate(\"aAaaaXa\"\
    ) == 153)\n\t@test(candidate(\" How are yOu?\") == 151)\n\t@test(candidate(\"\
    You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmph_x7ruj8.jl:22\nin expression starting at\
    \ /tmp/tmph_x7ruj8.jl:22\n"
  stdout: ''
  timestamp: 1659978988
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    if length(s)<2 \n        return 0 \n    elseif !startswith(s,\"A\") \n\
    \        return digitSum(substring(s,2))\n    elseif !startswith(s,\"a\") \n \
    \       return digitSum(substring(s,2))+digitSum(substring(s,1,2))\n    else\n\
    \        return digitSum(substring(s,2))+digitSum(substring(s,1,2))+digitSum(substring(s,0,2))\n\
    end\n\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of integers in the string.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = digitSum;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\
    \t@test(candidate(\"abcCd\") == 67)\n\t@test(candidate(\"helloE\") == 69)\n\t\
    @test(candidate(\"woArBld\") == 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\
    \t@test(candidate(\" How are yOu?\") == 151)\n\t@test(candidate(\"You arE Very\
    \ Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpei7sf_zb.jl:1\nin expression starting at /tmp/tmpei7sf_zb.jl:1\n"
  stdout: ''
  timestamp: 1659978988
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    if s == \"\"\n    then 0\n    else if ord(first(s))<128\n    then digitSum(tail(s))+ord(first(s))\
    \ \n    else digitSum(tail(s))+digitSum(first(s))\nend\n</cell>\n<code language=julia-0.4>\n\
    digitSum(\"helloE\")\n</cell>\n<text>\nExercise: Write a function that takes any\
    \ string of characters including spaces and returns the number of characters in\
    \ the string\nusing Test\n\n@testset begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"abcCd\") ==\
    \ 67)\n\t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\") ==\
    \ 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are yOu?\"\
    ) == 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"0\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp0rzo_3k1.jl:21\nin expression starting at /tmp/tmp0rzo_3k1.jl:21\n"
  stdout: ''
  timestamp: 1659978988
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    if isNull(s)\n        return 0 \n    val res = 0 \n    for c in s \n \
    \       if c >= '0' && c <= '9' \n            res = res + c - '0' \n    return\
    \ res \nend\nusing Test\n\n@testset begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"abcCd\") ==\
    \ 67)\n\t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\") ==\
    \ 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are yOu?\"\
    ) == 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"res\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp48fib8_4.jl:22\nin expression starting at /tmp/tmp48fib8_4.jl:22\n"
  stdout: ''
  timestamp: 1659978988
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n  digits :: [(Int64,Int)]\n  digits = map (\\(d,n) -> [d*10 + (n `mod` 10),\
    \ n]) (zip [0 .. 9], map Int s)\n  let s = \"\"\n  let n = (\"\", n)\n  digits\
    \ : while (n == (0, 0)), do \n    s += (head digits, head digits)\n    (n,n) <-\
    \ tail digits\n  s\nend\n</cell>\n<code language=julia-0.5>\ndigitSum(\"aAaaaXa\"\
    )\n</cell>\n<text>\nExercise 4\nWrite a function countLetters(s) that counts the\
    \ number of letters in the string.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = digitSum;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\
    \t@test(candidate(\"abcCd\") == 67)\n\t@test(candidate(\"helloE\") == 69)\n\t\
    @test(candidate(\"woArBld\") == 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\
    \t@test(candidate(\" How are yOu?\") == 151)\n\t@test(candidate(\"You arE Very\
    \ Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: space before \"(\" not allowed in \"map (\" at\
    \ /tmp/tmp0vurr58z.jl:21\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp0vurr58z.jl:21\n\
    in expression starting at /tmp/tmp0vurr58z.jl:21\n"
  stdout: ''
  timestamp: 1659978988
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    |s| <- [|s| : String.length () | s !~ \"[^a-zA-Z]\"]\n    |s| |> Array.sum\
    \ (fun x -> x.^2)\n    |s| |> String.toInt\n    |s| |> String.toUpper\n    |s|\
    \ |> String.length |> digitSum\n    |s| |> println\nend\n</code>\n<|/ a tags=ocaml,type-level-computation\
    \ |>\n<| c |>\nThe type checker does not complain about \"|s| |> Array.sum (fun\
    \ x -> x.^2)\" but when I try to run it it does. Why?\n<|/ c |>\n<| c |>\nThis\
    \ is probably a problem with the type checker being confused about what type `Array.sum`\
    \ returns.  It's probably saying \"the type of `sum` is `int`, but you're trying\
    \ to use it as an expression of type `char array`\".  Try `let _ = Array.sum (fun\
    \ x -> x.^2) [\"A\"; \"B\"; \"C\"; \"D\"] in print_int (Array.sum (fun x -> x.^2)\
    \ [\"A\"; \"B\"; \"C\"; \"D\"]) |> ignore;`.\n<|/ c |>\n<| c |>\nYour solutions\
    \ works great, I was able to use them in a more complex problem I had. Thank you\
    \ for your assistance!\n<|/ c |>\n<| a |>\nIf you need to type check only once,\
    \ you can define an auxiliary function that computes the sum of an array:\n<code>\n\
    let rec sum (x:'a array) =\n  match x with\n  | [] -> 0\n  | h::t -> (h + sum\
    \ t) \n</code>\nAnd then, at the type level, you can define a function with this\
    \ type signature:\n<code>\nval sum : ('a -> 'b -> 'c) -> 'a array -> 'c\n</code>\n\
    <|/ a dscore=2 tags=ocaml,type-level-computation |>\n<| c |>\nThank you! I appreciate\
    \ it.\n<|/ c |>\n<| c |>\nThis would also not work because you are using a polymorphic\
    \ type on the `h` parameter. While I understand what your goal is, it is not possible\
    \ to use polymorphic types in OCaml.\n<|/ c |>\n<| c |>\nOh, I see... I haven't\
    \ used OCaml lately, I used it for the first time recently. I thought it would\
    \ be a very straightforward solution. Thanks for the comment. I'll try to remember\
    \ \nusing Test\n\n@testset begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"abcCd\") ==\
    \ 67)\n\t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\") ==\
    \ 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are yOu?\"\
    ) == 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"|\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpv5sifrrn.jl:20\nin expression starting at\
    \ /tmp/tmpv5sifrrn.jl:20\n"
  stdout: ''
  timestamp: 1659978988
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum = 0\n    for c in s\n        if ('A' <= c && c <= 'Z')\n         \
    \   sum += c - 'A' + 1\n        elseif ('a' <= c && c <= 'z')\n            sum\
    \ += c - 'a' + 1\n        else\n            sum += c\n    sum\nend\n</cell>\n\
    <text>\nExercise: Write a function that takes a string as input and returns the\
    \ sum of the integers only.\nFor example:\nusing Test\n\n@testset begin\n\ncandidate\
    \ = digitSum;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\
    \t@test(candidate(\"abcCd\") == 67)\n\t@test(candidate(\"helloE\") == 69)\n\t\
    @test(candidate(\"woArBld\") == 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\
    \t@test(candidate(\" How are yOu?\") == 151)\n\t@test(candidate(\"You arE Very\
    \ Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvlhm55rw.jl:30\nin expression starting at\
    \ /tmp/tmpvlhm55rw.jl:30\n"
  stdout: ''
  timestamp: 1659978988
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    return reduce(add, (digitCount(c) for c in s if isAscii(c)), 0)\nend\n\
    </cell>\n<text>\nExercise 8: digitCount\nWrite a function that takes a character\
    \ as input and returns the number of times it appears in the string.\nusing Test\n\
    \n@testset begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    abAB\") == 131)\n\t@test(candidate(\"abcCd\") == 67)\n\t@test(candidate(\"helloE\"\
    ) == 69)\n\t@test(candidate(\"woArBld\") == 131)\n\t@test(candidate(\"aAaaaXa\"\
    ) == 153)\n\t@test(candidate(\" How are yOu?\") == 151)\n\t@test(candidate(\"\
    You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprrxz9wg0.jl:22\nin expression starting at\
    \ /tmp/tmprrxz9wg0.jl:22\n"
  stdout: ''
  timestamp: 1659978988
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum := 0\n    for (i, _) in enumerate(s)\n        if s.codes.isUpper(i)\n\
    \            sum += s.codes[i]\n    end\n    return sum\nend\n</code>\n<|/ a tags=string,julia,sum\
    \ |>\n<| c |>\nFor a large string you may get `ERROR: MethodError: no method matching\
    \ sum(::Int64)`\n<|/ c |>\n<| a |>\nI would suggest using Unicode code points\
    \ for this task as opposed to character codes:\n<code>\nsum(filter(x -> x == 0x41,\
    \ eachcode(x::String)) + 0)\n</code>\n<|/ a dscore=2 tags=string,julia,sum |>\n\
    <| a |>\nIn general, if you want to sum up all codepoints in a given string you\
    \ can do this:\n<code>\njulia> s = \"hello\"\n\"hello\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    abAB\") == 131)\n\t@test(candidate(\"abcCd\") == 67)\n\t@test(candidate(\"helloE\"\
    ) == 69)\n\t@test(candidate(\"woArBld\") == 131)\n\t@test(candidate(\"aAaaaXa\"\
    ) == 153)\n\t@test(candidate(\" How are yOu?\") == 151)\n\t@test(candidate(\"\
    You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0nodowxd.jl:27\nin expression starting at\
    \ /tmp/tmp0nodowxd.jl:27\n"
  stdout: ''
  timestamp: 1659978990
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    \"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the characters 'a'\n    and 'A' only'\n    ASCII codes.\nusing Test\n\
    \n@testset begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    abAB\") == 131)\n\t@test(candidate(\"abcCd\") == 67)\n\t@test(candidate(\"helloE\"\
    ) == 69)\n\t@test(candidate(\"woArBld\") == 131)\n\t@test(candidate(\"aAaaaXa\"\
    ) == 153)\n\t@test(candidate(\" How are yOu?\") == 151)\n\t@test(candidate(\"\
    You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0ly5k1zc.jl:1\nin expression starting at /tmp/tmp0ly5k1zc.jl:1\n"
  stdout: ''
  timestamp: 1659978990
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum := 0\n    for c in s:\n        sum += ord(c)\n    return sum\n</code>\n\
    <|/ a dscore=2 |>\n<| a |>\n<code>\n/**\n * Returns the sum of the uppercase letters\
    \ in a string.\n *\n * string The string.\n * The sum of the uppercase letters.\n\
    \ */\nusing Test\n\n@testset begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"abcCd\") ==\
    \ 67)\n\t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\") ==\
    \ 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are yOu?\"\
    ) == 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6zu84oq4.jl:22\nin expression starting at\
    \ /tmp/tmp6zu84oq4.jl:22\n"
  stdout: ''
  timestamp: 1659978990
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    \"\"\"\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    abAB\") == 131)\n\t@test(candidate(\"abcCd\") == 67)\n\t@test(candidate(\"helloE\"\
    ) == 69)\n\t@test(candidate(\"woArBld\") == 131)\n\t@test(candidate(\"aAaaaXa\"\
    ) == 153)\n\t@test(candidate(\" How are yOu?\") == 151)\n\t@test(candidate(\"\
    You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpknfqpams.jl:1\nin expression starting at /tmp/tmpknfqpams.jl:1\n"
  stdout: ''
  timestamp: 1659978990
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    if s == \"\" then 0 else sum(map(ord, s)) - 97\nend\n</cell>\n<text>\n\
    Exercise (5 min)\nWrite a function that converts bases between base 10 and base\
    \ 36.\nusing Test\n\n@testset begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"abcCd\") ==\
    \ 67)\n\t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\") ==\
    \ 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are yOu?\"\
    ) == 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"0\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpa_icq2iw.jl:20\nin expression starting at /tmp/tmpa_icq2iw.jl:20\n"
  stdout: ''
  timestamp: 1659978990
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    s = reverse(s,2)\n    s_tail = reverse(s,1)\n    n = length(s)\n    \n\
    \    if n==0\n        return 0;\n    \n    if n mod 2 != 0\n        n = n div\
    \ 2\n    else\n        n = n - 1\n    \n    acc = 0\n    \n    for x in s.chars\n\
    \        if x >= 'a' && x <= 'z'\n            acc = acc + x\n    end\n    \n \
    \   for x in s_tail.chars\n        if x >= 'A' && x <= 'Z'\n            acc =\
    \ acc + x\n        end\n    end\n    \n    return acc\nend\n</cell>\n<code language=julia-1.3>\n\
    digitSum(\"\")\n</cell>\n<code language=julia-1.3>\ndigitSum(\"abc\")\n</cell>\n\
    <code language=julia-1.3>\ndigitSum(\"aBcD\")\n</cell>\n<code language=julia-1.3>\n\
    digitSum(\"aAaaaXa\")\n</cell>\n<text>\nExercise 3\nusing Test\n\n@testset begin\n\
    \ncandidate = digitSum;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\"\
    ) == 131)\n\t@test(candidate(\"abcCd\") == 67)\n\t@test(candidate(\"helloE\")\
    \ == 69)\n\t@test(candidate(\"woArBld\") == 131)\n\t@test(candidate(\"aAaaaXa\"\
    ) == 153)\n\t@test(candidate(\" How are yOu?\") == 151)\n\t@test(candidate(\"\
    You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"2\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpl_lhs47f.jl:27\nin expression starting at /tmp/tmpl_lhs47f.jl:27\n"
  stdout: ''
  timestamp: 1659978990
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = if length(s) <= 4 then 0 else 1\n    for i in s[1..4] do\n\
    \        sum += toAscii(i)\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.4>\n\
    digitSum(\"\")\n</cell>\n<code language=julia-1.4>\ndigitSum(\"abAB\")\n</cell>\n\
    <code language=julia-1.4>\ndigitSum(\"abcCd\")\n</cell>\n<code language=julia-1.4>\n\
    digitSum(\"helloE\")\n</cell>\n<code language=julia-1.4>\ndigitSum(\"woArBld\"\
    )\n</cell>\n<code language=julia-1.4>\ndigitSum(\"aAaaaXa\")\n</cell>\n<text>\n\
    Task\nWrite a function that takes a string as input and returns the longest word\
    \ (that is, a sequence of non-whitespace characters before the first whitespace\
    \ character is encountered). If the word is empty, return an empty string.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\") ==\
    \ 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"abcCd\") == 67)\n\
    \t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\") == 131)\n\
    \t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are yOu?\") ==\
    \ 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"0\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpyy19dpvh.jl:20\nin expression starting at /tmp/tmpyy19dpvh.jl:20\n"
  stdout: ''
  timestamp: 1659978990
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = 0\n    for c in s do \n        if c >= '0' && c <= '9' then\
    \ \n            sum += Int(c)\n        end\n    end\n    return sum\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\") ==\
    \ 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"abcCd\") == 67)\n\
    \t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\") == 131)\n\
    \t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are yOu?\") ==\
    \ 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid \"do\" syntax\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp2jpfeygn.jl:21\nin expression starting at /tmp/tmp2jpfeygn.jl:21\n"
  stdout: ''
  timestamp: 1659978990
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    \"\"\"\n    Sum of digit of string, in decimal \n    \"\"\"\n    let sum\
    \ = sum(map(digit, s))\n    let charSum = sum(map(digit, charToInt(s) -> x))\n\
    \    charSum + sum\nend\n</cell>\n<code language=julia-0.6>\ndigitSum(\"\")\n\
    digitSum(\"abAB\")\ndigitSum(\"abcCd\")\ndigitSum(\"helloE\")\ndigitSum(\"woArBld\"\
    )\ndigitSum(\"aAaaaXa\")\n</cell>\n<text>\nExercise 3: Write a function that converts\
    \ a binary string into a decimal integer number\n    given as an argument of the\
    \ function. The function must return the converted decimal integer number.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\") ==\
    \ 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"abcCd\") == 67)\n\
    \t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\") == 131)\n\
    \t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are yOu?\") ==\
    \ 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpt9emfyke.jl:27\nin expression starting at\
    \ /tmp/tmpt9emfyke.jl:27\n"
  stdout: ''
  timestamp: 1659978990
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n  |s==\"\" = 00\n  |s=='a' = 00\n  |s=='A' = 00\n  |s=='b' = 01\n  |s=='B'\
    \ = 01\n  |s=='c' = 02\n  |s=='C' = 02\n  |s=='d' = 03\n  |s=='D' = 03\n  |s=='e'\
    \ = 04\n  |s=='E' = 04\n  |s=='f' = 05\n  |s=='F' = 05\n  |s=='g' = 06\n  |s=='G'\
    \ = 06\n  |s=='h' = 07\n  |s=='H' = 07\n  |s=='i' = 08\n  |s=='I' = 08\n  |s=='j'\
    \ = 09\n  |s=='J' = 09\n  |s=='k' = 10\n  |s=='K' = 10\n  |s=='l' = 11\n  |s=='L'\
    \ = 11\n  |s=='m' = 12\n  |s=='M' = 12\n  |s=='n' = 13\n  |s=='N' = 13\n  |s=='o'\
    \ = 14\n  |s=='O' = 14\n  |s=='p' = 15\n  |s=='P' = 15\n  |s=='q' = 16\n  |s=='Q'\
    \ = 16\n  |s=='r' = 17\n  |s=='R' = 17\n  |s=='s' = 18\n  |s=='S' = 18\n  |s=='t'\
    \ = 19\n  |s=='T' = 19\n  |s=='u' = 20\n  |s=='U' = 20\n  |s=='v' = 21\n  |s=='V'\
    \ = 21\n  |s=='w' = 22\n  |s=='W' = 22\n  |s=='x' = 23\n  |s=='X' = 23\n  |s=='y'\
    \ = 24\n  |s=='Y' = 24\n  |s=='z' = 25\n  |s=='Z' = 25\n  |s==' ' = 0\n  |s=='!'\
    \ = 25\n  |s=='#' = 26\n  |s=='$' = 27\n  |s=='%' = 28\n  |s=='&' = 29\n  |s=='('\
    \ = 30\n  |s==')' = 31\n  |s=='*' = 32\n  |s=='+' = 33\n  |s==',' = 34\n  |s=='-'\
    \ = 35\n  |s=='=' = 36\n  |s=='.' = 37\n  |s=='/' = 38\n  |s=='='\nusing Test\n\
    \n@testset begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    abAB\") == 131)\n\t@test(candidate(\"abcCd\") == 67)\n\t@test(candidate(\"helloE\"\
    ) == 69)\n\t@test(candidate(\"woArBld\") == 131)\n\t@test(candidate(\"aAaaaXa\"\
    ) == 153)\n\t@test(candidate(\" How are yOu?\") == 151)\n\t@test(candidate(\"\
    You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"|\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnnguel48.jl:20\nin expression starting at\
    \ /tmp/tmpnnguel48.jl:20\n"
  stdout: ''
  timestamp: 1659978990
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    | length(s)==0 => 0\n    | isUpper(s[0]) => digitSum(s[1:]) + digit(s[0])\n\
    \    | isUpper(s[1]) => digitSum(s[2:]) + digit(s[0])\n    | isUpper(s[2]) =>\
    \ digitSum(s[3:]) + digit(s[0])\n    | isUpper(s[3]) => digitSum(s[4:]) + digit(s[0])\n\
    \    | isUpper(s[4]) => digitSum(s[5:]) + digit(s[0])\n    | isUpper(s[5]) =>\
    \ digitSum(s[6:]) + digit(s[0])\n    | isUpper(s[6]) => digitSum(s[7:]) + digit(s[0])\n\
    \    | isUpper(s[7]) => digitSum(s[8:]) + digit(s[0])\n    | isUpper(s[8]) =>\
    \ digitSum(s[9:]) + digit(s[0])\n    | isUpper(s[9]) => digitSum(s[10:]) + digit(s[0])\n\
    \    | isUpper(s[10]) => digitSum(s[11:]) + digit(s[0])\n    | isUpper(s[11])\
    \ => digitSum(s[12:]) + digit(s[0])\n    | isUpper(s[12]) => digitSum(s[13:])\
    \ + digit(s[0])\n    | isUpper(s[13]) => digitSum(s[14:]) + digit(s[0])\n    |\
    \ isUpper(s[14]) => digitSum(s[15:]) + digit(s[0])\n    | isUpper(s[15]) => digitSum(s[16:])\
    \ + digit(s[0])\n    | isUpper(s[16]) => digitSum(s[17:]) + digit(s[0])\n    |\
    \ isUpper(s[17]) => digitSum(s[18:]) + digit(s[0])\n    | isUpper(s[18]) => digitSum(s[19:])\
    \ + digit(s[0])\n    | isUpper(s[19]) => digitSum(s[20:]) + digit(s[0])\n    |\
    \ isUpper(s[20]) => digitSum(s[21:]) + digit(s[0])\n    | isUpper(s[21]) => digitSum(s[22:])\
    \ + digit(s[0])\n    | isUpper(s[22]) => digitSum(s[23:]) + digit(s[0])\n    |\
    \ isUpper(s[23]) => digitSum(s[24:]) + digit(s[0])\n    | isUpper(s[24]) => digitSum(s[25:])\
    \ + digit(s[0])\n    | isUpper(s[25]) => digitSum(s[26:]) + digit(s[0])\n    |\
    \ isUpper(s[26]) => digitSum(s[27:]) + digit(s[0])\n    | isUpper(s[27]) => digit\n\
    using Test\n\n@testset begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\"\
    ) == 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"abcCd\") ==\
    \ 67)\n\t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\") ==\
    \ 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are yOu?\"\
    ) == 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"|\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6myfevt6.jl:20\nin expression starting at\
    \ /tmp/tmp6myfevt6.jl:20\n"
  stdout: ''
  timestamp: 1659978990
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n|-> Int \ndigitSum(\"\") = 0\ndigitSum(\"\")\ndigitSum(\"abAB\") = 131\ndigitSum(\"\
    abcCd\") = 67\ndigitSum(\"helloE\") = 69\ndigitSum(\"woArBld\") = 131\ndigitSum(\"\
    aAaaaXa\") = 153\ndigitSum(\"aXAaAaX\") = 157\ndigitSum(\"aAaXAaX\") = 153\ndigitSum(\"\
    AaXaAaX\") = 157\ndigitSum(\"aAaXaAaX\") = 153\ndigitSum(\"aAaXaAaX\") = 157\n\
    digitSum(\"AaXaAaX\") = 157\ndigitSum(\"aAaXaAaX\") = 153\ndigitSum(\"aAaXaAaX\"\
    ) = 157\ndigitSum(\"aAaXaAaX\") = 153\ndigitSum(\"aAaXaAaX\") = 157\ndigitSum(\"\
    AaXaAaX\") = 157\ndigitSum(\"aAaXaAaX\") = 153\ndigitSum(\"aAaXaAaX\") = 157\n\
    digitSum(\"aAaXaAaX\") = 153\ndigitSum(\"aAaXaAaX\") = 157\ndigitSum(\"aAaXaAaX\"\
    ) = 153\ndigitSum(\"aAaXaAaX\") = 157\ndigitSum(\"aAaXaAaX\") = 153\ndigitSum(\"\
    AaXaAaX\") = 157\ndigitSum(\"aAaXaAaX\") = 153\ndigitSum(\"aAaXaAaX\") = 157\n\
    digitSum(\"aAaXaAaX\") = 153\ndigitSum(\"aAaXaAaX\") = 157\ndigitSum(\"aAaXaAaX\"\
    ) = 153\ndigitSum(\"aAaXaAaX\") = 157\ndigitSum(\"aAaXaAaX\") = 153\ndigitSum(\"\
    aAaXaAaX\") = 157\ndigitSum(\"aAaXaAaX\") = 153\ndigitSum(\"aAaXaAaX\") = 157\n\
    digitSum\nusing Test\n\n@testset begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"abcCd\") ==\
    \ 67)\n\t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\") ==\
    \ 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are yOu?\"\
    ) == 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"|\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfdd4bvfe.jl:20\nin expression starting at\
    \ /tmp/tmpfdd4bvfe.jl:20\n"
  stdout: ''
  timestamp: 1659978990
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    if s == \"\" then 0\n    else let\n        digits = split(s, \"\")\n \
    \       sum = 0\n        for d in digits do\n            if d >= 'a' then sum\
    \ = sum + d - 'a'\n            else if d >= 'A' then sum = sum + 26 - 'A' + d\
    \ - 'A'\n            else if d >= '0' then sum = sum + 10 - '0' + d - '0'\n  \
    \          else error(\"digit not found\")\n        end\n        sum\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"abcCd\") ==\
    \ 67)\n\t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\") ==\
    \ 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are yOu?\"\
    ) == 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"0\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpv4c2ekom.jl:20\nin expression starting at /tmp/tmpv4c2ekom.jl:20\n"
  stdout: ''
  timestamp: 1659978990
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    | s[0] == '\"' && s[len-1] == '\"' -> digitSum(s[1..-1])\n    | s[0] ==\
    \ '\"' && s[len-1] != '\"' -> digitSum(s[1..-1])\n    | s[0] != '\"' && s[len-1]\
    \ != '\"' -> digitSum(s[1..len-1])\n    | otherwise              -> sum(map(ord,\
    \ s)) \n    end\n</cell>\n<cell>\ndigitSum(\"\")\n</cell>\n<cell>\ndigitSum(\"\
    abAB\")\n</cell>\n<cell>\ndigitSum(\"abcCd\")\n</cell>\n<cell>\ndigitSum(\"helloE\"\
    )\n</cell>\n<cell>\ndigitSum(\"woArBld\")\n</cell>\n<cell>\ndigitSum(\"aAaaaXa\"\
    )\n</cell>\n<text>\nExercise 9\nusing Test\n\n@testset begin\n\ncandidate = digitSum;\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"\
    abcCd\") == 67)\n\t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\"\
    ) == 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are\
    \ yOu?\") == 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"|\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpum9vxl5d.jl:20\nin expression starting at\
    \ /tmp/tmpum9vxl5d.jl:20\n"
  stdout: ''
  timestamp: 1659978990
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n  r\"\"\"\n  digitSum(s::String)::Int64\nusing Test\n\n@testset begin\n\n\
    candidate = digitSum;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\"\
    ) == 131)\n\t@test(candidate(\"abcCd\") == 67)\n\t@test(candidate(\"helloE\")\
    \ == 69)\n\t@test(candidate(\"woArBld\") == 131)\n\t@test(candidate(\"aAaaaXa\"\
    ) == 153)\n\t@test(candidate(\" How are yOu?\") == 151)\n\t@test(candidate(\"\
    You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5bphh8q9.jl:1\nin expression starting at /tmp/tmp5bphh8q9.jl:1\n"
  stdout: ''
  timestamp: 1659978990
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n  | null(s) then 0\n  | isDigit(s[0]) then digitSum(subStr(s, 1)) + digitSum(subStr(s,\
    \ 2)) \n  | isUpper(s[0]) then digitSum(subStr(s, 1)) + digitSum(subStr(s, 2))\
    \ + digitSum(subStr(s, 3)) \n  | isUpper(s[1]) then digitSum(subStr(s, 1)) + digitSum(subStr(s,\
    \ 2)) + digitSum(subStr(s, 3)) + digitSum(subStr(s, 4)) \n  | isUpper(s[2]) then\
    \ digitSum(subStr(s, 1)) + digitSum(subStr(s, 2)) + digitSum(subStr(s, 3)) + digitSum(subStr(s,\
    \ 4)) + digitSum(subStr(s, 5)) \n  | isUpper(s[3]) then digitSum(subStr(s, 1))\
    \ + digitSum(subStr(s, 2)) + digitSum(subStr(s, 3)) + digitSum(subStr(s, 4)) +\
    \ digitSum(subStr(s, 5)) + digitSum(subStr(s, 6)) \n  | isUpper(s[4]) then digitSum(subStr(s,\
    \ 1)) + digitSum(subStr(s, 2)) + digitSum(subStr(s, 3)) + digitSum(subStr(s, 4))\
    \ + digitSum(subStr(s, 5)) + digitSum(subStr(s, 6)) + digitSum(subStr(s, 7)) \n\
    \  | isUpper(s[5]) then digitSum(subStr(s, 1)) + digitSum(subStr(s, 2)) + digitSum(subStr(s,\
    \ 3)) + digitSum(subStr(s, 4)) + digitSum(subStr(s, 5)) + digitSum(subStr(s, 6))\
    \ + digitSum(subStr(s, 7)) + digitSum(subStr(s, 8)) \n  | isUpper(s[6]) then digitSum(subStr(s,\
    \ 1)) + digitSum(subStr(s, 2)) + digitSum(subStr(s, 3)) + digitSum(subStr(s, 4))\
    \ + digitSum(subStr(s, 5)) + digitSum(subStr(s, 6)) + digitSum(subStr(s, 7)) +\
    \ digitSum(subStr(s, 8)) + digitSum(subStr(s, 9)) \n  | isUpper(s[7]) then digitSum(subStr(s,\
    \ 1)) + digitSum(subStr(s, 2)) + digitSum(subStr(s, 3)) + digitSum(subStr(s, 4))\
    \ + digitSum(subStr(s, 5)) + digitSum(subStr(s, 6)) + digitSum(subStr(s, 7)) +\
    \ digitSum(subStr(s, 8)) + digitSum(subStr(s, 9)) + digitSum(subStr(s, 10\nusing\
    \ Test\n\n@testset begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\") ==\
    \ 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"abcCd\") == 67)\n\
    \t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\") == 131)\n\
    \t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are yOu?\") ==\
    \ 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"|\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpm4t2rfef.jl:20\nin expression starting at\
    \ /tmp/tmpm4t2rfef.jl:20\n"
  stdout: ''
  timestamp: 1659978990
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    return sum(x::Int | x.isUpper() for x in s)\n</cell>\n<cell>\ndigitSum(\"\
    \")\n</cell>\n<text>\nWrite a function which takes a string as input and returns\
    \ the number of unique characters.\nIn our example above the unique characters\
    \ are the uppercase letters 'A' and 'O'.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = digitSum;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\
    \t@test(candidate(\"abcCd\") == 67)\n\t@test(candidate(\"helloE\") == 69)\n\t\
    @test(candidate(\"woArBld\") == 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\
    \t@test(candidate(\" How are yOu?\") == 151)\n\t@test(candidate(\"You arE Very\
    \ Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8ztvyigg.jl:21\nin expression starting at\
    \ /tmp/tmp8ztvyigg.jl:21\n"
  stdout: ''
  timestamp: 1659978990
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum := 0\n    for (i, x) in enumerate(s) do\n        if x == 'A'..'Z'\
    \ then \n            sum +=  (x-65)\n        else if x == 'a'..'z' then \n   \
    \         sum +=  (x-97)\n        else\n            sum <- 0\n    sum\nend\n</cell>\n\
    <cell>\ndigitSum(\"\")\n</cell>\n<cell>\ndigitSum(\"abAB\")\n</cell>\n<cell>\n\
    digitSum(\"abcCd\")\n</cell>\n<cell>\ndigitSum(\"helloE\")\n</cell>\n<cell>\n\
    digitSum(\"woArBld\")\n</cell>\n<cell>\ndigitSum(\"aAaaaXa\")\n</cell>\n<text>\n\
    Exercise 8.14\nusing Test\n\n@testset begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"abcCd\") ==\
    \ 67)\n\t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\") ==\
    \ 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are yOu?\"\
    ) == 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0zi5p863.jl:24\nin expression starting at\
    \ /tmp/tmp0zi5p863.jl:24\n"
  stdout: ''
  timestamp: 1659978990
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    if s == \"\"\n        return 0 \n    var sum = 0\n    for c in s\n   \
    \     if c >= 'a' && c <= 'z'\n            sum += (c - 'a' + 1)\n        else\
    \ if c >= 'A' && c <= 'Z'\n            sum += (c - 'A' + 1)\n    return sum\n\
    \    \"\"\"\n    Task\n    Write a function that takes an array of strings and\
    \ returns the sum of all the strings\n    concatenated into a single string.\n\
    using Test\n\n@testset begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\"\
    ) == 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"abcCd\") ==\
    \ 67)\n\t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\") ==\
    \ 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are yOu?\"\
    ) == 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"sum\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpqb5kc4jh.jl:22\nin expression starting at /tmp/tmpqb5kc4jh.jl:22\n"
  stdout: ''
  timestamp: 1659978990
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    local i : Int64 = 0\n    while i < length(s)\n        if (ord(s[i]) >\
    \ 96) and (ord(s[i]) < 123)\n            i = i + 1\n        else\n           \
    \ i = i + 1\n    end\n    return i\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = digitSum;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\
    \t@test(candidate(\"abcCd\") == 67)\n\t@test(candidate(\"helloE\") == 69)\n\t\
    @test(candidate(\"woArBld\") == 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\
    \t@test(candidate(\" How are yOu?\") == 151)\n\t@test(candidate(\"You arE Very\
    \ Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: space before \"(\" not allowed in \"and (\" at\
    \ /tmp/tmp7zff1lcj.jl:22\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp7zff1lcj.jl:22\n\
    in expression starting at /tmp/tmp7zff1lcj.jl:22\n"
  stdout: ''
  timestamp: 1659978990
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n</code>\n<|/ a |>\n<| a tags=string,haskell,string-length |>\nHere's another\
    \ approach to this. It's not as pretty as using foldl, but it's more readable.\
    \ I wouldn't say it's more performant, but it's more readable for me, and it works\
    \ in both Haskell 9 and 10.\n<code>\n-- Returns the number of times char is in\
    \ string s\nstringCharCount :: Char -> String -> Int\nstringCharCount c s = 1\
    \ + fromIntegral (find c s)\nusing Test\n\n@testset begin\n\ncandidate = digitSum;\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"\
    abcCd\") == 67)\n\t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\"\
    ) == 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are\
    \ yOu?\") == 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwbaz9tjh.jl:20\nin expression starting at\
    \ /tmp/tmpwbaz9tjh.jl:20\n"
  stdout: ''
  timestamp: 1659978990
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n</code>\nWe just need to use the String type for s, because there are a variety\
    \ of types that you can use, such as UString, String, etc.\nThe String type has\
    \ a member named length() that returns the number of characters in a String; we\
    \ can use the length to determine how many digits are in the String. Now that\
    \ we've determined how many digits are in the String, we can call the function\
    \ digitSum() from within the definition of the function digitSum():\n<code>\n\
    digitSum(s :: String) = (length(s) <= 0) ? 0 : digitSum(substr(s, 0, length(s)\
    \ - 1))\n</code>\nThe variable s is bound to the String type parameter that is\
    \ bound to the function digitSum() at the time of definition of digitSum(). The\
    \ variable s does not need to be explicitly declared at the time of function definition,\
    \ but it is good practice to do so; this means that s is available to any function\
    \ that is defined in the same function definition, including the recursive call\
    \ of digitSum() within digitSum(). We can use a type annotation for this variable,\
    \ as follows:\n<code>\ndigitSum(s :: String) = (length(s) <= 0) ? 0 : int64(digitSum(substr(s,\
    \ 0, length(s) - 1))\n</code>\nThis type annotation means that s is now bound\
    \ to the Integer type parameter that is bound to the function digitSum() at the\
    \ time of definition of digitSum().\nThe type annotation will make the compiler\
    \ treat digitSum() as if it had the following type:\n<code>\ndigitSum(s :: Int64)\
    \ = (length(s) <= 0) ? 0 : int64(digitSum(substr(s, 0, length(s) - 1))\n</code>\n\
    The type annotation means that s is now bound to the Integer type parameter that\
    \ is bound to the function digitSum() at the time of definition of digitSum().\
    \ Recall that the type for digitSum() is Int64.\nThe recursive call to digitSum()\
    \ returns a value of type Int64 because digitSum() takes input of type String\
    \ and returns an Int64. We can convert this value to a value of type Integer with\
    \ the function int64():\n<code>\ndigitSum(s :: String) = (length(s) <= 0) ? 0\
    \ : int64(digitSum(substr(s, 0, length(s) - 1))\n</code>\nThe type annotation\
    \ means that s is now bound to the Integer type parameter that is bound to the\
    \ function digitSum() at the time of definition of digitSum(). Recall that the\
    \ type for digitSum() is Int64.\nTo make the recursive call to digitSum() return\
    \ a value of type Integer, we first need to convert the result of the recursive\
    \ call to digitSum() to a value of type Integer; this can be done with the function\
    \ int():\n<code>\ndigitSum(s :: String) = (length(s) <= 0) ? 0 : int64(digitSum(substr(s,\
    \ 0, length(s) - 1))\n</code>\nThe type annotation means that s is now bound to\
    \ the Integer type parameter that is bound to the function digitSum() at the time\
    \ of definition of digitSum(). Recall that the type \nusing Test\n\n@testset begin\n\
    \ncandidate = digitSum;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\"\
    ) == 131)\n\t@test(candidate(\"abcCd\") == 67)\n\t@test(candidate(\"helloE\")\
    \ == 69)\n\t@test(candidate(\"woArBld\") == 131)\n\t@test(candidate(\"aAaaaXa\"\
    ) == 153)\n\t@test(candidate(\" How are yOu?\") == 151)\n\t@test(candidate(\"\
    You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxayujwar.jl:20\nin expression starting at\
    \ /tmp/tmpxayujwar.jl:20\n"
  stdout: ''
  timestamp: 1659978990
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    if s==\"A\"||s==\"a\"\n        return 64\n    else\n        return sum(map(digitToUpper\
    \ ,digitToUpper(s))) +digitSum(substring(s,2))\nend\n</cell>\n<code language=julia-1.3>\n\
    # test code\ndigitSum(\"abcCd\")\n</cell>\n<code language=julia-1.3>\n# Benchmark\n\
    digitSum(\"\")\n</cell>\n<text>\n2.1 The Sum Function\nTask\nWrite a function\
    \ that returns the sum of the numbers in the string in base 10.\nFor example the\
    \ sum of the strings \"101\", \"1010\", \"1110\" and \"13\" should be \"23\".\n\
    Note: the string \"0\" should return 0.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = digitSum;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\
    \t@test(candidate(\"abcCd\") == 67)\n\t@test(candidate(\"helloE\") == 69)\n\t\
    @test(candidate(\"woArBld\") == 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\
    \t@test(candidate(\" How are yOu?\") == 151)\n\t@test(candidate(\"You arE Very\
    \ Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbwtq83po.jl:25\nin expression starting at\
    \ /tmp/tmpbwtq83po.jl:25\n"
  stdout: ''
  timestamp: 1659978990
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    if s == \"\" || not isLetter(s[0]) || not isLetter(s[-1])\n        return\
    \ 0\n    return sum((ord(s[p])-ord('a'))*pow(10,(p-1)) for p in range(1,length(s)+1))\n\
    </code>\n<|/ a dscore=4 |>\n<| c |>\nPlease don't post only code as an answer,\
    \ but also provide an explanation of what your code does and how it solves the\
    \ problem of the question. Answers with an explanation are usually of better quality,\
    \ and are more likely to attract upvotes.\n<|/ c |>\n<| c |>\nSadly, this doesn't\
    \ work for me. For example, `digitSum(\"aAaaaXa\")` returns `153` when it should\
    \ be `131`.\n<|/ c |>\n<| a dscore=4 tags=math,algorithm,haskell |>\n<code>\n\
    digitSum :: String -> Int\ndigitSum s = foldr (\\_ x -> 10*x + (ord x - ord 'a'))\
    \ 0 s\nusing Test\n\n@testset begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"abcCd\") ==\
    \ 67)\n\t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\") ==\
    \ 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are yOu?\"\
    ) == 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"isLetter\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpi1h177nj.jl:20\nin expression starting at /tmp/tmpi1h177nj.jl:20\n"
  stdout: ''
  timestamp: 1659978991
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    |=0 // for _@i = 1 to s.length-1 do\n    |=s.codePointAt(_@i) + 32*(_@i-1)\n\
    \    |=0 // end\n    |=0 // for _@i = 1 to s.length-1 do\n    |=0 // and if _@i\
    \ mod 4 == 0 do\n    |=0 // |=_@i // end\n    |=0 // end\n    return |\nend\n\
    </cell>\n<code language=julia-1.5>\n\"\"\"Task\n    Write a function that takes\
    \ a string as input and returns the sum of the number of times each character\
    \ appears\n    in the string.\nusing Test\n\n@testset begin\n\ncandidate = digitSum;\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"\
    abcCd\") == 67)\n\t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\"\
    ) == 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are\
    \ yOu?\") == 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid identifier name \"|=\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqrtoucsj.jl:20\nin expression starting at\
    \ /tmp/tmpqrtoucsj.jl:20\n"
  stdout: ''
  timestamp: 1659978991
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = 0\n    for ch in s {\n        if ord(ch) > ord('Z') then\
    \ ch-'A'+1 else sum <- sum + ord(ch) - ord('0')\n    }\n    return sum\nend\n\
    using Test\n\n@testset begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\"\
    ) == 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"abcCd\") ==\
    \ 67)\n\t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\") ==\
    \ 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are yOu?\"\
    ) == 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: space before \"{\" not allowed in \"s {\" at\
    \ /tmp/tmp1z09srzs.jl:21\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp1z09srzs.jl:21\n\
    in expression starting at /tmp/tmp1z09srzs.jl:21\n"
  stdout: ''
  timestamp: 1659978991
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n   if s == \"\" \n       return 0\n   let sum = 0\n   let pos = 1\n   while\
    \ pos < length(s)\n       if ord(substring(s, pos)) > 32 \n           sum += \
    \ ord(substring(s, pos))\n           pos += 1\n       else \n           pos +=\
    \ 1\n   return sum\nend\nusing Test\n\n@testset begin\n\ncandidate = digitSum;\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"\
    abcCd\") == 67)\n\t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\"\
    ) == 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are\
    \ yOu?\") == 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"while\" at /tmp/tmpyvjws5yn.jl:24\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpyvjws5yn.jl:1\n\
    in expression starting at /tmp/tmpyvjws5yn.jl:1\n"
  stdout: ''
  timestamp: 1659978991
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum = 0\n    for c in s: \n        if c.isUpper():\n            sum =\
    \ sum + int(c)\n    return sum\n</code>\n<|/ a dscore=2 |>\n<| c |>\nHi Roman,\
    \ I think it's better to give a better answer then to give just an opinion. The\
    \ opinion is just an opinion and can get deleted by the OP.\n<|/ c |>\n<| a dscore=1\
    \ |>\nI guess it is some kind of puzzle. The way I see it is that you have two\
    \ problems. One is how to sum up a string and the other is how to sum up only\
    \ uppercase characters.\nIn case of the first problem I believe you have a lot\
    \ of opportunities for optimizing your solution.\nOne idea would be to use this\
    \ function, which only returns uppercase letters:\n<code>\nimport Data.Char (toUpper,\
    \ isUpper)\n</code>\nSo now you have a function that checks if the letter is upper\
    \ case or not. Now you know your task is done.\nThe second one will be a more\
    \ tricky one. You are right about using map, but let's try to rewrite it a little.\n\
    <code>\ndigitSum :: String -> Int\ndigitSum s = sum $ map f s\n    where\n   \
    \     f x = if (isUpper x) == True then x else \"\"\n</code>\nNow the map function\
    \ takes a function and a list of things and returns the same list with the function\
    \ applied to each element of the list. In our case we are passing a function,\
    \ so we apply it to each element. This is done in our where statement. We are\
    \ filtering the elements and we are checking if the elements pass the filter (isUpper\
    \ x). As we know from previous examples, we are filtering only uppercase letters,\
    \ so if they do not pass the filter, we return an empty string \"\".\nNow we can\
    \ use our digitSum function like this:\n<code>\ndigitSum \"AbC\"\n</code>\nand\
    \ it will return 7 (only uppercase letters are added up).\nAnother idea would\
    \ be to write a function that will sum up only numbers:\n<code>\ndigits :: String\
    \ -> Int\ndigits s = sum (filter isDigit s)\n</code>\nAnd now we can apply this\
    \ function to a string:\n<code>\ndigits \"AbC\"\n</code>\nand it will return 3\
    \ (only numbers are added up).\nEDIT:\nIn case you want to implement a digitSum\
    \ function by yourself and you know that it is possible to use filter and map\
    \ then you can do it like this:\n<code>\ndigitSum :: String -> Int\ndigitSum =\
    \ sum . map f\n    where\n        f x = if (isUpper x) == True then x else \"\"\
    \n</code>\n<|/ a tags=h\nusing Test\n\n@testset begin\n\ncandidate = digitSum;\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"\
    abcCd\") == 67)\n\t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\"\
    ) == 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are\
    \ yOu?\") == 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpo0qbc4y4.jl:22\nin expression starting at\
    \ /tmp/tmpo0qbc4y4.jl:22\n"
  stdout: ''
  timestamp: 1659978991
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum = 0\n    for c in s[..]:\n        if c.isUpper():\n            sum\
    \ +=  c.codePointAt(0)\n    return sum\nusing Test\n\n@testset begin\n\ncandidate\
    \ = digitSum;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\
    \t@test(candidate(\"abcCd\") == 67)\n\t@test(candidate(\"helloE\") == 69)\n\t\
    @test(candidate(\"woArBld\") == 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\
    \t@test(candidate(\" How are yOu?\") == 151)\n\t@test(candidate(\"You arE Very\
    \ Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmps5gdue5e.jl:22\nin expression starting at\
    \ /tmp/tmps5gdue5e.jl:22\n"
  stdout: ''
  timestamp: 1659978991
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n  result::Int64 = 0\n  for c in s[1..] do \n    if c >= 'A' && c <= 'Z' then\
    \ result + c - 'A' else result \n  result\nend\n</cell>\n<code language=julia-1.3>\n\
    digitSum(\"\")\n</cell>\n<code language=julia-1.3>\ndigitSum(\"abAB\")\n</cell>\n\
    <code language=julia-1.3>\ndigitSum(\"abcCd\")\n</cell>\n<code language=julia-1.3>\n\
    digitSum(\"helloE\")\n</cell>\n<code language=julia-1.3>\ndigitSum(\"woArBld\"\
    )\n</cell>\n<code language=julia-1.3>\ndigitSum(\"aAaaaXa\")\n</cell>\n<text>\n\
    Task 10. Write a function that takes a string and returns the length of a string\
    \ including whitespaces.\nusing Test\n\n@testset begin\n\ncandidate = digitSum;\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"\
    abcCd\") == 67)\n\t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\"\
    ) == 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are\
    \ yOu?\") == 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"]\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpxrfyubeb.jl:21\nin expression starting at /tmp/tmpxrfyubeb.jl:21\n"
  stdout: ''
  timestamp: 1659978991
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n| digitSum(\"\") = 0\n| digitSum(x::String) = digitSum(x) + digitSum(upper(x))\n\
    end\n</cell>\n<text>\nSolution 2: Partial Application\nWe can take advantage of\
    \ partial application and just call upper(x) directly.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    abAB\") == 131)\n\t@test(candidate(\"abcCd\") == 67)\n\t@test(candidate(\"helloE\"\
    ) == 69)\n\t@test(candidate(\"woArBld\") == 131)\n\t@test(candidate(\"aAaaaXa\"\
    ) == 153)\n\t@test(candidate(\" How are yOu?\") == 151)\n\t@test(candidate(\"\
    You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"|\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1c3equka.jl:20\nin expression starting at\
    \ /tmp/tmp1c3equka.jl:20\n"
  stdout: ''
  timestamp: 1659978991
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum =0\n    for c in s:\n        if ord(c) >64:\n            sum +=1\n\
    \    return sum\nusing Test\n\n@testset begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"abcCd\") ==\
    \ 67)\n\t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\") ==\
    \ 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are yOu?\"\
    ) == 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpef2rdfg7.jl:22\nin expression starting at\
    \ /tmp/tmpef2rdfg7.jl:22\n"
  stdout: ''
  timestamp: 1659978991
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    let sum:Int64 = foldl(fun (sum, char) -> sum + char_to_integer(char),\
    \ 0, s)\n    return sum\nusing Test\n\n@testset begin\n\ncandidate = digitSum;\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"\
    abcCd\") == 67)\n\t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\"\
    ) == 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are\
    \ yOu?\") == 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: space before \"(\" not allowed in \"fun (\" at\
    \ /tmp/tmpjpcasmkj.jl:20\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjpcasmkj.jl:20\n\
    in expression starting at /tmp/tmpjpcasmkj.jl:20\n"
  stdout: ''
  timestamp: 1659978991
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum = int64(0)\n    for c in s\n        if c.codepoint >= 48 && c.codepoint\
    \ <= 57\n            sum += c.codepoint - 48\n    return sum\n</code>\nThe function\
    \ digitSum also uses pattern matching to detect if a character is a digit. Once\
    \ we've detected a digit, we subtract 48 from it to get the sum of the digits\
    \ in the string. The same applies to the other characters in the string.\nNote\
    \ that using .codepoint makes the code a little more robust than just using .code.\
    \  For instance, if the character codes depend on the locale of the operating\
    \ system, then the .code method can get you the wrong results.  In contrast, .codepoint\
    \ will give you the character code of the character in the same way as the .code\
    \ method works.\n<|/ a |>\n<| a tags=string,functional-programming,ocaml,recursion\
    \ dscore=1 |>\nThis can also be implemented as fold function on a string of characters\
    \ and then check if the resulting number is bigger than 0 and return true if the\
    \ character is digit\n<code>\n let rec isDigit s =  \n    match s with\n     \
    \  | '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' -> true\n     \
    \  | _ -> false\nusing Test\n\n@testset begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"abcCd\") ==\
    \ 67)\n\t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\") ==\
    \ 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are yOu?\"\
    ) == 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppxcov4z2.jl:25\nin expression starting at\
    \ /tmp/tmppxcov4z2.jl:25\n"
  stdout: ''
  timestamp: 1659978991
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    digitSum = s |> String.toInt64 |> List.sum\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    abAB\") == 131)\n\t@test(candidate(\"abcCd\") == 67)\n\t@test(candidate(\"helloE\"\
    ) == 69)\n\t@test(candidate(\"woArBld\") == 131)\n\t@test(candidate(\"aAaaaXa\"\
    ) == 153)\n\t@test(candidate(\" How are yOu?\") == 151)\n\t@test(candidate(\"\
    You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpxl6ic1dq.jl:24

    '
  stdout: "test set: Error During Test at /tmp/tmpxl6ic1dq.jl:27\n  Test threw exception\n\
    \  Expression: candidate(\"\") == 0\n  type DataType has no field toInt64\n  Stacktrace:\n\
    \   [1] getproperty\n     @ ./Base.jl:37 [inlined]\n   [2] digitSum(s::String)\n\
    \     @ Main /tmp/tmpxl6ic1dq.jl:20\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpxl6ic1dq.jl:27 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpxl6ic1dq.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpxl6ic1dq.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"abAB\") == 131\n  type DataType has no field toInt64\n  Stacktrace:\n\
    \   [1] getproperty\n     @ ./Base.jl:37 [inlined]\n   [2] digitSum(s::String)\n\
    \     @ Main /tmp/tmpxl6ic1dq.jl:20\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpxl6ic1dq.jl:28 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpxl6ic1dq.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpxl6ic1dq.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"abcCd\") == 67\n  type DataType has no field toInt64\n  Stacktrace:\n\
    \   [1] getproperty\n     @ ./Base.jl:37 [inlined]\n   [2] digitSum(s::String)\n\
    \     @ Main /tmp/tmpxl6ic1dq.jl:20\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpxl6ic1dq.jl:29 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpxl6ic1dq.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpxl6ic1dq.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(\"helloE\") == 69\n  type DataType has no field toInt64\n  Stacktrace:\n\
    \   [1] getproperty\n     @ ./Base.jl:37 [inlined]\n   ["
  timestamp: 1659978994
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    \"\"\"\n    Args:\n        s (string): a string representing a sequence\
    \ of digits.\nusing Test\n\n@testset begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"abcCd\") ==\
    \ 67)\n\t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\") ==\
    \ 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are yOu?\"\
    ) == 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9gyvb9jy.jl:1\nin expression starting at /tmp/tmp9gyvb9jy.jl:1\n"
  stdout: ''
  timestamp: 1659978991
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum = 0\n    for c in s:\n        if c.is_upper():\n            sum +=\
    \ c.code\n    return sum\nend\n</cell>\n<text>\nExercise 9\nThe digits function\
    \ below is adapted from an example in the book. How does the following expression\
    \ return the correct value?\nusing Test\n\n@testset begin\n\ncandidate = digitSum;\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"\
    abcCd\") == 67)\n\t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\"\
    ) == 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are\
    \ yOu?\") == 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7w694tcc.jl:22\nin expression starting at\
    \ /tmp/tmp7w694tcc.jl:22\n"
  stdout: ''
  timestamp: 1659978991
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the digit numbers only'\n    ASCII codes.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    abAB\") == 131)\n\t@test(candidate(\"abcCd\") == 67)\n\t@test(candidate(\"helloE\"\
    ) == 69)\n\t@test(candidate(\"woArBld\") == 131)\n\t@test(candidate(\"aAaaaXa\"\
    ) == 153)\n\t@test(candidate(\" How are yOu?\") == 151)\n\t@test(candidate(\"\
    You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpaj93mcln.jl:1\nin expression starting at /tmp/tmpaj93mcln.jl:1\n"
  stdout: ''
  timestamp: 1659978991
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n digitSum = 0\n len = s.length\n for i in [0..length-1]\n      if(s(i) >=\
    \ 'a' && s(i) <= 'z')\n           digitSum = digitSum + s(i) \n      else\n  \
    \         break\n return digitSum\nend\n</cell>\n<code language=julia-1.5>\n\"\
    \"\"Task\n    Write a function that takes a string as input and returns the sum\
    \ of the digits only'\n    ASCII codes.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = digitSum;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\
    \t@test(candidate(\"abcCd\") == 67)\n\t@test(candidate(\"helloE\") == 69)\n\t\
    @test(candidate(\"woArBld\") == 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\
    \t@test(candidate(\" How are yOu?\") == 151)\n\t@test(candidate(\"You arE Very\
    \ Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdp9t2ye3.jl:29\nin expression starting at\
    \ /tmp/tmpdp9t2ye3.jl:29\n"
  stdout: ''
  timestamp: 1659978991
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    if s == \"\" then 0 else sum( if x < 32 then 0 else 1 end for x in toCharArray(s)\
    \ )\nend\nusing Test\n\n@testset begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"abcCd\") ==\
    \ 67)\n\t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\") ==\
    \ 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are yOu?\"\
    ) == 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"0\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmptjer85yb.jl:20\nin expression starting at /tmp/tmptjer85yb.jl:20\n"
  stdout: ''
  timestamp: 1659978991
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n</code>\n<|/ a tags=function,string,haskell,int,type-conversion |>\n<| a dscore=0\
    \ |>\n<code>\nimport Data.List\nimport Data.Char\nusing Test\n\n@testset begin\n\
    \ncandidate = digitSum;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\"\
    ) == 131)\n\t@test(candidate(\"abcCd\") == 67)\n\t@test(candidate(\"helloE\")\
    \ == 69)\n\t@test(candidate(\"woArBld\") == 131)\n\t@test(candidate(\"aAaaaXa\"\
    ) == 153)\n\t@test(candidate(\" How are yOu?\") == 151)\n\t@test(candidate(\"\
    You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmibgb6up.jl:20\nin expression starting at\
    \ /tmp/tmpmibgb6up.jl:20\n"
  stdout: ''
  timestamp: 1659978992
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    if s == \"\"\n        0\n    elseif length(s) == 0\n        0\n    elseif\
    \ head (s) == \"+\"\n        digitSum (tail(s))\n    else\n        digitSum (tail(s))*10\
    \ + digitSum (head s)\nusing Test\n\n@testset begin\n\ncandidate = digitSum;\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"\
    abcCd\") == 67)\n\t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\"\
    ) == 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are\
    \ yOu?\") == 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: space before \"(\" not allowed in \"head (\"\
    \ at /tmp/tmpukc96bm7.jl:24\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpukc96bm7.jl:24\n\
    in expression starting at /tmp/tmpukc96bm7.jl:24\n"
  stdout: ''
  timestamp: 1659978992
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64\n    len::Int64\n    sum::Int64 = 0\n    len = length(s)\n\
    \    forall(s in s,i in 0:len,j in i:len){\n        sum += Int(s[i])\n    }\n\
    \    return sum\nend\nusing Test\n\n@testset begin\n\ncandidate = digitSum;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"\
    abcCd\") == 67)\n\t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\"\
    ) == 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are\
    \ yOu?\") == 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpl07s23mk.jl:31

    '
  stdout: "test set: Error During Test at /tmp/tmpl07s23mk.jl:34\n  Test threw exception\n\
    \  Expression: candidate(\"\") == 0\n  UndefVarError: sum not defined\n  Stacktrace:\n\
    \   [1] digitSum(s::String)\n     @ Main /tmp/tmpl07s23mk.jl:20\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpl07s23mk.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpl07s23mk.jl:33\ntest set:\
    \ Error During Test at /tmp/tmpl07s23mk.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(\"abAB\") == 131\n  UndefVarError: sum not defined\n  Stacktrace:\n\
    \   [1] digitSum(s::String)\n     @ Main /tmp/tmpl07s23mk.jl:20\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpl07s23mk.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpl07s23mk.jl:33\ntest set:\
    \ Error During Test at /tmp/tmpl07s23mk.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"abcCd\") == 67\n  UndefVarError: sum not defined\n  Stacktrace:\n\
    \   [1] digitSum(s::String)\n     @ Main /tmp/tmpl07s23mk.jl:20\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpl07s23mk.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpl07s23mk.jl:33\ntest set:\
    \ Error During Test at /tmp/tmpl07s23mk.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"helloE\") == 69\n  UndefVarError: sum not defined\n  Stacktrace:\n\
    \   [1] digitSum(s::String)\n     @ Main /tmp/tmpl07s23mk.jl:20\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpl07s23mk"
  timestamp: 1659978994
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = 0\n    for i in s do \n        sum += toDigit(i) \n    return\
    \ sum\nend \n</cell>\n<code language=julia-1.6>\ndigitSum(\"\")\n</cell>\n<text>\n\
    Write a function that returns a list containing all the uppercase letters of the\
    \ input string.\nusing Test\n\n@testset begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"abcCd\") ==\
    \ 67)\n\t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\") ==\
    \ 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are yOu?\"\
    ) == 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid \"do\" syntax\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp8tgivl1y.jl:21\nin expression starting at /tmp/tmp8tgivl1y.jl:21\n"
  stdout: ''
  timestamp: 1659978992
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    | s == \"\" || s == nil = \n        0\n    | otherwise = \n        charCount(s[0])\
    \ + digitSum(s[1..-1]) \n    where\n        charCount(_::Char) = 1 + charCount(_)\n\
    using Test\n\n@testset begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\"\
    ) == 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"abcCd\") ==\
    \ 67)\n\t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\") ==\
    \ 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are yOu?\"\
    ) == 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"|\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfvk8x1jw.jl:20\nin expression starting at\
    \ /tmp/tmpfvk8x1jw.jl:20\n"
  stdout: ''
  timestamp: 1659978991
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    if s.length == 0 then 0 else Int64((sum digits(s)) - Int64(\"A\") + 1)\n\
    end \nusing Test\n\n@testset begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"abcCd\") ==\
    \ 67)\n\t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\") ==\
    \ 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are yOu?\"\
    ) == 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"0\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpkr31fie5.jl:20\nin expression starting at /tmp/tmpkr31fie5.jl:20\n"
  stdout: ''
  timestamp: 1659978992
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n| s == \"\" = 1\n| s = takeWhile(isDigit)(s)\n| otherwise = digitSum(dropWhile(isDigit)(s))\
    \ + sum(takeWhile(isUpper)(s))\n</code>\n<|/ a dscore=1 |>\n<| c |>\nI understand\
    \ that some languages have a `sum` function built in, but in languages such as\
    \ Haskell, Python and OCaml this is considered the more elegant solution.\n<|/\
    \ c |>\n<| a tags=string,haskell,recursion |>\nHere's a lazy solution:\n<code>\n\
    import Data.List (foldl')\nusing Test\n\n@testset begin\n\ncandidate = digitSum;\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"\
    abcCd\") == 67)\n\t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\"\
    ) == 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are\
    \ yOu?\") == 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"|\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpq6cn_wah.jl:20\nin expression starting at\
    \ /tmp/tmpq6cn_wah.jl:20\n"
  stdout: ''
  timestamp: 1659978993
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    | s.startsWith(\"0\") && digitSum(s[1..]) == 0\n    | s.startsWith(\"\
    1\") && digitSum(s[1..]) == 1\n    | s.startsWith(\"2\") && digitSum(s[1..]) ==\
    \ 2\n    | s.startsWith(\"3\") && digitSum(s[1..]) == 3\n    | s.startsWith(\"\
    4\") && digitSum(s[1..]) == 4\n    | s.startsWith(\"5\") && digitSum(s[1..]) ==\
    \ 5\n    | s.startsWith(\"6\") && digitSum(s[1..]) == 6\n    | s.startsWith(\"\
    7\") && digitSum(s[1..]) == 7\n    | s.startsWith(\"8\") && digitSum(s[1..]) ==\
    \ 8\n    | s.startsWith(\"9\") && digitSum(s[1..]) == 9\n    | (s ==  _) | digitSum(s[1..])\
    \ == digitSum(s[2..])\nusing Test\n\n@testset begin\n\ncandidate = digitSum;\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"\
    abcCd\") == 67)\n\t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\"\
    ) == 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are\
    \ yOu?\") == 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"|\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpioutfxmx.jl:20\nin expression starting at\
    \ /tmp/tmpioutfxmx.jl:20\n"
  stdout: ''
  timestamp: 1659978993
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n     | isDigit(s,0,0) = sum [digit(char) for char in s]\n     | otherwise\
    \ = 0\n</code>\n<|/ a |>\n<| a tags=ocaml,string,char |>\nThe code below will\
    \ return the number of characters whose ASCII codes are greater than or equal\
    \ to a given value.\n<code>\nlet charCode char = String.to_char_array (String.to_string\
    \ char) in\nlet charCount chars =\n    let sum = ref 0 in\n    for c in chars\
    \ do\n        sum := !sum + charCode c in\n    !sum\n</code>\n<|/ a dscore=1 |>\n\
    <| a tags=ocaml,string,char |>\n<code>\nlet charCount = String.length str |> (fun\
    \ i -> String.substr str 0 i)\n</code>\n<|/ a dscore=1 |>\n<| a tags=ocaml,string,char\
    \ |>\n<code>\nlet countChars str =\n  let charCount = ref 0 in\n  let rec loop\
    \ i str =\n    if i < String.length str then loop (i + 1) (String.substr str i\
    \ 1) else\n      inc (!charCount) in\n  loop (0) str\n</code>\n<|/ a dscore=1\
    \ |>\n<| a tags=ocaml,string,char |>\n<code>\nlet countChars str =\n  let charCount\
    \ = ref 0 in\n  let rec loop i =\n    if i < String.length str then loop (i +\
    \ 1) (String.substr str i 1) else\n      inc (!charCount) in\n  loop (0) str\n\
    </code>\n<|/ a dscore=0 |>\n<| a tags=ocaml,string,char |>\n<code>\nlet charCount\
    \ str \n    in String.length (str) \n    |> (fun i -> String.substr str 0 i)\n\
    \    |> Array.fold_left (fun acc x -> (Char.to_string (Char.code x)) |> acc) 0\n\
    </code>\n<|/ a dscore=0 |>\n<| c |>\nWelcome to Stack Overflow. Code-only answers\
    \ are discouraged on Stack Overflow because they don't explain how it solves the\
    \ problem. Please edit your answer to explain how your code answers the question,\
    \ so that it is useful for other users also as well as the OP.\n<|/ c |>\n<| a\
    \ tags=ocaml,string,char dscore=0 |>\n<code>\nlet charCount = String.length str\
    \ |> (fun i -> String.substr str 0 i)\n</code>\n<|/ a |>\n<| a tags=ocaml,string,char\
    \ |>\n<code>\nlet countChars str =\n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = digitSum;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\
    \t@test(candidate(\"abcCd\") == 67)\n\t@test(candidate(\"helloE\") == 69)\n\t\
    @test(candidate(\"woArBld\") == 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\
    \t@test(candidate(\" How are yOu?\") == 151)\n\t@test(candidate(\"You arE Very\
    \ Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"|\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_xu49293.jl:20\nin expression starting at\
    \ /tmp/tmp_xu49293.jl:20\n"
  stdout: ''
  timestamp: 1659978993
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum :: Int64 = 0\n    for c in s do\n        sum += (c - 'A' + 1)*26\n\
    \    return sum\nusing Test\n\n@testset begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"abcCd\") ==\
    \ 67)\n\t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\") ==\
    \ 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are yOu?\"\
    ) == 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid \"do\" syntax\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp5_3nftz1.jl:21\nin expression starting at /tmp/tmp5_3nftz1.jl:21\n"
  stdout: ''
  timestamp: 1659978993
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    # your code here\n    result := 0\n    for i in reverse(split(s,\"\"))\
    \ do \n        if i.upcase >= 'A' and i.upcase <= 'Z' then \n            result\
    \ := result + i.upcase - 'A'\n        else if i.upcase >= 'a' and i.upcase <=\
    \ 'z' then \n            result := result + i.upcase - 'a'\n        else \n  \
    \          result := result + i.upcase\n        end\n    end\n    return result\n\
    end\n</cell>\n<cell>\ndigitSum(\"abcCd\") # expected output: 67\n</cell>\n<text>\n\
    Problem 3: String Extensions\nusing Test\n\n@testset begin\n\ncandidate = digitSum;\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"\
    abcCd\") == 67)\n\t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\"\
    ) == 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are\
    \ yOu?\") == 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"i\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpu9cpygi_.jl:23\nin expression starting at /tmp/tmpu9cpygi_.jl:23\n"
  stdout: ''
  timestamp: 1659978993
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    return sum(map(ord, filter(c => c <= 'z', s)))\nend\n</cell>\n<text>\n\
    Exercise 4\nWrite a function that takes a string as input and returns the number\
    \ of times each letter appears in the string. Letters that are not in the dictionary\
    \ should be ignored (for example, 'o' should ignore 'o' and 'O').\nusing Test\n\
    \n@testset begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    abAB\") == 131)\n\t@test(candidate(\"abcCd\") == 67)\n\t@test(candidate(\"helloE\"\
    ) == 69)\n\t@test(candidate(\"woArBld\") == 131)\n\t@test(candidate(\"aAaaaXa\"\
    ) == 153)\n\t@test(candidate(\" How are yOu?\") == 151)\n\t@test(candidate(\"\
    You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgd4c03rr.jl:22\nin expression starting at\
    \ /tmp/tmpgd4c03rr.jl:22\n"
  stdout: ''
  timestamp: 1659978993
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    return s.toString.toUpper.map(_.toInt).sum\n</code>\n<|/ a dscore=4 |>\n\
    <| c |>\nJust curious why you use an `Array[Char]` instead of a `Char` array?\n\
    <|/ c |>\n<| a tags=string,haskell |>\n<code>\nimport Data.Char\nusing Test\n\n\
    @testset begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    abAB\") == 131)\n\t@test(candidate(\"abcCd\") == 67)\n\t@test(candidate(\"helloE\"\
    ) == 69)\n\t@test(candidate(\"woArBld\") == 131)\n\t@test(candidate(\"aAaaaXa\"\
    ) == 153)\n\t@test(candidate(\" How are yOu?\") == 151)\n\t@test(candidate(\"\
    You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpw9w4jb69.jl:21\nin expression starting at\
    \ /tmp/tmpw9w4jb69.jl:21\n"
  stdout: ''
  timestamp: 1659978993
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    if length(s)==0 then 0 else digitSum(sub(s, 0, 1)) + digit(sub(s, 0, 2))\n\
    using Test\n\n@testset begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\"\
    ) == 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"abcCd\") ==\
    \ 67)\n\t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\") ==\
    \ 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are yOu?\"\
    ) == 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"0\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpmxs58gl7.jl:20\nin expression starting at /tmp/tmpmxs58gl7.jl:20\n"
  stdout: ''
  timestamp: 1659978993
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    if length(s) <= 0 \n        0\n    else \n        sum(filter(isUpper,\
    \ s))\nend\n</cell>\n<text>\nProblem 7\nWrite a function that takes a string as\
    \ input and returns the length of the longest substring with at least\none letter\
    \ not equal to the given letter\n(case insensitive).\nusing Test\n\n@testset begin\n\
    \ncandidate = digitSum;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\"\
    ) == 131)\n\t@test(candidate(\"abcCd\") == 67)\n\t@test(candidate(\"helloE\")\
    \ == 69)\n\t@test(candidate(\"woArBld\") == 131)\n\t@test(candidate(\"aAaaaXa\"\
    ) == 153)\n\t@test(candidate(\" How are yOu?\") == 151)\n\t@test(candidate(\"\
    You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp18eti1si.jl:25\nin expression starting at\
    \ /tmp/tmp18eti1si.jl:25\n"
  stdout: ''
  timestamp: 1659978993
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n|\n    if s == \"\"\n        0\n    else if isAscii(s[1])\n        digitSum(s[1..])\n\
    \    else\n        digitSum(s[0..1]) + digitSum(s[2..])\n    end\nend\n</cell>\n\
    <code language=julia-1.0>\nusing Test\n\n@testset begin\n\ncandidate = digitSum;\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"\
    abcCd\") == 67)\n\t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\"\
    ) == 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are\
    \ yOu?\") == 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8ecd0tbm.jl:23\nin expression starting at\
    \ /tmp/tmp8ecd0tbm.jl:23\n"
  stdout: ''
  timestamp: 1659978993
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    if length(s) == 0 \n        return 0 \n    let result = digitSum(tail(s))\n\
    \    return result + digit(head(s)) \nend\n</cell>\n<text>\nExercise\nTask\nWrite\
    \ a function that takes an integer as input and returns the sum of all even digits\
    \ in that integer.\nusing Test\n\n@testset begin\n\ncandidate = digitSum;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"\
    abcCd\") == 67)\n\t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\"\
    ) == 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are\
    \ yOu?\") == 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppbzy6bvo.jl:25\nin expression starting at\
    \ /tmp/tmppbzy6bvo.jl:25\n"
  stdout: ''
  timestamp: 1659978993
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum(map(ord,filter(chr,s)))\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = digitSum;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\
    \t@test(candidate(\"abcCd\") == 67)\n\t@test(candidate(\"helloE\") == 69)\n\t\
    @test(candidate(\"woArBld\") == 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\
    \t@test(candidate(\" How are yOu?\") == 151)\n\t@test(candidate(\"You arE Very\
    \ Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpsbgmdk60.jl:24

    '
  stdout: "test set: Error During Test at /tmp/tmpsbgmdk60.jl:27\n  Test threw exception\n\
    \  Expression: candidate(\"\") == 0\n  UndefVarError: chr not defined\n  Stacktrace:\n\
    \   [1] digitSum(s::String)\n     @ Main /tmp/tmpsbgmdk60.jl:20\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpsbgmdk60.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpsbgmdk60.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpsbgmdk60.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"abAB\") == 131\n  UndefVarError: chr not defined\n  Stacktrace:\n\
    \   [1] digitSum(s::String)\n     @ Main /tmp/tmpsbgmdk60.jl:20\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpsbgmdk60.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpsbgmdk60.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpsbgmdk60.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"abcCd\") == 67\n  UndefVarError: chr not defined\n  Stacktrace:\n\
    \   [1] digitSum(s::String)\n     @ Main /tmp/tmpsbgmdk60.jl:20\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpsbgmdk60.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpsbgmdk60.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpsbgmdk60.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(\"helloE\") == 69\n  UndefVarError: chr not defined\n  Stacktrace:\n\
    \   [1] digitSum(s::String)\n     @ Main /tmp/tmpsbgmdk60.jl:20\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpsbgmdk60"
  timestamp: 1659978995
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n  digits = 0 \n  for ch in s do \n    if ch in '0' .. '9' then digits += ch-'0'\
    \ \n  end \n  return digits\nend\n</cell>\n<text>\nExercise: Implement digitCount\n\
    Write a function that takes a string as input and returns the number of non-negative\
    \ integer characters in it.\nusing Test\n\n@testset begin\n\ncandidate = digitSum;\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"\
    abcCd\") == 67)\n\t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\"\
    ) == 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are\
    \ yOu?\") == 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid \"do\" syntax\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpol3xfxh5.jl:21\nin expression starting at /tmp/tmpol3xfxh5.jl:21\n"
  stdout: ''
  timestamp: 1659978993
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    if isEmpty(s) then 0 else s.foldl(|acc, x| acc + digitToInt(x.toUpperCase)\n\
    end\n</code>\n<|/ a tags=ocaml,fold,function |>\n<| c |>\nThanks, this is very\
    \ helpful. I was trying to see if I could use a fold function, but I was going\
    \ through the OCaml manual. Had not seen the foldl function. This is exactly what\
    \ I was looking for.\n<|/ c |>\n<| a dscore=1 |>\nIf you want to implement the\
    \ digit sum function using a fold function, then the function to be implemented\
    \ should take a string as an argument and return the sum of the digits of the\
    \ string. Since OCaml has built-in functions for converting between integer and\
    \ character, you should use the built-in functions to convert between the string's\
    \ characters and the integer's digits.\nBelow is what your function should look\
    \ like:\n<code>\nlet digitSum s = \n  let chars = Char.to_string s in\n  List.fold_left\
    \ (+) 0 (List.map Char.digitToInt chars)\n</code>\nThe function List.fold_left\
    \ takes an initial value (in this case, 0) and a function (in this case, +) and\
    \ applies it repeatedly (from left to right) to each element of a list starting\
    \ from the initial value. The function passed to List.fold_left is +. The first\
    \ argument is the initial value (in this case, 0) and the second is the function\
    \ to be applied to each element (in this case, adding digits). \nThe function\
    \ Char.digitToInt converts a character (which is actually a number, but represented\
    \ as a character because OCaml has character types) to an integer. \nThe function\
    \ Char.to_string converts a string to a list of characters.\nThe function List.map\
    \ applies a function to each element of a list and returns a list of the results.\n\
    The function List.fold_left applies a function repeatedly to elements of a list\
    \ and accumulates an initial value.\n<|/ a tags=ocaml,fold,function |>\n<| c |>\n\
    This is very helpful. I thought about using List.map but didn't think to use the\
    \ Char.digitToInt function. Thanks!\n<|/ c |>\n<| a tags=ocaml,fold,function |>\n\
    We can write this more concisely as\n<code>\nlet digitSum s =\n    let digits\
    \ = String.map Char.digitToInt s in digits.fold_left(fun acc d -> acc + d) 0\n\
    </code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nlet digits s = \n  let a\
    \ = String.map Char.digitToInt s in \n  a.fold_left(fun acc x -> acc + x) 0\n\
    </code>\n<|/ a tags=ocaml,fold,function |>\n<| a tags=ocam\nusing Test\n\n@testset\
    \ begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    abAB\") == 131)\n\t@test(candidate(\"abcCd\") == 67)\n\t@test(candidate(\"helloE\"\
    ) == 69)\n\t@test(candidate(\"woArBld\") == 131)\n\t@test(candidate(\"aAaaaXa\"\
    ) == 153)\n\t@test(candidate(\" How are yOu?\") == 151)\n\t@test(candidate(\"\
    You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"0\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpqrnjfuw7.jl:20\nin expression starting at /tmp/tmpqrnjfuw7.jl:20\n"
  stdout: ''
  timestamp: 1659978993
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    s = String.toUpper(s).letters\n    sum = 0\n    for c in s:\n        if\
    \ c.isUpper()\n            sum += c.code\n    return sum\n</code>\n<|/ a dscore=0\
    \ |>\n<| c |>\nI don't think this is the correct answer. Try with `\"abc\"`.\n\
    <|/ c |>\n<| c |>\nAh I see I misread that. Sorry my bad lol\n<|/ c |>\n<| c |>\n\
    : This is still incorrect for the same reason.\n<|/ c |>\n<| a dscore=0 |>\nHere's\
    \ a solution which uses the fact that String.toUpper returns a string with upper\
    \ case characters converted to uppercase:\n<code>\nlet digitSum :: String -> Int\n\
    digitSum s = foldl addUpper 0 [c | c <- String.toUpper(s)]\n</code>\nfoldl is\
    \ a function that works like foldr but performs a binary operation on two successive\
    \ elements rather than a binary operation on a single element and a list.  foldr\
    \ is more general, it can work on any binary operation on two successive elements.\n\
    addUpper is the function you were trying to implement.  It adds up the ASCII codes\
    \ of all the characters in the string that have a Unicode code point above 127.\n\
    <|/ a tags=haskell,string |>\n<| c |>\nThis is not the right answer. Try `\"abc\"\
    `.\n<|/ c |>\n<| c |>\n: Nope.  Try it.  It gives the right answer.\n<|/ c |>\n\
    <| c |>\nI didn't say it was. See the other answers.\n<|/ c |>\n<| c |>\n: I thought\
    \ the other answers were correct.  I believe my answer is correct.  It gives what\
    \ I think OP expects.\n<|/ c |>\n<| a |>\nThis works for me:\n<code>\nimport Data.Char\
    \ (toUpper, elemIndex)\nusing Test\n\n@testset begin\n\ncandidate = digitSum;\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"\
    abcCd\") == 67)\n\t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\"\
    ) == 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are\
    \ yOu?\") == 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppizbuyiu.jl:23\nin expression starting at\
    \ /tmp/tmppizbuyiu.jl:23\n"
  stdout: ''
  timestamp: 1659978993
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    i := 0\n    sum := 0\n    \n    for c <- s do \n        if (ord(c) >=\
    \ 48 ) && (ord(c) <= 57) \n        then  \n            sum := sum + ord(c) - 48\
    \ \n        else \n            sum := sum + c \n    \n    sum\nend\n</cell>\n\
    <code language=julia-0.5>\ndigitSum(\"Hello\")\n</cell>\n<text>\nExercise 4.7:\
    \ Implement the reverseStr function.\nWrite a function that takes a string as\
    \ input and returns the string reversed.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = digitSum;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\
    \t@test(candidate(\"abcCd\") == 67)\n\t@test(candidate(\"helloE\") == 69)\n\t\
    @test(candidate(\"woArBld\") == 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\
    \t@test(candidate(\" How are yOu?\") == 151)\n\t@test(candidate(\"You arE Very\
    \ Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid iteration specification\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2peu9knt.jl:23\nin expression starting at\
    \ /tmp/tmp2peu9knt.jl:23\n"
  stdout: ''
  timestamp: 1659978993
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n\"\"\"\n    digitSum(s::String)\nusing Test\n\n@testset begin\n\ncandidate\
    \ = digitSum;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\
    \t@test(candidate(\"abcCd\") == 67)\n\t@test(candidate(\"helloE\") == 69)\n\t\
    @test(candidate(\"woArBld\") == 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\
    \t@test(candidate(\" How are yOu?\") == 151)\n\t@test(candidate(\"You arE Very\
    \ Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvpabud5s.jl:1\nin expression starting at /tmp/tmpvpabud5s.jl:1\n"
  stdout: ''
  timestamp: 1659978993
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    return sum(map(ord, s)) - 97 - 52\nusing Test\n\n@testset begin\n\ncandidate\
    \ = digitSum;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\
    \t@test(candidate(\"abcCd\") == 67)\n\t@test(candidate(\"helloE\") == 69)\n\t\
    @test(candidate(\"woArBld\") == 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\
    \t@test(candidate(\" How are yOu?\") == 151)\n\t@test(candidate(\"You arE Very\
    \ Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpjevuctom.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjevuctom.jl:1\n\
    in expression starting at /tmp/tmpjevuctom.jl:1\n"
  stdout: ''
  timestamp: 1659978993
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n   \"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the digits\n    from the right of the alphabetic characters in the\
    \ string.\nusing Test\n\n@testset begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"abcCd\") ==\
    \ 67)\n\t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\") ==\
    \ 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are yOu?\"\
    ) == 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpg5shanzn.jl:1\nin expression starting at /tmp/tmpg5shanzn.jl:1\n"
  stdout: ''
  timestamp: 1659978994
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    if s == \"\" then 0 else sum(map(ord, takeWhile(isUpper,s)))\nend\n</cell>\n\
    <code language=julia-0.6>\ndigitSum(\"\")\ndigitSum(\"abAB\")\ndigitSum(\"abcCd\"\
    )\ndigitSum(\"helloE\")\ndigitSum(\"woArBld\")\ndigitSum(\"aAaaaXa\")\n</cell>\n\
    <text>\nExercise 3\nWrite a function that will generate all the possible combinations\
    \ of k elements from an input list. For example, if you want a list with all possible\
    \ combinations of length 3 from a list of length 6, then you will get 6 lists\
    \ of the form [a,a,a,b,b,b,c] and [a,a,a,b,b,b,c] and [a,a,a,b,b,b,c] and [a,a,a,b,b,c,c]\
    \ and [a,a,a,b,b,c,c] and [a,a,a,b,b,c,c] so on and so forth. Include the original\
    \ list in the final list of lists.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = digitSum;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\
    \t@test(candidate(\"abcCd\") == 67)\n\t@test(candidate(\"helloE\") == 69)\n\t\
    @test(candidate(\"woArBld\") == 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\
    \t@test(candidate(\" How are yOu?\") == 151)\n\t@test(candidate(\"You arE Very\
    \ Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"0\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmphtlk_fal.jl:20\nin expression starting at /tmp/tmphtlk_fal.jl:20\n"
  stdout: ''
  timestamp: 1659978994
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = 0\n    \n    for i in s.chars\n        if i >=48 and  i <=57\n\
    \            sum += i\n    return sum\nusing Test\n\n@testset begin\n\ncandidate\
    \ = digitSum;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\
    \t@test(candidate(\"abcCd\") == 67)\n\t@test(candidate(\"helloE\") == 69)\n\t\
    @test(candidate(\"woArBld\") == 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\
    \t@test(candidate(\" How are yOu?\") == 151)\n\t@test(candidate(\"You arE Very\
    \ Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"i\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp8qkksr9k.jl:23\nin expression starting at /tmp/tmp8qkksr9k.jl:23\n"
  stdout: ''
  timestamp: 1659978994
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n</code>\n<|/ a |>\n<| c |>\nAh.  I see what happened.  I was trying to add\
    \ the numbers instead of add them.  I see now that my problem is that I'm adding\
    \ every character individually.  But it's still not giving me the answer I want.\
    \  I'll update my question with my current code.\n<|/ c |>\n<| c |>\nThis works.\
    \  But it takes almost twice as long to run as my original.  Not sure why.\n<|/\
    \ c |>\n<| c |>\nThe `Int64` type doesn't support arbitrarily large integers.\
    \  I changed it to `Int` since that type can easily hold a number up to 4 billion\
    \ and it's only about 6 bytes of memory so it's much easier to deal with that\
    \ way.\n<|/ c |>\n<| c |>\nIt's actually faster to do it this way (but slower\
    \ to compute it) than to store it in an `Int64`.  But my answer only does it in\
    \ linear time, not quadratic time.  Are you sure it's faster when you take off\
    \ the memoization?\n<|/ c |>\n<| c |>\nHmm that's odd.  I put a print statement\
    \ in the beginning of digitSum to see how many times it gets called.  It doesn't\
    \ print out when it's running.  And it's running about twice as fast now.  I must\
    \ have mistyped something.\n<|/ c |>\n<| a dscore=1 |>\nAnother way to do this\
    \ is to store all the digits in a single string, then convert to int at the end.\
    \  This works by keeping track of the digits as we go, and converting them to\
    \ a number at the end.\n<code>\ndigitSum(s)::Int64 =\n    let\n        digits\
    \ =\n            foldl( (acc, digit) ->\n                    case digitToInt64(digit)\
    \ of \n                        Nothing ->\n                            (acc, [])\n\
    \                        Just digit -> (digit, [digit])\n            , \"\"\n\
    \            , s\n    in \n        foldl( (acc, digit) ->\n            case digitToInt64(digit)\
    \ of \n                Nothing ->\n                    (acc, [])\n           \
    \     Just digit -> (digit, [digit])\n            , acc\n            , digits\n\
    \        )([], 0)\n</code>\n<|/ a tags=ocaml,string,algorithm,arrays |>\n<| c\
    \ |>\n`digitToInt64` would be my first choice.  But I'm getting an unexpected\
    \ value from the `digitToInt64` call.  I added an `Int64.of_string` at the end\
    \ to force it to convert it to a string, but it's giving me an `Invalid argument`\
    \ error.  It isn't sure what I'm \nusing Test\n\n@testset begin\n\ncandidate =\
    \ digitSum;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\
    \t@test(candidate(\"abcCd\") == 67)\n\t@test(candidate(\"helloE\") == 69)\n\t\
    @test(candidate(\"woArBld\") == 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\
    \t@test(candidate(\" How are yOu?\") == 151)\n\t@test(candidate(\"You arE Very\
    \ Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsn8s_bro.jl:20\nin expression starting at\
    \ /tmp/tmpsn8s_bro.jl:20\n"
  stdout: ''
  timestamp: 1659978995
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    \"\"\"Convert s to String\"\"\"\n    let s = s |> toString |> toCharArray\n\
    \    let sum = ref 0\n    for i in 0 ..< s.length do\n        if s[i] >= 'a' &&\
    \ (s[i] <= 'z') then\n            sum := !sum + i - ((toString.[s[i]] - 'a')::Int64)\n\
    \    return !sum\nend\n</code>\n<|/ a |>\n<| a tags=string,erlang |>\nI took this\
    \ from a blog post: \n<code>\nget_uppercases(<<S/binary>>) -> list_to_integer(list_to_integer(binary_to_list(S,\
    \ 16, 256)), 2, 256).\nusing Test\n\n@testset begin\n\ncandidate = digitSum;\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"\
    abcCd\") == 67)\n\t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\"\
    ) == 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are\
    \ yOu?\") == 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: let variables should end in \";\" or newline\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmpxqm93rnv.jl:22\nin expression\
    \ starting at /tmp/tmpxqm93rnv.jl:22\n"
  stdout: ''
  timestamp: 1659978995
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    if s == \"\" then 0\n    elif s == \"_\" then 0\n    else digitSum(subtr(s,\
    \ 1, length(s)-1) + subtr(s, length(s)-2, length(s)-1))\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    abAB\") == 131)\n\t@test(candidate(\"abcCd\") == 67)\n\t@test(candidate(\"helloE\"\
    ) == 69)\n\t@test(candidate(\"woArBld\") == 131)\n\t@test(candidate(\"aAaaaXa\"\
    ) == 153)\n\t@test(candidate(\" How are yOu?\") == 151)\n\t@test(candidate(\"\
    You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"0\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpkxewoy4d.jl:20\nin expression starting at /tmp/tmpkxewoy4d.jl:20\n"
  stdout: ''
  timestamp: 1659978995
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    return sum(x::Int | ascii <- [1..12] where x <- takeWhile(x >= 'A' &&\
    \ x < 'Z', s))\n</code>\n<|/ a tags=haskell,functional-programming |>\n<| c |>\n\
    The last example with `takeWhile` should be `digitSum(\"aAaaaXa\")`, not `digitSum(\"\
    aAaaaXA\")`, shouldn't it?\n<|/ c |>\n<| c |>\nYes, thanks for pointing out.\n\
    <|/ c |>\n<| a |>\nAnother way to do it using foldl:\n<code>\nimport Data.Char\n\
    import Data.List (foldl')\nusing Test\n\n@testset begin\n\ncandidate = digitSum;\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"\
    abcCd\") == 67)\n\t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\"\
    ) == 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are\
    \ yOu?\") == 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8r0jgtq3.jl:21\nin expression starting at\
    \ /tmp/tmp8r0jgtq3.jl:21\n"
  stdout: ''
  timestamp: 1659978995
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n  let\n    acc=charToInt(s)\n  in \n    if acc>127 then acc-=256\n    else\
    \ acc\n  end\ndigitSum(\"\")\ndigitSum(\"abAB\")\ndigitSum(\"abcCd\")\ndigitSum(\"\
    helloE\")\ndigitSum(\"woArBld\")\ndigitSum(\"aAaaaXa\")\ndigitSum(\"aAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAa\n\
    using Test\n\n@testset begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\"\
    ) == 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"abcCd\") ==\
    \ 67)\n\t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\") ==\
    \ 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are yOu?\"\
    ) == 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"acc\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpxh3pmbbw.jl:23\nin expression starting at /tmp/tmpxh3pmbbw.jl:23\n"
  stdout: ''
  timestamp: 1659978995
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n  if s==\"abc\"\n    3\n  elif s==\"def\"\n    4\n  elif s==\"ghi\"\n    5\n\
    \  elif s==\"jkl\"\n    6\n  elif s==\"mno\"\n    7\n  elif s==\"pqrs\"\n    8\n\
    \  elif s==\"tuv\"\n    9\n  else \n    sum(ord(c) for c in s)\n  end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\") ==\
    \ 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"abcCd\") == 67)\n\
    \t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\") == 131)\n\
    \t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are yOu?\") ==\
    \ 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"s\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpebuvc5gd.jl:22\nin expression starting at /tmp/tmpebuvc5gd.jl:22\n"
  stdout: ''
  timestamp: 1659978995
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    if s == \"\"\n        0\n    else\n        s |> char.foldl(fun acc x ->\
    \ acc + if isUpper x then 0 else 1 end, 0) |> int\n</code>\n<|/ a |>\n<| a tags=tail-recursion,fold,haskell\
    \ |>\nHere's a general solution that might look less cryptic:\n<code>\nimport\
    \ Data.Char\nusing Test\n\n@testset begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"abcCd\") ==\
    \ 67)\n\t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\") ==\
    \ 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are yOu?\"\
    ) == 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_bnz1a6o.jl:23\nin expression starting at\
    \ /tmp/tmp_bnz1a6o.jl:23\n"
  stdout: ''
  timestamp: 1659978995
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    s = toUpper(s);\n    if length(s) == 0 then return 0 else\n    let\n \
    \       sum = 0;\n        pos = 0;\n        while pos < length(s) do \n      \
    \      sum = sum + toUpper(s[pos]);\n            pos = pos + 1;\n        end;\n\
    \    return sum;\nend\n</cell>\n<code language=julia-1.6>\ndigitSum(\"\")\n</cell>\n\
    <code language=julia-1.6>\ndigitSum(\"abAB\")\n</cell>\n<code language=julia-1.6>\n\
    digitSum(\"abcCd\")\n</cell>\n<code language=julia-1.6>\ndigitSum(\"helloE\")\n\
    </cell>\n<code language=julia-1.6>\ndigitSum(\"woArBld\")\n</cell>\n<code language=julia-1.6>\n\
    digitSum(\"aAaaaXa\")\n</cell>\n<text>\nPart 2: String concatenation\nusing Test\n\
    \n@testset begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    abAB\") == 131)\n\t@test(candidate(\"abcCd\") == 67)\n\t@test(candidate(\"helloE\"\
    ) == 69)\n\t@test(candidate(\"woArBld\") == 131)\n\t@test(candidate(\"aAaaaXa\"\
    ) == 153)\n\t@test(candidate(\" How are yOu?\") == 151)\n\t@test(candidate(\"\
    You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpnfykg107.jl:21\nin expression starting at /tmp/tmpnfykg107.jl:21\n"
  stdout: ''
  timestamp: 1659978995
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    s = toLower(s)\n    return (sum(map(digit2int, [ch | substr(s,i,1) for\
    \ (i,ch) in enumerate(s)])) + digitSum(substr(s,1,length(s))))\nend\n</cell>\n\
    <code language=julia-1.5>\ndigitSum(\"aAaaaXa\")\n</cell>\n<text>\nExercise\n\
    using Test\n\n@testset begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\"\
    ) == 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"abcCd\") ==\
    \ 67)\n\t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\") ==\
    \ 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are yOu?\"\
    ) == 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpd6i6v0he.jl:23\nin expression starting at\
    \ /tmp/tmpd6i6v0he.jl:23\n"
  stdout: ''
  timestamp: 1659978995
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    # Your code here\n    return 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = digitSum;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\"\
    ) == 131)\n\t@test(candidate(\"abcCd\") == 67)\n\t@test(candidate(\"helloE\")\
    \ == 69)\n\t@test(candidate(\"woArBld\") == 131)\n\t@test(candidate(\"aAaaaXa\"\
    ) == 153)\n\t@test(candidate(\" How are yOu?\") == 151)\n\t@test(candidate(\"\
    You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 7 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp69xs7h11.jl:25

    '
  stdout: "test set: Test Failed at /tmp/tmp69xs7h11.jl:29\n  Expression: candidate(\"\
    abAB\") == 131\n   Evaluated: 0 == 131\nStacktrace:\n [1] macro expansion\n  \
    \ @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp69xs7h11.jl:29 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp69xs7h11.jl:27\ntest set: Test Failed at /tmp/tmp69xs7h11.jl:30\n\
    \  Expression: candidate(\"abcCd\") == 67\n   Evaluated: 0 == 67\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp69xs7h11.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp69xs7h11.jl:27\ntest set: Test\
    \ Failed at /tmp/tmp69xs7h11.jl:31\n  Expression: candidate(\"helloE\") == 69\n\
    \   Evaluated: 0 == 69\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp69xs7h11.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp69xs7h11.jl:27\ntest set: Test\
    \ Failed at /tmp/tmp69xs7h11.jl:32\n  Expression: candidate(\"woArBld\") == 131\n\
    \   Evaluated: 0 == 131\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp69xs7h11.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp69xs7h11.jl:27\ntest set: Test\
    \ Failed at /tmp/tmp69xs7h11.jl:33\n  Expression: candidate(\"aAaaaXa\") == 153\n\
    \   Evaluated: 0 == 153\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp69xs7h11.jl:33 [inlined]\n ["
  timestamp: 1659978996
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum :: Int64\n    sum = 0\n    for ch in s\n        sum += if ch.isUpper\n\
    \            ch\n        else 26\n    end\n    sum\nend\n</cell>\n<code language=julia-1.1>\n\
    digitSum(\"\")\n</cell>\n<text>\nReturning a Bool\nusing Test\n\n@testset begin\n\
    \ncandidate = digitSum;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\"\
    ) == 131)\n\t@test(candidate(\"abcCd\") == 67)\n\t@test(candidate(\"helloE\")\
    \ == 69)\n\t@test(candidate(\"woArBld\") == 131)\n\t@test(candidate(\"aAaaaXa\"\
    ) == 153)\n\t@test(candidate(\" How are yOu?\") == 151)\n\t@test(candidate(\"\
    You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplsusrd6q.jl:29\nin expression starting at\
    \ /tmp/tmplsusrd6q.jl:29\n"
  stdout: ''
  timestamp: 1659978995
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    \"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    abAB\") == 131)\n\t@test(candidate(\"abcCd\") == 67)\n\t@test(candidate(\"helloE\"\
    ) == 69)\n\t@test(candidate(\"woArBld\") == 131)\n\t@test(candidate(\"aAaaaXa\"\
    ) == 153)\n\t@test(candidate(\" How are yOu?\") == 151)\n\t@test(candidate(\"\
    You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcdn3dcks.jl:1\nin expression starting at /tmp/tmpcdn3dcks.jl:1\n"
  stdout: ''
  timestamp: 1659978995
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    if s == \"\"\n        0\n    else\n        let rec sum(n::Int64, n::Int64)::Int64\
    \ = if n == 0 then 1 else sum(n-1, n*10+(n%10)*digitSum(s.[n+1]))\n        sum(length(s),\
    \ 0)\n    end \nend\n</cell>\n<text>\nProblem 7\nA list with five integer elements\
    \ should be converted to a list with four elements. Your function should do the\
    \ following conversion and return the new list.\nusing Test\n\n@testset begin\n\
    \ncandidate = digitSum;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\"\
    ) == 131)\n\t@test(candidate(\"abcCd\") == 67)\n\t@test(candidate(\"helloE\")\
    \ == 69)\n\t@test(candidate(\"woArBld\") == 131)\n\t@test(candidate(\"aAaaaXa\"\
    ) == 153)\n\t@test(candidate(\" How are yOu?\") == 151)\n\t@test(candidate(\"\
    You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: let variables should end in \";\" or newline\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmpdkyhwfjd.jl:23\nin expression\
    \ starting at /tmp/tmpdkyhwfjd.jl:23\n"
  stdout: ''
  timestamp: 1659978995
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n\"\"\"\n    Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n    ASCII codes.\n    \n    Arguments:\n\
    \        s - a string input\n    \n    Returns:\n        - the sum of the upper\
    \ characters only ASCII codes in the string s\n    Examples:\n        >>> digitSum(\"\
    \")\n        0\n        >>> digitSum(\"abAB\")\n        131\n        >>> digitSum(\"\
    abcCd\")\n        67\n        >>> digitSum(\"helloE\")\n        69\n        >>>\
    \ digitSum(\"woArBld\")\n        131\n        >>> digitSum(\"aAaaaXa\")\n    \
    \    153\n    \"\"\"\n</cell>\n<cell>\n\"\"\"Task\n    Write a function that takes\
    \ a string as input and returns the sum of the number of lower\n    characters\
    \ only'\n    ASCII codes.\nusing Test\n\n@testset begin\n\ncandidate = digitSum;\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"\
    abcCd\") == 67)\n\t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\"\
    ) == 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are\
    \ yOu?\") == 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpidtlt5dc.jl:43\nin expression starting at\
    \ /tmp/tmpidtlt5dc.jl:43\n"
  stdout: ''
  timestamp: 1659978995
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    if s == \"\" then 0 else sum(filter(isUpper, s)) + digitSum(tail(s))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"abcCd\") ==\
    \ 67)\n\t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\") ==\
    \ 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are yOu?\"\
    ) == 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"0\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpa_tc9_9p.jl:20\nin expression starting at /tmp/tmpa_tc9_9p.jl:20\n"
  stdout: ''
  timestamp: 1659978995
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n\tsum = 0\n\tfor ch in s:\n\t\tif ('a'<=ch<='z') or (('A'<=ch<='Z') or (ch=='0')):\n\
    \t\t\tsum+=ord(ch)-ord('a')\n\treturn sum\nusing Test\n\n@testset begin\n\ncandidate\
    \ = digitSum;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\
    \t@test(candidate(\"abcCd\") == 67)\n\t@test(candidate(\"helloE\") == 69)\n\t\
    @test(candidate(\"woArBld\") == 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\
    \t@test(candidate(\" How are yOu?\") == 151)\n\t@test(candidate(\"You arE Very\
    \ Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpv33fyxty.jl:22\nin expression starting at\
    \ /tmp/tmpv33fyxty.jl:22\n"
  stdout: ''
  timestamp: 1659978995
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    | s.length < 1 = 0\n    | otherwise = if (s.head `elem` digits) \n   \
    \                 then digitSum(tail(s))\n                    else digitSum(tail(s))\n\
    \                + digit(head `elem` s) \n                * (head - digit(head\
    \ `elem` s))\n                * digit(tail(s))\n</code>\nThis solution does not\
    \ handle empty strings as well. I would like to find a solution without using\
    \ recursion if possible.\n<|/ q tags=recursion,string,haskell,tail-recursion |>\n\
    <| c |>\nIt is not clear to me what you are actually asking for.  You seem to\
    \ be asking how to solve the problem \"Write a function that takes a string as\
    \ input and returns the sum of the upper characters only\" which is straightforward.\
    \  It appears you also want to handle \"helloE\" and \"woArBld\" as well.  That\
    \ is also straightforward.  The first step to solving this problem is to find\
    \ a set of rules you can break to solve the problem.  If you break down each character\
    \ into its numeric value or vice versa, you will be able to write these rules\
    \ more easily.\n<|/ c |>\n<| c |>\nIt appears that your example has some errors.\
    \ Why does `digitSum(\"abcCd\")` return 67 and not 100? According to your logic,\
    \ `d` would be added twice, which would make it 100. Shouldn't it be `100 + 0*2\
    \ + 0*2 + 2*1 + 0*2 + 1*1 + 1*3 = 67`?\n<|/ c |>\n<| c |>\nIt should be added\
    \ twice. My example was a stupid one. Sorry about that. It should be `100 + 0\
    \ + 0 + 0 + 2 + 0 + 1 + 1 + 3 = 67`\n<|/ c |>\n<| c |>\nI don't think there is\
    \ an easy way to do this without recursion.\n<|/ c |>\n<| c |>\nThis was an exercise\
    \ that I did in my first programming class. It was my first time programming with\
    \ strings. I didn't know that you can perform arithmetic operations on characters.\
    \ I thought the characters were converted to a number using ASCII values. My teacher\
    \ said that it was only possible to sum numbers in Haskell. I didn't know that\
    \ Haskell was able to sum characters as well. Thank you for bringing this up!\
    \ I will post an update with my solution shortly.\n<|/ c |>\n<| a |>\nI suggest\
    \ you use list comprehensions to help you out. Since you can only use recursion,\
    \ I think it would be a good exercise for you to write code with recursion. One\
    \ of the key things you will notice \nusing Test\n\n@testset begin\n\ncandidate\
    \ = digitSum;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\
    \t@test(candidate(\"abcCd\") == 67)\n\t@test(candidate(\"helloE\") == 69)\n\t\
    @test(candidate(\"woArBld\") == 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\
    \t@test(candidate(\" How are yOu?\") == 151)\n\t@test(candidate(\"You arE Very\
    \ Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"|\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpiwx0xquf.jl:20\nin expression starting at\
    \ /tmp/tmpiwx0xquf.jl:20\n"
  stdout: ''
  timestamp: 1659978995
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    if s.length == 0 \n        0\n    else\n        digitSum(s.[1]) + digitSum(s.[3:length(s)-1])\n\
    \    end\nend\n</cell>\n<code language=julia-1.4>\n\"\"\"Task\n    Write a function\
    \ that takes a string as input and returns the sum of the number\n    of occurrences\
    \ of each character in the string\n    ASCII codes.\nusing Test\n\n@testset begin\n\
    \ncandidate = digitSum;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\"\
    ) == 131)\n\t@test(candidate(\"abcCd\") == 67)\n\t@test(candidate(\"helloE\")\
    \ == 69)\n\t@test(candidate(\"woArBld\") == 131)\n\t@test(candidate(\"aAaaaXa\"\
    ) == 153)\n\t@test(candidate(\" How are yOu?\") == 151)\n\t@test(candidate(\"\
    You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid syntax \"s.[1]\" around /tmp/tmpxij0daol.jl:23\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmpxij0daol.jl:1\nin expression starting\
    \ at /tmp/tmpxij0daol.jl:1\n"
  stdout: ''
  timestamp: 1659978995
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum=0\n    for (i,j) in strToInt(s):\n        sum+=j\n        if sum>122:\n\
    \            sum=0\n    return sum\nusing Test\n\n@testset begin\n\ncandidate\
    \ = digitSum;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\
    \t@test(candidate(\"abcCd\") == 67)\n\t@test(candidate(\"helloE\") == 69)\n\t\
    @test(candidate(\"woArBld\") == 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\
    \t@test(candidate(\" How are yOu?\") == 151)\n\t@test(candidate(\"You arE Very\
    \ Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpan2xy30c.jl:22\nin expression starting at\
    \ /tmp/tmpan2xy30c.jl:22\n"
  stdout: ''
  timestamp: 1659978996
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n|(\n    # Base case\n    s == \"\\\"\\\"\\\"\"\n|\n    # Recursive case\n\
    \    not isLetter(s)\n|\n    # Base case\n    not isDigit(s)\n)\n</code>\n<|/\
    \ a dscore=2 |>\n<| a tags=haskell |>\nAs I said in a comment on one of the answers,\
    \ I think your problem could be solved simply by counting the number of upper-case\
    \ letters in the string. This can be done with a simple regex like [A-Z]. \nTo\
    \ count the number of upper-case letters in a string, you can use the function\
    \ length from Data.String (docs).\nNow, to count the number of upper-case letters\
    \ within a string, you can use any function from Data.List that can take a list\
    \ of characters and count the number of elements in that list that satisfy a certain\
    \ condition.\nSo, putting these things together, you can write the following function:\n\
    <code>\nupperCaseCount :: String -> Int\nupperCaseCount \"Hello\" =  (length [c\
    \ | c <- \"Hello\", c == 'A', c == 'B', c == 'C', c == 'D', c == 'E', c == 'F',\
    \ c == 'G', c == 'H', c == 'I', c == 'J', c == 'K', c == 'L', c == 'M', c == 'N',\
    \ c == 'O', c == 'P', c == 'Q', c == 'R', c == 'S', c == 'T', c == 'U', c == 'V',\
    \ c == 'W', c == 'X', c == 'Y', c == 'Z'])\n</code>\nThis should be pretty straightforward\
    \ now. \nIf you wanted to generalize it to also support upper case letters in\
    \ other languages, then you would need to create a function that takes a string\
    \ and returns how many times a certain character appears in the string. \nFor\
    \ example, in English language, the character that appears twice in a string is\
    \ called a \"consonant\". The following function would do the trick: \n<code>\n\
    consonantCount :: Char -> Int \nconsonantCount c =  (length [c | c <- \"hello\"\
    , c == 'a', c == 'b', c == 'c', c == 'd', c == 'e', c == 'f', c == 'g', c == 'h',\
    \ c == 'i', c == 'j', c == 'k', c == 'l', c == 'm', c == 'n', c == 'o', c == 'p',\
    \ c == 'q', c == 'r', c == 's', c == 't', c == 'u', c == 'v', c == 'w', c == 'x',\
    \ c == 'y', c == 'z'])\n</code>\n<|/ a dscore=2 |>\n<| a |>\nHere's a more functional\
    \ \nusing Test\n\n@testset begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"abcCd\") ==\
    \ 67)\n\t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\") ==\
    \ 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are yOu?\"\
    ) == 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfsumpk4e.jl:25\nin expression starting at\
    \ /tmp/tmpfsumpk4e.jl:25\n"
  stdout: ''
  timestamp: 1659978995
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = 0\n    for (i, el) \u2208 enumerate(s)\n        if isUpper(el)\n\
    \            sum += (ord('A') - ord(el))\n    return sum\n</code>\n<|/ a |>\n\
    <| a |>\nFor any character set, you can calculate the number of occurrences of\
    \ the character in the string. The number of uppercase letters would be the number\
    \ of occurrences of A - 65. \nThe code would look something like this:\n<code>\n\
    def upperCharCount(s)\n    sum = 0\n    for i in s\n        if ('A' <= i <= 'Z')\n\
    \            sum += 1\n    return sum\n</code>\n<|/ a tags=string,uppercase,ocaml,count\
    \ dscore=2 |>\n<| a dscore=2 |>\nFor this particular case, you may not need to\
    \ use external libraries. You can simply count the number of occurrences of each\
    \ character in the string. Here's an example:\n<code>\nlet count_char_in_string\
    \ string =\n  List.fold_left (+) 0 (List.filter (fun (_,c) -> c = 'a') string)\n\
    using Test\n\n@testset begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\"\
    ) == 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"abcCd\") ==\
    \ 67)\n\t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\") ==\
    \ 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are yOu?\"\
    ) == 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp38y_ylku.jl:25\nin expression starting at\
    \ /tmp/tmp38y_ylku.jl:25\n"
  stdout: ''
  timestamp: 1659978996
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    if length(s) != 0 \n        digitSum (tail(s))\n    else\n        0\n\
    \    end\nend\ndigitSum(\"\")\ndigitSum(\"abAB\")\ndigitSum(\"abcCd\")\ndigitSum(\"\
    helloE\")\ndigitSum(\"woArBld\")\ndigitSum(\"aAaaaXa\")\ndigitSum(\"aAaaaXaX\"\
    )\nusing Test\n\n@testset begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"abcCd\") ==\
    \ 67)\n\t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\") ==\
    \ 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are yOu?\"\
    ) == 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: space before \"(\" not allowed in \"digitSum\
    \ (\" at /tmp/tmp4twv4rg4.jl:21\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp4twv4rg4.jl:21\n\
    in expression starting at /tmp/tmp4twv4rg4.jl:21\n"
  stdout: ''
  timestamp: 1659978996
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    \"\"\"\n    Calculate the sum of digits from left to right in a string.\n\
    using Test\n\n@testset begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\"\
    ) == 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"abcCd\") ==\
    \ 67)\n\t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\") ==\
    \ 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are yOu?\"\
    ) == 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpa1g1qz70.jl:1\nin expression starting at /tmp/tmpa1g1qz70.jl:1\n"
  stdout: ''
  timestamp: 1659978997
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum_::Int64 = 0\n    for c in s:\n        if c.isUpper():\n          \
    \  sum_::Int64 += c\n    return sum_\nusing Test\n\n@testset begin\n\ncandidate\
    \ = digitSum;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\
    \t@test(candidate(\"abcCd\") == 67)\n\t@test(candidate(\"helloE\") == 69)\n\t\
    @test(candidate(\"woArBld\") == 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\
    \t@test(candidate(\" How are yOu?\") == 151)\n\t@test(candidate(\"You arE Very\
    \ Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpud_xmqdc.jl:22\nin expression starting at\
    \ /tmp/tmpud_xmqdc.jl:22\n"
  stdout: ''
  timestamp: 1659978997
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum = 0\n    for c in s\n        if c >= '0' and c <= '9'\n          \
    \  sum += c - '0'\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-0.6>\n\
    digitSum(\"\")\n</cell>\n<code language=julia-0.6>\ndigitSum(\"abAB\")\n</cell>\n\
    <code language=julia-0.6>\ndigitSum(\"abcCd\")\n</cell>\n<code language=julia-0.6>\n\
    digitSum(\"helloE\")\n</cell>\n<code language=julia-0.6>\ndigitSum(\"woArBld\"\
    )\n</cell>\n<code language=julia-0.6>\ndigitSum(\"aAaaaXa\")\n</cell>\n<text>\n\
    Write a function to compute the fractional part of a floating point number\nusing\
    \ Test\n\n@testset begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\") ==\
    \ 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"abcCd\") == 67)\n\
    \t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\") == 131)\n\
    \t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are yOu?\") ==\
    \ 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"c\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp6yo6s229.jl:22\nin expression starting at /tmp/tmp6yo6s229.jl:22\n"
  stdout: ''
  timestamp: 1659978997
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    let s = reverse(s)\n    let mutable total = 0\n    for c in s\n      \
    \  if isUpper(c)\n            total = total + c - 'A' + 1\n            total\n\
    \        else total\n    return total\nusing Test\n\n@testset begin\n\ncandidate\
    \ = digitSum;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\
    \t@test(candidate(\"abcCd\") == 67)\n\t@test(candidate(\"helloE\") == 69)\n\t\
    @test(candidate(\"woArBld\") == 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\
    \t@test(candidate(\" How are yOu?\") == 151)\n\t@test(candidate(\"You arE Very\
    \ Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: let variables should end in \";\" or newline\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmpyvi73api.jl:21\nin expression\
    \ starting at /tmp/tmpyvi73api.jl:21\n"
  stdout: ''
  timestamp: 1659978997
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    \"\"\"\n    Assume input is ASCII.\n    \"\"\"\n    return sum(map(charToUpcase,\
    \ s)) + sum(map(charToLowcase, s)) - 65\nend\nusing Test\n\n@testset begin\n\n\
    candidate = digitSum;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\"\
    ) == 131)\n\t@test(candidate(\"abcCd\") == 67)\n\t@test(candidate(\"helloE\")\
    \ == 69)\n\t@test(candidate(\"woArBld\") == 131)\n\t@test(candidate(\"aAaaaXa\"\
    ) == 153)\n\t@test(candidate(\" How are yOu?\") == 151)\n\t@test(candidate(\"\
    You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpvtriuhi_.jl:27

    '
  stdout: "test set: Error During Test at /tmp/tmpvtriuhi_.jl:30\n  Test threw exception\n\
    \  Expression: candidate(\"\") == 0\n  UndefVarError: charToUpcase not defined\n\
    \  Stacktrace:\n   [1] digitSum(s::String)\n     @ Main /tmp/tmpvtriuhi_.jl:23\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpvtriuhi_.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvtriuhi_.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpvtriuhi_.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(\"abAB\") == 131\n  UndefVarError: charToUpcase not defined\n  Stacktrace:\n\
    \   [1] digitSum(s::String)\n     @ Main /tmp/tmpvtriuhi_.jl:23\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpvtriuhi_.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvtriuhi_.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpvtriuhi_.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(\"abcCd\") == 67\n  UndefVarError: charToUpcase not defined\n  Stacktrace:\n\
    \   [1] digitSum(s::String)\n     @ Main /tmp/tmpvtriuhi_.jl:23\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpvtriuhi_.jl:32 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvtriuhi_.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpvtriuhi_.jl:33\n  Test threw exception\n  Expression:\
    \ candidate(\"helloE\") == 69\n  UndefVarError: charToUpcase not defined\n  Stacktrace:\n\
    \   [1] digitSum(s::String)\n     @ Main /tmp/tmpvtriuhi_.jl:23\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] mac"
  timestamp: 1659978999
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    return sum(Int64(x::Int64) for x in string.ascii_uppercase if x == x)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"abcCd\") ==\
    \ 67)\n\t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\") ==\
    \ 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are yOu?\"\
    ) == 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmprnurkv9h.jl:24

    '
  stdout: "test set: Error During Test at /tmp/tmprnurkv9h.jl:27\n  Test threw exception\n\
    \  Expression: candidate(\"\") == 0\n  type #string has no field ascii_uppercase\n\
    \  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] digitSum(s::String)\n\
    \     @ Main /tmp/tmprnurkv9h.jl:20\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmprnurkv9h.jl:27 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmprnurkv9h.jl:26\ntest set:\
    \ Error During Test at /tmp/tmprnurkv9h.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"abAB\") == 131\n  type #string has no field ascii_uppercase\n  Stacktrace:\n\
    \   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] digitSum(s::String)\n\
    \     @ Main /tmp/tmprnurkv9h.jl:20\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmprnurkv9h.jl:28 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmprnurkv9h.jl:26\ntest set:\
    \ Error During Test at /tmp/tmprnurkv9h.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"abcCd\") == 67\n  type #string has no field ascii_uppercase\n  Stacktrace:\n\
    \   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] digitSum(s::String)\n\
    \     @ Main /tmp/tmprnurkv9h.jl:20\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmprnurkv9h.jl:29 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmprnurkv9h.jl:26\ntest set:\
    \ Error During Test at /tmp/tmprnurkv9h.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(\"helloE\") == 69\n  type #string has no field ascii_uppercase\n \
    \ Stacktrace:\n   [1] getproperty\n     @"
  timestamp: 1659978999
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    | 0 == length(s) && 0 == digitSum(\"\") = 0\n    | 0 <= length(s) && 0\
    \ < length(s) && length(s)==length(s) && 0 <= digitSum(substring(s, 0, 1)) &&\
    \ 0 <= digitSum(substring(s, 0, 2)) && 0 <= digitSum(substring(s, 0, 3)) && 0\
    \ <= digitSum(substring(s, 0, 4)) && 0 <= digitSum(substring(s, 0, 5)) && 0 <=\
    \ digitSum(substring(s, 0, 6)) && 0 <= digitSum(substring(s, 0, 7)) && 0 <= digitSum(substring(s,\
    \ 0, 8)) && 0 <= digitSum(substring(s, 0, 9)) && 0 <= digitSum(substring(s, 0,\
    \ 10)) && 0 <= digitSum(substring(s, 0, 11)) && 0 <= digitSum(substring(s, 0,\
    \ 12)) && 0 <= digitSum(substring(s, 0, 13)) && 0 <= digitSum(substring(s, 0,\
    \ 14)) && 0 <= digitSum(substring(s, 0, 15)) && 0 <= digitSum(substring(s, 0,\
    \ 16)) && 0 <= digitSum(substring(s, 0, 17)) && 0 <= digitSum(substring(s, 0,\
    \ 18)) && 0 <= digitSum(substring(s, 0, 19)) && 0 <= digitSum(substring(s, 0,\
    \ 20)) && 0 <= digitSum(substring(s, 0, 21)) \n    = digitSum(substring(s, 0,\
    \ length(s))) + digitSum(substring(s, length(s), length(s))) \nusing Test\n\n\
    @testset begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    abAB\") == 131)\n\t@test(candidate(\"abcCd\") == 67)\n\t@test(candidate(\"helloE\"\
    ) == 69)\n\t@test(candidate(\"woArBld\") == 131)\n\t@test(candidate(\"aAaaaXa\"\
    ) == 153)\n\t@test(candidate(\" How are yOu?\") == 151)\n\t@test(candidate(\"\
    You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"|\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6ik25vbl.jl:20\nin expression starting at\
    \ /tmp/tmp6ik25vbl.jl:20\n"
  stdout: ''
  timestamp: 1659978997
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    |result|\n    result = if let chars = s.ToCharArray() \n        then let\
    \ result = 0\n            for char in chars \n                then result = result\
    \ + char.ToInt64()\n            in result \n        else 0\n    | result\n</code>\n\
    <|/ a tags=haskell,string |>\n<| c |>\nThis is a nice solution, but it's worth\
    \ noting that `if let` doesn't have to be used - `let result = sum . map toUpper\
    \ $ chars` is equivalent and probably a little more readable.\n<|/ c |>\n<| c\
    \ |>\n: Thanks for the advice. I also changed `if let` to `map`.\n<|/ c |>\n<|\
    \ a |>\nA bit late to the party, but I like Data.List.foldl:\n<code>\nimport Data.List\n\
    using Test\n\n@testset begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\"\
    ) == 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"abcCd\") ==\
    \ 67)\n\t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\") ==\
    \ 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are yOu?\"\
    ) == 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"|\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpddpq2wto.jl:20\nin expression starting at\
    \ /tmp/tmpddpq2wto.jl:20\n"
  stdout: ''
  timestamp: 1659978997
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = 0\n    for ch in s:\n        if isUpper ch\n            sum\
    \ := sum + ch.code()\n    return sum\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = digitSum;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\
    \t@test(candidate(\"abcCd\") == 67)\n\t@test(candidate(\"helloE\") == 69)\n\t\
    @test(candidate(\"woArBld\") == 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\
    \t@test(candidate(\" How are yOu?\") == 151)\n\t@test(candidate(\"You arE Very\
    \ Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnfbny5_u.jl:22\nin expression starting at\
    \ /tmp/tmpnfbny5_u.jl:22\n"
  stdout: ''
  timestamp: 1659978997
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the ASCII codes.\nusing Test\n\n@testset begin\n\ncandidate = digitSum;\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"\
    abcCd\") == 67)\n\t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\"\
    ) == 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are\
    \ yOu?\") == 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_yae6agv.jl:1\nin expression starting at /tmp/tmp_yae6agv.jl:1\n"
  stdout: ''
  timestamp: 1659978997
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    if s == \"\"\n        0\n    else\n        sum(digit(toupper(x)) for x\
    \ in s)\nend\n</cell>\n<code language=julia-1.3>\ndigitSum(\"\")\n</cell>\n<text>\n\
    Exercise 3\nThe function below returns the first argument multiplied by three,\
    \ followed by the string \"five\".\nusing Test\n\n@testset begin\n\ncandidate\
    \ = digitSum;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\
    \t@test(candidate(\"abcCd\") == 67)\n\t@test(candidate(\"helloE\") == 69)\n\t\
    @test(candidate(\"woArBld\") == 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\
    \t@test(candidate(\" How are yOu?\") == 151)\n\t@test(candidate(\"You arE Very\
    \ Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpktf_e1dh.jl:25\nin expression starting at\
    \ /tmp/tmpktf_e1dh.jl:25\n"
  stdout: ''
  timestamp: 1659978997
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    if length(s)==0\n        0\n    else \n        charToInt(s) |> sum\nend\n\
    using Test\n\n@testset begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\"\
    ) == 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"abcCd\") ==\
    \ 67)\n\t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\") ==\
    \ 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are yOu?\"\
    ) == 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpnhd4_y3t.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpnhd4_y3t.jl:1\n\
    in expression starting at /tmp/tmpnhd4_y3t.jl:1\n"
  stdout: ''
  timestamp: 1659978997
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n|=\n    for c in s\n    |=\n        if c in ['A'..'Z']\n    |=\n         \
    \   digit := c - 'A' + 1\n            if digit > 10\n        |=\n            digit\n\
    \    |=\n    endfor\n|=\nendfunction\n</cell>\n<code language=julia-1.5>\ndigitSum(\"\
    aAaaaXa\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"aBbbbXa\")\n</cell>\n\
    <code language=julia-1.5>\ndigitSum(\"aBbbbXa\")\n</cell>\n<text>\nExercise 10\n\
    Write a function that will return a string consisting of the sum of the digits\
    \ of the number passed as parameter. Example :\nusing Test\n\n@testset begin\n\
    \ncandidate = digitSum;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\"\
    ) == 131)\n\t@test(candidate(\"abcCd\") == 67)\n\t@test(candidate(\"helloE\")\
    \ == 69)\n\t@test(candidate(\"woArBld\") == 131)\n\t@test(candidate(\"aAaaaXa\"\
    ) == 153)\n\t@test(candidate(\" How are yOu?\") == 151)\n\t@test(candidate(\"\
    You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid identifier name \"|=\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0eir1elm.jl:20\nin expression starting at\
    \ /tmp/tmp0eir1elm.jl:20\n"
  stdout: ''
  timestamp: 1659978997
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    return sum(charToInt(x) for x::String in map(x::Char, s))\nusing Test\n\
    \n@testset begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    abAB\") == 131)\n\t@test(candidate(\"abcCd\") == 67)\n\t@test(candidate(\"helloE\"\
    ) == 69)\n\t@test(candidate(\"woArBld\") == 131)\n\t@test(candidate(\"aAaaaXa\"\
    ) == 153)\n\t@test(candidate(\" How are yOu?\") == 151)\n\t@test(candidate(\"\
    You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpqaf0pf64.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpqaf0pf64.jl:1\n\
    in expression starting at /tmp/tmpqaf0pf64.jl:1\n"
  stdout: ''
  timestamp: 1659978997
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    for i in (s.toList()):\n        if i>=65&&i<90 || i>=97&&i<122\n     \
    \       digit = i #(s.toList())\n        end\n    digit\nend\n</cell>\n<code language=julia-1.0>\n\
    digitSum(\"helloE\")\n</cell>\n<code language=julia-1.0>\ndigitSum(\"woArBld\"\
    )\n</cell>\n<text>\nWrite a function that takes a string as input and returns\
    \ the number of digits in the string s\n    ASCII codes.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    abAB\") == 131)\n\t@test(candidate(\"abcCd\") == 67)\n\t@test(candidate(\"helloE\"\
    ) == 69)\n\t@test(candidate(\"woArBld\") == 131)\n\t@test(candidate(\"aAaaaXa\"\
    ) == 153)\n\t@test(candidate(\" How are yOu?\") == 151)\n\t@test(candidate(\"\
    You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6ocgu6sc.jl:21\nin expression starting at\
    \ /tmp/tmp6ocgu6sc.jl:21\n"
  stdout: ''
  timestamp: 1659978997
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    \"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the lower characters only'\n    ASCII codes.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    abAB\") == 131)\n\t@test(candidate(\"abcCd\") == 67)\n\t@test(candidate(\"helloE\"\
    ) == 69)\n\t@test(candidate(\"woArBld\") == 131)\n\t@test(candidate(\"aAaaaXa\"\
    ) == 153)\n\t@test(candidate(\" How are yOu?\") == 151)\n\t@test(candidate(\"\
    You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2u2jo2b8.jl:1\nin expression starting at /tmp/tmp2u2jo2b8.jl:1\n"
  stdout: ''
  timestamp: 1659978997
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    | length(s) = 0\n    | digitSum(sub(\"^[A-Z]\", \"\", s)) = digitSum(sub(\"\
    [A-Z]\", \"\", s)) + 1\n    | digitSum(sub(\"^[A-Za-z]\", \"\", s)) = digitSum(sub(\"\
    [A-Za-z]\", \"\", s)) + 1\n    | digitSum(sub(\"^[^A-Za-z]\", \"\", s)) = digitSum(sub(\"\
    [^A-Za-z]\", \"\", s)) + 1\n    | otherwise = digitSum(sub(\"[A-Za-z0-9]\", \"\
    \", s)) + digitSum(sub(\"[^A-Za-z0-9]\", \"\", s)) + length(s)\nend\ndigitSum(s)\n\
    </cell>\n<text>\nTask 6: Write a function that takes a string as input and returns\
    \ the sum of the ASCII codes of all characters, excluding digits.\nusing Test\n\
    \n@testset begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    abAB\") == 131)\n\t@test(candidate(\"abcCd\") == 67)\n\t@test(candidate(\"helloE\"\
    ) == 69)\n\t@test(candidate(\"woArBld\") == 131)\n\t@test(candidate(\"aAaaaXa\"\
    ) == 153)\n\t@test(candidate(\" How are yOu?\") == 151)\n\t@test(candidate(\"\
    You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"|\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpx15zx1ma.jl:20\nin expression starting at\
    \ /tmp/tmpx15zx1ma.jl:20\n"
  stdout: ''
  timestamp: 1659978997
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    digits_sum = digitSum(s)\n    return sum((digits_sum - ord(x)) for x in\
    \ s)\nusing Test\n\n@testset begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"abcCd\") ==\
    \ 67)\n\t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\") ==\
    \ 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are yOu?\"\
    ) == 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpw5raboux.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpw5raboux.jl:1\n\
    in expression starting at /tmp/tmpw5raboux.jl:1\n"
  stdout: ''
  timestamp: 1659978997
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    local result =0 \n    for c in s do \n        result = result + ord(c)\
    \ \n    end \n    return result\nend \n</code>\n<|/ a tags=ocaml,ocamlbuild,ocamlfind\
    \ dscore=0 |>\n<| a tags=ocaml,ocamlbuild,ocamlfind |>\n<code>\n$ cat test.ml\n\
    let digitSum str = String.length str + String.length (str |> String.upper)\n$\
    \ ocamlbuild -use-ocamlfind -pkgs base test.byte\n+ ocamlfind ocamldep -package\
    \ base,byte\n$ ocamlc test.ml\n$ ./a.out\n25\n</code>\n<|/ a dscore=0 |>\n<| a\
    \ tags=ocaml,ocamlbuild,ocamlfind dscore=0 |>\nI suggest you use a library for\
    \ this, and not write your own. Here's a version that uses the regex library that\
    \ comes with OCaml:\n<code>\n# #load \"regex\";;\n# open Regex ();;\n# let digitSum\
    \ str =\n  let digits = Regex (Str.regexp \"\\d\") in\n  String.length (String.sub\
    \ str 0 (String.length digits - 1)) +\n  String.length (String.sub str (String.length\
    \ digits) (String.length str))\n</code>\n<|/ a |>\n<| c |>\nI added a non-regex\
    \ version for you as well. :)\n<|/ c |>\n<| a tags=ocaml,ocamlbuild,ocamlfind\
    \ |>\nI find this solution a bit more elegant:\n<code>\nlet digitSum x = \n  let\
    \ rec aux accum x = \n    match x with \n    | [] -> acc \n    | h::t -> (aux\
    \ (h + accum) t) \n  in\n  let acc = 0 in \n  aux acc [||]\n</code>\n<|/ a dscore=0\
    \ |>\n<| a tags=ocaml,ocamlbuild,ocamlfind |>\n<code>\nlet digitSum str = \n \
    \ let rec aux accum x = \n    match x with \n    | [] -> acc \n    | h::t -> (aux\
    \ (h + accum) t) \n  in\n  String.length (String.sub str (String.length str) 1)\
    \ +\n  String.length (String.sub str (String.length str) 0 (String.length str))\n\
    </code>\n<|/ a dscore=0 |>\n<| c |>\nCould you add an explanation to your answer\n\
    using Test\n\n@testset begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\"\
    ) == 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"abcCd\") ==\
    \ 67)\n\t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\") ==\
    \ 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are yOu?\"\
    ) == 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid \"do\" syntax\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpyebor8x6.jl:21\nin expression starting at /tmp/tmpyebor8x6.jl:21\n"
  stdout: ''
  timestamp: 1659978997
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    \"\"\"Find the sum of the ASCII codes of non-alphabet characters\n   \
    \ in a string.\n    \"\"\"\n    return s.filter(!isAlpha).reduce(|+) \nend\n</cell>\n\
    <code language=julia-0.6>\ndigitSum(\"abcCd\")\n</cell>\n<code language=julia-0.6>\n\
    digitSum(\"helloE\")\n</cell>\n<code language=julia-0.6>\ndigitSum(\"woArBld\"\
    )\n</cell>\n<code language=julia-0.6>\ndigitSum(\"aAaaaXa\")\n</cell>\n<text>\n\
    Exercises\nWrite a function that takes a string as input and returns the number\
    \ of non-alphabet characters in the string.\nusing Test\n\n@testset begin\n\n\
    candidate = digitSum;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\"\
    ) == 131)\n\t@test(candidate(\"abcCd\") == 67)\n\t@test(candidate(\"helloE\")\
    \ == 69)\n\t@test(candidate(\"woArBld\") == 131)\n\t@test(candidate(\"aAaaaXa\"\
    ) == 153)\n\t@test(candidate(\" How are yOu?\") == 151)\n\t@test(candidate(\"\
    You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"|\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3654k0al.jl:23\nin expression starting at\
    \ /tmp/tmp3654k0al.jl:23\n"
  stdout: ''
  timestamp: 1659978997
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    result <- 0\n    i <- 0\n    while (i < length(s))\n        result <-\
    \ result + (ord s[i] - (ord 'A') + 1)\n        i <- i + 1\n    result\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\") ==\
    \ 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"abcCd\") == 67)\n\
    \t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\") == 131)\n\
    \t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are yOu?\") ==\
    \ 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkn_qyiip.jl:23\nin expression starting at\
    \ /tmp/tmpkn_qyiip.jl:23\n"
  stdout: ''
  timestamp: 1659978997
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum=0\n    \n    for c in s:\n        sum = sum + math.pow(c, len(s) -\
    \ 1)\n    return sum\nusing Test\n\n@testset begin\n\ncandidate = digitSum;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"\
    abcCd\") == 67)\n\t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\"\
    ) == 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are\
    \ yOu?\") == 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbab6_yg5.jl:23\nin expression starting at\
    \ /tmp/tmpbab6_yg5.jl:23\n"
  stdout: ''
  timestamp: 1659978997
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    if s == \"\" then 0 else sum(a::Int for a in s.iter().filter(fun(a::Char)\
    \ in ['A'..'Z'] or a == \"a\"))\nend\n\"\"\"\nTask\n    Write a function that\
    \ takes a string as input and returns the sum of the lower characters only'\n\
    \    ASCII codes.\nusing Test\n\n@testset begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"abcCd\") ==\
    \ 67)\n\t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\") ==\
    \ 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are yOu?\"\
    ) == 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"0\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp9g20dhfd.jl:20\nin expression starting at /tmp/tmp9g20dhfd.jl:20\n"
  stdout: ''
  timestamp: 1659978998
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    digitSum = 0\n    for c in s\n        if c in ['A'..'Z']\n           \
    \ digitSum = digitSum + Int64.(String(c) - \"A\")\n        else\n            digitSum\
    \ = digitSum + Int64.(String(c))\n    return digitSum\nend\n</cell>\n<code language=julia-1.3>\n\
    digitSum(\"\")\n</cell>\n<code language=julia-1.3>\ndigitSum(\"abAB\")\n</cell>\n\
    <code language=julia-1.3>\ndigitSum(\"abcCd\")\n</cell>\n<code language=julia-1.3>\n\
    digitSum(\"helloE\")\n</cell>\n<code language=julia-1.3>\ndigitSum(\"woArBld\"\
    )\n</cell>\n<code language=julia-1.3>\ndigitSum(\"aAaaaXa\")\n</cell>\n<text>\n\
    Exercises\nusing Test\n\n@testset begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"abcCd\") ==\
    \ 67)\n\t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\") ==\
    \ 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are yOu?\"\
    ) == 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppbngf9fb.jl:28\nin expression starting at\
    \ /tmp/tmppbngf9fb.jl:28\n"
  stdout: ''
  timestamp: 1659978999
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    digitSum = sum( [digitUpper(c)for c in s] )\n    digitSum\nend\n</cell>\n\
    <code language=julia-1.3>\ndigitSum(\"helloE\")\n</cell>\n<text>\n9. Write a function\
    \ that counts how many times one element occurs in another given vector.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\") ==\
    \ 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"abcCd\") == 67)\n\
    \t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\") == 131)\n\
    \t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are yOu?\") ==\
    \ 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: expected space before \"for\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6rc55d08.jl:20\nin expression starting at\
    \ /tmp/tmp6rc55d08.jl:20\n"
  stdout: ''
  timestamp: 1659978999
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = 0\n    for c in s do\n        sum += Int(c)\n    end\n  \
    \  return sum\nend\n</cell>\n<code language=julia-0.4>\ndigitSum(\"\")\n</cell>\n\
    <code language=julia-0.4>\ndigitSum(\"abAB\")\n</cell>\n<code language=julia-0.4>\n\
    digitSum(\"abcCd\")\n</cell>\n<code language=julia-0.4>\ndigitSum(\"helloE\")\n\
    </cell>\n<code language=julia-0.4>\ndigitSum(\"woArBld\")\n</cell>\n<code language=julia-0.4>\n\
    digitSum(\"aAaaaXa\")\n</cell>\n<text>\nTask 3\nWrite a function that takes a\
    \ string as input and returns the number of digits in it\nusing Test\n\n@testset\
    \ begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    abAB\") == 131)\n\t@test(candidate(\"abcCd\") == 67)\n\t@test(candidate(\"helloE\"\
    ) == 69)\n\t@test(candidate(\"woArBld\") == 131)\n\t@test(candidate(\"aAaaaXa\"\
    ) == 153)\n\t@test(candidate(\" How are yOu?\") == 151)\n\t@test(candidate(\"\
    You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid \"do\" syntax\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpoet4yzb6.jl:21\nin expression starting at /tmp/tmpoet4yzb6.jl:21\n"
  stdout: ''
  timestamp: 1659978999
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    digits:Set[Int64] = Set()\n    for c in s do \n        if isDigit(c) then\
    \ digits += cToInt64(c)\n        end\n    end\n    digits.reduce(_+_)\nend\n</cell>\n\
    <code language=julia-1.4>\ndigitSum(\"\")\n</cell>\n<code language=julia-1.4>\n\
    digitSum(\"abAB\")\n</cell>\n<code language=julia-1.4>\ndigitSum(\"abcCd\")\n\
    </cell>\n<code language=julia-1.4>\ndigitSum(\"helloE\")\n</cell>\n<code language=julia-1.4>\n\
    digitSum(\"woArBld\")\n</cell>\n<code language=julia-1.4>\ndigitSum(\"aAaaaXa\"\
    )\n</cell>\n<text>\n1.3 Exercise\nusing Test\n\n@testset begin\n\ncandidate =\
    \ digitSum;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\
    \t@test(candidate(\"abcCd\") == 67)\n\t@test(candidate(\"helloE\") == 69)\n\t\
    @test(candidate(\"woArBld\") == 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\
    \t@test(candidate(\" How are yOu?\") == 151)\n\t@test(candidate(\"You arE Very\
    \ Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid \"do\" syntax\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpiorgrn7h.jl:21\nin expression starting at /tmp/tmpiorgrn7h.jl:21\n"
  stdout: ''
  timestamp: 1659978999
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n  result = digitSumAcc(\"\")\n  for c in s do\n    result = digitSumAcc(c\
    \ + result)\n  end\n  return result\nend\n</code>\nThe function digitSumAcc can\
    \ be implemented with tail recursion also (but I would prefer that in this case).\n\
    <code>\nusing Test\n\n@testset begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"abcCd\") ==\
    \ 67)\n\t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\") ==\
    \ 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are yOu?\"\
    ) == 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid \"do\" syntax\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpu7u62fc0.jl:21\nin expression starting at /tmp/tmpu7u62fc0.jl:21\n"
  stdout: ''
  timestamp: 1659978999
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    # Initialize result to zero\n    result := 0\nusing Test\n\n@testset begin\n\
    \ncandidate = digitSum;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\"\
    ) == 131)\n\t@test(candidate(\"abcCd\") == 67)\n\t@test(candidate(\"helloE\")\
    \ == 69)\n\t@test(candidate(\"woArBld\") == 131)\n\t@test(candidate(\"aAaaaXa\"\
    ) == 153)\n\t@test(candidate(\" How are yOu?\") == 151)\n\t@test(candidate(\"\
    You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpu13q2ph3.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpu13q2ph3.jl:1\n\
    in expression starting at /tmp/tmpu13q2ph3.jl:1\n"
  stdout: ''
  timestamp: 1659978999
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum = Int64(0)\n    for c in s do\n        sum = sum + Int64(c)\n    end\n\
    \    return sum\nend\n</cell>\n<code language=julia-1.6>\n\"\"\"Task\n    Write\
    \ a function that takes a string as input and returns the sum of the numbers in\
    \ string'\n    ASCII codes.\nusing Test\n\n@testset begin\n\ncandidate = digitSum;\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"\
    abcCd\") == 67)\n\t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\"\
    ) == 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are\
    \ yOu?\") == 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid \"do\" syntax\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpobo3adbp.jl:21\nin expression starting at /tmp/tmpobo3adbp.jl:21\n"
  stdout: ''
  timestamp: 1659978999
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n</code>\n<|/ a tags=string,haskell,string |>\n<| a tags=string,haskell,string\
    \ |>\nJust one way to do it (maybe not the fastest):\n<code>\nimport Data.List\n\
    using Test\n\n@testset begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\"\
    ) == 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"abcCd\") ==\
    \ 67)\n\t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\") ==\
    \ 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are yOu?\"\
    ) == 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3fq13b46.jl:20\nin expression starting at\
    \ /tmp/tmp3fq13b46.jl:20\n"
  stdout: ''
  timestamp: 1659978999
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    abAB\") == 131)\n\t@test(candidate(\"abcCd\") == 67)\n\t@test(candidate(\"helloE\"\
    ) == 69)\n\t@test(candidate(\"woArBld\") == 131)\n\t@test(candidate(\"aAaaaXa\"\
    ) == 153)\n\t@test(candidate(\" How are yOu?\") == 151)\n\t@test(candidate(\"\
    You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7qwllyy5.jl:1\nin expression starting at /tmp/tmp7qwllyy5.jl:1\n"
  stdout: ''
  timestamp: 1659978999
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    if s == \"\" then 0 else if length(s)<=2 then 0 else if isUpperCase(s)\
    \ then digitSum(substring(s,0,2)) + digitSum(substring(s,2,length(s))) else digitSum(substring(s,0,1))\
    \ + digitSum(substring(s,1,length(s))) end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = digitSum;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\"\
    ) == 131)\n\t@test(candidate(\"abcCd\") == 67)\n\t@test(candidate(\"helloE\")\
    \ == 69)\n\t@test(candidate(\"woArBld\") == 131)\n\t@test(candidate(\"aAaaaXa\"\
    ) == 153)\n\t@test(candidate(\" How are yOu?\") == 151)\n\t@test(candidate(\"\
    You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"0\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpxgjavh51.jl:20\nin expression starting at /tmp/tmpxgjavh51.jl:20\n"
  stdout: ''
  timestamp: 1659978999
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n\"\"\"\n    Implement a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    abAB\") == 131)\n\t@test(candidate(\"abcCd\") == 67)\n\t@test(candidate(\"helloE\"\
    ) == 69)\n\t@test(candidate(\"woArBld\") == 131)\n\t@test(candidate(\"aAaaaXa\"\
    ) == 153)\n\t@test(candidate(\" How are yOu?\") == 151)\n\t@test(candidate(\"\
    You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpoj1awcit.jl:1\nin expression starting at /tmp/tmpoj1awcit.jl:1\n"
  stdout: ''
  timestamp: 1659978999
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    return sum(x::Int | x <- s, x >= 'A' && x <= 'Z') \nend\n</code>\n<|/\
    \ a dscore=4 |>\n<| a tags=string,julia,performance dscore=3 |>\nBased on the\
    \ answer by I did some performance test to compare the various options. \nThis\
    \ is for Julia 0.6.1\nHere are the results for 100 different runs:\nusing Test\n\
    \n@testset begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    abAB\") == 131)\n\t@test(candidate(\"abcCd\") == 67)\n\t@test(candidate(\"helloE\"\
    ) == 69)\n\t@test(candidate(\"woArBld\") == 131)\n\t@test(candidate(\"aAaaaXa\"\
    ) == 153)\n\t@test(candidate(\" How are yOu?\") == 151)\n\t@test(candidate(\"\
    You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpucwvpts_.jl:22\nin expression starting at\
    \ /tmp/tmpucwvpts_.jl:22\n"
  stdout: ''
  timestamp: 1659978999
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum := 0\n    for c in s\n        if c.isUpper()\n            sum := sum\
    \ + c.codePointAt(0)\n    return sum\n</code>\nAs a bonus, this approach only\
    \ requires one line of code to sum digits:\n<code>\ndigitSum(s:String) = sum([c.codePointAt(0)\
    \ for c in s if c.isUpper()])\n</code>\nThis approach is far more efficient than\
    \ using regular expressions (which require a full scan, even if the scan is short)\
    \ and is certainly easier to read.\n<|/ a tags=string,performance,haskell,algorithm\
    \ |>\n<| c |>\nI think this does not answer the question of \"what is wrong with\
    \ my solution?\" It just gives an alternative solution, which is nice, but doesn't\
    \ really answer the question. It also does not give an explanation of why this\
    \ approach is better than the OP's original solution, which is also an interesting\
    \ answer, but would require a lot of explanation in the comments to explain why\
    \ this approach is better. I think you might consider editing your answer to explain\
    \ why yours is a better solution than all the other answers so far.\n<|/ c |>\n\
    <| c |>\n, sorry if I was unclear - the solutions that involve scanning all the\
    \ characters in order to find the upper-case letters are certainly worse than\
    \ mine or this one, so I did not even bother to check whether any of these solutions\
    \ was \"wrong\" as such.  However, this approach is far more efficient than using\
    \ regular expressions (which require a full scan, even if the scan is short),\
    \ and is certainly easier to read.\n<|/ c |>\n<| c |>\nThe OP's code actually\
    \ does require a full scan for many of the upper-case letters such as \"A\", \"\
    Aa\", \"aa\", \"aA\", \"Aa\", etc. (I suspect that it is still only as fast as\
    \ your code, but I am not certain). I did some benchmarking, and the full scan\
    \ is the best solution.\n<|/ c |>\n<| c |>\n, my benchmarking code shows no appreciable\
    \ difference between the full scan and the solutions I have proposed.  However,\
    \ I did not include it because I am not sure that my benchmarking code represents\
    \ the full extent of what a reasonable benchmarking would look like.\n<|/ c |>\n\
    <| c |>\nWell, your code is clearly better, but you are correct that this does\
    \ not answer the question, since \"what is wrong with my solution?\" is a difficult\
    \ question to answer accurately.\n<|/ c |>\n<| a |>\nIn Haskell you can use foldr\
    \ to find the sum of a list.\n<code>\nfoldr (+) \nusing Test\n\n@testset begin\n\
    \ncandidate = digitSum;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\"\
    ) == 131)\n\t@test(candidate(\"abcCd\") == 67)\n\t@test(candidate(\"helloE\")\
    \ == 69)\n\t@test(candidate(\"woArBld\") == 131)\n\t@test(candidate(\"aAaaaXa\"\
    ) == 153)\n\t@test(candidate(\" How are yOu?\") == 151)\n\t@test(candidate(\"\
    You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnl3dn01f.jl:25\nin expression starting at\
    \ /tmp/tmpnl3dn01f.jl:25\n"
  stdout: ''
  timestamp: 1659978999
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = 0\n    for i in 0..length(s):\n        if i >= 2 and s[i]\
    \ == s[i-1] && s[i-1] == s[i-2]\n            sum += (s[i]+s[i-1]+s[i-2]-96)*3\n\
    \        else \n            sum += s[i]\n    return sum\nusing Test\n\n@testset\
    \ begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    abAB\") == 131)\n\t@test(candidate(\"abcCd\") == 67)\n\t@test(candidate(\"helloE\"\
    ) == 69)\n\t@test(candidate(\"woArBld\") == 131)\n\t@test(candidate(\"aAaaaXa\"\
    ) == 153)\n\t@test(candidate(\" How are yOu?\") == 151)\n\t@test(candidate(\"\
    You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: newline not allowed after \":\" used for quoting\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmp22h3vmnl.jl:22\nin expression\
    \ starting at /tmp/tmp22h3vmnl.jl:22\n"
  stdout: ''
  timestamp: 1659978999
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    result <- 0\n    for (i, c) in enumerate(s) do\n        if ('A' <= c &&\
    \ c <= 'Z') || (\"a\" <= c && c <= \"z\") then\n            result += c - 'A'\n\
    \        end\n    end\n    return result\nend\n</cell>\n<code language=julia-1.6>\n\
    digitSum(\"\")\n</cell>\n<code language=julia-1.6>\ndigitSum(\"abAB\")\n</cell>\n\
    <code language=julia-1.6>\ndigitSum(\"abcCd\")\n</cell>\n<code language=julia-1.6>\n\
    digitSum(\"helloE\")\n</cell>\n<code language=julia-1.6>\ndigitSum(\"woArBld\"\
    )\n</cell>\n<code language=julia-1.6>\ndigitSum(\"aAaaaXa\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string as input and returns the number\
    \ of '0' and '1'.\nusing Test\n\n@testset begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"abcCd\") ==\
    \ 67)\n\t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\") ==\
    \ 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are yOu?\"\
    ) == 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzcwgwz_d.jl:28\nin expression starting at\
    \ /tmp/tmpzcwgwz_d.jl:28\n"
  stdout: ''
  timestamp: 1659978999
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    if s == \"\"\n    then 0\n    else\n    let n = sum ([ord(c) | c <- s])\
    \ in\n    for c in [ord(c) | c <- s]\n        do if c > 'z'\n            then\
    \ n - 96\n            else n\n    end\nend\n</code>\n<|/ a |>\n<| a tags=julia\
    \ dscore=3 |>\nSince strings are sequences of characters, you can iterate them\
    \ without using enumerate.\n<code>\njulia> function digitSum(s::String)\n    \
    \       return sum(filter(x -> x != 'A' && x != 'Z', s))\n       end\ndigitSum\
    \ (generic function with 1 method)\nusing Test\n\n@testset begin\n\ncandidate\
    \ = digitSum;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\
    \t@test(candidate(\"abcCd\") == 67)\n\t@test(candidate(\"helloE\") == 69)\n\t\
    @test(candidate(\"woArBld\") == 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\
    \t@test(candidate(\" How are yOu?\") == 151)\n\t@test(candidate(\"You arE Very\
    \ Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"0\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpcxzodpxn.jl:21\nin expression starting at /tmp/tmpcxzodpxn.jl:21\n"
  stdout: ''
  timestamp: 1659978999
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum = 0\n    for char in s\n        if char in \"0123456789\"\n      \
    \      sum += char\n    return sum\n</cell>\n<code language=julia-1.4>\ndigitSum(\"\
    \")\n</cell>\n<code language=julia-1.4>\ndigitSum(\"abAB\")\n</cell>\n<code language=julia-1.4>\n\
    digitSum(\"abcCd\")\n</cell>\n<code language=julia-1.4>\ndigitSum(\"helloE\")\n\
    </cell>\n<code language=julia-1.4>\ndigitSum(\"woArBld\")\n</cell>\n<code language=julia-1.4>\n\
    digitSum(\"aAaaaXa\")\n</cell>\n<text>\nExercise 5\nWrite a function that takes\
    \ a string and returns the number of words it contains, including those containing\
    \ only spaces.\nusing Test\n\n@testset begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"abcCd\") ==\
    \ 67)\n\t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\") ==\
    \ 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are yOu?\"\
    ) == 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1483bfsz.jl:25\nin expression starting at\
    \ /tmp/tmp1483bfsz.jl:25\n"
  stdout: ''
  timestamp: 1659978999
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    return sum(ichar(s.[i]))\nend\n</cell>\n<text>\nExercise 3\nusing Test\n\
    \n@testset begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    abAB\") == 131)\n\t@test(candidate(\"abcCd\") == 67)\n\t@test(candidate(\"helloE\"\
    ) == 69)\n\t@test(candidate(\"woArBld\") == 131)\n\t@test(candidate(\"aAaaaXa\"\
    ) == 153)\n\t@test(candidate(\" How are yOu?\") == 151)\n\t@test(candidate(\"\
    You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid syntax \"s.[i]\" around /tmp/tmpl_z901ge.jl:20\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmpl_z901ge.jl:1\nin expression starting\
    \ at /tmp/tmpl_z901ge.jl:1\n"
  stdout: ''
  timestamp: 1659978999
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum <- 0\n    for s in String.Chars(s) do \n        if (s <= 'Z') && (s\
    \ >= 'A') then\n            sum +=  ord(s)-64\n        else\n            sum +=\
    \  0\n        end \n    end\n    return sum\nend\ndigitSum(\"\")\ndigitSum(\"\
    abAB\")\ndigitSum(\"abcCd\")\ndigitSum(\"helloE\")\ndigitSum(\"woArBld\")\ndigitSum(\"\
    aAaaaXa\")\n</cell>\n<code language=julia-0.6>\n\"\"\"Task\n    Write a function\
    \ that takes a string as input and returns the sum of the digits only'\n    ASCII\
    \ codes.\nusing Test\n\n@testset begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"abcCd\") ==\
    \ 67)\n\t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\") ==\
    \ 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are yOu?\"\
    ) == 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpv6ogv4o0.jl:36\nin expression starting at\
    \ /tmp/tmpv6ogv4o0.jl:36\n"
  stdout: ''
  timestamp: 1659978999
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n{\n    sum::Int64 = 0;\n    for char \u2208 s do\n        if char in \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    \ then\n            sum::Int64 += (char \u2212 \"a\" \u2212 1)\n        end\n\
    \    end\n    return sum\n}\n    \"\"\"\n    ))\nusing Test\n\n@testset begin\n\
    \ncandidate = digitSum;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\"\
    ) == 131)\n\t@test(candidate(\"abcCd\") == 67)\n\t@test(candidate(\"helloE\")\
    \ == 69)\n\t@test(candidate(\"woArBld\") == 131)\n\t@test(candidate(\"aAaaaXa\"\
    ) == 153)\n\t@test(candidate(\" How are yOu?\") == 151)\n\t@test(candidate(\"\
    You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: expected \"}\"\nStacktrace:\n [1] top-level scope\n\
    \   @ /tmp/tmpsccvll6j.jl:22\nin expression starting at /tmp/tmpsccvll6j.jl:22\n"
  stdout: ''
  timestamp: 1659978999
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    if s == \"\"\n        return 0 \n    \n    sum = 0 \n    for i in (0 ..\
    \ length(s)-1) \n        if (i >= 0 && i < length(s)) \n            if (s[i]>='a'\
    \ && s[i]<='z')\n                sum += ord(s[i])-64 \n            else \n   \
    \             sum += s[i]\n    return sum \nusing Test\n\n@testset begin\n\ncandidate\
    \ = digitSum;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\
    \t@test(candidate(\"abcCd\") == 67)\n\t@test(candidate(\"helloE\") == 69)\n\t\
    @test(candidate(\"woArBld\") == 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\
    \t@test(candidate(\" How are yOu?\") == 151)\n\t@test(candidate(\"You arE Very\
    \ Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"if\" at /tmp/tmpydvugzg4.jl:26\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpydvugzg4.jl:1\n\
    in expression starting at /tmp/tmpydvugzg4.jl:1\n"
  stdout: ''
  timestamp: 1659979000
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    if s.length == 0 \n        0 \n    else if s.length == 1 \n        Int(s[1..0])\
    \ \n    else \n        Int(s[1..0]) + digitSum(s[0..-2]) \nend \nusing Test\n\n\
    @testset begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    abAB\") == 131)\n\t@test(candidate(\"abcCd\") == 67)\n\t@test(candidate(\"helloE\"\
    ) == 69)\n\t@test(candidate(\"woArBld\") == 131)\n\t@test(candidate(\"aAaaaXa\"\
    ) == 153)\n\t@test(candidate(\" How are yOu?\") == 151)\n\t@test(candidate(\"\
    You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjr5r__9a.jl:22\nin expression starting at\
    \ /tmp/tmpjr5r__9a.jl:22\n"
  stdout: ''
  timestamp: 1659979000
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the digits only.'\n    ASCII codes.\nusing Test\n\n@testset begin\n\
    \ncandidate = digitSum;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\"\
    ) == 131)\n\t@test(candidate(\"abcCd\") == 67)\n\t@test(candidate(\"helloE\")\
    \ == 69)\n\t@test(candidate(\"woArBld\") == 131)\n\t@test(candidate(\"aAaaaXa\"\
    ) == 153)\n\t@test(candidate(\" How are yOu?\") == 151)\n\t@test(candidate(\"\
    You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp13vbdp_a.jl:1\nin expression starting at /tmp/tmp13vbdp_a.jl:1\n"
  stdout: ''
  timestamp: 1659979000
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n  sum::Int64 = 0\n  for i in 0..length(s)\n    sum = sum + digit(s[i])\n \
    \ end\n  return sum\nend\nusing Test\n\n@testset begin\n\ncandidate = digitSum;\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"\
    abcCd\") == 67)\n\t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\"\
    ) == 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are\
    \ yOu?\") == 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpwu19fj22.jl:28

    '
  stdout: "test set: Error During Test at /tmp/tmpwu19fj22.jl:31\n  Test threw exception\n\
    \  Expression: candidate(\"\") == 0\n  UndefVarError: .. not defined\n  Stacktrace:\n\
    \   [1] digitSum(s::String)\n     @ Main /tmp/tmpwu19fj22.jl:21\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwu19fj22.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwu19fj22.jl:30\ntest set:\
    \ Error During Test at /tmp/tmpwu19fj22.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(\"abAB\") == 131\n  UndefVarError: .. not defined\n  Stacktrace:\n\
    \   [1] digitSum(s::String)\n     @ Main /tmp/tmpwu19fj22.jl:21\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwu19fj22.jl:32 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwu19fj22.jl:30\ntest set:\
    \ Error During Test at /tmp/tmpwu19fj22.jl:33\n  Test threw exception\n  Expression:\
    \ candidate(\"abcCd\") == 67\n  UndefVarError: .. not defined\n  Stacktrace:\n\
    \   [1] digitSum(s::String)\n     @ Main /tmp/tmpwu19fj22.jl:21\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwu19fj22.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwu19fj22.jl:30\ntest set:\
    \ Error During Test at /tmp/tmpwu19fj22.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(\"helloE\") == 69\n  UndefVarError: .. not defined\n  Stacktrace:\n\
    \   [1] digitSum(s::String)\n     @ Main /tmp/tmpwu19fj22.jl:21\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwu19fj22.jl:"
  timestamp: 1659979003
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    if s == \"\" then 0\n    else digitSum(substring(s, 1, 2)) + digitSum(substring(s,\
    \ 3, 2)) + digitSum(substring(s, 5, 2)) + digitSum(substring(s, 7, 2)) + digitSum(substring(s,\
    \ 9, 2)) + digitSum(substring(s, 11, 2)) + digitSum(substring(s, 13, 2)) + digitSum(substring(s,\
    \ 15, 2)) + digitSum(substring(s, 17, 2)) + digitSum(substring(s, 19, 2)) + digitSum(substring(s,\
    \ 21, 2)) + digitSum(substring(s, 23, 2)) + digitSum(substring(s, 25, 2)) + digitSum(substring(s,\
    \ 27, 2)) + digitSum(substring(s, 29, 2)) + digitSum(substring(s, 31, 2)) + digitSum(substring(s,\
    \ 33, 2)) + digitSum(substring(s, 35, 2)) + digitSum(substring(s, 37, 2)) + digitSum(substring(s,\
    \ 39, 2)) + digitSum(substring(s, 41, 2)) + digitSum(substring(s, 43, 2)) + digitSum(substring(s,\
    \ 45, 2)) + digitSum(substring(s, 47, 2)) + digitSum(substring(s, 49, 2)) + digitSum(substring(s,\
    \ 51, 2)) + digitSum(substring(s, 53, 2)) + digitSum(substring(s, 55, 2)) + digitSum(substring(s,\
    \ 57, 2)) + digitSum(substring(s, 59, 2)) + digitSum(substring(s, 61, 2)) + digitSum(substring(s,\
    \ 63, 2)) + digitSum(substring(s, 65, 2)) + digitSum(substring(s, 67, 2)) + digitSum(substring(s,\
    \ 69, 2)) + digitSum(substring(s, 71, 2)) + digitSum(substring(s, 73, 2)) + digitSum(substring(s,\
    \ 75, 2)) + digitSum(substring(s, 77, 2)) + digitSum(substring(s, 79, 2)) + digitSum(substring(s,\
    \ 81, 2)) + digitSum(substring(s, 83, 2)) + digitSum(substring(s, 85, 2)) + digitSum(substring(s,\
    \ 87, 2)) + digitSum(substring(s, 89, 2)) + digitSum(substring(s, 91, 2)) + digitSum(substring(s,\
    \ 93, 2)) + digitSum(substring(s, 95, 2)) + digitSum(substring(s, 97, 2)) + digitSum(substring(s,\
    \ 99, 2))\n    end\nend\n</cell>\n<code language=julia-1.5>\ndigitSum(\"\")\n\
    </cell>\n<code language=julia-1.5>\ndigitSum(\"abAB\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"abcCd\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"helloE\")\n\
    </cell>\n<code language=julia-1.5>\ndigitSum(\"woArBld\")\nusing Test\n\n@testset\
    \ begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    abAB\") == 131)\n\t@test(candidate(\"abcCd\") == 67)\n\t@test(candidate(\"helloE\"\
    ) == 69)\n\t@test(candidate(\"woArBld\") == 131)\n\t@test(candidate(\"aAaaaXa\"\
    ) == 153)\n\t@test(candidate(\" How are yOu?\") == 151)\n\t@test(candidate(\"\
    You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"0\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmppl0sxg1d.jl:20\nin expression starting at /tmp/tmppl0sxg1d.jl:20\n"
  stdout: ''
  timestamp: 1659979000
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the digits only'\n    ASCII codes.\nusing Test\n\n@testset begin\n\
    \ncandidate = digitSum;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\"\
    ) == 131)\n\t@test(candidate(\"abcCd\") == 67)\n\t@test(candidate(\"helloE\")\
    \ == 69)\n\t@test(candidate(\"woArBld\") == 131)\n\t@test(candidate(\"aAaaaXa\"\
    ) == 153)\n\t@test(candidate(\" How are yOu?\") == 151)\n\t@test(candidate(\"\
    You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkq19mahi.jl:1\nin expression starting at /tmp/tmpkq19mahi.jl:1\n"
  stdout: ''
  timestamp: 1659978988
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    digitSum = 0\n    for digit in s\n        if digit in [\"A\",\"B\",\"\
    C\",\"D\",\"E\",\"F\",\"G\",\"H\",\"I\",\"J\",\"K\",\"L\",\"M\",\"N\",\"O\",\"\
    P\",\"Q\",\"R\",\"S\",\"T\",\"U\",\"V\",\"W\",\"X\",\"Y\",\"Z\"]\n           \
    \ digitSum += ord(digit) - 64\n        end\n    end\n    return digitSum\nend\n\
    </cell>\n<code language=julia-1.0>\ndigitSum(\"\")\n</cell>\n<text>\nExercise\
    \ 4:\nWrite a function which takes a string as input and returns the length of\
    \ the string.\nusing Test\n\n@testset begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"abcCd\") ==\
    \ 67)\n\t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\") ==\
    \ 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are yOu?\"\
    ) == 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphs1sdon3.jl:28\nin expression starting at\
    \ /tmp/tmphs1sdon3.jl:28\n"
  stdout: ''
  timestamp: 1659979000
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    if s == \"\"\n        0\n    else\n        let (s,_) = removeFirst(s,\
    \ \"A\")\n        digitSum(removeFirst(s, \"a\")) + digitSum(removeFirst(s, \"\
    A\"))\n    end \nend\n</cell>\n<text>\nTask 4 : Write a function that takes a\
    \ string as input and returns True if the input string contains no upper case\
    \ letters or lower case letters.\n    Use regular expressions.\nusing Test\n\n\
    @testset begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    abAB\") == 131)\n\t@test(candidate(\"abcCd\") == 67)\n\t@test(candidate(\"helloE\"\
    ) == 69)\n\t@test(candidate(\"woArBld\") == 131)\n\t@test(candidate(\"aAaaaXa\"\
    ) == 153)\n\t@test(candidate(\" How are yOu?\") == 151)\n\t@test(candidate(\"\
    You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp47v0efuv.jl:27\nin expression starting at\
    \ /tmp/tmp47v0efuv.jl:27\n"
  stdout: ''
  timestamp: 1659979000
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    local upperSum=0\n    for c in s do \n        if c >= 'A' and c <= 'Z'\
    \ then upperSum=upperSum+(c-65)\n    end\n    return upperSum\nend\n</cell>\n\
    <code language=julia-1.5>\ndigitSum(\"abAB\")\n</cell>\n<text>\nExercise 5.15\n\
    Write a function that accepts a string and returns the sum of ASCII codes of each\
    \ of the characters in that string. For example, the string \"hello\" should return\
    \ 102+103+104+105+106+97+98+99+100+101+108+114+111+111\nusing Test\n\n@testset\
    \ begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    abAB\") == 131)\n\t@test(candidate(\"abcCd\") == 67)\n\t@test(candidate(\"helloE\"\
    ) == 69)\n\t@test(candidate(\"woArBld\") == 131)\n\t@test(candidate(\"aAaaaXa\"\
    ) == 153)\n\t@test(candidate(\" How are yOu?\") == 151)\n\t@test(candidate(\"\
    You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid \"do\" syntax\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpb3zzn81o.jl:21\nin expression starting at /tmp/tmpb3zzn81o.jl:21\n"
  stdout: ''
  timestamp: 1659979001
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    | s.length == 0 = 0\n    | otherwise = digitSum(take (digitSum(head s))\
    \ tail s)\n    where digitSum(s::String)::Int64 = sum $ map toUpper s\nusing Test\n\
    \n@testset begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    abAB\") == 131)\n\t@test(candidate(\"abcCd\") == 67)\n\t@test(candidate(\"helloE\"\
    ) == 69)\n\t@test(candidate(\"woArBld\") == 131)\n\t@test(candidate(\"aAaaaXa\"\
    ) == 153)\n\t@test(candidate(\" How are yOu?\") == 151)\n\t@test(candidate(\"\
    You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"|\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsycw8lgm.jl:20\nin expression starting at\
    \ /tmp/tmpsycw8lgm.jl:20\n"
  stdout: ''
  timestamp: 1659979000
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    n <- 0\n    t <- 0\n    for ch in s\n        t <- t + ch\n        if t\
    \ == 122 || t == 130 // ASCII code for 'A'\n            t <- t - 32\n        n\
    \ <- n + t\n    n\nend\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThis is definitely\
    \ the way to go, although I thought that `sum` function would have some \"tricks\"\
    \ that make code more elegant.\n<|/ c |>\n<| a tags=sum,string,haskell |>\nThe\
    \ answer here is the same as the answer to the question you asked before. Just\
    \ use sum.\n<code>\ndigitSum s = sum (map ord s)\n</code>\nOr more concisely:\n\
    <code>\ndigitSum s = sum $ map ord s\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThe\
    \ only thing is that I didn't know how to combine `map ord` and `sum` as you suggested,\
    \ so I wrote a quick function called `toUpper :: Char -> Char` which simply made\
    \ all letters upper case: `toUpper 'a' == 'A'`.\n<|/ c |>\n<| c |>\nI should add\
    \ that your answer doesn't work for all inputs. For example, I know that `digitSum(\"\
    abcD\")` returns `10`, but `digitSum(\"abCdE\")` returns `8` when it should be\
    \ `13`.\n<|/ c |>\n<| a tags=sum,string,haskell |>\nHere's another approach:\n\
    <code>\ndigitSum s = sum (map ((>) 'A') (tails s))\n</code>\n<|/ a dscore=1 |>\n\
    <| c |>\nAwesome and clean, +1!\n<|/ c |>\n<| a |>\nI know you had this problem\
    \ already but I wanted to show you the solution without using any imports. \n\
    <code>\ndigitSum s = foldl' (\\accum ch -> accum + sum ('0'..'9') [ord ch]) 0\
    \ s\n</code>\n<|/ a tags=sum,string,haskell dscore=1 |>\n<| a |>\nI wrote this\
    \ as a learning exercise that made me realize that it's actually much easier than\
    \ I thought it would be. Here's an attempt, and it's probably not very efficient,\
    \ but it is very readable, and I think the code is easy to understand.\n<code>\n\
    digitSum :: String -> Int\ndigitSum [] = 0\ndigitSum (x:xs) = \nusing Test\n\n\
    @testset begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    abAB\") == 131)\n\t@test(candidate(\"abcCd\") == 67)\n\t@test(candidate(\"helloE\"\
    ) == 69)\n\t@test(candidate(\"woArBld\") == 131)\n\t@test(candidate(\"aAaaaXa\"\
    ) == 153)\n\t@test(candidate(\" How are yOu?\") == 151)\n\t@test(candidate(\"\
    You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"for\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpseylxulw.jl:24\nin expression starting at /tmp/tmpseylxulw.jl:24\n"
  stdout: ''
  timestamp: 1659979001
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = Int64(0) \n    for c in s do \n        if c>='A'&&c<='Z'\
    \ then \n            sum = sum + Int64(c-'A') \n        else \n            sum\
    \ = sum + Int64(c-'A') \n    return sum \nusing Test\n\n@testset begin\n\ncandidate\
    \ = digitSum;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\
    \t@test(candidate(\"abcCd\") == 67)\n\t@test(candidate(\"helloE\") == 69)\n\t\
    @test(candidate(\"woArBld\") == 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\
    \t@test(candidate(\" How are yOu?\") == 151)\n\t@test(candidate(\"You arE Very\
    \ Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid \"do\" syntax\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpiu3g792w.jl:21\nin expression starting at /tmp/tmpiu3g792w.jl:21\n"
  stdout: ''
  timestamp: 1659979001
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = 0\n    char::Int64 = 0\n    for c in s:\n        if ((c >=\
    \ '0') && (c <= '9')):\n            sum += (c - '0')\n        elif ((c >= 'A')\
    \ && (c <= 'Z')):\n            sum += (c - 'A' + 10)\n        elif ((c >= 'a')\
    \ && (c <= 'z')):\n            sum += (c - 'a' + 10)\n        else:\n        \
    \    throw new UnsupportedCharacterError()\n    return sum\n    end\"\"\"\nusing\
    \ Test\n\n@testset begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\") ==\
    \ 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"abcCd\") == 67)\n\
    \t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\") == 131)\n\
    \t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are yOu?\") ==\
    \ 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpv2tnikql.jl:23\nin expression starting at\
    \ /tmp/tmpv2tnikql.jl:23\n"
  stdout: ''
  timestamp: 1659979001
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    | length(s) = 0 => 0\n    | length(s) = 1 => ord(s)\n    | length(s) =\
    \ 2 | s[1..] == [\"\"] => ord(s) + 1\n    | length(s) = 3 | s[2..] == [\"\"] =>\
    \ ord(s) + 2\n    | length(s) = 4 | s[3..] == [\"\"] => ord(s) + 3\n    | length(s)\
    \ = 5 | s[4..] == [\"\"] => ord(s) + 4\n    | length(s) = 6 | s[5..] == [\"\"\
    ] => ord(s) + 5\n    | length(s) = 7 | s[6..] == [\"\"] => ord(s) + 6\n    | length(s)\
    \ = 8 | s[7..] == [\"\"] => ord(s) + 7\n    | length(s) = 9 => ord(s) + 8\n  \
    \  else => raise Exception(\"digitSum: unexpected length\")\nend\n</cell>\n<code\
    \ language=julia-1.6>\ndigitSum(\"\")\n</cell>\n<code language=julia-1.6>\ndigitSum(\"\
    abAB\")\n</cell>\n<code language=julia-1.6>\ndigitSum(\"abcCd\")\n</cell>\n<code\
    \ language=julia-1.6>\ndigitSum(\"helloE\")\n</cell>\n<code language=julia-1.6>\n\
    digitSum(\"woArBld\")\n</cell>\n<code language=julia-1.6>\ndigitSum(\"aAaaaXa\"\
    )\n</cell>\n<code language=julia-1.6>\ndigitSum(\"aAaaaXa\")\n</cell>\n<text>\n\
    Practice 1\nWrite a function that takes a String and returns true if the String\
    \ starts with \"abc\" and returns false otherwise.\nusing Test\n\n@testset begin\n\
    \ncandidate = digitSum;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\"\
    ) == 131)\n\t@test(candidate(\"abcCd\") == 67)\n\t@test(candidate(\"helloE\")\
    \ == 69)\n\t@test(candidate(\"woArBld\") == 131)\n\t@test(candidate(\"aAaaaXa\"\
    ) == 153)\n\t@test(candidate(\" How are yOu?\") == 151)\n\t@test(candidate(\"\
    You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"|\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpns_1kq3_.jl:20\nin expression starting at\
    \ /tmp/tmpns_1kq3_.jl:20\n"
  stdout: ''
  timestamp: 1659979001
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the digits and letters only.'\n    ASCII codes.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    abAB\") == 131)\n\t@test(candidate(\"abcCd\") == 67)\n\t@test(candidate(\"helloE\"\
    ) == 69)\n\t@test(candidate(\"woArBld\") == 131)\n\t@test(candidate(\"aAaaaXa\"\
    ) == 153)\n\t@test(candidate(\" How are yOu?\") == 151)\n\t@test(candidate(\"\
    You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1fv2stxm.jl:1\nin expression starting at /tmp/tmp1fv2stxm.jl:1\n"
  stdout: ''
  timestamp: 1659979001
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n| digitSum(\"\") = 0\n| digitSum(s:s:rest) = sum(ascii(last(s))) \n| digitSum(s:rest)\
    \ = digitSum(last(s))\n</code>\n<|/ a tags=haskell,recursion,tail-recursion |>\n\
    <| a dscore=1 |>\n<code>\ndigitSum :: String -> Int\ndigitSum \"\" = 0\ndigitSum\
    \ (x:xs)\n  | x == last(xs) = digitSum(xs) + digitSum(init(xs))\n  | otherwise\
    \ = digitSum(last(xs)) + digitSum(init(xs))\n</code>\nThis version uses the fact\
    \ that empty lists evaluate to 0 and non-empty lists evaluate to their last element\
    \ + their first element.\n<|/ a tags=haskell,recursion,tail-recursion |>\n<| a\
    \ |>\n<code>\ndigitSum :: String -> Int\ndigitSum \"\" = 0\ndigitSum [] = error\
    \ \"not empty list!\"\ndigitSum (x:xs) = last(x) + digitSum(init(xs))\n</code>\n\
    <|/ a dscore=1 tags=haskell,recursion,tail-recursion |>\n<| c |>\n`digitSum \"\
    \" = error \"not empty list!\"`\n<|/ c |>\n<| a tags=haskell,recursion,tail-recursion\
    \ |>\nA version without using last, init and sum but using map and sum directly:\n\
    <code>\ndigitSum :: String -> Int\ndigitSum \"\" = 0\ndigitSum str | length str\
    \ < 2 = error \"string too short!\"\n               | otherwise = sum $ map toUpper\
    \ $ tail str\n</code>\n<|/ a dscore=1 |>\n<| a dscore=0 tags=haskell,recursion,tail-recursion\
    \ |>\n<code>\ndigitSum xs = \n      foldl (\\acc x -> acc + toUpper x) 0 xs\n\
    </code>\nThe fold function will perform a partial evaluation on each element in\
    \ the list, reducing the list down to a single result. The first argument is the\
    \ result so far, the second is the current element. The final argument is the\
    \ initial value, which is zero in this case. The function simply adds the ASCII\
    \ value of the current element to the accumulator before returning it. The last\
    \ argument to foldl is just a dummy value for the initial value, and can be omitted.\
    \ Because foldl is defined like that, the final value of the accumulator is returned\
    \ at the end.\n<|/ a |>\n<| a dscore=0 |>\nThe simplest solution:\n<code>\ndigitSum\
    \ xs = sum $ \nusing Test\n\n@testset begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"abcCd\") ==\
    \ 67)\n\t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\") ==\
    \ 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are yOu?\"\
    ) == 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"|\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpld7g5hir.jl:20\nin expression starting at\
    \ /tmp/tmpld7g5hir.jl:20\n"
  stdout: ''
  timestamp: 1659979001
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n        \n    \"\"\"\n    Define a new variable sum with the function digitSum.\n\
    using Test\n\n@testset begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\"\
    ) == 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"abcCd\") ==\
    \ 67)\n\t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\") ==\
    \ 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are yOu?\"\
    ) == 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpe7ndwezu.jl:1\nin expression starting at /tmp/tmpe7ndwezu.jl:1\n"
  stdout: ''
  timestamp: 1659979001
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    # Your code goes here\n    return 1\nend\n</cell>\n<text>\nProblem 7\n\
    Write a function that takes in a character and a string as arguments, and returns\
    \ the position of the last character of the string.\nusing Test\n\n@testset begin\n\
    \ncandidate = digitSum;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\"\
    ) == 131)\n\t@test(candidate(\"abcCd\") == 67)\n\t@test(candidate(\"helloE\")\
    \ == 69)\n\t@test(candidate(\"woArBld\") == 131)\n\t@test(candidate(\"aAaaaXa\"\
    ) == 153)\n\t@test(candidate(\" How are yOu?\") == 151)\n\t@test(candidate(\"\
    You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpoju2_38w.jl:23\nin expression starting at\
    \ /tmp/tmpoju2_38w.jl:23\n"
  stdout: ''
  timestamp: 1659979001
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    total :: Int64 = 0\n    for i <- 0 .. s.length\n        do\n         \
    \   if (s.codes.contains(i)) || (i ==  'A') || (i ==  'a') || (i ==  'O') || (i\
    \ ==  'o') || (i ==  'B') || (i ==  'b') || (i ==  'C') || (i ==  'c')\n     \
    \           then total = total + s.codes[i]\n    end\n    return total\nend\n\"\
    \"\"\n    Task 1.4 Write a function that takes a string as input and returns the\
    \ sum of the numbers only\n    ASCII codes.\nusing Test\n\n@testset begin\n\n\
    candidate = digitSum;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\"\
    ) == 131)\n\t@test(candidate(\"abcCd\") == 67)\n\t@test(candidate(\"helloE\")\
    \ == 69)\n\t@test(candidate(\"woArBld\") == 131)\n\t@test(candidate(\"aAaaaXa\"\
    ) == 153)\n\t@test(candidate(\" How are yOu?\") == 151)\n\t@test(candidate(\"\
    You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid iteration specification\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpftqnjrtq.jl:21\nin expression starting at\
    \ /tmp/tmpftqnjrtq.jl:21\n"
  stdout: ''
  timestamp: 1659979001
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    s = String.toLower[s]\n    sum = 0\n    for c in s do \n        sum =\
    \ sum + if(c>='A'||c<'Z',ord(c)-ord('A')+1,0)\n    end\n    return sum\nend\n\
    </cell>\n<text>\n4.3 Exercise\nWrite a function that takes a string as input and\
    \ returns the first and last characters of the string.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    abAB\") == 131)\n\t@test(candidate(\"abcCd\") == 67)\n\t@test(candidate(\"helloE\"\
    ) == 69)\n\t@test(candidate(\"woArBld\") == 131)\n\t@test(candidate(\"aAaaaXa\"\
    ) == 153)\n\t@test(candidate(\" How are yOu?\") == 151)\n\t@test(candidate(\"\
    You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid \"do\" syntax\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmppc84kpqc.jl:22\nin expression starting at /tmp/tmppc84kpqc.jl:22\n"
  stdout: ''
  timestamp: 1659979001
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    if s == \"\"\n        0\n    else\n        let l = s.length()\n      \
    \  let sum = 0\n        for i = 0 to l-1\n            let c = s.charAt(i)\n  \
    \          if c in \"ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\"\n                then\
    \ sum += c.codePointAt(0)\n        end\n        sum\nend\n</cell>\n<text>\nLet's\
    \ run the digitSum function on the string \"abACa\" to get a better feel for it.\n\
    using Test\n\n@testset begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\"\
    ) == 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"abcCd\") ==\
    \ 67)\n\t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\") ==\
    \ 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are yOu?\"\
    ) == 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmpqgjsyuh_.jl:25 expected \"\
    end\", got \"l\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpqgjsyuh_.jl:25\n\
    in expression starting at /tmp/tmpqgjsyuh_.jl:25\n"
  stdout: ''
  timestamp: 1659979001
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    | s.length == 0 = 0\n    | otherwise = sum ( toInt c | (if c >= 'A' and\
    \ c <= 'Z' then c - 'A' else 0) | (if c >= 'a' and c <= 'z' then c - 'a' else\
    \ 0) for c in s )\nend\nusing Test\n\n@testset begin\n\ncandidate = digitSum;\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"\
    abcCd\") == 67)\n\t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\"\
    ) == 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are\
    \ yOu?\") == 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"|\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpb_9n21t8.jl:20\nin expression starting at\
    \ /tmp/tmpb_9n21t8.jl:20\n"
  stdout: ''
  timestamp: 1659979001
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    digitSum = 0\n    for i in s\n        if i>='A' and i<='Z' then digitSum\
    \ = digitSum + i - 'A' + 10\n    digitSum\nend digitSum\n</code>\n<|/ a dscore=2\
    \ |>\n<| a tags=haskell,performance,string |>\n<code>\ndigitSum :: String -> Int\n\
    digitSum s = sum $ map (ord 'A' + 10) [0..]\n</code>\n<|/ a dscore=2 |>\n<| c\
    \ |>\nWhile this code may answer the question, providing additional context regarding\
    \ how and/or why it solves the problem would improve the answer's long-term value\n\
    <|/ c |>\n<| c |>\nAgreed, this is shorter and more elegant.\n<|/ c |>\n<| a dscore=2\
    \ |>\nIn ghci:\n<code>\n\u03BB> \"abc123\" `elem` ['A'..'Z']\nTrue\n</code>\n\
    <|/ a tags=haskell,performance,string |>\n<| a |>\n<code>\ndigitSum :: String\
    \ -> Int\ndigitSum s = length . filter (\\c -> c >= 'A' && c <= 'Z') $ s\n</code>\n\
    <|/ a dscore=1 tags=haskell,performance,string |>\n<| c |>\n`filter` can easily\
    \ be replaced with a list comprehension `[ c >= 'A' && c <= 'Z' ]`\n<|/ c |>\n\
    <| a |>\n<code>\ndigitSum [] = 0\ndigitSum (x:xs) = x + digitSum xs\n</code>\n\
    <|/ a tags=haskell,performance,string dscore=1 |>\n<| a tags=haskell,performance,string\
    \ |>\n<code>\nsumUpperCase :: String -> Int\nsumUpperCase [] = 0\nsumUpperCase\
    \ (s:ss) = if (and [ch in ['A'..'Z'] for ch in s]) then \n                   \
    \   sumUpperCase ss + ch - 'A' + 10\n                      else sumUpperCase ss\n\
    </code>\n<|/ a dscore=1 |>\n<| c |>\n`sumUpperCase :: String -> Int` should be\
    \ `sumUpperCase :: String -> Int`. Also, shouldn't it be `if sumUpperCase ss >\
    \ 'Z' then sumUpperCase ss`?\n<|/ c |>\n<| a dscore=1 |>\nUsing Data.Char or Data.Char\
    \ on GHC 7.8.3 is significantly faster than other \nusing Test\n\n@testset begin\n\
    \ncandidate = digitSum;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\"\
    ) == 131)\n\t@test(candidate(\"abcCd\") == 67)\n\t@test(candidate(\"helloE\")\
    \ == 69)\n\t@test(candidate(\"woArBld\") == 131)\n\t@test(candidate(\"aAaaaXa\"\
    ) == 153)\n\t@test(candidate(\" How are yOu?\") == 151)\n\t@test(candidate(\"\
    You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"i\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp4e8sc6i_.jl:22\nin expression starting at /tmp/tmp4e8sc6i_.jl:22\n"
  stdout: ''
  timestamp: 1659979001
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum :: Int64 = 0\n    for (i, c) in s.zip \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    \ \n        where i <> \"Z\"\n        sum <- sum + Int(c)\n    return sum\n</code>\n\
    <|/ a |>\n<| c |>\nCan you explain this a bit more? I'm new to F#, so I'm having\
    \ a hard time seeing what this code is doing.\n<|/ c |>\n<| c |>\nThis is an infinite\
    \ loop, if the input is \"abc\", this program will loop forever.\n<|/ c |>\n<|\
    \ a tags=string,f#,type-conversion,type-conversion |>\nI tried to make a recursive\
    \ version of digitSum:\n<code>\nlet digitSum str =\n    match str with \n    |\
    \ c when c <= '9' -> \n        1\n    | c when c <= '9' -> \n        1 + digitSum\
    \ str.[1..str.Length-1]\n    | c when c <= '9' -> \n        1 + digitSum str.[1..str.Length-1]\n\
    \    | c when c <= '9' -> \n        1 + digitSum str.[1..str.Length-1]\n    |\
    \ _ -> 0 // this happens at the end of the string\n</code>\nbut this doesn't work,\
    \ because the else branch never gets executed, unless all the characters are digits.\n\
    So I had a look at this solution:\n<code>\nlet digitSum str =\n    let rec digits\
    \ acc = function\n        | [] -> acc\n        | c when c <= '9' -> digits (c+acc)\
    \ (1)\n        | c when c <= '9' -> digits (c+acc) (1+acc)\n        | c when c\
    \ <= '9' -> digits (c+acc) (1+acc)\n        | c when c <= '9' -> digits (c+acc)\
    \ (1+acc)\n        | c when c <= '9' -> digits (c+acc) (1+acc)\n        | c when\
    \ c <= '9' -> digits (c+acc) (1+acc)\n        | c when c <= '9' -> digits (c+acc)\
    \ (1+acc)\n        | c when c <= '9' -> digits (c+acc) (1+acc)\n        | c when\
    \ c <= '9' -> digits (c+acc) (1+acc)\n        | c when c <= '9' -> digits (c+acc)\
    \ (1+acc)\n        | c when c <= '9' -> digits (c+acc) (1+acc)\n        | c when\
    \ c <= '9' \nusing Test\n\n@testset begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"abcCd\") ==\
    \ 67)\n\t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\") ==\
    \ 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are yOu?\"\
    ) == 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmp53nlfnk4.jl:21 expected \"\
    end\", got \"i\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp53nlfnk4.jl:22\n\
    in expression starting at /tmp/tmp53nlfnk4.jl:22\n"
  stdout: ''
  timestamp: 1659979001
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    total = 0\n    for character in s.chars()\n        if character >= '0'\
    \ and character <= '9'\n            total = total + character.getUpperBound()\n\
    \    return total\nend\nusing Test\n\n@testset begin\n\ncandidate = digitSum;\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"\
    abcCd\") == 67)\n\t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\"\
    ) == 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are\
    \ yOu?\") == 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"character\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpye_5l9ne.jl:22\nin expression starting at /tmp/tmpye_5l9ne.jl:22\n"
  stdout: ''
  timestamp: 1659979002
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = sum::Int64(0)\n    for c in s\n        if c <= '9' && c >\
    \ '0'\n            sum += c\n        end\n    end\n    return sum\nend\n</cell>\n\
    <text>\nTask\nWrite a function named digitAverage that takes a string as input\
    \ and returns an average of the digits. A digit can be any number from 0-9.\n\
    using Test\n\n@testset begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\"\
    ) == 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"abcCd\") ==\
    \ 67)\n\t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\") ==\
    \ 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are yOu?\"\
    ) == 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxrpfaq10.jl:28\nin expression starting at\
    \ /tmp/tmpxrpfaq10.jl:28\n"
  stdout: ''
  timestamp: 1659979002
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum:Int64=0\n    for c in s: \n        if c.isUpper: \n            sum\
    \ +=c \n    return sum\n</code>\nFor your previous question I see you already\
    \ answered it, but here is another way to do it that might or might not make a\
    \ difference for your task:\n<code>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = digitSum;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\
    \t@test(candidate(\"abcCd\") == 67)\n\t@test(candidate(\"helloE\") == 69)\n\t\
    @test(candidate(\"woArBld\") == 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\
    \t@test(candidate(\" How are yOu?\") == 151)\n\t@test(candidate(\"You arE Very\
    \ Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0dou20bd.jl:22\nin expression starting at\
    \ /tmp/tmp0dou20bd.jl:22\n"
  stdout: ''
  timestamp: 1659979002
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    return sum(map (ord, s))\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = digitSum;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\
    \t@test(candidate(\"abcCd\") == 67)\n\t@test(candidate(\"helloE\") == 69)\n\t\
    @test(candidate(\"woArBld\") == 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\
    \t@test(candidate(\" How are yOu?\") == 151)\n\t@test(candidate(\"You arE Very\
    \ Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: space before \"(\" not allowed in \"map (\" at\
    \ /tmp/tmpm6r3_914.jl:20\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpm6r3_914.jl:20\n\
    in expression starting at /tmp/tmpm6r3_914.jl:20\n"
  stdout: ''
  timestamp: 1659979002
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the digits only'\n    ASCII codes.\nusing Test\n\n@testset begin\n\
    \ncandidate = digitSum;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\"\
    ) == 131)\n\t@test(candidate(\"abcCd\") == 67)\n\t@test(candidate(\"helloE\")\
    \ == 69)\n\t@test(candidate(\"woArBld\") == 131)\n\t@test(candidate(\"aAaaaXa\"\
    ) == 153)\n\t@test(candidate(\" How are yOu?\") == 151)\n\t@test(candidate(\"\
    You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkq19mahi.jl:1\nin expression starting at /tmp/tmpkq19mahi.jl:1\n"
  stdout: ''
  timestamp: 1659978988
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n</code>\nI couldn't think of any way to do it with list comprehension, so\
    \ this works, but it's not a good idea, as list comprehensions aren't optimized\
    \ for performance in general. There are some cases where it can be useful, but\
    \ this isn't one of those cases.\nThe most efficient way to do this is:\n<code>\n\
    digitSum :: String -> Int64\ndigitSum s = foldl (\\acc x -> (acc+x) > '9' ? acc+x\
    \ : '0') 0 s\n</code>\nHowever, that's not very readable. Here it is written as\
    \ a simple loop:\n<code>\ndigitSum :: String -> Int64\ndigitSum s = foldl (\\\
    acc x -> if acc+x > '9' then acc+x else acc else '0') 0 s\n</code>\nThis doesn't\
    \ look very readable to me either, so let's break it down:\n<code>\ndigitSum ::\
    \ String -> Int64\ndigitSum s = foldl (\\acc x -> if acc+x > '9' then acc+x else\
    \ acc else '0') 0 s\n</code>\nfoldl is a function that takes two arguments: a\
    \ function to combine items, and a list to perform the function on. foldl takes\
    \ a binary function, and a list to apply that function to. foldl is actually a\
    \ higher-order function, so that's where it's at. There are two main functions\
    \ in foldl, the first is the function to combine items, and this one is pretty\
    \ straightforward, it takes two arguments. In our case, we'll combine the items\
    \ by adding them. In general, we can use the following expression to combine items:\n\
    <code>\nf x y = x+y\n</code>\nIn the case of foldl, this function will combine\
    \ items. What we need to do to combine items is to add them, so we need to use\
    \ the plus sign to perform addition:\n<code>\nacc x + '9' = acc + '9'\n</code>\n\
    The second parameter to foldl, x, is the accumulator. This is an argument that\
    \ starts out as some value. Since foldl is a higher-order function, we need to\
    \ pass in a function to the foldl function, and in this case, the function we\
    \ are passing is a lambda function.\n<code>\nacc x if acc+x > '9' then acc+x else\
    \ acc else '0'\n</code>\nThis is a lambda function that takes two arguments, the\
    \ accumulator and an item from the list. The only important thing is that if returns\
    \ a boolean (either True or False), and if it returns False, then the lambda function\
    \ will return the accumulator. Otherwise, it will return the item. Notice that\
    \ this if condition is a bit more complex than we were taught in class, and is\
    \ different than the if-else you learned in class. The code above actually uses\
    \ ?: which is a conditional operator. Let's \nusing Test\n\n@testset begin\n\n\
    candidate = digitSum;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\"\
    ) == 131)\n\t@test(candidate(\"abcCd\") == 67)\n\t@test(candidate(\"helloE\")\
    \ == 69)\n\t@test(candidate(\"woArBld\") == 131)\n\t@test(candidate(\"aAaaaXa\"\
    ) == 153)\n\t@test(candidate(\" How are yOu?\") == 151)\n\t@test(candidate(\"\
    You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpuubngo7g.jl:20\nin expression starting at\
    \ /tmp/tmpuubngo7g.jl:20\n"
  stdout: ''
  timestamp: 1659979002
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    s = toUpper(toCharArray(s))\n    return (sum(ord(c) for c in s))\nend\n\
    using Test\n\n@testset begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\"\
    ) == 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"abcCd\") ==\
    \ 67)\n\t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\") ==\
    \ 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are yOu?\"\
    ) == 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpdh0k13la.jl:25

    '
  stdout: "test set: Error During Test at /tmp/tmpdh0k13la.jl:28\n  Test threw exception\n\
    \  Expression: candidate(\"\") == 0\n  UndefVarError: toCharArray not defined\n\
    \  Stacktrace:\n   [1] digitSum(s::String)\n     @ Main /tmp/tmpdh0k13la.jl:20\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpdh0k13la.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpdh0k13la.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpdh0k13la.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"abAB\") == 131\n  UndefVarError: toCharArray not defined\n  Stacktrace:\n\
    \   [1] digitSum(s::String)\n     @ Main /tmp/tmpdh0k13la.jl:20\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpdh0k13la.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpdh0k13la.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpdh0k13la.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(\"abcCd\") == 67\n  UndefVarError: toCharArray not defined\n  Stacktrace:\n\
    \   [1] digitSum(s::String)\n     @ Main /tmp/tmpdh0k13la.jl:20\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpdh0k13la.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpdh0k13la.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpdh0k13la.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(\"helloE\") == 69\n  UndefVarError: toCharArray not defined\n  Stacktrace:\n\
    \   [1] digitSum(s::String)\n     @ Main /tmp/tmpdh0k13la.jl:20\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro e"
  timestamp: 1659979004
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    \"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    abAB\") == 131)\n\t@test(candidate(\"abcCd\") == 67)\n\t@test(candidate(\"helloE\"\
    ) == 69)\n\t@test(candidate(\"woArBld\") == 131)\n\t@test(candidate(\"aAaaaXa\"\
    ) == 153)\n\t@test(candidate(\" How are yOu?\") == 151)\n\t@test(candidate(\"\
    You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcdn3dcks.jl:1\nin expression starting at /tmp/tmpcdn3dcks.jl:1\n"
  stdout: ''
  timestamp: 1659978995
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    if s == \"\" then 0 else sum (filter(isUpper _, digitValues s)) \nend\n\
    digitSum(_) = error \"Please provide a string to digitSum\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    abAB\") == 131)\n\t@test(candidate(\"abcCd\") == 67)\n\t@test(candidate(\"helloE\"\
    ) == 69)\n\t@test(candidate(\"woArBld\") == 131)\n\t@test(candidate(\"aAaaaXa\"\
    ) == 153)\n\t@test(candidate(\" How are yOu?\") == 151)\n\t@test(candidate(\"\
    You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"0\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpik7ju5f5.jl:20\nin expression starting at /tmp/tmpik7ju5f5.jl:20\n"
  stdout: ''
  timestamp: 1659979002
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    local sum = 0\n    for x in s:\n        sum += toupper(x)\n    return\
    \ sum\nend\n</cell>\n<cell>\ndigitSum(\"\")\n</cell>\n<cell>\ndigitSum(\"abAB\"\
    )\n</cell>\n<cell>\ndigitSum(\"abcCd\")\n</cell>\n<cell>\ndigitSum(\"helloE\"\
    )\n</cell>\n<cell>\ndigitSum(\"woArBld\")\n</cell>\n<cell>\ndigitSum(\"aAaaaXa\"\
    )\n</cell>\n<text>\nTask 3: Write a function that takes a string as input and\
    \ returns the number of uppercase letters only'\n    ASCII codes.\nusing Test\n\
    \n@testset begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    abAB\") == 131)\n\t@test(candidate(\"abcCd\") == 67)\n\t@test(candidate(\"helloE\"\
    ) == 69)\n\t@test(candidate(\"woArBld\") == 131)\n\t@test(candidate(\"aAaaaXa\"\
    ) == 153)\n\t@test(candidate(\" How are yOu?\") == 151)\n\t@test(candidate(\"\
    You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpuwuh2i54.jl:22\nin expression starting at\
    \ /tmp/tmpuwuh2i54.jl:22\n"
  stdout: ''
  timestamp: 1659979002
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = 0\n    for character in s:\n        if character >= \"A\"\
    \ and character <= \"Z\":\n            sum += character - \"A\" + 1\n    return\
    \ sum\nusing Test\n\n@testset begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"abcCd\") ==\
    \ 67)\n\t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\") ==\
    \ 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are yOu?\"\
    ) == 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp87xwp8h5.jl:22\nin expression starting at\
    \ /tmp/tmp87xwp8h5.jl:22\n"
  stdout: ''
  timestamp: 1659979002
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    \n    \"\"\"Task\n    Write a function that takes a string as input and\
    \ returns the sum of the lower characters only'\n    ASCII codes.\nusing Test\n\
    \n@testset begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    abAB\") == 131)\n\t@test(candidate(\"abcCd\") == 67)\n\t@test(candidate(\"helloE\"\
    ) == 69)\n\t@test(candidate(\"woArBld\") == 131)\n\t@test(candidate(\"aAaaaXa\"\
    ) == 153)\n\t@test(candidate(\" How are yOu?\") == 151)\n\t@test(candidate(\"\
    You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxx8kmk05.jl:1\nin expression starting at /tmp/tmpxx8kmk05.jl:1\n"
  stdout: ''
  timestamp: 1659979002
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    | s.length <- 0\n    | s mod 1 = 0 => s.length\n    | s mod 10 = 1 =>\
    \ digitSum(s.tail) + digitSum(s.tail.tail)\n    | otherwise = digitSum(s.tail)\
    \ + digitSum(s.tail.tail) + digitSum(s.tail.tail.tail)\nusing Test\n\n@testset\
    \ begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    abAB\") == 131)\n\t@test(candidate(\"abcCd\") == 67)\n\t@test(candidate(\"helloE\"\
    ) == 69)\n\t@test(candidate(\"woArBld\") == 131)\n\t@test(candidate(\"aAaaaXa\"\
    ) == 153)\n\t@test(candidate(\" How are yOu?\") == 151)\n\t@test(candidate(\"\
    You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"|\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2ubk04lb.jl:20\nin expression starting at\
    \ /tmp/tmp2ubk04lb.jl:20\n"
  stdout: ''
  timestamp: 1659979002
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    s = String.strip(s)\n    if s == \"\"\n        0\n    else\n        sum\
    \ = 0\n        for  c in s\n            sum = sum + Int(ord(c))\n        sum\n\
    end\n</code>\n<|/ a |>\n<| c |>\nI ran this in Julia. Still get an error with\
    \ the function definition.\n<|/ c |>\n<| c |>\nThe `if s == \"\"` part is unnecessary\
    \ as `String.strip(s)` will return an empty string if it cannot strip the string.\n\
    <|/ c |>\n<| a dscore=1 tags=string,julia |>\nFor those looking for a solution\
    \ where we do not use any string processing function from base, you can use a\
    \ loop to iterate over the string one character at a time and then keep a running\
    \ tally of how long the string was in each iteration:\n<code>\nusing Test\n\n\
    @testset begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    abAB\") == 131)\n\t@test(candidate(\"abcCd\") == 67)\n\t@test(candidate(\"helloE\"\
    ) == 69)\n\t@test(candidate(\"woArBld\") == 131)\n\t@test(candidate(\"aAaaaXa\"\
    ) == 153)\n\t@test(candidate(\" How are yOu?\") == 151)\n\t@test(candidate(\"\
    You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmbyk1f0v.jl:29\nin expression starting at\
    \ /tmp/tmpmbyk1f0v.jl:29\n"
  stdout: ''
  timestamp: 1659979002
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    digits = StrToInt64(s) |> charToInt64 |> Seq.filter (<)\n    Sum(digits)\n\
    end\n</cell>\n<code language=julia-1.0>\ndigitSum(\"\")\n</cell>\n<text>\nExercise\
    \ 2\nusing Test\n\n@testset begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"abcCd\") ==\
    \ 67)\n\t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\") ==\
    \ 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are yOu?\"\
    ) == 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: space before \"(\" not allowed in \"Seq.filter\
    \ (\" at /tmp/tmphd7m0npi.jl:20\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmphd7m0npi.jl:20\n\
    in expression starting at /tmp/tmphd7m0npi.jl:20\n"
  stdout: ''
  timestamp: 1659979002
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    s = s |> toUpper\n    let sum = 0\n    for c in s do\n        if c.isUpper\
    \ then\n            sum +:= c.digit\n        end\n    end\n    return sum\nend\n\
    using Test\n\n@testset begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\"\
    ) == 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"abcCd\") ==\
    \ 67)\n\t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\") ==\
    \ 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are yOu?\"\
    ) == 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid \"do\" syntax\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmptvietejj.jl:22\nin expression starting at /tmp/tmptvietejj.jl:22\n"
  stdout: ''
  timestamp: 1659979002
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n</code>\nusing Test\n\n@testset begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"abcCd\") ==\
    \ 67)\n\t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\") ==\
    \ 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are yOu?\"\
    ) == 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdkqopgw0.jl:20\nin expression starting at\
    \ /tmp/tmpdkqopgw0.jl:20\n"
  stdout: ''
  timestamp: 1659979002
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the numbers'\n    ASCII codes.\nusing Test\n\n@testset begin\n\n\
    candidate = digitSum;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\"\
    ) == 131)\n\t@test(candidate(\"abcCd\") == 67)\n\t@test(candidate(\"helloE\")\
    \ == 69)\n\t@test(candidate(\"woArBld\") == 131)\n\t@test(candidate(\"aAaaaXa\"\
    ) == 153)\n\t@test(candidate(\" How are yOu?\") == 151)\n\t@test(candidate(\"\
    You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxhmd25lq.jl:1\nin expression starting at /tmp/tmpxhmd25lq.jl:1\n"
  stdout: ''
  timestamp: 1659979002
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n  \n    # 1. Initialization.\n    # Initialization is needed for all types\
    \ of loops.\n    let num = 0\n    let maxPos = length(s) \n    let maxChar = 0\n\
    \    \n    # 2. Loop through every character.\n    for i in 0..maxPos-1 do\n \
    \       \n        # 2.a. Find the max character.\n        if s[i]>maxChar then\n\
    \            maxChar = s[i]\n        end\n        \n        # 2.b. Check if the\
    \ max character is upper case.\n        if isUpper(s[i])==1 then\n           \
    \ num = num+s[i]\n        end\n    end\n    \n    return num\nend\n</cell>\n<code\
    \ language=julia-1.5>\ndigitSum(\"aAaaaXa\")\n</cell>\n<text>\nWrite a function\
    \ that takes a string and returns the number of characters that match a specific\
    \ substring in a case insensitive manner.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = digitSum;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\
    \t@test(candidate(\"abcCd\") == 67)\n\t@test(candidate(\"helloE\") == 69)\n\t\
    @test(candidate(\"woArBld\") == 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\
    \t@test(candidate(\" How are yOu?\") == 151)\n\t@test(candidate(\"You arE Very\
    \ Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid \"do\" syntax\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp34au6wf7.jl:28\nin expression starting at /tmp/tmp34au6wf7.jl:28\n"
  stdout: ''
  timestamp: 1659979002
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    \"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the ASCII codes minus the \n    sum of the ascii codes of the lower\
    \ characters.'\n    ASCII codes.\nusing Test\n\n@testset begin\n\ncandidate =\
    \ digitSum;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\
    \t@test(candidate(\"abcCd\") == 67)\n\t@test(candidate(\"helloE\") == 69)\n\t\
    @test(candidate(\"woArBld\") == 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\
    \t@test(candidate(\" How are yOu?\") == 151)\n\t@test(candidate(\"You arE Very\
    \ Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpuczusgl3.jl:1\nin expression starting at /tmp/tmpuczusgl3.jl:1\n"
  stdout: ''
  timestamp: 1659979002
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    if s.length < 0 { return 0 }\n    return digitSum(s.tail) + \n       \
    \ Int64((if s.head == 'A' || s.head == 'a' then 1 else 0) + \n            (if\
    \ s.head == 'B' || s.head == 'b' then 2 else 0) + \n            (if s.head ==\
    \ 'C' || s.head == 'c' then 3 else 0) + \n            (if s.head == 'D' || s.head\
    \ == 'd' then 4 else 0) + \n            (if s.head == 'E' || s.head == 'e' then\
    \ 5 else 0) + \n            (if s.head == 'F' || s.head == 'f' then 6 else 0)\
    \ + \n            (if s.head == 'G' || s.head == 'g' then 7 else 0) + \n     \
    \       (if s.head == 'H' || s.head == 'h' then 8 else 0) + \n            (if\
    \ s.head == 'I' || s.head == 'i' then 9 else 0) + \n            (if s.head ==\
    \ 'J' || s.head == 'j' then 10 else 0) + \n            (if s.head == 'K' || s.head\
    \ == 'k' then 11 else 0) + \n            (if s.head == 'L' || s.head == 'l' then\
    \ 12 else 0) + \n            (if s.head == 'M' || s.head == 'm' then 13 else 0)\
    \ + \n            (if s.head == 'N' || s.head == 'n' then 14 else 0) + \n    \
    \        (if s.head == 'O' || s.head == 'o' then 15 else 0) + \n            (if\
    \ s.head == 'P' || s.head == 'p' then 16 else 0) + \n            (if s.head ==\
    \ 'Q' || s.head == 'q' then 17 else 0) + \n            (if s.head == 'R' || s.head\
    \ == 'r' then 18 else 0) + \n            (if s.head == 'S' || s.head == 's' then\
    \ 19 else 0) + \n            (if s.head == 'T' || s.head == 't' then 20 else 0)\
    \ + \n            (if s.head == 'U' || s.head == 'u' then 21 else 0) + \n    \
    \        (if s.head == 'V' || s.head == 'v' then 22 else 0) + \n            (if\
    \ s.head == 'W' || s.head == 'w' then 23 else 0) + \n            (if s.head ==\
    \ 'X' || s.head == 'x' then 24 else 0) + \n            (if s.head == 'Y' || s.head\
    \ == 'y' then 25 else 0) + \n            (if s.head == 'Z' || s.head == 'z' then\
    \ 26 else 0))\nend\n    \"\"\"\n    \"\"\"Task\n    Write a function that takes\
    \ a string as input and returns the sum of the characters only up to the 13th\
    \ character'\n    ASCII codes.\nusing Test\n\n@testset begin\n\ncandidate = digitSum;\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"\
    abcCd\") == 67)\n\t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\"\
    ) == 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are\
    \ yOu?\") == 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: space before \"{\" not allowed in \"0 {\" at\
    \ /tmp/tmpzpw409p_.jl:20\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpzpw409p_.jl:20\n\
    in expression starting at /tmp/tmpzpw409p_.jl:20\n"
  stdout: ''
  timestamp: 1659979003
