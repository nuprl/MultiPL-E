language: jl
name: HumanEval_85_add
results:
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    \n    evens =\
    \ lst[1 : (end-1)]\n    odd = lst[(end-2) : (end-1)]\n    \n    sum = 0\n    \n\
    \    for e in evens\n        sum += e\n    end\n    \n    for o in odd\n     \
    \   sum += o\n    end\n    \n    return sum\nend\n</code>\n<|/ a dscore=3 |>\n\
    <| a |>\nJust to contribute an alternative approach, using an accumulator and\
    \ an iterator instead of a loop.\n<code>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2,\
    \ 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp86r_x3y7.jl:25\nin expression starting at\
    \ /tmp/tmp86r_x3y7.jl:25\n"
  stdout: ''
  timestamp: 1660009038
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    if length(lst)\
    \ <=1\n        return lst[1]\n    end\nusing Test\n\n@testset begin\n\ncandidate\
    \ = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2,\
    \ 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpht5tzd7e.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpht5tzd7e.jl:1\n\
    in expression starting at /tmp/tmpht5tzd7e.jl:1\n"
  stdout: ''
  timestamp: 1660009038
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    # lst.length ==\
    \ 1\n    if lst.length !=1\n        throw(ArgumentError(\"list must have length\
    \ 1\"))\n    end\n    # lst[0] == 0\n    if lst[0] !=0\n        throw(ArgumentError(\"\
    lst[0] must be 0\"))\n    end\n    # lst.head is even\n    if lst.head%2==0\n\
    \        throw(ArgumentError(\"lst.head must be even\"))\n    end\n    even =\
    \ lst.tail[1]%2==0\n    if even\n        return sum(lst.tail)\n    else\n    \
    \    lst.tail[1] = lst.tail[1]%2\n        return sum(lst.tail)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) ==\
    \ 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpmfqin35b.jl:31

    '
  stdout: "test set: Error During Test at /tmp/tmpmfqin35b.jl:34\n  Test threw exception\n\
    \  Expression: candidate([4, 88]) == 88\n  type Array has no field length\n  Stacktrace:\n\
    \   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] add(lst::Vector{Int64})\n\
    \     @ Main /tmp/tmpmfqin35b.jl:10\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpmfqin35b.jl:34 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpmfqin35b.jl:33\ntest set:\
    \ Error During Test at /tmp/tmpmfqin35b.jl:35\n  Test threw exception\n  Expression:\
    \ candidate([4, 5, 6, 7, 2, 122]) == 122\n  type Array has no field length\n \
    \ Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] add(lst::Vector{Int64})\n\
    \     @ Main /tmp/tmpmfqin35b.jl:10\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpmfqin35b.jl:35 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpmfqin35b.jl:33\ntest set:\
    \ Error During Test at /tmp/tmpmfqin35b.jl:36\n  Test threw exception\n  Expression:\
    \ candidate([4, 0, 6, 7]) == 0\n  type Array has no field length\n  Stacktrace:\n\
    \   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] add(lst::Vector{Int64})\n\
    \     @ Main /tmp/tmpmfqin35b.jl:10\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpmfqin35b.jl:36 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpmfqin35b.jl:33\ntest set:\
    \ Error During Test at /tmp/tmpmfqin35b.jl:37\n  Test threw exception\n  Expression:\
    \ candidate([4, 4, 6, 8]) == 12\n  type Array has no field length\n  Stacktrace:\n\
    \   [1] getproperty\n     @ ./B"
  timestamp: 1660009040
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    \"\"\"\n    Arguments:\n\
    \        lst: the input vector\n    Returns:\n        the sum of elements in the\
    \ input vector\n    \"\"\"\n    cnt = 0\n    for i in lst\n        if i%2 == 0\n\
    \            cnt += 1\n        end\n    end\n    lst\n    cnt\n    \nend\n</cell>\n\
    <code language=julia-1.3>\nadd([4, 2, 6, 7])\n</cell>\n<code language=julia-1.3>\n\
    \"\"\"Given a non-empty vector of integers lst. add the odd elements that are\
    \ at even indices..\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4,\
    \ 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdr1x3f1_.jl:25\nin expression starting at\
    \ /tmp/tmpdr1x3f1_.jl:25\n"
  stdout: ''
  timestamp: 1660009038
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    for i in 2:length(lst)\n\
    \        if lst[i]%2 != 0\n            lst[i]+=lst[i-1]\n        end\n    end\n\
    \    return sum(lst[lst!=0])\nend\n</cell>\n<code language=julia-1.3>\n@code_warntype\
    \ add(lst)\n</cell>\n<text>\nWrite a function that multiplies a vector by a scalar.\n\
    using Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) ==\
    \ 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcyba3ypk.jl:16\nin expression starting at\
    \ /tmp/tmpcyba3ypk.jl:16\n"
  stdout: ''
  timestamp: 1660009038
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    sum_even=0\n \
    \   for i=1:size(lst)[2]\n        if lst[i]%2==0\n            sum_even+=lst[i]\n\
    \        end\n    end\n    return sum_even\nend\n</code>\n<|/ a dscore=0 |>\n\
    <| a dscore=0 tags=julia,syntax |>\nAnother way of doing it would be the following:\n\
    <code>\njulia> [i for i in 1:10 if i % 2 == 0]\n6-element Array{Int64,1}:\n 6\n\
    \ 8\n10\n</code>\n<|/ a |>\n<| a dscore=0 tags=julia,syntax |>\nAs pointed out\
    \ in previous answers, the idiomatic way to write this in Julia is:\n<code>\n\
    julia> [i for i in 1:10 if i % 2 == 0]\n6-element Array{Int64,1}:\n 6\n 8\n10\n\
    </code>\nThis approach is often faster than a comprehension that is executed inside\
    \ the loop.\nIn general, when writing the code for one specific task, the best\
    \ way to approach it is to just try each idiom, measure performance, and decide\
    \ which one performs the best. Julia comes with a couple of BenchmarkTools packages\
    \ that can be used to test different approaches and choose the one that best fits\
    \ your needs.\nFor this particular question, using BenchmarkTools, we get:\n<code>\n\
    julia> add([i for i in 1:10 if i % 2 == 0])\n  1.243234 seconds (3 allocations:\
    \ 1.071 KiB)\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4,\
    \ 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbpglq_xs.jl:17\nin expression starting at\
    \ /tmp/tmpbpglq_xs.jl:17\n"
  stdout: ''
  timestamp: 1660009038
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[end-2:end]\n\
    \    odd = lst[end-1:end]\n    even.+=(odd.*2)\n    return even\nend\n\"\"\"Given\
    \ a non-empty vector of integers lst. add the odd elements that are at even indices..\n\
    using Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) ==\
    \ 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplz2kqw05.jl:14\nin expression starting at\
    \ /tmp/tmplz2kqw05.jl:14\n"
  stdout: ''
  timestamp: 1660009038
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n   \n    # your code\
    \ goes here\n    return 0\nend\nusing Test\n\n@testset begin\n\ncandidate = add;\n\
    \t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) ==\
    \ 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8])\
    \ == 12)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpwyzknprg.jl:15

    '
  stdout: "test set: Test Failed at /tmp/tmpwyzknprg.jl:18\n  Expression: candidate([4,\
    \ 88]) == 88\n   Evaluated: 0 == 88\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwyzknprg.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwyzknprg.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpwyzknprg.jl:19\n  Expression: candidate([4, 5, 6, 7, 2, 122])\
    \ == 122\n   Evaluated: 0 == 122\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwyzknprg.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwyzknprg.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpwyzknprg.jl:21\n  Expression: candidate([4, 4, 6, 8]) == 12\n\
    \   Evaluated: 0 == 12\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwyzknprg.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwyzknprg.jl:17\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  timestamp: 1660009039
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    n = lst.len\n\
    \    even = 0\n    odd = 0\n    for i in 1:n\n        if (lst[i] % 2 == 0) \n\
    \            even = even + lst[i]\n        else\n            odd = odd +  lst[i]\n\
    \        end\n    end\n    add(even, odd)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5,\
    \ 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpd17q1k3m.jl:23

    '
  stdout: "test set: Error During Test at /tmp/tmpd17q1k3m.jl:26\n  Test threw exception\n\
    \  Expression: candidate([4, 88]) == 88\n  type Array has no field len\n  Stacktrace:\n\
    \   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] add(lst::Vector{Int64})\n\
    \     @ Main /tmp/tmpd17q1k3m.jl:9\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpd17q1k3m.jl:26 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpd17q1k3m.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpd17q1k3m.jl:27\n  Test threw exception\n  Expression:\
    \ candidate([4, 5, 6, 7, 2, 122]) == 122\n  type Array has no field len\n  Stacktrace:\n\
    \   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] add(lst::Vector{Int64})\n\
    \     @ Main /tmp/tmpd17q1k3m.jl:9\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpd17q1k3m.jl:27 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpd17q1k3m.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpd17q1k3m.jl:28\n  Test threw exception\n  Expression:\
    \ candidate([4, 0, 6, 7]) == 0\n  type Array has no field len\n  Stacktrace:\n\
    \   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] add(lst::Vector{Int64})\n\
    \     @ Main /tmp/tmpd17q1k3m.jl:9\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpd17q1k3m.jl:28 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpd17q1k3m.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpd17q1k3m.jl:29\n  Test threw exception\n  Expression:\
    \ candidate([4, 4, 6, 8]) == 12\n  type Array has no field len\n  Stacktrace:\n\
    \   [1] getproperty\n     @ ./Base.jl:42 [inli"
  timestamp: 1660009040
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    sum=0\n    for\
    \ i in eachindex(lst) do \n        sum=sum+lst[i]\n    end\n    return sum\nend\n\
    using Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) ==\
    \ 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpiyq8ufqz.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpiyq8ufqz.jl:1\n\
    in expression starting at /tmp/tmpiyq8ufqz.jl:1\n"
  stdout: ''
  timestamp: 1660009038
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n  sum = 0\n  for elem\
    \ in lst\n    sum += elem\n  end\n  return sum\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5,\
    \ 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpd6oxrov1.jl:17

    '
  stdout: "test set: Test Failed at /tmp/tmpd6oxrov1.jl:20\n  Expression: candidate([4,\
    \ 88]) == 88\n   Evaluated: 92 == 88\nStacktrace:\n [1] macro expansion\n   @\
    \ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpd6oxrov1.jl:20 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpd6oxrov1.jl:19\ntest set: Test Failed at /tmp/tmpd6oxrov1.jl:21\n\
    \  Expression: candidate([4, 5, 6, 7, 2, 122]) == 122\n   Evaluated: 146 == 122\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpd6oxrov1.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpd6oxrov1.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpd6oxrov1.jl:22\n  Expression: candidate([4, 0, 6, 7]) == 0\n\
    \   Evaluated: 17 == 0\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpd6oxrov1.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpd6oxrov1.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpd6oxrov1.jl:23\n  Expression: candidate([4, 4, 6, 8]) == 12\n\
    \   Evaluated: 22 == 12\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpd6oxrov1.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpd6oxrov1.jl:19\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  timestamp: 1660009039
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    evens = 0\n  \
    \  for i in 1:length(lst)\n        if lst[i] % 2 != 0\n            evens += lst[i]\n\
    \        end\n    end\n    return evens\nend\n</cell>\n<cell>\nusing Test\n\n\
    @testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpo139u4x8.jl:17\nin expression starting at\
    \ /tmp/tmpo139u4x8.jl:17\n"
  stdout: ''
  timestamp: 1660009038
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    return sum((lst[i]\
    \ for i = 1:length(lst)) % 2 == 0)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2,\
    \ 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpow82babt.jl:13

    '
  stdout: "test set: Error During Test at /tmp/tmpow82babt.jl:16\n  Test threw exception\n\
    \  Expression: candidate([4, 88]) == 88\n  MethodError: no method matching rem(::Base.Generator{UnitRange{Int64},\
    \ var\"#1#2\"{Vector{Int64}}}, ::Int64)\n  Closest candidates are:\n    rem(::Any,\
    \ ::Any, !Matched::RoundingMode{:ToZero}) at ~/.conda/envs/polyglot/share/julia/base/div.jl:80\n\
    \    rem(::Any, ::Any, !Matched::RoundingMode{:Down}) at ~/.conda/envs/polyglot/share/julia/base/div.jl:81\n\
    \    rem(::Any, ::Any, !Matched::RoundingMode{:Up}) at ~/.conda/envs/polyglot/share/julia/base/div.jl:82\n\
    \    ...\n  Stacktrace:\n   [1] add(lst::Vector{Int64})\n     @ Main /tmp/tmpow82babt.jl:9\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpow82babt.jl:16 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpow82babt.jl:15\ntest set:\
    \ Error During Test at /tmp/tmpow82babt.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([4, 5, 6, 7, 2, 122]) == 122\n  MethodError: no method matching rem(::Base.Generator{UnitRange{Int64},\
    \ var\"#1#2\"{Vector{Int64}}}, ::Int64)\n  Closest candidates are:\n    rem(::Any,\
    \ ::Any, !Matched::RoundingMode{:ToZero}) at ~/.conda/envs/polyglot/share/julia/base/div.jl:80\n\
    \    rem(::Any, ::Any, !Matched::RoundingMode{:Down}) at ~/.conda/envs/polyglot/share/julia/base/div.jl:81\n\
    \    rem(::Any, ::Any, !Matched::RoundingMode{:Up}) at ~/.conda/envs/polyglot/share/julia/base/div.jl:82\n\
    \    ...\n  Stacktrace:\n   [1] add(lst::Vector{Int64})\n     @ Main /tmp/tmpow82babt.jl:9\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpow82babt.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpow82babt.jl:15\ntest set:\
    \ Error During Test at /tmp/tmpow82babt.jl:18\n  "
  timestamp: 1660009041
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    sum = 0\n    for\
    \ i in lst[2:2:end]\n        sum += i\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpb5o10hwc.jl:17

    '
  stdout: "test set: Test Failed at /tmp/tmpb5o10hwc.jl:21\n  Expression: candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n   Evaluated: 134 == 122\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpb5o10hwc.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpb5o10hwc.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpb5o10hwc.jl:22\n  Expression: candidate([4, 0, 6, 7]) == 0\n\
    \   Evaluated: 7 == 0\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpb5o10hwc.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpb5o10hwc.jl:19\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     2      4\n"
  timestamp: 1660009039
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    local i\n    local\
    \ evens = 0\n    for i=2:length(lst)\n        if lst[i] % 2 == 1 then evens +=\
    \ lst[i] end\n    end\n    return evens\nend\n</cell>\n<text>\nQuestion 5\nusing\
    \ Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\
    \t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7])\
    \ == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"evens\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmppivd20yn.jl:12\nin expression starting at /tmp/tmppivd20yn.jl:12\n"
  stdout: ''
  timestamp: 1660009038
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    \n    # your code\
    \ here\n    if length(lst) == 0 \n        return \n    \n    even = lst[1 : (length(lst)-1)]\n\
    \    odd = lst[2:end]\n    \n    even.+=(odd)\n    return even\nend\n</cell>\n\
    <code language=julia-1.0>\n@code_warntype add([4, 2, 6, 7])\n</cell>\n<text>\n\
    Problem 8\nImplement a function add_all that takes as input a list of integers\
    \ and returns a sum of all the integers in the list. Also implement a version\
    \ that takes an integer n and returns the sum of all integers from 1 to n (inclusively).\n\
    using Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) ==\
    \ 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1ht2xccy.jl:20\nin expression starting at\
    \ /tmp/tmp1ht2xccy.jl:20\n"
  stdout: ''
  timestamp: 1660009038
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    evens = lst[findall(x\
    \ -> x % 2 == 0, lst)]\n    return sum(evens)\nend\n</cell>\n<text>\nProblem 7\n\
    Add all of the numbers in the given list using loops.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjn6zvh0c.jl:12\nin expression starting at\
    \ /tmp/tmpjn6zvh0c.jl:12\n"
  stdout: ''
  timestamp: 1660009038
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even_index = find_even_index(lst)\n\
    \    even_value = lst[even_index]\n    lst[even_index:end] .+= even_value\n  \
    \  return sum(lst)\nend\n</cell>\n<code language=julia-0.5>\n\"\"\"Given a non-empty\
    \ vector of integers lst. add the odd elements that are at even indices..\nusing\
    \ Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\
    \t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7])\
    \ == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpumpsb55d.jl:14\nin expression starting at\
    \ /tmp/tmpumpsb55d.jl:14\n"
  stdout: ''
  timestamp: 1660009038
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n\"\"\"\nusing Test\n\
    \n@testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpem1p33fb.jl:1\nin expression starting at /tmp/tmpem1p33fb.jl:1\n"
  stdout: ''
  timestamp: 1660009038
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    \"\"\"\n    Your\
    \ function should add all the even elements at odd indices.\n    \"\"\"\n    return\
    \ 0\nend\n</code>\nProblem 2:\nDefine a function that returns the sum between\
    \ the minimum and maximum elements in a given vector. Recall that there are two\
    \ types of vectors in Julia: Vector{Int} and Vector{Any}.\n<|/ a |>\n<| c |>\n\
    I didn't downvote, but this doesn't actually answer the question asked.\n<|/ c\
    \ |>\n<| c |>\nThe question was how to write a function for the problem #2, where\
    \ he wants to add the even elements at odd indices. Your answer doesn't address\
    \ that. And there are other problems with this code as well.\n<|/ c |>\n<| c |>\n\
    I see you posted a comment that said my answer doesn't answer the question, so\
    \ I edited my answer.\n<|/ c |>\n<| c |>\nThanks for the correction. I edited\
    \ my answer based on the new information provided by the OP.\n<|/ c |>\n<| a dscore=3\
    \ tags=julia |>\nAn example of a vectorized solution would be:\n<code>\nsum(v[div(1:length(v_even),\
    \ 2):end]) \n</code>\n<|/ a |>\n<| a tags=julia |>\nThis isn't the most efficient\
    \ solution, but I believe it's easier to understand:\n<code>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6oxc487p.jl:14\nin expression starting at\
    \ /tmp/tmp6oxc487p.jl:14\n"
  stdout: ''
  timestamp: 1660009038
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = Vector{Int64}()\n\
    \    for i in 1:length(lst)\n        if i%2==1\n            push!(even, lst[i])\n\
    \        end\n    end\n    return reduce(+, even)\nend\n</cell>\n<code language=julia-1.5>\n\
    add([4, 2, 6, 7])\n</cell>\n<text>\nThe last function defined will apply the above\
    \ function to each element in the passed list.\nusing Test\n\n@testset begin\n\
    \ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5,\
    \ 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpu54gcxac.jl:17\nin expression starting at\
    \ /tmp/tmpu54gcxac.jl:17\n"
  stdout: ''
  timestamp: 1660009038
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = filter(x\
    \ -> x % 2 == 0, lst)\n    return sum(even)\nend\n</cell>\n<text>\nExercise 4:\n\
    Write a function named add_even that takes a vector of integers and returns the\
    \ sum of the even elements.\nusing Test\n\n@testset begin\n\ncandidate = add;\n\
    \t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) ==\
    \ 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8])\
    \ == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzbjjmkak.jl:12\nin expression starting at\
    \ /tmp/tmpzbjjmkak.jl:12\n"
  stdout: ''
  timestamp: 1660009038
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    n=0\n    for x\
    \ in lst\n        n+=x%2 == 0\n    end\n    return n\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpiud4z209.jl:17

    '
  stdout: "test set: Test Failed at /tmp/tmpiud4z209.jl:20\n  Expression: candidate([4,\
    \ 88]) == 88\n   Evaluated: 2 == 88\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpiud4z209.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpiud4z209.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpiud4z209.jl:21\n  Expression: candidate([4, 5, 6, 7, 2, 122])\
    \ == 122\n   Evaluated: 4 == 122\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpiud4z209.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpiud4z209.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpiud4z209.jl:22\n  Expression: candidate([4, 0, 6, 7]) == 0\n\
    \   Evaluated: 3 == 0\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpiud4z209.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpiud4z209.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpiud4z209.jl:23\n  Expression: candidate([4, 4, 6, 8]) == 12\n\
    \   Evaluated: 4 == 12\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpiud4z209.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpiud4z209.jl:19\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  timestamp: 1660009039
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    sum = 0\n    for\
    \ x in lst\n        if x % 2 == 0\n            sum += x\n        end\n    end\n\
    \    return sum\nend\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4,\
    \ 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp_t1mr62g.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmp_t1mr62g.jl:22\n  Expression: candidate([4,\
    \ 88]) == 88\n   Evaluated: 92 == 88\nStacktrace:\n [1] macro expansion\n   @\
    \ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp_t1mr62g.jl:22 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp_t1mr62g.jl:21\ntest set: Test Failed at /tmp/tmp_t1mr62g.jl:23\n\
    \  Expression: candidate([4, 5, 6, 7, 2, 122]) == 122\n   Evaluated: 134 == 122\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_t1mr62g.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_t1mr62g.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp_t1mr62g.jl:24\n  Expression: candidate([4, 0, 6, 7]) == 0\n\
    \   Evaluated: 10 == 0\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_t1mr62g.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_t1mr62g.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp_t1mr62g.jl:25\n  Expression: candidate([4, 4, 6, 8]) == 12\n\
    \   Evaluated: 22 == 12\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_t1mr62g.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_t1mr62g.jl:21\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  timestamp: 1660009041
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = findall(x\
    \ -> x % 2 ==0, lst)\n    return sum(lst[even])\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5,\
    \ 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpn5t1dyn4.jl:14

    '
  stdout: "test set: Test Failed at /tmp/tmpn5t1dyn4.jl:17\n  Expression: candidate([4,\
    \ 88]) == 88\n   Evaluated: 92 == 88\nStacktrace:\n [1] macro expansion\n   @\
    \ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpn5t1dyn4.jl:17 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpn5t1dyn4.jl:16\ntest set: Test Failed at /tmp/tmpn5t1dyn4.jl:18\n\
    \  Expression: candidate([4, 5, 6, 7, 2, 122]) == 122\n   Evaluated: 134 == 122\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpn5t1dyn4.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpn5t1dyn4.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpn5t1dyn4.jl:19\n  Expression: candidate([4, 0, 6, 7]) == 0\n\
    \   Evaluated: 10 == 0\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpn5t1dyn4.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpn5t1dyn4.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpn5t1dyn4.jl:20\n  Expression: candidate([4, 4, 6, 8]) == 12\n\
    \   Evaluated: 22 == 12\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpn5t1dyn4.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpn5t1dyn4.jl:16\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  timestamp: 1660009041
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    if length(lst)\
    \ == 0 \n        return 0 \n    else \n        if length(lst) == 1 \n        \
    \    return lst[1] \n        else \n            return add(lst[end-2]) + add(lst[end-1])\
    \ \n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4,\
    \ 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxbi0buij.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxbi0buij.jl:1\n\
    in expression starting at /tmp/tmpxbi0buij.jl:1\n"
  stdout: ''
  timestamp: 1660009040
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    evens = Vector{Int64}(lst)\n\
    \    for i in length(evens):-1:2\n        evens[i] = evens[i+1] + evens[i]\n \
    \   end\n    return sum(evens)\nend\n</cell>\n<code language=julia-0.6>\nadd([4,\
    \ 2, 6, 7])\n</cell>\n<code language=julia-0.6>\n@assert add([4, 2, 6, 7]) ==\
    \ 10\n</cell>\n<text>\nExercise: Write a function named add_evens that given an\
    \ integer, returns the sum of all even numbers below that integer\nusing Test\n\
    \n@testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmph7bplo71.jl:15\nin expression starting at\
    \ /tmp/tmph7bplo71.jl:15\n"
  stdout: ''
  timestamp: 1660009040
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = vec(lst)[findall(vec(lst)\
    \ .%% 2==0)]\n    even += vec(lst)[findall(vec(lst) .%% 2==1)]\n    return even\n\
    end\n</cell>\n<code language=julia-0.6>\n# %load solutions/sol_17.py\n</cell>\n\
    <text>\nProblem 18\nGiven an integer n, return the number of trailing zeroes in\
    \ n!.\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4,\
    \ 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"%\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpw_1eg_77.jl:9\nin expression starting at /tmp/tmpw_1eg_77.jl:9\n"
  stdout: ''
  timestamp: 1660009040
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    return lst[2::2]\n\
    end\n</cell>\n<code language=julia-1.5>\n\"\"\"Given a vector of integers lst,\
    \ return a vector of integers lst2 such that lst2[i] is lst[i] times i..\nusing\
    \ Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\
    \t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7])\
    \ == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpeqq3wqvt.jl:11\nin expression starting at\
    \ /tmp/tmpeqq3wqvt.jl:11\n"
  stdout: ''
  timestamp: 1660009040
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = 0\n   \
    \ odd = 1\n    while odd <= length(lst)\n        if lst[odd] % 2 == 1\n      \
    \      even += lst[odd]\n        end\n        odd += 1\n    end\n    return even\n\
    end\n</code>\nThis code iterates over the list and counts the sum of odd numbers\
    \ up to the end of the list.\nAn equivalent code would be:\n<code>\nusing Test\n\
    \n@testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyxganj8j.jl:19\nin expression starting at\
    \ /tmp/tmpyxganj8j.jl:19\n"
  stdout: ''
  timestamp: 1660009040
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n  for i in 2:length(lst)\n\
    \    if lst[i] % 2 == 0 && lst[i-1] % 2 == 1\n      lst[i] +=2\n    end\n  end\n\
    \  return sum(lst)\nend\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t\
    @test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\
    \t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpriri_9db.jl:18

    '
  stdout: "test set: Test Failed at /tmp/tmpriri_9db.jl:21\n  Expression: candidate([4,\
    \ 88]) == 88\n   Evaluated: 92 == 88\nStacktrace:\n [1] macro expansion\n   @\
    \ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpriri_9db.jl:21 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpriri_9db.jl:20\ntest set: Test Failed at /tmp/tmpriri_9db.jl:22\n\
    \  Expression: candidate([4, 5, 6, 7, 2, 122]) == 122\n   Evaluated: 150 == 122\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpriri_9db.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpriri_9db.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpriri_9db.jl:23\n  Expression: candidate([4, 0, 6, 7]) == 0\n\
    \   Evaluated: 17 == 0\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpriri_9db.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpriri_9db.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpriri_9db.jl:24\n  Expression: candidate([4, 4, 6, 8]) == 12\n\
    \   Evaluated: 22 == 12\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpriri_9db.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpriri_9db.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  timestamp: 1660009041
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    return sum(lst[1\
    \ : (end-lst)/2])\nend\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4,\
    \ 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpxlk00dlw.jl:13

    '
  stdout: "test set: Error During Test at /tmp/tmpxlk00dlw.jl:16\n  Test threw exception\n\
    \  Expression: candidate([4, 88]) == 88\n  MethodError: no method matching -(::Int64,\
    \ ::Vector{Int64})\n  For element-wise subtraction, use broadcasting with dot\
    \ syntax: scalar .- array\n  Closest candidates are:\n    -(::Union{Int128, Int16,\
    \ Int32, Int64, Int8, UInt128, UInt16, UInt32, UInt64, UInt8}) at ~/.conda/envs/polyglot/share/julia/base/int.jl:85\n\
    \    -(::T, !Matched::T) where T<:Union{Int128, Int16, Int32, Int64, Int8, UInt128,\
    \ UInt16, UInt32, UInt64, UInt8} at ~/.conda/envs/polyglot/share/julia/base/int.jl:86\n\
    \    -(::Union{Int16, Int32, Int64, Int8}, !Matched::BigInt) at ~/.conda/envs/polyglot/share/julia/base/gmp.jl:537\n\
    \    ...\n  Stacktrace:\n   [1] add(lst::Vector{Int64})\n     @ Main /tmp/tmpxlk00dlw.jl:9\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpxlk00dlw.jl:16 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpxlk00dlw.jl:15\ntest set:\
    \ Error During Test at /tmp/tmpxlk00dlw.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([4, 5, 6, 7, 2, 122]) == 122\n  MethodError: no method matching -(::Int64,\
    \ ::Vector{Int64})\n  For element-wise subtraction, use broadcasting with dot\
    \ syntax: scalar .- array\n  Closest candidates are:\n    -(::Union{Int128, Int16,\
    \ Int32, Int64, Int8, UInt128, UInt16, UInt32, UInt64, UInt8}) at ~/.conda/envs/polyglot/share/julia/base/int.jl:85\n\
    \    -(::T, !Matched::T) where T<:Union{Int128, Int16, Int32, Int64, Int8, UInt128,\
    \ UInt16, UInt32, UInt64, UInt8} at ~/.conda/envs/polyglot/share/julia/base/int.jl:86\n\
    \    -(::Union{Int16, Int32, Int64, Int8}, !Matched::BigInt) at ~/.conda/envs/polyglot/share/julia/base/gmp.jl:537\n\
    \    ...\n  Stacktrace:\n   [1] add(lst::Vector{Int64})\n     @ Main /tmp/tmpxlk00dlw.jl:9\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]"
  timestamp: 1660009043
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    if length(lst)\
    \ == 0 \n        return 0\n    end\n    even = []\n    odd = []\n    for el in\
    \ lst\n        if el % 2 == 0\n            push!(even, el)\n        else\n   \
    \         push!(odd, el)\n        end\n    end\n    for i in even\n        lst[i]\
    \ = lst[i] + odd[i]\n    end\n    return sum(lst)\nend\n</code>\nAnd for sum is\
    \ this \n<code>\n\"\"\"Given a non-empty vector of integers lst. compute the sum\
    \ of the even elements that are at odd indices..\nusing Test\n\n@testset begin\n\
    \ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5,\
    \ 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxa6vgu17.jl:26\nin expression starting at\
    \ /tmp/tmpxa6vgu17.jl:26\n"
  stdout: ''
  timestamp: 1660009040
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    for i in length(lst)\
    \ \n        if mod(lst[i], 2) == 0 \n            lst[i] = lst[i] + 2\n       \
    \ end \n    end \n    return lst[1] \nend \n</cell>\n<text>\nExercise 10\nThe\
    \ function is_even(i::Int64) takes one parameter, i. \nIt returns True if i is\
    \ even, and False otherwise. \nUse it to test the function add() you wrote earlier.\
    \ \nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88])\
    \ == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1q5nw5xv.jl:16\nin expression starting at\
    \ /tmp/tmp1q5nw5xv.jl:16\n"
  stdout: ''
  timestamp: 1660009040
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    lst = copy(lst)\n\
    \    for i in lst.indices \n        if lst[i] % 2 == 0 \n            lst[i] =\
    \ lst[i] + 2 \n        else \n            lst[i] = lst[i] + 1 \n        end\n\
    \    end\n    return sum(lst)\nend\n</cell>\n<cell>\n#export\n\"\"\"Given a non-empty\
    \ vector of integers lst. add the odd elements that are at even indices..\nusing\
    \ Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\
    \t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7])\
    \ == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpn9b0y3t6.jl:19\nin expression starting at\
    \ /tmp/tmpn9b0y3t6.jl:19\n"
  stdout: ''
  timestamp: 1660009040
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n  if length(lst) ==\
    \ 1\n    return lst[1]\n  else\n    return lst[1] + add(lst[2 : end])\n  end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88])\
    \ == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpopcymd8r.jl:17

    '
  stdout: "test set: Test Failed at /tmp/tmpopcymd8r.jl:20\n  Expression: candidate([4,\
    \ 88]) == 88\n   Evaluated: 92 == 88\nStacktrace:\n [1] macro expansion\n   @\
    \ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpopcymd8r.jl:20 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpopcymd8r.jl:19\ntest set: Test Failed at /tmp/tmpopcymd8r.jl:21\n\
    \  Expression: candidate([4, 5, 6, 7, 2, 122]) == 122\n   Evaluated: 146 == 122\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpopcymd8r.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpopcymd8r.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpopcymd8r.jl:22\n  Expression: candidate([4, 0, 6, 7]) == 0\n\
    \   Evaluated: 17 == 0\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpopcymd8r.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpopcymd8r.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpopcymd8r.jl:23\n  Expression: candidate([4, 4, 6, 8]) == 12\n\
    \   Evaluated: 22 == 12\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpopcymd8r.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpopcymd8r.jl:19\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  timestamp: 1660009041
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    lst\n    evens\
    \ = lst .% 2 == 0\n    even_indices = filter(x -> x==true, lst.take(evens))\n\
    \    sum = 0\n    for index in even_indices:\n        sum += lst[index]\n    end\n\
    \    return sum\nend\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4,\
    \ 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9b6wdyxv.jl:14\nin expression starting at\
    \ /tmp/tmp9b6wdyxv.jl:14\n"
  stdout: ''
  timestamp: 1660009040
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    \"\"\"Given a\
    \ non-empty vector of integers lst. add the even elements that are at odd indices..\n\
    using Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) ==\
    \ 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqv3huar1.jl:1\nin expression starting at /tmp/tmpqv3huar1.jl:1\n"
  stdout: ''
  timestamp: 1660008982
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    sum = 0\n    for\
    \ i in lst\n        if i %2 == 1 \n            sum +=i\n        end\n    end\n\
    \    return sum\nend\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4,\
    \ 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp_92t6l7s.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmp_92t6l7s.jl:22\n  Expression: candidate([4,\
    \ 88]) == 88\n   Evaluated: 0 == 88\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_92t6l7s.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_92t6l7s.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp_92t6l7s.jl:23\n  Expression: candidate([4, 5, 6, 7, 2, 122])\
    \ == 122\n   Evaluated: 12 == 122\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_92t6l7s.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_92t6l7s.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp_92t6l7s.jl:24\n  Expression: candidate([4, 0, 6, 7]) == 0\n\
    \   Evaluated: 7 == 0\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_92t6l7s.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_92t6l7s.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp_92t6l7s.jl:25\n  Expression: candidate([4, 4, 6, 8]) == 12\n\
    \   Evaluated: 0 == 12\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_92t6l7s.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_92t6l7s.jl:21\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  timestamp: 1660009041
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n  result = 0\n  for\
    \ n in lst\n    result += n%2 == 0\n  end\n  return result\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp5fei9mgl.jl:17

    '
  stdout: "test set: Test Failed at /tmp/tmp5fei9mgl.jl:20\n  Expression: candidate([4,\
    \ 88]) == 88\n   Evaluated: 2 == 88\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5fei9mgl.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5fei9mgl.jl:19\ntest set: Test\
    \ Failed at /tmp/tmp5fei9mgl.jl:21\n  Expression: candidate([4, 5, 6, 7, 2, 122])\
    \ == 122\n   Evaluated: 4 == 122\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5fei9mgl.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5fei9mgl.jl:19\ntest set: Test\
    \ Failed at /tmp/tmp5fei9mgl.jl:22\n  Expression: candidate([4, 0, 6, 7]) == 0\n\
    \   Evaluated: 3 == 0\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5fei9mgl.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5fei9mgl.jl:19\ntest set: Test\
    \ Failed at /tmp/tmp5fei9mgl.jl:23\n  Expression: candidate([4, 4, 6, 8]) == 12\n\
    \   Evaluated: 4 == 12\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5fei9mgl.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5fei9mgl.jl:19\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  timestamp: 1660009041
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    evens = lst[1\
    \ .. end]\n    odd = lst[2 .. end]\n    return sum(x for (x,y) in  zip(evens,odd)\
    \ if (x % 2)==0)\nend\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4,\
    \ 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpqukr74k2.jl:15

    '
  stdout: "test set: Error During Test at /tmp/tmpqukr74k2.jl:18\n  Test threw exception\n\
    \  Expression: candidate([4, 88]) == 88\n  UndefVarError: .. not defined\n  Stacktrace:\n\
    \   [1] add(lst::Vector{Int64})\n     @ Main /tmp/tmpqukr74k2.jl:9\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpqukr74k2.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpqukr74k2.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpqukr74k2.jl:19\n  Test threw exception\n  Expression:\
    \ candidate([4, 5, 6, 7, 2, 122]) == 122\n  UndefVarError: .. not defined\n  Stacktrace:\n\
    \   [1] add(lst::Vector{Int64})\n     @ Main /tmp/tmpqukr74k2.jl:9\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpqukr74k2.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpqukr74k2.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpqukr74k2.jl:20\n  Test threw exception\n  Expression:\
    \ candidate([4, 0, 6, 7]) == 0\n  UndefVarError: .. not defined\n  Stacktrace:\n\
    \   [1] add(lst::Vector{Int64})\n     @ Main /tmp/tmpqukr74k2.jl:9\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpqukr74k2.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpqukr74k2.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpqukr74k2.jl:21\n  Test threw exception\n  Expression:\
    \ candidate([4, 4, 6, 8]) == 12\n  UndefVarError: .. not defined\n  Stacktrace:\n\
    \   [1] add(lst::Vector{Int64})\n     @ Main /tmp/tmpqukr74k2.jl:9\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] mac"
  timestamp: 1660009042
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    if lst.length\
    \ == 2\n        lst.push!(lst[1])\n        lst[1] = 0\n    end\n    \n    for\
    \ i in 2::length(lst)\n        lst[i] = lst[i-2] + lst[i-1]\n    end\n    \n \
    \   if length(lst) == 2\n        return lst[1]\n    end\n    \n    return 0\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88])\
    \ == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmp673rrk4t.jl:26

    '
  stdout: "test set: Error During Test at /tmp/tmp673rrk4t.jl:29\n  Test threw exception\n\
    \  Expression: candidate([4, 88]) == 88\n  type Array has no field length\n  Stacktrace:\n\
    \   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] add(lst::Vector{Int64})\n\
    \     @ Main /tmp/tmp673rrk4t.jl:9\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp673rrk4t.jl:29 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp673rrk4t.jl:28\ntest set:\
    \ Error During Test at /tmp/tmp673rrk4t.jl:30\n  Test threw exception\n  Expression:\
    \ candidate([4, 5, 6, 7, 2, 122]) == 122\n  type Array has no field length\n \
    \ Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] add(lst::Vector{Int64})\n\
    \     @ Main /tmp/tmp673rrk4t.jl:9\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp673rrk4t.jl:30 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp673rrk4t.jl:28\ntest set:\
    \ Error During Test at /tmp/tmp673rrk4t.jl:31\n  Test threw exception\n  Expression:\
    \ candidate([4, 0, 6, 7]) == 0\n  type Array has no field length\n  Stacktrace:\n\
    \   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] add(lst::Vector{Int64})\n\
    \     @ Main /tmp/tmp673rrk4t.jl:9\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp673rrk4t.jl:31 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp673rrk4t.jl:28\ntest set:\
    \ Error During Test at /tmp/tmp673rrk4t.jl:32\n  Test threw exception\n  Expression:\
    \ candidate([4, 4, 6, 8]) == 12\n  type Array has no field length\n  Stacktrace:\n\
    \   [1] getproperty\n     @ ./Base"
  timestamp: 1660009042
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n   n = length(lst)\n\
    \   sum = 0\n   if n <= 0 \n       return 0\n   end \n   for x in lst\n      \
    \ if x % 2 != 0\n           sum += x\n       elseif x % 2 == 0\n           sum\
    \ += 2*x \n       end\n   end\n   return sum\nend\"\"\"\n</cell>\n<text>\nQuestion\
    \ 2\nWrite a function that returns the smallest integer that is not evenly divisible\
    \ by all of the numbers from 0 to n. For example, given the vector [4, 2, 6, 7],\
    \ your function should return 8.\nusing Test\n\n@testset begin\n\ncandidate =\
    \ add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122])\
    \ == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6,\
    \ 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: extra token \"\"\" after end of expression\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmps8fqygsc.jl:22\nin expression\
    \ starting at /tmp/tmps8fqygsc.jl:22\n"
  stdout: ''
  timestamp: 1660009041
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n  even::Bool=false\n\
    \  even=false\n  even=false\n  for i in lst\n    if i%2==0\n      if even==false\n\
    \        even=true\n      else\n        return i\n      end\n    end\n  end\n\
    end\n</cell>\n<text>\nProblem 7. Given a vector of length n, return a boolean\
    \ indicating if the vector is palindrome or not.\nusing Test\n\n@testset begin\n\
    \ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5,\
    \ 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyk03oo9p.jl:22\nin expression starting at\
    \ /tmp/tmpyk03oo9p.jl:22\n"
  stdout: ''
  timestamp: 1660009041
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    sum = sum(lst[2:end-1])\n\
    \    sum%2==1 ? sum+1 : sum\nend\n</cell>\n<text>\nQuestion 6\nWrite a function\
    \ that checks whether a number is even or odd.\nusing Test\n\n@testset begin\n\
    \ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5,\
    \ 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpoqpdqa6x.jl:12\nin expression starting at\
    \ /tmp/tmpoqpdqa6x.jl:12\n"
  stdout: ''
  timestamp: 1660009041
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    sum = 0\n    for\
    \ i in 2:length(lst)\n        if lst[i] % 2 == 0\n            sum += lst[i]\n\
    \        end\n    end\n    return sum\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2,\
    \ 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp15k8g09m.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmp15k8g09m.jl:23\n  Expression: candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n   Evaluated: 130 == 122\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp15k8g09m.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp15k8g09m.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp15k8g09m.jl:24\n  Expression: candidate([4, 0, 6, 7]) == 0\n\
    \   Evaluated: 6 == 0\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp15k8g09m.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp15k8g09m.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp15k8g09m.jl:25\n  Expression: candidate([4, 4, 6, 8]) == 12\n\
    \   Evaluated: 18 == 12\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp15k8g09m.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp15k8g09m.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  timestamp: 1660009042
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even_ind = findall(x\
    \ -> mod(x, 2) == 0, lst)\n    return sum(lst[even_ind])\nend\n</cell>\n<code\
    \ language=julia-1.3>\nadd([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<text>\nExercise\
    \ 3\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88])\
    \ == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9ol3sby0.jl:12\nin expression starting at\
    \ /tmp/tmp9ol3sby0.jl:12\n"
  stdout: ''
  timestamp: 1660009042
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    # lst = sort(lst)\n\
    \    # lst = vec(lst)\n    return sum(lst[1::2])\nusing Test\n\n@testset begin\n\
    \ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5,\
    \ 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpempbsye2.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpempbsye2.jl:1\n\
    in expression starting at /tmp/tmpempbsye2.jl:1\n"
  stdout: ''
  timestamp: 1660009042
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    \n    # Your code\
    \ here\n    \nend\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4,\
    \ 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpzvyrml3o.jl:15

    '
  stdout: "test set: Error During Test at /tmp/tmpzvyrml3o.jl:18\n  Test threw exception\n\
    \  Expression: candidate([4, 88]) == 88\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::Ptr) where T<:Integer at ~/.conda/envs/polyglot/share/julia/base/pointer.jl:23\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:7\n\
    \    ...\n  Stacktrace:\n   [1] add(lst::Vector{Int64})\n     @ Main /tmp/tmpzvyrml3o.jl:12\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpzvyrml3o.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpzvyrml3o.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpzvyrml3o.jl:19\n  Test threw exception\n  Expression:\
    \ candidate([4, 5, 6, 7, 2, 122]) == 122\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::Ptr) where T<:Integer at ~/.conda/envs/polyglot/share/julia/base/pointer.jl:23\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:7\n\
    \    ...\n  Stacktrace:\n   [1] add(lst::Vector{Int64})\n     @ Main /tmp/tmpzvyrml3o.jl:12\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpzvyrml3o.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpzvyrml3o.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpzvyrml3o.jl:20\n  Test threw exception"
  timestamp: 1660009044
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even_indices =\
    \ findall(x->mod(x, 2)==0, lst)\n    return sum(lst[even_indices])\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\
    \t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7])\
    \ == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp95zxypk7.jl:14

    '
  stdout: "test set: Test Failed at /tmp/tmp95zxypk7.jl:17\n  Expression: candidate([4,\
    \ 88]) == 88\n   Evaluated: 92 == 88\nStacktrace:\n [1] macro expansion\n   @\
    \ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp95zxypk7.jl:17 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp95zxypk7.jl:16\ntest set: Test Failed at /tmp/tmp95zxypk7.jl:18\n\
    \  Expression: candidate([4, 5, 6, 7, 2, 122]) == 122\n   Evaluated: 134 == 122\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp95zxypk7.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp95zxypk7.jl:16\ntest set: Test\
    \ Failed at /tmp/tmp95zxypk7.jl:19\n  Expression: candidate([4, 0, 6, 7]) == 0\n\
    \   Evaluated: 10 == 0\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp95zxypk7.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp95zxypk7.jl:16\ntest set: Test\
    \ Failed at /tmp/tmp95zxypk7.jl:20\n  Expression: candidate([4, 4, 6, 8]) == 12\n\
    \   Evaluated: 22 == 12\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp95zxypk7.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp95zxypk7.jl:16\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  timestamp: 1660009042
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    evens = filter(x\
    \ -> mod(x, 2) == 0, lst)\n    return sum(evens)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpi6kuxl21.jl:14

    '
  stdout: "test set: Test Failed at /tmp/tmpi6kuxl21.jl:17\n  Expression: candidate([4,\
    \ 88]) == 88\n   Evaluated: 92 == 88\nStacktrace:\n [1] macro expansion\n   @\
    \ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpi6kuxl21.jl:17 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpi6kuxl21.jl:16\ntest set: Test Failed at /tmp/tmpi6kuxl21.jl:18\n\
    \  Expression: candidate([4, 5, 6, 7, 2, 122]) == 122\n   Evaluated: 134 == 122\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpi6kuxl21.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpi6kuxl21.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpi6kuxl21.jl:19\n  Expression: candidate([4, 0, 6, 7]) == 0\n\
    \   Evaluated: 10 == 0\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpi6kuxl21.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpi6kuxl21.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpi6kuxl21.jl:20\n  Expression: candidate([4, 4, 6, 8]) == 12\n\
    \   Evaluated: 22 == 12\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpi6kuxl21.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpi6kuxl21.jl:16\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  timestamp: 1660009042
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    for i in 2:length(lst)\n\
    \        if mod(lst[i], 2) == 0\n            lst[i] += lst[i-1]\n        end\n\
    \    end\n    return sum(lst)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2,\
    \ 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpzya2jtsm.jl:18

    '
  stdout: "test set: Test Failed at /tmp/tmpzya2jtsm.jl:21\n  Expression: candidate([4,\
    \ 88]) == 88\n   Evaluated: 96 == 88\nStacktrace:\n [1] macro expansion\n   @\
    \ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpzya2jtsm.jl:21 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpzya2jtsm.jl:20\ntest set: Test Failed at /tmp/tmpzya2jtsm.jl:22\n\
    \  Expression: candidate([4, 5, 6, 7, 2, 122]) == 122\n   Evaluated: 167 == 122\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzya2jtsm.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzya2jtsm.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpzya2jtsm.jl:23\n  Expression: candidate([4, 0, 6, 7]) == 0\n\
    \   Evaluated: 25 == 0\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzya2jtsm.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzya2jtsm.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpzya2jtsm.jl:24\n  Expression: candidate([4, 4, 6, 8]) == 12\n\
    \   Evaluated: 48 == 12\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzya2jtsm.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzya2jtsm.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  timestamp: 1660009042
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    n=0\n    for elem\
    \ in lst\n        if mod(elem, 2)==1\n            n+=elem\n        end\n    end\n\
    \    return n\nend\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4,\
    \ 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpc3033xgo.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmpc3033xgo.jl:22\n  Expression: candidate([4,\
    \ 88]) == 88\n   Evaluated: 0 == 88\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpc3033xgo.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpc3033xgo.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpc3033xgo.jl:23\n  Expression: candidate([4, 5, 6, 7, 2, 122])\
    \ == 122\n   Evaluated: 12 == 122\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpc3033xgo.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpc3033xgo.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpc3033xgo.jl:24\n  Expression: candidate([4, 0, 6, 7]) == 0\n\
    \   Evaluated: 7 == 0\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpc3033xgo.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpc3033xgo.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpc3033xgo.jl:25\n  Expression: candidate([4, 4, 6, 8]) == 12\n\
    \   Evaluated: 0 == 12\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpc3033xgo.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpc3033xgo.jl:21\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  timestamp: 1660009043
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    sum_so_far = 0\n\
    \    sum = 0\n    for i in lst \n        if i%2 == 0 \n            sum_so_far\
    \ += i\n        else \n            sum += sum_so_far\n    end\n    return sum\n\
    end\n</cell>\n<text>\n$${\\displaystyle \\text{Add all elements from lst}}$$\n\
    using Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) ==\
    \ 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpilfy07km.jl:19\nin expression starting at\
    \ /tmp/tmpilfy07km.jl:19\n"
  stdout: ''
  timestamp: 1660009042
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = findall(x\
    \ -> mod(x,2) == 1, lst)\n    lst[even] +=  lst[odd]\n    nothing\nend\n</cell>\n\
    <text>\nSolution 2\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4,\
    \ 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpha8gjjm1.jl:13\nin expression starting at\
    \ /tmp/tmpha8gjjm1.jl:13\n"
  stdout: ''
  timestamp: 1660009042
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    \n    even_idx\
    \ = findindices(lst, &mod(lst, 2) == 1)\n    lst[even_idx] +=  lst[findindices(lst,\
    \ &mod(lst, 2) == 1)]\n    \n    return length(lst)\nend\n</cell>\n<code language=julia-1.5>\n\
    # check your code - feel free to copy and paste this\n@code_warntype add([4, 2,\
    \ 6, 7])\n</cell>\n<text>\nProblem 4\nWrite a Julia function called myisisq that\
    \ takes as input a vector of integers lst and a number k, and returns true if\
    \ any 2 numbers in the vector are equal to k squared, false otherwise. For example,\
    \ myisisq([4, 2, 6, 7], 2) should return true. Hint: Use nested for loops to solve\
    \ this problem\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4,\
    \ 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid syntax &(mod(lst, 2)) around /tmp/tmp3j8yjsnm.jl:10\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmp3j8yjsnm.jl:1\nin expression starting\
    \ at /tmp/tmp3j8yjsnm.jl:1\n"
  stdout: ''
  timestamp: 1660009042
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    n=length(lst)\n\
    \    even=lst[div(n,2)]\n    return even + lst[div(n,2)]\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpwdi26yqv.jl:15

    '
  stdout: "test set: Test Failed at /tmp/tmpwdi26yqv.jl:18\n  Expression: candidate([4,\
    \ 88]) == 88\n   Evaluated: 8 == 88\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwdi26yqv.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwdi26yqv.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpwdi26yqv.jl:19\n  Expression: candidate([4, 5, 6, 7, 2, 122])\
    \ == 122\n   Evaluated: 12 == 122\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwdi26yqv.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwdi26yqv.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpwdi26yqv.jl:21\n  Expression: candidate([4, 4, 6, 8]) == 12\n\
    \   Evaluated: 8 == 12\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwdi26yqv.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwdi26yqv.jl:17\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  timestamp: 1660009044
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    total = 0\n  \
    \  for x in lst\n        if x % 2 == 0\n            total += x\n        end\n\
    \    end\n    return total\nend\n</cell>\n<code language=julia-1.0>\nusing Test\n\
    \n@testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5xpbzjh_.jl:17\nin expression starting at\
    \ /tmp/tmp5xpbzjh_.jl:17\n"
  stdout: ''
  timestamp: 1660009042
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    if length(lst)\
    \ == 0 \n        return 0 \n    odd = 1 \n    for i in lst[2:end] \n        if\
    \ i%2 == 1 \n            odd += 1 \n        end \n    end \n    return odd \n\
    end \nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4,\
    \ 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp62fdv12z.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp62fdv12z.jl:1\n\
    in expression starting at /tmp/tmp62fdv12z.jl:1\n"
  stdout: ''
  timestamp: 1660009043
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    if length(lst)\
    \ == 0 \n        return 0 \n    else \n        if length(lst) == 1 \n        \
    \    return lst[1] \n        else\n            return add(lst[1 : end-2]) + add(lst[end-2:end])\
    \ \n        end\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = add;\n\
    \t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) ==\
    \ 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8])\
    \ == 12)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpwedb_jlb.jl:21

    '
  stdout: "test set: Error During Test at /tmp/tmpwedb_jlb.jl:24\n  Test threw exception\n\
    \  Expression: candidate([4, 88]) == 88\n  BoundsError: attempt to access 2-element\
    \ Vector{Int64} at index [0:2]\n  Stacktrace:\n   [1] throw_boundserror(A::Vector{Int64},\
    \ I::Tuple{UnitRange{Int64}})\n     @ Base ./abstractarray.jl:691\n   [2] checkbounds\n\
    \     @ ./abstractarray.jl:656 [inlined]\n   [3] getindex\n     @ ./array.jl:867\
    \ [inlined]\n   [4] add(lst::Vector{Int64})\n     @ Main /tmp/tmpwedb_jlb.jl:15\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpwedb_jlb.jl:24 [inlined]\n\
    \   [7] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpwedb_jlb.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpwedb_jlb.jl:25\n  Test threw exception\n  Expression:\
    \ candidate([4, 5, 6, 7, 2, 122]) == 122\n  BoundsError: attempt to access 2-element\
    \ Vector{Int64} at index [0:2]\n  Stacktrace:\n   [1] throw_boundserror(A::Vector{Int64},\
    \ I::Tuple{UnitRange{Int64}})\n     @ Base ./abstractarray.jl:691\n   [2] checkbounds\n\
    \     @ ./abstractarray.jl:656 [inlined]\n   [3] getindex\n     @ ./array.jl:867\
    \ [inlined]\n   [4] add(lst::Vector{Int64}) (repeats 3 times)\n     @ Main /tmp/tmpwedb_jlb.jl:15\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpwedb_jlb.jl:25 [inlined]\n\
    \   [7] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpwedb_jlb.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpwedb_jlb.jl:26\n  Test threw exception\n  Expression:\
    \ candidate([4, 0, 6, 7]) == 0\n  BoundsError: attempt to access 2-element Vector{Int64}\
    \ at index [0:2]\n  Stacktrace:\n   [1] throw_boundserror(A::Vector{Int64}, I::Tuple{UnitRange{Int64}})\n\
    \     @ Base ./abstractarray.jl:691\n   [2] checkbounds\n     @ ./abstractarray.jl:656\
    \ [inlined]\n   [3] getindex\n "
  timestamp: 1660009045
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    if lst.length\
    \ == 0 return 0\n    if lst.length == 1 return lst[1]\n    \n    even = 0\n  \
    \  odd = 1\n    \n    for index in 2:lst.length\n        if lst[index] % 2 ==\
    \ 0 \n            even += lst[index]\n        else\n            odd += lst[index]\n\
    \        end\n    end\n    return even + odd\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5,\
    \ 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzymuz9la.jl:1\nin expression starting at /tmp/tmpzymuz9la.jl:1\n"
  stdout: ''
  timestamp: 1660009043
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n  even_sum = 0\n \
    \ for i in lst \n    if i%2 ==0 \n      even_sum += i \n    end\n  end\n  return\
    \ even_sum\nend\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4,\
    \ 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpssp__mdb.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmpssp__mdb.jl:22\n  Expression: candidate([4,\
    \ 88]) == 88\n   Evaluated: 92 == 88\nStacktrace:\n [1] macro expansion\n   @\
    \ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpssp__mdb.jl:22 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpssp__mdb.jl:21\ntest set: Test Failed at /tmp/tmpssp__mdb.jl:23\n\
    \  Expression: candidate([4, 5, 6, 7, 2, 122]) == 122\n   Evaluated: 134 == 122\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpssp__mdb.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpssp__mdb.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpssp__mdb.jl:24\n  Expression: candidate([4, 0, 6, 7]) == 0\n\
    \   Evaluated: 10 == 0\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpssp__mdb.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpssp__mdb.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpssp__mdb.jl:25\n  Expression: candidate([4, 4, 6, 8]) == 12\n\
    \   Evaluated: 22 == 12\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpssp__mdb.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpssp__mdb.jl:21\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  timestamp: 1660009044
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    for index in 2:length(lst)\n\
    \        if lst[index] % 2 == 0\n            lst[index] +=2\n        end\n   \
    \ end\n    return lst[1]\nend\nusing Test\n\n@testset begin\n\ncandidate = add;\n\
    \t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) ==\
    \ 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8])\
    \ == 12)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpfj0pyzpg.jl:18

    '
  stdout: "test set: Test Failed at /tmp/tmpfj0pyzpg.jl:21\n  Expression: candidate([4,\
    \ 88]) == 88\n   Evaluated: 4 == 88\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfj0pyzpg.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfj0pyzpg.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpfj0pyzpg.jl:22\n  Expression: candidate([4, 5, 6, 7, 2, 122])\
    \ == 122\n   Evaluated: 4 == 122\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfj0pyzpg.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfj0pyzpg.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpfj0pyzpg.jl:23\n  Expression: candidate([4, 0, 6, 7]) == 0\n\
    \   Evaluated: 4 == 0\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfj0pyzpg.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfj0pyzpg.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpfj0pyzpg.jl:24\n  Expression: candidate([4, 4, 6, 8]) == 12\n\
    \   Evaluated: 4 == 12\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfj0pyzpg.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfj0pyzpg.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  timestamp: 1660009044
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even=[]\n    odd=[]\n\
    \    for i in lst\n        if (i%2==0)\n            even+=[i]\n        else\n\
    \            odd+=[i]\n    end\n    return length(even)+length(odd)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\
    \t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7])\
    \ == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp3dt1_pcw.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp3dt1_pcw.jl:1\n\
    in expression starting at /tmp/tmp3dt1_pcw.jl:1\n"
  stdout: ''
  timestamp: 1660009043
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    count = 1\n  \
    \  sum = 0\n    for i in lst\n        if i %% 2 == 1\n            sum += i\n \
    \           count += 1\n        end\n    end\n    return sum + count * 2\nend\n\
    </cell>\n<cell>\nadd([4, 2, 6, 7])\n</cell>\n<text>\n3.3 Sum of odd numbers\n\
    using Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) ==\
    \ 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"%\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplabaa6d7.jl:12\nin expression starting at\
    \ /tmp/tmplabaa6d7.jl:12\n"
  stdout: ''
  timestamp: 1660009043
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1 .+\
    \ lst[1 .+ 1:length(lst)]]\n    odd = lst[2 .+ lst[2 .+ 1:length(lst)]]\n    return\
    \ even + odd\nend\n</code>\n<|/ a tags=julia |>\n<| c |>\nNice use of broadcasting.\
    \ I'd also add that `[1 .+ 1:length(lst)]` is an `Int` not a `Vector{Int64}` so\
    \ you need to do `[1 .+ Int64.(1:length(lst))]` if you want to broadcast it to\
    \ `Vector{Int64}`.\n<|/ c |>\n<| a tags=julia |>\nThe answer from user4815162342\
    \ is almost correct, but you need to change the way you compute the sum of odd\
    \ elements. To compute even elements we have the sum of every second element and\
    \ to compute odd we have the sum of every third element. \n<code>\nadd([4,2,6,7])\n\
    2\n</code>\nThe final code would be:\n<code>\nadd([4,2,6,7])\nusing Test\n\n@testset\
    \ begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7g0vw5he.jl:13\nin expression starting at\
    \ /tmp/tmp7g0vw5he.jl:13\n"
  stdout: ''
  timestamp: 1660009043
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    n,i=1,0\n    while\
    \ i<length(lst) do \n        if lst[i]%2==0 then lst+=lst[i] else n-=lst[i]; i+=1\
    \ end\n    end\n    return n\nend\nadd([4, 2, 6, 7])\nusing Test\n\n@testset begin\n\
    \ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5,\
    \ 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"lst\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmphzikgzcm.jl:11\nin expression starting at /tmp/tmphzikgzcm.jl:11\n"
  stdout: ''
  timestamp: 1660009043
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    lst = lst + length(lst)\
    \ % 2\n    return lst[2]\nend\n</cell>\n<code language=julia-0.5>\nadd([4, 2,\
    \ 6, 7])\n</cell>\n<code language=julia-0.5>\nadd([2, 4, 6, 8, 10])\n</cell>\n\
    <text>\nReverse a list\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4,\
    \ 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpokiuhetp.jl:12\nin expression starting at\
    \ /tmp/tmpokiuhetp.jl:12\n"
  stdout: ''
  timestamp: 1660009043
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    lst.zip((2*i for\
    \ i in lst.tail))\nend\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4,\
    \ 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmp99z36dy4.jl:13

    '
  stdout: "test set: Error During Test at /tmp/tmp99z36dy4.jl:16\n  Test threw exception\n\
    \  Expression: candidate([4, 88]) == 88\n  type Array has no field zip\n  Stacktrace:\n\
    \   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] add(lst::Vector{Int64})\n\
    \     @ Main /tmp/tmp99z36dy4.jl:9\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp99z36dy4.jl:16 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp99z36dy4.jl:15\ntest set:\
    \ Error During Test at /tmp/tmp99z36dy4.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([4, 5, 6, 7, 2, 122]) == 122\n  type Array has no field zip\n  Stacktrace:\n\
    \   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] add(lst::Vector{Int64})\n\
    \     @ Main /tmp/tmp99z36dy4.jl:9\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp99z36dy4.jl:17 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp99z36dy4.jl:15\ntest set:\
    \ Error During Test at /tmp/tmp99z36dy4.jl:18\n  Test threw exception\n  Expression:\
    \ candidate([4, 0, 6, 7]) == 0\n  type Array has no field zip\n  Stacktrace:\n\
    \   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] add(lst::Vector{Int64})\n\
    \     @ Main /tmp/tmp99z36dy4.jl:9\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp99z36dy4.jl:18 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp99z36dy4.jl:15\ntest set:\
    \ Error During Test at /tmp/tmp99z36dy4.jl:19\n  Test threw exception\n  Expression:\
    \ candidate([4, 4, 6, 8]) == 12\n  type Array has no field zip\n  Stacktrace:\n\
    \   [1] getproperty\n     @ ./Base.jl:42 [inli"
  timestamp: 1660009045
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    return \nend\n\
    </cell>\n<code language=julia-1.6>\n@assert add([4, 2, 6, 7]) == 4\n</cell>\n\
    <text>\nQuestion 8.2\nImplement the function sub that takes in a vector of integers\
    \ and returns the sum of all the even numbers minus the sum of all the odd numbers.\
    \ \n\"\"\"\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4,\
    \ 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4yr273vq.jl:11\nin expression starting at\
    \ /tmp/tmp4yr273vq.jl:11\n"
  stdout: ''
  timestamp: 1660009044
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    for i in lst\n\
    \        if i%2 != 0\n            lst = lst + i\n        end\n    end\n    return\
    \ lst\nend\n</cell>\n<text>\nQuestion 2\nusing Test\n\n@testset begin\n\ncandidate\
    \ = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2,\
    \ 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpt1nwp7n1.jl:16\nin expression starting at\
    \ /tmp/tmpt1nwp7n1.jl:16\n"
  stdout: ''
  timestamp: 1660009044
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    i = 0\n    sum\
    \ = 0\n    for a in lst\n        if a%2==0\n            sum += a\n        end\n\
    \        i = i + 1\n    end\n    return sum\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5,\
    \ 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpnonwhric.jl:21

    '
  stdout: "test set: Test Failed at /tmp/tmpnonwhric.jl:24\n  Expression: candidate([4,\
    \ 88]) == 88\n   Evaluated: 92 == 88\nStacktrace:\n [1] macro expansion\n   @\
    \ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpnonwhric.jl:24 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpnonwhric.jl:23\ntest set: Test Failed at /tmp/tmpnonwhric.jl:25\n\
    \  Expression: candidate([4, 5, 6, 7, 2, 122]) == 122\n   Evaluated: 134 == 122\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnonwhric.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnonwhric.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpnonwhric.jl:26\n  Expression: candidate([4, 0, 6, 7]) == 0\n\
    \   Evaluated: 10 == 0\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnonwhric.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnonwhric.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpnonwhric.jl:27\n  Expression: candidate([4, 4, 6, 8]) == 12\n\
    \   Evaluated: 22 == 12\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnonwhric.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnonwhric.jl:23\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  timestamp: 1660009045
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    l = length(lst)\n\
    \    even = []\n    for index in 1:l\n        if mod(index, 2) == 0 # if odd index\n\
    \            push!(even, lst[index])\n        end\n    end\n    return sum(even)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88])\
    \ == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp7gdx2nyq.jl:20

    '
  stdout: "test set: Test Failed at /tmp/tmp7gdx2nyq.jl:24\n  Expression: candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n   Evaluated: 134 == 122\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7gdx2nyq.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7gdx2nyq.jl:22\ntest set: Test\
    \ Failed at /tmp/tmp7gdx2nyq.jl:25\n  Expression: candidate([4, 0, 6, 7]) == 0\n\
    \   Evaluated: 7 == 0\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7gdx2nyq.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7gdx2nyq.jl:22\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     2      4\n"
  timestamp: 1660009045
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    evens = lst.filter(\
    \ x -> x % 2 == 0 )\n    return sum(evens)\nend\n</cell>\n<text>\nNow let's use\
    \ our new function.\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4,\
    \ 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5ly2ooih.jl:12\nin expression starting at\
    \ /tmp/tmp5ly2ooih.jl:12\n"
  stdout: ''
  timestamp: 1660009044
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n  \n  even_indices\
    \ = findall(x->mod(x, 2) == 0, lst)\n  return sum(lst[even_indices])\nusing Test\n\
    \n@testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp4brjtg3i.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp4brjtg3i.jl:1\n\
    in expression starting at /tmp/tmp4brjtg3i.jl:1\n"
  stdout: ''
  timestamp: 1660009044
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = 0\n   \
    \ for x in lst\n        if x%2 == 0\n            even += x\n        end\n    end\n\
    \    return even\nend\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4,\
    \ 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmplx4zxoms.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmplx4zxoms.jl:22\n  Expression: candidate([4,\
    \ 88]) == 88\n   Evaluated: 92 == 88\nStacktrace:\n [1] macro expansion\n   @\
    \ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmplx4zxoms.jl:22 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmplx4zxoms.jl:21\ntest set: Test Failed at /tmp/tmplx4zxoms.jl:23\n\
    \  Expression: candidate([4, 5, 6, 7, 2, 122]) == 122\n   Evaluated: 134 == 122\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplx4zxoms.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplx4zxoms.jl:21\ntest set: Test\
    \ Failed at /tmp/tmplx4zxoms.jl:24\n  Expression: candidate([4, 0, 6, 7]) == 0\n\
    \   Evaluated: 10 == 0\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplx4zxoms.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplx4zxoms.jl:21\ntest set: Test\
    \ Failed at /tmp/tmplx4zxoms.jl:25\n  Expression: candidate([4, 4, 6, 8]) == 12\n\
    \   Evaluated: 22 == 12\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplx4zxoms.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplx4zxoms.jl:21\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  timestamp: 1660009046
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even_ind = findind(lst,\
    \ 2); \n    # even_ind = 2 if even_ind == 1\n    return sum(lst[even_ind : end])\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88])\
    \ == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpfhvxa7t6.jl:15

    '
  stdout: "test set: Error During Test at /tmp/tmpfhvxa7t6.jl:18\n  Test threw exception\n\
    \  Expression: candidate([4, 88]) == 88\n  UndefVarError: findind not defined\n\
    \  Stacktrace:\n   [1] add(lst::Vector{Int64})\n     @ Main /tmp/tmpfhvxa7t6.jl:9\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpfhvxa7t6.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpfhvxa7t6.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpfhvxa7t6.jl:19\n  Test threw exception\n  Expression:\
    \ candidate([4, 5, 6, 7, 2, 122]) == 122\n  UndefVarError: findind not defined\n\
    \  Stacktrace:\n   [1] add(lst::Vector{Int64})\n     @ Main /tmp/tmpfhvxa7t6.jl:9\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpfhvxa7t6.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpfhvxa7t6.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpfhvxa7t6.jl:20\n  Test threw exception\n  Expression:\
    \ candidate([4, 0, 6, 7]) == 0\n  UndefVarError: findind not defined\n  Stacktrace:\n\
    \   [1] add(lst::Vector{Int64})\n     @ Main /tmp/tmpfhvxa7t6.jl:9\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpfhvxa7t6.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpfhvxa7t6.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpfhvxa7t6.jl:21\n  Test threw exception\n  Expression:\
    \ candidate([4, 4, 6, 8]) == 12\n  UndefVarError: findind not defined\n  Stacktrace:\n\
    \   [1] add(lst::Vector{Int64})\n     @ Main /tmp/tmpfhvxa7t6.jl:9\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 "
  timestamp: 1660009046
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even_ind = findind(lst,0)\n\
    \    odd_ind = findind(lst,1)\n    even = lst[even_ind]\n    odd = lst[odd_ind]\n\
    \    sum = even + odd\n    return sum\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2,\
    \ 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmppijvbhog.jl:18

    '
  stdout: "test set: Error During Test at /tmp/tmppijvbhog.jl:21\n  Test threw exception\n\
    \  Expression: candidate([4, 88]) == 88\n  UndefVarError: findind not defined\n\
    \  Stacktrace:\n   [1] add(lst::Vector{Int64})\n     @ Main /tmp/tmppijvbhog.jl:9\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmppijvbhog.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmppijvbhog.jl:20\ntest set:\
    \ Error During Test at /tmp/tmppijvbhog.jl:22\n  Test threw exception\n  Expression:\
    \ candidate([4, 5, 6, 7, 2, 122]) == 122\n  UndefVarError: findind not defined\n\
    \  Stacktrace:\n   [1] add(lst::Vector{Int64})\n     @ Main /tmp/tmppijvbhog.jl:9\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmppijvbhog.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmppijvbhog.jl:20\ntest set:\
    \ Error During Test at /tmp/tmppijvbhog.jl:23\n  Test threw exception\n  Expression:\
    \ candidate([4, 0, 6, 7]) == 0\n  UndefVarError: findind not defined\n  Stacktrace:\n\
    \   [1] add(lst::Vector{Int64})\n     @ Main /tmp/tmppijvbhog.jl:9\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmppijvbhog.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmppijvbhog.jl:20\ntest set:\
    \ Error During Test at /tmp/tmppijvbhog.jl:24\n  Test threw exception\n  Expression:\
    \ candidate([4, 4, 6, 8]) == 12\n  UndefVarError: findind not defined\n  Stacktrace:\n\
    \   [1] add(lst::Vector{Int64})\n     @ Main /tmp/tmppijvbhog.jl:9\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 "
  timestamp: 1660009046
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    \"\"\"given a\
    \ vector of integers lst, add the even elements that are at odd indices..\n  \
    \  \n    Args: \n    lst (vector): input vector of integers\nusing Test\n\n@testset\
    \ begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphtfqh754.jl:1\nin expression starting at /tmp/tmphtfqh754.jl:1\n"
  stdout: ''
  timestamp: 1660009044
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    if lst == []\n\
    \        return 0\n    even = 0\n    odd = 1\n    while lst != []\n        if\
    \ mod(lst[odd], 2) == 0\n            even += lst[odd]\n        else\n        \
    \    odd += 1\n        end\n        lst = lst[1::2]\n    end\n    return even\n\
    end\n</cell>\n<text>\nTask (2) : Find the largest element in an array. \nThe function\
    \ takes an array as input and returns its largest element. \nIf there are more\
    \ than one largest elements, then the function returns the one that appears first\
    \ in the list.\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4,\
    \ 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdqtwgwca.jl:23\nin expression starting at\
    \ /tmp/tmpdqtwgwca.jl:23\n"
  stdout: ''
  timestamp: 1660009044
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    odd = Vector{Int64}(collect(2:length(lst)-1))\n\
    \    even = Vector{Int64}(collect(1:length(lst)-1))\n    for i in even, odd\n\
    \        lst[i] += lst[!i]\n    end\n    return sum(odd)\nend\n</cell>\n<text>\n\
    Next we write an inner function to find sum of an even list using map\nusing Test\n\
    \n@testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid iteration specification\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6ee0sxc3.jl:12\nin expression starting at\
    \ /tmp/tmp6ee0sxc3.jl:12\n"
  stdout: ''
  timestamp: 1660009045
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    for i in 2:length(lst)\n\
    \        if lst[i] % 2 == 0 && lst[i] != 0 \n            lst[i] += lst[i-1]\n\
    \        end\n    end\n    return sum(lst)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5,\
    \ 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp0r_wibbp.jl:18

    '
  stdout: "test set: Test Failed at /tmp/tmp0r_wibbp.jl:21\n  Expression: candidate([4,\
    \ 88]) == 88\n   Evaluated: 96 == 88\nStacktrace:\n [1] macro expansion\n   @\
    \ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp0r_wibbp.jl:21 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp0r_wibbp.jl:20\ntest set: Test Failed at /tmp/tmp0r_wibbp.jl:22\n\
    \  Expression: candidate([4, 5, 6, 7, 2, 122]) == 122\n   Evaluated: 167 == 122\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0r_wibbp.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0r_wibbp.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp0r_wibbp.jl:23\n  Expression: candidate([4, 0, 6, 7]) == 0\n\
    \   Evaluated: 17 == 0\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0r_wibbp.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0r_wibbp.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp0r_wibbp.jl:24\n  Expression: candidate([4, 4, 6, 8]) == 12\n\
    \   Evaluated: 48 == 12\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0r_wibbp.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0r_wibbp.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  timestamp: 1660009046
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    evens = lst[1\
    \ :] \n    odds = lst[2 :] \n    return sum(evens + odds)\nend \nusing Test\n\n\
    @testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpn58lsc3e.jl:15

    '
  stdout: "test set: Error During Test at /tmp/tmpn58lsc3e.jl:18\n  Test threw exception\n\
    \  Expression: candidate([4, 88]) == 88\n  MethodError: no method matching typed_hcat(::Vector{Int64},\
    \ ::Int64, ::Colon)\n  Closest candidates are:\n    typed_hcat(!Matched::Type{T},\
    \ ::Any...) where T at ~/.conda/envs/polyglot/share/julia/base/abstractarray.jl:1826\n\
    \    typed_hcat(!Matched::Type{T}, !Matched::Number...) where T at ~/.conda/envs/polyglot/share/julia/base/abstractarray.jl:1532\n\
    \    typed_hcat(!Matched::Type{T}, !Matched::Union{Number, LinearAlgebra.Adjoint{T,\
    \ <:AbstractVector} where T}...) where T at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/adjtrans.jl:225\n\
    \    ...\n  Stacktrace:\n   [1] add(lst::Vector{Int64})\n     @ Main /tmp/tmpn58lsc3e.jl:9\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpn58lsc3e.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpn58lsc3e.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpn58lsc3e.jl:19\n  Test threw exception\n  Expression:\
    \ candidate([4, 5, 6, 7, 2, 122]) == 122\n  MethodError: no method matching typed_hcat(::Vector{Int64},\
    \ ::Int64, ::Colon)\n  Closest candidates are:\n    typed_hcat(!Matched::Type{T},\
    \ ::Any...) where T at ~/.conda/envs/polyglot/share/julia/base/abstractarray.jl:1826\n\
    \    typed_hcat(!Matched::Type{T}, !Matched::Number...) where T at ~/.conda/envs/polyglot/share/julia/base/abstractarray.jl:1532\n\
    \    typed_hcat(!Matched::Type{T}, !Matched::Union{Number, LinearAlgebra.Adjoint{T,\
    \ <:AbstractVector} where T}...) where T at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/adjtrans.jl:225\n\
    \    ...\n  Stacktrace:\n   [1] add(lst::Vector{Int64})\n     @ Main /tmp/tmpn58lsc3e.jl:9\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpn58lsc3e.jl:19 [inlined]\n\
    \   [4] mac"
  timestamp: 1660009048
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    evens = Int64[]\n\
    \    for (i,v) in enumerate(lst) \n        if i%2 == 1 \n            push!(evens,\
    \ v)\n        end \n    end\n    sum(evens)\nend\n</cell>\n<cell>\nadd([4, 2,\
    \ 6, 7])\n</cell>\n<text>\nExercise 2: Vectorized Solution\nUsing the same function\
    \ above - how would you vectorize the addition of all even elements of the vector\
    \ lst?\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4,\
    \ 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpchggldkt.jl:17\nin expression starting at\
    \ /tmp/tmpchggldkt.jl:17\n"
  stdout: ''
  timestamp: 1660009045
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    evens = Vector{Int64}()\n\
    \    odds = Vector{Int64}()\n    for i in lst \n        if i%2 == 0 push!(evens,i)\
    \ \n        else push!(odds,i) \n    end\n    evens = evens[2:end]\n    odds =\
    \ odds[2:end]\n    sum(evens) + sum(odds)\nend\n</cell>\n<code language=julia-0.6>\n\
    add(vec(1:10))\n</cell>\n<text>\nExercise 10\nWrite a function called \"double\"\
    \ that doubles the vector passed in:\nusing Test\n\n@testset begin\n\ncandidate\
    \ = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2,\
    \ 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpql1cdw77.jl:19\nin expression starting at\
    \ /tmp/tmpql1cdw77.jl:19\n"
  stdout: ''
  timestamp: 1660009045
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    return sum(lst[1::2])\n\
    end\n</cell>\n<code language=julia-1.5>\n@assert add([]) == 0\n@assert add([1])\
    \ == 1\n@assert add([2]) == 2\n@assert add([3]) == 3\n@assert add([4, 2, 6, 7])\
    \ == 7\n</cell>\n<text>\nTask 10: Create a function named evensum that takes as\
    \ input a vector of integers, and returns the sum of the even integers in the\
    \ vector.\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4,\
    \ 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpto5dncby.jl:11\nin expression starting at\
    \ /tmp/tmpto5dncby.jl:11\n"
  stdout: ''
  timestamp: 1660009045
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    return sum(lst[1\
    \ : (end-1)])\nend\n\"\"\"\nGiven a non-empty vector of integers lst. add the\
    \ odd elements that are at even indices..\nusing Test\n\n@testset begin\n\ncandidate\
    \ = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2,\
    \ 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgsloq4ea.jl:11\nin expression starting at\
    \ /tmp/tmpgsloq4ea.jl:11\n"
  stdout: ''
  timestamp: 1660009045
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    \n    even = lst[2\
    \ : (end-lst)]\n    odd = lst[(end-lst) : end]\n    sum = 0\n    for value in\
    \ odd\n        if value%2 == 0\n            sum += value\n        end\n    end\n\
    \    return sum\nend\n</cell>\n<code language=julia-1.5>\nadd(lst)\n</cell>\n\
    <text>\nExercise: Implement a function that computes the cumulative sum of a given\
    \ vector.\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4,\
    \ 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp87xy7e17.jl:20\nin expression starting at\
    \ /tmp/tmp87xy7e17.jl:20\n"
  stdout: ''
  timestamp: 1660009045
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    if lst.length\
    \ == 0\n        return 0\n    \n    #initialize counters\n    even::Int64 = 0\n\
    \    odd::Int64 = 0\n    \n    #find even indices in the vector \n    for i in\
    \ 2:length(lst)\n        if lst[i] % 2 == 0\n            even = even + 1\n   \
    \     end\n    end\n    \n    #find odd indices in the vector\n    for i in 2:length(lst)\n\
    \        if lst[i] % 2 != 0\n            odd = odd + 1 \n        end\n    end\n\
    \    \n    \n    #add even elements that are at odd indices\n    total::Int64\
    \ = even + odd\n    \n    return total\nend\n</cell>\n<text>\nQuestion 8 (2 points).\
    \ Write a function that computes the sum of the squares of the numbers in the\
    \ given vector. Do not use any built-in functions to do this. Assume that the\
    \ vector has a length of at least 2. Write the answer as a Float scalar.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\
    \t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7])\
    \ == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvjy52w06.jl:36\nin expression starting at\
    \ /tmp/tmpvjy52w06.jl:36\n"
  stdout: ''
  timestamp: 1660009046
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    if length(lst)\
    \ == 0 return 0\n    if length(lst) == 1 return lst[1]\n    for x in lst\n   \
    \     if x % 2 == 1 lst[end] = x\n        else \n            lst[end] = x // 2\
    \ \n        end\n        end \n    return sum(lst)\nend \nusing Test\n\n@testset\
    \ begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5z55nmpx.jl:1\nin expression starting at /tmp/tmp5z55nmpx.jl:1\n"
  stdout: ''
  timestamp: 1660009046
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    return 0\nend\n\
    using Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) ==\
    \ 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpxd5yko4t.jl:13

    '
  stdout: "test set: Test Failed at /tmp/tmpxd5yko4t.jl:16\n  Expression: candidate([4,\
    \ 88]) == 88\n   Evaluated: 0 == 88\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxd5yko4t.jl:16 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxd5yko4t.jl:15\ntest set: Test\
    \ Failed at /tmp/tmpxd5yko4t.jl:17\n  Expression: candidate([4, 5, 6, 7, 2, 122])\
    \ == 122\n   Evaluated: 0 == 122\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxd5yko4t.jl:17 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxd5yko4t.jl:15\ntest set: Test\
    \ Failed at /tmp/tmpxd5yko4t.jl:19\n  Expression: candidate([4, 4, 6, 8]) == 12\n\
    \   Evaluated: 0 == 12\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxd5yko4t.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxd5yko4t.jl:15\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  timestamp: 1660009047
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    for (i,e) in enumerate(lst)\
    \ \n        if i % 2 == 1 \n            lst[i] += e \n        end \n    end \n\
    \    \n    return lst[1] \nend\nusing Test\n\n@testset begin\n\ncandidate = add;\n\
    \t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) ==\
    \ 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8])\
    \ == 12)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpivetbmsx.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmpivetbmsx.jl:22\n  Expression: candidate([4,\
    \ 88]) == 88\n   Evaluated: 8 == 88\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpivetbmsx.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpivetbmsx.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpivetbmsx.jl:23\n  Expression: candidate([4, 5, 6, 7, 2, 122])\
    \ == 122\n   Evaluated: 8 == 122\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpivetbmsx.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpivetbmsx.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpivetbmsx.jl:24\n  Expression: candidate([4, 0, 6, 7]) == 0\n\
    \   Evaluated: 8 == 0\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpivetbmsx.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpivetbmsx.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpivetbmsx.jl:25\n  Expression: candidate([4, 4, 6, 8]) == 12\n\
    \   Evaluated: 8 == 12\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpivetbmsx.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpivetbmsx.jl:21\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  timestamp: 1660009047
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = even(lst)\n\
    \    \n    return sum(x for x in lst if even(x) == 1)\nend \n</cell>\n<code language=julia-1.4>\n\
    add([4, 2, 6, 7])\n</cell>\n<code language=julia-1.4>\n\"\"\"Given a non-empty\
    \ vector of integers lst. add the odd elements that are at even indices..\nusing\
    \ Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\
    \t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7])\
    \ == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpayv1oq8p.jl:13\nin expression starting at\
    \ /tmp/tmpayv1oq8p.jl:13\n"
  stdout: ''
  timestamp: 1660009046
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    evens = lst[div(1:end,\
    \ 2):end]\n    return sum(evens)\nend\n</cell>\n<text>\nadd2\nusing Test\n\n@testset\
    \ begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpc4u0kx5a.jl:12\nin expression starting at\
    \ /tmp/tmpc4u0kx5a.jl:12\n"
  stdout: ''
  timestamp: 1660009046
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n\"\"\"\nAdd the elements\
    \ of a vector. \n\"\"\"\n@assert length(lst) >= 1 \"`lst` must have at least 1\
    \ element\"\n@assert lst[1]%2 == 1 \"`lst` must contain even numbers\"\n@assert\
    \ lst[end-1]%2 == 0 \"`lst` must contain odd numbers\"\n@assert length(lst) >=\
    \ 2 \"`lst` must have at least 2 elements\"\n@assert lst[1] <= lst[2] \"`lst`\
    \ elements must be in ascending order\"\n@assert all(x => 0 <= x < 10, length(x)\
    \ == length(lst), \"`lst` must have only positive integers\")\n@assert sum(lst)\
    \ == sum(x => x%2 == 0, lst)\n@assert sum(lst) == sum(x => x%2 == 1, lst)\n@assert\
    \ length(lst) == length(filter(x => x%2 == 0, lst))\n@assert length(lst) == length(filter(x\
    \ => x%2 == 1, lst))\n@assert length(lst) == length(filter(x => x != 0, lst))\n\
    @assert length(lst) == length(filter(x => x != 1, lst))\n@assert length(lst) ==\
    \ length(filter(x => x != 2, lst))\n@assert length(lst) == length(filter(x =>\
    \ x != 3, lst))\n@assert length(lst) == length(filter(x => x != 4, lst))\n@assert\
    \ length(lst) == length(filter(x => x != 5, lst))\n@assert length(lst) == length(filter(x\
    \ => x != 6, lst))\n@assert length(lst) == length(filter(x => x != 7, lst))\n\
    @assert length(lst) == length(filter(x => x != 8, lst))\n@assert length(lst) ==\
    \ length(filter(x => x != 9, lst))\n@assert length(lst) == length(filter(x =>\
    \ x != 10, lst))\n@assert length(lst) == length(filter(x => x != 11, lst))\n@assert\
    \ length(lst) == length(filter(x => x != 12, lst))\n@assert length(lst) == length(filter(x\
    \ => x != 13, lst))\n@assert length(lst) == length(filter(x => x != 14, lst))\n\
    @assert length(lst) == length(filter(x => x != 15, lst))\n@assert length(lst)\
    \ == length(filter(x => x != 16, lst))\n@assert length(lst) == length(filter(x\
    \ => x != 17, lst))\n@assert length(lst) == length(filter(x => x != 18, lst))\n\
    @assert length(lst) == length(filter(x => x != 19, lst))\n@assert length(lst)\
    \ == length(filter(x => x != 20, lst))\n@assert length(lst) == length(filter(x\
    \ => x != 21, lst))\n\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4,\
    \ 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpussv4ui2.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpussv4ui2.jl:1\n\
    in expression starting at /tmp/tmpussv4ui2.jl:1\n"
  stdout: ''
  timestamp: 1660009046
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    sum=0\n    for\
    \ x in lst\n        if x % 2 == 1\n            sum += x\n        end\n    end\n\
    \    return sum\nend\n</cell>\n<text>\n6. Subtract the odd elements that are at\
    \ even indices.\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4,\
    \ 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpex5ucm1b.jl:17\nin expression starting at\
    \ /tmp/tmpex5ucm1b.jl:17\n"
  stdout: ''
  timestamp: 1660009046
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    if length(lst)\
    \ < 2 \n        return \n    end \n    \n    \n    even = lst[findall(x -> x %\
    \ 2 == 0, lst)]\n    odd = lst[findall(x -> x % 2 != 0, lst)]\n    \n    length(even)\
    \ + length(odd)\nend\n\"\"\"\nGiven a non-empty vector of integers lst. add the\
    \ odd elements that are at even indices..\nusing Test\n\n@testset begin\n\ncandidate\
    \ = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2,\
    \ 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4v1jtxav.jl:19\nin expression starting at\
    \ /tmp/tmp4v1jtxav.jl:19\n"
  stdout: ''
  timestamp: 1660009046
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    odd_index = findfirst(x->x%2==1,\
    \ lst)\n    if isempty(odd_index)\n        return length(lst)\n    else\n    \
    \    return addatindex(lst, 0, odd_index)\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmp9i91pqbd.jl:18

    '
  stdout: "test set: Error During Test at /tmp/tmp9i91pqbd.jl:21\n  Test threw exception\n\
    \  Expression: candidate([4, 88]) == 88\n  MethodError: no method matching iterate(::Nothing)\n\
    \  Closest candidates are:\n    iterate(!Matched::Union{LinRange, StepRangeLen})\
    \ at ~/.conda/envs/polyglot/share/julia/base/range.jl:826\n    iterate(!Matched::Union{LinRange,\
    \ StepRangeLen}, !Matched::Integer) at ~/.conda/envs/polyglot/share/julia/base/range.jl:826\n\
    \    iterate(!Matched::T) where T<:Union{Base.KeySet{<:Any, <:Dict}, Base.ValueIterator{<:Dict}}\
    \ at ~/.conda/envs/polyglot/share/julia/base/dict.jl:695\n    ...\n  Stacktrace:\n\
    \   [1] isempty(itr::Nothing)\n     @ Base ./essentials.jl:775\n   [2] add(lst::Vector{Int64})\n\
    \     @ Main /tmp/tmp9i91pqbd.jl:10\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp9i91pqbd.jl:21 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp9i91pqbd.jl:20\ntest set:\
    \ Error During Test at /tmp/tmp9i91pqbd.jl:22\n  Test threw exception\n  Expression:\
    \ candidate([4, 5, 6, 7, 2, 122]) == 122\n  UndefVarError: addatindex not defined\n\
    \  Stacktrace:\n   [1] add(lst::Vector{Int64})\n     @ Main /tmp/tmp9i91pqbd.jl:13\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp9i91pqbd.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp9i91pqbd.jl:20\ntest set:\
    \ Error During Test at /tmp/tmp9i91pqbd.jl:23\n  Test threw exception\n  Expression:\
    \ candidate([4, 0, 6, 7]) == 0\n  UndefVarError: addatindex not defined\n  Stacktrace:\n\
    \   [1] add(lst::Vector{Int64})\n     @ Main /tmp/tmp9i91pqbd.jl:13\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp9i91pqbd.jl:23"
  timestamp: 1660009050
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    \n    lst = sort(lst)\n\
    \    even = filter(x -> x%2 == 0, lst)\n    odd = filter(x -> x%2 != 0, lst)\n\
    \    \n    return (reduce(.+, even)+reduce(.+, odd))\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 2 failed, 2 errored,
    0 broken.

    in expression starting at /tmp/tmpw5lds8s4.jl:18

    '
  stdout: "test set: Error During Test at /tmp/tmpw5lds8s4.jl:21\n  Test threw exception\n\
    \  Expression: candidate([4, 88]) == 88\n  ArgumentError: reducing over an empty\
    \ collection is not allowed\n  Stacktrace:\n    [1] _empty_reduce_error()\n  \
    \    @ Base ./reduce.jl:301\n    [2] reduce_empty(op::Function, #unused#::Type{Int64})\n\
    \      @ Base ./reduce.jl:311\n    [3] mapreduce_empty(#unused#::typeof(identity),\
    \ op::Function, T::Type)\n      @ Base ./reduce.jl:345\n    [4] reduce_empty(op::Base.MappingRF{typeof(identity),\
    \ Base.Broadcast.BroadcastFunction{typeof(+)}}, #unused#::Type{Int64})\n     \
    \ @ Base ./reduce.jl:331\n    [5] reduce_empty_iter\n      @ ./reduce.jl:357 [inlined]\n\
    \    [6] mapreduce_empty_iter(f::Function, op::Function, itr::Vector{Int64}, ItrEltype::Base.HasEltype)\n\
    \      @ Base ./reduce.jl:353\n    [7] _mapreduce\n      @ ./reduce.jl:402 [inlined]\n\
    \    [8] _mapreduce_dim\n      @ ./reducedim.jl:330 [inlined]\n    [9] #mapreduce#731\n\
    \      @ ./reducedim.jl:322 [inlined]\n   [10] mapreduce\n      @ ./reducedim.jl:322\
    \ [inlined]\n   [11] #reduce#733\n      @ ./reducedim.jl:371 [inlined]\n   [12]\
    \ reduce\n      @ ./reducedim.jl:371 [inlined]\n   [13] add(lst::Vector{Int64})\n\
    \      @ Main /tmp/tmpw5lds8s4.jl:14\n   [14] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [15] macro expansion\n      @ /tmp/tmpw5lds8s4.jl:21 [inlined]\n\
    \   [16] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [17] top-level scope\n      @ /tmp/tmpw5lds8s4.jl:20\ntest set:\
    \ Test Failed at /tmp/tmpw5lds8s4.jl:22\n  Expression: candidate([4, 5, 6, 7,\
    \ 2, 122]) == 122\n   Evaluated: 146 == 122\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpw5lds8s4.jl:22 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpw5lds8s4.jl:20\ntest set: Test Failed at /tmp/tmpw5lds8s4.jl:23\n\
    \  Exp"
  timestamp: 1660009050
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    if length(lst)\
    \ == 0\n        return -1\n    end\nusing Test\n\n@testset begin\n\ncandidate\
    \ = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2,\
    \ 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpo2w56o0g.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpo2w56o0g.jl:1\n\
    in expression starting at /tmp/tmpo2w56o0g.jl:1\n"
  stdout: ''
  timestamp: 1660009047
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    sum = 0\n    for\
    \ i in 2 : (length(lst) - 1) \n        sum += lst[i]\n    end\n    return sum\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88])\
    \ == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpfdq44_sl.jl:17

    '
  stdout: "test set: Test Failed at /tmp/tmpfdq44_sl.jl:20\n  Expression: candidate([4,\
    \ 88]) == 88\n   Evaluated: 0 == 88\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfdq44_sl.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfdq44_sl.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpfdq44_sl.jl:21\n  Expression: candidate([4, 5, 6, 7, 2, 122])\
    \ == 122\n   Evaluated: 20 == 122\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfdq44_sl.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfdq44_sl.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpfdq44_sl.jl:22\n  Expression: candidate([4, 0, 6, 7]) == 0\n\
    \   Evaluated: 6 == 0\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfdq44_sl.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfdq44_sl.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpfdq44_sl.jl:23\n  Expression: candidate([4, 4, 6, 8]) == 12\n\
    \   Evaluated: 10 == 12\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfdq44_sl.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfdq44_sl.jl:19\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  timestamp: 1660009048
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    \n    # Write\
    \ your solution here\n    n = length(lst)\n    even = lst[2::2]\n    odd = lst[1:n:2]\n\
    \    evensum = 0\n    oddsum = 0\n    for i in even\n        evensum = evensum\
    \ + i\n    end\n    for i in odd\n        oddsum = oddsum + i\n    end\n    return\
    \ evensum + oddsum\nend\n</cell>\n<text>\nProblem 2b. Given a vector of doubles\
    \ lst. Add the even elements that are at odd indices..\nusing Test\n\n@testset\
    \ begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpuieuueru.jl:24\nin expression starting at\
    \ /tmp/tmpuieuueru.jl:24\n"
  stdout: ''
  timestamp: 1660009047
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even_ind = 1:2:length(lst)\n\
    \    for i = even_ind\n        if lst[i] % 2 != 0\n            lst[i] = lst[i]\
    \ + lst[(i+2)%length(lst)]\n        end\n    end\n    lst[end-1]\nend\n</code>\n\
    <|/ a |>\n<| c |>\nThis answer will crash if the vector is empty or has only one\
    \ element. Instead you should check the length of `lst` before accessing its elements\
    \ and returning `0` or `nil`.\n<|/ c |>\n<| c |>\nYes I did not realise that and\
    \ have amended my answer.\n<|/ c |>\n<| a dscore=0 |>\nI know this question is\
    \ old but I think this problem can be solved in different ways. \nThe solution\
    \ I used can be found in the question itself. \n<code>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpr3xk7_ha.jl:17\nin expression starting at\
    \ /tmp/tmpr3xk7_ha.jl:17\n"
  stdout: ''
  timestamp: 1660009047
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    \"\"\"\n    your\
    \ code here\n    \"\"\"\nend\n</cell>\n<code language=julia-1.0>\n@code_warntype\
    \ add(lst)\n</cell>\n<code language=julia-1.0>\n@code_warntype add(lst)\n</cell>\n\
    <code language=julia-1.0>\n@code_warntype add(lst)\n</cell>\n<code language=julia-1.0>\n\
    using Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) ==\
    \ 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpy5pic141.jl:13\nin expression starting at\
    \ /tmp/tmpy5pic141.jl:13\n"
  stdout: ''
  timestamp: 1660009047
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    result = lst[1]\n\
    \    for i in 2:length(lst)\n        if lst[i] % 2 == 0\n            result +=\
    \ 1\n        else\n            result = lst[i]\n        end\n    end\n    return\
    \ result\nend\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4,\
    \ 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpg1ugg6py.jl:21

    '
  stdout: "test set: Test Failed at /tmp/tmpg1ugg6py.jl:24\n  Expression: candidate([4,\
    \ 88]) == 88\n   Evaluated: 5 == 88\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpg1ugg6py.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpg1ugg6py.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpg1ugg6py.jl:25\n  Expression: candidate([4, 5, 6, 7, 2, 122])\
    \ == 122\n   Evaluated: 9 == 122\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpg1ugg6py.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpg1ugg6py.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpg1ugg6py.jl:26\n  Expression: candidate([4, 0, 6, 7]) == 0\n\
    \   Evaluated: 7 == 0\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpg1ugg6py.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpg1ugg6py.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpg1ugg6py.jl:27\n  Expression: candidate([4, 4, 6, 8]) == 12\n\
    \   Evaluated: 7 == 12\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpg1ugg6py.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpg1ugg6py.jl:23\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  timestamp: 1660009048
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    evens = [i for\
    \ i in lst if i%2==0]\n    return sum(evens)\nend\n</cell>\n<cell>\nadd(vec)\n\
    </cell>\n<text>\n4.8 Sum all numbers in a given range\nusing Test\n\n@testset\
    \ begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp__4vpno4.jl:12\nin expression starting at\
    \ /tmp/tmp__4vpno4.jl:12\n"
  stdout: ''
  timestamp: 1660009047
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n\tresult = zero(Int64)\n\
    \tfor idx in 2:length(lst)\n\t\tif lst[idx] % 2 != 0\n\t\t\tresult += lst[idx]\n\
    \t\tend\n\tend\n\tresult\nend\nusing Test\n\n@testset begin\n\ncandidate = add;\n\
    \t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) ==\
    \ 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8])\
    \ == 12)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp42sctth3.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmp42sctth3.jl:22\n  Expression: candidate([4,\
    \ 88]) == 88\n   Evaluated: 0 == 88\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp42sctth3.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp42sctth3.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp42sctth3.jl:23\n  Expression: candidate([4, 5, 6, 7, 2, 122])\
    \ == 122\n   Evaluated: 12 == 122\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp42sctth3.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp42sctth3.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp42sctth3.jl:24\n  Expression: candidate([4, 0, 6, 7]) == 0\n\
    \   Evaluated: 7 == 0\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp42sctth3.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp42sctth3.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp42sctth3.jl:25\n  Expression: candidate([4, 4, 6, 8]) == 12\n\
    \   Evaluated: 0 == 12\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp42sctth3.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp42sctth3.jl:21\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  timestamp: 1660009048
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    s = sum( lst[1..end-1]\
    \ )\n    return s\nend\n</cell>\n<code language=julia-1.3>\n@assert add([4, 2,\
    \ 6, 7]) == 2\n</cell>\n<text>\nProblem 1\nusing Test\n\n@testset begin\n\ncandidate\
    \ = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2,\
    \ 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpd6q37sn0.jl:12\nin expression starting at\
    \ /tmp/tmpd6q37sn0.jl:12\n"
  stdout: ''
  timestamp: 1660009047
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    \"\"\"O(n) time\
    \ and O(1) space.\"\"\"\n    sum = 0\n    size = length(lst)\n    for i in 1:(size-1)\n\
    \        if lst[i] % 2 != 0\n            sum = sum + lst[i]\n        end\n   \
    \ end\n    return sum\nend\nusing Test\n\n@testset begin\n\ncandidate = add;\n\
    \t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) ==\
    \ 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8])\
    \ == 12)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpxyhcd06w.jl:21

    '
  stdout: "test set: Test Failed at /tmp/tmpxyhcd06w.jl:24\n  Expression: candidate([4,\
    \ 88]) == 88\n   Evaluated: 0 == 88\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxyhcd06w.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxyhcd06w.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpxyhcd06w.jl:25\n  Expression: candidate([4, 5, 6, 7, 2, 122])\
    \ == 122\n   Evaluated: 12 == 122\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxyhcd06w.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxyhcd06w.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpxyhcd06w.jl:27\n  Expression: candidate([4, 4, 6, 8]) == 12\n\
    \   Evaluated: 0 == 12\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxyhcd06w.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxyhcd06w.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  timestamp: 1660009048
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even_indices =\
    \ findall(x->mod(x,2) == 0, lst)\n    even_indices = setdiff(even_indices, setdiff(1:length(lst),even_indices))\
    \ \n    return sum(map(x -> x[1], filter(x -> mod(x,2)==1, zip(even_indices, lst))))\n\
    end\n</cell>\n<code language=julia-1.0>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2,\
    \ 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpz6639cz9.jl:13\nin expression starting at\
    \ /tmp/tmpz6639cz9.jl:13\n"
  stdout: ''
  timestamp: 1660009048
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    for i in 1:length(lst)\n\
    \        if mod(lst[i], 2) == 1 \n            lst[i] += 1 \n        end\n    end\n\
    \    return lst[end]\nend\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t\
    @test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\
    \t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpzyla8n64.jl:18

    '
  stdout: "test set: Test Failed at /tmp/tmpzyla8n64.jl:23\n  Expression: candidate([4,\
    \ 0, 6, 7]) == 0\n   Evaluated: 8 == 0\nStacktrace:\n [1] macro expansion\n  \
    \ @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpzyla8n64.jl:23 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpzyla8n64.jl:20\ntest set: Test Failed at /tmp/tmpzyla8n64.jl:24\n\
    \  Expression: candidate([4, 4, 6, 8]) == 12\n   Evaluated: 8 == 12\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzyla8n64.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzyla8n64.jl:20\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     2      4\n"
  timestamp: 1660009049
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    if lst.size ==\
    \ 0 \n        return 0 \n    end\n    even_indexed_pair = findall(x->x%2 == 0,\
    \ lst)\n    odd_indexed_pair = findall(x->x%2 != 0, lst)\n    odd_indexed_pair\
    \ \u2208 even_indexed_pair\n    \n    even = sum(lst[even_indexed_pair])\n   \
    \ odd = sum(lst[odd_indexed_pair])\n    even+odd\nend\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype add([4,2,6,7])\n</cell>\n<text>\nExercise: Given a vector of real\
    \ numbers, find the sum of the squares of the even numbers in the vector. For\
    \ example, add([4,2,6,7]) should return 16. \nHint: you will have to create a\
    \ vector to store the squared values as well as the sum of the squares.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\
    \t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7])\
    \ == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpw6mvd565.jl:20\nin expression starting at\
    \ /tmp/tmpw6mvd565.jl:20\n"
  stdout: ''
  timestamp: 1660009048
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    cnt = 0\n    for\
    \ n in lst\n        if n % 2 == 1\n            cnt += n\n        end\n    end\n\
    \    return cnt\nend\n</cell>\n<code language=julia-1.2>\nadd([4, 2, 6, 7])\n\
    </cell>\n<text>\nGiven a non-empty vector of integers lst, return the sum of the\
    \ numbers in the vector\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t\
    @test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\
    \t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkbef8v1h.jl:17\nin expression starting at\
    \ /tmp/tmpkbef8v1h.jl:17\n"
  stdout: ''
  timestamp: 1660009048
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[2::2]\n\
    \    odd = lst[3::2]\n    return even+odd\nend\n</code>\n<|/ a tags=julia |>\n\
    <| c |>\nThis is nice, but it doesn't answer the question -- it just demonstrates\
    \ what the Julia documentation already says and doesn't solve the problem in the\
    \ question.\n<|/ c |>\n<| a |>\nHere is a solution that works in Julia 1.1 without\
    \ using any packages.\nThe function takes two arguments: the input vector, the\
    \ index of the target element of the vector. It returns the target element of\
    \ the vector, and the length of the input vector before the target element is\
    \ found.\n<code>\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4,\
    \ 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9b88e3f1.jl:13\nin expression starting at\
    \ /tmp/tmp9b88e3f1.jl:13\n"
  stdout: ''
  timestamp: 1660009048
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    if length(lst)\
    \ == 0 \n        return 0  \n    end\nusing Test\n\n@testset begin\n\ncandidate\
    \ = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2,\
    \ 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp07n25r7n.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp07n25r7n.jl:1\n\
    in expression starting at /tmp/tmp07n25r7n.jl:1\n"
  stdout: ''
  timestamp: 1660009048
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    \"\"\"\n    Odd\
    \ numbers are at odd indices\n    \"\"\"\n    local sum = 0 \n    for elem in\
    \ lst\n        if elem %2 == 1\n            sum += elem\n        end\n    end\n\
    \    return sum\nend\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4,\
    \ 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp1a215uz9.jl:22

    '
  stdout: "test set: Test Failed at /tmp/tmp1a215uz9.jl:25\n  Expression: candidate([4,\
    \ 88]) == 88\n   Evaluated: 0 == 88\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1a215uz9.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1a215uz9.jl:24\ntest set: Test\
    \ Failed at /tmp/tmp1a215uz9.jl:26\n  Expression: candidate([4, 5, 6, 7, 2, 122])\
    \ == 122\n   Evaluated: 12 == 122\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1a215uz9.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1a215uz9.jl:24\ntest set: Test\
    \ Failed at /tmp/tmp1a215uz9.jl:27\n  Expression: candidate([4, 0, 6, 7]) == 0\n\
    \   Evaluated: 7 == 0\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1a215uz9.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1a215uz9.jl:24\ntest set: Test\
    \ Failed at /tmp/tmp1a215uz9.jl:28\n  Expression: candidate([4, 4, 6, 8]) == 12\n\
    \   Evaluated: 0 == 12\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1a215uz9.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1a215uz9.jl:24\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  timestamp: 1660009049
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = filter(x\
    \ -> x % 2 == 0, lst)\n    return sum(even)\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"Given a non-empty vector of integers lst. add the odd elements that are\
    \ at even indices..\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4,\
    \ 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0p5hv6a4.jl:12\nin expression starting at\
    \ /tmp/tmp0p5hv6a4.jl:12\n"
  stdout: ''
  timestamp: 1660009048
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n  sum = lst[1]\n \
    \ for i = 2:length(lst)\n    sum+= lst[i]\n  end\n  return sum\nend\n</cell>\n\
    <text>\nQuestion 4: write a function addEvenToOddIndex that adds the even elements\
    \ that are at odd indices in the list you passed as a parameter.\nusing Test\n\
    \n@testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9_1d82ad.jl:15\nin expression starting at\
    \ /tmp/tmp9_1d82ad.jl:15\n"
  stdout: ''
  timestamp: 1660009049
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    return lst[findfirst(iseven(lst))]\n\
    end\n</cell>\n<text>\n6. Write a function that takes in a vector and returns the\
    \ sum of the elements of the vector in reverse order.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkixntuh6.jl:11\nin expression starting at\
    \ /tmp/tmpkixntuh6.jl:11\n"
  stdout: ''
  timestamp: 1660009049
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    if lst.len==0\n\
    \        return 0\n    else\n        evens = lst[findall(x->x%2==0, lst)]\n  \
    \      return sum(evens)\n    end\nend\n</cell>\n<cell>\n# Problem 4\nusing Test\n\
    \n@testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjfx86y6t.jl:16\nin expression starting at\
    \ /tmp/tmpjfx86y6t.jl:16\n"
  stdout: ''
  timestamp: 1660009049
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n  result =0\n  for\
    \ i = 1:length(lst)\n    result +=lst[i]\n  end\n  return result\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpk370cv2v.jl:17

    '
  stdout: "test set: Test Failed at /tmp/tmpk370cv2v.jl:20\n  Expression: candidate([4,\
    \ 88]) == 88\n   Evaluated: 92 == 88\nStacktrace:\n [1] macro expansion\n   @\
    \ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpk370cv2v.jl:20 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpk370cv2v.jl:19\ntest set: Test Failed at /tmp/tmpk370cv2v.jl:21\n\
    \  Expression: candidate([4, 5, 6, 7, 2, 122]) == 122\n   Evaluated: 146 == 122\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpk370cv2v.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpk370cv2v.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpk370cv2v.jl:22\n  Expression: candidate([4, 0, 6, 7]) == 0\n\
    \   Evaluated: 17 == 0\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpk370cv2v.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpk370cv2v.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpk370cv2v.jl:23\n  Expression: candidate([4, 4, 6, 8]) == 12\n\
    \   Evaluated: 22 == 12\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpk370cv2v.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpk370cv2v.jl:19\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  timestamp: 1660009050
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    if length(lst)\
    \ == 0 \n        return 0 \n    evens = []\n    for e in lst:\n        if isodd(e)\n\
    \            evens.append(e)\n    return sum(evens)\nusing Test\n\n@testset begin\n\
    \ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5,\
    \ 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpm12wp3m9.jl:13\nin expression starting at\
    \ /tmp/tmpm12wp3m9.jl:13\n"
  stdout: ''
  timestamp: 1660009049
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    if len(lst) <\
    \ 2\n        return 0\n    end\n    \n    return lst[1] + (add(lst[2 .. end-1]))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88])\
    \ == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmp55t7ynjo.jl:17

    '
  stdout: "test set: Error During Test at /tmp/tmp55t7ynjo.jl:20\n  Test threw exception\n\
    \  Expression: candidate([4, 88]) == 88\n  UndefVarError: len not defined\n  Stacktrace:\n\
    \   [1] add(lst::Vector{Int64})\n     @ Main /tmp/tmp55t7ynjo.jl:9\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp55t7ynjo.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp55t7ynjo.jl:19\ntest set:\
    \ Error During Test at /tmp/tmp55t7ynjo.jl:21\n  Test threw exception\n  Expression:\
    \ candidate([4, 5, 6, 7, 2, 122]) == 122\n  UndefVarError: len not defined\n \
    \ Stacktrace:\n   [1] add(lst::Vector{Int64})\n     @ Main /tmp/tmp55t7ynjo.jl:9\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp55t7ynjo.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp55t7ynjo.jl:19\ntest set:\
    \ Error During Test at /tmp/tmp55t7ynjo.jl:22\n  Test threw exception\n  Expression:\
    \ candidate([4, 0, 6, 7]) == 0\n  UndefVarError: len not defined\n  Stacktrace:\n\
    \   [1] add(lst::Vector{Int64})\n     @ Main /tmp/tmp55t7ynjo.jl:9\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp55t7ynjo.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp55t7ynjo.jl:19\ntest set:\
    \ Error During Test at /tmp/tmp55t7ynjo.jl:23\n  Test threw exception\n  Expression:\
    \ candidate([4, 4, 6, 8]) == 12\n  UndefVarError: len not defined\n  Stacktrace:\n\
    \   [1] add(lst::Vector{Int64})\n     @ Main /tmp/tmp55t7ynjo.jl:9\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3]"
  timestamp: 1660009051
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    for i in 1:length(lst)\n\
    \        if i%%2 == 0\n            lst[i] += lst[i]\n        end\n    end\n  \
    \  return sum(lst)\nend\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThanks for your\
    \ solution, however I didn't want to use an if statement, I want to use the reduce\
    \ function since I'm new to it.\n<|/ c |>\n<| c |>\n, just like `reduce`, you\
    \ can use `if` statement but using `filter`. In fact, `filter` is just an abstraction\
    \ of `if`\n<|/ c |>\n<| c |>\nI've already solved it using filter function though.\
    \ Thanks anyway.\n<|/ c |>\n<| c |>\n, I added another solution, using reduce\n\
    <|/ c |>\n<| a dscore=0 |>\nUsing reduce to solve a problem\n<code>\nusing LinearAlgebra\n\
    using LinearAlgebra: transpose, norm\nusing Test\n\n@testset begin\n\ncandidate\
    \ = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2,\
    \ 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"%\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1eupwoae.jl:10\nin expression starting at\
    \ /tmp/tmp1eupwoae.jl:10\n"
  stdout: ''
  timestamp: 1660009049
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n     sum(lst[x ->\
    \ x % 2 == 0]) \nend\n</code>\n<|/ a tags=julia,function,sum,vector |>\n<| c |>\n\
    Yes, but my task is to write that function without using loops.\n<|/ c |>\n<|\
    \ c |>\nI have added a possible solution without loops. Please check it.\n<|/\
    \ c |>\n<| c |>\nThanks, this worked great! \nI'm a noob at this so I didn't know\
    \ that i can use \"->\" within square brackets. Thanks again!\n<|/ c |>\n<| a\
    \ |>\nA shorter version of this without loops and using the functional programming\
    \ paradigm:\n<code>\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4,\
    \ 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgvqgir3y.jl:11\nin expression starting at\
    \ /tmp/tmpgvqgir3y.jl:11\n"
  stdout: ''
  timestamp: 1660009049
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    for i=2:length(lst)\n\
    \        if (lst[i] % 2 ==0)\n            lst[i] = lst[i-1] + lst[i]\n       \
    \ end\n    end\n    sum(lst)\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122])\
    \ == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6,\
    \ 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp9piiv6sv.jl:18

    '
  stdout: "test set: Test Failed at /tmp/tmp9piiv6sv.jl:21\n  Expression: candidate([4,\
    \ 88]) == 88\n   Evaluated: 96 == 88\nStacktrace:\n [1] macro expansion\n   @\
    \ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp9piiv6sv.jl:21 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp9piiv6sv.jl:20\ntest set: Test Failed at /tmp/tmp9piiv6sv.jl:22\n\
    \  Expression: candidate([4, 5, 6, 7, 2, 122]) == 122\n   Evaluated: 167 == 122\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9piiv6sv.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9piiv6sv.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp9piiv6sv.jl:23\n  Expression: candidate([4, 0, 6, 7]) == 0\n\
    \   Evaluated: 25 == 0\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9piiv6sv.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9piiv6sv.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp9piiv6sv.jl:24\n  Expression: candidate([4, 4, 6, 8]) == 12\n\
    \   Evaluated: 48 == 12\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9piiv6sv.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9piiv6sv.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  timestamp: 1660009051
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = filter(x\
    \ -> x % 2 == 0, lst)\n    odd = filter(x -> x % 2 != 0, lst)\n    even_sum =\
    \ sum(even)\n    odd_sum = sum(odd)\n    return even_sum + odd_sum\nend\n</cell>\n\
    <code language=julia-1.4>\n@time add([4, 2, 6, 7])\n</cell>\n<text>\nSlicing\n\
    using Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) ==\
    \ 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1dzui_fv.jl:15\nin expression starting at\
    \ /tmp/tmp1dzui_fv.jl:15\n"
  stdout: ''
  timestamp: 1660009050
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n  evenIndices = findall(x\
    \ -> mod(x,2) == 0, lst)\n  evenElements = lst[evenIndices]\n  return sum(evenElements)\n\
    end\n</cell>\n<code language=julia-0.6>\nadd([4, 2, 6, 7])\n</cell>\n<code language=julia-0.6>\n\
    @assert add([4, 2, 6, 7]) == 2\n</cell>\n<text>\n3. Remove Odd Elements\nGiven\
    \ a non-empty vector of integers lst. remove the odd elements that are at even\
    \ indices..\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4,\
    \ 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmpxxgii0.jl:13\nin expression starting at\
    \ /tmp/tmpmpxxgii0.jl:13\n"
  stdout: ''
  timestamp: 1660009050
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    sum = 0\n    for\
    \ i in 2:length(lst)\n        if lst[i]%2 ==0 \n            sum +=lst[i]\n   \
    \     end\n    end\n    return sum\nend\n\"\"\"\nGiven   a non-empty vector of\
    \ integers lst.\nremove the elements at even indices. that means every second\
    \ element in the list.\nreturn the new list.\nusing Test\n\n@testset begin\n\n\
    candidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5,\
    \ 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppxwy3on9.jl:17\nin expression starting at\
    \ /tmp/tmppxwy3on9.jl:17\n"
  stdout: ''
  timestamp: 1660009050
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    \"\"\"Return a\
    \ new vector with odd elements summed from the given list.\"\"\"\n    n = length(lst)\n\
    \    even = filter(x -> x % 2 == 0, lst)\n    odd = filter(x -> x % 2 == 1, lst)\n\
    \    return sum(odd) + sum(even)\nend\n</cell>\n<code language=julia-1.5>\n@assert\
    \ add([3, 1, 2, 3, 4]) == 6\n@assert add([-4, 2, 6, 7]) == 2\n</cell>\n<text>\n\
    Exercise 2\nWrite a function which takes a vector of real numbers and returns\
    \ the sum of the squares.\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t\
    @test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\
    \t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfb3seeld.jl:15\nin expression starting at\
    \ /tmp/tmpfb3seeld.jl:15\n"
  stdout: ''
  timestamp: 1660009050
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    for i in lst[1\
    \ .. end-1]\n        if i%2==0\n            return i\n    end\nend\n</cell>\n\
    <text>\nLet's test our new function with a few examples:\nusing Test\n\n@testset\
    \ begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpw6d2q4ut.jl:14\nin expression starting at\
    \ /tmp/tmpw6d2q4ut.jl:14\n"
  stdout: ''
  timestamp: 1660009050
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    if length(lst)\
    \ == 0 \n        return 0 \n    end\nusing Test\n\n@testset begin\n\ncandidate\
    \ = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2,\
    \ 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp3jr92g5w.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp3jr92g5w.jl:1\n\
    in expression starting at /tmp/tmp3jr92g5w.jl:1\n"
  stdout: ''
  timestamp: 1660009050
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    evens = filter(x\
    \ -> x % 2 != 0, lst)\n    odd = filter(x -> x % 2 != 0, lst)\n    return evens.reduce(::+)\
    \ + odd.reduce(::+) \nend\n</cell>\n<text>\nAnd there you have it! It works! Let's\
    \ run some tests:\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4,\
    \ 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid \"::\" syntax around /tmp/tmpm73b8i3t.jl:11\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmpm73b8i3t.jl:1\nin expression starting\
    \ at /tmp/tmpm73b8i3t.jl:1\n"
  stdout: ''
  timestamp: 1660009050
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    if length(lst)\
    \ == 0 \n        return 0 \n    else \n        evens = lst[findall(lst.>2)]\n\
    \        odds = lst[findall(lst.>1)]\n        evens = sum(evens)\n        odds\
    \ = sum(odds)\n        return evens+odds\n    end\nend\n</code>\nMy question to\
    \ you is:\nWhat type of error are you expecting?\nWhen you receive an error, how\
    \ did you arrive at that conclusion?\nDo you think there is something else that\
    \ could be improved?\nWhat else would you expect to improve?\n<|/ a dscore=2 |>\n\
    <| c |>\nThanks a lot! You saved me a lot of time :-)\n<|/ c |>\n<| a |>\nOne\
    \ issue I see is you have:\n<code>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2,\
    \ 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxwlkv9ix.jl:19\nin expression starting at\
    \ /tmp/tmpxwlkv9ix.jl:19\n"
  stdout: ''
  timestamp: 1660009050
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n   \n    if length(lst)==0\n\
    \        return 0\n    end\n    \n    evens = lst[1 : (length(lst))]\n    odds\
    \  = lst[(length(lst)+1): end]\n    \n    return sum(evens .* 2)\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t\
    @test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\
    \t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpk43auepn.jl:19\nin expression starting at\
    \ /tmp/tmpk43auepn.jl:19\n"
  stdout: ''
  timestamp: 1660009050
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n  if lst.size == 0\
    \ \n    throw(ArgumentError(\"Invalid input\"))\n  else \n    sum = 0\n    for\
    \ el in lst\n      if el%2 == 0 \n        sum += el\n      else\n        throw(ArgumentError(\"\
    Invalid input\"))\n    end\n    sum\n  end\nend\n</cell>\n<text>\nProblem 4\n\
    Given the function sum() and the vector [1,2,3,4], calculate the sum of the numbers\
    \ in the vector.\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4,\
    \ 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxn0ohhhw.jl:22\nin expression starting at\
    \ /tmp/tmpxn0ohhhw.jl:22\n"
  stdout: ''
  timestamp: 1660009050
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    evens=filter(x\
    \ -> x %2==0, lst)\n    sum(evens)\nend\n</cell>\n<code language=julia-1.0>\n\
    @code_warntype add([4, 2, 6, 7])\n</cell>\n<code language=julia-1.0>\n@code_warntype\
    \ add([4, 2, 6, 7], 8)\n</cell>\n<code language=julia-1.0>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpu_sx_nea.jl:12\nin expression starting at\
    \ /tmp/tmpu_sx_nea.jl:12\n"
  stdout: ''
  timestamp: 1660009050
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    evens = lst[findall(x\
    \ -> x % 2 == 0, lst)]\n    odds = lst[findall(x -> x % 2 == 1, lst)]\n    \n\
    \    return (evens + odds)\nusing Test\n\n@testset begin\n\ncandidate = add;\n\
    \t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) ==\
    \ 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8])\
    \ == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpecarrpcu.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpecarrpcu.jl:1\n\
    in expression starting at /tmp/tmpecarrpcu.jl:1\n"
  stdout: ''
  timestamp: 1660009051
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    \"\"\"\n    \"\
    \"\"\n    local sum=0\n    for i in 0:(length(lst)-1)\n        if ((i mod 2)==0)\n\
    \            sum= sum+lst[i]\n        end\n    end\n    return sum\nend\n    \"\
    \"\"\n    lst = lst[:]\n    lst = add(lst)\n    return sum(lst)\nend\n</cell>\n\
    <text>\nExercise: Write a function that takes a vector x of any length and returns\
    \ the dot product (or the L2 norm) of x, the vector transposed.\nusing Test\n\n\
    @testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwd8lwpuu.jl:13\nin expression starting at\
    \ /tmp/tmpwd8lwpuu.jl:13\n"
  stdout: ''
  timestamp: 1660009051
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    evens = lst[1\
    \ .% 2 .== 0]\n    odds = lst[1 .% 2 .!= 0]\n    result = sum(x -> ifelse(x %\
    \ 2 == 0, x, 0), evens) + sum(x -> ifelse(x % 2 != 0, x, 0), odds)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\
    \t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7])\
    \ == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmp4fd8cmog.jl:15

    '
  stdout: "test set: Error During Test at /tmp/tmp4fd8cmog.jl:18\n  Test threw exception\n\
    \  Expression: candidate([4, 88]) == 88\n  ArgumentError: invalid index: false\
    \ of type Bool\n  Stacktrace:\n    [1] to_index(i::Bool)\n      @ Base ./indices.jl:293\n\
    \    [2] to_index(A::Vector{Int64}, i::Bool)\n      @ Base ./indices.jl:277\n\
    \    [3] to_indices\n      @ ./indices.jl:333 [inlined]\n    [4] to_indices\n\
    \      @ ./indices.jl:330 [inlined]\n    [5] getindex\n      @ ./abstractarray.jl:1221\
    \ [inlined]\n    [6] add(lst::Vector{Int64})\n      @ Main /tmp/tmp4fd8cmog.jl:9\n\
    \    [7] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [8] macro expansion\n      @ /tmp/tmp4fd8cmog.jl:18 [inlined]\n\
    \    [9] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [10] top-level scope\n      @ /tmp/tmp4fd8cmog.jl:17\ntest set:\
    \ Error During Test at /tmp/tmp4fd8cmog.jl:19\n  Test threw exception\n  Expression:\
    \ candidate([4, 5, 6, 7, 2, 122]) == 122\n  ArgumentError: invalid index: false\
    \ of type Bool\n  Stacktrace:\n    [1] to_index(i::Bool)\n      @ Base ./indices.jl:293\n\
    \    [2] to_index(A::Vector{Int64}, i::Bool)\n      @ Base ./indices.jl:277\n\
    \    [3] to_indices\n      @ ./indices.jl:333 [inlined]\n    [4] to_indices\n\
    \      @ ./indices.jl:330 [inlined]\n    [5] getindex\n      @ ./abstractarray.jl:1221\
    \ [inlined]\n    [6] add(lst::Vector{Int64})\n      @ Main /tmp/tmp4fd8cmog.jl:9\n\
    \    [7] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [8] macro expansion\n      @ /tmp/tmp4fd8cmog.jl:19 [inlined]\n\
    \    [9] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [10] top-level scope\n      @ /tmp/tmp4fd8cmog.jl:17\ntest set:\
    \ Error During Test at /tmp/tmp4fd8cmog.jl:20\n  Test threw exception\n  Expression:\
    \ candidate([4, 0, 6, 7]) == 0\n  ArgumentError: invalid index: false of type\
    \ Bool\n  Stacktrace:\n    [1] to_index(i::Bool)\n      @ Base ./indices.jl:293\n\
    \    [2] to_index(A::V"
  timestamp: 1660009053
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = vec(lst)\n\
    \    odd = vec(lst[1 end:])\n    for e in even\n        if isodd(e) && isodd(odd\
    \ .+ e)\n            odd .+= e\n        end\n    end\n    return odd.sum()\nend\n\
    </cell>\n<code language=julia-1.0>\n@testset \"Add even elements that are at odd\
    \ indices\" begin\n    lst = [4, 2, 6, 7]\n    @test add(lst) == 2\nend\n</cell>\n\
    <text>\nExercise 3.2: Addition of two Vectors\nGiven a non-empty vector of numbers\
    \ lst1, and another non-empty vector of numbers lst2. Add the numbers that are\
    \ present in both lists, i.e. the sum of lst1 and lst2. Return the sum.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\
    \t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7])\
    \ == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"end\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpi_m56esn.jl:10\nin expression starting at /tmp/tmpi_m56esn.jl:10\n"
  stdout: ''
  timestamp: 1660009051
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    # Your code here\n\
    \    return lst[1]\nend\n</cell>\n<text>\nProblem 4b\nusing Test\n\n@testset begin\n\
    \ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5,\
    \ 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp72048a1y.jl:12\nin expression starting at\
    \ /tmp/tmp72048a1y.jl:12\n"
  stdout: ''
  timestamp: 1660009051
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    if length(lst)\
    \ ==0 \n        throw(ArgumentError(\"empty vector cannot be added\"))\n    else\n\
    \        result=0\n        for (i,v) in enumerate(lst) \n            if v%2==0\n\
    \                result += v\n            end\n        end\n        return result\n\
    \    end\nend\nadd(x::Vector{Int64}) = x+add(x[2,end])\nadd(x::Vector{Int64},y::Int64)\
    \ = x+y\nadd(x::Int64) = x\n</cell>\n<text>\nExercise 8.4\nWrite a function that\
    \ prints the elements of a vector with space as a separator.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppbo1nx3t.jl:24\nin expression starting at\
    \ /tmp/tmppbo1nx3t.jl:24\n"
  stdout: ''
  timestamp: 1660009051
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    if length(lst)\
    \ == 0 return 0\n    if length(lst) == 1 return lst[1]\n    lst = lst.to_array()\n\
    \    lst[1] += lst[2]\n    lst[2] += lst[3]\n    lst[3] += lst[4]\n    lst[4]\
    \ += lst[5]\n    lst[5] += lst[6]\n    lst[6] += lst[7]\n    lst[7] += lst[8]\n\
    \    lst[8] += lst[9]\n    lst[9] += lst[10]\n    lst[10] += lst[11]\n    lst[11]\
    \ += lst[12]\n    lst[12] += lst[13]\n    lst[13] += lst[14]\n    lst[14] += lst[15]\n\
    \    lst[15] += lst[16]\n    lst[16] += lst[17]\n    lst[17] += lst[18]\n    lst[18]\
    \ += lst[19]\n    lst[19] += lst[20]\n    lst[20] += lst[21]\n    lst[21] += lst[22]\n\
    \    lst[22] += lst[23]\n    lst[23] += lst[24]\n    lst[24] += lst[25]\n    lst[25]\
    \ += lst[26]\n    lst[26] += lst[27]\n    lst[27] += lst[28]\n    lst[28] += lst[29]\n\
    \    lst[29] += lst[30]\n    lst[30] += lst[31]\n    lst[31] += lst[32]\n    lst[32]\
    \ += lst[33]\n    lst[33] += lst[34]\n    lst[34] += lst[35]\n    lst[35] += lst[36]\n\
    \    lst[36] += lst[37]\n    lst[37] += lst[38]\n    lst[38] += lst[39]\n    lst[39]\
    \ += lst[40]\n    lst[40] += lst[41]\n    lst[41] += lst[42]\n    lst[42] += lst[43]\n\
    \    lst[43] += lst[44]\n    lst[44] += lst[45]\n    lst[45] += lst[46]\n    lst[46]\
    \ += lst[47]\n    lst[47] += lst[48]\n    lst[48] += lst[49]\n    lst[49] += lst[50]\n\
    \    lst[50] += lst[51]\n    lst[51] += lst[52]\n    lst[52] += lst[53]\n\nusing\
    \ Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\
    \t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7])\
    \ == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpygiqvkod.jl:1\nin expression starting at /tmp/tmpygiqvkod.jl:1\n"
  stdout: ''
  timestamp: 1660009051
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    \n    \n    if\
    \ length(lst) == 0 \n        return 0 \n    end \n    \n    even = lst[div(length(lst),2)]\n\
    \    for i in lst[(div(length(lst),2)+1):length(lst)]\n        if i%2==0\n   \
    \         even += i \n        end\n    end\n    return even\nend \n</cell>\n<text>\n\
    Exercise: Implement a function for calculating the mean of a vector.\nGiven a\
    \ non-empty vector of floats lst, return the mean of the vector.\nusing Test\n\
    \n@testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3fxfoqrs.jl:23\nin expression starting at\
    \ /tmp/tmp3fxfoqrs.jl:23\n"
  stdout: ''
  timestamp: 1660009051
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    if length(lst)\
    \ == 0 || lst == []\n        return 0\n    i = 2\n    while i <= length(lst)\n\
    \        if lst[i] % 2 == 0\n            lst[i] = lst[i] + lst[i-1]\n        end\n\
    \        i = i+1\n    end\n    return lst[1]\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5,\
    \ 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpcm5c61mk.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpcm5c61mk.jl:1\n\
    in expression starting at /tmp/tmpcm5c61mk.jl:1\n"
  stdout: ''
  timestamp: 1660009051
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n   odd=zeros(1,length(lst)+1)\n\
    \   even=zeros(1,length(lst)+1)\n   for i=1:length(lst)\n       odd[i]=lst[i]%2\n\
    \       even[i]=lst[i]/2\n   end\n   odd[2]=1\n   even[2:end-1]=1\n   return sum(odd.*even)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88])\
    \ == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpjrrfpm7e.jl:21

    '
  stdout: "test set: Error During Test at /tmp/tmpjrrfpm7e.jl:24\n  Test threw exception\n\
    \  Expression: candidate([4, 88]) == 88\n  ArgumentError: indexed assignment with\
    \ a single value to possibly many locations is not supported; perhaps use broadcasting\
    \ `.=` instead?\n  Stacktrace:\n   [1] setindex_shape_check(::Int64, ::Int64)\n\
    \     @ Base ./indices.jl:261\n   [2] _unsafe_setindex!(#unused#::IndexLinear,\
    \ A::Matrix{Float64}, x::Int64, I::UnitRange{Int64})\n     @ Base ./multidimensional.jl:903\n\
    \   [3] _setindex!\n     @ ./multidimensional.jl:894 [inlined]\n   [4] setindex!\n\
    \     @ ./abstractarray.jl:1315 [inlined]\n   [5] add(lst::Vector{Int64})\n  \
    \   @ Main /tmp/tmpjrrfpm7e.jl:16\n   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [7] macro expansion\n     @ /tmp/tmpjrrfpm7e.jl:24 [inlined]\n\
    \   [8] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [9] top-level scope\n     @ /tmp/tmpjrrfpm7e.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpjrrfpm7e.jl:25\n  Test threw exception\n  Expression:\
    \ candidate([4, 5, 6, 7, 2, 122]) == 122\n  ArgumentError: indexed assignment\
    \ with a single value to possibly many locations is not supported; perhaps use\
    \ broadcasting `.=` instead?\n  Stacktrace:\n   [1] setindex_shape_check(::Int64,\
    \ ::Int64)\n     @ Base ./indices.jl:261\n   [2] _unsafe_setindex!(#unused#::IndexLinear,\
    \ A::Matrix{Float64}, x::Int64, I::UnitRange{Int64})\n     @ Base ./multidimensional.jl:903\n\
    \   [3] _setindex!\n     @ ./multidimensional.jl:894 [inlined]\n   [4] setindex!\n\
    \     @ ./abstractarray.jl:1315 [inlined]\n   [5] add(lst::Vector{Int64})\n  \
    \   @ Main /tmp/tmpjrrfpm7e.jl:16\n   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [7] macro expansion\n     @ /tmp/tmpjrrfpm7e.jl:25 [inlined]\n\
    \   [8] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [9] top-level scope\n     @ /tmp/tmpjrrfpm7e.jl:23\ntest set:\
    \ Error During Test at /tm"
  timestamp: 1660009053
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    \"\"\"\n    Your\
    \ code here\n    \"\"\"\n    for i in length(lst):\n        if i%2 != 0 \n   \
    \         lst = append(lst,lst[i])\n        end\n    return length(lst)\nend\n\
    </cell>\n<cell>\n# Test the function\n@test add(Vector{Int64}([2,4,5,7,11]) ==\
    \ 5)\n@test add(Vector{Int64}([2,2,2,2,2]) == 0)\n</cell>\n<text>\nPart 2: Dealing\
    \ with Vectors of Vectors\nIn this exercise, you'll use another built-in function,\
    \ zip, which creates a list of pairs from two given vectors.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9wv055l7.jl:13\nin expression starting at\
    \ /tmp/tmp9wv055l7.jl:13\n"
  stdout: ''
  timestamp: 1660009052
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    if lst.len%2 ==\
    \ 0 \n        return sum(lst[lst.len/2:end])\n    else\n        return sum(lst[lst.len/2:end-1])\
    \ + lst[lst.len/2]\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122])\
    \ == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6,\
    \ 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpgz865sry.jl:17

    '
  stdout: "test set: Error During Test at /tmp/tmpgz865sry.jl:20\n  Test threw exception\n\
    \  Expression: candidate([4, 88]) == 88\n  type Array has no field len\n  Stacktrace:\n\
    \   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] add(lst::Vector{Int64})\n\
    \     @ Main /tmp/tmpgz865sry.jl:9\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpgz865sry.jl:20 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpgz865sry.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpgz865sry.jl:21\n  Test threw exception\n  Expression:\
    \ candidate([4, 5, 6, 7, 2, 122]) == 122\n  type Array has no field len\n  Stacktrace:\n\
    \   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] add(lst::Vector{Int64})\n\
    \     @ Main /tmp/tmpgz865sry.jl:9\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpgz865sry.jl:21 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpgz865sry.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpgz865sry.jl:22\n  Test threw exception\n  Expression:\
    \ candidate([4, 0, 6, 7]) == 0\n  type Array has no field len\n  Stacktrace:\n\
    \   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] add(lst::Vector{Int64})\n\
    \     @ Main /tmp/tmpgz865sry.jl:9\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpgz865sry.jl:22 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpgz865sry.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpgz865sry.jl:23\n  Test threw exception\n  Expression:\
    \ candidate([4, 4, 6, 8]) == 12\n  type Array has no field len\n  Stacktrace:\n\
    \   [1] getproperty\n     @ ./Base.jl:42 [inli"
  timestamp: 1660009053
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    for i in 1:length(lst)\n\
    \        if mod(i) == 0 \n            lst[i] = lst[i] + lst[mod(i,2)]\n      \
    \  end\n    end\n    return lst\nend\n</cell>\n<code language=julia-1.5>\nadd([4,\
    \ 2, 6, 7])\n</cell>\n<code language=julia-1.5>\nadd([4, 2, 6, 7], 1)\n</cell>\n\
    <text>\nProblem 3: Problem 3\nGiven a vector of integers lst, reverse the elements\
    \ in lst\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4,\
    \ 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3j12dlne.jl:16\nin expression starting at\
    \ /tmp/tmp3j12dlne.jl:16\n"
  stdout: ''
  timestamp: 1660009052
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    return reduce(+,filter(odd\
    \ -> odd==true,lst))\nend\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t\
    @test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\
    \t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp72n0_mc1.jl:13

    '
  stdout: "test set: Test Failed at /tmp/tmp72n0_mc1.jl:16\n  Expression: candidate([4,\
    \ 88]) == 88\n   Evaluated: 0 == 88\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp72n0_mc1.jl:16 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp72n0_mc1.jl:15\ntest set: Test\
    \ Failed at /tmp/tmp72n0_mc1.jl:17\n  Expression: candidate([4, 5, 6, 7, 2, 122])\
    \ == 122\n   Evaluated: 0 == 122\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp72n0_mc1.jl:17 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp72n0_mc1.jl:15\ntest set: Test\
    \ Failed at /tmp/tmp72n0_mc1.jl:19\n  Expression: candidate([4, 4, 6, 8]) == 12\n\
    \   Evaluated: 0 == 12\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp72n0_mc1.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp72n0_mc1.jl:15\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  timestamp: 1660009053
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    if length(lst)\
    \ < 2 \n        throw(DomainError())\n    end\n    return sum((lst[ii] for ii\
    \ in 2:2:end))\nend\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4,\
    \ 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"2:2:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpl73p02wh.jl:12\nin expression\
    \ starting at /tmp/tmpl73p02wh.jl:12\n"
  stdout: ''
  timestamp: 1660009052
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    if lst[1]%2 ==\
    \ 1 return 0\n    else return lst[1] + add(lst[3 : end])\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpqglawjih.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpqglawjih.jl:1\n\
    in expression starting at /tmp/tmpqglawjih.jl:1\n"
  stdout: ''
  timestamp: 1660009052
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even_inds = filter(\
    \ x->x%2==0, lst )\n    lst2 = copy(lst)\n    lst2[even_inds]+=2\n    sum(lst2)\n\
    end\n</cell>\n<text>\nThe filter() function returns a list containing only the\
    \ elements that satisfy a given test.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2,\
    \ 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzm6byjd5.jl:14\nin expression starting at\
    \ /tmp/tmpzm6byjd5.jl:14\n"
  stdout: ''
  timestamp: 1660009052
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    sum = 0\n    for\
    \ i in 0 : (length(lst) - 1) \n        if i % 2 == 0 \n            sum += lst[i]\
    \ \n        end \n    end\n    return sum \nend\nusing Test\n\n@testset begin\n\
    \ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5,\
    \ 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpri7jry12.jl:19

    '
  stdout: "test set: Error During Test at /tmp/tmpri7jry12.jl:22\n  Test threw exception\n\
    \  Expression: candidate([4, 88]) == 88\n  BoundsError: attempt to access 2-element\
    \ Vector{Int64} at index [0]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] add(lst::Vector{Int64})\n     @ Main /tmp/tmpri7jry12.jl:12\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpri7jry12.jl:22 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpri7jry12.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpri7jry12.jl:23\n  Test threw exception\n  Expression:\
    \ candidate([4, 5, 6, 7, 2, 122]) == 122\n  BoundsError: attempt to access 6-element\
    \ Vector{Int64} at index [0]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] add(lst::Vector{Int64})\n     @ Main /tmp/tmpri7jry12.jl:12\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpri7jry12.jl:23 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpri7jry12.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpri7jry12.jl:24\n  Test threw exception\n  Expression:\
    \ candidate([4, 0, 6, 7]) == 0\n  BoundsError: attempt to access 4-element Vector{Int64}\
    \ at index [0]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861 [inlined]\n\
    \   [2] add(lst::Vector{Int64})\n     @ Main /tmp/tmpri7jry12.jl:12\n   [3] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpri7jry12.jl:24 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpri7jry12.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpri7jry12.jl:25\n  Test threw exception\n  Expression"
  timestamp: 1660009054
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    sum(lst[i] for\
    \ i in indices(lst) if isodd(i))\nend\n</cell>\n<text>\nNotice that in the cell\
    \ below the list lst2 has only odd indices and so its sum is even.\nusing Test\n\
    \n@testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpl9cjj6ge.jl:11\nin expression starting at\
    \ /tmp/tmpl9cjj6ge.jl:11\n"
  stdout: ''
  timestamp: 1660009052
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    evenIndices =\
    \ collect(1:length(lst) do i \n        i % 2 == 1 \n    end)\n    reduce(+, map(lst[evenIndices],\
    \ lst[oddIndices])) # sum evens\nend\n</cell>\n<code language=julia-1.5>\nadd([4,\
    \ 2, 6, 7])\n</cell>\n<code language=julia-1.5>\nreduce(+, map(lst[evenIndices],\
    \ lst[oddIndices])) # sum evens\n</cell>\n<text>\nProblem 11\nThe following function\
    \ will return the product of two lists.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2,\
    \ 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqxnuiau9.jl:14\nin expression starting at\
    \ /tmp/tmpqxnuiau9.jl:14\n"
  stdout: ''
  timestamp: 1660009052
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    oddind = 0:length(lst)\n\
    \    for i in 1:length(lst)\n        if lst[i]%2==0\n            lst[oddind[i]]\
    \ = lst[oddind[i]] + lst[i]\n        end\n    end\n    return 0\nend\nadd([4,\
    \ 2, 6, 7])\n</cell>\n<text>\nWrite a function called mul which multiplies each\
    \ integer in a given vector/list with the integer at an even index. If the index\
    \ is odd, then add 1 to it. This will involve creating a new list/vector. For\
    \ example, if given vector/list [4, 2, 6, 7], your function will return the list\
    \ [4, 3, 6, 7]\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4,\
    \ 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: BoundsError: attempt to access 4-element Vector{Int64}\
    \ at index [0]\nStacktrace:\n [1] getindex\n   @ ./array.jl:861 [inlined]\n [2]\
    \ add(lst::Vector{Int64})\n   @ Main /tmp/tmps4v6tuh9.jl:12\n [3] top-level scope\n\
    \   @ /tmp/tmps4v6tuh9.jl:17\nin expression starting at /tmp/tmps4v6tuh9.jl:17\n"
  stdout: ''
  timestamp: 1660009054
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    evens = []\n \
    \   for i in 1:length(lst)\n        if mod(i,2) == 0 && lst[i] != 0\n        \
    \    evens.push(lst[i])\n        end\n    end\n    return sum(evens)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\
    \t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7])\
    \ == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpuf1un8bu.jl:19

    '
  stdout: "test set: Error During Test at /tmp/tmpuf1un8bu.jl:22\n  Test threw exception\n\
    \  Expression: candidate([4, 88]) == 88\n  type Array has no field push\n  Stacktrace:\n\
    \   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] add(lst::Vector{Int64})\n\
    \     @ Main /tmp/tmpuf1un8bu.jl:12\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpuf1un8bu.jl:22 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpuf1un8bu.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpuf1un8bu.jl:23\n  Test threw exception\n  Expression:\
    \ candidate([4, 5, 6, 7, 2, 122]) == 122\n  type Array has no field push\n  Stacktrace:\n\
    \   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] add(lst::Vector{Int64})\n\
    \     @ Main /tmp/tmpuf1un8bu.jl:12\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpuf1un8bu.jl:23 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpuf1un8bu.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpuf1un8bu.jl:24\n  Test threw exception\n  Expression:\
    \ candidate([4, 0, 6, 7]) == 0\n  type Array has no field push\n  Stacktrace:\n\
    \   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] add(lst::Vector{Int64})\n\
    \     @ Main /tmp/tmpuf1un8bu.jl:12\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpuf1un8bu.jl:24 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpuf1un8bu.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpuf1un8bu.jl:25\n  Test threw exception\n  Expression:\
    \ candidate([4, 4, 6, 8]) == 12\n  type Array has no field push\n  Stacktrace:\n\
    \   [1] getproperty\n     @ ./Base.jl:4"
  timestamp: 1660009054
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even_sum = 0\n\
    \    for i in 2..length(lst)\n        if lst[i] % 2 == 0\n            even_sum\
    \ += lst[i]\n        end\n    end\n    return even_sum\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpcj1ermiv.jl:19

    '
  stdout: "test set: Error During Test at /tmp/tmpcj1ermiv.jl:22\n  Test threw exception\n\
    \  Expression: candidate([4, 88]) == 88\n  UndefVarError: .. not defined\n  Stacktrace:\n\
    \   [1] add(lst::Vector{Int64})\n     @ Main /tmp/tmpcj1ermiv.jl:10\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpcj1ermiv.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpcj1ermiv.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpcj1ermiv.jl:23\n  Test threw exception\n  Expression:\
    \ candidate([4, 5, 6, 7, 2, 122]) == 122\n  UndefVarError: .. not defined\n  Stacktrace:\n\
    \   [1] add(lst::Vector{Int64})\n     @ Main /tmp/tmpcj1ermiv.jl:10\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpcj1ermiv.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpcj1ermiv.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpcj1ermiv.jl:24\n  Test threw exception\n  Expression:\
    \ candidate([4, 0, 6, 7]) == 0\n  UndefVarError: .. not defined\n  Stacktrace:\n\
    \   [1] add(lst::Vector{Int64})\n     @ Main /tmp/tmpcj1ermiv.jl:10\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpcj1ermiv.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpcj1ermiv.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpcj1ermiv.jl:25\n  Test threw exception\n  Expression:\
    \ candidate([4, 4, 6, 8]) == 12\n  UndefVarError: .. not defined\n  Stacktrace:\n\
    \   [1] add(lst::Vector{Int64})\n     @ Main /tmp/tmpcj1ermiv.jl:10\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3]"
  timestamp: 1660009054
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    local i\n    local\
    \ sum = 0\n    for i = 1:length(lst) \n        if mod(lst[i],2)==0 then \n   \
    \         sum=sum+lst[i]\n        end \n    end \n    return sum\nend \n</code>\n\
    <|/ a |>\n<| a |>\nIn Matlab this would be\n<code>\nsum([v(i) mod( v, 2 )==0 |\
    \ i \u2208 1:length(v) ]\n</code>\n<|/ a dscore=1 tags=functional-programming,vector,julia\
    \ |>\n<| c |>\nI think that is a syntax error (the `|` should be a `&&`).\n<|/\
    \ c |>\n<| c |>\nIt doesn't need to be a syntax error, that's a typo. `v(i)` is\
    \ a valid construct. In fact, it's used here to denote the index of a vector `v`\
    \ as `i`, so you might want to change that.\n<|/ c |>\n<| a tags=functional-programming,vector,julia\
    \ dscore=1 |>\nYou can try to use filter function in the following way\n<code>\n\
    sum(filter(x -> mod(x,2)==0, v))\n</code>\n<|/ a |>\n<| c |>\n`filter!` would\
    \ be more idiomatic here.\n<|/ c |>\n<| a tags=functional-programming,vector,julia\
    \ dscore=1 |>\nI like working with comprehensions just as much as possible. This\
    \ would give you a list that you could pass to sum:\n<code>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcthxjadd.jl:18\nin expression starting at\
    \ /tmp/tmpcthxjadd.jl:18\n"
  stdout: ''
  timestamp: 1660009053
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    for k in 1 : length(lst)\
    \ \n        lst[k] := lst[k] + lst[k-1] % 2 \n    end\n    return lst[1]\nend\n\
    </code>\nYou can even write it with a nested for loop:\n<code>\nusing Test\n\n\
    @testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unsupported assignment operator \":=\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_51f2qv4.jl:1\nin expression starting at /tmp/tmp_51f2qv4.jl:1\n"
  stdout: ''
  timestamp: 1660009053
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    \n    count =\
    \ 0\n    for (i in 1:length(lst))\n        if lst[i] % 2 == 1\n            lst[count]\
    \ = lst[i] + lst[i+1]\n            count += 1\n        end\n    end\n    \n  \
    \  return lst[count]\nend\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t\
    @test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\
    \t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid iteration specification\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnmhgnvrf.jl:12\nin expression starting at\
    \ /tmp/tmpnmhgnvrf.jl:12\n"
  stdout: ''
  timestamp: 1660009053
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    sum = 0\n    for\
    \ i in 0 :: length(lst)-1\n        if i%2 == 1\n            sum += lst[i]\n  \
    \      end\n    end\n    return sum\nend\n</cell>\n<text>\nQuestion 7: Problem\
    \ 4b\nGiven a vector of numbers lst. find the largest number in lst that is a\
    \ power of 2 using the formula: log2(N) = (N-1)log2(N)/2\nusing Test\n\n@testset\
    \ begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1llwl1a5.jl:17\nin expression starting at\
    \ /tmp/tmp1llwl1a5.jl:17\n"
  stdout: ''
  timestamp: 1660009053
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    sum = zero(Int64)\n\
    \    for i in 2:length(lst)\n        if lst[i] % 2 ==0\n            sum += lst[i]\n\
    \        end\n    end\n    return sum\nend\n</cell>\n<text>\nExercise 14\nCreate\
    \ a function that calculates the sum of all numbers divisible by 2.\nusing Test\n\
    \n@testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvq4h6l29.jl:17\nin expression starting at\
    \ /tmp/tmpvq4h6l29.jl:17\n"
  stdout: ''
  timestamp: 1660009053
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    if length(lst)\
    \ == 0 return 0\n    local sum = 0\n    for ii in lst do sum += ii end\n    return\
    \ sum\nend\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4,\
    \ 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid \"do\" syntax\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp3t9d71hh.jl:11\nin expression starting at /tmp/tmp3t9d71hh.jl:11\n"
  stdout: ''
  timestamp: 1660009053
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    if lst.size==0\n\
    \        return 0\n    elseif lst.size==1\n        return lst[1]\n    else\n \
    \       even = add(lst[2:2:end])\n        odd = add(lst[2:1:end])\n        return\
    \ even + odd\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = add;\n\
    \t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) ==\
    \ 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8])\
    \ == 12)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpxvye3x7n.jl:21

    '
  stdout: "test set: Error During Test at /tmp/tmpxvye3x7n.jl:24\n  Test threw exception\n\
    \  Expression: candidate([4, 88]) == 88\n  type Array has no field size\n  Stacktrace:\n\
    \   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] add(lst::Vector{Int64})\n\
    \     @ Main /tmp/tmpxvye3x7n.jl:9\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpxvye3x7n.jl:24 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpxvye3x7n.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpxvye3x7n.jl:25\n  Test threw exception\n  Expression:\
    \ candidate([4, 5, 6, 7, 2, 122]) == 122\n  type Array has no field size\n  Stacktrace:\n\
    \   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] add(lst::Vector{Int64})\n\
    \     @ Main /tmp/tmpxvye3x7n.jl:9\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpxvye3x7n.jl:25 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpxvye3x7n.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpxvye3x7n.jl:26\n  Test threw exception\n  Expression:\
    \ candidate([4, 0, 6, 7]) == 0\n  type Array has no field size\n  Stacktrace:\n\
    \   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] add(lst::Vector{Int64})\n\
    \     @ Main /tmp/tmpxvye3x7n.jl:9\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpxvye3x7n.jl:26 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpxvye3x7n.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpxvye3x7n.jl:27\n  Test threw exception\n  Expression:\
    \ candidate([4, 4, 6, 8]) == 12\n  type Array has no field size\n  Stacktrace:\n\
    \   [1] getproperty\n     @ ./Base.jl:42 ["
  timestamp: 1660009055
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    \"\"\"\n    \n\
    \    Examples:\n    >>> add(Vector{Int64}(4, 2, 6, 7))\n    2\n    \"\"\"\n  \
    \  return lst[mod(lst, 2)] + lst[mod(lst+1, 2)]\nend\n</code>\n<|/ a |>\n<| c\
    \ |>\nThanks for your response. Your code is working fine and i got the required\
    \ output. Thanks a lot for your suggestions.\n<|/ c |>\n<| c |>\nNo worries, glad\
    \ I could help :)\n<|/ c |>\n<| a tags=arrays,julia,linear-algebra,performance\
    \ dscore=0 |>\nHere is an implementation using broadcasting using mod on the indexes.\
    \ I believe it is faster than the solution using mapslices.\n<code>\nusing Test\n\
    \n@testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7wzak18h.jl:17\nin expression starting at\
    \ /tmp/tmp7wzak18h.jl:17\n"
  stdout: ''
  timestamp: 1660009053
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    n=0\n    for i\
    \ in 2:length(lst)\n        if lst[i]%2!=0\n            lst[n]=lst[i]\n      \
    \      n+=1\n        else\n            lst[n]= lst[i]+2\n        end\n    end\n\
    \    return lst[2]\nend\n</cell>\n<text>\nExercise 10\nThe function add_with_evens\
    \ takes a list of integers and returns the sum of the even elements at odd indices\
    \ starting from 0. For example, add_with_evens([4, 2, 6, 7]) should return 2.\
    \ Use nested for loops to do this.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2,\
    \ 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpp3yvqdln.jl:20\nin expression starting at\
    \ /tmp/tmpp3yvqdln.jl:20\n"
  stdout: ''
  timestamp: 1660009053
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = [i for\
    \ i in lst[::2] if i%2==0]\n    odd =  [i for i in lst[1::2] if i%2==1]\n    return\
    \ sum(even) + sum(odd)\nend\n</cell>\n<code language=julia-1.5>\nadd([4, 2, 6,\
    \ 7])\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2,\
    \ 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid \"::\" syntax around /tmp/tmpw1i91dj_.jl:9\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmpw1i91dj_.jl:1\nin expression starting\
    \ at /tmp/tmpw1i91dj_.jl:1\n"
  stdout: ''
  timestamp: 1660009054
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n        \n    even=[]\n\
    \    for j in 1:length(lst)\n        if lst[j]%2==0\n            push!(even,j)\n\
    \        end\n    end\n    return sum(lst[even],lst[even]==0?0:(lst[even]-1)/2)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88])\
    \ == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: space required before \"?\" operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvr4coes2.jl:16\nin expression starting at\
    \ /tmp/tmpvr4coes2.jl:16\n"
  stdout: ''
  timestamp: 1660009054
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    for i in 2:length(lst)\
    \ \n        if lst[i] % 2 != 0 \n            lst[i - 1] += lst[i]\n        end\n\
    \    end\n    return lst[1]\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122])\
    \ == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6,\
    \ 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpfpf_mouw.jl:18

    '
  stdout: "test set: Test Failed at /tmp/tmpfpf_mouw.jl:21\n  Expression: candidate([4,\
    \ 88]) == 88\n   Evaluated: 4 == 88\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfpf_mouw.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfpf_mouw.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpfpf_mouw.jl:22\n  Expression: candidate([4, 5, 6, 7, 2, 122])\
    \ == 122\n   Evaluated: 9 == 122\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfpf_mouw.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfpf_mouw.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpfpf_mouw.jl:23\n  Expression: candidate([4, 0, 6, 7]) == 0\n\
    \   Evaluated: 4 == 0\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfpf_mouw.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfpf_mouw.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpfpf_mouw.jl:24\n  Expression: candidate([4, 4, 6, 8]) == 12\n\
    \   Evaluated: 4 == 12\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfpf_mouw.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfpf_mouw.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  timestamp: 1660009055
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    return sum(lst[1::2])\n\
    end\n</cell>\n<text>\nExercise 20\nusing Test\n\n@testset begin\n\ncandidate =\
    \ add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122])\
    \ == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6,\
    \ 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp17k6mhr7.jl:11\nin expression starting at\
    \ /tmp/tmp17k6mhr7.jl:11\n"
  stdout: ''
  timestamp: 1660009054
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    \"\"\"\n    \n\
    \    \n    \"\"\"\n    This function takes in a vector and returns the sum of\
    \ the even elements that are at odd indices.\n    \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"function\" at /tmp/tmp9s5c69pa.jl:8 expected\
    \ \"end\", got \"function\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp9s5c69pa.jl:13\n\
    in expression starting at /tmp/tmp9s5c69pa.jl:13\n"
  stdout: ''
  timestamp: 1660009054
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    evenIndexes =\
    \ getIndices(lst)\n    return sum(lst[evenIndexes])\nend\n</cell>\n<text>\nQuestion\
    \ 4\nComplete the function sumEvenIndexesInVec that takes in a vector and returns\
    \ only the summation of the even indices that are in the vector.\nusing Test\n\
    \n@testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphk2yh6v7.jl:12\nin expression starting at\
    \ /tmp/tmphk2yh6v7.jl:12\n"
  stdout: ''
  timestamp: 1660009054
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even_indexes =\
    \ findind(lst, iszero)\n    odd_indexes = findind(lst, isone)\n    for index in\
    \ even_indexes,odd_indexes\n        if index == length(lst)\n            return\
    \ lst[index]\n        end\n        if mod(index, 2) == 0\n            lst[index]\
    \ = lst[index] + lst[index + 1]\n            lst[index + 1] = 0\n        end\n\
    \    end\n    return lst[length(lst)]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2,\
    \ 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid iteration specification\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9dlrp6g0.jl:12\nin expression starting at\
    \ /tmp/tmp9dlrp6g0.jl:12\n"
  stdout: ''
  timestamp: 1660009055
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    evens = 0\n  \
    \  for i in lst\n        evens += i%2 == 0 ? i : 0\n    end\n    return evens\n\
    end\n</cell>\n<text>\nExercise 3\nComplete the function called get_average. Given\
    \ the vector vect with one number in it, your function should return the average\
    \ of that number only\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4,\
    \ 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjifwgq5z.jl:15\nin expression starting at\
    \ /tmp/tmpjifwgq5z.jl:15\n"
  stdout: ''
  timestamp: 1660009055
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    count=1\n    for\
    \ i in 1:length(lst)\n        if lst[i]==1 && lst[(i+1)%length(lst)]==0\n    \
    \        count=count+1\n        end\n    end\n    return count\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpepzpgr0h.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmpepzpgr0h.jl:22\n  Expression: candidate([4,\
    \ 88]) == 88\n   Evaluated: 1 == 88\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpepzpgr0h.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpepzpgr0h.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpepzpgr0h.jl:23\n  Expression: candidate([4, 5, 6, 7, 2, 122])\
    \ == 122\n   Evaluated: 1 == 122\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpepzpgr0h.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpepzpgr0h.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpepzpgr0h.jl:24\n  Expression: candidate([4, 0, 6, 7]) == 0\n\
    \   Evaluated: 1 == 0\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpepzpgr0h.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpepzpgr0h.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpepzpgr0h.jl:25\n  Expression: candidate([4, 4, 6, 8]) == 12\n\
    \   Evaluated: 1 == 12\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpepzpgr0h.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpepzpgr0h.jl:21\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  timestamp: 1660009056
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    \"\"\"\n    Arguments\n\
    \    ---------\n    lst : Vector{Int64}\n        Vector{Int64}\n    Returns\n\
    \    -------\n    sum : int\n    \"\"\"\n    sum = 0\n    for i in lst\n     \
    \   if i %2 == 1\n            sum += i\n        end\n    end\n    return sum\n\
    end\n</cell>\n<code language=julia-1.0>\nadd([4, 2, 6, 7])\n</cell>\n<code language=julia-1.0>\n\
    add([4, 2, 6, 7])\n</cell>\n<code language=julia-1.0>\nadd([4, 2, 6, 7])\n</cell>\n\
    <code language=julia-1.0>\nadd([4, 2, 6, 7])\n</cell>\n<code language=julia-1.0>\n\
    add([4, 2, 6, 7])\n</cell>\n<code language=julia-1.0>\nadd([4, 2, 6, 7])\n</cell>\n\
    <code language=julia-1.0>\nadd([4, 2, 6, 7])\n</cell>\n<code language=julia-1.0>\n\
    add([4, 2, 6, 7])\n</cell>\n<code language=julia-1.0>\nadd([4, 2, 6, 7])\n</cell>\n\
    <code language=julia-1.0>\nadd([4, 2, 6, 7])\n</cell>\n<code language=julia-1.0>\n\
    add([4, 2, 6, 7])\n</cell>\n<code language=julia-1.0>\nadd([4, 2, 6, 7])\n</cell>\n\
    <code language=julia-1.0>\nadd([4, 2, 6, 7])\n</cell>\n<code language=julia-1.0>\n\
    add([4, 2, 6, 7])\n</cell>\n<code language=julia-1.0>\nadd([4, 2, 6, 7])\n</cell>\n\
    <code language=julia-1.0>\nadd([4, 2, 6, 7])\n</cell>\n<code language=julia-1.0>\n\
    add([4, 2, 6, 7])\n</cell>\n<code language=julia-1.0>\nadd([4, 2, 6, 7])\n</cell>\n\
    <code language=julia-1.0>\nadd([4, 2, 6, 7])\n</cell>\n<code language=julia-1.0>\n\
    add([4, 2, 6, 7])\n</cell>\n<code language=julia-1.0>\nadd([4, 2, 6, 7])\n</cell>\n\
    <code language=julia-1.0>\nadd([4, 2, 6, 7])\n</cell>\n<code language=julia-1.0>\n\
    add([4, 2, 6, 7])\n</cell>\n<code language=julia-1.0>\nadd([4, 2, 6, 7])\n</cell>\n\
    <code language=julia-1.0>\nadd([4, 2, 6, 7])\n</cell>\n<code language=julia-1.0>\n\
    add([4, 2, 6, 7])\n</cell>\n<code language=julia-1.0>\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpryhqhgai.jl:26\nin expression starting at\
    \ /tmp/tmpryhqhgai.jl:26\n"
  stdout: ''
  timestamp: 1660009055
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    return sum(lst[2:end])\
    \ \nend \n</cell>\n<text>\nQuestion 16. Find the element at which the given number\
    \ appears in the vector\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t\
    @test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\
    \t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpv7powmjz.jl:11\nin expression starting at\
    \ /tmp/tmpv7powmjz.jl:11\n"
  stdout: ''
  timestamp: 1660009055
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n \n    sum = 0\n \n\
    \    for i in 2..length(lst) \n        if lst[i]%2 == 1 \n            sum+=(lst[i-1])\n\
    \        end\n    end\n \n    return sum\nend\n</code>\nThis code can be improved\
    \ in many ways. I did not do that. You should try to improve it.\n<|/ a tags=julia,performance\
    \ |>\n<| c |>\nYour code is correct, but there are two minor mistakes (and an\
    \ actual mistake). The first is in your `add` function, the `sum` variable is\
    \ defined outside the loop. This means it is reinitialized every time. The second\
    \ is in your `add` function, the `sum+=(lst[i-1])` line should be outside the\
    \ `if` statement, to make it work. As it is, the code is only adding one item\
    \ to the sum.\n<|/ c |>\n<| c |>\nI did not put any `sum` outside the loop as\
    \ I thought it was an example. But you are right it is better to put it outside.\
    \ Thanks!\n<|/ c |>\n<| c |>\nThanks for the feedback, I've corrected my code\
    \ and updated the answer accordingly.\n<|/ c |>\n<| c |>\n`sum` is defined outside\
    \ the loop because it's defined outside the loop, but is then reinitialized inside\
    \ the loop. `i` will end up at 1 every time inside the loop, and you'll just keep\
    \ adding the first item to `sum` over and over again. Moving `sum+=(lst[i-1])`\
    \ outside the loop would fix that, but that would mean you'd be adding `i-1` items\
    \ to the sum every time, when `i` would end up at 0 every time instead.\n<|/ c\
    \ |>\n<| c |>\nThanks for pointing that out. I've corrected my code and updated\
    \ the answer accordingly.\n<|/ c |>\n<| a |>\nI guess you can make some improvements\
    \ by avoiding allocations and using iterators instead.\n<code>\njulia> add = reduce(+,\
    \ map(x -> 2*x%2 ? x-1:0, 2:length(lst)-1))\nadd (generic function with 1 method)\n\
    using Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) ==\
    \ 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1vpalt21.jl:20\nin expression starting at\
    \ /tmp/tmp1vpalt21.jl:20\n"
  stdout: ''
  timestamp: 1660009055
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    evens = filter((i->i%2==1),\
    \ lst)\n    evens_odd = filter((i->i%2!=1), lst)\n    evens_odd_sum = reduce(+,evens_odd)\n\
    \    return evens_odd_sum\nend\n</cell>\n<text>\nExercise 4\nWrite a function\
    \ that checks whether a number is a multiple of 10 or not\nusing Test\n\n@testset\
    \ begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpne7dujpu.jl:14\nin expression starting at\
    \ /tmp/tmpne7dujpu.jl:14\n"
  stdout: ''
  timestamp: 1660009055
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even_inds = (lst:>0)\n\
    \    odds = lst[even_inds]\n    evens = lst[even_inds .* ((even_inds - 1) .==\
    \ 1)]\n    return sum(evens)\nend\n</cell>\n<text>\nExercise 2: remove Odd elements\
    \ from a list\nGiven a non-empty list of numbers, remove all odd numbers from\
    \ the list and return the resulting list. Odd numbers are defined as those that\
    \ are placed after a non-negative integer for which no greater number is placed\
    \ before it\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4,\
    \ 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \">\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8w5mjfk0.jl:9\nin expression starting at /tmp/tmp8w5mjfk0.jl:9\n"
  stdout: ''
  timestamp: 1660009055
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    for i in 2:length(lst)\n\
    \        lst[i] = lst[i] + (lst[(i-1)] * (i%2==1))\n    end\n    \n    return\
    \ lst[1]\nend\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis works great for even\
    \ numbers, but doesn't work for odd numbers, i.e. returns 0 instead of 2. The\
    \ function would need to return 2 in that case.\n<|/ c |>\n<| c |>\nHi, I have\
    \ edited my code to return even numbers. Thanks for pointing it out.\n<|/ c |>\n\
    <| a dscore=0 tags=arrays,julia |>\nHere's a general solution which does not require\
    \ you to modify the input:\n<code>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2,\
    \ 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2aey6igv.jl:15\nin expression starting at\
    \ /tmp/tmp2aey6igv.jl:15\n"
  stdout: ''
  timestamp: 1660009055
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even::Int64 =\
    \ 0\n    for i in 1:length(lst)\n        if lst[i] % 2 == 0\n            even\
    \ += lst[i]\n        end\n    end\n    return even\nend\n</cell>\n<code language=julia-1.6>\n\
    using Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) ==\
    \ 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzr81yl7w.jl:17\nin expression starting at\
    \ /tmp/tmpzr81yl7w.jl:17\n"
  stdout: ''
  timestamp: 1660009055
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    lst=vec(lst)\n\
    \    even=[i for i in lst if i%2==0]\n    odd=[i for i in lst if i%2==1]\n   \
    \ \n    sum(even)+sum(odd)\nend\nusing Test\n\n@testset begin\n\ncandidate = add;\n\
    \t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) ==\
    \ 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8])\
    \ == 12)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp6o9rboe5.jl:17

    '
  stdout: "test set: Test Failed at /tmp/tmp6o9rboe5.jl:20\n  Expression: candidate([4,\
    \ 88]) == 88\n   Evaluated: 92 == 88\nStacktrace:\n [1] macro expansion\n   @\
    \ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp6o9rboe5.jl:20 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp6o9rboe5.jl:19\ntest set: Test Failed at /tmp/tmp6o9rboe5.jl:21\n\
    \  Expression: candidate([4, 5, 6, 7, 2, 122]) == 122\n   Evaluated: 146 == 122\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6o9rboe5.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6o9rboe5.jl:19\ntest set: Test\
    \ Failed at /tmp/tmp6o9rboe5.jl:22\n  Expression: candidate([4, 0, 6, 7]) == 0\n\
    \   Evaluated: 17 == 0\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6o9rboe5.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6o9rboe5.jl:19\ntest set: Test\
    \ Failed at /tmp/tmp6o9rboe5.jl:23\n  Expression: candidate([4, 4, 6, 8]) == 12\n\
    \   Evaluated: 22 == 12\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6o9rboe5.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6o9rboe5.jl:19\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  timestamp: 1660009056
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    evensum = 0\n\
    \    for element in lst\n        if element % 2 == 0\n            evensum += element\n\
    \        end\n    end\n    return evensum\nend\n</code>\nThen we can do \n<code>\n\
    add([4, 2, 6, 7])\n</code>\nOr we can just do \n<code>\nsum([4, 2, 6, 7])\n</code>\n\
    <|/ a tags=julia,list |>\n<| c |>\nThe reason I asked was because I thought there\
    \ would be a more efficient way of doing this. But I guess there isn't.\n<|/ c\
    \ |>\n<| c |>\nYes, there is. The answer has been edited.\n<|/ c |>\n<| a dscore=0\
    \ |>\nSince you have already mentioned that you are interested in how to do this\
    \ without using any packages, here's how you can do it.\n<code>\njulia> a = [1,2,3,4,5,6]\n\
    6-element Array{Int64,1}:\n 1\n 2\n 3\n 4\n 5\n 6\nusing Test\n\n@testset begin\n\
    \ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5,\
    \ 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprf9zc4pg.jl:17\nin expression starting at\
    \ /tmp/tmprf9zc4pg.jl:17\n"
  stdout: ''
  timestamp: 1660009055
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    evens = lst[findall(lst.>0)\
    \ % 2 == 0]\n    evensum = sum(evens)\n    return evensum\nend\n</cell>\n<code\
    \ language=julia-0.6>\nadd([4, 2, 6, 7])\n</cell>\n<text>\nExercise 3: add\nImplement\
    \ add that takes in a list of pairs of integers and sums the integers of the first\
    \ element in the pair.\nFor example, add(Pair(1,2)) = 3.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdgrk0nas.jl:13\nin expression starting at\
    \ /tmp/tmpdgrk0nas.jl:13\n"
  stdout: ''
  timestamp: 1660009055
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    # Your code here\n\
    \    return 0\nend\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4,\
    \ 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpr2sttu9h.jl:14

    '
  stdout: "test set: Test Failed at /tmp/tmpr2sttu9h.jl:17\n  Expression: candidate([4,\
    \ 88]) == 88\n   Evaluated: 0 == 88\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpr2sttu9h.jl:17 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpr2sttu9h.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpr2sttu9h.jl:18\n  Expression: candidate([4, 5, 6, 7, 2, 122])\
    \ == 122\n   Evaluated: 0 == 122\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpr2sttu9h.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpr2sttu9h.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpr2sttu9h.jl:20\n  Expression: candidate([4, 4, 6, 8]) == 12\n\
    \   Evaluated: 0 == 12\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpr2sttu9h.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpr2sttu9h.jl:16\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  timestamp: 1660009056
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    if length(lst)\
    \ < 2\n        return Int64(0)\n    \n    even = lst[1::2]\n    odd = lst[2::2]\n\
    \    \n    return sum(even) + sum(odd)\nend\nusing Test\n\n@testset begin\n\n\
    candidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5,\
    \ 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp_bdrfqdv.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp_bdrfqdv.jl:1\n\
    in expression starting at /tmp/tmp_bdrfqdv.jl:1\n"
  stdout: ''
  timestamp: 1660009055
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    evens_odds = findall(x\
    \ -> mod(x, 2) == 0, lst)\n    evens = filter(x -> x % 2 == 0, evens_odds)\n \
    \   evens = evens[2:end] # remove the two 0s\n    evens = vcat(evens, lst)\n \
    \   return sum(evens)\nend\nusing Test\n\n@testset begin\n\ncandidate = add;\n\
    \t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) ==\
    \ 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8])\
    \ == 12)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpxftahjh9.jl:17

    '
  stdout: "test set: Test Failed at /tmp/tmpxftahjh9.jl:20\n  Expression: candidate([4,\
    \ 88]) == 88\n   Evaluated: 92 == 88\nStacktrace:\n [1] macro expansion\n   @\
    \ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpxftahjh9.jl:20 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpxftahjh9.jl:19\ntest set: Test Failed at /tmp/tmpxftahjh9.jl:21\n\
    \  Expression: candidate([4, 5, 6, 7, 2, 122]) == 122\n   Evaluated: 146 == 122\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxftahjh9.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxftahjh9.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpxftahjh9.jl:22\n  Expression: candidate([4, 0, 6, 7]) == 0\n\
    \   Evaluated: 17 == 0\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxftahjh9.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxftahjh9.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpxftahjh9.jl:23\n  Expression: candidate([4, 4, 6, 8]) == 12\n\
    \   Evaluated: 26 == 12\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxftahjh9.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxftahjh9.jl:19\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  timestamp: 1660009056
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n  evens = map(x->mod(x,2),\
    \ lst)\n  sum(evens)\nend\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t\
    @test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\
    \t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpkz1q5nlp.jl:14

    '
  stdout: "test set: Test Failed at /tmp/tmpkz1q5nlp.jl:17\n  Expression: candidate([4,\
    \ 88]) == 88\n   Evaluated: 0 == 88\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkz1q5nlp.jl:17 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkz1q5nlp.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpkz1q5nlp.jl:18\n  Expression: candidate([4, 5, 6, 7, 2, 122])\
    \ == 122\n   Evaluated: 2 == 122\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkz1q5nlp.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkz1q5nlp.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpkz1q5nlp.jl:19\n  Expression: candidate([4, 0, 6, 7]) == 0\n\
    \   Evaluated: 1 == 0\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkz1q5nlp.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkz1q5nlp.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpkz1q5nlp.jl:20\n  Expression: candidate([4, 4, 6, 8]) == 12\n\
    \   Evaluated: 0 == 12\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkz1q5nlp.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkz1q5nlp.jl:16\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  timestamp: 1660009057
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    lst_even = lst[findall(x\
    \ -> x%2==0, lst)]\n    return sum(lst_even)\nend # end add()\nusing Test\n\n\
    @testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpz8me_zb4.jl:14

    '
  stdout: "test set: Test Failed at /tmp/tmpz8me_zb4.jl:17\n  Expression: candidate([4,\
    \ 88]) == 88\n   Evaluated: 92 == 88\nStacktrace:\n [1] macro expansion\n   @\
    \ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpz8me_zb4.jl:17 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpz8me_zb4.jl:16\ntest set: Test Failed at /tmp/tmpz8me_zb4.jl:18\n\
    \  Expression: candidate([4, 5, 6, 7, 2, 122]) == 122\n   Evaluated: 134 == 122\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpz8me_zb4.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpz8me_zb4.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpz8me_zb4.jl:19\n  Expression: candidate([4, 0, 6, 7]) == 0\n\
    \   Evaluated: 10 == 0\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpz8me_zb4.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpz8me_zb4.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpz8me_zb4.jl:20\n  Expression: candidate([4, 4, 6, 8]) == 12\n\
    \   Evaluated: 22 == 12\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpz8me_zb4.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpz8me_zb4.jl:16\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
  timestamp: 1660009056
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    count = 0\n  \
    \  for i in 0 : (length(lst)-1) / 2\n        if lst[i] % 2 == 0\n            lst[count]\
    \ = lst[i] + lst[i]\n            count += 1 \n        end\n    end\n    return\
    \ lst[count] \nend\n</cell>\n<code language=julia-1.0>\nadd([4, 2, 6, 7])\n</cell>\n\
    <code language=julia-1.0>\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t\
    @test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\
    \t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4ws1j26f.jl:18\nin expression starting at\
    \ /tmp/tmp4ws1j26f.jl:18\n"
  stdout: ''
  timestamp: 1660009056
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    return sum(lst[1::2])\n\
    end\n</cell>\n<text>\nThe next two functions compute the sum of the numbers from\
    \ 1 to n (inclusive)\nThey use an iterator to create the range of numbers from\
    \ 1 to n (inclusive).\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4,\
    \ 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqpupe415.jl:11\nin expression starting at\
    \ /tmp/tmpqpupe415.jl:11\n"
  stdout: ''
  timestamp: 1660009056
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    count=0\n    even=false\n\
    \    for x in lst\n        if x%2==0 then \n            even=true\n        end\n\
    \        if even==true && x%2==0 then \n            count=count+x\n          \
    \  even=false\n        end\n    end\n    return count\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpzybbr7ll.jl:24

    '
  stdout: "test set: Error During Test at /tmp/tmpzybbr7ll.jl:27\n  Test threw exception\n\
    \  Expression: candidate([4, 88]) == 88\n  UndefVarError: then not defined\n \
    \ Stacktrace:\n   [1] add(lst::Vector{Int64})\n     @ Main /tmp/tmpzybbr7ll.jl:12\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpzybbr7ll.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpzybbr7ll.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpzybbr7ll.jl:28\n  Test threw exception\n  Expression:\
    \ candidate([4, 5, 6, 7, 2, 122]) == 122\n  UndefVarError: then not defined\n\
    \  Stacktrace:\n   [1] add(lst::Vector{Int64})\n     @ Main /tmp/tmpzybbr7ll.jl:12\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpzybbr7ll.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpzybbr7ll.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpzybbr7ll.jl:29\n  Test threw exception\n  Expression:\
    \ candidate([4, 0, 6, 7]) == 0\n  UndefVarError: then not defined\n  Stacktrace:\n\
    \   [1] add(lst::Vector{Int64})\n     @ Main /tmp/tmpzybbr7ll.jl:12\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpzybbr7ll.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpzybbr7ll.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpzybbr7ll.jl:30\n  Test threw exception\n  Expression:\
    \ candidate([4, 4, 6, 8]) == 12\n  UndefVarError: then not defined\n  Stacktrace:\n\
    \   [1] add(lst::Vector{Int64})\n     @ Main /tmp/tmpzybbr7ll.jl:12\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined"
  timestamp: 1660009057
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    \"\"\"\n    Your\
    \ code here\n    \"\"\"\n    return sum([i for i in lst[1::2]]) + sum(lst[1::2]+[i\
    \ for i in lst[::2]])\nend\n</cell>\n<text>\nPart B (1 point)\nWrite a function\
    \ that adds the even elements of two vectors.\nusing Test\n\n@testset begin\n\n\
    candidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5,\
    \ 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid \"::\" syntax around /tmp/tmp43c5jvut.jl:12\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmp43c5jvut.jl:1\nin expression starting\
    \ at /tmp/tmp43c5jvut.jl:1\n"
  stdout: ''
  timestamp: 1660009056
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    sum = 0\n    for\
    \ i=2:length(lst)\n        if lst[i] % 2 != 0 \n            sum += lst[i]\n  \
    \      end\n    end\n    return sum\nend\n</cell>\n<text>\nExercise 3\nusing Test\n\
    \n@testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp93p8lpg_.jl:17\nin expression starting at\
    \ /tmp/tmp93p8lpg_.jl:17\n"
  stdout: ''
  timestamp: 1660009056
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    if lst[1] == 0\n\
    \        return lst[2]\n    else\n        return lst[2] + add(lst[3:end])\n  \
    \  end\nend\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4,\
    \ 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmp4esiavqi.jl:17

    '
  stdout: "test set: Error During Test at /tmp/tmp4esiavqi.jl:20\n  Test threw exception\n\
    \  Expression: candidate([4, 88]) == 88\n  BoundsError: attempt to access 0-element\
    \ Vector{Int64} at index [1]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] add(lst::Vector{Int64})\n     @ Main /tmp/tmp4esiavqi.jl:9\n\
    \   [3] add(lst::Vector{Int64})\n     @ Main /tmp/tmp4esiavqi.jl:12\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmp4esiavqi.jl:20 [inlined]\n\
    \   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmp4esiavqi.jl:19\ntest set:\
    \ Error During Test at /tmp/tmp4esiavqi.jl:21\n  Test threw exception\n  Expression:\
    \ candidate([4, 5, 6, 7, 2, 122]) == 122\n  BoundsError: attempt to access 0-element\
    \ Vector{Int64} at index [1]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] add(lst::Vector{Int64})\n     @ Main /tmp/tmp4esiavqi.jl:9\n\
    \   [3] add(lst::Vector{Int64}) (repeats 3 times)\n     @ Main /tmp/tmp4esiavqi.jl:12\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmp4esiavqi.jl:21 [inlined]\n\
    \   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmp4esiavqi.jl:19\ntest set:\
    \ Error During Test at /tmp/tmp4esiavqi.jl:22\n  Test threw exception\n  Expression:\
    \ candidate([4, 0, 6, 7]) == 0\n  BoundsError: attempt to access 0-element Vector{Int64}\
    \ at index [1]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861 [inlined]\n\
    \   [2] add(lst::Vector{Int64})\n     @ Main /tmp/tmp4esiavqi.jl:9\n   [3] add(lst::Vector{Int64})\
    \ (repeats 2 times)\n     @ Main /tmp/tmp4esiavqi.jl:12\n   [4] macro expansion\n\
    \     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [5] macro expansion\n     @ /tmp/tmp4esiavqi.jl:22 [inlined]\n   [6] macro\
    \ expansi"
  timestamp: 1660009058
- exit_code: 1
  program: "\"\"\"Given a non-empty vector of integers lst. add the even elements\
    \ that are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n  \
    \  2\n    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    if length(lst)\
    \ < 2 \n        return 0 \n    end\n    odd = lst[end-1]\n    even = lst[end-2]\n\
    \    lst[end-1:end] = append(odd,even,lst[end-1:end])\n    return lst[end]\nend\n\
    using Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) ==\
    \ 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpxopsqs9j.jl:19

    '
  stdout: "test set: Error During Test at /tmp/tmpxopsqs9j.jl:22\n  Test threw exception\n\
    \  Expression: candidate([4, 88]) == 88\n  BoundsError: attempt to access 2-element\
    \ Vector{Int64} at index [0]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] add(lst::Vector{Int64})\n     @ Main /tmp/tmpxopsqs9j.jl:13\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpxopsqs9j.jl:22 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpxopsqs9j.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpxopsqs9j.jl:23\n  Test threw exception\n  Expression:\
    \ candidate([4, 5, 6, 7, 2, 122]) == 122\n  UndefVarError: append not defined\n\
    \  Stacktrace:\n   [1] add(lst::Vector{Int64})\n     @ Main /tmp/tmpxopsqs9j.jl:14\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpxopsqs9j.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpxopsqs9j.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpxopsqs9j.jl:24\n  Test threw exception\n  Expression:\
    \ candidate([4, 0, 6, 7]) == 0\n  UndefVarError: append not defined\n  Stacktrace:\n\
    \   [1] add(lst::Vector{Int64})\n     @ Main /tmp/tmpxopsqs9j.jl:14\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpxopsqs9j.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpxopsqs9j.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpxopsqs9j.jl:25\n  Test threw exception\n  Expression:\
    \ candidate([4, 4, 6, 8]) == 12\n  UndefVarError: append not defined\n  Stacktrace:\n\
    \   [1] add(lst::Vector{Int64})\n     @ Main /tmp/tmpxopsqs9j.jl:14\n   [2] macro\
    \ exp"
  timestamp: 1660009058
