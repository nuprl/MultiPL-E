name: HumanEval_92_any_int
language: jl
prompt: "\"\"\"\n    Create a function that takes 3 numbers.\n    Returns true if\
  \ one of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
  \    Returns false in any other cases.\n    \n    Examples\n    >>> any_int(5, 2,\
  \ 7)\n    true\n    \n    >>> any_int(3, 2, 2)\n    false\n\n    >>> any_int(3,\
  \ -2, 1)\n    true\n    \n    >>> any_int(3.6, -2.2, 2)\n    false\n  \n\n    \n\
  \    \"\"\"\nfunction any_int(x::Float64, y::Float64, z::Float64)::Bool \n"
tests: "using Test\n\n@testset begin\n\ncandidate = any_int;\n\t@test(candidate(2,\
  \ 3, 1) == true)\n\t@test(candidate(2.5, 2, 3) == false)\n\t@test(candidate(1.5,\
  \ 5, 3.5) == false)\n\t@test(candidate(2, 6, 2) == false)\n\t@test(candidate(4,\
  \ 2, 2) == true)\n\t@test(candidate(2.2, 2.2, 2.2) == false)\n\t@test(candidate(-4,\
  \ 6, 2) == true)\n\t@test(candidate(2, 1, 1) == true)\n\t@test(candidate(3, 4, 7)\
  \ == true)\n\t@test(candidate(3.0, 4, 7) == false)\nend\n"
completions: ["    return isapprox(x, y + z, reltol = 1e-10, abstol = 1e-10) \nend\n\
    </cell>\n<code language=julia-1.3>\n# tests\n@test any_int(2, 2, 2)\n@test !any_int(2,\
    \ -2, 1)\n@test !any_int(3, -2.2, 2)\n</cell>\n<text>\n5.2. Any Function\nTo implement\
    \ the any function, you only need to write a function that takes 3 arguments and\
    \ returns true if the first argument is the same as the sum of the other two,\
    \ and false otherwise.", "    if x == y || x == z \n        return true\n    else\
    \ \n        return false\n    end\nend\n</cell>\n<code language=julia-1.5>\nany_int(5,\
    \ 5, 5)\n</cell>\n<code language=julia-1.5>\nany_int(5, 5, 4)\n</cell>\n<code\
    \ language=julia-1.5>\nany_int(5, 5, 6.6)\n</cell>\n<code language=julia-1.5>\n\
    any_int(5, 5, 4.5)\n</cell>\n<code language=julia-1.5>\nany_int(5, 5, 4.6)\n</cell>\n\
    <code language=julia-1.5>\nany_int(5, 5, 4.4)\n</cell>\n<code language=julia-1.5>\n\
    any_int(5, 5, 4.4)\n</cell>\n<code language=julia-1.5>\nany_int(5, 5, 6.4)\n</cell>\n\
    <code language=julia-1.5>\nany_int(5.2, 2, 7)\n</cell>\n<code language=julia-1.5>\n\
    any_int(5.2, 2, 6)\n</cell>\n<code language=julia-1.5>\nany_int(5, 2, 8)\n</cell>\n\
    <code language=julia-1.5>\nany_int(3.5, 2, 5.1)\n</cell>\n<code language=julia-1.5>\n\
    any_int(3.5, 2, 4)\n</cell>\n<code language=julia-1.5>\nany_int(3.5, 2, 3)\n</cell>\n\
    <code language=julia-1.5>\nany_int(3.5, 2, 3.1)\n</cell>\n<code language=julia-1.5>\n\
    any_int(3.5, 2, 3.2)\n</cell>\n<code language=julia-1.5>\nany_int(3.5, 2, 3.3)\n\
    </cell>\n<code language=julia-1.5>\nany_int(3.5, 2, 3.4)\n</cell>\n<code language=julia-1.5>\n\
    any_int(3.5, 2, 3.5)\n</cell>\n<code language=julia-1.5>\nany_int(3.5, 2, 3.6)\n\
    </cell>\n<code language=julia-1.5>\nany_int(3.5, 2, 3.7)\n</cell>\n<code language=julia-1.5>\n\
    any_int(3.5, 2, 3.8)\n</cell>\n<code language=julia-1.5>\nany_int(3.5, 2, 3.9)\n\
    </cell>\n<code language=julia-1.5>\nany_int(3.5, 2, 4)\n</cell>\n<code language=julia-1.5>\n\
    any_int(3.5, 2, 4)\n</cell>\n<code language=julia-1.5>\nany_int(3.5, 2, 4.2)\n\
    </cell>\n<code language=julia-1.5>\nany_int(3.5, 2, 4.4)\n</cell>\n<code language=julia-1.5>\n\
    any_int(3.5, 2, 4.6)\n</cell>\n<code language=julia-1.5>\nany_int(3.5, 2, 4.",
  "    if x == y || x == z\n        true\n    else\n        false\n    end\nend\n\"\
    \"\"\n    Create a function that takes 3 numbers.\n    Returns true if all numbers\
    \ are equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    >>> all_int(5, 2, 7)\n  \
    \  true\n    \n    >>> all_int(3, 2, 2)\n    false", "    if x == y+z \n    then\
    \ true \n    else false \n    end\nend\n</cell>\n<text>\n3.9 is_inf_or_nan(x)\n\
    For a real number, returns true if x is Inf or NaN. Otherwise, returns false.",
  "    \"\"\"\n    Create a function that takes 3 numbers. \n    Returns true if any\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    Returns false in any other cases.\n    \n    Examples\n    >>> any_int(5,\
    \ 2, 7)\n    true\n    \n    >>> any_int(3, 2, 2)\n    false", "    if x != x+y\
    \ || y != y+z || z != y+z\n        true\n    else\n        false\n    end\nend",
  "    any_x = x == sum(x+y, x+y, x+y)\n    any_y = y == sum(y+z, y+z, y+z)\n    any_z\
    \ = z == sum(z+x, z+x, z+x)\n    if any_x && any_y && any_z\n        return true\n\
    \    else\n        return false\n    end\nend\n</code>\n<|/ a tags=julia,arrays\
    \ |>\n<| c |>\nI'm having trouble getting this working: `sum(Int[], Int[], Int[])`\
    \ returns `0`. Maybe you missed an `if` there?\n<|/ c |>\n<| c |>\nSorry, it was\
    \ my mistake with `if`. Now it works. I updated the answer. The function will\
    \ return `true` for all cases. I believe that you can change it to your needs.\n\
    <|/ c |>\n<| c |>\nActually, it seems that it returns `false` for `sum(x+y, x+y,\
    \ x+y)` for all cases. Not sure why, though.\n<|/ c |>\n<| c |>\nThis doesn't\
    \ work for `sum(x+y, x+y, x+y)` for the same reason as my original answer (i.e.\
    \ it doesn't work for `any_int(x,y,z)`). I think it works for `any_int(x,y,z)`,\
    \ because `sum(x+y, x+y, x+y)` works for `any_int(x,y,z)`, because `x+y` works\
    \ for `any_int(x,y,z)`.\n<|/ c |>\n<| a |>\nHere is a solution which doesn't involve\
    \ any loops:\n<code>\njulia> function any_int(x::Int64, y::Int64, z::Int64)\n\
    \         x != y || y != z || z != x + y\n       end\nany_int(x::Int64, y::Int64,\
    \ z::Int64)", "    if ((x == y or x == z) and not(x .== y .== z)) || (not(x ==\
    \ y) and not(x == z) and (y == z)) || (x == y && y == z)\n        return true\n\
    \    else\n        return false\n    end\nend", "    if x < y && y < z && x >\
    \ z\n        true\n    else\n        false\n    end\nend\n</cell>\n<code language=julia-1.3>\n\
    # ok", "    return ((x == y+z) || \n            (x == y && z == 1) ||\n      \
    \      (x == z && y == 1)) \nend\n</cell>\n<code language=julia-1.6>\nany_int(5,\
    \ 2, 7)\n</cell>\n<code language=julia-1.6>\nany_int(3, 2, 2)\n</cell>\n<code\
    \ language=julia-1.6>\nany_int(3, -2, 1)\n</cell>\n<code language=julia-1.6>\n\
    any_int(3.6, -2.2, 2)\n</cell>\n<text>\nExercise\nWrite a function that takes\
    \ 3 numbers and returns the smallest of the three numbers. All numbers are integers.",
  "    \n    \n    return (not (isnan(x) or isnan(y) or isnan(z))) and (not (isinf(x)\
    \ or isinf(y) or isinf(z))) and (not (x == 0 || x == -0 || y == 0 || y == -0 ||\
    \ z == 0 || z == -0)) and (x == y || y == z || z == x || x == z or y == x)\nend",
  "    \n    if x == x + y && x == x + z\n        true\n    else\n        false\n\
    \    end\nend", "    if x == y+z \n    then return true\n    else \n        return\
    \ false\n    end\nend", "    if x == y + z\n        return true\n    return false\n\
    end", "    if x==y and x==z \n        return true\n    else \n        return false\n\
    \    end\nend\n</cell>\n<cell>\nany_int(5.4,2.6,7.8)\n</cell>\n<text>\nExercise\
    \ 8.2\nWrite a function for the sum-of-squares problem that takes in 2 numbers\
    \ and returns the sum of the squares of those numbers.", "    if x != y && x !=\
    \ z && y != z \n        then return true\n        else return false\n    end\n\
    end\n</cell>\n<text>\nWrite a function called even_odd(). It should take 3 numbers\
    \ as arguments and return true or false depending on whether the first number\
    \ is even or odd. The following example is how you should call your function.",
  "    if x > y + z \n        then true\n        else false\n    end\nend", "    if\
    \ x == y || x == z || y == z \n        true\n    else \n        false\nend", " \
    \   if x == 0 || y == 0 || z == 0 || x > y > z \n    || x < y && x < z && y <\
    \ z\n    || x < y || y < x && x < z && z < y\n    || y < x || x < y || y < x &&\
    \ z < z\n    || y < x || z < x || x < y || y < x && z < y\n    || x < y || y <\
    \ x || z < x || y < x && z < z\n    || x < y || y < x || z < x || z < x || y <\
    \ z\n    || x < y || y < x || z < x || z < x || z < y\n    || x < y || z < x ||\
    \ y < x || z < x || z < y\n    || x < y || y < x || z < x || z < x || y < z\n\
    \    || y < x || z < x || y < x || z < x || z < y\n    \n    else\n    return\
    \ true\nend", "    if x == y + z\n        true\n    else\n        false\nend\n\
    \"\"\"\nCreate a function that takes 3 integers.\nReturns true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are positive.\nReturns\
    \ false in any other cases.\n    \nExamples\n>>> any_int(5, 2, 7)\ntrue", "  \
    \  if(x == y) return true\n    if(x == z) return false\n    if(x == Inf || y ==\
    \ Inf || z == Inf) return true\n    if(x == -Inf || y == -Inf || z == -Inf) return\
    \ false\n    \n    return true\nend", "  if x != y\n    \n    false", "    if\
    \ x == x+y || x == x+z || x == y+z\n    true \n    else \n    false\n    end\n\
    end\n    \n</cell>\n<text>\nAnd then we can test it out in Julia:", '    return
    ((x .== y) .|| (x .== z) .|| (y .== z))', "    if x == y + z\n    then true\n\
    \    else false\n    end\nend\n</cell>\n<code language=julia-0.5>\n@test any_int(5,\
    \ 2, 7)\n</cell>\n<code language=julia-0.5>\n@test any_int(3, 2, 2)\n</cell>\n\
    <code language=julia-0.5>\n@test any_int(3, -2, 1)\n</cell>\n<code language=julia-0.5>\n\
    @test any_int(3.6, -2.2, 2)\n</cell>\n<text>\nAny number?", "    if x == sum(x,\
    \ y, z) && all(isInt(x)) && all(isInt(y)) && all(isInt(z)) \n    then true\n \
    \   else false \n    end\nend", "    if x == y || x == z || (y != x && z != x)\
    \ \n        return true\n    else \n        return false\n    end\nend", "   \
    \ if x == y || x == z ||\n        y == z || y == x ||\n        z == x || z ==\
    \ y then\n        return true\n    else return false\nend", "    true\nend", " \
    \   if x==y || x==z || y==z\n        return true\n    else \n        return false\n\
    end", "    return (x .== sum(x, y, z)) && x .== round(x) && y .== round(y) &&\
    \ z .== round(z)\nend\n</cell>\n<cell>\n\"\"\"\n    Create a function that takes\
    \ 3 numbers.\n    Returns true if all numbers are less than the sum of the other\
    \ two, and all numbers are integers.\n    Returns false in any other cases.\n\
    \    \n    Examples\n    >>> all_int(3, 2, 2)\n    true\n    \n    >>> all_int(3,\
    \ 2, 4)\n    false", "    if x != 0.0 && y != 0.0 && z != 0.0\n        \n    \
    \    if x == y || x == z || y == z\n            return true\n        else\n  \
    \          return false\n    else \n        return false\n    \n    end\nend",
  "    \n    if x == y || x == z \n        true\n    else \n        false\n    \n\
    \    end", "    if x == sum(x, y) && y == sum(y, z) \n    then return true\n \
    \   else return false\n    end\nend", "    if x == y+z \n        then true\n \
    \   else\n        false\nend\n</cell>\n<text>\nExercise 4\nWrite a function that\
    \ accepts a number, and returns whether or not it represents a number in the format\
    \ X1Y2Z3 where X, Y, and Z are both integers. You may assume that the input will\
    \ always be an integer greater than 0.", "    if x == y || x == z\n        true\n\
    \    else\n        false\n    end\nend", "    \n    if x == y+z\n        true\n\
    \    else\n        false\nend\n</cell>\n<code language=julia-1.3>", "    if x\
    \ > y && x > z\n        return true\n    elseif x < y && x < z\n        return\
    \ true\n    else\n        return false\n    end\nend\n    \n\"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if exactly one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    >>> one_of_int(5, 2, 7)\n\
    \    true\n    \n    >>> one_of_int(3, 2, 2)\n    false\n    \n    >>> one_of_int(3.6,\
    \ -2.2, 2)\n    true\n    \n    >>> one_of_int(3.6, -2.2, -2)\n    false\n   \
    \ \n    \"\"\"", "    any_int = (x == y + z) && (isinteger(x) || isinteger(y)\
    \ || isinteger(z)) \n    return any_int\nend", "    x == sum(x, y) && x == sum(y,\
    \ z)\nend", "    if x==y==z\n        true\n    else if x==x && y==y && z==z\n\
    \        true\n    else\n        false\n    end\nend\n</cell>\n<code language=julia-1.5>",
  "    if x == 0 || y == 0 || z == 0\n        true\n    else\n        false\n    end\n\
    end", "    if x == y+z and isa(x::Int64, y::Int64, z::Int64) then \n        return\
    \ true\n    end\n    return false\nend\n</cell>\n<text>\nProblem 7: any_float_array\n\
    Write a function that takes a Float64[] array as input, and returns true if any\
    \ of the numbers in the array are equal to the sum of the other two numbers in\
    \ the array.\nFalse otherwise.\nThe array will be sorted in increasing order from\
    \ smallest to largest.\nThe function should work for all cases, including the\
    \ empty array.", "    if x == y+z\n        true\n    else\n        false\n   \
    \ end\nend", '    (Float64(x + y) == z) || (Float64(x + y) < z) || (Float64(x
    + y) > z) || (Float64(x + y) == z) || (Float64(x + y) < z) || (Float64(x + y)
    > z) || (Float64(x + y) == z) || (Float64(x + y) < z) || (Float64(x + y) > z)
    || (Float64(x + y) == z) || (Float64(x + y) < z) || (Float64(x + y) > z)', " \
    \   \n    if x == y || x == z\n        true\n    else\n        false\nend\n</cell>\n\
    <text>\nProblem 3\nWrite a function that converts an array to a string. \nThe\
    \ function should return a string that is the array converted to a string, using\
    \ ',' as a separator.\nIt should work on any type of array (IntArray{1}, Float64Array{1},\
    \ etc.).", '    return (typeof(x) == typeof(y) and typeof(x) == typeof(z)) and
    (x == y or x == z or y == z);', "    if x == y || x == z || y == z \n    then\
    \ \n        return true\n    else\n        return false\n    end \nend", "   \
    \ Bool((x == sum(x, y) && x == sum(y, z)) || x == sum(y, z) && x == sum(z, x))\n\
    end\n</cell>\n<code language=julia-1.2>\n?println\n</cell>\n<code language=julia-1.2>",
  "    if x == y + z\n        true\n    else\n        false\n    end", "    if x ==\
    \ x || y == y || z == z\n        return true\n    else\n        return false\n\
    \    end\nend", "   if x == y || x == z || y == z\n       return true\n   else\n\
    \       return false\nend\n</cell>\n<text>\nQuestion 6. Write a function that\
    \ takes three numbers and returns true if they are all equal, and false otherwise.",
  "    return (x.*y+z == x)\nend", "    if x == y + z && x == y || x == z + y || y\
    \ == z\n        return true\n    return false\nend ", "    return x == y||x ==\
    \ z||y == z\nend", "    \n    if x == y || x == z\n    return true\n    else\n\
    \    return false\nend", "    \n    if ((x == y) && (x == z))\n        return\
    \ true\n    else if ((x != y) && (x != z) && (y != z))\n        return false\n\
    \    else\n        return true\n    end\nend", "    if x == y+z \n        || x\
    \ == y \n        || y == z \n        || y == x \n        || z == x \n        ||\
    \ z == y \n        \n            return true \n        else \n            return\
    \ false\n    else \n        return false \nend\n    \n</cell>\n<code language=julia-0.6>\n\
    \"\"\"\n    Create a function that takes 3 numbers.\n    Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    Returns false in any other cases.\n    \n    Examples\n    >>> any_int(5,\
    \ 2, 7)\n    true\n    \n    >>> any_int(3, 2, 2)\n    false", "    if x == y+z\
    \ \n    then return true\n    else return false\nend\n</cell>\n<text>\nExercise\n\
    Write a function that takes 3 numbers and returns true if at least one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.",
  "    if x == y || x == z || y == z\n        true\n    else\n        false\nend",
  "    return (x == sum(x,y,z)) and (all(x::Int, y::Int, z::Int))\nend", "    if x\
    \ == y + z\n    else false\nend\n\"\"\"\n    Create a function that takes 3 numbers.\n\
    \    Returns true if one of the numbers is equal to the sum of the other two,\
    \ and all numbers are integers.\n    Returns false in any other cases.\n    \n\
    \    Examples\n    >>> any_int(5, 2, 7)\n    true\n    \n    >>> any_int(3, 2,\
    \ 2)\n    false", "    \n    if x+y ==z\n        return true\n    \n    end\n\
    \    \n    return false\n    end", "    if x == y+z\n        true\n    else\n\
    \        false\n    end\nend\n\"\"\"\nCreate a function that takes 3 numbers.\n\
    Returns true if at least one of the numbers is equal to the sum of the other two,\
    \ and all numbers are integers.\nReturns false in any other cases.\nThe function\
    \ should return the first number that does not match the sum.\nIf the function\
    \ cannot find the first number that does not match the sum, it should return false.\n\
    Example\n    >>> any_int_first_mismatch(5, 2, 7)\n    true", "    if x == y\n\
    \    && x == z\n    && y == z\n    \n    true\n    else\n        false\n    \n\
    \    end\nend", "    if x != y + z\n        return false\n    else\n        return\
    \ true\nend\n</cell>\n<text>\nExercise 4\nNow write a function called all_ints\
    \ that checks if all numbers are integers.\nUse the function you have already\
    \ defined as a test case.\nUse println() to print a message that shows the results\
    \ of the function. Use multiple println()'s to print multiple messages.", "  \
    \  if x == y+z\n    return true\n    else \n    return false\n    end \n\"\"\"\
    \n    Create a function that takes 4 numbers.\n    Returns true if any of the\
    \ numbers is equal to the sum of the other four, and all numbers are integers.\n\
    \    Returns false in any other cases.\n    \n    Examples\n    >>> any_int(5,\
    \ 2, 7, 3)\n    true\n    \n    >>> any_int(3, 2, 2, 1, 3)\n    false", "    if\
    \ x == y || x == z \n        then return true\n    else return false\nend", " \
    \   if(x == y || x == z || y == z) \n        return true \n    else \n       \
    \ return false \nend ", '    return (x == y) || x == z || y == z', "    \n   \
    \ # check if any of x, y and z is an integer\n    return (x::Int64, y::Int64,\
    \ z::Int64) .any ((x::Int64, y::Int64, z::Int64) .== 0)", "    \n    if x == y+z\n\
    \        return true\n    else\n        return false\nend", "    return x == y+z\n\
    end", "    x == Int(x + y)&&x == Int(y + z)\nend\n</cell>\n<text>\nLet's test\
    \ our function:", "    if x == y+z\n        true\n    else\n        false\nend",
  "    \n    if x == y || y == z || z == x \n        true\n    else\n        false\n\
    end\n    \n    \n    return any_int(x::Int, y::Int, z::Int)\nend\n</cell>\n<text>\n\
    5.2.2 Function another_int \nWrite a function that takes 3 numbers.\nReturns true\
    \ if all numbers are integers and one of the numbers is equal to the sum of the\
    \ other two, and all other numbers are non-integers.\nReturns false in any other\
    \ cases.\n    \nExamples\n>>> another_int(5, 2, 7)\n    true", "    if x==y ||\
    \ y==z || x==z\n        true\n    else\n        false\n    end\nend", "    if\
    \ x == x+y && y == y+z && z == z+x \n    then true\n    else false\nend", "  \
    \  if x + y != z\n        return false\n    else \n        return true\nend",
  "    \n    if x == y || x == z\n        true\n    else\n        false\n    \nend\n\
    </cell>\n<code language=julia-1.5>\nany_int(5.5, 2, 7)\n</cell>\n<code language=julia-1.5>\n\
    @assert any_int(5.5, 2, 7) == true\n@assert any_int(5.5, 2, 6) == false\n</cell>\n\
    <code language=julia-1.5>", "    if x == y || y == z\n        true\n    else\n\
    \        false\nend", "    if x >= y and x >= z\n        return true;\n    elseif\
    \ x < y and x < z\n        return false;\n    else\n        return false;\nend\n\
    </cell>\n<text>\nAnd now we can test it using Julia. First, let's make some test\
    \ data.", "   \n    if x == y + z and x % 1 == 0 and y % 1 == 0 and z % 1 == 0\
    \ then true else false\nend\n</cell>\n<text>\n4.2 Test your code\nRun the cell\
    \ below to test your code.", "    \n    if isapprox(x, y+z) and isapprox(y, x+z)\n\
    \    else\n        false\n    end\nend", "  \n    if x==0 || y==0 || z==0\n  \
    \  then return false\n    end\n    \n    return true \nend\n</cell>\n<code language=julia-1.1>\n\
    \"\"\"\n    Create a function that takes 3 numbers.\n    Returns true if exactly\
    \ three numbers are equal to the sum of the other two, and all numbers are integers.\n\
    \    Returns false in any other cases.\n    \n    Examples\n    >>> any_int_exact(3,\
    \ 2, 7)\n    true", "    if x == z && y == z \n        return true \n    else\
    \ \n        return false\nend\n</cell>\n<text>\nsum() \nCreate a function that\
    \ takes 3 numbers.\nSums them together.\nIf any of the numbers is not an integer,\
    \ return 0.\nIf all numbers are integers, return them as is.\nReturn 0 if the\
    \ sum is negative or too large (as in \"10+-2\" where only 2 numbers can be added).\n\
    Examples:\nsum(10, 10, 10)\n20\nsum(1, 2, 3)\n5\nsum(1, 10, -2)\n0\nsum(10, 10,\
    \ -2)\n0\nsum(-10, -2, 0)\n-2\nsum(10, -10, 10)\n0", "  \n    if x == sum && y\
    \ == sum && z == sum \n        return true \n    else \n        return false \n\
    \    end \n    \nend \n</cell>\n<text>\nLet's test that it's correct:", "    if\
    \ x == y + z\n        return true\n    else\n        return false\nend\n</cell>\n\
    <cell>", "    \n        if x == y + z\n            true\n        else if x !=\
    \ z\n            false\n        else if y != z\n            false\n        else\
    \ if x < y && y < z\n            true\n        else if x < z && z < y\n      \
    \      true\n        else if y < x && x < z\n            true\n        else if\
    \ z < x && y < z\n            true\n        else false\n    end\n</code>\n<|/\
    \ a dscore=1 |>\n<| a |>\nYou only need two if statements for this:\n<code>",
  "    if x==y || x==z \n        true \n    else \n        false \n    end\nend\n\
    </cell>\n<code language=julia-1.5>", "    if x == x+y && x == x+z && x == y+z\n\
    \        true\n    else\n        false\n    end\nend\n</cell>\n<cell>\n\"\"\"\n\
    \    Create a function that takes 3 numbers.\n    Returns true if none of the\
    \ numbers are equal to the sum of the other two.\n    Returns false in any other\
    \ case.\n    \n    Examples\n    >>> none_int(1, 3, 5)\n    true\n    \n    >>>\
    \ none_int(2, 1, 4)\n    false\n    \n    >>> none_int(5, 2, 7)\n    false\n \
    \   \n    >>> none_int(5, 2, 0)\n    false\n    \n    \"\"\"", "    (x .== y)\
    \ || (x .== z) || (y .== z)\nend", "    x == y+z || x == z+y || x == y+z\nend\n\
    </cell>\n<code language=julia-1.5>\n# Task: Write a function that accepts two\
    \ arrays and outputs a boolean indicating if the two arrays are the same\n</cell>\n\
    <code language=julia-1.5>", "    if x == y || x == z || y == z \n        true\
    \ \n    elseif x < y && x < z\n        true \n    elseif y < x && y < z \n   \
    \     true \n    elseif z < x && z < y \n        true \n    else\n        false\n\
    \    end\nend", "    if z==0\n    then return true\n    else \n        if y >\
    \ x \n        then return false\n        else return any_int(x-z, x-y, x-z)\n\
    \    end \nend", "    if x != x + y && x != x + z && x != y + z && x != y + y\
    \ && x != z + z && x != z + y && x != y + z \n    && x != z + y\n        then\
    \ return true\n        \n    return false\n    \nend", "    \n    true\nend\n\
    </cell>\n<code language=julia-1.0>\n\"\"\"\n    Create a function that takes 3\
    \ numbers. \n    Returns true if one of the numbers is equal to the sum of the\
    \ other two, \n    and all numbers are non-negative integers. \n    Returns false\
    \ in any other cases.\n    \n    Examples\n    >>> any_nonneg_int(5, 2, 7)\n \
    \   true\n    \n    >>> any_nonneg_int(3, 2, 2)\n    false", "    if x == y +\
    \ z\n        true\n    else\n        false\nend\n</cell>\n<text>\nExercise 4\n\
    The following function counts the number of items in a list.\nThe function should\
    \ only accept a list of numbers. All numbers must be integers.\nA list with 1\
    \ item is counted, a list with more than 2 items is counted twice.", "    # Your\
    \ code here!\n    if x < y && y < z && x > z\n       return true\n    end\n  \
    \  return false\nend\n</cell>\n<cell>\n# test your code!", "    x==y+z \nend ",
  "    \n    if x == y and z == sum(x...) \n        return true\n    else \n     \
    \   return false\nend\n</cell>\n<text>\nSolution", "    if x == y || x == z ||\
    \ y == z \n        return true\n    else\n        return false\n    end\nend\n\
    </cell>\n<code language=julia-1.0>", "    if x == y+z\n        return true\n \
    \   else\n        return false\nend", "    if x==y==z then return true else return\
    \ false end\n    \nend\n</cell>\n<text>\n4.2.3 is_even\nWrite a function that\
    \ takes in 3 numbers.\nReturns true if one of them is even, and all numbers are\
    \ integers.\nReturns false in any other cases.\nThe function will take exactly\
    \ 2 numbers as inputs.\n    \nExamples\n    >>> is_even(2, 3, 4)\n    true", " \
    \  if x == 0 || y == 0 || z == 0 || x != y || y != z || x != z\n       return\
    \ false\n   else \n       return true\nend", "    \n    if sum(x+y, x+z, y+z)\
    \ == x\n        \n        return 1\n        \n    else\n        \n        return\
    \ 0\n        \n    end\n    \nend\n</cell>\n<code language=julia-1.4>\nany_int(x::Int64,\
    \ y::Int64, z::Int64)\n</cell>\n<text>\nQuestion 3\nWrite a function called any_floats\
    \ that takes 3 numbers.\nReturns true if any of the numbers is equal to the sum\
    \ of the other two, and all numbers are floats.\nReturns false in any other cases.\n\
    The function should take in three numbers and return true or false based on the\
    \ above rules.", "    if x == y + z\n        true\n    else\n        false\n \
    \   end\nend", "    if x==y+z\n        true\n    else\n        false", "    \n\
    \    if x + y == z\n        true\n    else\n        false\n    end\nend", "  \
    \  if x==y\n        return true\n    if x>z && x==z\n        return true\n   \
    \ else if x<z && x==z\n        return true\n    else if y>z && y==z\n        return\
    \ true\n    else\n        return false\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    any_int(5, 2, 7)\n</cell>\n<code language=julia-1.5>\nany_int(3, -2, 1)\n</cell>\n\
    <code language=julia-1.5>\nany_int(3.6, -2.2, 2)\n</cell>\n<text>\nExercise 3.2\
    \ \nNow create a function called any_real that takes 3 real numbers and returns\
    \ true if at least one of them is equal to the sum of the other two.", "    if\
    \ isapprox(x, y + z) || isapprox(x, y + z) || isapprox(z, y + x) || isapprox(y,\
    \ x + z) || isapprox(y, x + z) || isapprox(z, y + x) || isapprox(y, x + z) ||\
    \ isapprox(y, x + z) || isapprox(z, y + x) || isapprox(y, x + z) || isapprox(y,\
    \ x + z) || isapprox(z, y + x) || isapprox(y, x + z) || isapprox(y, x + z) ||\
    \ isapprox(z, y + x) || isapprox(y, x + z) || isapprox(y, x + z) || isapprox(z,\
    \ y + x) || isapprox(y, x + z) || isapprox(y, x + z) || isapprox(z, y + x)\n \
    \       return true\n    return false", "    if x == x+y && x == x+z && y == y+z\
    \ && x == z \n        then return true\n    else \n        return false\nend\n\
    </cell>\n<code language=julia-1.6>\n\"\"\"\n    Create a function that takes 3\
    \ numbers.\n    Returns true if all of the numbers are equal to the sum of the\
    \ other two, and all numbers are integers.\n    Returns false in any other cases.\n\
    \    \n    Examples\n    >>> all_int(5, 2, 7)\n    false\n    \n    >>> all_int(3,\
    \ 2, 2)\n    true", "    \n    if x == y+z && x != 0 && x != Infinity && x !=\
    \ -Infinity && y != 0 && y != Infinity && y != -Infinity && z != 0 && z != Infinity\
    \ && z != -Infinity\n        return true\n    \n    return false\nend", "    if\
    \ x == z || (x != x && y != y) || (x != x && z != z) \n    then \n        true\
    \ \n    elseif x == z || (x != x && y != y) || (y != y && z != z) \n    then \n\
    \        true \n    elseif x == z || (x != x && y != y) || (z != z && x != x)\
    \ \n    then \n        true \n    elseif y == z || (x != x && y != y) || (z !=\
    \ z && y != y) \n    then \n        true \n    elseif y == z || (x != x && y !=\
    \ y) || (y != y && z != z) \n    then \n        true \n    else \n        false\
    \ \n    end \nend \n</code>\n<|/ a |>\n<| a dscore=1 tags=julia |>\n<code>", " \
    \       if x+y ==z\n            return true\n        else return false\n    end\n\
    \    ", "        sum = x + y + z\n        \n        if sum == x\n            true\n\
    \        else\n            if sum > x\n                true\n            else\
    \ \n                if sum < x\n                    false\n                else\
    \ \n                    if sum == y\n                        true\n          \
    \          else\n                        if sum > y\n                        \
    \    true\n                        else \n                            if sum <\
    \ y\n                                false\n                            else\n\
    \                                if sum == z\n                               \
    \     true\n                                else\n                           \
    \         if sum > z\n                                        true\n         \
    \                           else \n                                        if\
    \ sum < z\n                                            false\n               \
    \                         else\n                                            false\n\
    \    end\n    return false\nend\n</cell>\n<cell>\n@test any_int(5,2,7) == true\n\
    @test any_int(3,2,2) == false\n@test any_int(3,-2,1) == true\n@test any_int(3.6,-2.2,2)\
    \ == false\n</cell>\n<text>\nNow we check every combination of 3 numbers for equality.\
    \ We do this by creating an infinite amount of possible combinations and checking\
    \ if one of these combinations is equal to the number we are looking for.", " \
    \   return (x == y) or (x == z) or (y == z)\n    end\n</cell>\n<cell>\n# Run this\
    \ cell to test your function\ntest_eq(any_int(1.0, 2.0, 3.0), true)\ntest_eq(any_int(1.0,\
    \ 3.0, 2.0), false)\ntest_eq(any_int(1.0, 2.0, 4.0), true)\ntest_eq(any_int(1.0,\
    \ 2.0, 5.0), false)\n</cell>\n<text>\n7. Counting Numbers\nNow that we have our\
    \ any_int() function, we can also use it to create our count_int() function.",
  "    \n    if x+y == z\n        return true\n    else \n        return false\nend",
  "    if x == z && y == z \n        return true \n    else \n        return false\n\
    end # any_int\n</cell>\n<text>\nQuestion 4.10\nNow let's combine any_int with\
    \ any_float to create a new function called all_ints.", "  if (x == y) || \n \
    \    (x != y and \n      isapprox(z, x + y)),\n     isapprox(x, x + y) || \n \
    \    isapprox(y, x + y)\n  else\n    false\n  end\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert @bf any_int(5, 2, 7) == true\n@assert @bf any_int(3, 2, 2) == false\n\
    @assert @bf any_int(3, -2, 1) == true\n@assert @bf any_int(3.6, -2.2, 2) == false\n\
    </cell>\n<text>\nConsider the function sum_of_three(...) that takes in 3 numbers\
    \ and returns their sum.", "    !(x == 0 || x == y) || (x == z) || (y == z) ||\
    \ (abs(y) == z)\nend\n</cell>\n<code language=julia-0.5>\n\"\"\"\nCreate function\
    \ that checks that a number is greater than 0.\nReturns true if it is and false\
    \ if it is not.\n\"\"\"", "    if x == y + z\n        true\n    else\n       \
    \ false\nend\n</cell>\n<text>\n4.1.3 Greater than\nWrite a function that takes\
    \ 3 numbers and returns true if one of them is greater than the other.\nIf all\
    \ of them are equal, return false.\nReturn false if at least one number is negative,\
    \ float or an integer.", "    if isinteger?(x) && isinteger?(y) && isinteger?(z)\
    \ \n        x + y + z == sum(x:y:z)\n    end\nend\n</code>\n<|/ a tags=julia,if-statement\
    \ |>\n<| a tags=julia,if-statement |>\nIf you want a generic function with a variable\
    \ number of arguments, you could use Base.varargs:\n<code>", "    \n    if x ==\
    \ z && y == z\n        return true\n    elseif x == z && y != z\n        return\
    \ false\n    elseif x != z && y == z\n        return false\n    elseif x != z\
    \ && y != z\n        return true\n    end\nend\n</cell>\n<code language=julia-1.6>\n\
    any_int(3, -2, 1)\n</cell>\n<code language=julia-1.6>", "    if x == y+z\n   \
    \     true\n    else\n        false\n    end\nend\n</cell>\n<text>\nQuestion 16\n\
    Write a function that returns a list of numbers between a min and max excluding\
    \ multiples of 5 and 6.", "  if ((x==y) && (x==z)) || (x==z) || (y==z)\n     return\
    \ true\n  else \n     return false\nend", "     \n    if x == y || x == z || y\
    \ == z\n        return true\n    else\n        return false\n    end\nend", " \
    \   if x == y || x == z || y == z\n    then true\n    else false\n    end\n  \
    \  end\n    \"\"\"", "    if isapprox(x, z, rtol=0.0, atol=1e-08)\n    true\n\
    elseif isapprox(y, z, rtol=0.0, atol=1e-08)\n    true\nelse\n    false\nend\n\
    end\n\"\"\"", "    \n    \n    # check if all are integers\n    if x.real == x\
    \ && y.real == y && z.real == z\n    then\n        true\n    else\n        false\n\
    \    end\nend", "    if x == y || x == z\n        true\n    else\n        false\n\
    \    end\nend\n\"\"\"\nCreate a function that takes 3 numbers and returns true\
    \ if any of them is equal to the sum of the other two.\nReturns false in any other\
    \ cases.", "    \n    if x == y + z\n        return true\n    else\n        return\
    \ false\nend", "    if x == x+y && y == y+z && z == z+x then \n        return\
    \ true\n    else \n        return false\n    end\nend\n\"\"\"\n    Create a function\
    \ that takes a list of numbers.\n    Returns true if all numbers in the list are\
    \ equal.\n    Returns false if at least one number is different.\n    \n    Examples\n\
    \    >>> all_equal([1,2,2,3])\n    true\n    \n    >>> all_equal([4,1,2,3])\n\
    \    false", "    if abs(x-y)+abs(y-z) == abs(x+z)\n    else\n        false\n\
    \    end\nend\n</cell>\n<code language=julia-1.6>\n# Test the code\nany_int(5.0,2.0,7.0)\n\
    </cell>\n<text>\nQuestion 2\nFind a function that takes 3 numbers and returns\
    \ the sum of both numbers as a number.\nFind another function that takes 3 numbers\
    \ and returns the minimum of the two numbers.\nFind another function that takes\
    \ 3 numbers and returns the maximum of the two numbers.\nFind another function\
    \ that takes 3 numbers and returns true if the numbers are the same and false\
    \ otherwise.\nFind another function that takes 3 numbers and returns true if the\
    \ numbers are different and false otherwise.", "    if x > y && x > z\n      \
    \  true\n    elseif y > x && y > z\n        true\n    elseif z > x && z > y\n\
    \        true\n    else\n        false\n    end\nend\n</cell>\n<text>\n4. Implement\
    \ the max_int_array function", "    if x==y || y==z || z==x then \n        return\
    \ true \n    else \n        return false \nend \n</code>\n<|/ a dscore=3 |>\n\
    <| c |>\nThe proof is missing - you need to show that the sum of two numbers can\
    \ be recovered from the sum of the other two numbers.\n<|/ c |>\n<| c |>\nI've\
    \ added a proof, thanks for the reminder :D\n<|/ c |>\n<| a tags=math,algorithm,functional-programming,mathematical-optimization,f#\
    \ |>\nIf only three numbers are given you can calculate the sum of these numbers\
    \ and compare it to the other two numbers. For this you have to solve the equation\
    \ x + x + x = n. If x is negative then you already know that x + y cannot be equal\
    \ to the sum of x and y, otherwise you can solve for x. \nSo for three numbers:",
  "    if x == y || x == z || y == z\n        true\n    else \n        false\n   \
    \ end\nend", "    if x == y || x == z || y == z || x == z \n    || y > x || z\
    \ > x || z > y\n    else \n        false\n    end\nend", "    if x == x + y &&\
    \ x == y + z && y == z\n    then true\n    else false\n    end\n    \nend\n</cell>\n\
    <text>\n6. Repeat until the user enters a valid input (ex. an integer between\
    \ 0 and 9).", "    return x == y + z\n    end\n    ", "    if x == y || x == z\
    \ || y == z\n        return true\n    else \n        return false\n    end\nend",
  "    \n    if x+y==z\n        true\n    else\n        false\n    end\nend", "  \
    \  return x == (x + y) || x == (x + z) || y == (y + z) || x == y || x == z ||\
    \ y == z\nend\n</cell>\n<text>\n4.5 sum", "    if x % y == z \n        then return\
    \ true\n    else \n        return false\n    end\nend\n\"\"\"\n    Create a function\
    \ that takes 3 numbers.\n    Returns true if any of the numbers is equal to the\
    \ sum of the other two, and all numbers are integers.\n    Returns false in any\
    \ other cases.\n    \n    Examples\n    >>> any_int(5, 2, 7)\n    true\n    \n\
    \    >>> any_int(3, 2, 2)\n    false", "    if x == y+z\n    true\nelse\n    false\n\
    end\n</cell>\n<text>\nGreat! Now that you know how to write a function, you can\
    \ start writing code to solve the assignment. Write a for loop that iterates over\
    \ the array a_m. If one of the numbers in the array matches the sum of the other\
    \ two, return true, otherwise return false. After you've written a for loop that\
    \ checks if any of the numbers in a_m match, you can take that piece of code and\
    \ turn it into a function that you can call in an if statement to see if it returns\
    \ true or false based on whether or not it found any matches.", "    if x == y\
    \ + z\n        return true\n    else\n        return false", "    if x == y+z\
    \ \n        then true\n    else false\n    end \nend\n</code>\nWe can now call\
    \ the function:\n<code>\njulia> any_int(5, 2, 7)\ntrue", "    if x == y\n    then\
    \ return true\n    else if x == z\n    then return true\n    else if y == z\n\
    \    then return true\n    else return false\n    end", "    return (x == y+z)\
    \ && is_int(x) && is_int(y) && is_int(z)\nend", "    if x == y || y == z || x\
    \ == z || x % y == 0 || y % z == 0 || z % x == 0\n        return True\n    else\
    \ \n        return False\nend\n</code>\n<|/ a |>\n<| c |>\nThanks for sharing\
    \ your function. My problem is that the function does not return the correct values\
    \ as it should. For example, using the example in the original post would return\
    \ false, while it should, in this case, return true.\n<|/ c |>\n<| c |>\nI updated\
    \ the function and tested it out. It should be working correctly.\n<|/ c |>\n\
    <| a dscore=0 |>\nThis is what I came up with:\n<code>", "    if x == y+z \n \
    \       then true\n        \n        else false\n    end\nend\n</cell>\n<cell>\n\
    @doc any_int\n</cell>\n<text>\nExercise 4\nWrite a function that takes two numbers,\
    \ a minimum and a maximum number, and returns the largest of the three.", "  \
    \  if (x==y || x==z) || (y==z) || (x>y && x>z) || (y>z) \n        return true\n\
    \    else \n        return false\n    end\n    end\n    ", "    if x == y || x\
    \ == z || y == z\n        return true\n    else\n        return false\n    end\n\
    end\n</code>\n<|/ q dscore=3 tags=julia |>\n<| c |>\nYou probably want to use\
    \ `==` to test for equality, and not `=`. `=` is for assignment and `==` is for\
    \ equality.\n<|/ c |>\n<| c |>\nAlso, you can use `in`, e.g. `x in [y,z]`.\n<|/\
    \ c |>\n<| c |>\nThanks! I tried that as well but had trouble getting the syntax\
    \ right. Do you know why this doesn't work:\n```julia", "    if x == y+z \n  \
    \  then true \n    else false\n    end\nend", "  \n    \n    if x == y+z\n   \
    \     \n    elseif x != y+z\n        \n    elseif x == y+z\n        \n    elseif\
    \ x != y+z\n        \n    elseif x == y+z\n        \n    elseif x != y+z\n   \
    \     \n    elseif x == y+z\n        \n    elseif x != y+z\n        \n    elseif\
    \ x == y+z\n        \n    elseif x != y+z\n        \n    elseif x == y+z\n   \
    \     \n    elseif x != y+z\n        \n    elseif x == y+z\n        \n    elseif\
    \ x != y+z\n        \n    elseif x == y+z\n        \n    elseif x != y+z\n   \
    \     \n    elseif x == y+z\n        \n    elseif x != y+z\n        \n    elseif\
    \ x == y+z\n        \n    elseif x != y+z\n        \n    elseif x == y+z\n   \
    \     \n    elseif x != y+z\n        \n    elseif x == y+z\n        \n    elseif\
    \ x != y+z\n        \n    elseif x == y+z\n        \n    elseif x != y+z\n   \
    \     \n    elseif x == y+z\n        \n    elseif x != y+z\n        \n    elseif\
    \ x == y+z\n        \n    elseif x != y+z\n        \n    elseif x == y+z\n   \
    \     \n    elseif x != y+z\n        \n    elseif x == y+z\n        \n    elseif\
    \ x != y+z\n        \n    elseif x == y+z\n        \n    elseif x != y+z\n   \
    \     \n    elseif x == y+z\n        \n    elseif x != y+z\n        \n    elseif\
    \ x == y+z\n        \n    elseif x != y+z\n        \n    elseif x == y+z\n   \
    \     \n    elseif x != y+z\n        \n    elseif x == y+z\n        \n    elseif\
    \ x != y+z\n        \n    elseif x == y+z\n        \n    elseif x != y+z\n   \
    \     \n    elseif x == y+z\n        \n    elseif x != y+z\n        \n    elseif\
    \ x == y+z\n        \n    elseif x != y+z\n        \n    elseif x == y+z\n   \
    \     \n    elseif x != y+z\n        \n    elseif x == y+z\n        \n    elseif\
    \ x != y+z\n        \n    elseif x == y+z\n        \n    elseif x != y+z\n   \
    \     \n    elseif x == y+z\n        \n    elseif x != y+z\n        \n    elseif\
    \ x == y+z\n        \n    elseif x != y+z\n        ", "    if x > y \n       \
    \ or x > z \n        then true\n        else false \n    end", "    if (x == y)\
    \ && (x == z)\n        true\n    else\n        false\n    end\nend\n    \n\"\"\
    \"\n    Create a function that takes 1 number.\n    Returns true if x is greater\
    \ than or equal to 0.\n    Returns false if x is less than 0.\n    Returns false\
    \ in any other cases.\n    \n    Examples\n    >>> any_int(5)\n    true\n    \n\
    \    >>> any_int(-2)\n    false", "    if x == sum && y == sum && z == sum \n\
    \    then true\n    else false \n    end\n    \nend\n</cell>\n<text>\nTests\n\
    Run the following tests to check your implementation. Note that these will run\
    \ if you implemented any_int correctly and are able to pass all tests.", "   \
    \ \n    if x == y + z\n        true\n    \n    else \n        false\n    end",
  "    \n    if x == y+z\n        true\n    else\n        false\nend\n</cell>\n<text>\n\
    2. Write a function that finds the largest integer greater than or equal to a\
    \ given number n\nHINT: use the function isgreater from the file Bool.m which\
    \ takes the two numbers as arguments and returns a boolean", "    if x == y+z\n\
    \        return true\n    \n    else \n        return false", "    if x == y ||\
    \ x == z || y == z\n        return true\n    end\n    return false\nend\n</cell>\n\
    <code language=julia-1.4>\n\"\"\"\nCreate a function that takes 3 numbers.\nReturns\
    \ true if all of the numbers are equal to the sum of the other two, and all numbers\
    \ are integers.\nReturns false in any other cases.\n    \nExamples\n    >>> all_int(5,\
    \ 2, 7)\n    true\n    \n    >>> all_int(3, 2, 2)\n    false", "    \n    any_int\
    \ = (x == y + z) || (x == z) || (y == z) \n    \n    return any_int\nend\n</cell>\n\
    <cell>\n#export\n\"\"\"\n    Create function that takes 3 numbers, and returns\
    \ True if exactly 3 of them are divisible by 3,\n    and all numbers are integers.\n\
    \    Returns false in any other cases.\n    \n    Examples\n    >>> all_divisible(5,\
    \ 2, 7)\n    true\n    \n    >>> all_divisible(3, 2, 2)\n    false", "    true\n\
    end", "    \n    if (x==0 || y==0 || z==0) \n        return true\n    \n    else\
    \ if x != y \n        return false\n    \n    else if x != z\n        return false\n\
    \    \n    else\n        return true\nend", "    if ((x-y)==0)\n    or ((x+y)==0)\n\
    \    or ((x-z)==0)\n    or ((x+z)==0)\n    else\n        true\n    end\nend\n\
    </code>\n<|/ a tags=julia,mathematical-optimization |>\n<| c |>\n`function any_int(x::Float64,\
    \ y::Float64, z::Float64)::Bool`\n`if ((x-y)==0) || ((x+y)==0) || ((x-z)==0) ||\
    \ ((x+z)==0) else true end end`", "    return (x == y || x == z) && x == floor(x)\
    \ || y == floor(y) || z == floor(z)\nend", "    if x > y + z\n        true\n \
    \   elseif y > x + z\n        true\n    elseif z > x + y\n        true\n    elseif\
    \ x < y + z\n        true\n    elseif y < x + z\n        true\n    elseif z <\
    \ x + y\n        true\n    else\n        false\n    end\nend\n</cell>\n<text>\n\
    4.2 Pareto Distribution", "    if x == sum && y == sum && z == sum\n        return\
    \ true\n    else \n        return false\nend", "    if x == y + z\n       return\
    \ true\n    else \n       return false\n    end", "    if x==y+z\n    then true\n\
    \    else false\nend\n</cell>\n<code language=julia-0.5>\n\"\"\"\n    Create a\
    \ function that takes 3 numbers.\n    Returns true if all the numbers are equal\
    \ to the sum of the other two, and all numbers are integers.\n    Returns false\
    \ in any other cases.\n    \n    Examples\n    >>> all_int(5, 2, 7)\n    false\n\
    \    \n    >>> all_int(3, 2, 2)\n    true", "    if x == x + y && x == x + z\n\
    \        return true;\n    else \n        return false;\n    end\nend\n</cell>\n\
    <text>\nSolution", '    return (floor(x) == floor(y) + floor(z)) and ((floor(x)
    == floor(y)) or (floor(x) == floor(z)))', "    if x != x+y && x != x+z && y !=\
    \ y+z && x != y+z && z != z+x && y != z+x && z != z+y\n        return true\n \
    \   else\n        return false\n    end\nend", "    sum(x ==:y, x ==:z)\nend",
  "    if x == y+z\n       return true\n    else\n       return false\nend", "   \
    \ return (x == y || x == z && y == z)\nend", "        bool = sum(x == sum, y ==\
    \ sum, z == sum) == sum(x == y, y == z, z == sum)\n        return bool\n    end\n\
    \    ", "    if x == y+z\n        true\n    else\n        false\nend\n</cell>\n\
    <code language=julia-0.5>\n\"\"\"\n    Create a function that takes 3 numbers.\n\
    \    Returns true if any two of the numbers are equal to the sum of the other\
    \ two, and all numbers are integers.\n    Returns false in any other cases.\n\
    \    \n    Examples\n    >>> any_int_2(5, 2, 7)\n    true", "    if y == x+z &&\
    \ x == y+z \n        return true \n    else \n        return false \nend", " \
    \   if x != y && x != z && y != z && x != z\n        then return true\n      \
    \  else return false\n    end\nend", "        \n    if x == x+y && x == x+z &&\
    \ x == y+z\n    true\n    else \n    false", "    if x == x+y or x == x+z or y\
    \ == y+z\n        true\n    else\n        false\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@code_native(any_int)\n</cell>\n<text>\n\u279C Any Float64\n\
    Create a function that takes 4 numbers and returns true if one of the numbers\
    \ is equal to the sum of the other three, and all numbers are floats.\nReturns\
    \ false in any other cases.\n    \n    Examples\n    >>> any_float(3.4, 6, 2,\
    \ 2)\n    true\n    \n    >>> any_float(3.5, 6, 2, 2)\n    false\n    \n    >>>\
    \ any_float(3.5, 6, -3, 2)\n    true\n    \n    >>> any_float(3.6, 2.6, -1, 4)\n\
    \    false\n    \n    >>> any_float(3.6, 2.6, -2, 4)\n    true\n    \n    >>>\
    \ any_float(3.6, 2.6, -4, 4)\n    false\n    \n    >>> any_float(3.6, 2.6, -5,\
    \ 4)\n    true\n    \n    >>> any_float(3.6, 2.6, -5, 4.5)\n    false\n    \n\
    \    >>> any_float(3.6, 2.6, -5, 4.5)\n    true\n    \n    >>> any_float(3.6,\
    \ 2.6, -5, 4.5)\n    true\n    \n    >>> any_float(3.6, 2.6, -5, 4.5)\n    true\n\
    \    \n    >>> any_float(3.6, 2.6, -5, 4.5)\n    true\n    \n    >>> any_float(3.6,\
    \ 2.6, -5, 4.5)\n    true\n    \n    >>> any_float(3.6, 2.6, -5, 4.5)\n    true\n\
    \    \n    >>> any_float(3.6, 2.6, -5, 4.5)\n    true\n    \n    >>> any_float(3.6,\
    \ 2.6, -5, 4.5)\n    true\n    \n    >>> any_float(3.6, 2.6, -5, 4.5)\n    true\n\
    \    \n    >>> any_float(3.6, 2.6, -5, 4.5)\n    true\n    \n    >>> any_float(3.6,\
    \ 2.6, -5, 4.5)\n    true\n    \n    >>> any_float(3.6, 2.6, -5, 4.5)\n    true\n\
    \    \n    >>> any_float(3.6, 2.6, -5, 4.5)\n    true\n    \n    >>> any_float(3.6,\
    \ 2.6, -5, 4.5)\n    true\n    \n    >>> any_float(3.6, 2.6, -5, 4.5)\n    true\n\
    \    \n    >>> any_float(3.6, 2.6, -5, 4.5)\n    true\n    \n    >>> any_float(3.6,\
    \ 2.6, -5, 4.5)\n    true\n    \n    >>> any_float(3.6, 2.6, -5, 4.5)\n    ",
  "    if x == y || x == z \n        true \n    else \n        false\nend\n</cell>\n\
    <text>\n4.6: Create a function that takes 3 numbers and returns true if all three\
    \ numbers are less than 10 and all numbers are integers.\nFalse otherwise.\n \
    \  Example: any_int(10, 5, 3)\n     Returns false", "    if x == y+z\n       \
    \ true\n    else\n        false\nend", "    return x != NaN && y != NaN && z !=\
    \ NaN && !isnan(x.*x + y.*y + z.*z) && x == ceil(x) && y == ceil(y)\nend\n</cell>\n\
    <cell>\nany_int(3.6, -2.2, 2)\n</cell>\n<text>\nAll Of Your Data\nOne of the most\
    \ common questions you'll want to answer with a time series is \"what percent\
    \ of time does something happen?\" For example, imagine that your data has a value\
    \ every second for an entire day. How often do people make contact with the phone\
    \ while they're in the car? Or people come to the restaurant and go out for a\
    \ coffee break? Or people just wash their hands in the car, etc.", "    if x ==\
    \ y + z\n    then true\n    else false\n    end\nend", "    if x == y || x ==\
    \ z\n    true\n    else\n    false\nend\n</cell>\n<code language=julia-0.5>\n\
    # Test it out\nany_int(5, 2, 7)\n</cell>\n<text>\n5.3. Exercise\nWrite a function\
    \ that takes 2 integers and returns true if one of the integers is equal to the\
    \ sum of the other two.\nReturn false in all other cases.\nUse if-then-else expressions\
    \ instead of boolean operators. \nTest your function using some examples and print\
    \ the results.", "    if x != x || y != y || z != z \n        false\n    elseif\
    \ x == y + z \n        true\n    elseif x == y \n        true\n    elseif x ==\
    \ z \n        true\n    else\n        false\n    end\nend\n</cell>\n<cell>", " \
    \   return (Int64(y+z) == x || Int64(y+z) == x || Int64(y+z) == x || Int64(y+z)\
    \ == x)\nend", "    \n    #your code goes here\n    return (x == y) || (x == z)\
    \ || (y == z)\nend", "    \n    if x+y == z\n        return true\n    else\n \
    \       return false\n    end\nend", "    return (isa(x::Float64) && isa(y::Float64)\
    \ && isa(z::Float64)) || x == y || x == z || y == z\nend", "    if x == y+z\n\
    \        return true\n    \n    return false\nend ", "        if x==y or x==z\n\
    \            return true\n        else\n            return false\n        end\n\
    \    end\n    \n\"\"\"\n    Create a function that takes an array and checks to\
    \ make sure all values are the same. Returns true if all values are the same.\n\
    \    Returns false in any other case.\n    \n    Examples\n    >>> check_all_same([1,2])\n\
    \    true", "    if isa(x, Int64) && isa(y, Int64) && isa(z, Int64) && x >= 0\
    \ && y >= 0 && z >= 0 && x + y + z == sum(map(x, [y, z])) \n        return true\
    \ \n    else \n        return false \n    end\nend\n</cell>\n<code language=julia-1.5>",
  "    if x == y || x == z\n        return true\n    return false\nend \n\"\"\"\n\
    \    Create a function that takes 4 numbers.\n    Returns true if any of them\
    \ is the sum of the other three, and all numbers are integers.\n    Returns false\
    \ in any other cases.\n    \n    Examples\n    >>> any_int(5, 2, 2, 7)\n    true",
  "    if x == y + z\n    else x == z + y\n    end \nend", "    return (x <= y &&\
    \ y <= z && x \u2208 Interval(0...Inf)) -> Bool\nend \n</cell>\n<code language=julia-1.5>\n\
    @assert any_int(3.6, -2.2, 2) == true\n@assert any_int(5, 2, 7) == false\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns true if the first two arguments\
    \ are equal, and false if they are not. Do not use ==.", "    if x < y && x >\
    \ z \n    then true\n    else false\n    end \nend \n</cell>\n<code language=julia-0.5>\n\
    any_int(2,3,5)\n</cell>\n<code language=julia-0.5>\n# Solve this equation"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
