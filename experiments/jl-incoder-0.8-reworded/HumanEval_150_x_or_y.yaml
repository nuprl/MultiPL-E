name: HumanEval_150_x_or_y
language: jl
prompt: "\"\"\"A simple program which should return the value of x if n is \n    a\
  \ prime number and should return the value of y otherwise.\n\n    Examples:\n  \
  \  >>> x_or_y(7, 34, 12)\n    34\n    >>> x_or_y(15, 8, 5)\n    5\n    \n    \"\"\
  \"\nfunction x_or_y(n::Int64, x::Int64, y::Int64)::Int64 \n"
tests: "using Test\n\n@testset begin\n\ncandidate = x_or_y;\n\t@test(candidate(7,\
  \ 34, 12) == 34)\n\t@test(candidate(15, 8, 5) == 5)\n\t@test(candidate(3, 33, 5212)\
  \ == 33)\n\t@test(candidate(1259, 3, 52) == 3)\n\t@test(candidate(7919, -1, 12)\
  \ == -1)\n\t@test(candidate(3609, 1245, 583) == 583)\n\t@test(candidate(91, 56,\
  \ 129) == 129)\n\t@test(candidate(6, 34, 1234) == 1234)\n\t@test(candidate(1, 2,\
  \ 0) == 0)\n\t@test(candidate(2, 2, 0) == 2)\nend\n"
completions: ["    if n == 1\n        return x\n    \n    return x_or_y(n-2, y, x)\n\
    end\n</cell>\n<code language=julia-0.5>\nx_or_y(7, 34, 12)\n</cell>\n<text>\n\
    We can also do this using recursion. Let's compare this to our previous implementation:",
  "    if isPrime(n)\n        return x\n    else\n        return y\nend", "    if\
    \ (x == 0 && y == 0 && is_prime(n) == true)\n        return x\n    else if (n\
    \ == y && is_prime(n) == true)\n        return y\n    else if (is_prime(n) ==\
    \ true)\n        return y\n    else\n        return x\nend\n</cell>\n<code language=julia-1.3>",
  "    if n > 1 && n <= y && n != x \n    then \n        x\n    else \n        y\n\
    end\n</cell>\n<code language=julia-1.2>\n@code_warntype x_or_y(7, 34, 12)\n</cell>\n\
    <text>\nReturning multiple outputs\nJulia has a way of returning multiple values\
    \ from a single expression:", "    if n % x == 0 \n        then return x\n   \
    \     else return y\n    end\nend\n</cell>\n<code language=julia-1.5>\nx_or_y(7,\
    \ 34, 12)\n</cell>\n<code language=julia-1.5>\nx_or_y(15, 8, 5)\n</cell>\n<text>\n\
    Exercise\nThe function x_or_y(n::Int64, x::Int64, y::Int64)::Int64 should calculate\
    \ the value of the function $x^n$ if $n$ is a prime number and return the value\
    \ of the function $y^n$ otherwise.", "    if n <= 1 \n    then return x\n    else\
    \ return y\n    end\nend ", "    # YOUR CODE HERE\n    if n == 2 or n == 3 \n\
    \    then return y\n    else\n        return x \n    end\nend", "    if isPrime(n)\n\
    \        return y \n    else\n        return x\nend", "    if n == 2 \n      \
    \  return x \n    elseif isPrime(n) \n        return y \n    else\n        return\
    \ x \nend \n</cell>\n<code language=julia-0.5>\n@assert x_or_y(7, 34, 12) == 34\n\
    @assert x_or_y(15, 8, 5) == 5\n</cell>\n<text>\n4.3 The Prime Number Checker\n\
    For this problem you are going to check whether a given number is prime or not.",
  "    if n == 1 \n        return x\n    else if isPrime(n)\n        return y\n  \
    \  else \n        return x\nend\n</cell>\n<text>\nExercise 3\nThe function x_or_y\
    \ above is too general to be used directly with our function z_or_y_prime. This\
    \ function should be able to apply itself to any 3 numbers and return the result\
    \ of the appropriate function. \nWrite a function called z_or_y_prime. This function\
    \ takes three numbers and returns a single number.", "    if n == 1\n        return\
    \ x\n    \n    for prime in primes\n        if n % prime == 0\n            return\
    \ y\n    \n    return x\nend\n</cell>\n<code language=julia-0.5>\nx_or_y(7, 34,\
    \ 12)\n</cell>\n<code language=julia-0.5>\nx_or_y(15, 8, 5)\n</cell>\n<text>\n\
    Exercise: Write the function prime_finder() to find all primes smaller than a\
    \ given number. Write your function so that it returns only numbers that are less\
    \ than a given number.", "    if n >= 2\n        x \n    else\n        y \n  \
    \  end\nend\n</cell>\n<text>\nAnd now, we apply it to all numbers in the range\
    \ 1 to 100:", "    if n == 0 then return x \n    else return y\nend\n</cell>\n\
    <cell>\n# run this cell to try it out\n</cell>\n<text>\nOk let's start with the\
    \ base case, which is when n is not a prime number. Let's start by checking if\
    \ n = 1 since it's clearly not prime, otherwise we need to find if n is prime.\
    \ Luckily for us, all prime numbers are divisible by two and all even numbers\
    \ are divisible by three, so we don't have to worry about that.", "    if n %\
    \ 2 == 0 \n        then return x \n        else return y\n    end\nend\n\"\"\"",
  "    if n == 2 or n == 3 then return y\n    if n % 2 == 0 or n % 3 == 0 then return\
    \ x\n    return x_or_y(n-1, x, y)", "    if n < 2 && x > 1 && y > 1\n        \n\
    \    elseif n <= 1 && x > 0\n        \n    elseif n <= 1 && y > 0\n        \n\
    \    else\n        \n    end\nend\n</cell>\n<code language=julia-1.6>\nx_or_y(7,\
    \ 34, 12)\n</cell>\n<code language=julia-1.6>\nx_or_y(15, 8, 5)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes an input x and returns a string \"x\"\
    \ if x>1 and otherwise return \"y\".", "    if isPrime(n)\n        return x\n\
    \    else\n        return y\n    end\nend\n</cell>\n<text>\nThis code works with\
    \ Int64 but is quite slow for large numbers.  A better implementation would be\
    \ to use the Barton-Nackman algorithm to compute the value of $x$ if $n$ is prime\
    \ and $y$ if not.", "    if n % 2 == 0\n        x \n    else\n        y\n    end\n\
    end", "    if gcd(x,n) == 1 and n % x == 0 \n        then return x \n        else\
    \ return y \n    end\nend\n</cell>\n<text>\nExercise 3\nWhat is the value of $y$\
    \ if $n$ is any number other than 7?", "    if n <= 2\n    then x\n    else y\n\
    \    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function which should accept\
    \ three arguments. The first argument should be a string which is either \"positive\"\
    , \"negative\" or \"zero\". \nThe second argument is a number (positive integer).\
    \ The third argument is a number (positive integer).\nThe function should return\
    \ a string indicating whether the number is positive or negative.", "    if n\
    \ % 2 == 0 \n        then return y\n    else \n        then return x\n    end\
    \ \nend\n</cell>\n<text>\nThe function x_or_y takes three arguments. n takes the\
    \ value 7, x takes the value 34, and y takes the value 12. As shown above, we\
    \ can call the function with any of these arguments, and it will return 34, or\
    \ 5 if we pass any other value to it. In this example, we will call x_or_y with\
    \ any value we wish, such as x_or_y(7, 34, 12) and x_or_y(15, 8, 5), and it will\
    \ return 34, or 5 respectively. As you can see, we do not need to explicitly call\
    \ the function when we only want to call it once.", "    if isPrime(n) then x\
    \ else y\nend\n</cell>\n<cell>\n@code_warntype x_or_y(7, 34, 12)\n</cell>\n<text>\n\
    Exercise\nWrite a short program which calculates the value of a + b if a is greater\
    \ than or equal to 1 and b is greater than or equal to 1. You can assume that\
    \ a, b and c are integers and the program should display a message if the user\
    \ enters invalid input.", "    if n == 2\n        return y\n    else if n == 1\
    \ \n        return x\n    elseif n % 2 == 0\n        x_or_y(n-1, x, y*y)\n   \
    \ else\n        x_or_y(n-1, x*x, y*y)\nend\n</cell>\n<code language=julia-1.5>\n\
    x_or_y(7, 34, 12)\n</cell>\n<text>\nThe above code has two problems:", "    if\
    \ n == 0 \n        then return x \n    else \n        if n % x == 0 \n       \
    \     then return x_or_y(n/x, y+1, y) \n        else \n            return x_or_y(n/x,\
    \ y+1, y) \nend\n</cell>\n<text>\nLet's now write a function, which finds the\
    \ factorial of a number", "    if isPrime(n) == true then\n        x \n    else\n\
    \        y \n    end\nend\n</cell>\n<text>\n4.3 Practice with Julia\nA lot of\
    \ the functions in Julia have a special name. In fact, there is a function which\
    \ can perform many different things. The function name is called Base.show, which\
    \ is similar to println but can print multiple items at once.", "    if n == 1\n\
    \        x, y = y, x\n    elseif n != 2 || y != 1 || x == y\n        x, y = y,\
    \ x\n    elseif n == 2\n        x, y = y, x\n    else\n        return y\nend\n\
    </code>\n<|/ a tags=julia,function |>\n<| a dscore=1 tags=julia,function |>\n\
    The function x_or_y has two branches, one for n == 1, one for n > 2. To optimize\
    \ this we can use pattern matching on n.\n<code>", "    if n == 2 || n == 3 ||\
    \ n == 5 || n == 7 || n == 9\n        return x\n    else\n        return y\n \
    \   end\nend x_or_y", "    if x == n && y == n then \n        return n\n    else\
    \ if n % x == 0 && n % y == 0 then \n        return x_or_y(n / x, n / y, n / x)\n\
    \    else \n        return x_or_y(n / y, n / x, n / y)\n    end\nend", "    if\
    \ is_prime(n) == true\n    then\n        return n\n    else\n        return y\n\
    \    end\nend", "if n==0 || n==1\n    return y\nelse\n    for f in x:\n      \
    \  if f%n==0\n            return y\n    return x_or_y(n, x-1, y)\nend\nend", " \
    \   if isPrime(n) == false \n        then return y \n        else return x \n\
    end ", "    if isPrime(n) == true\n        x else y\n    end\nend\n</cell>\n<text>\n\
    Problem 7: x_or_y", "    if n == 2\n        then (x == y)\n    else\n        if\
    \ (n % 2 != 0)\n            then (x_or_y(n-1, x, y+1))\n        else\n       \
    \     then (x_or_y(n-1, x+y, y))\n        end\nend\n</cell>\n<code language=julia-1.5>",
  "    if n == 1\n        x, y = y, x\n    end\n    return x\nend\n</cell>\n<text>\n\
    Exercise 2", "    \"\"\"A simple program which should return the value of x if\
    \ n is \n    a prime number and should return the value of y otherwise.", "  \
    \  if n == 1\n        return x\n    else\n        x /= y\n        if x mod n ==\
    \ 0\n            return x\n        else\n            x /= n\n            if x\
    \ mod n == 0\n                return x\n            else\n                x /=\
    \ n\n                if x mod n == 0\n                    return x\n         \
    \       else\n                    x /= n\n                    return x\n    end\n\
    end\n</cell>\n<code language=julia-1.0>", "    if n % 2 == 0\n        then x\n\
    \    else\n        y\nend", "    if isPrime(n) == true \n        return x \n \
    \   else \n        return y\nend\n</cell>\n<code language=julia-1.4>\nx_or_y(7,\
    \ 34, 12)\n</cell>\n<code language=julia-1.4>\nx_or_y(15, 8, 5)\n</cell>\n<text>\n\
    Exercise 2: Write a function which accepts a matrix and a value $0$ as its arguments\
    \ and which returns true if the $i$-th element of the matrix is equal to the specified\
    \ value, and false otherwise.", "    if n == 1 \n        return x\n    \n    if\
    \ n % 2 == 0 \n        return x_or_y(n / 2, x, y + 1)\n    \n    if n % 3 == 0\
    \ \n        return x_or_y(n / 3, x + 1, y)\n    \n    return x_or_y(n / 2, x,\
    \ y + 1)\nend\n</cell>\n<text>\nWe will test our function by calling it with a\
    \ few examples, each of which should be printed as a string, and a description\
    \ of the result. We will use the ! function provided by Julia to automatically\
    \ display output in the Jupyter notebook. We will also give each function a short\
    \ and descriptive name so we can refer to it by its name in the notebook and in\
    \ our code. Lastly, we will use the ; operator to print each example on a separate\
    \ line.", "    if n == 1 \n        x \n    else \n        y\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@code_native x_or_y(7, 34, 12)\n</cell>\n<code language=julia-1.5>\n\
    @code_native x_or_y(15, 8, 5)\n</cell>\n<text>\nExercise\nImplement a function\
    \ which performs both of the above operations in an efficient way.", "    if n\
    \ <= 1 \n        y \n    else \n        x_or_y(n-x, y*x, y)\nend", "    if checkPrime(n)\n\
    \        return n\n    else\n        return x\n    end\nend", "  if n == 1 \n\
    \    return x \n  else \n    return y \nend \n</cell>\n<text>\nThe end goal is\
    \ to write a function that takes 2 lists l1 and l2 and returns l3 which is a list\
    \ such that l3[i] = l1[i] if l1[i] is in l2 and l2[i] if l1[i] is not in l2. \
    \ Make sure your function is efficient!", "    if n == 1 \n        return x \n\
    \    else \n        return x * x_or_y(n / 2, x, y + 1) \nend \nend \n</cell>\n\
    <code language=julia-1.6>\n#@doc x_or_y\n</cell>\n<code language=julia-1.6>\n\
    @code_warntype x_or_y(7, 34, 12)\n</cell>\n<text>\nExercise: Write a recursive\
    \ function with four parameters, that returns y if n is a prime number and x otherwise.\
    \  For example, if n = 3 then x = 4 and y = 5; if n = 7 then x = 6 and y = 12;\
    \ if n = 15 then x = 4 and y = 25.  If n is not a prime, return an error message.",
  "    if n % 2 == 0 \n    then \n        x_or_y(n/2, x, y) \n    else \n        y\
    \ \nend ", "    if isPrime(n)\n        return x\n    else\n        return y",
  "    if n <= 1 \n        return y \n    else \n        if n mod 2 == 0 \n      \
    \      return x_or_y(n / 2, x, y) \n        else \n            return x_or_y(n\
    \ / 2, y, x) \nend \nend ", "    if n == 1 \n        x \n    else\n        y\n\
    \    end\nend\n</cell>\n<text>\nExercise: Define a function x_or_z(n::Int64, z::Int64)\
    \ which takes in a number, n and returns the value of x if n is a prime number\
    \ and returns the value of z if n is not a prime number.", "    if x == y \n \
    \       then x\n    else if isPrime(n) \n        then y\n        else x\n    end\n\
    end\n</code>\n<|/ a dscore=1 |>\n<| c |>\nI actually found out what was wrong\
    \ with my code after I posted it, I used the wrong variable name in the if statement.\
    \ But thank you for posting your code, I appreciate it!\n<|/ c |>\n<| a dscore=0\
    \ |>\n<code>\nusing Math", "    if n < 2 || y < 2 || x > y || y > n\n        error(\"\
    n must be greater than 1 or y must be greater than or equal to n\")\n    else\n\
    \        if n==2 || y==2\n            return x \n        else\n            return\
    \ x_or_y(n, x-1, y-1) || x_or_y(n, x, y)\nend \n\"\"\"", "    \n    if n % 2 ==\
    \ 0 then\n        return y\n    else\n        return x\n    end", "    if n ==\
    \ 2 || n == 3 || n == 5\n        return y \n    else \n        return x\n    end\n\
    end", "    if n % x == 0 \n        then return x \n        else return y \nend\n\
    </cell>\n<code language=julia-1.6>\nx_or_y(7, 34, 12)\n</cell>\n<code language=julia-1.6>\n\
    x_or_y(15, 8, 5)\n</cell>\n<text>\nExercises", "    if n == x || n == y \n   \
    \     return n \n    else \n        return y \nend \n</cell>\n<code language=julia-1.5>\n\
    x_or_y(7, 34, 12)\n</cell>\n<text>\nFunctions as Arguments\nA function can be\
    \ passed as an argument to a function.", "    if isPrime(n)\n        return x\n\
    \    return y\nend", "    if n % 2 == 0 \n        then return y\n        else\
    \ return x\n        end\n    else return x\n    end\nend", "    if n >= 2 \n \
    \   then \n        if isPrime(n) == false \n        then \n            x \n  \
    \      else \n            y\n    else \n        x \n    end \nend \n</cell>\n\
    <code language=julia-0.6>\n@time x_or_y(7, 34, 12) \n</cell>\n<code language=julia-0.6>\n\
    @time x_or_y(15, 8, 5) \n</cell>\n<code language=julia-0.6>\n@time x_or_y(1, 2,\
    \ 3) \n</cell>\n<code language=julia-0.6>\n@time x_or_y(4, 6, 2) \n</cell>\n<text>\n\
    Exercise:", "    if n == 2 \n        return x\n    else if n % 2 == 0 \n     \
    \   then x_or_y(n/2, x, y)\n        else y\nend \n</cell>\n<text>\nAs a programmer\
    \ we would then implement the main loop in the following way:", "    if n == 0\
    \ || x == 0 || y == 0\n        0\n    else\n        if n % x == 0\n          \
    \  x_or_y(n-1, x, y+1)\n        else\n            x_or_y(n-1, x+1, y)\n      \
    \  end\n    end\nend\n</cell>\n<text>\nExercise 7\nComplete the x_or_y function\
    \ above so that it works for any input argument.", "    if n == 2 || n == 3 ||\
    \ n == 5 || n == 7\n        return x\n    else\n        return y\nend\n</cell>\n\
    <cell>\n@doc x_or_y\n</cell>\n<text>\nThe next function will take in a number\
    \ of x and y points and will plot it. It will also plot the line on the graph\
    \ with those two points and a red line with those two points but with y axis on\
    \ the right hand side.", "    if n % 2 == 0\n        return x\n    else\n    \
    \    return y", "    if n <= 1\n        y \n    elseif isPrime(n)\n        x\n\
    \    else\n        y\n    end\nend", "    if n % 2 == 0 \n    then \n        x_or_y(n,\
    \ x, y)\n    else\n        y\nend\n</cell>\n<code language=julia-1.0>\nx_or_y(7,\
    \ 34, 12)\n</cell>\n<text>\nExercise 6", "    if n == 2 | n == 5 | n == 7 | n\
    \ == 9 | n == 11 | n == 13 | n == 17 | \n        n == 19 | n == 23 | n == 29 |\
    \ n == 31 \n        then return x \n        else return y \n    end\nend\n</cell>\n\
    <cell>", "    if n % 2 == 0 \n    then y \n    else x \n    end\nend\n\"\"\"\n\
    \    \n    ", "    if n == 1 \n        return x \n    else if n % 2 == 0 \n  \
    \      return x_or_y(n/2, x, y) \n    else \n        return x_or_y(n/2, y, x) ",
  "    if n <= 1 \n    then \n        y\n    else\n        x_or_y(n, x % n, y)\n \
    \   end\nend\n</cell>\n<text>\nExercise 4\nWrite a function that takes two lists\
    \ as arguments and returns True if any element of the first list is contained\
    \ in the second list, False otherwise.", "    if isPrime(n) \n    then x\n   \
    \ else y\n    end\nend\n</cell>\n<cell>\n@test x_or_y(7, 34, 12) == 34\n@test\
    \ x_or_y(15, 8, 5) == 5\n</cell>\n<text>\nExercise 4\nWrite a function for computing\
    \ the factorial of an integer.\nFor example, factorial(5) == 120 since 5 * 4 *\
    \ 3 * 2 * 1 == 120.", "    if n == 0 || n == 1 \n    then \n        return x\n\
    \    else if n mod 2 == 0\n    then \n        return y\n    else\n        return\
    \ x_or_y(n - 1, x, y + x)\n    end \nend \n</cell>\n<cell>\nassert x_or_y(4, 3,\
    \ 1) == 4\nassert x_or_y(4, 3, 2) == 3\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes two lists of numbers and returns a list where each element is equal\
    \ to the sum of the two lists elementwise.", "    if prime(n) == true then return\
    \ x else return y\nend", "    if n % 2 == 0\n    then x \n    elseif n % 3 ==\
    \ 0 \n    then y\n    else \n        x_or_y(n, (x * x + x) / 2, (y* y) / 2)\n\
    \    end\nend\n</code>\n<|/ a dscore=1 tags=julia |>\n<| c |>\nI do not see how\
    \ this answers the question at all.\n<|/ c |>\n<| c |>\nThis code should return\
    \ `y` for `7`, but it returns `5` which is incorrect.\n<|/ c |>\n<| a dscore=0\
    \ |>\n<code>", "    if n == 2\n        y \n    elseif n == 3\n        x \n   \
    \ else\n        x_or_y(n - 1, x, y)\nend\n</cell>\n<code language=julia-1.0>\n\
    @code_warntype x_or_y(7, 34, 12)\n</cell>\n<text>\nThe same function but written\
    \ in a more Julia like way", "    if n <= 1 \n        then x \n        else y\n\
    end\n\"\"\"\n#### Exercise 4.2 ####\n\"\"\" Write a function which returns the\
    \ minimum number of times \n    that the function can be called with the given\
    \ input.\n    \n    Examples:\n    >>> max_calls(2, 2)\n    1\n    >>> max_calls(6,\
    \ 7)\n    1\n    >>> max_calls(15, 5)\n    2\n    >>> max_calls(6, 9)\n    1\n\
    \    >>> max_calls(4, 3)\n    1\n    \n    \"\"\"", "    if mod(n, 2) == 0 then\n\
    \        y\n    else\n        x\n    end\nend\n\"\"\"\n``x_or_y`` is used to select\
    \ the appropriate function for a \nparticular argument set. It returns `y` if\
    \ the first argument is a \nprime number, otherwise it returns `x`. It takes the\
    \ following arguments \n- `n`, which defines the range of values for `x` and `y`,\
    \ \n- `x`, which defines the value to return if `n` is a prime number, \n- `y`,\
    \ which defines the value to return if `n` is anything else. \nThe function `x_or_y`\
    \ should return a value of type `Int64`. ", "    # Write your code here.\n   \
    \ if n != 2\n        return y\n    else\n        return x \n    end\nend\n</cell>\n\
    <text>\nUse the Julia interpreter to test your code. Try to find ways of improving\
    \ this function", "    if n < 2 || n > 100\n        error(\"n must be greater\
    \ than 0 and less than 100\")\n    else if n == 0 || n == 1\n        return x\n\
    \    else if n == 2\n        return y\n    else if n % 2 == 0\n        return\
    \ x_or_y(n / 2, x, y)\n    else if n % 2 == 1\n        return x_or_y(n / 2, y,\
    \ x)\n    end", "    if (n == 1) return x\n    else if (n == 2) return y\n   \
    \ else \n        x <- x_or_y(n - 1, x, y // x)\n        y <- x_or_y(n - 1, x,\
    \ y % x)\n    return y\nend ", "    if n == x or n == y \n        return n \n\
    \    else \n        x_or_y(n - 1, x, y) \nend\n</cell>\n<code language=julia-1.6>\n\
    x_or_y(7, 34, 12)\n</cell>\n<code language=julia-1.6>\nx_or_y(15, 8, 5)\n</cell>\n\
    <code language=julia-1.6>\nx_or_y(14, 42, 9)\n</cell>\n<code language=julia-1.6>\n\
    x_or_y(18, 100, 30)\n</cell>\n<text>\nNow we get to the interesting part. We can\
    \ actually implement that logic in a much more concise and efficient manner.",
  "    if n <= 2\n        return y\n    else\n        return x_or_y(n - 1, x, y *\
    \ (n - 1))\nend\n</cell>\n<text>\nRecursion is also an important part of learning\
    \ Julia, and Julia is easy to integrate with the language and therefore can be\
    \ integrated in a lot of places.", "    if n == x || n == y\n        1\n    else\n\
    \        0\n    end\nend\n</code>\n<|/ q dscore=0 tags=julia,julia-jump |>\n<|\
    \ c |>\nCan you explain what do you mean by \"returns incorrect results\"? It\
    \ looks like it can handle that case with some trivial changes (i.e. use `elseif`\
    \ instead of `else`, remove `end` from first branch, move `1` before `end` to\
    \ avoid `||` operator in last branch).\n<|/ c |>\n<| a tags=julia,julia-jump |>\n\
    <code>", "    if n%x == 0 || n%y == 0 then \n        return n\n    else \n   \
    \     return x\n    end\nend", "    if n == x \n        then return x \n     \
    \   else return y \nend", "    # check condition\n    if n % 2 == 0 \n       \
    \ then return x \n        else return y\nend\n</cell>\n<text>\nExercise 6\nWrite\
    \ a function that takes in a positive integer and returns the factorial of that\
    \ number.", "    \n    # Check if n is a prime number.\n    if isPrime(n)\n  \
    \      \n        if x%n != 0\n            return y\n        else\n           \
    \ return x\n        \n    else \n        return y\nend\n    \nend\n</cell>\n<code\
    \ language=julia-1.5>", '    return if isPrime(n) then x else y', "  if n % 2\
    \ == 0\n    return x\n  return y\nend", "    if n == x or n == y\n        return\
    \ n\n    return x \nend ", "    if n % 2 == 0:\n        return y\n    else:\n\
    \        return x \nend\n</cell>\n<text>\nFinally, let's see what happens when\
    \ we make some mistakes:", "    if n == 1 return x\n    else if n % 2 != 0 return\
    \ y\n    else return x_or_y(n - 2, x, x + y)", "    if isPrime(n) then return\
    \ x\n    return y", "    if n % 2 == 0\n        x \n    else\n        y\n    end\n\
    end\n</cell>\n<code language=julia-1.0>\nx_or_y(7, 34, 12)\n</cell>\n<code language=julia-1.0>\n\
    x_or_y(15, 8, 5)\n</cell>\n<text>\nWrite a program which takes two numbers n1\
    \ and n2 and returns the sum of their digits.", "    if n % 2 == 1 \n        return\
    \ x \n    else \n        return y \nend\n</cell>\n<cell>\nx_or_y(7, 34, 12)\n\
    </cell>\n<text>\nIn Julia, functions can be used without explicitly defining the\
    \ return type. This is a convenience feature. Since this function only returns\
    \ one value we can write it this way:", "    if isPrime(n) \n        y \n    else\n\
    \        x\n    end\nend\n</cell>\n<code language=julia-1.0>\nx_or_y(7, 34, 12)\n\
    </cell>\n<code language=julia-1.0>\nx_or_y(15, 8, 5)\n</cell>\n<code language=julia-1.0>\n\
    x_or_y(7, 34, 12)\n</cell>\n<code language=julia-1.0>\nx_or_y(15, 8, 5)\n</cell>\n\
    <code language=julia-1.0>\nx_or_y(7, 34, 12)\n</cell>\n<code language=julia-1.0>\n\
    x_or_y(15, 8, 5)\n</cell>\n<text>\nExercise 5\nWrite a function\n    function\
    \ x_or_y(n::Int64, x::Int64, y::Int64)::Int64", "    if n == 1\n        0\n  \
    \  else if n % x == 0\n        x\n    else\n        y\n    end\nend\n</cell>\n\
    <code language=julia-1.6>\n@assert x_or_y(7, 34, 12) == 34\n@assert x_or_y(15,\
    \ 8, 5) == 5\n</cell>\n<text>\nExercise 6\nWrite a function that accepts a vector\
    \ and returns the sum of the squares of all integers in the vector.", "if n ==\
    \ 1\n    return y\nend\nif isPrime(n)\n    return y\nend\nreturn x\nend\n</cell>\n\
    <code language=julia-1.4>\nx_or_y(7, 34, 12)\n</cell>\n<text>\nWe will now define\
    \ our function to calculate the number of ways to choose k items from n items\
    \ of type A", "    if n==2 \n        return x \n    elif isPrime(n) \n       \
    \ return x \n    else \n        return y \nend ", "    if n != 1 && n != x &&\
    \ n != y \n        then return n \n    else \n        return x \nend", "    if\
    \ n % 2 == 0 && n > 1 \n        then x \n        else y \n    end\nend\n</cell>\n\
    <code language=julia-1.3>\nx_or_y(7, 34, 12)\n</cell>\n<code language=julia-1.3>\n\
    x_or_y(15, 8, 5)\n</cell>\n<text>\nFunctions that return multiple values", " \
    \   if n % 2 == 0 \n        return x \n    else \n        return y \nend \n</cell>\n\
    <text>\nA function with multiple returns\nThe function below should return multiple\
    \ values. It returns a tuple with the values of x and y.", "    if isPrime(n)\n\
    \        x\n    else\n        y\n    end\nend\n</cell>\n<code language=julia-1.0>\n\
    @code_native x_or_y(7, 34, 12)\n</cell>\n<code language=julia-1.0>\n@code_native\
    \ x_or_y(15, 8, 5)\n</cell>\n<text>\nExercise 10: Write a function which returns\
    \ the number of integers from 1 to x for which, \n$x^2 = n$ (where n is an integer).",
  "    if n == 2\n        return y\n    else if n % 2 == 0\n        return x\n   \
    \ else\n        \n        return x_or_y(n-1, x, y+y)\nend", "    if prime_number(n)\n\
    \        return x\n    else\n        return y\n    end\nend", "    if n <= 2\n\
    \        x # if n <= 2, just return x\n    else\n        y # if n > 2, return\
    \ y\nend\n</cell>\n<code language=julia-0.6>\nx_or_y(7, 34, 12)\n</cell>\n<code\
    \ language=julia-0.6>\nx_or_y(15, 8, 5)\n</cell>\n<text>\nWrite a function which\
    \ takes a dictionary as a parameter and returns a dictionary where the keys are\
    \ the keys in the dictionary and each value is the concatenation of the keys in\
    \ that dictionary with the values for each key in the dictionary. For example,\
    \ the following dictionary {1:\"one\", 2:\"two\", 3:\"three\"} is passed into\
    \ the function and the function returns a dictionary {1:\"oneone\", 2:\"twotwo\"\
    , 3:\"threethree\"}", "    if n == 2 \n        return x \n    if n % 2 == 0\n\
    \        return x_or_y(n/2, x, y)\n    if n % 3 == 0\n        return x_or_y(n/3,\
    \ x, y)\n    if n % 5 == 0\n        return x_or_y(n/5, x, y)\n    return y", " \
    \   if n == 0\n        0\n    elseif n < 2\n        y\n    else\n        x_or_y(n-1,\
    \ x, y)\n    end\nend\n</cell>\n<code language=julia-1.5>\nx_or_y(7, 34, 12)\n\
    </cell>\n<code language=julia-1.5>\nx_or_y(15, 8, 5)\n</cell>\n<text>\n3.2. Exercise\n\
    Write a program to find prime numbers. \nThe program should print each prime number\
    \ separated by commas. \nThe function should return nothing but print a message\
    \ stating whether the number is prime or not. \nThe function should allow any\
    \ number of arguments (the program can be written to accept any number of arguments\
    \ if desired). \nThe function should print the prime numbers in ascending order.\
    \ \nThe function should print the prime numbers in descending order. \nThe function\
    \ should print the prime numbers on separate lines. \nThe function should print\
    \ the prime numbers in any format (including multiple lines) the user desires. ",
  "    if n==2 \n        return x\n    elseif n%2==0 \n        return y\n    else\n\
    \        return x_or_y(n-1, x, y)\n    end\nend\n</cell>\n<text>\nThe first function\
    \ is called x_or_y() which takes three integers. In each call to the function,\
    \ the first integer is divided by 2, and the function should return the value\
    \ of the second integer. Here we have three calls to the function.", "    if n\
    \ < 2\n        return y\n    else \n        if isPrime(n)\n            return\
    \ x\n        else\n            return y\nend", "    if n % 2 == 0 \n        return\
    \ x \n    else \n        return y\nend", "    if isPrime(n) then \n        return\
    \ x\n    else \n        return y", "    if n != 1 \n        then return x\n  \
    \      else return y\n    end\nend \n</cell>\n<text>\nExercise: Write a function\
    \ that returns the number of positive numbers in a given array. Be sure to handle\
    \ the case when the number of elements in the array is zero.", "    if n == x\
    \ or n == y || n < x || n < y \n        then n\n        else y\n    end \nend\
    \ \n</code>\n<|/ a tags=julia |>\n<| a tags=julia dscore=2 |>\nIn Julia, you can\
    \ just use the conditional operator:\n<code>\na = 3\nb = 3", "    if n==2\n  \
    \      x\n    else\n        y\n    end\nend\n</cell>\n<code language=julia-0.6>\n\
    x_or_y(7, 34, 12)\n</cell>\n<text>\n5. Challenge Problems", "  if primetest(n)\
    \ == true\n    return x\n  else\n    return y\nend\n</cell>\n<text>\nExercise\
    \ 5.6\nWrite a function called nth_prime(n) which returns the nth prime number\
    \ less than or equal to n.", "    if n == 2 || n == 3 || n == 5 || n == 7 || n\
    \ == 9 || n == 11 \n        then y\n    else \n        x\n    end\nend\n</cell>\n\
    <code language=julia-1.3>\nx_or_y(7, 34, 12)\n</cell>\n<code language=julia-1.3>\n\
    x_or_y(15, 8, 5)\n</cell>\n<text>\nExercise:", "    if is_prime(n)\n        return\
    \ y\n    else\n        return x\nend\n</cell>\n<code language=julia-1.6>\nx_or_y(7,\
    \ 34, 12)\n</cell>\n<code language=julia-1.6>\nx_or_y(15, 8, 5)\n</cell>\n<text>\n\
    4.1 Write a function to get the Fibonacci numbers. A common formula for Fibonacci\
    \ numbers is $Fn = F{n-1} + F_{n-2}$.", "    # check if n is prime\n    if is_prime(n)\
    \ == true \n        x \n    else\n        y \n    end\nend\n</code>\n<|/ q dscore=1\
    \ |>\n<| c |>\nYour function does not do what you think it does: it returns `x`\
    \ unless `n` is *not* a prime number. It returns `y` otherwise.\n<|/ c |>\n<|\
    \ c |>\nIt would be better to use the built-in `is_prime` function rather than\
    \ implementing it on your own.\n<|/ c |>\n<| a tags=julia dscore=3 |>\nThe issue\
    \ is you are using an else keyword inside the condition of the if. if else does\
    \ not work in julia.\nYou can replace it with if..elseif and it will work:\n<code>",
  "    if n < 2 || n == 2 || n == 3\n        return x\n    elseif n == x || n == y\n\
    \        return x\n    else\n        return y\n    end\nend\n</cell>\n<text>\n\
    What do we now have?", "    if n == 2:\n        return x\n    elif n % 2 == 0\
    \ or n % 3 == 0:\n        return y\n    else:\n        return x\nend\n</cell>\n\
    <text>\nExercise 5: Apply x_or_y to all the elements of an array. Be careful about\
    \ error-prone typecasting and make sure to return a suitable value (e.g. an error\
    \ value). Hint: you can use an if-else statement here.", "    if isPrime(n)\n\
    \        return x\n    else\n        return y\n    end\nend\n</cell>\n<text>\n\
    And now we will use this function to find the product of any number of factors.",
  "    if n <= 1\n        return y\n    else\n        return x_or_y(n - 2, x, y) ",
  "    if n < 2 && n >= 1\n        return x\n    if n <= 5\n        return y\n   \
    \ if n % 2 == 0 || n % 3 == 0\n        return x\n    return y\nend\n\"\"\"", " \
    \ if n % 2 == 0 \n    return x \n  else \n    return y \nend", "    if isPrime(n)\
    \ == True \n        x \n    else\n        y \n    end\nend", "    if n == 2\n\
    \        x\n    else\n        y\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"A simple program which should return the value of x if n is \n    a prime\
    \ number and should return the value of y otherwise.", "    if checkPrime(n)\n\
    \    then\n        println(n)\n        return x\n    else\n        println(y)\n\
    \        return y\n    end\nend\n</cell>\n<code language=julia-0.6>\nx_or_y(7,\
    \ 34, 12)\n</cell>\n<code language=julia-0.6>\nx_or_y(15, 8, 5)\n</cell>\n<code\
    \ language=julia-0.6>\n@code_llvm x_or_y(7, 34, 12)\n</cell>\n<code language=julia-0.6>\n\
    @code_llvm x_or_y(15, 8, 5)\n</cell>\n<text>\nExercise 3\nLet's try the function\
    \ again using the @ operator.", "    if n % 2 == 1 \n        then y\n        else\
    \ x\n    end\nend\n</cell>\n<code language=julia-1.3>", "    if x == 0\n    return\
    \ y\n    else if n == 0\n    return 0\n    else if is_prime(n)\n    return x_or_y(n-1,\
    \ x-1, y)\n    else x_or_y(n-1, x, y-1)\nend", "    if n == 1 \n        then x\n\
    \    else if isPrime(n) \n        then y\n    else \n        x\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\nx_or_y(7, 34, 12)\n</cell>\n<code language=julia-1.5>\n\
    x_or_y(15, 8, 5)\n</cell>\n<text>\nUsing \"if\" and \"else\"", "    if n == 1\
    \ \n        return y\n    else if n % 2 == 0 \n        return x_or_y(n-1, x, y+1)\n\
    \    else\n        return x_or_y(n-1, x+1, y)\nend\n    ", "    if n % 2 == 0\n\
    \        x, y = y, x \n    for i in 2..n \n        if n % i == 0\n           \
    \ x, y = y, x \n    return y \nend", "    if n % 2==1\n    then return y\n   \
    \ else return x\n    end\nend", "    if n <= 0 then \n        return y\n    else\
    \ if n % 2 == 0 then \n        return x_or_y(n/2, x, y)\n    else\n        return\
    \ x_or_y(n/2, y, x)", "if n==1 \nthen return x \nelse return y\nend \nend ", " \
    \   if n % 2 == 0\n        y \n    else\n        x\n    end\nend\n</cell>\n<text>\n\
    Let us take a look at how Julia handles this function. We first define the function\
    \ and then call the function with the arguments. Note that we do not have to define\
    \ the function before calling it.", "    if n % 2 == 1\n        y = x_or_y(n,\
    \ y, x)\n    elseif n % 3 == 0 \n        y = x_or_y(n, y, x)\n    elseif n % 5\
    \ == 0 \n        y = x_or_y(n, y, x)\n    elseif n % 7 == 0 \n        y = x_or_y(n,\
    \ y, x)\n    end\n    return x\nend\n</cell>\n<code language=julia-1.5>\nx_or_y(7,\
    \ 34, 12)\n</cell>\n<code language=julia-1.5>\nx_or_y(15, 8, 5)\n</cell>\n<code\
    \ language=julia-1.5>\nx_or_y(15, 10, 2)\n</cell>\n<code language=julia-1.5>\n\
    x_or_y(30, 40, -5)\n</cell>\n<text>\nRecursive Function Calls", "    if n%x ==\
    \ 0 && n%y == 0 then\n        return n\n    elseif n%x == 0 && n%y == 1 then\n\
    \        return y\n    elseif n%y == 1 && n%x == 0 then\n        return x\n  \
    \  else\n        return 0\n    end\nend\n</cell>\n<code language=julia-1.3>\n\
    x_or_y(7, 34, 12)\n</cell>\n<text>\nExercise 3: Find all prime numbers up to n\n\
    Write a function that returns a list of all prime numbers up to n", "    if n\
    \ == 1 \n        then return x\n        else return y\n    end", "    if n ==\
    \ 0 then return x else return y\n    else if gcd(n,x) == 1 then return x else\
    \ return y\nend\n</cell>\n<text>\nExercise 8\nWrite a program which should return\
    \ a random integer value from the \n    given range of integers [min..max] inclusive\
    \ \n    and should return the value -1 if the value is a special \n    value which\
    \ is called a sentinel value.", "    if n == 2\n        return x\n    elseif n\
    \ % 2 == 0\n        x_or_y(n/2, x, y)\n    else\n        x_or_y(n/2, y, x)\nend\n\
    </cell>\n<code language=julia-1.0>\nx_or_y(7, 34, 12)\n</cell>\n<code language=julia-1.0>\n\
    x_or_y(15, 8, 5)\n</cell>\n<text>\nExercise 3", "    if n == 2 || n == 3 || n\
    \ == 5\n        return x\n    elseif n % 2 == 0 || n % 3 == 0\n        return\
    \ y\n    elseif n % 5 == 0 && n != 7\n        return y\n    elseif n == 7\n  \
    \      return x\n    end\nend", "    if is_prime(n) == false \n        return\
    \ y\n    else\n        return x\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    x_or_y(7, 34, 12)\n</cell>\n<code language=julia-1.5>\nx_or_y(15, 8, 5)\n</cell>\n\
    <text>\n5.2. Functions with multiple returns: if/else/elseif/elif\nThe Julia if/else/elseif/elif\
    \ statements allow us to specify a sequence of conditional statements to execute\
    \ depending on the value of the Julia variable $x$ and $y$.", "    if isPrime(n)\n\
    \        y \n    else\n        x\nend\n</cell>\n<code language=julia-0.6>\n@time\
    \ x_or_y(7, 34, 12)\n</cell>\n<text>\nExercise 3: Write a function in Julia which\
    \ performs the following operation on two given numbers $a$ and $b$:", "    if\
    \ isPrime(n)\n        y \n    else\n        x\nend\n</cell>\n<code language=julia-1.6>\n\
    x_or_y(7, 34, 12)\n</cell>\n<code language=julia-1.6>\nx_or_y(15, 8, 5)\n</cell>\n\
    <text>\nExercise: Find the value of y such that\n$$\nx_n^2 + x_n + y_n = 10\n\
    $$\nfor any n (i.e. x_n and y_n are both integers).", "    if n <= 1 \n      \
    \  then y\n        else x_or_y(n-1, x-2, y-1)\nend\n</cell>\n<text>\nExercise\
    \ 10", "    if isPrime(n) then return x else return y end\nend\n</cell>\n<text>\n\
    Exercise: Write a program which will print the prime factors of the number $20$.",
  "    if n % 2 == 0 \n       return x\n    elseif n % 2 == 1 \n       return y\n\
    \    else\n       return x_or_y(n / 2, x, y)\nend\n</code>\nThe first three lines\
    \ define the function x_or_y and its argument names. We use the same names as\
    \ in the function definition, but we also use the type annotation at the beginning\
    \ of the definition to specify the type of the arguments. We are free to choose\
    \ the argument names and type annotations as you like.\nThe return type Int64\
    \ is also specified in the function definition. \nThe function definition itself\
    \ is just a recursive call to the function x_or_y with new values x and y with\
    \ each recursion call.\nThe last line is our function call. The function call\
    \ x_or_y with a prime number as argument n will return the value of x as it is\
    \ in the else branch of the if statement. \nThe function call x_or_y with a non-prime\
    \ number as argument n will return the value of y as it is in the else branch\
    \ of the if statement.\nThe function call x_or_y with a number greater than the\
    \ square root of the given value n as argument n will return the value of x as\
    \ it is in the else branch of the if statement.\nWe used a ternary expression\
    \ which is equivalent to a regular if/else statement, but with additional syntax\
    \ in the function definition.\nIn the recursive call we first divide n by 2 and\
    \ then call the function with the new values x and y as arguments. That recursive\
    \ call will eventually return the same value as the original call, but with another\
    \ argument and so the function will keep on calling itself until the base case\
    \ is reached.\n<|/ a |>\n<| c |>\nI see you are new here. I recommend you read\
    \ [What should I do when someone answers my question?](https://stackoverflow.com/help/someone-answers)\n\
    <|/ c |>\n<| a |>\nTo me, a recursive function is very similar to iteration, as\
    \ you just keep calling the function with the new values, until you reach a base\
    \ case, that stops the recursion.\nTo me, a recursive function would be equivalent\
    \ to an iterative function, which just loops over values and performs the computations\
    \ in the next iteration.\nA recursive function can either return a single value\
    \ (the result of the computation), or a tuple of values that represent the results\
    \ of the computations, for example:\n<code>\nf(x) = x + 1\ng(x) = (x + 1, x +\
    \ 2)\n</code>\nRecursion would be:\n<code>\nf(x) = f(f(x))\ng(x) = f(g(x)) \n\
    </code>\nThe recursive functions are more complex, as they involve the use of\
    \ recursion. The key difference is that they call themselves.\nYou would probably\
    \ be interested in the recursion section of the chapter that covers the topic\
    \ \"Recursion\" of the book Programming in Julia, which is freely available ",
  "    if n == 1 \n        then y\n    else if isPrime(n) \n        then x_or_y(n-1,\
    \ x, y)\n        else x_or_y(n-1, y, x)\n    end\nend\n</cell>\n<text>\nExercise:\
    \ Write a program to compute the number of digits in an integer, rounded to a\
    \ multiple of 5", "    if isPrime(n) && isPrime(x)\n        return x\n    else\n\
    \        return y\n    end\nend\n</code>\n<|/ a tags=julia dscore=1 |>\n<| a tags=julia\
    \ dscore=0 |>\nYour x_or_y function is almost correct; your missing a parenthesis\
    \ around your if statement. Also, your first if statement is checking if n is\
    \ prime, not if x is prime. Additionally, Julia's inbuilt isPrime function does\
    \ not take in an x argument, so you need to write it differently. Try this:\n\
    <code>", "    if n == 2\n        return x else y\n    elseif n % 2 == 0\n    \
    \    return x_or_y(n / 2, x, y)\n    else\n        return x_or_y(n / 3, x, y)",
  "    return if isPrime(n) then x else y \nend \n</cell>\n<code language=julia-1.5>\n\
    x_or_y(7, 34, 12)\n</cell>\n<text>\nThe function above uses Julia's if construct\
    \ (see the Julia documentation for detailed explanation of conditionals) and is\
    \ equivalent to the following Python:", "    if gcd(n,x)==1 \n        return x\
    \ \n    else \n        return y \n    end\nend\n</cell>\n<code language=julia-0.5>\n\
    x_or_y(7, 34, 12)\n</cell>\n<code language=julia-0.5>\nx_or_y(15, 8, 5)\n</cell>\n\
    <code language=julia-0.5>\nx_or_y(2, 8, 5)\n</cell>\n<text>\nWrite a function\
    \ primes that takes as input an n number and returns a vector of the prime numbers\
    \ between 2 and n. For example, primes(5) == [2, 3, 5, 7] and primes(7) == [2,\
    \ 3, 5].", "    if n == 2 || n == 3 || n == 5\n        return x\n    else\n  \
    \      return y\nend", "    if n == 2\n        x\n    else\n        y\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\n\"\"\"\nA program that returns True if\
    \ a number is prime and False otherwise.\n\"\"\"", "    if isPrime(n)\n      \
    \  return x\n    else\n        return y\nend", "    if n >= 2\n        x <- x_or_y(n-1,\
    \ x, y)\n    else\n        y <- x_or_y(n-1, x, y % n)\n    return x\nend\n</code>\n\
    And here is a simple program which should return the number of times the number\
    \ n is divided by 3\n<code>", "    if x_of_y(n, x) == y\n        then x\n    \
    \    else y\nend\n\"\"\"\n\"\"\"\n</code>\n<|/ a dscore=2 |>\n<| c |>\nI don't\
    \ think that this works, as you only test `x_of_y(n, x)`. The question asks for\
    \ `y_of_x(n, x)`, which you never use.\n<|/ c |>\n<| c |>\nAs I said, I am new\
    \ to Julia so excuse me if I am missing something obvious. However I don't think\
    \ it matters as x_of_y and y_of_x are both returning true or false. And as far\
    \ as I can tell, nothing is ever returned to x_or_y.\n<|/ c |>\n<| a |>\nHere\
    \ is another solution using Julia's inbuilt functions\n<code>", "    \n    # Write\
    \ your solution here\n    if n%x==0 || n%y==0\n        \n        x\n    else\n\
    \        y\n        \n    end\nend\n</cell>\n<code language=julia-1.0>\n@assert\
    \ x_or_y(7, 34, 12) == 34\n@assert x_or_y(15, 8, 5) == 5\n</cell>\n<text>\nWrite\
    \ a function which takes a number as input and returns the squared value of it.",
  "\tif isPrime(n) then\n\t\treturn x\n\telse\n\t\treturn y\n\tend\nend\n</cell>\n\
    <code language=julia-1.5>\n@code_warntype x_or_y(15, 8, 5)\n</cell>\n<text>\n\
    Exercise\nThe function should also work for floats, e.g. x_or_y(15.0, 8.0, 5.0)",
  "    n <= y ? x : y\nend\n</cell>\n<text>\n6. Return any string from an array if\
    \ its length is less than or equal\n    to 10", "  if n>0\n    \n    if isPrime(n)\n\
    \      x\n    \n    else\n      y\n  end\nend", '    return if x==0 then y else
    x', "    if n%2==1\n        return y\n    else\n        return x\nend", "    if\
    \ n % 2 == 0 and n != 1 \n        then return y \n        else return x \n   \
    \ end", "    if n <= 2 || n == 1 \n        then return y\n        else return\
    \ x_or_y(n - 1, x, y)\n    end\nend", "    if n % 2 == 0\n    then return y\n\
    \    else return x\nend\n</cell>\n<text>\nExercise 3\nWhat should we change the\
    \ type of x_or_y so that the function will raise an error?", "    if n == 1\n\
    \        y \n    else\n        x_or_y(n - 1, x, y+1)\nend", "    if n==1 \n  \
    \      return x \n    if n==y \n        return x\n    if n%2 == 0\n        return\
    \ x_or_y(n-1, y, x)\n    else\n        return x_or_y(n-1, x, y)\n    end\nend",
  "        if ((n%x == 0) && (n%y == 0)) \n            then y\n        else x \n \
    \       end\nend\n</cell>\n<code language=julia-0.6>", "    if n < 2 || n > 100\n\
    \        return y\n    else\n        return x == y ? x : x_or_y(n-1, x, y)\n \
    \   end\nend\n</cell>\n<code language=julia-1.5>\n@code_warntype x_or_y(7, 34,\
    \ 12)\n</cell>\n<code language=julia-1.5>\n@code_warntype x_or_y(15, 8, 5)\n</cell>\n\
    <code language=julia-1.5>", "    if n <= 1 \n        return y\n    else \n   \
    \     return x_or_y(n-1, x-2, y-1)\n    end\nend", "    if isPrime(n)\n      \
    \  return x\n    else\n        return y", "    if n == 2\n        return x\n \
    \   else if n == 1 \n        return y\n    elseif n % 2 == 0 \n        return\
    \ x_or_y(n / 2, x, y)\n    elseif n % 2 == 1 \n        return x_or_y(n / 2, y,\
    \ x)\n    end\nend", "    if n == 1 \n        then return x\n        else return\
    \ y\n    end\n    if n % 2 == 1 \n        then return x_or_y(n / 2, x, y)\n  \
    \  else return x_or_y(n / 2, y, x)\nend\nx_or_y(7, 34, 12)\nx_or_y(15, 8, 5)\n\
    </cell>\n<text>\nIn Julia, functions are just like any other object. The only\
    \ requirement is that they have a method called call, which is used to actually\
    \ evaluate the expression:", "\tif n >= 2 then\n\t\tif n == 2 or n == 3 then return\
    \ y\n\t\telse if n >= 5 then\n\t\t\tif n%2 == 0 or n%3 == 0 then return x\n\t\t\
    \telse return y\n\t\telse return y\n\telse return y", "    if n % 2 == 1 \n  \
    \      then x_or_y(n, x, y)\n        else y\n    end\nend\n</code>\n<|/ a dscore=1\
    \ |>\n<| a |>\nI have written this little recursive function which works fine.\
    \ I haven't tested it thoroughly but it should work. I've also made a version\
    \ where you pass in a list of numbers and a number to start from. This way you\
    \ can pass in a list of even numbers. \n<code>", "if isPrime(n)\n    return x\n\
    else\n    return y", "    \n    if n == 1 \n        return x\n    else\n     \
    \   return y\nend\n</cell>\n<code language=julia-1.3>\n# Checking the function\
    \ and it's output with a test case:", "    if n == 1 \n        return y\n    elseif\
    \ n % 2 == 0 \n        return x_or_y(n/2, x, y)\n    else \n        return x_or_y(n/2,\
    \ y, x)", "    if n == 2\n        2\n    else\n        if n % 2 == 0\n       \
    \     if y % 2 == 0\n                y / 2\n            else\n               \
    \ x / 2\n        else\n            if x % 2 == 0\n                x / 2\n    \
    \        else\n                y / 2\n        end\n    end\nend\n</cell>\n<code\
    \ language=julia-1.3>\nx_or_y(7, 34, 12)\n</cell>\n<code language=julia-1.3>\n\
    x_or_y(15, 8, 5)\n</cell>\n<code language=julia-1.3>\nx_or_y(15, 8, 7)\n</cell>\n\
    <text>\nExercise: Write a program that returns the number of times that a \n \
    \   given integer is divisible by 7 and 5.", "    if isPrime(n)\n        return\
    \ x\n    else\n        return y", "    if n%2 == 0\n        return y\n    else\n\
    \        return x\n    end\nend\n</cell>\n<code language=julia-1.6>\n#@test x_or_y(7,\
    \ 34, 12) \u2248 34\n#@test x_or_y(15, 8, 5) \u2248 15\n</cell>\n<text>\nThe \"\
    if\" statement can also be used to define functions. You can define any number\
    \ of functions inside a block.", "    if n % 2 == 0 \n        then return y \n\
    \        else return x\nend\n</cell>\n<code language=julia-0.5>\n@code_native\
    \ x_or_y(7, 34, 12) # NativeCodeError\n</cell>\n<code language=julia-0.5>\n@code_native\
    \ x_or_y(15, 8, 5) # NativeCodeError\n</cell>\n<code language=julia-0.5>\n@code_native\
    \ x_or_y(7, 3, 2) # OK\n</cell>\n<code language=julia-0.5>\n@code_native x_or_y(7,\
    \ 3, 2) # NativeCodeError\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns 0 if n is not a prime number and 1 if n is a prime number.", "    if\
    \ n == 1 \n        return x \n    else if prime?(n) == true \n        return y\
    \ \n    else \n        return x \nend\n</cell>\n<text>\nExercises:\nWhat are the\
    \ implications of not using a local variable for the function x_or_y()? \nWhat\
    \ is the implication that x_or_y() should be written as a function instead of\
    \ a variable? ", "    if n == 1 \n        return x \n    else \n        return\
    \ y\nend\n\"\"\"\n    \n\"\"\"\n    \nA program which returns the factorial of\
    \ a number. \n    \nExamples:\n    >>> factorial(5)\n    120\n    >>> factorial(0)\n\
    \    1\n    \n\"\"\"", "    if prime(n)==1 && n==1 || n==2\n        return x\n\
    \    else \n        return y\nend\n</cell>\n<text>\n\u25CF How many primes are\
    \ there between 0 and 50?", "    if n == 1 \n        then return x\n        else\
    \ return y\n    end", "    if n == 2\n        return y\n    else if n == 3\n \
    \       return x\n    else if n % 4 == 1\n        return x_or_y(n/4, x, y)\n \
    \   else if n % 4 == 2\n        return x_or_y(n/4, y, x)\n    else\n        return\
    \ x_or_y(n-1, x, y)\nend", "        if isPrime(n) then \n            return x\
    \ \n        else \n            return y \nend \n</cell>\n<code language=julia-1.5>\n\
    @time x_or_y(7,34,12)\n</cell>\n<text>\nExercise: Partial function application",
  "    if n % 2 == 0\n        return y\n    else \n        return x\nend", "    if\
    \ isPrime(n) == true\n       return n\n    return y", "    if isPrime(n)\n   \
    \     return n\n    else\n        return y\nend # x_or_y", "    if isPrime(n)\n\
    \        x \n    else\n        y \n    end\nend", "    return if is_prime(n) then\
    \ x else y\nend\n</code>\nThe function is_prime(n) is defined as follows:\n<code>\n\
    \"\"\"\n    is_prime(n::Int64)::Bool", "    if isPrime(n)\n        return x\n\
    \    else\n        return y\nend\n</cell>\n<code language=julia-1.5>\n@time x_or_y(7,\
    \ 34, 12)\n</cell>\n<code language=julia-1.5>\n@time x_or_y(15, 8, 5)\n</cell>\n\
    <text>\nExercise 3", "    if n % 2 == 0\n        then return y\n        else return\
    \ x\n    end\nend\n\"\"\"", "    \n    if isPrime(n) == true \n        return\
    \ x\n    else \n        return y\nend", "    \n    if n == 1\n        return x\n\
    \    else\n        return y\nend", "    if n % 2 == 1 && n > 1 \n        then\
    \ x_or_y(n-1, x, y)\n    else\n        y\n    end\nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function called is_odd which takes a number as an argument and returns\
    \ True if that number is an odd (even) number and False if that number is even.\
    \ Test this function with different inputs:", "    if n%x == 0 && n%y == 0\n \
    \       then n\n        else\n            if n%x == 0\n                then y\n\
    \                else\n                    x\n    end\nend\n</cell>\n<code language=julia-1.4>\n\
    \"\"\"\n    function_2(n::Int64, x::Int64, y::Int64)::Int64", "    if isPrime(n)\
    \ == true\n        return x\n    else\n        return y\n    end\nend"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
