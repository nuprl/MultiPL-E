language: jl
name: HumanEval_56_correct_bracketing
results:
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    \"\"\"\n    CorrectBracketing\
    \ : string -> bool\n    \n    Returns true if brackets is correctly braced.\n\
    \    \n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \"\"\"\n    \n    if brackets == \"\" then return false\n\
    \    else if brackets == \"<\" then return true\n    elif brackets == \"<>\" then\
    \ return true\n    elif brackets == \"<>...\" then return false\n    else if brackets\
    \ == \"><\" then return true\n    else if brackets == \">>\" then return true\n\
    \    else if brackets == \">>...\" then return false\n    else if brackets ==\
    \ \">>>\" then return true\n    else if brackets == \">>...\" then return false\n\
    \    else if brackets == \">>>...\" then return false\n    else if brackets ==\
    \ \">>>...\" then return false\n    else return false\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\
    \t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") ==\
    \ true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpg39n99wg.jl:29\nin expression starting at /tmp/tmpg39n99wg.jl:29\n"
  stdout: ''
  timestamp: 1660008973
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    \"\"\"\n    correct_bracketing\
    \ corrects bracketing in a string. \nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfw0w478i.jl:1\nin expression starting at /tmp/tmpfw0w478i.jl:1\n"
  stdout: ''
  timestamp: 1660008973
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    true\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a String of any length and returns\
    \ the number of times a single character appears.\nusing Test\n\n@testset begin\n\
    \ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpagafmf_b.jl:16\nin expression starting at\
    \ /tmp/tmpagafmf_b.jl:16\n"
  stdout: ''
  timestamp: 1660008973
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    \"\"\"returns true\
    \ if brackets is a string of \"<\" and \">\".\n    return true if every opening\
    \ bracket has a corresponding closing bracket.\nusing Test\n\n@testset begin\n\
    \ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpa_jetmhu.jl:1\nin expression starting at /tmp/tmpa_jetmhu.jl:1\n"
  stdout: ''
  timestamp: 1660008973
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    for bracket in brackets\
    \ do\n        if bracket.head != bracket.tail then\n            false\n      \
    \  else\n            true\n        end\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid \"do\" syntax\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpy4vs6izt.jl:14\nin expression starting at /tmp/tmpy4vs6izt.jl:14\n"
  stdout: ''
  timestamp: 1660008973
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets\n\
    \    for i in brackets.indices:\n        if brackets[i] != brackets[i+1]:\n  \
    \          return False\n    return True\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1ghm5sjt.jl:16\nin expression starting at\
    \ /tmp/tmp1ghm5sjt.jl:16\n"
  stdout: ''
  timestamp: 1660008973
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    \" brackets is a\
    \ string of \"<\" and \">\".\n    bracket_table = {'<':'&lt;', '>':'&gt;'}\n \
    \   for c in brackets:\n        if c in bracket_table:\n            return true\n\
    \    return false\n</code>\n<|/ a tags=julia,brackets,string |>\n<| a tags=julia,brackets,string\
    \ |>\nI like the accepted answer. It works, but it's inefficient because it creates\
    \ a string for every character in the string. Here's a version that's slightly\
    \ more efficient as it only does it once:\n<code>\nusing Test\n\n@testset begin\n\
    \ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \">\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpd3g_6szu.jl:30\nin expression starting at\
    \ /tmp/tmpd3g_6szu.jl:30\n"
  stdout: ''
  timestamp: 1660008973
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\
    \" then \n        true\n    elseif brackets == \"<\" then \n        false\n  \
    \  elseif brackets == \"<?>\" then \n        true\n    elseif brackets == \"<*>\"\
    \ then \n        true\n    elseif brackets == \"<??>\" then \n        false\n\
    \    elseif brackets == \"<<>>\" then \n        false\n    elseif brackets ==\
    \ \"<?>\" then \n        true\n    elseif brackets == \"<*?>\" then \n       \
    \ true\n    elseif brackets == \"<?>?>\" then \n        false\n    elseif brackets\
    \ == \"<???>\" then \n        true\n    elseif brackets == \"<*?>?\" then \n \
    \       false\n    elseif brackets == \"<?>*\" then \n        true\n    elseif\
    \ brackets == \"<?>?\" then \n        true\n    elseif brackets == \"<*>?\" then\
    \ \n        false\n    elseif brackets == \"<*?>?\" then \n        false\n   \
    \ elseif brackets == \"<?>*?>\" then \n        true\n    elseif brackets == \"\
    <*?>??>\" then \n        true\n    elseif brackets == \"<??>*?>\" then \n    \
    \    false\n    elseif brackets == \"<?>?*\" then \n        true\n    elseif brackets\
    \ == \"<?>*<?\" then \n        false\n    elseif brackets == \"<?>*<*\" then \n\
    \        true\n    elseif brackets == \"<?>?>*\" then \n        false\n    elseif\
    \ brackets == \"<?>?*<?\" then \n        true\n    elseif brackets == \"<?>?*<*\"\
    \ then \n        false\n    elseif brackets == \"<?>*<??\" then \n        true\n\
    \    elseif brackets == \"<?>*<?*\" then \n        true\n    elseif brackets ==\
    \ \"<?>*<*?>\" then \n        true\n    elseif brackets == \"<?>?*<?*\" then \n\
    \        false\n    elseif brackets == \"<?>?*<*?>\" then \n        true\n   \
    \ elseif brackets == \"<??>*<?*\" then \n        false\n    elseif brackets ==\
    \ \"<?>?*<*?>\" then \n        false\n    elseif brackets == \"<??>*<?*?>\" then\
    \ \n        true\n    elseif brackets == \"<??>*<*?>?\" then \n        true\n\
    \    elseif brackets == \"<?>?*<?*?>\" then \n        true\n    else\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\"\
    ) == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"if\" at /tmp/tmpvejl2cw7.jl:80\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpvejl2cw7.jl:1\n\
    in expression starting at /tmp/tmpvejl2cw7.jl:1\n"
  stdout: ''
  timestamp: 1660008973
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    ...\n    loop:\n\
    \        for s in brackets\n            if s == \"<\"\n                if brackets[brackets.index(s)+1]\
    \ == \"<\"\n                    return true\n                if brackets[brackets.index(s)+1]\
    \ == \">\"\n                    return true\n                continue loop\n \
    \           if s == \">\"\n                if brackets[brackets.index(s)-1] ==\
    \ \"<\"\n                    return true\n                if brackets[brackets.index(s)-1]\
    \ == \">\"\n                    return true\n                continue loop\n \
    \           return false\n</code>\nNow it's just a matter of using map to loop\
    \ over each string in the list brackets, and replace each \"< >\" with \"< > >\"\
    , then using reduce to concatenate all the results.\n<code>\nbracketing_corrected\
    \ = reduce(concat, map(correct_bracketing, [\"<><\", \"<><>\", \"<<><>>\"]))\n\
    </code>\n<|/ a |>\n<| a tags=haskell,string,list dscore=1 |>\n<code>\nimport Data.List\
    \ (intercalate)\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t\
    @test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\"\
    ) == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") ==\
    \ false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\
    \t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid identifier name \"...\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpk2ei4n06.jl:14\nin expression starting at\
    \ /tmp/tmpk2ei4n06.jl:14\n"
  stdout: ''
  timestamp: 1660008973
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    \n    \"\"\"\n \
    \   Corrects bracketing if brackets are not correct.\nusing Test\n\n@testset begin\n\
    \ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpid7l75ma.jl:1\nin expression starting at /tmp/tmpid7l75ma.jl:1\n"
  stdout: ''
  timestamp: 1660008973
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\
    \" \n        then return true\n    else \n        if brackets[0] == \"<\"\n  \
    \          then return false\n        else if brackets[0] == \">\"\n         \
    \   then return true\n        else return correct_bracketing(brackets[1:end])\n\
    \    end\nend\n</cell>\n<cell>\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t\
    @test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\"\
    ) == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") ==\
    \ false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\
    \t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp1iicd6zi.jl:15\nin expression starting at /tmp/tmp1iicd6zi.jl:15\n"
  stdout: ''
  timestamp: 1660008973
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n\"\"\"\n    Checks brackets\
    \ for validity. Input is a string of \"<\" and \">\"\n    brackets is a string\
    \ of \"<\" and \">\".\n    return true if every opening bracket has a corresponding\
    \ closing bracket.\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t\
    @test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\"\
    ) == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") ==\
    \ false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\
    \t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpl2fogtcc.jl:1\nin expression starting at /tmp/tmpl2fogtcc.jl:1\n"
  stdout: ''
  timestamp: 1660008973
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    |\n    if brackets\
    \ == \"\"\n        false\n    elseif brackets == \"<>\"\n        true\n    else\n\
    \        correct_bracketing(brackets[0..1]) && correct_bracketing(brackets[2..length(brackets)])\n\
    \    end\nend\n</cell>\n<text>\n\u25CB What is the largest number smaller than\
    \ 20 that is divisible by 5?\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t\
    @test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\"\
    ) == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") ==\
    \ false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\
    \t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpj6dcd511.jl:23\nin expression starting at\
    \ /tmp/tmpj6dcd511.jl:23\n"
  stdout: ''
  timestamp: 1660008973
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.split(\"\
    <\")\n    brackets = filter( \\\n        lambda x:x.count(\"<\") ==1 and not x.endswith(\"\
    >\"),\n        brackets)\n    brackets = filter( \\\n        lambda x:x.count(\"\
    <\") == 0 and x.endswith(\">\"),\n        brackets)\n    brackets = filter( \\\
    \n        lambda x:x.endswith(\">>\"),\n        brackets)\n    brackets = filter(\
    \ \\\n        lambda x:x.count(\"<\") == 0   and  x.endswith(\">>\"),\n      \
    \  brackets)\n    brackets = filter( \\\n        lambda x:x.count(\"<\") == 0\
    \   and  x.endswith(\"<<\"),\n        brackets)\n    brackets = filter( \\\n \
    \       lambda x:x.count(\"<\") == 0   and  x.endswith(\">><<\"),\n        brackets)\n\
    \    brackets = filter( \\\n        lambda x:x.count(\"<\") == 0   and  x.endswith(\"\
    >>>\"),\n        brackets)\n    brackets = filter( \\\n        lambda x:x.count(\"\
    <\") == 0 and x.endswith(\"<<<\"),\n        brackets)\n    return all( brackets\
    \ )\n</code>\n<|/ a tags=string,regex,python |>\n<| c |>\nI think your brackets\
    \ are off. Shouldn't it be `[<>]`? Also, why don't you test `<<<<>`? It's not\
    \ even valid code.\n<|/ c |>\n<| c |>\nThe brackets here are actually [regex character\
    \ classes](https://docs.python.org/2/howto/regex.html?highlight=regex%20character%20classes#regular-expression-syntax-character-classes).\
    \ Also, the example is obviously a typo, but I can't edit it anymore without making\
    \ some edits.\n<|/ c |>\n<| c |>\n`[<>]` doesn't match `<<<` nor any other valid\
    \ bracketing.\n<|/ c |>\n<| c |>\nYes, it does. [<>] matches any of the four brackets.\n\
    <|/ c |>\n<| c |>\n`<<<<` is valid code, and is even valid with some editors (specifically\
    \ sublime). But it isn't valid Python.\n<|/ c |>\n<| a dscore=1 tags=string,regex,python\
    \ |>\nHow about:\n<code>\n>>> '<><><>'.count('<><>')\n4\n</code>\n<|/ a |>\n<|\
    \ a tags=string,regex,python dscore=1 |>\nThis regex should do what you want:\n\
    <code>\n>>> import re\n>>> def check_brackets(s):\n...     return \nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\"\
    ) == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"\\\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdogflqtn.jl:16\nin expression starting at\
    \ /tmp/tmpdogflqtn.jl:16\n"
  stdout: ''
  timestamp: 1660008973
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    bracket_count =\
    \ 0\n    for c in brackets\n        if c == \"<\"\n            bracket_count +=\
    \ 1\n        elseif c == \">\"\n            bracket_count -= 1\n        elseif\
    \ c == \"<>\"\n            bracket_count = -bracket_count\n        elseif c ==\
    \ \"<<\"\n            bracket_count += 1\n        elseif c == \"<>>\"\n      \
    \      bracket_count -= 1\n        else\n            assert(false)\n    end\n\
    \    return bracket_count == 0\nend\n</cell>\n<text>\nExercise 4\nUse the function\
    \ correct_bracketing above to test the correctness of brackets.\nusing Test\n\n\
    @testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") ==\
    \ true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7yqob0qo.jl:31\nin expression starting at\
    \ /tmp/tmp7yqob0qo.jl:31\n"
  stdout: ''
  timestamp: 1660008973
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets[2:end-1]\n\
    \    open_brackets = findall(r\">\", brackets)\n    closed_brackets = findall(r\"\
    <\", brackets)\n    return length(open_brackets) == length(closed_brackets)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    <>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 9 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpya1dpvj8.jl:21

    '
  stdout: "test set: Test Failed at /tmp/tmpya1dpvj8.jl:30\n  Expression: candidate(\"\
    <\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpya1dpvj8.jl:30 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpya1dpvj8.jl:23\ntest set: Test Failed at /tmp/tmpya1dpvj8.jl:32\n\
    \  Expression: candidate(\">\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpya1dpvj8.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpya1dpvj8.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpya1dpvj8.jl:34\n  Expression: candidate(\"<><><<><>><>><<>\"\
    ) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n \
    \  @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpya1dpvj8.jl:34 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpya1dpvj8.jl:23\nTest Summary: | Pass  Fail\
    \  Total\ntest set      |    9     3     12\n"
  timestamp: 1660008974
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    correct_bracketing\
    \ <- is_bracketed(brackets) &&\n        all(bracketed -> is_bracketed(bracketed,\
    \ true) && bracketed != brackets,\n            zip(brackets, tail(brackets)))\n\
    end\n</cell>\n<code language=julia-1.0>\n# test function\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\
    \t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") ==\
    \ true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4phmakgw.jl:18\nin expression starting at\
    \ /tmp/tmp4phmakgw.jl:18\n"
  stdout: ''
  timestamp: 1660008973
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets.length()\
    \ == 1 then return brackets.length() == 1\n    else if brackets.length() < 2 then\
    \ return false\n    else if brackets.length() == 2 then return brackets.head ==\
    \ brackets.last && brackets.head == \"<\"\n    else if brackets.head == \"<\"\
    \ && brackets.last == \">\" then return correct_bracketing(brackets.tail)\n  \
    \  else if brackets.head == brackets.last then return correct_bracketing(brackets.tail)\n\
    \    else return false\nend\n</cell>\n<text>\nTask 3 : Bracketing\nIn this task\
    \ we will work with a problem of bracketing and we will implement the bracket\
    \ method of our BST class to handle it. Note that the bracketing problem is stated\
    \ in the beginning of this notebook.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpunhc5irt.jl:14\nin expression starting at /tmp/tmpunhc5irt.jl:14\n"
  stdout: ''
  timestamp: 1660008973
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    \n    open_brackets\
    \ = [brackets[i] for i in range(0, length(brackets)) if brackets[i] == \"<\"]\n\
    \    close_brackets = [brackets[i] for i in range(0, length(brackets)) if brackets[i]\
    \ == \">\"]\n    \n    return length(open_brackets) == length(close_brackets)\n\
    using Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    <>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpli8l1aj3.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpli8l1aj3.jl:1\n\
    in expression starting at /tmp/tmpli8l1aj3.jl:1\n"
  stdout: ''
  timestamp: 1660008973
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    return brackets\
    \ == '<' or brackets == '>' or brackets == '<>>' or brackets == '<<<' or brackets\
    \ == '<<' or brackets == '<><>'\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t\
    @test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\"\
    ) == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") ==\
    \ false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\
    \t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"function\" at /tmp/tmp1zgwe57j.jl:13 expected\
    \ \"end\", got \"or\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp1zgwe57j.jl:14\n\
    in expression starting at /tmp/tmp1zgwe57j.jl:14\n"
  stdout: ''
  timestamp: 1660008973
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    \n\"\"\"\n    Your\
    \ solution to Exercise 6 should call correct_bracketing.\n    It should return\
    \ a Bool indicating whether or not the bracketing \n    structure is correct.\n\
    using Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    <>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzsui_zny.jl:1\nin expression starting at /tmp/tmpzsui_zny.jl:1\n"
  stdout: ''
  timestamp: 1660008973
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    local brackets =\
    \ brackets:gsub(\"<<>>\",\">>\"):gsub(\"<>\",\"><\"):gsub(\"<\",\"><>\")\n   \
    \ brackets = brackets:gsub(\"<<\",\"><\")\n    brackets = brackets:gsub(\">>\"\
    ,\"<\")\n    brackets = brackets:gsub(\"<<\",\"<\")\n    brackets = brackets:gsub(\"\
    >>\",\"<\")\n    brackets = brackets:gsub(\"<<\",\"<\")\n    brackets = brackets:gsub(\"\
    >>\",\"<\")\n    return brackets:find(\"<>\") == 0\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\
    \t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") ==\
    \ true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: local variable name \"brackets\" conflicts with\
    \ an argument\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpwx0frrhp.jl:1\n\
    in expression starting at /tmp/tmpwx0frrhp.jl:1\n"
  stdout: ''
  timestamp: 1660008973
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    \"\"\"\n    Write\
    \ a function that takes bracketing text and checks if it's correct bracketing.\n\
    using Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    <>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxd2h3557.jl:1\nin expression starting at /tmp/tmpxd2h3557.jl:1\n"
  stdout: ''
  timestamp: 1660008973
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n\"\"\"\n    Function\
    \ that takes in a string of brackets and returns true if the brackets are balanced\
    \ and false if not. Brackets is a string of \"<\" and \">\".\n    return true\
    \ if every opening bracket has a corresponding closing bracket.\nusing Test\n\n\
    @testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") ==\
    \ true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8np81jyp.jl:1\nin expression starting at /tmp/tmp8np81jyp.jl:1\n"
  stdout: ''
  timestamp: 1660008975
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.trim()\n\
    \    return brackets.all(fun x -> \n      x in \"()<>\"\n    )\nusing Test\n\n\
    @testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") ==\
    \ true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwyri10_d.jl:15\nin expression starting at\
    \ /tmp/tmpwyri10_d.jl:15\n"
  stdout: ''
  timestamp: 1660008975
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n  brackets = brackets\n\
    \  for i in 1 .. (length(brackets) - 1)\n    do\n      if brackets[i] != brackets[i\
    \ + 1]\n        return false;\n    end\n    return true\nend\n</code>\nThis can\
    \ be done more efficiently if we first split the string into groups of brackets,\
    \ then we process each group, using a stack to determine if the parentheses match\
    \ (which requires remembering the order in which the opening brackets were encountered).\
    \ Finally, we join the resulting groups back together.\n<code>\nusing Test\n\n\
    @testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") ==\
    \ true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid \"do\" syntax\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpingkndyw.jl:16\nin expression starting at /tmp/tmpingkndyw.jl:16\n"
  stdout: ''
  timestamp: 1660008974
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets.head\
    \ == brackets.last \n        and brackets.head == brackets.head \n           \
    \ then true \n            else false\n        end\n    end\nend\n</cell>\n<text>\n\
    Question 8. Complete the function correct_bracketing below so that it returns\
    \ true if brackets has correct pairs of brackets. Otherwise, return false.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    <>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"brackets\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpcmi62s_l.jl:15\nin expression starting at /tmp/tmpcmi62s_l.jl:15\n"
  stdout: ''
  timestamp: 1660008974
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets_length\
    \ = length(brackets)\n    if brackets_length == 1\n        return true\n    elseif\
    \ brackets_length == 0 \n        return false\n    elseif brackets_length == 1\n\
    \        return false\n    else\n        for i in 1..brackets_length\n       \
    \     if brackets[i] != brackets[brackets_length+i]\n                true\n  \
    \          else\n                false\n        end\n    end\nend\n</cell>\n<text>\n\
    Exercise: Implement the correct bracketing function\nWrite a function that checks\
    \ if the given bracket string is valid or not.\nusing Test\n\n@testset begin\n\
    \ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmps6bktfq6.jl:30\nin expression starting at\
    \ /tmp/tmps6bktfq6.jl:30\n"
  stdout: ''
  timestamp: 1660008974
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\
    <\"\n        true\n    elseif brackets == \"<>\"\n        true\n    else\n   \
    \     false\n    end\nend\n</cell>\n<text>\nAs a reminder, the following code\
    \ snippet creates a new function correct_bracketing in the global namespace. The\
    \ first argument to the function must be the string \"<\" or the string \"<>\"\
    . The function returns true if the bracketing is correct, and false if not.\n\
    using Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    <>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprzyid49d.jl:22\nin expression starting at\
    \ /tmp/tmprzyid49d.jl:22\n"
  stdout: ''
  timestamp: 1660008975
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    # check if brackets\
    \ is an open or close bracket\n    if brackets[1] == brackets[2:]\n        true\n\
    \    else\n        false\nend\n</code>\nFor your question on splitting strings,\
    \ look at this post from another StackOverflow post:\nHow can I split a string\
    \ with multiple delimiters in Julia?\n<|/ a dscore=1 tags=julia,regex,string |>\n\
    <| c |>\nThank you very much for your answer, but the `split` function returns\
    \ a `Vector`, so how do I convert it to a `String`? Because the split function\
    \ returns a `Vector`\n<|/ c |>\n<| c |>\nHi, I'm confused about what you mean\
    \ by \"convert the vector to a string\". Could you give a specific example? Maybe\
    \ you could also try rephrasing your question in the form of a question so that\
    \ more people can see it and try to answer.\n<|/ c |>\n<| a |>\nHere is a simpler\
    \ way to achieve your desired output:\n<code>\njulia> string(\">><<>>><><\")\n\
    \">>>>>><>\"\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t\
    @test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\"\
    ) == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") ==\
    \ false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\
    \t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"2:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpszo47a_u.jl:15\nin expression\
    \ starting at /tmp/tmpszo47a_u.jl:15\n"
  stdout: ''
  timestamp: 1660008975
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    # Implement this!\n\
    end\n</cell>\n<text>\nExercise 9\nImplement the function count_bracketings (for\
    \ full marks) that takes in a list of brackets (in quotes) and returns the number\
    \ of brackets represented by those strings. \nFor example, suppose we had the\
    \ following string:\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t\
    @test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\"\
    ) == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") ==\
    \ false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\
    \t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7uz7zika.jl:16\nin expression starting at\
    \ /tmp/tmp7uz7zika.jl:16\n"
  stdout: ''
  timestamp: 1660008974
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    <<\", \">>\").lower()\n    brackets = brackets.replace(\"<\", \">\").lower()\n\
    \    brackets = brackets.replace(\"<\", \"\").replace(\"</>\", \"\").replace(\"\
    <<<\", \">>\").lower()\n    brackets = brackets.replace(\"<<<\", \"\").replace(\"\
    <<\", \"\").replace(\"<>>\", \"\").replace(\">>\", \"\").lower()\n    brackets\
    \ = brackets.replace(\"<<<\", \"\").replace(\"<<\", \"\").replace(\"<>>\", \"\"\
    ).replace(\">>\", \"\").lower()\n    brackets = brackets.replace(\"<<\", \"\"\
    ).replace(\"<<\", \"\").replace(\"<>>\", \"\").replace(\">>\", \"\").lower()\n\
    \    brackets = brackets.replace(\"<<\", \"\").replace(\"<<\", \"\").replace(\"\
    <>>\", \"\").replace(\">>\", \"\").lower()\n    brackets = brackets.replace(\"\
    <<\", \"\").replace(\"<<\", \"\").replace(\"<>>\", \"\").replace(\">>\", \"\"\
    ).lower()\n    brackets = brackets.replace(\"<<\", \"\").replace(\"<<\", \"\"\
    ).replace(\"<>>\", \"\").replace(\">>\", \"\").lower()\n    brackets = brackets.replace(\"\
    <<\", \"\").replace(\"<<\", \"\").replace(\"<>>\", \"\").replace(\">>\", \"\"\
    ).lower()\n    brackets = brackets.replace(\"<<\", \"\").replace(\"<<\", \"\"\
    ).replace(\"<>>\", \"\").replace(\">>\", \"\").lower()\n    brackets = brackets.replace(\"\
    <<\", \"\").replace(\"<<\", \"\").replace(\"<>>\", \"\").replace(\">>\", \"\"\
    ).lower()\n    brackets = brackets.replace(\"<<\", \"\").replace(\"<<\", \"\"\
    ).replace(\"<>>\", \"\").replace(\">>\", \"\").lower()\n    brackets = brackets.replace(\"\
    <<\", \"\").replace(\"<<\", \"\").replace(\"<>>\", \"\").replace(\">>\", \"\"\
    ).lower()\n    brackets = brackets.replace(\"<<\", \"\").replace(\"<<\", \"\"\
    ).replace(\"<>>\", \"\").replace(\">>\", \"\").lower()\n    brackets = brackets.replace(\"\
    <<\", \"\").replace(\"<<\", \"\").replace(\"<>>\", \"\").replace(\">>\", \"\"\
    ).lower()\n    brackets = brackets.replace(\"<<\", \"\").replace(\"<<\", \"\"\
    ).replace(\"<>>\", \"\").replace(\">>\", \"\").lower()\n    brackets = brackets.replace(\"\
    <<\", \"\").replace(\"<<\", \"\").replace(\"<>>\", \"\").replace(\">>\", \"\"\
    ).lower()\n    brackets = brackets.replace(\"<<\", \"\").replace(\"<<\", \"\"\
    ).replace(\"<>>\", \"\").replace(\">>\", \"\").lower()\n    brackets = brackets.replace(\"\
    <<\", \"\").replace(\"<<\", \"\").replace(\"<>>\", \"\").replace(\">>\", \"\"\
    ).lower()\n    brackets = brackets.replace(\"<<\", \"\").replace(\"<<\", \"\"\
    ).replace(\"<>>\", \"\").replace(\">>\", \"\").lower()\n    brackets = brackets.replace(\"\
    <<\", \"\").replace(\"<<\", \"\").replace(\"<>>\", \"\").replace(\">>\", \"\"\
    ).lower()\n    brackets = brackets.replace(\"<<\", \"\").replace(\"<<\", \"\"\
    ).replace(\"<>>\", \"\").replace(\">>\", \"\").lower()\n    brackets = brackets.replace(\"\
    <<\", \"\").replace(\"<<\", \"\").replace(\"<>>\", \"\").replace(\">>\", \"\"\
    ).lower()\n    brackets = brackets.replace(\"<<\", \"\").replace(\"<<\", \"\"\
    ).replace(\"<>>\", \"\").replace(\">>\", \"\").lower()\n    bracket\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\"\
    ) == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpx2ksyhbe.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpx2ksyhbe.jl:1\n\
    in expression starting at /tmp/tmpx2ksyhbe.jl:1\n"
  stdout: ''
  timestamp: 1660008974
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    local opening_brackets\
    \ = brackets\n        local closed_brackets = \"\"\n        for c in opening_brackets\
    \ do \n            closed_brackets = closed_brackets..\"<\"\n        end\n   \
    \     return closed_brackets == \"\"\n    end\nend\n</cell>\n<text>\nWe can apply\
    \ this procedure to any problem in addition to bracketing.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\
    \t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") ==\
    \ true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid \"do\" syntax\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp_wi5_jqt.jl:16\nin expression starting at /tmp/tmp_wi5_jqt.jl:16\n"
  stdout: ''
  timestamp: 1660008974
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\
    \" then return true\n    if brackets == \"<>\" then return true\n    if brackets\
    \ == \"<<><>>\" then return true\n    if brackets == \"<>\" then return true\n\
    \    return false\nend correct_bracketing\n</cell>\n<code language=julia-1.0>\n\
    \"\"\"\nFunction to determine whether a string is of valid brackets\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\"\
    ) == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp6cafru21.jl:14\nin expression starting at /tmp/tmp6cafru21.jl:14\n"
  stdout: ''
  timestamp: 1660008974
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets\
    \ .split(\"<\")\n    for i in 0 .. length(brackets) - 1\n        if brackets[i+1]\
    \ /= brackets[i]\n            return false\n    return true\n\"\"\"\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\"\
    ) == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: space before \".\" not allowed in \"brackets\
    \ .\" at /tmp/tmpmg94bmco.jl:14\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpmg94bmco.jl:14\n\
    in expression starting at /tmp/tmpmg94bmco.jl:14\n"
  stdout: ''
  timestamp: 1660008975
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    \"\"\"This function\
    \ checks if brackets are correctly enclosed in brackets.\"\"\"\n    return brackets\
    \ != \"<>\" &&\n        brackets != \"<>\" &&\n        brackets != \"<<><>>\"\
    \ &&\n        brackets != \"<<><>>\" &&\n        brackets != \"<>\" &&\n     \
    \   brackets != \"<<><>>\" &&\n        brackets != \"<<><>>\"\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\"\
    ) == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 10 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp1kyn2m4n.jl:25

    '
  stdout: "test set: Test Failed at /tmp/tmp1kyn2m4n.jl:28\n  Expression: candidate(\"\
    <>\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp1kyn2m4n.jl:28 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp1kyn2m4n.jl:27\ntest set: Test Failed at /tmp/tmp1kyn2m4n.jl:29\n\
    \  Expression: candidate(\"<<><>>\") == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1kyn2m4n.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1kyn2m4n.jl:27\ntest set: Test\
    \ Failed at /tmp/tmp1kyn2m4n.jl:32\n  Expression: candidate(\"<<<><>>>>\") ==\
    \ false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @\
    \ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp1kyn2m4n.jl:32 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp1kyn2m4n.jl:27\ntest set: Test Failed at /tmp/tmp1kyn2m4n.jl:33\n\
    \  Expression: candidate(\"><<>\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1kyn2m4n.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1kyn2m4n.jl:27\ntest set: Test\
    \ Failed at /tmp/tmp1kyn2m4n.jl:34\n  Expression: candidate(\"<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/"
  timestamp: 1660008976
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    \"\"\"\n    Implement\
    \ this function.\n    \"\"\"\nend correct_bracketing\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\nImplement this function.\n\"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: extra token \"correct_bracketing\" after end\
    \ of expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpiose0btg.jl:17\n\
    in expression starting at /tmp/tmpiose0btg.jl:17\n"
  stdout: ''
  timestamp: 1660008975
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    \n    # Return true\
    \ if brackets is an empty string.\n    if brackets == \"\" \n    then return true\n\
    using Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    <>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpbx65mpm1.jl:17\nin expression starting at /tmp/tmpbx65mpm1.jl:17\n"
  stdout: ''
  timestamp: 1660008975
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    \"\"\"\n    correct_bracketing(\n\
    \      brackets::String\n    )::Bool\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8v01g02n.jl:1\nin expression starting at /tmp/tmp8v01g02n.jl:1\n"
  stdout: ''
  timestamp: 1660008974
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    bracket_opens =\
    \ brackets.count(\"<\")\n    bracket_closes = brackets.count(\">\")\n    return\
    \ bracket_opens == bracket_closes - 1\nend\n</cell>\n<text>\nExercise 8\nWrite\
    \ a function brackets_to_parens that:\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpi5y0vyju.jl:18\nin expression starting at\
    \ /tmp/tmpi5y0vyju.jl:18\n"
  stdout: ''
  timestamp: 1660008975
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets_ = brackets::String\n\
    \    open_opens = brackets_.count(\"<\")\n    open_closes = brackets_.count(\"\
    <<\")\n    close_closes = brackets_.count(\"->>\")\n    return open_opens == open_closes\
    \ and close_closes == open_opens\nend\n</cell>\n<text>\nWe will now try to use\
    \ this function to count the number of matching brackets for any given input:\n\
    using Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    <>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"function\" at /tmp/tmp_qz2yzcx.jl:13 expected\
    \ \"end\", got \"and\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp_qz2yzcx.jl:18\n\
    in expression starting at /tmp/tmp_qz2yzcx.jl:18\n"
  stdout: ''
  timestamp: 1660008975
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    \"\"\"\n    correct_bracketing(s::String)::Bool\n\
    \    \"\"\"\n    for bracket in brackets\n        if opening bracket != closing\
    \ bracket\n            return false\n    end\n    return true\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\"\
    ) == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"bracket\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp3_s1pasx.jl:18\nin expression starting at /tmp/tmp3_s1pasx.jl:18\n"
  stdout: ''
  timestamp: 1660008975
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\
    \" then return true\n    let brackets = brackets.replace(\"<<<\",\"\").replace(\"\
    >>>\",\"\").replace(\"--\",\"\").replace(\">>--\",\"\").replace(\">--\",\"\")\n\
    \    let open_brackets = brackets.split(\"<\").filter(elem => elem != \"\").map(x\
    \ => x.replace(\"<<<\",\"\").replace(\">>>\",\"\").replace(\"--\",\"\").replace(\"\
    >>--\",\"\").replace(\">--\",\"\"))\n    let close_brackets = brackets.split(\"\
    >\").filter(elem => elem != \"\").map(x => x.replace(\"<<<\",\"\").replace(\"\
    >>>\",\"\").replace(\"--\",\"\").replace(\">>--\",\"\").replace(\">--\",\"\"))\n\
    \    if open_brackets /= close_brackets then return false\n    let open_brackets\
    \ = open_brackets.filter(x => x !=\"\").map(x => x.replace(\"<<<\",\"\").replace(\"\
    >>>\",\"\").replace(\"--\",\"\").replace(\">>--\",\"\").replace(\">--\",\"\"))\n\
    \    let close_brackets = close_brackets.filter(x => x !=\"\").map(x => x.replace(\"\
    <<<\",\"\").replace(\">>>\",\"\").replace(\"--\",\"\").replace(\">>--\",\"\").replace(\"\
    >--\",\"\"))\n    if open_brackets /= close_brackets then return false\n    return\
    \ true\nend\n</cell>\n<text>\nPart 2\nWrite a function correct_bracketing_with_counting\
    \ that will return a tuple of the form (true/false_count, correct_bracketing).\n\
    using Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    <>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpximdi_cu.jl:14\nin expression starting at /tmp/tmpximdi_cu.jl:14\n"
  stdout: ''
  timestamp: 1660008975
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    \"\"\"\n    >>>\
    \ correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n \
    \   true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \"\"\"\n\"\"\"\n###\nSolution\n###\n\"\"\"\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\"\
    ) == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpa_nzpjuy.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpa_nzpjuy.jl:1\n\
    in expression starting at /tmp/tmpa_nzpjuy.jl:1\n"
  stdout: ''
  timestamp: 1660008975
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n\"\"\"\n    correct_bracketing(brackets::String)\n\
    using Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    <>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptmpn9ibh.jl:1\nin expression starting at /tmp/tmptmpn9ibh.jl:1\n"
  stdout: ''
  timestamp: 1660008975
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    \"\"\"\n    Check\
    \ whether the given bracketing string is correct or incorrect.\nusing Test\n\n\
    @testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") ==\
    \ true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpewr_5716.jl:1\nin expression starting at /tmp/tmpewr_5716.jl:1\n"
  stdout: ''
  timestamp: 1660008976
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    \" brackets is a\
    \ string of \"<\" and \">\".\n    let opening_brackets = brackets |> String.split(\"\
    \ \") |> Array.filter(fun x-> x = \"<\") |> Array.map(fun x->x.[1])\n    let closing_brackets\
    \ = brackets |> String.split(\" \") |> Array.filter(fun x-> x = \">\") |> Array.map(fun\
    \ x->x.[1])\n    if opening_brackets.Length <> closing_brackets.Length\n     \
    \   || opening_brackets |> Array.contains(fun x-> not (List.contains(closing_brackets,\
    \ x)))\n        || closing_brackets |> Array.contains(fun x-> not (List.contains(opening_brackets,\
    \ x)))\n        || opening_brackets.Length > 1\n        || closing_brackets.Length\
    \ > 1\n        || opening_brackets.Length > 2\n        || closing_brackets.Length\
    \ > 2\n        || opening_brackets.Length < 3\n        || closing_brackets.Length\
    \ < 3\n        || (opening_brackets.Length <> 4 && closing_brackets.Length <>\
    \ 4)\n        || (opening_brackets.Length <> 2 && closing_brackets.Length <> 2)\n\
    \        || (opening_brackets.Length <> 3 && closing_brackets.Length <> 3)\n \
    \       || (opening_brackets.Length <> 4 && closing_brackets.Length <> 2)\n  \
    \      || (opening_brackets.Length <> 2 && closing_brackets.Length <> 4)\n   \
    \     || (opening_brackets.Length <> 3 && closing_brackets.Length <> 4)\n    \
    \    || (opening_brackets.Length <> 4 && closing_brackets.Length <> 3)\n     \
    \   || (opening_brackets.Length <> 2 && closing_brackets.Length <> 3)\n      \
    \  || (opening_brackets.Length <> 3 && closing_brackets.Length <> 4)\n       \
    \ || (opening_brackets.Length <> 4 && closing_brackets.Length <> 4)\n    then\
    \ false\n    else true\nend\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t\
    @test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\"\
    ) == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") ==\
    \ false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\
    \t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"function\" at /tmp/tmpet4qewg7.jl:13 expected\
    \ \"end\", got \"\"\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpet4qewg7.jl:15\n\
    in expression starting at /tmp/tmpet4qewg7.jl:15\n"
  stdout: ''
  timestamp: 1660008976
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    # Write your solution\
    \ here\n    return brackets contains \"<\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"function\" at /tmp/tmpqxxx4s5l.jl:13 expected\
    \ \"end\", got \"contains\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpqxxx4s5l.jl:15\n\
    in expression starting at /tmp/tmpqxxx4s5l.jl:15\n"
  stdout: ''
  timestamp: 1660008976
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    \"\"\" Return true\
    \ if brackets is of the correct form \"<<\" and \">>\".\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\
    \t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") ==\
    \ true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpohz0l4u2.jl:1\nin expression starting at /tmp/tmpohz0l4u2.jl:1\n"
  stdout: ''
  timestamp: 1660008976
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    # YOUR CODE HERE\n\
    \    \n    \n# Do not delete the lines below.\nassert not correct_bracketing(\"\
    <|\")\nassert not correct_bracketing(\"<>\")\nassert not correct_bracketing(\"\
    <>|\")\nassert not correct_bracketing(\"<<<\")\n</cell>\n<text>\nSo far so good.\
    \ Now let's see how to handle brackets correctly in strings of brackets.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    <>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"function\" at /tmp/tmpempdusof.jl:13 expected\
    \ \"end\", got \"not\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpempdusof.jl:18\n\
    in expression starting at /tmp/tmpempdusof.jl:18\n"
  stdout: ''
  timestamp: 1660008976
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.to_string()\n\
    \    for bracket in brackets:\n        if bracket.head == bracket.tail:\n    \
    \        brackets.remove(bracket)\n            return True\n    return False\n\
    end \nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    <>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpc_5hhrm_.jl:16\nin expression starting at\
    \ /tmp/tmpc_5hhrm_.jl:16\n"
  stdout: ''
  timestamp: 1660008976
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.split(\"\
    <\")\n    brackets = [b[1:] for b in brackets]\n    brackets = Set(brackets)\n\
    \    for b in brackets:\n        if b not in \"(){}<>\":\n            return False\n\
    \    return True\nend\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t\
    @test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\"\
    ) == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") ==\
    \ false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\
    \t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"1:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp35zf0uy6.jl:15\nin expression\
    \ starting at /tmp/tmp35zf0uy6.jl:15\n"
  stdout: ''
  timestamp: 1660008976
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    bracket_list = brackets\n\
    \    for bracket_char in bracket_list:\n        if !is_opening(bracket_char):\n\
    \            error(\"wrong bracket: expected opening character but got \\\"%s\\\
    \"\", bracket_char)\n        has_next_char_in_correct_bracket = next_char(bracket_char)\n\
    \        if not has_next_char_in_correct_bracket:\n            error(\"wrong bracket:\
    \ expected closing character but got \\\"%s\\\"\", bracket_char)\n        if has_next_char_in_correct_bracket:\n\
    \            if next_char(bracket_char) != has_next_char_in_correct_bracket:\n\
    \                error(\"wrong bracket: expected closing character but got \\\"\
    %s\\\", but expected closing character was \\\"%s\\\"\", bracket_char, has_next_char_in_correct_bracket)\n\
    \                \n    true\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t\
    @test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\"\
    ) == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") ==\
    \ false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\
    \t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4cb0_q0n.jl:16\nin expression starting at\
    \ /tmp/tmp4cb0_q0n.jl:16\n"
  stdout: ''
  timestamp: 1660008976
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\
    \" then return true\n    if brackets == \"<\" then return false\n    else if brackets\
    \ == \">\" then return true\n    else if brackets == \"<>\" then return false\n\
    \    else if brackets == \"<>\" then return false\n    else if brackets == \"\
    <>\" then return false\n    else if brackets == \"<>\" then return false\n   \
    \ else if brackets == \"<>\" then return false\n    else if brackets == \"<>\"\
    \ then return false\n    else if brackets == \"<>\" then return false\n    else\
    \ if brackets == \"<>\" then return false\n    else if brackets == \"<>\" then\
    \ return false\n    else if brackets == \"<>\" then return false\n    else if\
    \ brackets == \"<>\" then return false\n    else if brackets == \"<>\" then return\
    \ false\n    else if brackets == \"<>\" then return false\n    else if brackets\
    \ == \"<>\" then return false\n    else if brackets == \"<>\" then return false\n\
    \    else if brackets == \"<>\" then return false\n    else if brackets == \"\
    <>\" then return false\n    else if brackets == \"<>\" then return false\n   \
    \ else if brackets == \"<>\" then return false\n    else if brackets == \"<>\"\
    \ then return false\n    else if brackets == \"<>\" then return false\n    else\
    \ if brackets == \"<>\" then return false\n    else if brackets == \"<>\" then\
    \ return false\n    else if brackets == \"<>\" then return false\n    else if\
    \ brackets == \"<>\" then return false\n    else if brackets == \"<>\" then return\
    \ false\n    else if brackets == \"<>\" then return false\n    else if brackets\
    \ == \"<>\" then return false\n    else if brackets == \"<>\" then return false\n\
    \    else if brackets == \"<>\" then return false\n    else if brackets == \"\
    <>\" then return false\n    else if brackets == \"<>\" then return false\n   \
    \ else if brackets == \"<>\" then return false\n    else if brackets == \"<>\"\
    \ then return false\n    else if brackets == \"<>\" then return false\n    else\
    \ if brackets == \"<>\" then return false\n    else if brackets == \"<>\" then\
    \ return false\n    else if brackets == \"<>\" then return false\n    else if\
    \ brackets == \"<>\" then return false\n    else if brackets == \"<>\" then return\
    \ false\n    else if \nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t\
    @test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\"\
    ) == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") ==\
    \ false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\
    \t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpq4gjaedy.jl:14\nin expression starting at /tmp/tmpq4gjaedy.jl:14\n"
  stdout: ''
  timestamp: 1660008976
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    \"\"\"\n    \n \
    \   Arguments\n    ---------\n    brackets is a string of \"<\" and \">\".\n \
    \   \n    Returns\n    -------\n    True if every opening bracket has a corresponding\
    \ closing bracket.\n    \"\"\"\n    if brackets == \"\" or brackets == \"<>\"\
    :\n        return true\n    var opening = brackets[1]\n    var closing = brackets[2]\n\
    \    for opening in brackets do\n        return !isopeningbracket(opening) ||\
    \ !isclosingbracket(closing)\n    return false\nend\n</cell>\n<cell>\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\"\
    ) == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"brackets\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpipe39796.jl:24\nin expression starting at /tmp/tmpipe39796.jl:24\n"
  stdout: ''
  timestamp: 1660008976
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    \"\"\"\n    # Write\
    \ your code here.\n    \"\"\"\n    \n</cell>\n<text>\nExercise 1: Write a recursive\
    \ function which takes a list of numbers and returns True if the list has at least\
    \ one prime element and False if not.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9n1ee_kj.jl:18\nin expression starting at\
    \ /tmp/tmp9n1ee_kj.jl:18\n"
  stdout: ''
  timestamp: 1660008976
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    loop\n        opening_bracket\
    \ = brackets[_index]\n        if opening_bracket == \"<\"\n            return\
    \ false\n        else if opening_bracket == \">\"\n            return true\n \
    \       else if opening_bracket == \"(\"\n            _index = _index + 1\n  \
    \      else if opening_bracket == \")\"\n            _index = _index - 1\n   \
    \     else\n            _index = _index + 1\n    end\nend\n</cell>\n<text>\nExercise:\
    \ Write a function called correct_bracketing_iter that does the same thing as\
    \ correct_bracketing, but with explicit recursion. Make sure you have a test case\
    \ that shows it doesn't work!\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t\
    @test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\"\
    ) == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") ==\
    \ false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\
    \t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpny_z9yu6.jl:18\nin expression starting at\
    \ /tmp/tmpny_z9yu6.jl:18\n"
  stdout: ''
  timestamp: 1660008976
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    # Write your answer\
    \ as a function using the String type and a nested loop\n    # Hint: Use \"open_brackets\"\
    \ and \"close_brackets\" to create and fill \n    # open_brackets and close_brackets\
    \ as lists of brackets. \n    # Hint: Use the built-in Python function \"all\"\
    \ with open_brackets and close_brackets\n    return false\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") ==\
    \ true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 8 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpqqjo5hmb.jl:22

    '
  stdout: "test set: Test Failed at /tmp/tmpqqjo5hmb.jl:25\n  Expression: candidate(\"\
    <>\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpqqjo5hmb.jl:25 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpqqjo5hmb.jl:24\ntest set: Test Failed at /tmp/tmpqqjo5hmb.jl:26\n\
    \  Expression: candidate(\"<<><>>\") == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqqjo5hmb.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqqjo5hmb.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpqqjo5hmb.jl:27\n  Expression: candidate(\"<><><<><>><>\")\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpqqjo5hmb.jl:27 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpqqjo5hmb.jl:24\ntest set: Test Failed at /tmp/tmpqqjo5hmb.jl:28\n\
    \  Expression: candidate(\"<><><<<><><>><>><<><><<>>>\") == true\n   Evaluated:\
    \ false == true\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqqjo5hmb.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqqjo5hmb.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     4     12\n"
  timestamp: 1660008977
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    count = 0 \n   \
    \ for char in brackets\n        if char == \"<\"\n            count += 1\n   \
    \     else\n            count -= 1\n            \n        if count < 0\n     \
    \       return false\n        end\n    end\n    return true\nend\n</cell>\n<text>\n\
    Exercise:\nWrite a function that takes a string and returns the string with each\
    \ character replaced with \"X\" if it is an upper case letter, else with \"x\"\
    .\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    <>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdoy96534.jl:27\nin expression starting at\
    \ /tmp/tmpdoy96534.jl:27\n"
  stdout: ''
  timestamp: 1660008976
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    \"\"\"\n    correct_bracketing(s)\
    \ returns true if brackets is a string of \"<\" and \">\".\n    return true if\
    \ every opening bracket has a corresponding closing bracket.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\
    \t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") ==\
    \ true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplbokc6pn.jl:1\nin expression starting at /tmp/tmplbokc6pn.jl:1\n"
  stdout: ''
  timestamp: 1660008976
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = tostring(brackets)\n\
    \    brackets = string_to_chars(brackets)\n    for (i,c) in enumerate(brackets):\n\
    \        if c != \">\" and c != \"<\":\n            return false\n    return true\n\
    end\n</cell>\n<text>\nExercise 8\nusing Test\n\n@testset begin\n\ncandidate =\
    \ correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_6iprxti.jl:17\nin expression starting at\
    \ /tmp/tmp_6iprxti.jl:17\n"
  stdout: ''
  timestamp: 1660008976
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    \n    open_brackets\
    \ = brackets.split\n    closed_brackets = \"\"\n    \n    for i in open_brackets\n\
    \        closed_brackets = closed_brackets + \">\" + i\n    \n    for i in closed_brackets\n\
    \        open_brackets = open_brackets + \"<\" + i\nusing Test\n\n@testset begin\n\
    \ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"for\" at /tmp/tmpfsjmadrd.jl:21\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpfsjmadrd.jl:1\n\
    in expression starting at /tmp/tmpfsjmadrd.jl:1\n"
  stdout: ''
  timestamp: 1660008976
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    \"\"\"\n    check\
    \ whether the input string has correct brackets.\nusing Test\n\n@testset begin\n\
    \ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp98j05d0k.jl:1\nin expression starting at /tmp/tmp98j05d0k.jl:1\n"
  stdout: ''
  timestamp: 1660008977
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    if is_correct_bracket(brackets)\
    \ == true\n        true\n    else\n        false\n    end\nend\n</code>\n<|/ q\
    \ dscore=0 tags=string,julia,pattern-matching |>\n<| c |>\n\"*I have a set of\
    \ brackets brackets such as the following examples*\" where do you get these brackets?\
    \ From a web page? From a file? From some text? You didn't explain how you get\
    \ this data.\n<|/ c |>\n<| c |>\nFrom a web page. Basically I want to find every\
    \ opening bracket and every closing bracket, and see if there is an \"<<>>\" in\
    \ between.\n<|/ c |>\n<| a dscore=1 |>\n<code>\nusing Test\n\n@testset begin\n\
    \ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgff4socc.jl:20\nin expression starting at\
    \ /tmp/tmpgff4socc.jl:20\n"
  stdout: ''
  timestamp: 1660008976
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    # we assume that\
    \ the brackets are well formed\n    # this function returns true if brackets is\
    \ a string of \"<\" and \">\".\n    return brackets.length == 2 and brackets.contains(\"\
    <\") and brackets.contains(\">\")\nusing Test\n\n@testset begin\n\ncandidate =\
    \ correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"function\" at /tmp/tmp93w_c6co.jl:13 expected\
    \ \"end\", got \"and\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp93w_c6co.jl:16\n\
    in expression starting at /tmp/tmp93w_c6co.jl:16\n"
  stdout: ''
  timestamp: 1660008976
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    bracket_list = brackets.split(\"\
    <\")\n    trues = 0\n    falses = 0\n    for bracket in bracket_list\n       \
    \ if bracket.startswith \">\"\n            if bracket_list.index(bracket) == bracket_list.index(bracket)-1\n\
    \                falses += 1\n            else\n                trues += 1\n \
    \       else \n            falses += 1\n    end\n    return (trues == 0 and falses\
    \ == 0)\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    bracket_string(brackets::String)\n\
    using Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    <>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"if\" at /tmp/tmpwzl2n0_g.jl:19 expected \"\
    end\", got \"else\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpwzl2n0_g.jl:23\n\
    in expression starting at /tmp/tmpwzl2n0_g.jl:23\n"
  stdout: ''
  timestamp: 1660008976
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    \"\"\"\n    correct_bracketing(brackets::String)\n\
    using Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    <>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpl9ie6osg.jl:1\nin expression starting at /tmp/tmpl9ie6osg.jl:1\n"
  stdout: ''
  timestamp: 1660008977
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    pos = 0\n    len\
    \ = brackets.length\n    while pos <= len\n        if brackets[pos] == brackets[pos+1]\n\
    \            return false\n        pos = pos + 1\n    return true\n</code>\n<|/\
    \ a tags=python |>\n<| a tags=python |>\nI find this solution very elegant and\
    \ readable.  \n<code>\ndef isBalanced(string):\n    stack = []\n    quotes = {'\"\
    '}\n    open_brackets = {'[', '('}\n    open_brackets = {c for c in open_brackets\
    \ if c not in quotes}\n    closed_brackets = {c for c in open_brackets if c in\
    \ quotes}\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t\
    @test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"\
    <><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") ==\
    \ true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\"\
    ) == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") ==\
    \ false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\
    \t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp90dx07o4.jl:21\nin expression starting at\
    \ /tmp/tmp90dx07o4.jl:21\n"
  stdout: ''
  timestamp: 1660008977
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n  brackets = brackets.replace(\"\
    <<\",\"<\").replace(\">>\",\">\")\n  brackets = brackets.replace(\"<\",\"<<\"\
    ).replace(\">>\",\">>\")\n  brackets = brackets.replace(\">>\",\">>\").split(\"\
    <\")\n  brackets = map(String,brackets)\n  for b in brackets\n    if b <> \">\"\
    \ \n      || brackets.index(b) <> brackets.rindex(b)\n    then return false\n\
    \    else if b == \">\" \n      then brackets.rindex(b) \n    else true\n  end\n\
    \  return true\nend\n</code>\n<|/ a |>\n<| c |>\nThank you very much for this!\
    \ It works great. I just had to replace some things, but I got it working.\n<|/\
    \ c |>\n<| c |>\nThe `correct_bracketing` function should be modified to correctly\
    \ handle nested brackets within the brackets string. See the updated answer for\
    \ a possible solution.\n<|/ c |>\n<| a dscore=0 |>\nI used the following, which\
    \ seems to work.\n<code>\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t\
    @test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\"\
    ) == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") ==\
    \ false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\
    \t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \">\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpeltxdtfd.jl:19\nin expression starting at\
    \ /tmp/tmpeltxdtfd.jl:19\n"
  stdout: ''
  timestamp: 1660008978
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets\
    \ |> lowercase\n    brackets |> remove_brackets()\n    brackets |> check_opening_closing_brackets\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    <>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 12 errored,
    0 broken.

    in expression starting at /tmp/tmpq5jnqkw6.jl:20

    '
  stdout: "test set: Error During Test at /tmp/tmpq5jnqkw6.jl:23\n  Test threw exception\n\
    \  Expression: candidate(\"<>\") == true\n  UndefVarError: remove_brackets not\
    \ defined\n  Stacktrace:\n   [1] correct_bracketing(brackets::String)\n     @\
    \ Main /tmp/tmpq5jnqkw6.jl:15\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpq5jnqkw6.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpq5jnqkw6.jl:22\ntest set:\
    \ Error During Test at /tmp/tmpq5jnqkw6.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(\"<<><>>\") == true\n  UndefVarError: remove_brackets not defined\n\
    \  Stacktrace:\n   [1] correct_bracketing(brackets::String)\n     @ Main /tmp/tmpq5jnqkw6.jl:15\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpq5jnqkw6.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpq5jnqkw6.jl:22\ntest set:\
    \ Error During Test at /tmp/tmpq5jnqkw6.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(\"<><><<><>><>\") == true\n  UndefVarError: remove_brackets not defined\n\
    \  Stacktrace:\n   [1] correct_bracketing(brackets::String)\n     @ Main /tmp/tmpq5jnqkw6.jl:15\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpq5jnqkw6.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpq5jnqkw6.jl:22\ntest set:\
    \ Error During Test at /tmp/tmpq5jnqkw6.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\") == true\n  UndefVarError: remove_brackets\
    \ not defined\n  Stacktrace:\n   [1] correct_bracketing(brackets::String)\n  \
    \   @ Main /tmp/tmpq5jnqkw6.jl:15"
  timestamp: 1660008981
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    bracket_count::Int64\
    \ = 0\n    for bracket in brackets\n        if bracket == \"<\"\n            bracket_count\
    \ = bracket_count + 1\n        else if bracket == \">\"\n            bracket_count\
    \ = bracket_count - 1\n            if bracket_count < 0\n                error(\"\
    incorrect bracket placement\")\n            else\n                bracket_count\
    \ = 0\n        else if bracket == \"<<\"\n            bracket_count = bracket_count\
    \ + 1\n        else if bracket == \">>\"\n            bracket_count = bracket_count\
    \ - 1\n            if bracket_count < 0\n                error(\"incorrect bracket\
    \ placement\")\n            else\n                bracket_count = 0\n        else\n\
    \            error(\"incorrect bracket placement\")\n    end\n    return true\n\
    end\n</cell>\n<text>\nWe can also check that the string is valid:\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\"\
    ) == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnzw2g6f6.jl:18\nin expression starting at\
    \ /tmp/tmpnzw2g6f6.jl:18\n"
  stdout: ''
  timestamp: 1660008978
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets[brackets.length\
    \ - 1]\n    for i in 1:length(brackets)\n        if brackets[i] != '<'\n     \
    \       return false\n        end\n    end\n    return true\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\"\
    ) == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 12 errored,
    0 broken.

    in expression starting at /tmp/tmppfmnqwwb.jl:24

    '
  stdout: "test set: Error During Test at /tmp/tmppfmnqwwb.jl:27\n  Test threw exception\n\
    \  Expression: candidate(\"<>\") == true\n  type String has no field length\n\
    \  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] correct_bracketing(brackets::String)\n\
    \     @ Main /tmp/tmppfmnqwwb.jl:14\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmppfmnqwwb.jl:27 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmppfmnqwwb.jl:26\ntest set:\
    \ Error During Test at /tmp/tmppfmnqwwb.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"<<><>>\") == true\n  type String has no field length\n  Stacktrace:\n\
    \   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] correct_bracketing(brackets::String)\n\
    \     @ Main /tmp/tmppfmnqwwb.jl:14\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmppfmnqwwb.jl:28 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmppfmnqwwb.jl:26\ntest set:\
    \ Error During Test at /tmp/tmppfmnqwwb.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"<><><<><>><>\") == true\n  type String has no field length\n  Stacktrace:\n\
    \   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] correct_bracketing(brackets::String)\n\
    \     @ Main /tmp/tmppfmnqwwb.jl:14\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmppfmnqwwb.jl:29 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmppfmnqwwb.jl:26\ntest set:\
    \ Error During Test at /tmp/tmppfmnqwwb.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\") == true\n  type String has no fi"
  timestamp: 1660008980
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    \n    # Return true\
    \ if brackets contains every opening bracket in the \n    # same position, and\
    \ every closing bracket in the same position.\n    brackets.split(\">\").zip(brackets.split(\"\
    <\")).forall {\n        (a, b) in zip(a, b) in zip(a, b) }\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\
    \t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") ==\
    \ true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: space before \"{\" not allowed in \"brackets.split(\"\
    >\").zip(brackets.split(\"<\")).forall {\" at /tmp/tmp4pk0b3tm.jl:17\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4pk0b3tm.jl:17\nin expression starting at\
    \ /tmp/tmp4pk0b3tm.jl:17\n"
  stdout: ''
  timestamp: 1660008978
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    \"\"\"\n    Determine\
    \ whether brackets are correctly nested.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp06spuo7u.jl:1\nin expression starting at /tmp/tmp06spuo7u.jl:1\n"
  stdout: ''
  timestamp: 1660008978
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n  \n    bracket_table\
    \ = Dict([(\"(\",\")\"), (\"[\",\"]\"), (\"<\",\">\")])\n  \n    openings = brackets.split(\"\
    \ \") // get all \"(\" \")\" ...\n    closings = brackets.split(\" \") // ...\
    \ and ... \"[  ]\" ...\n  \n    if openings == closings\n      return true\n \
    \   else\n      result = (openings.filter(x -> bracket_table[x] != closings.last).length\
    \ == 0)\n      return result\nend\n</cell>\n<code language=julia-0.4>\n\"\"\"\
    \ check a bracketing string for a \"valid\" opening bracket (one that can be \"\
    paired up\" with \")\" brackets)\n\"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"function\" at /tmp/tmp7ttgsksn.jl:13 expected\
    \ \"end\", got \"all\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp7ttgsksn.jl:17\n\
    in expression starting at /tmp/tmp7ttgsksn.jl:17\n"
  stdout: ''
  timestamp: 1660008978
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets[2:-2]\n\
    \    brackets = brackets[brackets.is_subseq(brackets)] \n    brackets = brackets[brackets.is_subseq(brackets)]\
    \ \n    brackets = brackets[brackets.is_subseq(brackets)] \n    brackets = brackets[brackets.is_subseq(brackets)]\
    \ \n    brackets = brackets[brackets.is_subseq(brackets)] \n    brackets = brackets[brackets.is_subseq(brackets)]\
    \ \n    brackets = brackets[brackets.is_subseq(brackets)] \n    brackets = brackets[brackets.is_subseq(brackets)]\
    \ \n    brackets = brackets[brackets.is_subseq(brackets)] \n    brackets = brackets[brackets.is_subseq(brackets)]\
    \ \n    brackets = brackets[brackets.is_subseq(brackets)] \n    brackets = brackets[brackets.is_subseq(brackets)]\
    \ \n    brackets = brackets[brackets.is_subseq(brackets)] \n    brackets = brackets[brackets.is_subseq(brackets)]\
    \ \n    brackets = brackets[brackets.is_subseq(brackets)] \n    brackets = brackets[brackets.is_subseq(brackets)]\
    \ \n    brackets = brackets[brackets.is_subseq(brackets)] \n    brackets = brackets[brackets.is_subseq(brackets)]\
    \ \n    brackets = brackets[brackets.is_subseq(brackets)] \n    brackets = brackets[brackets.is_subseq(brackets)]\
    \ \n    brackets = brackets[brackets.is_subseq(brackets)] \n    brackets = brackets[brackets.is_subseq(brackets)]\
    \ \n    brackets = brackets[brackets.is_subseq(brackets)] \n    brackets = brackets[brackets.is_subseq(brackets)]\
    \ \n    brackets = brackets[brackets.is_subseq(brackets)] \n    brackets = brackets[brackets.is_subseq(brackets)]\
    \ \n    brackets = brackets[brackets.is_subseq(brackets)] \n    brackets = brackets[brackets.is_subseq(brackets)]\
    \ \n    brackets = brackets[brackets.is_subseq(brackets)] \n    brackets = brackets[brackets.is_subseq(brackets)]\
    \ \n    brackets = brackets[brackets.is_subseq(brackets)] \n    brackets = brackets[brackets.is_\n\
    using Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    <>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1oye_1iz.jl:1\nin expression starting at /tmp/tmp1oye_1iz.jl:1\n"
  stdout: ''
  timestamp: 1660008978
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    for i in brackets\
    \ \n        if i not in open_close \n            error(\"Invalid Bracketing: invalid\
    \ opening bracket\")\n        end\n    return true\nusing Test\n\n@testset begin\n\
    \ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"for\" at /tmp/tmpu2zdh63t.jl:14\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpu2zdh63t.jl:1\n\
    in expression starting at /tmp/tmpu2zdh63t.jl:1\n"
  stdout: ''
  timestamp: 1660008978
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    |(brackets == \"\
    <>\") || brackets == \"<>\" = true \n    |brackets == \"<\" = !(brackets[1..end-1]\
    \ ~~ \"<>\") \n    |brackets == \"<\" = !(brackets[1..end-1] ~~ \"<\") \n    |brackets\
    \ == \"<\" = !(brackets[1..end-1] ~~ \">\") \n    |brackets == \"<\" = !(brackets[1..end-1]\
    \ ~~ \">>\") \n    |brackets == \"<\" = !(brackets[1..end-1] ~~ \"<<\") \n   \
    \ |brackets == \"<\" = !(brackets[1..end-1] ~~ \"<=\") \n    |brackets == \"<\"\
    \ = !(brackets[1..end-1] ~~ \"=\") \n    |brackets == \"<\" = !(brackets[1..end-1]\
    \ ~~ \"<<=\") \n    |brackets == \"<\" = !(brackets[1..end-1] ~~ \"<=>\") \n \
    \   |brackets == \"<\" = !(brackets[1..end-1] ~~ \"<=>\") \n    |brackets == \"\
    <\" = !(brackets[1..end-1] ~~ \">=>\") \n    |brackets == \"<\" = !(brackets[1..end-1]\
    \ ~~ \">=>\") \n    |brackets == \"<\" = !(brackets[1..end-1] ~~ \"=>\") \n  \
    \  |brackets == \"<\" = !(brackets[1..end-1] ~~ \"=>=\") \n    |brackets == \"\
    <\" = !(brackets[1..end-1] ~~ \"<<=>\") \n    |brackets == \"<\" = !(brackets[1..end-1]\
    \ ~~ \"<<=>\") \n    |brackets == \"<\" = !(brackets[1..end-1] ~~ \"<=>=\") \n\
    \    |brackets == \"<\" = !(brackets[1..end-1] ~~ \"<=>=\") \n    |brackets ==\
    \ \"<\" = !(brackets[1..end-1] ~~ \">=>=\") \n    |brackets == \"<\" = !(brackets[1..end-1]\
    \ ~~ \">=>=\") \n    |brackets == \"<\" = !(brackets[1..end-1] ~~ \"=>=\") \n\
    \    |brackets == \"<\" = !(brackets[1..end-1] ~~ \"=>=\") \n    |brackets ==\
    \ \"<\" = !(brackets[1..\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t\
    @test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\"\
    ) == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") ==\
    \ false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\
    \t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"|\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpoxkvwtx7.jl:15\nin expression starting at\
    \ /tmp/tmpoxkvwtx7.jl:15\n"
  stdout: ''
  timestamp: 1660008978
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    if is_open_paren(brackets)\n\
    \        if is_close_paren(brackets)\n            true\n        else\n       \
    \     false\n    else\n        false\nend\n</cell>\n<code language=julia-1.6>\n\
    \"\"\"\nGiven a nested list of numbers, \nreturn true if there is any bracketing\
    \ in the nested list \nwhere all opening brackets have corresponding closing brackets.\
    \ \nReturn false otherwise.\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t\
    @test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\"\
    ) == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") ==\
    \ false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\
    \t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"if\" at /tmp/tmpi52gr3yr.jl:15 expected \"\
    end\", got \"else\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpi52gr3yr.jl:19\n\
    in expression starting at /tmp/tmpi52gr3yr.jl:19\n"
  stdout: ''
  timestamp: 1660008978
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    \"\"\"\"\"\"\nend\n\
    </cell>\n<text>\nExercise 3: Find a closing bracket in the following string.\n\
    Hint: This exercise is very similar to the \"Find all brackets\" exercise; just\
    \ replace \"find all brackets\" with \"find one bracket\".\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\
    \t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") ==\
    \ true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsoptzi_x.jl:16\nin expression starting at\
    \ /tmp/tmpsoptzi_x.jl:16\n"
  stdout: ''
  timestamp: 1660008978
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    \"\"\"Corrects brackets\
    \ in `brackets` by adding appropriate \"<\" and \">\" \n    brackets. If brackets\
    \ is empty, then returns true. \"\"\" \n    if brackets == \"\" \n        true\
    \ \n    elseif brackets[0] == \"<\" \n        correct_bracketing(brackets[1:])\
    \ \n    elseif brackets[0] == \">\" \n        correct_bracketing(brackets[1:])\
    \ \n    else \n        brackets \n    end \nend \n</cell>\n<text>\nExercise\n\
    Using the function correct_bracketing create a function called correct_bracket_nesting\
    \ that will return true if brackets are nested correctly (correct brackets are\
    \ added where appropriate). Use it on the following input:\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\
    \t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") ==\
    \ true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"1:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpogbm9tom.jl:19\nin expression\
    \ starting at /tmp/tmpogbm9tom.jl:19\n"
  stdout: ''
  timestamp: 1660008978
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    \"\"\"\n    correct_bracketing(brackets::String)\n\
    using Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    <>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpl9ie6osg.jl:1\nin expression starting at /tmp/tmpl9ie6osg.jl:1\n"
  stdout: ''
  timestamp: 1660008977
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    local open, bracket_count\
    \ = 0\n    for character in brackets do\n        if character == \"<\" then\n\
    \            open = open + 1\n        elseif character == \">\" then\n       \
    \     open = open - 1\n        elseif character == \"(\" then\n            open\
    \ = open + 1\n            bracket_count = bracket_count + 1\n        elseif character\
    \ == \")\" then\n            if open == 0 then\n                return false\n\
    \            else\n                open = open - 1\n                bracket_count\
    \ = bracket_count - 1\n            end\n        elseif character == \"{\" then\n\
    \            if bracket_count == 0 then\n                return false\n      \
    \      else\n                return true\n            end\n        elseif character\
    \ == \"}\" then\n            if bracket_count < 0 then\n                return\
    \ false\n            else\n                return true\n            end\n    \
    \    else\n            return false\n        end\n    end\n    return true\nend\n\
    </code>\n<|/ a dscore=2 tags=functional-programming,haskell |>\n<| c |>\nI realized\
    \ after posting that my solution was slightly off because of how I interpreted\
    \ the requirements. I updated my answer based on my interpretation of your question.\
    \ Sorry for the confusion.\n<|/ c |>\n<| a dscore=2 |>\nHere's a short recursive\
    \ solution:\n<code>\ncorrectBrackets :: String -> Bool\ncorrectBrackets = foldr\
    \ (\\_ x -> x /= ')') True . dropWhile (=='(') . dropWhile (==')') . dropWhile\
    \ (=='{') . dropWhile (=='}') . dropWhile (=='['). dropWhile (==']')\n</code>\n\
    It uses foldr :: (a -> b -> a) -> a -> [b] -> a to accumulate (True, x) when x\
    \ is equal to True and False when x is equal to False. The result is then simply\
    \ a logical and operation on the accumulated list of Booleans.\n<code>\n> correctBrackets\
    \ \"[()]\"\nFalse\n> correctBrackets \"[(])\"\nTrue\n> correctBrackets \"[]\"\n\
    False\n> correctBrackets \"([)]\"\nTrue\n> correctBrackets \"{([]}\"\nTrue\n</code>\n\
    <|/ a tags=functional-programming,haskell |>\n<| a dscore=2 tags=functional-programming,haskell\
    \ |>\nA few improvements\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t\
    @test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\"\
    ) == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") ==\
    \ false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\
    \t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid \"do\" syntax\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpq9vofi63.jl:15\nin expression starting at /tmp/tmpq9vofi63.jl:15\n"
  stdout: ''
  timestamp: 1660008978
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n\"\"\"\n    correct_bracketing(brackets::String)::Bool\
    \ \n    \n    Check brackets correctness, returns a bool indicating correctness.\n\
    \    Brackets are \"<\" and \">\".\n\"\"\"\nif brackets[length(brackets) - 1]\
    \ != \"<\"\n    error(\"brackets must be < >\")\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmps5f7uub5.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmps5f7uub5.jl:1\n\
    in expression starting at /tmp/tmps5f7uub5.jl:1\n"
  stdout: ''
  timestamp: 1660008978
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    <\", \"\")\n    brackets = brackets.replace(\"]\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\")\n    brackets = brackets.replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    [\", \"\")\n    brackets = brackets.replace(\"(\", \"\")\n    brackets = brackets.replace(\"\
    '\", \"\")\n    brackets = brackets.replace(\"!\", \"\")\n    brackets = brackets.replace(\"\
    +\", \"\")\n    brackets = brackets.replace(\"$\", \"\")\n    brackets = brackets.replace(\"\
    %\", \"\")\n    brackets = brackets.replace(\"*\", \"\")\n    brackets = brackets.replace(\"\
    -\", \"\")\n    brackets = brackets.replace(\"_\", \"\")\n    brackets = brackets.replace(\"\
    @\", \"\")\n    brackets = brackets.replace(\"?\", \"\")\n    brackets = brackets.replace(\"\
    /\", \"\")\n    brackets = brackets.replace(\"\\\\\", \"\")\n    brackets = brackets.replace(\"\
    (\", \"\")\n    brackets = brackets.replace(\")\", \"\")\n    brackets = brackets.replace(\"\
    :\", \"\")\n    brackets = brackets.replace(\";\", \"\")\n    brackets = brackets.replace(\"\
    '\", \"\")\n    brackets = brackets.replace(\"?\", \"\")\n    brackets = brackets.replace(\"\
    !\", \"\")\n    brackets = brackets.replace(\"#\", \"\")\n    brackets = brackets.replace(\"\
    =\", \"\")\n    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    ;\", \"\")\n    brackets = brackets.replace(\"/\", \"\")\n    brackets = brackets.replace(\"\
    $\", \"\")\n    brackets = brackets.replace(\"%\", \"\")\n    brackets = brackets.replace(\"\
    *\", \"\")\n    brackets = brackets.replace(\"+\", \"\")\n    brackets = brackets.replace(\"\
    )\", \"\")\n    brackets = brackets.replace(\"{\", \"\")\n    brackets = brackets.replace(\"\
    }\", \"\")\n    brackets = brackets.replace(\"[\", \"\")\n    brackets = brackets.replace(\"\
    ]\", \"\")\n    brackets = brackets.replace(\":\", \"\")\n    brackets = brackets.replace(\"\
    ;\", \"\")\n    brackets = brackets.replace(\":\", \"\") \n    brackets = brackets.replace(\"\
    '\", \"\")\n    brackets = brackets.replace(\"?\", \"\")\n    brackets = brackets.replace(\"\
    !\", \"\")\n    brackets = brackets.replace(\"#\", \"\")\n    brackets = brackets.replace(\"\
    =\", \"\")\n    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    ;\", \"\")\n    brackets = brackets.replace(\"/\", \"\")\n    brackets = brackets.replace(\"\
    $\", \"\")\n    brackets = brackets.replace(\"%\", \"\")\n    brackets = brackets.replace(\"\
    *\", \"\")\n    brackets = brackets.replace(\"+\", \"\")\n    brackets = brackets.replace(\"\
    )\", \"\")\n    brackets = brackets.replace(\"{\", \"\")\n    brackets = \nusing\
    \ Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    <>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid interpolation syntax: \"$\"\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfjwv2_uv.jl:23\nin expression starting at\
    \ /tmp/tmpfjwv2_uv.jl:23\n"
  stdout: ''
  timestamp: 1660008978
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\
    \" \n        then return true\n    else if brackets == \"<>\"\n        then return\
    \ false\n    elseif brackets == \"<>\"\n        then return false\n    elseif\
    \ brackets == \"<>\"\n        then return false\n    elseif brackets == \"<>\"\
    \n        then return false\n    elseif brackets == \"<>\"\n        then return\
    \ false\n    elseif brackets == \"<>\"\n        then return false\n    elseif\
    \ brackets == \"<>\"\n        then return false\n    elseif brackets == \"<>\"\
    \n        then return false\n    elseif brackets == \"<>\"\n        then return\
    \ false\n    elseif brackets == \"<>\"\n        then return false\n    elseif\
    \ brackets == \"<>\"\n        then return false\n    elseif brackets == \"<>\"\
    \n        then return false\n    elseif brackets == \"<>\"\n        then return\
    \ false\n    elseif brackets == \"<>\"\n        then return false\n    elseif\
    \ brackets == \"<>\"\n        then return false\n    elseif brackets == \"<>\"\
    \n        then return false\n    elseif brackets == \"<>\"\n        then return\
    \ false\n    elseif brackets == \"<>\"\n        then return false\n    elseif\
    \ brackets == \"<>\"\n        then return false\n    elseif brackets == \"<>\"\
    \n        then return false\n    elseif brackets == \"<>\"\n        then return\
    \ false\n    elseif brackets == \"<>\"\n        then return false\n    elseif\
    \ brackets == \"<>\"\n        then return false\n    elseif brackets == \"<>\"\
    \n        then return false\n    elseif brackets == \"<>\"\n        then return\
    \ false\n    elseif brackets == \"<>\"\n        then return false\n    elseif\
    \ brackets == \"<>\"\n        then return false\n    elseif brackets == \"<>\"\
    \n        then return false\n    elseif brackets == \"<>\"\n        then return\
    \ false\n    elseif brackets == \"<>\"\n        then return false\n    elseif\
    \ brackets == \"<>\"\n        then return false\n    elseif brackets == \"<>\"\
    \n        then return false\n    elseif brackets == \"<>\"\n        then return\
    \ false\n    elseif brackets == \"<>\"\n        then return false\n    elseif\
    \ brackets == \"<>\"\n        then return false\n    elseif brackets == \"<>\"\
    \n        then return false\n    elseif brackets == \"<>\"\n        then return\
    \ false\n    elseif brackets == \"<>\"\n        then return false\n    elseif\
    \ brackets == \"<>\"\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t\
    @test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\"\
    ) == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") ==\
    \ false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\
    \t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmps7nwi4or.jl:15\nin expression starting at /tmp/tmps7nwi4or.jl:15\n"
  stdout: ''
  timestamp: 1660008978
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets_set = Set(brackets)\n\
    \    open_brackets = Set(\"<\")\n    close_brackets = Set(\">\")\n    function\
    \ correct_bracketing(s::String)::Bool \n        for opening_bracket in open_brackets\
    \ \n            if opening_bracket in s \n                and not opening_bracket\
    \ in brackets_set\n                then return false\n        for closing_bracket\
    \ in close_brackets\n            if closing_bracket in s\n                and\
    \ not closing_bracket in brackets_set\n                then return false\n   \
    \     for opening_bracket in open_brackets\n            if closing_bracket in\
    \ s\n                and not opening_bracket in brackets_set\n               \
    \ then return false\n        for closing_bracket in close_brackets\n         \
    \   if opening_bracket in s\n                and not closing_bracket in brackets_set\n\
    \                then return false\n        return true\n    end\nend\n</cell>\n\
    <code language=julia-0.6>\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t\
    @test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\"\
    ) == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") ==\
    \ false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\
    \t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"not\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpzwgeuqth.jl:20\nin expression starting at /tmp/tmpzwgeuqth.jl:20\n"
  stdout: ''
  timestamp: 1660008978
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets.size\
    \ < 2 then return false \n    for bracket in brackets \n        bracket_char =\
    \ bracket[1]\n        if bracket_char == \"<\" then return false \n        next\
    \ \n        for _ in brackets \n            if _ != \"<\" and _ != \">\" then\
    \ return false \n            next \n    return true \nend\n</cell>\n<text>\nExercise\
    \ 3\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    <>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp8uuebzqf.jl:14\nin expression starting at /tmp/tmp8uuebzqf.jl:14\n"
  stdout: ''
  timestamp: 1660008978
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    \n\"\"\"\n    Takes\
    \ a sequence of brackets.\n    \n    >>> correct_bracketing(brackets(\"<>\"))\n\
    \    false\n    >>> correct_bracketing(brackets(\"<>\"), brackets(\"<\"))\n  \
    \  false\n    >>> correct_bracketing(brackets(\"<>\"), brackets(\"<\"), brackets(\"\
    <<\"))\n    false\n    >>> correct_bracketing(brackets(\"<>\"), brackets(\"<\"\
    ), brackets(\"<<\"), brackets(\"<\"))\n    false\n    >>> correct_bracketing(brackets(\"\
    <>\"), brackets(\"<\"), brackets(\"<<\"), brackets(\"<\"), brackets(\"<\"))\n\
    \    false\n    >>> correct_bracketing(brackets(\"<\"))\n    true\n    >>> correct_bracketing(brackets(\"\
    <\"), brackets(\"<>\"))\n    true\n    >>> correct_bracketing(brackets(\"<\"),\
    \ brackets(\"<\"), brackets(\"<<\"))\n    true\n    >>> correct_bracketing(brackets(\"\
    <\"), brackets(\"<\"), brackets(\"<<\"), brackets(\"<\"), brackets(\"<\"))\n \
    \   true\n    >>> correct_bracketing(brackets(\"<\"), brackets(\"<\"), brackets(\"\
    <<\"), brackets(\"<\"), brackets(\"<\"), brackets(\"<\"))\n    true\n    >>> correct_bracketing(brackets(\"\
    <<\"))\n    true\n    >>> correct_bracketing(brackets(\"<<\"), brackets(\"<>\"\
    ))\n    true\n    >>> correct_bracketing(brackets(\"<<\"), brackets(\"<\"), brackets(\"\
    <<\"))\n    true\n    >>> correct_bracketing(brackets(\"<<\"), brackets(\"<\"\
    ), brackets(\"<<\"), brackets(\"<\"), brackets(\"<\"))\n    true\n    >>> correct_bracketing(brackets(\"\
    <<\"), brackets(\"<\"), brackets(\"<<\"), brackets(\"<\"), brackets(\"<\"), brackets(\"\
    <\"))\n    true\n    >>> correct_bracketing(brackets(\"<<\"), brackets(\"<<\"\
    ), brackets(\"<<\"), brackets(\"<<\"), brackets(\"<<\"), brackets(\"<<\"), brackets(\"\
    <<\"))\n    true\n    >>> correct_bracketing(brackets(\"<<\"), brackets(\"<<\"\
    ), brackets(\"<<\"), brackets(\"<<\"), brackets(\"<<\"), b\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\
    \t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") ==\
    \ true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5g23a22y.jl:1\nin expression starting at /tmp/tmp5g23a22y.jl:1\n"
  stdout: ''
  timestamp: 1660008979
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    \n    let char_count\
    \ = length(text)\n    \n    for i in 0 .. char_count - 1, \n        j := i + 1,\
    \ \n        while j <= char_count && char(text[i]) == char(text[j]), \n      \
    \      j += 1\n        do \n            if char(text[i]) == brackets[j], \n  \
    \              result := true, \n                break\n            elseif j ==\
    \ char_count, \n                result := false\n            elseif char(text[j])\
    \ == brackets[i], \n                result := false\n        end\n    done\n \
    \   return result\n\"\"\"\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t\
    @test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\"\
    ) == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") ==\
    \ false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\
    \t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid iteration specification\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp35e23xu2.jl:18\nin expression starting at\
    \ /tmp/tmp35e23xu2.jl:18\n"
  stdout: ''
  timestamp: 1660008978
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n  \n  let open :: Set\
    \ String = Set.fromList([c | c <- brackets |> List.filter (not <| c <> \"(\" ||\
    \ (c <> \")\") ) |> List.filter (not <| c <> \"[\" || (c <> \"]\") ) |> List.filter\
    \ (not <| c <> \"{\" || (c <> \"}\") ) |> List.map (fun (c::Char) -> (if c <>\
    \ \"(\" then \"(\" else if c <> \")\" then \")\" else if c <> \"[\" then \"[\"\
    \ else if c <> \"]\" then \"]\" else if c <> \"{\" then \"{\" else if c <> \"\
    }\" then \"}\") else c) ])\n  \n  let close :: Set String = Set.fromList([c |\
    \ c <- brackets |> List.filter (not <| c <> \"(\" || (c <> \")\") ) |> List.filter\
    \ (not <| c <> \"[\" || (c <> \"]\") ) |> List.filter (not <| c <> \"{\" || (c\
    \ <> \"}\") ) |> List.map (fun (c::Char) -> (if c <> \"(\" then \"(\" else if\
    \ c <> \")\" then \")\" else if c <> \"[\" then \"[\" else if c <> \"]\" then\
    \ \"]\" else if c <> \"{\" then \"{\" else if c <> \"}\" then \"}\") else c) ])\n\
    \  \n  let open_brackets :: Set String = open\n  let close_brackets :: Set String\
    \ = close\n  let open :: Set String = open & close\n  \n  let open_brackets_not_closed\
    \ :: Set String = open_brackets |> Set.filter (not <| open_brackets)\n  let close_brackets_not_open\
    \ :: Set String = close_brackets |> Set.filter (not <| close_brackets)\n  \n \
    \ let open_brackets_not_open_or_closed :: Set String = open_brackets_not_closed\
    \ |> Set.filter (not <| close_brackets_not_open)\n  let close_brackets_not_open_or_open\
    \ :: Set String = close_brackets_not_open |> Set.filter (not <| open_brackets_not_closed)\n\
    \  \n  let open_brackets_not_open_or_closed_or_non_brackets :: Set \nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\"\
    ) == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: let variables should end in \";\" or newline\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmpg0r_gq6b.jl:15\nin expression\
    \ starting at /tmp/tmpg0r_gq6b.jl:15\n"
  stdout: ''
  timestamp: 1660008979
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\
    \" then return true \n    else if brackets.find(\"<\") <> -1 then return false\
    \ \n    else if brackets.find(\">\") <> -1 then return false \n    else if brackets.find(\"\
    <<\") <> -1 or brackets.find(\">>\") <> -1 then return false \n    else if brackets.find(\"\
    <<<\") <> -1 then return false\n    else if brackets.find(\">>\") <> -1 then return\
    \ false \n    else if brackets.find(\"<<<\") <> -1 then return false\n    else\
    \ if brackets.find(\">>>>>\") <> -1 then return false \n    else if brackets.find(\"\
    <<<<\") <> -1 then return false \n    else if brackets.find(\"<<<\") <> -1 then\
    \ return false\n    else return true\nend\n</cell>\n<text>\nTest Your Solution\n\
    using Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    <>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpe5ppzupm.jl:14\nin expression starting at /tmp/tmpe5ppzupm.jl:14\n"
  stdout: ''
  timestamp: 1660008979
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    \"\"\"\n    Returns\
    \ True if brackets is a string of \"<\" and \">\". \n    return true if every\
    \ opening bracket has a corresponding closing bracket.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\
    \t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") ==\
    \ true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdt6upipx.jl:1\nin expression starting at /tmp/tmpdt6upipx.jl:1\n"
  stdout: ''
  timestamp: 1660008980
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    \"\"\"Correctly\
    \ bracketing brackets in a string if they are properly balanced.\n    Brackets\
    \ are open/closed pairs (\"<\" and \">\") which can be nested, and we require\n\
    \    a correct pairing of open/close brackets to ensure proper nesting.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    <>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9biwbsp6.jl:1\nin expression starting at /tmp/tmp9biwbsp6.jl:1\n"
  stdout: ''
  timestamp: 1660008980
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n\"\"\"\n    brackets\
    \ is a string of \"<\" and \">\".\n    return true if every opening bracket has\
    \ a corresponding closing bracket.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpuoits3hl.jl:1\nin expression starting at /tmp/tmpuoits3hl.jl:1\n"
  stdout: ''
  timestamp: 1660008980
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    \n    \"\"\"\n \
    \   Checks to see if the brackets string is valid.\n    \n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\n    if brackets == \"\"\n        return true\n    \n    stack = Stack()\n\
    \    for char in brackets\n        if char == \"<\"\n            stack.push(char)\n\
    \        elseif char == \"<\"\n            if stack.size > 0\n               \
    \ stack.pop()\n        elseif char == \">\"\n            if stack.size > 0\n \
    \               stack.peek()\n                stack.pop()\n        else\n    \
    \        return false\n    \n    return stack.size == 0\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\
    \t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") ==\
    \ true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"if\" at /tmp/tmp41jpirjf.jl:38\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp41jpirjf.jl:1\n\
    in expression starting at /tmp/tmp41jpirjf.jl:1\n"
  stdout: ''
  timestamp: 1660008980
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    bracket_dict = Dict(zip(\"\
    ()\", \">><\")) \n    bracket_open = brackets |> String.split\n    bracket_close\
    \ = bracket_open |> List.filter(flip(elems_in(\">><\")))\n    all_brackets_closed\
    \ = false \n    all_brackets_opened = true\n    for open_char in bracket_open\n\
    \        for close_char in bracket_close\n            if open_char == close_char\n\
    \                all_brackets_closed = false\n                all_brackets_opened\
    \ = false\n                break\n            all_brackets_closed = false\n  \
    \          all_brackets_opened = false \n    return all_brackets_closed == all_brackets_opened\n\
    end\n</code>\n<|/ a |>\n<| a |>\nIf you have a string like \"<<><><>\", you can\
    \ get the number of occurences of \"<<\" with\n<code>\nlength( split(string, \"\
    <<\") )\n</code>\nwhich will give you the number of occurences found at \"<<\"\
    .  But how do you do that for all occurences of \"<<<\"?  What if the string is\
    \ \"<<<><><<<><><<>\", or even \"<<<><><<<><>><<><<><<><<>><<>\"?\nWell, it's\
    \ easy enough to count the number of occurrences of \"<\" by counting the number\
    \ of \"<<\":\n<code>\nlength( split(string, \"<<\") )\n</code>\nBut what if the\
    \ string has \"<<<><><<<><><<><<><<><<>><<>\"?  That is, you want the number of\
    \ \"<<<\" in the string?  That is easy:\n<code>\nlength( split(string, \"<<<\"\
    ) )\n</code>\nbut what if you want the number of \"<<>\" in the string?  That\
    \ isn't too hard:\n<code>\nlength( split(string, \"<<<\") ) + length( split(string,\
    \ \"<<>\") )\n</code>\nBut what if you want the number of \"<<\" AND \"<<<\" in\
    \ the string?  That's even easier:\n<code>\nlength( split(string, \"<<\") ) +\
    \ length( split(string, \"<<<\") )\n</code>\nAnd now, how do we combine this with\
    \ our previous count of \"<<\" occurrences to get the number of \"<<<\" occurrences?\
    \  It turns out that we can combine them using the built-in function +:\n<code>\n\
    length( split(string, \"<<\") ) + length( split(string, \"<<<\") )\n</code>\n\
    <|/ a tags=string,julia dscore=1 |>\n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphxcfn4uw.jl:29\nin expression starting at\
    \ /tmp/tmphxcfn4uw.jl:29\n"
  stdout: ''
  timestamp: 1660008980
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    \"\"\"\n    # brackets\
    \ is a string of \"<\" and \">\".\n    return true if every opening bracket has\
    \ a corresponding closing bracket.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjpqvi338.jl:1\nin expression starting at /tmp/tmpjpqvi338.jl:1\n"
  stdout: ''
  timestamp: 1660008980
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    \"\"\"\n    correct_bracketing\
    \ returns the boolean value true if the brackets are correct \n    according to\
    \ the problem description.\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t\
    @test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\"\
    ) == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") ==\
    \ false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\
    \t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpk1z79c7x.jl:1\nin expression starting at /tmp/tmpk1z79c7x.jl:1\n"
  stdout: ''
  timestamp: 1660008980
- exit_code: -1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    \n    # write your\
    \ code here\n    \n    \nend # function correct_bracketing(brackets::String)\n\
    using Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    <>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: Timeout
  stderr: ''
  stdout: "test set: Error During Test at /tmp/tmpf7i7q3rp.jl:24\n  Test threw exception\n\
    \  Expression: candidate(\"<>\") == true\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type Bool\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::Ptr) where T<:Integer at ~/.conda/envs/polyglot/share/julia/base/pointer.jl:23\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:7\n\
    \    ...\n  Stacktrace:\n   [1] correct_bracketing(brackets::String)\n     @ Main\
    \ /tmp/tmpf7i7q3rp.jl:18\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpf7i7q3rp.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpf7i7q3rp.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpf7i7q3rp.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(\"<<><>>\") == true\n  MethodError: Cannot `convert` an object of\
    \ type Nothing to an object of type Bool\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::Ptr) where T<:Integer at ~/.conda/envs/polyglot/share/julia/base/pointer.jl:23\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:7\n\
    \    ...\n  Stacktrace:\n   [1] correct_bracketing(brackets::String)\n     @ Main\
    \ /tmp/tmpf7i7q3rp.jl:18\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpf7i7q3rp.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpf7i7q3rp.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpf7i7q3rp.jl:26\n  Test thr"
  timestamp: 1660008983
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    if is_empty(brackets)\n\
    \        return true\n    if brackets == \"<\"\n        return false\n    if brackets\
    \ == \">\"\n        return false\n    if brackets == \"<>\"\n        return true\n\
    \    return false\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t\
    @test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\"\
    ) == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") ==\
    \ false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\
    \t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpadp4hbns.jl:1\nin expression starting at /tmp/tmpadp4hbns.jl:1\n"
  stdout: ''
  timestamp: 1660008980
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets == \"<\"\
    \ || brackets == \"<<\" || brackets == \"<>>\" || brackets == \"<->\" || brackets\
    \ == \"<:>\" || brackets == \"<::>\" || brackets == \"<<<\"\nend\n</cell>\n<code\
    \ language=julia-1.6>\n#export\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t\
    @test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\"\
    ) == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") ==\
    \ false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\
    \t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdtwm9ugg.jl:16\nin expression starting at\
    \ /tmp/tmpdtwm9ugg.jl:16\n"
  stdout: ''
  timestamp: 1660008980
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    return brackets\
    \ in {\">\", \">>\"} \n</code>\nThe function returns true if the brackets are\
    \ correctly matched, and false otherwise.\nTo test the function, you can use the\
    \ following code:\n<code>\nprintln(correct_bracketing(\"<\"))\nprintln(correct_bracketing(\"\
    <>\"))\nprintln(correct_bracketing(\"<<><>>\"))\nprintln(correct_bracketing(\"\
    ><<>\"))\n</code>\n<|/ a tags=kotlin,recursion |>\n<| c |>\nThank you so much,\
    \ that worked perfectly. I am still relatively new to coding and trying to get\
    \ better at it, so the help is immensely appreciated. Cheers, and thanks again!\n\
    <|/ c |>\n<| c |>\nGreat. Thank you for the feedback. It would be great if you\
    \ could accept the answer by clicking on the check mark next to it.\n<|/ c |>\n\
    <| c |>\nSure, I just had a quick question for you, if you don't mind. What does\
    \ the \"::Bool\" mean in this context? I looked online and I couldn't find anything\
    \ on it.\n<|/ c |>\n<| c |>\nIt\u2019s short for \u201CBoolean type\u201D. The\
    \ ::Bool means it expects a Boolean type. More info can be found [here](https://kotlinlang.org/docs/reference/basic-types.html#type-parameters).\n\
    <|/ c |>\n<| c |>\nThanks! I'm sure it will come in handy at some point :)\n<|/\
    \ c |>\n<| a dscore=2 |>\nIn order to solve this problem you need to use a stack\
    \ (a data structure for storing information and storing/retrieving information\
    \ based on \"stacking\" the information on it).\nA stack holds information by\
    \ \"un-stacking\" it from the last stored information. This is done when the \"\
    un-stacking\" operation is popped from the stack. An example of a stack is shown\
    \ in the image below.\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t\
    @test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\"\
    ) == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") ==\
    \ false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\
    \t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9als0x5i.jl:15\nin expression starting at\
    \ /tmp/tmp9als0x5i.jl:15\n"
  stdout: ''
  timestamp: 1660008980
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    local result = true\n\
    \    for char in brackets:\n        if not(char == \"<\" or char == \"<=\" or\
    \ char == \">\" or char == \">=\"):\n            result = false\n    return result\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    <>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdfv4he66.jl:16\nin expression starting at\
    \ /tmp/tmpdfv4he66.jl:16\n"
  stdout: ''
  timestamp: 1660008980
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets[2:end]\n\
    \    for i in brackets\n        match brackets[i..i+1]\n            case \"<\"\
    \n                return false\n            case \"<:\"\n                return\
    \ false\n            case \">\"\n                return true\n            case\
    \ \">:\"\n                return true\n            case \"<>\"\n             \
    \   return false\n            end\n        end\n    end\nend\n</cell>\n<text>\n\
    Exercise 14. Write a function is_opening_and_closing_pair(a::String) which returns\
    \ True if a is of the form \"<open>\" or \"</open>\" or \"<closed>\" or \"</closed>\"\
    . Your function should not care about the contents of the tags and should ignore\
    \ whitespace and comments.\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t\
    @test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\"\
    ) == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") ==\
    \ false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\
    \t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmp9jsu7cal.jl:15 expected \"\
    end\", got \"brackets\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp9jsu7cal.jl:16\n\
    in expression starting at /tmp/tmp9jsu7cal.jl:16\n"
  stdout: ''
  timestamp: 1660008980
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n\"\"\"\ncorrect_bracketing(string::String)::Bool\n\
    \"\"\"\n    if brackets == \"\" then return false end\n    brackets = brackets[2:end]\n\
    \    brackets = replace(\" \", \"\", brackets)\n    for i in brackets\n      \
    \  if i == '<' then return false\n        if i == \">\" then return true\n   \
    \ end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t\
    @test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\"\
    ) == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") ==\
    \ false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\
    \t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpnsq9e4al.jl:17\nin expression starting at /tmp/tmpnsq9e4al.jl:17\n"
  stdout: ''
  timestamp: 1660008980
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    bracket_opens =\
    \ brackets.count(\"<\") + brackets.count(\">\")\n    bracket_closes = brackets.count(\"\
    <\") - brackets.count(\">\")\n    \n    return bracket_opens == bracket_closes\
    \ \nend\n</cell>\n<text>\nExercise 2: Using a for loop, write a for loop that\
    \ outputs every possible permutation of [1,2,3,4]\nFor example, the output could\
    \ be:\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    <>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpa9fuszn5.jl:19\nin expression starting at\
    \ /tmp/tmpa9fuszn5.jl:19\n"
  stdout: ''
  timestamp: 1660008980
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.split(\"\
    <>\")\n    for b in brackets\n        if b != \">\" && b != \"<\"\n          \
    \  return false\n    return true\n</code>\n<|/ a |>\n<| c |>\nYou don't need the\
    \ `if` statement in `correct_bracketing`, just `return false if ...`\n<|/ c |>\n\
    <| c |>\nThat works, thanks. I had to add a `::Bool` after the closing parenthesis\
    \ for my `correct_bracketing` to work.\n<|/ c |>\n<| a tags=ocaml,functional-programming\
    \ |>\n<code>\nlet rec is_bracketing_correct (str: string) = False\n  | is_bracketing_correct\
    \ (str: string) =\n    let open str in let close str in (close <> open) =\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nThanks for the suggestion, but this returns `Error:\
    \ Syntax error; found \"<\" when expecting \"in\".`\n<|/ c |>\n<| c |>\nTry it\
    \ now. I didn't test it for correctness, but it compiles and executes correctly\
    \ in OCaml 4.02.\n<|/ c |>\n<| c |>\nSadly, this doesn't work either, same syntax\
    \ error. :(\n<|/ c |>\n<| a tags=ocaml,functional-programming |>\nOne way is to\
    \ convert your string to a list of characters. Then you can check if the first\
    \ character is a left bracket, followed by a left bracket and another left bracket.\n\
    <code>\nlet rec is_bracketing_correct (str: string): bool = \n  match str with\n\
    \  | '[' :: str -> is_bracketing_correct str\n  | ' ' :: str -> false\n  | '['\
    \ :: str -> true\n  | _ -> false\nusing Test\n\n@testset begin\n\ncandidate =\
    \ correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1kiyyleg.jl:19\nin expression starting at\
    \ /tmp/tmp1kiyyleg.jl:19\n"
  stdout: ''
  timestamp: 1660008980
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    \"\"\"\n    correct_bracketing(brackets::String)::Bool\n\
    \    \n    Checks the bracketing of a string of brackets.\n    \"\"\"\n    if\
    \ brackets == \"\" || brackets == \">>\" || brackets == \">><<>\" || brackets\
    \ == \"<<><>\" \n       || brackets == \">>><\"\n       || brackets == \"<<><\"\
    \n       || brackets == \"<><>\") {\n        return true\n    } else {\n     \
    \   return false\n    }\nend\n</cell>\n<text>\nTask 2: Write a function that checks\
    \ if a number is a positive integer.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid identifier name \"||\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsrgharoj.jl:20\nin expression starting at\
    \ /tmp/tmpsrgharoj.jl:20\n"
  stdout: ''
  timestamp: 1660008980
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\
    \"\n        return false\n    if brackets[1] == \"<\" == brackets[2] == \">\"\n\
    \        return true\n    return false\n\"\"\"\n    \"\"\"\n    # 4. The \"<<\"\
    \ character is paired with either \"<\" or \"<<\" but never with \">>\"\n    #\
    \    \"<<\" pairs with \"<\" and \">\" never with \">>\".\n    # 5. The \">>\"\
    \ character is paired with either \">>\" or \"<\" but never with \"<\"\n    #\
    \    \"<<\" pairs with \"<\" and \">\" never with \">>\".\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\
    \t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") ==\
    \ true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9pg3u37v.jl:1\nin expression starting at /tmp/tmp9pg3u37v.jl:1\n"
  stdout: ''
  timestamp: 1660008980
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    # your code here\n\
    \    pass\n</cell>\n<text>\nPart 4: Matching brackets against a string\nNow implement\
    \ the match_brackets function, which (given a string and a stack of opening and\
    \ closing brackets) will return the string with brackets added to the open brackets\
    \ if the stack is empty.\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t\
    @test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\"\
    ) == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") ==\
    \ false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\
    \t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpq4e8_a_b.jl:16\nin expression starting at\
    \ /tmp/tmpq4e8_a_b.jl:16\n"
  stdout: ''
  timestamp: 1660008981
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    \"\"\" returns true\
    \ if the brackets in brackets correspond to \n        correct opening or closing\
    \ brackets\n        \n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t\
    @test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\"\
    ) == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") ==\
    \ false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\
    \t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp2tgbkprq.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp2tgbkprq.jl:1\n\
    in expression starting at /tmp/tmp2tgbkprq.jl:1\n"
  stdout: ''
  timestamp: 1660008981
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    \"\"\"\n    \n \
    \   INPUT brackets is a string of \"<\" and \">\".\n    return true if every opening\
    \ bracket has a corresponding closing bracket.\nusing Test\n\n@testset begin\n\
    \ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpr7o7k623.jl:1\nin expression starting at /tmp/tmpr7o7k623.jl:1\n"
  stdout: ''
  timestamp: 1660008981
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\
    \"\n        return true\n    open <- brackets = \"<\"\n    close <- brackets =\
    \ \">\"\n    if open == \"\"\n        return false\n    if close == \"\"\n   \
    \     return true\n    return true\n</code>\nIn Scala:\n<code>\ndef correctBracketing(brackets:\
    \ String): Boolean = {\n  if (brackets == \"\")\n    return true\n  open <- brackets\
    \ = \"<\"\n  close <- brackets = \">\"\n  if (open == \"\")\n    return false\n\
    \  if (close == \"\")\n    return true\n  true\n}\n</code>\n<|/ a dscore=5 |>\n\
    <| a dscore=3 |>\n<code>\ndef balancedBrackets(s: String): Boolean = \n  s.replaceAll(\"\
    \"\"[(]\"\"\", \"\")\n    .replaceAll(\"\"\"[]]\"\"\", \"\")\n    .replaceAll(\"\
    \"\"[^]]\"\"\", \"\").length == 0\n</code>\n<|/ a tags=scala,regex |>\n<| c |>\n\
    Not sure why this is getting voted down. I think it is correct, short and straightforward.\
    \ Especially with the use of `replaceAll` which takes a regex and replaces it\
    \ with a string.\n<|/ c |>\n<| c |>\nIt seems the question is how to replace brackets,\
    \ not how to check if a string is balanced.\n<|/ c |>\n<| a |>\nThe following\
    \ method will work with both single and double brackets:\n<code>\ndef isBalanced(s:\
    \ String): Boolean = s.replaceAll(\"[]\", \"\").size == s.length\n</code>\n<|/\
    \ a dscore=3 tags=scala,regex |>\n<| c |>\nThis doesn't work for strings like\
    \ \"[][][][][][][]\" which is an example of the input for the OP.\n<|/ c |>\n\
    <| a dscore=3 |>\n<code>\nscala> \"()[]\".r.findAllIn(\"[]\").length\nres8: Int\
    \ = 2\n</code>\n<|/ a tags=scala,regex |>\n<| a dscore=3 |>\n<code>\ndef isBalanced(s:\
    \ String): Boolean = s.replaceAll(\"[\\\\(\\\\)]\", \"\")\n    .split(\"\\\\(\"\
    )\n    .map(_.length)\n    .sum == s.length\n</code>\n<|/ a tags=scala,regex |>\n\
    <| c |>\nPlease add some explanations to your answer\n<|/ c |>\n<| a dscore=3\
    \ |>\nThis is an alternative solution which works with strings of any length.\n\
    <code>\ndef isBalanced(s: String): Boolean = {\n  val sBracket = s.replaceAll(\"\
    [\\\\(\\\\)]\", \"\")\n  val brackets = s\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp722sprwk.jl:23\nin expression starting at\
    \ /tmp/tmp722sprwk.jl:23\n"
  stdout: ''
  timestamp: 1660008981
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n\"\"\"\n    Defining\
    \ this function is optional, but recommended. It tests whether a\n    string contains\
    \ any valid opening/closing brackets, and is faster than the\n    equivalent regexp\
    \ based solution. Note that this function returns true if\n    the string is entirely\
    \ contained within valid brackets.\n    \n    brackets is a string of \"<\" and\
    \ \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t\
    @test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"\
    <><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") ==\
    \ true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\"\
    ) == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") ==\
    \ false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\
    \t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp315pbgsk.jl:1\nin expression starting at /tmp/tmp315pbgsk.jl:1\n"
  stdout: ''
  timestamp: 1660008982
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets.split(\"\
    \").filter(elem -> elem == '<').length == brackets.split(\"\").filter(elem ->\
    \ elem == '>').length\nend\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t\
    @test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\"\
    ) == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") ==\
    \ false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\
    \t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 12 errored,
    0 broken.

    in expression starting at /tmp/tmpo68e6jsp.jl:18

    '
  stdout: "test set: Error During Test at /tmp/tmpo68e6jsp.jl:21\n  Test threw exception\n\
    \  Expression: candidate(\"<>\") == true\n  type String has no field split\n \
    \ Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] correct_bracketing(brackets::String)\n\
    \     @ Main /tmp/tmpo68e6jsp.jl:14\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpo68e6jsp.jl:21 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpo68e6jsp.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpo68e6jsp.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(\"<<><>>\") == true\n  type String has no field split\n  Stacktrace:\n\
    \   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] correct_bracketing(brackets::String)\n\
    \     @ Main /tmp/tmpo68e6jsp.jl:14\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpo68e6jsp.jl:22 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpo68e6jsp.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpo68e6jsp.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(\"<><><<><>><>\") == true\n  type String has no field split\n  Stacktrace:\n\
    \   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] correct_bracketing(brackets::String)\n\
    \     @ Main /tmp/tmpo68e6jsp.jl:14\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpo68e6jsp.jl:23 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpo68e6jsp.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpo68e6jsp.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\") == true\n  type String has no field"
  timestamp: 1660008984
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    \"\"\"\n    Determine\
    \ if brackets has all the correct opening brackets.\n    \"\"\"\nusing Test\n\n\
    @testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") ==\
    \ true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpkenlui7r.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpkenlui7r.jl:1\n\
    in expression starting at /tmp/tmpkenlui7r.jl:1\n"
  stdout: ''
  timestamp: 1660008982
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    bracket_count::Int\
    \ = 0\n    for i in brackets\n        if i == \"<\"\n            bracket_count\
    \ += 1 \n        elif i == \">\"\n            bracket_count -= 1 \n          \
    \  if bracket_count < 0\n                return false\n    return bracket_count\
    \ == 0\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    <>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"i\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpq6uuwud1.jl:18\nin expression starting at /tmp/tmpq6uuwud1.jl:18\n"
  stdout: ''
  timestamp: 1660008982
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    \"\"\"\n    brackets\
    \ is a string of \"<\" and \">\".\n    return true if every opening bracket has\
    \ a corresponding closing bracket.\n    \"\"\"\n    brackets = brackets[2:]\n\
    \    open_positions = [i for i,c in enumerate(brackets) if c == \"<\"]\n    close_positions\
    \ = [i for i,c in enumerate(brackets) if c == \"<\"]\n    if open_positions ==\
    \ close_positions:\n        open_positions.remove(open_positions[0])\n       \
    \ return open_positions[-1] < close_positions[0]\n    else:\n        return False\n\
    </code>\n<|/ a |>\n<| c |>\nThis is so cool!  I was able to take this and modify\
    \ it for my needs.  Thank you!\n<|/ c |>\n<| a dscore=1 |>\nIf you were to keep\
    \ track of how many open and closed brackets you had seen so far, you could compare\
    \ that to the length of the brackets string.  If you see a closing bracket when\
    \ the count is still greater than zero, you know that you have an open bracket\
    \ that isn't closed:\n<code>\ndef check_brackets(brackets):\n    open_brackets\
    \ = 0\n    close_brackets = 0\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t\
    @test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\"\
    ) == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") ==\
    \ false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\
    \t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"2:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp_yeyb0qu.jl:18\nin expression\
    \ starting at /tmp/tmp_yeyb0qu.jl:18\n"
  stdout: ''
  timestamp: 1660008982
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\
    \" then return true else return false end\n    let opening_brackets = brackets[1:length(open_brackets)]\n\
    \    for opening_bracket in opening_brackets do \n        match = search( open_bracket,\
    \ brackets, 1)\n        if match == nothing then return false end\n        for\
    \ i = match.start to match.end do \n            if brackets[i] != opening_bracket\
    \ then return false end\n        end\n    end\n    return true\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\"\
    ) == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpg9mg4kzp.jl:14\nin expression starting at /tmp/tmpg9mg4kzp.jl:14\n"
  stdout: ''
  timestamp: 1660008982
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    \"\"\"\n    >>>\
    \ correct_bracketing(\"</\")\n    false\n    >>> correct_bracketing(\"<<><>\"\
    )\n    true\n    >>> correct_bracketing(\"<<><<>\")\n    false\n    \"\"\"\n \
    \   return brackets.reversed.foldl(=)(false)\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"=\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp_i_h3hmf.jl:22\nin expression starting at /tmp/tmp_i_h3hmf.jl:22\n"
  stdout: ''
  timestamp: 1660008982
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n{\n    return brackets\
    \ == \"<>\"\n}\n</cell>\n<text>\nTests\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvb_babh7.jl:17\nin expression starting at\
    \ /tmp/tmpvb_babh7.jl:17\n"
  stdout: ''
  timestamp: 1660008982
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    \"\"\"\n    correct_bracketing\
    \ is an implementation of correct_bracketing\n    that returns true if every opening\
    \ bracket has a corresponding closing\n    bracket.\nusing Test\n\n@testset begin\n\
    \ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp47p63til.jl:1\nin expression starting at /tmp/tmp47p63til.jl:1\n"
  stdout: ''
  timestamp: 1660008982
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = strip(brackets)\n\
    \    brackets = brackets.replace(\" \", \"\")\n    brackets = brackets.replace(\"\
    <\", \"\")\n    brackets = brackets.replace(\">\", \"\")\n    brackets = brackets.replace(\"\
    <<\", \"\")\n    brackets = brackets.replace(\">>\", \"\")\n    brackets = brackets.replace(\"\
    >>\", \"\")\n    brackets = brackets.replace(\"<<\", \"\")\n    brackets = brackets.replace(\"\
    <<\", \"\")\n    brackets = brackets.replace(\"<\", \"\")\n    brackets = brackets.replace(\"\
    <\", \"\")\n    return brackets == \"<>\"\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 12 errored,
    0 broken.

    in expression starting at /tmp/tmpi8ei6uio.jl:29

    '
  stdout: "test set: Error During Test at /tmp/tmpi8ei6uio.jl:32\n  Test threw exception\n\
    \  Expression: candidate(\"<>\") == true\n  type SubString has no field replace\n\
    \  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] correct_bracketing(brackets::String)\n\
    \     @ Main /tmp/tmpi8ei6uio.jl:15\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpi8ei6uio.jl:32 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpi8ei6uio.jl:31\ntest set:\
    \ Error During Test at /tmp/tmpi8ei6uio.jl:33\n  Test threw exception\n  Expression:\
    \ candidate(\"<<><>>\") == true\n  type SubString has no field replace\n  Stacktrace:\n\
    \   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] correct_bracketing(brackets::String)\n\
    \     @ Main /tmp/tmpi8ei6uio.jl:15\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpi8ei6uio.jl:33 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpi8ei6uio.jl:31\ntest set:\
    \ Error During Test at /tmp/tmpi8ei6uio.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(\"<><><<><>><>\") == true\n  type SubString has no field replace\n\
    \  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] correct_bracketing(brackets::String)\n\
    \     @ Main /tmp/tmpi8ei6uio.jl:15\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpi8ei6uio.jl:34 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpi8ei6uio.jl:31\ntest set:\
    \ Error During Test at /tmp/tmpi8ei6uio.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(\"<><><<<><><>><>><<><><<>>>\") == true\n  type SubS"
  timestamp: 1660008985
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    \"\"\"\n    correct_bracketing\
    \ is an implementation of the code challenge for \n    Project Euler's Problem\
    \ #2.\n    \n    brackets is a string of \"<\" and \">\".\n    return true if\
    \ every opening bracket has a corresponding closing bracket.\n    \n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\n    \n    brackets_count = brackets.count(\"</\")\n    \n    if brackets_count\
    \ % 2 == 0: \n        return true\n    else: \n        return false\n    \n#testing\n\
    </cell>\n<cell>\n#export\ndef test_correct_bracketing():\n    assert correct_bracketing(\"\
    \") == true\n    assert correct_bracketing(\"<<><>>\") == true\n    assert correct_bracketing(\"\
    <\") == false\n    assert correct_bracketing(\"<>\") == false\n    assert correct_bracketing(\"\
    <<><\") == \"<<><>>\"\n    assert correct_bracketing(\"<<><<>\") == \"<<><>>\"\
    \n    assert correct_bracketing(\"<<><>><<><><\") == \"<<><>><<><><\"\n    assert\
    \ correct_bracketing(\"<><><<>\") == \"<<><>>\"\n    assert correct_bracketing(\"\
    <><><<>>\") == \"<<><>>\"\n    assert correct_bracketing(\"<><><>>\") == \"<<><>>\"\
    \n    assert correct_bracketing(\"<><><><><><\") == \"<<><>>\"\n    assert correct_bracketing(\"\
    <><<><<>\") == false\n    assert correct_bracketing(\"<<><>><<><><><>\") == false\n\
    \    assert correct_bracketing(\"<>\") == false\n    assert correct_bracketing(\"\
    <<><>><<><><><>\") == false\n    assert correct_bracketing(\"<><><><><>\") ==\
    \ false\n    assert correct_bracketing(\"<><><><><><><><><><><><><><><><><><><><><><><><><><>\"\
    ) == false\n    assert correct_bracketing(\"<<><>><<><><><><><><>\") == false\n\
    \    assert correct_bracketing(\"<>\") == false\n    assert correct_bracketing(\"\
    <<><>><<><><><><><><>\") == false\n    assert correct_bracketing(\"<>\") == false\n\
    \    assert correct_bracketing(\"<<><>><<><><><><><>\") == false\n    assert correct_bracketing(\"\
    <>\") == false\n    assert correct_bracketing(\"<<><>><<><><><><><>\") == false\n\
    \    assert correct_bracketing(\"<<><>><<><><><\nusing Test\n\n@testset begin\n\
    \ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbbf1bh7h.jl:34\nin expression starting at\
    \ /tmp/tmpbbf1bh7h.jl:34\n"
  stdout: ''
  timestamp: 1660008982
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    ok = true\n    for\
    \ bracket in brackets\n        if bracket !~ r\"<[^<>]+>\" \n            error(\"\
    Brackets must be surrounded by angle brackets\")\n            ok = false\n   \
    \ return ok\n</code>\n<|/ a dscore=3 |>\n<| a tags=ocaml,pattern-matching,conditional-statements,matching,recursion\
    \ |>\nI believe that it is possible to solve this problem with recursion. I don't\
    \ see a direct way to solve your problem using recursion; however, it's possible\
    \ with a bottom-up approach. The basic idea is to recursively build the expression\
    \ until you have no valid expressions. Each step takes two inputs: the current\
    \ expression (a list) and the next character to be matched against (a string).\n\
    To solve the problem, the base case would be when the next character doesn't match\
    \ anything. When this happens, you can return the empty list. If you come to a\
    \ valid character that matches, then you can return that list followed by the\
    \ next character that matches.\nIn the recursion, you will need to handle two\
    \ cases:\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t\
    @test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"\
    <><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") ==\
    \ true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\"\
    ) == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") ==\
    \ false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\
    \t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpy4j6rfv3.jl:20\nin expression starting at\
    \ /tmp/tmpy4j6rfv3.jl:20\n"
  stdout: ''
  timestamp: 1660008982
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\
    \" then return true\n    let brackets = brackets[2:]\n    let open_brackets =\
    \ [\">\", \"<\"]\n    let closed_brackets = [\">>\", \"<<\"]\n    for open_bracket\
    \ in open_brackets do\n        for closed_bracket in closed_brackets do\n    \
    \        if open_bracket == closed_bracket && brackets.starts_with(open_bracket)\
    \ then\n                return false\n        end\n    end\n    return true\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    <>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpnitozpc3.jl:14\nin expression starting at /tmp/tmpnitozpc3.jl:14\n"
  stdout: ''
  timestamp: 1660008982
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == '<>':\n\
    \        return true\n    \n    if brackets == '<':\n        return false\n  \
    \  \n    if brackets == '<>':\n        return false\n    \n    if brackets ==\
    \ '<->':\n        return false\n    \n    if brackets == '<-<-':\n        return\
    \ false\n    \n    if brackets == '-><-':\n        return false\n    \n    if\
    \ brackets == '-<-<':\n        return false\n    \n    if brackets == '--<':\n\
    \        return false\n    \n    if brackets == '->--':\n        return false\n\
    \    \n    if brackets == '-->':\n        return false\n    \n    if brackets\
    \ == '<-':\n        return false\n    \n    if brackets == '<->-':\n        return\
    \ false\n    \n    if brackets == '<->->':\n        return false\n    \n    if\
    \ brackets == '-><->':\n        return false\n    \n    if brackets == '-<-':\n\
    \        return false\n    \n    if brackets == '--':\n        return false\n\
    \    \n    if brackets == '->--':\n        return false\n    \n    if brackets\
    \ == '-':\n        return false\n    \n    if brackets == '->':\n        return\
    \ false\n    \n    if brackets == '->->':\n        return false\n    \n    if\
    \ brackets == '<-->':\n        return false\n    \n    if brackets == '<->-':\n\
    \        return false\n    \n    if brackets == '<->->-':\n        return false\n\
    \    \n    if brackets == '<->->->':\n        return false\n    \n    if brackets\
    \ == '-><-':\n        return false\n    \n    if brackets == '->--<':\n      \
    \  return false\n    \n    if brackets == '->->-':\n        return false\n   \
    \ \n    if brackets == '->->->':\n        return false\n    \n    if brackets\
    \ == '<->--':\n        return false\n    \n    if brackets == '<->->-':\n    \
    \    return false\n    \n    if brackets == '<->->->':\n        return false\n\
    \    \n    if brackets == '<->--<':\n        return false\n    \n    if brackets\
    \ == '<->-<':\n        return false\n    \n    if brackets == '<->-><':\n    \
    \    return false\n    \n    if brackets == '->-<-':\n        return false\n \
    \   \n    if brackets == '--<->':\n        return false\n    \n    if brackets\
    \ == '->--<':\n        return false\n    \n    if brackets == '--->':\n      \
    \  return false\n    \n    if brackets == '<-<-':\n        return false\n    \n\
    \    if brackets == '<->-<':\n        return false\n    \n    if \nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\"\
    ) == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: character literal contains multiple characters\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmp1g93l5hq.jl:14\nin expression\
    \ starting at /tmp/tmp1g93l5hq.jl:14\n"
  stdout: ''
  timestamp: 1660008982
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n  -- this algorithm\
    \ is from https://stackoverflow.com/a/258816\n  if brackets == \"\" then return\
    \ false else return \n    correct_bracketing(brackets[1:end-1]) && correct_bracketing(brackets[2:end])\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    <>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid operator \"--\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp241dnale.jl:14\nin expression starting at /tmp/tmp241dnale.jl:14\n"
  stdout: ''
  timestamp: 1660008982
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    <>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpssrwzotc.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpssrwzotc.jl:1\n\
    in expression starting at /tmp/tmpssrwzotc.jl:1\n"
  stdout: ''
  timestamp: 1660008982
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\
    \"\n        return True\n    return brackets == \"<\" && brackets[1..-1] == \"\
    >\"\nend\n</code>\n<|/ a tags=syntax-error,julia,syntax |>\n<| c |>\nYour code\
    \ would allow `\"<>\"` as a valid bracket. I'm not sure that it is what the OP\
    \ wants.\n<|/ c |>\n<| c |>\nAgreed. I think that should be fixed now.\n<|/ c\
    \ |>\n<| c |>\nThis code does not work if `brackets[1..-1] == \"<\"`, for example\
    \ `\"<>\"` gives `true`\n<|/ c |>\n<| a tags=syntax-error,julia,syntax |>\nThe\
    \ current answers so far are great, but don't work in all cases.\nConsider the\
    \ following string:\n<code>\n>>> s = \"<<><>>\"\n</code>\nIf s is written with\
    \ correct syntax but still throws an error, try:\n<code>\n>>> parse(Int, s)\n\
    ERROR: syntax: invalid token: >>\n</code>\nThe solution above will throw an error.\
    \ However, the following will not:\n<code>\n>>> parse(Int, s[1:2:end])\n15\n</code>\n\
    This solution is based on Julia's documentation on parsing, which in turn was\
    \ based on a StackOverflow answer. Having read it, I believe it does work in the\
    \ following cases:\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t\
    @test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\"\
    ) == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") ==\
    \ false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\
    \t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid operator \"..-\" near column 42\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3ozceip1.jl:16\nin expression starting at\
    \ /tmp/tmp3ozceip1.jl:16\n"
  stdout: ''
  timestamp: 1660008982
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets\
    \ |> String.toLower\n    for c in brackets\n        if not c.isAlpha\n       \
    \     return false\n    return true\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpt1xkghwn.jl:1\nin expression starting at /tmp/tmpt1xkghwn.jl:1\n"
  stdout: ''
  timestamp: 1660008983
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    local brackets =\
    \ brackets\n    return brackets ~= \"\" &&\n        brackets[1] == \"<\" &&\n\
    \        brackets[length(brackets) - 2] == \">\" &&\n        brackets[length(brackets)\
    \ - 1] == \">\"\n    end\n</code>\n<|/ a tags=string,lua |>\n<| a tags=string,lua\
    \ dscore=1 |>\nIn case you are interested in, here is a recursive solution that\
    \ works with any string and can work with nested brackets.\n<code>\nlocal function\
    \ brackets(str, i)\n  if(i == nil or (i == 1 and str[1] == '<')) then\n    return\
    \ true\n  else\n    return brackets(str, i+1) or (str[i] == '<' and brackets(str,\
    \ i+2))\n  end\nend\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t\
    @test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\"\
    ) == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") ==\
    \ false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\
    \t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"=\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp6tnays1w.jl:15\nin expression starting at /tmp/tmp6tnays1w.jl:15\n"
  stdout: ''
  timestamp: 1660008982
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    # Remove any whitespace\
    \ at the start and end of the string\n    brackets = brackets.trim()\n    if len(brackets)\
    \ <= 1 \n        return false \n    \n    # Keep track of how many brackets were\
    \ encountered\n    brackets_encountered = 0\n    \n    brackets_encountered +=\
    \ brackets.count(\"<\")\n    brackets_encountered += brackets.count(\">\")\n \
    \   \n    result := (brackets_encountered <= 1)\n    return result\nend\n</cell>\n\
    <text>\nExercise: Write a function that counts the number of times that a sub-string\
    \ appears in a string. Return 0 for substrings that are not in the string.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    <>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1uyjmmbn.jl:28\nin expression starting at\
    \ /tmp/tmp1uyjmmbn.jl:28\n"
  stdout: ''
  timestamp: 1660008983
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    # BEGIN PROBLEM\
    \ 1\n    \n    # END PROBLEM 1\n    # BEGIN PROBLEM 2\n    \n    # END PROBLEM\
    \ 2\n    return true\nend\n</cell>\n<text>\nRun the cell below to test your functions:\n\
    using Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    <>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0yqfpwjx.jl:22\nin expression starting at\
    \ /tmp/tmp0yqfpwjx.jl:22\n"
  stdout: ''
  timestamp: 1660008983
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open <- find first\
    \ open bracket in brackets\n    close <- find first close bracket in brackets\n\
    \    if open < close\n        then return true\n        else return false\nend\
    \ function\n</code>\n<|/ a |>\n<| a tags=haskell |>\nHere is another solution\n\
    <code>\nimport Data.Char\nimport Data.List\nimport Data.Maybe\nusing Test\n\n\
    @testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") ==\
    \ true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"function\" at /tmp/tmp2598dihv.jl:13 expected\
    \ \"end\", got \"first\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp2598dihv.jl:14\n\
    in expression starting at /tmp/tmp2598dihv.jl:14\n"
  stdout: ''
  timestamp: 1660008983
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\
    \"\n        true\n    else if brackets[0] == brackets[end]\n        false\n  \
    \  elseif brackets[1] == brackets[end]\n        false\n    elseif brackets[1]\
    \ == brackets[end-1]\n        correct_bracketing(brackets[2:end-1])\n    elseif\
    \ brackets[0] == brackets[1]\n        correct_bracketing(brackets[2:end])\n  \
    \  else\n        correct_bracketing(brackets[1:end-1])\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\"\
    ) == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2m38aa0n.jl:16\nin expression starting at\
    \ /tmp/tmp2m38aa0n.jl:16\n"
  stdout: ''
  timestamp: 1660008984
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\
    \" then return true\n    brackets = \"<\" + brackets + \">\"\n    brackets = brackets[2:-2]\n\
    \    brackets = brackets.replace(\"<\",\"\")\n    brackets = brackets.replace(\
    \ \">\",\"\")\n    brackets = brackets.replace(\"<<\",\"\")\n    brackets = brackets.replace(\"\
    >>\",\"\")\n    return brackets == brackets\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpi3gpx746.jl:14\nin expression starting at /tmp/tmpi3gpx746.jl:14\n"
  stdout: ''
  timestamp: 1660008984
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n{\n    brackets = brackets\
    \ |> remove_empty_brackets\n    for opening in brackets\n        match opening\n\
    \            | \"<\" => false\n            | \"<=\" => true\n            | \"\
    >\" => false\n            | \">=\" => true\n            | _ => \n            \
    \    let closing = opening[1..opening.len()] in\n                correct_bracketing(closing)\n\
    \        end\n    end\n    true\nend\n\"\"\"\n    remove_empty_brackets(s::String)::String\n\
    \"\"\"\n    Remove empty brackets from the string.\nusing Test\n\n@testset begin\n\
    \ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: expected \"}\"\nStacktrace:\n [1] top-level scope\n\
    \   @ /tmp/tmp29gxzznv.jl:17\nin expression starting at /tmp/tmp29gxzznv.jl:17\n"
  stdout: ''
  timestamp: 1660008984
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    \"\"\"\n    correct_bracketing(brackets::String)::Bool\n\
    \    True if brackets has every opening bracket followed by every closing bracket.\n\
    using Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    <>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpst2g5wi5.jl:1\nin expression starting at /tmp/tmpst2g5wi5.jl:1\n"
  stdout: ''
  timestamp: 1660008984
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    for i in brackets\n\
    \        if i !~ i::Char\n            return false\n    return true\nend\n</cell>\n\
    <cell>\n\"\"\"\n is_parenthetic(string)\n check if string is inside parentheses\n\
    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    <>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgkwgf9zb.jl:19\nin expression starting at\
    \ /tmp/tmpgkwgf9zb.jl:19\n"
  stdout: ''
  timestamp: 1660008984
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n        bracket_to_open\
    \ :: String # a String that represents an opening bracket that we are checking\n\
    \        bracket_to_close :: String # a String that represents a closing bracket\
    \ that we are checking\n        open_count :: Int = 0 # an Int that represents\
    \ the number of opening brackets that we have already seen\n        close_count\
    \ :: Int = 0 # an Int that represents the number of closing brackets that we have\
    \ already seen\n        if brackets.length < 2 return true\n        else if brackets.head\
    \ == \"<\" then return false # if the brackets string starts with a \"<\" then\
    \ we know we aren't in the correct bracketing state\n        else if brackets.head\
    \ == \">\" then return false # if the brackets string starts with a \">\" then\
    \ we know we aren't in the correct bracketing state\n        else if brackets.head\
    \ == \"<\" then open_count += 1 else open_count += 0 # if brackets.head == \"\
    >\" then open_count += 1 else open_count += 0\n        else if brackets.head ==\
    \ \">\" then close_count += 1 else close_count += 0 # if brackets.head == \">\"\
    \ then close_count += 1 else close_count += 0\n        else if brackets.head ==\
    \ \">>\" then return false # if the brackets string starts with \">>\" then we\
    \ know we are in the correct bracketing state\n        else if brackets.head ==\
    \ \"<\" then return false # if the brackets string starts with \"<\" then we know\
    \ we are in the correct bracketing state\n        else if brackets.head == \"\
    <<\" then return false # if the brackets string starts with \"<<\" then we know\
    \ we are in the correct bracketing state\n        else if brackets.head == \"\
    <\" then open_count += 2 else open_count += 0 # if brackets.head == \">>\" then\
    \ open_count += 2 else open_count += 0\n        else if brackets.head == \">\"\
    \ then close_count += 2 else close_count += 0 # if brackets.head == \"<<\" then\
    \ close_count += 2 else close_count += 0\n        else if brackets.head == \"\
    >\" then return false # if the brackets string starts with \">\" then we know\
    \ we are in the correct bracketing state\n        else if brackets.head == \"\
    <\" then return false # if the brackets string starts with \"<\" then we know\
    \ we are in the correct bracketing state\n        else if brackets.head == \"\
    >\" then return false # if the brackets string starts with \">\" then we know\
    \ we are in the correct bracketing state\n        else if brackets.head == \"\
    <\" then return false # if the brackets string starts with \"<\" then we know\
    \ we are in the correct bracketing state\n        else if brackets.head == \"\
    >\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    <>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3u2m4wum.jl:19\nin expression starting at\
    \ /tmp/tmp3u2m4wum.jl:19\n"
  stdout: ''
  timestamp: 1660008984
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    \"\"\"\n    correct_bracketing(brackets::String)\n\
    using Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    <>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpl9ie6osg.jl:1\nin expression starting at /tmp/tmpl9ie6osg.jl:1\n"
  stdout: ''
  timestamp: 1660008977
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    return (length(split(brackets,\
    \ \"<>\"))==1)\nend\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t\
    @test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\"\
    ) == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") ==\
    \ false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\
    \t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 5 passed, 7 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp5wnkz1qj.jl:18

    '
  stdout: "test set: Test Failed at /tmp/tmp5wnkz1qj.jl:21\n  Expression: candidate(\"\
    <>\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp5wnkz1qj.jl:21 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp5wnkz1qj.jl:20\ntest set: Test Failed at /tmp/tmp5wnkz1qj.jl:22\n\
    \  Expression: candidate(\"<<><>>\") == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5wnkz1qj.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5wnkz1qj.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp5wnkz1qj.jl:23\n  Expression: candidate(\"<><><<><>><>\")\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp5wnkz1qj.jl:23 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp5wnkz1qj.jl:20\ntest set: Test Failed at /tmp/tmp5wnkz1qj.jl:24\n\
    \  Expression: candidate(\"<><><<<><><>><>><<><><<>>>\") == true\n   Evaluated:\
    \ false == true\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5wnkz1qj.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5wnkz1qj.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp5wnkz1qj.jl:27\n  Expression: candidate(\"<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] mac"
  timestamp: 1660008985
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets[2:]\n\
    \    for i in brackets\n        if brackets[i] != brackets.last(i)\n         \
    \   false\n        else false\n    end\nend\n</code>\nThis function returns false/true\
    \ depending on the brackets given.\nThe function checks whether the closing bracket\
    \ of the opening bracket is equal to the closing bracket of the last opening bracket\
    \ it encounters. \nIf the closing bracket of the opening bracket is not equal\
    \ to the closing bracket of the last opening bracket, false is returned.\n<|/\
    \ a |>\n<| c |>\nThe question mentions \"return false if the brackets are in a\
    \ wrong order\", so this solution will also return false if there are more closing\
    \ brackets than opening brackets.\n<|/ c |>\n<| c |>\n, Thanks for the comment.\
    \ I've updated my answer accordingly.\n<|/ c |>\n<| a |>\nYou can just check the\
    \ last index (length) of brackets in the function and reverse the string (substring)\
    \ in each iteration. \n<code>\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t\
    @test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\"\
    ) == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") ==\
    \ false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\
    \t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"2:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmps2yqitar.jl:14\nin expression\
    \ starting at /tmp/tmps2yqitar.jl:14\n"
  stdout: ''
  timestamp: 1660008984
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    if is_balanced(brackets):\n\
    \        brackets = balance(brackets)\n        brackets = brackets.replace(\"\
    <\", \"\")\n        brackets = brackets.replace(\">\", \"\")\n        brackets\
    \ = brackets.replace(\"<<\", \">>\")\n        brackets = brackets.replace(\">>\"\
    , \"\")\n        if brackets == \"<>\":\n            return true\n    return false\n\
    </code>\n<|/ a |>\n<| c |>\nI wonder why you're doing this in O(n) rather than\
    \ O(1)?  It seems less efficient than simply doing it in O(n).  Do you have a\
    \ source for this?\n<|/ c |>\n<| c |>\nSure, I'm an engineer, not a computer scientist.\
    \ :)  However, I imagine it would be O(n) in theory, because every function call\
    \ would have to be executed for every string that was checked - that's n*n number\
    \ of function calls in your example.  The number of function calls is also exponential\
    \ in the number of characters you check.\n<|/ c |>\n<| c |>\nI think it's an O(n)\
    \ because you check each string character for opening and closing brackets. So\
    \ you're doing O(n*n) characters per function call. Is that right?\n<|/ c |>\n\
    <| c |>\nOh I see, you're basically taking a string of n*n (n) characters and\
    \ checking if the string itself is balanced using the `is_balanced` function?\
    \  That's a good idea, I'll definitely give that a try. Thanks!\n<|/ c |>\n<|\
    \ c |>\nYeah, you're right. That's what I was thinking.  If you did it in O(1)\
    \ instead (i.e. checking only the first character or something), then you're right,\
    \ that would be an O(n) solution.\n<|/ c |>\n<| a dscore=4 |>\n<code>\ndef isBalanced(s:\
    \ String) = {\n    var openingBrackets: Int = 0\n    var closingBrackets: Int\
    \ = 0\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    <>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprzfypw40.jl:15\nin expression starting at\
    \ /tmp/tmprzfypw40.jl:15\n"
  stdout: ''
  timestamp: 1660008984
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    <\",\">\")\n    brackets = brackets.replace(\">\",\"<\")\n    brackets = brackets.replace(\"\
    <<\",\">>\")\n    brackets = brackets.replace(\">>\",\"<<\")\n    brackets = brackets.replace(\"\
    <<<\",\">>>\")\n    brackets = brackets.replace(\">>>\",\"<<<\")\n    brackets\
    \ = brackets.replace(\"<<<<\",\">>>>\")\n    brackets = brackets.replace(\">>>>\"\
    ,\"<<<<\")\n    brackets = brackets.replace(\"<\",\"\")\n    brackets = brackets.replace(\"\
    >\",\"\")\n    brackets = brackets.replace(\">>\",\"\")\n    brackets = brackets.replace(\"\
    <<\",\"\")\n    brackets = brackets.replace(\"<>\",\"\")\n    brackets = brackets.replace(\"\
    >>\",\"\")\n    brackets = brackets.replace(\"<<<\",\"\")\n    brackets = brackets.replace(\"\
    >>>\",\"\")\n    brackets = brackets.replace(\"<<<<\",\"\")\n    brackets = brackets.replace(\"\
    >>>>\",\"\")\n    brackets = brackets.replace(\"<\",\"\")\n    brackets = brackets.replace(\"\
    >\",\"\")\n    brackets = brackets.replace(\">>\",\"\")\n    brackets = brackets.replace(\"\
    <<\",\"\")\n    brackets = brackets.replace(\"<>\",\"\")\n    brackets = brackets.replace(\"\
    >>\",\"\")\n    brackets = brackets.replace(\"<<<\",\"\")\n    brackets = brackets.replace(\"\
    >>>\",\"\")\n    brackets = brackets.replace(\"<<<<\",\"\")\n    brackets = brackets.replace(\"\
    >>>>\",\"\")\n    brackets = brackets.replace(\"<\",\"\")\n    brackets = brackets.replace(\"\
    >\",\"\")\n    brackets = brackets.replace(\">>\",\"\")\n    brackets = brackets.replace(\"\
    <<\",\"\")\n    brackets = brackets.replace(\"<>\",\"\")\n    brackets = brackets.replace(\"\
    >>\",\"\")\n    brackets = brackets.replace(\"<<<\",\"\")\n    brackets = brackets.replace(\"\
    >>>\",\"\")\n    brackets = brackets.replace(\"<<<<\",\"\")\n    brackets = brackets.replace(\"\
    >>>>\",\"\")\n    brackets = brackets.replace(\"<\",\"\")\n    brackets = brackets.replace(\"\
    >\",\"\")\n    brackets = brackets.replace(\">>\",\"\")\n    brackets = brackets.replace(\"\
    <<\",\"\")\n    brackets = brackets.replace(\"<>\",\"\")\n    brackets = brackets.replace(\"\
    >>\",\"\")\n    brackets = brackets.replace(\"<<<\",\"\")\n    brackets = brackets.replace(\"\
    >>>\",\"\")\n    brackets = brackets.replace(\"<<<<\",\"\")\n    brackets = brackets.replace(\"\
    >>>>\",\"\")\n    brackets = brackets.replace(\"<\",\"\")\n    brackets = brackets.replace(\"\
    >\",\"\")\n    brackets = brackets.replace(\">>\",\"\")\n    brackets = \nusing\
    \ Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    <>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmphlvan9f4.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmphlvan9f4.jl:1\n\
    in expression starting at /tmp/tmphlvan9f4.jl:1\n"
  stdout: ''
  timestamp: 1660008984
- exit_code: -1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    correct_bracketing\
    \ <- length(brackets) == 2\n    if correct_bracketing then\n        bracket_opening\
    \ <- brackets[1] == \"<\"\n        bracket_closing <- brackets[2] == \">\"\n \
    \       correct_bracketing <- bracket_opening && bracket_closing\n    end\n  \
    \  return correct_bracketing\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: Timeout
  stderr: 'ERROR: LoadError: '
  stdout: "test set: Error During Test at /tmp/tmpk0mif7i1.jl:27\n  Test threw exception\n\
    \  Expression: candidate(\"<>\") == true\n  MethodError: no method matching isless(::typeof(correct_bracketing),\
    \ ::Int64)\n  Closest candidates are:\n    isless(!Matched::AbstractFloat, ::Real)\
    \ at ~/.conda/envs/polyglot/share/julia/base/operators.jl:186\n    isless(!Matched::Real,\
    \ ::Real) at ~/.conda/envs/polyglot/share/julia/base/operators.jl:430\n    isless(::Any,\
    \ !Matched::Missing) at ~/.conda/envs/polyglot/share/julia/base/missing.jl:88\n\
    \    ...\n  Stacktrace:\n   [1] <(x::Function, y::Int64)\n     @ Base ./operators.jl:352\n\
    \   [2] correct_bracketing(brackets::String)\n     @ Main /tmp/tmpk0mif7i1.jl:14\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpk0mif7i1.jl:27 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpk0mif7i1.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpk0mif7i1.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"<<><>>\") == true\n  MethodError: no method matching isless(::typeof(correct_bracketing),\
    \ ::Int64)\n  Closest candidates are:\n    isless(!Matched::AbstractFloat, ::Real)\
    \ at ~/.conda/envs/polyglot/share/julia/base/operators.jl:186\n    isless(!Matched::Real,\
    \ ::Real) at ~/.conda/envs/polyglot/share/julia/base/operators.jl:430\n    isless(::Any,\
    \ !Matched::Missing) at ~/.conda/envs/polyglot/share/julia/base/missing.jl:88\n\
    \    ...\n  Stacktrace:\n   [1] <(x::Function, y::Int64)\n     @ Base ./operators.jl:352\n\
    \   [2] correct_bracketing(brackets::String)\n     @ Main /tmp/tmpk0mif7i1.jl:14\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpk0mif7i1.jl:28 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpk0mif7i1.jl:26\ntest set:\
    \ Error During"
  timestamp: 1660008987
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets == \"<\"\
    \nend\n</cell>\n<code language=julia-0.6>\n\"\"\"\nThis function removes unnecessary\
    \ brackets from the given string.\n    \nThe return value is a string with unnecessary\
    \ brackets removed.\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t\
    @test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\"\
    ) == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") ==\
    \ false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\
    \t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp18bgbg0d.jl:16\nin expression starting at\
    \ /tmp/tmp18bgbg0d.jl:16\n"
  stdout: ''
  timestamp: 1660008984
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n\"\"\"\n    correct_bracketing\
    \ determines whether the brackets are correctly \n    paired.\nusing Test\n\n\
    @testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") ==\
    \ true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnn3x1pdy.jl:1\nin expression starting at /tmp/tmpnn3x1pdy.jl:1\n"
  stdout: ''
  timestamp: 1660008984
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    <\", \"\")\n    brackets = brackets.replace(\"<\", \"\")\n    brackets = brackets.replace(\"\
    >\", \"\")\n    brackets = brackets.replace(\">\", \"\")\n    brackets = brackets.replace(\"\
    <<\", \"\")\n    brackets = brackets.replace(\"<<\", \"\")\n    brackets = brackets.replace(\"\
    >>\", \"\")\n    brackets = brackets.replace(\">>\", \"\")\n    brackets = brackets.replace(\"\
    <<<\", \"\")\n    brackets = brackets.replace(\"<<<\", \"\")\n    brackets = brackets.replace(\"\
    >>>\", \"\")\n    brackets = brackets.replace(\">>>\", \"\")\n    brackets = brackets.replace(\"\
    <<<\", \"\")\n    brackets = brackets.replace(\">>>\", \"\")\n    brackets = brackets.replace(\"\
    ><<\", \"\")\n    brackets = brackets.replace(\">>>\", \"\")\n    return brackets\
    \ == \"<\"\nend\n</cell>\n<text>\n6.4  Tokenize a String\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\
    \t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") ==\
    \ true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnk39jmr8.jl:32\nin expression starting at\
    \ /tmp/tmpnk39jmr8.jl:32\n"
  stdout: ''
  timestamp: 1660008984
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    \"\"\"\n    Your\
    \ solution here\n    \"\"\"\n</code>\n<|/ a dscore=0 |>\n<| a |>\n<code>\n#include<bits/stdc++.h>\n\
    using namespace std;\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t\
    @test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\"\
    ) == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") ==\
    \ false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\
    \t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphr53xddl.jl:17\nin expression starting at\
    \ /tmp/tmphr53xddl.jl:17\n"
  stdout: ''
  timestamp: 1660008984
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    \"\"\"\n    Function\
    \ takes a string of \"<\" and \">\".\n    Return true if every opening bracket\
    \ has a corresponding closing bracket.\n    >>> correct_bracketing(\"<\")\n  \
    \  false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\n    \n    open_brackets = \"\"\n    close_brackets = \"\"\n    \n    for i\
    \ in brackets:\n        if i == \"<\":\n            open_brackets += i\n     \
    \   else:\n            close_brackets += i\n    \n    if open_brackets == close_brackets:\n\
    \        return true\n    else:\n        return false\n</code>\n<|/ a dscore=0\
    \ |>\n<| c |>\nThank you for your answer! However, I don't understand the concept\
    \ of \"open brackets\" and \"close brackets\". Do you have a link where I can\
    \ read more about this?\n<|/ c |>\n<| c |>\nThe concept of \"open brackets\" and\
    \ \"close brackets\" is \"brackets\" and \"bracketing\". The first thing I thought\
    \ of when reading the question was that you are talking about \"open brackets\"\
    \ and \"close brackets\" because you didn't mention them in your question. Regarding\
    \ the \"bracketing problem\", I thought about it a lot while trying to solve the\
    \ question, so I figured I should give it a try.\n<|/ c |>\n<| c |>\nOh, yeah\
    \ you are right, I didn't really think of it right away, I just thought it would\
    \ be a logical explanation for \"brackets\". Thank you for your answer! :)\n<|/\
    \ c |>\n<| c |>\nAh ok, thanks for clarifying that. I added an example on how\
    \ to use it on the answer.\n<|/ c |>\n<| c |>\nHey man, thanks for your answer!\
    \ I understand the code now. However, I got a problem with the return true/false\
    \ statements. When I try to use your function I get the following error: \n\"\
    the function correct_bracketing expects 1 argument, but only 0 was given\". I\
    \ tried to use your function like this:\ncorrect_bracketing(\"<>\")\n<|/ c |>\n\
    <| a tags=string,python,recursion |>\n<code>\ndef check_brackets(s):\n    if(not\
    \ s): return\n    if(s[0]==\"<\" and s[-1]==\">\"): return check_brackets(s[1:-1])\n\
    \    if(s[0]==\"[\" and s[-1]==\"]\"): return check_brackets(s[1:-1])\n    if(s[0]==\"\
    {\" and s[-1]==\"}\"): return check_brackets(s[1:-1])\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\
    \t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") ==\
    \ true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpr6bfzkva.jl:31\nin expression starting at\
    \ /tmp/tmpr6bfzkva.jl:31\n"
  stdout: ''
  timestamp: 1660008984
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n\"\"\"\n    brackets\
    \ is a string of \"<\" and \">\".\n    return true if every opening bracket has\
    \ a corresponding closing bracket.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpuoits3hl.jl:1\nin expression starting at /tmp/tmpuoits3hl.jl:1\n"
  stdout: ''
  timestamp: 1660008980
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    correct_bracketing(brackets,\
    \ 0)\nend\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t\
    @test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"\
    <><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") ==\
    \ true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\"\
    ) == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") ==\
    \ false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\
    \t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 12 errored,
    0 broken.

    in expression starting at /tmp/tmp77lxcscv.jl:18

    '
  stdout: "test set: Error During Test at /tmp/tmp77lxcscv.jl:21\n  Test threw exception\n\
    \  Expression: candidate(\"<>\") == true\n  MethodError: no method matching correct_bracketing(::String,\
    \ ::Int64)\n  Closest candidates are:\n    correct_bracketing(::String) at /tmp/tmp77lxcscv.jl:13\n\
    \  Stacktrace:\n   [1] correct_bracketing(brackets::String)\n     @ Main /tmp/tmp77lxcscv.jl:14\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp77lxcscv.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp77lxcscv.jl:20\ntest set:\
    \ Error During Test at /tmp/tmp77lxcscv.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(\"<<><>>\") == true\n  MethodError: no method matching correct_bracketing(::String,\
    \ ::Int64)\n  Closest candidates are:\n    correct_bracketing(::String) at /tmp/tmp77lxcscv.jl:13\n\
    \  Stacktrace:\n   [1] correct_bracketing(brackets::String)\n     @ Main /tmp/tmp77lxcscv.jl:14\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp77lxcscv.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp77lxcscv.jl:20\ntest set:\
    \ Error During Test at /tmp/tmp77lxcscv.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(\"<><><<><>><>\") == true\n  MethodError: no method matching correct_bracketing(::String,\
    \ ::Int64)\n  Closest candidates are:\n    correct_bracketing(::String) at /tmp/tmp77lxcscv.jl:13\n\
    \  Stacktrace:\n   [1] correct_bracketing(brackets::String)\n     @ Main /tmp/tmp77lxcscv.jl:14\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp77lxcscv.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [in"
  timestamp: 1660008988
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    # implement your\
    \ function here\n    pass\n</code>\n<|/ a tags=algorithm |>\n<| a tags=algorithm\
    \ |>\nYou have to count occurrences of each of '<','>' and '=' symbols. You can\
    \ do so by using an array that contains the number of occurrences for each symbol.\
    \ After that it is just a matter of comparing these two arrays, if they contain\
    \ the same number of occurrences, you have found a correct solution, otherwise\
    \ you are in the wrong position.\n<code>\nvar symbols = new Array(\">=\", \"<=\"\
    , \"<\", \"=\");\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t\
    @test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\"\
    ) == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") ==\
    \ false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\
    \t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpizbmiaun.jl:16\nin expression starting at\
    \ /tmp/tmpizbmiaun.jl:16\n"
  stdout: ''
  timestamp: 1660008985
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    bracket = brackets[1]\n\
    \    if brackets.head == bracket:\n        brackets = brackets[2:]\n    if brackets.head\
    \ != \">\":\n        return False\n    else: \n        brackets = brackets[1:]\
    \ \n    if brackets.head == \"<\":\n        return False\n    else: \n       \
    \ return True\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t\
    @test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\"\
    ) == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") ==\
    \ false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\
    \t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqa08mfrb.jl:16\nin expression starting at\
    \ /tmp/tmpqa08mfrb.jl:16\n"
  stdout: ''
  timestamp: 1660008985
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    bracket_stack =\
    \ Stack{String}(brackets)\n    return !bracket_stack.empty()\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\
    \t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") ==\
    \ true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp778gi7rg.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp778gi7rg.jl:1\n\
    in expression starting at /tmp/tmp778gi7rg.jl:1\n"
  stdout: ''
  timestamp: 1660008985
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets !~ \"\
    :(<<|>>>)(<<|>>>)\":\n        return false\n    open_brackets = brackets[1, brackets.find(\"\
    <\")..brackets.find(\"<\")+3]\n    close_brackets = brackets[brackets.find(\"\
    <\")+3, brackets.find(\"<\")+6..brackets.find(\"<\")+8]\n    if open_brackets\
    \ /= close_brackets then\n        return false\n    else\n        return true\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    <>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4d1elog1.jl:15\nin expression starting at\
    \ /tmp/tmp4d1elog1.jl:15\n"
  stdout: ''
  timestamp: 1660008985
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    \"\"\"\n    Takes\
    \ a string of \"<\" and \">\" and returns true if every opening bracket has a\
    \ corresponding closing bracket.\n    \"\"\"\n\"\"\"\n    Implementation of a\
    \ recursive algorithm to find all possible valid bracketings.\n    \n    The algorithm\
    \ is implemented using recursion and a helper function called \"check_valid_position\"\
    .\n    \n    Arguments:\n        brackets -- a bracketing as a string.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    <>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpf2jz5c2z.jl:1\nin expression starting at /tmp/tmpf2jz5c2z.jl:1\n"
  stdout: ''
  timestamp: 1660008985
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    \"\"\"\n    correct_bracketing(brackets::String)\n\
    using Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    <>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpl9ie6osg.jl:1\nin expression starting at /tmp/tmpl9ie6osg.jl:1\n"
  stdout: ''
  timestamp: 1660008977
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    bracket_count::Int\
    \ = 0\n    for char in brackets\n        if char == \"<\"\n            bracket_count\
    \ += 1\n        elseif char == \">\"\n            bracket_count -= 1\n       \
    \ else\n            error(\"Unrecognized opening bracket\")\n            false\n\
    \    return bracket_count == 0\n    end\nend \n</cell>\n<text>\nExercise: Write\
    \ a function called correct_parenthesis that takes a string and checks to see\
    \ if every pair of parentheses matches a pair of matching closing parentheses.\n\
    using Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    <>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpa_a6u18s.jl:26\nin expression starting at\
    \ /tmp/tmpa_a6u18s.jl:26\n"
  stdout: ''
  timestamp: 1660008985
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = \"<\"\
    \ + brackets + \">\"\n    bpos = 0\n    epos = length(brackets)\n    \n    while\
    \ bpos < epos do\n        beg = brackets[bpos]\n        end = brackets[epos]\n\
    \        if beg < end then\n            beg += 1\n        end\n        if beg\
    \ > end then\n            epos -= 1\n        end\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\ncorrect_bracketing(\"<\")\n</cell>\n<code language=julia-1.5>\n\
    correct_bracketing(\"<>\")\n</cell>\n<code language=julia-1.5>\ncorrect_bracketing(\"\
    <<><>>\")\n</cell>\n<code language=julia-1.5>\ncorrect_bracketing(\"><<>\")\n\
    </cell>\n<text>\nExercise 9: Implementing Lexical_Analysis.jl\nWrite a function\
    \ named lexical_analysis that takes two arguments:\nusing Test\n\n@testset begin\n\
    \ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid \"do\" syntax\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpcgjc6n_y.jl:18\nin expression starting at /tmp/tmpcgjc6n_y.jl:18\n"
  stdout: ''
  timestamp: 1660008985
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    \n    true = false\
    \ \n    if brackets contains \"<\"\n        true = false \n        for ch in brackets\n\
    \            if ch == \"<\"\n                true = true \n            else if\
    \ ch == \">\"\n                true = true\n            end\n        end\n   \
    \ end\n    return true\nend\n</cell>\n<code language=julia-1.2>\n\"\"\"\n is_balanced\n\
    \   Given a string of brackets, return true if every opening bracket has a corresponding\
    \ closing bracket.\n   \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t\
    @test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\"\
    ) == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") ==\
    \ false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\
    \t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"\"\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpc0yh04qm.jl:16\nin expression starting at /tmp/tmpc0yh04qm.jl:16\n"
  stdout: ''
  timestamp: 1660008986
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    \ \", \"\")\n    brackets = brackets.replace(\">\", \"\")\n    brackets = brackets.replace(\"\
    <\", \"\")\n    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    (\", \"\")\n    brackets = brackets.replace(\")\", \"\")\n    brackets = brackets.replace(\"\
    {\", \"\")\n    brackets = brackets.replace(\"}\", \"\")\n    brackets = brackets.replace(\"\
    :\", \":\")\n    brackets = brackets.replace(\":<\", \":>\")\n    brackets = brackets.replace(\"\
    :>\", \":<\")\n    brackets = brackets.replace(\":>:\", \":<:\")\n    brackets\
    \ = brackets.replace(\":\", \":\")\n    brackets = brackets.replace(\":\", \"\
    :\") \n    brackets = brackets.replace(\":>:\", \":<:\")\n    brackets = brackets.replace(\"\
    :<:\", \":>:\")\n    brackets = brackets.replace(\":<:\", \":>:\")\n    brackets\
    \ = brackets.replace(\":>:\", \":<:\")\n    brackets = brackets.replace(\":\"\
    , \":\")\n    brackets = brackets.replace(\":<\", \":>\")\n    brackets = brackets.replace(\"\
    :>\", \":<\")\n    brackets = brackets.replace(\":>:\", \":<:\")\n    brackets\
    \ = brackets.replace(\":\", \":\")\n    brackets = brackets.replace(\",\", \"\"\
    )\n    brackets = brackets.replace(\";\", \"\")\n    brackets = brackets.replace(\"\
    ;\", \"\")\n    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    :\", \"\")\n    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    ;\", \"\")\n    brackets = brackets.replace(\",\", \"\")\n    brackets = brackets.replace(\"\
    ;\", \"\")\n    brackets = brackets.replace(\";\", \"\")\n    brackets = brackets.replace(\"\
    ;\", \"\")\n    brackets = brackets.replace(\";\", \"\")\n    brackets = brackets.replace(\"\
    ;\", \"\")\n    brackets = brackets.replace(\";\", \"\")\n    brackets = brackets.replace(\"\
    ;\", \"\")\n    brackets = brackets.replace(\";\", \"\")\n    brackets = brackets.replace(\"\
    ;\", \"\")\n    brackets = brackets.replace(\";\", \"\")\n    brackets = brackets.replace(\"\
    ;\", \"\")\n    brackets = brackets.replace(\";\", \"\")\n    brackets = brackets.replace(\"\
    ;\", \"\")\n    brackets = brackets.replace(\";\", \"\")\n    brackets = brackets.replace(\"\
    ;\", \"\")\n    brackets = brackets.replace(\";\", \"\")\n    brackets = brackets.replace(\"\
    ;\", \"\")\n    brackets = brackets.replace(\";\", \"\")\n    brackets = brackets.replace(\"\
    ;\", \"\")\n    brackets = brackets.replace(\";\", \"\")\n    brackets = bracket\n\
    using Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    <>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpcjyx4tyi.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpcjyx4tyi.jl:1\n\
    in expression starting at /tmp/tmpcjyx4tyi.jl:1\n"
  stdout: ''
  timestamp: 1660008986
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n  \n    bracketing_array\
    \ = brackets_to_array(brackets)\n    brackets_count = 0\n    \n    for elem in\
    \ bracketing_array\n        if elem == \">\"\n            brackets_count += 1\n\
    \        if elem == \"<\"\n            brackets_count -= 1\n            if brackets_count\
    \ < 0\n                brackets_count = 0\n            if brackets_count > 0\n\
    \                brackets_count = 0\n            \n            if brackets_count\
    \ == 0\n                true\n            end\n        end\n    end\nend\n</code>\n\
    <|/ a dscore=1 tags=recursion,haskell,string |>\n<| c |>\nYour solution is nice,\
    \ but it's not exactly right. It counts the number of `<` characters, not the\
    \ length of the string. For example, it considers `\"<<>\"` as 2 opening brackets,\
    \ but it only has 1.\n<|/ c |>\n<| c |>\nThanks. I have fixed it.\n<|/ c |>\n\
    <| c |>\nThank you very much. Your code works flawlessly now. Could you tell me\
    \ how you came up with the array and how you counted the length of the string\
    \ without using a function?\n<|/ c |>\n<| c |>\nHi Matteo. I figured it out. I've\
    \ used this website to figure it out http://wiki.haskell.org/Index\n<|/ c |>\n\
    <| c |>\nI added some code at the bottom of the answer that shows how I used the\
    \ array to count the number of opening brackets.\n<|/ c |>\n<| a |>\nA simple\
    \ solution using only Data.Char, Data.List and Data.Either:\n<code>\nimport Data.Char\n\
    import Data.List\nimport Data.Either\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprm82ys1l.jl:34\nin expression starting at\
    \ /tmp/tmprm82ys1l.jl:34\n"
  stdout: ''
  timestamp: 1660008986
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    \"\"\"\n    correct_bracketing(brackets::String)::Bool\n\
    \    \n    Returns true if the brackets are correctly balanced.\n    \"\"\"\n\
    \    return (brackets == \"<\") and (brackets == \"<\") or \\\n           (brackets\
    \ == \"<=\") or (brackets == \"<\") or (brackets == \"<=\") \\\n           and\
    \ (brackets == \"<\") or (brackets == \"<=\") or (brackets == \"<>\")\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\"\
    ) == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"function\" at /tmp/tmpq5mket25.jl:13 expected\
    \ \"end\", got \"and\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpq5mket25.jl:19\n\
    in expression starting at /tmp/tmpq5mket25.jl:19\n"
  stdout: ''
  timestamp: 1660008986
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    \n    # your code\
    \ here\n    \n    return true\n    \nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 8 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpsm2b8nd3.jl:22

    '
  stdout: "test set: Test Failed at /tmp/tmpsm2b8nd3.jl:29\n  Expression: candidate(\"\
    <<<><>>>>\") == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpsm2b8nd3.jl:29 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpsm2b8nd3.jl:24\ntest set: Test Failed at /tmp/tmpsm2b8nd3.jl:30\n\
    \  Expression: candidate(\"><<>\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpsm2b8nd3.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpsm2b8nd3.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpsm2b8nd3.jl:31\n  Expression: candidate(\"<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpsm2b8nd3.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpsm2b8nd3.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpsm2b8nd3.jl:32\n  Expression: candidate(\"<<<<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpsm2b8nd3.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpsm2b8nd3.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpsm2b8nd3.jl:33\n  Expression: candidate(\">\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/t"
  timestamp: 1660008987
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n  result = true\n  for\
    \ opening, closing in brackets\n    if opening != closing\n      result = false\n\
    \  return result\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t\
    @test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\"\
    ) == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") ==\
    \ false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\
    \t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid iteration specification\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9ebe1w6g.jl:15\nin expression starting at\
    \ /tmp/tmp9ebe1w6g.jl:15\n"
  stdout: ''
  timestamp: 1660008986
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    \n    # write your\
    \ code here\n    \n    \nend\"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: extra token \"\"\" after end of expression\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmpw17bo8rk.jl:18\nin expression\
    \ starting at /tmp/tmpw17bo8rk.jl:18\n"
  stdout: ''
  timestamp: 1660008986
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    bracket_opening\
    \ = brackets.find(\"<\")\n    bracket_closing = brackets.find(\">\")\n    if bracket_opening\
    \ < bracket_closing\n        return false\n    else if bracket_opening > bracket_closing\n\
    \        return true\n    else if brackets[bracket_opening - 1] != \"<\" && brackets[bracket_closing\
    \ - 1] != \">\"\n        return true\n    else\n        return false\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\"\
    ) == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5mzapyu2.jl:18\nin expression starting at\
    \ /tmp/tmp5mzapyu2.jl:18\n"
  stdout: ''
  timestamp: 1660008986
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    \"\"\"\n    correct_bracketing(brackets::String)\n\
    \    Determine whether the bracketing of a string is correct.\n    brackets is\
    \ a string of \"<\" and \">\".\n    return true if every opening bracket has a\
    \ corresponding closing bracket.\nusing Test\n\n@testset begin\n\ncandidate =\
    \ correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpaxnm3rj7.jl:1\nin expression starting at /tmp/tmpaxnm3rj7.jl:1\n"
  stdout: ''
  timestamp: 1660008986
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n\"\"\"Given a list of\
    \ brackets [brackets], determine if every opening bracket has a corresponding\
    \ closing bracket. \"\"\" \n    bracket_stack = []\n    for bracket in brackets\
    \ do \n        if bracket = \"<\" do \n            if not (isnull(bracket_stack)\
    \ and (bracket_stack.pop() = \">\") do \n                return false \n     \
    \       end \n        else \n            if bracket = \"<\" do \n            \
    \    bracket_stack.append(bracket)\n            end \n            else \n    \
    \            bracket_stack.pop()\n            end\n        end\n    end\n    return\
    \ true\nend\n</cell>\n<text>\nProblem 3\nImplement a stack of strings named brackets.\
    \ Push strings to the stack in the following order:\nusing Test\n\n@testset begin\n\
    \ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid \"do\" syntax\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp23binmzp.jl:16\nin expression starting at /tmp/tmp23binmzp.jl:16\n"
  stdout: ''
  timestamp: 1660008986
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    for c in brackets:\n\
    \        if c not in  \">\":\n            return false\n    return true\nend\n\
    </cell>\n<text>\nExercise 6\nImplement an implementation of \"eval\" that takes\
    \ a string and returns a number\n    of the same type as its input.\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\"\
    ) == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3esxucy5.jl:15\nin expression starting at\
    \ /tmp/tmp3esxucy5.jl:15\n"
  stdout: ''
  timestamp: 1660008986
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    let bracket_stack\
    \ = Stack()\n    for c in brackets\n        if c == '<'\n            bracket_stack.push(c)\n\
    \        elseif c == '>'\n            bracket_stack.pop()\n        else\n    \
    \        bracket_stack.empty()\n    if bracket_stack.empty()\n        true\n \
    \   else\n        false\nend\n</cell>\n<code language=julia-1.3>\ncorrect_bracketing(\"\
    <\")\n</cell>\n<code language=julia-1.3>\ncorrect_bracketing(\"<>\")\n</cell>\n\
    <code language=julia-1.3>\ncorrect_bracketing(\"<<><>>\")\n</cell>\n<code language=julia-1.3>\n\
    correct_bracketing(\"><<>\")\n</cell>\n<text>\nExercise 8\nWrite a function, is_bracketing_correct(brackets::String)\
    \ which takes as input a bracketing string and returns a Boolean indicating whether\
    \ the bracketing is correct (return true if brackets are correctly nested, and\
    \ false otherwise). A bracketing string is a string of \"<\" and \">\" characters\
    \ within double quotes, e.g. \"<<><>>\".\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_bmlccis.jl:27\nin expression starting at\
    \ /tmp/tmp_bmlccis.jl:27\n"
  stdout: ''
  timestamp: 1660008986
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    | true\n    | false\
    \ =\n    begin match brackets with\n    | \"\" -> false\n    | \">>\"  -> true\n\
    \    | \"<>\"  -> false\n    | \"><\"  -> true\n    | \"<<\"  -> false\n    |\
    \ \"<><\" -> false\n    | \">>>\" -> true\n    | \"<>>\" -> false\n    | \"><\"\
    \  -> true\n    | \"<<\"  -> false\n    | \"<><\" -> false\n    | \"<><\" -> true\n\
    \    | _ -> false\n    end\nend\n</cell>\n<code language=julia-1.0>\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\"\
    ) == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"|\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp80pkld4t.jl:14\nin expression starting at\
    \ /tmp/tmp80pkld4t.jl:14\n"
  stdout: ''
  timestamp: 1660008986
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    \"\"\"\n    >>>\
    \ correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\")\n \
    \   true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \"\"\"\n    bracket_stack = Set[String]()\n    correct_bracketing\
    \ = false\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t\
    @test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"\
    <><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") ==\
    \ true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\"\
    ) == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") ==\
    \ false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\
    \t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp37di49v5.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp37di49v5.jl:1\n\
    in expression starting at /tmp/tmp37di49v5.jl:1\n"
  stdout: ''
  timestamp: 1660008987
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_count::Int\
    \ \n    close_count::Int \n    open_bracket::String \n    close_bracket::String\
    \ \n    open_quote::String \n    close_quote::String \nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\
    \t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") ==\
    \ true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp4yo7nq_k.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp4yo7nq_k.jl:1\n\
    in expression starting at /tmp/tmp4yo7nq_k.jl:1\n"
  stdout: ''
  timestamp: 1660008987
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\
    \" then return true \n    else return false\n    ends_with_left = brackets[end]\
    \ <> \"<\" \n    opening_brackets = brackets[start:end] \n    for i in opening_brackets\
    \ do \n        if ends_with_left then \n            ends_with_left = (brackets[end]\
    \ == \">\") \n        end\n    ends_with_right = (brackets[end] == \">\") \n \
    \   for i in opening_brackets do \n        if ends_with_right then \n        \
    \    ends_with_right = (brackets[end] == \">\") \n        end\n    ends_with_left_or_right\
    \ = ends_with_left || ends_with_right \n    for i in opening_brackets do \n  \
    \      if ends_with_left_or_right then \n            ends_with_left_or_right =\
    \ (brackets[end] == \">\") \n        end\n    ends_with_left_or_right_or_close\
    \ = ends_with_left_or_right || ends_with_close\n    for i in opening_brackets\
    \ do \n        if ends_with_left_or_right_or_close then \n            ends_with_left_or_right_or_close\
    \ = (brackets[end] == \">\") \n        end\n    ends_with_left_or_right_or_close_in_closing_bracket\
    \ = ends_with_left_or_right_or_close || brackets[end] == \"<\" \n    for i in\
    \ opening_brackets do \n        if ends_with_left_or_right_or_close_in_closing_bracket\
    \ then \n            ends_with_left_or_right_or_close_in_closing_bracket = (brackets[end]\
    \ == \"<\") \n        end\n    ends_with_left_or_right_or_close_in_closing_bracket\
    \ = ends_with_left_or_right_or_close || brackets[end] == \"<\" \n    return ends_with_left_or_right_or_close_in_closing_bracket\n\
    using Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    <>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpkp8ij0zb.jl:14\nin expression starting at /tmp/tmpkp8ij0zb.jl:14\n"
  stdout: ''
  timestamp: 1660008987
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    \"\"\" A function\
    \ which returns true if the brackets in a string are\n    correctly opening and\
    \ closing brackets.\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t\
    @test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\"\
    ) == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") ==\
    \ false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\
    \t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpljahsv3r.jl:1\nin expression starting at /tmp/tmpljahsv3r.jl:1\n"
  stdout: ''
  timestamp: 1660008987
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\
    <\" or brackets == \"<<\" or brackets == \"<<<\":\n        return true\n    if\
    \ brackets == \"<>\" or brackets == \"<>\" or brackets == \"<<<\" or brackets\
    \ == \"<<<=\":\n        return false\n    if brackets == \"<>=\":\n        return\
    \ true\n    if brackets == \"<=\":\n        return false\n    if brackets == \"\
    >\" or brackets == \">>\" or brackets == \">>>\" or brackets == \">>>=\":\n  \
    \      return true\n    if brackets == \"=>\" or brackets == \"=>=\":\n      \
    \  return true\n    if brackets == \"=\":\n        return false\n    if brackets\
    \ == \"==\":\n        return true\n    if brackets == \"<=>\":\n        return\
    \ true\n    if brackets == \"<=>=\":\n        return false\n    if brackets ==\
    \ \"!=\":\n        return true\n    if brackets == \"==\":\n        return true\n\
    \    if brackets == \"!=\":\n        return true\n    if brackets == \"==\":\n\
    \        return true\n    if brackets == \"<=\":\n        return true\n    return\
    \ false\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    <>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"brackets\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpko7lxy54.jl:14\nin expression starting at /tmp/tmpko7lxy54.jl:14\n"
  stdout: ''
  timestamp: 1660008987
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.to_string()\n\
    \    for i in 1..length(brackets)\n        if brackets[i] != brackets[i-1]\n \
    \           return False\n    end\n    return true\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\
    \t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") ==\
    \ true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp94m1ax7z.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp94m1ax7z.jl:1\n\
    in expression starting at /tmp/tmp94m1ax7z.jl:1\n"
  stdout: ''
  timestamp: 1660008987
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    \"\"\"\n    correct_bracketing(brackets::String)::Bool\n\
    using Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    <>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpczqqtzxb.jl:1\nin expression starting at /tmp/tmpczqqtzxb.jl:1\n"
  stdout: ''
  timestamp: 1660008987
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    <\", \">\")\n    brackets = brackets.replace(\">\", \">>\")\n    brackets = brackets.replace(\"\
    <\", \">\")\n    brackets = brackets.replace(\">\", \"<\")\n    brackets = brackets.replace(\"\
    >\", \">>\")\n    brackets = brackets.replace(\"<<\", \">><\")\n    brackets =\
    \ brackets.replace(\"<\", \">\")\n    brackets = brackets.replace(\">\", \">>\"\
    )\n    brackets = brackets.replace(\"<<\", \">><\")\n    brackets = brackets.replace(\"\
    <<\", \">><\")\n    brackets = brackets.replace(\">>\", \">><\")\n    brackets\
    \ = brackets.replace(\"<<\", \">><\")\n    brackets = brackets.replace(\">>\"\
    , \">><\")\n    brackets = brackets.replace(\">>\", \">><\")\n    brackets = brackets.replace(\"\
    >>\", \">><\")\n    brackets = brackets.replace(\">>\", \">><\")\n    brackets\
    \ = brackets.replace(\">>\", \">><\")\n    brackets = brackets.replace(\">>\"\
    , \">><\")\n    brackets = brackets.replace(\">>\", \">><\")\n    brackets = brackets.replace(\"\
    >>\", \">><\")\n    brackets = brackets.replace(\">>\", \">><\")\n    brackets\
    \ = brackets.replace(\">>\", \">><\")\n    brackets = brackets.replace(\">>\"\
    , \">><\")\n    brackets = brackets.replace(\">>\", \">><\")\n    brackets = brackets.replace(\"\
    >>\", \">><\")\n    brackets = brackets.replace(\">>\", \">><\")\n    brackets\
    \ = brackets.replace(\">>\", \">><\")\n    brackets = brackets.replace(\">>\"\
    , \">><\")\n    brackets = brackets.replace(\">>\", \">><\")\n    brackets = brackets.replace(\"\
    >>\", \">><\")\n    brackets = brackets.replace(\">>\", \">><\")\n    brackets\
    \ = brackets.replace(\">>\", \">><\")\n    brackets = brackets.replace(\">>\"\
    , \">><\")\n    brackets = brackets.replace(\">>\", \">><\")\n    brackets = brackets.replace(\"\
    >>\", \">><\")\n    brackets = brackets.replace(\">>\", \">><\")\n    brackets\
    \ = brackets.replace(\">>\", \">><\")\n    brackets = brackets.replace(\">>\"\
    , \">><\")\n    brackets = brackets.replace(\">>\", \">><\")\n    brackets = brackets.replace(\"\
    >>\", \">><\")\n    brackets = brackets.replace(\">>\", \">><\")\n    brackets\
    \ = brackets.replace(\">>\", \">><\")\n    brackets = brackets.replace(\">>\"\
    , \">><\")\n    brackets = brackets.replace(\">>\nusing Test\n\n@testset begin\n\
    \ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \">\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0si6hk_9.jl:63\nin expression starting at\
    \ /tmp/tmp0si6hk_9.jl:63\n"
  stdout: ''
  timestamp: 1660008987
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    bracket_stack =\
    \ brackets\n    bracket_stacks = brackets[brackets.len()-1]\n    loop do\n   \
    \     push!(bracket_stack, pop!(bracket_stacks))\n    end\n    return brackets\
    \ == \"<>\"\nend\n</cell>\n<code language=julia-1.6>\n@assert correct_bracketing(\"\
    <\")\n@assert correct_bracketing(\"<>\")\n@assert correct_bracketing(\"<<><>>\"\
    )\n@assert correct_bracketing(\"><<>\")\n</cell>\n<text>\nProblem 3: Counting\
    \ Balloons\nNow you are going to write a function count_balloons(balloons) that\
    \ counts the number of balloons\n(pairs of brackets, like (<>)) in balloons.\n\
    using Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    <>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"function\" at /tmp/tmpr7opif5t.jl:13 expected\
    \ \"end\", got \"do\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpr7opif5t.jl:16\n\
    in expression starting at /tmp/tmpr7opif5t.jl:16\n"
  stdout: ''
  timestamp: 1660008987
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    # Brackets is a\
    \ string of \"<\" and \">\"\n    for i in brackets do \n        if i != \"<\"\
    \ and i != \"<\" then return false \n    else true \nend \n</code>\n<|/ a tags=arrays,julia,string\
    \ |>\n<| c |>\nThis should work, but it's pretty inefficient. You don't need to\
    \ check the whole string just to see if a given opening bracket is followed by\
    \ an opening bracket, because you already know that the string is not empty. Also,\
    \ it's preferable to use `===` instead of `==` when comparing against strings;\
    \ it's safer.\n<|/ c |>\n<| c |>\nthank you for the comments, I just edited my\
    \ answer to take into account your suggestions. I agree that checking if the string\
    \ is empty would be a better solution.\n<|/ c |>\n<| a tags=arrays,julia,string\
    \ |>\nHere are a few other solutions:\n<code>\njulia> brackets = collect(string.(\"\
    <<><>>\"))\n7-element Array{String,1}:\n \"<\"\n \">\"\n \"<\"\n \">\"\n \"<\"\
    \n \">\"\n \"<\"\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t\
    @test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\"\
    ) == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") ==\
    \ false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\
    \t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid \"do\" syntax\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmppvavq0dp.jl:15\nin expression starting at /tmp/tmppvavq0dp.jl:15\n"
  stdout: ''
  timestamp: 1660008987
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    bracket_stack::Stack[Char]\
    \ = Stack[Char]([])\n    bracket_stack_top::Int = -1\n    \n    for c in brackets\n\
    \        if c == '<' push(c) else if c == '>' pop() else if c == '('\n       \
    \     push(c)\n            if bracket_stack_top == -1 then\n                bracket_stack_top\
    \ = length(bracket_stack)\n            elseif length(bracket_stack) < bracket_stack_top\
    \ then\n                bracket_stack = bracket_stack ++ ['(']\n            end\n\
    \        elseif c == '(' && bracket_stack_top > 0 &&\n            length(bracket_stack)\
    \ > bracket_stack_top then\n            pop() ! bracket_stack\n            bracket_stack_top\
    \ -= 1\n        elseif c == '(' && bracket_stack_top == -1 then\n            push(c)\
    \ ! bracket_stack\n            bracket_stack_top = length(bracket_stack)\n   \
    \     elseif c == ')' && bracket_stack_top > 0 &&\n            length(bracket_stack)\
    \ > bracket_stack_top then\n            pop() ! bracket_stack\n            bracket_stack_top\
    \ -= 1\n        elseif c == ')' && bracket_stack_top == -1 then\n            push(c)\
    \ ! bracket_stack\n            bracket_stack_top = length(bracket_stack)\n   \
    \     elseif c == '>' && (bracket_stack_top > 0 &&\n            length(bracket_stack)\
    \ > bracket_stack_top) then\n            pop() ! bracket_stack\n            bracket_stack_top\
    \ -= 1\n        elseif c == '>' && (bracket_stack_top == -1 ||\n            length(bracket_stack)\
    \ < bracket_stack_top) then\n            push(c) ! bracket_stack\n           \
    \ bracket_stack_top = length(bracket_stack)\n        elseif c == '<' && length(bracket_stack)\
    \ > 0 &&\n            (bracket_stack_top < 0 || length(bracket_stack) < bracket_stack_top)\
    \ then\n            pop() ! bracket_stack\n            bracket_stack_top += 1\n\
    \        elseif c == '<' && length(bracket_stack) == 0 &&\n            bracket_stack_top\
    \ < 0 then\n            push(c) ! bracket_stack\n            bracket_stack_top\
    \ = length(bracket_stack)\n        end\n    end\n    \n    return bracket_stack_top\
    \ == -1\nend\n</cell>\n<code language=julia-0.6>\n\"\"\"\ncount_\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\"\
    ) == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxmc3wnl5.jl:18\nin expression starting at\
    \ /tmp/tmpxmc3wnl5.jl:18\n"
  stdout: ''
  timestamp: 1660008987
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    \"\"\"\n    correct_bracketing\
    \ receives a string with brackets inside (like \"()[]{}<>\")\n    and returns\
    \ a boolean indicating whether all brackets are matched\n    correctly.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    <>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptuk0qyh_.jl:1\nin expression starting at /tmp/tmptuk0qyh_.jl:1\n"
  stdout: ''
  timestamp: 1660008987
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    return (\n     \
    \   brackets !~ RE(\"\"\"\n            (?: [^<>]* ) |  # no less than opening\
    \ bracket\n            (?: [^<>]* [^<>]* ) |  # no more than two opening brackets\n\
    \            ^ ( <> )+ $  # at least one closing bracket\n        \"\"\", re.X)\n\
    \    )\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    <>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpuh1apcwi.jl:15\nin expression starting at\
    \ /tmp/tmpuh1apcwi.jl:15\n"
  stdout: ''
  timestamp: 1660008987
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    \"\"\"\n    Corrects\
    \ the bracketing of brackets so that it matches the string brackets.\n    Returns\
    \ a Boolean representing whether the bracketing is correct.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\
    \t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") ==\
    \ true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzorl_u4p.jl:1\nin expression starting at /tmp/tmpzorl_u4p.jl:1\n"
  stdout: ''
  timestamp: 1660008987
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\
    \" then \n        return true\n    else if brackets[0] == \"<\" then \n      \
    \  return false\n    else if brackets[len (brackets) - 1] == \">\" then \n   \
    \     return false\n    else\n        return correct_bracketing(brackets[1:len\
    \ (brackets) - 1]) || correct_bracketing(brackets[2:len (brackets)])\nend\n</cell>\n\
    <code language=julia-1.5>\n\"\"\"\n    correct_bracketing(brackets::String)::Bool\n\
    \    b is a string of a set of brackets.\n    return true if every opening bracket\
    \ has a corresponding closing bracket.\n    \n    >>> correct_bracketing(\"<\"\
    )\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    <>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnbqcx0dh.jl:16\nin expression starting at\
    \ /tmp/tmpnbqcx0dh.jl:16\n"
  stdout: ''
  timestamp: 1660008987
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    # loop to keep track\
    \ of whether or not a closing bracket is present for every\n    # opening bracket.\n\
    \    for opening_bracket in brackets\n        if opening_bracket <> brackets[1]\n\
    \            return false\n    return true\n    end\n</code>\n<|/ a tags=string,haskell,brackets\
    \ |>\n<| c |>\nThis is a good way to think about it.  I might suggest that there\
    \ should be a way to get rid of the empty string `\"\"` from `brackets` and replace\
    \ it with `\"()\"` so that the result is that `(\"\")` is replaced with `\"()\"\
    ` and `\"()\"` is replaced with `\"(())\"` etc. to cover all possible combinations.\n\
    <|/ c |>\n<| c |>\nYes that would be a good way to improve this.\n<|/ c |>\n<|\
    \ a dscore=4 |>\nThe problem is more interesting than you might think. The solution\
    \ I came up with is based around looking at what kind of bracket you are looking\
    \ at, and what is the next char after that bracket. If that next character is\
    \ also a bracket, then it is a pair bracket, and if not, it is a non-bracket bracket.\n\
    This makes use of lazy evaluation, so you can run it on any string or any length\
    \ string, but it will not run on large strings or strings where the brackets are\
    \ out of order.\n<code>\nisBracket :: Char -> String -> Bool\nisBracket c s =\
    \ case compare c s of\n    LT -> False\n    EQ -> False\n    GT -> True\n    otherwise\
    \ -> False\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t\
    @test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"\
    <><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") ==\
    \ true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\"\
    ) == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") ==\
    \ false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\
    \t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \">\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdrgh19qr.jl:17\nin expression starting at\
    \ /tmp/tmpdrgh19qr.jl:17\n"
  stdout: ''
  timestamp: 1660008988
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    \n    \"\"\"\n \
    \   correct bracketing based on a bracketing scheme\n    brackets is a string\
    \ of \"<\" and \">\".\n    return true if every opening bracket has a corresponding\
    \ closing bracket.\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t\
    @test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\"\
    ) == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") ==\
    \ false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\
    \t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp41zfjuem.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp41zfjuem.jl:1\n\
    in expression starting at /tmp/tmp41zfjuem.jl:1\n"
  stdout: ''
  timestamp: 1660008988
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    \"\"\"\n    correct_bracketing(brackets)\
    \ :: Bool\n    \n    Check whether brackets has all opening brackets preceeded\
    \ by a closing bracket.\n    \n    >>> correct_bracketing(\"<<><>>\")\n    true\n\
    \    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"<>\"\
    )\n    true\n    >>> correct_bracketing(\"<<><\")\n    false\n    >>> correct_bracketing(\"\
    <<\")\n    false\n    \"\"\"\n    function correct_bracketing(brackets::String)::Bool\
    \ where \n        \n        function\n        \n        if brackets.length==1\n\
    \            return false\n        \n        if brackets.startswith(\"<\") &&\
    \ brackets.endswith(\">\")\n            return true\n        \n        if brackets.startswith(\"\
    <\") && brackets.endswith(\"}\")\n            return false\n        \n       \
    \ if brackets.startswith(\"#\") && brackets.endswith(\"}\")\n            return\
    \ true\n        \n        if brackets.startswith(\"#\") && brackets.endswith(\"\
    <\")\n            return false\n        \n        if brackets.startswith(\"#\"\
    ) && brackets.endswith(\"{\")\n            return true\n        \n        if brackets.startswith(\"\
    >\") && brackets.endswith(\">\")\n            return true\n        \n        if\
    \ brackets.startswith(\">\") && brackets.endswith(\"{\")\n            return false\n\
    \        \n        if brackets.startswith(\">\") && brackets.endswith(\"}\")\n\
    \            return true\n        \n        if brackets.startswith(\">\") && brackets.endswith(\"\
    {\")\n            return false\n        \n        if brackets.startswith(\"#\"\
    ) && brackets.endswith(\"<\")\n            return false\n        \n        if\
    \ brackets.startswith(\"#\") && brackets.endswith(\"}\")\n            return false\n\
    \        \n        if brackets.startswith(\"#\") && brackets.endswith(\"{\")\n\
    \            return false\n        \n        if brackets.startswith(\">\") &&\
    \ brackets.endswith(\">\")\n            return false\n        \n        if brackets.startswith(\"\
    >\") && brackets.endswith(\"{\")\n            return false\n        \n       \
    \ if brackets.startswith(\">\") && brackets.endswith(\"}\")\n            return\
    \ false\n        \n        if brackets.startswith(\">\") && brackets.endswith(\"\
    {\")\n            return false\n        \n        if brackets.startswith(\">\"\
    ) && brackets.endswith(\"{\")\n            return false\n        \n        if\
    \ brackets.startswith(\">\") && brackets.endswith(\"{\")\n            return false\n\
    \        \n        if brackets.startswith(\">\") && brackets.endswith(\"{\")\n\
    \            return false\n        \n        if brackets.startswith(\">\") &&\
    \ brackets.endswith(\"{\")\n            return false\n        \n        if brackets.startswith(\"\
    >\") && brackets.endswith(\"{\")\n            return false\n        \n       \
    \ if brackets.startswith(\">\") && brackets.endswith(\"{\")\n\nusing Test\n\n\
    @testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") ==\
    \ true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid name \"if\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp0mnng9dz.jl:34\nin expression starting at /tmp/tmp0mnng9dz.jl:34\n"
  stdout: ''
  timestamp: 1660008988
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    bracket_count::Int\
    \ = 0\n    for b in brackets do\n        if b == \"<\" then\n            bracket_count\
    \ := bracket_count + 1\n        elseif b == \">\" then\n            if bracket_count\
    \ > 0 then\n                bracket_count := bracket_count - 1\n            else\n\
    \                return false\n        end\n    end\n    return bracket_count\
    \ == 0\nend\n</cell>\n<text>\nThe main function\nNow let's write a function that\
    \ takes a string and determines whether the input string is valid or not. We've\
    \ already written a function that checks to see if the input string is all lower\
    \ case, but let's reuse that to check other characters:\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\
    \t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") ==\
    \ true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid \"do\" syntax\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpnq6ccsq3.jl:15\nin expression starting at /tmp/tmpnq6ccsq3.jl:15\n"
  stdout: ''
  timestamp: 1660008988
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n\"\"\"\n    correct_bracketing\
    \ (brackets::String)::Bool\n    Check if brackets contains correct bracketing.\n\
    \"\"\"\n    if brackets.length ==1 || brackets.length==0\n        true\n    else\n\
    \        brackets.split(\",\")\n            .map(parse_correct)\n            .filter(valid)\n\
    \            .forall(bracketing::Bool)\n    return bracketing\nend \n</cell>\n\
    <code language=julia-1.0>\ncorrect_bracketing(brackets=\"<,>\")\n</cell>\n<code\
    \ language=julia-1.0>\ncorrect_bracketing(brackets=\"<,><,<><,<,<>\")\n</cell>\n\
    <code language=julia-1.0>\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t\
    @test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\"\
    ) == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") ==\
    \ false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\
    \t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid identifier name \".\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpp2qanojt.jl:22\nin expression starting at\
    \ /tmp/tmpp2qanojt.jl:22\n"
  stdout: ''
  timestamp: 1660008988
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\
    \"\n        true\n    else\n        brackets\n            |> String.split\n  \
    \          |> map (fun x -> x = \">>>\" || x = \"<<<\" || x = \"<\" || x = \"\
    >\" || x = \"<=\")\n            |> filter (fun x -> not x)\n            |> map\
    \ (fun x -> x = \">>>\" || x = \"<<<\" || x = \"<\" || x = \">\" || x = \"<=\"\
    )\n            |> filter (fun x -> not x)\n            |> map (fun x -> x = \"\
    >>>\" || x = \"<<<\" || x = \"<\" || x = \">\" || x = \"<=\")\n            |>\
    \ filter (fun x -> not x)\n            |> map (fun x -> x = \">>>\" || x = \"\
    <<<\" || x = \"<\" || x = \">\" || x = \"<=\")\n            |> filter (fun x ->\
    \ not x)\n            |> map (fun x -> x = \">>>\" || x = \"<<<\" || x = \"<\"\
    \ || x = \">\" || x = \"<=\")\n            |> filter (fun x -> not x)\n      \
    \      |> map (fun x -> x = \">>>\" || x = \"<<<\" || x = \"<\" || x = \">\" ||\
    \ x = \"<=\")\n            |> filter (fun x -> not x)\n            |> map (fun\
    \ x -> x = \">>>\" || x = \"<<<\" || x = \"<\" || x = \">\" || x = \"<=\")\n \
    \           |> filter (fun x -> not x)\n            |> map (fun x -> x = \">>>\"\
    \ || x = \"<<<\" || x = \"<\" || x = \">\" || x = \"<=\")\n            |> filter\
    \ (fun x -> not x)\n            |> map (fun x -> x = \">>>\" || x = \"<<<\" ||\
    \ x = \"<\" || x = \">\" || x = \"<=\")\n            |> filter (fun x -> not x)\n\
    \            |> map (fun x -> x = \">>>\" || x = \"<<<\" || x = \"<\" || x = \"\
    >\" || x = \"<=\")\n            |> filter (fun x -> not x)\n            |> map\
    \ (fun x -> x = \">>>\" || x = \"<<<\" || x = \"<\" || x = \">\" || x = \"<=\"\
    )\n            |> filter (fun x -> not x)\n            |> map (fun x -> x = \"\
    >>>\" || x = \"<<<\" || x = \"<\" || x = \">\" || x = \"<=\")\n            |>\
    \ filter (fun x -> not x)\n            |> map (fun x -> x = \">>>\" || \nusing\
    \ Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    <>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"|>\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpop7v5acv.jl:18\nin expression starting at\
    \ /tmp/tmpop7v5acv.jl:18\n"
  stdout: ''
  timestamp: 1660008988
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    \"\"\"\n    Corrects\
    \ bracketing to allow for recursive parsing.\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"<>\") == true)\n\t@test(candidate(\"\
    <<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\") == true)\n\t@test(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\
    \t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"<\") == false)\n\t\
    @test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"\
    <<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"\
    <><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmorjy4on.jl:1\nin expression starting at /tmp/tmpmorjy4on.jl:1\n"
  stdout: ''
  timestamp: 1660008988
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    # ensuring brackets\
    \ is a string of \"<\" and \">\".\n    let brackets = brackets.replace(\"<\",\
    \ \"\")\n    let brackets = brackets.replace(\">\", \"\")\n    \n    for i in\
    \ brackets.split(\",\")\n        if i <> \"\"\n            then false\n      \
    \      else true\n    end\nend\n</cell>\n<code language=julia-1.6>\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"<>\"\
    ) == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
    ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
    <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
    <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\"\
    ) == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
    ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \">\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplj8cwxpv.jl:19\nin expression starting at\
    \ /tmp/tmplj8cwxpv.jl:19\n"
  stdout: ''
  timestamp: 1660008988
- exit_code: 1
  program: "\"\"\" brackets is a string of \"<\" and \">\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    <\")\n    false\n    >>> correct_bracketing(\"<>\")\n    true\n    >>> correct_bracketing(\"\
    <<><>>\")\n    true\n    >>> correct_bracketing(\"><<>\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets == \"<\"\
    \ \nend \nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t\
    @test(candidate(\"<>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"\
    <><><<><>><>\") == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") ==\
    \ true)\n\t@test(candidate(\"<<<><>>>>\") == false)\n\t@test(candidate(\"><<>\"\
    ) == false)\n\t@test(candidate(\"<\") == false)\n\t@test(candidate(\"<<<<\") ==\
    \ false)\n\t@test(candidate(\">\") == false)\n\t@test(candidate(\"<<>\") == false)\n\
    \t@test(candidate(\"<><><<><>><>><<>\") == false)\n\t@test(candidate(\"<><><<><>><>>><>\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 7 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp9ll1wo7s.jl:18

    '
  stdout: "test set: Test Failed at /tmp/tmp9ll1wo7s.jl:21\n  Expression: candidate(\"\
    <>\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp9ll1wo7s.jl:21 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp9ll1wo7s.jl:20\ntest set: Test Failed at /tmp/tmp9ll1wo7s.jl:22\n\
    \  Expression: candidate(\"<<><>>\") == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9ll1wo7s.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9ll1wo7s.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp9ll1wo7s.jl:23\n  Expression: candidate(\"<><><<><>><>\")\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp9ll1wo7s.jl:23 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp9ll1wo7s.jl:20\ntest set: Test Failed at /tmp/tmp9ll1wo7s.jl:24\n\
    \  Expression: candidate(\"<><><<<><><>><>><<><><<>>>\") == true\n   Evaluated:\
    \ false == true\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9ll1wo7s.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9ll1wo7s.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp9ll1wo7s.jl:27\n  Expression: candidate(\"<\") == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] mac"
  timestamp: 1660008989
