language: jl
name: HumanEval_120_maximum
results:
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k > length(arr)\n        throw(ArgumentError(\"k must be less than length\"\
    ))\n    end\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpv5wcq5va.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpv5wcq5va.jl:1\n\
    in expression starting at /tmp/tmpv5wcq5va.jl:1\n"
  stdout: ''
  timestamp: 1659978151
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    max_arr = Array{Int64}(undef, k)\n    for i in 1:k\n        max_arr[i] =\
    \ maximum(arr[i], max_arr[i])\n    end\n    return max_arr\nend\n\"\"\"\n    Given\
    \ a vector arr of integers, return a sorted vector \n    of length k with the\
    \ minimum k numbers in arr.\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\
    \t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4],\
    \ 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpizn49o3u.jl:32\nin expression starting at\
    \ /tmp/tmpizn49o3u.jl:32\n"
  stdout: ''
  timestamp: 1659978152
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    return maximum_rec(arr, k, 0)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 11 errored,
    0 broken.

    in expression starting at /tmp/tmp34rxas59.jl:30

    '
  stdout: "test set: Error During Test at /tmp/tmp34rxas59.jl:33\n  Test threw exception\n\
    \  Expression: candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  UndefVarError: maximum_rec\
    \ not defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n \
    \    @ Main /tmp/tmp34rxas59.jl:26\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp34rxas59.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp34rxas59.jl:32\ntest set:\
    \ Error During Test at /tmp/tmp34rxas59.jl:34\n  Test threw exception\n  Expression:\
    \ candidate([4, -4, 4], 2) == [4, 4]\n  UndefVarError: maximum_rec not defined\n\
    \  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmp34rxas59.jl:26\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp34rxas59.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp34rxas59.jl:32\ntest set:\
    \ Error During Test at /tmp/tmp34rxas59.jl:35\n  Test threw exception\n  Expression:\
    \ candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n  UndefVarError: maximum_rec\
    \ not defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n \
    \    @ Main /tmp/tmp34rxas59.jl:26\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp34rxas59.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp34rxas59.jl:32\ntest set:\
    \ Error During Test at /tmp/tmp34rxas59.jl:36\n  Test threw exception\n  Expression:\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n  UndefVarError:\
    \ maximum_rec not defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)"
  timestamp: 1659978154
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    \"\"\"\n    Given a vector of integers and a positive integer k, return the\
    \ k largest \n    numbers in the vector arr.\n    \"\"\"\n    maximum_idx = k\n\
    \    maximum_idx = maximum_idx if maximum_idx >= length(arr) else  maximum_idx-1\n\
    \    maximum_value = arr[maximum_idx]\nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"function\" at /tmp/tmprp35z8az.jl:25 expected\
    \ \"end\", got \"if\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmprp35z8az.jl:31\n\
    in expression starting at /tmp/tmprp35z8az.jl:31\n"
  stdout: ''
  timestamp: 1659978152
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k > length(arr)\n        return arr[end]\n    else\n        maximum.arr\
    \ += maximum(arr, k - 1)\n        return maximum(maximum.arr, k)\n    end\nend\n\
    maximum.arr = Vector{Int64}()\nmaximum(maximum.arr, k)\nmaximum\n</cell>\n<text>\n\
    Find the min in a vector\nGiven a vector arr of integers, find the min and return\
    \ the index and the value.\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\
    \t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4],\
    \ 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: type #maximum has no field arr\nStacktrace:\n [1] setproperty!(x::Function,\
    \ f::Symbol, v::Vector{Int64})\n   @ Base ./Base.jl:43\n [2] top-level scope\n\
    \   @ /tmp/tmpedjxt_9q.jl:33\nin expression starting at /tmp/tmpedjxt_9q.jl:33\n"
  stdout: ''
  timestamp: 1659978152
- exit_code: -1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k == 0 \n        return arr\n    else\n        maximum1(arr, k-1)\n  \
    \  end\nend\nmaximum(arr::Vector{Int64}, k::Int64) = maximum(maximum(arr, k),\
    \ length(arr))\nmaximum(arr::Vector{Int64}) = maximum(maximum(arr), length(arr))\n\
    maximum(arr::Vector) = maximum(maximum(arr))\nusing Test\n\n@testset begin\n\n\
    candidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659978156
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    # base case: \n    if k == 1\n        return arr\n    else\n        # initialize\
    \ max \n        max = -Inf \n        # initialize current index \n        current_index\
    \ = 0 \n        # loop through array \n        for element in arr\n          \
    \  # update max \n            if element > max\n                max = element\
    \ \n                current_index = 1 \n            # update max \n          \
    \  elif element == max\n                current_index = 1 \n            # update\
    \ max if current index is equal to k \n            elseif current_index == k\n\
    \                break\n        end\n        return arr[k+current_index-1:k+current_index+1]\n\
    \    end\nend\n</cell>\n<code language=julia-1.3>\nmaximum(arr::Vector{Int64},\
    \ k::Int64)\n</cell>\n<text>\nmaximum_in_list\nGiven an array arr and a value\
    \ val, find the index of val in the array arr. If val is not in arr, return -1.\n\
    using Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4,\
    \ 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"element\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpfxlr072p.jl:41\nin expression starting at /tmp/tmpfxlr072p.jl:41\n"
  stdout: ''
  timestamp: 1659978151
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k < 1 \n        error(\"Invalid k\") \n    end\nusing Test\n\n@testset\
    \ begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3,\
    \ 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2,\
    \ 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1,\
    \ 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0,\
    \ 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpelblpa5y.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpelblpa5y.jl:1\n\
    in expression starting at /tmp/tmpelblpa5y.jl:1\n"
  stdout: ''
  timestamp: 1659978152
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k <= length(arr) \n        result = Vector{Int64}(undef, k) \n       \
    \ result[:] = 0\n        for i in range(k)\n            if arr[i] > result[i]\
    \ \n                result[i] = arr[i] \n            end \n        end \n    \
    \    return result \n    else \n        return arr \n    end \nend \nusing Test\n\
    \n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) ==\
    \ [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 11 errored,
    0 broken.

    in expression starting at /tmp/tmpwczbnclv.jl:41

    '
  stdout: "test set: Error During Test at /tmp/tmpwczbnclv.jl:44\n  Test threw exception\n\
    \  Expression: candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  ArgumentError: indexed\
    \ assignment with a single value to possibly many locations is not supported;\
    \ perhaps use broadcasting `.=` instead?\n  Stacktrace:\n   [1] setindex_shape_check(::Int64,\
    \ ::Int64)\n     @ Base ./indices.jl:261\n   [2] _unsafe_setindex!(#unused#::IndexLinear,\
    \ A::Vector{Int64}, x::Int64, I::Base.Slice{Base.OneTo{Int64}})\n     @ Base ./multidimensional.jl:903\n\
    \   [3] _setindex!\n     @ ./multidimensional.jl:894 [inlined]\n   [4] setindex!\n\
    \     @ ./abstractarray.jl:1315 [inlined]\n   [5] maximum(arr::Vector{Int64},\
    \ k::Int64)\n     @ Main /tmp/tmpwczbnclv.jl:28\n   [6] macro expansion\n    \
    \ @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [7] macro expansion\n     @ /tmp/tmpwczbnclv.jl:44 [inlined]\n   [8] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [9] top-level scope\n     @ /tmp/tmpwczbnclv.jl:43\ntest set:\
    \ Error During Test at /tmp/tmpwczbnclv.jl:45\n  Test threw exception\n  Expression:\
    \ candidate([4, -4, 4], 2) == [4, 4]\n  ArgumentError: indexed assignment with\
    \ a single value to possibly many locations is not supported; perhaps use broadcasting\
    \ `.=` instead?\n  Stacktrace:\n   [1] setindex_shape_check(::Int64, ::Int64)\n\
    \     @ Base ./indices.jl:261\n   [2] _unsafe_setindex!(#unused#::IndexLinear,\
    \ A::Vector{Int64}, x::Int64, I::Base.Slice{Base.OneTo{Int64}})\n     @ Base ./multidimensional.jl:903\n\
    \   [3] _setindex!\n     @ ./multidimensional.jl:894 [inlined]\n   [4] setindex!\n\
    \     @ ./abstractarray.jl:1315 [inlined]\n   [5] maximum(arr::Vector{Int64},\
    \ k::Int64)\n     @ Main /tmp/tmpwczbnclv.jl:28\n   [6] macro expansion\n    \
    \ @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [7] macro expansion\n     @ /tmp/tmpwczbnclv.jl:45 [inlined]\n   [8] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [9] top-level scope\n  "
  timestamp: 1659978154
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    k = maximum_ind(arr, k)\n    arr = arr[k]\n    maximum = arr\n    maximum.sort!(maximum)\n\
    \    return maximum\nend\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\
    \t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4],\
    \ 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 11 errored,
    0 broken.

    in expression starting at /tmp/tmp0owz1cjg.jl:34

    '
  stdout: "test set: Error During Test at /tmp/tmp0owz1cjg.jl:37\n  Test threw exception\n\
    \  Expression: candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  UndefVarError: maximum_ind\
    \ not defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n \
    \    @ Main /tmp/tmp0owz1cjg.jl:26\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp0owz1cjg.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp0owz1cjg.jl:36\ntest set:\
    \ Error During Test at /tmp/tmp0owz1cjg.jl:38\n  Test threw exception\n  Expression:\
    \ candidate([4, -4, 4], 2) == [4, 4]\n  UndefVarError: maximum_ind not defined\n\
    \  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmp0owz1cjg.jl:26\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp0owz1cjg.jl:38 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp0owz1cjg.jl:36\ntest set:\
    \ Error During Test at /tmp/tmp0owz1cjg.jl:39\n  Test threw exception\n  Expression:\
    \ candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n  UndefVarError: maximum_ind\
    \ not defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n \
    \    @ Main /tmp/tmp0owz1cjg.jl:26\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp0owz1cjg.jl:39 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp0owz1cjg.jl:36\ntest set:\
    \ Error During Test at /tmp/tmp0owz1cjg.jl:40\n  Test threw exception\n  Expression:\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n  UndefVarError:\
    \ maximum_ind not defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)"
  timestamp: 1659978154
- exit_code: -1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    max_els = maximum(arr, k)\n    if max_els == []\n        return [];\n   \
    \ elseif max_els == k\n        return arr[1 : k];\n    else\n        return arr[1\
    \ : length(arr) - max_els + 1] + max_els;\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3,\
    \ 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2,\
    \ 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1,\
    \ 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0,\
    \ 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659978156
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k==1\n        maximum = arr\n    else\n        maximum = maximum.(maximum(arr,\
    \ k-1))\n    end\n    return maximum\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 2 failed, 9 errored,
    0 broken.

    in expression starting at /tmp/tmp_wnsx9pe.jl:35

    '
  stdout: "test set: Error During Test at /tmp/tmp_wnsx9pe.jl:38\n  Test threw exception\n\
    \  Expression: candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  UndefVarError: maximum\
    \ not defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n \
    \    @ Main /tmp/tmp_wnsx9pe.jl:29\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp_wnsx9pe.jl:38 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp_wnsx9pe.jl:37\ntest set:\
    \ Error During Test at /tmp/tmp_wnsx9pe.jl:39\n  Test threw exception\n  Expression:\
    \ candidate([4, -4, 4], 2) == [4, 4]\n  UndefVarError: maximum not defined\n \
    \ Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmp_wnsx9pe.jl:29\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp_wnsx9pe.jl:39 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp_wnsx9pe.jl:37\ntest set:\
    \ Test Failed at /tmp/tmp_wnsx9pe.jl:40\n  Expression: candidate([-3, 2, 1, 2,\
    \ -1, -2, 1], 1) == [2]\n   Evaluated: [-3, 2, 1, 2, -1, -2, 1] == [2]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_wnsx9pe.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_wnsx9pe.jl:37\ntest set: Error\
    \ During Test at /tmp/tmp_wnsx9pe.jl:41\n  Test threw exception\n  Expression:\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n  UndefVarError:\
    \ maximum not defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n\
    \     @ Main /tmp/tmp_wnsx9pe.jl:29\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 "
  timestamp: 1659978155
- exit_code: -1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k == 0 \n        return sort(arr)\n    else \n        max_value = maximum(arr[1:k],\
    \ k - 1)\n        insert(max_value, arr[k], k)\n        return arr\n    end\n\
    end\nmaximum(a, k) = maximum(a, k - 1)\nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: Timeout
  stderr: 'b''ERROR: LoadError: '''
  stdout: 'b''test set: Error During Test at /tmp/tmp4irzyr7i.jl:40\n  Test threw
    exception\n  Expression: candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  UndefVarError:
    insert not defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @
    Main /tmp/tmp4irzyr7i.jl:30\n   [2] maximum(arr::Vector{Int64}, k::Int64) (repeats
    2 times)\n     @ Main /tmp/tmp4irzyr7i.jl:29\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [4] macro expansion\n     @ /tmp/tmp4irzyr7i.jl:40 [inlined]\n   [5]
    macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [6] top-level scope\n     @ /tmp/tmp4irzyr7i.jl:39\ntest set: Error
    During Test at /tmp/tmp4irzyr7i.jl:41\n  Test threw exception\n  Expression: candidate([4,
    -4, 4], 2) == [4, 4]\n  UndefVarError: insert not defined\n  Stacktrace:\n   [1]
    maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmp4irzyr7i.jl:30\n   [2]
    maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmp4irzyr7i.jl:29\n   [3]
    macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [4] macro expansion\n     @ /tmp/tmp4irzyr7i.jl:41 [inlined]\n   [5]
    macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [6] top-level scope\n     @ /tmp/tmp4irzyr7i.jl:39\ntest set: Error
    During Test at /tmp/tmp4irzyr7i.jl:42\n  Test threw exception\n  Expression: candidate([-3,
    2, 1, 2, -1, -2, 1], 1) == [2]\n  UndefVarError: insert not defined\n  Stacktrace:\n   [1]
    maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmp4irzyr7i.jl:30\n   [2]
    macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmp4irzyr7i.jl:42 [inlined]\n   [4]
    macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmp4irzyr7i.jl:39\ntest set: Error
    During Test at /tmp'
  timestamp: 1659978155
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k <= 0\n    error(\"k should be positive\")\n    end\n    if length(arr)\
    \ <= k\n    error(\"k should not be greater than the number of elements\")\n \
    \   end\n    maximum_values = copy(arr)\n    maximum_values[end + 1 : end]= maximum_values[end\
    \ + 1 : end][end - k + 1 : end]\n    maximum_values[end - k + 1 : end]= maximum_values[end\
    \ - k + 1 : end][end - 1 : end]\n    return maximum_values\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4,\
    \ -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 11 errored,
    0 broken.

    in expression starting at /tmp/tmpd0iq8khg.jl:39

    '
  stdout: "test set: Error During Test at /tmp/tmpd0iq8khg.jl:42\n  Test threw exception\n\
    \  Expression: candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  k should not be greater\
    \ than the number of elements\n  Stacktrace:\n   [1] error(s::String)\n     @\
    \ Base ./error.jl:33\n   [2] maximum(arr::Vector{Int64}, k::Int64)\n     @ Main\
    \ /tmp/tmpd0iq8khg.jl:30\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpd0iq8khg.jl:42 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpd0iq8khg.jl:41\ntest set:\
    \ Error During Test at /tmp/tmpd0iq8khg.jl:43\n  Test threw exception\n  Expression:\
    \ candidate([4, -4, 4], 2) == [4, 4]\n  BoundsError: attempt to access 0-element\
    \ Vector{Int64} at index [-1:0]\n  Stacktrace:\n   [1] throw_boundserror(A::Vector{Int64},\
    \ I::Tuple{UnitRange{Int64}})\n     @ Base ./abstractarray.jl:691\n   [2] checkbounds\n\
    \     @ ./abstractarray.jl:656 [inlined]\n   [3] getindex\n     @ ./array.jl:867\
    \ [inlined]\n   [4] maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmpd0iq8khg.jl:33\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpd0iq8khg.jl:43 [inlined]\n\
    \   [7] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpd0iq8khg.jl:41\ntest set:\
    \ Error During Test at /tmp/tmpd0iq8khg.jl:44\n  Test threw exception\n  Expression:\
    \ candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n  BoundsError: attempt to access\
    \ 0-element Vector{Int64} at index [0:0]\n  Stacktrace:\n   [1] throw_boundserror(A::Vector{Int64},\
    \ I::Tuple{UnitRange{Int64}})\n     @ Base ./abstractarray.jl:691\n   [2] checkbounds\n\
    \     @ ./abstractarray.jl:656 [inlined]\n   [3] getindex\n     @ ./array.jl:867\
    \ [inlined]\n   [4] maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmpd0iq8khg.jl:33\n\
    \   [5] macro expansion\n     @ "
  timestamp: 1659978155
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k == 1\n        return arr\n    elm = maximum(arr, k - 1)\n    res = [elm]\n\
    \    k = k - 1\n    while k >= 1\n        elm = maximum(arr, k)\n        if elm\
    \ > res[end]\n            res[end] = elm\n        end\n        k = k - 1\n   \
    \ end\n    res\nend\n</cell>\n<text>\nmaximum([1, 2, 3, 4, 5], 3)\nusing Test\n\
    \n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) ==\
    \ [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwyba3ot_.jl:40\nin expression starting at\
    \ /tmp/tmpwyba3ot_.jl:40\n"
  stdout: ''
  timestamp: 1659978151
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k < 1 \n        error(\"k must be positive\")\n    end\n    if length(arr)\
    \ == 0 || k <= 0 || k >= length(arr) \n        return arr\n    end\n    max_value\
    \ = maximum(reverse(arr), k - 1)\n    push!(arr, max_value)\n    return arr\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpfkk9mglb.jl:38

    '
  stdout: "test set: Test Failed at /tmp/tmpfkk9mglb.jl:41\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [-3, -4, 5] == [-4, -3, 5]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfkk9mglb.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfkk9mglb.jl:40\ntest set: Error\
    \ During Test at /tmp/tmpfkk9mglb.jl:42\n  Test threw exception\n  Expression:\
    \ candidate([4, -4, 4], 2) == [4, 4]\n  k must be positive\n  Stacktrace:\n  \
    \ [1] error(s::String)\n     @ Base ./error.jl:33\n   [2] maximum(arr::Vector{Int64},\
    \ k::Int64)\n     @ Main /tmp/tmpfkk9mglb.jl:27\n   [3] maximum(arr::Vector{Int64},\
    \ k::Int64) (repeats 2 times)\n     @ Main /tmp/tmpfkk9mglb.jl:32\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpfkk9mglb.jl:42 [inlined]\n\
    \   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpfkk9mglb.jl:40\ntest set:\
    \ Error During Test at /tmp/tmpfkk9mglb.jl:43\n  Test threw exception\n  Expression:\
    \ candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n  k must be positive\n  Stacktrace:\n\
    \   [1] error(s::String)\n     @ Base ./error.jl:33\n   [2] maximum(arr::Vector{Int64},\
    \ k::Int64)\n     @ Main /tmp/tmpfkk9mglb.jl:27\n   [3] maximum(arr::Vector{Int64},\
    \ k::Int64)\n     @ Main /tmp/tmpfkk9mglb.jl:32\n   [4] macro expansion\n    \
    \ @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [5] macro expansion\n     @ /tmp/tmpfkk9mglb.jl:43 [inlined]\n   [6] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpfkk9mglb.jl:40\ntest set:\
    \ Error During Test at /tmp/tmpfkk9mglb.jl:44\n  Test threw exception\n  Expression:\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == ["
  timestamp: 1659978155
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k <= length(arr)\n        maximum = arr[k - 1]\n        minimum = minimum(arr[k\
    \ - 1])\n        for i in k - 2:-1:2\n            if arr[i] > maximum\n      \
    \          maximum = arr[i]\n            elseif arr[i] < minimum\n           \
    \     minimum = arr[i]\n            end\n        end\n    else\n        maximum\
    \ = minimum(arr[k])\n        for i in 1:k\n            if arr[i] > maximum\n \
    \               maximum = arr[i]\n            elseif arr[i] < minimum\n      \
    \          minimum = arr[i]\n            end\n        end\n    end\n    return\
    \ maximum\nend\n\"\"\"\n    Given a vector arr of integers and a positive integer\
    \ k, return a new vector \n    that contains the kth largest numbers in arr.\n\
    using Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4,\
    \ 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphgrajtax.jl:48\nin expression starting at\
    \ /tmp/tmphgrajtax.jl:48\n"
  stdout: ''
  timestamp: 1659978152
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    s = zeros(Int64, k)\n    for a in arr\n        s = maximum(s,a)\n    end\n\
    \    s\nend\n\"\"\"\n    Given a vector arr of integers and a positive integer\
    \ k, return a sorted vector \n    of length k with the minimum k numbers in arr.\n\
    using Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4,\
    \ 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5_ykem3_.jl:32\nin expression starting at\
    \ /tmp/tmp5_ykem3_.jl:32\n"
  stdout: ''
  timestamp: 1659978152
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    maximum = maximum_values(arr, k)\n    return maximum\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4,\
    \ -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 11 errored,
    0 broken.

    in expression starting at /tmp/tmpn0brof30.jl:31

    '
  stdout: "test set: Error During Test at /tmp/tmpn0brof30.jl:34\n  Test threw exception\n\
    \  Expression: candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  UndefVarError: maximum_values\
    \ not defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n \
    \    @ Main /tmp/tmpn0brof30.jl:26\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpn0brof30.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpn0brof30.jl:33\ntest set:\
    \ Error During Test at /tmp/tmpn0brof30.jl:35\n  Test threw exception\n  Expression:\
    \ candidate([4, -4, 4], 2) == [4, 4]\n  UndefVarError: maximum_values not defined\n\
    \  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmpn0brof30.jl:26\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpn0brof30.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpn0brof30.jl:33\ntest set:\
    \ Error During Test at /tmp/tmpn0brof30.jl:36\n  Test threw exception\n  Expression:\
    \ candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n  UndefVarError: maximum_values\
    \ not defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n \
    \    @ Main /tmp/tmpn0brof30.jl:26\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpn0brof30.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpn0brof30.jl:33\ntest set:\
    \ Error During Test at /tmp/tmpn0brof30.jl:37\n  Test threw exception\n  Expression:\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n  UndefVarError:\
    \ maximum_values not defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64"
  timestamp: 1659978154
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    return vec(maximum_inner(arr, k))\nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpphetm3m1.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpphetm3m1.jl:1\n\
    in expression starting at /tmp/tmpphetm3m1.jl:1\n"
  stdout: ''
  timestamp: 1659978151
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k < 0 || k > length(arr)\n        throw(ArgumentError(\"k should be in\
    \ the range of [0, 1] and k should be less than or equal to length(arr).\"))\n\
    \    end\n    maximums = similar(arr)\n    maximums[k] = arr[end]\n    for i in\
    \ k+1:length(arr)\n        if arr[i] > maximums[k]\n            maximums[k] =\
    \ arr[i]\n        else\n            if maximums[k] > maximums[i]\n           \
    \     maximums[k] = maximums[i]\n            end\n        end\n    end\n    maximums\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 10 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmplwtf9q5x.jl:44

    '
  stdout: "test set: Test Failed at /tmp/tmplwtf9q5x.jl:47\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [0, 0, 5] == [-4, -3, 5]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplwtf9q5x.jl:47 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplwtf9q5x.jl:46\ntest set: Test\
    \ Failed at /tmp/tmplwtf9q5x.jl:48\n  Expression: candidate([4, -4, 4], 2) ==\
    \ [4, 4]\n   Evaluated: [47449146984464, 0, 0] == [4, 4]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplwtf9q5x.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplwtf9q5x.jl:46\ntest set: Test\
    \ Failed at /tmp/tmplwtf9q5x.jl:49\n  Expression: candidate([-3, 2, 1, 2, -1,\
    \ -2, 1], 1) == [2]\n   Evaluated: [1, 47449210243712, 47449209827408, 0, 47449210243712,\
    \ 47449209827408, 0] == [2]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplwtf9q5x.jl:49 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplwtf9q5x.jl:46\ntest set: Test\
    \ Failed at /tmp/tmplwtf9q5x.jl:50\n  Expression: candidate([123, -123, 20, 0,\
    \ 1, 2, -3], 3) == [2, 20, 123]\n   Evaluated: [0, 47449210243712, 0, 0, 47449210243712,\
    \ 47449209827408, 0] == [2, 20, 123]\nStacktrace:\n [1] macro expansion\n   @\
    \ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmplwtf9q5x.jl:50 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmplwtf9q5x.jl:46\ntest set: Test Failed at /tmp/t"
  timestamp: 1659978154
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if length(arr)<=k \n        return arr \n    else if k==1 \n        return\
    \ arr \n    else \n        maxarr=maximum.(maximum.(arr, k-1),k) \n        push!(maxarr,\
    \ maximum.(arr, k-length(arr)) ) \n        return maxarr\n    end\nend\nmaximum([4,\
    \ -4, 4], 2)\n</cell>\n<text>\nQuestion 8 (6.81 pts)\nWrite a function median([1,2,3,4]).\
    \ \nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprdu46r1p.jl:28\nin expression starting at\
    \ /tmp/tmprdu46r1p.jl:28\n"
  stdout: ''
  timestamp: 1659978152
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    return arr[(arr.>0).==1][k-1:end]\nend \n</cell>\n<code language=julia-1.5>\n\
    maximum(ar, 2)\n</cell>\n<code language=julia-1.5>\nmaximum(ar, 1)\n</cell>\n\
    <code language=julia-1.5>\nmaximum(ar, 3)\n</cell>\n<code language=julia-1.5>\n\
    maximum(ar, 4)\n</cell>\n<code language=julia-1.5>\nmaximum(ar, 5)\n</cell>\n\
    <code language=julia-1.5>\nmaximum(ar, 6)\n</cell>\n<text>\nThe maximum function\
    \ in Julia is built on top of sorting.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp65p9a94x.jl:28\nin expression starting at\
    \ /tmp/tmp65p9a94x.jl:28\n"
  stdout: ''
  timestamp: 1659978152
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \  maximum=arr\n  for j in length(arr)-1:-1:k \n    if maximum[j]<arr[j] \n  \
    \    maximum=arr\n    else \n      break\n  end\n  maximum\nend\nmaximum(a::Vector{Int64},\
    \ b::Int64) = maximum(a, b-1)\nmaximum(a::Vector{Int64}, b::Int64) = maximum(a,\
    \ b-1)\nmaximum(a::Vector{Int64}, b::Int64) = maximum(a, b-1)\nmaximum(a::Vector{Int64},\
    \ b::Int64) = maximum(a, b-1)\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\
    \t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4],\
    \ 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpox2q37u5.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpox2q37u5.jl:1\n\
    in expression starting at /tmp/tmpox2q37u5.jl:1\n"
  stdout: ''
  timestamp: 1659978153
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k <= length(arr) \n        maximum = arr[k - 1] \n        for j in (1\
    \ to k)\n            if maximum < arr[j] \n                maximum = arr[j] \n\
    \            end \n        end \n        return [maximum]\n    else \n       \
    \ return arr\n    end\nend\n</cell>\n<cell>\nmaximum(A, 1)\n</cell>\n<text>\n\
    Find the maximum element of an array.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpu8bt0hsm.jl:28\nin expression starting at\
    \ /tmp/tmpu8bt0hsm.jl:28\n"
  stdout: ''
  timestamp: 1659978153
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k <= 0\n        return Vector{Int64}(undef, 0)\n    end\n    maximums\
    \ = []\n    for i in 1:length(arr)\n        if arr[i] > maximums[k]\n        \
    \    maximums[k] = arr[i]\n        end\n    end\n    return maximums\nend\nmaximum\n\
    </cell>\n<code language=julia-1.3>\n\"\"\"\n    minimum(arr::Vector{Int64}, k::Int64)::Vector{Int64}\n\
    \    Given a vector arr of integers and a positive integer k, return a sorted\
    \ vector \n    of length k with the minimum k numbers in arr.\nusing Test\n\n\
    @testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4,\
    \ -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpy6u_p7uz.jl:38\nin expression starting at\
    \ /tmp/tmpy6u_p7uz.jl:38\n"
  stdout: ''
  timestamp: 1659978153
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k == 0 return arr\n    if k > length(arr) \n        return arr\n    sorted_arr\
    \ = sort(arr)\n    remain_length = length(sorted_arr) - k\n    if remain_length\
    \ <= 0\n        return arr\n    else\n        return maximum(sorted_arr, remain_length)\n\
    \    end\nend\nmaximum()\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\
    \t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4],\
    \ 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpw7g39u2y.jl:1\nin expression starting at /tmp/tmpw7g39u2y.jl:1\n"
  stdout: ''
  timestamp: 1659978153
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k == 0 || arr.size < k\n        return arr\n    \n    if k == 1 && arr.size\
    \ == 1\n        return arr\n    \n    maxIndex = k\n    maxValue = arr[k]\n  \
    \  for i= k+1:length(arr)\n        if arr[i] > maxValue\n            maxValue\
    \ = arr[i]\n            maxIndex = i\n        end\n    end\n    return maximum([arr[maxIndex],\
    \ maxValue], k-1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\
    \t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4],\
    \ 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp44wm8pi8.jl:1\nin expression starting at /tmp/tmp44wm8pi8.jl:1\n"
  stdout: ''
  timestamp: 1659978153
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k == 0 \n        return arr \n    else \n        maximum2(arr, k - 1)\
    \ \n    end\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxmxlm5h7.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxmxlm5h7.jl:1\n\
    in expression starting at /tmp/tmpxmxlm5h7.jl:1\n"
  stdout: ''
  timestamp: 1659978153
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    \n    max_arr=[]\n    for x in arr \n        if x > max_arr[k] \n       \
    \     max_arr[k] = x\n    end\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\
    \t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4],\
    \ 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"for\" at /tmp/tmp2pv02a8b.jl:28\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp2pv02a8b.jl:1\n\
    in expression starting at /tmp/tmp2pv02a8b.jl:1\n"
  stdout: ''
  timestamp: 1659978153
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k == 1\n        return arr\n    else\n        lo, hi = maximum1(arr, k)\n\
    \        lo, hi = lo[1], hi[1]\n        lo += k - 1\n        hi + k - 1\n    \
    \    return arr <= hi ? arr : arr <= lo ? lo : hi\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4,\
    \ -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 2 failed, 9 errored,
    0 broken.

    in expression starting at /tmp/tmp2t7ae38d.jl:38

    '
  stdout: "test set: Error During Test at /tmp/tmp2t7ae38d.jl:41\n  Test threw exception\n\
    \  Expression: candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  UndefVarError: maximum1\
    \ not defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n \
    \    @ Main /tmp/tmp2t7ae38d.jl:29\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp2t7ae38d.jl:41 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp2t7ae38d.jl:40\ntest set:\
    \ Error During Test at /tmp/tmp2t7ae38d.jl:42\n  Test threw exception\n  Expression:\
    \ candidate([4, -4, 4], 2) == [4, 4]\n  UndefVarError: maximum1 not defined\n\
    \  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmp2t7ae38d.jl:29\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp2t7ae38d.jl:42 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp2t7ae38d.jl:40\ntest set:\
    \ Test Failed at /tmp/tmp2t7ae38d.jl:43\n  Expression: candidate([-3, 2, 1, 2,\
    \ -1, -2, 1], 1) == [2]\n   Evaluated: [-3, 2, 1, 2, -1, -2, 1] == [2]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2t7ae38d.jl:43 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2t7ae38d.jl:40\ntest set: Error\
    \ During Test at /tmp/tmp2t7ae38d.jl:44\n  Test threw exception\n  Expression:\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n  UndefVarError:\
    \ maximum1 not defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n\
    \     @ Main /tmp/tmp2t7ae38d.jl:29\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:4"
  timestamp: 1659978156
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k <= 0 || k > length(arr)\n        return arr\n    else\n        maxs\
    \ = arr.take(k)\n        sort(maxs)\n        return arr\n    end\nend\n</cell>\n\
    <text>\nExercise 4:\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t\
    @test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4],\
    \ 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpoiom24ok.jl:34\nin expression starting at\
    \ /tmp/tmpoiom24ok.jl:34\n"
  stdout: ''
  timestamp: 1659978153
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    n = length(arr)\n    \n    if n < 1 || k > n\n        throw(ArgumentError(\"\
    maximum: k must be less than or equal to length of arr\"))\n    end\n    \n  \
    \  if n == 0 || k == 0\n        Vector{Int64}()\n    end\n    \n    maximum =\
    \ arr[1]\n    for i in (2 to n)\n        if arr[i] > maximum\n            maximum\
    \ = arr[i]\n        end\n    end\n    \n    return maximum\nend\nmaximum(a::Vector{Int64},\
    \ k::Int64) = maximum(a, k)\nmaximum(a::Vector{Int64}) = maximum(a, length(a))\n\
    maximum(a::Vector{Int64}, length(a)) = a\nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdiqccmei.jl:37\nin expression starting at\
    \ /tmp/tmpdiqccmei.jl:37\n"
  stdout: ''
  timestamp: 1659978153
- exit_code: -1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k < 1 || length(arr) < k\n        error(\"The length of vector arr must\
    \ be greater than k !\")\n    end\n    maximum_value = arr[1]\n    for i in 2:length(arr)\n\
    \        if arr[i] > maximum_value\n            maximum_value = arr[i]\n     \
    \   end\n    end\n    maximum_value = arr[k-1]\n    return maximum_value\nend\n\
    using Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4,\
    \ 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpqt2ommmq.jl:43\n  Test threw
    exception\n  Expression: candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  MethodError:
    Cannot `convert` an object of type Int64 to an object of type Vector{Int64}\n  Closest
    candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)
    where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n    convert(::Type{T},
    !Matched::AbstractArray) where T<:Array at ~/.conda/envs/polyglot/share/julia/base/array.jl:554\n    convert(::Type{T},
    !Matched::T) where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/base/abstractarray.jl:16\n    ...\n  Stacktrace:\n   [1]
    maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmpqt2ommmq.jl:36\n   [2]
    macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpqt2ommmq.jl:43 [inlined]\n   [4]
    macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpqt2ommmq.jl:42\ntest set: Error
    During Test at /tmp/tmpqt2ommmq.jl:44\n  Test threw exception\n  Expression: candidate([4,
    -4, 4], 2) == [4, 4]\n  MethodError: Cannot `convert` an object of type Int64
    to an object of type Vector{Int64}\n  Closest candidates are:\n    convert(::Type{T},
    !Matched::LinearAlgebra.Factorization) where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n    convert(::Type{T},
    !Matched::AbstractArray) where T<:Array at ~/.conda/envs/polyglot/share/julia/base/array.jl:554\n    convert(::Type{T},
    !Matched::T) where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/base/abstractarray.jl:16\n    ...\n  Stacktrace:\n   [1]
    maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmpqt2ommmq.jl:36\n   [2]
    macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpqt2ommmq'
  timestamp: 1659978157
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k == 1\n        return arr\n    elseif k == length(arr)\n        return\
    \ arr\n    end\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpe6spcox8.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpe6spcox8.jl:1\n\
    in expression starting at /tmp/tmpe6spcox8.jl:1\n"
  stdout: ''
  timestamp: 1659978154
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    n = length(arr)\n    if n <= k\n        return arr\n    arr = maximum(arr,\
    \ n)\n    maximum_values = arr\n    for i=n+1:k\n        if maximum_values[i]\
    \ > maximum_values[n-i]\n            maximum_values[i] = maximum_values[n-i]\n\
    \        else\n            maximum_values[i] = maximum_values[n]\n        end\n\
    \    end\n    maximum_values[k] = 1\n    return maximum_values\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) ==\
    \ [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpymv2sw3y.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpymv2sw3y.jl:1\n\
    in expression starting at /tmp/tmpymv2sw3y.jl:1\n"
  stdout: ''
  timestamp: 1659978155
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    vec = []\n    i = size(arr)[1]\n    while k > 0\n        push!(vec, maximum(arr,k-1))\n\
    \        i = i-1\n    end\n    vec\nend\n</cell>\n<code language=julia-1.5>\n\
    maximum([-3, -4, 5], 3)\n</cell>\n<code language=julia-1.5>\nmaximum([4, -4, 4],\
    \ 2)\n</cell>\n<code language=julia-1.5>\nmaximum([-3, 2, 1, 2, -1, -2, 1], 1)\n\
    </cell>\n<text>\nExercise 2\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\
    \t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4],\
    \ 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8r1wjl4z.jl:34\nin expression starting at\
    \ /tmp/tmp8r1wjl4z.jl:34\n"
  stdout: ''
  timestamp: 1659978155
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    arr = sort(arr)\n    vec = Vector{Int64}(undef, k)\n    i = j = 1\n    while\
    \ j <= k && i < length(arr)\n        if arr[i] > arr[j] \n            vec[j] =\
    \ arr[i]\n            i += 1\n        else\n            vec[j] = arr[j]\n    \
    \        j += 1\n        end\n    end\n    vec\nend\n</cell>\n<text>\nQuestion\
    \ 7\nWrite a function that takes a list of integers and returns the list sorted\n\
    by the sum of the numbers.\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\
    \t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4],\
    \ 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpr8_4p_s1.jl:40\nin expression starting at\
    \ /tmp/tmpr8_4p_s1.jl:40\n"
  stdout: ''
  timestamp: 1659978155
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k <= 0 || length(arr) == 0 || arr == []\n    else maximum([maximum(arr[0..k],\
    \ k - 1), maximum(arr[k..end], k - 1)], k)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t\
    @test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1,\
    \ -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2,\
    \ 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\
    \t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\
    \t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp_qfe04ua.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp_qfe04ua.jl:1\n\
    in expression starting at /tmp/tmp_qfe04ua.jl:1\n"
  stdout: ''
  timestamp: 1659978155
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k == length(arr)\n        return arr\n    else\n        maximum2(arr,\
    \ k)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpilj6_kkq.jl:34

    '
  stdout: "test set: Test Failed at /tmp/tmpilj6_kkq.jl:37\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [-3, -4, 5] == [-4, -3, 5]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpilj6_kkq.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpilj6_kkq.jl:36\ntest set: Error\
    \ During Test at /tmp/tmpilj6_kkq.jl:38\n  Test threw exception\n  Expression:\
    \ candidate([4, -4, 4], 2) == [4, 4]\n  UndefVarError: maximum2 not defined\n\
    \  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmpilj6_kkq.jl:29\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpilj6_kkq.jl:38 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpilj6_kkq.jl:36\ntest set:\
    \ Error During Test at /tmp/tmpilj6_kkq.jl:39\n  Test threw exception\n  Expression:\
    \ candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n  UndefVarError: maximum2 not\
    \ defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @\
    \ Main /tmp/tmpilj6_kkq.jl:29\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpilj6_kkq.jl:39 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpilj6_kkq.jl:36\ntest set:\
    \ Error During Test at /tmp/tmpilj6_kkq.jl:40\n  Test threw exception\n  Expression:\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n  UndefVarError:\
    \ maximum2 not defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n\
    \     @ Main /tmp/tmpilj6_kkq.jl:29\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [i"
  timestamp: 1659978158
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k < 0 || k > length(arr)\n        throw(ArgumentError(\"k must be in the\
    \ range of [0, length(arr)]\"))\n    end\n    maximum = arr\n    for index in\
    \ range(k-1)\n        maximum = [maximum(maximum, arr[index]), maximum[1]] \n\
    \    end\n    return maximum\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 11 errored,
    0 broken.

    in expression starting at /tmp/tmpom4rbaeh.jl:37

    '
  stdout: "test set: Error During Test at /tmp/tmpom4rbaeh.jl:40\n  Test threw exception\n\
    \  Expression: candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  ArgumentError: Cannot\
    \ construct range from arguments:\n  start = 2\n  step = nothing\n  stop = nothing\n\
    \  length = nothing\n  Try specifying more arguments.\n  \n  Stacktrace:\n   [1]\
    \ range_error(start::Int64, step::Nothing, stop::Nothing, length::Nothing)\n \
    \    @ Base ./range.jl:199\n   [2] _range(start::Int64, step::Nothing, stop::Nothing,\
    \ len::Nothing)\n     @ Base ./range.jl:125\n   [3] range(start::Int64; stop::Nothing,\
    \ length::Nothing, step::Nothing)\n     @ Base ./range.jl:109\n   [4] range(start::Int64)\n\
    \     @ Base ./range.jl:109\n   [5] maximum(arr::Vector{Int64}, k::Int64)\n  \
    \   @ Main /tmp/tmpom4rbaeh.jl:30\n   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [7] macro expansion\n     @ /tmp/tmpom4rbaeh.jl:40 [inlined]\n\
    \   [8] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [9] top-level scope\n     @ /tmp/tmpom4rbaeh.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpom4rbaeh.jl:41\n  Test threw exception\n  Expression:\
    \ candidate([4, -4, 4], 2) == [4, 4]\n  ArgumentError: Cannot construct range\
    \ from arguments:\n  start = 1\n  step = nothing\n  stop = nothing\n  length =\
    \ nothing\n  Try specifying more arguments.\n  \n  Stacktrace:\n   [1] range_error(start::Int64,\
    \ step::Nothing, stop::Nothing, length::Nothing)\n     @ Base ./range.jl:199\n\
    \   [2] _range(start::Int64, step::Nothing, stop::Nothing, len::Nothing)\n   \
    \  @ Base ./range.jl:125\n   [3] range(start::Int64; stop::Nothing, length::Nothing,\
    \ step::Nothing)\n     @ Base ./range.jl:109\n   [4] range(start::Int64)\n   \
    \  @ Base ./range.jl:109\n   [5] maximum(arr::Vector{Int64}, k::Int64)\n     @\
    \ Main /tmp/tmpom4rbaeh.jl:30\n   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [7] macro expansion\n     @ /tmp/tmpom4rbaeh.jl:41 [inlined]\n\
    \   [8] macro expansion\n     @ ~/.conda/envs/polyglot/share/jul"
  timestamp: 1659978157
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k <= length(arr)\n        maximum = [arr[k]]\n    else\n        maximum\
    \ = maximum(maximum(arr[1:k]), k - 1)\n    end\nend\nmaximum([-3, -4, 5], 3)\n\
    </cell>\n<code language=julia-0.5>\nmaximum([4, -4, 4], 2)\n</cell>\n<code language=julia-0.5>\n\
    maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n</cell>\n<code language=julia-0.5>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5],\
    \ 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2qgtl0h4.jl:33\nin expression starting at\
    \ /tmp/tmp2qgtl0h4.jl:33\n"
  stdout: ''
  timestamp: 1659978155
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    arr1 = sort(arr)\n    len = length(arr1)\n    \n    if k == len\n       \
    \ return arr1\n    elseif k == 1\n        return [arr1[k-1]]\n    else\n     \
    \   arr2 = maximum(arr1[(k-1):end], k-1)\n        return arr2 + [arr1[k-1]]\n\
    \    end\nend\n</cell>\n<text>\nAnd here's the second function (maximum without\
    \ an explicit return statement):\nusing Test\n\n@testset begin\n\ncandidate =\
    \ maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3i0ar6if.jl:38\nin expression starting at\
    \ /tmp/tmp3i0ar6if.jl:38\n"
  stdout: ''
  timestamp: 1659978155
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    # base case\n    if k == 0 \n        return Vector{Int64}(arr)\n    \n  \
    \  # recursive case\n    # sort array from highest to lowest\n    arr = sort(arr)\n\
    \    \n    # take first k\n    return maximum(arr[1:k], k)\nend \nusing Test\n\
    \n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) ==\
    \ [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp13oxzlj3.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp13oxzlj3.jl:1\n\
    in expression starting at /tmp/tmp13oxzlj3.jl:1\n"
  stdout: ''
  timestamp: 1659978155
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k < 1 || k > size(arr) \n        throw(BoundsError(\"maximum() k must\
    \ be between 1 and $size(arr)\"))\n    else\n        sort(arr)\n    end\n    return\
    \ arr\nend\nmaximum\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t\
    @test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4],\
    \ 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 11 errored,
    0 broken.

    in expression starting at /tmp/tmpfs4cnosk.jl:36

    '
  stdout: "test set: Error During Test at /tmp/tmpfs4cnosk.jl:39\n  Test threw exception\n\
    \  Expression: candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  MethodError: no method\
    \ matching isless(::Tuple{Int64}, ::Int64)\n  Closest candidates are:\n    isless(!Matched::AbstractFloat,\
    \ ::Real) at ~/.conda/envs/polyglot/share/julia/base/operators.jl:186\n    isless(!Matched::Real,\
    \ ::Real) at ~/.conda/envs/polyglot/share/julia/base/operators.jl:430\n    isless(::Any,\
    \ !Matched::Missing) at ~/.conda/envs/polyglot/share/julia/base/missing.jl:88\n\
    \    ...\n  Stacktrace:\n   [1] <(x::Tuple{Int64}, y::Int64)\n     @ Base ./operators.jl:352\n\
    \   [2] >(x::Int64, y::Tuple{Int64})\n     @ Base ./operators.jl:378\n   [3] maximum(arr::Vector{Int64},\
    \ k::Int64)\n     @ Main /tmp/tmpfs4cnosk.jl:26\n   [4] macro expansion\n    \
    \ @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [5] macro expansion\n     @ /tmp/tmpfs4cnosk.jl:39 [inlined]\n   [6] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpfs4cnosk.jl:38\ntest set:\
    \ Error During Test at /tmp/tmpfs4cnosk.jl:40\n  Test threw exception\n  Expression:\
    \ candidate([4, -4, 4], 2) == [4, 4]\n  MethodError: no method matching isless(::Tuple{Int64},\
    \ ::Int64)\n  Closest candidates are:\n    isless(!Matched::AbstractFloat, ::Real)\
    \ at ~/.conda/envs/polyglot/share/julia/base/operators.jl:186\n    isless(!Matched::Real,\
    \ ::Real) at ~/.conda/envs/polyglot/share/julia/base/operators.jl:430\n    isless(::Any,\
    \ !Matched::Missing) at ~/.conda/envs/polyglot/share/julia/base/missing.jl:88\n\
    \    ...\n  Stacktrace:\n   [1] <(x::Tuple{Int64}, y::Int64)\n     @ Base ./operators.jl:352\n\
    \   [2] >(x::Int64, y::Tuple{Int64})\n     @ Base ./operators.jl:378\n   [3] maximum(arr::Vector{Int64},\
    \ k::Int64)\n     @ Main /tmp/tmpfs4cnosk.jl:26\n   [4] macro expansion\n    \
    \ @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [5] macro expansion\n     @ /tmp/tmpfs4cnosk.jl:40 [inlined]\n   [6] macro\
    \ expansion\n     @ ~/.conda/envs/"
  timestamp: 1659978159
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k > length(arr)\n        return arr\n    \n    maximums = []\n    \n \
    \   for elt in arr\n        if elt > maximum(maximums, k-1)\n            maximums\
    \ = maximums + [elt]\n        end\n    end\n    \n    return maximums\nend\nmaximum(x)\
    \ = maximum(x, length(maximum(x)))\nmaximum(x, k) = x\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4,\
    \ 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmckz949k.jl:41\nin expression starting at\
    \ /tmp/tmpmckz949k.jl:41\n"
  stdout: ''
  timestamp: 1659978156
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k <= length(arr)\n        maximum_list = arr[k:]\n    else\n        maximum_list\
    \ = arr\n    end\n    maximum(maximum_list, k)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t\
    @test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1,\
    \ -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2,\
    \ 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\
    \t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\
    \t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"k:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpl2z29bq8.jl:27\nin expression\
    \ starting at /tmp/tmpl2z29bq8.jl:27\n"
  stdout: ''
  timestamp: 1659978156
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    arr = sort(arr)\n    return arr[k+1:end][1:k]\nend\n</cell>\n<code language=julia-1.6>\n\
    maximum([-3, -4, 5], 3)\n</cell>\n<code language=julia-1.6>\nmaximum([4, -4, 4],\
    \ 2)\n</cell>\n<code language=julia-1.6>\nmaximum([-3, 2, 1, 2, -1, -2, 1], 1)\n\
    </cell>\n<text>\nProblem 7\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\
    \t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4],\
    \ 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0g7dwpnk.jl:29\nin expression starting at\
    \ /tmp/tmp0g7dwpnk.jl:29\n"
  stdout: ''
  timestamp: 1659978156
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k <= 0\n        throw(ArgumentError(\"k must be positive and no less than\
    \ length of vector\"))\n    elseif k >= length(arr)\n        throw(ArgumentError(\"\
    k must be positive and no more than length of vector\"))\n    elseif length(arr)\
    \ <= k\n        throw(ArgumentError(\"length of vector must be greater than k\"\
    ))\n    elseif k == 0 \n        throw(ArgumentError(\"k must be greater than 0\"\
    ))\n    end\n    maximum = arr[1]\n    for ele in arr[1..k]\n        if ele >\
    \ maximum\n            maximum = ele\n        end\n    end\n    return maximum\n\
    end\n\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the minimum k numbers in arr.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5],\
    \ 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0a1_9_gw.jl:43\nin expression starting at\
    \ /tmp/tmp0a1_9_gw.jl:43\n"
  stdout: ''
  timestamp: 1659978156
- exit_code: -1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    maximums = sort(arr, true)\n    return maximums[-k+1:end]\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) ==\
    \ [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: Timeout
  stderr: 'b''ERROR: LoadError: '''
  stdout: 'b''test set: Error During Test at /tmp/tmp96ilbzhx.jl:34\n  Test threw
    exception\n  Expression: candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  MethodError:
    no method matching sort(::Vector{Int64}, ::Bool)\n  Closest candidates are:\n    sort(::AbstractVector;
    kws...) at ~/.conda/envs/polyglot/share/julia/base/sort.jl:772\n    sort(::AbstractArray;
    dims, alg, lt, by, rev, order) at ~/.conda/envs/polyglot/share/julia/base/sort.jl:1030\n  Stacktrace:\n   [1]
    maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmp96ilbzhx.jl:26\n   [2]
    macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmp96ilbzhx.jl:34 [inlined]\n   [4]
    macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmp96ilbzhx.jl:33\ntest set: Error
    During Test at /tmp/tmp96ilbzhx.jl:35\n  Test threw exception\n  Expression: candidate([4,
    -4, 4], 2) == [4, 4]\n  MethodError: no method matching sort(::Vector{Int64},
    ::Bool)\n  Closest candidates are:\n    sort(::AbstractVector; kws...) at ~/.conda/envs/polyglot/share/julia/base/sort.jl:772\n    sort(::AbstractArray;
    dims, alg, lt, by, rev, order) at ~/.conda/envs/polyglot/share/julia/base/sort.jl:1030\n  Stacktrace:\n   [1]
    maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmp96ilbzhx.jl:26\n   [2]
    macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmp96ilbzhx.jl:35 [inlined]\n   [4]
    macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmp96ilbzhx.jl:33\ntest set: Error
    During Test at /tmp/tmp96ilbzhx.jl:36\n  Test threw exception\n  Expression: candidate([-3,
    2, 1, 2, -1, -2, 1], 1) == [2]\n  MethodError: no method matching sort(::Vector{Int64},
    ::Bool)\n  Closest candidates are:\n    sort(::AbstractVector; kws...) at ~/.conda/envs/polyglot/share/julia/base/so'
  timestamp: 1659978159
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k == 1\n        return arr\n    elseif k > length(arr)\n        return\
    \ arr\n    end\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpuiesbqc_.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpuiesbqc_.jl:1\n\
    in expression starting at /tmp/tmpuiesbqc_.jl:1\n"
  stdout: ''
  timestamp: 1659978156
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    largest = arr\n    \n    for i in 1:k\n        largest[i] = maximum(largest,\
    \ length(arr)-k+i)\n    end\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\
    \t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4],\
    \ 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmphgtjrvfu.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmphgtjrvfu.jl:1\n\
    in expression starting at /tmp/tmphgtjrvfu.jl:1\n"
  stdout: ''
  timestamp: 1659978156
- exit_code: -1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    arr1 = arr[k]\n    for i in 1:k-1\n        arr1 = maximum(arr, i) + arr1\n\
    \    end\n    return arr1\nend\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\
    \t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4],\
    \ 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpysd_t0v_.jl:37\n  Test threw
    exception\n  Expression: candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  MethodError:
    Cannot `convert` an object of type Int64 to an object of type Vector{Int64}\n  Closest
    candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)
    where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n    convert(::Type{T},
    !Matched::AbstractArray) where T<:Array at ~/.conda/envs/polyglot/share/julia/base/array.jl:554\n    convert(::Type{T},
    !Matched::T) where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/base/abstractarray.jl:16\n    ...\n  Stacktrace:\n   [1]
    maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmpysd_t0v_.jl:30\n   [2]
    maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmpysd_t0v_.jl:28\n   [3]
    macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [4] macro expansion\n     @ /tmp/tmpysd_t0v_.jl:37 [inlined]\n   [5]
    macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [6] top-level scope\n     @ /tmp/tmpysd_t0v_.jl:36\ntest set: Error
    During Test at /tmp/tmpysd_t0v_.jl:38\n  Test threw exception\n  Expression: candidate([4,
    -4, 4], 2) == [4, 4]\n  MethodError: Cannot `convert` an object of type Int64
    to an object of type Vector{Int64}\n  Closest candidates are:\n    convert(::Type{T},
    !Matched::LinearAlgebra.Factorization) where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n    convert(::Type{T},
    !Matched::AbstractArray) where T<:Array at ~/.conda/envs/polyglot/share/julia/base/array.jl:554\n    convert(::Type{T},
    !Matched::T) where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/base/abstractarray.jl:16\n    ...\n  Stacktrace:\n   [1]
    maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmpysd_t0v_.jl:30\n   [2]
    maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmpysd_t0v_.'
  timestamp: 1659978160
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    return sort(arr)[1:k];\nend\n</cell>\n<code language=julia-1.5>\nmaximum(arr,\
    \ 3)\n</cell>\n<text>\nmaximum_by \uD568\uC218\n\uC6D0\uB798\uB450 \uC218\uB97C\
    \ \uCC3E\uAE30 \uC704\uD574 maximum_by \uD568\uC218\uAC00 \uC81C\uACF5\uB418\uC5C8\
    \uB2E4. maximum_by \uBA54\uC11C\uB4DC\uB294 findmax\n\uD568\uC218\uB97C \uD1B5\
    \uD574 \uC790\uC2DD \uD568\uC218\uB97C \uBCF4\uC5EC\uC900\uB2E4.\nusing Test\n\
    \n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) ==\
    \ [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpg59okebk.jl:28\nin expression starting at\
    \ /tmp/tmpg59okebk.jl:28\n"
  stdout: ''
  timestamp: 1659978157
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    \"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5],\
    \ 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4ak4bxy4.jl:1\nin expression starting at /tmp/tmp4ak4bxy4.jl:1\n"
  stdout: ''
  timestamp: 1659978082
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    max_arr = zeros(k, Int64)\n    \n    for j in 1:k\n        max_arr[j] = maximum(arr[j],\
    \ k)\n    end\n    \n    return max_arr\nend\nusing Test\n\n@testset begin\n\n\
    candidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 11 errored,
    0 broken.

    in expression starting at /tmp/tmpzar4exac.jl:36

    '
  stdout: "test set: Error During Test at /tmp/tmpzar4exac.jl:39\n  Test threw exception\n\
    \  Expression: candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  MethodError: no method\
    \ matching zeros(::Int64, ::Type{Int64})\n  Closest candidates are:\n    zeros(!Matched::Union{Integer,\
    \ AbstractUnitRange}...) at ~/.conda/envs/polyglot/share/julia/base/array.jl:520\n\
    \  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmpzar4exac.jl:26\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpzar4exac.jl:39 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpzar4exac.jl:38\ntest set:\
    \ Error During Test at /tmp/tmpzar4exac.jl:40\n  Test threw exception\n  Expression:\
    \ candidate([4, -4, 4], 2) == [4, 4]\n  MethodError: no method matching zeros(::Int64,\
    \ ::Type{Int64})\n  Closest candidates are:\n    zeros(!Matched::Union{Integer,\
    \ AbstractUnitRange}...) at ~/.conda/envs/polyglot/share/julia/base/array.jl:520\n\
    \  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmpzar4exac.jl:26\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpzar4exac.jl:40 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpzar4exac.jl:38\ntest set:\
    \ Error During Test at /tmp/tmpzar4exac.jl:41\n  Test threw exception\n  Expression:\
    \ candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n  MethodError: no method matching\
    \ zeros(::Int64, ::Type{Int64})\n  Closest candidates are:\n    zeros(!Matched::Union{Integer,\
    \ AbstractUnitRange}...) at ~/.conda/envs/polyglot/share/julia/base/array.jl:520\n\
    \  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmpzar4exac.jl:26\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl"
  timestamp: 1659978160
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    arr = sort(arr)\n    if k > length(arr), arr; else\n        maximum(k - 1,\
    \ arr[1 : end - (k - 1)])\n    end\nend\n</cell>\n<code language=julia-0.6>\n\
    maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum([-3,2,1,-2,-3,4,5,-5,-6,-7,8,-9,-10]),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20\n\
    using Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4,\
    \ 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \",\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpbgpmodd9.jl:27\nin expression starting at /tmp/tmpbgpmodd9.jl:27\n"
  stdout: ''
  timestamp: 1659978157
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if (k > length(arr))\n        throw(ArgumentError(\"Maximum must be less\
    \ than or equal to the length of the vector\"))\n    end\nusing Test\n\n@testset\
    \ begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3,\
    \ 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2,\
    \ 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1,\
    \ 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0,\
    \ 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpccf5p74s.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpccf5p74s.jl:1\n\
    in expression starting at /tmp/tmpccf5p74s.jl:1\n"
  stdout: ''
  timestamp: 1659978157
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if len(arr) <= k\n        return arr\n    end\n    maximum1 = maximum(arr[1:k],\
    \ k)\n    maximum2 = maximum(arr[k+1:end], k)\n    maximum = maximum1 >= maximum2\
    \ ? maximum1 : maximum2\n    push!(maximum, arr[k])\n    return maximum\nend\n\
    using Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4,\
    \ 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 11 errored,
    0 broken.

    in expression starting at /tmp/tmpq5wnmock.jl:37

    '
  stdout: "test set: Error During Test at /tmp/tmpq5wnmock.jl:40\n  Test threw exception\n\
    \  Expression: candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  UndefVarError: len\
    \ not defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n \
    \    @ Main /tmp/tmpq5wnmock.jl:26\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpq5wnmock.jl:40 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpq5wnmock.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpq5wnmock.jl:41\n  Test threw exception\n  Expression:\
    \ candidate([4, -4, 4], 2) == [4, 4]\n  UndefVarError: len not defined\n  Stacktrace:\n\
    \   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmpq5wnmock.jl:26\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpq5wnmock.jl:41 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpq5wnmock.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpq5wnmock.jl:42\n  Test threw exception\n  Expression:\
    \ candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n  UndefVarError: len not defined\n\
    \  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmpq5wnmock.jl:26\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpq5wnmock.jl:42 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpq5wnmock.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpq5wnmock.jl:43\n  Test threw exception\n  Expression:\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n  UndefVarError:\
    \ len not defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n\
    \     @ Main /tmp/tmpq5wnmock.jl"
  timestamp: 1659978159
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    \"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5],\
    \ 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4ak4bxy4.jl:1\nin expression starting at /tmp/tmp4ak4bxy4.jl:1\n"
  stdout: ''
  timestamp: 1659978082
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if length(arr)<=k then arr\n    else maximum(arr[1...k], k) + maximum(reverse(arr[1...k]),\
    \ k)\nend\n</cell>\n<text>\n\u6700\u5C0F\u503C\n\u6700\u5C0F\u503C\u95EE\u9898\
    \n\u6700\u5C0F\u503C\uFF08min or maximum\uFF09\u662F\u4E24\u4E2A\u6570\u7684\u6700\
    \u5C0F\u503C\uFF0C\u4E5F\u5C31\u662F\u8BF4\uFF0C\u5BF9\u4E8E\u4E24\u4E2A\u4E0D\
    \u76F8\u540C\u7684\u6570\uFF0C\u6211\u4EEC\u53EA\u9700\u8981\u6709\u4E00\u4E2A\
    \u6700\u5C0F\u503C\u3002\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\
    \t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4],\
    \ 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"arr\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpwtetmtuh.jl:26\nin expression starting at /tmp/tmpwtetmtuh.jl:26\n"
  stdout: ''
  timestamp: 1659978157
- exit_code: -1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    # Write your code here\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: Timeout
  stderr: 'b''ERROR: '''
  stdout: 'b''test set: Error During Test at /tmp/tmpaax94b8y.jl:33\n  Test threw
    exception\n  Expression: candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  MethodError:
    Cannot `convert` an object of type Nothing to an object of type Vector{Int64}\n  Closest
    candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)
    where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n    convert(::Type{T},
    !Matched::AbstractArray) where T<:Array at ~/.conda/envs/polyglot/share/julia/base/array.jl:554\n    convert(::Type{T},
    !Matched::T) where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/base/abstractarray.jl:16\n    ...\n  Stacktrace:\n   [1]
    maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmpaax94b8y.jl:27\n   [2]
    macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpaax94b8y.jl:33 [inlined]\n   [4]
    macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpaax94b8y.jl:32\ntest set: Error
    During Test at /tmp/tmpaax94b8y.jl:34\n  Test threw exception\n  Expression: candidate([4,
    -4, 4], 2) == [4, 4]\n  MethodError: Cannot `convert` an object of type Nothing
    to an object of type Vector{Int64}\n  Closest candidates are:\n    convert(::Type{T},
    !Matched::LinearAlgebra.Factorization) where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n    convert(::Type{T},
    !Matched::AbstractArray) where T<:Array at ~/.conda/envs/polyglot/share/julia/base/array.jl:554\n    convert(::Type{T},
    !Matched::T) where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/base/abstractarray.jl:16\n    ...\n  Stacktrace:\n   [1]
    maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmpaax94b8y.jl:27\n   [2]
    macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpaax9'
  timestamp: 1659978160
- exit_code: -1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k == 0 || arr.length == 0 \n        return arr\n    end\n    if k <= length(arr)\
    \ \n        sorted_arr = copy(arr)\n        topk(sorted_arr, k)\n        return\
    \ sorted_arr\n    end\n    \n    return maximum_rec(arr, k-1, arr[k])\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5],\
    \ 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: Timeout
  stderr: 'b''ERROR: LoadError: '''
  stdout: 'b''test set: Error During Test at /tmp/tmp5s212_b3.jl:42\n  Test threw
    exception\n  Expression: candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  type Array
    has no field length\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2]
    maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmp5s212_b3.jl:26\n   [3]
    macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [4] macro expansion\n     @ /tmp/tmp5s212_b3.jl:42 [inlined]\n   [5]
    macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [6] top-level scope\n     @ /tmp/tmp5s212_b3.jl:41\ntest set: Error
    During Test at /tmp/tmp5s212_b3.jl:43\n  Test threw exception\n  Expression: candidate([4,
    -4, 4], 2) == [4, 4]\n  type Array has no field length\n  Stacktrace:\n   [1]
    getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] maximum(arr::Vector{Int64},
    k::Int64)\n     @ Main /tmp/tmp5s212_b3.jl:26\n   [3] macro expansion\n     @
    ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4]
    macro expansion\n     @ /tmp/tmp5s212_b3.jl:43 [inlined]\n   [5] macro expansion\n     @
    ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6]
    top-level scope\n     @ /tmp/tmp5s212_b3.jl:41\ntest set: Error During Test at
    /tmp/tmp5s212_b3.jl:44\n  Test threw exception\n  Expression: candidate([-3, 2,
    1, 2, -1, -2, 1], 1) == [2]\n  type Array has no field length\n  Stacktrace:\n   [1]
    getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] maximum(arr::Vector{Int64},
    k::Int64)\n     @ Main /tmp/tmp5s212_b3.jl:26\n   [3] macro expansion\n     @
    ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4]
    macro expansion\n     @ /tmp/tmp5s212_b3.jl:44 [inlined]\n   [5] macro expansion\n     @
    ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6]
    top-level scope\n     @ /tmp/tmp5s212_b3.jl:41\ntest set: Error During Test at
    /tmp/tmp5s212_b3.jl:45\n  Test threw excep'
  timestamp: 1659978160
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k == 0 || length(arr) == k\n        return arr\n    elseif k == 1 && length(arr)\
    \ == 1\n        return arr\n    elseif k == 2 && arr[1] == arr[2]\n        return\
    \ arr\n    end\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp13yivu69.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp13yivu69.jl:1\n\
    in expression starting at /tmp/tmp13yivu69.jl:1\n"
  stdout: ''
  timestamp: 1659978157
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k <= length(arr)\n        return maximum_inner(arr, k)\n    else\n   \
    \     push!(result, maximum(arr[k .. end], k - 1))\n        return result\n  \
    \  end\nend\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 11 errored,
    0 broken.

    in expression starting at /tmp/tmppla3c_mx.jl:35

    '
  stdout: "test set: Error During Test at /tmp/tmppla3c_mx.jl:38\n  Test threw exception\n\
    \  Expression: candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  UndefVarError: maximum_inner\
    \ not defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n \
    \    @ Main /tmp/tmppla3c_mx.jl:27\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmppla3c_mx.jl:38 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmppla3c_mx.jl:37\ntest set:\
    \ Error During Test at /tmp/tmppla3c_mx.jl:39\n  Test threw exception\n  Expression:\
    \ candidate([4, -4, 4], 2) == [4, 4]\n  UndefVarError: maximum_inner not defined\n\
    \  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmppla3c_mx.jl:27\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmppla3c_mx.jl:39 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmppla3c_mx.jl:37\ntest set:\
    \ Error During Test at /tmp/tmppla3c_mx.jl:40\n  Test threw exception\n  Expression:\
    \ candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n  UndefVarError: maximum_inner\
    \ not defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n \
    \    @ Main /tmp/tmppla3c_mx.jl:27\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmppla3c_mx.jl:40 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmppla3c_mx.jl:37\ntest set:\
    \ Error During Test at /tmp/tmppla3c_mx.jl:41\n  Test threw exception\n  Expression:\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n  UndefVarError:\
    \ maximum_inner not defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64},\
    \ k"
  timestamp: 1659978159
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    # write your code here\n    maximum_value = arr[0]\n    maximum_index = 1\
    \ \nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp4cdei1dl.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp4cdei1dl.jl:1\n\
    in expression starting at /tmp/tmp4cdei1dl.jl:1\n"
  stdout: ''
  timestamp: 1659978157
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k == 0 return arr\n    \n    # Get the length of the array\n    n = length(arr)\n\
    using Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4,\
    \ 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_g_ot6w1.jl:1\nin expression starting at /tmp/tmp_g_ot6w1.jl:1\n"
  stdout: ''
  timestamp: 1659978157
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k > length(arr)\n        error(\"k out of range\")\n    end\nusing Test\n\
    \n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) ==\
    \ [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpspw_duds.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpspw_duds.jl:1\n\
    in expression starting at /tmp/tmpspw_duds.jl:1\n"
  stdout: ''
  timestamp: 1659978157
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k == 0 \n        return arr\n    if k > length(arr)\n        return maximum(arr,\
    \ k - 1)\n    m = maximum.(arr[1..k], k - 1)\n    maximum.(arr[1..k], k - 1) =\
    \ arr[k] \n    m\nend\nmaximum([4, -4, 4], 2)\n</cell>\n<text>\nPart 5 (5 points)\n\
    Create a function called minimum2 that has two arguments, arr1 and arr2, and returns\
    \ the minimum number between arr1 and arr2. For example, minimum2([10, 5, 12],\
    \ 12) should return 10, because 12 is the smallest number between the two.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5],\
    \ 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp85bkk2au.jl:35\nin expression starting at\
    \ /tmp/tmp85bkk2au.jl:35\n"
  stdout: ''
  timestamp: 1659978158
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    arr == sort(arr)[k..end] ? arr : maximum(maximum(arr, nil), k)\nend\n</cell>\n\
    <code language=julia-1.3>\nmaximum([-3, -4, 5], 3)\n</cell>\n<code language=julia-1.3>\n\
    maximum([4, -4, 4], 2)\n</cell>\n<code language=julia-1.3>\nmaximum([-3, 2, 1,\
    \ 2, -1, -2, 1], 1)\n</cell>\n<code language=julia-1.3>\nmaximum(maximum(maximum(maximum(maximum([4,\
    \ -4, 4], 2), [-3, 2, 1, 2, -1, -2, 1]), [1, -1000, 1000]), [-1000, 1000])\n</cell>\n\
    <text>\nProblem 7. Complete the function sumsq that returns the sum of squares\
    \ \n    of a vector (arr) of integers. Assume that all elements in the \n    vector\
    \ can be represented by 32-bit signed integers.\n    For example, arr = [1, -1000,\
    \ 1000] will produce a sumsq = 0. \n    arr = [1, 2, 3] will produce a sumsq =\
    \ 1.\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmalylavx.jl:28\nin expression starting at\
    \ /tmp/tmpmalylavx.jl:28\n"
  stdout: ''
  timestamp: 1659978158
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k > length(arr) \n        return vec() \n    \n    maximum_list = maximum_list(arr,\
    \ k)\n    maximum_list = maximum_list[1:end]\n    return maximum_list\nend\n</cell>\n\
    <text>\nQ6. Write a function called maximum_list. This function should accept\
    \ a vector arr and a positive integer k and return a sorted vector with k maximum\
    \ numbers in arr. \nThe length of the returned vector will be in the range of\
    \ [1, 1000].\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqgm3raxq.jl:33\nin expression starting at\
    \ /tmp/tmpqgm3raxq.jl:33\n"
  stdout: ''
  timestamp: 1659978158
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    sort!(reverse(arr), by=x->x[1])\n    return arr[k-1:end]\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) ==\
    \ [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 7 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpqi88pecy.jl:31

    '
  stdout: "test set: Test Failed at /tmp/tmpqi88pecy.jl:34\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [-4, 5] == [-4, -3, 5]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqi88pecy.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqi88pecy.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpqi88pecy.jl:35\n  Expression: candidate([4, -4, 4], 2) ==\
    \ [4, 4]\n   Evaluated: [4, -4, 4] == [4, 4]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpqi88pecy.jl:35 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpqi88pecy.jl:33\ntest set: Error During Test\
    \ at /tmp/tmpqi88pecy.jl:36\n  Test threw exception\n  Expression: candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2]\n  BoundsError: attempt to access 7-element Vector{Int64}\
    \ at index [0:7]\n  Stacktrace:\n   [1] throw_boundserror(A::Vector{Int64}, I::Tuple{UnitRange{Int64}})\n\
    \     @ Base ./abstractarray.jl:691\n   [2] checkbounds\n     @ ./abstractarray.jl:656\
    \ [inlined]\n   [3] getindex\n     @ ./array.jl:867 [inlined]\n   [4] maximum(arr::Vector{Int64},\
    \ k::Int64)\n     @ Main /tmp/tmpqi88pecy.jl:27\n   [5] macro expansion\n    \
    \ @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [6] macro expansion\n     @ /tmp/tmpqi88pecy.jl:36 [inlined]\n   [7] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpqi88pecy.jl:33\ntest set:\
    \ Test Failed at /tmp/tmpqi88pecy.jl:37\n  Expression: candidate([123, -123, 20,\
    \ 0, 1, 2, -3], 3) == [2, 20, 123]\n   Evaluated: [-123, 20, 0, 1, 2, -3] == [2,\
    \ 20, 123]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/"
  timestamp: 1659978161
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    return arr[(1:k).sort]\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 11 errored,
    0 broken.

    in expression starting at /tmp/tmpvhmamsuv.jl:30

    '
  stdout: "test set: Error During Test at /tmp/tmpvhmamsuv.jl:33\n  Test threw exception\n\
    \  Expression: candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  type UnitRange has\
    \ no field sort\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n\
    \   [2] maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmpvhmamsuv.jl:26\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpvhmamsuv.jl:33 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpvhmamsuv.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpvhmamsuv.jl:34\n  Test threw exception\n  Expression:\
    \ candidate([4, -4, 4], 2) == [4, 4]\n  type UnitRange has no field sort\n  Stacktrace:\n\
    \   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] maximum(arr::Vector{Int64},\
    \ k::Int64)\n     @ Main /tmp/tmpvhmamsuv.jl:26\n   [3] macro expansion\n    \
    \ @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [4] macro expansion\n     @ /tmp/tmpvhmamsuv.jl:34 [inlined]\n   [5] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpvhmamsuv.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpvhmamsuv.jl:35\n  Test threw exception\n  Expression:\
    \ candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n  type UnitRange has no field\
    \ sort\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2]\
    \ maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmpvhmamsuv.jl:26\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpvhmamsuv.jl:35 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpvhmamsuv.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpvhmamsuv.jl:36\n  Test threw exception\n  Expression:\
    \ candidate([123, -123, 20, 0, "
  timestamp: 1659978160
- exit_code: -1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    return maximum([max(arr[i] for i in 1:k), max(arr[end - k + 1:end] for i\
    \ in 1:k)]);\nend\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: Timeout
  stderr: 'b''ERROR: LoadError: '''
  stdout: 'b''test set: Error During Test at /tmp/tmpil3pjuzd.jl:33\n  Test threw
    exception\n  Expression: candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  MethodError:
    no method matching max(::Base.Generator{UnitRange{Int64}, var"#1#3"{Vector{Int64}}})\n  Closest
    candidates are:\n    max(::Any, !Matched::Missing) at ~/.conda/envs/polyglot/share/julia/base/missing.jl:137\n    max(::Any,
    !Matched::Any) at ~/.conda/envs/polyglot/share/julia/base/operators.jl:492\n    max(::Any,
    !Matched::Any, !Matched::Any, !Matched::Any...) at ~/.conda/envs/polyglot/share/julia/base/operators.jl:655\n    ...\n  Stacktrace:\n   [1]
    maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmpil3pjuzd.jl:26\n   [2]
    macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpil3pjuzd.jl:33 [inlined]\n   [4]
    macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpil3pjuzd.jl:32\ntest set: Error
    During Test at /tmp/tmpil3pjuzd.jl:34\n  Test threw exception\n  Expression: candidate([4,
    -4, 4], 2) == [4, 4]\n  MethodError: no method matching max(::Base.Generator{UnitRange{Int64},
    var"#1#3"{Vector{Int64}}})\n  Closest candidates are:\n    max(::Any, !Matched::Missing)
    at ~/.conda/envs/polyglot/share/julia/base/missing.jl:137\n    max(::Any, !Matched::Any)
    at ~/.conda/envs/polyglot/share/julia/base/operators.jl:492\n    max(::Any, !Matched::Any,
    !Matched::Any, !Matched::Any...) at ~/.conda/envs/polyglot/share/julia/base/operators.jl:655\n    ...\n  Stacktrace:\n   [1]
    maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmpil3pjuzd.jl:26\n   [2]
    macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpil3pjuzd.jl:34 [inlined]\n   [4]
    macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpil3pjuzd.jl:32\ntest set: Error '
  timestamp: 1659978162
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k > length(arr) \n        error(\"k must be <= length(arr)\") \n    else\
    \ \n        maximum_rec(arr, k, 0) \n    end\nend \nusing Test\n\n@testset begin\n\
    \ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t\
    @test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1,\
    \ -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2,\
    \ 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\
    \t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\
    \t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 11 errored,
    0 broken.

    in expression starting at /tmp/tmpp6u4giva.jl:34

    '
  stdout: "test set: Error During Test at /tmp/tmpp6u4giva.jl:37\n  Test threw exception\n\
    \  Expression: candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  UndefVarError: maximum_rec\
    \ not defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n \
    \    @ Main /tmp/tmpp6u4giva.jl:29\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpp6u4giva.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpp6u4giva.jl:36\ntest set:\
    \ Error During Test at /tmp/tmpp6u4giva.jl:38\n  Test threw exception\n  Expression:\
    \ candidate([4, -4, 4], 2) == [4, 4]\n  UndefVarError: maximum_rec not defined\n\
    \  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmpp6u4giva.jl:29\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpp6u4giva.jl:38 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpp6u4giva.jl:36\ntest set:\
    \ Error During Test at /tmp/tmpp6u4giva.jl:39\n  Test threw exception\n  Expression:\
    \ candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n  UndefVarError: maximum_rec\
    \ not defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n \
    \    @ Main /tmp/tmpp6u4giva.jl:29\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpp6u4giva.jl:39 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpp6u4giva.jl:36\ntest set:\
    \ Error During Test at /tmp/tmpp6u4giva.jl:40\n  Test threw exception\n  Expression:\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n  UndefVarError:\
    \ maximum_rec not defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)"
  timestamp: 1659978161
- exit_code: -1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k > length(arr)\n        throw(BoundsError(\"k > length(arr)\", k, length(arr)))\n\
    \    elseif k == length(arr)\n        return arr\n    end\n    \n    idxs = Vector{Int64}(k)\n\
    \    idxs[1] = length(arr)\n    \n    biggest = maximum(arr[2 : idxs[1]], k -\
    \ 2)\n    \n    idxs[end] = length(arr) - idxs[end]\n    \n    for i in reverse(idxs)\n\
    \        if arr[i] > biggest\n            biggest = arr[i]\n        end\n    end\n\
    \    \n    return biggest::Vector{Int64}\nend\nusing Test\n\n@testset begin\n\n\
    candidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Test Failed at /tmp/tmpoge4h705.jl:52\n  Expression: candidate([-3,
    -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [-3, -4, 5] == [-4, -3, 5]\nStacktrace:\n
    [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n [2] macro expansion\n   @ /tmp/tmpoge4h705.jl:52 [inlined]\n [3] macro
    expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n [4] top-level scope\n   @ /tmp/tmpoge4h705.jl:51\ntest set: Error
    During Test at /tmp/tmpoge4h705.jl:53\n  Test threw exception\n  Expression: candidate([4,
    -4, 4], 2) == [4, 4]\n  MethodError: no method matching Vector{Int64}(::Int64)\n  Closest
    candidates are:\n    Vector{T}() where T at ~/.conda/envs/polyglot/share/julia/base/boot.jl:476\n    Array{T,
    N}(!Matched::Core.Compiler.BitArray{N}) where {T, N} at ~/.conda/envs/polyglot/share/julia/base/bitarray.jl:494\n    Vector{T}(!Matched::Core.Compiler.AbstractRange{T})
    where T at ~/.conda/envs/polyglot/share/julia/base/range.jl:1286\n    ...\n  Stacktrace:\n   [1]
    maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmpoge4h705.jl:32\n   [2]
    macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpoge4h705.jl:53 [inlined]\n   [4]
    macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpoge4h705.jl:51\ntest set: Error
    During Test at /tmp/tmpoge4h705.jl:54\n  Test threw exception\n  Expression: candidate([-3,
    2, 1, 2, -1, -2, 1], 1) == [2]\n  MethodError: no method matching Vector{Int64}(::Int64)\n  Closest
    candidates are:\n    Vector{T}() where T at ~/.conda/envs/polyglot/share/julia/base/boot.jl:476\n    Array{T,
    N}(!Matched::Core.Compiler.BitArray{N}) where {T, N} at ~/.conda/envs/polyglot/share/julia/base/bitarray.jl:494\n    Vector{T}(!Matched::Core.Compiler.AbstractRange{T})
    where T at ~/.conda/envs/polyglot/share/julia/base/range.jl:1286\n    ...\n  Stacktra'
  timestamp: 1659978162
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k > length(arr)\n        return arr\n    end\nusing Test\n\n@testset begin\n\
    \ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t\
    @test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1,\
    \ -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2,\
    \ 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\
    \t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\
    \t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpa_19x3qb.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpa_19x3qb.jl:1\n\
    in expression starting at /tmp/tmpa_19x3qb.jl:1\n"
  stdout: ''
  timestamp: 1659978159
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k == length(arr) \n        return arr \n    else \n        arr = maximum(maximum(arr,k-1),k)\
    \ \n    end\nend\n\"\"\"\n    Given a sorted vector arr of integers and a positive\
    \ integer k, return a \n    sorted vector of length k with the minimum k numbers\
    \ in arr.\n    \n    Example 1:\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\
    \t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4],\
    \ 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqgtg15kp.jl:32\nin expression starting at\
    \ /tmp/tmpqgtg15kp.jl:32\n"
  stdout: ''
  timestamp: 1659978159
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k == 0 || k > length(arr) \n        return arr \n    \n    # create result\
    \ array \n    result = zeros(k) \nusing Test\n\n@testset begin\n\ncandidate =\
    \ maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmps7rungr8.jl:1\nin expression starting at /tmp/tmps7rungr8.jl:1\n"
  stdout: ''
  timestamp: 1659978159
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k > length(arr)\n        return fill(NaN,k)\n    else\n        sort!(arr,\
    \ by=x->x)\n        revsort!(arr,by=x->-x)\n        arr[k+1:end]\n    end\nend\n\
    \"\"\"\n    Given a vector arr of integers and a positive integer k, return a\
    \ sorted vector \n    of length k with the minimum k numbers in arr.\nusing Test\n\
    \n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) ==\
    \ [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppkujop66.jl:34\nin expression starting at\
    \ /tmp/tmppkujop66.jl:34\n"
  stdout: ''
  timestamp: 1659978159
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    maximum!(arr, Vector{Int64}(k))\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 11 errored,
    0 broken.

    in expression starting at /tmp/tmp7_uc_veq.jl:30

    '
  stdout: "test set: Error During Test at /tmp/tmp7_uc_veq.jl:33\n  Test threw exception\n\
    \  Expression: candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  MethodError: no method\
    \ matching Vector{Int64}(::Int64)\n  Closest candidates are:\n    Vector{T}()\
    \ where T at ~/.conda/envs/polyglot/share/julia/base/boot.jl:476\n    Array{T,\
    \ N}(!Matched::Core.Compiler.BitArray{N}) where {T, N} at ~/.conda/envs/polyglot/share/julia/base/bitarray.jl:494\n\
    \    Vector{T}(!Matched::Core.Compiler.AbstractRange{T}) where T at ~/.conda/envs/polyglot/share/julia/base/range.jl:1286\n\
    \    ...\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @\
    \ Main /tmp/tmp7_uc_veq.jl:26\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp7_uc_veq.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp7_uc_veq.jl:32\ntest set:\
    \ Error During Test at /tmp/tmp7_uc_veq.jl:34\n  Test threw exception\n  Expression:\
    \ candidate([4, -4, 4], 2) == [4, 4]\n  MethodError: no method matching Vector{Int64}(::Int64)\n\
    \  Closest candidates are:\n    Vector{T}() where T at ~/.conda/envs/polyglot/share/julia/base/boot.jl:476\n\
    \    Array{T, N}(!Matched::Core.Compiler.BitArray{N}) where {T, N} at ~/.conda/envs/polyglot/share/julia/base/bitarray.jl:494\n\
    \    Vector{T}(!Matched::Core.Compiler.AbstractRange{T}) where T at ~/.conda/envs/polyglot/share/julia/base/range.jl:1286\n\
    \    ...\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @\
    \ Main /tmp/tmp7_uc_veq.jl:26\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp7_uc_veq.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp7_uc_veq.jl:32\ntest set:\
    \ Error During Test at /tmp/tmp7_uc_veq.jl:35\n  Test threw exception\n  Expression:\
    \ candidate([-3"
  timestamp: 1659978162
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    arr = arr + [-1000; 1000]\n    arr = sort(arr)\n    arr = arr[k+1 : end]\n\
    \    arr = arr + [-1000; 1000]\n    return arr\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t\
    @test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1,\
    \ -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2,\
    \ 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\
    \t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\
    \t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 11 errored,
    0 broken.

    in expression starting at /tmp/tmpxs9yne8x.jl:34

    '
  stdout: "test set: Error During Test at /tmp/tmpxs9yne8x.jl:37\n  Test threw exception\n\
    \  Expression: candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  DimensionMismatch(\"\
    dimensions must match: a has dims (Base.OneTo(3),), b has dims (Base.OneTo(2),),\
    \ mismatch at 1\")\n  Stacktrace:\n   [1] promote_shape\n     @ ./indices.jl:178\
    \ [inlined]\n   [2] promote_shape\n     @ ./indices.jl:169 [inlined]\n   [3] +(A::Vector{Int64},\
    \ Bs::Vector{Int64})\n     @ Base ./arraymath.jl:45\n   [4] maximum(arr::Vector{Int64},\
    \ k::Int64)\n     @ Main /tmp/tmpxs9yne8x.jl:26\n   [5] macro expansion\n    \
    \ @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [6] macro expansion\n     @ /tmp/tmpxs9yne8x.jl:37 [inlined]\n   [7] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpxs9yne8x.jl:36\ntest set:\
    \ Error During Test at /tmp/tmpxs9yne8x.jl:38\n  Test threw exception\n  Expression:\
    \ candidate([4, -4, 4], 2) == [4, 4]\n  DimensionMismatch(\"dimensions must match:\
    \ a has dims (Base.OneTo(3),), b has dims (Base.OneTo(2),), mismatch at 1\")\n\
    \  Stacktrace:\n   [1] promote_shape\n     @ ./indices.jl:178 [inlined]\n   [2]\
    \ promote_shape\n     @ ./indices.jl:169 [inlined]\n   [3] +(A::Vector{Int64},\
    \ Bs::Vector{Int64})\n     @ Base ./arraymath.jl:45\n   [4] maximum(arr::Vector{Int64},\
    \ k::Int64)\n     @ Main /tmp/tmpxs9yne8x.jl:26\n   [5] macro expansion\n    \
    \ @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [6] macro expansion\n     @ /tmp/tmpxs9yne8x.jl:38 [inlined]\n   [7] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpxs9yne8x.jl:36\ntest set:\
    \ Error During Test at /tmp/tmpxs9yne8x.jl:39\n  Test threw exception\n  Expression:\
    \ candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n  DimensionMismatch(\"dimensions\
    \ must match: a has dims (Base.OneTo(7),), b has dims (Base.OneTo(2),), mismatch\
    \ at 1\")\n  Stacktrace:\n   [1] promote_shape\n     @ ./indices.jl:178 [inlined]\n\
    \   ["
  timestamp: 1659978162
- exit_code: -1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k < 1 || k > length(arr) \n        throw(ArgumentError(\"k must be in\
    \ [1, length(arr)]\"))\n    end\n    if k == 1 \n        return arr\n    end\n\
    \    max_length = k\n    maximums = []\n    for ele in arr\n        if ele > maximum(maximum(maximums),\
    \ maximums)\n            max_length = length(maximums)\n            maximums =\
    \ []\n        end\n        push!(maximums, ele)\n    end\n    return maximums[max_length\
    \ .. end]\nend\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpcsom5z6i.jl:48\n  Test threw
    exception\n  Expression: candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  MethodError:
    no method matching maximum(::Vector{Any})\n  You may have intended to import Base.maximum\n  Closest
    candidates are:\n    maximum(!Matched::Vector{Int64}, !Matched::Int64) at /tmp/tmpcsom5z6i.jl:25\n  Stacktrace:\n   [1]
    maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmpcsom5z6i.jl:35\n   [2]
    macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpcsom5z6i.jl:48 [inlined]\n   [4]
    macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpcsom5z6i.jl:47\ntest set: Error
    During Test at /tmp/tmpcsom5z6i.jl:49\n  Test threw exception\n  Expression: candidate([4,
    -4, 4], 2) == [4, 4]\n  MethodError: no method matching maximum(::Vector{Any})\n  You
    may have intended to import Base.maximum\n  Closest candidates are:\n    maximum(!Matched::Vector{Int64},
    !Matched::Int64) at /tmp/tmpcsom5z6i.jl:25\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64},
    k::Int64)\n     @ Main /tmp/tmpcsom5z6i.jl:35\n   [2] macro expansion\n     @
    ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmpcsom5z6i.jl:49 [inlined]\n   [4] macro expansion\n     @
    ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmpcsom5z6i.jl:47\ntest set: Test Failed at /tmp/tmpcsom5z6i.jl:50\n  Expression:
    candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n   Evaluated: [-3, 2, 1, 2, -1,
    -2, 1] == [2]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n [2] macro expansion\n   @ /tmp/tmpcsom5z6i.jl:50 [inlined]\n [3] macro
    expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n [4] top-level scope\n   @ /tmp/tm'
  timestamp: 1659978163
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    len = length(arr)\n    if len < k\n        arr\n    elseif k > len\n    \
    \    arr\n    else\n        arr = arr[k:end]\n        maximum (sort(arr), k-1)\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: space before \"(\" not allowed in \"maximum (\"\
    \ at /tmp/tmpxzkc979p.jl:33\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxzkc979p.jl:33\n\
    in expression starting at /tmp/tmpxzkc979p.jl:33\n"
  stdout: ''
  timestamp: 1659978159
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    maximum = sort(arr)\n    return maximum[k+1:end]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3,\
    \ 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2,\
    \ 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1,\
    \ 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0,\
    \ 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 11 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp5lkr3y3k.jl:31

    '
  stdout: "test set: Test Failed at /tmp/tmp5lkr3y3k.jl:34\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: Int64[] == [-4, -3, 5]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5lkr3y3k.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5lkr3y3k.jl:33\ntest set: Test\
    \ Failed at /tmp/tmp5lkr3y3k.jl:35\n  Expression: candidate([4, -4, 4], 2) ==\
    \ [4, 4]\n   Evaluated: [4] == [4, 4]\nStacktrace:\n [1] macro expansion\n   @\
    \ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp5lkr3y3k.jl:35 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp5lkr3y3k.jl:33\ntest set: Test Failed at /tmp/tmp5lkr3y3k.jl:36\n\
    \  Expression: candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n   Evaluated: [-2,\
    \ -1, 1, 1, 2, 2] == [2]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5lkr3y3k.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5lkr3y3k.jl:33\ntest set: Test\
    \ Failed at /tmp/tmp5lkr3y3k.jl:37\n  Expression: candidate([123, -123, 20, 0,\
    \ 1, 2, -3], 3) == [2, 20, 123]\n   Evaluated: [1, 2, 20, 123] == [2, 20, 123]\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5lkr3y3k.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5lkr3y3k.jl:33\ntest set: Test\
    \ Failed at /tmp/tmp5lkr3y3k.jl:38\n  Expression: candidate([-123, 20, 0, 1, 2,\
    \ -3], 4) == [0, 1, 2, 20]\n   Evaluated: [2, 20] == [0, 1, 2"
  timestamp: 1659978161
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k < 1 || k > length(arr)\n        raise ArgumentError(\"k out of range\"\
    )\n    elseif k == length(arr)\n        return arr\n    else\n        return arr[k-1]\
    \ => maximum(arr[1:k], k-2)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"ArgumentError\"\nStacktrace:\n [1]\
    \ top-level scope\n   @ /tmp/tmp7y6eengw.jl:27\nin expression starting at /tmp/tmp7y6eengw.jl:27\n"
  stdout: ''
  timestamp: 1659978160
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    arr = sort(arr)\n    if k == 0 \n        return arr\n    else if k < length(arr)\n\
    \        return maximum(arr[1:end-1], k-1)\n    else\n        return maximum(arr[1:end],\
    \ k-1)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t\
    @test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4],\
    \ 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxg9e9wpk.jl:29\nin expression starting at\
    \ /tmp/tmpxg9e9wpk.jl:29\n"
  stdout: ''
  timestamp: 1659978160
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k < 1 \n        return arr \n    \n    maximum_idx = k \n    maximum =\
    \ arr[k] \n    for idx = k+1:size(arr,1) \n        if arr[idx] > maximum \n  \
    \          maximum_idx = idx \n            maximum = arr[idx] \n        end \n\
    \    end \n    return maximum(maximum(arr[1:(maximum_idx-1)], maximum), maximum)\
    \ \nend\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxbxqa7yo.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxbxqa7yo.jl:1\n\
    in expression starting at /tmp/tmpxbxqa7yo.jl:1\n"
  stdout: ''
  timestamp: 1659978160
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    maximum!(arr, k)\n    return arr\nend\nmaximum(arr::Vector{Int64}, k::Int64)\
    \ =\n    [maximum(a, k-1) for a in arr]\nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 11 errored,
    0 broken.

    in expression starting at /tmp/tmpg2exlrcy.jl:33

    '
  stdout: "test set: Error During Test at /tmp/tmpg2exlrcy.jl:36\n  Test threw exception\n\
    \  Expression: candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  MethodError: no method\
    \ matching maximum(::Int64, ::Int64)\n  You may have intended to import Base.maximum\n\
    \  Closest candidates are:\n    maximum(!Matched::Vector{Int64}, ::Int64) at /tmp/tmpg2exlrcy.jl:29\n\
    \  Stacktrace:\n   [1] (::var\"#1#2\"{Int64})(a::Int64)\n     @ Main ./none:0\n\
    \   [2] iterate\n     @ ./generator.jl:47 [inlined]\n   [3] collect\n     @ ./array.jl:724\
    \ [inlined]\n   [4] maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmpg2exlrcy.jl:29\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpg2exlrcy.jl:36 [inlined]\n\
    \   [7] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpg2exlrcy.jl:35\ntest set:\
    \ Error During Test at /tmp/tmpg2exlrcy.jl:37\n  Test threw exception\n  Expression:\
    \ candidate([4, -4, 4], 2) == [4, 4]\n  MethodError: no method matching maximum(::Int64,\
    \ ::Int64)\n  You may have intended to import Base.maximum\n  Closest candidates\
    \ are:\n    maximum(!Matched::Vector{Int64}, ::Int64) at /tmp/tmpg2exlrcy.jl:29\n\
    \  Stacktrace:\n   [1] (::var\"#1#2\"{Int64})(a::Int64)\n     @ Main ./none:0\n\
    \   [2] iterate\n     @ ./generator.jl:47 [inlined]\n   [3] collect\n     @ ./array.jl:724\
    \ [inlined]\n   [4] maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmpg2exlrcy.jl:29\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpg2exlrcy.jl:37 [inlined]\n\
    \   [7] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpg2exlrcy.jl:35\ntest set:\
    \ Error During Test at /tmp/tmpg2exlrcy.jl:38\n  Test threw exception\n  Expression:\
    \ candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n  MethodError: no method matching\
    \ maximum(::Int64, ::Int64)\n  You may have in"
  timestamp: 1659978164
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if length(arr) <= k\n        arr\n    else\n        maximum([maximum(arr[0..k-1],k-1),\
    \ maximum(arr[1..end],k)], k)\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpju_ui8uf.jl:34

    '
  stdout: "test set: Test Failed at /tmp/tmpju_ui8uf.jl:37\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [-3, -4, 5] == [-4, -3, 5]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpju_ui8uf.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpju_ui8uf.jl:36\ntest set: Error\
    \ During Test at /tmp/tmpju_ui8uf.jl:38\n  Test threw exception\n  Expression:\
    \ candidate([4, -4, 4], 2) == [4, 4]\n  UndefVarError: .. not defined\n  Stacktrace:\n\
    \   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmpju_ui8uf.jl:29\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpju_ui8uf.jl:38 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpju_ui8uf.jl:36\ntest set:\
    \ Error During Test at /tmp/tmpju_ui8uf.jl:39\n  Test threw exception\n  Expression:\
    \ candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n  UndefVarError: .. not defined\n\
    \  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmpju_ui8uf.jl:29\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpju_ui8uf.jl:39 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpju_ui8uf.jl:36\ntest set:\
    \ Error During Test at /tmp/tmpju_ui8uf.jl:40\n  Test threw exception\n  Expression:\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n  UndefVarError:\
    \ .. not defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n\
    \     @ Main /tmp/tmpju_ui8uf.jl:29\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] mac"
  timestamp: 1659978164
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    maximums = Vector{Int64}()\n    for x in arr\n        if maximums.length\
    \ == k || x > maximum(maximums, k)\n            maximums.push(x)\n        end\n\
    \    end\n    maximums\nend\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\
    \t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4],\
    \ 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 11 errored,
    0 broken.

    in expression starting at /tmp/tmpjddpth9o.jl:36

    '
  stdout: "test set: Error During Test at /tmp/tmpjddpth9o.jl:39\n  Test threw exception\n\
    \  Expression: candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  type Array has no field\
    \ length\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n \
    \  [2] maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmpjddpth9o.jl:28\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpjddpth9o.jl:39 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpjddpth9o.jl:38\ntest set:\
    \ Error During Test at /tmp/tmpjddpth9o.jl:40\n  Test threw exception\n  Expression:\
    \ candidate([4, -4, 4], 2) == [4, 4]\n  type Array has no field length\n  Stacktrace:\n\
    \   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] maximum(arr::Vector{Int64},\
    \ k::Int64)\n     @ Main /tmp/tmpjddpth9o.jl:28\n   [3] macro expansion\n    \
    \ @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [4] macro expansion\n     @ /tmp/tmpjddpth9o.jl:40 [inlined]\n   [5] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpjddpth9o.jl:38\ntest set:\
    \ Error During Test at /tmp/tmpjddpth9o.jl:41\n  Test threw exception\n  Expression:\
    \ candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n  type Array has no field length\n\
    \  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] maximum(arr::Vector{Int64},\
    \ k::Int64)\n     @ Main /tmp/tmpjddpth9o.jl:28\n   [3] macro expansion\n    \
    \ @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [4] macro expansion\n     @ /tmp/tmpjddpth9o.jl:41 [inlined]\n   [5] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpjddpth9o.jl:38\ntest set:\
    \ Error During Test at /tmp/tmpjddpth9o.jl:42\n  Test threw exception\n  Expression:\
    \ candidate([123, -123, 20, 0, 1, 2, "
  timestamp: 1659978163
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    maximum=k-1\n    if k>length(arr)\n        k=length(arr)\n    end\n    maximum=maximum\n\
    \    maximum=maximum\n    maximum=maximum\n    maximum=maximum\n    maximum=maximum\n\
    \    maximum=maximum\n    maximum=maximum\n    maximum=maximum\n    maximum=maximum\n\
    \    maximum=maximum\n    maximum=maximum\n    maximum=maximum\n    maximum=maximum\n\
    \    maximum=maximum\n    maximum=maximum\n    maximum=maximum\n    maximum=maximum\n\
    \    maximum=maximum\n    maximum=maximum\n    maximum=maximum\n    maximum=maximum\n\
    \    maximum=maximum\n    maximum=maximum\n    maximum=maximum\n    maximum=maximum\n\
    \    maximum=maximum\n    maximum=maximum\n    maximum=maximum\n    maximum=maximum\n\
    \    maximum=maximum\n    maximum=maximum\n    maximum=maximum\n    maximum=maximum\n\
    \    maximum=maximum\n    maximum=maximum\n    maximum=maximum\n    maximum=maximum\n\
    \    maximum=maximum\n    maximum=maximum\n    maximum=maximum\n    maximum=maximum\n\
    \    maximum=maximum\n    maximum=maximum\n    maximum=maximum\n    maximum=maximum\n\
    \    maximum=maximum\n    maximum=maximum\n    maximum=maximum\n    maximum=maximum\n\
    \    maximum=maximum\n    maximum=maximum\n    maximum=maximum\n    maximum=maximum\n\
    \    maximum=maximum\n    maximum=maximum\n    maximum=maximum\n    maximum=maximum\n\
    \    maximum=maximum\n    maximum=maximum\n    maximum=maximum\n    maximum=maximum\n\
    \    maximum=maximum\n    maximum=maximum\n    maximum=maximum\n    maximum=maximum\n\
    \    maximum=maximum\n    maximum=maximum\n    maximum=maximum\n    maximum=maximum\n\
    \    maximum=maximum\n    maximum=maximum\n    maximum=maximum\n    maximum=maximum\n\
    \    maximum=maximum\n    maximum=maximum\n    maximum=maximum\n    maximum=maximum\n\
    \    maximum=maximum\n    maximum=maximum\n    maximum=maximum\n    maximum=maximum\n\
    \    maximum=maximum\n    maximum=maximum\n    maximum=maximum\n    maximum=maximum\n\
    \    maximum=maximum\n    maximum=maximum\n    maximum=maximum\n    maximum=maximum\n\
    \    maximum=maximum\n    maximum=maximum\n    maximum=maximum\n    maximum=maximum\n\
    \    maximum=maximum\n    maximum=maximum\n    maximum=maximum\n    maximum=maximum\n\
    \    maximum=maximum\n    maximum=\nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpdtkwk514.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpdtkwk514.jl:1\n\
    in expression starting at /tmp/tmpdtkwk514.jl:1\n"
  stdout: ''
  timestamp: 1659978161
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    # Complete this function\nend\n</code>\nTo find the maximum:\n<code>\nmaximum([-3,\
    \ -4, 5], 3)\n</code>\nResult:\n<code>\n[-4, -3, 5]\n</code>\nTo find the minimum\
    \ element:\n<code>\nminimum([-3, -4, 5], 3)\n</code>\nResult:\n<code>\n[-4, -3,\
    \ 5]\n</code>\n<|/ a dscore=1 |>\n<| a dscore=0 |>\nHere's a solution that uses\
    \ sort and maximum:\n<code>\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\
    \t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4],\
    \ 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpuj12ms1d.jl:28\nin expression starting at\
    \ /tmp/tmpuj12ms1d.jl:28\n"
  stdout: ''
  timestamp: 1659978161
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \        maximum = sort(arr)\n        maximum = maximum[1:k]\n        return maximum\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 5 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpj2yb4dwk.jl:32

    '
  stdout: "test set: Test Failed at /tmp/tmpj2yb4dwk.jl:36\n  Expression: candidate([4,\
    \ -4, 4], 2) == [4, 4]\n   Evaluated: [-4, 4] == [4, 4]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj2yb4dwk.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj2yb4dwk.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpj2yb4dwk.jl:37\n  Expression: candidate([-3, 2, 1, 2, -1,\
    \ -2, 1], 1) == [2]\n   Evaluated: [-3] == [2]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpj2yb4dwk.jl:37 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpj2yb4dwk.jl:34\ntest set: Test Failed at /tmp/tmpj2yb4dwk.jl:38\n\
    \  Expression: candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n  \
    \ Evaluated: [-123, -3, 0] == [2, 20, 123]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpj2yb4dwk.jl:38 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpj2yb4dwk.jl:34\ntest set: Test Failed at /tmp/tmpj2yb4dwk.jl:39\n\
    \  Expression: candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n   Evaluated:\
    \ [-123, -3, 0, 1] == [0, 1, 2, 20]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj2yb4dwk.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj2yb4dwk.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpj2yb4dwk.jl:41\n  Expression: candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n   Evaluated: [-10, -1] == [3, "
  timestamp: 1659978162
- exit_code: -1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k==1\n        return arr\n    else\n        max1=maximum(arr,k-1)\n  \
    \      max2=maximum(arr[end-1:end],k-1)\n        arr=union(arr,[max2,max1])\n\
    \        arr\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\
    \t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4],\
    \ 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpplitxf3v.jl:40\n  Test threw
    exception\n  Expression: candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  MethodError:
    Cannot `convert` an object of type Vector{Int64} to an object of type Int64\n  Closest
    candidates are:\n    convert(::Type{T}, !Matched::Ptr) where T<:Integer at ~/.conda/envs/polyglot/share/julia/base/pointer.jl:23\n    convert(::Type{T},
    !Matched::T) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T},
    !Matched::Number) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:7\n    ...\n  Stacktrace:\n    [1]
    setindex!(A::Vector{Int64}, x::Vector{Int64}, i1::Int64)\n      @ Base ./array.jl:903\n    [2]
    _unsafe_copyto!(dest::Vector{Int64}, doffs::Int64, src::Vector{Any}, soffs::Int64,
    n::Int64)\n      @ Base ./array.jl:253\n    [3] unsafe_copyto!\n      @ ./array.jl:307
    [inlined]\n    [4] _copyto_impl!\n      @ ./array.jl:331 [inlined]\n    [5] copyto!\n      @
    ./array.jl:317 [inlined]\n    [6] copyto!\n      @ ./array.jl:343 [inlined]\n    [7]
    copyto_axcheck!\n      @ ./abstractarray.jl:1104 [inlined]\n    [8] Vector{Int64}(x::Vector{Any})\n      @
    Base ./array.jl:563\n    [9] convert\n      @ ./array.jl:554 [inlined]\n   [10]
    maximum(arr::Vector{Int64}, k::Int64)\n      @ Main /tmp/tmpplitxf3v.jl:32\n   [11]
    maximum(arr::Vector{Int64}, k::Int64)\n      @ Main /tmp/tmpplitxf3v.jl:29\n   [12]
    macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [13] macro expansion\n      @ /tmp/tmpplitxf3v.jl:40 [inlined]\n   [14]
    macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [15] top-level scope\n      @ /tmp/tmpplitxf3v.jl:39\ntest set:
    Error During Test at /tmp/tmpplitxf3v.jl:41\n  Test threw exception\n  Expression:
    candidate([4, -4, 4], 2) == [4, 4]\n  MethodError: Cannot `convert` an object
    of type Vector{Int64} to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},
    !Matched::Ptr) w'
  timestamp: 1659978165
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    maximum_list = maximum_list(arr, k)\n    return maximum_list\nend\nmaximum()\n\
    using Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4,\
    \ 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: MethodError: no method matching maximum()\nClosest candidates\
    \ are:\n  maximum(!Matched::Vector{Int64}, !Matched::Int64) at /tmp/tmplrer3b8z.jl:25\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmplrer3b8z.jl:29\nin expression\
    \ starting at /tmp/tmplrer3b8z.jl:29\n"
  stdout: ''
  timestamp: 1659978164
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k < 1 || k < length(arr) \n    error(\"k is out of range\") \n    end\
    \ \n    result = arr \n    for i in 2:k \n        max = -Inf \n        for j in\
    \ 0 .. length(result) - 1 \n            if result[j] > max \n                max\
    \ = result[j] \n            end \n        end \n        result[i] = max \n   \
    \ end \n    result \nend \nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\
    \t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4],\
    \ 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 11 errored,
    0 broken.

    in expression starting at /tmp/tmpy0vpzeri.jl:43

    '
  stdout: "test set: Error During Test at /tmp/tmpy0vpzeri.jl:46\n  Test threw exception\n\
    \  Expression: candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  UndefVarError: .. not\
    \ defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @\
    \ Main /tmp/tmpy0vpzeri.jl:32\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpy0vpzeri.jl:46 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpy0vpzeri.jl:45\ntest set:\
    \ Error During Test at /tmp/tmpy0vpzeri.jl:47\n  Test threw exception\n  Expression:\
    \ candidate([4, -4, 4], 2) == [4, 4]\n  k is out of range\n  Stacktrace:\n   [1]\
    \ error(s::String)\n     @ Base ./error.jl:33\n   [2] maximum(arr::Vector{Int64},\
    \ k::Int64)\n     @ Main /tmp/tmpy0vpzeri.jl:27\n   [3] macro expansion\n    \
    \ @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [4] macro expansion\n     @ /tmp/tmpy0vpzeri.jl:47 [inlined]\n   [5] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpy0vpzeri.jl:45\ntest set:\
    \ Error During Test at /tmp/tmpy0vpzeri.jl:48\n  Test threw exception\n  Expression:\
    \ candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n  k is out of range\n  Stacktrace:\n\
    \   [1] error(s::String)\n     @ Base ./error.jl:33\n   [2] maximum(arr::Vector{Int64},\
    \ k::Int64)\n     @ Main /tmp/tmpy0vpzeri.jl:27\n   [3] macro expansion\n    \
    \ @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [4] macro expansion\n     @ /tmp/tmpy0vpzeri.jl:48 [inlined]\n   [5] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpy0vpzeri.jl:45\ntest set:\
    \ Error During Test at /tmp/tmpy0vpzeri.jl:49\n  Test threw exception\n  Expression:\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n  k is out of range\n\
    \  Stacktrace:\n   [1] error(s::"
  timestamp: 1659978164
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k == 1 \n        return arr \n    elseif k <= length(arr) \n        maximum\
    \ = maximum(maximum(arr[1:k]), k-1) # \u6700\u5927\u7684\u4E00\u4E2A\u5143\u7D20\
    \n    end\n    return maximum\nend\nmaximum(arr::Vector{Int64}, k::Int64) = get(maximum!(arr,\
    \ k), k)\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 11 errored,
    0 broken.

    in expression starting at /tmp/tmpv_4cpf2a.jl:36

    '
  stdout: "test set: Error During Test at /tmp/tmpv_4cpf2a.jl:39\n  Test threw exception\n\
    \  Expression: candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  MethodError: no method\
    \ matching maximum!(::Vector{Int64}, ::Int64)\n  Closest candidates are:\n   \
    \ maximum!(::AbstractArray, !Matched::AbstractArray; init) at ~/.conda/envs/polyglot/share/julia/base/reducedim.jl:913\n\
    \  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmpv_4cpf2a.jl:33\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpv_4cpf2a.jl:39 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpv_4cpf2a.jl:38\ntest set:\
    \ Error During Test at /tmp/tmpv_4cpf2a.jl:40\n  Test threw exception\n  Expression:\
    \ candidate([4, -4, 4], 2) == [4, 4]\n  MethodError: no method matching maximum!(::Vector{Int64},\
    \ ::Int64)\n  Closest candidates are:\n    maximum!(::AbstractArray, !Matched::AbstractArray;\
    \ init) at ~/.conda/envs/polyglot/share/julia/base/reducedim.jl:913\n  Stacktrace:\n\
    \   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmpv_4cpf2a.jl:33\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpv_4cpf2a.jl:40 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpv_4cpf2a.jl:38\ntest set:\
    \ Error During Test at /tmp/tmpv_4cpf2a.jl:41\n  Test threw exception\n  Expression:\
    \ candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n  MethodError: no method matching\
    \ maximum!(::Vector{Int64}, ::Int64)\n  Closest candidates are:\n    maximum!(::AbstractArray,\
    \ !Matched::AbstractArray; init) at ~/.conda/envs/polyglot/share/julia/base/reducedim.jl:913\n\
    \  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmpv_4cpf2a.jl:33\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/shar"
  timestamp: 1659978165
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    k = min(k, length(arr)-1)\n    maximum_value::Int64 = maximum(arr[start:end],\
    \ k)\n    maximum_values = Vector{Int64}()\n    for value in arr[start:end]\n\
    \        if value == maximum_value\n            push!(maximum_values, value)\n\
    \        end\n    end\n    return maximum_values\nend\nmaximum()\nusing Test\n\
    \n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) ==\
    \ [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: MethodError: no method matching maximum()\nClosest candidates\
    \ are:\n  maximum(!Matched::Vector{Int64}, !Matched::Int64) at /tmp/tmpprjc2iem.jl:25\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmpprjc2iem.jl:36\nin expression\
    \ starting at /tmp/tmpprjc2iem.jl:36\n"
  stdout: ''
  timestamp: 1659978164
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k == length(arr)  \n        return arr \n    \n    maximum_idx = lastindex(arr)\
    \ + 1\n    maximum_values = maximum(arr[maximum_idx:(endindex(arr)-1)], k-1) \n\
    \    maximum_values = [maximum_values..., maximum(arr[(endindex(arr)+1):endindex(arr)],\
    \ k-1)...]\n    maximum_values = maximum_values[2:end]\n    maximum_values = maximum_values[maximum_idx:(endindex(arr)-1)]\n\
    \    maximum_values = maximum(maximum(maximum_values, k-1), k)\n    maximum_values\
    \ = maximum(maximum_values, k-1) \n    maximum_values = maximum(maximum_values,\
    \ k)\n    \n    return maximum_values\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpg4r_rhlo.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpg4r_rhlo.jl:1\n\
    in expression starting at /tmp/tmpg4r_rhlo.jl:1\n"
  stdout: ''
  timestamp: 1659978162
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k <= length(arr)\n        max_elements(arr, k)\n    else\n        throw(ArgumentError(\"\
    k out of range\"))\n    end\nend \nusing Test\n\n@testset begin\n\ncandidate =\
    \ maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 11 errored,
    0 broken.

    in expression starting at /tmp/tmpi9nmagtp.jl:34

    '
  stdout: "test set: Error During Test at /tmp/tmpi9nmagtp.jl:37\n  Test threw exception\n\
    \  Expression: candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  UndefVarError: max_elements\
    \ not defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n \
    \    @ Main /tmp/tmpi9nmagtp.jl:27\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpi9nmagtp.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpi9nmagtp.jl:36\ntest set:\
    \ Error During Test at /tmp/tmpi9nmagtp.jl:38\n  Test threw exception\n  Expression:\
    \ candidate([4, -4, 4], 2) == [4, 4]\n  UndefVarError: max_elements not defined\n\
    \  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmpi9nmagtp.jl:27\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpi9nmagtp.jl:38 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpi9nmagtp.jl:36\ntest set:\
    \ Error During Test at /tmp/tmpi9nmagtp.jl:39\n  Test threw exception\n  Expression:\
    \ candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n  UndefVarError: max_elements\
    \ not defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n \
    \    @ Main /tmp/tmpi9nmagtp.jl:27\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpi9nmagtp.jl:39 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpi9nmagtp.jl:36\ntest set:\
    \ Error During Test at /tmp/tmpi9nmagtp.jl:40\n  Test threw exception\n  Expression:\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n  UndefVarError:\
    \ max_elements not defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64},\
    \ k::In"
  timestamp: 1659978164
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k <= 0\n        return arr\n    \n    if k < length(arr)\n        maximum_recursive(arr,\
    \ k, 1)\n    else\n        maximum_recursive(arr, k, length(arr))\n    end\nend\n\
    \"\"\"\n    Given a vector arr of integers and a positive integer k, return a\
    \ sorted vector \n    of length k with the maximum k numbers in arr.\nusing Test\n\
    \n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) ==\
    \ [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8m9_tqg3.jl:1\nin expression starting at /tmp/tmp8m9_tqg3.jl:1\n"
  stdout: ''
  timestamp: 1659978162
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    sorted_arr = sort(arr)\n    if k > length(arr)\n        return sorted_arr\n\
    \    end\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpeblzqh12.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpeblzqh12.jl:1\n\
    in expression starting at /tmp/tmpeblzqh12.jl:1\n"
  stdout: ''
  timestamp: 1659978162
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k < 1 || k > length(arr)\n        error(\"Invalid k\")\n    elseif k ==\
    \ 1\n        return arr\n    elseif k == 2\n        if arr[1] < arr[2]\n     \
    \       return arr\n        else\n            return [arr[1], arr[2]]\n      \
    \  end\n    elseif k == length(arr)\n        if arr[1] < arr[2]\n            return\
    \ [arr[1], arr[2]]\n        else\n            return arr\n        end\n    end\n\
    \    m = maximum(arr[k-1:k], k-1)\n    m = maximum([m[1], m[2]], k-1)\n    return\
    \ m \nend\nmaximum([1,2,3], 3)\n</cell>\n<text>\nQuestion: What would be the output\
    \ of the code below?\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t\
    @test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4],\
    \ 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp44k9q5fj.jl:48\nin expression starting at\
    \ /tmp/tmp44k9q5fj.jl:48\n"
  stdout: ''
  timestamp: 1659978162
- exit_code: -1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k > length(arr) \n        throw(ArgumentError(\"k is out of range\"))\n\
    \    end\n    if k == 1 \n        return arr\n    end\n    \n    largest = minimum(arr)\
    \ \n    i = 1 \n    j = k \n    while j <= length(arr) \n        if arr[j] >=\
    \ largest \n            largest = arr[j] \n            largestIndex = i \n   \
    \     end \n        if arr[j] > largest \n            largest = arr[j] \n    \
    \        largestIndex = j \n        end \n        i += 1\n        j += 1\n   \
    \ end\n    \n    return arr[k-1:largestIndex+1]\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t\
    @test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1,\
    \ -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2,\
    \ 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\
    \t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\
    \t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: Timeout
  stderr: 'b''ERROR: LoadError: '''
  stdout: 'b''test set: Error During Test at /tmp/tmpn4fgx_re.jl:56\n  Test threw
    exception\n  Expression: candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  UndefVarError:
    largestIndex not defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @
    Main /tmp/tmpn4fgx_re.jl:49\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpn4fgx_re.jl:56 [inlined]\n   [4]
    macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpn4fgx_re.jl:55\ntest set: Error
    During Test at /tmp/tmpn4fgx_re.jl:57\n  Test threw exception\n  Expression: candidate([4,
    -4, 4], 2) == [4, 4]\n  UndefVarError: largestIndex not defined\n  Stacktrace:\n   [1]
    maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmpn4fgx_re.jl:49\n   [2]
    macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpn4fgx_re.jl:57 [inlined]\n   [4]
    macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpn4fgx_re.jl:55\ntest set: Test
    Failed at /tmp/tmpn4fgx_re.jl:58\n  Expression: candidate([-3, 2, 1, 2, -1, -2,
    1], 1) == [2]\n   Evaluated: [-3, 2, 1, 2, -1, -2, 1] == [2]\nStacktrace:\n [1]
    macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n [2] macro expansion\n   @ /tmp/tmpn4fgx_re.jl:58 [inlined]\n [3] macro
    expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n [4] top-level scope\n   @ /tmp/tmpn4fgx_re.jl:55\ntest set: Error
    During Test at /tmp/tmpn4fgx_re.jl:59\n  Test threw exception\n  Expression: candidate([123,
    -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n  UndefVarError: largestIndex not
    defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @ Main
    /tmp/tmpn4fgx_re.jl:49\n   [2] macro expansion\n     @ ~'
  timestamp: 1659978166
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k==1 \n        return sort(arr)\n    \n    # find the max \n    max =\
    \ -999\n    for i in arr\n        if i > max \n            max = i\n    end\n\
    \    \n    # create an array to store the maximum k numbers \n    maximum = zeros(Int,\
    \ k)\n    \n    for i in arr\n        if i > max \n            maximum[k]=i\n\
    \            k = k - 1\n        end\n    end\n    \n    # return the final array\n\
    \    return maximum\nend\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\
    \t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4],\
    \ 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpv_q3rhz0.jl:1\nin expression starting at /tmp/tmpv_q3rhz0.jl:1\n"
  stdout: ''
  timestamp: 1659978162
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    \"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5],\
    \ 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4ak4bxy4.jl:1\nin expression starting at /tmp/tmp4ak4bxy4.jl:1\n"
  stdout: ''
  timestamp: 1659978082
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    arr_sorted = sort(arr)\n    length = length(arr)\n    if length < k\n   \
    \     return arr_sorted\n    else\n        k = k - length\n        maximum_k =\
    \ arr_sorted[end-1:end]\n        return arr_sorted[1:k] + maximum_k + arr_sorted[k+1:]\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"(k + 1):\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp8xekl5q4.jl:33\nin expression\
    \ starting at /tmp/tmp8xekl5q4.jl:33\n"
  stdout: ''
  timestamp: 1659978163
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    # Write your code here\n    maximums = Vector{k}\n    for i = 1:length(arr)\n\
    \        if arr[i] > maximums[k]\n            maximums[k] = arr[i]\n        else\n\
    \        end\n    end\n    return maximums\nend\n</cell>\n<cell>\nmaximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum([-3,-4,5]),[4,-4,4]),[-3,2,1,2,-1,-2,1]),[3,2,1,2,3,4,5,6,7,8,9]))));\n\
    </cell>\n<text>\nQ12. Given two arrays arr1 and arr2 of same length, return an\
    \ array composed of the non-duplicate entries of arr1 followed by non-duplicate\
    \ entries of arr2. Elements in a different order should be ignored.\nusing Test\n\
    \n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) ==\
    \ [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp414jdzyc.jl:36\nin expression starting at\
    \ /tmp/tmp414jdzyc.jl:36\n"
  stdout: ''
  timestamp: 1659978163
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    maximum = arr[-k+1:end]\n    for i in minimum(arr[1:k-1]) \n        maximum\
    \ = maximum(maximum(maximum, arr[i:k]), k)\n    end\n    maximum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) ==\
    \ [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 11 errored,
    0 broken.

    in expression starting at /tmp/tmprbxvowvt.jl:34

    '
  stdout: "test set: Error During Test at /tmp/tmprbxvowvt.jl:37\n  Test threw exception\n\
    \  Expression: candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  BoundsError: attempt\
    \ to access 3-element Vector{Int64} at index [-2:3]\n  Stacktrace:\n   [1] throw_boundserror(A::Vector{Int64},\
    \ I::Tuple{UnitRange{Int64}})\n     @ Base ./abstractarray.jl:691\n   [2] checkbounds\n\
    \     @ ./abstractarray.jl:656 [inlined]\n   [3] getindex\n     @ ./array.jl:867\
    \ [inlined]\n   [4] maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmprbxvowvt.jl:26\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmprbxvowvt.jl:37 [inlined]\n\
    \   [7] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmprbxvowvt.jl:36\ntest set:\
    \ Error During Test at /tmp/tmprbxvowvt.jl:38\n  Test threw exception\n  Expression:\
    \ candidate([4, -4, 4], 2) == [4, 4]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [-1:3]\n  Stacktrace:\n   [1] throw_boundserror(A::Vector{Int64},\
    \ I::Tuple{UnitRange{Int64}})\n     @ Base ./abstractarray.jl:691\n   [2] checkbounds\n\
    \     @ ./abstractarray.jl:656 [inlined]\n   [3] getindex\n     @ ./array.jl:867\
    \ [inlined]\n   [4] maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmprbxvowvt.jl:26\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmprbxvowvt.jl:38 [inlined]\n\
    \   [7] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmprbxvowvt.jl:36\ntest set:\
    \ Error During Test at /tmp/tmprbxvowvt.jl:39\n  Test threw exception\n  Expression:\
    \ candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n  BoundsError: attempt to access\
    \ 7-element Vector{Int64} at index [0:7]\n  Stacktrace:\n   [1] throw_boundserror(A::Vector{Int64},\
    \ I::Tuple{UnitRange{Int64}})\n     @ Base ./abstractarray.jl:691\n   [2] checkbounds\n\
    \     @ ./abstrac"
  timestamp: 1659978166
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    # Your code here\n    for element in arr\n        if element < arr[length-1]\n\
    \            arr[end] = element\n            end += 1\n        else\n        \
    \    break\n    end\n    \n    k = length(arr)\n    maximum = arr[end]\n    for\
    \ i = end - k+2-1 downto 0\n        if maximum < arr[i]\n            maximum =\
    \ arr[i]\n        end\n    end\n    maximum\nend\n</cell>\n<code language=julia-0.6>\n\
    maximum(arr1, 6)\n</cell>\n<code language=julia-0.6>\nmaximum(arr1, 7)\n</cell>\n\
    <code language=julia-0.6>\nmaximum(arr1, 3)\n</cell>\n<code language=julia-0.6>\n\
    maximum(arr1, 1)\n</cell>\n<text>\n13. Minimum number in a vector\nusing Test\n\
    \n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) ==\
    \ [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmpx5egeiy8.jl:27 expected \"\
    end\", got \"else\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpx5egeiy8.jl:31\n\
    in expression starting at /tmp/tmpx5egeiy8.jl:31\n"
  stdout: ''
  timestamp: 1659978163
- exit_code: -1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k <= 0\n        throw(ArgumentError(\"k must satisfy 0 <= k <= length(arr).\"\
    ))\n    elseif k > length(arr)\n        throw(ArgumentError(\"k must satisfy 0\
    \ <= k <= length(arr).\"))\n    elseif length(arr) <= k\n        return arr\n\
    \    else\n        maximum1 = maximum(maximum(arr), k - 1);\n        maximum2\
    \ = maximum(arr, k - 1);\n        return (maximum1 .< maximum2) ? maximum1 : maximum2\n\
    \    end\nend\nmaximum(m::Vector{Int64}, k::Int64) = maximum(reshape(m, prod(size(m))),\
    \ (k + 1)::Int64)\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659978168
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    sorted::Vector{Int64} = Vector{Int64}() \n    \n    for i in reverse(arr)\
    \ \n        if i >= k && i < length(arr) - k + 1 \n            push!(sorted, i)\
    \ \n        end \n    end\n    \n    sorted\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t\
    @test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1,\
    \ -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2,\
    \ 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\
    \t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\
    \t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 11 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp3_1y0yrt.jl:38

    '
  stdout: "test set: Test Failed at /tmp/tmp3_1y0yrt.jl:41\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: Int64[] == [-4, -3, 5]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3_1y0yrt.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3_1y0yrt.jl:40\ntest set: Test\
    \ Failed at /tmp/tmp3_1y0yrt.jl:42\n  Expression: candidate([4, -4, 4], 2) ==\
    \ [4, 4]\n   Evaluated: Int64[] == [4, 4]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp3_1y0yrt.jl:42 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp3_1y0yrt.jl:40\ntest set: Test Failed at /tmp/tmp3_1y0yrt.jl:43\n\
    \  Expression: candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n   Evaluated: [1,\
    \ 2, 1, 2] == [2]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3_1y0yrt.jl:43 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3_1y0yrt.jl:40\ntest set: Test\
    \ Failed at /tmp/tmp3_1y0yrt.jl:44\n  Expression: candidate([123, -123, 20, 0,\
    \ 1, 2, -3], 3) == [2, 20, 123]\n   Evaluated: Int64[] == [2, 20, 123]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3_1y0yrt.jl:44 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3_1y0yrt.jl:40\ntest set: Test\
    \ Failed at /tmp/tmp3_1y0yrt.jl:45\n  Expression: candidate([-123, 20, 0, 1, 2,\
    \ -3], 4) == [0, 1, 2, 20]\n   Evaluated: Int64[] == [0, 1, 2, 20]\nStackt"
  timestamp: 1659978165
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k == 1\n        return arr\n    elseif k == length(arr)\n        return\
    \ arr\n    end\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpe6spcox8.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpe6spcox8.jl:1\n\
    in expression starting at /tmp/tmpe6spcox8.jl:1\n"
  stdout: ''
  timestamp: 1659978154
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if len(arr) < k \n        throw Exception(\"Length of vector must be greater\
    \ than k\")\n    else if k > length(arr) \n        throw Exception(\"Length of\
    \ vector must be greater than k\")\n    else \n        maximum_(arr, k)\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"Exception\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpn4bj7gwv.jl:27\nin expression starting at /tmp/tmpn4bj7gwv.jl:27\n"
  stdout: ''
  timestamp: 1659978164
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k < 0 || length(k) == 0 || k > length(arr) \n        return arr \n   \
    \ else \n        return maximum(maximum(arr[k .. end], k-1), length(arr)-k) \n\
    end\n</cell>\n<text>\nmaximum()\nWrite a function that returns the k largest elements\
    \ in an array. \nThe function should take in an array of numbers and an optional\
    \ argument k. If k is not specified it should assume it is the length of the array\
    \ minus one.\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbk4c5ktp.jl:31\nin expression starting at\
    \ /tmp/tmpbk4c5ktp.jl:31\n"
  stdout: ''
  timestamp: 1659978164
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k <= 0 || k >= length(arr)\n        throw(BoundsError())\n    max = arr[k]\n\
    \    for j = k+1:length(arr)\n        if arr[j] > max\n            max = arr[j]\n\
    \        end\n    end\n    return arr\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpebfa_ghb.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpebfa_ghb.jl:1\n\
    in expression starting at /tmp/tmpebfa_ghb.jl:1\n"
  stdout: ''
  timestamp: 1659978164
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k < length(arr)\n        maximum = arr[1:k-1]\n        maximum = maximum.max((maximum(maximum),\
    \ maximum(arr[k:])))\n    else\n        maximum = arr\n    end\n    return maximum\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"k:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpfb98k08g.jl:28\nin expression\
    \ starting at /tmp/tmpfb98k08g.jl:28\n"
  stdout: ''
  timestamp: 1659978164
- exit_code: -1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k < 1 \n        return Vector{}\n    end\n    \n    if k == 1 \n     \
    \   return arr \n    end\n    \n    k = maximum(k, length(arr)-1)\n    \n    if\
    \ length(a) == 0 \n        return arr \n    end\n    \n    sorted = minimum(arr[k+1:end],\
    \ k)\n    \n    if length(a) >= k \n        a[k] = sorted\n    end\n    \n   \
    \ return a \nend\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmp359na_6m.jl:53\n  Test threw
    exception\n  Expression: candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  MethodError:
    no method matching maximum(::Int64, ::Int64)\n  You may have intended to import
    Base.maximum\n  Closest candidates are:\n    maximum(!Matched::Vector{Int64},
    ::Int64) at /tmp/tmp359na_6m.jl:25\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64},
    k::Int64)\n     @ Main /tmp/tmp359na_6m.jl:34\n   [2] macro expansion\n     @
    ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmp359na_6m.jl:53 [inlined]\n   [4] macro expansion\n     @
    ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmp359na_6m.jl:52\ntest set: Error During Test at
    /tmp/tmp359na_6m.jl:54\n  Test threw exception\n  Expression: candidate([4, -4,
    4], 2) == [4, 4]\n  MethodError: no method matching maximum(::Int64, ::Int64)\n  You
    may have intended to import Base.maximum\n  Closest candidates are:\n    maximum(!Matched::Vector{Int64},
    ::Int64) at /tmp/tmp359na_6m.jl:25\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64},
    k::Int64)\n     @ Main /tmp/tmp359na_6m.jl:34\n   [2] macro expansion\n     @
    ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmp359na_6m.jl:54 [inlined]\n   [4] macro expansion\n     @
    ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmp359na_6m.jl:52\ntest set: Test Failed at /tmp/tmp359na_6m.jl:55\n  Expression:
    candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n   Evaluated: [-3, 2, 1, 2, -1,
    -2, 1] == [2]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n [2] macro expansion\n   @ /tmp/tmp359na_6m.jl:55 [inlined]\n [3] macro
    expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n [4] top-level scope\n   @ /tmp/tmp359na_6m.'
  timestamp: 1659978168
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k < 1 || k > length(arr) \n        return arr \n    \n    maximum_idx\
    \ = Vector{Int64}(k-1) \n    maximum_values = arr[1:k] \n    for i in 2:k \n \
    \       if maximum_values[i-1] > maximum_values[i] \n            maximum_idx =\
    \ i - 1 \n            maximum_values = maximum_values[i-1:k] \n        else \n\
    \            maximum_idx = i \n            maximum_values = maximum_values[i:k]\
    \ \n        end\n    end\n    return maximum_values[minimum(maximum_idx):maximum(maximum_idx)+1]\n\
    end\n</code>\n<|/ a tags=vector,sorting,max,julia |>\n<| c |>\nCould you explain\
    \ the `minimum(maximum_idx)` part?\n<|/ c |>\n<| c |>\nIt's a fast way to get\
    \ indexes of minimum elements from a vector. Take a look at [`minimum`](https://docs.julialang.org/en/v1/base/collections/#Base.minimum)\
    \ and [`maximum`](https://docs.julialang.org/en/v1/base/collections/#Base.maximum)\n\
    <|/ c |>\n<| a tags=vector,sorting,max,julia |>\nHere is another way that does\
    \ not require to sort first:\n<code>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpn37qxbs9.jl:42\nin expression starting at\
    \ /tmp/tmpn37qxbs9.jl:42\n"
  stdout: ''
  timestamp: 1659978164
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    return arr[(length(a) - k + 1):length(a)]\nend\n</cell>\n<code language=julia-0.5>\n\
    maximum(A, 2)\n</cell>\n<text>\nWrite a function named minimum to find the minimum\
    \ number in a vector.\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t\
    @test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4],\
    \ 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6fms4lqh.jl:28\nin expression starting at\
    \ /tmp/tmp6fms4lqh.jl:28\n"
  stdout: ''
  timestamp: 1659978164
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k == length(arr)\n        return arr\n    elseif k <= 0\n        throw(ArgumentError(\"\
    k must be a positive integer\"))\n    elseif k >= length(arr)\n        throw(ArgumentError(\"\
    k must be less than the length of the array\"))\n    else\n        return maximum(unbox(arr[k+1:end]),\
    \ k-1)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t\
    @test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4],\
    \ 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpwrupj4bg.jl:38

    '
  stdout: "test set: Test Failed at /tmp/tmpwrupj4bg.jl:41\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [-3, -4, 5] == [-4, -3, 5]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwrupj4bg.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwrupj4bg.jl:40\ntest set: Error\
    \ During Test at /tmp/tmpwrupj4bg.jl:42\n  Test threw exception\n  Expression:\
    \ candidate([4, -4, 4], 2) == [4, 4]\n  UndefVarError: unbox not defined\n  Stacktrace:\n\
    \   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmpwrupj4bg.jl:33\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwrupj4bg.jl:42 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwrupj4bg.jl:40\ntest set:\
    \ Error During Test at /tmp/tmpwrupj4bg.jl:43\n  Test threw exception\n  Expression:\
    \ candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n  UndefVarError: unbox not defined\n\
    \  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmpwrupj4bg.jl:33\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwrupj4bg.jl:43 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwrupj4bg.jl:40\ntest set:\
    \ Error During Test at /tmp/tmpwrupj4bg.jl:44\n  Test threw exception\n  Expression:\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n  UndefVarError:\
    \ unbox not defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n\
    \     @ Main /tmp/tmpwrupj4bg.jl:33\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n "
  timestamp: 1659978167
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k < length(arr)\n        maximum_recursive(arr, k)\n    else\n       \
    \ maximum_recursive(arr, 1)\n    end\nend\nmaximum_recursive(arr::Vector{Int64},\
    \ k::Int64)::Vector{Int64}\n    if k == length(arr)\n        arr\n    else\n \
    \       max_val = maximum(arr[k .. end], k - length(arr))\n        push!(arr,\
    \ max_val)\n        maximum_recursive(arr, k)\n    end\nend\nmaximum_recursive(arr::Vector{Int64},\
    \ k::Int64)::Vector{Int64}\n    maximum_recursive(arr, k + 1)\nend\n\"\"\"\n \
    \   Given an M x N matrix mat of doubles, return a sorted matrix mat of doubles\
    \ \n    containing all the elements in arr in non-decreasing order.\nusing Test\n\
    \n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) ==\
    \ [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: UndefVarError: arr not defined\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp_bghrfb5.jl:32\nin expression starting at /tmp/tmp_bghrfb5.jl:32\n"
  stdout: ''
  timestamp: 1659978165
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if length(arr) < k \n        throw(ArgumentError(\"k should be no less than\
    \ the length of the vector arr\"))\n    \n    maximum = arr[0...k]\n    for i\
    \ in k+1:length(arr) \n        if maximum[i] > arr[i] \n            maximum =\
    \ arr[i..end]\n        elseif maximum[i] == arr[i] \n            maximum = arr[i..i]\
    \ \n        else \n            maximum = arr[i+1..end]\n        end\n    end\n\
    \    return maximum\nend\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\
    \t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4],\
    \ 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: expected \"]\" or separator in arguments to \"\
    [ ]\"; got \"0...k\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpa3a4ohc7.jl:29\n\
    in expression starting at /tmp/tmpa3a4ohc7.jl:29\n"
  stdout: ''
  timestamp: 1659978165
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k > length(arr)\n        throw(ArgumentError(\"k must be <= length(arr)\"\
    ))\n    else if k == 0 \n        return [maximum(arr, k - 1)]\n    end\nusing\
    \ Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5],\
    \ 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp29770sn6.jl:28\nin expression starting at\
    \ /tmp/tmp29770sn6.jl:28\n"
  stdout: ''
  timestamp: 1659978165
- exit_code: -1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    arr = arr[sortperm(arr)]\n    return arr[1:k+1]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3,\
    \ 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2,\
    \ 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1,\
    \ 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0,\
    \ 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: Timeout
  stderr: 'b''ERROR: '''
  stdout: 'b''test set: Error During Test at /tmp/tmpdbtp60tw.jl:34\n  Test threw
    exception\n  Expression: candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  BoundsError:
    attempt to access 3-element Vector{Int64} at index [1:4]\n  Stacktrace:\n   [1]
    throw_boundserror(A::Vector{Int64}, I::Tuple{UnitRange{Int64}})\n     @ Base ./abstractarray.jl:691\n   [2]
    checkbounds\n     @ ./abstractarray.jl:656 [inlined]\n   [3] getindex\n     @
    ./array.jl:867 [inlined]\n   [4] maximum(arr::Vector{Int64}, k::Int64)\n     @
    Main /tmp/tmpdbtp60tw.jl:27\n   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [6] macro expansion\n     @ /tmp/tmpdbtp60tw.jl:34 [inlined]\n   [7]
    macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [8] top-level scope\n     @ /tmp/tmpdbtp60tw.jl:33\ntest set: Test
    Failed at /tmp/tmpdbtp60tw.jl:35\n  Expression: candidate([4, -4, 4], 2) == [4,
    4]\n   Evaluated: [-4, 4, 4] == [4, 4]\nStacktrace:\n [1] macro expansion\n   @
    ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n
    [2] macro expansion\n   @ /tmp/tmpdbtp60tw.jl:35 [inlined]\n [3] macro expansion\n   @
    ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n
    [4] top-level scope\n   @ /tmp/tmpdbtp60tw.jl:33\ntest set: Test Failed at /tmp/tmpdbtp60tw.jl:36\n  Expression:
    candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n   Evaluated: [-3, -2] == [2]\nStacktrace:\n
    [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n [2] macro expansion\n   @ /tmp/tmpdbtp60tw.jl:36 [inlined]\n [3] macro
    expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n [4] top-level scope\n   @ /tmp/tmpdbtp60tw.jl:33\ntest set: Test Failed
    at /tmp/tmpdbtp60tw.jl:37\n  Expression: candidate([123, -123, 20, 0, 1, 2, -3],
    3) == [2, 20, 123]\n   Evaluated: [-123, -3, 0, 1] == [2, 20, 123]\nStacktrace:\n
    [1] macro expansion\n   @ ~/.conda/envs/poly'
  timestamp: 1659978169
- exit_code: -1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k <= length(arr)\n        return maximum([x for x in arr[k+1:end]], k)\n\
    \    else\n        return arr\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Test Failed at /tmp/tmpbg0h89f8.jl:37\n  Expression: candidate([-3,
    -4, 5], 3) == [-4, -3, 5]\n   Evaluated: Int64[] == [-4, -3, 5]\nStacktrace:\n
    [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n [2] macro expansion\n   @ /tmp/tmpbg0h89f8.jl:37 [inlined]\n [3] macro
    expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n [4] top-level scope\n   @ /tmp/tmpbg0h89f8.jl:36\ntest set: Test Failed
    at /tmp/tmpbg0h89f8.jl:38\n  Expression: candidate([4, -4, 4], 2) == [4, 4]\n   Evaluated:
    [4] == [4, 4]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n [2] macro expansion\n   @ /tmp/tmpbg0h89f8.jl:38 [inlined]\n [3] macro
    expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n [4] top-level scope\n   @ /tmp/tmpbg0h89f8.jl:36\ntest set: Test Failed
    at /tmp/tmpbg0h89f8.jl:39\n  Expression: candidate([-3, 2, 1, 2, -1, -2, 1], 1)
    == [2]\n   Evaluated: Int64[] == [2]\nStacktrace:\n [1] macro expansion\n   @
    ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n
    [2] macro expansion\n   @ /tmp/tmpbg0h89f8.jl:39 [inlined]\n [3] macro expansion\n   @
    ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n
    [4] top-level scope\n   @ /tmp/tmpbg0h89f8.jl:36\ntest set: Test Failed at /tmp/tmpbg0h89f8.jl:40\n  Expression:
    candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n   Evaluated: [-3]
    == [2, 20, 123]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n [2] macro expansion\n   @ /tmp/tmpbg0h89f8.jl:40 [inlined]\n [3] macro
    expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n [4] top-level scope\n   @ /tmp/tmpbg0h89f8.jl:36\ntest set: Test Failed
    at /tmp/tmpbg0h89f8.jl:41\n  Expression: candidate([-123, 20, 0, 1, 2, -3], 4)
    == [0, 1, 2, 20]\n   Ev'
  timestamp: 1659978169
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    maximum = maximum(k) \n    return arr \nend\nusing Test\n\n@testset begin\n\
    \ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t\
    @test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1,\
    \ -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2,\
    \ 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\
    \t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\
    \t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 11 errored,
    0 broken.

    in expression starting at /tmp/tmpomzwc1la.jl:31

    '
  stdout: "test set: Error During Test at /tmp/tmpomzwc1la.jl:34\n  Test threw exception\n\
    \  Expression: candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  UndefVarError: maximum\
    \ not defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n \
    \    @ Main /tmp/tmpomzwc1la.jl:26\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpomzwc1la.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpomzwc1la.jl:33\ntest set:\
    \ Error During Test at /tmp/tmpomzwc1la.jl:35\n  Test threw exception\n  Expression:\
    \ candidate([4, -4, 4], 2) == [4, 4]\n  UndefVarError: maximum not defined\n \
    \ Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmpomzwc1la.jl:26\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpomzwc1la.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpomzwc1la.jl:33\ntest set:\
    \ Error During Test at /tmp/tmpomzwc1la.jl:36\n  Test threw exception\n  Expression:\
    \ candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n  UndefVarError: maximum not\
    \ defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @\
    \ Main /tmp/tmpomzwc1la.jl:26\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpomzwc1la.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpomzwc1la.jl:33\ntest set:\
    \ Error During Test at /tmp/tmpomzwc1la.jl:37\n  Test threw exception\n  Expression:\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n  UndefVarError:\
    \ maximum not defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n\
    \     @ Main /tm"
  timestamp: 1659978168
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k <= 1\n        arr\n    elseif k > length(arr)\n        arr\n    else\n\
    \        maximum(maximum(arr, k - 1), length(arr) - k)\n    end\nend\n</cell>\n\
    <text>\nQuestion 11\nWrite a function that takes a vector of integers as an argument,\
    \ and returns the sum of all elements in the vector.\nusing Test\n\n@testset begin\n\
    \ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t\
    @test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1,\
    \ -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2,\
    \ 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\
    \t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\
    \t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzmbo0elp.jl:34\nin expression starting at\
    \ /tmp/tmpzmbo0elp.jl:34\n"
  stdout: ''
  timestamp: 1659978165
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k > length(arr)\n        throw(DomainError(...))\n    end\n    maximum\
    \ = minimum(arr)\n    return maximum(minimum(arr[end-1:end], maximum))\nend\n\
    using Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4,\
    \ 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid identifier name \"...\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpf47b8rs6.jl:27\nin expression starting at\
    \ /tmp/tmpf47b8rs6.jl:27\n"
  stdout: ''
  timestamp: 1659978166
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k > length(arr) || k <= 0\n        throw(ArgumentError(\"k out of range\"\
    ))\n    else\n        maximum_values(arr, k)\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3,\
    \ 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2,\
    \ 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1,\
    \ 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0,\
    \ 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 11 errored,
    0 broken.

    in expression starting at /tmp/tmp45cstpll.jl:34

    '
  stdout: "test set: Error During Test at /tmp/tmp45cstpll.jl:37\n  Test threw exception\n\
    \  Expression: candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  UndefVarError: maximum_values\
    \ not defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n \
    \    @ Main /tmp/tmp45cstpll.jl:29\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp45cstpll.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp45cstpll.jl:36\ntest set:\
    \ Error During Test at /tmp/tmp45cstpll.jl:38\n  Test threw exception\n  Expression:\
    \ candidate([4, -4, 4], 2) == [4, 4]\n  UndefVarError: maximum_values not defined\n\
    \  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmp45cstpll.jl:29\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp45cstpll.jl:38 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp45cstpll.jl:36\ntest set:\
    \ Error During Test at /tmp/tmp45cstpll.jl:39\n  Test threw exception\n  Expression:\
    \ candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n  UndefVarError: maximum_values\
    \ not defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n \
    \    @ Main /tmp/tmp45cstpll.jl:29\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp45cstpll.jl:39 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp45cstpll.jl:36\ntest set:\
    \ Error During Test at /tmp/tmp45cstpll.jl:40\n  Test threw exception\n  Expression:\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n  UndefVarError:\
    \ maximum_values not defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64"
  timestamp: 1659978168
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    maximums = [i for i in arr]\n    maximums[k] = maximum(maximums, k-1)\n \
    \   return maximums\nend\n</cell>\n<code language=julia-1.3>\nmaximum(maximum([-3,\
    \ -4, 5], 3))\n</cell>\n<code language=julia-1.3>\nmaximum(maximum([4, -4, 4],\
    \ 2))\n</cell>\n<code language=julia-1.3>\nmaximum(maximum([-3, 2, 1, 2, -1, -2,\
    \ 1], 1))\n</cell>\n<text>\nPart 2: Vectorization\nusing Test\n\n@testset begin\n\
    \ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t\
    @test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1,\
    \ -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2,\
    \ 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\
    \t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\
    \t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwgag0rnw.jl:30\nin expression starting at\
    \ /tmp/tmpwgag0rnw.jl:30\n"
  stdout: ''
  timestamp: 1659978166
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    v = []\n    while k <= length(arr)\n        push!(v, arr[k])\n        k =\
    \ k + 1\n    end\n    v\nend\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\
    \t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4],\
    \ 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 10 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmpuo0i82sa.jl:35

    '
  stdout: "test set: Test Failed at /tmp/tmpuo0i82sa.jl:38\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [5] == [-4, -3, 5]\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpuo0i82sa.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuo0i82sa.jl:37\ntest set: Test\
    \ Failed at /tmp/tmpuo0i82sa.jl:39\n  Expression: candidate([4, -4, 4], 2) ==\
    \ [4, 4]\n   Evaluated: [-4, 4] == [4, 4]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpuo0i82sa.jl:39 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpuo0i82sa.jl:37\ntest set: Test Failed at /tmp/tmpuo0i82sa.jl:40\n\
    \  Expression: candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n   Evaluated: [-3,\
    \ 2, 1, 2, -1, -2, 1] == [2]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpuo0i82sa.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuo0i82sa.jl:37\ntest set: Test\
    \ Failed at /tmp/tmpuo0i82sa.jl:41\n  Expression: candidate([123, -123, 20, 0,\
    \ 1, 2, -3], 3) == [2, 20, 123]\n   Evaluated: [20, 0, 1, 2, -3] == [2, 20, 123]\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpuo0i82sa.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuo0i82sa.jl:37\ntest set: Test\
    \ Failed at /tmp/tmpuo0i82sa.jl:42\n  Expression: candidate([-123, 20, 0, 1, 2,\
    \ -3], 4) == [0, 1, 2, 20]\n   Evaluated: [1, 2, -3] =="
  timestamp: 1659978169
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    m = minimum(arr)\n    v = maximum.(arr, k - 1) - m\n    v = maximum.(v, k)\n\
    \    return v\nend\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 11 errored,
    0 broken.

    in expression starting at /tmp/tmppoez6qwr.jl:33

    '
  stdout: "test set: Error During Test at /tmp/tmppoez6qwr.jl:36\n  Test threw exception\n\
    \  Expression: candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  MethodError: no method\
    \ matching maximum(::Int64, ::Int64)\n  You may have intended to import Base.maximum\n\
    \  Closest candidates are:\n    maximum(!Matched::Vector{Int64}, ::Int64) at /tmp/tmppoez6qwr.jl:25\n\
    \  Stacktrace:\n    [1] _broadcast_getindex_evalf\n      @ ./broadcast.jl:670\
    \ [inlined]\n    [2] _broadcast_getindex\n      @ ./broadcast.jl:643 [inlined]\n\
    \    [3] getindex\n      @ ./broadcast.jl:597 [inlined]\n    [4] copy\n      @\
    \ ./broadcast.jl:899 [inlined]\n    [5] materialize\n      @ ./broadcast.jl:860\
    \ [inlined]\n    [6] maximum(arr::Vector{Int64}, k::Int64)\n      @ Main /tmp/tmppoez6qwr.jl:27\n\
    \    [7] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [8] macro expansion\n      @ /tmp/tmppoez6qwr.jl:36 [inlined]\n\
    \    [9] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [10] top-level scope\n      @ /tmp/tmppoez6qwr.jl:35\ntest set:\
    \ Error During Test at /tmp/tmppoez6qwr.jl:37\n  Test threw exception\n  Expression:\
    \ candidate([4, -4, 4], 2) == [4, 4]\n  MethodError: no method matching maximum(::Int64,\
    \ ::Int64)\n  You may have intended to import Base.maximum\n  Closest candidates\
    \ are:\n    maximum(!Matched::Vector{Int64}, ::Int64) at /tmp/tmppoez6qwr.jl:25\n\
    \  Stacktrace:\n    [1] _broadcast_getindex_evalf\n      @ ./broadcast.jl:670\
    \ [inlined]\n    [2] _broadcast_getindex\n      @ ./broadcast.jl:643 [inlined]\n\
    \    [3] getindex\n      @ ./broadcast.jl:597 [inlined]\n    [4] copy\n      @\
    \ ./broadcast.jl:899 [inlined]\n    [5] materialize\n      @ ./broadcast.jl:860\
    \ [inlined]\n    [6] maximum(arr::Vector{Int64}, k::Int64)\n      @ Main /tmp/tmppoez6qwr.jl:27\n\
    \    [7] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [8] macro expansion\n      @ /tmp/tmppoez6qwr.jl:37 [inlined]\n\
    \    [9] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7"
  timestamp: 1659978169
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k <= length(arr)\n        maximum = zeros(Int64, k)\n        maximum[k-1]\
    \ = maximum(maximum(arr), k-1)\n        return maximum\n    else\n        maximum\
    \ = arr\n        maximum[k-1] = maximum(maximum(maximum), k-1)\n        return\
    \ maximum\n    end\nend\n</cell>\n<text>\nExample 1:\nInput:\narr = [-2, -1, -3]\n\
    k = 1\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpu6dr4z8w.jl:36\nin expression starting at\
    \ /tmp/tmpu6dr4z8w.jl:36\n"
  stdout: ''
  timestamp: 1659978166
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k <= 0 || k > length(arr) \n        return arr \n    else \n        maximum1\
    \ = maximum(maximum(arr[1:k-1],arr[k+1:end],arr),arr[k+1:end],arr[k+1:end])\n\
    \        if maximum1[0] == maximum1[1] \n            return maximum1\n       \
    \ else \n            return arr \nend\n\"\"\"\n    Given a vector arr of integers\
    \ and a positive integer k, return a sorted vector \n    of length k with the\
    \ minimum k numbers in arr.\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\
    \t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4],\
    \ 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4ydjapm9.jl:1\nin expression starting at /tmp/tmp4ydjapm9.jl:1\n"
  stdout: ''
  timestamp: 1659978166
- exit_code: -1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k==1\n        return arr\n    elseif k >= size(arr)\n        return arr\n\
    \    else\n        sort(arr)\n        arr1 = arr[1:k]\n        return maximum(arr1,\
    \ k-1)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t\
    @test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4],\
    \ 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpcnuvxfyg.jl:41\n  Test threw
    exception\n  Expression: candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  MethodError:
    no method matching isless(::Tuple{Int64}, ::Int64)\n  Closest candidates are:\n    isless(!Matched::AbstractFloat,
    ::Real) at ~/.conda/envs/polyglot/share/julia/base/operators.jl:186\n    isless(!Matched::Real,
    ::Real) at ~/.conda/envs/polyglot/share/julia/base/operators.jl:430\n    isless(::Any,
    !Matched::Missing) at ~/.conda/envs/polyglot/share/julia/base/missing.jl:88\n    ...\n  Stacktrace:\n   [1]
    <(x::Tuple{Int64}, y::Int64)\n     @ Base ./operators.jl:352\n   [2] <=(x::Tuple{Int64},
    y::Int64)\n     @ Base ./operators.jl:401\n   [3] >=(x::Int64, y::Tuple{Int64})\n     @
    Base ./operators.jl:425\n   [4] maximum(arr::Vector{Int64}, k::Int64)\n     @
    Main /tmp/tmpcnuvxfyg.jl:28\n   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [6] macro expansion\n     @ /tmp/tmpcnuvxfyg.jl:41 [inlined]\n   [7]
    macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [8] top-level scope\n     @ /tmp/tmpcnuvxfyg.jl:40\ntest set: Error
    During Test at /tmp/tmpcnuvxfyg.jl:42\n  Test threw exception\n  Expression: candidate([4,
    -4, 4], 2) == [4, 4]\n  MethodError: no method matching isless(::Tuple{Int64},
    ::Int64)\n  Closest candidates are:\n    isless(!Matched::AbstractFloat, ::Real)
    at ~/.conda/envs/polyglot/share/julia/base/operators.jl:186\n    isless(!Matched::Real,
    ::Real) at ~/.conda/envs/polyglot/share/julia/base/operators.jl:430\n    isless(::Any,
    !Matched::Missing) at ~/.conda/envs/polyglot/share/julia/base/missing.jl:88\n    ...\n  Stacktrace:\n   [1]
    <(x::Tuple{Int64}, y::Int64)\n     @ Base ./operators.jl:352\n   [2] <=(x::Tuple{Int64},
    y::Int64)\n     @ Base ./operators.jl:401\n   [3] >=(x::Int64, y::Tuple{Int64})\n     @
    Base ./operators.jl:425\n   [4] maximum(arr::Vector{Int64}, k::Int64)\n     @
    Main /tmp/tmpcnuvxfyg.jl:28\n   [5] macro expansion\n     @ '
  timestamp: 1659978169
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    max_length = 0\n    minimum(arr, k)\n    for i=k+1:length(arr), \n      \
    \  tmp = maximum(arr[i-1:i], k), \n        tmp = minimum(tmp, k-i)\n        max_length\
    \ = max(max_length, length(tmp)), \n        arr[i] = tmp\n    end\n    arr\nend\n\
    maximum()\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"length(tmp)\" is not a valid function argument\
    \ name around /tmp/tmpoq6fne7g.jl:31\nStacktrace:\n [1] top-level scope\n   @\
    \ /tmp/tmpoq6fne7g.jl:1\nin expression starting at /tmp/tmpoq6fne7g.jl:1\n"
  stdout: ''
  timestamp: 1659978166
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k < 1 || k > length(arr)\n        return Array{Int64}(k)\n    end\n  \
    \  \n    l = length(arr)\n    \n    if l < k\n        arr = arr + (k-l)\n    end\n\
    using Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4,\
    \ 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpn5xotsk3.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpn5xotsk3.jl:1\n\
    in expression starting at /tmp/tmpn5xotsk3.jl:1\n"
  stdout: ''
  timestamp: 1659978166
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    maximumArray = maximumArray(arr, k)\n    return maximumArray\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5],\
    \ 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 11 errored,
    0 broken.

    in expression starting at /tmp/tmppjruyoj9.jl:31

    '
  stdout: "test set: Error During Test at /tmp/tmppjruyoj9.jl:34\n  Test threw exception\n\
    \  Expression: candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  UndefVarError: maximumArray\
    \ not defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n \
    \    @ Main /tmp/tmppjruyoj9.jl:26\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmppjruyoj9.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmppjruyoj9.jl:33\ntest set:\
    \ Error During Test at /tmp/tmppjruyoj9.jl:35\n  Test threw exception\n  Expression:\
    \ candidate([4, -4, 4], 2) == [4, 4]\n  UndefVarError: maximumArray not defined\n\
    \  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmppjruyoj9.jl:26\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmppjruyoj9.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmppjruyoj9.jl:33\ntest set:\
    \ Error During Test at /tmp/tmppjruyoj9.jl:36\n  Test threw exception\n  Expression:\
    \ candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n  UndefVarError: maximumArray\
    \ not defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n \
    \    @ Main /tmp/tmppjruyoj9.jl:26\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmppjruyoj9.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmppjruyoj9.jl:33\ntest set:\
    \ Error During Test at /tmp/tmppjruyoj9.jl:37\n  Test threw exception\n  Expression:\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n  UndefVarError:\
    \ maximumArray not defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64},\
    \ k::In"
  timestamp: 1659978169
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    for x in arr\n        if x > k\n            break\n        else\n       \
    \     x = x\n        end\n    end\n    return arr\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3,\
    \ 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2,\
    \ 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1,\
    \ 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0,\
    \ 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 10 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpiz759ygd.jl:37

    '
  stdout: "test set: Test Failed at /tmp/tmpiz759ygd.jl:40\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [-3, -4, 5] == [-4, -3, 5]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpiz759ygd.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpiz759ygd.jl:39\ntest set: Test\
    \ Failed at /tmp/tmpiz759ygd.jl:41\n  Expression: candidate([4, -4, 4], 2) ==\
    \ [4, 4]\n   Evaluated: [4, -4, 4] == [4, 4]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpiz759ygd.jl:41 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpiz759ygd.jl:39\ntest set: Test Failed at /tmp/tmpiz759ygd.jl:42\n\
    \  Expression: candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n   Evaluated: [-3,\
    \ 2, 1, 2, -1, -2, 1] == [2]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpiz759ygd.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpiz759ygd.jl:39\ntest set: Test\
    \ Failed at /tmp/tmpiz759ygd.jl:43\n  Expression: candidate([123, -123, 20, 0,\
    \ 1, 2, -3], 3) == [2, 20, 123]\n   Evaluated: [123, -123, 20, 0, 1, 2, -3] ==\
    \ [2, 20, 123]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpiz759ygd.jl:43 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpiz759ygd.jl:39\ntest set: Test\
    \ Failed at /tmp/tmpiz759ygd.jl:44\n  Expression: candidate([-123, 20, 0, 1, 2,\
    \ -3], 4) == [0, 1, 2, 20]\n   Ev"
  timestamp: 1659978168
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k <= 0 || k >= length(arr) \n        return arr\n    \n    idx = 1\n \
    \   maximum_idx = 1\n    \n    max_length = maximum(maximum(arr,arr[maximum(idx)]),arr[idx])\n\
    \    while idx < length(arr) \n        length = maximum(maximum(maximum(arr,arr[maximum(idx)]),arr[idx]),arr[idx+1])\n\
    \        if length == max_length \n            idx += 1\n            maximum_idx\
    \ = maximum(maximum_idx,maximum(maximum(arr,arr[maximum(idx)]),arr[idx]))\n  \
    \      else \n            maximum_idx = maximum(maximum_idx,maximum(arr[idx],arr[idx+1]))\n\
    \            idx += 1\n            max_length = length\n        end\n    end\n\
    \    \n    maximum_idx = maximum(maximum_idx, maximum(maximum(arr,arr[maximum(idx)]),arr[idx]))\n\
    \    return maximum_idx==k?arr[maximum_idx]:arr[maximum_idx:end] \nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5],\
    \ 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: space required before \"?\" operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpw98xtmcj.jl:46\nin expression starting at\
    \ /tmp/tmpw98xtmcj.jl:46\n"
  stdout: ''
  timestamp: 1659978167
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k > length(arr)\n        return arr\n    else\n        maximum = arr\n\
    \        for j in arr[2:end]\n            maximum[j] = maximum[j-1]\n        end\n\
    \        return maximum[2:end]\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 11 errored,
    0 broken.

    in expression starting at /tmp/tmpzja5yzxg.jl:38

    '
  stdout: "test set: Error During Test at /tmp/tmpzja5yzxg.jl:41\n  Test threw exception\n\
    \  Expression: candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  BoundsError: attempt\
    \ to access 3-element Vector{Int64} at index [-5]\n  Stacktrace:\n   [1] getindex\n\
    \     @ ./array.jl:861 [inlined]\n   [2] maximum(arr::Vector{Int64}, k::Int64)\n\
    \     @ Main /tmp/tmpzja5yzxg.jl:31\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpzja5yzxg.jl:41 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpzja5yzxg.jl:40\ntest set:\
    \ Error During Test at /tmp/tmpzja5yzxg.jl:42\n  Test threw exception\n  Expression:\
    \ candidate([4, -4, 4], 2) == [4, 4]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [-5]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmpzja5yzxg.jl:31\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpzja5yzxg.jl:42 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpzja5yzxg.jl:40\ntest set:\
    \ Error During Test at /tmp/tmpzja5yzxg.jl:43\n  Test threw exception\n  Expression:\
    \ candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n  BoundsError: attempt to access\
    \ 7-element Vector{Int64} at index [0]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] maximum(arr::Vector{Int64}, k::Int64)\n   \
    \  @ Main /tmp/tmpzja5yzxg.jl:31\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpzja5yzxg.jl:43 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpzja5yzxg.jl:40\ntest set:\
    \ Error "
  timestamp: 1659978170
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    tmp = sort(arr)\n    idx = length(arr)\n    arr1 = Vector{Int64}(idx)\n \
    \   arr1[k:] = maximum(arr1[k:], k)\n    idx = length(arr1) - k\n    arr1[idx:]\
    \ = maximum(arr1[idx:], k)\n    return arr1\nend\nmaximum(x, y)\nusing Test\n\n\
    @testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4,\
    \ -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"k:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmptbt5onhm.jl:29\nin expression\
    \ starting at /tmp/tmptbt5onhm.jl:29\n"
  stdout: ''
  timestamp: 1659978167
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    m = max(arr)\n    arr1 = arr[arr .!= m]\n    arr2 = arr1[k .== min(k, length(arr1))]\n\
    \    maximum = arr2\n    return maximum\nend\nusing Test\n\n@testset begin\n\n\
    candidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 11 errored,
    0 broken.

    in expression starting at /tmp/tmp4pcslvev.jl:34

    '
  stdout: "test set: Error During Test at /tmp/tmp4pcslvev.jl:37\n  Test threw exception\n\
    \  Expression: candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  MethodError: no method\
    \ matching max(::Vector{Int64})\n  Closest candidates are:\n    max(::Any, !Matched::Missing)\
    \ at ~/.conda/envs/polyglot/share/julia/base/missing.jl:137\n    max(::Any, !Matched::Any)\
    \ at ~/.conda/envs/polyglot/share/julia/base/operators.jl:492\n    max(::Any,\
    \ !Matched::Any, !Matched::Any, !Matched::Any...) at ~/.conda/envs/polyglot/share/julia/base/operators.jl:655\n\
    \    ...\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @\
    \ Main /tmp/tmp4pcslvev.jl:26\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp4pcslvev.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp4pcslvev.jl:36\ntest set:\
    \ Error During Test at /tmp/tmp4pcslvev.jl:38\n  Test threw exception\n  Expression:\
    \ candidate([4, -4, 4], 2) == [4, 4]\n  MethodError: no method matching max(::Vector{Int64})\n\
    \  Closest candidates are:\n    max(::Any, !Matched::Missing) at ~/.conda/envs/polyglot/share/julia/base/missing.jl:137\n\
    \    max(::Any, !Matched::Any) at ~/.conda/envs/polyglot/share/julia/base/operators.jl:492\n\
    \    max(::Any, !Matched::Any, !Matched::Any, !Matched::Any...) at ~/.conda/envs/polyglot/share/julia/base/operators.jl:655\n\
    \    ...\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @\
    \ Main /tmp/tmp4pcslvev.jl:26\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp4pcslvev.jl:38 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp4pcslvev.jl:36\ntest set:\
    \ Error During Test at /tmp/tmp4pcslvev.jl:39\n  Test threw exception\n  Expression:\
    \ candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n  MethodErr"
  timestamp: 1659978171
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if length(arr) < k || k < 1 \n        return arr \n    end \n    k = k %\
    \ length(arr) \n    return maximum(maximum(arr[k .. end], arr), k \u2212 1) \n\
    end \nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 1 failed, 10 errored,
    0 broken.

    in expression starting at /tmp/tmpkp4qe8k6.jl:34

    '
  stdout: "test set: Error During Test at /tmp/tmpkp4qe8k6.jl:37\n  Test threw exception\n\
    \  Expression: candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  UndefVarError: .. not\
    \ defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @\
    \ Main /tmp/tmpkp4qe8k6.jl:30\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpkp4qe8k6.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpkp4qe8k6.jl:36\ntest set:\
    \ Error During Test at /tmp/tmpkp4qe8k6.jl:38\n  Test threw exception\n  Expression:\
    \ candidate([4, -4, 4], 2) == [4, 4]\n  UndefVarError: .. not defined\n  Stacktrace:\n\
    \   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmpkp4qe8k6.jl:30\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpkp4qe8k6.jl:38 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpkp4qe8k6.jl:36\ntest set:\
    \ Error During Test at /tmp/tmpkp4qe8k6.jl:39\n  Test threw exception\n  Expression:\
    \ candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n  UndefVarError: .. not defined\n\
    \  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmpkp4qe8k6.jl:30\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpkp4qe8k6.jl:39 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpkp4qe8k6.jl:36\ntest set:\
    \ Error During Test at /tmp/tmpkp4qe8k6.jl:40\n  Test threw exception\n  Expression:\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n  UndefVarError:\
    \ .. not defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n\
    \     @ Main /tmp/tmpkp4qe8k6.jl:30\n"
  timestamp: 1659978171
- exit_code: -1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \  result = Array{Int64}(undef, k)\n  for i = 1:k\n    result[i] = maximum(arr,\
    \ length(arr)-i)\n  end\n  return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659978171
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    \"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5],\
    \ 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4ak4bxy4.jl:1\nin expression starting at /tmp/tmp4ak4bxy4.jl:1\n"
  stdout: ''
  timestamp: 1659978082
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    \"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5],\
    \ 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4ak4bxy4.jl:1\nin expression starting at /tmp/tmp4ak4bxy4.jl:1\n"
  stdout: ''
  timestamp: 1659978082
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    maximum_arr = maximum_list(arr, k)\n    vector(maximum_arr, k)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5],\
    \ 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 11 errored,
    0 broken.

    in expression starting at /tmp/tmp_l9di7vu.jl:31

    '
  stdout: "test set: Error During Test at /tmp/tmp_l9di7vu.jl:34\n  Test threw exception\n\
    \  Expression: candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  UndefVarError: maximum_list\
    \ not defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n \
    \    @ Main /tmp/tmp_l9di7vu.jl:26\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp_l9di7vu.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp_l9di7vu.jl:33\ntest set:\
    \ Error During Test at /tmp/tmp_l9di7vu.jl:35\n  Test threw exception\n  Expression:\
    \ candidate([4, -4, 4], 2) == [4, 4]\n  UndefVarError: maximum_list not defined\n\
    \  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmp_l9di7vu.jl:26\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp_l9di7vu.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp_l9di7vu.jl:33\ntest set:\
    \ Error During Test at /tmp/tmp_l9di7vu.jl:36\n  Test threw exception\n  Expression:\
    \ candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n  UndefVarError: maximum_list\
    \ not defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n \
    \    @ Main /tmp/tmp_l9di7vu.jl:26\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp_l9di7vu.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp_l9di7vu.jl:33\ntest set:\
    \ Error During Test at /tmp/tmp_l9di7vu.jl:37\n  Test threw exception\n  Expression:\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n  UndefVarError:\
    \ maximum_list not defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64},\
    \ k::In"
  timestamp: 1659978170
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k < 1 || k > length(arr)\n        throw(ArgumentError(\"k ($k) must between\
    \ 1 and length of array ($length)\"))\n    end\nusing Test\n\n@testset begin\n\
    \ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t\
    @test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1,\
    \ -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2,\
    \ 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\
    \t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\
    \t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpe5sltp10.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpe5sltp10.jl:1\n\
    in expression starting at /tmp/tmpe5sltp10.jl:1\n"
  stdout: ''
  timestamp: 1659978168
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k <= 0\n        return arr\n    \n    maximum = arr[-k+1:end]\n    for\
    \ e in arr[end:end]\n        if e > maximum\n            maximum = e\n       \
    \ end \n    return maximum\nend\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\
    \t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4],\
    \ 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvkaj7inx.jl:1\nin expression starting at /tmp/tmpvkaj7inx.jl:1\n"
  stdout: ''
  timestamp: 1659978168
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k > length(arr) || k < 1 \n        return [] \n    else \n        return\
    \ [maximum(arr, k - 1), maximum(arr .* (k .+ ones(1, k)), k)]\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4,\
    \ 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 10 errored,
    0 broken.

    in expression starting at /tmp/tmpd1ew6laf.jl:34

    '
  stdout: "test set: Error During Test at /tmp/tmpd1ew6laf.jl:37\n  Test threw exception\n\
    \  Expression: candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  MethodError: no method\
    \ matching maximum(::Matrix{Float64}, ::Int64)\n  You may have intended to import\
    \ Base.maximum\n  Closest candidates are:\n    maximum(!Matched::Vector{Int64},\
    \ ::Int64) at /tmp/tmpd1ew6laf.jl:25\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64},\
    \ k::Int64) (repeats 3 times)\n     @ Main /tmp/tmpd1ew6laf.jl:29\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpd1ew6laf.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpd1ew6laf.jl:36\ntest set:\
    \ Error During Test at /tmp/tmpd1ew6laf.jl:38\n  Test threw exception\n  Expression:\
    \ candidate([4, -4, 4], 2) == [4, 4]\n  MethodError: no method matching maximum(::Matrix{Float64},\
    \ ::Int64)\n  You may have intended to import Base.maximum\n  Closest candidates\
    \ are:\n    maximum(!Matched::Vector{Int64}, ::Int64) at /tmp/tmpd1ew6laf.jl:25\n\
    \  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64) (repeats 2 times)\n\
    \     @ Main /tmp/tmpd1ew6laf.jl:29\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpd1ew6laf.jl:38 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpd1ew6laf.jl:36\ntest set:\
    \ Error During Test at /tmp/tmpd1ew6laf.jl:39\n  Test threw exception\n  Expression:\
    \ candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n  MethodError: no method matching\
    \ maximum(::Matrix{Float64}, ::Int64)\n  You may have intended to import Base.maximum\n\
    \  Closest candidates are:\n    maximum(!Matched::Vector{Int64}, ::Int64) at /tmp/tmpd1ew6laf.jl:25\n\
    \  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmpd1ew6laf.jl:29\n\
    \   [2] macro expansion\n "
  timestamp: 1659978171
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    maximum = zeros(Int, k)\n    for i in 1:k\n        maximum[i] = maximum[i\
    \ - 1] if maximum[i - 1] > arr[i] else arr[i]\n    end\n    return maximum\nend\n\
    using Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4,\
    \ 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmpugmc8jbf.jl:27 expected \"\
    end\", got \"if\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpugmc8jbf.jl:28\n\
    in expression starting at /tmp/tmpugmc8jbf.jl:28\n"
  stdout: ''
  timestamp: 1659978168
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k==0\n        return arr\n    if k==1\n        return arr[1:end]\n   \
    \ mid = floor((k-1)/2)\n    return maximum(maximum(arr, mid), k-1-mid)\nend\n\
    maximum(x::Vector{Int64}, k::Int64) = maximum([x], k)\nmaximum(x::Vector{Int64})\
    \ = x\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcq12n1ao.jl:1\nin expression starting at /tmp/tmpcq12n1ao.jl:1\n"
  stdout: ''
  timestamp: 1659978168
- exit_code: -1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    arr = [maximum(arr, arr[i])+1 for i in 1:k]\n    return arr\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) ==\
    \ [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpqgijlrs0.jl:34\n  Test threw
    exception\n  Expression: candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  MethodError:
    no method matching +(::Vector{Int64}, ::Int64)\n  For element-wise addition, use
    broadcasting with dot syntax: array .+ scalar\n  Closest candidates are:\n    +(::Any,
    ::Any, !Matched::Any, !Matched::Any...) at ~/.conda/envs/polyglot/share/julia/base/operators.jl:655\n    +(!Matched::T,
    ::T) where T<:Union{Int128, Int16, Int32, Int64, Int8, UInt128, UInt16, UInt32,
    UInt64, UInt8} at ~/.conda/envs/polyglot/share/julia/base/int.jl:87\n    +(!Matched::LinearAlgebra.UniformScaling,
    ::Number) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:145\n    ...\n  Stacktrace:\n   [1]
    (::var"#1#2")(i::Int64)\n     @ Main ./none:0\n   [2] iterate\n     @ ./generator.jl:47
    [inlined]\n   [3] collect(itr::Base.Generator{UnitRange{Int64}, var"#1#2"})\n     @
    Base ./array.jl:724\n   [4] maximum(arr::Vector{Int64}, k::Int64)\n     @ Main
    /tmp/tmpqgijlrs0.jl:26\n   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [6] macro expansion\n     @ /tmp/tmpqgijlrs0.jl:34 [inlined]\n   [7]
    macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [8] top-level scope\n     @ /tmp/tmpqgijlrs0.jl:33\n'''
  timestamp: 1659978173
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k == 1\n        return arr\n    else\n        largest_num = maximum(arr[k+1:end],\
    \ k+1)\n        temp_num = maximum(arr, k)\n        return [largest_num] + temp_num\n\
    \    end\nend\n</cell>\n<text>\nExercise 11\nImplement the function minimum. This\
    \ function takes in a list of numbers and an integer k and returns a new sorted\
    \ list of length k with the minimum numbers in the list. \nYou should call the\
    \ function maximum() recursively until k reaches 0.\nusing Test\n\n@testset begin\n\
    \ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t\
    @test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1,\
    \ -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2,\
    \ 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\
    \t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\
    \t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyfouziiz.jl:34\nin expression starting at\
    \ /tmp/tmpyfouziiz.jl:34\n"
  stdout: ''
  timestamp: 1659978169
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if length(arr) <= k\n        arr\n    else\n        maximumSubArray(arr,\
    \ k)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpsur6z1j9.jl:34

    '
  stdout: "test set: Test Failed at /tmp/tmpsur6z1j9.jl:37\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [-3, -4, 5] == [-4, -3, 5]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpsur6z1j9.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpsur6z1j9.jl:36\ntest set: Error\
    \ During Test at /tmp/tmpsur6z1j9.jl:38\n  Test threw exception\n  Expression:\
    \ candidate([4, -4, 4], 2) == [4, 4]\n  UndefVarError: maximumSubArray not defined\n\
    \  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmpsur6z1j9.jl:29\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpsur6z1j9.jl:38 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpsur6z1j9.jl:36\ntest set:\
    \ Error During Test at /tmp/tmpsur6z1j9.jl:39\n  Test threw exception\n  Expression:\
    \ candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n  UndefVarError: maximumSubArray\
    \ not defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n \
    \    @ Main /tmp/tmpsur6z1j9.jl:29\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpsur6z1j9.jl:39 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpsur6z1j9.jl:36\ntest set:\
    \ Error During Test at /tmp/tmpsur6z1j9.jl:40\n  Test threw exception\n  Expression:\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n  UndefVarError:\
    \ maximumSubArray not defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64},\
    \ k::Int64)\n     @ Main /tmp/tmpsur6z1j9.jl:29\n   [2] macro expansion\n    \
    \ @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Te"
  timestamp: 1659978172
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k <= 0 || length( arr) <= k return arr\n    mid = floor( length(arr)/2\
    \ )\n    sort( arr[(k-1)*mid+1:k*mid] )\n    maximum( arr[(k-1)*mid+1:k*mid],\
    \ k-1 )\nend\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxv6iln6o.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxv6iln6o.jl:1\n\
    in expression starting at /tmp/tmpxv6iln6o.jl:1\n"
  stdout: ''
  timestamp: 1659978169
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    maximum = zeros(k)\n    for i = 1:k\n        maximum[i] = maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(arr[i],\
    \ arr[i + 1]), maximum(arr[i + 2], arr[i + 3]), maximum(arr[i + 4], arr[i + 5]),\
    \ maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(arr[i\
    \ + 8], arr[i + 9]), maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(\n\
    using Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4,\
    \ 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7l5fulb8.jl:31\nin expression starting at\
    \ /tmp/tmp7l5fulb8.jl:31\n"
  stdout: ''
  timestamp: 1659978169
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    \"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5],\
    \ 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4ak4bxy4.jl:1\nin expression starting at /tmp/tmp4ak4bxy4.jl:1\n"
  stdout: ''
  timestamp: 1659978082
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    m = minimum(arr) \n    arr = sort(arr) \n    len = length(arr) \n    return\
    \ arr[k+1:k+len] == arr[m+1:m+len] ? arr : maximum(arr[k+1:k+len], k) \nend\n\
    using Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4,\
    \ 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 11 errored,
    0 broken.

    in expression starting at /tmp/tmpjneeovco.jl:33

    '
  stdout: "test set: Error During Test at /tmp/tmpjneeovco.jl:36\n  Test threw exception\n\
    \  Expression: candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  BoundsError: attempt\
    \ to access 3-element Vector{Int64} at index [4:6]\n  Stacktrace:\n   [1] throw_boundserror(A::Vector{Int64},\
    \ I::Tuple{UnitRange{Int64}})\n     @ Base ./abstractarray.jl:691\n   [2] checkbounds\n\
    \     @ ./abstractarray.jl:656 [inlined]\n   [3] getindex\n     @ ./array.jl:867\
    \ [inlined]\n   [4] maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmpjneeovco.jl:29\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpjneeovco.jl:36 [inlined]\n\
    \   [7] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpjneeovco.jl:35\ntest set:\
    \ Error During Test at /tmp/tmpjneeovco.jl:37\n  Test threw exception\n  Expression:\
    \ candidate([4, -4, 4], 2) == [4, 4]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [3:5]\n  Stacktrace:\n   [1] throw_boundserror(A::Vector{Int64},\
    \ I::Tuple{UnitRange{Int64}})\n     @ Base ./abstractarray.jl:691\n   [2] checkbounds\n\
    \     @ ./abstractarray.jl:656 [inlined]\n   [3] getindex\n     @ ./array.jl:867\
    \ [inlined]\n   [4] maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmpjneeovco.jl:29\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpjneeovco.jl:37 [inlined]\n\
    \   [7] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpjneeovco.jl:35\ntest set:\
    \ Error During Test at /tmp/tmpjneeovco.jl:38\n  Test threw exception\n  Expression:\
    \ candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n  BoundsError: attempt to access\
    \ 7-element Vector{Int64} at index [2:8]\n  Stacktrace:\n   [1] throw_boundserror(A::Vector{Int64},\
    \ I::Tuple{UnitRange{Int64}})\n     @ Base ./abstractarray.jl:691\n   [2] checkbounds\n\
    \     @ ./abstracta"
  timestamp: 1659978172
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k > length(arr)\n        throw(ArgumentError(\"$k should be less than\
    \ length of $arr\"))\n    end\n    @assert k == 0 || k <= length(arr) \n    return\
    \ maximum((arr[1:k] .> arr[k+1]) ? arr : arr[k+1:end])\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3,\
    \ 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2,\
    \ 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1,\
    \ 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0,\
    \ 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 11 errored,
    0 broken.

    in expression starting at /tmp/tmpeo3jn83j.jl:34

    '
  stdout: "test set: Error During Test at /tmp/tmpeo3jn83j.jl:37\n  Test threw exception\n\
    \  Expression: candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  BoundsError: attempt\
    \ to access 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n\
    \     @ ./array.jl:861 [inlined]\n   [2] maximum(arr::Vector{Int64}, k::Int64)\n\
    \     @ Main /tmp/tmpeo3jn83j.jl:30\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpeo3jn83j.jl:37 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpeo3jn83j.jl:36\ntest set:\
    \ Error During Test at /tmp/tmpeo3jn83j.jl:38\n  Test threw exception\n  Expression:\
    \ candidate([4, -4, 4], 2) == [4, 4]\n  TypeError: non-boolean (BitVector) used\
    \ in boolean context\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n\
    \     @ Main /tmp/tmpeo3jn83j.jl:30\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpeo3jn83j.jl:38 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpeo3jn83j.jl:36\ntest set:\
    \ Error During Test at /tmp/tmpeo3jn83j.jl:39\n  Test threw exception\n  Expression:\
    \ candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n  TypeError: non-boolean (BitVector)\
    \ used in boolean context\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n\
    \     @ Main /tmp/tmpeo3jn83j.jl:30\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpeo3jn83j.jl:39 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpeo3jn83j.jl:36\ntest set:\
    \ Error During Test at /tmp/tmpeo3jn83j.jl:40\n  Test threw exception\n  Expression:\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3"
  timestamp: 1659978173
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k <= 0 || k > length(arr)\n        throw(ArgumentError(\"invalid k\"))\n\
    \    end\n    maximums = Vector{Int64}(repeat(0, k))\n    maximums[1] = arr[end]\n\
    \    for i in 2:length(arr)\n        if arr[i] > maximums[1]\n            maximums[1]\
    \ = maximums[1]\n            maximums[i] = maximums[i - 1]\n        else\n   \
    \         maximums[i] = maximum(maximums, k - 1)\n        end\n    end\n    return\
    \ maximums\nend\n</code>\n<|/ a tags=julia dscore=3 |>\n<| c |>\nThe key thing\
    \ is the concept of `partition`. You can write `maximums = maximums([4, -4, 4],\
    \ 2)` as a one-liner `maximums = maximums.(partition([4, -4, 4], 2))`.\n<|/ c\
    \ |>\n<| c |>\nAlso, the last line `maximums.(partition([-3, 2, 1, 2, -1, -2,\
    \ 1], 1))` is very interesting. I have never seen this kind of syntax before.\
    \ Thank you.\n<|/ c |>\n<| a dscore=3 |>\nA compact implementation using broadcasting\
    \ - \n<code>\nmaximum(x::Vector{Int64}, k::Int64) = maximum(maximum([x], k - 1)...)\n\
    </code>\n<|/ a tags=julia |>\n<| a dscore=3 |>\nIn Julia >= 1.6, you can make\
    \ use of Array{T} and reshape:\n<code>\nmaximum([4, -4, 4], 2)\n# 4-element Array{Int64,1}:\n\
    # 4\n# -4\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp41dl9ei4.jl:41\nin expression starting at\
    \ /tmp/tmp41dl9ei4.jl:41\n"
  stdout: ''
  timestamp: 1659978170
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if (k > length(arr)) \n        throw(ArgumentError(\"k must be greater than\
    \ length of arr\"))\n    end\n    maximum = zeros(k)\n    for n in arr \n    \
    \    maximum[n] = maximum(maximum(maximum(maximum, maximum[n]), maximum[n]), maximum[n])\n\
    \    end\n    return maximum\nend\nmaximum(arr::Vector{Int64}, k) = maximum(kron(arr,\
    \ ones(1, k)))\nmaximum(arr) = (maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(\n\
    using Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4,\
    \ 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnt8syrmb.jl:39\nin expression starting at\
    \ /tmp/tmpnt8syrmb.jl:39\n"
  stdout: ''
  timestamp: 1659978170
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k > length(arr) \n        return [] \n    \n    maximum = arr[1] \n  \
    \  for i \u2208 2:(length(arr)-1) \n        maximum = max(maximum, arr[i]) \n\
    \    \n    result = [] \n    for i \u2208 1:k \n        result[i] = maximum(maximum)\
    \ \n    \n    return result\nend\nmaximum()\n</cell>\n<code language=julia-1.6>\n\
    maximum(maximum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, -1, -2, -3]), 3)\n</cell>\n<code\
    \ language=julia-1.6>\nmaximum(maximum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, -1, -2,\
    \ -3]), 2)\n</cell>\n<code language=julia-1.6>\nmaximum(maximum([1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, -1, -2, -3]), 1)\n</cell>\n<text>\n\u23CE Sort a vector arr\
    \ of integers according to the number of occurrences of the number in arr.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5],\
    \ 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpoc25v2n4.jl:40\nin expression starting at\
    \ /tmp/tmpoc25v2n4.jl:40\n"
  stdout: ''
  timestamp: 1659978170
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    maximum([x for x in arr if x >= k], k)\nend\n</cell>\n<code language=julia-1.3>\n\
    maximum(vec::Vector{Int64}, k) = maximum(maximum(arr, k) for arr in vec)\n</cell>\n\
    <text>\nExercise 3\nWrite a Julia function to count the frequency of each element\
    \ in the input vector.\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\
    \t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4],\
    \ 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4gt05q31.jl:28\nin expression starting at\
    \ /tmp/tmp4gt05q31.jl:28\n"
  stdout: ''
  timestamp: 1659978170
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    # O(n) time and O(1) space\n    if k > length(arr)\n        error(\"k should\
    \ be less than or equal to length(arr)\", 2)\n    else\n        res = maximum_rec(arr,\
    \ [], k, 1)\n        return res\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 11 errored,
    0 broken.

    in expression starting at /tmp/tmprtn6k4ni.jl:36

    '
  stdout: "test set: Error During Test at /tmp/tmprtn6k4ni.jl:39\n  Test threw exception\n\
    \  Expression: candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  UndefVarError: maximum_rec\
    \ not defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n \
    \    @ Main /tmp/tmprtn6k4ni.jl:30\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmprtn6k4ni.jl:39 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmprtn6k4ni.jl:38\ntest set:\
    \ Error During Test at /tmp/tmprtn6k4ni.jl:40\n  Test threw exception\n  Expression:\
    \ candidate([4, -4, 4], 2) == [4, 4]\n  UndefVarError: maximum_rec not defined\n\
    \  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmprtn6k4ni.jl:30\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmprtn6k4ni.jl:40 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmprtn6k4ni.jl:38\ntest set:\
    \ Error During Test at /tmp/tmprtn6k4ni.jl:41\n  Test threw exception\n  Expression:\
    \ candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n  UndefVarError: maximum_rec\
    \ not defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n \
    \    @ Main /tmp/tmprtn6k4ni.jl:30\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmprtn6k4ni.jl:41 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmprtn6k4ni.jl:38\ntest set:\
    \ Error During Test at /tmp/tmprtn6k4ni.jl:42\n  Test threw exception\n  Expression:\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n  UndefVarError:\
    \ maximum_rec not defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)"
  timestamp: 1659978173
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    return maximumArray(arr,k)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 11 errored,
    0 broken.

    in expression starting at /tmp/tmpzz5av9lk.jl:30

    '
  stdout: "test set: Error During Test at /tmp/tmpzz5av9lk.jl:33\n  Test threw exception\n\
    \  Expression: candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  UndefVarError: maximumArray\
    \ not defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n \
    \    @ Main /tmp/tmpzz5av9lk.jl:26\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpzz5av9lk.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpzz5av9lk.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpzz5av9lk.jl:34\n  Test threw exception\n  Expression:\
    \ candidate([4, -4, 4], 2) == [4, 4]\n  UndefVarError: maximumArray not defined\n\
    \  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmpzz5av9lk.jl:26\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpzz5av9lk.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpzz5av9lk.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpzz5av9lk.jl:35\n  Test threw exception\n  Expression:\
    \ candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n  UndefVarError: maximumArray\
    \ not defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n \
    \    @ Main /tmp/tmpzz5av9lk.jl:26\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpzz5av9lk.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpzz5av9lk.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpzz5av9lk.jl:36\n  Test threw exception\n  Expression:\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n  UndefVarError:\
    \ maximumArray not defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64},\
    \ k::In"
  timestamp: 1659978173
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    maximum = sort(arr)\n    return maximum[k..end]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3,\
    \ 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2,\
    \ 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1,\
    \ 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0,\
    \ 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 11 errored,
    0 broken.

    in expression starting at /tmp/tmpw12mx_0c.jl:31

    '
  stdout: "test set: Error During Test at /tmp/tmpw12mx_0c.jl:34\n  Test threw exception\n\
    \  Expression: candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  UndefVarError: .. not\
    \ defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @\
    \ Main /tmp/tmpw12mx_0c.jl:27\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpw12mx_0c.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpw12mx_0c.jl:33\ntest set:\
    \ Error During Test at /tmp/tmpw12mx_0c.jl:35\n  Test threw exception\n  Expression:\
    \ candidate([4, -4, 4], 2) == [4, 4]\n  UndefVarError: .. not defined\n  Stacktrace:\n\
    \   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmpw12mx_0c.jl:27\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpw12mx_0c.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpw12mx_0c.jl:33\ntest set:\
    \ Error During Test at /tmp/tmpw12mx_0c.jl:36\n  Test threw exception\n  Expression:\
    \ candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n  UndefVarError: .. not defined\n\
    \  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmpw12mx_0c.jl:27\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpw12mx_0c.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpw12mx_0c.jl:33\ntest set:\
    \ Error During Test at /tmp/tmpw12mx_0c.jl:37\n  Test threw exception\n  Expression:\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n  UndefVarError:\
    \ .. not defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n\
    \     @ Main /tmp/tmpw12mx_0c.jl:27\n"
  timestamp: 1659978173
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    arr = maximum(arr); return arr[k:end]\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t\
    @test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1,\
    \ -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2,\
    \ 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\
    \t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\
    \t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 11 errored,
    0 broken.

    in expression starting at /tmp/tmpit4bvxnf.jl:30

    '
  stdout: "test set: Error During Test at /tmp/tmpit4bvxnf.jl:33\n  Test threw exception\n\
    \  Expression: candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  MethodError: no method\
    \ matching maximum(::Vector{Int64})\n  You may have intended to import Base.maximum\n\
    \  Closest candidates are:\n    maximum(::Vector{Int64}, !Matched::Int64) at /tmp/tmpit4bvxnf.jl:25\n\
    \  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmpit4bvxnf.jl:26\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpit4bvxnf.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpit4bvxnf.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpit4bvxnf.jl:34\n  Test threw exception\n  Expression:\
    \ candidate([4, -4, 4], 2) == [4, 4]\n  MethodError: no method matching maximum(::Vector{Int64})\n\
    \  You may have intended to import Base.maximum\n  Closest candidates are:\n \
    \   maximum(::Vector{Int64}, !Matched::Int64) at /tmp/tmpit4bvxnf.jl:25\n  Stacktrace:\n\
    \   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmpit4bvxnf.jl:26\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpit4bvxnf.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpit4bvxnf.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpit4bvxnf.jl:35\n  Test threw exception\n  Expression:\
    \ candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n  MethodError: no method matching\
    \ maximum(::Vector{Int64})\n  You may have intended to import Base.maximum\n \
    \ Closest candidates are:\n    maximum(::Vector{Int64}, !Matched::Int64) at /tmp/tmpit4bvxnf.jl:25\n\
    \  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmpit4bvxnf.jl:26\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl"
  timestamp: 1659978174
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k < 1 || length(arr) < k\n        throw(ArgumentError(\"The length of\
    \ arr is smaller than k\"))\n    else if k == 1\n        throw(ArgumentError(\"\
    The length of arr is less than k\"))\n    elseif k == 2\n        return arr\n\
    \    else \n        maximum = maximum.(arr, k-1)\n        maximum = [maximum[1]]\
    \ + maximum[2:end-1]\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnxhqanto.jl:28\nin expression starting at\
    \ /tmp/tmpnxhqanto.jl:28\n"
  stdout: ''
  timestamp: 1659978171
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    arr[k + 1] > (arr[k] + arr[k + 1])/2 ? maximum(arr, k + 1) : arr\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5],\
    \ 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 6 errored,
    0 broken.

    in expression starting at /tmp/tmp953ic04b.jl:30

    '
  stdout: "test set: Error During Test at /tmp/tmp953ic04b.jl:33\n  Test threw exception\n\
    \  Expression: candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  BoundsError: attempt\
    \ to access 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n\
    \     @ ./array.jl:861 [inlined]\n   [2] maximum(arr::Vector{Int64}, k::Int64)\n\
    \     @ Main /tmp/tmp953ic04b.jl:26\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp953ic04b.jl:33 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp953ic04b.jl:32\ntest set:\
    \ Error During Test at /tmp/tmp953ic04b.jl:34\n  Test threw exception\n  Expression:\
    \ candidate([4, -4, 4], 2) == [4, 4]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] maximum(arr::Vector{Int64}, k::Int64) (repeats 2 times)\n\
    \     @ Main /tmp/tmp953ic04b.jl:26\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp953ic04b.jl:34 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp953ic04b.jl:32\ntest set:\
    \ Test Failed at /tmp/tmp953ic04b.jl:35\n  Expression: candidate([-3, 2, 1, 2,\
    \ -1, -2, 1], 1) == [2]\n   Evaluated: [-3, 2, 1, 2, -1, -2, 1] == [2]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp953ic04b.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp953ic04b.jl:32\ntest set: Test\
    \ Failed at /tmp/tmp953ic04b.jl:36\n  Expression: candidate([123, -123, 20, 0,\
    \ 1, 2, -3], 3) == [2, 20, 123]\n   Evaluated: [123, -123, 20, 0, 1, 2, -3] ==\
    \ [2, 20, 123]\nStacktrace:\n [1] ma"
  timestamp: 1659978174
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k <= 0\n        return arr\n    else if k > length(arr)\n        return\
    \ arr\n    else\n        maximum, idx = maximum(arr[1:k], k-1), 1\n        while\
    \ idx <= length(arr)-k && arr[idx] > maximum\n            maximum = arr[idx]\n\
    \            idx += 1\n        end\n        return maximum+arr[idx:end] \n   \
    \ end\nend\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\ndef maximum(k::Int,\
    \ v::Vector{Int64}) where {Int64, N}\n    sort(v, reverse=true) |> reverse[1:k]\n\
    end\n</code>\n<|/ a tags=sorting,max,vector,julia |>\n<| a |>\nJust a thought,\
    \ but for small arrays it might be faster to simply use a global variable. \n\
    <code>\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1eclb2vn.jl:28\nin expression starting at\
    \ /tmp/tmp1eclb2vn.jl:28\n"
  stdout: ''
  timestamp: 1659978171
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    return maximum (arr, k)\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: space before \"(\" not allowed in \"maximum (\"\
    \ at /tmp/tmpcdn3txol.jl:26\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpcdn3txol.jl:26\n\
    in expression starting at /tmp/tmpcdn3txol.jl:26\n"
  stdout: ''
  timestamp: 1659978171
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    length = length(arr)\n    if length <= k || k > length\n        return arr\n\
    \    end\n    maximums = sort(arr[k+1:length], by = x -> x)\n    maximums[length(maximums)+k-1:length(maximums)]\
    \ = maximums[length(maximums)+k-1:length(maximums)][1:k]\n    return maximums\n\
    end\nmaximum\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 11 errored,
    0 broken.

    in expression starting at /tmp/tmpky1hnfe_.jl:37

    '
  stdout: "test set: Error During Test at /tmp/tmpky1hnfe_.jl:40\n  Test threw exception\n\
    \  Expression: candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  UndefVarError: length\
    \ not defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n \
    \    @ Main /tmp/tmpky1hnfe_.jl:26\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpky1hnfe_.jl:40 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpky1hnfe_.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpky1hnfe_.jl:41\n  Test threw exception\n  Expression:\
    \ candidate([4, -4, 4], 2) == [4, 4]\n  UndefVarError: length not defined\n  Stacktrace:\n\
    \   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmpky1hnfe_.jl:26\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpky1hnfe_.jl:41 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpky1hnfe_.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpky1hnfe_.jl:42\n  Test threw exception\n  Expression:\
    \ candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n  UndefVarError: length not defined\n\
    \  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmpky1hnfe_.jl:26\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpky1hnfe_.jl:42 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpky1hnfe_.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpky1hnfe_.jl:43\n  Test threw exception\n  Expression:\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n  UndefVarError:\
    \ length not defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n\
    \     @ Main /tmp/tm"
  timestamp: 1659978173
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    \n    # Initialization\n    arr1 = copy(arr)\n    res1 = Vector{Int64}()\n\
    using Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4,\
    \ 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpvjt5dn0z.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpvjt5dn0z.jl:1\n\
    in expression starting at /tmp/tmpvjt5dn0z.jl:1\n"
  stdout: ''
  timestamp: 1659978171
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    l = length(arr)\n    if k > l || k <= 0\n        error(\"k should be positive\
    \ integer and k should be smaller than length of array\")\n    end\nusing Test\n\
    \n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) ==\
    \ [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpft22g2zk.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpft22g2zk.jl:1\n\
    in expression starting at /tmp/tmpft22g2zk.jl:1\n"
  stdout: ''
  timestamp: 1659978171
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k <= 0 \n        return arr \n    else \n        maximum_rec(arr, [],\
    \ k) \n    end\nmaximum_rec(arr, cur_max, k) = (cur_max..., maximum(arr, k-1))\
    \ \nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpq5u0i61n.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpq5u0i61n.jl:1\n\
    in expression starting at /tmp/tmpq5u0i61n.jl:1\n"
  stdout: ''
  timestamp: 1659978172
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if length(arr) < k\n        throw(ArgumentError(\"The length of arr is less\
    \ than k.\"))\n    end\n    maximum = arr[k]\n    for i in (1 .. k)\n        if\
    \ maximum < arr[i]\n            maximum = arr[i]\n        else\n            break\n\
    \        end\n    end\n    return maximum\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t\
    @test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1,\
    \ -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2,\
    \ 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\
    \t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\
    \t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 11 errored,
    0 broken.

    in expression starting at /tmp/tmportbo_bi.jl:41

    '
  stdout: "test set: Error During Test at /tmp/tmportbo_bi.jl:44\n  Test threw exception\n\
    \  Expression: candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  UndefVarError: .. not\
    \ defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @\
    \ Main /tmp/tmportbo_bi.jl:30\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmportbo_bi.jl:44 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmportbo_bi.jl:43\ntest set:\
    \ Error During Test at /tmp/tmportbo_bi.jl:45\n  Test threw exception\n  Expression:\
    \ candidate([4, -4, 4], 2) == [4, 4]\n  UndefVarError: .. not defined\n  Stacktrace:\n\
    \   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmportbo_bi.jl:30\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmportbo_bi.jl:45 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmportbo_bi.jl:43\ntest set:\
    \ Error During Test at /tmp/tmportbo_bi.jl:46\n  Test threw exception\n  Expression:\
    \ candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n  UndefVarError: .. not defined\n\
    \  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmportbo_bi.jl:30\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmportbo_bi.jl:46 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmportbo_bi.jl:43\ntest set:\
    \ Error During Test at /tmp/tmportbo_bi.jl:47\n  Test threw exception\n  Expression:\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n  UndefVarError:\
    \ .. not defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n\
    \     @ Main /tmp/tmportbo_bi.jl:30\n"
  timestamp: 1659978174
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k < 1 || k > length(arr)\n        error(\"k must be in [1, length(arr)]\"\
    )\n    end\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpo445iadd.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpo445iadd.jl:1\n\
    in expression starting at /tmp/tmpo445iadd.jl:1\n"
  stdout: ''
  timestamp: 1659978172
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    return sort(arr[1:k])\nend\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\
    \t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4],\
    \ 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 5 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpiuxoz6r4.jl:30

    '
  stdout: "test set: Test Failed at /tmp/tmpiuxoz6r4.jl:34\n  Expression: candidate([4,\
    \ -4, 4], 2) == [4, 4]\n   Evaluated: [-4, 4] == [4, 4]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpiuxoz6r4.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpiuxoz6r4.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpiuxoz6r4.jl:35\n  Expression: candidate([-3, 2, 1, 2, -1,\
    \ -2, 1], 1) == [2]\n   Evaluated: [-3] == [2]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpiuxoz6r4.jl:35 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpiuxoz6r4.jl:32\ntest set: Test Failed at /tmp/tmpiuxoz6r4.jl:36\n\
    \  Expression: candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n  \
    \ Evaluated: [-123, 20, 123] == [2, 20, 123]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpiuxoz6r4.jl:36 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpiuxoz6r4.jl:32\ntest set: Test Failed at /tmp/tmpiuxoz6r4.jl:37\n\
    \  Expression: candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n   Evaluated:\
    \ [-123, 0, 1, 20] == [0, 1, 2, 20]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpiuxoz6r4.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpiuxoz6r4.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpiuxoz6r4.jl:39\n  Expression: candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n   Evaluated: [-1, 0] == [3, "
  timestamp: 1659978173
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k <= 0\n        throw(ArgumentError(\"k must be positive integer\"))\n\
    \    else if k >= length(arr)\n        throw(ArgumentError(\"k must be less or\
    \ equal to length of array\"))\n    else if length(arr) < k\n        throw(ArgumentError(\"\
    length of array must be greater than k\"))\n    else if k > length(arr)\n    \
    \    k = length(arr)\n    end\n    a= deepcopy(arr)\n    maximum(a,k)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5],\
    \ 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkvz50cyq.jl:28\nin expression starting at\
    \ /tmp/tmpkvz50cyq.jl:28\n"
  stdout: ''
  timestamp: 1659978172
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    maximum = max(arr)\n    idx = findfirst(i->(arr[i]>maximum),1:length(arr))\n\
    \    if idx > k\n        arr = arr[idx : k+1]\n    else\n        arr = arr[idx\
    \ : end]\n    end\n    maximum\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 11 errored,
    0 broken.

    in expression starting at /tmp/tmp1sjv9ycz.jl:37

    '
  stdout: "test set: Error During Test at /tmp/tmp1sjv9ycz.jl:40\n  Test threw exception\n\
    \  Expression: candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  MethodError: no method\
    \ matching max(::Vector{Int64})\n  Closest candidates are:\n    max(::Any, !Matched::Missing)\
    \ at ~/.conda/envs/polyglot/share/julia/base/missing.jl:137\n    max(::Any, !Matched::Any)\
    \ at ~/.conda/envs/polyglot/share/julia/base/operators.jl:492\n    max(::Any,\
    \ !Matched::Any, !Matched::Any, !Matched::Any...) at ~/.conda/envs/polyglot/share/julia/base/operators.jl:655\n\
    \    ...\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @\
    \ Main /tmp/tmp1sjv9ycz.jl:26\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp1sjv9ycz.jl:40 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp1sjv9ycz.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp1sjv9ycz.jl:41\n  Test threw exception\n  Expression:\
    \ candidate([4, -4, 4], 2) == [4, 4]\n  MethodError: no method matching max(::Vector{Int64})\n\
    \  Closest candidates are:\n    max(::Any, !Matched::Missing) at ~/.conda/envs/polyglot/share/julia/base/missing.jl:137\n\
    \    max(::Any, !Matched::Any) at ~/.conda/envs/polyglot/share/julia/base/operators.jl:492\n\
    \    max(::Any, !Matched::Any, !Matched::Any, !Matched::Any...) at ~/.conda/envs/polyglot/share/julia/base/operators.jl:655\n\
    \    ...\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @\
    \ Main /tmp/tmp1sjv9ycz.jl:26\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp1sjv9ycz.jl:41 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp1sjv9ycz.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp1sjv9ycz.jl:42\n  Test threw exception\n  Expression:\
    \ candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n  MethodErr"
  timestamp: 1659978175
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    n = length(arr)\n    if k > n\n        error(\"The k value is greater than\
    \ the length of the arr\")\n    elseif k == 1\n        return arr\n    else\n\
    \        return arr[1:k+1]\n    end\nend\n\"\"\"\n    Given a vector arr of integers\
    \ and a positive integer k, return a sorted vector \n    of length k with the\
    \ minimum k numbers in arr.\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\
    \t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4],\
    \ 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpf55u_odh.jl:35\nin expression starting at\
    \ /tmp/tmpf55u_odh.jl:35\n"
  stdout: ''
  timestamp: 1659978172
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k == 0 || k == length(arr)\n        return arr\n    if k > length(arr)\n\
    \        throw(ArgumentError(\"The length of arr is too small.\"))\n    end\n\
    \    maximum = arr[1]\n    for i in 2:length(arr)\n        if maximum > arr[i]\n\
    \            maximum = arr[i]\n        else\n            push!(maximum, arr[i])\n\
    \        end\n    end\n    return maximum\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t\
    @test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1,\
    \ -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2,\
    \ 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\
    \t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\
    \t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpr54s494_.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpr54s494_.jl:1\n\
    in expression starting at /tmp/tmpr54s494_.jl:1\n"
  stdout: ''
  timestamp: 1659978173
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k == length(arr)\n        return arr\n    elseif k <= 0\n        return\
    \ maximum([arr[k], arr[k-1]], k-1)\n    else\n        return maximum([arr[k],\
    \ maximum(arr, k-1)], k-1)\n    end\nend\nmaximum([2, 4], 1)\n</cell>\n<code language=julia-1.1>\n\
    using Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4,\
    \ 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: BoundsError: attempt to access 2-element Vector{Int64}\
    \ at index [0]\nStacktrace:\n [1] getindex\n   @ ./array.jl:861 [inlined]\n [2]\
    \ maximum(arr::Vector{Int64}, k::Int64)\n   @ Main /tmp/tmp_5kwps29.jl:29\n [3]\
    \ maximum(arr::Vector{Int64}, k::Int64)\n   @ Main /tmp/tmp_5kwps29.jl:31\n [4]\
    \ top-level scope\n   @ /tmp/tmp_5kwps29.jl:34\nin expression starting at /tmp/tmp_5kwps29.jl:34\n"
  stdout: ''
  timestamp: 1659978174
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k <= 1\n        arr\n    else\n        maximum.(arr.[-k], k-1) + maximum.(arr.[1:k],\
    \ k)\n    end\nend\nmaximum(arr::Vector{Int64}, k::Int64) = maximum.(arr, k)\n\
    maximum(arr::Vector{Int64}) = maximum.(arr, length(arr))\nusing Test\n\n@testset\
    \ begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3,\
    \ 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2,\
    \ 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1,\
    \ 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0,\
    \ 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid syntax \"arr.[-(k)]\" around /tmp/tmplz1lymm5.jl:29\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmplz1lymm5.jl:1\nin expression starting\
    \ at /tmp/tmplz1lymm5.jl:1\n"
  stdout: ''
  timestamp: 1659978173
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    length = length(arr)\n    if k < 1 || k > length\n        throw(ArgumentError(\"\
    k out of range\"))\n    end\n    return arr |> sortperm(k) |> arr |> maximum\n\
    end\n</cell>\n<code language=julia-0.5>\nmaximum([4,4,4])\n</cell>\n<code language=julia-0.5>\n\
    maximum([-3, 2, 1, 2, -1, -2, 1])\n</cell>\n<code language=julia-0.5>\nmaximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n</cell>\n<text>\nExercise 8: Maximum element in a given\
    \ range\nWrite a function that takes in a vector of integers and a range (start,\
    \ end)\nand returns the maximum element in the given range of the vector.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5],\
    \ 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbh2mw_ml.jl:32\nin expression starting at\
    \ /tmp/tmpbh2mw_ml.jl:32\n"
  stdout: ''
  timestamp: 1659978173
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    result = Array{Int64}(undef, k)\n    if k < 0 || k > (length(arr))\n    \
    \    return result\n    end\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\
    \t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4],\
    \ 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpookmgbxc.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpookmgbxc.jl:1\n\
    in expression starting at /tmp/tmpookmgbxc.jl:1\n"
  stdout: ''
  timestamp: 1659978173
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if length(arr)<k || k==0 || length(arr)==0\n        arr\n    else\n     \
    \   maximum([arr[i]|i in 1:k-1], k-1)\n    end\nend\n</cell>\n<code language=julia-1.1>\n\
    using Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4,\
    \ 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp45347gon.jl:32\nin expression starting at\
    \ /tmp/tmp45347gon.jl:32\n"
  stdout: ''
  timestamp: 1659978173
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k < 1 || k > length(arr)\n        throw(ArgumentError(\"k should be in\
    \ the range of [1, length(arr)]\"))\n    else\n        maximum_(arr, k)\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 11 errored,
    0 broken.

    in expression starting at /tmp/tmpnp8eex2h.jl:34

    '
  stdout: "test set: Error During Test at /tmp/tmpnp8eex2h.jl:37\n  Test threw exception\n\
    \  Expression: candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  UndefVarError: maximum_\
    \ not defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n \
    \    @ Main /tmp/tmpnp8eex2h.jl:29\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpnp8eex2h.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpnp8eex2h.jl:36\ntest set:\
    \ Error During Test at /tmp/tmpnp8eex2h.jl:38\n  Test threw exception\n  Expression:\
    \ candidate([4, -4, 4], 2) == [4, 4]\n  UndefVarError: maximum_ not defined\n\
    \  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmpnp8eex2h.jl:29\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpnp8eex2h.jl:38 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpnp8eex2h.jl:36\ntest set:\
    \ Error During Test at /tmp/tmpnp8eex2h.jl:39\n  Test threw exception\n  Expression:\
    \ candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n  UndefVarError: maximum_ not\
    \ defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @\
    \ Main /tmp/tmpnp8eex2h.jl:29\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpnp8eex2h.jl:39 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpnp8eex2h.jl:36\ntest set:\
    \ Error During Test at /tmp/tmpnp8eex2h.jl:40\n  Test threw exception\n  Expression:\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n  UndefVarError:\
    \ maximum_ not defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n\
    \     @ Main"
  timestamp: 1659978175
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k >= length(arr)\n        return arr\n    \n    maximum_idx = k\n    max_num\
    \ = arr[k]\n    arr_copy = [x for x in arr]\n    \n    for idx = k + 1:length(arr)\n\
    \        if arr[idx] > max_num\n            maximum_idx = idx\n            max_num\
    \ = arr[idx]\n        end\n    end\n    arr_copy[maximum_idx] = max_num\n    maximum(arr_copy,\
    \ maximum_idx - 1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\
    \t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4],\
    \ 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpoz3n33xf.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpoz3n33xf.jl:1\n\
    in expression starting at /tmp/tmpoz3n33xf.jl:1\n"
  stdout: ''
  timestamp: 1659978173
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k == 1\n        return arr\n    \n    middle_idx = ceil(Int64, k / 2)\n\
    \    left, right = minimum(arr, (middle_idx + 1)), k - middle_idx\nusing Test\n\
    \n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) ==\
    \ [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkdg5x1oi.jl:1\nin expression starting at /tmp/tmpkdg5x1oi.jl:1\n"
  stdout: ''
  timestamp: 1659978174
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    # Your code here\n    l = length(arr)\n    res = []\n    if k == 0 || l ==\
    \ 0\n        return res\n    end\n    if k > l\n        return arr\n    end\n\
    using Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4,\
    \ 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpkrbr91h7.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpkrbr91h7.jl:1\n\
    in expression starting at /tmp/tmpkrbr91h7.jl:1\n"
  stdout: ''
  timestamp: 1659978174
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k == 0 return arr\n    if k >= length(arr) \n        return arr\n    mid\
    \ = div(length(arr), k)\n    return maximum(maximum(arr[1: mid], k - 1), mid)\n\
    end\nmaximum([4, -4, 4], 2)\n</cell>\n<code language=julia-0.5>\nusing Test\n\n\
    @testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4,\
    \ -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfdi71v4n.jl:33\nin expression starting at\
    \ /tmp/tmpfdi71v4n.jl:33\n"
  stdout: ''
  timestamp: 1659978174
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    s = arr.sort\n    s = [v for v in s if v > k] \n    \n    if length(s) ==\
    \ 0\n        return v\n    \n    else \n        return s\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5],\
    \ 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 11 errored,
    0 broken.

    in expression starting at /tmp/tmpregk9_ku.jl:38

    '
  stdout: "test set: Error During Test at /tmp/tmpregk9_ku.jl:41\n  Test threw exception\n\
    \  Expression: candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  type Array has no field\
    \ sort\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2]\
    \ maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmpregk9_ku.jl:26\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpregk9_ku.jl:41 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpregk9_ku.jl:40\ntest set:\
    \ Error During Test at /tmp/tmpregk9_ku.jl:42\n  Test threw exception\n  Expression:\
    \ candidate([4, -4, 4], 2) == [4, 4]\n  type Array has no field sort\n  Stacktrace:\n\
    \   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] maximum(arr::Vector{Int64},\
    \ k::Int64)\n     @ Main /tmp/tmpregk9_ku.jl:26\n   [3] macro expansion\n    \
    \ @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [4] macro expansion\n     @ /tmp/tmpregk9_ku.jl:42 [inlined]\n   [5] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpregk9_ku.jl:40\ntest set:\
    \ Error During Test at /tmp/tmpregk9_ku.jl:43\n  Test threw exception\n  Expression:\
    \ candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n  type Array has no field sort\n\
    \  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] maximum(arr::Vector{Int64},\
    \ k::Int64)\n     @ Main /tmp/tmpregk9_ku.jl:26\n   [3] macro expansion\n    \
    \ @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [4] macro expansion\n     @ /tmp/tmpregk9_ku.jl:43 [inlined]\n   [5] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpregk9_ku.jl:40\ntest set:\
    \ Error During Test at /tmp/tmpregk9_ku.jl:44\n  Test threw exception\n  Expression:\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3"
  timestamp: 1659978176
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if len(arr) < k\n        return arr\n    elseif k <= 0\n        return arr\n\
    \    else\n        maximum = arr[k-1]\n        for i in 1:k\n            if maximum\
    \ > arr[i]\n                maximum = arr[i]\n            end\n        end\n \
    \       return arr[k-1] = maximum\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t\
    @test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1,\
    \ -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2,\
    \ 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\
    \t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\
    \t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 11 errored,
    0 broken.

    in expression starting at /tmp/tmpfqoqjie7.jl:42

    '
  stdout: "test set: Error During Test at /tmp/tmpfqoqjie7.jl:45\n  Test threw exception\n\
    \  Expression: candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  UndefVarError: len\
    \ not defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n \
    \    @ Main /tmp/tmpfqoqjie7.jl:26\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpfqoqjie7.jl:45 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpfqoqjie7.jl:44\ntest set:\
    \ Error During Test at /tmp/tmpfqoqjie7.jl:46\n  Test threw exception\n  Expression:\
    \ candidate([4, -4, 4], 2) == [4, 4]\n  UndefVarError: len not defined\n  Stacktrace:\n\
    \   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmpfqoqjie7.jl:26\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpfqoqjie7.jl:46 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpfqoqjie7.jl:44\ntest set:\
    \ Error During Test at /tmp/tmpfqoqjie7.jl:47\n  Test threw exception\n  Expression:\
    \ candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n  UndefVarError: len not defined\n\
    \  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmpfqoqjie7.jl:26\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpfqoqjie7.jl:47 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpfqoqjie7.jl:44\ntest set:\
    \ Error During Test at /tmp/tmpfqoqjie7.jl:48\n  Test threw exception\n  Expression:\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n  UndefVarError:\
    \ len not defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n\
    \     @ Main /tmp/tmpfqoqjie7.jl"
  timestamp: 1659978176
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    n = length(arr)\n    if k > n\n        return fill(Inf, k)\n    else\n  \
    \      maximums = zeros(k)\n        @inbounds for i in 1:k\n            if arr[i]\
    \ > maximum(arr, i-1)\n                maximums[i] = arr[i]\n            else\n\
    \                maximums[i] = maximum(arr, i-1)\n            end\n        end\n\
    \        return maximums\n    end\nend\nmaximum([-3, -4, 5], 3)\n</cell>\n<text>\n\
    The maximum of a vector\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\
    \t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4],\
    \ 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: MethodError: no method matching isless(::Vector{Int64},\
    \ ::Int64)\nClosest candidates are:\n  isless(::AbstractVector, !Matched::AbstractVector)\
    \ at ~/.conda/envs/polyglot/share/julia/base/abstractarray.jl:2550\n  isless(!Matched::AbstractFloat,\
    \ ::Real) at ~/.conda/envs/polyglot/share/julia/base/operators.jl:186\n  isless(!Matched::Real,\
    \ ::Real) at ~/.conda/envs/polyglot/share/julia/base/operators.jl:430\n  ...\n\
    Stacktrace:\n [1] <(x::Vector{Int64}, y::Int64)\n   @ Base ./operators.jl:352\n\
    \ [2] >(x::Int64, y::Vector{Int64})\n   @ Base ./operators.jl:378\n [3] maximum(arr::Vector{Int64},\
    \ k::Int64)\n   @ Main /tmp/tmpjmh7qqtd.jl:32\n [4] top-level scope\n   @ /tmp/tmpjmh7qqtd.jl:41\n\
    in expression starting at /tmp/tmpjmh7qqtd.jl:41\n"
  stdout: ''
  timestamp: 1659978177
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k <= length(arr)\n        maximum = zeros(Int64, k)\n        maximum[1]=\
    \ arr[1]\n        for i in 2:k\n            if maximum[i] > arr[i-1]\n       \
    \         maximum[i] = maximum[i-1]\n            else\n                maximum[i]\
    \ = maximum(arr, i-1)\n            end\n        end\n        return maximum\n\
    \    else\n        return arr\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 6 errored,
    0 broken.

    in expression starting at /tmp/tmpbi4qj37d.jl:43

    '
  stdout: "test set: Test Failed at /tmp/tmpbi4qj37d.jl:46\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [-3, -3, -3] == [-4, -3, 5]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbi4qj37d.jl:46 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbi4qj37d.jl:45\ntest set: Error\
    \ During Test at /tmp/tmpbi4qj37d.jl:47\n  Test threw exception\n  Expression:\
    \ candidate([4, -4, 4], 2) == [4, 4]\n  MethodError: objects of type Vector{Int64}\
    \ are not callable\n  Use square brackets [] for indexing an Array.\n  Stacktrace:\n\
    \   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmpbi4qj37d.jl:33\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpbi4qj37d.jl:47 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpbi4qj37d.jl:45\ntest set:\
    \ Test Failed at /tmp/tmpbi4qj37d.jl:48\n  Expression: candidate([-3, 2, 1, 2,\
    \ -1, -2, 1], 1) == [2]\n   Evaluated: [-3] == [2]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpbi4qj37d.jl:48 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpbi4qj37d.jl:45\ntest set: Error During Test\
    \ at /tmp/tmpbi4qj37d.jl:49\n  Test threw exception\n  Expression: candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n  MethodError: objects of type Vector{Int64}\
    \ are not callable\n  Use square brackets [] for indexing an Array.\n  Stacktrace:\n\
    \   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmpbi4qj37d.jl:33\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:"
  timestamp: 1659978177
