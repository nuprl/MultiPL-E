name: HumanEval_142_sum_squares
language: jl
prompt: "\"\"\"\"\n    This function will take a vector of integers. For all entries\
  \ in the vector, the function shall square the integer entry if its index is a \n\
  \    multiple of 3 and will cube the integer entry if its index is a multiple of\
  \ 4 and not a multiple of 3. The function will not \n    change the entries in the\
  \ vector whose indexes are not a multiple of 3 or 4. The function shall then return\
  \ the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1, 2, 3]\n  \
  \  >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
  \ \n"
tests: "using Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1,\
  \ 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
  \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
  \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
  \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\t\
  @test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16, -9,\
  \ -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
  \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
  \ == -1448)\nend\n"
completions: ["    if length(lst) == 0\n        return 0\n    end\n    sum_ = 0\n\
    \    for entry in lst\n        sum_ += entry * entry\n    end\n    return sum_\n\
    end\n</cell>\n<text>\nReturn to task 2.2", "    \"\"\"\n    sum_squares(lst)",
  "    sum = 0 \n    for i in lst\n        if i %% 3 == 0 || i %% 4 == 0\n       \
    \     sum += i^2\n        else\n            sum += i\n        end\n    end\n \
    \   return sum\nend\n</cell>\n<code language=julia-0.5>\nsum_squares(lst)\n</cell>\n\
    <code language=julia-0.5>\n@time sum_squares(lst);\n</cell>\n<code language=julia-0.5>\n\
    @time sum_squares(lst);\n</cell>\n<text>\nExercise 2\nWrite a Julia function called\
    \ sum_recur that sums up the entries of a vector recursively. The function shall\
    \ perform the summation as follows:", "    sum_n = 0\n    for i in lst\n     \
    \   if ismultiple3(i)\n            sum_n += i^2\n        elseif ismultiple4(i)\n\
    \            sum_n += i*i\n        else\n            sum_n += i\n        end\n\
    \    end\n    return sum_n\nend\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n\
    To make things easier I have used the method proposed by to generate the list\
    \ of all possible combinations using the Julia package:\n<code>\njulia> using\
    \ Combinatorics", "    \n    # Your code here\n    ...\n    return ...\nend\n\
    </cell>\n<text>\nQuestion 8", "    sum(map(x -> x * x if x % 3 == 0 \n       \
    \ else x * x * x, lst))\nend\n</cell>\n<code language=julia-1.5>\n# Let's test\
    \ it out", "    for i in 0 :lst.len-1\n        if i % 3 == 0\n            lst[i]\
    \ = lst[i] ** 2\n        else if i % 4 == 0\n            lst[i] = lst[i] ** 3\n\
    \        else\n            lst[i]\n        end\n    end\n    return sum(lst)\n\
    end\n</cell>\n<code language=julia-1.3>", "    sum=0\n    for i in lst\n     \
    \   if ((i%3==0 || i%4==0))\n            push!(sum,i*i)\n        else\n      \
    \      push!(sum,i*i*i)\n        end\n    end\n    return sum\nend\n</cell>\n\
    <text>\nExercise 2.3 \nWrite a function that takes a vector of integers and calculates\
    \ the average of all the entries in the vector. The function shall ignore all\
    \ the entries in the vector that don't have a positive integer value.", "    for\
    \ idx in (idx for idx in lst if idx % 3 == 0) \n        lst[idx] = lst[idx] *\
    \ lst[idx]\n    end\n    for idx in (idx for idx in lst if idx % 4 == 0)\n   \
    \     lst[idx] = lst[idx] * lst[idx]\n    end\n    return sum(lst)\nend\n</cell>\n\
    <code language=julia-1.5>\n\"\"\"\n    This function will take a vector of integers.\
    \ For all entries in the vector, the function shall cube the integer entry if\
    \ its \n    index is NOT a multiple of 3. The function will not change the entries\
    \ in the vector whose indexes are a multiple of 3. \n    The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1, 2,\
    \ 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"",
  "    sum = 0\n    for i=1:length(lst)\n        if (lst[i] % 3 == 0 || lst[i] % 4\
    \ == 0) && lst[i] % 2 != 0\n            sum += lst[i]*lst[i]\n        elseif lst[i]\
    \ % 3 == 0\n            sum += lst[i]*lst[i]\n        elseif lst[i] % 4 == 0\n\
    \            sum += lst[i]*lst[i]\n        else\n            sum += lst[i]\n \
    \       end\n    end\n    return sum\nend\n</cell>\n<text>\nExercise: Square and\
    \ Cube with Filters", "    \nend", "    ans = sum((lst[i] for i = 2:length(lst))^2)\n\
    \    return ans\nend\n\"\"\"\nThis function will take a vector of integers. For\
    \ all entries in the vector, the function shall cube the integer entry if its\
    \ index is a \n    multiple of 4 and will cube the integer entry if its index\
    \ is a multiple of 3 and not a multiple of 4. The function will not \n    change\
    \ the entries in the vector whose indexes are not a multiple of 4 or 3. The function\
    \ shall then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n\
    \    [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n  \
    \  \"\"\"", "    sum = 0\n    for idx in 0 : (length(lst)-1)\n        if idx %\
    \ 3 == 0 || idx % 4 == 0\n            sum += lst[idx]^2\n        else\n      \
    \      sum += lst[idx]\n        end\n    end\n    return sum\nend", "    sum=0\n\
    \    for i in lst\n        if i%4==0\n            sum += i^2\n        else\n \
    \           sum += i\n        end\n    end\n    return sum\nend", "    result\
    \ = 0\n    for i in lst\n        if i % 3 == 0 && i % 4 == 0\n            result\
    \ += 1\n        else\n            result = 3*result + i\n        end\n    end\n\
    \    return result\nend\n</cell>\n<code language=julia-1.0>\nsum_squares(lst)\n\
    </cell>\n<text>\nTask 13: List Comprehensions\nThe above functions can be very\
    \ inefficient if you have a very large vector. Using the map function with functions\
    \ can save you a lot of time. Map allows you to iterate over all the elements\
    \ of a vector and apply a function to those elements. Let's look at some examples.",
  "    sum = 0\n    for i in lst\n        if i%3==0 || i%4==0\n            sum +=\
    \ i\n        end\n    end\n    return sum\nend\n</cell>\n<cell>\nsum_squares(lst)\n\
    </cell>\n<text>\nProblem 7: Repetition count\nWrite a function that returns the\
    \ repetition count of a number in its binary representation.", "    sum = 0 \n\
    \    for x in lst \n        if ismultipleof3(x) == true\n            sum::Int64\
    \ = sum + x * x\n        else if ismultipleof4(x) == true\n            sum::Int64\
    \ = sum + x * x\n        else\n            sum::Int64 = sum + x\n        end\n\
    \    end\n    sum\nend\n</cell>\n<code language=julia-1.5>\nsum_squares(lst)\n\
    </cell>\n<text>\nQuestion 10 (5 points) Implement the function count_occurences(lst\
    \ :: Vector{Int64}, x :: Int64)::Int64 where lst :: Vector{Int64} and x :: Int64\
    \ are vectors of integers. Return the number of occurrences of x in lst. \n  \
    \  \n    Examples:\n    >>> lst\n    [1, 2, 3, 4, 4, 6, 1, 8, 5]\n    >>> x =\
    \ 3\n    >>> count_occurences(lst, x)\n    4\n    \"\"\"", "    if length(lst)\
    \ == 0\n        return 0 \n    end\n    sum_of_squares = 0\n    for index in lst\n\
    \        if index % 3 == 0 || index % 4 == 0\n            sum_of_squares += index\n\
    \        else\n            sum_of_squares *= index\n        end\n    end\n   \
    \ return sum_of_squares\nend", "    # write your code here\n    return sum(i for\
    \ i in lst if i%3==0 or i%4!=0)\nend\n</cell>\n<code language=julia-1.0>\nsum_squares(lst)\n\
    </cell>\n<text>\nProblem 1\nWrite a function that takes in a vector and returns\
    \ its sum-of-squares (SSE).", "    #your code goes here\n    return 0\nend\n</cell>\n\
    <code language=julia-1.1>\nsum_squares(lst)\n</cell>\n<text>\nThe sum of the squares\
    \ of the first 9 integers is 1 + 4 + 9 + 16 + 25 + 36 + 49 + 64 + 81 + 100 = 2520.",
  "    sum = 0\n    for x in lst\n        if x % 3 == 0 && x % 4 == 0\n          \
    \  sum += x\n        elseif x % 3 == 0 || x % 4 == 0\n            sum += x*x\n\
    \        end\n    end\n    return sum\nend", "    res=0\n    for index1 in 1:length(lst)\n\
    \        res+=lst[index1]^2\n    end\n    return res\nend\n</cell>\n<text>\nSolutions",
  "    i = 0\n    total = 0 \n    while i < length(lst) \n        if mod(lst.[i],\
    \ 3) == 0 || mod(lst.[i], 4) == 0 \n            total = total + lst.[i]\n    \
    \    else \n            total = total + lst.[i] * lst.[i]\n            total =\
    \ total + lst.[i] * lst.[i]\n        end\n        i = i+1\n    end\n    return\
    \ total\nend\n</cell>\n<code language=julia-1.1>\nsum_squares(lst)\n</cell>\n\
    <text>\nQuestion 7: Square numbers from 1 to 10", "    if !length(lst) \n    \
    \    return 0 \n    else \n        sum = 0\n        for i in lst \n          \
    \  sum = sum + i^2\n        end\n        return sum\n    end\nend", "    \"\"\"\
    \n    Sum all elements in a list of integers\n    \n    Args:\n        lst (Vector):\
    \ Vector with integers\n    \n    Returns:\n        Int64: sum of all integers\
    \ in lst\n    \"\"\"\n    sum_ = 0\n    for index in range(length(lst))\n    \
    \    if index%3 == 0\n            sum_ += lst[index]^2\n        elseif index%4\
    \ == 0\n            sum_ += lst[index]^3\n        else\n            sum_ += lst[index]\n\
    \        end\n    end\n    return sum_\nend", "    for i in 1:length(lst)\n  \
    \      if mod(lst[i], 3) == 0 || mod(lst[i], 4) == 0\n            lst[i] = lst[i]^2\
    \ \n        end\n    end\n    return sum(lst)\nend\n</cell>\n<code language=julia-0.6>\n\
    lst = [1, 2, 3, -1, -5, 2, -1, -5]\nsum_squares(lst)\n</cell>\n<code language=julia-0.6>\n\
    @time sum_squares(lst)\n</cell>\n<text>\nThe end keyword allows a function to\
    \ complete its work, even if it encounters any kind of error. Otherwise, the function\
    \ would just throw a generic error and continue to process the rest of the function.",
  "    sum = 0\n    for element in lst\n        if element % 3 == 0 || element % 4\
    \ == 0\n            element = element ^ 3\n            element = element ^ 4\n\
    \        end\n        sum = sum + element\n    end\n    return sum\nend\n</cell>\n\
    <code language=julia-1.6>\nsum_squares(lst)\n</cell>\n<text>\nPart III: Functions",
  "    sum = 0\n    for elt in lst\n        if elt % 3 == 0 || elt % 4 == 0\n    \
    \        elt * elt\n        else\n            elt * elt * elt\n        end\n \
    \       sum += elt\n    end\n    return sum\nend", "    # Your code here\nend\n\
    </cell>\n<code language=julia-1.3>\nsum_squares(lst, 10) # Test your function\
    \ here.\n</cell>\n<text>\nTask 3\nWrite a function that takes a vector of integers\
    \ lst, and returns the vector of squares according to the function above. ", " \
    \   if length(lst) == 0\n        return 0\n    elseif length(lst) == 1\n     \
    \   return lst[1]^2\n    elseif mod(lst[1], 3) == 0\n        return lst[1]^3\n\
    \    elseif mod(lst[1], 4) == 0\n        return lst[1]^4\n    else\n        return\
    \ lst[1]^3 + sum(lst[2:end])\n    end\nend", "    lst.map(x -> if x % 3 == 0 then\
    \ x * x else x * x * x end).reduce(:+) \nend\n</cell>\n<text>\n3.6 Exercise\n\
    Write a function called squared_sum that returns the sum of squared entries in\
    \ the given array of integers. Use map and reduce to achieve this goal", "   \
    \ for i in lst\n        if i%3==0 && i%4==0\n            lst[i] = i*i\n      \
    \  elseif i%3==0\n            lst[i] = i*i\n        elseif i%4==0\n          \
    \  lst[i] = i*i\n        else \n            lst[i] = 0\n        end\n    end\n\
    \    \n    sum = 0\n    for i in lst\n        sum = sum + i\n    end\n    return\
    \ sum\nend\n\"\"\"\nThis function will take a vector of integers. For all entries\
    \ in the vector, the function shall take the absolute value of the \ninteger entry\
    \ and will then sum all the entries. The function will not change the entries\
    \ in the vector whose indexes are not \na multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n   \
    \ [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\
    \"\"", "    for i in lst \n        if i%3==0 || i%4==0 \n            continue\
    \ \n        else \n            i+=i*i\n        end \n    end \n    return sum(lst)\
    \ \nend \n</cell>\n<cell>\n@testset \"sum_of_squared_numbers\" begin\n    lst\
    \ = [1, 2, 3]\n    @test sum_squares(lst) == 27\n    @test sum_squares(Vector{Int64}([]))\
    \ == 0  \n    @test sum_squares([-1, -5, 2, -1, -5]) == 27\nend \n</cell>\n<text>\n\
    Section 3.2. List comprehensions\nThe function below takes one argument which\
    \ shall be a vector of integers. It will then square the integers and add the\
    \ squared entries to a new vector called lstsq:", "    \n    sum = 0\n    for\
    \ i in 1:length(lst)\n        if ismultipleofthree(i)\n            lst[i] = lst[i]\
    \ * lst[i]\n            sum += lst[i]\n        elseif ismultipleoffour(i)\n  \
    \          lst[i] = lst[i] * lst[i]\n            sum += lst[i]\n        else\n\
    \            sum += lst[i]\n        end\n    end\n    \n    return sum\nend",
  "    return sum(map(lambda x: x*x, lst))\n</code>\n<|/ q |>\n<| c |>\nPlease don't\
    \ post images of code. Instead, post the code as text. You can format it with\
    \ the `{}` toolbar button (above the text entry area), or just indent with four\
    \ spaces. For more information about how to format code, see [Markdown help -\
    \ Code and Preformatted Text](https://stackoverflow.com/editing-help).\n<|/ c\
    \ |>\n<| c |>\nThank you for that! I wasn't sure how to indent it properly and\
    \ thought the images might help you see what I was talking about. Will definitely\
    \ take more care in the future. Thanks again!\n<|/ c |>\n<| a tags=vector,function,sum,square,julia\
    \ |>\nHere is an approach:\n<code>", "    return sum([i*i for i in lst])\nend\n\
    </cell>\n<code language=julia-1.0>\nsum_squares(lst)\n</cell>\n<text>\nExercise\
    \ 10\nWrite a function that will take a list of integers and return the sum of\
    \ all odd elements in the list.", "    for x in lst\n        if mod(x,3)==0 ||\
    \ mod(x,4)==0\n            x=x*x\n        else\n            x=x*x\n        end\n\
    \    end\n    sum(lst)\nend\n</cell>\n<code language=julia-1.5>\n@testset \"Sum\
    \ Squares\" begin \n    lst = Vector{Int64}[1,2,3]\n    @test sum_squares(lst)\
    \ == 9\n    @test sum_squares([1,4,3]) == 18\n    @test sum_squares([0,4,3]) ==\
    \ 0\n    @test sum_squares([0,4,0]) == 4\n    @test sum_squares([0,0,0]) == 0\n\
    \    @test sum_squares([-5,-5,-5]) == -25\n    @test sum_squares([5,-5,-5]) ==\
    \ 25\n    @test sum_squares([-5,-5,5]) == -5\n    @test sum_squares([5,-5,5])\
    \ == 5\nend\n</cell>\n<text>\nExercise 10\nWrite a function that takes as input\
    \ a vector of integers and outputs the average of all entries in the vector. ",
  "    if lst.empty() \n        return 0 \n    elseif lst.head % 3 == 0 && lst.head\
    \ % 4 == 0 \n        return lst.head \n    elseif lst.head % 3 == 0 || lst.head\
    \ % 4 == 0 \n        return sum(lst.tail) \n    end\nend\n</cell>\n<code language=julia-1.0>",
  "    for i in lst\n        if mod(i, 3) == 0\n            lst = lst + [i] * i\n\
    \            return sum(lst)\n        elseif mod(i, 4) == 0\n            lst =\
    \ lst + [i] * i\n            return sum(lst)\n        end\n    end\nend\n</cell>\n\
    <text>\nExercises:\nUse the function sum_multiples_of() above to find the sum\
    \ of all the integers in the following lists:", "    sum = 0\n    for i in 1:length(lst)\n\
    \        if mod(lst, 3) == 0 \n            sum += lst[i]*lst[i]\n        elseif\
    \ mod(lst, 4) == 0\n            sum += lst[i]*lst[i]\n        else\n         \
    \   sum += lst[i]\n        end\n    end\n    \n    return sum\nend\n</cell>\n\
    <code language=julia-1.5>\n@time sum_squares(lst)\n</cell>\n<text>\nNow lets go\
    \ ahead and define our next function!", "    \"\"\"\n    Calculate the sum of\
    \ the squares of the integers in the list. \n    \n    Example:\n    >>> lst =\
    \ [1, 2, 3]\n    >>> sum_squares(lst)\n    25\n    \"\"\"\n    return sum([i*i\
    \ for i in lst]) + sum(lst[i] for i in 1:length(lst))", "    sum_ = 0\n    for\
    \ i in lst\n        if i%3 == 0\n            sum_ += i^2 \n        elseif i%4\
    \ == 0\n            sum_ += i^3\n        else\n            sum_ += i\n       \
    \ end\n    end\n    return sum_\nend\n</cell>\n<code language=julia-1.1>\n\"\"\
    \"", "    \"\"\"\n    Square the entries in the vector if they are a multiple\
    \ of 3 and cube the entries in the vector if they are a multiple of 4 and not\
    \ a multiple of 3.\n    \n    Examples:\n    >>> lst\n    [1, 2, 3]\n    >>> lst\n\
    \    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"", "    #!\n    #!\n\
    \    #! INPUT \n    #!\n    #!  lst - the vector of integers\n    #!\n    #! \n\
    \    #! OUTPUT\n    #!\n    #!  sum_squares(lst - the vector of integers) - the\
    \ sum of all integer squares in the vector\n    #! \n    #! EXAMPLE\n    #!\n\
    \    #! See the accompanying cell for a concrete example using lst. \n    #!\n\
    \    #!\n    #! HINTS\n    #!\n    #! You'll notice that you'll need to modify\
    \ this function if the set of indexes for your input vector changes.\n    #!\n\
    \    #! To see why this is so, consider what happens in the following scenario.\n\
    \    #! \n    #! If your set of indexes are 1, 2, and 3, then you see that this\
    \ function will square the integer at index 1 and cube the \n    #! integer at\
    \ index 3. That is because index 1 is a multiple of 3 and index 3 is a multiple\
    \ of 4. The function will thus \n    #! return the sum of 1 and 3.\n    #!\n \
    \   #! The same scenario holds true for when your set is 4, 5 and 6. You see that\
    \ this function will square the integer at index \n    #! 4 and cube the integer\
    \ at index 5. That is because index 4 is a multiple of 3 and index 5 is a multiple\
    \ of 4. The function will \n    #! thus return the sum of 4 and 5.\n    #!\n \
    \   #! You will notice that this function doesn't just look at the set of indexes\
    \ for the vector. \n    #! It will also look at the values of the integer entries\
    \ in the vector. \n    #!\n    #! Therefore, if your vector is [1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10], the function will not just look at the indexes for the vector\
    \ \n    #! and will also look at the values of entries 1, 2 and 3 in the vector\
    \ and values of entries 4, 5, 6 in the vector and values \n    #! of entries 7,\
    \ 8 and 9 in the vector and values of entries 10 in the vector.\n    #!\n    #!\
    \ HINT\n    #!\n    #! In the case of lst that I've listed above, the function\
    \ would return 55 since 1 + 5 + 5 + 3 = 55. \n    #! \n    #! HINT\n    #!\n \
    \   #! You will notice that this function doesn't just look at the set of indexes\
    \ for the vector. \n    #! It will also look at the values of the integer entries\
    \ in the vector. \n    #!\n    #! Therefore, if your vector is [1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10], the function will not just look at the indexes for the vector\
    \ \n    #! and will also look at the values of entries 1, 2 and 3 in the vector\
    \ and values of entries 4, 5, 6 in the vector and values \n    #! of entries 7,\
    \ 8 and 9 in the vector and values of entries 10 in the vector.\n    #!\n    #!\
    \ HINT", "    sum = 0\n    for i in lst\n        if i % 3 == 0 || i % 4 == 0\n\
    \            sum += i\n        end\n    end\n    return sum\nend\n</cell>\n<code\
    \ language=julia-1.5>\nsum_squares(lst)\n</cell>\n<code language=julia-1.5>",
  "    for i in 0:length(lst)\n        if ((i%3 == 0) || (i%4 == 0)) \n          \
    \  lst[i] ^= i\n        else \n            lst[i] ^= (i*i)\n        end\n    end\n\
    \    return sum(lst)\nend", "    \"\"\"\n    This function will take a vector\
    \ of integers. For all entries in the vector, the function shall square the integer\
    \ entry if its index is a \n    multiple of 3 and will cube the integer entry\
    \ if its index is a multiple of 4 and not a multiple of 3. The function will not\
    \ \n    change the entries in the vector whose indexes are not a multiple of 3\
    \ or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n\
    \    >>> lst\n    [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2,\
    \ -1, -5]\n    \"\"\"\n    return sum([i*i for i in lst]) # sum returns a value\
    \ of type Int64. Scalar values can be cast to integer as well.\nend\n</cell>\n\
    <code language=julia-1.0>\nsum_squares(lst)\n</cell>\n<text>\nExercise\nWrite\
    \ a function that takes a vector of integer and returns a vector of squares\n\
    Write a function that takes a vector of integer and returns a vector of cubes\n\
    Write a function that takes a vector of integer and returns a vector of sums of\
    \ squares and cubes\nWrite a function that takes a vector of integer and returns\
    \ a vector of factorials", "    return reduce(+, map(x -> x^2, lst))\nend", " \
    \   # Write your code here\n    return sum((lst[index] % 3 == 0) ? lst[index]:lst[index]^3\
    \ for index in indices(lst))", "    sum = 0\n    for i in lst\n        if i%3\
    \ == 0 && i%4 == 0\n            sum = sum + i\n        elseif i%3 == 0\n     \
    \       sum = sum + i\n        elseif i%4 == 0\n            sum = sum + i\n  \
    \      else\n            sum = sum + i\n        end\n    end\n    return sum\n\
    end\n</cell>\n<text>\nQuestion 13. Write a function which takes a vector of integers\
    \ and an integer n. For all entries in the vector \n    if the integer n is greater\
    \ than or equal to the index of this entry it shall be appended to the vector\
    \ and if the integer n is \n    less than the index of this entry it shall be\
    \ appended the vector in reverse order. \n    \n    Examples:\n    >>> lst\n \
    \   [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    >>> lst\n    []\n    >>> lst\n    [-1,\
    \ -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5, -1, -5, 2, -1, -5]\n  \
    \  >>> lst\n    [-1, -5, 2, -1, -5, -1, -5, 2, -1, -5]\n    >>> lst\n    [-1,\
    \ -5, 2, -1, -5, -1, -5, 2, -1, -5, -1, -5, 2, -1, -5]\n    >>> lst\n    [-1,\
    \ -5, 2, -1, -5, -1, -5, 2, -1, -5, -1, -5, 2, -1, -5, -1, -5, 2, -1, -5]\n  \
    \  \"\"\"", "    for i in lst\n        if i%3 == 0 && i%4!=0\n            i =\
    \ i*i\n        else\n            i = i*i*i\n        end\n    end\n    return sum(lst)\n\
    end", "    # Write your code here\n    return 0\nend \n</code>\nFor your exercises\
    \ you should think about what the function should do. For the function above it\
    \ looks like this:\n<code>\nsum_squares([-1, -5, 2, -1, -5]) == -2\n</code>\n\
    <|/ a dscore=2 |>\n<| a |>\nHere is a simple way of doing this using if statements:\n\
    <code>", "    sum = 0\n    for elem in lst\n        if ismultiple(elem, 3)\n \
    \           sum += elem*elem\n        elseif ismultiple(elem, 4)\n           \
    \ sum += elem*elem\n        else\n            sum += elem\n        end\n    end\n\
    \    return sum\nend\n</cell>\n<text>\nExercise 2: Create and test the function\
    \ sum_squares_reversed. This function will take an integer vector and return the\
    \ sum of the square of each\n    integer in the vector.", "    for i in lst\n\
    \        if i%3 == 0\n            lst[i] = i*i\n        elseif i%4 == 0\n    \
    \        lst[i] = i*i*i\n        else\n            lst[i] = i*i*i\n        end\n\
    \    end\n    return sum(lst)\nend", "    # Your code goes here\n    return 0\n\
    end", "    for i in lst\n        if i%3==0 || i%4==0 \n            return i^2\n\
    \        end\n    end\nend", "    \"\"\"\n    Vector{Int64} --> Int64\n    \n\
    \    Function will take a vector of integers. For all entries in the vector, the\
    \ function shall square the integer entry if its index is a \n    multiple of\
    \ 3 and will cube the integer entry if its index is a multiple of 4 and not a\
    \ multiple of 3. The function will not \n    change the entries in the vector\
    \ whose indexes are not a multiple of 3 or 4. The function shall then return the\
    \ sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1, 2, 3]\n    >>>\
    \ lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"\n    \n    if\
    \ length(lst)==0\n        return Int64(0)\n    end\n    \n    sum = 0\n    for\
    \ i in 1:length(lst)\n        if mod(i, 3)==0 || mod(i, 4)==0\n            sum\
    \ = sum + lst[i]\n        elseif mod(i, 3)==0\n            sum = sum + lst[i]*lst[i]\n\
    \        elseif mod(i, 4)==0\n            sum = sum + lst[i]*lst[i]*lst[i]\n \
    \       end\n    end\n    return sum\nend", "    \n    return sum((lst[index]\
    \ % 3 == 0 || lst[index] % 4 == 0)? lst[index] * lst[index] : lst[index] for index\
    \ = 1:length(lst))\n</code>\n<|/ q tags=haskell |>\n<| c |>\nPlease post your\
    \ code.\n<|/ c |>\n<| c |>\nPlease post the code you have written so far.\n<|/\
    \ c |>\n<| c |>\nHi, I have added the code that I have written, thank you.\n<|/\
    \ c |>\n<| c |>\nThe question is too broad.  What do you mean by \"vectors\"?\
    \  Are you talking about arrays, vectors, lists, etc.?  Please give us more details\
    \ so we can help you.  Also, you should probably show us what you've tried and\
    \ why it's not working.\n<|/ c |>\n<| c |>\nI mean vectors where the entries are\
    \ integers, for example: vector1 = [1, 2, 3, -1, -5, 8, 4]\n<|/ c |>\n<| a |>\n\
    You are not returning your result, so the function has no output. Try:\n<code>\n\
    sum_squares1 :: [Int64] -> Int64\nsum_squares1 lst = sum_squares(lst) -- You need\
    \ to add your output here\n</code>\nTo print your output, use putStrLn:\n<code>\n\
    main = do\n    putStrLn \"Input a list of integers: \" -- You need to print your\
    \ output here\n    input <- getLine\n    putStrLn $ \"The sum of the squares of\
    \ the entries of the list are: \" ++ show $ sum_squares1 [1..length(input)]\n\
    </code>\nOutput:\n<code>\nInput a list of integers: 1 2 3 -1 -5 -8 4\nThe sum\
    \ of the squares of the entries of the list are: 16\n</code>\n<|/ a tags=haskell\
    \ dscore=2 |>\n<| c |>\nthank you very much for your help, i will implement this\
    \ into my code\n<|/ c |>\n<| c |>\nHi, I have added some code that I have written\
    \ thank you.\n<|/ c |>\n<| c |>\nI have added my code to the bottom of the question\n\
    <|/ c |>\n<| c |>\nThank you, I have implemented your code, but when I run it\
    \ all I see is a blank space where I want the output to appear, I have added my\
    \ code to the bottom of the question\n<|/ c |>\n<| c |>\nI've edited my answer.\
    \ You are trying to print a list, use `putStrLn` instead.\n<|/ c |>\n<| a tag",
  "    for i in lst\n        if i%3 == 0\n            i = i*i\n        elseif i%4\
    \ == 0\n            i = i*i\n        else\n            i = i*i\n        end\n\
    \    end\n    return sum(lst)\nend", "    n1 = lst.take(2:end-1)\n    n2 = lst.take(1:end-1)\n\
    \    return sum(n1)*sum(n2)\nend", "    # sum = 0\n    for i in lst\n        if\
    \ i.mod(3) == 0 && i.mod(4) == 0\n            sum += i\n        else\n       \
    \     sum -= i\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    @test sum_squares([1,2,3]) == 24\n@test sum_squares([]) == 0\n@test sum_squares([-1,\
    \ -5, 2, -1, -5]) == 25\n</cell>\n<text>\n2.2.2 Write a function that will take\
    \ a vector of integers and return a vector of floats containing the squared entries\
    \ of the original vector. \n    The function shall ignore entries that are negative\
    \ and shall ignore entries that are not a multiple of 3 or 4.", "    sum=0\n \
    \   for i in lst\n        if i%3==0 && i%4!=0 || i%3!=0 && i%4==0\n        sum+=i\n\
    \        end\n    end\n    return sum\nend\n</code>\n<|/ q |>\n<| c |>\nHave you\
    \ tried anything yet?\n<|/ c |>\n<| c |>\nPlease don't add things like \"Solved\"\
    \ to your question title. [It's fine to accept an answer](https://stackoverflow.com/help/someone-answers),\
    \ but you can indicate this question is closed.\n<|/ c |>\n<| a dscore=2 tags=julia,arrays,function\
    \ |>\nLet's start with the obvious: why do we need a function at all? Well, there\
    \ are many ways to do this, such as \n<code>\njulia> reduce(+, filter(x -> x%3\
    \ == 0 || x%4 == 0, l))\n12\n</code>\nor\n<code>\njulia> sum(filter(x -> x%3 ==\
    \ 0 || x%4 == 0, l))\n12\n</code>\nor\n<code>\njulia> sum.(filter(x -> x%3 ==\
    \ 0 || x%4 == 0, l))\n12\n</code>\nbut note that there are other ways to do it\
    \ as well.\nSo why do we need a function? Because, if you have a lot of these\
    \ things, it is useful to have a function you can just pass in a variable or expression\
    \ and have Julia figure out how to do things for you. So, why is it useful? Because,\
    \ we can do things with functions we haven't seen before.\nSo what are we going\
    \ to do with that function? We just need a way of saying \"add up this thing\"\
    \ -- that's what a function is. So we need a function that says \"add up this\
    \ thing and that\". We can just write that like this:\n<code>\njulia> sum(filter(x->x%3==0\
    \ || x%4==0, l))\n12\n</code>\nBut we can also write it using an anonymous function:\n\
    <code>\njulia> sum.(filter(x->x%3==0 || x%4==0, l))\n12\n</code>\nWe can also\
    \ use anonymous functions inside sum to specify how we want the sum to work:\n\
    <code>\njulia> sum(x->x%3==0 || x%4==0, l)\n12\n</code>\n(The key point here is\
    \ that in sum(x->x%3==0 || x%4==0, l), x is a function that will apply to the\
    \ thing you want to sum. So if we say sum(somefunc), then somefunc will be applied\
    \ to each element of l before summing them).\nWe can also make that function generic\
    \ by wrapping it in ", "    \n        count = 0\n        for i = length(lst)-1\n\
    \            if lst[i] % 3 == 0 && lst[i] % 4 == 0\n                count = count\
    \ + lst[i]\n            else\n                lst[i] = count + lst[i]\n      \
    \      end\n        end\n        return sum(lst)\nend\n</cell>\n<code language=julia-1.3>\n\
    @assert sum_squares(1:3) == 9\n@assert sum_squares(1:5) == 30\n@assert sum_squares([1,2,3,4])\
    \ == 29\n@assert sum_squares([1,2,3,4,5]) == 40\n@assert sum_squares([1,2,3,4,5,6])\
    \ == 84\n@assert sum_squares([1,2,3,4,5,6,7]) == 124\n</cell>\n<text>\nExercise\
    \ 9: Vectors functions in Julia\nVectors are very powerful in Julia, and now let's\
    \ get to the more interesting stuff. As Julia is dynamically typed, the only constraint\
    \ is that the elements inside the vector must be of the same type. The type can\
    \ be specified by using the keyword type. Let's see an example:", "    \"\"\"\n\
    \    Compute the sum of squares of vector entries whose indexes are a multiple\
    \ of 3 or 4.\n    \n    Arguments\n    ---------\n    lst : vector of integers\n\
    \    \n    Returns\n    -------\n    sum of the squares of the entries of the\
    \ vector whose indexes are a multiple of 3 or 4\n    \"\"\"\n    \n    for i in\
    \ lst \n        if mod(i, 3) == 0\n            i = i * i\n        else \n    \
    \        i = i * i\n        end\n        \n    end\n    \n    for i in lst\n \
    \       if mod(i, 4) == 0\n            i = i * i\n        else \n            i\
    \ = i * i\n        end\n    end\n    \n    sum_of_squares = 0 \n    for i in lst\n\
    \        sum_of_squares += i\n    end\n    \n    return sum_of_squares\nend\n\
    </cell>\n<code language=julia-1.0>\nsum_squares(lst)\n</cell>\n<text>\n3. Recall\
    \ the definition of a factorial function, written below: ", "    for i in lst\
    \ \n        if i%3 == 0 \n            lst[i] = lst[i]**2\n        else \n    \
    \        lst[i] = lst[i]**3\n        end\n    end\n    for i in lst \n       \
    \ if i%4 == 0 \n            lst[i] = lst[i]**2\n        else \n            lst[i]\
    \ = lst[i]**4\n        end\n    end\n    return sum(lst)\nend\n    \n    \"\"\"\
    \n    This function will take a vector of integers. For all entries in the vector,\
    \ the function shall cube the integer entry if its index is a \n    multiple of\
    \ 4 and will cube the integer entry if its index is a multiple of 3. The function\
    \ will not change the entries in the vector \n    whose indexes are not a multiple\
    \ of 4. The function shall then return the sum of all entries. \n    \n    Examples:\n\
    \    >>> lst\n    [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2,\
    \ -1, -5]\n    \"\"\"", "    for element in lst\n        if element % 3 == 0 ||\
    \ element % 4 == 0\n            element *= element\n        else\n           \
    \ element *= element\n        end\n    end\n    return sum(lst)\nend", "    \"\
    \"\"\n    \"\"\"", "    sum = 0\n    \n    \n    for i in lst\n        if mod(i,\
    \ 3) == 0\n            sum=sum+i^2\n        elseif mod(i, 4) == 0\n          \
    \  sum=sum+i*i\n        else\n            sum=sum+i\n        end\n    end\n  \
    \  \n    return sum\nend", "    \n    for element in lst\n        if element %\
    \ 3 == 0 && element % 4 == 0\n            element *= element\n        else\n \
    \           element *= element \n        end\n    end\n    return sum(lst)\nend",
  "    if lst == []\n        0\n    else\n        sum(lst[modIndex(i, 3) for i in\
    \ lst])\n    end\nend\n</cell>\n<code language=julia-1.3>\nsum_squares([1,2,3,4])\n\
    </cell>\n<code language=julia-1.3>\nsum_squares([1,2,3,4])\n</cell>\n<code language=julia-1.3>\n\
    sum_squares([1,2,3,4])\n</cell>\n<text>\nExercise 11\nThe function below takes\
    \ a vector of the form $(x^{2},y^{2},z^{2})$ and returns the sum of all squared\
    \ values $\\sum{i=1}^{3}(x^{2}_i,y^{2}_i,z^{2}_i)$", "    if lst.size ==1\n  \
    \      lst[1]\n    else\n        sum = 0\n        for  i in lst\n            sum\
    \ += i*i\n        end\n        return sum\n    end\nend", "    sum = 0\n    for\
    \ i in lst \n        sum += i^2 \n    end\n    return sum\nend\n\"\"\"\n    Testing\
    \ the function\n\"\"\"", "    for i in 0..(length(lst)-1) \n        if i%3 ==\
    \ 0 && i%4 != 0 \n            lst[i] \n        else\n            lst[i]*lst[i]\
    \ \n        end\n    end\nend\nsum_squares(lst)\n</cell>\n<text>\nTask 10\nGiven\
    \ a vector of integers, create a function named lst_sums_sq which returns the\
    \ sum of all entries and their squares. \n    \n    Examples:\n    >>> lst\n \
    \   [1, 2, 3, 4, 5, 6]\n    >>> lst_sums_sq(lst)\n    (9, 49)\n    >>> lst\n \
    \   [1, 2, 3, 4, 5, 6]\n    >>> lst_sums_sq(lst)\n    (9, 49)\n    \"\"\"", " \
    \   sum(map(x -> x*x, lst)) \nend", "    summ = 0\n    for ii in lst \n      \
    \  if mod(ii,3)==0 || mod(ii,4)==0 \n            summ+=ii\n        else\n    \
    \        summ+=ii*ii\n        end\n    end\n    return summ\nend\n</code>\n<|/\
    \ q dscore=0 |>\n<| c |>\nWhat have you tried? Why didn't it work? What did you\
    \ expect to happen, and what happened instead?\n<|/ c |>\n<| c |>\nWhat exactly\
    \ did you try and why didn't it work? Please provide a [MCVE](https://stackoverflow.com/help/mcve)\n\
    <|/ c |>\n<| c |>\nThe code doesn't give an error message, just an `@unreachable`\
    \ warning. Also, this is an assignment and we are not allowed to use any packages\
    \ like NumPy, Pretty Tables, etc.\n<|/ c |>\n<| c |>\nI tried to do `sum_squares(my_list)`\
    \ but that didn't work\n<|/ c |>\n<| a dscore=1 |>\nOne of the solutions is using\
    \ map:\n<code>", "    # your code goes here\n    \nend\n</cell>\n<text>\n10.4",
  "\"\"\"\n    A function that will sum the square of the integers in the vector passed\
    \ as argument.\n    \n    Examples:\n    >>> lst\n    [1, 2, 3]\n    >>> sum_squares(lst)\n\
    \    25\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"",
  "    return sum(i for i in lst if i%4==0 or i%3==0) \nend", "    sum = 0\n    for\
    \ i in lst\n        if i%3 == 0 && i%4 != 0\n            sum += i*i\n        elseif\
    \ i%3 != 0 && i%4 == 0\n            sum += i*i\n        elseif i%3 == 0 && i%4\
    \ == 0\n            sum += i*i\n        end\n    end\n    return sum\nend", " \
    \   sum=0\n    for i in lst\n        if mod(i,3)==0\n            sum=sum+i^2\n\
    \        elseif mod(i,4)==0\n            sum=sum+i*i\n        end\n    end\n \
    \   return sum\nend\n</code>\n<|/ a tags=vector,julia |>\n<| a |>\nThe other answers\
    \ here are fine but can be very inefficient in practice. \nThe function you describe\
    \ is not actually a reduction because it does not reduce anything. Reduction is\
    \ done by computing the \"reduction\" function on the input and outputting a result\
    \ (a scalar). \nIn your example you are simply taking the sum and this is done\
    \ with a built-in function sum. \n<code>\njulia> v=[1,2,3]\n3-element Vector{Int64}:\n\
    \ 1\n 2\n 3", "    if length(lst) == 0 \n        return 0 \n    \n    sum = 0\
    \ \n    for x in lst \n        if x % 3 == 0 && x % 4 == 0 \n            sum+=x\
    \ \n        else \n            sum+=x*x \n    return sum \nend\n</cell>\n<code\
    \ language=julia-1.2>\n\"\"\"\n    sum_squares_1(lst::Vector{Int64})::Int64 \n\
    \    Same as sum_squares(lst, true). \n\"\"\"", "    \"\"\"\n    Function\n  \
    \  \"\"\"\n    return sum(i for i in lst if ismultipleof3(i))\n    ", "    \n\
    \    # Your code here\n    \n    return sum((i for i in lst if i%3==0 or i%4==0),\
    \ 0)\n    \nend\n</code>\n<|/ a |>\n<| a tags=julia,arrays dscore=0 |>\nUsing\
    \ a for comprehension would be more efficient:\n<code>", "    sum = 0\n    for\
    \ i in lst \n        if i % 3 == 0 \n            sum += i \n        elseif i %\
    \ 4 == 0 \n            sum *= i \n        else \n            continue \n    end\n\
    \    return sum\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\nThis function\
    \ will take a vector of integers. For all entries in the vector, the function\
    \ will return the number of divisors that will \nbe obtained by dividing the integer\
    \ entry by any of the integer entries in the vector. The function shall not change\
    \ the entries \nin the vector whose entries are not a divisors of the number entry\
    \ in the vector. The function shall then return the number of \ndivisors obtained\
    \ by dividing the entries in the vector by any of the entries in the vector. The\
    \ function shall return -1 if the \nnumber entry is not a divisor of any of the\
    \ entries in the vector. \n\"\"\"", "    for ele in lst \n        if mod(ele,3)\
    \ == 0\n            ele = ele * ele\n        elseif mod(ele,4) == 0\n        \
    \    ele = ele * ele\n        end\n    end\n    \n    return sum(lst)\nend\n</code>\n\
    And if you really want to be a little more efficient and vectorize the function\
    \ you can do this:\n<code>", "    sum = 0\n    for i in lst\n        if i%3 ==\
    \ 0 || i%4 == 0\n            sum += i\n        end\n    end\n    return sum\n\
    end", "    sum =0\n    for element in lst\n        if mod(element, 3)==0 && mod(element,\
    \ 4)==0\n            sum = sum + element\n        elseif mod(element, 3)==0 &&\
    \ mod(element, 4)!=0 \n            sum = sum + element * element\n        elseif\
    \ mod(element, 3)!=0 && mod(element, 4)==0 \n            sum = sum + element *\
    \ element\n        elseif mod(element, 3)!=0 && mod(element, 4)!=0 \n        \
    \    sum = sum + element * element * element\n        end\n    end\n    return\
    \ sum\nend\n</code>\n<|/ a |>\n<| c |>\nPlease reformat your answer, to make it\
    \ readable.\n<|/ c |>\n<| a |>\nI see that this is an old thread, but I wanted\
    \ to post this in case it helps anyone.\nYou could use the filter function along\
    \ with map:\n<code>", "    \"\"\"\n    This function will take a vector of integers.\
    \ For all entries in the vector, the function shall square the integer entry if\
    \ its index is a \n    multiple of 3 and will cube the integer entry if its index\
    \ is a multiple of 4 and not a multiple of 3. The function will not \n    change\
    \ the entries in the vector whose indexes are not a multiple of 3 or 4. The function\
    \ shall then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n\
    \    [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n  \
    \  \"\"\"\n</code>\n<|/ a tags=julia |>\n<| a dscore=1 tags=julia |>\nYou can\
    \ write a custom function for this:\n<code>", "    if lst.is_empty\n        return\
    \ zero\n    else\n        total = zero\n        for i = 1:length(lst)\n      \
    \      if mod(i, 3) == 0 || mod(i, 4) == 0\n                total += lst[i]^2\n\
    \            elseif mod(i, 3) != 0 || mod(i, 4) != 0\n                total +=\
    \ lst[i]^3\n            end\n        end\n        return total\n    end\nend\n\
    </code>\n<code>\nsum_squares(lst)\n</code>\n<|/ a tags=function,julia |>\n<| c\
    \ |>\nThank you for this answer, but it doesn't work. I get the following error:\n\
    MethodError: no method matching sum(::Int64)", "    res=0\n    for i in lst\n\
    \        if i%3==0 && i%4==0\n            res+=i^2\n        else\n           \
    \ res+=i*i\n        end\n    end\n    return res\nend\n\"\"\"\n    The function\
    \ will take a vector of integers. For all entries in the vector, the function\
    \ will add each integer entry to its index if the index is \n    not a multiple\
    \ of 3. The function will not change the entries in the vector whose indexes are\
    \ not a multiple of 3. The function shall then return the sum of all entries.\
    \ \n    \n    Examples:\n    >>> lst\n    [1, 2, 3]\n    >>> lst\n    []\n   \
    \ >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"", "    \n    # Write your code\
    \ here\n    return sum(lst.map(x -> if mod(x,3)==0\n                       x^2\n\
    \                       elseif mod(x,4)==0\n                       x*x\n     \
    \                  else\n                       x*(x^2))\n                \n \
    \               end)\n    \nend # end of sum_squares\n</code>\nThis should be\
    \ your solution to this problem. Let me know if you have troubles :)\n<|/ a dscore=1\
    \ |>\n<| c |>\nThis is really a great answer, and I learned some new things. I\
    \ ended up going with `sum(map(x -> x^2, filter(x -> mod(x,4)==0, lst)))` which\
    \ works great.\n<|/ c |>\n<| a |>\n<code>", "    sum = 0\n    for i \u2208 lst\
    \ \n        if i % 3 == 0  \n            sum += i * i\n        elseif i % 4 ==\
    \ 0\n            sum += i * i\n        else\n            sum += i\n        end\n\
    \    end\n    return sum\nend\n</cell>\n<code language=julia-0.5>\n\"\"\"\n  \
    \  sum_cubes(lst)", "    for x in lst\n        if (x%3 == 0)\n            lst[x]\
    \ = x^2\n        else\n            lst[x] = x*x\n    end\n    return sum(lst)\n\
    end\n</code>\n<|/ a dscore=2 |>\n<| a tags=julia,function dscore=1 |>\nThis was\
    \ discussed in another question. Since you're dealing with integers, here are\
    \ some ways to do it without using sum and map:\n<code>", "    sum_ = 0\n    for\
    \ i in lst\n        if i%3 == 0 || i%4 == 0\n            sum_ += i*i\n       \
    \ else\n            sum_ += i\n        end\n    end\n    return sum_\nend", " \
    \   \"\"\"\n    Takes a vector of integers and returns the sum of the squares\
    \ of all entries. \n    \"\"\"", "    \n    total = 0 \n    for x in lst\n   \
    \     total+=x if x % 3 == 0 || x % 4 == 0 else x*x\n    end\n    return total\n\
    end\n</cell>\n<cell>\n# Test case 1\nprintln(sum_squares([1,2,3,4,5,6,7,8,9]))\n\
    </cell>\n<cell>\n# Test case 2\nprintln(sum_squares([]))\n</cell>\n<cell>\n# Test\
    \ case 3\nprintln(sum_squares([-1,-5,2,-1,-5]))\n</cell>\n<text>\nThe sum function\
    \ is defined for all numeric types. In the case of Int64, we define the sum function\
    \ as follows", "    for i in lst\n        if i%3 == 0 || i%4 == 0\n          \
    \  lst[i] = i*i\n        elseif i%3 != 0 || i%4 != 0\n            lst[i] = i*i*i\n\
    \        end\n    end\n    return sum(lst)\nend", "    sum = 0\n    for x in lst\n\
    \        if x % 3 == 0\n            sum += x\n        elseif x % 4 == 0\n    \
    \        sum+= x\n        end\n    end\n    return sum\nend", "    for entry in\
    \ lst\n        if isMultiple(entry,3)\n            entry *= entry\n        elseif\
    \ isMultiple(entry,4)\n            entry *= entry*entry\n        else\n      \
    \      entry += entry\n        end\n    end\n    \n    sum(lst)\nend\n</code>\n\
    This function was written to be easily understandable and testable for new users.\
    \ To add new test cases, copy the function, append the test case to the function\
    \ and add the test case in the following function. \n<code>", "    sum = 0\n \
    \   for i in lst \n        if i%3 ==0 \n            sum = sum + i*i\n        elseif\
    \ i%4 ==0\n            sum = sum + i*i*i\n        else\n            sum = sum\
    \ + i\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-0.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-0.5>\nsum_squares([2,3,4])\n\
    </cell>\n<text>\nQuestion 9\nWrite a function which takes a matrix and returns\
    \ the sum of the column vectors.", "    \n    for i in lst\n        if i%3 ==\
    \ 0 || i%4 == 0\n            lst = lst .+ i*i\n        end\n    end\n    \n  \
    \  return reduce(+, lst)\nend \n</cell>\n<text>\nPart 3: Sum of all entries in\
    \ the vector\nNow that you have the basic structure for writing a function, you\
    \ can test out your function and see if it works as expected.", "    if length(lst)\
    \ == 0 \n        return 0 \n    \n    sum_so_far = 0\n    \n    for entry in lst\
    \ \n        if entry % 3 == 0 && entry % 4 == 0 \n            sum_so_far += entry\
    \ \n        else \n            sum_so_far *= entry \n        end\n    end\n  \
    \  \n    return sum_so_far \nend\n    \n\"\"\"\n    This function will take a\
    \ vector of integers. For all entries in the vector, the function shall cube the\
    \ integer entry if its index is a \n    multiple of 4 and will cube the integer\
    \ entry if its index is a multiple of 3. The function will not change the entries\
    \ in the vector whose indexes \n    are not a multiple of 3 or 4. The function\
    \ shall then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n\
    \    [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n  \
    \  \"\"\"", "    sum = 0\n    for i in lst \n        if i%3==0 || i%4==0\n   \
    \         sum = sum + i^2\n        end\n    end\n    return sum\nend \nsum_squares(lst)\n\
    </cell>\n<text>\nExercise 4.2\nWrite a function that takes a vector of integers\
    \ and returns a vector of integers that has the following property:", "    for\
    \ i in lst\n        if mod(i, 3) == 0\n            i = i * i\n        elseif mod(i,\
    \ 4) == 0\n            i = i * i\n        else\n            i = i * i\n      \
    \  end\n    end\n    return sum(lst)\nend\n</code>\n<|/ a |>\n<| c |>\nThat code\
    \ seems to be missing `i`, so I believe it is missing a loop.\n<|/ c |>\n<| c\
    \ |>\n`function sum_squares(lst::Vector{Int64})::Int64 \n    for i in lst\n  \
    \      if mod(i, 3) == 0\n            i = i * i\n        elseif mod(i, 4) == 0\n\
    \            i = i * i\n        else\n            i = i * i\n        end\n   \
    \ end\n    return sum(lst)\nend`\n<|/ c |>\n<| c |>\n: What is the output you\
    \ get?\n<|/ c |>\n<| c |>\nYou can't call `sum_squares(lst)` without changing\
    \ `lst`. The function doesn't return anything and your example shows `lst` being\
    \ modified in place by `sum_squares`, so there is no way to call `sum_squares`\
    \ on that modified `lst` without modifying the input `lst`. The only way to do\
    \ that is to call `sum_squares` on a copy of the input `lst`, e.g. by doing `sum_squares(copy(lst))`.\n\
    <|/ c |>\n<| c |>\n, you are right. I fixed it.\n<|/ c |>\n<| a dscore=2 |>\n\
    This is a version that avoids the mutability of lists. \n<code>", "    # write\
    \ your code here\n    sum = 0\n    for index in lst.index\n        if index%3\
    \ == 0\n            sum+=index\n        elseif index%4 == 0\n            sum+=index\n\
    \        else \n            sum+=index*index\n        end\n    end\n    return\
    \ sum\nend ", "    for (i,e) in enumerate(lst)\n        if i%3 == 0 && i%4 !=\
    \ 0\n            lst[i] = e * e\n        else if i%4 == 0\n            lst[i]\
    \ = e * e\n        end\n    end\n    return sum(lst)\nend\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes in a vector of integers and returns a vector\
    \ of all even numbers. The function shall not change the original vector. \n \
    \   \n    Examples:\n    >>> lst\n    [1, 2, 3]\n    >>> lst\n    [1, 2, 3]\n\
    \    >>> lst\n    []\n    \"\"\"", "    \n    sum = 0\n    for i in lst\n    \
    \    if mod(i, 3) == 0\n            sum += i^2\n        else if mod(i, 4) == 0\n\
    \            sum += i*i\n        end\n    end\n    \n    return sum\nend", " \
    \   for i in lst\n        if i%3==0 || i%4==0\n            if i%3==0\n       \
    \         lst[i] = i*i\n            elseif i%4==0\n                lst[i] = i*i*i\n\
    \            else\n                lst[i] = i*i*i*i\n            end\n       \
    \ end\n    end\n    return sum(lst)\nend\n</code>\n<|/ q |>\n<| c |>\nPlease provide\
    \ the code you have tried and what is not working as expected.\n<|/ c |>\n<| c\
    \ |>\nI have not tried anything yet. I am not sure how to go about it. All I know\
    \ how to do is get the length of the vector\n<|/ c |>\n<| c |>\n`length(lst)`\
    \ will do that. Also [this](https://julialang.org/docs/stable/base/arrays/#Base.len)\
    \ will tell you more about `len`\n<|/ c |>\n<| a |>\nA simple one-liner would\
    \ be using .@and.\n<code>\njulia> a = [1, 2, 3, 4]\n4-element Array{Int64,1}:\n\
    \ 1\n 2\n 3\n 4", "    \"\"\"\n    \"\"\"\nend", "    \n    # your code here\n\
    \    \nend\n</cell>\n<text>\n5.4 Exercise 4\nWrite a function called sum_cubed\
    \ that takes a vector of integers. For all entries in the vector, the function\
    \ shall cube the integer entry if its index is a \n    multiple of 3 and will\
    \ square if the integer entry is a multiple of 4. The function will not change\
    \ the entries in the vector \n    whose indexes are not a multiple of 3 or 4.\
    \ The function shall then return the sum of all entries. \n    \n    Examples:\n\
    \    >>> lst\n    [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2,\
    \ -1, -5]\n    \"\"\"", "    sum(i -> i%3 == 0, lst)\nend", "    sum = 0\n   \
    \ for i in lst\n        if i%3 == 0 && i != 0\n            sum += i\n        elseif\
    \ i%4 == 0 && i != 0\n            sum += i*i\n        end\n    end\n    return\
    \ sum\nend\n</cell>\n<text>\nExercise 4:\nWrite a function that takes a vector\
    \ of integers as input and returns a vector of integers containing only the even\
    \ numbers. To do this, make sure that the function does not change the input vector.",
  "\"\"\"\n    This function will take a vector of integers. For all entries in the\
    \ vector, the function shall square the integer entry if its index is a \n   \
    \ multiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \n    change the entries in\
    \ the vector whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1, 2,\
    \ 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"",
  "    sum = 0\n    for n in lst\n        if n % 3 == 0\n            sum+ = n\n  \
    \      elseif n % 4 == 0\n            sum+=n\n        end\n    end\n    return\
    \ sum\nend\n</code>\n<|/ q dscore=0 |>\n<| c |>\nCan you give us the error message\
    \ you are getting?\n<|/ c |>\n<| c |>\nHow are you running the function `sum_squares`?\
    \ I get the error `UndefRefError: sum not defined` when I run `sum_squares([1,2,3])`.\n\
    <|/ c |>\n<| c |>\nThe error message is just UndefRefError: sum not defined. The\
    \ function runs correctly until sum_squares([1,2,3]) where an error occurs.\n\
    <|/ c |>\n<| c |>\nI guess you have a typo, `sum_squares(lst::Vector{Int64})::Int64\
    \ ` should be `sum_squares(lst::Vector{Int})::Int64 `. Then your code should work\
    \ as expected. Btw, your function does not work correctly if `lst` is empty.\n\
    <|/ c |>\n<| a dscore=1 |>\nThe error is UndefRefError: sum not defined. sum should\
    \ be defined in the function sum_squares, but it is not. See the definition of\
    \ the function sum_squares\n<code>", "    for i in lst\n        if i%3 == 0 ||\
    \ i%4 == 0 \n            lst[i] = i*i\n        end\n    end\n    return sum(lst)\n\
    end\n</cell>\n<code language=julia-0.5>\nsum_squares(lst)\n</cell>\n<text>\nQuestion\
    \ 3\nWrite a function called sum_decrease_positive(lst) that returns the sum of\
    \ all entries in the list that have decreased in value from negative infinity\
    \ to positive infinity. The function shall not change the entries in the list\
    \ whose values are already positive.", "    if lst.is_empty\n        return 0\n\
    \    elseif length(lst) == 3\n        return lst[2]*lst[2] + lst[1]*lst[1]\n \
    \   elseif length(lst) == 4\n        return lst[2]*lst[2] + lst[1]*lst[1] + lst[0]*lst[0]\n\
    \    end\n    return 0\nend\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ takes a vector of integers and returns the sum of the absolute values of all\
    \ entries in the vector. \nExamples:\n>>> lst\n[10, 9, 4]\n>>> sum_values(lst)\n\
    27\n>>> lst\n[]\n>>> sum_values(lst)\n0", "    sum = 0\n    for i in 0 :: length(lst)-1\
    \ do \n        if i%3 == 0\n            sum += lst[i]\n        elseif i%4 == 0\n\
    \            sum += lst[i]*lst[i]\n        else\n            sum += lst[i]*lst[i]*lst[i]\n\
    \        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.0>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.0>\nsum_squares([1,2,3,4,5,6])\n\
    </cell>\n<text>\nExercise 6\nWrite a Julia function that takes in a vector of\
    \ integers and returns the minimum of the vector, i.e. the entry with the lowest\
    \ integer. This function shall not change the entries in the vector and shall\
    \ only return the first entry of the vector if more than one entry is in the vector.\
    \ \nExamples:", "    \n    sum = 0\n    for index in 1:length(lst)\n        if\
    \ isMultipleOf(index,3)\n            sum = (sum + lst[index]^2)\n        elseif\
    \ isMultipleOf(index,4)\n            sum = (sum + lst[index]^3)\n        else\n\
    \            sum = sum + lst[index]\n        end\n    end\n    \n    return sum\n\
    end", "    if lst.len == 0\n        return 0\n    \n    i = 4\n    \n    while\
    \ i <: lst.len\n        if lst[i] % 3 == 0 || lst[i] % 4 == 0\n            lst[i]\
    \ *= lst[i]\n        end\n        i += 1\n    end\n    \n    sum(lst)\nend", " \
    \   sum_ = 0\n    for idx1i in lst \n        if idx1i%3 == 0\n            sum_\
    \ += idx1i^2\n        elseif idx1i%4 == 0\n            sum_ += idx1i^3\n     \
    \   else\n            sum_ += idx1i\n        end\n    end\n    return sum_\nend\n\
    </cell>\n<code language=julia-0.5>\nlst = Vector{Int64}([-1, -5, 2, -1, -5])\n\
    sum_squares(lst)\n</cell>\n<code language=julia-0.5>", "    sum = 0\n    for i\
    \ in lst\n        if ((i % 3 == 0) || (i % 4 == 0)) # or if i is a multiple of\
    \ 3\n            sum += i*i\n        end\n    end\n    return sum\nend", '    return
    Int64(0)', "    if length(lst) == 0 \n        return 0 \n    else \n        for\
    \ i in lst \n            if i % 3 == 0 || i % 4 == 0 \n                lst[i]\
    \ = i * i \n            end \n            sum += lst[i] \n        end \n     \
    \   return sum \n    end \nend ", "    total = 0\n    for val in lst \n      \
    \  if val % 3 == 0\n            total += val^2\n        else if val % 4 == 0\n\
    \            total += val^3\n        else\n            total += val\n    end\n\
    \    return total\nend", "    if lst == []\n        return 0\n    end\n    sum\
    \ = 0\n    for idx in eachindex(lst)\n        if idx % 3 == 0 && idx % 4 == 0\n\
    \            sum::Int64 += idx\n        elseif idx % 3 == 0\n            sum::Int64\
    \ += idx^2\n        elseif idx % 4 == 0\n            sum::Int64 += idx^3\n   \
    \     else\n            sum::Int64 += idx\n        end\n    end\n    return sum\n\
    end\n</cell>\n<cell>\nsum_squares(lst)\n</cell>\n<text>\n10.6 Write a function,\
    \ is_palindrome(x) that takes in a vector of integers and returns True if the\
    \ vector is a palindrome and False if it is not a palindrome. An empty vector\
    \ returns False.", "    for i in lst \n        if ((i%3 == 0) || (i%4 == 0)) \n\
    \            lst[i] = i * i \n        else \n            lst[i] = i * i \n   \
    \ end\n    return sum(lst)\nend", "    \n    for i in 1:length(lst)\n        lst[i]\
    \ = sq(lst[i])\n    end\n    \n    return sum(lst)\nend\n</code>\n<|/ a dscore=1\
    \ |>\n<| c |>\nThanks, that helped me to understand the error in the code I was\
    \ trying to write and also the concept of Vectors, thanks.\n<|/ c |>\n<| a dscore=0\
    \ tags=julia,function,list |>\nHere's another way:\n<code>\njulia> function foo()\n\
    \           sum = 0\n           for i in 1:length(lst)\n               if i %\
    \ 3 == 0 || i % 4 == 0\n                  sum = sum + lst[i]\n               end\n\
    \           end\n           return sum\n       end\nfoo (generic function with\
    \ 1 method)", "    sum =0\n    for i in lst\n        if i%3==0 && i%4!=0 \n  \
    \          sum+=i*i\n        else \n            sum+=i\n    end\n    return sum\n\
    end\n</code>\n<|/ a tags=julia,for-loop,functional-programming |>\n<| c |>\nNote\
    \ that this will not handle the special case of the empty list.  In that case,\
    \ there is no \"special case\".  Instead, this handles the special case of an\
    \ empty list by just returning 0.\n<|/ c |>\n<| a dscore=2 |>\nHere is my attempt:\n\
    <code>", "    if lst==[]\n        0\n    else\n        for i in 0:(length(lst)-1)\n\
    \            if mod(lst[i], 3)==0 || mod(lst[i], 4)==0\n                lst[i]^2\n\
    \            else\n                lst[i]^3\n            end\n        end\n  \
    \  end\nend\n</cell>\n<text>\nProblem 10 (10 points): Write a function to generate\
    \ all permutations from the given string.\nThe function shall return the permutations\
    \ as a vector of strings.", "    \"\"\"\n    sum_squares(lst)", "    if length(lst)\
    \ == 0\n        return 0\n    end\n    sum_so_far = 0\n    for entry in lst\n\
    \        if entry % 3 == 0\n            sum_so_far = sum_so_far + entry\n    \
    \    elseif entry % 4 == 0\n            sum_so_far = sum_so_far + entry\n    \
    \    else\n            sum_so_far = sum_so_far + entry * entry\n        end\n\
    \    end\n    return sum_so_far\nend\n</cell>\n<text>\nExercise 3: Write a function\
    \ called max_squares that takes vector of integers and returns the maximum square\
    \ of all entries in the vector. \n    If there is a tie (i.e. there are multiple\
    \ entries with the maximum square value), then choose the first entry in the tie.\n\
    \    \n    Examples:\n    >>> lst\n    [1, 2, 3]\n    >>> lst\n    []\n    >>>\
    \ lst\n    [-1, -5, 2, -1, -5]\n    >>> max_squares(lst)\n    25\n    >>> max_squares([])\n\
    \    0\n    \"\"\"", "    if length(lst) == 0\n        return 0 \n    \n    lst\
    \ = sort!(lst)\n    \n    square_sum = 0\n    \n    for i in 1:length(lst)\n \
    \       if i % 3 == 0 && i % 4 == 0\n            square_sum *= lst[i]\n      \
    \  end\n    end\n    \n    return square_sum\nend\n</cell>\n<text>\n3.2 Exercise:\
    \ Implement the function", "    \n    sum = 0\n    for i in 1:length(lst)\n  \
    \      if ((i %% 3) == 0)\n            sum += lst[i]\n        else\n         \
    \   sum += lst[i]*lst[i]\n        end\n    end\n    return sum\nend\n</cell>\n\
    <text>\nVectors are highly optimized for doing element wise operations.", "  \
    \  if length(lst) == 0 || length(lst) == 1 \n        return 0\n    end\n    sq\
    \ = 0\n    for element in lst\n        if element % 3 == 0 && element % 4 == 0\
    \ \n            sq += element\n        else\n            sq += element*element\n\
    \        end\n    end\n    return sq\nend\n</cell>\n<code language=julia-1.6>\n\
    lst = Array{Int64}([1, 2, 3])\nsum_squares(lst)\n</cell>\n<code language=julia-1.6>\n\
    @code_native sum_squares(lst)\n</cell>\n<code language=julia-1.6>\n@code_native\
    \ sum_squares(Array{Int64}([]))\n</cell>\n<code language=julia-1.6>\n@code_native\
    \ sum_squares(Array{Int64}([-1, -5, 2, -1, -5]))\n</cell>\n<code language=julia-1.6>\n\
    @code_native sum_squares(Array{Int64}([4, -5, 2, 3, 1]))\n</cell>\n<code language=julia-1.6>\n\
    @code_native sum_squares(Array{Int64}([4, -5, 2, 3, 1, 2, 3]))\n</cell>\n<text>\n\
    Exercise 3\nImplement the sum_squares(lst) function in Julia using the map function.\
    \ The map function applies a function to all entries of a vector. \n    \n   \
    \ Examples:\n    >>> lst = [1, 2, 3]\n    >>> map(sum_squares, lst)\n    [1, 4,\
    \ 9]\n    >>> lst = Array{Int64}([4, -5, 2, 3, 1])\n    >>> map(sum_squares, lst)\n\
    \    [1, 4, 9, 41]\n    >>> lst = Array{Int64}([4, -5, 2, 3, 1, 2, 3])\n    >>>\
    \ map(sum_squares, lst)\n    [1, 4, 9, 41, 81, 73, 91, 59]\n    \"\"\"", "   \
    \ for i in inds(lst) \n        if mod(i, 2) == 0 || mod(i, 4) == 0 \n        \
    \    lst[i] = lst[i] * lst[i]\n        else \n            lst[i] = lst[i] * lst[i]\
    \ * lst[i]\n        end\n    end\n    return sum(lst)\nend\n</cell>\n<code language=julia-1.5>",
  "    \"\"\"Sum all square entries in lst \"\"\"\n    count = 0\n    for i in lst\n\
    \        if ismultiple(3, i)\n            count += 1\n        elseif ismultiple(4,\
    \ i)\n            count += 1\n        else\n            count += 1\n    end\n\
    \    return count\nend", "    \"\"\"\n    \n    \n    \"\"\"\n    return sum(lst[x\
    \ % 3 == 0 || x % 4 == 0 ? (x : x + 3)^2 for x = 1:length(lst)])\nend", "    sum\
    \ = 0.0\n    for x in lst\n        if mod(x, 3) == 0\n            sum+= x*x\n\
    \        elseif mod(x, 4) == 0\n            sum+= x*x*x\n        else\n      \
    \      sum+= x\n        end\n    end\n    return sum\nend", "    ans = 0\n   \
    \ for i in lst \n        if i%3 == 0 || i%4 == 0\n            ans += i^2\n   \
    \     else\n            ans += i\n        end\n    end\n    return ans\nend\n\
    </cell>\n<text>\nQuestion 9\nFor a given list, determine how many consecutive\
    \ entries are equal and how many are different.", "    \n    # Your code here\n\
    \    \n    return sum(x^2) for x in lst\nend\n</cell>\n<text>\nQuestion 3\nWrite\
    \ a function that takes one vector and the length of the vector. Your function\
    \ should then iterate over the length of the vector and call the function sum_cube\
    \ with the corresponding index.", "  lst = lst.filter(x->mod(x,3)==0 || mod(x,4)==0).map(x\
    \ -> x*x)\n  return(reduce(add,lst))\nend", "    for i in lst\n        if mod(i,\
    \ 3)==0 || mod(i, 4)==0\n            lst[i] = i*i\n        end\n    end\n    return\
    \ sum(lst)\nend\n</cell>\n<code language=julia-1.5>\nsum_squares(lst, 0)\n</cell>\n\
    <text>\n4.3 Exercises", "    \"\"\"\n    Write a function that takes a vector\
    \ of integers and returns the sum of all entries in the vector whose indexes are\n\
    \    a multiple of 3 and a multiple of 4\n    \n    Examples:\n    >>> lst\n \
    \   [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n   \
    \ \"\"\"", "    if all(mod(index, 3) == 0 for index in lst)\n        return sum(lst)^2\n\
    \    elseif all(mod(index, 4) == 0 for index in lst)\n        return sum(lst)^3\n\
    \    else\n        return sum(lst)\n    end\nend", "    sum = 0\n    for i in\
    \ lst\n        if i%3 == 0\n            sum += i*i\n        elseif i%4 == 0\n\
    \            sum += i*i\n        else\n            sum+=i\n        end\n    end\n\
    \    return sum\nend\n</cell>\n<code language=julia-1.5>", "    \n    # Write\
    \ your code here\n    sum = 0\n    \n    for n in lst\n        if mod(n,3)==0\
    \ || mod(n,4)==0\n            sum+=n\n        else\n            sum+=n*n\n   \
    \     end\n    end\n    \n    return sum\nend\n</code>\n<|/ a tags=julia dscore=1\
    \ |>\n<| a dscore=1 |>\nHere's my take on the problem.  I find it easier to understand\
    \ and to reason about.\n<code>", "    \n    return sum(lst.filter((x)->(x%4==0)\
    \ && (x%3==0)))\nend", "    for i in (2:length(lst))\n        if mod(i, 3) ==\
    \ 0\n            lst[i] = lst[i]^2\n        elseif mod(i, 4) == 0\n          \
    \  lst[i] = lst[i]^3\n        end\n    end\n    return sum(lst)\nend\n</cell>\n\
    <text>\nExercise 7\nThis exercise will test your function on randomly generated\
    \ lists.", "    if lst.size==0\n        return 0\n    end\n    for i in 1:lst.size\n\
    \        if i%3==0 || i%4==0\n            lst[i]*=lst[i]\n        end\n    end\n\
    \    return sum(lst)\nend\n</cell>\n<code language=julia-1.5>\nsum_squares(vec1)\n\
    </cell>\n<text>\nExercise 2\nWrite a Julia function called is_even(::Vector{Int64})\
    \ which takes as an argument a vector of integers and returns true if the vector\
    \ is composed of even numbers, false otherwise. For instance:", "    sum = 0\n\
    \    for k in lst\n        if mod(k,4) == 0\n            sum += k^2\n        else\n\
    \            sum += k\n        end\n    end\n    return sum\nend", "    if length(lst)\
    \ == 0 \n        0\n    else \n        if length(lst) == 1 \n            lst[1]^2\n\
    \        else \n            sum(lst[i : i+length(lst % 2 .!= 2)] for i in 1:length(lst)\
    \ .- 1)\n        end\n    end\nend\n</cell>\n<code language=julia-1.5>\nsum_squares(lst)\n\
    </cell>\n<text>\nExercise 3", "    \"\"\"\n    Solution 004: sum squares function\n\
    \    \"\"\"\n    \n    return sum(map(x -> x*x, lst))\nend\n</cell>\n<code language=julia-0.5>\n\
    sum_squares(lst)\n</cell>\n<text>\nPart B", "    if lst == []\n        return\
    \ 0\n    else\n        sum = 0\n        for i in 1:length(lst)\n            if\
    \ ((mod(lst[i], 3) == 0) || (mod(lst[i], 4) == 0)) \n            \n          \
    \      sum = sum + lst[i]\n            else\n                sum = sum + lst[i]\
    \ * lst[i]\n            end\n        end\n        return sum\n    end\nend\n</cell>\n\
    <text>\nWe can now try the function", "    total = 0\n    for i in lst\n     \
    \   if i.%%3 == 0 || i.%%4 == 0\n            total = total + i*i\n        end\n\
    \    end\n    return total\nend\n</cell>\n<text>\nExercise 2: Complete the function\
    \ find_multiple_of_3() below, which takes a vector of integers and returns a vector\
    \ of integers containing only the integers that could be squared to make \n  \
    \  the sum of the integers equal to 0. The function shall not change the original\
    \ vector.\n    \n    Examples:\n    >>> lst\n    []\n    >>> lst\n    [1]\n  \
    \  >>> lst\n    [1, 2, -5, 4]\n    >>> lst\n    [2, 3]\n    >>> lst\n    [-6,\
    \ -9, -16, 17]\n    >>> lst\n    [-6, -9, -16, 17]\n    >>> find_multiple_of_3(lst)\n\
    \    [-6, -9, -16, 17]\n    >>> find_multiple_of_3(lst, lst.max)\n    [-9, -16,\
    \ 17]\n    \"\"\"", "    l = length(lst)\n    \n    for i in 1:l\n        if ((i%3\
    \ == 0) || (i%4 == 0)) \n            lst[i] = lst[i]**2\n        end \n    end\n\
    \    \n    sum(lst)\nend\n</cell>\n<code language=julia-1.0>\n## Putting it all\
    \ together ##", "    if length(lst) == 0 \n        return 0 \n    \n    sum =\
    \ 0\n    for i in lst \n        if i%3 == 0 || i%4 == 0 \n            continue\
    \ \n        else \n            sum += i*i \n    end \n    return sum  \nend\n\
    </cell>\n<code language=julia-1.5>\nsum_squares(lst)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that will take a vector of integers and will return the\
    \ sum of the integers whose index is divisible by 4 \nand divisible by 8.", " \
    \   return sum(i == 0 || i % 3 == 0 ? i*i : i*i*i for i in lst)\nend\n</cell>\n\
    <code language=julia-1.5>\nsum_squares(lst)\n</cell>\n<text>\n13. Inverse List\n\
    A function is given an input list and a target list. This function shall return\
    \ the target list such that for each entry in the input list, \n    it is equal\
    \ to the index of the target list that has that entry. For example, if the target\
    \ list is the list [-1, 0, 1] and\n    the input list is [1, 2, 3], the function\
    \ shall return the list [-1, 0, 2], where the entries are equal to 0 and 1, and\
    \ the \n    order is preserved. Note that, if the target list is empty, an empty\
    \ list shall be returned.", "    sum = 0\n    for index in 0 .. length(lst)-1\n\
    \        if index % 3 == 0 || index % 4 == 0\n            sum += lst[index]\n\
    \        else\n            lst[index] = lst[index]*lst[index]\n        end\n \
    \   end\n    return sum\nend\n</cell>\n<text>\nNow let's call the function sum_squares\
    \ with some test lists. Notice how the function returns different results depending\
    \ on which test list it is run on.", "    s = zero(Int64)\n    for i in lst\n\
    \        if i%3 != 0\n            s +=  i\n        elseif i%4 != 0\n         \
    \   s +=  i*i\n        else\n            s +=  i*i\n        end\n    end\n   \
    \ return s\nend", "    answer = 0.0\n    for i in 0 :< length(lst)\n        answer\
    \ = answer + lst[i]^2\n    end\n    return answer\nend", "    sum_ = 0\n    for\
    \ i in lst\n        if i.mod 3 == 0 || i.mod 4 == 0\n            sum_ = sum_ +\
    \ i\n        else\n            sum_ = sum_ + i * i\n        end\n    end\n   \
    \ return sum_\nend", "    sum = 0\n    for i in lst \n        if ismultiple(3,\
    \ i) || ismultiple(4, i) || i != 0\n            sum += i*i\n        end\n    end\n\
    \    return sum\nend", "    lst = Vector{Int64}(lst)\n    sum = 0\n    for i in\
    \ lst\n        if i%3 ==0 || i%4==0\n            sum+=i\n        else\n      \
    \      sum+=i*i\n        end\n    end\n    return sum\nend", "    sum = 0\n  \
    \  for x in lst\n        if x%3 == 0 && x%4 != 0\n            sum += x\n     \
    \   elsif x%3 == 0\n            sum += x\n        else\n            sum += x*x\n\
    \        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_squares(lst)\n</cell>\n<text>\nExercise 4.", "    sum_ = 0\n    for v in lst\n\
    \        if v%3 == 0\n            sum_ ^= v\n        elseif v%4 == 0\n       \
    \     sum_ ^= v \n        else\n            sum_ ^= v*v\n        end\n    end\n\
    \    return sum_\nend\n</code>\nThe function sum squares returns sum of all squares\
    \ of the numbers in the vector\n<|/ a tags=julia |>\n<| c |>\nThanks for your\
    \ answer, however my problem was that i can't use loops :)\n<|/ c |>\n<| c |>\n\
    The main reason to prefer `foreach` is that it forces the compiler to perform\
    \ tail-call optimization, which increases code speed. Also, `foreach` gives you\
    \ `Iterators` which are a little more flexible than `Vector`s since they are able\
    \ to hold heterogeneous types while `Vector` can only hold homogeneous types.\n\
    <|/ c |>\n<| c |>\n`foreach` has been available since `v0.21.0` so you can use\
    \ a recent version of `Iterators` (if you're not using `v0.21.0` or higher).\n\
    <|/ c |>\n<| c |>\nI realized that my question was too general. I want to sum\
    \ all positive integers greater than zero. However the function should be generalized\
    \ so that it can sum any integer and any condition.\n<|/ c |>\n<| c |>\nYou can\
    \ generalize it to any condition you like. For example, you could use `ifelse`\
    \ (conditional expression) or `if` (conditional statement) to make a conditional\
    \ statement that evaluates a function\n<|/ c |>\n<| a dscore=1 |>\nYou can use\
    \ map/filter to achieve this.\n<code>\njulia> x = 1:10\n1:10", "    \n    return\
    \ sum(filter(x -> x % 3 == 0 || x % 4 == 0, lst))\nend", "    for i in 1:length(lst)\n\
    \        if mod(i, 3)==0 || mod(i, 4)==0\n            lst[i] = lst[i] * lst[i]\n\
    \        end\n    end\n    sum(lst)\nend", "    sum = 0\n    for i in lst\n  \
    \      if i%3 == 0\n            sum = sum + i\n        else \n            sum\
    \ = sum + i**2\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.6>\n\
    ## test it on test case\nlst = [1, 2, 3, -1, -5, 2, -1, -5]\nsum_squares(lst)\n\
    </cell>\n<text>\nExercise 11: List compression", "    \n    for i in lst\n   \
    \     if mod(i,3) == 0\n            lst[i] = lst[i]^2\n        else if mod(i,4)\
    \ == 0\n            lst[i] = lst[i]^3\n        end\n    end", "    sum = 0\n \
    \   for index in 1 \u223C length(lst) \n        if index %% 3 == 0 || index %%\
    \ 4 == 0 \n            sum += lst[index]\n        end\n    end\n    return sum\n\
    end\n</code>\n<|/ a tags=vector,julia dscore=2 |>\n<| a dscore=2 tags=vector,julia\
    \ |>\nThere are two ways to solve this problem. The first is to create a Vector\
    \ of Tuples where each Tuple has two elements: one for each of the numbers to\
    \ be squared. The second is to create a list of Vectors and then apply the function\
    \ sum_squares() to each element of the list.\nHere is how you can create the list\
    \ of Vectors:\n<code>\njulia> function sum_squares(v::Vector{Int64})::Vector{Int64}\n\
    \          v = copy(v)\n          result = []\n          for i = 2:length(v)\n\
    \             if v[i] % 3 == 0 || v[i] % 4 == 0\n                push!(result,\
    \ v[i]^2)\n             end\n          end\n          return result\n       end",
  "    sum=0\n    for i in lst\n        if mod(i,3)==0 || mod(i,4)==0\n          \
    \  sum+=i\n        else\n            sum*=i\n        end\n    end\n    return\
    \ sum\nend\n</code>\n<|/ a |>\n<| a dscore=0 |>\n<code>", "    if lst.length ==\
    \ 0 \n        return 0 \n    elseif length(lst) == 1 \n        return lst[0] \n\
    \    end\n    else \n        new_lst = copy(lst)\n        for i in new_lst \n\
    \            if mod(i, 3) == 0 \n                new_lst[i] = new_lst[i] * new_lst[i]\
    \ \n            end\n            if mod(i, 4) == 0 \n                new_lst[i]\
    \ = new_lst[i] * new_lst[i]\n            end\n            if mod(i, 2) != 0 \n\
    \                new_lst[i] = new_lst[i] * new_lst[i]\n            end\n     \
    \   end\n        sum(new_lst) \n    end\nend\n</cell>\n<text>\nTask 3\nWrite a\
    \ function in Julia which takes as input a vector of integers and outputs a vector\
    \ of booleans corresponding to whether the entry at an index of the input \nvector\
    \ is a multiple of 3 and a multiple of 4.", "    for x in lst\n        if x %\
    \ 3 == 0 || x % 4 == 0\n            lst[x] = x*x\n        else\n            lst[x]\
    \ = x*x*x\n        end\n    end\n    return sum(lst)\nend", "    sum = 0\n   \
    \ for i in eachindex(lst)\n        sum += lst[i]^2\n    end\n    return sum\n\
    end \n\"\"\"\n    \n    This function will take a list of integers and return\
    \ a list of indexes of those elements that satisfy the function \"lst2check\"\
    .\n    The function shall not remove any elements from the original list. \n \
    \   \n    Examples:\n    >>> lst\n    [0, 3, 9, 12, 15]\n    >>> lst2check(lst)\n\
    \    [2, 3]\n    \"\"\"", "    # Complete the code below to return sum of all\
    \ squared integer entries in lst\n    sum_ = 0\n    for i in lst\n        sum_\
    \ += i^2 \n    end\n    return sum_\nend # function sum_squares\n</cell>\n<text>\n\
    Let's test our function with the test vectors we created above.", "    sum_ =\
    \ 0\n    \n    for i in lst\n        if mod(i, 3) == 0 || mod(i, 4) == 0\n   \
    \         sum_ = sum_ + i\n        end\n    end\n    return sum_\nend", "    #\
    \ sum the squared values only\n    total = 0\n    for index in lst\n        if\
    \ index % 3 == 0 || index % 4 == 0\n            total += index^2\n        else\n\
    \            total += index\n        end\n    end\n    return total\nend\n</cell>\n\
    <code language=julia-1.5>\nsum_squares(lst)\n</cell>\n<code language=julia-1.5>",
  "    sum = 0\n    for index in range(length(lst ))\n        if index%3 == 0 \n \
    \           sum += lst[index]\n        else \n            sum += lst[index]*lst[index]\n\
    \        end\n    end\n    return sum\nend\n</cell>\n<text>\nTesting the function",
  "    sum = Int64(0)\n    for i in lst\n        if i.is_integer()\n            if\
    \ i%3 == 0\n                sum += i**2\n            end\n            if i%4 ==\
    \ 0\n                sum += i\n            end\n        end\n    end\n    return\
    \ sum\nend\n</cell>\n<code language=julia-1.4>\n\"\"\"\n    This function will\
    \ take a vector of integers. For all entries in the vector, the function will\
    \ square the integer entry if its index is a \n    multiple of 3 and will cube\
    \ the integer entry if its index is a multiple of 4 and not a multiple of 3. The\
    \ function will not \n    change the entries in the vector whose indexes are not\
    \ a multiple of 3 or 4. The function shall then return the sum of all entries.\
    \ \n    \n    Examples:\n    >>> lst\n    [1, 2, 3]\n    >>> lst\n    []\n   \
    \ >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"", "    \n    return sum([v for\
    \ v in lst  if v%3==0]) + sum([v for v in lst  if v%4==0 and v%3 != 0])\nend",
  "    sum = Int64(0)\n    for i in lst \n        if i%3 == 0\n            sum +=\
    \ i\n        end\n    end\n    return sum\nend\n</code>\nThis code works as expected\
    \ but is inefficient. My question is: Is there a way to improve the efficiency?\
    \ I am quite new to Julia so I hope my question is understandable enough.\n<|/\
    \ q |>\n<| c |>\nI think you should post this question to [CodeReview](https://codereview.stackexchange.com/)\n\
    <|/ c |>\n<| c |>\nThe code you posted works fine in Julia 0.6.2.\n<|/ c |>\n\
    <| c |>\nThis code runs fine on 0.6. Your question is about an earlier version.\
    \ Report the bug to Julia https://github.com/JuliaLang/julia/issues and link to\
    \ this question if you want a review of the code in that version.\n<|/ c |>\n\
    <| a tags=julia,list |>\nA minor improvement is\n<code>", "    \"\"\"\n    lst::\
    \ Vector{Int64}\n    \"\"\"\n    \n    \n    squares=Array{Int64,1}(length(lst))\n\
    \    for i in eachindex(lst)\n        \n            if mod(i, 3)==0 || mod(i,\
    \ 4)==0\n                squares[i]=1\n            else \n                squares[i]=i^2\n\
    \            end\n        end\n    sum(squares)\nend\n</cell>\n<code language=julia-1.6>\n\
    sum_squares(lst)\n</cell>\n<code language=julia-1.6>", "    sum = 0\n    for i\
    \ in 1:length(lst)\n        if mod(i, 3) == 0 || mod(i, 4) == 0 \n        else\n\
    \            sum += lst[i]\n        end\n    end\n    return sum\nend\n</cell>\n\
    <text>\nThe sum_squares() function shall take a vector of integers as argument\
    \ and return an Int64 which is the sum of squares of elements in the input vector.",
  "    # Your code here\n    sum = 0\n    for i in lst\n        if i%3 == 0\n    \
    \        sum += i^2\n        elseif i%4 == 0\n            sum += i*i\n       \
    \ else\n            sum += i\n        end\n    end\n    return sum\nend\n</cell>\n\
    <text>\nTask 7. Implement the function \"sum_cubes\" which will sum the entries\
    \ in the given vector which are multiple of 3 and multiple of 4.", "    \"\"\"\
    \n    Summary:\n    \n    This function will take a vector of integers. For all\
    \ entries in the vector, the function shall square the integer entry if its index\
    \ is a \n    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n   \
    \ [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\
    \"\"\n    \n    sum_squares = zeros(Int64, length(lst))\n    for i in 1:length(lst)\n\
    \        \n        if lst[i] % 3 == 0 && lst[i] % 4 == 0\n            sum_squares[i]\
    \ = lst[i]^2\n        elseif lst[i] % 3 == 0 && lst[i] % 4 != 0\n            sum_squares[i]\
    \ = lst[i]^3\n        elseif lst[i] % 3 != 0 && lst[i] % 4 == 0\n            sum_squares[i]\
    \ = lst[i]^4\n        elseif lst[i] % 3 != 0 && lst[i] % 4 != 0\n            sum_squares[i]\
    \ = lst[i]^5\n        end\n    end\n    return sum_squares\nend", "    \n    \n\
    \    \n    return sum(x^2 for x in lst)\nend\n</cell>\n<code language=julia-1.4>",
  "    sum = 0\n    for i = 1:length(lst)\n        if ismultiple(lst,i) == true\n\
    \            sum = sum + lst[i]^2\n        end\n    end\n    \n    return sum\n\
    end\n</code>\n<|/ q tags=function,julia dscore=2 |>\n<| a tags=function,julia\
    \ |>\nHere are some things that might help:\nIn Julia, types are written starting\
    \ with a capital letter. This convention is followed throughout the entire language.\
    \ \nIn Julia there is no separate boolean type, instead there is a Bool type.\
    \ Boolean values are false or true and are stored differently depending on the\
    \ type. For example, true and false are stored as 1 and 0 respectively. This is\
    \ different from most programming languages in that in languages such as C, C++\
    \ and Java, the boolean values are stored as true and false. In Julia, these values\
    \ are stored as Bool type. The following code will explain some things that might\
    \ help:\n<code>\njulia> typeof(true)\nBool", "    \n    total = 0\n    for i in\
    \ 1:length(lst)\n        if mod(lst[i], 3) == 0\n            total = total + lst[i]^2\n\
    \        elseif mod(lst[i], 4) == 0\n            total = total + lst[i]^3\n  \
    \      end\n    end\n    \n    return total\nend", "    if lst == []\n       \
    \ return -1\n    else\n        s = 0\n        for i in lst\n            if mod(i,3)\
    \ == 0\n                s = s + i\n            elseif mod(i,4) == 0\n        \
    \        s = s + i*i\n            end\n        end\n        return s\n    end\n\
    end", "    return sum((lst[i]*lst[i]) for i in findall(x -> (x%3) == 0, lst))\n\
    end", "    if length(lst) == 0\n        return 0\n    \n    if any(x -> x % 3\
    \ == 0 && x % 4 == 0, lst)\n        return sum(lst.filter(x -> x % 3 == 0 && x\
    \ % 4 == 0))\n    else\n        return sum(lst.filter(x -> x % 3 == 0 || x % 4\
    \ == 0))\n    end\nend", "    sum = 0\n    for index in lst \n        sum = sum\
    \ + index^2\n    end\n    return sum\nend", "    sum = 0\n    for i in lst\n \
    \       if mod(i, 3) == 0\n            sum += i * i\n        elseif mod(i, 4)\
    \ == 0\n            sum += i * i * i\n        elseif mod(i, 3) == 0\n        \
    \    sum += i * i * i\n        elseif mod(i, 4) == 0\n            sum += i * i\
    \ * i\n        elseif mod(i, 3) == 0\n            sum += i * i * i\n        elseif\
    \ mod(i, 4) == 0\n            sum += i * i * i\n        elseif mod(i, 3) == 0\n\
    \            sum += i * i * i\n        elseif mod(i, 4) == 0\n            sum\
    \ += i * i * i\n        end\n    end\n    return sum\nend \n</cell>\n<code language=julia-1.5>\n\
    sum_squares(lst.clone())\n</cell>\n<code language=julia-1.5>", "    n = 0\n  \
    \  for x in lst\n        if isMultiple(3, x)\n            n += x^2\n        elseif\
    \ isMultiple(4, x)\n            n += x^3\n        else\n            n += x\n \
    \       end\n    end\n    return n\nend\n</cell>\n<cell>\n## Your code here\n\
    sum_squares(lst)\n</cell>\n<text>\n2.4 Vectorized functions\nVectorized functions\
    \ allow you to apply a function to every entry of a vector or matrix. \nThe vectorized\
    \ functions are written between a % in Julia. \nFor example: %isMultiple(5) will\
    \ return true if the integer 5 is a multiple of 3 and false otherwise.", "   \
    \ lst = Vector{Int64}(lst)\n    sum = 0\n    for i in 1:length(lst)\n        if\
    \ mod(i, 3) == 0 && lst[i] % 3 == 0\n            sum = sum + lst[i]*lst[i]\n \
    \       elseif mod(i, 4) == 0 && lst[i] % 4 == 0\n            sum = sum + lst[i]*lst[i]\n\
    \        else\n            sum = sum + lst[i]\n        end\n    end\n    \n  \
    \  return sum\nend", "  sum = 0\n  \n  for idx in 0..(length(lst)-1)\n    if idx%3\
    \ == 0\n      sum = sum + lst[idx]\n    end\n  end\n  \n  return sum\nend\n</cell>\n\
    <code language=julia-0.5>", "   \n    if length(lst) == 0 \n        return 0\n\
    \    end\n    \n    \n    for i in lst \n        if i%3 == 0 \n            i =\
    \ i*i\n        elseif i%4 == 0 \n            i = i*i\n        else\n         \
    \   i = i*i\n        end\n    end\n    return sum(lst)\nend\n</cell>\n<code language=julia-1.6>\n\
    # test it \nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.6>\n# test it\
    \ \nsum_squares([1,3,5])\n</cell>\n<code language=julia-1.6>\n# test it \nsum_squares([-1,-5,2,-1,-5])\n\
    </cell>\n<text>\nExercise 2\nWrite a function called count_negatives that takes\
    \ a vector of integers and returns the number of negative integers in the vector.",
  "    sum = 0 \n    for i in lst\n        if ismultipleof3(i, lst)\n            sum\
    \ += i*i\n        else if ismultipleof4(i, lst)\n            sum += i*i\n    \
    \    end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.2>\n@test\
    \ sum_squares([1,2,3]) == 9\n@test sum_squares([1,2]) == 4\n@test sum_squares([])\
    \ == 0\n@test sum_squares([-1, -5, 2, -1, -5]) == -25\n</cell>\n<code language=julia-1.2>\n\
    \"\"\"\n    This function will take two vectors of integers. For all entries in\
    \ the first vector, the function shall square the integer entry if its index is\
    \ a \n    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the first vector whose indexes are not a multiple of 3 or 4. The function\
    \ shall then return the sum of all entries. \n    \n    Examples:\n    >>> lst1\n\
    \    [1, 2, 3]\n    >>> lst1\n    []\n    >>> lst1\n    [-1, -5, 2, -1, -5]\n\
    \    >>> lst2\n    [-5, 10, -2, -9, 5]\n    >>> lst2\n    []\n    >>> lst2\n \
    \   [-5, 10, -2, -9, 5]\n\"\"\"", "    for i in lst \n        if i%3 != 0 \n \
    \           lst[i] = i*i \n        else \n            lst[i] = i*i*i \n      \
    \  end\n    end\n    reduce(+, lst )\nend\n</cell>\n<text>\nExercise 6\nWrite\
    \ a function called sum_cubed. This function will take a vector of integers. For\
    \ all entries in the vector, the function shall cube the integer entry if its\
    \ index is a \n    multiple of 4 and will cube the integer entry if its index\
    \ is a multiple of 3. The function will not change the entries in the vector whose\
    \ indexes are not a multiple of 4. The function shall then return the sum of all\
    \ entries. \n    \n    Examples:\n    >>> lst\n    [1, 2, 3]\n    >>> lst\n  \
    \  []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"", "    \n    for i in\
    \ lst \n        if i%3 == 0 \n            lst[i] = lst[i]**2\n        else if\
    \ i%4 == 0 \n            lst[i] = lst[i]**3\n        else \n            lst[i]\
    \ = lst[i]**4\n    end\n    \n    sum = 0\n    for i in lst \n        sum = sum\
    \ + i\n    end\n    return sum\nend"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
