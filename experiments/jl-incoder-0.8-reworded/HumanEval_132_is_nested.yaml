name: HumanEval_132_is_nested
language: jl
prompt: "\"\"\"\n    Create a function that takes a string as input which contains\
  \ only square brackets.\n    The function should return true if and only if there\
  \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
  \ is nested.\n\n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\"\
  )\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\")\n\
  \    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\"\
  )\n    true\n    \"\"\"\nfunction is_nested(string::String)::Bool \n"
tests: "using Test\n\n@testset begin\n\ncandidate = is_nested;\n\t@test(candidate(\"\
  [[]]\") == true)\n\t@test(candidate(\"[]]]]]]][[[[[]\") == false)\n\t@test(candidate(\"\
  [][]\") == false)\n\t@test(candidate(\"[]\") == false)\n\t@test(candidate(\"[[[[]]]]\"\
  ) == true)\n\t@test(candidate(\"[]]]]]]]]]]\") == false)\n\t@test(candidate(\"[][][[]]\"\
  ) == true)\n\t@test(candidate(\"[[]\") == false)\n\t@test(candidate(\"[]]\") ==\
  \ false)\n\t@test(candidate(\"[[]][[\") == true)\n\t@test(candidate(\"[[][]]\")\
  \ == true)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"[[[[[[[[\") ==\
  \ false)\n\t@test(candidate(\"]]]]]]]]\") == false)\nend\n"
completions: ["    #check if it contains only square brackets\n    return string ==\
    \ string[1:-1]\n</code>\n<|/ a dscore=0 tags=haskell |>\n<| a tags=haskell |>\n\
    I think it would be better to use a tree data structure. \n<code>\ndata Tree a\
    \ = Nil | Node a (Tree a) (Tree a)\n</code>\nThen you can define a function that\
    \ checks for nesting of a tree\n<code>\nisNested :: Tree a -> Bool\nisNested (Node\
    \ a left right) = a && isNested left && isNested right\nisNested Nil = True\n\
    </code>\nAnd check a tree for nesting by applying the function recursively\n<code>\n\
    isNested :: Tree a -> Bool\nisNested Nil = True\nisNested (Node a left right)\
    \ = a && isNested left && isNested right\n</code>\n<|/ a dscore=0 |>\n<| c |>\n\
    A tree is probably the better solution, but this doesn't solve the problem of\
    \ checking if the string is valid in the first place.\n<|/ c |>\n<| c |>\nThe\
    \ question was about checking for nesting of a string which is what the code is\
    \ doing already. Do you have a solution that uses tree?\n<|/ c |>\n<| c |>\nThe\
    \ question was about the use of regex to determine if brackets are nested. It\
    \ would have been better if you pointed out the difference between the two solutions.\n\
    <|/ c |>\n<| c |>\nI have added an explanation to the solution using tree. Hope\
    \ that helps\n<|/ c |>\n<| c |>\nThe OP said \"the function should return true\
    \ if and only if there is a valid subsequence of brackets\" which suggests that\
    \ you aren't checking for nesting of brackets.\n<|/ c |>\n<| a dscore=0 |>\nIn\
    \ your case your problem is that you consider that brackets close each other.\
    \ You need to implement the fact that they do not.\n<code>\nimport Data.List (elemIndex)\n\
    import Data.Char (toUpper, toLower)\nimport Data.Maybe (fromMaybe)", "    \n \
    \   \n    if string == \"\" \n        return false\n    \n    # base case\n  \
    \  if string[0] == \"[\" and string[len(string)-1] == \"]\" \n        return true\n\
    \    \n    # recurse \n    if string[0] != \"]\" and string[len(string)-1] !=\
    \ \"]\" \n        return is_nested(string[1:])\n    \n    # else return false\
    \ \n    return false\nend", "    \n    let length = string.count(\"[\")\n    if\
    \ length <= 1 then \n        return true\n    let start = string.index(\"[\")\n\
    \    let end = string.count(\"]\", start, length+1)\n    if end <= start then\
    \ \n        return false\n    else \n        return is_nested(string[end+1:])\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Create a function\
    \ that takes a string as input which contains only square brackets.\n    The function\
    \ should return true if and only if there is no valid subsequence of brackets\
    \ \n    where at least one bracket in the subsequence is nested.", "\"\"\"\n \
    \   Check if the brackets nest in a valid way.\n    Return a Bool.\n    \"\"\"\
    \n    stack = Stack()\n    stack.push(string)\n    brackets = []\n    while stack.size\
    \ > 0\n        first = stack.pop()\n        if first == \"[]\"\n            brackets\
    \ = [first]\n        else if first == \"[[]\"\n            stack.push(\"[]\")\n\
    \        else if first == \"[][]\"\n            stack.push(\"[]\")\n         \
    \   stack.push(\"[]\")\n        else if first == \"[[][]\"\n            stack.push(\"\
    []\")\n            stack.push(\"[]\")\n            stack.push(\"[]\")\n      \
    \  else if first == \"[][][]\"\n            stack.push(\"[]\")\n            stack.push(\"\
    []\")\n            stack.push(\"[]\")\n            stack.push(\"[]\")\n      \
    \  else if first == \"[[][[]\"\n            stack.push(\"[]\")\n            stack.push(\"\
    []\")\n            stack.push(\"[]\")\n            stack.push(\"[]\")\n      \
    \  else if first == \"[][[][]\"\n            stack.push(\"[]\")\n            stack.push(\"\
    []\")\n            stack.push(\"[]\")\n            stack.push(\"[]\")\n      \
    \      stack.push(\"[]\")\n        else if first == \"[][][[]\"\n            stack.push(\"\
    []\")\n            stack.push(\"[]\")\n            stack.push(\"[]\")\n      \
    \      stack.push(\"[]\")\n            stack.push(\"[]\")\n            stack.push(\"\
    []\")\n        else if first == \"[[][][[]\"\n            stack.push(\"[]\")\n\
    \            stack.push(\"[]\")\n            stack.push(\"[]\")\n            stack.push(\"\
    []\")\n            stack.push(\"[]\")\n            stack.push(\"[]\")\n      \
    \      stack.push(\"[]\")\n        else if first == \"[][][][[]\"\n          \
    \  stack.push(\"[]\")\n            stack.push(\"[]\")\n            stack.push(\"\
    []\")\n            stack.push(\"[]\")\n            stack.push(\"[]\")\n      \
    \      stack.push(\"[]\")\n            stack.push(\"[]\")\n        else if first\
    \ == \"[][][][][]\"\n            stack.push(\"[]\")\n            stack.push(\"\
    []\")\n            stack.push(\"[]\")\n            stack.push(\"[]\")\n      \
    \      stack.push(\"[]\")\n            stack.push(\"[]\")\n            stack.push(\"\
    []\")\n        else if first == \"[][][][][][]\"\n            stack.push(\"[]\"\
    )\n            stack.push(\"[]\")\n            stack.push(\"[]\")\n          \
    \  stack.push(\"", "    \"\"\"\n    Create a function that takes a string as input\
    \ which contains only square brackets.\n    The function should return true if\
    \ and only if there is a valid subsequence of brackets \n    where at least one\
    \ bracket in the subsequence is nested.", "\"\"\"\n    Function to check whether\
    \ a string is valid parenthesis sequence\n    \"\"\"\n    return not string.isEmpty()",
  "    open bracket = index(\"[\", string) == -1\n    close bracket = index(\"]\"\
    , string) == -1\n    if open and close:\n        return True\n    return not open\
    \ and not close\n    \"\"\"", "    if is_empty(string)\n        return true\n\
    \    \n    for i in string\n        if is_parenthesis(i)\n            false\n\
    \        end\n    end\n    return true\nend\n</cell>\n<code language=julia-1.5>",
  "    \"\"\"\n    Create a function that takes a string as input which contains only\
    \ square brackets.\n    The function should return true if and only if there is\
    \ a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.", "    if is_empty(String)\n        return false\n    if is_paren_empty(String)\n\
    \        return true\n    if string == \"[]\"\n        return true\n    if string\
    \ == \"[]]\"\n        return true\n    if string == \"[][]\"\n        return true\n\
    \    if string == \"[][]]\"\n        return true\n    if string == \"[][][[]]\"\
    \n        return true\n    if string == \"[][][[][]]\"\n        return true\n\
    \    if string == \"[][][[][][]]\"\n        return true\n    if string == \"[][][[][][][]]\"\
    \n        return true\n    if string == \"[][][[][][][][]]\"\n        return true\n\
    \    if string == \"[][][[][][][][][]]\"\n        return true\n    if string ==\
    \ \"[][][[][][][][][][]]\"\n        return true\n    if string == \"[][][[][][][][][][][]]\"\
    \n        return true\n    if string == \"[][][[][][][][][][][]]\"\n        return\
    \ true\n    if string == \"[][][[][][][][][][][][]]\"\n        return true\n \
    \   if string == \"[][][[][][][][][][][][]]\"\n        return true\n    if string\
    \ == \"[][][[][][][][][][][][][]]\"\n        return true\n    if string == \"\
    [][][[][][][][][][][][][][]]\"\n        return true\n    if string == \"[][][[][][][][][][][][][][]]\"\
    \n        return true\n    if string == \"[][][[][][][][][][][][][][][]]\"\n \
    \       return true\n    if string == \"[][][[][][][][][][][][][][][]]\"\n   \
    \     return true\n    if string == \"[][][[][][][][][][][][][][][][]]\"\n   \
    \     return true\n    if string == \"[][][[][][][][][][][][][][][][][]]\"\n \
    \       return true\n    if string == \"[][][[][][][][][][][][][][][][][]]\"\n\
    \        return true\n    if string == \"[][][[][][][][][][][][][][][][][][]]\"\
    \n        return true\n    if string == \"[][][[][][][][][][][][][][][][][][]]\"\
    \n        return true\n    if string == \"[][][[][][][][][][][][][][][][][][][]]\"\
    \n        return true\n    if string == \"[][][[][][][][]", "    if is_empty(string)\n\
    \        return true\n    if is_valid_brackets(string)\n        return is_nested(tail(string))\n\
    \    return false\n</code>\nis_valid_brackets(string) checks the string for valid\
    \ brackets:\n<code>\n\"\"\"\nCheck whether a string contains only brackets.\n\
    If it contains brackets, a substring of it must contain at least one bracket.",
  "    brackets = string.chars()\n    \n    # find first index of brackets in string\n\
    \    bracket_index = findfirst(brackets, 0)\n    \n    # check for valid first\
    \ and last index\n    if bracket_index == nil \n        false\n    elseif bracket_index\
    \ == string.length\n        true\n    elseif string[bracket_index+1] == \"[\"\
    \ \n        false\n    elseif string[bracket_index-1] == \"[\"\n        false\n\
    \    else\n        true\n    end\nend\n</cell>\n<code language=julia-0.6>\n@assert\
    \ is_nested(\"[[]]\") \n@assert is_nested(\"[]]]]]]][[[[[]\") \n@assert is_nested(\"\
    [][]\") \n@assert is_nested(\"[]\") \n@assert is_nested(\"[[][]]\") \n@assert\
    \ is_nested(\"[[]][[\") \n@assert ! is_nested(\"[]\") \n@assert ! is_nested(\"\
    [[][]\") \n@assert ! is_nested(\"[[]\") \n</cell>\n<text>\n1.3 The \"bracket count\"\
    \ Problem", "    \n    return all(nesting != \")\" for nesting in string[1::2])",
  "    match string with \n    | \"[]\"   -> true\n    | \"[][]\" -> true\n    | \"\
    [][\" -> true\n    | \"[][[\" -> true\n    | _      -> false\n    end\nend", " \
    \   stack::Stack \n    \n    stack = Stack()\n    stack.append([]::List)\n   \
    \ for i in string\n        if i == \"[\" \n            stack.append([]::List)\n\
    \        else if i == \"]\"\n            if stack.size == 0\n                return\
    \ false\n            elif stack.size == 1\n                stack.pop()\n     \
    \       else if stack[stack.size - 1] == []\n                return false\n  \
    \          else\n                stack.pop()\n                stack.append(stack[stack.size\
    \ - 1]::List)\n        else if stack.size == 0 \n            return false\n  \
    \      else if stack[stack.size - 1] == []\n            stack.pop()\n        else\
    \ if stack[stack.size - 1] == \"\"\n            return false\n        else\n \
    \           stack[stack.size - 1] += i\n    return true\n</code>\n<|/ a dscore=2\
    \ |>\n<| c |>\nI ran the code and it worked but when I ran it on leetcode it gave\
    \ me a time limit exceeded error.\n<|/ c |>\n<| c |>\nI have updated my answer\
    \ with a more pythonic version of this function.\n<|/ c |>\n<| c |>\nThis solution\
    \ doesn't work for cases like: ", "    \"\"\"\n    A function that checks if a\
    \ string contains only square brackets.\n    \"\"\"\n    return string_contains_brackets(string)\
    \ == true\nend function\n</cell>\n<text>\nNext, we define a function that checks\
    \ if a subsequence of a string contains brackets.", "    \" Return a function\
    \ that checks if there is a valid nested bracket sequence \"\n    \" where at\
    \ least one bracket in the subsequence is nested \"", "    \"\"\"\n    Create\
    \ function is_nested that takes string as input and returns true if and only if\
    \ there is a valid subsequence \n    where at least one bracket in the subsequence\
    \ is nested.", "    \"\"\"\n    is_nested(string::String)", "    if is_bracket(string)\
    \ then\n        match next_bracket(string) with\n        | \"[\"::String\n   \
    \     | \"[\"::String]\" -> true\n        | \"[\"::String][]\" -> true\n     \
    \   | \"[\"::String][]]\" -> true\n        | \"[\"::String][]]]\" -> true\n  \
    \      | \"[\"::String][]]]]\" -> true\n        | \"[\"::String][]]]]]\" -> true\n\
    \        | \"[\"::String][]]]]]]\" -> true\n        | _ -> false\n    else return\
    \ false\nend", "    \"\"\" \n    Create a function that takes a string as input\
    \ which contains only square brackets.\n    The function should return true if\
    \ and only if there is a valid subsequence of brackets \n    where at least one\
    \ bracket in the subsequence is nested.", '    return string.endswith("]")', " \
    \   if is_empty(string) == true\n        true\n    else\n        bracket = find(string,\
    \ '[')\n        close_bracket = find(string, ']')\n        if (bracket == -1)\
    \ || (close_bracket == -1) \n            false\n        else\n            if (close_bracket\
    \ - bracket) > 1\n                false\n            else\n                is_nested(string(close_bracket\
    \ + 1, close_bracket))\n        end\n    end\nend\n</cell>\n<text>\n3. Exercise:\
    \ Regular Expressions", "    string = string.replace(\"[\", \"\")\n    string\
    \ = string.replace(\"]\", \"\")\n    return len(string)==0 or string.count(\"\
    [\")==string.count(\"]\")\nend", "    lenstring :: Int = length(string)\n    opens\
    \ :: Int = 0\n    closes :: Int = 0\n    \n    while opens <= lenstring - closes\
    \ + 1\n        \n        if opens == 0 && closes == 0 && string[opens] == \"[\"\
    \n            return true\n            \n        if string[opens] == \"[\" &&\
    \ (closes == lenstring - 1) && string[closes +1] == \"[\"\n            return\
    \ true\n            \n        if string[opens] == \"[\" && string[closes +1] ==\
    \ \"[\" && (closes - opens + 2 == lenstring-1)\n            return true\n    \
    \    \n        opens += 1\n        closes += 1\n    end\n    return false\nend\
    \ function\n</cell>\n<code language=julia-0.6>\nis_nested(\"[[]]\");\n</cell>\n\
    <code language=julia-0.6>\nis_nested(\"[]]]]]]][[[[[]\")\n</cell>\n<code language=julia-0.6>\n\
    is_nested(\"[][]\")\n</cell>\n<code language=julia-0.6>\nis_nested(\"[]\")\n</cell>\n\
    <code language=julia-0.6>\nis_nested(\"[[][]]\")\n</cell>\n<code language=julia-0.6>\n\
    is_nested(\"[[]][[\")\n</cell>\n<code language=julia-0.6>\nis_nested(\"[[]\")\n\
    </cell>\n<code language=julia-0.6>\nis_nested(\"[[][]]\")\n</cell>\n<text>\nBack\
    \ to square brackets", "    if is_nested0(string) == true then \n        return\
    \ true \n    else \n        return false \nend \n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Create a function that takes a string as input which contains only\
    \ square brackets.\n    The function should return true if and only if there is\
    \ a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.", "    if is_empty(string): return false\n    if string[0] != \"\
    ]\" or string[-1] != \"]\": return false\n    string += \"[]\"\n    return true",
  "    count = 0\n    for c in string\n        if c == \"[\"\n            count +=\
    \ 1\n        if c == \"]\"\n            count -= 1\n            if count == 0\n\
    \                return true\n    return false\n</code>\n<|/ a dscore=0 tags=python,function,python-3.x,nested-loops\
    \ |>\n<| a tags=python,function,python-3.x,nested-loops dscore=0 |>\n<code>\n\
    def check_square_nested(string):\n    stack = []\n    bracket_counter = 0\n  \
    \  parentheses = 0\n    \n    for character in string:\n        if character ==\
    \ '[':\n            bracket_counter += 1\n        elif character == ']':\n   \
    \         bracket_counter -= 1\n        elif character == ')' and parentheses\
    \ < bracket_counter:\n            parentheses += 1\n        elif character ==\
    \ '(' and parentheses > bracket_counter:\n            parentheses -= 1\n     \
    \   else:\n            stack.append(character)\n    return parentheses == 0\n\
    </code>\n<|/ a |>\n<| a tags=python,function,python-3.x,nested-loops |>\nHere\
    \ is a recursive approach:\n<code>\ndef isNested(string):\n    def helper(index,\
    \ string):\n        if index == len(string):\n            return True\n      \
    \  if string[index] == '[':\n            helper(index + 1, string[index+1:])\n\
    \        else:\n            helper(index + 1, string)", "    \n    if string ==\
    \ \"[][]\" \n        true\n    else if string == \"[]\" \n        true\n    else\
    \ if string == \"[[][]]\" \n        true\n    else if string == \"[[]]\" \n  \
    \      true\n    else if string == \"[[[[]\" \n        true\n    else if string\
    \ == \"[[]]\" \n        true\n    else if string == \"[[[]]\" \n        true\n\
    \    else if string == \"[][][]\" \n        true\n    else if string == \"[[][]]\"\
    \ \n        true\n    else \n        false\nend", "</code>\n<|/ a tags=haskell,list\
    \ |>\n<| c |>\n`is_nested(\"[[[]]]\") \u2260 is_nested(\"[][][][][]\")` but `is_nested(\"\
    [[[]]]\") \u2260 is_nested(\"[[[]]]\")` which is not the case in the code you\
    \ wrote.\n<|/ c |>\n<| c |>\n`is_nested(\"[[[]]]\") \u2260 is_nested(\"[[[]]]\"\
    )` is just `is_nested(\"[[[]]]\") \u2260 is_nested(\"[[[]]]\")` which is not the\
    \ case in the code you wrote.\n<|/ c |>\n<| c |>\nYes, but `is_nested(\"[[[]]]\"\
    ) \u2260 is_nested(\"[][][][][][]\")` which is true. As you see, it is a nested\
    \ list which contains at least one nested.\n<|/ c |>\n<| c |>\nWhat is the point\
    \ of checking the empty string for `is_nested`? Since empty string is not nested.\n\
    <|/ c |>\n<| c |>\nYou are right, empty string is not nested but I think the point\
    \ is to avoid to check it if there is a valid subsequence of brackets containing\
    \ at least one nested, otherwise return false. Otherwise, if there is an empty\
    \ string at the end, it would be a nested list. Maybe I'm wrong, but I think `is_nested(\"\
    [][][][][][][][][][]\")` should be false, because there is an empty string at\
    \ the end.\n<|/ c |>\n<| a dscore=2 tags=haskell,list |>\nI see two issues with\
    \ your code:", "    if is_empty(str)\n        return true\n    \n    stack = Array{Bool}([])\n\
    \    \n    for character in str\n        if character == \"[\" || character ==\
    \ \"(\"\n            push!(stack, character)\n        elseif character == \"]\"\
    \ || character == \")\"\n            if length(stack) == 0\n                return\
    \ false\n            elif stack[length(stack)-1] != character\n              \
    \  return false\n            end\n            pop!(stack)\n        elseif character\
    \ == \"[\" || character == \"[\"\n            push!(stack, character)\n      \
    \  elseif character == \"]\" || character == \"]\"\n            if length(stack)\
    \ == 0\n                return false\n            elif stack[length(stack)-1]\
    \ != character\n                return false\n            end\n            pop!(stack)\n\
    \        end\n    end\n    return true\nend", "    if is_empty(string)\n     \
    \   false\n    else\n        if is_single_bracket(string)\n            true\n\
    \        else\n            if is_nested(substring_bracket(string))\n         \
    \       true\n            else\n                is_nested(substring_single_bracket(string))\n\
    \            end\n        end\n    end\nend\n</cell>\n<text>\nExercise 11\nWrite\
    \ a function that checks whether a string contains only a single nested bracket.\
    \ If it does, return the string. If not, return the string with a nested bracket\
    \ added to it.", "    \"\"\"Takes a string as input. Returns a boolean indicating\
    \ whether there exist a \n    valid subsequence of brackets where at least one\
    \ bracket in the subsequence is nested.\"\"\"\n    if string == [] return true\
    \ \n    else if string[0] == string[1] return is_nested(string[2:])\n    else\
    \ if string[0] == '[' and string[-1] == ']' return is_nested(string[1:])\n   \
    \ else if string[0] == '[' and string[-1] != ']' return false\n    else if string[0]\
    \ == '[' and string[-1] == ']' return true\n    else if string[-1] == '[' and\
    \ string[-2] != ']' return false\n    else if string[-1] == '[' and string[-2]\
    \ == ']' return true\n    else if string[-1] != ']' and string[-1] != '[' return\
    \ false\n    else if string[-1] != ']' and string[-1] != '[' return true\n   \
    \ else if string[-1] == ']' and string[-2] != ']' return false\n    else if string[-1]\
    \ == ']' and string[-2] == ']' return true\n    else return false", "    if is_empty(string)\
    \ == true\n        return true\n    if length(string) == 1 \n        return true\n\
    \    \n    if string[1] == '['\n        return is_nested(string[2:end-1])\n  \
    \  if string[1] == '{' \n        return is_nested(string[2:end-1])\n    if string[1]\
    \ == '('\n        return is_nested(string[2:end-1])\n    \n    return false\n\
    end", "    if is_brackets_balanced(string)\n    \n    else \n        return false\n\
    \    \nend \n</cell>\n<code language=julia-1.5>", "    \n    for i in string.chars():\n\
    \        if is_parenthesised(i) == True and \\\n        \ti != \"[\":\n      \
    \      return False\n    if is_parenthesised(string) == False or string == \"\
    []\":\n        return True\n    else:\n        return False", "    \"\"\"\n  \
    \  Create a function that takes a string as input which contains only square brackets.\n\
    \    The function should return true if and only if there is a valid subsequence\
    \ of brackets \n    where at least one bracket in the subsequence is nested.",
  "    if is_empty(string)\n        return true\n    \n    open_count::Int = 0\n \
    \   closed_count::Int = 0\n    open::Char = \"[\"\n    close::Char = \"]\"\n \
    \   \n    for c in string\n        if is_open(c)\n            open_count += 1\n\
    \        if is_close(c)\n            closed_count += 1\n        if open_count\
    \ < closed_count\n            return false\n    return true\nend ", "\"\"\"\n\
    \    Create a function that takes a string as input which contains only square\
    \ brackets.\n    The function should return true if and only if there is a valid\
    \ subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.", "    stack::Vector{Vector{Int}} = []\n    brackets = string.split(\"\
    [\")\n    stack[1] = brackets\n    i = 0\n    while i < length(brackets)\n   \
    \     push!(stack, [])\n        push!(stack, brackets[i+1])\n        i += 1\n\
    \    end\n    if stack[1][1] == []\n        return true\n    else\n        return\
    \ false\n    end\nend", "    string::String = strip(string)\n    char::Char\n\
    \    nested::Bool\n    i = 0\n    has_open_bracket::Bool\n    while i < length(string)\
    \ {\n        char = string(i, 1)\n        has_open_bracket = open_bracket(char)\n\
    \        nested = closed_bracket(char)\n        if has_open_bracket == nested\
    \ {\n            i += 1\n            continue\n        } else if has_open_bracket\
    \ == false {\n            return false\n        } else if nested == true {\n \
    \           return true\n        } else if has_open_bracket == true {\n      \
    \      i += 1\n        }\n    }\n    return false\n    \"\"\"\n    Create a function\
    \ that takes a string as input which contains only square brackets.\n    The function\
    \ should return true if and only if there is a valid subsequence of brackets \n\
    \    where at least one bracket in the subsequence is nested.", "        \n  \
    \      #Create empty list\n        bracketList::Array{Bool,1}=[]\n        \n \
    \       #Create for loop to iterate through the string\n        for character\
    \ in string\n            if character==\"[\" #If character is a left square bracket\
    \ add it to the list\n                push!(bracketList,True)\n            end\n\
    \            if character==\"]\" #If character is a right square bracket remove\
    \ it from the list\n                pop!(bracketList)\n            end\n     \
    \   end\n        \n        #Check if all values in the bracketList are true\n\
    \        #If they are all true return true\n        #If there are any false values\
    \ in the bracketList return false\n        return (all(bracketList))\n    end\n\
    </cell>\n<code language=julia-1.6>\n\"\"\"\n    Create a function that takes a\
    \ string as input which contains only curly brackets.\n    The function should\
    \ return true if and only if there is a valid subsequence of brackets \n    where\
    \ at least one bracket in the subsequence is nested.", "    if is_empty(string)\
    \ == true\n        return false\n    else \n        if is_empty(string) == false\n\
    \            for i,x in enumerate(string)\n                if x == '['\n     \
    \               temp = string[i:]\n                    if is_empty(temp) == true\n\
    \                        return true\n                    else \n            \
    \            return false\n                if x == ']'\n                    temp\
    \ = string[i+1::]\n                    if is_empty(temp) == true\n           \
    \             return true\n                    else \n                       \
    \ return false\n                if x == '{' \n                    temp = string[i+1::]\n\
    \                    if is_empty(temp) == true\n                        return\
    \ true\n                    else \n                        return false\n    \
    \            if x == '}' \n                    temp = string[i+1::]\n        \
    \            if is_empty(temp) == true\n                        return true\n\
    \                    else \n                        return false\n           \
    \     if x == '(' \n                    temp = string[i+1::]\n               \
    \     if is_empty(temp) == true\n                        return true\n       \
    \             else \n                        return false\n                if\
    \ x == ')' \n                    temp = string[i+1::]\n                    if\
    \ is_empty(temp) == true\n                        return true\n              \
    \      else \n                        return false\n                end\n    \
    \    end\n    return false\n    end\n</code>\n<|/ q |>\n<| c |>\nWhat have you\
    \ tried so far and where are you stuck? If you just need pointers, have a look\
    \ at [this tutorial](http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-046j-introduction-to-algorithms-sma-5503-fall-2005/video-lectures/lecture-6-23-lecture-6-sorting-algorithms-and-data-structures/).\n\
    <|/ c |>\n<| c |>\ni think i would start by thinking of what are the rules for\
    \ a string like \"[[[[[]]]]]\" to be a valid subsequence.\n<|/ c |>\n<| c |>\n\
    yeah i think i would start by thinking of what are the rules for a string like\
    \ \"[[[[[]]]]]\" to be a valid subsequence. I'm stuck with this problem for almost\
    \ a week. I'm thinking of starting with the basics of brute force and trying to\
    \ write a recursive function which doesn't terminate but still works.\n<|/ c |>\n\
    <| c |>\nPlease add your code to your question!\n<|/ c |>\n<| c |>\nokay i'll\
    \ post the codes right away\n<|/ c |>\n<| a |>\nAs has been mentioned, there are\
    \ a couple of good algorithms for this.\nOne would be to use recursion.  You would\
    \ want to keep track of the size of the sequence that you are currently checking.\
    \  When your string is empty or you have reached the end of your sequence, you\
    \ return ", "        string == string & \"[]\"\n</code>\n<|/ a |>\n<| a tags=string,python\
    \ |>\nI wanted to do the same thing and found a solution to this on StackOverflow\
    \ using recursion, without using any libraries (which I think is better in general).\
    \ The idea is to use recursion to count the number of square brackets in the string,\
    \ then compare that number with the length of the string minus one to see if all\
    \ brackets are in the string. \n<code>\ndef check_bracket(string):\n    #This\
    \ function returns True or False depending on whether or not \n    #the string\
    \ contains at least one set of brackets\n    #Input: String to be checked\n  \
    \  #Output: Boolean True or False\n    count_brackets = 0\n    length = len(string)\n\
    \    if length > 0:\n        #This if statement checks if the first character\
    \ is equal to a bracket\n        #If the first character in the string is equal\
    \ to bracket, then it\n        #will increment the number of brackets by one\n\
    \        if string[0] == \"[\":\n            count_brackets += 1\n        if string[len(string)-1]\
    \ == \"]\":\n            count_brackets -= 1\n        string = string[1:len(string)-1]\n\
    \        check_bracket(string)\n    else:\n        #If the first character in\
    \ the string is equal to bracket, then\n        #it will check how many brackets\
    \ are in the string and compare\n        #it to the number of brackets\n     \
    \   if count_brackets == 0:\n            return True\n        else:\n        \
    \    return False\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\ndef is_nested(string):\n\
    \    count = 0\n    for item in string:\n        if item == '[':\n           \
    \ count += 1\n        elif item == ']':\n            count -= 1\n    return count\
    \ > 0\n</code>\n<|/ a tags=string,python |>\n<| a dscore=0 tags=string,python\
    \ |>\nThis doesn't use any library:\n<code>\ndef check(s):\n    stack = []\n \
    \   count = 0\n    for c in s:\n        if c == '[':\n            stack.append(c)\n\
    \        elif c == ']':\n            stack.pop(c)\n            count -= 1\n  \
    \          if count == 0:\n                return count > 0\n            count\
    \ = stack[-1]\n    return count > 0", "    string = '[' + string + ']'\n    let\
    \ brackets = read_brackets(string)\n    matches = (read_brackets(string) == brackets)\n\
    \    return matches\nend\n</cell>\n<cell>\nis_nested(\"[]][]\")\n</cell>\n<cell>\n\
    is_nested(\"[[]]\")\n</cell>\n<cell>\nis_nested(\"[[][]]\")\n</cell>\n<text>\n\
    Exercise:", "  stack = Set()\n  for char in string:\n    if char == \"[\":\n \
    \     stack.insert(char)\n    elif char == \"]\":\n      top = stack.pop()\n \
    \     if top != \"[\":\n        return False\n  return True\nend\n</cell>\n<code\
    \ language=julia-1.5>\nis_nested(\"[[]]\")\n</cell>\n<code language=julia-1.5>\n\
    is_nested(\"[][]\")\n</cell>\n<code language=julia-1.5>\nis_nested(\"[]\")\n</cell>\n\
    <code language=julia-1.5>\nis_nested(\"[[][]]\")\n</cell>\n<code language=julia-1.5>\n\
    is_nested(\"[[]][[\")\n</cell>\n<text>\nExercise\nUse a stack data structure to\
    \ determine whether a string is balanced.", "    if is_empty_string(string)\n\
    \        return false\n    stack = []\n    for c in string\n        if c != \"\
    ]\" \n            stack::push(c)\n        else\n            if stack.length >\
    \ 0\n                if stack[stack.length-1] != \"]\"\n                    stack::pop()\n\
    \                else\n                    stack::pop()\n            end\n   \
    \     end\n    end\n    if stack.length > 0\n        false\n    else\n       \
    \ true\n    end\nend\n</cell>\n<code language=julia-1.5>\nis_nested(\"[]]\")\n\
    </cell>\n<code language=julia-1.5>\nis_nested(\"[[]][][]\")\n</cell>\n<code language=julia-1.5>\n\
    is_nested(\"[[]][][[]][][[]][][][[]][][[]][][[]][][[]][][[]][][[]][][[]][][[]][][[]][]\"\
    )\n</cell>\n<code language=julia-1.5>\nis_nested(\"[[]][][[]][][[]][][[]][][[]][][[]][][[]][][[]][][[]][][[]][][[]][][[]][][[]][][[]][][[]][][[]][][[]][][[]][][[]][][[]][][[]][][[]][][[]][][[]][][[]][][[]][][[]][][[]][][[]][][[]][][[]][][[]][][[]][][[]][][[]][][[]][][[]][][[]][][[]][][[]][][[]][][[]][][[]][][[]][][[]][][[]][][[]][][[]][][[]][][[]][][[]][][[]][][[]][][[]][][[]][][[]][][[]][][[]][][[]][][[]][][[]][][[]][][[]][][[]][][[]][][[]][][[]][][[]][][[]][][[]][][[]][][[]][][[]][][[]][][[]][][[]][][[]][][[]][][[]][][",
  "    if is_empty(string)\n        return true\n    str = substring(string, 0, length(string))\n\
    \    if str == \"[\" || str == \"{\" || str == \"(\" || str == \"[\"\n       \
    \ return true\n    if str == \"]\" || str == \"}\" || str == \")\" || str == \"\
    }\"\n        return true\n    return false\nend", "    string == string & \"]\"\
    \n    ", "    if is_bracket(string) == false\n    then false\n    else is_nested(subsequence(string,\
    \ 0, 1))\nend", "</code>\n<code>\n\"\"\"\n    Create a function that takes a string\
    \ as input which contains only round brackets.\n    The function should return\
    \ true if and only if there is a valid subsequence of brackets \n    where at\
    \ least one bracket in the subsequence is nested.", "    string = string::String\
    \ \n    for i in string:\n        match i {\n            \"[\" => true\n     \
    \       \"]\" => true\n            \"{\" => true\n            \"}\" => true\n\
    \        }\n    return false\nend\n</cell>\n<code language=julia-1.5>", "\"\"\"\
    \n    Check if the brackets string is valid.", "    local opens, closes = set(),\
    \ set()\n    local i::Int64 = 1\n    while i < string.length do\n        if string.charAt(i)\
    \ == \"]\" then\n            closes.add(i)\n        elseif string.charAt(i) ==\
    \ \"[\" then\n            opens.add(i)\n        elseif opens and closes then\n\
    \            local open = opens.pop()\n            if closes and open == closes.pop()\
    \ then\n                return true\n            end\n        end\n        i =\
    \ i + 1\n    end\n    return false\nend\n</cell>\n<text>\nExercise 3.2", "   \
    \ if is_bracket(string) == false \n        false\n    else if is_bracket(string)\
    \ == true \n        true\n    else if is_bracket(string) == false \n        if\
    \ is_square_bracket(string) == false \n            false\n        else\n     \
    \       true\n    end\nend", "    if string.count(\"]\") == string.count(\"[\"\
    ):\n        return true\n    return false\n</cell>\n<text>\n6. Question - what\
    \ is the result of running the following code?", "    stack::Vector{Char} = Stack()\n\
    \    for i in string:\n        if i == \"[\":\n            push!(stack, \"[\"\
    )\n        elif i == \"]\":\n            if length(stack) == 1 or pop!(stack)\
    \ == \"]\":\n                return false\n            push!(stack, \"]\")\n \
    \       else:\n            if length(stack) == 0 or pop!(stack) != i:\n      \
    \          return false\n    true\nend\n</cell>\n<code language=julia-1.0>\nis_nested(\"\

  "    \n    if is_empty(string) or has_non_empty_brackets(string) == false\n    \
    \    return True\n    \n    pos = 1\n    open_count = 1\n    close_count = 0\n\
    \    while has_non_empty_brackets(string) != false && pos < string.length\n  \
    \      if string[pos] == '['\n            open_count += 1 \n            pos +=\
    \ 1\n        \n        elif string[pos] == ']'\n            close_count += 1\n\
    \            pos += 1\n        \n        else\n            if close_count == open_count\n\
    \                return false\n            close_count = open_count\n        \
    \    pos += 1\n            open_count = 1\n            \n    endwhile\n    \n\
    \    if close_count != open_count\n        return false\n    \n    return true\n\
    \    \"\"\"\n</cell>\n<code language=julia-1.5>\nis_nested(\"[[]]\")\n</cell>\n\
    <code language=julia-1.5>\nis_nested(\"[]]]]]]][[[[[]\")\n</cell>\n<code language=julia-1.5>\n\
    is_nested(\"[][]\")\n</cell>\n<code language=julia-1.5>\nis_nested(\"[]\")\n</cell>\n\
    <code language=julia-1.5>\nis_nested(\"[[][]]\")\n</cell>\n<code language=julia-1.5>\n\
    is_nested(\"[[]][[\")\n</cell>\n<text>\nQuestion 7.7. Write a function is_bracketing_string(string::String)\
    \ which takes in a string and returns a Boolean indicating whether it is bracketing\
    \ or not.", "    stack <- Stack()\n    for ch in string \n        stack.push(ch)\n\
    \        if ch == \"[\" \n            stack.push(\"[\")\n        elif ch == \"\
    ]\" \n            stack.push(\"]\")\n        else if stack.length() == 0 \n  \
    \          return false\n        else if stack.pop() == \"[\" \n            stack.push(\"\
    [\")\n        else if stack.pop() == \"]\" \n            stack.push(\"]\")\n \
    \       else if stack.length() == 0\n            return false\n    return true\n\
    end", "    \n    for char in string:\n        if char in \"[]\" then return false\n\
    \    return true", "\"\"\"\n    Create a function that takes a string as input\
    \ and checks whether it has a valid nested \n    brackets sequence (i.e. the function\
    \ should return true if and only if there is a valid \n    subsequence of brackets\
    \ where at least one bracket in the subsequence is nested).", "    \"\"\"\n  \
    \  Define a function that checks whether a string contains only square brackets.\n\
    \    \n    >>> is_nested(\"[[]]\")\n    true\n    >>> is_nested(\"[]]]]]]][[[[[]\"\
    )\n    false\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\"\
    )\n    false\n    >>> is_nested(\"[[][]]\")\n    true\n    >>> is_nested(\"[[]][[\"\
    )\n    true\n    \"\"\"\n    open Bracket, Bracket <- [\"[\", \"]\"]\n    let\
    \ result = (\n        string |> String.index (index::Int) = \n        if index\
    \ == 0 then true else \n            string.[index - 1] = Bracket\n    )\n    result\n\
    end\n</code>\nA few remarks:", "    if is_empty(string)\n        false\n    else\
    \ if string[0]==\"[\"\n        is_nested(string[1:end])\n    else if string[0]==\"\
    ]\"\n        is_nested(string[1:end])\n    else\n        false\n    end\nend\n\
    </cell>\n<text>\n3.2. Remove nested brackets", "    \"\"\"\n    Create a function\
    \ that takes a string as input which contains only square brackets.\n    The function\
    \ should return true if and only if there is a valid subsequence of brackets \n\
    \    where at least one bracket in the subsequence is nested.", "    stack ::\
    \ Vector Char\n    count = 0 \n    push! stack, ']'\n    while !isempty(stack)\n\
    \        if stack[count] == ']'\n            return true\n        elseif stack[count]\
    \ == '['\n            if !is_nested(string)\n                return false\n  \
    \          end\n            push! stack, ']'\n        elseif stack[count] == '{'\
    \ # this is to ignore brackets inside brackets\n            if !is_nested(string)\n\
    \                return false\n            end\n            push! stack, '}'\n\
    \        else\n            push! stack, stack[count]\n        end\n        count+=1\n\
    \    end\n    return true\nend \"\"\"", "    if is_empty(string): return true\n\
    \    var open = open :: Int\n    var close = close :: Int\n    var stack = stack\
    \ :: Int[]\n    var pos = pos :: Int\n    for c in string.characters\n       \
    \ if c == '['\n            open += 1\n            stack.append(c)\n        if\
    \ c == ']'\n            close += 1\n            if open > close: return false\n\
    \            if close == open\n                stack[stack.length - 1] = '{'\n\
    \                if pos < stack.length - 1\n                    and stack[pos]\
    \ == '{'\n                    stack.pop()\n                    pos += 1\n    \
    \            else\n                    return false\n            if open < close\n\
    \                and stack[open - 1] == '{' \n                and close > open\
    \ - pos\n                and stack[pos] == '}'\n                open -= 1\n  \
    \          else\n                return false\n    for i = open to close - 1\n\
    \        if stack[i] != '{'\n            return false\n    return true\nend",
  "    if is_empty(string)\n        return true\n    else\n        bracket_count =\
    \ count_bracket(string)\n        if bracket_count == 0\n            return false\n\
    \        else\n            index = -1\n            while index != 0\n        \
    \        index = get_next_bracket(string)\n                if index == 0\n   \
    \                 return false\n                elseif index > 0\n           \
    \         return true\n                else\n                    string := sub_bracket_index(string,\
    \ index)\n                    if is_empty(string)\n                        return\
    \ false\n                end\n            end\n        end\n    end\nend\n</code>\n\
    Function count_bracket(string) will count the number of open and closing brackets\
    \ present in the string.\nFunction sub_bracket_index(string, index) will find\
    \ the next index of the closing bracket starting from index position in the string.\n\
    The function get_next_bracket(string) returns the index of the next bracket in\
    \ string.\nThe function get_next_bracket(string) returns the index of the next\
    \ bracket in string.\nThe function sub_bracket_index(string, index) will find\
    \ the next index of the closing bracket starting from index position in the string.\n\
    The function get_next_bracket(string) returns the index of the next bracket in\
    \ string.\nThe function get_next_bracket(string) returns the index of the next\
    \ bracket in string.\nThe function sub_bracket_index(string, index) will find\
    \ the next index of the closing bracket starting from index position in the string.\n\
    The function get_next_bracket(string) returns the index of the next bracket in\
    \ string.\nThe function get_next_bracket(string) returns the index of the next\
    \ bracket in string.\nThe function sub_bracket_index(string, index) will find\
    \ the next index of the closing bracket starting from index position in the string.\n\
    The function get_next_bracket(string) returns the index of the next bracket in\
    \ string.\nThe function get_next_bracket(string) returns the index of the next\
    \ bracket in string.\nThe function sub_bracket_index(string, index) will find\
    \ the next index of the closing bracket starting from index position in the string.\n\
    The function get_next_bracket(string) returns the index of the next bracket in\
    \ string.\nThe function get_next_bracket(string) returns the index of the next\
    \ bracket in string.\nThe function sub_bracket_index(string, index) will find\
    \ the next index of the closing bracket starting from index position in the string.\n\
    The function get_next_bracket(string) returns the index of the next bracket in\
    \ string.\nThe function get_next_bracket(string) returns the index of the next\
    \ bracket in string.\nThe function sub_bracket_index(string, index) will find\
    \ the next index of the closing bracket starting from index position in the string.\n\
    The function get_next_bracket(string) returns the index of the next bracket in\
    \ string.\nThe function get_next_bracket(string) returns the index of the next\
    \ bracket in string.\nThe function sub_bracket_index(string, index) will find\
    \ the next index of the closing bra", "    if is_empty(string)\n        false\n\
    \    else\n        contains_bracket(string)", "    \"\"\"\n    Check if a string\
    \ has at least a closing bracket\n    \"\"\"\n\"\"\"\n    Define a function that\
    \ takes an array of strings as input as defined in the docstrings.\n    The function\
    \ should return a boolean array containing the results of each call to\n    `is_nested`\
    \ for each of the strings in the array. An element of the array is true if and\
    \ only if\n    there is a valid subsequence of brackets where at least one bracket\
    \ in the subsequence is nested. \n    >>> is_nested([\"[[]]\", \"[]]]]]]][[[[[]\"\
    , \"[][]\", \"[]\"]]\n    array([ True,  True,  True,  True], dtype=bool)\n  \
    \  >>> is_nested([\"[][]\", \"[[][]]\", \"[]\"])\n    array([False,  True,  True],\
    \ dtype=bool)\n    >>> is_nested([\"[]\", \"[[]]\"])\n    array([False,  True],\
    \ dtype=bool)\n    >>> is_nested([\"[[][]]\"])\n    array([ True], dtype=bool)\n\
    \    \"\"\"", "    |[[]]| \n    |[][]]|\n    |[]| \n    |[[][]]|\n    |[[]][[|]]\
    \ \n    |[[]][[ |]] \n    |[[]][[[]]]|\n    |[[]][[[[]]]]|\n    |[[]][[[[[]]]]]]\n\
    \    |[[]][[[[[]]]][[]]]\n    |[[]][[[[[]]]][[]]][]\n    |[[]][[[[[]]]][[]]][][]\n\
    \    |[[]][[[[[]]]][[]]][][][]\n    |[[]][[[[[]]]][[]]][][][][]\n    |[[]][[[[[]]]][[]]][][][][][][]\n\
    \    |[[]][[[[[]]]][[]]][][][][][][][][][][][][][][]\n    |
  "     string = string.strip()\n     for i in string.split(\"[[[]\")\n         if\
    \ i == '[][][]]][[[[]'\n             return true\n     for i in string.split(\"\
    [][]\")\n         if i == '[][]]][[[[]'\n             return true\n     for i\
    \ in string.split(\"[]\")\n         if i == '[][][]]][[[[]'\n             return\
    \ true\n     for i in string.split(\"[[[][]\")\n         if i == '[][][]]][[[[]'\n\
    \             return true\n     for i in string.split(\"[[[]][[\")\n         if\
    \ i == '[][][]]][[[[]'\n             return true\n     for i in string.split(\"\
    [][][]\")\n         if i == '[][][]]][[[[]'\n             return true\n     for\
    \ i in string.split(\"[][]\")\n         if i == '[][][]]][[[[]'\n            \
    \ return true\n     for i in string.split(\"[[[][][]\")\n         if i == '[][][]]][[[[]'\n\
    \             return true\n     for i in string.split(\"[[[][]][[\")\n       \
    \  if i == '[][][]]][[[[]'\n             return true\n     for i in string.split(\"\
    [][][][]\")\n         if i == '[][][]]][[[[]'\n             return true\n    \
    \ for i in string.split(\"[][][]\")\n         if i == '[][][]]][[[[]'\n      \
    \       return true\n     for i in string.split(\"[[[][][][]\")\n         if i\
    \ == '[][][]]][[[[]'\n             return true\n     for i in string.split(\"\
    [[[][][][][]\")\n         if i == '[][][]]][[[[]'\n             return true\n\
    \     for i in string.split(\"[[[][][][][][]\")\n         if i == '[][][]]][[[[]'\n\
    \             return true\n     for i in string.split(\"[[[][][][][][][]\")\n\
    \         if i == '[][][]]][[[[]'\n             return true\n     for i in string.split(\"\
    [[[][][][][][][][]\")\n         if i == '[][][]]][[[[]'\n             return true\n\
    \     for i in string.split(\"[[[][][][][][][][][]\")\n         if i == '[][][]]][[[[]'\n\
    \             return true\n     for i in string.split(\"[[[][][][][][][][][][]\"\
    )\n         if i == '[][][]]][[[[]'\n             return true\n     for i in string.split(\"\
    [[", "    | length string == 0 -> false\n    | otherwise       -> \n        if\
    \ string first character == '[' then \n            if string last character ==\
    \ ']' then \n                true \n            else \n                is_nested\
    \ (string[1..(length(string)-1)])\n        else \n            is_nested (string[1..(length(string)-1)])\n\
    </code>\n<|/ a tags=recursion,scala |>\n<| c |>\nYou should change your `is_nested`\
    \ function to `is_nested (string[1..(length(string)-1)])`\n<|/ c |>\n<| c |>\n\
    Thanks, I fixed it\n<|/ c |>\n<| a tags=recursion,scala |>\nThe answer by Ilya\
    \ Bursov above is great but doesn't quite work for me. It has a bug when there\
    \ are multiple nested brackets.\n<code>\ndef validBrackets(str: String): Boolean\
    \ = str.trim.dropRight(1).drop(1).exists(str match {\n    case c if c == '[' =>\
    \ true\n    case c if c == ']' => true\n    case c => false\n  })\n</code>\nThis\
    \ solution also doesn't allow for nested brackets (like [[[[]][]]]).\n<|/ a dscore=2\
    \ |>\n<| a tags=recursion,scala dscore=0 |>\nThis is a good example where using\
    \ pattern matching will be very efficient.\n<code>\nval string = \"[]\"", "  \
    \  \n\"\"\"\n    Create a function that takes a string as input which contains\
    \ only brackets.\n    The function should return true if and only if there is\
    \ a valid subsequence brackets \n    where at least one bracket in the subsequence\
    \ is nested.", "\"\"\"\n    Create a function that takes a string as input and\
    \ returns a boolean indicating whether or not\n    there is a nested subsequence\
    \ of the form [[]] in the string.", "    if is_empty(string): return false\n \
    \   if length(string)==1: return true\n    return is_nested(string[1:length(string)-1])",
  "    if is_empty(string)\n        false\n    else\n        if string[0] != \"[\"\
    \ \n            false\n        else\n            if string[-1] != \"]\" \n   \
    \             false\n            else\n                if !is_nested(string[1..-1])\n\
    \                    false\n                else\n                    true\n \
    \               end\n            end\n        end\n    end\nend\n</cell>\n<text>\n\
    Problem 3\nA company has hired you to make a function which takes as input the\
    \ string of a math expression and returns true or false depending on whether the\
    \ expression can be evaluated using only multiplication and addition. \nYour function\
    \ should take as input a string of any length, and output a Boolean value.", " \
    \   \n    brackets_stack = Stack[String]([])\n    i = 0\n    for character in\
    \ string do \n        if character == '[' \n            brackets_stack.push(character)\n\
    \        elif character == ']' \n            brackets_stack.pop() \n        else\
    \ \n            brackets_stack.pop() \n            brackets_stack.push(character)\n\
    \            \n        if brackets_stack.size == 0 or brackets_stack.size < 1\
    \ then \n            return false\n        end \n        i += 1\n    end \n  \
    \  return true\nend ", "    \"\"\"\n    Create a function that takes a string\
    \ as input which contains only square brackets.\n    The function should return\
    \ true if and only if there is a valid subsequence of brackets \n    where at\
    \ least one bracket in the subsequence is nested.", "    # Write your code here.\n\
    \    stack = []\n    for c in string:\n        if c == '[':\n            stack.append(c)\n\
    \        elif c == ']':\n            if len(stack) == 0:\n                return\
    \ False\n            if stack.pop() != '[':\n                return False\n  \
    \      elif c == '\\\\':\n            if len(stack) == 0:\n                return\
    \ False\n            if stack.pop() != '\\\\':\n                return False\n\
    \        elif c == '{':\n            if len(stack) == 0:\n                return\
    \ False\n            if stack.pop() != '{':\n                return False\n  \
    \      elif c == '}':\n            if len(stack) == 0:\n                return\
    \ False\n            if stack.pop() != '{':\n                return False\n  \
    \  return False", "    \"\"\"\"\n    Create a function that takes a string as\
    \ input which contains only square brackets.\n    The function should return true\
    \ if and only if there is a valid subsequence of brackets \n    where at least\
    \ one bracket in the subsequence is nested.", "    if is_empty(string) then false\n\
    \    else \n        match string[0..-2]\n        | \"[]\" | \"[\" => true\n  \
    \      | _  => false\n        end\n    end\nend\n</code>\nThe above function works\
    \ with the test case provided. For a more comprehensive test case, one could use\
    \ the regex package that comes with Julia:\n<code>\nusing Regexp", "    string\
    \ == brackets_nested(string, 0)\nend\n</cell>\n<code language=julia-1.5>\n\"\"\
    \"\n    Calculate the length of a list of brackets\n\"\"\"", "</code>\n<|/ a tags=recursion,ocaml,functional-programming,python,pattern-matching\
    \ |>\n<| a tags=recursion,ocaml,functional-programming,python,pattern-matching\
    \ |>\nMy solution:\n<code>\ndef check_brackets(string):\n    open_brackets = [i\
    \ for i in range(len(string)) if string[i] == '[']\n    close_brackets = [i for\
    \ i in range(len(string)) if string[i] == ']']\n    open_brackets_counter = 0\n\
    \    close_brackets_counter = 0\n    for i in open_brackets:\n        if string[i-1:i+1]\
    \ == ']':\n            open_brackets_counter += 1\n        if string[i-1:i+1]\
    \ == '[':\n            close_brackets_counter += 1\n    if open_brackets_counter\
    \ > close_brackets_counter:\n        return True\n    else:\n        return False\n\
    </code>\n<|/ a dscore=2 |>\n<| a dscore=2 tags=recursion,ocaml,functional-programming,python,pattern-matching\
    \ |>\nHere is a O(n) solution in OCaml:\n<code>\nlet rec nested str =\n    let\
    \ rec loop i count =\n        match i with\n        | i when i = str.Length ->\
    \ (count > 0) -> true\n        | i when str(i) = ']' -> (loop i + 1 count - 1)\n\
    \        | i when str(i) = ']'->(loop i count+1)\n        | i when str(i) = ']'->(loop\
    \ i + 1 count)\n        | _ -> loop i+1 (count+1)\n    in\n    loop 0 0", "  \
    \  \"\"\" Create a function that takes a string as input which contains only square\
    \ brackets.\n    The function should return true if and only if there is a valid\
    \ subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.", "    if is_empty(string): return false \n    else if string_length(string)\
    \ == 0: return false\n    else if string_length(string) == 1: return true\n  \
    \  else if string_length(string(1:string_length(string)-1)) == 0\n        return\
    \ is_nested(string)\n    else if string_length(string(1:string_length(string)-1))\
    \ > 0\n        return is_nested(string)\n    else if string(1:string_length(string)-1)\
    \ match '[' ||\n        string(1:string_length(string)-1) match '(' || \n    \
    \    string(1:string_length(string)-1) match '{' || \n        string(1:string_length(string)-1)\
    \ match '[' ||\n        string(1:string_length(string)-1) match '{' ||\n     \
    \   string(1:string_length(string)-1) match '{' ||\n        string(1:string_length(string)-1)\
    \ match '(' ||\n        string(1:string_length(string)-1) match '[' ||\n     \
    \   string(1:string_length(string)-1) match '{' ||\n        string(1:string_length(string)-1)\
    \ match '[' ||\n        string(1:string_length(string)-1) match '{' ||\n     \
    \   string(1:string_length(string)-1) match '{' ||\n        string(1:string_length(string)-1)\
    \ match '('\n        return is_nested(string)\n    end\n    else \n        return\
    \ false\n    end\nend\n</code>\n<|/ a tags=string,pattern-matching,ocaml,recursion\
    \ |>\n<| a dscore=0 |>\n<code>\nlet is_nested s = \n    let rec aux str = match\
    \ str with\n    | [] -> false\n    | x :: xs -> if List.length xs = 1 && \n  \
    \               xs |> List.nth (-1) = List.nth 0 then true else aux xs \n    in\n\
    \    aux s \n</code>\n<|/ a tags=string,pattern-matching,ocaml,recursion |>\n\
    <| a dscore=0 |>\n<code>\nlet brackets s =  match s with\n    |_ -> false\n  \
    \  |_ -> true \n    ;;\n</code>\n<|/ a tags=string,pattern-matching,ocaml,recursion\
    \ |>\n<| a dscore=0 |>\n<code>\nlet bracket_check str = \n   match str with\n\
    \   | [] -> false\n   | x :: xs -> match xs with\n               | [] -> false\n\
    \               | y::ys -> if List.length xs = 0 && List.length ys = 0 then true\
    \ else bracket_check ys\n               | _::_ -> false\n               | _::_::_\
    \ -> false\n               | ", "    matches::Set{String}= Set()\n    let stack=Stack{String}([])\n\
    \    \n    for symbol in string:\n        if symbol==\"[\" {\n            stack.push(\"\
    [\")\n            matches.add(string)\n        }\n        if symbol==\"]\" {\n\
    \            if stack.pop(\"[\") == \"]\" {\n                matches.add(string)\n\
    \            }\n        }\n    end\n    matches == Set(string)\nend\n</cell>\n\
    <code language=julia-1.6>", "    string == string.replace(\"[]\", \"[][]\")\n\
    end\n</cell>\n<code language=julia-0.5>\n\"\"\"\n    Create a function that takes\
    \ a string as input which contains only square brackets.\n    The function should\
    \ return true if and only if there is a valid subsequence of brackets \n    where\
    \ all brackets in the subsequence are nested.", "    match_string = \"[]\"\n \
    \   regex = Regex(\"\\[\\]\") \n    match = regex.match(string) \n    if match\
    \ == None \n        true\n    else \n        false", "    pos = 0\n    for i in\
    \ string:\n        if i == \"[\"\n            pos += 1\n        elif i == \"]\"\
    \n            pos -= 1\n        if pos < 0\n            false\n        else true\n\
    \    end\nend\n</code>\n<|/ a dscore=1 |>\n<| c |>\nPlease don't post Python code\
    \ in answers. This is not valid python.\n<|/ c |>\n<| a |>\nThe below function\
    \ will return true if any number of brackets exist:\n<code>\ndef isNested(string):\n\
    \    stack = []\n    brackets = 0", "    \n    \"\"\"\n    Write a function that\
    \ takes a string as input which contains only square brackets.\n    The function\
    \ should return true if and only if there is a valid subsequence of brackets \n\
    \    where at least one bracket in the subsequence is nested.", "    if is_empty(string)\n\
    \        false\n    else\n        string_split(string, r\"[[]]+\")\n         \
    \   |> filter(x->(not is_empty(x)) )\n            |> length == 1\n           \
    \ |> not\nend\n</cell>\n<text>\nExercise 4: Write a function that checks if the\
    \ input is a valid IP address\nThe following function checks whether the input\
    \ string is a valid IP address:", "    if is_empty_string(string) \n        return\
    \ false \n    \n    let open_brackets = [0 for i in 0..length(string) - 1 ]\n\
    \    let open_brackets_size = length(open_brackets)\n    \n    let open_brackets_end\
    \ = 0\n    for i in 0..length(string) - 1 do \n        if open_brackets_end >\
    \ open_brackets_size \n            return false \n        if i == 0 and string[i]\
    \ == '[' \n            open_brackets_end += 1 \n            open_brackets[open_brackets_end]\
    \ = 1 \n        else \n            open_brackets[open_brackets_end] += 1 \n  \
    \          open_brackets_end += 1 \n    \n    if open_brackets_end == open_brackets_size\
    \ \n        return true \n    \n    return false ", "    stack = Set{String}()\n\
    \    let rec go depth::Int = \n        if depth > length string \n           \
    \ true \n        else\n            if string[depth] == '[' \n                stack.add(string[depth+1])\n\
    \                go(depth+1)\n            else\n                if string[depth]\
    \ == ']' \n                    stack.remove(string[depth-1])\n               \
    \     if stack.isEmpty == true \n                        true\n              \
    \      else\n                        false\n                else\n           \
    \         false\n    go(0)\nend\n</cell>\n<text>\nProblem 8\nDefine a function\
    \ that removes all the occurrences of some substring from a string.", "    bracket_counter\
    \ = 1\n    bracket_counter = 0\n    for i in string\n        if i == \"[\"\n \
    \           bracket_counter += 1\n        if i == \"[\"\n            bracket_counter\
    \ += 1\n        if i == \"]\"\n            bracket_counter -= 1\n        if bracket_counter\
    \ == 0\n            return true\n    return false\n\"\"\"\n    Create a function\
    \ that takes a string as input which contains only square brackets.\n    The function\
    \ should return true if and only if there is a valid subsequence of brackets \n\
    \    where at least one bracket in the subsequence is nested.", "    \n    if\
    \ string == \"\" \n        then return True\n    else if string[0] == \"[\" \n\
    \        then return is_nested(string[1:end])\n    else if string[end] == \"]\"\
    \ \n        then return is_nested(string[1:end-1])\n    else return False\nend\
    \ function \n</code>\n<|/ a |>\n<| a |>\n<code>", "    stack::List[String]=[]\n\
    \    begin::Int=0 \n    length::Int=string.length\n    loop::Int=0\n    for index\
    \ in 0..length-1 \n        char := string[index]\n        if char == '['\n   \
    \         stack.append(char)\n        if char == ']'\n            if stack.isEmpty\n\
    \                begin::Int=index\n                loop::Int=1\n             \
    \   break\n            if stack[stack.length-1] == '['\n                stack.pop()\n\
    \            end::Int=index\n            loop::Int=1\n            for k in range((begin+1),(end-1))\n\
    \                if string[k] == '['\n                    stack.append(string[k])\n\
    \                if string[k] == ']'\n                    if stack.isEmpty\n \
    \                       begin::Int=index\n                        loop::Int=1\n\
    \                        break\n                    if stack[stack.length-1] ==\
    \ '['\n                        stack.pop()\n                end::Int=index\n \
    \           loop::Int=1\n        if loop == 1\n            return false\n    return\
    \ true", "    \"\"\"check if string contains only square brackets\"\"\"\n    let\
    \ brackets = [\"[\", \"]\"]\n    let bracket_counter = 1\n    let opening = -1\n\
    \    let closing = -1\n    let closed = false", "    return string.count (\"[\"\
    ) > string.count (\"]\")\n\"\"\"\n    is_nested(string::String)", "    if is_empty(string):\n\
    \        return false\n    if string==\"[\"] or string==\"]\":\n        return\
    \ true\n    if string==\"(\"):\n        brackets <- count_brackets(string)\n \
    \       if brackets==1:\n            return true\n    if string==\")\":\n    \
    \    brackets <- count_brackets(string)\n        if brackets==1:\n           \
    \ return true\n    return false\n\"\"\"\n    Convert a String to a nested list\
    \ of Int", "    stack::Vector[Int] = Vector.empty\n    \n    for i,c in enumerate(string):\n\
    \        if c == \"[\" then\n            push!(stack, i)\n        elseif c ==\
    \ \"]\" then\n            if length(stack) == 0 then return false \n         \
    \   \n            let top = stack[length(stack)-1]\n            if top < i then\
    \ return false \n            pop!(stack)\n        elseif c == \"]\" then\n   \
    \         if length(stack) == 0 then return false \n        elseif c == \"[\"\
    \ then\n            if length(stack) == 0 then return false \n        else\n \
    \           stack = []\n        end\n    end\n    true\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Create a function that takes a string as input and outputs a vector\
    \ of integers\n    corresponding to the numbers of opening brackets within a string.",
  "</code>\n<|/ a dscore=3 tags=string,python |>\n<| c |>\nThis was very helpful and\
    \ I got it to work. Thank you so much!\n<|/ c |>\n<| a |>\nA recursive solution\
    \ that also works on nested bracketed strings:\n<code>\ndef contains_nested(s:\
    \ str) -> bool:\n    s = s.replace(\"[\", \"\")\n    s = s.replace(\"]\", \"\"\
    )\n    if s == '':\n        return True\n    else:\n        return contains_nested(s[1:-1])\
    \ or contains_nested(s[:-1] + s[1:-1]) or contains_nested(s[:-1] + s)", "    if\
    \ is_empty(string)\n        true\n    else if is_open_bracket(string)\n      \
    \  is_nested(string[1..length(string)])\n    else if is_close_bracket(string)\n\
    \        is_nested(string[1..length(string)])\n    else\n        false\nend\n\
    </cell>\n<code language=julia-1.0>\n# TEST is_nested (6a)\n\"\"\"\n`is_nested`\
    \ should return true if the first `is_open_bracket` call returns a boolean \n\
    value and the second `is_open_bracket` call returns a boolean value and both are\
    \ true.\n\"\"\"\nassert(is_nested(\"[]\"))\nassert(is_nested(\"[[]]\"))\nassert(is_nested(\"\
    [][]\"))\nassert(is_nested(\"[]\"))\nassert(is_nested(\"[[][]]\"))\nassert(is_nested(\"\
    [[]][[\"))\n</cell>\n<code language=julia-1.0>", "    if is_empty_string(string):\
    \ return false\n    let openings = string::String.characters().filter(|c|c==\"\
    [\").collect::<Vec<_>>()\n    let closings = string::String.characters().filter(|c|c==\"\
    ]\").collect::<Vec<_>>()\n    let brackets = (openings + closings).filter(bracket).collect::<Vec<_>>()\n\
    \    if brackets.filter(|b|!is_nested(b)).count() == brackets.count() return true\n\
    \    return false\nend \n</cell>\n<code language=julia-1.6>\nis_nested(\"[[]]\"\
    )\n</cell>\n<text>\nExercise\nLet's write a function that counts the number of\
    \ square brackets in a given string.", "    if is_empty(string)\n        true\n\
    \    else\n        for character in string\n            if not is_bracket(character)\n\
    \                false\n            else \n                if has_nested_bracket(string)\n\
    \                    true\n                else\n                    false\n \
    \   end\nend\n</code>\n<|/ a |>\n<| a |>\nHere is my version\n<code>\ndef is_nested(string):\n\
    \    opening_brackets = {'[', '{', '('}\n    closing_brackets = {')', '}', '}'}\
    \ \n    for char in string:\n        if not char in opening_brackets:\n      \
    \      return False\n        else:\n            if char == ')':\n            \
    \    closing_brackets.pop()\n                continue\n            elif char ==\
    \ '}':\n                opening_brackets.pop()\n                continue\n   \
    \         elif char == '(':\n                opening_brackets.pop()\n        \
    \        continue\n            elif char in opening_brackets:\n              \
    \  opening_brackets[char]", "        \n    # Write your code in Python 3.7 style\n\
    \    i = 0\n    j = 0\n    open_count = 0\n    close_count = 0\n    string_list\
    \ = string.split(\" \")\n    \n    for char in string_list[0]:\n        if char\
    \ == \"[\":\n            open_count += 1\n        elif char == \"]\":\n      \
    \      close_count += 1\n    \n    if open_count >= close_count:\n        return\
    \ True\n    else:\n        return False", "\"\"\"\n    is_nested(string::String)::Bool\n\
    \    Check if a string is nested brackets notation\n\"\"\"\n    len = string.length\n\
    \    bracketCount = 0\n    idx = 0\n    while idx < len\n        if string[idx]\
    \ == '['\n            bracketCount += 1\n        elif string[idx] == ']'\n   \
    \         bracketCount -= 1\n            if bracketCount < 0\n               \
    \ return false\n        endIndex = idx+1\n        while endIndex < len\n     \
    \       if string[endIndex] == '['\n                bracketCount += 1\n      \
    \      elif string[endIndex] == ']'\n                bracketCount -= 1\n     \
    \           if bracketCount < 0\n                    return false\n          \
    \      endIndex += 1\n            endIndex += 1\n        endIndex += 1\n     \
    \   endIndex += 1\n        idx += 1\n    return bracketCount == 0\nend", "   \
    \ if is_empty(string)\n        true \n    else \n        not any((c == \"[\" and\
    \ find_closing_bracket(string, i) == i or c == \"]\" and find_opening_bracket(string,\
    \ i) == i) \\\n            for (i,c) in enumerate(cycle(string)))", "        \n\
    \    return \n</cell>\n<text>\nThe is_nested function is called is_nested_correct.\
    \ \nIt should take a string as input which contains only square brackets.", " \
    \   if string.count(']') == string.count('[')\n        true\n    else\n      \
    \  false\n    end\nend\n</cell>\n<code language=julia-1.5>\n@testset \"is_nested\"\
    \ begin\n    strings = [\n        \"[]\", \n        \"[[]\", \n        \"[][]]\"\
    , \n        \"[[]]\", \n        \"[[][]]\", \n        \"[[][]]]]\", \n       \
    \ \"[[[]]\", \n        \"[[[]][]]\", \n        \"[[[]]]]]]\", \n        \"[][]\"\
    , \n        \"[][][]\", \n        \"[[][][]]\", \n        \"[[[][][]]]\", \n \
    \       \"[[][][]][][]]\", \n        \"[][][][][][][][][][][][][][][][][]\", \n\

  "    string match \n        \"[]\" => \"true\" \n        \"[^[]*[]\" => \"true\"\
    \ \n        \".*\" => \"false\" \n        \"\" => \"false\" \n        _ => \"\
    unknown\" \n    end\nend ", "        if is_empty(string) then false else (is_bracket(string[1])\
    \ || is_bracket(string[end]))\n    end \nend\n</cell>\n<code language=julia-1.1>\n\
    \"\"\"\n    Check whether a string consists only of brackets.\n    \n    >>> is_bracket(\"\
    []\")\n    true\n    >>> is_bracket(\"[[]\")\n    false\n    >>> is_bracket(\"\
    [][]\")\n    false\n    >>> is_bracket(\"[]\")\n    false\n    >>> is_bracket(\"\
    [[][]\")\n    false\n    \"\"\"", "    \"\"\"\n    Create a function that takes\
    \ a string as input which contains only square brackets.\n    The function should\
    \ return true if and only if there is a valid subsequence of brackets \n    where\
    \ at least one bracket in the subsequence is nested.", "    if is_empty(string)\n\
    \        true\n    else\n        if string == \"[]\"\n            true\n     \
    \   else\n            if string[1::1] == \"[]\"\n                true\n      \
    \      else\n                false\n        end\n    end\nend\n</cell>\n<text>\n\
    Exercise 9", "        if is_nested(string)\n            true\n        else\n \
    \           false\nend\n</cell>\n<code language=julia-1.3>", "    stack = []\n\
    \    for character in string\n        if character == \"[\"\n            stack.append((character,\
    \ Stack.new))\n        else if character == \"]\"\n            if stack == []\n\
    \                is_nested_error\n            else\n                stack = stack.peek()\n\
    \                stack.pop()\n        end\n    end\n    return stack == []\nend\n\
    </code>\n<|/ a dscore=2 |>\n<| a dscore=2 tags=recursion,python,nested-loops,haskell,haskell-stack\
    \ |>\nIn Haskell, the list comprehension is probably the most readable and most\
    \ flexible of all the answers.\n<code>\nisNested :: String -> Bool\nisNested xs\
    \ = not $ null $ map (\\(y:ys) -> (head y) == '[' && (tail ys == [] || (head $\
    \ tail ys) == '[' || isNested $ ys)) $ group xs\n</code>\nThe null check is to\
    \ exclude the case where xs is [], which will return [] rather than False.\nThe\
    \ (head y) == '[' part is needed to handle brackets inside brackets.\nThe (head\
    \ $ tail ys) == '[' part is needed to handle brackets inside brackets.\n<|/ a\
    \ |>\n<| a tags=recursion,python,nested-loops,haskell,haskell-stack |>\nFor a\
    \ more Haskell way you can try the following\n<code>\nimport Data.List", "  \"\
    \"\" \n  is_nested(string::String)", "    \"\"\"\n    >>> is_nested(\"[[]]\")\n\
    \    true\n    >>> is_nested(\"[]]]]]]][[[[[]\")\n    false\n    >>> is_nested(\"\
    [][]\")\n    false\n    >>> is_nested(\"[]\")\n    false\n    >>> is_nested(\"\
    [[][]]\")\n    true\n    >>> is_nested(\"[[]][[\")\n    true\n    \"\"\"", " \
    \   string = string.replace(\" \", \"\")\n    length = len(string)\n    if is_empty(string)\n\
    \        return false\n    if length == 0\n        return false\n    \n    if\
    \ string[0] == string[1]\n        return is_nested(string[2:])\n    if string[0]\
    \ in brackets[string[1]]\n        return is_nested(string[2:])\n    return false",
  "    \"\"\"\n    Create a  boolean function that takes a string as input\n    which\
    \ contains only square brackets. The function should return true if\n    and only\
    \ if there is a valid subsequence of brackets where at least\n    one bracket\
    \ in the subsequence is nested.", "        \n    \"\"\"\n    Create a function\
    \ that takes a string as input which contains only square brackets.\n    The function\
    \ should return true if and only if there is a valid subsequence of brackets \n\
    \    where at least one bracket in the subsequence is nested.\n    \"\"\"", " \
    \   if is_empty(string):\n        false\n    elif string_length(string)==1:\n\
    \        if string==\"]\":\n            true\n        else\n            false\n\
    \    else\n        let brackets = findall(string, '[')\n        if length(setdiff(string.substring(1,\
    \ string.len()), brackets))==2\n            then true\n            else false\n\
    \        end\n    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Check\
    \ whether the string is valid.\n    A valid string can only have square brackets\
    \ inside of square brackets.\n    The only exception is if there are no brackets\
    \ at all, i.e. an empty string.", "\"\"\"\n    Create a function that takes a\
    \ string as input which contains only square brackets.\n    The function should\
    \ return true if and only if there is a valid subsequence of brackets \n    where\
    \ at least one bracket in the subsequence is nested.", "\"\"\"\n    Create a function\
    \ that takes a string as input which contains only square brackets.\n    The function\
    \ should return true if and only if there is a valid subsequence of brackets \n\
    \    where at least one bracket in the subsequence is nested.", "    if string==\"\
    []\":\n        return true\n    \n    if string.starts_with(\"[\"]) and string.ends_with(\"\
    ]\"):\n        bracket_pos = string.index(\"[\")\n        bracket_end = (string.index(\"\
    ]\") \n                         - string.index(\"[\")\n                      \
    \   + 1 )\n        if bracket_end < bracket_pos:\n            return false\n \
    \       bracket_substr = string[bracket_pos+1 : bracket_end ]\n        nested\
    \ = is_nested(bracket_substr)\n        if nested:\n            return true\n \
    \   return False\nend", "    if is_empty(string or string == '[]'):\n        true\n\
    \    elif string[0] == '[' and string[string.length-1] == ']':\n        true\n\
    \    elif string[0] == '[' and string[string.length-1] != ']':\n        false\n\
    \    elif string[0] == '[' and string[string.length-1] != ']' and string[string.length-2]\
    \ == '[' and string[string.length-1] == ']':\n        true\n    else if string[0]\
    \ == '[' and string[string.length-1] == '[' and string[string.length-2] == '['\
    \ and string[string.length-1] == ']':\n        true\n    else if string[0] ==\
    \ '[' and string[string.length-1] == '[' and string[string.length-2] == ']':\n\
    \        true\n    else if string[0] == '[' and string[string.length-1] == ']':\n\
    \        true\n    else if string[0] == '[' and string[string.length-1] == '['\
    \ and string[string.length-2] == '[' and string[string.length-1] == ']':\n   \
    \     true\n    else if string[0] == '[' and string[string.length-1] == '[' and\
    \ string[string.length-2] == '[' and string[string.length-1] == '[' and string[string.length-2]\
    \ == ']':\n        true\n    else if string[0] == '[' and string[string.length-1]\
    \ == '[' and string[string.length-2] == '[' and string[string.length-1] == '['\
    \ and string[string.length-2] == ']':\n        true\n    else if string[0] ==\
    \ '[' and string[string.length-1] == '[' and string[string.length-2] == '[' and\
    \ string[string.length-1] == '[' and string[string.length-2] == '[' and string[string.length-2]\
    \ == ']':\n        true\n    else if string[0] == '[' and string[string.length-1]\
    \ == '[' and string[string.length-2] == '[' and string[string.length-1] == '['\
    \ and string[string.length-2] == '[' and string[string.length-2] == '[' and string[string.length-2]\
    \ == ']':\n        true\n    else if string[0] == '[' and string[string.length-1]\
    \ == '[' and string[string.length-2] == '[' and string[string.length-1] == '['\
    \ and string[string.length-2] == '[' and string[string.length-2] == '[' and string[string.length-2]\
    \ == '[' and string[string.length-2] == ']':\n        true\n    else if string[0]\
    \ == '[' and string[string.length-1] == '[' and string[string.length-2] == '['\
    \ and string[string.length-1] == '[' and string[string.length-2] == '[' and string[string.length-2]\
    \ == '[' and string[string.length-2] == '[' and ", "    brackets :: [Bool]\n \
    \   brackets = string.substring(1, string.length-1)", "    \"\"\"\n    Create\
    \ a function that takes a string as input which contains only square brackets.\n\
    \    The function should return true if and only if there is a valid subsequence\
    \ of brackets \n    where at least one bracket in the subsequence is nested.",
  "    \n    opening_brackets = [\"[\"]\n    closing_brackets = [\"]\"]\n    valid_brackets_count\
    \ = 0\n    \n    for i in opening_brackets:\n        valid_brackets_count += string.count(i)\n\
    \    for i in closing_brackets:\n        valid_brackets_count += string.count(i)",
  "    if is_empty(string) then \n        return true\n    end\n    if string in brackets_open::Set([])\
    \ then \n        return false\n    else \n        for i in 1:length(string.chars)-1\
    \ do \n            if string.chars[i] == \"]\" then \n                brackets_open\
    \ = brackets_open - set([string[i:i+1]])\n                brackets_close = brackets_close\
    \ - set([string[i:i+1]])\n                if length(setdiff(string.chars[i+1:length(string.chars)],\
    \ brackets_open)) > 0 \n                    return true\n                else\
    \ \n                    return false\n            end \n        end\n    end\n\
    end\n</cell>\n<cell>\n# %load solutions/is_nested.jl\n\"\"\"\n    Create a function\
    \ that takes a string as input which contains only square brackets.\n    The function\
    \ should return true if and only if there is a valid subsequence of brackets \n\
    \    where at least one bracket in the subsequence is nested.", "    if is_empty(string):\n\
    \        return true\n    if is_empty(string[2:]):\n        return false\n   \
    \ if is_bracket(string[1]):\n        bracket(string[2:])\n        return is_nested(string[2:])\n\
    \    if is_bracket(string[0]):\n        bracket(string[1:])\n        return is_nested(string[1:])\n\
    \    return false\n</code>\n<|/ a dscore=0 |>\n<| c |>\nA recursive function call\
    \ is expensive. Why not use a stack?\n<|/ c |>\n<| c |>\nA stack is more efficient\
    \ than a recursion. You only need to push one element at a time onto the stack,\
    \ and pop out when you hit a bracket. Recursion is much more complicated than\
    \ that. The benefit of a recursive function is that you can easily break out of\
    \ it by returning some value. In contrast, a stack requires you to keep track\
    \ of every element of the stack every time you add or remove one. Also, it's more\
    \ difficult to understand and debug. Yes, a stack is more complicated, but unless\
    \ your program is going to be executed thousands of times, a recursive function\
    \ will do just fine.\n<|/ c |>\n<| c |>\nIf this is your question, can you please\
    \ mark this answer as the solution? Thank you!\n<|/ c |>\n<| c |>\nI didn't. I\
    \ am new to SO. I clicked the arrow up and accepted it. I believe it says something\
    \ about how it works. I still don't know if it will work or not so I didn't go\
    \ through it.\n<|/ c |>\n<| c |>\nThanks for the information! I will keep this\
    \ in mind if I have other questions.\n<|/ c |>\n<| a dscore=0 |>\n<code>\npublic\
    \ class MyClass {", "    \"\"\"\n    Create the function\n    \"\"\"\n    \n \
    \   match = \"\\[([^][]+)]\"\n    if is_match(string, match):\n        if is_nested(match(string)):\n\
    \            return true\n        return false\n    return false", "\"\"\"\n \
    \   Check that the input string contains only square brackets.\n    The function\
    \ returns true if the string contains at least one valid subsequence of brackets.",
  "\"\"\"\n    Create a function that takes a string as input which contains only\
    \ square brackets.\n    The function should return true if and only if there is\
    \ a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.", "    if is_empty_string(string) then return false \n    else \n\
    \        for char in string do \n            if is_nested_character(char) then\
    \ \n                return true \n            else \n                return false\
    \ \nendfunction ", "    brackets = string.count(\"[\")\n    squares = string.count(\"\
    ]\")\n    \n    if squares == brackets:\n        return true\n    return false\n\
    end", "    begin::Int = indexof(string, '[')\n    finish::Int = indexof(string,\
    \ ']')\n    if begin > finish\n        false\n    else\n        has_nested = is_nested(string(begin+1,\
    \ finish))\n        if has_nested\n            has_nested = is_nested(string(begin+1,\
    \ finish+1))\n            if has_nested\n                false\n            else\n\
    \                true\n        else\n            true\nend\n</cell>\n<text>\n\
    Exercise\nNow we know about indexof, we can write another function that determines\
    \ whether a given string is valid or not.", "    # Your code here\n    \n    count\
    \ = 0\n    for char in string:\n        if char == \"[\" or char == \"{\" or char\
    \ == \"(\" or char == \"[\":\n            count += 1\n        elif char == \"\
    ]\" or char == \"}\":\n            count -= 1\n            if count < 0:\n   \
    \             return False\n        elif char == \"]\" and count > 0:\n      \
    \      return False\n        elif char == \"}\" or char == \"]\" and count < 0:\n\
    \            return False\n    return count == 0\n            \n    \n    \n\"\
    \"\"\n2. Write a function that replaces every element in a list with a given value,\
    \ if and only if\nthe element is not one of the given values.", "    \n    \"\"\
    \"\n    Define a function which takes a string as input which contains only square\
    \ brackets.\n    The function should return true if and only if there is a valid\
    \ subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.", "    \"\"\"Create a function that takes a string as input which\
    \ contains only square brackets.\n    The function should return true if and only\
    \ if there is a valid subsequence of brackets \n    where at least one bracket\
    \ in the subsequence is nested.", "    open bracket := findfirst(\"\\[\",string)\n\
    \    close := findfirst(\"]\",string)\n    if open < 0 or close < 0\n        false\n\
    \    elseif close >= open + 1\n        false\n    else\n        open_paren :=\
    \ open - 2\n        close_paren := close - 1\n        open_close := open_paren\
    \ + close_paren + 1\n        if open_close <= 0\n            false\n        else\n\
    \            if open_paren < close_paren\n                if open_paren == close_paren\n\
    \                    string[open_paren] == \"[\"\n                else\n     \
    \               string[open_paren] == \"[\"\n                    string[close_paren]\
    \ == \"]\"\n                end\n            elseif close_paren == open_paren\n\
    \                string[open_paren] == \"[\"\n            else\n             \
    \   string[open_paren] == \"]\"\n                string[close_paren] == \"]\"\n\
    \            end\n        end\n    end\nend\n</code>\n<|/ a tags=recursion,string,python,arrays,slice\
    \ |>\n<| c |>\nI love this solution, it is concise and easy to understand, and\
    \ it worked very well for me.\n<|/ c |>\n<| a tags=recursion,string,python,arrays,slice\
    \ |>\nHere's a very simple recursive solution (which I did for fun):\n<code>\n\
    def is_balanced(s):\n    brackets = {'(': ')', '[': ']', '{': '}'}\n    stack\
    \ = []\n    for char in s:\n        if char in brackets:\n            stack.append(brackets[char])\n\
    \        elif char in stack and stack.pop() == brackets[char]:\n            return\
    \ True\n    return len(stack) == 0\n</code>\n<|/ a dscore=2 |>\n<| a dscore=1\
    \ |>\n<code>\ndef is_balanced(string):\n    if len(string) > 1 and string[0] ==\
    \ string[-1]:\n        return is_balanced(string[1:-1]) and (is_balanced(string[1:-1])\
    \ or string[0] != string[-1])\n    else:\n        return True\n</code>\n<|/ a\
    \ tags=recursion,string,python,arrays,slice |>\n<| c |>\nPlease add some explanation\
    \ to your code as to how it solves the problem.\n<|/ c |>\n<| a dscore=1 |>\n\
    A simple recursive solution:\n<code>\ndef is_balanced(s):\n    if len(s) <= 1:\n\
    \        return True\n    if s[0] == s[-1]:\n        return is_balanced(s[1:-1])\n\
    \    return False\n</code>\n<|/ a tags=recursion,string,python,arrays,slice |>\n\
    <| a dscore=1 |>\nThe accepted answer by is correct but here is a variant that\
    \ returns the number of unpaired brackets in the string.\n<code>\ndef is_balanced(s):\n\
    \    stack = []", "    if is_empty(string) == true\n    else if is_empty(string)\
    \ == false\n        then true\n        else if is_empty(string[1]) == true\n \
    \           then false\n            else if is_empty(string[2]) == true\n    \
    \            then false\n                else if is_empty(string[3]) == true\n\
    \                    then false\n                    else if is_empty(string[4])\
    \ == true\n                        then false\n                        else if\
    \ is_empty(string[5]) == true\n                            then false\n      \
    \                      else if is_empty(string[6]) == true\n                 \
    \               then false\n                                else if is_empty(string[7])\
    \ == true\n                                    then false\n                  \
    \                  else if is_empty(string[8]) == true\n                     \
    \                   then false\n                                        else if\
    \ is_empty(string[9]) == true\n                                            then\
    \ false\n                                            else if is_empty(string[10])\
    \ == true\n                                                then false\n      \
    \                                          else if is_empty(string[11]) == true\n\
    \                                                    then false\n            \
    \                                        else if is_empty(string[12]) == true\n\
    \                                                        then false\n        \
    \                                                else if is_empty(string[13])\
    \ == true\n                                                            then false\n\
    \                                                            else if is_empty(string[14])\
    \ == true\n                                                                then\
    \ false\n                                                                else\
    \ if is_empty(string[15]) == true\n                                          \
    \                          then false\n                                      \
    \                              else if is_empty(string[16]) == true\n        \
    \                                                                then false\n\
    \                                                                        else\
    \ if is_empty(string[17]) == true\n                                          \
    \                                  then false\n                              \
    \                                              else if is_empty(string[18]) ==\
    \ true\n                                                                     \
    \           then false\n                                                     \
    \                           else if is_empty(string[19]) == true\n           \
    \                                                                         then\
    \ false\n                                                                    \
    \                else if is_empty(string[20]) == true\n                      \
    \                                                                  then false\n\
    \                                                                            \
    \            else if is_empty(string[21]) == true\n                          \
    \                                                                  then false\n\
    \                                                                            \
    \                else if is_empty(string[22]) == true\n                      \
    \                                                                          then\
    \ false\n                                                                    \
    \                            else if is_empty(string[23]) == true\n          \
    \                                                                            \
    \              then false\n                                                  \
    \                                                  else if is_empty(string[24])\
    \ == true\n                                                                  \
    \                                      then false\n                          \
    \                                                                            \
    \  else if is_empty(string[25]) == true\n                                    \
    \                                                                        then\
    \ false\n                                                                    \
    \                                        else if is_empty(string[26]) == true\n\
    \                                                                            \
    \                                    then false\n                            \
    \                                                                            \
    \        else if is_empty(string[27]) == true\n                              \
    \                                                                            \
    \          then false\n                                                      \
    \                                                              else if is_empty(string[28])\
    \ == true\n                                                                  \
    \                                                      then false\n          \
    \                                                                            \
    \                                  else if is_empty(string[29]) == true\n    \
    \                                                                            \
    \                                            then false\n                    \
    \                                                                            \
    \                            else if is_empty(string[30]) == true\n          \
    \                                                                            \
    \                                          then false\n                      \
    \                                                                            \
    \                              else if is_", "    string = string:trim()\n   \
    \ if string == \"\" || string == \"[]\" || string == \"[[]\" \n    then true \n\
    \    else false \n    end\nend \n</code>\n<|/ a |>\n<| c |>\n`string.trim()` has\
    \ been [deprecated since version 1.5](https://docs.julialang.org/en/stable/stdlib/string/#Base.trim).\n\
    <|/ c |>\n<| a tags=julia,brackets,string |>\nBased on the answer from Roberts\
    \ above, I had to modify it to only accept nested brackets and a max nesting depth\
    \ of three. Here is my solution.\n<code>", "\tbeginning_of_nesting = subsequence(\"\
    [\", string)\n\tending_of_nesting = subsequence(\"]\", string)\n    \n    if is_empty(string)\n\
    \        true\n    else\n        if is_nested(beginning_of_nesting) && is_nested(ending_of_nesting)\n\
    \            true\n        else\n            false\n        end\n    end\nend\n\
    </cell>\n<text>\nA set of nested brackets is called a valid bracket sequence.\
    \ For example, [[]] is valid bracket sequence for [[]][]][]]].", "    if is_empty_string(string)\n\
    \        return true\n    if string[0] != bracket\n        return false\n    else\
    \ if string[1] == bracket\n        return is_nested(string[2:end])\n    else if\
    \ string[2] == bracket\n        return is_nested(string[2:end])\n    else if string[3]\
    \ == bracket\n        return is_nested(string[2:end])\n    else if string[4] ==\
    \ bracket\n        return is_nested(string[2:end])\n    else if string[5] == bracket\n\
    \        return is_nested(string[2:end])\n    else if string[6] == bracket\n \
    \       return is_nested(string[2:end])\n    else if string[7] == bracket\n  \
    \      return is_nested(string[2:end])\n    else if string[8] == bracket\n   \
    \     return is_nested(string[2:end])\n    else if string[9] == bracket\n    \
    \    return is_nested(string[2:end])\n    else if string[10] == bracket\n    \
    \    return is_nested(string[2:end])\n    else if string[11] == bracket\n    \
    \    return is_nested(string[2:end])\n    else if string[12] == bracket\n    \
    \    return is_nested(string[2:end])\n    else if string[13] == bracket\n    \
    \    return is_nested(string[2:end])\n    else if string[14] == bracket\n    \
    \    return is_nested(string[2:end])\n    else if string[15] == bracket\n    \
    \    return is_nested(string[2:end])\n    else if string[16] == bracket\n    \
    \    return is_nested(string[2:end])\n    else if string[17] == bracket\n    \
    \    return is_nested(string[2:end])\n    else if string[18] == bracket\n    \
    \    return is_nested(string[2:end])\n    else if string[19] == bracket\n    \
    \    return is_nested(string[2:end])\n    else if string[20] == bracket\n    \
    \    return is_nested(string[2:end])\n    else if string[21] == bracket\n    \
    \    return is_nested(string[2:end])\n    else if string[22] == bracket\n    \
    \    return is_nested(string[2:end])\n    else if string[23] == bracket\n    \
    \    return is_nested(string[2:end])\n    else if string[24] == bracket\n    \
    \    return is_nested(string[2:end])\n    else if string[25] == bracket\n    \
    \    return is_nested(string[2:end])\n    else if string[26] == bracket\n    \
    \    return is_nested(string[2:end])\n    else if string[27] == bracket\n    \
    \    return is_nested(string[2:end])\n    else if string[28] == bracket\n    \
    \    return is_nested(string[2:end])\n    else if string[29] == bracket\n    \
    \    return is_nested(string[2:end])\n    else if string[30] == bracket\n    \
    \    return is_nested(string[2:end", "    match string {\n        \"[[]]\" =>\
    \ true\n        \"[]]]]]]][[[[[]\" => false\n        \"[][]\" => false\n     \
    \   \"[]\" => false\n        \"[[][]]\" => true\n        _ => false\n    }\nend\n\
    </cell>\n<code language=julia-1.6>\n\"\"\"\n    Create a function that takes a\
    \ string as input which contains only square brackets.\n    The function should\
    \ return true if and only if there is a valid subsequence of brackets \n    where\
    \ at least one bracket in the subsequence is nested.", "    \n    for e in string:\n\
    \        if e==\"[\":\n            if string.index(e)<len(string)-1:\n       \
    \         if string[string.index(e)+1]==\"[\":\n                    return True\n\
    \                else:\n                    return False\n            else:\n\
    \                return True\n        elif e==\"]\":\n            if string.index(e)<len(string)-1:\n\
    \                if string[string.index(e)+1]==\"]\":\n                    return\
    \ True\n                else:\n                    return False\n            else:\n\
    \                return True\n        else:\n            return False", "    if\
    \ is_empty(string)\n        true\n    else\n        if is_nested(substring_index(string,0,'['))\n\
    \            true\n        else\n            if is_nested(substring_index(string,length(string),']'))\n\
    \                true\n            else\n                is_nested(substring_index(string,length(string)-1,'['))\n\
    \        end\n    end\nend\n</cell>\n<text>\nTask\nWrite a function that takes\
    \ a string as an argument and returns true if the string contains any nested square\
    \ brackets in it, otherwise false. Do not use the built-in function findall.",
  "    if is_empty(string) == true\n        return false\n    if string.head == \"\
    [\"\n        return is_nested(string[1..string.head])\n    if string.head == \"\
    ]\"\n        return is_nested(string[1..string.tail])\n    return false\nend",
  "        \n        \n    stack::Vector[Char] = Vector()\n    \n    for c in string:\n\
    \        if c == '[':\n            push!( stack, c  )\n        elif c == ']':\n\
    \            if stack.length() == 0 \n                then return false\n    \
    \        \n            else return pop!( stack )==c\n        else \n         \
    \   if stack.length() == 0\n                then return false\n            else\
    \ push!( stack, c  )\n    end\n    \n    return true\nend\n</cell>\n<text>\nExercise:\
    \ Write a function that takes a string as input and returns a string with all\
    \ the letters that occur more than two times in a string separated by a comma.",
  "    if is_empty(string(1))\n        return true\n    \n    if string(1) == \"[\"\
    \n        if is_empty(string(2))\n            return true\n        else if string(2)\
    \ == \"[\" \n            return is_nested(string[3:])\n        elseif string(2)\
    \ == \"]\"\n            return false\n        else\n            return is_nested(string[2:])\n\
    \    else if string(1) == \"]\" \n        if is_empty(string(2))\n           \
    \ return false\n        else\n            return is_nested(string[2:])\n    else\n\
    \        return is_nested(string[1:])\n</code>\n<|/ a dscore=3 |>\n<| c |>\nIt's\
    \ been a while, but this looks like a good implementation. Just wondering, are\
    \ you allowed to use recursion? If so I'd imagine a recursive implementation would\
    \ be a bit nicer. Also, I think you should check that you don't have nested pairs\
    \ of brackets, since that will cause a problem.\n<|/ c |>\n<| c |>\nYou're right\
    \ about recursive implementations. I was able to write the recursive solution\
    \ fairly quickly and didn't realize there was an advantage to using a recursive\
    \ function. I did have to check brackets inside of the brackets though. My initial\
    \ implementation would have found \"[[\" as being a valid subsequence and thus\
    \ return false if it wasn't properly nested. I'm looking forward to seeing if\
    \ any of you have written a recursive function for the same problem I had. Thanks.\n\
    <|/ c |>\n<| c |>\nI've added my recursive implementation as my original answer.\
    \ Thanks for pointing that out! I do believe that using recursive functions can\
    \ make the solution easier to read. Honestly, I don't remember where I first saw\
    \ this implementation in OCaml or Haskell. I think it was on one of those coursera\
    \ courses on algorithms though and I used it. Thanks again for the help!\n<|/\
    \ c |>\n<| a tags=string,ocaml,recursion |>\n<code>\n(* check if a string is valid\
    \ *)\nlet is_valid_string s = \n    let rec aux i accum acc =\n        match s\
    \ with\n        | [] -> acc\n        | '[' -> aux i   (aux i [] acc)\n       \
    \ | ']' -> aux i (acc + []) acc\n        | c -> if c = '[' then aux i (acc + [])\
    \ acc\n                else if (c <> '[') and (c = ']') then aux i (acc + [c])\
    \ acc\n                else aux i (acc + [c]) acc\n    in\n    aux 0 ([]) []",
  "    string.contains(\"[]\")\n    \nend", "    if is_empty(string) \n        return\
    \ false \n    \n    index <- 0\n    while index < length \n        match string[index]\
    \ \n            \"[\" -> true \n            \"]\" -> true \n            _ -> false\
    \ \n        index <- index + 1\n    return false\n\"\"\"\n    Create a function\
    \ that takes a string as input which contains only brackets.\n    The function\
    \ should return true if and only if there is a valid subsequence of\n    brackets\
    \ where at least one bracket in the subsequence is nested.", "    if is_empty(string)\n\
    \        return true\n    match find_bracket(string, 0)\n        None => false\n\
    \        Some (start, end) => {\n            if start == end\n               \
    \ is_nested(string[start..end])\n            else\n                false\n   \
    \     }\n    end\nend", "    # your code here\n    \n    count = 0\n    for i\
    \ in string:\n        if i == '[' or i == '{':\n            count += 1\n     \
    \   elif i == ']' or i == '}':\n            count -= 1\n        else:\n      \
    \      return False\n        \n        if count < 0:\n            return False\n\
    \    \n    if count > 0:\n        return False\n    else:\n        return True",
  "    count = 0\n    stack = [[]]\n    for char in string:\n        if char == '[':\n\
    \            count += 1\n            stack.append([])\n        elif char == ']':\n\
    \            count -= 1\n            if count == 0:\n                stack.pop()\n\
    \            else:\n                return False\n        elif char == '[':\n\
    \            stack[-1].append(char)\n        elif char == ']':\n            if\
    \ len(stack) != 1:\n                return False\n            if stack[0] != '[':\n\
    \                return False\n            stack.pop()\n        else:\n      \
    \      return False\n    return stack == [['[']]", "    \"\"\"\n    Create a function\
    \ that takes a string as input which contains only square brackets.\n    The function\
    \ should return true if and only if there is a valid subsequence of brackets \n\
    \    where at least one bracket in the subsequence is nested.", "    \"\"\"\n\
    \    Create a function that takes a string as input which contains only square\
    \ brackets.\n    The function should return true if and only if there is a valid\
    \ subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.", "    match string:\n        | \"[]\" => true\n        | \"[[]\"\
    \ => true\n        | \"[[][]\" => true\n        | \"[[][][][]\" => true\n    \
    \    | \"[[][][][][][]\" => true\n        | \"[[][][][][][][][]\" => true\n  \
    \      | \"[][][][]\" => true\n        | \"[][][][][]\" => true\n        | \"\
    [][][][][][]\" => true\n        | \"[][][][][][][][]\" => true\n        | \"[][][][][][][][][][]\"\
    \ => true\n        | \"[[][][][][][][][][]\" => true\n        | \"[[][][][][][][][][][]\"\
    \ => true\n        | \"[[][][][][][][][][][][]\" => true\n        | \"[[][][][][][][][][][][][]\"\
    \ => true\n        | \"[[][][][][][][][][][][][]\" => true\n        | \"[[][][][][][][][][][][][][]\"\
    \ => true\n        | \"[[][][][][][][][][][][][][][]\" => true\n        | \"[[][][][][][][][][][][][][][][]\"\
    \ => true\n        | \"[[][][][][][][][][][][][][][][]\" => true\n        | \"\
    [[][][][][][][][][][][][][][][][]\" => true\n        | \"[[][][][][][][][][][][][][][][]\"\
    \ => true\n        | \"[[][][][][][][][][][][][][][][][]\" => true\n        |\
    \ \"[[][][][][][][][][][][][][][][][][][]\" => true\n        | \"[[][][][][][][][][][][][][][][][][][]\"\
    \ => true\n        | \"[[][][][][][][][][][][][][][][][][][]\" => true\n     \
    \   | \"[[][][][][][][][][][][][][][][][][][]\" => true\n        | \"[[][][][][][][][][][][][][][][][][][][][]\"\
    \ => true\n        | \"[[][][][][][][][][][]", "    for i in string.splitlines(1)\n\
    \        if bracketCount(i)>1\n            false\n        else if bracketCount(i)==1\n\
    \            true\n        else if bracketCount(i)==0\n            false\n   \
    \     else if bracketCount(i)==2\n            true\n        else\n           \
    \ return false\n    return true\nend\n</cell>\n<text>\nExercise 2: Write a function\
    \ that will count the open and closed brackets in a string.\nHint: Use regular\
    \ expressions.", "    # Write your code in Python 3.7\n    stack = Stack([])\n\
    \    for c in string:\n        if c == \"[\":\n            stack.append(c)\n \
    \       elif c == \"]\":\n            if not stack.is_empty():\n             \
    \   return False\n            else:\n                stack.pop()\n    return stack.is_empty()\n\
    end", "   \"\"\"\n   Create a function that takes a string as input which contains\
    \ only square brackets.\n   The function should return true if and only if there\
    \ is a valid subsequence of brackets \n   where at least one bracket in the subsequence\
    \ is nested.", "    stack::[String] = Array()\n    open::Int = 0 \n    close::Int\
    \ = 0 \n    for character in string {\n        if character == \"[\" {\n     \
    \       open++\n            stack.append(\"[\")\n        } else if character ==\
    \ \"]\" {\n            if stack[close] == \"[\" {\n                close++\n \
    \               stack[close] = \"]\"\n            } else {\n                return\
    \ false\n            }\n        } else if character == \"{\" {\n            open++\n\
    \            stack.append(\"{\")\n        } else if character == \"}\" {\n   \
    \         if stack[close] == \"{\" {\n                close++\n              \
    \  stack[close] = \"}\"\n            } else {\n                return false\n\
    \            }\n        }\n    }\n    return stack[close-1] == \"[\" && stack[close-2]\
    \ == \"[\"\nend", "    if is_empty(string)\n        true\n    elseif is_open_bracket(string[1])\n\
    \        is_nested(string[2:end])\n    else\n        is_nested(string[2:end-1])\n\
    \    end\nend\n</code>\n<|/ a |>\n<| c |>\nI agree that regex would be a good\
    \ solution but this isn't a homework problem. Thanks for your answer though!\n\
    <|/ c |>\n<| c |>\nHmm, sorry I wasn't clear enough. By nested, I mean a sequence\
    \ of brackets inside brackets, for example [[]].\n<|/ c |>\n<| c |>\nThis solution\
    \ doesn't handle the cases where an opening bracket is followed by a closing bracket.\
    \ Eg. `[]` -- valid: `[[[][]]]` -- valid: `[[][[[]]]]` -- valid: `[[][[[]]]]`\
    \ -- invalid: `[[][[[]]]][]]` -- invalid: `[[][[[]]]][]][]]` -- invalid: `[[][[[]]]][]][]][]]`\
    \ -- invalid: `[][[[]]][]]` -- invalid: `[][[[]]][]][]]` -- invalid: `[][[[]]][]][]][]]`\
    \ -- invalid: `[]` -- invalid: `[][]`\n<|/ c |>\n<| c |>\n, good point. I've updated\
    \ the implementation to handle this case as well. I've also removed the `begin`\
    \ end block as `if/else` can handle multiple statements here.\n<|/ c |>\n<| c\
    \ |>\nThanks, it works now. I thought this was going to be a difficult problem.\n\
    <|/ c |>\n<| a tags=string,recursion,julia |>\nThis solution takes advantage of\
    \ the fact that Julia's begin / end blocks are limited to a single expression\
    \ and is therefore not suitable for a recursion.\n<code>", "    \"\"\"Return a\
    \ function that takes a string as input which contains only square brackets.\n\
    \    The function should return true if and only if there is a valid subsequence\
    \ of brackets \n    where at least one bracket in the subsequence is nested.\"\
    \"\"\n    return is_nested(string).(String)\nend ", "    if is_empty(string.chars())\n\
    \        return false\n    let mut brackets = Vec::new()\n    for c in string.chars()\n\
    \        if c == '['\n            brackets.push(true)\n        elif c == ']'\n\
    \            brackets.pop()\n        else\n            brackets.push(false)\n\
    \    if brackets.len() == 0 or brackets.max() == false\n        return false\n\
    \    else \n        return true\nend", "    stack = ListSet()\n    def walk(i::Int)::Unit\n\
    \        while(i >= 0)\n            if(string[i] == '[') push(i, stack, string)\n\
    \            if(string[i] == ']') pop(i, stack, string)\n            i += 1\n\
    \    walk(0)\n    return stack.length() == 0\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert is_nested(\"[[]]\")\n@assert is_nested(\"[]]]]]]][[[[[]\")\n@assert is_nested(\"\
    [][]\")\n@assert is_nested(\"[]\")\n@assert is_nested(\"[[][]]\")\n@assert is_nested(\"\
    [[]][[\")\n</cell>\n<text>\n4.1.5 Recursive Functions", "    if is_empty(string)\n\
    \        true\n    else\n        if string[1] == \"[\" || string[1] == \"{\" ||\
    \ string[1] == \"(\"\n            if string[2] == \"[\" || string[2] == \"{\"\
    \ || string[2] == \"(\"\n                is_nested(string[3:])\n            else\n\
    \                false\n        else\n            if string[2] == \"[\" || string[2]\
    \ == \"{\" || string[2] == \"(\"\n                true\n            else\n   \
    \             if string[3] == \"[\" || string[3] == \"{\" || string[3] == \"(\"\
    \n                    true\n                else\n                    false\n\
    </code>\n<|/ a |>\n<| a tags=string,algorithm,recursion,regex,python dscore=0\
    \ |>\nYou can do it in one line using regex:\n<code>\nimport re\nre.findall(\"\
    \\[.*?\\]\",\"[[]]\")\n</code>\nOutput:\n<code>\n['[[]]']\n</code>\n<|/ a |>\n\
    <| a |>\nA recursive solution:\n<code>\ndef brackets(s):\n    return s.count('[')\
    \ > s.count('{') or s.count('(') > s.count(')')\n</code>\n<|/ a dscore=0 tags=string,algorithm,recursion,regex,python\
    \ |>\n<| a tags=string,algorithm,recursion,regex,python |>\nUsing a stack data\
    \ structure:\n<code>\ndef brackets(s):\n    if not s or s == '()':\n        return\
    \ True\n    stack = [[]]\n    for c in s:\n        if c == '(':\n            if\
    \ stack:\n                stack[-1].append([])\n            stack.append([])\n\
    \        elif c == ')':\n            if stack:\n                if stack[-1]:\n\
    \                    stack[-1].pop()\n                else:\n                \
    \    return False\n            else:\n                return False\n        else:\n\
    \            if stack[-1]:\n                stack[-1].append(c)\n            else:\n\
    \                return False\n    return not stack\n</code>\n<|/ a dscore=0 |>\n\
    <| a dscore=0 tags=string,algorithm,recursion,regex,python |>\nUsing recursive\
    \ function you can do this:\n<code>\ndef checkbrackets(str):\n    stack=[]\n \
    \   cnt=str.count(\"[\")\n    cnt1=str.count(\"{\")\n    cnt2=str.count(\"(\"\
    )\n    \n    if cnt==0 or cnt1==0 or cnt2==0:\n        return True\n    \n   \
    \ else:\n        if str[0]==\"[\" and checkbrackets(str[1:]):\n            return\
    \ True\n        elif str[0]==\"{\" and checkbrackets(str[1:]):\n            return\
    \ True\n        elif str[0]==\"(\" and checkbrackets(str[1:]):\n            return\
    \ True\n        elif str[0]==\")\":\n            if stack:\n                return\
    \ True\n            else:\n                return False\n        else:\n     \
    \       stack.append(str[0])\n            return checkbrackets(str[1:])\n", " \
    \   \n    for i in string.substrings() { \n        if is_bracket(i) \n       \
    \     return true \n        else \n            return false \n    } \n    return\
    \ false \nend \n</cell>\n<text>\nImplement the is_balanced function, which checks\
    \ if a string is well balanced. That is, does it have all possible combinations\
    \ of brackets (which we will be counting using bracket counts)? If it does, it\
    \ should return True. If not, it should return False.", "    string != \"\" &&\
    \ string != \"[]\" && string != \"[\" && string != \"()\" && string != \"([]\"\
    \ \nend", "\"\"\"\n    Create a function that takes a string as input which contains\
    \ only square brackets.\n    The function should return true if and only if there\
    \ is a valid subsequence of brackets \n    where at least one bracket in the subsequence\
    \ is nested.", "    \n    if string == \"\" \n        then return true\n     \
    \   \n    open_parens = string.findFirstNotIn(open_brackets)\n    close_parens\
    \ = string.findFirstNotIn(close_brackets)", "    \n    match string {\n      \
    \  \"[]\"   => true,\n        \"[[]\" => false,\n        \"[[[]\" => true,\n \
    \       _      => false,\n    }\n</code>\n<|/ a tags=string,recursion,functional-programming,ocaml,pattern-matching\
    \ |>\n<| a tags=string,recursion,functional-programming,ocaml,pattern-matching\
    \ |>\nIn OCaml there is no explicit notion of string length, so the trick to finding\
    \ the right index seems reasonable.\nFor this particular problem, I would use\
    \ a list of lists. A list is a good match for representing the state of a nested\
    \ brackets, since it is a collection of nested brackets and allows you easily\
    \ add new brackets one by one.\n<code>\ntype bracket = Empty | Opening 'a * 'b\
    \ list", "    \n    if string == \"\"\n        return true\n    \n    local char:Char\
    \ = string[1]\n    if char == \"[\"\n        return true\n    \n    return is_nested(string[2:])\n\
    end\n</cell>\n<code language=julia-1.2>\n\"\"\"\n    Create a function that takes\
    \ a string as input which contains only square brackets.\n    The function should\
    \ return true if and only if there is a valid subsequence of brackets \n    where\
    \ at least one bracket in the subsequence is nested.", "    string == \"\" ||\
    \ \n        string == \"[]\" ||\n        string == \"[]]\" || \n        string\
    \ == \"[]]]\" || \n        string == \"[]]]]]\" || \n        string == \"[][]\"\
    \ || \n        string == \"[][]]\" || \n        string == \"[][]]]\" || \n   \
    \     string == \"[][]]]]]\" || \n        string == \"[][][]\" || \n        string\
    \ == \"[][][]]\" || \n        string == \"[][][]]]\" || \n        string == \"\
    [][][]]]]\" || \n        string == \"[][][][]\" || \n        string == \"[][][][]]\"\
    \ || \n        string == \"[][][][]]]\" || \n        string == \"[][][][]]]]\"\
    \ || \n        string == \"[][][][][]\" || \n        string == \"[][][][][]]\"\
    \ || \n        string == \"[][][][][]]]\" || \n        string == \"[][][][][]]]]\"\
    \ || \n        string == \"[][][][][]]]]]\"\nend", "    #write code here\n   \
    \ false\nend\n</cell>\n<text>\nExercise 4\nWrite a function that returns the number\
    \ of brackets present in a string.", "    \n    matches = 0\n    \n    for char\
    \ in string:\n        if char == '[':\n            matches += 1\n        elif\
    \ char == ']':\n            matches += 1\n        elif char == '{':\n        \
    \    matches += 2\n        elif char == '}':\n            matches += 2\n     \
    \   elif char == '(':\n            matches += 1\n        elif char == ')':\n \
    \           matches += 1\n        else: \n            return false\n        \n\
    \        if matches > 1:\n            return false\n    \n    return true\n</code>\n\
    The function above takes a string, counts the number of brackets, and returns\
    \ false if there are not enough brackets or if there are multiple valid brackets\
    \ in a row.\n<|/ a tags=string,haskell,python,algorithm,recursion |>\n<| c |>\n\
    This is incorrect, and will give false positives with strings like `'[][]'`.\n\
    <|/ c |>\n<| c |>\nThanks for pointing this out. I've fixed this (with a small\
    \ change).\n<|/ c |>\n<| a |>\nA solution for Haskell would be:\n<code>\nimport\
    \ Data.Char (isInfixOf)", "    stack = Stack()\n    stack.push(\"[\")\n    open\
    \ <- false\n    for c in string:\n        if open {\n            stack.push(c)\n\
    \            open <- false\n        } else {\n            if c == \"[\" {\n  \
    \              open <- true\n            } else if c == \"]\" {\n            \
    \    open <- false\n                stack.pop() \n            }\n        }\n \
    \       if stack.size == 0 {\n            return true\n        }\n    }\n    return\
    \ false\nend\n</cell>\n<cell>\n## Exercise\n</cell>\n<text>\nWrite a function\
    \ that takes a string as input and returns true if the string contains a word\
    \ \nstarting with a capital letter, ignoring case.", "    \n    \"\"\"\n    Use\
    \ a regex to check for a pattern of nested brackets\n    \n    >>> is_nested(\"\
    [[[[[[]\")\n    true\n    >>> is_nested(\"[[[[[]]]]]]]][][[[[[]\")\n    false\n\
    \    >>> is_nested(\"[[[[[]]]]]][][\")\n    false\n    \"\"\"\nend\n</cell>\n\
    <text>\nExercise 5 - Validate Brackets Function\nWrite a function that takes a\
    \ string as input and validates brackets.", "    open brackets = string.count(\"\
    [\")\n    close brackets = string.count(\"]\")\n    open brackets = open brackets\
    \ - close brackets\n    if open brackets == 0: \n        return True\n    else:\
    \ \n        return False", "    brackets = string.count(\"[]\")\n    return brackets\
    \ > 0\n</code>\n<|/ a dscore=0 tags=string,haskell,functional-programming,recursion\
    \ |>\n<| c |>\nI think your solution fails for `is_nested(\"[[]]]]]]][[[[[]\"\
    )`. You need a more sophisticated check, one that actually checks for nesting\
    \ more than 2 brackets.\n<|/ c |>\n<| c |>\nThat could be a problem depending\
    \ on the exact requirements. I suppose we could just add some extra cases to check\
    \ for that case. For example, if we are checking for nesting 3 brackets, this\
    \ would change to `brackets == 3`.\n<|/ c |>\n<| a |>\nThis is not a solution\
    \ using lists but you can also solve this using regex with back referencing:\n\
    <code>\nimport Text.Regex.PCRE\nimport qualified Data.Text as T", "    |(string.starts_with('[')\
    \ & string.ends_with(']'))\n    |(string.starts_with('[') & string.ends_with(']'))\
    \ \n    |(string.starts_with('[') & string.ends_with(']') & string.contains('[[[]]'))\n\
    \    |(string.starts_with('[') & string.ends_with(']') & string.contains('[[[[]]'))\n\
    \    |(string.starts_with('[') & string.ends_with(']') & string.contains('[[[[[]]'))\n\
    \    |(string.starts_with('[') & string.ends_with(']') & string.contains('[[[[[[]]')))",
  "\"\"\"\n    Write your code here\n\"\"\"", "    \"\"\"\n    is_nested(string::String)",
  "    stack::Vector{Char} = Vector{Char}(\"\")\n    for ch in string:\n        if\
    \ ch == \"[\" {stack[end] = ch; end += 1}\n        if ch == \"]\" {stack = reverse(stack);\
    \ return stack == []}\n    end\n    return stack == []\nend\n</cell>\n<code language=julia-1.5>\n\
    @time is_nested(\"[[]\")\n</cell>\n<code language=julia-1.5>\n@time is_nested(\"\
    []]]]]]][[[[[]\")\n</cell>\n<text>\nExercise: Write a function which takes three\
    \ arguments:", "    \"\"\"\n    Create a function that takes a string as input\
    \ which contains only square brackets.\n    The function should return true if\
    \ and only if there is a valid subsequence of brackets \n    where at least one\
    \ bracket in the subsequence is nested.", "    stack::Vector{Int} = Vector{Int}()\n\
    \    i = 0\n    length(string)\n    while i < length(string)\n        if string[i]\
    \ == '['\n            stack = push!(stack, i)\n        end\n        if string[i]\
    \ == ']'\n            pop!(stack)\n        end\n        i = i+1\n    end\n   \
    \ isempty(stack)\nend\n</code>\n<|/ a tags=recursion,julia |>\n<| c |>\nThis is\
    \ nice but fails for `is_nested(\"[][[]]]\")`, which returns `false`.\n<|/ c |>\n\
    <| c |>\nIt works. As it turns out, I forgot the `isempty(stack)` at the end of\
    \ the function. Now it passes all of the test cases.\n<|/ c |>\n<| c |>\n`isopen`\
    \ isn't defined. What is `isopen`?\n<|/ c |>\n<| a dscore=2 tags=recursion,julia\
    \ |>\nI like the idea of using stack to solve the problem, but I want to add some\
    \ ideas that might help to understand the recursive approach.\nRemember that in\
    \ recursive approaches, there is only one \"base\" case, and everything else is\
    \ handled in recursion. With this in mind, we can start by writing a function\
    \ that checks if a bracket pair (i,j) is nested, and if so, returns true:\n<code>",
  "    if is_empty(string):\n        return true\n    bracket_count = count_brackets(string)\n\
    \    if bracket_count == 1:\n        return true\n    bracket_index = bracket_count\
    \ - 1\n    nesting = 1\n    prev_open_bracket = bracket_index\n    for i in 1..bracket_count\
    \ {\n        open_bracket = bracket_index\n        if i > 1 && open_paren == bracket_index\
    \ {\n            nesting = 0\n        \n        close_bracket = bracket_index\n\
    \        if nesting == 1 {\n            close_bracket = bracket_index + 1\n  \
    \          if close_bracket < len(string) && string[close_bracket] == '[' {\n\
    \                nesting += 1\n            }\n        } else {\n            close_bracket\
    \ = open_paren\n            if string[close_bracket] == '[' {\n              \
    \  nesting -= 1\n            }\n        }\n        if nesting == 0 {\n       \
    \     return false\n        }\n        prev_open_bracket = open_bracket\n    \
    \    bracket_index = close_bracket\n    }\n    return true\nend\n</cell>\n<cell>\n\
    # Test the function\nprintln(is_nested(\"[[[[[[]]]]]][[[]][][]\")) # false\nprintln(is_nested(\"\
    [[]][][]][][[]\")) # true\nprintln(is_nested(\"[[[[[]]]]]][][][][][][][][[]]\"\
    )) # true\n</cell>\n<text>\nExercise 5: Write a function that returns a list of\
    \ all integers in the range $[n, m]$, inclusive. The function should take two\
    \ inputs, n and m and should return a list of integers $[n, m, n + m, 2 * n, 2\
    \ * m + 1]$ where $m$ is always greater than or equal to $n$.", "    if is_empty(string)\
    \ == false\n        brackets <- open_brackets(string)\n        if len(brackets)\
    \ >= 2\n            nested <- is_nested(string)\n            is_bracketed(brackets,\
    \ nested)\n        else\n            false\n    end\nend", "    \"\"\"\n    Create\
    \ a function that takes a string as input which contains only square brackets.\n\
    \    The function should return true if and only if there is a valid subsequence\
    \ of brackets \n    where at least one bracket in the subsequence is nested.",
  "    \n    \n    \n@testset \"Branch and Bound\" begin\n    # A solution using nested\
    \ for loops \n    # of size 4\n    \n    # Initialize a variable \n    # to keep\
    \ track of the number of \n    # complete brackets\n    \n    # Initialize the\
    \ current level\n    # to be 0\n    \n    # Initialize a variable to keep track\
    \ of \n    # the number of open brackets\n    \n    # Initialize a variable to\
    \ keep track of \n    # the number of closed brackets\n    \n    # Initialize\
    \ a variable to keep track of \n    # the length of the current level\n    \n\
    \    # Initialize a variable to keep track of \n    # the number of times a valid\
    \ subsequence has been \n    # found for the current level\n    \n    # Initialize\
    \ the solution\n    solution = Bool[][]\n    \n    # Initialize the solution array\n\
    \    solution = Bool[][]\n    \n    # Initialize a variable to keep track of \n\
    \    # the number of times a valid subsequence has been \n    # found for the\
    \ current level\n    cnt = 0\n    \n    # Iterate through the string\n    for\
    \ i <- 0 until string.length\n        \n        # Increase the current level\n\
    \        cnt += 1\n        \n        # If the current character is a closing bracket\
    \ \n        # increment the number of open brackets\n        \n        if string[i]\
    \ == \"]\"\n            cnt += 1\n            \n        # If the current character\
    \ is an opening bracket \n        # decrease the number of open brackets\n   \
    \         \n        if string[i] == \"[\"\n            cnt -= 1\n        \n  \
    \      # If the number of open brackets is 0\n        # the current level is complete\n\
    \        \n        if cnt == 0\n            \n            # Increment the number\
    \ of times \n            # a valid subsequence has been found \n            #\
    \ for the current level\n            \n            cnt += 1\n            \n  \
    \          # Reset the solution array to empty\n            # and initialize the\
    \ solution array\n            \n            solution = Bool[][]\n            solution\
    \ = Bool[][]\n            \n            # Add the current level to the solution\
    \ array\n            solution = solution + [i]\n            \n        # If number\
    \ of open brackets is greater than or equal to 0\n        # the current level\
    \ is not complete\n        \n        if cnt >= 0\n            \n            #\
    \ Iterate through the solution array\n            for j <- 0 until solution.size\
    \ - 1\n                \n                # If the current character is an opening\
    \ bracket\n                # and the next character is a closing bracket\n   \
    \             # the current level is complete\n                \n            \
    \    if solution[j] == \"[\" && solution[j + 1] == \"]\"\n                   \
    \ cnt += 1\n                    \n                # If the current character is\
    \ a closing bracket \n                # and the next character is an opening bracket\n\
    \                # the current level is complete\n                \n         \
    \       if solution[j] == \"]\" && solution[j + 1] == \"[\"\n                \
    \    cnt += 1\n                    \n                # If the current character\
    \ is a closing bracket \n                # ", "    if is_empty(string)\n     \
    \   true\n    else\n        if string.head == \"[\"\n            true\n      \
    \  else if string.head == \"]\"\n            true\n        else\n            if\
    \ string.length > 1\n                if string.head == \"[\" and string.tail.head\
    \ == \"[\" and is_nested(string.tail.tail)\n                    true\n       \
    \         else if string.head == \"]\" and string.tail.head == \"[\" and is_nested(string.tail.tail)\n\
    \                    true\n                else if string.head == \"]\" and string.tail.head\
    \ == \"]\" and is_nested(string.tail.tail)\n                    true\n       \
    \         else\n                    false\n            else false\n        end\n\
    \    end\nend\n</code>\n<|/ a tags=sequence,string,brackets,lua |>\n<| c |>\n\
    I'm pretty sure this won't work if there are multiple valid subsequences: for\
    \ instance, the string `[[]]` will return true because both `[[]]` and `[]` are\
    \ valid subsequences, but the string `[][]` will return false because `[][]` is\
    \ not a valid subsequence.\n<|/ c |>\n<| a tags=sequence,string,brackets,lua dscore=2\
    \ |>\n<code>", "    \n    stack :: Stack = Stack(\"\")", "\"\"\"\n    Function\
    \ to check if a string contains square brackets.\n    It returns true if and only\
    \ if there is at least one nested.\n    It returns false if no nested.\n    \n\
    \    >>> is_nested(\"[]\")\n    false\n    >>> is_nested(\"[[[]]]]][[[[[]\")\n\
    \    true\n    >>> is_nested(\"[][]\")\n    false\n    >>> is_nested(\"[]\")\n\
    \    false\n    >>> is_nested(\"[[][]]\")\n    false\n    >>> is_nested(\"[[]][[\"\
    )\n    false\n\"\"\"\n    function is_nested(string::String)::Bool\n        match\
    \ string {\n            \"[]\" => true,\n            \"[[[]]]]][[[[[]\" => true,\n\
    \            \"[][]\" => false,\n            \"[]\" => false,\n            \"\
    [[][]]\" => true,\n            \"[[]][[\" => false,\n            \"[]][]]\" =>\
    \ true,\n            \"[][][]\" => true,\n            \"[][]\" => true,\n    \
    \        \"[[][]][]\" => true,\n            \"[[][]]\" => true,\n            _\
    \ => false\n        }\n    end\nend\n</cell>\n<code language=julia-1.5>", "  \
    \  if is_empty(string)\n        true\n    else\n        bracket_balance(string(1))\n\
    \    end\nend", "    open_brackets ::Int = 0\n    close_brackets ::Int = 0\n \
    \   result ::Bool = False\n    \n    if string == \"[]\" or string == \"[[]\"\
    \ or string == \"[][]\" or string == \"[[[]\"\n    result := true\n    \n    else\
    \ if string[0] == \"[\" \n    open_brackets += 1\n    \n    elif string[0] ==\
    \ \"]\" \n    close_brackets += 1", "    return match(r\"\\[*\\]\", string) \n\
    </code>\n<|/ a tags=ocaml,regex |>\n<| a tags=ocaml,regex |>\nYou want to find\
    \ the position(s) of the brackets. You don't need to use regex for this.\n<code>\n\
    # let rec findBracketPos s = function\n| [] -> []\n| c :: tl -> let lpos = findBracketPos\
    \ tl in\n    if c = '[' then lpos :: []\n    else if c = '(' && lpos = [] then\
    \ lpos :: []\n    else if c = '(' && lpos != [] then lpos :: lpos\n    else if\
    \ c = '[' && lpos != [] then lpos :: lpos \n    else if c = '{' && lpos = [] then\
    \ lpos :: []\n    else if c = '[' && lpos = [] then lpos :: []\n    else if c\
    \ = '{' && lpos != [] then lpos :: lpos \n    else if c = '(' && lpos != [] then\
    \ lpos :: lpos\n    else if c = '{' && lpos != [] then lpos :: lpos\n    else\
    \ []\n# find brackets\nlet find_brackets = findBracketPos \"[]{}()\"\n</code>\n\
    <|/ a dscore=1 |>\n<| c |>\nThis solution doesn't work in OCaml. OCaml has strictly\
    \ pattern matching which is different from C#. For example, `findBracketPos \"\
    {}[]\"` will return `[1; 0]`, which is an error.\n<|/ c |>\n<| a dscore=0 |>\n\
    My solution incorporates several different concepts from the answers above:\n\
    <code>\n# type bracket_position = {\n  bracket_string : string;\n  bracket_start\
    \ : int;\n  bracket_end : int;\n};;", "    result <- false\n    depth <- 0\n \
    \   index <- 0\n    while(index < length(string)) do\n        if string[index]\
    \ == '[' then\n            depth <- depth + 1\n        elseif string[index] ==\
    \ ']' then\n            depth <- depth - 1\n        elseif depth == 0 then\n \
    \           result <- true\n        end if\n        index <- index + 1\n    end\n\
    \    result\nend\n</cell>\n<code language=julia-1.0>\n\"\"\"\nCreate a function\
    \ that takes a string as input which contains a specific character \nsomewhere\
    \ in the string.", "    len = length(string)\n    if len == 0 then return true\n\
    \    if len == 1 then return false \n    if string[1] == \"]\" and string[len-1]\
    \ == \"[\" then return true\n    return is_nested(string[1:len-1])\n</code>\n\
    I haven't tested this code in any way, but I believe it to be correct.\n<|/ a\
    \ dscore=1 tags=string,algorithm,string-matching,pattern-matching,haskell |>\n\
    <| c |>\nThat code does not work recursively: try it with the string `[[]]`.\n\
    <|/ c |>\n<| c |>\nIt doesn't work; try it with the string `[[]]`. Also you forgot\
    \ to include the check for an empty string at the end.\n<|/ c |>\n<| c |>\n- thank\
    \ you, you're right. I had forgotten to add it. Now it should work.\n<|/ c |>\n\
    <| a |>\nA solution in one line:\n<code>\nimport Data.List\nisNested str = any\
    \ (isPrefixOf \"[]\") (subsequences str)\n</code>\n<|/ a dscore=1 tags=string,algorithm,string-matching,pattern-matching,haskell\
    \ |>\n<| c |>\nThis does not work for `isNested`. If `str = \"[]]]]\"` then `isPrefixOf\
    \ \"[]\" str` is `False`. Neither does it work for `isPrefixOf \"[[[[\". Also,\
    \ `subsequences` does not work for any string, including `\"\"`.\n<|/ c |>\n<|\
    \ c |>\nIt works with strings of the form \"[]\", \"[[]\", \"[[[]]\", \"[[][[]]\"\
    , and \"[][[][[]]\" as long as there is at least one nested bracket.\n<|/ c |>\n\
    <| c |>\n, yes, but it does not work if there are no nested brackets at all. The\
    \ function should return `True` for strings of any length. I'll modify the function\
    \ to account for that too.\n<|/ c |>\n<| c |>\nI see. I was just confused because\
    \ it returned `True` for `\"[]\"`, `\"[[]\"`, `\"[[[]\"` and `\"[][[]\"` but `False`\
    \ for `\"[]]]]\"` and `\"[][[][[]\"`.\n<|/ c |>\n<| c |>\nThe function is correct\
    \ in that case since the string `\"\"` is nested just one level.\n<|/ c |>\n<|\
    \ a |>\nThe other answers have covered most of it, but I'm posting this anyway\
    \ because it was asked in another question. So, for the fun of it, we could implement\
    \ our ", "    if is_empty(string)\n        return true\n    \n    let brackets\
    \ = string.chars()\n    let open_count = [0..]\n    let closed_count = [0..]\n\
    \    \n    for bracket in brackets\n        if bracket == '['\n            open_count[bracket]\
    \ += 1\n        elseif bracket == ']'\n            closed_count[bracket] += 1\n\
    \        else\n            if open_count[bracket] > 1\n                false\n\
    \            else\n                if closed_count[bracket] > 0\n            \
    \        false\n                else\n                    true\n    end", "  \
    \  if is_bracket(string) == False\n        false\n    else\n        if has_valid_nested_brackets(string)\n\
    \            true\n        else\n            false\n    end\nend\n</cell>\n<code\
    \ language=julia-1.3>\n\"\"\"\n    A valid bracket is either an empty bracket,\
    \ an opening bracket or a closing bracket.\n    A valid nesting is a bracket which\
    \ contains nested brackets or nesting brackets."]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
