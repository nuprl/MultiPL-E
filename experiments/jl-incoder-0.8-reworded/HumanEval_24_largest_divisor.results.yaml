language: jl
name: HumanEval_24_largest_divisor
results:
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n < 2 return n\n    \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\
    \n@testset begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3) == 1)\n\
    \t@test(candidate(7) == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100)\
    \ == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmpzilzre.jl:1\nin expression starting at /tmp/tmpmpzilzre.jl:1\n"
  stdout: ''
  timestamp: 1659977817
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n <= 0 then 0 else largest_divisor(n/2) + 1\nend\n</cell>\n<text>\n\
    Putting it all together\nusing Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\
    \t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10)\
    \ == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"0\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmppx8kz6nb.jl:6\nin expression starting at /tmp/tmppx8kz6nb.jl:6\n"
  stdout: ''
  timestamp: 1659977817
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n % 2 == 0: \n        return n\n    else:\n        return largest_divisor(n\
    \ / 2) + n // 2 * largest_divisor(n / 2)\nend\nusing Test\n\n@testset begin\n\n\
    candidate = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7)\
    \ == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_gmpyrgw.jl:7\nin expression starting at /tmp/tmp_gmpyrgw.jl:7\n"
  stdout: ''
  timestamp: 1659977817
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n<2\n        return n\n    else if n % 2 == 0\n        return largest_divisor(n\
    \ / 2)\n    else\n        return largest_divisor(n / 2) + 1\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7)\
    \ == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8tpksc_q.jl:8\nin expression starting at /tmp/tmp8tpksc_q.jl:8\n"
  stdout: ''
  timestamp: 1659977817
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n < 0 \n        error \"n must be positive\"\n    if n % 2 == 0 \n\
    \        return n\n    return largest_divisor(n / 2) + n\n</cell>\n<code language=julia-0.6>\n\
    largest_divisor(15) # should return 5\n</cell>\n<code language=julia-0.6>\n# check\
    \ it works by trying all the numbers\nfor i in 0:9\n    large_divisor = largest_divisor(i)\
    \ # should be Int64\n    println(\"$i => $(large_divisor)\")\nend\n</cell>\n<text>\n\
    The function largest_divisor is recursive, so for large numbers, it will take\
    \ a long time to run. To speed it up we could make use of the fact that we are\
    \ only interested in divisors up to $n$. We can do this by simply ignoring all\
    \ numbers below $n$.\nusing Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\
    \t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10)\
    \ == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"\"\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpzydn9rd7.jl:7\nin expression starting at /tmp/tmpzydn9rd7.jl:7\n"
  stdout: ''
  timestamp: 1659977817
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0 then return 1 \n    s=1 \n    for d in range(1,n) do \n      \
    \  if n%d==0 then s=d \n    end \n    return s \nend \n\"\"\"\nusing Test\n\n\
    @testset begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3) == 1)\n\t\
    @test(candidate(7) == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100)\
    \ == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp5ak8k13b.jl:6\nin expression starting at /tmp/tmp5ak8k13b.jl:6\n"
  stdout: ''
  timestamp: 1659977817
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n<2 return 0\n    else if n==2 return 1\n    else if n%3==0 return\
    \ 3\n    else if n%5==0 return 5\n    else if n%7==0 return 7\n    else return\
    \ largest_divisor(n/3)+1\nend \nusing Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\
    \t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10)\
    \ == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5mayrnv9.jl:7\nin expression starting at /tmp/tmp5mayrnv9.jl:7\n"
  stdout: ''
  timestamp: 1659977817
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n <= 0\n        error(\"n must be positive\")\n    end\n    for ii\
    \ in 2:100\n        if n%ii == 0\n            return ii\n        end\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3)\
    \ == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100)\
    \ == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpxtt22azb.jl:17

    '
  stdout: "test set: Test Failed at /tmp/tmpxtt22azb.jl:20\n  Expression: candidate(3)\
    \ == 1\n   Evaluated: 3 == 1\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxtt22azb.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxtt22azb.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpxtt22azb.jl:21\n  Expression: candidate(7) == 1\n   Evaluated:\
    \ 7 == 1\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxtt22azb.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxtt22azb.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpxtt22azb.jl:22\n  Expression: candidate(10) == 5\n   Evaluated:\
    \ 2 == 5\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxtt22azb.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxtt22azb.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpxtt22azb.jl:23\n  Expression: candidate(100) == 50\n   Evaluated:\
    \ 2 == 50\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxtt22azb.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxtt22azb.jl:19\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     4      5\n"
  timestamp: 1659977818
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n%2 ==0 \n        return n\n    \n    else \n        return largest_divisor(n-1)\n\
    </code>\n<|/ a tags=haskell |>\n<| a dscore=0 tags=haskell |>\n<code>\nlargest_divisor\
    \ n = if n `mod` 2 == 0 then n else largest_divisor(n `div` 2)\n</code>\n<|/ a\
    \ |>\n<| a tags=haskell |>\n<code>\nlargestDiv n = maximum (div n 2) \n</code>\n\
    This code computes the maximum divisor that can be formed by dividing n by 2.\
    \ We want to find an even divisor, which means the division between n and 2 is\
    \ even.\n<|/ a dscore=0 |>\n<| c |>\nWhile this code may solve the question, [including\
    \ an explanation](//meta.stackexchange.com/q/114762) of how and why this solves\
    \ the problem would really help to improve the quality of your post, and probably\
    \ result in more up-votes. Remember that you are answering the question for readers\
    \ in the future, not just the person asking now. Please [edit] your answer to\
    \ add explanations and give an indication of what limitations and assumptions\
    \ apply.\n<|/ c |>\n<| a dscore=0 |>\nThis is my own solution.\n<code>\nlargestDiv\
    \ :: Int -> Int\nlargestDiv n = largest n\n  where\n    largest n = \n      if\
    \ n == 0 then 0\n      else if n `mod` 2 == 0 \n         then n\n         else\
    \ if n `mod` 3 ==0 \n             then n\n             else largest $ (n `div`\
    \ 2)\n</code>\n<|/ a tags=haskell |>\n<| a tags=haskell dscore=0 |>\nTo find largest\
    \ number that divides n evenly use\n<code>\nlargestDiv n = max (div n 2) 1\n</code>\n\
    <|/ a |>\n<| a dscore=0 tags=haskell |>\nAnother solution is using lists:\n<code>\n\
    largestDiv n = maximum (map div (cycle [2..n]))\n</code>\n<|/ a |>\n<| a dscore=0\
    \ |>\n<code>\nlargestDiv n = maximum (div n 2)\n</code>\nThis code computes the\
    \ maximum divisor that can be formed by dividing n by 2. We want to find an even\
    \ divisor, which means the division between n and 2 is even.\n<|/ a tags=haskell\
    \ |>\n<| a dscore=0 |>\n<code>\nlargestDiv n = \nusing Test\n\n@testset begin\n\
    \ncandidate = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7)\
    \ == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzk_ieocf.jl:11\nin expression starting at\
    \ /tmp/tmpzk_ieocf.jl:11\n"
  stdout: ''
  timestamp: 1659977817
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==1 \n        return 1\n    else \n        largest_divisor = largest_divisor(n/2)\
    \ + n%2\n        return largest_divisor\n    end\nend \n</cell>\n<code language=julia-1.0>\n\
    largest_divisor(15)\n</cell>\n<code language=julia-1.0>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7)\
    \ == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpamhpf8ib.jl:13\nin expression starting at\
    \ /tmp/tmpamhpf8ib.jl:13\n"
  stdout: ''
  timestamp: 1659977817
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==1\n        1\n    else\n        largest_divisor(n-1)%n+1\nend\n\
    </cell>\n<text>\nNow we want to write an iterator that returns numbers between\
    \ 1 and n (inclusive) with the property that:\nFor any $n$, no prime factors greater\
    \ than (n/2)^(1/2) are divisible by $n$\nThe largest prime factor is $n$\nSo we\
    \ know that\n$$ Fn = \\begin{pmatrix}1&n&n^2&n^3&\\ldots&n^{n/2}\\end{pmatrix}\\\
    quad \\text{and} \\quad Fn = \\begin{pmatrix}1&n\\end{pmatrix}$$\nusing Test\n\
    \n@testset begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3) == 1)\n\
    \t@test(candidate(7) == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100)\
    \ == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphejmgjl8.jl:11\nin expression starting at\
    \ /tmp/tmphejmgjl8.jl:11\n"
  stdout: ''
  timestamp: 1659977817
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n%2 == 0: return n\n    return largest_divisor(n/2)\nusing Test\n\n\
    @testset begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3) == 1)\n\t\
    @test(candidate(7) == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100)\
    \ == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjap85c8s.jl:1\nin expression starting at /tmp/tmpjap85c8s.jl:1\n"
  stdout: ''
  timestamp: 1659977817
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    # Write your code here.\n    # Solution: \n    count = 0\n    largest\
    \ = 0\n    for number in 1:n \n        if n % number == 0 \n            count\
    \ += 1\n            if count == 2 \n                largest = number\n       \
    \     else \n                count = 1\n    return largest\n</code>\n<|/ a |>\n\
    <| a tags=math,algorithm,scala,big-o |>\nFor a number n, the greatest number that\
    \ can be divided by every number from 1 to n except 1 can be written as n - (n\
    \ + 1) / 2. Similarly, the smallest number that can be divided by every number\
    \ from 1 to n except 1 can be written as n + (n - 1) / 2. We can find the smallest\
    \ and greatest numbers by finding the smallest and greatest divisors (i.e. the\
    \ numbers such that n % divisor == 0). The smallest number can be written as the\
    \ greatest number minus 1. And vice versa for the greatest number. Let's say we\
    \ have the smallest and greatest numbers stored as the smallest and greatest variables\
    \ respectively. \nWe can use the following formulas to find the numbers by which\
    \ we can get to these numbers. \nIf we can divide n by the smallest number by\
    \ subtracting 1 and dividing n by the greatest number by adding 1, then the greatest\
    \ number can be written as n + (n - 1) / 2, and the smallest number can be written\
    \ as the smallest number - 1. (i.e. if n can be written as n + (n - 1) / 2, then\
    \ the smallest number can be written as n - (n - 1) / 2.) This formula is true\
    \ for integers up to 2n / 2, because 2n / 2 can only evenly divide n by 2. \n\
    If we can divide n by the smallest number by subtracting 1 and dividing n by the\
    \ greatest number by adding 1, then the smallest number can be written as n -\
    \ (n - 1) / 2, and the greatest number can be written as n + (n - 1) / 2. \nIf\
    \ we can divide n by the smallest number by subtracting 1 and dividing n by the\
    \ greatest number by adding 1, then the smallest number can be written as n -\
    \ (n - 1) / 2, and the greatest number can be written as n + (n - 1) / 2. \nIf\
    \ we can divide n by the smallest number by subtracting 1 and dividing n by the\
    \ greatest number by adding 1, then the smallest number can be written as n -\
    \ (n - 1) / 2, and the greatest number can be written as n + (n - 1) / 2. \nIf\
    \ we can divide n by the smallest number by subtracting 1 and dividing n by the\
    \ greatest number by adding 1, then the smallest number can be written as n -\
    \ (n - 1) / 2, and the greatest number can be written as n + (n - 1) / 2. \nIf\
    \ we can divide n by the smallest number \nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\
    \t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpm2joxeat.jl:18\nin expression starting at\
    \ /tmp/tmpm2joxeat.jl:18\n"
  stdout: ''
  timestamp: 1659977817
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    largest_divisor = 1\n    for divisor in 2..n-1 \n        if n%divisor\
    \ == 0\n            if divisor*divisor > largest_divisor\n                largest_divisor\
    \ = divisor\n        end\n    end\n    largest_divisor\nend\n</cell>\n<code language=julia-1.0>\n\
    largest_divisor(15)\n</cell>\n<code language=julia-1.0>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7)\
    \ == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp17qcbhrl.jl:15\nin expression starting at\
    \ /tmp/tmp17qcbhrl.jl:15\n"
  stdout: ''
  timestamp: 1659977817
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n % 2 == 0 \n        then largest_divisor(n / 2) \n        else n \n\
    \    end\nend\n</code>\n<|/ a dscore=1 |>\n<| a tags=algorithm,julia,division,recursion,recursion\
    \ |>\nThis can be done very easily with MathProgs package. Here is the solution\
    \ with MathProgs package:\n<code>\njulia> using MathProgs.Simple\nusing Test\n\
    \n@testset begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3) == 1)\n\
    \t@test(candidate(7) == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100)\
    \ == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"largest_divisor\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp674ycaxs.jl:7\nin expression starting at /tmp/tmp674ycaxs.jl:7\n"
  stdout: ''
  timestamp: 1659977817
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n <= 0\n        error(\"n must be positive!\")\n    end\n    \n   \
    \ if n % 2 == 0 \n        error(\"n must be even!\")\n    end\n    \n    largest\
    \ = 2\n    for div in (3,5,7,9,11..)\n        if n % div == 0 && div < largest\n\
    \            largest = div\n        end\n    end\n    return largest\nend\n</code>\n\
    <|/ a dscore=0 tags=julia |>\n<| c |>\nHi thanks for your comment, i got error\
    \ when using this code. could you pls check my edit?\n<|/ c |>\n<| c |>\nHi, I\
    \ am happy you made it work, but that error you received is because you defined\
    \ `largest_divisor` inside of another function called `largest_divisor`. So you\
    \ are defining a function within a function which is incorrect. What you need\
    \ to do is to define your function outside of the function called `largest_divisor`\
    \ in the global namespace. \nThe other issue with your code is that you don't\
    \ need to have two loops to find your answer. Just one loop would do it.\n<|/\
    \ c |>\n<| a tags=julia |>\nHere is a Julia 2.0 solution, based on yours alone\
    \ (thanks Robert).\n<code>\nusing Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\
    \t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10)\
    \ == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmphtxb3m_9.jl:15\nin expression starting at /tmp/tmphtxb3m_9.jl:15\n"
  stdout: ''
  timestamp: 1659977817
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==1\n        return n\n    else if n%2==0\n        return largest_divisor(n/2)\n\
    \    else\n        return largest_divisor(n/2)+1\nend\n</cell>\n<code language=julia-1.5>\n\
    largest_divisor(15)\n</cell>\n<text>\nExercise: Find how many divisors there are\
    \ for 15 between 1 and 100000, inclusive.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\
    \t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpghw7ewhg.jl:8\nin expression starting at /tmp/tmpghw7ewhg.jl:8\n"
  stdout: ''
  timestamp: 1659977817
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    cdef int i,j\n    cdef Int64[::1] remainders\n    remainders=np.empty(0,dtype=np.int64)\n\
    \    j=0\n    for i in range(n):\n        remainders[j]=i\n        if i%2==0:\n\
    \            j+=1\n    for k in range(j):\n        remainders[k]=remainders[k]+1\n\
    \    return remainders[-1]\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThis is awesome.\
    \ Thank you so much!!\n<|/ c |>\n<| c |>\nWhat is your `j` variable for? I tried\
    \ to run this on `PyCharm 2020.2.3` and it ran pretty slow\n<|/ c |>\n<| c |>\n\
    I used `j` to count the number of times I iterate over the array, so that I can\
    \ index `remainders` to get the last remaining number.\n<|/ c |>\n<| a dscore=0\
    \ |>\nFor a non-recursive Python implementation, here is a simple Python code\
    \ using list comprehension:\n<code>\ndef largest_divisor(n):\n    max_divisor\
    \ = [1]\n    for d in range(2, n + 1):\n        if n % d == 0:\n            if\
    \ d > max_divisor[0]:\n                max_divisor[0] = d\n    return max_divisor[0]\n\
    </code>\n<|/ a tags=math,python,algorithm |>\n<| a |>\nA slightly different solution,\
    \ using recursion.\n<code>\ndef largestDivisor(number):\n    largestDivisor =\
    \ 0\n    for i in range(1, number):\n        divisor = 0\n        while number\
    \ % i == 0:\n            divisor += i\n            number /= i\n        if divisor\
    \ > largestDivisor:\n            largestDivisor = divisor\n    if number > 1:\n\
    \        largestDivisor = largestDivisor * number\n    return largestDivisor\n\
    </code>\n<|/ a dscore=0 tags=math,python,algorithm |>\n<| a tags=math,python,algorithm\
    \ dscore=0 |>\n<code>\ndef largest_divisor(n):\n        largest_divisor = 0\n\
    \        for i in range(1, n + 1):\n            divisor = 0\n            while\
    \ n % i == 0:\n                divisor += i\n                n /= i\n        \
    \    if divisor > largest_divisor:\n                largest_divisor = divisor\n\
    \        if n>1:\n            largest_divisor = largest_divisor * n\n        return\
    \ largest_divisor\nusing Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\
    \t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10)\
    \ == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"function\" at /tmp/tmp5f08rbad.jl:5 expected\
    \ \"end\", got \"int\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp5f08rbad.jl:6\n\
    in expression starting at /tmp/tmp5f08rbad.jl:6\n"
  stdout: ''
  timestamp: 1659977817
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n % 2 == 0 \n        then \n            largest_divisor(n/2) \n   \
    \     else \n            largest_divisor(n/2 + 1) \nend \n</cell>\n<code language=julia-1.0>\n\
    @code_warntype largest_divisor(11)\n@code_warntype largest_divisor(6)\n@code_warntype\
    \ largest_divisor(10)\n@code_warntype largest_divisor(30)\n@code_warntype largest_divisor(15)\n\
    </cell>\n<text>\nConsider the following function:\nusing Test\n\n@testset begin\n\
    \ncandidate = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7)\
    \ == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9gfib2m9.jl:12\nin expression starting at\
    \ /tmp/tmp9gfib2m9.jl:12\n"
  stdout: ''
  timestamp: 1659977817
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n <= 2 \n        return n\n    else if n % 2==0 \n        return largest_divisor(n\
    \ / 2)\n    else \n        return largest_divisor(n / 2) + (n // 2)\n    end\n\
    using Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3)\
    \ == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100)\
    \ == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsuey0ypm.jl:8\nin expression starting at /tmp/tmpsuey0ypm.jl:8\n"
  stdout: ''
  timestamp: 1659977817
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n <= 1\n        return n\n    \n    largest_divisor = 1\n    \n   \
    \ for d in divisors(n) do \n        if n mod d == 0\n            largest_divisor\
    \ = d\n            break\n        end\n    end\n    \n    return largest_divisor\n\
    end\n</cell>\n<text>\nProblem 3\nWrite a function that accepts a positive integer\
    \ $n$ and returns the first number that is divisible by $n$ but not divisible\
    \ by $n+1$. The first number that is divisible by $n$ but not divisible by $n+1$\
    \ is $n+1$. If $n$ has a leading 0, then $n+1$ does not have a leading 0. If $n$\
    \ is negative, then we assume that it has only one leading 0. The function should\
    \ return -1 if it can't find such a number.\nusing Test\n\n@testset begin\n\n\
    candidate = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7)\
    \ == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"d\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpezx8n6pe.jl:12\nin expression starting at /tmp/tmpezx8n6pe.jl:12\n"
  stdout: ''
  timestamp: 1659977817
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n  if n < 2\n    throw ErrorException(\"n is too small for large divisors\"\
    )\n  else\n    # largest possible number for given n is n-1 for even and n+1 for\
    \ odd\n    largest_divisor = (n - 1) & ((n + 1) & 1)\n    return largest_divisor\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3)\
    \ == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100)\
    \ == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"ErrorException\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpz4ifoztv.jl:7\nin expression starting at /tmp/tmpz4ifoztv.jl:7\n"
  stdout: ''
  timestamp: 1659977817
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0\n        0\n    elseif n==1\n        n\n    elseif n%2 == 0\n\
    \        largest_divisor(n/2)\n    else\n        largest_divisor(n/2)+1\nend\n\
    using Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3)\
    \ == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100)\
    \ == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp6zd1w8b9.jl:5\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp6zd1w8b9.jl:1\n\
    in expression starting at /tmp/tmp6zd1w8b9.jl:1\n"
  stdout: ''
  timestamp: 1659977817
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n == 0\n    then return 0\n    else if n % 2 == 0\n    then return\
    \ n\n    else return largest_divisor(n / 2)\nusing Test\n\n@testset begin\n\n\
    candidate = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7)\
    \ == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpgqca7578.jl:7\nin expression starting at /tmp/tmpgqca7578.jl:7\n"
  stdout: ''
  timestamp: 1659977819
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n % 2 == 0\n        then largest_divisor(n / 2)\n    else if n % 4\
    \ == 0\n        then largest_divisor(n / 4)\n    else if n % 8 == 0\n        then\
    \ largest_divisor(n / 8)\n    else largest_divisor(n / 2)\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n@code_warntype largest_divisor(13)\n</cell>\n<text>\n\
    \U0001F449  Exercise: How many ways can you divide a number n into 3 numbers whose\
    \ sum is less than n?\nusing Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\
    \t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10)\
    \ == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"largest_divisor\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9h34xnf_.jl:7\nin expression starting at /tmp/tmp9h34xnf_.jl:7\n"
  stdout: ''
  timestamp: 1659977819
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    \n    \n    \n    \n    \n    \n    return Int64(1)\nend\n</cell>\n<code\
    \ language=julia-1.6>\nlargest_divisor(15)\n</cell>\n<text>\nPart 2 - Problem\
    \ 3\nWrite a function which computes the factorial of n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7)\
    \ == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmpk3t86x.jl:14\nin expression starting at\
    \ /tmp/tmpmpk3t86x.jl:14\n"
  stdout: ''
  timestamp: 1659977819
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n % 2 == 0 \n        then largest_divisor(n / 2)\n    else n % 2 ==\
    \ 1\n        then largest_divisor(n * 3 + 1)\n    else \n        largest_divisor(n\
    \ * 3 + 1)\n</code>\n<|/ a tags=big-o,runtime,recursion,algorithm dscore=2 |>\n\
    <| c |>\nPlease [edit] your answer to explain what you are doing and how it answers\
    \ the question. Many SO posters are newbies and will not understand the code you\
    \ have posted. Your answer is in the moderation queue for being low-quality.\n\
    <|/ c |>\n<| a |>\n<code>\n#include <iostream>\n#include <cmath>\nusing namespace\
    \ std;\nusing Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3)\
    \ == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100)\
    \ == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"largest_divisor\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_kg1lht7.jl:7\nin expression starting at /tmp/tmp_kg1lht7.jl:7\n"
  stdout: ''
  timestamp: 1659977819
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n % 2 == 0 \n        return n \n    else \n        return largest_divisor(n\
    \ / 2)\n</code>\nThis takes about half the time compared to brute-force.\n<|/\
    \ a |>\n<| c |>\nIt's not necessary to define a function just to solve this particular\
    \ problem, we can use `isprime` function defined here: https://stackoverflow.com/a/54247458/341994\n\
    <|/ c |>\n<| c |>\nYou do realize that this is basically a [sieve of Eratosthenes](https://en.wikipedia.org/wiki/Sieve_of_Eratosthenes)\
    \ right? It's a great algorithm if you need to do large numbers (tens of billions\
    \ of prime numbers up to around 10^16 for example) but you shouldn't use this\
    \ for smaller numbers unless you can find a more efficient algorithm for smaller\
    \ numbers that works on the same principle. Also, I don't think this is efficient.\
    \ Every time you try a number you divide it by 2 (`n//2`). It would be better\
    \ if you try every odd number from 1 to n and then divide by 2 only when you find\
    \ that it is actually divisible by 2.\n<|/ c |>\n<| c |>\nThat was true of sieve\
    \ of eratosthenes, but as of 2019, Sieve of Atkin is fast for large numbers (10^12).\
    \ For smaller numbers you can simply use [Prime Number Sieve Algorithm](https://stackoverflow.com/questions/1520214/what-is-the-fastest-way-to-find-primes-in-python)\
    \ from the link I posted as my answer - it worked for me in 30 minutes.\n<|/ c\
    \ |>\n<| a tags=primes,algorithm,python,performance |>\nAs a mathematician, I\
    \ believe that it is possible to solve this problem without brute forcing. I'm\
    \ afraid that I can't speak to its efficiency, but I can provide a simple solution\
    \ that may be useful to someone. I believe that a mathematician may recognize\
    \ this problem as a NP Hard problem, since it is the same as finding the smallest\
    \ prime divisor of a positive integer. I believe the optimal algorithm is NP-hard.\n\
    As a reminder, a prime number is a positive integer that is only evenly divisible\
    \ by 1 and itself. This means that a prime number has only two divisors, 1 and\
    \ itself. To find the smallest prime divisor of n, we must find the smallest divisor\
    \ of n that divides n evenly. For example, if n = 3, then the smallest divisor\
    \ of n that divides n evenly is 2, since 3 divided by 2 is 1, which divides n\
    \ evenly. If n = 10, then the smallest divisor \nusing Test\n\n@testset begin\n\
    \ncandidate = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7)\
    \ == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwtlbt3dv.jl:10\nin expression starting at\
    \ /tmp/tmpwtlbt3dv.jl:10\n"
  stdout: ''
  timestamp: 1659977819
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n < 2 \n        2\n    else\n        largest = 2\n        for x in\
    \ range(3, largest, 2)\n            if n % x == 0\n                largest = x\n\
    \        end\n    end\nend\n</cell>\n<code language=julia-1.3>\n@time largest_divisor(100000);\n\
    </cell>\n<text>\nExercise 2\nWhat is $\\sqrt{n}$ for $n = 2^j$ for all $j$? Find\
    \ out for yourself (Hint the root is $n$ and $n$ is even).\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7)\
    \ == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpert0v7o8.jl:16\nin expression starting at\
    \ /tmp/tmpert0v7o8.jl:16\n"
  stdout: ''
  timestamp: 1659977819
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==1\n        return n\n    else:\n        div::Int64 = n / 2 # integer\
    \ division\n        if div % 2 != 0\n            div = div - 1\n            if\
    \ div > n / 2 # if n/2 was already even, reduce it \n                div = div\
    \ - 1 # and check if it divides evenly again\n            end\n        else\n\
    \            div = div - 1\n        end\n        largest_divisor(div)\n    end\n\
    end\n\"\"\"\n</cell>\n<code language=julia-1.6>\n@time largest_divisor(15)\n@time\
    \ largest_divisor(55)\n@time largest_divisor(22)\n@time largest_divisor(100)\n\
    @time largest_divisor(50)\n@time largest_divisor(10)\n@time largest_divisor(11)\n\
    </cell>\n<text>\nProblem 2.\nLet $A \\in \\mathbb{Z}^+$ be a field of integers.\
    \ Show that \n$$\n\\begin{align}\nA'(\\alpha) &= \\begin{pmatrix} 1 & 0 \\ 0 &\
    \ -1 \\end{pmatrix} \\alpha \\\n&= A(\\alpha) \\\n&= \\begin{pmatrix} -1 & 0 \\\
    \ 0 & 1 \\end{pmatrix} \\alpha \\\n&= A(\\alpha) \\\n&= A' \\alpha\n\\end{align}\n\
    $$\nwhere $A'(\\alpha)$ is $A'$ in projective coordinates modulo $\\alpha$.\n\
    using Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3)\
    \ == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100)\
    \ == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: newline not allowed after \":\" used for quoting\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmp5ibiqe5m.jl:9\nin expression starting\
    \ at /tmp/tmp5ibiqe5m.jl:9\n"
  stdout: ''
  timestamp: 1659977819
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n%2==0 \n        then return n \n        else \n            return\
    \ largest_divisor(n/2) \n    end\nusing Test\n\n@testset begin\n\ncandidate =\
    \ largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\t\
    @test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpb4gqhs9u.jl:7\nin expression starting at /tmp/tmpb4gqhs9u.jl:7\n"
  stdout: ''
  timestamp: 1659977819
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n == 1\n        1\n    else\n        largest_divisor(n / 2) + 1\n \
    \   end\nend\n</code>\n<|/ a tags=function,julia |>\n<| a tags=function,julia\
    \ |>\nThe answer above has already posted a solution that I wanted to share, but\
    \ I thought I'd share my code as well. The answer that uses only division operations\
    \ to find the largest number that divides n evenly, smaller than n has a runtime\
    \ of O(n) and a space complexity of O(n). \n<code>\nusing Test\n\n@testset begin\n\
    \ncandidate = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7)\
    \ == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbchjtgpp.jl:12\nin expression starting at\
    \ /tmp/tmpbchjtgpp.jl:12\n"
  stdout: ''
  timestamp: 1659977819
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    largest_divisor = 1\n    for divisor in 2::Int64, n/divisor\n        largest_divisor\
    \ = divisor\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\
    \t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10)\
    \ == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid iteration specification\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzgujg8_q.jl:8\nin expression starting at /tmp/tmpzgujg8_q.jl:8\n"
  stdout: ''
  timestamp: 1659977819
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n % 2 == 0 and n / 2 < n \n        then \n            largest_divisor(n/2)\n\
    \    else \n        largest_divisor(sqrt(n))\n</code>\n<|/ a tags=math,big-o,performance,algorithm\
    \ dscore=0 |>\n<| c |>\nI haven't checked it, but this sounds like it could give\
    \ a wrong answer for the case where the divisor is 1, because `largest_divisor(sqrt(n))`\
    \ will run forever, and will eventually run out before the program ends.\n<|/\
    \ c |>\n<| a tags=math,big-o,performance,algorithm |>\nHere is a recursive solution\
    \ that I tested with a few edge cases. I thought it would be interesting to compare\
    \ it with the other answers and see which one is faster.\n<code>\nfun largest_divisor(n)\
    \ = \n    match n with\n    | 0 | 1 -> 1\n    | 1 -> 1\n    | 2 | 5 | 7 | 11 ->\
    \ 3\n    | _ ->\n        let d = n div 2\n        if d > n then largest_divisor(sqrt(n))\
    \ else if n % d == 0 then largest_divisor(d) else largest_divisor(n / d)\n</code>\n\
    <|/ a dscore=0 |>\n<| a dscore=0 |>\nThis works in O(sqrt(n)) time:\n<code>\n\
    def largest_divisor(n):\n    i = 2\n    while i*i <= n:\n        if n % i == 0:\n\
    \            return i\n        i += 1\n</code>\n<|/ a tags=math,big-o,performance,algorithm\
    \ |>\n<| c |>\nIt works fine but doesn't produce the correct answer: for instance,\
    \ if `n = 4`, `i` will never be equal to `sqrt(n)`, and so the function will return\
    \ `4` instead of the correct result.\n<|/ c |>\n<| c |>\nYes, you're right. I\
    \ had not considered the case of negative numbers. The solution is fixed.\n<|/\
    \ c |>\n<| c |>\nThanks for the edit. I've corrected my answer.\n<|/ c |>\n<|\
    \ a dscore=0 |>\nHere is my python solution that returns correct answers efficiently.\
    \ Still O(n^2) time complexity though:\n<code>\ndef largest_divisor(n):\n    i\
    \ = 0\n    while i * i <= n:\n        if n % i == 0:\n            return i\n \
    \       i += 1\n    return n\n</code>\n<|/ a tags=math,big-o,performance,algorithm\
    \ |>\n<| c |>\nI'm interested to see how fast this is. It looks like this is just\
    \ an iterative approach, where as I suspect it can be done in linear time.\n<|/\
    \ c |>\n<| \nusing Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\t\
    @test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10) ==\
    \ 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"n\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpq0x2fpoa.jl:6\nin expression starting at /tmp/tmpq0x2fpoa.jl:6\n"
  stdout: ''
  timestamp: 1659977819
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if (n<2) then 0 else n div 2\n</code>\n<|/ a tags=julia |>\n<| a tags=julia\
    \ |>\nA solution based on the fact that all prime factors of a number are themselves\
    \ prime factors of their divisors.\n<code>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\
    \t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"0\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmprhq04bsv.jl:6\nin expression starting at /tmp/tmprhq04bsv.jl:6\n"
  stdout: ''
  timestamp: 1659977819
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    x <- n % n % n % n % n % n % n % n % n % n % n % n % n % n % n % n % n\
    \ % n % n % n % n % n % n % n % n % n % n % n % n % n % n % n % n % n % n % n\
    \ % n % n % n % n % n % n % n % n % n % n % n % n % n % n % n % n % n % n % n\
    \ % n % n % n % n % n % n % n % n % n % n % n % n % n % n % n % n % n % n % n\
    \ % n % n % n % n % n % n % n % n % n % n % n % n % n % n % n % n % n % n % n\
    \ % n % n % n % n % n % n % n % n % n % n % n % n % n % n % n % n % n % n % n\
    \ % n % n % n % n % n % n % n % n % n % n % n % n % n % n % n % n % n % n % n\
    \ % n % n % n % n % n % n % n % n % n % n % n % n % n % n % n % n % n % n % n\
    \ % n % n % n % n % n % n % n % n % n % n % n % n % n % n % n % n % n % n % n\
    \ % n % n % n % n % n % n % n % n % n % n % n % n % n % n % n % n % n % n % n\
    \ % n % n % n % n % n % n % n % n % n % n % n % n % n % n % n % n % n % n % n\
    \ % n % n % n % n % n % n % n % n % n % n % n % n % n % n % n % n % n % n % n\
    \ % n % n % n % n % n % n % n % n % n % n % n % n % n % n % n % n % n % n % n\
    \ % n % n % n % n % n % n % n % n % n % n % n % n % n % n % n % n % n % n % n\
    \ % n % n % n % n % n % n % n % n % n % n % n % n % n % n % n % n % n % n % n\
    \ % n % n % n % n % n % n % n % n % n % n % n % n % n % n % n % n % n % n % n\
    \ % n % n % n % n % n % n % n % n % n % n % n % n % n % n % n % n % n % n % n\
    \ % n % n % n % n % n % n % n % n % n % n % n % n % n % n % n % n % n % n % n\
    \ % n % n % n % n % n % n % n % n % n % n % n % n % n % n % n % n % n % n % n\
    \ % n % n % n % n % n % n % n % n % n % n % n % n % n % n % n % n % n % n % n\
    \ % n % n % n % n % n % n % n % n % n % n % n % n % n % n % n % n % n % n % n\
    \ % n % n % n % n % n % n % n % n % n % n % n % n % n % n % n % n % n % n % n\
    \ % n % n % n % n % n % n % n % n % n % n % n % n % n % n % n % n % n % n % n\
    \ % n % n % n % n % n % n % n % n % n % n % n % n % n % n % n % n % n % n % n\
    \ % n % n % n % n % n % n % n % n % n % n % n % n % n % n % n % n % n % n % n\
    \ % n % n % n % n % n % n % n % n % n % n % n % n % n % n % n % n % n % n % n\
    \ % n % n % n % n % n % n % n % n % n % n % n % n % n % n % n % n % n % \nusing\
    \ Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3)\
    \ == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100)\
    \ == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp316v_n8g.jl:5\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp316v_n8g.jl:1\n\
    in expression starting at /tmp/tmp316v_n8g.jl:1\n"
  stdout: ''
  timestamp: 1659977819
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n < 2\n        1\n    else\n        largest_divisor(n / 2) + 1\nend\n\
    </code>\n<|/ a tags=recursion,biginteger,julia |>\n<| a dscore=1 tags=recursion,biginteger,julia\
    \ |>\nI made a solution with BigInts and some function from this question \n<code>\n\
    julia> function even(n)\n           if n < 2\n              return false\n   \
    \        else\n              return even(n / 2) && even(n / 2)\n           end\n\
    \       end\nusing Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\t\
    @test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10) ==\
    \ 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8hu__rnr.jl:11\nin expression starting at\
    \ /tmp/tmp8hu__rnr.jl:11\n"
  stdout: ''
  timestamp: 1659977819
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==1 \n        1 \n    else \n        largest_divisor(n-1) + n \nend\
    \ function \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\
    \t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10)\
    \ == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"function\" at /tmp/tmp49tf_jyy.jl:5 expected\
    \ \"end\", got \"function\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp49tf_jyy.jl:10\n\
    in expression starting at /tmp/tmp49tf_jyy.jl:10\n"
  stdout: ''
  timestamp: 1659977819
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n  if n < 2 \n    return 1\n  else if n % 2 == 0 \n    return n\n  else \n\
    \    return gcd(n, largest_divisor(n / 2))\nend\n</cell>\n<code language=julia-1.4>\n\
    @code_warntype largest_divisor(100)\n</cell>\n<code language=julia-1.4>\n# Write\
    \ a function called smallest_divisor that implements the following\nusing Test\n\
    \n@testset begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3) == 1)\n\
    \t@test(candidate(7) == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100)\
    \ == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpru6pvavm.jl:8\nin expression starting at /tmp/tmpru6pvavm.jl:8\n"
  stdout: ''
  timestamp: 1659977819
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0 \n        return 0 \n    else if n%2==0 \n        return n \n\
    \    else\n        return largest_divisor(n-1)\nend\n</code>\n<|/ a dscore=2 |>\n\
    <| c |>\nIt's better to use the `if` statement to control the flow rather than\
    \ the `else` statement, and it's better to use `if` rather than `ifelse` when\
    \ you are doing just one thing in the `else` condition. Also `if n==0` is the\
    \ same as just `if n`, so you can get rid of the `ifelse` completely.\n<|/ c |>\n\
    <| c |>\nThanks! I will do that in the future\n<|/ c |>\n<| c |>\nThe `if` statement\
    \ and `else` statement are not the same thing in Julia. `if n==0` will evaluate\
    \ to `true` for all nonzero numbers. `if n==0` and `if n<0` will evaluate to `true`\
    \ for numbers that are evenly divisible.\n<|/ c |>\n<| c |>\nOh. I misunderstood\
    \ the concept. Yes. I agree\n<|/ c |>\n<| a tags=julia,recursion |>\nThe simplest\
    \ way is probably using findmax (which finds the maximum element of a vector):\n\
    <code>\nusing Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3)\
    \ == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100)\
    \ == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp752xa7kv.jl:8\nin expression starting at /tmp/tmp752xa7kv.jl:8\n"
  stdout: ''
  timestamp: 1659977819
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    # check whether the input n is even or odd\n    if (n % 2 == 0):\n   \
    \     # find the max divisor by checking divisors upto n/2\n        return largest_divisor(n\
    \ / 2)\n    else:\n        # find the max divisor by checking divisors upto n/2\n\
    \        return largest_divisor(n / 2) + 1\nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\
    \t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpeaqln_so.jl:8\nin expression starting at /tmp/tmpeaqln_so.jl:8\n"
  stdout: ''
  timestamp: 1659977819
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    return max(Int64[1 .. Int(n/2)], n-1)\nend\n</code>\n<|/ a dscore=1 |>\n\
    <| a dscore=1 |>\nThe question asked for largest number which divides n evenly,\
    \ but only n-1 numbers can divide evenly. \n<code>\nusing Test\n\n@testset begin\n\
    \ncandidate = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7)\
    \ == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyydklenf.jl:8\nin expression starting at /tmp/tmpyydklenf.jl:8\n"
  stdout: ''
  timestamp: 1659977819
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n <= 1 \n        return 1 \n    else if n % 2 == 0 \n        then largest_divisor(n/2)\
    \ \n        else largest_divisor((3*n+1)/2)\n    end\nend\n</cell>\n<code language=julia-0.6>\n\
    @time largest_divisor(100)\n</cell>\n<code language=julia-0.6>\n@time largest_divisor(1000)\n\
    </cell>\n<code language=julia-0.6>\n@time largest_divisor(10000)\n</cell>\n<code\
    \ language=julia-0.6>\n@time largest_divisor(100000)\n</cell>\n<code language=julia-0.6>\n\
    @time largest_divisor(1000000)\n</cell>\n<code language=julia-0.6>\n@time largest_divisor(1000000000)\n\
    </cell>\n<code language=julia-0.6>\n@time largest_divisor(100000000)\n</cell>\n\
    <code language=julia-0.6>\n@time largest_divisor(1000000000) \n</cell>\n<code\
    \ language=julia-0.6>\n@time largest_divisor(100000000)\n</cell>\n<code language=julia-0.6>\n\
    @time largest_divisor(100000000)\n</cell>\n<code language=julia-0.6>\n@time largest_divisor(100000000)\n\
    </cell>\n<code language=julia-0.6>\n@time largest_divisor(100000000)\n</cell>\n\
    <code language=julia-0.6>\n@time largest_divisor(100000000)\n</cell>\n<code language=julia-0.6>\n\
    @time largest_divisor(100000000)\n</cell>\n<code language=julia-0.6>\n@time largest_divisor(100000000)\n\
    </cell>\n<code language=julia-0.6>\n@time largest_divisor(100000000)\n</cell>\n\
    <code language=julia-0.6>\n@time largest_divisor(100000000)\n</cell>\n<code language=julia-0.6>\n\
    @time largest_divisor(100000000)\n</cell>\n<code language=julia-0.6>\n@time largest_divisor(100000000)\n\
    </cell>\n<code language=julia-0.6>\n@time largest_divisor(100000000)\n</cell>\n\
    <code language=julia-0.6>\n@time largest_divisor(100000000)\n</cell>\n<code language=julia-0.6>\n\
    @time largest_divisor(100000000)\n</cell>\n<code language=julia-0.6>\n@time largest_divisor(100000000)\n\
    </cell>\n<code language=julia-0.6>\n@time largest_divisor(100000000)\n</\nusing\
    \ Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3)\
    \ == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100)\
    \ == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpchwn9n99.jl:8\nin expression starting at /tmp/tmpchwn9n99.jl:8\n"
  stdout: ''
  timestamp: 1659977819
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n <= 0\n        return n\n    else if n % 2 == 0\n        then return\
    \ 2\n    else if n % 3 == 0\n        then return 3\n    else if n % 5 == 0\n \
    \       then return 5\n    else if n % 7 == 0\n        then return 7\n    else\
    \ return largest_divisor(n / 2)\nend\n</cell>\n<code language=julia-1.5>\nlargest_divisor(15)\n\
    </cell>\n<code language=julia-1.5>\nusing BenchmarkTools\n@btime largest_divisor(30);\n\
    @btime largest_divisor(1500);\n@btime largest_divisor(1000);\n@btime largest_divisor(10000);\n\
    @btime largest_divisor(100000);\n</cell>\n<text>\nExercise - Write a function\
    \ that checks whether a given number is a perfect square\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7)\
    \ == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphmeykbsg.jl:8\nin expression starting at /tmp/tmphmeykbsg.jl:8\n"
  stdout: ''
  timestamp: 1659977819
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==1\n        return n\n    else if n%2==0\n        largest_divisor(n/2)\n\
    \    else\n        largest_divisor(n/2)+1\nend\n</cell>\n<code language=julia-1.2>\n\
    largest_divisor(15)\n</cell>\n<text>\nTo find the prime factorization of an integer,\
    \ n, you can write a recursive function as follows:\nusing Test\n\n@testset begin\n\
    \ncandidate = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7)\
    \ == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyfwty_do.jl:8\nin expression starting at /tmp/tmpyfwty_do.jl:8\n"
  stdout: ''
  timestamp: 1659977819
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n%2==0\n    then \n        if n%3==0\n            then largest_divisor(n/3)\n\
    \            else largest_divisor(n/3)+1\n        else largest_divisor(n/3)\n\
    \    else largest_divisor(n/2)+1\nend\n</cell>\n<text>\n6. Write a function that\
    \ takes two numbers as input and returns True if they are the same and False if\
    \ they are not. Make sure you use only comparisons (==).\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7)\
    \ == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"largest_divisor\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsxps_u8e.jl:9\nin expression starting at /tmp/tmpsxps_u8e.jl:9\n"
  stdout: ''
  timestamp: 1659977820
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n<1\n        0\n    else\n        if n <= 6\n            n / 2\n  \
    \      else\n            if n%2 == 1\n                n\n            else \n \
    \               largest_divisor(n / 2)\nend \n</cell>\n<text>\nExercise 3\nWrite\
    \ a recursive function max_div(n) that returns the largest number that can be\
    \ divided by all the numbers less than or equal to n.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7)\
    \ == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmph1gc0bbu.jl:17\nin expression starting at\
    \ /tmp/tmph1gc0bbu.jl:17\n"
  stdout: ''
  timestamp: 1659977821
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n == 0 then return 0 else largest_divisor(n - 1) \n    if n == 1 then\
    \ return n else largest_divisor(n / 2) \n    if n % 2 == 0 then return largest_divisor(n\
    \ / 2) \n    else return largest_divisor((3 * n + 1) / 2) \nend \n</cell>\n<text>\n\
    For a given number, find the smallest positive divisor of the given number that\
    \ is a multiple of 3. For example, the smallest positive divisor of 10 would be\
    \ 1, since 10 mod 3 = 1.\nusing Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\
    \t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10)\
    \ == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp_v7nusrf.jl:6\nin expression starting at /tmp/tmp_v7nusrf.jl:6\n"
  stdout: ''
  timestamp: 1659977821
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if (n<2)\n        return n\n    i = 2\n    while (i <= n-1)\n        if\
    \ (n % i == 0)\n            return i\n        i+=1\n    end\n    return n\n</code>\n\
    <|/ a dscore=3 |>\n<| a |>\nThe best solution I found so far is this: \n<code>\n\
    using Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3)\
    \ == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100)\
    \ == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpj6yfc0sz.jl:15\nin expression starting at\
    \ /tmp/tmpj6yfc0sz.jl:15\n"
  stdout: ''
  timestamp: 1659977821
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==1 then return n\n    elseif n%2==0 then return (n-1)/2\n    else\
    \ return largest_divisor(n/2)+1\nend\n</cell>\n<text>\nTask 1\nFind the largest\
    \ number that is smaller than 100.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\
    \t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpmfsdbtq5.jl:6\nin expression starting at /tmp/tmpmfsdbtq5.jl:6\n"
  stdout: ''
  timestamp: 1659977821
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==1 return n\n    else if n%2 == 0 return largest_divisor(n/2)\n \
    \   else return largest_divisor(3*n+1) + n\n    end\nusing Test\n\n@testset begin\n\
    \ncandidate = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7)\
    \ == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpm3t3afm_.jl:7\nin expression starting at /tmp/tmpm3t3afm_.jl:7\n"
  stdout: ''
  timestamp: 1659977821
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    # Your code here\n    res = [x | x <- [1..n], is_prime(x)]\n    if res\
    \ == []\n        error(\"No divisors found\")\n    largest = res |> maximum\n\
    \    \n    return largest\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\
    \t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10)\
    \ == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpilel8in3.jl:5\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpilel8in3.jl:1\n\
    in expression starting at /tmp/tmpilel8in3.jl:1\n"
  stdout: ''
  timestamp: 1659977821
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n <= 1\n        1\n    else\n        if n mod 2 == 0\n            largest_divisor(n\
    \ / 2)\n        else\n            largest_divisor(n / 2)\n        end\n    end\n\
    end\n</cell>\n<code language=julia-1.0>\n@code_native(largest_divisor(15))\n</cell>\n\
    <code language=julia-1.0>\n@code_native(largest_divisor(31))\n</cell>\n<code language=julia-1.0>\n\
    @code_native(largest_divisor(13))\n</cell>\n<code language=julia-1.0>\n@code_native(largest_divisor(12))\n\
    </cell>\n<code language=julia-1.0>\n@code_native(largest_divisor(7))\n</cell>\n\
    <code language=julia-1.0>\n@code_native(largest_divisor(8))\n</cell>\n<code language=julia-1.0>\n\
    @code_native(largest_divisor(9))\n</cell>\n<code language=julia-1.0>\n@code_native(largest_divisor(11))\n\
    </cell>\n<code language=julia-1.0>\n@code_native(largest_divisor(10))\n</cell>\n\
    <code language=julia-1.0>\n@code_native(largest_divisor(22))\n</cell>\n<code language=julia-1.0>\n\
    @code_native(largest_divisor(21))\n</cell>\n<code language=julia-1.0>\n@code_native(largest_divisor(19))\n\
    </cell>\n<code language=julia-1.0>\n@code_native(largest_divisor(17))\n</cell>\n\
    <code language=julia-1.0>\n@code_native(largest_divisor(16))\n</cell>\n<code language=julia-1.0>\n\
    @code_native(largest_divisor(14))\n</cell>\n<code language=julia-1.0>\n@code_native(largest_divisor(13))\n\
    </cell>\n<code language=julia-1.0>\n@code_native(largest_divisor(12))\n</cell>\n\
    <code language=julia-1.0>\n@code_native(largest_divisor(11))\n</cell>\n<code language=julia-1.0>\n\
    @code_native(largest_divisor(10))\n</cell>\n<code language=julia-1.0>\n@code_native(largest_divisor(19))\n\
    </cell>\n<code language=julia-1.0>\n@code_native(largest_divisor(17))\n</cell>\n\
    <code language=julia-1.0>\n@code_native(largest_divisor(16))\n</cell>\n<code language=julia-1.0>\n\
    @code_native(\nusing Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\t\
    @test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10) ==\
    \ 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"2\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp_rwm5zf4.jl:9\nin expression starting at /tmp/tmp_rwm5zf4.jl:9\n"
  stdout: ''
  timestamp: 1659977821
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n < 4 \n        then return n \n    else \n        largest_divisor(n-1)\
    \ + largest_divisor(n-3) + largest_divisor(n-5)\nend\n</cell>\n<text>\nQuestion\
    \ 20. Create a function that returns the largest number for which the function\
    \ f(n)=2^n is true for some given n > 0. For example, f(n)=3^n must be true for\
    \ n=7 and n=9.\nusing Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\
    \t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10)\
    \ == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpr3yispez.jl:7\nin expression starting at /tmp/tmpr3yispez.jl:7\n"
  stdout: ''
  timestamp: 1659977821
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n % 2 == 0 \n        then return n\n    else \n        largest_divisor\
    \ = largest_divisor(div(n, 2))\n        if largest_divisor == n \n           \
    \ then return n\n        else return largest_divisor\n</code>\n<|/ a tags=algorithm,julia,performance\
    \ dscore=1 |>\n<| c |>\nThe `div` function performs quite a lot of allocations,\
    \ so it's not the right choice here. The function can be written more simply as\
    \ `largest_divisor = n -> n < 2 ? n : largest_divisor(div(n, 2))`. The result\
    \ `largest_divisor` will be lazy, so it doesn't allocate any memory.\n<|/ c |>\n\
    <| c |>\n, you're right. I've edited my answer. Thank you.\n<|/ c |>\n<| a tags=algorithm,julia,performance\
    \ |>\nYou could try using Djikstra's algorithm. \n<code>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7)\
    \ == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmppjhtlzv1.jl:7\nin expression starting at /tmp/tmppjhtlzv1.jl:7\n"
  stdout: ''
  timestamp: 1659977821
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n%2==0 \n        then return 2\n    else \n        if n%5==0 \n   \
    \         then return 5\n        else \n            if n%7==0 \n             \
    \   then return 7\n            else \n                if n%11==0 \n          \
    \          then return 11\n                else \n                    if n%13==0\
    \ \n                        then return 13\n                    else \n      \
    \                  if n%17==0 \n                            then return 17\n \
    \                       else \n                            if n%19==0 \n     \
    \                           then return 19\n                            else \n\
    \                                if n%23==0 \n                               \
    \     then return 23\n                                else \n                \
    \                    if n%29==0 \n                                        then\
    \ return 29\n                                    else \n                     \
    \                   if n%311==0 \n                                           \
    \ then return 311\n                                        else \n           \
    \                                 if n%347==0 \n                             \
    \                   then return 347\n                                        \
    \    else \n                                                if n%385==0 \n   \
    \                                                 then return 385\n          \
    \                                      else \n                               \
    \                     if n%393==0 \n                                         \
    \               then return 393\n                                            \
    \        else \n                                                        if n%419==0\
    \ \n                                                            then return 419\n\
    \                                                        else \n             \
    \                                               if n%431==0 \n               \
    \                                                 then return 431\n          \
    \                                                  else \n                   \
    \                                             if n%457==0 \n                 \
    \                                                   then return 457\n        \
    \                                                        else \n             \
    \                                                       if n%463==0 \n       \
    \                                                                 then return\
    \ 463\n                                                                    else\
    \ \n                                                        if n%491==0 \n   \
    \                                                         then return 491\n  \
    \                                                      else \n               \
    \                                             if n%513==0 \n                 \
    \                                               then return 513\n            \
    \                                                else \n                     \
    \                                           if n%531==0 \n                   \
    \                                                 then return 531\n          \
    \                                                      else \n               \
    \                                                     if n%547==0 \n         \
    \                                                               then return 547\n\
    \                                                                    else \n \
    \                                                       if n%563==0 \n       \
    \                                                     then return 563\n      \
    \                                                  else \n                   \
    \                                         if n%591==0 \n                     \
    \                                           then return 591\n                \
    \                                            else \n                         \
    \                                       if n%607==0 \n                       \
    \                                             then return 607\n              \
    \                                                  else \n                   \
    \                                                 if n%623==0 \n             \
    \                                                           then return 623\n\
    \                                                                    else \n \
    \                                                       if n%635==0 \n       \
    \                                                     then return 635\n      \
    \                                                  else \n                   \
    \                                         if n%643==0 \n                     \
    \                                           then return 643\n                \
    \                                            else \n                         \
    \                                       if n%657==0 \n                       \
    \                                             then return 657\n              \
    \                                                  else \n                   \
    \                                                 if n%663==0 \n             \
    \                                                           then return 663\n\
    \                                                                    else \n \
    \                                                       if n%677==0 \n       \
    \                                                     then return 677\n      \
    \                                                  else \nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7)\
    \ == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpx3xw6jvc.jl:7\nin expression starting at /tmp/tmpx3xw6jvc.jl:7\n"
  stdout: ''
  timestamp: 1659977821
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    return n::Int64\nend\n</cell>\n<code language=julia-0.6>\n@time largest_divisor(100)\
    \ |> @show # 1 second\n</cell>\n<text>\nWrite a function that finds the smallest\
    \ number that divides n evenly but greater than n\nusing Test\n\n@testset begin\n\
    \ncandidate = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7)\
    \ == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwv3rdvif.jl:8\nin expression starting at /tmp/tmpwv3rdvif.jl:8\n"
  stdout: ''
  timestamp: 1659977821
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n <= 0\n        error(\"n must be positive\")\n    else if n == 1\n\
    \        1\n    else if n % 2 == 0\n        smaller::Int64 = n / 2\n        largest_divisor(smaller)\n\
    \    else\n        largest_divisor(n * 3 + 1)\nend\n</cell>\n<code language=julia-1.6>\n\
    @time largest_divisor(13)\n</cell>\n<code language=julia-1.6>\n@time largest_divisor(50)\n\
    </cell>\n<text>\nThe above function has a quadratic time complexity. We can rewrite\
    \ this with a linear time complexity in Julia as follows:\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7)\
    \ == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsf73bxz0.jl:8\nin expression starting at /tmp/tmpsf73bxz0.jl:8\n"
  stdout: ''
  timestamp: 1659977821
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n        if n==0 then return 0\n        \n        if n % 2 == 0 \n        \
    \    then return n + largest_divisor(n - 1) \n        else\n            \n   \
    \         m := n % 10 \n            n := n//10 \nusing Test\n\n@testset begin\n\
    \ncandidate = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7)\
    \ == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmprbmp3i5k.jl:6\nin expression starting at /tmp/tmprbmp3i5k.jl:6\n"
  stdout: ''
  timestamp: 1659977821
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    # Initialize max and min values \n    max = 0 \n    min = sys.maxint\n\
    \    # Loop through the numbers in n \n    for _ in n\n        # Check if number\
    \ is divisable by all numbers smaller than n \n        if n % _ == 0 \n      \
    \      # Keep track of max and min \n            if max < _ \n               \
    \ max = n \n            else if min > _ \n                min = n \n         \
    \   # Check if max and min values are same \n            if max == min \n    \
    \            # Return number \n                return n\n            end \n  \
    \      end \n    end \n    # Return None \n    return None \nend \n</cell>\n<code\
    \ language=julia-0.5>\n@time largest_divisor(15)\n</cell>\n<text>\nWrite a function\
    \ that takes a number as argument and returns the number of divisors for that\
    \ number. For example, for number 20, it should return 3.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7)\
    \ == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsz39nuhf.jl:16\nin expression starting at\
    \ /tmp/tmpsz39nuhf.jl:16\n"
  stdout: ''
  timestamp: 1659977821
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0 then return 0\n    if n%2==0 then return n\n    m <- largest_divisor(n/2)\n\
    \    if m==0 then return n\n    return m if m%2==0 then m+1 else m\nend\n</cell>\n\
    <text>\nQuestion: What happens if we pass largest_divisor(20) to the previous\
    \ function? How does it deal with division by zero? How does it handle negative\
    \ numbers? Why does it return an error?\nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\
    \t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpk5c430oi.jl:6\nin expression starting at /tmp/tmpk5c430oi.jl:6\n"
  stdout: ''
  timestamp: 1659977821
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    largest_divisor = 0\n    for divisor in divisors(n)\n        if n % divisor\
    \ == 0\n            largest_divisor = divisor\n            break\n    return largest_divisor\n\
    </code>\n<|/ a |>\n<| c |>\nThis code is only correct for small numbers, and in\
    \ particular it only works if n is in the range `0..n-1` . Otherwise the largest\
    \ possible divisor is `n`. So it also won't work if n is `0`.\n<|/ c |>\n<| c\
    \ |>\nThanks Jakub, you are right, I modified the code\n<|/ c |>\n<| a |>\nThe\
    \ answer from is correct, but can be improved a lot. In general you want to find\
    \ all divisors, not only the smallest one. As others pointed out, divisors(n)\
    \ returns all the divisors of the given number, including itself, so your code\
    \ is also correct for n = 0.\nThe only issue with your code is that you are looping\
    \ over all the divisors and checking if n is evenly divisible by each of them,\
    \ but that is not the correct approach. Instead you should loop over all the divisors\
    \ of the given number (which you have done), and then check if n is divisible\
    \ by each of them:\n<code>\nusing Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\
    \t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10)\
    \ == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpscgsjtsy.jl:12\nin expression starting at\
    \ /tmp/tmpscgsjtsy.jl:12\n"
  stdout: ''
  timestamp: 1659977821
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n%2 == 0  and n % 3==0\n        return n\n    if n %3 == 0  and n %2==0\n\
    \        return n\n    if n %3==0 and n%2!=0\n        return n\n    else \n  \
    \      return largest_divisor(n-1)\nend\n</code>\n<|/ a dscore=2 |>\n<| a |>\n\
    <code>\nusing Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3)\
    \ == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100)\
    \ == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"n\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmphkwi1px7.jl:6\nin expression starting at /tmp/tmphkwi1px7.jl:6\n"
  stdout: ''
  timestamp: 1659977821
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n<2\n        return n\n    if n<10\n        return n\n    if n % 2\
    \ == 0\n        return n/2\n    if n%3 == 0\n        return n/3\n    if n%5 ==\
    \ 0\n        return n/5\n    if n%7 == 0\n        return n/7\n    if n%9 == 0\n\
    \        return n/9\n    if n%11 == 0\n        return n/11\n    if n%13 == 0\n\
    \        return n/13\n    if n%15 == 0\n        return n/15\n    if n%17 == 0\n\
    \        return n/17\n    if n%19 == 0\n        return n/19\n    return largest_divisor(n/10)\n\
    end\n</cell>\n<text>\nExercises:\nWrite a function that returns the sum of the\
    \ first n numbers of a list\nusing Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\
    \t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10)\
    \ == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpy49g_w9z.jl:32\nin expression starting at\
    \ /tmp/tmpy49g_w9z.jl:32\n"
  stdout: ''
  timestamp: 1659977821
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    \"\"\"\n    Find the largest number that divides n evenly, smaller than\
    \ n\nusing Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3)\
    \ == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100)\
    \ == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppnt210g_.jl:1\nin expression starting at /tmp/tmppnt210g_.jl:1\n"
  stdout: ''
  timestamp: 1659977821
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n%2==0 then return n \n    else if n>0 then return largest_divisor(n-1)\
    \ \n    else return n\nusing Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\
    \t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10)\
    \ == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp8foel9fa.jl:6\nin expression starting at /tmp/tmp8foel9fa.jl:6\n"
  stdout: ''
  timestamp: 1659977821
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n\"\"\"\nusing Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3)\
    \ == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100)\
    \ == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpj4xdr1yw.jl:1\nin expression starting at /tmp/tmpj4xdr1yw.jl:1\n"
  stdout: ''
  timestamp: 1659977821
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n == 1 \n        1 \n    else\n        largest_divisor(n / 2) + (n\
    \ % 2 == 0)\nend\n</cell>\n<text>\n6. Repeating a code block multiple times\n\
    There are two ways to repeat code blocks in Julia:\nusing Test\n\n@testset begin\n\
    \ncandidate = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7)\
    \ == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp46znusvh.jl:11\nin expression starting at\
    \ /tmp/tmp46znusvh.jl:11\n"
  stdout: ''
  timestamp: 1659977821
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n % 2 == 1 \n        then largest_divisor(n/2) \n        else largest_divisor(n/2\
    \ + 1) \n    end\nend \"\"\"\n</cell>\n<text>\nNow we can import the required\
    \ libraries:\nusing Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\t\
    @test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10) ==\
    \ 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"largest_divisor\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpghpjzp0l.jl:7\nin expression starting at /tmp/tmpghpjzp0l.jl:7\n"
  stdout: ''
  timestamp: 1659977822
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n % 2 == 0 \n        then largest_divisor(n / 2)\n    else if n % 3\
    \ == 0 \n        then largest_divisor(n / 3)\n    else \n        largest_divisor(n\
    \ / 2)\n    end\nend\n</code>\nThis solution uses the fact that every number divisible\
    \ by another number is a divisor of the larger one. By recursively calling ourselves,\
    \ the number will be divided by 2, 3, and so on until it becomes divisible by\
    \ 1. Therefore, when we reach 1, we will have the largest number that divides\
    \ n evenly, smaller than n.\n<|/ a |>\n<| c |>\nWhat is the purpose of `elseif`?\
    \ Doesn't `else` cover everything?\n<|/ c |>\n<| c |>\n.Wang If n is even, then\
    \ the largest divisor will be n/2, right? So, the first else if is redundant.\n\
    <|/ c |>\n<| c |>\nNope, it will be `n`/2 and then `n / 2`, which will leave `n`\
    \ as is - so it will be skipped and go straight to the last `else` which returns\
    \ the largest divisor. [Try it](https://tio.run/##dYDsMgN8vXrVIbZVQ0qxY5p3vuRkQbEi4KQsNKM8YxKj0VjD5oxIxVqFmWdOUdN4H/pGxw7J2v9jN0hFdL4gS5Nw7vVVxqxj8NsS@NJvXjMjt@7@4H@9j4Jp7v9iJXjMvXjMjt@p@9Vj4@p@9Np7v9jJXjMvXjMjt@4@4p7v9iJXjMvXjMjt@4p7v9iJXjMvXjMjt@4p7v9iJXjMvXjMjt@4p7v9iJXjMvXjMjt@4p7v9iJXjMvXjMjt@4p7v9iJXjMvXjMjt@4p7v9iJXjMvXjMjt@\n\
    using Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3)\
    \ == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100)\
    \ == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"largest_divisor\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptzypu0o5.jl:7\nin expression starting at /tmp/tmptzypu0o5.jl:7\n"
  stdout: ''
  timestamp: 1659977822
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==1 \n        1 \n    else if n%2 == 0\n        largest_divisor(n//2)\n\
    \    else\n        largest_divisor(n-1)\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7)\
    \ == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7fwdqz5e.jl:8\nin expression starting at /tmp/tmp7fwdqz5e.jl:8\n"
  stdout: ''
  timestamp: 1659977822
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n % 2 == 0: \n        return n \n    else:\n        return largest_divisor(n\
    \ / 2) \nend\n</cell>\n<code language=julia-1.0>\nlargest_divisor(10)\n</cell>\n\
    <code language=julia-1.0>\nusing Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\
    \t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10)\
    \ == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8crmafek.jl:7\nin expression starting at /tmp/tmp8crmafek.jl:7\n"
  stdout: ''
  timestamp: 1659977823
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n < 10\n        return n\n    return largest_divisor(n / 10) * 10 +\
    \ n % 10\nusing Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3)\
    \ == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100)\
    \ == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnoxt5tk1.jl:1\nin expression starting at /tmp/tmpnoxt5tk1.jl:1\n"
  stdout: ''
  timestamp: 1659977823
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if is_even(n::Int64)::Bool\n        if is_even(n+1)\n            return\
    \ n\n        else\n            largest_divisor(n+1)\n    else\n        largest_divisor(n-1)\n\
    end\n</code>\n<|/ a dscore=1 tags=julia |>\n<| a dscore=1 |>\n<code>\nusing Test\n\
    \n@testset begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3) == 1)\n\
    \t@test(candidate(7) == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100)\
    \ == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"if\" at /tmp/tmps8a1inln.jl:7 expected \"end\"\
    , got \"else\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmps8a1inln.jl:11\n\
    in expression starting at /tmp/tmps8a1inln.jl:11\n"
  stdout: ''
  timestamp: 1659977823
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n == 0 then return 0\n    if n % 2 == 0 then return n\n    largest\
    \ <- largest_divisor(n / 2)\n    if n % largest == 0 then return largest \n  \
    \  else return n\nusing Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\
    \t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10)\
    \ == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmppldf88gh.jl:6\nin expression starting at /tmp/tmppldf88gh.jl:6\n"
  stdout: ''
  timestamp: 1659977823
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n < 1\n        error(\"n must be positive\")\n    else if n % 2 ==\
    \ 0\n        error(\"n must be even\")\n    else if n % 3 == 0\n        error(\"\
    n must be odd\")\n    else if n % (2 * 3) == 0\n        return 3\n    else if\
    \ n % (3 * 5) == 0\n        return 5\n    else if n % (5 * 7) == 0\n        return\
    \ 7\n    else if n % (7 * 11) == 0\n        return 11\n    else if n % (11 * 13)\
    \ == 0\n        return 13\n    else if n % (13 * 17) == 0\n        return 17\n\
    \    else if n % (17 * 19) == 0\n        return 19\n    else if n % (19 * 23)\
    \ == 0\n        return 23\n    else if n % (23 * 29) == 0\n        return 29\n\
    \    else if n % (29 * 31) == 0\n        return 31\n    else if n % (31 * 37)\
    \ == 0\n        return 37\n    else if n % (37 * 41) == 0\n        return 41\n\
    \    else if n % (41 * 43) == 0\n        return 43\n    else if n % (43 * 47)\
    \ == 0\n        return 47\n    else if n % (47 * 53) == 0\n        return 53\n\
    \    else if n % (53 * 59) == 0\n        return 59\n    else if n % (59 * 61)\
    \ == 0\n        return 61\n    else if n % (61 * 67) == 0\n        return 67\n\
    \    else if n % (67 * 73) == 0\n        return 73\n    else if n % (73 * 79)\
    \ == 0\n        return 79\n    else if n % (79 * 83) == 0\n        return 83\n\
    \    else if n % (83 * 89) == 0\n        return 89\n    else if n % (89 * 97)\
    \ == 0\n        return 97\n    else if n % (97 * 101) == 0\n        return 101\n\
    \    else if n % (101 * 103) == 0\n        return 103\n    else if n % (103 *\
    \ 107) == 0\n        return 107\n    else if n % (107 * 109) == 0\n        return\
    \ 109\n    else if n % (109 * 113) == 0\n        return 113\n    else if n % (113\
    \ * 127) == 0\n        return 127\n    else if n % (127 * 131) == 0\n        return\
    \ 131\n    else if n % (131 * 137) == 0\n        return 137\n    else if n % (137\
    \ * 141) == 0\n        return 141\n    else if n % (141 * 149) == 0\n        return\
    \ 149\n    else if n % (149 * 153) == 0\n        return 153\n    else if n % (153\
    \ * 157) == 0\n        return 157\n    else if n % (157 * 161) == 0\n        return\
    \ 16\nusing Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3)\
    \ == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100)\
    \ == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpc4hdj5jo.jl:8\nin expression starting at /tmp/tmpc4hdj5jo.jl:8\n"
  stdout: ''
  timestamp: 1659977823
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n<0 then return \"no number which divides n evenly into it\" \n   \
    \ else if n==0 then return 1\n    else if n%2==0 then return largest_divisor(n/2)\n\
    \    else return largest(largest_divisor(n/2),largest(n/4,n/8,n/16,n/32))\nend\
    \ \n</code>\nAnd here is the implementation in Julia:\n<code>\nusing Test\n\n\
    @testset begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3) == 1)\n\t\
    @test(candidate(7) == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100)\
    \ == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpbcxzq68f.jl:6\nin expression starting at /tmp/tmpbcxzq68f.jl:6\n"
  stdout: ''
  timestamp: 1659977823
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    largest_divisor = 1\n    for i in 2..n \n        if n%i == 0 \n      \
    \      largest_divisor = i\n        else \n            return largest_divisor\
    \ \n    return largest_divisor\nend\n</cell>\n<code language=julia-1.5>\n@code_native\
    \ true\n</cell>\n<code language=julia-1.5>\n@code_native largest_divisor(15)\n\
    </cell>\n<text>\nExercise 7: Give a definition of a function f that given a number\
    \ n and an integer p, returns the number of prime numbers that are less than or\
    \ equal to n and are divisible by p.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\
    \t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_ghywvns.jl:14\nin expression starting at\
    \ /tmp/tmp_ghywvns.jl:14\n"
  stdout: ''
  timestamp: 1659977823
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n == 1\n        return 1\n    else\n        begin\n            local\
    \ n = n - 1\n            local max_divisor = 1\n            local i = 2\n    \
    \        while i * i <= n\n                do \n                    if n % i ==\
    \ 0\n                        max_divisor = i\n                        n = n /\
    \ i\n                    else\n                        break\n               \
    \ end\n                i = i + 1\n            end\n            return max_divisor\n\
    \        end\n    end\nend\n</code>\n<|/ a dscore=1 |>\n<| a |>\n<code>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3)\
    \ == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100)\
    \ == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid \"do\" syntax\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmptahj4lim.jl:14\nin expression starting at /tmp/tmptahj4lim.jl:14\n"
  stdout: ''
  timestamp: 1659977823
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    max = n\n    for divisor in 2..n do\n        if n % divisor = 0 then\n\
    \            if divisor > max then\n                max = divisor\n          \
    \  else\n                max = n\n        end\n    end\n    return max\nend\n\
    </code>\n<|/ a dscore=0 |>\n<| c |>\nThanks for your reply. But, I just wanted\
    \ to show what i tried and didn't know how to make it work. I would like to show\
    \ my code that i tried but i don't know how to make it\n<|/ c |>\n<| a dscore=0\
    \ |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\t\
    @test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10) ==\
    \ 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid \"do\" syntax\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpd2tc2nfh.jl:7\nin expression starting at /tmp/tmpd2tc2nfh.jl:7\n"
  stdout: ''
  timestamp: 1659977823
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    small=n\n    while small % 2 != 0\n        small = small/2;\n    return\
    \ small;\nusing Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3)\
    \ == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100)\
    \ == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"while\" at /tmp/tmp_6sjrpdu.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp_6sjrpdu.jl:1\n\
    in expression starting at /tmp/tmp_6sjrpdu.jl:1\n"
  stdout: ''
  timestamp: 1659977823
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    largest_divisor = \n        \nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\
    \t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpfhqkgqlg.jl:5\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpfhqkgqlg.jl:1\n\
    in expression starting at /tmp/tmpfhqkgqlg.jl:1\n"
  stdout: ''
  timestamp: 1659977823
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    largest = 1\n    for num in 2::Int64, n\n        div = num / largest\n\
    \        if div == 0 || div == 1\n            return largest\n        else\n \
    \           largest = div\n    end\n    return largest\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7)\
    \ == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid iteration specification\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvlh8b7v6.jl:8\nin expression starting at /tmp/tmpvlh8b7v6.jl:8\n"
  stdout: ''
  timestamp: 1659977822
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n == 1 return n\n    else if n % 2 == 0 return largest_divisor(n/2)\n\
    \    else if n % 3 == 0 return largest_divisor(n/3)\n    else return largest_divisor(n/3)\
    \ + 1\nend\n</code>\n<|/ a dscore=1 tags=big-o,algorithm,sieve-of-eratosthenes\
    \ |>\n<| c |>\nThe function `largest_divisor` returns a `Int64` so your `end`\
    \ would need to be `end`.\n<|/ c |>\n<| c |>\nThanks for pointing that out. I\
    \ added it into the post, and also changed the function return type. Cheers\n\
    <|/ c |>\n<| a tags=big-o,algorithm,sieve-of-eratosthenes dscore=1 |>\nThere are\
    \ two issues with the algorithm:\nusing Test\n\n@testset begin\n\ncandidate =\
    \ largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\t\
    @test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfdisb5pj.jl:7\nin expression starting at /tmp/tmpfdisb5pj.jl:7\n"
  stdout: ''
  timestamp: 1659977823
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n % 2 == 0 then return n else\n        largest_divisor(n / 2)\n   \
    \     if n % 2 == 0 then return n else\n            largest_divisor(n / 2)\n \
    \               largest_divisor(n / 2)\n                if n % 2 == 0 then return\
    \ n\n                else return largest_divisor(n / 2)\nend\n</cell>\n<code language=julia-1.2>\n\
    largest_divisor(15)\n</cell>\n<text>\n6. Squaring Numbers\n$$ x^2 = \\begin{cases}\
    \ x & x \\neq 0 \\\\ x^2 & 0\\end{cases} $$\n$$ x^2 = \\begin{cases} x & x \\\
    neq 0 \\\\ \\frac{x}{2} & \\frac{x}{2}\\end{cases} $$\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7)\
    \ == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp2ymyfg05.jl:6\nin expression starting at /tmp/tmp2ymyfg05.jl:6\n"
  stdout: ''
  timestamp: 1659977823
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if (n % 2 == 0):\n        largest = n\n        divisor = 2\n        while\
    \ ((n % divisor) != 0):\n            divisor += 1\n            if divisor > largest:\n\
    \                largest = divisor\n    else:\n        largest = n\n        divisor\
    \ = 3\n        while ((n % divisor) != 0):\n            divisor += 2\n       \
    \     if divisor > largest:\n                largest = divisor\n    return largest\n\
    </code>\nTesting it using GHCi:\n<code>\nghci> largest_divisor(100)\n55\nghci>\
    \ largest_divisor(100000)\n55\nghci> largest_divisor(100001)\n1000\nghci> largest_divisor(5000000)\n\
    5000000\n</code>\n<|/ a tags=big-o,haskell,algorithm |>\n<| c |>\nThe solution\
    \ is wrong for n = 1000000 because `largest_divisor` returns 55, which is the\
    \ incorrect result for that case. `largest_divisor` should return 100 (the correct\
    \ result for that case).\n<|/ c |>\n<| c |>\nThe function is wrong for any number\
    \ n where n divides n. Your function returns the largest factor of n, which is\
    \ wrong for all n where n divides n. See the answer to this question for example:\
    \ https://stackoverflow.com/questions/43932203/finding-the-divisors-of-a-number\n\
    <|/ c |>\n<| c |>\nThis is wrong, even if the result is wrong for every input.\
    \ For example, try it with `largest_divisor(1000000000)`, which is 1000000 \xD7\
    \ 1000000 \xD7 1000000 \xD7 1000000 \xD7 1000000 \xD7 1000000 \xD7 1000000 \xD7\
    \ 1000000 \xD7 1000000 \xD7 1000000 \xD7 1000000 \xD7 1000000 \xD7 1000000 \xD7\
    \ 1000000 \xD7 1000000 \xD7 1000000 \xD7 1000000 \xD7 1000000 \xD7 1000000 \xD7\
    \ 1000000 \xD7 1000000 \xD7 1000000 \xD7 1000000 \xD7 1000000 \xD7 1000000 \xD7\
    \ 1000000 \xD7 1000000 \xD7 1000000 \xD7 1000000 \xD7 1000000 \xD7 1000000 \xD7\
    \ 1000000 \xD7 1000000 \xD7 1000000 \xD7 1000000 \xD7 1000000 \xD7 1000000 \xD7\
    \ 1000000 \xD7 1000000 \xD7 1000000 \xD7 1000000 \xD7 1000000 \xD7 1000000\nusing\
    \ Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3)\
    \ == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100)\
    \ == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpaxn9dhjt.jl:7\nin expression starting at /tmp/tmpaxn9dhjt.jl:7\n"
  stdout: ''
  timestamp: 1659977823
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n%2==0\n        then return n\n        else return (n-1)/2\n    else\
    \ return n/2\n</code>\n<|/ a tags=recursion,julia,bignum,factorial,performance\
    \ |>\n<| c |>\nI see no advantage in using `BigInt`s in this code.  I'd love to\
    \ see a benchmark that shows that *using* `BigInt`s in this code is significantly\
    \ faster.\n<|/ c |>\n<| c |>\nI agree it would be better to use `BigInt`. But\
    \ the code was written for general integers, so I wrote it in a way that it would\
    \ work with all of them.\n<|/ c |>\n<| c |>\nWell, this benchmark shows how this\
    \ algorithm can be improved in terms of efficiency. I'm glad you found this helpful!\n\
    <|/ c |>\n<| a dscore=4 |>\nSince you have tagged this with Julia, I wonder if\
    \ you don't know about BigInts, since they were designed to solve this problem.\n\
    <code>\njulia> function largest_divisor(n::BigInt)::BigInt\n           if n%2\
    \ == 0\n               return n\n           else\n               return (n-1)/2\n\
    \           end\n       end\nusing Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\
    \t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10)\
    \ == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpmtvzrf8z.jl:7\nin expression starting at /tmp/tmpmtvzrf8z.jl:7\n"
  stdout: ''
  timestamp: 1659977823
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n == 1\n        return 1\n    else if n % 2 == 0\n        then largest_divisor(n\
    \ * 3) + n / 2\n        else largest_divisor(n * 3) + 1\n    else \n        largest_divisor(n\
    \ * 3) + 1\n</code>\n<|/ a |>\n<| c |>\nWell the OP doesn't want even numbers\
    \ so I didn't include it in the solution\n<|/ c |>\n<| c |>\nI think that might\
    \ be a better idea since the example OP posted is actually not really a factor\
    \ of the largest number.\n<|/ c |>\n<| a |>\nHere's a recursive function:\n<code>\n\
    def largestDivisor(n:Int):Int = {\n   case 1 => 1\n   case _ => largestDivisor(n\
    \ / 2) + n / 2\n}\n</code>\n<|/ a dscore=2 tags=algorithm,recursion |>\n<| a tags=algorithm,recursion\
    \ dscore=2 |>\nHere is my answer in haskell.\n<code>\nlargestDivisor n = largestDivisor'\
    \ n (-1)\n      where\n        largestDivisor' n d | n==1 = d\n              \
    \              | n==0 = 0\n                            | n>0  = largestDivisor'\
    \ (n-1) (d+1) + (n `div` d)\n</code>\n<|/ a |>\n<| a dscore=1 |>\n<code>\ndef\
    \ largestDivisor(n):\n    if n == 1:\n        return 1\n    elif n % 2 == 0:\n\
    \        return largestDivisor(n*3)+n//2\n    else:\n        return largestDivisor(n*3)\
    \ + 1\n</code>\n<|/ a tags=algorithm,recursion |>\n<| c |>\nPlease include some\
    \ comments explaining your answer.\n<|/ c |>\n<| c |>\nWhile this code may answer\
    \ the question, providing additional context regarding how and/or why it solves\
    \ the problem would improve the answer's long-term value.\n<|/ c |>\n<| c |>\n\
    This was very helpful. Thank you very much\n<|/ c |>\n<| a tags=algorithm,recursion\
    \ |>\n<code>\nlargestDivisor(n) -- return largest divisor for n \nn = largestDivisor(n\
    \ mod 2)\nreturn n\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThis would have more\
    \ benefit if you explained what it actually does and how it does it!\n<|/ c |>\n\
    <| c |>\nThis answer has some formatting problems and is not very helpful.\n<|/\
    \ c |>\n<|\nusing Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3)\
    \ == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100)\
    \ == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmc4x547j.jl:8\nin expression starting at /tmp/tmpmc4x547j.jl:8\n"
  stdout: ''
  timestamp: 1659977823
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    \n    for i in 1..n\n        if n%i == 0\n            return i\n     \
    \   else\n            return n\n</code>\n<|/ a |>\n<| c |>\n`@user3479081` You\
    \ shouldn't use `@user3479081` as your username. It will get your posts flagged\
    \ for spam.\n<|/ c |>\n<| c |>\nAlso, please fix the indentation in your code.\n\
    <|/ c |>\n<| c |>\nthanks, i fixed it, and i'm not aware of the `@user3479081`\
    \ sorry.\n<|/ c |>\n<| c |>\nThat is a big problem with answering people's homework\
    \ questions and posting them here. Please pay attention to your answers to your\
    \ questions as much as possible. :)\n<|/ c |>\n<| c |>\nNo problem, we were all\
    \ here to learn and help :) Just be careful next time, because it is very annoying.\
    \ Also, if it was homework, please tag it as such.\n<|/ c |>\n<| a |>\nIt took\
    \ me a while to figure out a way to do it, but eventually I came up with this.\
    \ Not sure if it is the best, but it seems to work:\n<code>\n#include <stdio.h>\n\
    #include <stdlib.h>\nusing Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\
    \t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10)\
    \ == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3pyalepd.jl:12\nin expression starting at\
    \ /tmp/tmp3pyalepd.jl:12\n"
  stdout: ''
  timestamp: 1659977823
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n == 1 then return 1 \n    \n    biggest = 1\n    for d in [2,3,5,7,11,13,17,19,23,29,31,37,41,43]\
    \ do \n        if n%d == 0 then return d\n        if d*d > n then return d \n\
    \    \n    return biggest\n</cell>\n<code language=julia-1.5>\n@time largest_divisor(15)\n\
    </cell>\n<code language=julia-1.5>\n\"\"\"\nFor a given number n, find the largest\
    \ number that divides n evenly, smaller than n\n\"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7)\
    \ == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpukqtqfvi.jl:6\nin expression starting at /tmp/tmpukqtqfvi.jl:6\n"
  stdout: ''
  timestamp: 1659977823
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n == 0 \n        return 0 \n    else if n % 2 == 0 \n        then largest_divisor(n\
    \ / 2)\n        else largest_divisor(n / 2) + 1 \n    end \nend \nusing Test\n\
    \n@testset begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3) == 1)\n\
    \t@test(candidate(7) == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100)\
    \ == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpybvdt3gp.jl:8\nin expression starting at /tmp/tmpybvdt3gp.jl:8\n"
  stdout: ''
  timestamp: 1659977823
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==2 return n\n    ans=0\n    div=n\n    while div > 1:\n        if\
    \ div % 2 == 0:\n            ans = max(ans, div)\n        div = div / 2\n    return\
    \ ans\nend\n</cell>\n<code language=julia-1.5>\nlargest_divisor(20)\n</cell>\n\
    <text>\nExercise 4.1\nThe prime factors of 13195 are 5, 7, 13 and 29.\nusing Test\n\
    \n@testset begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3) == 1)\n\
    \t@test(candidate(7) == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100)\
    \ == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptdr9i4om.jl:10\nin expression starting at\
    \ /tmp/tmptdr9i4om.jl:10\n"
  stdout: ''
  timestamp: 1659977824
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0\n        return n\n    largest=0\n    for i in 1..n\n        if\
    \ n%i==0 && n>largest\n            largest=n\n    return largest\nusing Test\n\
    \n@testset begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3) == 1)\n\
    \t@test(candidate(7) == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100)\
    \ == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpn5elgwwd.jl:1\nin expression starting at /tmp/tmpn5elgwwd.jl:1\n"
  stdout: ''
  timestamp: 1659977824
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0 \n        0\n    else if n==1 \n        1\n    elseif n%2==0 \n\
    \        largest_divisor(n/2)+1\n    else\n        largest_divisor(3*n+1)\n  \
    \  end\nend\n</code>\n<|/ a tags=math,algorithm,division,julia,numbers |>\n<|\
    \ a |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\
    \t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10)\
    \ == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpupsy8dvz.jl:8\nin expression starting at /tmp/tmpupsy8dvz.jl:8\n"
  stdout: ''
  timestamp: 1659977824
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n%2==0\n    then \n        largest_divisor(n / 2)\n    else\n     \
    \   largest_divisor(n / 2 + 1)\n    end\nend\n</code>\n<|/ a |>\n<| a |>\nI believe\
    \ the following function will do what you're looking for.  It assumes that the\
    \ input is an integer:\n<code>\nusing Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\
    \t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10)\
    \ == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7kkjtut_.jl:13\nin expression starting at\
    \ /tmp/tmp7kkjtut_.jl:13\n"
  stdout: ''
  timestamp: 1659977824
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==1 \n        return 1 \n    else if n==2 \n        return 2 \n  \
    \  else if n%3==0 \n        return largest_divisor(n/3) \n    else \n        return\
    \ largest_divisor(n-1) + largest_divisor(n-2)\nend\n</cell>\n<text>\nNow let's\
    \ look at the numbers that we have:\nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\
    \t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0_pwvevy.jl:8\nin expression starting at /tmp/tmp0_pwvevy.jl:8\n"
  stdout: ''
  timestamp: 1659977824
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n % 2 == 0 \n        then return n\n    else \n        largest = largest_divisor(n\
    \ / 2)\n        if n % largest == 0 \n            then return largest\n      \
    \  else \n            return largest\n        end\n    end\nend \n</cell>\n<code\
    \ language=julia-1.6>\nlargest_divisor(210)\n</cell>\n<code language=julia-1.6>\n\
    @code_llvm largest_divisor(210)\n</cell>\n<text>\nExercise: Can you write this\
    \ in Julia?\nusing Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\t\
    @test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10) ==\
    \ 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpwujy3865.jl:7\nin expression starting at /tmp/tmpwujy3865.jl:7\n"
  stdout: ''
  timestamp: 1659977824
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n < 2\n        return n\n    \n    largest_divisor = 1\n    for num\
    \ in 2..n\n        if num % largest_divisor\n            largest_divisor = num\n\
    \        end\n    end\n    return largest_divisor\nend\n</code>\nThe function\
    \ itself is simple enough, just to find any divisor of n that is larger than n\n\
    <|/ a dscore=1 |>\n<| c |>\nThis is great but doesn't work for larger numbers.\
    \ I tried it on 15 and it returned 5 instead of 6. Do you know of any way to fix\
    \ this?\n<|/ c |>\n<| a tags=julia,math dscore=1 |>\nHere is another solution\
    \ that uses no loops, and is simpler than the other answers. This is my first\
    \ answer on StackOverflow, so if anyone can edit it to be more elegant I would\
    \ appreciate it.\nThe idea is to use the fact that if n is a perfect power of\
    \ two, then the largest number that is a multiple of n is also a multiple of n.\
    \ In the example below we will see that 32 is also a multiple of 4, and therefore\
    \ 32 is the largest multiple of 4 that can be divided by 4, 5 and 6.\n<code>\n\
    using Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3)\
    \ == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100)\
    \ == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpku1ly6qn.jl:17\nin expression starting at\
    \ /tmp/tmpku1ly6qn.jl:17\n"
  stdout: ''
  timestamp: 1659977824
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n % 2 == 0  &&  n % 3 == 0 \n        then largest_divisor(n + n/2)\n\
    \        else largest_divisor(n/2) \n</code>\n<|/ a tags=recursion,python |>\n\
    <| a dscore=0 |>\nHere is my solution in python:\n<code>\ndef largest_divisor_even(n):\n\
    \  if n<2: \n    return n\n  s = n\n  while n%2 == 0:\n    n /= 2\n  while n%3\
    \ == 0:\n    n /= 3\n  while n%4 == 0:\n    n /= 4\n  while n%5 == 0:\n    n /=\
    \ 5\n  while n%6 == 0:\n    n /= 6\n  while n%7 == 0:\n    n /= 7\n  while n%8\
    \ == 0:\n    n /= 8\n  while n%9 == 0:\n    n /= 9\n  while n%10 == 0:\n    n\
    \ /= 10\n  while n%11 == 0:\n    n /= 11\n  while n%12 == 0:\n    n /= 12\n  while\
    \ n%13 == 0:\n    n /= 13\n  while n%14 == 0:\n    n /= 14\n  while n%15 == 0:\n\
    \    n /= 15\n  while n%16 == 0:\n    n /= 16\n  while n%17 == 0:\n    n /= 17\n\
    \  while n%18 == 0:\n    n /= 18\n  while n%19 == 0:\n    n /= 19\n  while n%20\
    \ == 0:\n    n /= 20\n  while n%21 == 0:\n    n /= 21\n  while n%22 == 0:\n  \
    \  n /= 22\n  while n%23 == 0:\n    n /= 23\n  while n%24 == 0:\n    n /= 24\n\
    \  while n%25 == 0:\n    n /= 25\n  while n%26 == 0:\n    n /= 26\n  while n%27\
    \ == 0:\n    n /= 27\n  while n%28 == 0:\n    n /= 28\n  while n%29 == 0:\n  \
    \  n /= 29\n  while n%30 == 0:\n    n /= 30\n  while n%31 == 0:\n    n /= 31\n\
    \  while n%32 == 0:\n    n /= 32\n  while n%33 == 0:\n    n /= 33\n  while n%34\
    \ == 0:\n    n /= 34\n  while n%35 == 0:\n    n /= 35\n  while n%36 == 0:\n  \
    \  n /= 36\n  while n%37 == 0:\n    n /= 37\n  while n%38 == 0:\n\nusing Test\n\
    \n@testset begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3) == 1)\n\
    \t@test(candidate(7) == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100)\
    \ == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"largest_divisor\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgofrr5g3.jl:7\nin expression starting at /tmp/tmpgofrr5g3.jl:7\n"
  stdout: ''
  timestamp: 1659977824
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n % 2 == 1 \n    then largest_divisor(n / 2) \n    else largest_divisor(3\
    \ * n + 1) \nend\n</cell>\n<code language=julia-1.6>\nusing Test\n\n@testset begin\n\
    \ncandidate = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7)\
    \ == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"largest_divisor\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpn07j58r0.jl:7\nin expression starting at /tmp/tmpn07j58r0.jl:7\n"
  stdout: ''
  timestamp: 1659977824
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    smaller_divisor = 1\n    largest = n\n    while smaller_divisor < largest\n\
    \        smaller_divisor += 1\n        largest = n / smaller_divisor\n    return\
    \ largest\nend\n</cell>\n<code language=julia-0.6>\n@time largest_divisor(15)\n\
    </cell>\n<text>\nExercise\nTry solving this problem again using vectorization\n\
    using Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3)\
    \ == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100)\
    \ == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpl891m9fv.jl:13\nin expression starting at\
    \ /tmp/tmpl891m9fv.jl:13\n"
  stdout: ''
  timestamp: 1659977824
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n%2 == 0\n        then return n\n    else\n        largest_divisor(n/2)\n\
    \    end\nend\n</code>\nThe function call largest_divisor(15) returns 5, because\
    \ it is the largest number that can be divided by 2 without any remainder.\n<|/\
    \ a tags=recursion,julia dscore=1 |>\n<| c |>\nThanks Chris! I appreciate your\
    \ help!\n<|/ c |>\n<| c |>\nNo problem, glad I could help!\n<|/ c |>\n<| c |>\n\
    Thanks again! I understand now.\n<|/ c |>\n<| a |>\nOne simple solution to this\
    \ problem is the following one-line function:\n<code>\nlargestdiv(n) = div(n,\
    \ gcd(n,2))\n</code>\nwhich works similarly to the built-in function div().\n\
    <|/ a tags=recursion,julia dscore=1 |>\n<| a |>\nA purely recursive function:\n\
    <code>\nusing Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3)\
    \ == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100)\
    \ == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpjq2k80s4.jl:7\nin expression starting at /tmp/tmpjq2k80s4.jl:7\n"
  stdout: ''
  timestamp: 1659977824
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    largest_divisor = 0\n    for d in divisors(n)\n        if n % d == 0\n\
    \            largest_divisor = d\n            break\n    return largest_divisor\n\
    </code>\nIt can be further optimized using a function call instead of a loop like\
    \ this. In any case, if you really need to use an infinite loop, you can use the\
    \ break statement to exit the loop. Or you can use a while loop. Anyway, the solutions\
    \ above are simple and clear.\n<|/ a |>\n<| a tags=julia |>\nUsing a while loop\
    \ will work:\n<code>\nusing Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\
    \t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10)\
    \ == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpm2qw86aa.jl:12\nin expression starting at\
    \ /tmp/tmpm2qw86aa.jl:12\n"
  stdout: ''
  timestamp: 1659977824
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    largest_divisor = 1\n    for div in divisors(n) do\n        if div > largest_divisor\
    \ then\n            largest_divisor = div\n        end\n    end\nend\n</cell>\n\
    <cell>\nusing Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3)\
    \ == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100)\
    \ == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqr72s_dn.jl:13\nin expression starting at\
    \ /tmp/tmpqr72s_dn.jl:13\n"
  stdout: ''
  timestamp: 1659977824
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n%2 == 0 and n > 2\n    then return n\n    else largest_divisor(n-1)\n\
    \    end\nend\n</cell>\n<text>\nNow let's test this on some numbers.\nusing Test\n\
    \n@testset begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3) == 1)\n\
    \t@test(candidate(7) == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100)\
    \ == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"n\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpf5ovmule.jl:6\nin expression starting at /tmp/tmpf5ovmule.jl:6\n"
  stdout: ''
  timestamp: 1659977825
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n == 1 \n        return 1 \n    else \n        if n % 2==0 \n     \
    \       return largest_divisor(n / 2) \n        else \n            return largest_divisor(n\
    \ / 2) + 1 \nend \nusing Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\
    \t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10)\
    \ == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"if\" at /tmp/tmpbakcyt9w.jl:6 requires\
    \ end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpbakcyt9w.jl:1\nin expression\
    \ starting at /tmp/tmpbakcyt9w.jl:1\n"
  stdout: ''
  timestamp: 1659977824
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    # write your code in Julia 0.6.4\n</code>\n<|/ a tags=julia,function,for-loop\
    \ |>\n<| a tags=julia,function,for-loop |>\n<code>\nusing Test\n\n@testset begin\n\
    \ncandidate = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7)\
    \ == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjm7xwq4_.jl:7\nin expression starting at /tmp/tmpjm7xwq4_.jl:7\n"
  stdout: ''
  timestamp: 1659977824
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    largest_divisor = 1\n    for div in 1:Int(sqrt(n)):\n        if n % div\
    \ == 0 && (div > largest_divisor)\n            largest_divisor = div\n       \
    \     \n    return largest_divisor\n</cell>\n<text>\nProblem 6 (2 points)\nusing\
    \ Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3)\
    \ == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100)\
    \ == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdfc3kvnt.jl:8\nin expression starting at /tmp/tmpdfc3kvnt.jl:8\n"
  stdout: ''
  timestamp: 1659977825
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    \n    for i in 2..n\n        if n%i == 0\n            return i\n     \
    \   end\n    end\n    return n\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\
    \t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmp46nui7rj.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmp46nui7rj.jl:19\n  Test threw exception\n\
    \  Expression: candidate(3) == 1\n  UndefVarError: .. not defined\n  Stacktrace:\n\
    \   [1] largest_divisor(n::Int64)\n     @ Main /tmp/tmp46nui7rj.jl:7\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp46nui7rj.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp46nui7rj.jl:18\ntest set:\
    \ Error During Test at /tmp/tmp46nui7rj.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(7) == 1\n  UndefVarError: .. not defined\n  Stacktrace:\n   [1] largest_divisor(n::Int64)\n\
    \     @ Main /tmp/tmp46nui7rj.jl:7\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp46nui7rj.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp46nui7rj.jl:18\ntest set:\
    \ Error During Test at /tmp/tmp46nui7rj.jl:21\n  Test threw exception\n  Expression:\
    \ candidate(10) == 5\n  UndefVarError: .. not defined\n  Stacktrace:\n   [1] largest_divisor(n::Int64)\n\
    \     @ Main /tmp/tmp46nui7rj.jl:7\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp46nui7rj.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp46nui7rj.jl:18\ntest set:\
    \ Error During Test at /tmp/tmp46nui7rj.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(100) == 50\n  UndefVarError: .. not defined\n  Stacktrace:\n   [1]\
    \ largest_divisor(n::Int64)\n     @ Main /tmp/tmp46nui7rj.jl:7\n   [2] macro expansion\n\
    \     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmp46nui7rj.jl"
  timestamp: 1659977827
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n == 0\n        return 0\n    \n    # Initialization\n    largest_divisor\
    \ = 0\n    divisor = 1\n    \n    # Finding the largest divisor\n    while divisor\
    \ * divisor < n\n        largest_divisor = divisor\n        divisor += 1\n   \
    \ end\nusing Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3)\
    \ == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100)\
    \ == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5sj6ybk_.jl:1\nin expression starting at /tmp/tmp5sj6ybk_.jl:1\n"
  stdout: ''
  timestamp: 1659977825
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n % 2 == 0\n        largest = n\n    else\n        largest = n % largest\n\
    \        largest /= largest\n    return largest\n</cell>\n<code language=julia-1.5>\n\
    # %%julia\nusing Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3)\
    \ == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100)\
    \ == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnbj8zvdo.jl:12\nin expression starting at\
    \ /tmp/tmpnbj8zvdo.jl:12\n"
  stdout: ''
  timestamp: 1659977825
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n <= 0\n        error(\"n must be positive\")\n    elseif n % 2 ==\
    \ 0\n        largest_divisor(n/2)\n    else\n        largest = n \n        if\
    \ n >= 11\n            largest = largest / 10\n        largest = largest * 10\n\
    \        largest = largest / 2\n        return largest\n</code>\n<|/ a dscore=1\
    \ |>\n<| c |>\nWhat do you mean `n / 10` ? I don't see where I divided `n by 10`?\n\
    <|/ c |>\n<| c |>\nI edited my answer, but basically I meant that `n / 10` produces\
    \ the largest integer divisible by 10.\n<|/ c |>\n<| c |>\nYes, thank you. I'm\
    \ still trying to wrap my head around what exactly you're doing there. I see a\
    \ lot of code there and that's where I get lost. How do I know where I'm going\
    \ wrong?\n<|/ c |>\n<| a dscore=1 tags=algorithm,big-o |>\nThe code below has\
    \ linear time complexity as its iterating over all the divisors of a number n.\
    \ \n<code>\ndef largest_divisor(n) {\n  let largest = 0\n  let divisor = 1\n \
    \ while divisor <= n {\n    if n % divisor == 0 {\n      largest = divisor\n \
    \     n /= divisor\n    } else {\n      divisor++\n    }\n  }\n  largest\n}\n\
    </code>\n<|/ a |>\n<| a |>\n<code>\ndef largest_divisor(n) {\n  largest = n\n\
    \  for divisor in 1..n {\n      if n % divisor == 0 {\n         largest = divisor\n\
    \      }\n  }\n  return largest\n}\n</code>\n<|/ a dscore=0 tags=algorithm,big-o\
    \ |>\n<| c |>\nThis is not going to work, since it only returns the largest divisor\
    \ and not the largest number. I added a return statement after the for loop and\
    \ it still gave the same answer.\n<|/ c |>\n<| c |>\nI misunderstood the question,\
    \ so the code was updated.\n<|/ c |>\n<| c |>\nThis is still not correct - it\
    \ only returns the largest divisor.\n<|/ c |>\n<| a tags=algorithm,big-o dscore=0\
    \ |>\nHere is my Python implementation:\n<code>\nimport math\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7)\
    \ == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpf9fvo24v.jl:17\nin expression starting at\
    \ /tmp/tmpf9fvo24v.jl:17\n"
  stdout: ''
  timestamp: 1659977825
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n == 0\n        return n\n    \n    if n == 1\n        return n\n \
    \   \n    if n % 2 == 0\n        largest_divisor_odd_number = largest_divisor(n\
    \ / 2)\n    else\n        largest_divisor_even_number = largest_divisor(n / 2)\n\
    \    \n    return largest_divisor_even_number if n % 2 == 0 else largest_divisor_odd_number\n\
    </code>\n<|/ a tags=julia,integer,performance |>\n<| c |>\nThe last statement\
    \ should be `if n % 2 == 0`\n<|/ c |>\n<| c |>\nOh yes of course!  I just copied\
    \ it directly from the question... Thanks.\n<|/ c |>\n<| a dscore=0 |>\nIf you\
    \ have a limited set of prime numbers you can do it without an explicit loop,\
    \ by using the Chinese Remainder Theorem:\n<code>\njulia> isprime(n::Int64) =\
    \ (2<=n<=2^31-1) && (n%2==0) && (n%3!=0); (x -> (n%x != 0))(primes(Int(sqrt(n))))\n\
    isprime\nusing Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3)\
    \ == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100)\
    \ == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"if\" at /tmp/tmpjoty8pga.jl:12 expected \"\
    end\", got \"if\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjoty8pga.jl:17\n\
    in expression starting at /tmp/tmpjoty8pga.jl:17\n"
  stdout: ''
  timestamp: 1659977825
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n % 2 == 0 then \n        return n \n    else \n        largest = 2\
    \ \n        for d in range(3, (sqrt(n)+1), 2) \n            if n % d == 0 \n \
    \               return d \n            elseif d > largest\n                largest\
    \ = d\n        return largest \nend\n</cell>\n<code language=julia-0.5>\nlargest_divisor(15)\n\
    </cell>\n<text>\nThe function largest_divisor returns the largest number that\
    \ divides n evenly, smaller than n. For example, n = 15 should return 5, because\
    \ 15 is evenly divisible by 3 and 5.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\
    \t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2ju8g_3g.jl:17\nin expression starting at\
    \ /tmp/tmp2ju8g_3g.jl:17\n"
  stdout: ''
  timestamp: 1659977825
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    largest_divisor = 1\n    largest_divisor_count = 1\n    for d in divisors(n):\n\
    \        if n % d == 0:\n            largest_divisor = d\n            largest_divisor_count\
    \ = divisors(n)\n    if largest_divisor_count > 1\n        return largest_divisor\n\
    \    else\n        return n\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    largest_divisor(12)\n</cell>\n<text>\nProblem 11 (10 points) \nImplement a function,\
    \ is_palindromic, that takes a String and returns True if it's palindromic and\
    \ False if not\nusing Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\
    \t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10)\
    \ == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp55mvic6b.jl:9\nin expression starting at /tmp/tmp55mvic6b.jl:9\n"
  stdout: ''
  timestamp: 1659977826
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0\n        1\n    else\n        if n mod 2 ==0\n            if n>largest_divisor(n-1)\n\
    \                largest_divisor(n-1)\n            else\n                largest_divisor(n)\n\
    \        else\n            largest_divisor(n)\n        end\n    end\nend\n</cell>\n\
    <code language=julia-0.6>\n@time largest_divisor(15000000);\n</cell>\n<code language=julia-0.6>\n\
    @time largest_divisor(150000000);\n</cell>\n<code language=julia-0.6>\n@time largest_divisor(200000000);\n\
    </cell>\n<code language=julia-0.6>\n@time largest_divisor(2000000000);\n</cell>\n\
    <code language=julia-0.6>\n@time largest_divisor(20000000000);\n</cell>\n<code\
    \ language=julia-0.6>\n@time largest_divisor(200000000000);\n</cell>\n<code language=julia-0.6>\n\
    @time largest_divisor(2000000000000);\n</cell>\n<code language=julia-0.6>\n@time\
    \ largest_divisor(20000000000000);\n</cell>\n<code language=julia-0.6>\n@time\
    \ largest_divisor(200000000000000);\n</cell>\n<code language=julia-0.6>\n@time\
    \ largest_divisor(2000000000000000);\n</cell>\n<code language=julia-0.6>\n@time\
    \ largest_divisor(20000000000000000);\n</cell>\n<code language=julia-0.6>\n@time\
    \ largest_divisor(200000000000000000);\n</cell>\n<code language=julia-0.6>\n@time\
    \ largest_divisor(2000000000000000000);\n</cell>\n<code language=julia-0.6>\n\
    @time largest_divisor(20000000000000000000);\n</cell>\n<code language=julia-0.6>\n\
    @time largest_divisor(200000000000000000000);\n</cell>\n<code language=julia-0.6>\n\
    @time largest_divisor(2000000000000000000000);\n</cell>\n<code language=julia-0.6>\n\
    @time largest_divisor(20000000000000000000000);\n</cell>\n<code language=julia-0.6>\n\
    @time largest_divisor(200000000000000000000000);\n</cell>\n<code language=julia-0.6>\n\
    @time largest_divisor(2000000000000000000000000);\n</cell>\n<code language=julia-0.6>\n\
    @time largest_divisor(20000000000000000000000000);\n</cell>\n<code language=julia-0.6>\n\
    @time largest_divisor(200000000000000000000000000);\n</cell>\n<code language=julia-0.6>\n\
    using Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3)\
    \ == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100)\
    \ == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"2\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp3ymn4kgl.jl:9\nin expression starting at /tmp/tmp3ymn4kgl.jl:9\n"
  stdout: ''
  timestamp: 1659977826
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n <= 0\n    then throw(DomainError(\"n must be positive\"))\n    else\
    \ if n % 2 == 0 \n    then return n\n    else \n        smaller_n = largest_divisor(n\
    \ / 2)\n        if smaller_n % 2 == 0\n        then return smaller_n\n       \
    \ else return smaller_n +1\n    end\nend\n</code>\n<|/ a dscore=1 |>\n<| a tags=julia\
    \ dscore=1 |>\nIn Julia you can do something like \n<code>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7)\
    \ == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"throw\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp44blp5fc.jl:7\nin expression starting at /tmp/tmp44blp5fc.jl:7\n"
  stdout: ''
  timestamp: 1659977826
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n == 0 || n % 2 == 0 \n        then return n\n    else if n % 3 = 0\
    \ \n        then return n \n    else \n        return largest_divisor(n div 3)\
    \ + 1\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3)\
    \ == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100)\
    \ == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp0wm7qy_j.jl:7\nin expression starting at /tmp/tmp0wm7qy_j.jl:7\n"
  stdout: ''
  timestamp: 1659977826
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0 return n\n    \n    let rec largest_divisor_aux(max_div::Int64,\
    \ min_div::Int64, n::Int64)::Int64 = \n        if n==1 return max_div\n      \
    \  if n % min_div==0 \n            then largest_divisor_aux(max_div+1, min_div,\
    \ n/min_div)\n            else largest_divisor_aux(max_div, min_div, n/min_div)\n\
    \    \n    largest_divisor_aux(1, 2, n)\nend\nusing Test\n\n@testset begin\n\n\
    candidate = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7)\
    \ == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: let variables should end in \";\" or newline\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmpmom03wl8.jl:8\nin expression starting\
    \ at /tmp/tmpmom03wl8.jl:8\n"
  stdout: ''
  timestamp: 1659977826
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0 then return 0\n    if n==1 then return 1\n    if n mod 2==0 then\
    \ return n\n    else if n%3==0 then return n div 3\n    else if n%5==0 then return\
    \ n div 5\n    else if n%7==0 then return n div 7\n    else if n%11==0 then return\
    \ n div 11\n    else if n%13==0 then return n div 13\n    else if n%17==0 then\
    \ return n div 17\n    else if n%19==0 then return n div 19\n    else if n%23==0\
    \ then return n div 23\n    else if n%37==0 then return n div 37\n    else if\
    \ n%43==0 then return n div 43\n    else if n%57==0 then return n div 57\n   \
    \ else if n%61==0 then return n div 61\n    else if n%67==0 then return n div\
    \ 67\n    else if n%71==0 then return n div 71\n    else if n%73==0 then return\
    \ n div 73\n    else if n%79==0 then return n div 79\n    else if n%83==0 then\
    \ return n div 83\n    else if n%89==0 then return n div 89\n    else if n%97==0\
    \ then return n div 97\n    else if n%103==0 then return n div 103\n    else if\
    \ n%107==0 then return n div 107\n    else if n%113==0 then return n div 113\n\
    \    else if n%127==0 then return n div 127\n    else if n%131==0 then return\
    \ n div 131\n    else if n%137==0 then return n div 137\n    else if n%153==0\
    \ then return n div 153\n    else if n%157==0 then return n div 157\n    else\
    \ if n%163==0 then return n div 163\n    else if n%167==0 then return n div 167\n\
    \    else if n%173==0 then return n div 173\n    else if n%177==0 then return\
    \ n div 177\n    else if n%183==0 then return n div 183\n    else if n%187==0\
    \ then return n div 187\n    else if n%193==0 then return n div 193\nusing Test\n\
    \n@testset begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3) == 1)\n\
    \t@test(candidate(7) == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100)\
    \ == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmphxakeio7.jl:6\nin expression starting at /tmp/tmphxakeio7.jl:6\n"
  stdout: ''
  timestamp: 1659977826
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    return largest_divisor_recursive(n)\nusing Test\n\n@testset begin\n\n\
    candidate = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7)\
    \ == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpdqkvbvuk.jl:5\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpdqkvbvuk.jl:1\n\
    in expression starting at /tmp/tmpdqkvbvuk.jl:1\n"
  stdout: ''
  timestamp: 1659977826
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n  if n % 2 == 0 \n    then\n      while n % 2 == 0 \n        n2 = n//2 \n\
    \        n = n \n        if n2 > n \n          then \n            return n2 \n\
    \        end\n      end\n  end\n  if n % 2 == 0 \n    then\n      while n % 2\
    \ == 0 \n        n2 = n//2 \n        n = n \n        if n2 < n \n          then\
    \ \n            return n2 \n        end\n      end\n  end\n  return n\nend\n</cell>\n\
    <code language=julia-1.1>\n@time largest_divisor(30)\n</cell>\n<code language=julia-1.1>\n\
    @time largest_divisor(150)\n</cell>\n<text>\nWe now have two problems: one to\
    \ solve, and one to solve.\nusing Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\
    \t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10)\
    \ == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplo6rwy6k.jl:30\nin expression starting at\
    \ /tmp/tmplo6rwy6k.jl:30\n"
  stdout: ''
  timestamp: 1659977826
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n == 0\n        0\n    else \n        largest_divisor(n / 2) \n   \
    \     if n % 2 != 0\n            then largest_divisor(n / 2) \n            else\
    \ largest_divisor(n / 2 + 1)\nend\n</code>\n<|/ a |>\n<| a |>\n<code>\nusing Test\n\
    \n@testset begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3) == 1)\n\
    \t@test(candidate(7) == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100)\
    \ == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"largest_divisor\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp929txv7i.jl:11\nin expression starting at\
    \ /tmp/tmp929txv7i.jl:11\n"
  stdout: ''
  timestamp: 1659977826
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n<0\n        throw(ArgumentError(\"n must be positive\"))\n    if n==0\n\
    \        throw(ArgumentError(\"n must be positive\"))\n    if n==1\n        throw(ArgumentError(\"\
    n must be positive\"))\n    else if n==2\n        return n\n    else if isodd(n)\n\
    \        return 2\n    else if iseven(n)\n        return 2\n    else if isodd(2n)\n\
    \        return n\n    else if iseven(2n)\n        return n\n    else if isodd(3n)\n\
    \        return 3\n    else if iseven(3n)\n        return 3\n    else if isodd(4n)\n\
    \        return 4\n    else if iseven(4n)\n        return 4\n    else if isodd(5n)\n\
    \        return 5\n    else if iseven(5n)\n        return 5\n    else if isodd(6n)\n\
    \        return 6\n    else if iseven(6n)\n        return 6\n    else if isodd(7n)\n\
    \        return 7\n    else if iseven(7n)\n        return 7\n    else if isodd(8n)\n\
    \        return 8\n    else if iseven(8n)\n        return 8\n    else if isodd(9n)\n\
    \        return 9\n    else if iseven(9n)\n        return 9\n    else if isodd(10n)\n\
    \        return 10\n    else if iseven(10n)\n        return 10\n    else if isodd(11n)\n\
    \        return 11\n    else if iseven(11n)\n        return 11\n    else if isodd(12n)\n\
    \        return 12\n    else if iseven(12n)\n        return 12\n    else if isodd(13n)\n\
    \        return 13\n    else if iseven(13n)\n        return 13\n    else if isodd(14n)\n\
    \        return 14\n    else if iseven(14n)\n        return 14\n    else if isodd(15n)\n\
    \        return 15\n    else if iseven(15n)\n        return 15\n    else if isodd(16n)\n\
    \        return 16\n    else if iseven(16n)\n        return 16\n    else if isodd(17n)\n\
    \        return 17\n    else if iseven(17n)\n        return 17\n    else if isodd(18n)\n\
    \        return 18\n    else if iseven(18n)\n        return 18\n    else if isodd(19n)\n\
    \        return 19\n    else if iseven(19n)\n        return 19\n    else if isodd(20n)\n\
    \        return 20\n    else if iseven(20n)\n        return 20\nusing Test\n\n\
    @testset begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3) == 1)\n\t\
    @test(candidate(7) == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100)\
    \ == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpww8zqlf5.jl:12\nin expression starting at\
    \ /tmp/tmpww8zqlf5.jl:12\n"
  stdout: ''
  timestamp: 1659977826
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n < 10\n        return n\n    \n    let divisors    = [2..n] |> List.filter\
    \ (%2 == 0)\n    let largestDivisor = divisors |> List.reduce (max) |> ignore\n\
    \    \n    largestDivisor\n</code>\n<|/ a dscore=2 |>\n<| a tags=math,algorithm,numbers,bigint\
    \ |>\nThe simplest solution was proposed by Andrew Reid but with some minor changes.\n\
    <code>\nimport Data.Bits\nusing Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\
    \t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10)\
    \ == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: space before \"(\" not allowed in \"List.filter\
    \ (\" at /tmp/tmpyjad2nyd.jl:9\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpyjad2nyd.jl:9\n\
    in expression starting at /tmp/tmpyjad2nyd.jl:9\n"
  stdout: ''
  timestamp: 1659977826
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    n >= 2 ? largest_divisor(n / 2) : \n        n >= 4 ? largest_divisor(n\
    \ / 4) : \n            n >= 6 ? largest_divisor(n / 6) : \n                n >=\
    \ 8 ? largest_divisor(n / 8) : \n                    n >= 10 ? largest_divisor(n\
    \ / 10) : \n                        n >= 12 ? largest_divisor(n / 12) : \n   \
    \                         n >= 14 ? largest_divisor(n / 14) : \n             \
    \                   n >= 16 ? largest_divisor(n / 16) : \n                   \
    \                 n >= 18 ? largest_divisor(n / 18) : \n                     \
    \                   largest_divisor(n / 19)\n</code>\n<|/ a dscore=0 |>\n<| a\
    \ tags=scala,functional-programming dscore=0 |>\n<code>\ndef largestDivisor(num:\
    \ Int): Int = {\n  def findDivisors(n: Int): Seq[Int] = {\n    var divisors =\
    \ Seq(1)\n    for (_ <- 2 until n / 2 to 1 by -1) divisors = divisors ++ (Seq(n)\
    \ / divisors)\n    divisors\n  }\nusing Test\n\n@testset begin\n\ncandidate =\
    \ largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\t\
    @test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpa2hvotln.jl:16\nin expression starting at\
    \ /tmp/tmpa2hvotln.jl:16\n"
  stdout: ''
  timestamp: 1659977827
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n % 2 == 0 \n        then return n \n    else \n        return largest_divisor(n\
    \ / 2)\nend\n</cell>\n<cell>\n@time largest_divisor(15000)\n</cell>\n<text>\n\
    Question 2. Write a function to check if a number is prime. It should accept one\
    \ integer argument, n and return a Bool, indicating whether the number is prime\
    \ or not. \nFor example, largest_divisor(15) should return false, but the number\
    \ 15 is prime.\nusing Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\
    \t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10)\
    \ == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmprvuoyrst.jl:7\nin expression starting at /tmp/tmprvuoyrst.jl:7\n"
  stdout: ''
  timestamp: 1659977826
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n  \"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nusing Test\n\
    \n@testset begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3) == 1)\n\
    \t@test(candidate(7) == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100)\
    \ == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpwk8o55z7.jl:5\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpwk8o55z7.jl:1\n\
    in expression starting at /tmp/tmpwk8o55z7.jl:1\n"
  stdout: ''
  timestamp: 1659977826
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    biggest_divisor = 1\n    count = 0\n    for divisor in divisors(n):\n\
    \        if n % divisor == 0:\n            count += 1\n            if count >\
    \ biggest_divisor:\n                biggest_divisor = count\n    if biggest_divisor\
    \ == 1:\n        biggest_divisor = n\n    return biggest_divisor\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3) == 1)\n\
    \t@test(candidate(7) == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100)\
    \ == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpo7urxxag.jl:9\nin expression starting at /tmp/tmpo7urxxag.jl:9\n"
  stdout: ''
  timestamp: 1659977826
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n % 2 == 0\n        then largest_divisor(n / 2)\n    else largest_divisor(3\
    \ * n + 1) \nend \n</code>\nHere is an alternative implementation using recursion\n\
    <code>\nusing Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3)\
    \ == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100)\
    \ == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"largest_divisor\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_86wpqps.jl:7\nin expression starting at /tmp/tmp_86wpqps.jl:7\n"
  stdout: ''
  timestamp: 1659977826
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    # base case\n    if n == 0 \n        return n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7)\
    \ == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcd1uwq_j.jl:1\nin expression starting at /tmp/tmpcd1uwq_j.jl:1\n"
  stdout: ''
  timestamp: 1659977826
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    largest = 0\n    for x in 1..n do\n        if x % x == 0 then \n     \
    \       largest = x\n        end\n    end\n    return largest\nend\n</code>\n\
    <|/ a tags=julia,bigint |>\n<| c |>\nHi, I got an error when I run your code.\
    \ It says ``` ERROR: MethodError: no method matching largest_divisor(::Int64)\n\
    Closest candidates are:\n  largest_divisor(::Int64, ::Bool, ::Function, ::Module,\
    \ ::Array{Int64,1}) ```\n<|/ c |>\n<| c |>\nDid you copy it exactly? I put `largest_divisor(15)\
    \ `.  Perhaps you missed the parentheses? Just copy the code exactly and see if\
    \ that works.\n<|/ c |>\n<| a dscore=2 |>\nFor a more modern Julia syntax and\
    \ performance use this:\n<code>\njulia> maximum(x -> x % x == 0, Int64, 15)\n\
    5\n</code>\n<|/ a tags=julia,bigint |>\n<| a |>\nThe method largest_divisor from\
    \ math.jl is probably the fastest solution, but if you do not want to use math.jl\
    \ you can implement it yourself like this:\n<code>\nusing Test\n\n@testset begin\n\
    \ncandidate = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7)\
    \ == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid \"do\" syntax\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp5g3b0cvi.jl:7\nin expression starting at /tmp/tmp5g3b0cvi.jl:7\n"
  stdout: ''
  timestamp: 1659977827
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n  if n == 1 then return 1\n  largest_divisor_recursive(n-1, largest_divisor(n))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3)\
    \ == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100)\
    \ == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpbw6uffw5.jl:6\nin expression starting at /tmp/tmpbw6uffw5.jl:6\n"
  stdout: ''
  timestamp: 1659977826
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n%2 == 0 \n        return n\n    \n    largest_divisor = 1\n    \n\
    \    for i in (3,2,1) do \n        if n%i == 0 \n            largest_divisor =\
    \ i\n            break\n            \n    return largest_divisor\nusing Test\n\
    \n@testset begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3) == 1)\n\
    \t@test(candidate(7) == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100)\
    \ == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid \"do\" syntax\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpu965j7vj.jl:11\nin expression starting at /tmp/tmpu965j7vj.jl:11\n"
  stdout: ''
  timestamp: 1659977826
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    return max(n,smallest_divisor(n))\n</code>\nAnd we can verify that it\
    \ works:\n<code>\njulia> largest_divisor(15)\n5\n</code>\n<|/ a |>\n<| c |>\n\
    Thanks for your solution. I am not familiar with the \"Int64 ::type\" notation\
    \ that you used. Could you give me some references for that?\n<|/ c |>\n<| c |>\n\
    It looks like type aliasing, but I could be wrong, haven't used Julia in a while.\
    \ This link should help: https://docs.julialang.org/en/v1/manual/types/#Type-Aliasing\n\
    <|/ c |>\n<| c |>\nGreat! That was exactly the help I was looking for.\n<|/ c\
    \ |>\n<| c |>\nI realize that I should have mentioned that this solution does\
    \ not work for negative numbers.\n<|/ c |>\n<| c |>\nYes, you are right. Thanks\
    \ for your input! I will see if I can fix that.\n<|/ c |>\n<| a |>\nAs was pointed\
    \ out in the comments, this is an instance of the \"greatest common factor\" problem,\
    \ which is NP-complete in general. One algorithm to find the GCD of a number n\
    \ is:\nusing Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3)\
    \ == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100)\
    \ == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7ugetdco.jl:7\nin expression starting at /tmp/tmp7ugetdco.jl:7\n"
  stdout: ''
  timestamp: 1659977826
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n        if n%2 == 0 \n            then largest_divisor(n/2)\n            else\
    \ largest_divisor(n*3)\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\
    \t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10)\
    \ == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"largest_divisor\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6qkmg3gr.jl:7\nin expression starting at /tmp/tmp6qkmg3gr.jl:7\n"
  stdout: ''
  timestamp: 1659977826
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n<2 return 1\n    else if n==2 return 2\n    else if n%2==0 then \n\
    \        return largest_divisor(n/2)\n    else\n        return largest_divisor(n/2)+1\n\
    \    end\nend\n</cell>\n<text>\nExercise 3.11\nWrite a recursive function called\
    \ largest_divisor that returns the largest divisor of n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7)\
    \ == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9web_603.jl:7\nin expression starting at /tmp/tmp9web_603.jl:7\n"
  stdout: ''
  timestamp: 1659977828
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n  \n    if n == 0\n        return 1 \n    \n    largest_divisor = 2\n    while\
    \ true\n        if n % largest_divisor == 0\n            return largest_divisor\n\
    \        largest_divisor += 1\n    end\nend \nusing Test\n\n@testset begin\n\n\
    candidate = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7)\
    \ == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpa1cdjw05.jl:1\nin expression starting at /tmp/tmpa1cdjw05.jl:1\n"
  stdout: ''
  timestamp: 1659977828
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    \"\"\"\n    Find the largest number that divides n evenly, smaller than\
    \ n\n    \"\"\"\n    return n//gcd(n,2)\n</code>\n<|/ a tags=math,julia,integer-division\
    \ |>\n<| c |>\nPlease provide some explanation of your answer. It will help others\
    \ understand your solution.\n<|/ c |>\n<| a tags=math,julia,integer-division |>\n\
    Using Galois field arithmetic:\n<code>\njulia> div(n::Int, m::Int)::Int\n... (((1\
    \ << (32 - m)) // n)*n)\n... end\ndiv (generic function with 1 method)\nusing\
    \ Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3)\
    \ == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100)\
    \ == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_z46h7fl.jl:10\nin expression starting at\
    \ /tmp/tmp_z46h7fl.jl:10\n"
  stdout: ''
  timestamp: 1659977828
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==1\n        return n\n    else\n        largest_divisor(n % 2)\n\
    \        if n%3==0\n            return n\n        else\n            largest_divisor(n//3)\n\
    \        end\n    end\nend\n</cell>\n<text>\nNext, let's implement the recursive\
    \ function next_prime! for primes starting from 2.\nusing Test\n\n@testset begin\n\
    \ncandidate = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7)\
    \ == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5oe0kd7u.jl:17\nin expression starting at\
    \ /tmp/tmp5oe0kd7u.jl:17\n"
  stdout: ''
  timestamp: 1659977828
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n % 2 == 0\n        n /= 2\n        largest_divisor(n) \n    if n %\
    \ 2 == 0\n        n /= 2\n        largest_divisor(n)\n    return n\nend \n</cell>\n\
    <code language=julia-1.6>\nlargest_divisor(100)\n</cell>\n<text>\nExercise 2\n\
    Write a function that checks if a given number is a palindrome:\nusing Test\n\n\
    @testset begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3) == 1)\n\t\
    @test(candidate(7) == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100)\
    \ == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyhn5m71n.jl:14\nin expression starting at\
    \ /tmp/tmpyhn5m71n.jl:14\n"
  stdout: ''
  timestamp: 1659977828
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n % 2 == 0 return n \n    return largest_divisor(n/2)\nend\n</cell>\n\
    <code language=julia-1.3>\nlargest_divisor(20)\n</cell>\n<code language=julia-1.3>\n\
    using Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3)\
    \ == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100)\
    \ == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6o16cdzt.jl:9\nin expression starting at /tmp/tmp6o16cdzt.jl:9\n"
  stdout: ''
  timestamp: 1659977828
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    largest_divisor = 1\n    factor = 2\n    while factor < n\n        factor\
    \ = factor + 1\n        if n % factor == 0\n            if n % factor > largest_divisor\n\
    \                largest_divisor = factor\n        end\n    end\n    return largest_divisor\n\
    end\n</cell>\n<text>\nQuestion 7\nusing Test\n\n@testset begin\n\ncandidate =\
    \ largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\t\
    @test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptfsg8w01.jl:17\nin expression starting at\
    \ /tmp/tmptfsg8w01.jl:17\n"
  stdout: ''
  timestamp: 1659977828
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==1 then return 1\n    for d = 2 downto 1 do\n        if (n%d==0)\
    \ || (n%d==0) then\n            if n%d==0 then\n                return d\n   \
    \         else return d-1\n        end\n    end\n    return 0\nend\n</cell>\n\
    <code language=julia-1.6>\nlargest_divisor(15)\n</cell>\n<code language=julia-1.6>\n\
    using Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3)\
    \ == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100)\
    \ == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp85xfckgx.jl:6\nin expression starting at /tmp/tmp85xfckgx.jl:6\n"
  stdout: ''
  timestamp: 1659977828
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n < 2\n        return n\n    \n    var smallerNumber::Int64 = 0\n \
    \   var greaterNumber::Int64 = 1\n    var result::Int64 = 1\n    var remainder::Int64\
    \ = 1\n    \n    while greaterNumber < n\n        remainder = n % greaterNumber\n\
    \        if remainder == 0\n            break\n        smallerNumber = greaterNumber\n\
    \        greaterNumber += 2\n        \n    if remainder == 1\n        return greaterNumber\
    \ - 2\n    \n    while smallerNumber < n\n        remainder = n % smallerNumber\n\
    \        if remainder == 0\n            break\n        smallerNumber += 2\n  \
    \      \n    if remainder == 1\n        return smallerNumber + 2\n    \n    return\
    \ smallerNumber + 2\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\
    \t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10)\
    \ == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"smallerNumber\"\nStacktrace:\n [1]\
    \ top-level scope\n   @ /tmp/tmp8shn1s9o.jl:9\nin expression starting at /tmp/tmp8shn1s9o.jl:9\n"
  stdout: ''
  timestamp: 1659977828
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n % 2 == 0 \n        then largest_divisor(n / 2)\n    else\n      \
    \  largest_divisor(n / 2)\nend\n</code>\n<|/ a |>\n<| a |>\nThe only recursive\
    \ function I know is this one:\n<code>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\
    \t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"largest_divisor\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpurt2ox_m.jl:7\nin expression starting at /tmp/tmpurt2ox_m.jl:7\n"
  stdout: ''
  timestamp: 1659977828
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    \n    # Store the result\n    result ::Int64 = 1\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7)\
    \ == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp1rj2v42a.jl:5\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp1rj2v42a.jl:1\n\
    in expression starting at /tmp/tmp1rj2v42a.jl:1\n"
  stdout: ''
  timestamp: 1659977828
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n <= 1\n        1\n    else\n        n / largest_divisor(n - 1)\nend\n\
    </cell>\n<code language=julia-1.5>\n@assert largest_divisor(5) == 4\n@assert largest_divisor(12)\
    \ == 3\n@assert largest_divisor(11) == 4\n@assert largest_divisor(20) == 10\n\
    @assert largest_divisor(2) == 2\n@assert largest_divisor(3) == 1\n@assert largest_divisor(10)\
    \ == 0\n@assert largest_divisor(12) == 1\n@assert largest_divisor(12) == 2 \n\
    </cell>\n<text>\nProblem 7 (1 point)\nFind the smallest number p such that p^2\
    \ - 3p + 1 = 1 is a perfect square.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\
    \t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpm2bjfw9a.jl:11\nin expression starting at\
    \ /tmp/tmpm2bjfw9a.jl:11\n"
  stdout: ''
  timestamp: 1659977828
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \nif n < 2 then \n    largest_divisor = 1\nelif n % 2 == 0 then \n    largest_divisor\
    \ = 2\nelseif n % 3 == 0 then \n    largest_divisor = 3\nelseif n % 5 == 0 then\
    \ \n    largest_divisor = 5\nelse \n    largest_divisor = largest_divisor(n %\
    \ 6) + 1\nend\nend\n</code>\n<|/ a tags=julia,if-statement,performance |>\n<|\
    \ a |>\nThis seems to work:\n<code>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\
    \t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"n\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpolq7ff4b.jl:8\nin expression starting at /tmp/tmpolq7ff4b.jl:8\n"
  stdout: ''
  timestamp: 1659977828
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n < 1\n        return -1\n    if n % 2 == 0\n        largest_divisor(n\
    \ / 2)\n    else\n        largest_divisor(3 * n + 1) \n    end\nend\n</cell>\n\
    <text>\nTo find all possible divisors of a number, we use the algorithm above\
    \ using recursion.\nusing Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\
    \t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10)\
    \ == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmploskwu1t.jl:14\nin expression starting at\
    \ /tmp/tmploskwu1t.jl:14\n"
  stdout: ''
  timestamp: 1659977828
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    count = 0\n    largest_divisor = 1\n    for x in 2..n\n        if x %\
    \ n == 0\n            count += 1\n            if count == largest_divisor\n  \
    \              largest_divisor = x\n        end\n    end\n    return largest_divisor\n\
    end\n</cell>\n<code language=julia-1.5>\n@time largest_divisor(15)\n</cell>\n\
    <text>\nThe above function runs very fast!\nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\
    \t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpegy_ig8t.jl:17\nin expression starting at\
    \ /tmp/tmpegy_ig8t.jl:17\n"
  stdout: ''
  timestamp: 1659977828
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n % 2 == 0 then \n        return n\n    end\n    largest_divisor(n\
    \ / 2)\nend\n</cell>\n<text>\nProblem 4\nHow many numbers greater than 100 that\
    \ can be written as the sum of two abundant numbers?\nusing Test\n\n@testset begin\n\
    \ncandidate = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7)\
    \ == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpp8nob45z.jl:11\nin expression starting at\
    \ /tmp/tmpp8nob45z.jl:11\n"
  stdout: ''
  timestamp: 1659977828
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \nif n == 0 \n    return 0\nelseif n % 2 == 0 \n    return 2\nelseif n % 3 ==\
    \ 0 \n    return 3\nelseif n % 5 == 0 \n    return 5\nelseif n % 7 == 0 \n   \
    \ return 7\nelse\n    largest_divisor(n / 2)\nend\nend\n</code>\n<|/ a tags=julia,recursion\
    \ |>\n<| c |>\nThe Julia documentation states that `/` truncates any fractional\
    \ numbers to an integer. Perhaps you can do `n \xF7 2` to get the largest integer\
    \ `n / 2` divided by 2.\n<|/ c |>\n<| c |>\nI like that! It looks like it could\
    \ be much more efficient, though, since `n \xF7 2` can still return a floating-point\
    \ number (e.g. `5.0 / 2.0`), whereas the naive approach will have to perform a\
    \ multiplication every time.\n<|/ c |>\n<| c |>\nI believe that `\xF7` is an operator\
    \ for integer division in Julia. I've rewritten the solution to use integer division\
    \ instead, which is definitely much more efficient in general.\n<|/ c |>\n<| a\
    \ dscore=3 tags=julia,recursion |>\nJust to provide a quick bit of perspective\
    \ on another answer (and to explain what was going on with the original question).\n\
    The goal was to find the largest integer that divides n evenly. While the other\
    \ answers provide the general solution, they don't account for factors that don't\
    \ divide evenly. \nThe naive solution would be to check all the factors from 2\
    \ to sqrt(n) and see which of them divide evenly. This would take O(sqrt(n)) iterations,\
    \ but that's not too bad (the sqrt function is very fast, in fact), so if we limit\
    \ ourselves to that, we end up with O(log(n)) iterations - which is pretty good.\n\
    If we take into account all the factors, we end up with O(sqrt(n)) operations\
    \ on that final answer. \n<code>\nusing BenchmarkTools\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7)\
    \ == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpg8kvt8qp.jl:20\nin expression starting at\
    \ /tmp/tmpg8kvt8qp.jl:20\n"
  stdout: ''
  timestamp: 1659977828
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n <= 1\n    else if n % 2 == 0\n    else largest_divisor(n / 2)\nend\n\
    </cell>\n<code language=julia-1.5>\nlargest_divisor(15)\n</cell>\n<text>\nLet's\
    \ write a function called greatest_divisor which takes as input a number and returns\
    \ the largest number that divides n evenly and smaller than n\nusing Test\n\n\
    @testset begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3) == 1)\n\t\
    @test(candidate(7) == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100)\
    \ == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprgo5ys29.jl:7\nin expression starting at /tmp/tmprgo5ys29.jl:7\n"
  stdout: ''
  timestamp: 1659977828
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==1 then return n\n    return largest_divisor(n-1) if n%2==0 then\
    \ largest_divisor(n/2) else n\nusing Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\
    \t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10)\
    \ == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpll_u30f1.jl:6\nin expression starting at /tmp/tmpll_u30f1.jl:6\n"
  stdout: ''
  timestamp: 1659977828
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n == 0 || n == 1 then return n\n    if n % 2 == 0 then return n\n \
    \   let y = largest_divisor(n / 2)\n    if y % 2 == 0 then return y\n    if y\
    \ < n / 2 then return y\n    return n\n    \"\"\"\n</cell>\n<cell>\n@test largest_divisor(15)\
    \ == 5\n</cell>\n<text>\nThe Prime Numbers\nLet's look at some other mathematical\
    \ operations. First of all, we will need to know that a number n is prime if and\
    \ only if it is divisible by any integer up to and including n, except for one\
    \ special case that is the number 2. We will then be using that rule to write\
    \ a function prime_divisor_counts, which will count the number of divisors a given\
    \ number n has before reaching the number 2. The function below will count all\
    \ divisors up to a number, but it will stop counting when it has found a divisor\
    \ equal to two. Thus, if n is prime the function will stop counting as soon as\
    \ it has found a divisor equal to 2.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\
    \t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmppocqkl8y.jl:6\nin expression starting at /tmp/tmppocqkl8y.jl:6\n"
  stdout: ''
  timestamp: 1659977828
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n < 2\n        throw(ArgumentError(\"$n must be positive\"))\n    end\n\
    \    for d in divisors(n)\n        if d % 2 == 0\n            return d\n     \
    \   end\n    end\n    return n\nend\n</cell>\n<code language=julia-0.6>\n@time\
    \ largest_divisor(11)\n</cell>\n<code language=julia-0.6>\n@time largest_divisor(15)\n\
    </cell>\n<text>\nDivisible by 2?\nusing Test\n\n@testset begin\n\ncandidate =\
    \ largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\t\
    @test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpo299mraj.jl:16\nin expression starting at\
    \ /tmp/tmpo299mraj.jl:16\n"
  stdout: ''
  timestamp: 1659977828
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n <= 1\n        1\n    else\n        largest_divisor(n-1) % n\n   \
    \ end\nend\n</code>\n<|/ a tags=algorithm,julia,recursion |>\n<| a dscore=3 tags=algorithm,julia,recursion\
    \ |>\nUsing no explicit loops\n<code>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\
    \t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7b698y70.jl:12\nin expression starting at\
    \ /tmp/tmp7b698y70.jl:12\n"
  stdout: ''
  timestamp: 1659977829
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n == 1 \n        return 1 \n    else \n        return largest_divisor(n\
    \ / 2) + 1 \nend \nusing Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\
    \t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10)\
    \ == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp4xdhpam5.jl:5\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp4xdhpam5.jl:1\n\
    in expression starting at /tmp/tmp4xdhpam5.jl:1\n"
  stdout: ''
  timestamp: 1659977828
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n == 0\n    then return 1\n    else if n % 2 == 0\n    then return\
    \ n / 2\n    else return largest_divisor(n / 2)\nend\n</cell>\n<code language=julia-0.6>\n\
    # Exercise 19: Write a function largest_divisor_iter that works similarly to largest_divisor.\n\
    using Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3)\
    \ == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100)\
    \ == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpxydqmeg1.jl:7\nin expression starting at /tmp/tmpxydqmeg1.jl:7\n"
  stdout: ''
  timestamp: 1659977830
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n == 1 \n        1\n    else \n        if n % 2 == 0 \n           \
    \ largest_divisor(n//2)\n        else \n            if n % 3 == 0 \n         \
    \       largest_divisor(n//3)\n            else \n                if n % 5 ==\
    \ 0 \n                    largest_divisor(n//5)\n                else \n     \
    \               if n % 7 == 0 \n                        largest_divisor(n//7)\n\
    \                    else \n                        largest_divisor(n)\nend \n\
    </cell>\n<code language=julia-1.5>\nlargest_divisor(17)\n</cell>\n<code language=julia-1.5>\n\
    largest_divisor(19)\n</cell>\n<code language=julia-1.5>\nlargest_divisor(25)\n\
    </cell>\n<code language=julia-1.5>\nlargest_divisor(13)\n</cell>\n<code language=julia-1.5>\n\
    largest_divisor(21)\n</cell>\n<text>\nGreatest product of all numbers from 1 to\
    \ N\nGiven an integer, N find and print its greatest product of all the integers\
    \ from 1 to N.\nusing Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\
    \t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10)\
    \ == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzq26wbgq.jl:23\nin expression starting at\
    \ /tmp/tmpzq26wbgq.jl:23\n"
  stdout: ''
  timestamp: 1659977830
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n < 0 then return error \"n must be nonnegative\"\n    if n < 1 then\
    \ return 1 \n    let result = 1\n    let max_divisor = 1\n    for i in 2:n do\n\
    \        if n % i == 0 then\n            if result < max_divisor then\n      \
    \          let result = i\n                max_divisor = i\n            end\n\
    \        end\n    end\n    return result\nend function\n</code>\n<|/ a tags=function,julia,for-loop\
    \ |>\n<| c |>\nThank you for your contribution. However, this is way overcomplicated\
    \ and doesn't really answer the question, although it's a very useful function\
    \ anyway. As I said in the question, I'm looking for a solution which uses loops\
    \ and is way more efficient.\n<|/ c |>\n<| c |>\nOops, sorry, you're right. I'll\
    \ remove this answer and just leave this one. Hopefully someone else will chime\
    \ in with a much cleaner answer.\n<|/ c |>\n<| a tags=function,julia,for-loop\
    \ |>\nHere is my solution:\n<code>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\
    \t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp7ao7jf5q.jl:6\nin expression starting at /tmp/tmp7ao7jf5q.jl:6\n"
  stdout: ''
  timestamp: 1659977830
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==1 \n        return n\n    if n%2==0 \n        then largest_divisor(n/2)\n\
    \        else largest_divisor(n/2)+1\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @time largest_divisor(10)\n</cell>\n<text>\nProblem 3\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7)\
    \ == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"largest_divisor\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpak049bnn.jl:9\nin expression starting at /tmp/tmpak049bnn.jl:9\n"
  stdout: ''
  timestamp: 1659977830
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n%2==0 \n        then return n \n    else\n        for i in 2 .. n/2\
    \ \n            if n%i==0 \n                then return n \n            else \n\
    \                return i \nusing Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\
    \t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10)\
    \ == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpbuzbyuqb.jl:7\nin expression starting at /tmp/tmpbuzbyuqb.jl:7\n"
  stdout: ''
  timestamp: 1659977830
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    local divisor = 0\n    local i = 1\n    while i <= n do\n        local\
    \ k = i\n        while k*k <= n do\n            k = k + i\n        end\n     \
    \   if n % k == 0 then\n            divisor = k\n        end\n        i = i +\
    \ 1\n    end\n    return divisor\nend\n</cell>\n<text>\nThe function above finds\
    \ the largest number that divides n evenly, smaller than n. It uses a variable\
    \ divisor to keep track of the largest number. It starts at zero, and is updated,\
    \ at each step, by adding the largest number that divides n evenly. Finally, the\
    \ function returns the value of divisor.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\
    \t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid \"do\" syntax\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpjrfeuxhc.jl:8\nin expression starting at /tmp/tmpjrfeuxhc.jl:8\n"
  stdout: ''
  timestamp: 1659977830
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n%2 == 0 \n        then return 2\n    else\n        local i = 2\n \
    \       while i < n \n            do \n                if n%i == 0 \n        \
    \            then return i \n                i += 2\n            end \n    return\
    \ n\nend\n</cell>\n<code language=julia-1.0>\n@assert largest_divisor(15) == 5\n\
    </cell>\n<code language=julia-1.0>\n@code_native(largest_divisor(15))\n</cell>\n\
    <text>\nExercise 3\nWrite a function that tests whether a given number is even.\n\
    using Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3)\
    \ == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100)\
    \ == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpcdxjnlhw.jl:7\nin expression starting at /tmp/tmpcdxjnlhw.jl:7\n"
  stdout: ''
  timestamp: 1659977830
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \nif n==1\n    1\nelse\n    largest_divisor(n-1)\n    if mod(n,largest_divisor(n))==0\n\
    \        largest_divisor(n+1)\n    end\nend\nend\n</cell>\n<code language=julia-1.0>\n\
    @time largest_divisor(15)\n</cell>\n<code language=julia-1.0>\nusing Test\n\n\
    @testset begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3) == 1)\n\t\
    @test(candidate(7) == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100)\
    \ == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdua7h12d.jl:15\nin expression starting at\
    \ /tmp/tmpdua7h12d.jl:15\n"
  stdout: ''
  timestamp: 1659977830
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==2 \n        return n \n    else \n        result := largest_divisor(n\
    \ div 2) \n        if n mod result == 0 \n            return result \n       \
    \ else \n            result := result * n \n            return result \nend \n\
    </cell>\n<code language=julia-0.6>\nlargest_divisor(15)\n</cell>\n<code language=julia-0.6>\n\
    # Problem 2\nusing Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\t\
    @test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10) ==\
    \ 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpk9d04ek7.jl:9\nin expression starting at /tmp/tmpk9d04ek7.jl:9\n"
  stdout: ''
  timestamp: 1659977830
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    ans, n = 1, n\n    while n > 0\n        if n rem 2 == 0 && n rem 1 !=\
    \ 0\n            ans = ans + 1\n        n /= 2\n    return ans\n</code>\n<|/ a\
    \ |>\n<| c |>\nThis isn't a competition, it's an open university course. :)\n\
    <|/ c |>\n<| c |>\nSorry, didn't see that. Edited my post with your comment\n\
    <|/ c |>\n<| c |>\nWow, thanks! I've been working on this for awhile now and I\
    \ understand how it's supposed to be structured and working now. Thank you so\
    \ much!\n<|/ c |>\n<| c |>\nI didn't realize that `rem` was implemented that way.\
    \ Thanks for the correction\n<|/ c |>\n<| c |>\nThis should be an accepted answer!\
    \ Even though it didn't quite answer the question I felt it would still be useful\
    \ for others who come across this in their search\n<|/ c |>\n<| a tags=recursion,haskell\
    \ dscore=4 |>\nThe answer is simple: don't use recursion at all.\n<code>\nlargest_divisor\
    \ = maximum (divisors n)\n  where\n    divisors n\n      | n == 1 = [1]\n    \
    \  | even n = n:divisors (n `div` 2)\n      | otherwise = d : d : d : d : divisors\
    \ (n `div` d)\n        where\n          d = n `div` (floor $ sqrt n)\n</code>\n\
    If you really want to learn about recursion I recommend reading \"Learn You a\
    \ Haskell for Great Good!\"\n<|/ a |>\n<| c |>\nThis is quite a bit more efficient\
    \ than mine, but it is still not tail-recursive. Also, it doesn't even try to\
    \ implement `max` efficiently.\n<|/ c |>\n<| c |>\nThanks for the tip! I definitely\
    \ need to read that book more carefully.\n<|/ c |>\n<| c |>\n: That is a different\
    \ question. It doesn't even try to implement `max` efficiently because it doesn't\
    \ use an efficient implementation that can take advantage of lazy evaluation.\n\
    <|/ c |>\n<| c |>\n: You are correct. However that doesn't mean that this answer\
    \ is wrong. While it's correct for Haskell, it's not the right approach for a\
    \ problem that doesn't even need to use tail recursion. Also, since this is an\
    \ open course and I'm answering the question, I don't think it's \"too much to\
    \ ask\". I would say it's too much \nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\
    \t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"2\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpragpf3sj.jl:8\nin expression starting at /tmp/tmpragpf3sj.jl:8\n"
  stdout: ''
  timestamp: 1659977830
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n<2\n        return n\n    if n%2==0\n        return 2*largest_divisor(n-1)\n\
    \    return 2*largest_divisor(n-1)+1\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\
    \t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp984lo4sz.jl:1\nin expression starting at /tmp/tmp984lo4sz.jl:1\n"
  stdout: ''
  timestamp: 1659977830
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n <= 1 \n        return n\n    \n    if n % 2 == 0\n        return\
    \ largest_divisor(n/2)\n    \n    largest_divisor(n/2) + 1\nend\n</cell>\n<code\
    \ language=julia-1.5>\n# Pseudo code\n\"\"\" For a given number n, find the largest\
    \ number that divides n evenly, smaller than n\n    >>> largest_divisor(15)\n\
    \    5\n\"\"\"\nusing Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\
    \t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10)\
    \ == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3knjq5yy.jl:14\nin expression starting at\
    \ /tmp/tmp3knjq5yy.jl:14\n"
  stdout: ''
  timestamp: 1659977830
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n  if n==0\n    throw NoDivideBy0Error\n  elseif n%2==0\n    return n/2\n \
    \ else\n    return largest_divisor(n/2)\nend\nusing Test\n\n@testset begin\n\n\
    candidate = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7)\
    \ == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"NoDivideBy0Error\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpuzcwpksd.jl:7\nin expression starting at /tmp/tmpuzcwpksd.jl:7\n"
  stdout: ''
  timestamp: 1659977830
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    local biggest = 1\n    local current = 1\n    while current <= n do\n\
    \        local current = current * current\n        if current > biggest then\n\
    \            biggest = current\n        end\n    end\n    return biggest\nend\n\
    </code>\n<|/ a tags=julia,loops |>\n<| a |>\nHere's a solution that uses no loops:\n\
    <code>\nusing Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3)\
    \ == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100)\
    \ == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid \"do\" syntax\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmph3ehwjjk.jl:8\nin expression starting at /tmp/tmph3ehwjjk.jl:8\n"
  stdout: ''
  timestamp: 1659977830
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    answer = -1\n    \n    # write your code for problem 15 in here\n    for\
    \ d in divisors(n) do\n        if d > 0 and n % d == 0 then\n            if answer\
    \ < d then\n                answer = d\n            end\n        end\n    end\n\
    using Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3)\
    \ == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100)\
    \ == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"n\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpfodhmhub.jl:10\nin expression starting at /tmp/tmpfodhmhub.jl:10\n"
  stdout: ''
  timestamp: 1659977830
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n % 2 == 0:\n        return n\n    else: \n        largest = n\n  \
    \      for divisor in divisors(n): \n            if divisor % 2 == 0:\n      \
    \          largest = divisor\n    return largest\nusing Test\n\n@testset begin\n\
    \ncandidate = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7)\
    \ == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpc7uyf9tv.jl:7\nin expression starting at /tmp/tmpc7uyf9tv.jl:7\n"
  stdout: ''
  timestamp: 1659977830
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n < 2 then return n \n    if n % 2 == 0 then largest_divisor(n / 2)\
    \ \n    else largest_divisor(3 * n + 1) / 3 \nend\n</cell>\n<code language=julia-0.5>\n\
    largest_divisor(10)\n</cell>\n<text>\nWrite a function that finds the nth number\
    \ in the Fibonacci sequence. Fibonacci sequence is defined by the recurrence $Fn\
    \ = F{n-1} + F_{n-2}$ with $F_0 = 0; F_1 = 1$.\nusing Test\n\n@testset begin\n\
    \ncandidate = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7)\
    \ == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpqltqoecz.jl:6\nin expression starting at /tmp/tmpqltqoecz.jl:6\n"
  stdout: ''
  timestamp: 1659977830
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n == 0 \n    then return 0\n    else if n % 2 == 0\n    then return\
    \ n \n    else return largest_divisor(n / 2)\nend \nusing Test\n\n@testset begin\n\
    \ncandidate = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7)\
    \ == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpk95lobvz.jl:7\nin expression starting at /tmp/tmpk95lobvz.jl:7\n"
  stdout: ''
  timestamp: 1659977830
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    \"\"\"\n    \n    \"\"\"\n    return \n</cell>\n<cell>\n@test largest_divisor(1)\
    \ == 1 \n@test largest_divisor(2) == 1 \n@test largest_divisor(3) == 1 \n@test\
    \ largest_divisor(4) == 2 \n@test largest_divisor(15) == 5 \n</cell>\n<text>\n\
    Exercise: Find the first triangle number to have three divisors\nThe first triangle\
    \ number is the number whose sum is equal to the number itself. \nThe sum of the\
    \ first ten triangle numbers is 28. \nBy starting with 1 and 2, the first triangle\
    \ number to have three divisors is 19. \nBy continuing the trenren numbers, find\
    \ the first triangle number to have three divisors. \nBy starting with 1 and 2,\
    \ the first triangle number to have three divisors is 26.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7)\
    \ == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5g_pvo8y.jl:10\nin expression starting at\
    \ /tmp/tmp5g_pvo8y.jl:10\n"
  stdout: ''
  timestamp: 1659977830
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    largest <- 0\n    for  i \u2208 0 .. floor(sqrt(n)-1) do\n        if((n%i)\
    \ == 0)\n            if((n%(2*i)) == 0)\n                if((n%(3*i)) == 0)\n\
    \                    if((n%(4*i)) == 0)\n                        if((n%(5*i))\
    \ == 0)\n                            if((n%(6*i)) == 0)\n                    \
    \            if((n%(7*i)) == 0)\n                                    if((n%(8*i))\
    \ == 0)\n                                        if((n%(9*i)) == 0)\n        \
    \                                    if((n%(10*i)) == 0)\n                   \
    \                             if((n%(11*i)) == 0)\n                          \
    \                          if((n%(12*i)) == 0)\n                             \
    \                           if((n%(13*i)) == 0)\n                            \
    \                                if((n%(14*i)) == 0)\n                       \
    \                                         if((n%(15*i)) == 0)\n              \
    \                                                      if((n%(16*i)) == 0)\n \
    \                                                                       if((n%(17*i))\
    \ == 0)\n                                                                    \
    \        if((n%(18*i)) == 0)\n                                               \
    \                                 if((n%(19*i)) == 0)\n                      \
    \                                                              if((n%(20*i)) ==\
    \ 0)\n                                                                       \
    \                 if((n%(21*i)) == 0)\n                                      \
    \                                                      if((n%(22*i)) == 0)\n \
    \                                                                            \
    \                   if((n%(23*i)) == 0)\n                                    \
    \                                                                if((n%(24*i))\
    \ == 0)\n                                                                    \
    \                                    if((n%(25*i)) == 0)\n                   \
    \                                                                            \
    \             if((n%(26*i)) == 0)\n                                          \
    \                                                                      if((n%(27*i))\
    \ == 0)\n                                                                    \
    \                                                if((n%(28*i)) == 0)\n       \
    \                                                                            \
    \                                     if((n%(29*i)) == 0)\n                  \
    \                                                                            \
    \                              if((n%(30*i)) == 0)\n                         \
    \                                                                            \
    \                           if((n%(31*i)) == 0)\n                            \
    \                                                                            \
    \                            if((n%(32*i)) == 0)\n                           \
    \                                                                            \
    \                                 if((n%(33*i)) == 0)\n                      \
    \                                                                            \
    \                                          if((n%(34*i)) == 0)\n             \
    \                                                                            \
    \                                                       if((n%(35*i)) == 0)\n\
    \                                                                            \
    \                                                                        if((n%(36*i))\
    \ == 0)\n                                                                    \
    \                                                                            \
    \        if((n%(37*i)) == 0)\n                                               \
    \                                                                            \
    \                                 if((n%(38*i)) == 0)\n                      \
    \                                                                            \
    \                                                              if((n%(39*i)) ==\
    \ 0)\n                                                                       \
    \                                                                            \
    \                 if((n%(40*i)) == 0)\n                                      \
    \                                                                            \
    \                                                      if((n%(41*i)) == 0)\n \
    \                                                                            \
    \                                                                            \
    \                   if((n%(42*i)) == 0)\n                                    \
    \                            \nusing Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\
    \t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10)\
    \ == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpu27_j5ns.jl:1\nin expression starting at /tmp/tmpu27_j5ns.jl:1\n"
  stdout: ''
  timestamp: 1659977830
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n<1 \n        return -1\n    else \n        if isEven(n) \n       \
    \     largestDivisor = -1\n            largestDivisor = 2\n            for i in\
    \ 1 : (n/2) \n                if n%i==0 \n                    largestDivisor =\
    \ i\n                    break\n            return largestDivisor\n        else\n\
    \            largestDivisor = -1\n            largestDivisor = 2\n           \
    \ for i in 1 : ((n+1)/2) \n                if n%i==0 \n                    largestDivisor\
    \ = i\n                    break\n            return largestDivisor\nend\n</cell>\n\
    <code language=julia-1.5>\nlargest_divisor(25)\n</cell>\n<text>\nProblem 2\nDefine\
    \ a function called sumDivisors that takes a number n and a function func, and\
    \ returns a vector containing all of the integers from 1 to n such that func divides\
    \ them.\nusing Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3)\
    \ == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100)\
    \ == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp002337fx.jl:26\nin expression starting at\
    \ /tmp/tmp002337fx.jl:26\n"
  stdout: ''
  timestamp: 1659977830
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n == 0 \n        0\n    elseif n == 1 \n        1\n    elseif n % 2\
    \ == 0 \n        largest_divisor(n / 2)\n    else\n        largest_divisor(3 *\
    \ n + 1) + 1\n    end\nend\n</cell>\n<code language=julia-0.5>\nusing Test\n\n\
    @testset begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3) == 1)\n\t\
    @test(candidate(7) == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100)\
    \ == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxn_52fcy.jl:16\nin expression starting at\
    \ /tmp/tmpxn_52fcy.jl:16\n"
  stdout: ''
  timestamp: 1659977830
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0 || n==1 then return n\n    if n%2==0 then largest_divisor(n/2)\n\
    \    largest_divisor(n/2)\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\
    \t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10)\
    \ == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmppryujpv1.jl:6\nin expression starting at /tmp/tmppryujpv1.jl:6\n"
  stdout: ''
  timestamp: 1659977830
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    local i::Int64 = 1\n    local max_divisor::Int64 = 1\n    while i <= n\
    \ do\n        if i%2==0 then \n            max_divisor = i\n        else\n   \
    \         if max_divisor*2==i then return i \n            else max_divisor = max_divisor*2\n\
    \        end\n        i+=1\n    end\n    return max_divisor\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3) == 1)\n\
    \t@test(candidate(7) == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100)\
    \ == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid \"do\" syntax\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpt19xmmt3.jl:8\nin expression starting at /tmp/tmpt19xmmt3.jl:8\n"
  stdout: ''
  timestamp: 1659977831
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n % 2 == 0: return n\n    else: return (n / 2)\nend \nusing Test\n\n\
    @testset begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3) == 1)\n\t\
    @test(candidate(7) == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100)\
    \ == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: whitespace not allowed after \":\" used for quoting\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmpwj16o7eg.jl:7\nin expression starting\
    \ at /tmp/tmpwj16o7eg.jl:7\n"
  stdout: ''
  timestamp: 1659977831
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    largest_div = 2\n    \n    for idiv = 2 to n\n        divisor = n%idiv\n\
    \        if divisor == 0\n            return idiv\n        \n        if divisor\
    \ > largest_div\n            largest_div = divisor\n    end\n    return largest_div\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3)\
    \ == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100)\
    \ == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmpog14vm3o.jl:8 expected \"\
    end\", got \"n\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpog14vm3o.jl:8\n\
    in expression starting at /tmp/tmpog14vm3o.jl:8\n"
  stdout: ''
  timestamp: 1659977831
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n % 2 == 0 \n        then \n            largest_divisor(n / 2)\n  \
    \      else\n            largest_divisor(3 * n + 1) \n    end\nend\n</cell>\n\
    <text>\nLet's try it out with n = 16:\nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\
    \t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnbk26xbf.jl:13\nin expression starting at\
    \ /tmp/tmpnbk26xbf.jl:13\n"
  stdout: ''
  timestamp: 1659977832
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n >= 100000 then return n\n    n // 2 \n    if n % 2 == 0 then return\
    \ n\n    largest_divisor(n/2)\n</code>\n<|/ a |>\n<| c |>\nHow would you do this\
    \ for a large number (greater than 10,000 though)?\n<|/ c |>\n<| a dscore=0 |>\n\
    <code>\nusing Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3)\
    \ == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100)\
    \ == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp1t5mktma.jl:6\nin expression starting at /tmp/tmp1t5mktma.jl:6\n"
  stdout: ''
  timestamp: 1659977832
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n<2\n        return n\n    else if n==2\n        return n\n    else\n\
    \        largest_divisor(n/2)\n        return if n % 2==0\n        largest_divisor(n/2+1\
    \ )\n        return largest_divisor(n/2 + 1)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7)\
    \ == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpy_puavsh.jl:8\nin expression starting at /tmp/tmpy_puavsh.jl:8\n"
  stdout: ''
  timestamp: 1659977832
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n < 2 || n % 2 == 0\n        then return n\n    elseif n < 3\n    \
    \    then return 2\n    else\n        if n % 3 == 2\n            then return 3\n\
    \        elseif n % 3 == 0\n            then return n\n        else\n        \
    \    if n % 4 == 0\n                then return 4\n            else largest_divisor(n\
    \ / 4)\n    end\nend\n</cell>\n<text>\nTo find all divisors of n that divide evenly,\
    \ we can use the divisors(n) function. This function returns an array of all divisors\
    \ of n that divide evenly, starting with the smallest number first.\nusing Test\n\
    \n@testset begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3) == 1)\n\
    \t@test(candidate(7) == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100)\
    \ == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpt23lthop.jl:7\nin expression starting at /tmp/tmpt23lthop.jl:7\n"
  stdout: ''
  timestamp: 1659977832
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    return div(n,2)\nend\n</cell>\n<code language=julia-1.0>\nusing Test\n\
    \n@testset begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3) == 1)\n\
    \t@test(candidate(7) == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100)\
    \ == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpf4325dmg.jl:8\nin expression starting at /tmp/tmpf4325dmg.jl:8\n"
  stdout: ''
  timestamp: 1659977832
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n        if n == 0 || n % 2 == 0 \n            then return 1\n        else\
    \ \n            n /= 2 \n            while n % 2 == 0 \n                n /= 2\
    \ \n            return n \n    end\n</cell>\n<code language=julia-1.6>\nlargest_divisor(7)\n\
    </cell>\n<code language=julia-1.6>\nlargest_divisor(100)\n</cell>\n<code language=julia-1.6>\n\
    using Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3)\
    \ == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100)\
    \ == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpflv4o0b0.jl:7\nin expression starting at /tmp/tmpflv4o0b0.jl:7\n"
  stdout: ''
  timestamp: 1659977832
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    largest_divisor = 1\n    i = 2\n    while i*i < n\n        if n % i ==\
    \ 0\n            largest_divisor = i\n        i += 1\n    return largest_divisor\n\
    using Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3)\
    \ == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100)\
    \ == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxnumwe0z.jl:1\nin expression starting at /tmp/tmpxnumwe0z.jl:1\n"
  stdout: ''
  timestamp: 1659977832
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n == 1 \n        return n\n    else if n % 2 == 0 \n        return\
    \ largest_divisor(n / 2) \n    else \n        return largest_divisor(n / 2) +\
    \ 1\n    \nusing Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3)\
    \ == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100)\
    \ == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpp0g1hgi2.jl:8\nin expression starting at /tmp/tmpp0g1hgi2.jl:8\n"
  stdout: ''
  timestamp: 1659977832
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    \n    if n % 2 != 0 \n        return n \n    else \n        largest_divisor(n\
    \ / 2) \n        largest_divisor(n / 2+1)\nend\n</cell>\n<code language=julia-1.5>\n\
    largest_divisor(19)\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7)\
    \ == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0f2mc7uv.jl:13\nin expression starting at\
    \ /tmp/tmp0f2mc7uv.jl:13\n"
  stdout: ''
  timestamp: 1659977832
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    \"\"\"\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nusing Test\n\n\
    @testset begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3) == 1)\n\t\
    @test(candidate(7) == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100)\
    \ == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxmfeb_db.jl:5\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxmfeb_db.jl:1\n\
    in expression starting at /tmp/tmpxmfeb_db.jl:1\n"
  stdout: ''
  timestamp: 1659977832
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n%2 == 0 \n    then return n \n    else return n / largest_divisor(n/2)\n\
    end\n</cell>\n<text>\nTask 5.2\nImplement function div_rem(m, n) which returns\
    \ the quotient m and the remainder n when m is divided by n.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7)\
    \ == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp7ym987ze.jl:7\nin expression starting at /tmp/tmp7ym987ze.jl:7\n"
  stdout: ''
  timestamp: 1659977832
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n % 2 == 0: return n \n    let smaller_divisor = largest_divisor(smaller_divisor(n/2))\n\
    \    if smaller_divisor == n: return n\n    return smaller_divisor\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3)\
    \ == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100)\
    \ == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"let\" at /tmp/tmp9n6ra0gq.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp9n6ra0gq.jl:1\n\
    in expression starting at /tmp/tmp9n6ra0gq.jl:1\n"
  stdout: ''
  timestamp: 1659977832
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    \n    if n == 0\n        \n        return 0\n    \n    if n % 2 == 0\n\
    \        \n        return largest_divisor(n / 2)\n    \n    smaller_one = largest_divisor(n\
    \ / 2)\n    \n    if n % smaller_one == 0\n        \n        return smaller_one\n\
    \    \n    return smaller_one + largest_divisor(n / smaller_one)\nusing Test\n\
    \n@testset begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3) == 1)\n\
    \t@test(candidate(7) == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100)\
    \ == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpj7qwgyxx.jl:1\nin expression starting at /tmp/tmpj7qwgyxx.jl:1\n"
  stdout: ''
  timestamp: 1659977832
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0 \n        return n\n    elif (n%2==0) \n        return largest_divisor(n/2)\n\
    \    else \n        return largest_divisor(n/2)+1 \nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7)\
    \ == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: space before \"(\" not allowed in \"elif (\"\
    \ at /tmp/tmpvgr9dib6.jl:8\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpvgr9dib6.jl:8\n\
    in expression starting at /tmp/tmpvgr9dib6.jl:8\n"
  stdout: ''
  timestamp: 1659977832
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    \"\"\"\n    >>> largest_divisor(15)\n    5\n    \"\"\"\n</cell>\n<code\
    \ language=julia-1.3>\nusing Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\
    \t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10)\
    \ == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpop1e3zgh.jl:10\nin expression starting at\
    \ /tmp/tmpop1e3zgh.jl:10\n"
  stdout: ''
  timestamp: 1659977832
