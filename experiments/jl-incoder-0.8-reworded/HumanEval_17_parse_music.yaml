name: HumanEval_17_parse_music
language: jl
prompt: "\"\"\" Input to this function is a string representing musical notes in a\
  \ special ASCII format.\n    Your task is to parse this string and return vector\
  \ of integers corresponding to how many beats does each\n    not last.\n\n    Here\
  \ is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts\
  \ two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"o o|\
  \ .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\
  \nfunction parse_music(music_string::String)::Vector{Int64} \n"
tests: "using Test\n\n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\
  \") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\"\
  .| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2,\
  \ 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1,\
  \ 2, 1, 4, 2, 4, 2])\nend\n"
completions: ["    #TODO: Implement me!\nend\n</cell>\n<code language=julia-1.0>\n\
    ### Tests", "        vec = parse(music_string)\n        if vec(vec == 0) \n  \
    \          error(\"parse_music called on invalid music string\")\n        end\n\
    \        vec\n    end\n</code>\n<|/ a tags=julia |>\n<| c |>\nNice answer! Could\
    \ you elaborate on what `parse(music_string)` does?\n<|/ c |>\n<| c |>\n, `parse(music_string)`\
    \ converts a musical string into a vector of integers (one for each note) which\
    \ represent the number of beats every note lasts.\n<|/ c |>\n<| c |>\n`parse(music_string)`\
    \ does not work (throws error on invalid input), but `parse(music_string) == parse(music_string)`\
    \ returns `true` (i.e. same value). I think you meant to use `parse(music_string)`\
    \ as an argument to `parse(music_string)`?\n<|/ c |>\n<| c |>\n, you are right,\
    \ `parse(music_string)` should be called as an argument to another function. I\
    \ edited my answer to correct my mistake.\n<|/ c |>\n<| c |>\n, thank you for\
    \ the correction. It actually throws an error if the input is invalid.\n<|/ c\
    \ |>\n<| a |>\nThis is an alternative to Piotr's answer:\n<code>", "end\n</cell>\n\
    <text>\nPart II: Write a program to play a song\nThe second part of your program\
    \ will play a song. Your program should take a file name as an argument, open\n\
    that file, and read each line of it into memory as a string.\nYour program should\
    \ then take that string, apply the parse_music function to it, and print the results.",
  "    music_string_list = split(music_string)\n    \n    song = music_string_list[:end-1]\n\
    \    music_last_beat = music_string_list[end]", "    # Initialize vector\n   \
    \ vector = zeros(length(music_string))\n    # Iterate through string and parse\
    \ each note\n    for n in music_string\n        vector[end] = parse_note(n)\n\
    \    end\n    return vector\nend", "    music_notes = music_string.split(\" \"\
    )\n    \n    music_notes = [note for note in music_notes if (note != \"o\" and\
    \ note != \".\")]", "    \"\"\"\n    You do not need to understand the algorithm\
    \ of this function to be able to use it. However it is very useful\n    and if\
    \ you understand it you can optimize its runtime by changing some of its parameters.",
  "    lasts = Vector{Int64}()\n    lasts = lasts + [0 for i in 1:4]\n    for note\
    \ in music_string\n        lasts = lasts + [parse_note(note)+1]\n    end\n   \
    \ lasts\nend\n</cell>\n<code language=julia-1.0>", "    ...\nend\n</cell>\n<text>\n\
    The function should return vector of integers corresponding to how many beats\
    \ does each not last.", "    # Your code goes here\nend\n</cell>\n<code language=julia-1.0>\n\
    music_string = \"o o| .| o| o| .| .| .| .| .| o o\"\nparse(Int64, music_string)\n\
    </cell>\n<text>\nNow that we have our music parsing function let's try some example\
    \ music strings", '"""', '    return parse_music_aux(music_string, 0)', "    music_string\
    \ = music_string.lower()\n    music_string = music_string.strip\n    music_string\
    \ = music_string.strip(\" ,.:-=!?\").strip\n    music_string = music_string.strip(\"\
    \ .:-=!?\").strip\n    music_string = music_string.strip(\" ,.:-=!?\").strip\n\
    \    music_string = music_string.strip(\" .:-=!?\").strip\n    music_string =\
    \ music_string.strip(\" .:-=!?\").strip\n    music_string = music_string.strip(\"\
    \ .:-=!?\").strip\n    music_string = music_string.strip(\" .:-=!?\").strip\n\
    \    music_string = music_string.strip(\" .:-=!?\").strip\n    music_string =\
    \ music_string.strip(\" .:-=!?\").strip\n    music_string = music_string.strip(\"\
    \ .:-=!?\").strip\n    music_string = music_string.strip(\" .:-=!?\").strip\n\
    \    music_string = music_string.strip(\" .:-=!?\").strip\n    music_string =\
    \ music_string.strip(\" .:-=!?\").strip\n    music_string = music_string.strip(\"\
    \ .:-=!?\").strip\n    music_string = music_string.strip(\" .:-=!?\").strip\n\
    \    music_string = music_string.strip(\" .:-=!?\").strip\n    music_string =\
    \ music_string.strip(\" .:-=!?\").strip\n    music_string = music_string.strip(\"\
    \ .:-=!?\").strip\n    music_string = music_string.strip(\" .:-=!?\").strip\n\
    \    music_string = music_string.strip(\" .:-=!?\").strip\n    music_string =\
    \ music_string.strip(\" .:-=!?\").strip\n    music_string = music_string.strip(\"\
    \ .:-=!?\").strip\n    music_string = music_string.strip(\" .:-=!?\").strip\n\
    \    music_string = music_string.strip(\" .:-=!?\").strip\n    music_string =\
    \ music_string.strip(\" .:-=!?\").strip\n    music_string = music_string.strip(\"\
    \ .:-=!?\").strip\n    music_string = music_string.strip(\" .:-=!?\").strip\n\
    \    music_string = music_", "# write your code here\n    \nend\n</cell>\n<text>\n\
    Tasks\nImplement function count_beats(music_string::String)\nTest function parse_music(music_string::String)\
    \ and count_beats(music_string::String)", "\t\n\tmusic_str=\"\"\n\tfor element\
    \ in music_string\n\t\tmusic_str+=element\n\tmusic_string=music_str\n\t\n\tmusic_str=music_str.replace(\"\
    \ \", \"\")", '  ', "    # Your code goes here\n    return Int64[]\nend", "  \
    \  music_string = \"o|o|.|o|o|.|.|.|o|o\"\n    beats = music_string.split(\"|\"\
    )\n    beats_vector = []\n    for beat in beats\n        beats_vector = beats_vector\
    \ + (beat == \"o\" ? 4 : 2)\n    end\n    return beats_vector\nend", "    music_notes\
    \ = [note_to_int(c) for c in music_string]\n    vector = Vector{Int64}(undef,\
    \ 0)\n    position = 0\n    while position < length(music_notes)\n        if music_notes[position]\
    \ == NOTE_OFF\n            position = position + (NOTE_ON - NOTE_OFF)\n      \
    \  else\n            vector[position] = 1 + maximum(vector[position+1:position+NOTE_OFF])\n\
    \        end\n        position = position + NOTE_ON\n    end\n    vector\nend\n\
    </cell>\n<code language=julia-1.5>\n@time parse_music(\"o o| .| o| o| .| .| .|\
    \ .| .| o o\")\n</cell>\n<text>\nTask: Write a function get_music which receives\
    \ a vector of notes (represented as integers) and returns\na vector of corresponding\
    \ music strings (represented as strings) with the same length.", "    # Write\
    \ your code here\n    return music_string[1]==\".\"? [4,2]:[2,1,1]\nend\n</cell>\n\
    <code language=julia-1.5>\n\"\"\"\n    parse_music_file(music_file::AbstractString)",
  end, "    music_string = \"o o| .| o| o| .| .| .| .| o o\"\n    music_list = split_in(music_string,\
    \ \" \")\n    \n    # Your code here\nend\n</cell>\n<text>\nTask 2 - Implement\
    \ `create_music_beat_vectors`.\nInputs:", "    music_note_str = music_string.split(\"\
    \ \")\n    music_notes = [parse_music_note(n) for n in music_note_str]\n    music_note_counts\
    \ = counts(music_notes)\n    return music_note_counts\nend", "    #YOUR CODE HERE\n\
    \    return music_string.split(' ')\nend", "    music_notes = music_string.split(\"\
    \ \") #split the string into an array and remove the empty values\n    beats_array::Vector{Int64}\
    \ = Vector{Int64}() #create an empty vector to store the number of beats for each\
    \ note \n    for note in music_notes #iterate over the array \n        if note\
    \ == 'o' or note = 'o|' or note = '.|' then #if the note is 'o', 'o|' or '.|'\
    \ then we increment the beats count for that note\n            beats_array +=\
    \ 1 #append 1 to the beats array\n        else #else if the note is anything else\
    \ we simply append the beats count to beats_array\n            beats_array +=\
    \ 4 #append 4 to the beats array\n    return beats_array\n</code>\n<|/ a |>\n\
    <| a tags=arrays,python |>\nA functional approach.\n<code>\ndef parse_music(music_string):\n\
    \    result = []\n    for note in music_string.split(' '):\n        if note in\
    \ ['o', 'o|', '|', '.|']:\n            result.extend([1,4,1])\n        else:\n\
    \            result.extend([1,4,4])\n    return result", "\"\"\"\n    Parse a\
    \ musical string into vector of integers representing how many beats does each\
    \ not last.", "    music_array = music_string.split(\" \")\n    note_lengths =\
    \ vec(music_array.length)\n    note_lengths[:] .= note_lengths .== 4 || note_lengths\
    \ .== 2\n    note_lengths[:] .= note_lengths .== 1 || note_lengths .== 1\n   \
    \ lengths = note_lengths .== 1\n    music_array = music_array[lengths]\n    \n\
    \    music_array = music_array[music_array.length/2:end]\n    music_array = music_array\
    \ .- '0'\n    music_array = music_array[music_array.length/2:end]", "    \n  \
    \  notes_array = parse(music_string)\n    note_counter = 0\n    beats_counter\
    \ = 0\n    note_beats_counter = Vector{Int64}(length(notes_array))", "    \"\"\
    \"\n    \n    Your code should look like", "    parsed_music = music_string.split('\
    \ ')\n    parsed_music = filter(x -> x != '.', parsed_music)\n    parsed_music\
    \ = filter(x -> x != '|', parsed_music)\n    parsed_music = filter(x -> x != 'o',\
    \ parsed_music)\n    parsed_music = filter(x -> x != 'o|', parsed_music)\n   \
    \ parsed_music = filter(x -> x != 'o|', parsed_music)\n    parsed_music = map(parseInt64,\
    \ parsed_music)\n    return parsed_music\nend\n</code>\n<|/ a tags=functional-programming,julia,parsing\
    \ dscore=1 |>\n<| a tags=functional-programming,julia,parsing |>\nYou can write\
    \ it in a functional way:\n<code>\njulia> s = \"o o| .| o| o| .| .| .| .| o o\"\
    \n\"o o| .| o| o| .| .| .| .| o o\"", "    return parse_music_helper(music_string)\n\
    end\n</cell>\n<code language=julia-1.5>\n# test your code\n@code_warntype parse_music(\"\
    \"\"o o| .| o| o| .| .| .| .| .| o o\"\"\")\n</cell>\n<text>\nExercise\nYou have\
    \ a string representing musical notes, and you need to return vector of integers\
    \ representing how many beats does each note last.\nThe function parse_music should\
    \ work correctly on any input strings provided to it.", "    music_string = music_string[1:end]\n\
    \    music_notes = [note for note in music_string if note in 'o.|']\n    music_notes\
    \ = music_notes[1:end]\n    music_notes_beats = Vector{Int64}(undef, 0)", "  \
    \  music::Vector{Int64} = Array{Int64}(music_string.split(\" \").map(to_int))\n\
    \    beat::Vector{Int64} = Vector{Int64}()\n    music[end-4, 1] = 4 # last 4 notes\
    \ start on the 4th beat\n    for i in music:\n        push!(beat, beats[abs(i\
    \ - 1)])\n    return beat\nend\n</code>\n<|/ a |>\n<| c |>\nI added some example\
    \ code of how you can solve your problem using `parse_music`\n<|/ c |>\n<| a dscore=2\
    \ tags=julia |>\nThe best way to find out which notes are the last in music is\
    \ to first find the last note in the music, which you can do by finding the last\
    \ element in a vector. You can then go from that note to the next note by subtracting\
    \ the current note from it, and finding the index of the first element that doesn't\
    \ equal zero.\nHere's an example of finding the last note in a music by subtracting\
    \ each note from it until the first time you get a non-zero number, then finding\
    \ the note before that by subtracting the index of the first non-zero element\
    \ of the vector from it:\n<code>\njulia> function last(notes)\n          last\
    \ = 0\n          for i in notes\n            if last == 0 \n               last\
    \ = i\n            else\n               last -= i\n            end\n         \
    \ end\n          return last\n       end\nlast (generic function with 1 method)",
  "    music_notes = music_string.split(\" \")\n    music_notes = filter(x -> x !=\
    \ \"\", music_notes)\n    music_notes = filter(x -> x != \"|\", music_notes)\n\
    \    music_notes = filter(x -> x != \"o\", music_notes)\n    music_notes = filter(x\
    \ -> x != \"|\", music_notes)\n    music_notes = filter(x -> x != \"o|\", music_notes)\n\
    \    music_notes = filter(x -> x != \"|\", music_notes)\n    music_notes = filter(x\
    \ -> x != \"o.\", music_notes)\n    music_notes = filter(x -> x != \"|.\", music_notes)\n\
    \    music_notes = filter(x -> x != \"o.|\", music_notes)\n    music_notes = filter(x\
    \ -> x != \"o.|.\", music_notes)\n    music_notes = filter(x -> x != \"o|.\",\
    \ music_notes)\n    music_notes = filter(x -> x != \"o|.\", music_notes)\n   \
    \ music_notes = filter(x -> x != \"o.|.\", music_notes)\n    music_notes = filter(x\
    \ -> x != \"|.\", music_notes)\n    music_notes = filter(x -> x != \"|.\", music_notes)\n\
    \    music_notes = filter(x -> x != \"o.|.\", music_notes)\n    music_notes =\
    \ filter(x -> x != \"|.\", music_notes)\n    music_notes = filter(x -> x != \"\
    o.|.\", music_notes)\n    music_notes = filter(x -> x != \"|.\", music_notes)\n\
    \    music_notes = filter(x -> x != \"o.\", music_notes)\n    music_notes = filter(x\
    \ -> x != \"|.\", music_notes)\n    music_notes = filter(x -> x != \"|.\", music_notes)\n\
    \    music_notes = filter(x -> x != \"o.|.\", music_notes)\n    music_notes =\
    \ filter(x -> x != \"o.|.\", music_notes)\n    music_notes = filter(x -> x !=\
    \ \"o|.\", music_notes)\n    music_notes = filter(x -> x != \"o|.\", music_notes)\n\
    \    music_notes = filter(x -> x != \"o.|.\", music_notes)\n    music_notes =\
    \ filter(x -> x != \"o.|.", "    music_tokens = tokenize(music_string)\n    note_counts\
    \ = Dict{String, Int64}()\n    \n    for token in music_tokens\n        if token\
    \ == \"o\"\n            note_counts[\"o\"] = 4\n        else if token == \"o|\"\
    \n            note_counts[\"o|\"] = 2\n        else if token == \".|\"\n     \
    \       note_counts[\".|\"] = 1\n        else\n            error(\"Unrecognized\
    \ symbol in music string: \\\"#{token}\\\"\") \n        end\n    end\n    \n \
    \   return collect(values(note_counts))\nend\n</cell>\n<cell>", "    music_list\
    \ = split(music_string)\n    note_vector = zeros(Int, length(music_list));\n \
    \   for (i, s) in enumerate((music_list))\n        if s != \".\"\n           \
    \ if s[1] == \"|\"\n                note_vector[i] = note_vector[i] + 4\n    \
    \        elif s[1] == \"o\"\n                note_vector[i] = note_vector[i] +\
    \ 1\n            else\n                note_vector[i] = note_vector[i] + 2\n \
    \       end\n    end\n    return note_vector\nend\n</cell>\n<code language=julia-1.4>\n\
    @time note_vector = parse_music(music);\n</cell>\n<text>\nTask 2: Calculate a\
    \ weighted average for note vectors\nThe first step is to calculate a weighted\
    \ average.\nIt consists of two parts:", "    music_notes_list = []\n    music_notes_list\
    \ = music_string.split(' ')\n    music_notes_list = music_notes_list[music_notes_list.len()-4:music_notes_list.len()]\n\
    \    music_notes_list = music_notes_list.map(x -> if x==\"o\" then 0 else if x==\"\
    .\" then 1 else 0)\n    \n    music_notes_list = music_notes_list.sum()\n    return\
    \ music_notes_list\nend", "    music_string = \".\" + music_string\n    return\
    \ parse_music_helper(music_string, music_string, 4, 4)\nend", "    # write your\
    \ code here\nend\n</cell>\n<code language=julia-1.3>\nparse_music(music)\n</cell>\n\
    <text>\nTask. Write a function that takes input string and returns number of notes\
    \ that are not last.\n    Here is how you do it:", "    music_string = music_string.replace(\"\
    \ \", \"\")\n    music_string = music_string.replace(\"|\", \"\")\n    music_string\
    \ = music_string.replace(\"o\", \"\")\n    music_string = music_string.replace(\"\
    -\", \"\")\n    music_string = music_string.replace(\"|\", \"\")", "    music_string\
    \ = \"o o| .| o| o| .| .| .| .| o o\" # just for testing\n    music_string = \"\
    .| .| .| .| .| .| .| .| .| .| .| .| o\" # just for testing\n    music_string =\
    \ \".| .| .| .| .| .| .| .| .| .| .| .| o\" # just for testing\n    music_string\
    \ = \".| .| .| .| .| .| .| .| .| .| .| .| .| o\" # just for testing\n    music_string\
    \ = \".| .| .| .| .| .| .| .| .| .| .| .| .| o\" # just for testing\n    music_string\
    \ = \".| .| .| .| .| .| .| .| .| .| .| .| .| o\" # just for testing\n    music_string\
    \ = \".| .| .| .| .| .| .| .| .| .| .| .| .| o\" # just for testing\n    music_string\
    \ = \".| .| .| .| .| .| .| .| .| .| .| .| .| o\" # just for testing\n    music_string\
    \ = \".| .| .| .| .| .| .| .| .| .| .| .| .| o\" # just for testing\n    music_string\
    \ = \".| .| .| .| .| .| .| .| .| .| .| .| .| o\" # just for testing\n    music_string\
    \ = \".| .| .| .| .| .| .| .| .| .| .| .| .| o\" # just for testing\n    music_string\
    \ = \".| .| .| .| .| .| .| .| .| .| .| .| .| o\" # just for testing\n    music_string\
    \ = \".| .| .| .| .| .| .| .| .| .| .| .| .| o\" # just for testing\n    music_string\
    \ = \".| .| .| .| .| .| .| .| .| .| .| .| .", "    music_string.replace(\" \"\
    , \"\")\n    music_string.replace(\"\\n\", \"\")\n    music_string.replace(\"\\\
    t\", \"\")", "    music_string = music_string.strip() # Remove leading and trailing\
    \ whitespace\n    music_list = split(music_string, \" \") # Split music string\
    \ into list of words\n    music_vector = Vector{Int64}(0) # Initialize empty vector\n\
    \    for note in music_list # Go through each word in the list\n        music_vector\
    \ = music_vector:+1 #Add one to the vector\n        music_vector = music_vector:+1\
    \ #Add one to the vector\n        music_vector = music_vector:+1 #Add one to the\
    \ vector\n        music_vector = music_vector:+1 #Add one to the vector\n    \
    \    music_vector = music_vector:+1 #Add one to the vector\n        music_vector\
    \ = music_vector:+1 #Add one to the vector\n        music_vector = music_vector:+1\
    \ #Add one to the vector\n        music_vector = music_vector:+1 #Add one to the\
    \ vector\n        music_vector = music_vector:+1 #Add one to the vector\n    \
    \    music_vector = music_vector:+1 #Add one to the vector\n        music_vector\
    \ = music_vector:+1 #Add one to the vector\n        music_vector = music_vector:+1\
    \ #Add one to the vector\n        music_vector = music_vector:+1 #Add one to the\
    \ vector\n        music_vector = music_vector:+1 #Add one to the vector\n    \
    \    music_vector = music_vector:+1 #Add one to the vector\n        music_vector\
    \ = music_vector:+1 #Add one to the vector\n        music_vector = music_vector:+1\
    \ #Add one to the vector\n        music_vector = music_vector:+1 #Add one to the\
    \ vector\n        music_vector = music_vector:+1 #Add one to the vector\n    \
    \    music_vector = music_vector:+1 #Add one to the vector\n        music_vector\
    \ = music_vector:+1 #Add one to the vector\n        music_vector = music_vector:+1\
    \ #Add one to the vector\n        music_vector = music_vector:+1 #Add one to the\
    \ vector\n        music_vector = music_vector:+1 #Add one to the vector\n    \
    \    music_vector = music_vector:+1 #Add one to the vector\n        music_vector\
    \ = music_vector:+1 #Add one to the vector\n        music_vector = musi", "  \
    \  s = music_string.split(\" \")\n    beats = 0\n    for (idx, symbol) in enumerate(s)\n\
    \        if symbol == 'o' or symbol == 'o|'\n            beats += 4\n        elseif\
    \ symbol == '.|'\n            beats += 2\n        elseif symbol == '..|' or symbol\
    \ == '..|'\n            beats += 1\n        end\n    end\n    beats = beats -\
    \ 4\n    return beats\nend\n</cell>\n<text>\nExercise 5 - Parsing music strings\n\
    Write a function parse_playlist(playlist_string::String)::Vector{Int64} that returns\
    \ a vector with number of beats for each music string in a playlist.", "</code>\n\
    And here is some tests:\n<code>\njulia> parse_music(\"o o| .| o| o| .| .| .| .|\
    \ o o\")\n4-element Vector{Int64}:\n 4\n 2\n 1\n 1\n 1\n 1\n 1\n 4\n 4", "   \
    \     music_string_split = split(music_string, \" \")\n        music_string_lasts\
    \ = split(music_string, \"|\")\n        music_string_lasts = reverse(music_string_lasts)\n\
    \        music_string_lasts = reverse(music_string_lasts)\n        music_string_lasts\
    \ = reverse(music_string_lasts)\n        music_string_lasts = reverse(music_string_lasts)\n\
    \        music_string_lasts = reverse(music_string_lasts)\n        music_string_lasts\
    \ = reverse(music_string_lasts)\n        music_string_lasts = reverse(music_string_lasts)\n\
    \        music_string_lasts = reverse(music_string_lasts)\n        music_string_lasts\
    \ = reverse(music_string_lasts)\n        music_string_lasts = reverse(music_string_lasts)\n\
    \        music_string_lasts = reverse(music_string_lasts)\n        music_string_lasts\
    \ = reverse(music_string_lasts)\n        music_string_lasts = reverse(music_string_lasts)\n\
    \        music_string_lasts = reverse(music_string_lasts)\n        music_string_lasts\
    \ = reverse(music_string_lasts)\n        music_string_lasts = reverse(music_string_lasts)\n\
    \        music_string_lasts = reverse(music_string_lasts)\n        music_string_lasts\
    \ = reverse(music_string_lasts)\n        music_string_lasts = reverse(music_string_lasts)\n\
    \        music_string_lasts = reverse(music_string_lasts)\n        music_string_lasts\
    \ = reverse(music_string_lasts)\n        music_string_lasts = reverse(music_string_lasts)\n\
    \        music_string_lasts = reverse(music_string_lasts)\n        music_string_lasts\
    \ = reverse(music_string_lasts)\n        music_string_lasts = reverse(music_string_lasts)\n\
    \        music_string_lasts = reverse(music_string_lasts)\n        music_string_lasts\
    \ = reverse(music_string_lasts)\n        music_string_lasts = reverse(music_string_lasts)\n\
    \        music_string_lasts = reverse(music_string_lasts)\n        music_string_lasts\
    \ = reverse(music_string_lasts)\n        music_string_lasts = reverse(music_string_lasts)\n\
    \        music_string_lasts = reverse(music_string_lasts)\n        music_string_lasts\
    \ = reverse(music_string_lasts)\n        music_string_lasts = reverse(music_string_lasts)\n\
    \        music_string_lasts = reverse(music_string_lasts)\n        music_string_lasts\
    \ = reverse(music_string_lasts)\n        music_string_lasts = reverse(music_string_lasts)\n\
    \        music_string_lasts = ", "    music_list = music_string.split(\" \")\n\
    \    music_vector = zeros(Int64, length(music_list))\n    for notes in music_list\n\
    \        if note in \"oo|.\" == true \n            music_vector[music_list.index(notes)]\
    \ += 1\n        else \n            music_vector[music_list.index(notes)] = 0\n\
    \        end\n    end\n    return music_vector\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    parse_music_string(music_string::String)::Vector{Int64}\n    Input\
    \ to this function is a string representing musical notes in a special ASCII format.\n\
    \    Your task is to parse this string and return vector of integers corresponding\
    \ to how many beats does each\n    not last.", "    music_string = music_string[1:end-1]\
    \ # remove leading space\n    parts = split(music_string, \" \")\n    note_lengths\
    \ = [length(part) for part in parts]\n    return note_lengths", "    \n    music_str\
    \ = music_string.strip(\" .| \")\n    notes = split(music_str)\n    beats = Vector{Int64}()\n\
    \    for note in notes\n        beats = push!(beats, last(parse_note(note)))\n\
    \    end\n    return beats", '    parse_music(music_string,"")', "    music_string\
    \ = \".{40}\" * music_string\n    music_array = music_string.split(\"|\")\n  \
    \  vector = zeros(size(music_array, 1))\n    for notes in music_array\n      \
    \  if notes == \"\"\n            vector[length(vector)] = 4\n        elseif notes[1]\
    \ == \"o\"\n            vector[length(vector)] = 4\n        elseif notes[1] ==\
    \ \"o|\"\n            vector[length(vector) - 2] = 2\n        elseif notes[1]\
    \ == \".|\"\n            vector[length(vector) - 1] = 1\n        else\n      \
    \      println(\"Warning: Note \" + notes + \" does not match notes pattern\"\
    )\n        end\n    end\n    return vector\nend", "    music_string = music_string.strip()\n\
    \    music_string = music_string.strip(\"\\n\")\n    music_string = music_string.strip(\"\
    \ \")\n    music_string = \"o o| .| o| o| .| .| .| .| o o\" \n    music_string\
    \ = music_string[1:end]\n    music_string = music_string[1...]\n    music_string\
    \ = (music_string |> split(\" \"))\n    music_string = (music_string |> map(parse))\n\
    \    music_string = (music_string |> sum(&*))\n    music_string\nend\n</cell>\n\
    <code language=julia-1.6>\n@testset \"parse_music\" begin\n    parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\") \nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \  that takes string $music_string$ as input and returns integer vector of length\
    \ $n_notes$.\n    Each value in $music_string$ represents note duration in beats.\n\
    \    Each note can be represented with a special character in $music_string$ -\
    \ '.' or '|'.", "    # YOUR CODE HERE\nend\n</cell>\n<code language=julia-1.5>\n\
    # test\nparse_music(\"o o| .| o| o| .| .| .| .| o o\")\n</cell>\n<text>\nPart\
    \ 2: Music representation\nIn this notebook you will write functions for generating\
    \ musical composition.", "    music = music_string.split(\" \")\n    note_vec\
    \ = Vector{Int64}()\n    for note in music\n        if note == \".\" or note ==\
    \ \"o\"\n            note_vec += [4]\n        elseif note == \"o|\"\n        \
    \    note_vec += [2 ]\n        elseif note == \".|\"\n            note_vec +=\
    \ [1]\n        else\n            println(\"No such note found\")\n           \
    \ println(note)\n        end\n    end", "    s = music_string.split(\" \")\n \
    \   v = zeros(length(s)/2)\n    for i in 1:(length(s)/2)\n        if s[i] == \"\
    o\"\n            v[i] = 4\n        else if s[i] == \"|\"\n            v[i] = 2\n\
    \        else\n            v[i] = 1\n        end\n    end\n    return v\nend\n\
    </cell>\n<code language=julia-1.5>", "</code>\nEDIT:\nIf your input string has\
    \ some strange symbols inside then you may have to escape them. For example:\n\
    <code>\nparse_music(\"o \\\\o \\\\| \\\\.\\\\| \\\\o\\\\| \\\\o\\\\| \\\\o\\\\\
    | \\\\.\\\\| \\\\.\\\\| \\\\.\\\\| \\\\.\\\\| \\\\o\\\\| \\\\o\")\n</code>\n<|/\
    \ a tags=julia,ascii |>\n<| c |>\nThank you very much, what if the strings have\
    \ some strange symbols? for example: ```parse_music(\"o \\\\o \\\\| \\\\.\\\\\
    | \\\\o\\\\| \\\\o\\\\| \\\\o\\\\| \\\\.\\\\| \\\\.\\\\| \\\\.\\\\| \\\\.\\\\\
    | \\\\o\\\\| \\\\o\")```?\n<|/ c |>\n<| c |>\nIf you have strange symbols in your\
    \ input string then you have to escape them. For example, if you have this string\
    \ `a b \\| c d` then you probably need to write `parse_music(\"a b \\\\| c d\"\
    )`. But if your string has some strange symbols inside then you may have to escape\
    \ them. For example: `parse_music(\"o \\\\o \\\\| \\\\.\\\\| \\\\o\\\\| \\\\o\\\
    \\| \\\\o\\\\| \\\\.\\\\| \\\\.\\\\| \\\\.\\\\| \\\\.\\\\| \\\\o\\\\| \\\\o\"\
    )`. I've updated my answer to reflect this case.\n<|/ c |>\n<| c |>\nThank you,\
    \ it works well now! The key was the double backslash \\ \\\n<|/ c |>\n<| a dscore=1\
    \ tags=julia,ascii |>\nThe solution to your problem is given by this SO answer.\
    \ Basically, you write a function that takes an array of notes and return the\
    \ number of beats in a given string representation of that musical note.\n<code>",
  "  \n    music_string=music_string.lower()\n    notes=[]\n    \n    last=False\n\
    \    for c in music_string\n        if c in [\"o\",\"o|\"]\n            last=True\n\
    \        else if c==\"|\"\n            last=False\n        else if last==True\n\
    \            push!(notes,1)\n        else\n            push!(notes,0)\n      \
    \  end\n    end\n    \n    return notes\nend\n</cell>\n<text>\nNow let's try to\
    \ run this function on our simple musical composition.", "    music_string = music_string.trim()\n\
    \    music_string = music_string[music_string.find(';')+1::end]\n    music_string\
    \ = music_string.split(\" \")\n    music_string = music_string[music_string.end-1::end]\n\
    \    music_string = music_string[music_string.find('|')+1::end]\n    music_string\
    \ = music_string.split(\" \")\n    music_string = music_string[music_string.end-1::end]\n\
    \    music_string = music_string[music_string.find('|')+1::end]\n    music_string\
    \ = music_string.split(\" \")\n    music_string = music_string[music_string.end-1::end]\n\
    \    music_string = music_string[music_string.find('|')+1::end]\n    music_string\
    \ = music_string.split(\" \")\n    music_string = music_string[music_string.end-1::end]\n\
    \    music_string = music_string[music_string.find('|')+1::end]\n    music_string\
    \ = music_string.split(\" \")\n    music_string = music_string[music_string.end-1::end]\n\
    \    music_string = music_string[music_string.find('|')+1::end]\n    music_string\
    \ = music_string.split(\" \")\n    music_string = music_string[music_string.end-1::end]\n\
    \    music_string = music_string[music_string.find('|')+1::end]\n    music_string\
    \ = music_string.split(\" \")\n    music_string = music_string[music_string.end-1::end]\n\
    \    music_string = music_string[music_string.find('|')+1::end]\n    music_string\
    \ = music_string.split(\" \")\n    music_string = music_string[music_string.end-1::end]\n\
    \    music_string = music_string[music_string.find('|')+1::end]\n    music_string\
    \ = music_string.split(\" \")\n    music_string = music_string[music_string.end-1::end]\n\
    \    music_string = music_string[music_string.find('|')+1::end]\n    music_string\
    \ = music_string.split(\" \")\n    music_string = music_string[music_string.end-1::end]\n\
    \    music_string = music_string[music_string.find('|')+1::end]\n    music_string\
    \ = music_string.split(\" \")\n    music_string = music_string[music_string.end-1::end]\n\
    \    music_string = music_string[music_string.find('|')+1::end]\n    music_string\
    \ = music_string.split(\" \")\n    musi", "    music_list = music_string.split('\
    \ ')\n    music_list.delete_if(elem -> elem == '.' or elem == 'o')\n    return\
    \ music_list.map( elem -> \n        if elem == '.' then 1\n        else if elem\
    \ == 'o' then 4\n        else 4 / elem\n    ) |> reduce(+, 0)\nend", "</code>\n\
    <|/ a tags=algorithm,combinatorics |>\n<| c |>\nI did the same, and it seems to\
    \ work well. I'll probably use some kind of memoization to avoid recomputing subsequences.\n\
    <|/ c |>\n<| c |>\nI realize that this has probably been the most popular answer\
    \ so far, but I thought I'd go ahead and give my own answer to illustrate my point.\
    \  I hope you find it informative.  I spent quite a bit of time trying to think\
    \ of a clever way to solve this problem that didn't involve exponentially growing\
    \ memoization... and I had no idea you could get around that :)  I wish I realized\
    \ about it earlier.\n<|/ c |>\n<| c |>\nVery clever solution, indeed! This is\
    \ definitely the best solution in my opinion. Thanks!\n<|/ c |>\n<| a |>\nSince\
    \ nobody has provided an answer that actually works (but is reasonably readable),\
    \ here is the code I came up with using memoization.  The key concept is to make\
    \ each memoized function only compute the next sub-sequence if it's actually necessary.\
    \  A memoized function only computes its sub-sequence if it needs it.  When you\
    \ start recursing, make sure you call your memoized function first -- if it has\
    \ already been computed, it won't compute it again.  It makes use of the fact\
    \ that memoization is \"lazy\", i.e., in the first call to each memoized function,\
    \ if the data has already been computed, it won't do it again.\n<code>\nimport\
    \ Data.Vector\nimport qualified Data.Vector.Unboxed as U", "</code>\n<|/ a dscore=0\
    \ tags=string,parsing,julia |>\n<| c |>\nThis does not work. Your method returns\
    \ an array containing all possible combinations of 1's and 0's of length (length\
    \ of a string) bet_count times. What you wanted was to count how many times each\
    \ note lasts bet_count  beats.\n<|/ c |>\n<| c |>\nYes, you are right. It was\
    \ my mistake. I tried to solve this question in another way. I've added a correct\
    \ solution.\n<|/ c |>\n<| a dscore=0 tags=string,parsing,julia |>\nEDIT: I've\
    \ corrected my original answer so that now it works on more than 1 note.\nYou\
    \ can use regular expressions (package Regexp) to match your pattern of musical\
    \ notes. There are several predefined patterns you can use, such as \\. to match\
    \ a dot and \\. to match a dot, or a \\w to match a word (letters/numbers).\n\
    Using these, you can easily match your strings of musical notes, like this:\n\
    <code>\nusing Regex # needed to import Regex", "    music_string = music_string.split(\"\
    \ \")\n    notes = Dict(\"o\" => 0, \"o|\" => 1, \".|\" => 2)\n    result = Dict()\n\
    \    for element in music_string\n        if element in notes\n            result[element]\
    \ = result[element] + notes[element]\n        end\n    end\n    return collect(values(result))\n\
    end\n</cell>\n<code language=julia-1.5>\nparsed_music = parse_music(\"o o| .|\
    \ o| o| .| .| .| .| o o\")\n</cell>\n<text>\nTask: Can you write a function which\
    \ will parse a string representing musical notes into vector of integers\n   \
    \ corresponding to how many beats does each note last?", "    vec = zeros(Int,\
    \ length(music_string) - 2)\n    for i in 2:length(music_string)-2\n        if\
    \ music_string[i] == \"o\"\n            vec[i - 1] = 4 \n        elseif music_string[i]\
    \ == \"o|\"\n            vec[i - 1] = 2 \n        elseif music_string[i] == \"\
    .|\"\n            vec[i - 1] = 1\n        elseif music_string[i] == \"o|\"\n \
    \           vec[i - 1] = 1\n        elseif music_string[i] == \"o|\"\n       \
    \     vec[i - 1] = 1\n        elseif music_string[i] == \"o|\"\n            vec[i\
    \ - 1] = 1\n        else\n            vec[i - 1] = 0\n        end\n    end\n \
    \   vec\nend\n</cell>\n<text>\nTask 9. Implement a function that takes a string\
    \ representing musical notes and returns the frequency of each note.\nThe function\
    \ should take a string containing only musical notes.\nThe notes should be separated\
    \ using spaces.", "end\n</cell>\n<text>\nExercise\nGiven a musical note with pitch\
    \ 'C', what is the octave it is on?\nWrite the function below, that will return\
    \ octave of given musical note. You may use our functions from last exercise.",
  "    parse_input(music_string).collect{x->parse_music_note(x)}\nend", "\"\"\"\n\
    \    Problem description: \n        1. Parse musical notation string and return\
    \ vector of beats count in each note", "    music_string = music_string[2:end]\n\
    \    music_list = music_string.split(//)\n    return parse_music_list(music_list)\n\
    end", "     \"\"\"\n     Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n    Your task is to parse this string and\
    \ return vector of integers corresponding to how many beats does each\n    not\
    \ last.", "    music_string = \"o o| .| o| o| .| .| .| .| o o\"\n    music_string\
    \ = music_string.gsub(\"o|\", \". | \")\n    music_string = music_string.gsub(\"\
    .|\", \"o|\")\n    music_string = music_string.gsub(\".\", \"o.\")\n    music_string\
    \ = music_string.gsub(\"o\", \"o|\")\n    music_string = music_string.gsub(\"\
    |\", \" .\")\n    music_string = music_string.gsub(\"  \", \" \")\n    music_string\
    \ = music_string.gsub(\" .\", \". \")\n    music_string = music_string.gsub(\"\
    \ ,\", \",\")\n    music_string = music_string.gsub(\" ;\", \";\")\n    music_string\
    \ = music_string.gsub(\" :\", \":\")\n    music_string = music_string.gsub(\"\
    \ ,\", \".\")\n    music_string = music_string.gsub(\" .\", \". \")\n    music_string\
    \ = music_string.gsub(\" ;\", \";\")\n    music_string = music_string.gsub(\"\
    \ :\", \":\")\n    music_string = music_string.gsub(\" ,\", \".\")\n    music_string\
    \ = music_string.gsub(\" .\", \". \")\n    music_string = music_string.gsub(\"\
    \ ;\", \";\")\n    music_string = music_string.gsub(\" :\", \":\")\n    music_string\
    \ = music_string.gsub(\" ,\", \".\")\n    music_string = music_string.gsub(\"\
    \ .\", \". \")\n    music_string = music_string.gsub(\" ;\", \";\")\n    music_string\
    \ = music_string.gsub(\" :\", \":\")\n    music_string = music_string.gsub(\"\
    \ ,\", \".\")\n    music_string = music_string.gsub(\" .\", \". \")\n    music_string\
    \ = music_string.gsub(\" ;\", \";\")\n    music_string = music_string.gsub(\"\
    \ :\", \":\")\n    music_string = music_string.gsub(\" ,\", \".\")\n    music_string\
    \ = music_string.gsub(\" .\", \". \")\n    music_string = music_string.gsub(\"\
    \ ;\", \";\")\n    music_string = music_string.gsub(\" :\", \":\")\n    music_string\
    \ = music_string.gsub(\" ,\", \".\")\n    music_string = music_string.gsub(\"\
    \ .\", \". \")\n    music_string = music_string.gsub(\" ;\", \";\")\n    ", " \
    \   parse_in_string(music_string).map(n -> get_n_beats(n))\nend", "    # Your\
    \ code here\n    music_notes = music_string.split(\" \")\n    notes_vector = Vector{Int64}()",
  "    music_notes = music_string.split(\" \")\n    notes = Vector{Int64}()\n    for\
    \ note in music_notes\n        if note == \"o\" \n            push!(notes, 4)\n\
    \        elseif note == \"o|\" \n            push!(notes, 2)\n        elseif note\
    \ == \".|\" \n            push!(notes, 1)\n        else\n            println(\"\
    Error: Invalid note type found \")\n            throw(ArgumentError(\"Invalid\
    \ note type found\"))\n        end\n    end", "    parsed_music = \"\"\n    for\
    \ c in music_string\n        if c == \"o\"\n            parsed_music += \"1\"\n\
    \        elseif c == \"o|\"\n            parsed_music += \"0\"\n        elseif\
    \ c == \".|\"\n            parsed_music += \"0\"\n        else\n            parsed_music\
    \ += \"0\"\n        end\n    end\n    return map(Int64, parsed_music)\nend", " \
    \   music_list = split(music_string)\n    notes = Vector{Int64}()\n    \n    #\
    \ Parse each note\n    for (note, note_index) in music_list\n        if note ==\
    \ \"o\"\n            push!(notes, note_index)\n        end\n    end\n    \n  \
    \  # Count each note\n    for note_index in notes\n        if note_index % 4 !=\
    \ 0\n            notes[note_index] += 1\n        end\n    end\n    return notes\n\
    end\n</cell>\n<code language=julia-0.4>\nmusic_string = \"o o| .| o| o| .| .|\
    \ .| .| o o\"\nparse_music(music_string)\n</cell>\n<text>\nImplement the function\
    \ to_music that converts a vector of integers representing notes into a string.",
  "    # Your code here\nend\n</cell>\n<code language=julia-1.0>\n\"\"\"\n    parse_music(music_string::Vector{String})",
  "\"\"\"\nParsing function\n\"\"\"\nmusic_notes = parse_music(music_string)", " \
    \   music_string = music_string[1:length(music_string)-1]\n    \n    music_string\
    \ = [i for i in music_string if i == \"o\"]\n    music_string = [i for i in music_string\
    \ if i == \"|\"]\n    music_string = [i for i in music_string if i == \".\"]\n\
    \    music_string = [i for i in music_string if i == \" \"]\n    music_string\
    \ = [i for i in music_string if i == \"#\"]\n    music_string = [i for i in music_string\
    \ if i != \"#\"]\n    music_string = [i for i in music_string if i == \"!\"]\n\
    \    music_string = [i for i in music_string if i != \"!\"]\n    music_string\
    \ = [i for i in music_string if i == \"%\"]\n    music_string = [i for i in music_string\
    \ if i != \"%\"]\n    \n    music_string = [i for i in music_string if i != \"\
    o\"]\n    music_string = [i for i in music_string if i != \"|\"]\n    music_string\
    \ = [i for i in music_string if i != \"|\"]\n    music_string = [i for i in music_string\
    \ if i != \"|\"]\n    music_string = [i for i in music_string if i != \"|\"]\n\
    \    music_string = [i for i in music_string if i != \"|\"]\n    music_string\
    \ = [i for i in music_string if i != \"|\"]\n    music_string = [i for i in music_string\
    \ if i != \"|\"]\n    music_string = [i for i in music_string if i != \"|\"]\n\
    \    music_string = [i for i in music_string if i != \"|\"]\n    music_string\
    \ = [i for i in music_string if i != \"|\"]\n    music_string = [i for i in music_string\
    \ if i != \"|\"]\n    music_string = [i for i in music_string if i != \"|\"]\n\
    \    music_string = [i for i in music_string if i != \"|\"]\n    music_string\
    \ = [i for i in music_string if i != \"|\"]\n    music_string = [i for i in music_string\
    \ if i != \"|\"]\n    music_string = [i for i in music_string if i != \"|\"]\n\
    \    music_string = [i for i in music_string if i != \"|\"]\n    music_string\
    \ = [i for i in music_string if i != \"|\"]\n    music_string = [i for i in music_string\
    \ if i != \"|\"]\n    music_string = [i for i in music_string if i != \"|\"]\n\
    \    music_string = [i for i in music_string if i != \"|\"]\n    music_string\
    \ = [i for i in music_string if i != \"|\"]\n    ", "    music_list = music_string.split(\"\
    \ \")\n    music_list_2 = []\n    for m in music_list\n        if m == \".\"\n\
    \            music_list_2.push(1)\n        else\n            music_list_2.push(0)\n\
    \    end\n    return music_list_2\nend\n</cell>\n<code language=julia-1.5>\n#\
    \ Run your function and check that it returns the correct result\nmusic_list =\
    \ [\n    \"o o| .| o| o| .| .| .| .| .| o o\",\n    \"o o| .| .| o| o| .| .| .|\
    \ .| o o\",\n    \"o o| .| .| o| o| .| .| .| .| o o\",\n    \". .| o| o| o| .|\
    \ .| o| o| .| o o\",\n    \". .| .| o| o| o| .| o| o| .| o o\",\n    \". .| o|\
    \ o| o| .| .| o| o| .| o o\",\n    \"o o| o| o| o| o| o| o| o| o o\",\n    \"\
    o o| o| o| o| o| o| o| o o\",\n    \"o o| o| o| o| o| o| o| o o\",\n    \"o o|\
    \ o| o| o| o| o| o| o o\",\n    \"o o| o| o| o| o| o| o| o o\",\n    \". .| o|\
    \ o| o| o| o| o| o| o o\",\n    \". .| o| o| o| o| o| o| o| o o\",\n    \". .|\
    \ o| o| o| o| o| o| o| o o\",\n    \". .| o| o| o| o| o| o| o| o o\",\n    \"\
    . .| o| o| o| o| o| o| o| o o\",\n    \"o o| o| o| o| o| o| o| o o\",\n    \"\
    o o| o| o| o| o| o| o| o o\",\n    \"o o| o| o| o| o| o| o| o o\",\n    \"o o|\
    \ o| o| o| o| o| o| ", "    music_string_list = music_string.split(\" \")\n  \
    \  \n    num_notes = 0\n    for note in music_string_list:\n        if note ==\
    \ \"\":\n            continue\n        if note == \"o\":\n            num_notes\
    \ += 1\n        elif note == \"o|\":\n            num_notes += 2\n        elif\
    \ note == \".|\":\n            num_notes += 1\n        elif note == \"|\":\n \
    \           num_notes += 1\n        else:\n            throw(ArgumentError(\"\
    Invalid note: \" + note))", "</code>\n<|/ a tags=algorithm,julia |>\n<| a dscore=2\
    \ tags=algorithm,julia |>\nHere's a more efficient solution than others. I'm guessing\
    \ it's pretty close to what you'd do if you wanted to implement this in C++.\n\
    <code>", "    music_notes = [\"o\", \"o|\", \".|\"]\n    notes = music_string.split(\"\
    \ \")\n    \n    beats = Vector{Int64}()\n    for note in notes\n        if note\
    \ in music_notes\n            beats = beats + parse(note)\n        else\n    \
    \        beats = beats + parse(note, 4)\n        end\n    end\n    return beats\n\
    end\n</cell>\n<text>\nAnd here is how we test our implementation:", "    music_list\
    \ = music_string.split(\" \")\n    music_list2 = split(music_list, \"\")\n   \
    \ music_list3 = split(music_list2, \" \")\n    music_list4 = split(music_list3,\
    \ \"|\")\n    music_list5 = split(music_list4, \"-\")", "\"\"\"\n    Your task\
    \ is to parse this string and return vector of integers corresponding to how many\
    \ beats does each\n    not last.\n\"\"\"\nend", "    music_string = music_string\n\
    \    .split(\" \") \n    .map(symbol => symbol == \"o\" ? 4 : symbol == \"o|\"\
    \ ? 2 : symbol == \".|\" ? 1 : 0)\n    collect{_ + _}\nend\n</cell>\n<code language=julia-1.3>\n\
    \"\"\"\n    parse_music_string(music_string::String)::Vector{Int64}\n        Input\
    \ to this function is a string representing musical notes in a special ASCII format.\n\
    \        Your task is to parse this string and return vector of integers corresponding\
    \ to how many beats does each\n        not last.", "    music_notes = music_string.split(\"\
    |\")\n    note_counts = zeros(Int, length(music_notes))\n    for (i,note_string)\
    \ in enumerate(music_notes)\n        if note_string == \".\"\n            note_counts[i]\
    \ += 1\n        else\n            note_counts[i] = note_counts[i] + 1\n      \
    \  end\n    end\n    return note_counts\nend\n</cell>\n<code language=julia-1.4>",
  "    music_string = music_string.strip() # remove leading and trailing spaces\n\
    \    music_array = music_string.split(\" \") # split string to array\n    music_array[1]\
    \ = 'o|' if music_array[1] == 'o' else '|o' \n    music_array[2] = '|o' if music_array[2]\
    \ == 'o' else '|.|' \n    music_array[3] = 'o|' if music_array[3] == 'o' else\
    \ '|o' \n    music_array[4] = '|o' if music_array[4] == 'o' else '|.|' \n    music_array[5]\
    \ = 'o|' if music_array[5] == 'o' else '|o' \n    music_array[6] = '|o' if music_array[6]\
    \ == 'o' else '|.|' \n    music_array[7] = 'o|' if music_array[7] == 'o' else\
    \ '|o' \n    music_array[8] = '|o' if music_array[8] == 'o' else '|.|' \n    music_array[9]\
    \ = 'o|' if music_array[9] == 'o' else '|o' \n    music_array[10] = '|o' if music_array[10]\
    \ == 'o' else '|.|' \n    music_array[11] = 'o|' if music_array[11] == 'o' else\
    \ '|o' \n    music_array[12] = '|o' if music_array[12] == 'o' else '|.|' \n  \
    \  music_array[13] = 'o|' if music_array[13] == 'o' else '|o' \n    music_array[14]\
    \ = '|o' if music_array[14] == 'o' else '|.|' \n    music_array[15] = 'o|' if\
    \ music_array[15] == 'o' else '|o' \n    music_array[16] = '|o' if music_array[16]\
    \ == 'o' else '|.|' \n    music_array[17] = 'o|' if music_array[17] == 'o' else\
    \ '|o' \n    music_array[18] = '|o' if music_array[18] == 'o' else '|.|' \n  \
    \  music_array[19] = 'o|' if music_array[19] == 'o' else '|o' \n    music_array[20]\
    \ = '|o' if music_array[20] == 'o' else '|.|' \n    music_array[21] = 'o|' if\
    \ music_array[21] == 'o' else '|o' \n    music_array[22] = '|o' if music_array[22]\
    \ == 'o' else '|.|' \n    music_array[23] = 'o|' if music_array[23] == 'o' else\
    \ '|", "    s = music_string.split(\" \")\n    s = sort(s)\n    \n    notes =\
    \ zeros(length(s) + 1)\n    last_beat = 0\n    for note_index in eachindex(s)\n\
    \        if note_index == length(s) % 4\n            notes[last_beat] = 1\n  \
    \          last_beat += 1\n        else\n            notes[last_beat] = 0\n  \
    \          last_beat = 0\n        end\n    end\n    \n    return notes\nend",
  "    music_string_arr = music_string.split(\" \") |> Array.sort\n    music_string_arr.pop(1)\n\
    \    music_string_arr = music_string_arr |> Array.sort\n    return music_string_arr\n\
    end\n</cell>\n<code language=julia-0.4>\n# Let's try it", "    \"\"\"\n    Input:\
    \ music as string\n    Output: vector of integers representing musical notes according\
    \ to described format\n    \"\"\"\n    function parse_music(music_string::String)\n\
    \        if music_string == \"\"\n            return Vector{Int64}()\n       \
    \ \n        notes = music_string.split(\" \")\n        music_notes = Vector{Int64}()\n\
    \        for note in notes\n            if note == \"o\"\n                music_notes\
    \ += 4 * length(music_notes)\n            elseif note == \"|\"\n             \
    \   music_notes += 2 * length(music_notes)\n            elseif note == \".\"\n\
    \                music_notes += 1\n            else\n                println(\"\
    unknown note in string \" * music_string)\n                return music_notes\n\
    \        end", "    return Vector{Int64}(parse(music_string) |> Enum.filter(!is_note)\
    \ |> Enum.map(parse_note))\nend\n</code>\n<|/ a dscore=2 |>\n<| a tags=julia dscore=1\
    \ |>\nThis can be done with a combination of splitting on whitespace, parsing\
    \ the strings with Symbol, and using filter to get rid of any empty strings.\n\
    <code>", "    # your code here\n    return music_string.split(\" \").map(&parse)\n\
    end\n</cell>\n<code language=julia-1.5>\n@time parse_music(\"\"\"o o| .| o| o|\
    \ .| .| .| .| .| o o\"\"\")\n</cell>\n<text>\nExercise: Convert your music data\
    \ into musical pitches. What is the simplest way to convert musical pitches into\
    \ musical notes?", "        music_string = music_string[1:end-1] # get rid of\
    \ starting \"o\"\n        music_string = \"o\" + music_string # get rid of ending\
    \ \"o\"", "    parse_music_helper(music_string, 0)\nend", end, "    \"\"\"\n \
    \   Your task is to parse this string and return vector of integers corresponding\
    \ to how many beats does each\n    not last.", "</code>\nI used this question\
    \ to build the code, but it is not completely clear to me if I can use that to\
    \ solve the problem\nMy main issue is that I am not allowed to use the function\
    \ parse_music for my problem. I can't find an example of how this function would\
    \ be used in this context. I thought that the function that uses parse_music would\
    \ be called in the code below:\n<code>", "    music_string = music_string.strip()\n\
    \    music_string = music_string[music_string.end-1:end]\n    music_string = ''.join([c\
    \ for c in music_string if not c.isdigit()]).rstrip()\n    music_string = music_string.replace(\"\
    |\", \"\")\n    music_string = music_string.replace(\"o o\", \"o\")\n    music_string\
    \ = music_string.replace(\"o .\", \".\")\n    music_string = music_string.replace(\"\
    o |\", \"|\")\n    music_string = music_string.replace(\"o \", \"o\")\n    music_string\
    \ = music_string.replace(\". .\", \".\")\n    music_string = music_string.replace(\"\
    . |\", \"|\")\n    music_string = music_string.replace(\". \", \".\")\n    music_string\
    \ = music_string.replace(\"| .\", \"|\")\n    music_string = music_string.replace(\"\
    | |\", \"|\")\n    music_string = music_string.replace(\"| \", \"|\")\n    music_string\
    \ = music_string.replace(\"o \", \"o\")\n    music_string = music_string.replace(\"\
    . \", \".\")\n    music_string = music_string.replace(\". |\", \"|\")\n    music_string\
    \ = music_string.replace(\". o\", \"o\")\n    music_string = music_string.replace(\"\
    | \", \"|\")\n    music_string = music_string.replace(\"| |\", \"|\")\n    music_string\
    \ = music_string.replace(\"| o\", \"o\")\n    music_string = music_string.replace(\"\
    | o\", \"o\")\n    music_string = music_string.replace(\"o \", \"o\")\n    music_string\
    \ = music_string.replace(\". \", \".\")\n    music_string = music_string.replace(\"\
    | \", \"|\")\n    music_string = music_string.replace(\"| |\", \"|\")\n    music_string\
    \ = music_string.replace(\"| o\", \"o\")\n    music_string = music_string.replace(\"\
    o .\", \".\")\n    music_string = music_string.replace(\". .\", \".\")\n    music_string\
    \ = music_string.replace(\"| .\", \"|\")\n    music_string = music_string.replace(\"\
    | .\", \"|\")\n    music_string = music_string.replace(\". .\", \".\")\n    music_string\
    \ = music_string.replace(\". .\", \".\")\n    music_string = music_string.replace(\"\
    o .\", \"o\")\n    music_string = music_string.replace(\". .\", \".\")\n    music_string\
    \ = music_string.replace(\"o .\", \"o\")\n    music_string = music_string.replace(\"\
    . .\", \".\")\n    music_string = music_string.replace(\"o .\", \"o\")\n    musi",
  "    return parse_music_helper(music_string, 0)\nend\n</cell>\n<text>\nNow that\
    \ we got our parse_music function defined, let's use it in our notebook to parse\
    \ music.", "    vector = zeros(length(music_string))\n    for note in music_string:\n\
    \        if note == \"o\"\n            vector[length(vector)+] = 1\n        elseif\
    \ note == \"o|\"\n            vector[length(vector)+] = 1\n            vector[length(vector)+:\
    \ length(vector) + 2] -= 1\n        elseif note == \".|\"\n            vector[length(vector)+]\
    \ = 1\n            vector[length(vector)+: length(vector) + 3] -= 1\n        \
    \    vector[length(vector)+: length(vector) + 4] -= 1\n            vector[length(vector)+:\
    \ length(vector) + 5] -= 1\n        end\n    return vector\nend", "    # BEGIN\
    \ Question 2\n    # END Question 2\nend\n</cell>\n<text>\nAnd now let's see what\
    \ kind of music it can parse.", "    \nend", "    \"\"\"\n    Complete the function\
    \ description\n    \"\"\"\n    # YOUR CODE HERE\nend", "    music_string = \"\
    [\" + music_string + \"]\"\n    music_string = replace(music_string, \"[\", \"\
    \")\n    music_string = replace(music_string, \"]\", \"\")\n    music_string =\
    \ \"{\" + music_string + \"}\"\n    music_string = replace(music_string, \"{\"\
    , \"\")\n    music_string = replace(music_string, \"}\", \"\")\n    music_string\
    \ = replace(music_string, \",\", \"\")\n    music_string = replace(music_string,\
    \ \";\", \"\")\n    music_string = replace(music_string, \"\\t\", \"\")\n    music_string\
    \ = replace(music_string, \"\\n\", \"\")\n    music_string = replace(music_string,\
    \ \"\\r\", \"\")\n    music_string = replace(music_string, \" \", \"\")\n    music_string\
    \ = replace(music_string, \"\\t\", \"\")\n    music_string = replace(music_string,\
    \ \"\\n\", \"\")\n    music_string = replace(music_string, \"\\r\", \"\")\n  \
    \  music_string = replace(music_string, \"-\", \"\")\n    music_string = replace(music_string,\
    \ \"'\", \"\")\n    music_string = replace(music_string, \"(\", \"\")\n    music_string\
    \ = replace(music_string, \")\", \"\")\n    music_string = replace(music_string,\
    \ \"[\", \"\")\n    music_string = replace(music_string, \"]\", \"\")\n    music_string\
    \ = replace(music_string, \"{\", \"\")\n    music_string = replace(music_string,\
    \ \"}\", \"\")\n    music_string = replace(music_string, \",\", \"\")\n    music_string\
    \ = replace(music_string, \";\", \"\")\n    music_string = replace(music_string,\
    \ \"\\t\", \"\")\n    music_string = replace(music_string, \"\\n\", \"\")\n  \
    \  music_string = replace(music_string, \"\\r\", \"\")\n    music_string = replace(music_string,\
    \ \" \", \"\")\n    music_string = replace(music_string, \"\\t\", \"\")\n    music_string\
    \ = replace(music_string, \"\\n\", \"\")\n    music_string = replace(music_string,\
    \ \"\\r\", \"\")\n    music_string = replace(music_string, \"-\", \"\")\n    music_string\
    \ = replace(music_string, \"'\", \"\")\n    music_string = replace(music_string,\
    \ \"(\", \"\")\n    music_string = replace(music_string, \")\", \"\")\n    music_string\
    \ = replace(music_string, \"[\", \"\")\n    music_string = replace(music_string,\
    \ \"]\", \"\")\n    music_string = replace(music_string, \"{\", \"\")\n    music_string\
    \ = replace(music_string, \"}\", \"\")\n    music_string = replace(music_string,\
    \ \",\", \"\")\n    music_string = replace(music_string, \";\", \"\")\n    music_string\
    \ = replace(music_string, \"\\t\", \"\")\n    ", "    music_string = \"\\n\".join(music_string)\n\
    \    music_array = music_string.split(\"\\n\")\n    \n    music_vector = Vector{Int64}()\n\
    \    for note in music_array\n        if note[1] == \"o\"\n            music_vector\
    \ = [music_vector + 4]\n        elseif note[1] == \"o|\"\n            music_vector\
    \ = [music_vector + 2]\n        elseif note[1] == \".|\"\n            music_vector\
    \ = [music_vector + 1]\n        else\n            throw(ArgumentError(\"Not a\
    \ valid note: \"  + note))\n        end\n    end", "    parse_music_string(music_string,\
    \ [])\nend\n</cell>\n<code language=julia-1.5>\n# run the code in the cell below\n\
    @code_warntype parse_music(\"\"\"o o| .| o| o| .| .| .| .| .| o o\"\"\")\n</cell>\n\
    <text>\nExercise", "    music = [music_string]\n    music = music_string\n   \
    \ \n    music_string = music_string.split(\"|\")\n    \n    for string in music_string\n\
    \        music = music + (string == \".\" ? [0.0 : 1.0 / 4.0 : 5.0 / 4.0] : (string.split(\"\
    .\").map(x => parse(string))))\n    end", "\"\"\"\nparse_music(music_string::String)::Vector{Int64}",
  "    \"\"\"\n    Input:\n        music_string - string representing musical notes\
    \ in a special ASCII format\n    Output:\n        vector of integers corresponding\
    \ to how many beats does each not last.", "    # Your code here\n    music_string\
    \ = music_string.replace(\"o\", \"0\")\n    music_string = music_string.replace(\"\
    |\", \"1\")\n    music_string = music_string.replace(\".\", \"2\")\n    music_string\
    \ = music_string.replace(\"0o\", \"1\")\n    music_string = music_string.replace(\"\
    0|\", \"2\")\n    music_string = music_string.replace(\"0|\", \"1\")\n    music_string\
    \ = music_string.replace(\"|\", \"2\")\n    music_string = music_string.replace(\"\
    o\", \"3\")\n    music_string = music_string.replace(\"|\", \"2\")\n    music_string\
    \ = music_string.replace(\".\", \"3\")\n    music_string = music_string.replace(\"\
    0o\", \"1\")\n    music_string = music_string.replace(\"0|\", \"2\")\n    music_string\
    \ = music_string.replace(\"0|\", \"1\")\n    music_string = music_string.replace(\"\
    |\", \"2\")\n    music_string = music_string.replace(\"o\", \"4\")\n    music_string\
    \ = music_string.replace(\"|\", \"3\")\n    music_string = music_string.replace(\"\
    .\", \"4\")\n    music_string = music_string.replace(\"0o\", \"1\")\n    music_string\
    \ = music_string.replace(\"0|\", \"2\")\n    music_string = music_string.replace(\"\
    0|\", \"1\")\n    music_string = music_string.replace(\"|\", \"3\")\n    music_string\
    \ = music_string.replace(\"o\", \"5\")\n    music_string = music_string.replace(\"\
    |\", \"4\")\n    music_string = music_string.replace(\".\", \"5\")\n    music_string\
    \ = music_string.replace(\"0o\", \"1\")\n    music_string = music_string.replace(\"\
    0|\", \"2\")\n    music_string = music_string.replace(\"0|\", \"1\")\n    music_string\
    \ = music_string.replace(\"|\", \"4\")\n    music_string = music_string.replace(\"\
    o\", \"6\")\n    music_string = music_string.replace(\"|\", \"5\")\n    music_string\
    \ = music_string.replace(\".\", \"6\")\n    music_string = music_string.replace(\"\
    0o\", \"1\")\n    music_string = music_string.replace(\"0|\", \"2\")\n    music_string\
    \ = music_string.replace(\"0|\", \"1\")\n    music_string = music_string.replace(\"\
    |\", \"5\")\n    music_string = music_string.replace(\"o\", \"7\")\n    music_string\
    \ = music_string.replace(\"|\", \"6\")\n    music_string = music_string.replace(\"\
    .\", \"7\")\n    music_string = music_string.replace(\"0o\", \"1\")\n    music_string\
    \ = music_string.replace(\"0|\", \"2\")\n    music_string = musi", "    \n   \
    \ music_notes = music_string.split(\"o|.| .| .| .| .| .| o \")\n    music_notes\
    \ = music_notes[2:end]\n    music_beats = []\n    for note in music_notes\n  \
    \      if note == \".\"\n            music_beats += [4]\n        elseif note ==\
    \ \"o\"\n            music_beats += [0]\n        else\n            note, length\
    \ = note[1:3], note[4:end]\n            if length == \"|\"\n                music_beats\
    \ += [4*i+1 for i in length.split(\"|\")]\n            else\n                music_beats\
    \ += [length]\n    end\n    music_beats = Vector{Int64}(music_beats)\n    return\
    \ music_beats\nend", "    music_string = music_string.strip(\" \\n\\r\\t\")\n\
    \    music_string = \"o|\" |> music_string |> music_string |> music_string |>\
    \ music_string |> music_string |> music_string |> music_string |> music_string\
    \ |> music_string |> music_string |> music_string |> music_string |> music_string\
    \ |> music_string |> music_string |> music_string |> music_string |> music_string\
    \ |> music_string |> music_string |> music_string |> music_string |> music_string\
    \ |> music_string |> music_string |> music_string |> music_string |> music_string\
    \ |> music_string |> music_string |> music_string |> music_string |> music_string\
    \ |> music_string |> music_string |> music_string |> music_string |> music_string\
    \ |> music_string |> music_string |> music_string |> music_string |> music_string\
    \ |> music_string |> music_string |> music_string |> music_string |> music_string\
    \ |> music_string |> music_string |> music_string |> music_string |> music_string\
    \ |> music_string |> music_string |> music_string |> music_string |> music_string\
    \ |> music_string |> music_string |> music_string |> music_string |> music_string\
    \ |> music_string |> music_string |> music_string |> music_string |> music_string\
    \ |> music_string |> music_string |> music_string |> music_string |> music_string\
    \ |> music_string |> music_string |> music_string |> music_string |> music_string\
    \ |> music_string |> music_string |> music_string |> music_string |> music_string\
    \ |> music_string |> music_string |> music_string |> music_string |> music_string\
    \ |> music_string |> music_string |> music_string |> music_string |> music_string\
    \ |> music_string |> music_string |> music_string |> music_string |> music_",
  "    music_notes = music_string.split(\"|\")\n    note_counts = Vector{Int64}()\n\
    \    for note in music_notes\n        if note == \"o\"\n            note_count\
    \ += 4\n        else\n            if note == \"o|\"\n                note_count\
    \ += 2\n            else\n                note_count += 1\n        end\n     \
    \   push!(note_counts, note_count)\n    end\n    return note_counts\nend\n</cell>\n\
    <code language=julia-0.4>\n\"\"\"\nA function to calculate number of steps in\
    \ a given note.", "    parse_instrument(music_string)\nend", "    #todo parse\
    \ string and return vector of integers\n    return collect(music_string.split(\"\
    \ \")) |> collect{el in parse(el)}\nend", '    music_string = music_string[0..-2]',
  "    notes = music_string.split(\"\")\n    \n    beats = Int64[]\n    \n    last\
    \ = \"\"\n    last_beats = Int64[]\n    for note in notes\n        if note ==\
    \ \".\"\n            beats += [Int64(last)]\n            last =\"\"\n        elseif\
    \ note == \"o\"\n            last =  \"-\"\n        elseif note == \"|\"\n   \
    \         last = last.substring(0,last.length()-1)\n        else\n           \
    \ last += note\n        end\n    end\n    return beats\nend\n</cell>\n<code language=julia-1.0>\n\
    @test parse_music(\"o o| .| o| o| .| .| .| .| o o\") == [4, 2, 1, 2, 2, 1, 1,\
    \ 1, 1, 4, 4]\n@test parse_music(\"o|o|.|.|.||o|\") == [2, 1, 1, 1, 2, 2, 2, 2,\
    \ 2]\n@test parse_music(\"o|o|.|.|.||.||\") == [2, 1, 1, 1, 2, 2, 2, 2]\n</cell>\n\
    <text>\nQuestion 2b: Write a function that takes a string and returns vector of\
    \ integers corresponding to each notation.", "    parsed_music = Vector{Int64}(undef,\
    \ 0)\n    for note in music_string:\n        if note == \"o\"\n            parsed_music\
    \ += [4] * 4\n        elseif note == \"o|\"\n            parsed_music += [2,2]\
    \ * 2\n        elseif note == \".|\"\n            parsed_music += [1]\n      \
    \  end\n    end\n    return parsed_music\nend\n</cell>\n<text>\nPart III - SOLUTION",
  "    music_vector = parse_music_string(music_string)\n    music_vector[music_vector\
    \ == 4] = 1 \n    music_vector\nend", "    # Write your code here\n    return\
    \ music_string.count(\"o\")/4 #Int64 is used for integers\nend\n</cell>\n<code\
    \ language=julia-1.6>\n#Test your code\n@test isapproxapprox(parse_music(\"o o|\
    \ .| o| o| .| .| .| .| o o\"),[4,2,1,2,2,1,1,1,1,4,4])\n@test isapproxapprox(parse_music(\"\
    o o| .| .| o| o| .| .| .| o o\"),[4,2,1,2,2,2,1,1,1,1,4])\n@test isapproxapprox(parse_music(\"\
    o o| .| .| .| o| o| .| .| o o\"),[4,2,1,2,2,2,1,2,1,1])\n@test isapproxapprox(parse_music(\"\
    o o| .| .| .| o| o| .| .| o o\"),[4,2,1,2,2,2,2,2,2,1])\n@test isapproxapprox(parse_music(\"\
    o o| .| .| .| o| o| .| .| o o\"),[4,2,1,2,2,2,2,3,3,1])\n@test isapproxapprox(parse_music(\"\
    o o| .| .| .| o| o| .| .| o o\"),[4,2,1,2,2,2,2,3,3,1])\n@test isapproxapprox(parse_music(\"\
    o o| .| .| .| o| o| .| .| o o\"),[4,2,1,2,2,2,3,3,3,1])\n@test isapproxapprox(parse_music(\"\
    o o| .| .| .| o| o| .| .| o o\"),[4,2,1,2,2,2,3,3,3,1])\n</cell>\n<text>\nTask.\
    \ Implement a function parse_chords() that takes a string and returns a vector\
    \ of chord symbols.", "    music_string = music_string.strip\n    music_list =\
    \ music_string.split(\"o\")\n    music_list = [i for s in music_list for i in\
    \ s.split(\"|\")]\n    music_list = [i for s in music_list for i in s.split(\"\
    .\")]\n    music_list = [i for s in music_list for i in s.split(\" \")]\n    music_list\
    \ = [i for i in music_list if i]\n    music_list = [i for i in music_list if i!='\
    \ ' and i!='.']\n    return music_list\nend\n</cell>\n<code language=julia-1.6>",
  "    music_string\n    parse\nend\n</cell>\n<text>\nPart 2: Predicting Musical Instruments\n\
    In this task we will use our previous functions to get a better understanding\
    \ of how musical instruments can be represented.", "    \n    music_string = music_string.strip\n\
    \    notes  = Vector{Int64}()\n    beats  = Vector{Int64}()\n    \n    for note\
    \ in music_string.split(\" \")\n        if note == \"o\"\n            notes  =\
    \ notes + 1\n            beats  = beats + 4\n        elseif note == \"o|\"\n \
    \           notes  = notes + 1\n            beats  = beats + 2\n        elseif\
    \ note == \".|\"\n            notes  = notes + 1\n            beats  = beats +\
    \ 1\n        else\n            throw(ArgumentError(\"Bad note \" + note))\n  \
    \      end\n    end\n    return notes, beats\nend\n</cell>\n<code language=julia-1.5>\n\
    notes, beats = parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n</cell>\n<code\
    \ language=julia-1.5>\nprintln(\"$notes notes had $beats beats each\")\n</cell>\n\
    <code language=julia-1.5>\nprintln(\"The largest note had $notes[end] notes and\
    \ $beats[end] beats\")\n</cell>\n<text>\n\u0422\u0435\u043F\u0435\u0440\u044C\
    \ \u0441\u0442\u043E\u0438\u0442 \u0438\u0441\u043F\u043E\u043B\u044C\u0437\u043E\
    \u0432\u0430\u0442\u044C \u044D\u0442\u043E\u0442 \u0441\u043F\u043E\u0441\u043E\
    \u0431 \u0447\u0442\u0435\u043D\u0438\u044F \u0441\u043B\u043E\u0432\u0430\u0440\
    \u044F \u0442\u0430\u043A, \u0447\u0442\u043E\u0431\u044B \u043F\u0440\u0435\u043E\
    \u0431\u0440\u0430\u0437\u043E\u0432\u0430\u0442\u044C \u0438\u0437 \u0442\u0435\
    \u043A\u0441\u0442\u043E\u0432\u043E\u0433\u043E \u043A\u043E\u0441\u043E\u0439\
    \ \u0441\u043B\u043E\u0432\u0430\u0440\u044F \u0432 \u0432\u0435\u043A\u0442\u043E\
    \u0440\u043D\u044B\u0439 \u0444\u043E\u0440\u043C\u0430\u0442 \u0442\u0435\u043A\
    \u0441\u0442\u043E\u0432\u044B\u043C \u043F\u0440\u0435\u0434\u0441\u0442\u0430\
    \u0432\u043B\u0435\u043D\u0438\u0435\u043C.\n\u0418\u0442\u0430\u043A, \u0432\u0435\
    \u043A\u0442\u043E\u0440\u043D\u044B\u0439 \u0444\u043E\u0440\u043C\u0430\u0442\
    \ \u0442\u0435\u043A\u0441\u0442\u043E\u0432\u044B\u043C \u043F\u0440\u0435\u0434\
    \u0441\u0442\u0430\u0432\u043B\u0435\u043D\u0438\u044F \u0441\u043B\u043E\u0432\
    \u0430\u0440\u044F \u043F\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043B\u044F\
    \u0435\u0442 \u0441\u043F\u0438\u0441\u043A\u0438 \u0447\u0438\u0441\u0435\u043B\
    . \u041F\u0440\u0435\u0436\u0434\u0435 \u0432\u0441\u0435\u0433\u043E, \u044D\u0442\
    \u043E \u043F\u0440\u0435\u043E\u0431\u0440\u0430\u0437\u043E\u0432\u0430\u043D\
    \u0438\u0435 \u043F\u043E \u0438\u043D\u0434\u0435\u043A\u0441\u0430\u043C \u0438\
    \u0437 \u0441\u043F\u0438\u0441\u043A\u043E\u0432 \u0434\u0430\u043D\u043D\u044B\
    \u0445, \u0432\u0435\u043A\u0442\u043E\u0440\u043D\u044B\u043C \u043F\u0440\u0435\
    \u0434\u0441\u0442\u0430\u0432\u043B\u0435\u043D\u0438\u044F\u043C.\n\u0422\u0430\
    \u043A\u0436\u0435 \u0441\u043B\u043E\u0432\u0430\u0440\u044C \u0447\u0438\u0441\
    \u0435\u043B, \u0442\u0435\u043F\u0435\u0440\u044C \u043C\u043E\u0436\u043D\u043E\
    \ \u0443\u043A\u0430\u0437\u0430\u0442\u044C \u043A\u0430\u043A\u0438\u0435-\u0442\
    \u043E \u0430\u0442\u0440\u0438\u0431", "    #YOUR CODE HERE\n    music_string\
    \ = music_string.split(\" \").collect{|s| if s =~ /^[a-zA-Z]$/; s\n    else ;\
    \ \"o\" ; s; }\n    music_string = music_string.collect{|s| if s =~ /^([A-Za-z]|[0-9]|.)/;\
    \ s; end; }\n    music_string = music_string.collect{|s| if s =~ /\\d+$/; s; end;\
    \ }\n    music_string = music_string.collect{|s| if s =~ /\\|/; s; end; }\n  \
    \  music_string = music_string.collect{|s| if s =~ /^[oO]$/; 1; else 2; end; }\n\
    \    music_string = music_string.collect{|s| if s =~ /[\\.|]$/; 1; else 2; end;\
    \ }\n    music_string = music_string.collect{|s| if s =~ /^[\\d]+$/; 1; else 2;\
    \ end; }\n    music_string = music_string.collect{|s| if s =~ /[oO|\\.|]$/; 1;\
    \ else 2; end; }\n    music_string = music_string.collect{|s| if s =~ /^\\d+$/;\
    \ 1; else 2; end; }\n    music_string = music_string.collect{|s| if s =~ /\\|$/;\
    \ 1; else 2; end; }\n    music_string = music_string.collect{|s| if s =~ /^\\\
    d$/; 1; else 2; end; }\n    music_string = music_string.collect{|s| if s =~ /\\\
    d$/; 1; else 2; end; }\n    music_string = music_string.collect{|s| if s =~ /^[\\\
    d]$/; 1; else 2; end; }\n    music_string = music_string.collect{|s| if s =~ /^[\\\
    d]$/; 1; else 2; end; }\n    music_string = music_string.collect{|s| if s =~ /^\\\
    d$/; 1; else 2; end; }\n    music_string = music_string.collect{|s| if s =~ /^\\\
    d$/; 1; else 2; end; }\n    music_string = music_string.collect{|s| if s =~ /\\\
    d+$/; 1; else 2; end; }\n    music_string = music_string.collect{|s| if s =~ /\\\
    d+$/; 1; else 2; end; }\n    music_string = music_string.collect{|s| if s =~ /\\\
    d+$/; 1; else 2; end; }\n    music_", "    # Your code here\n    return zeros(Int64)\n\
    end\n</cell>\n<text>\nRun the cell below to test your function.", "    return\
    \ parse(music_string)\nend\n</cell>\n<code language=julia-1.5>\nparsed_music =\
    \ parse_music(music)\nparsed_music\n</cell>\n<code language=julia-1.5>", "   \
    \ # your code here\nend\n</cell>\n<code language=julia-1.5>\n# %load solutions/parse_music.jl\n\
    </cell>\n<text>\nPart C: Music Manipulation", "    music_string = music_string[1:end-1]\
    \ # remove initial space\n    music_string = music_string.split(\"|\") # split\
    \ notes by vertical pipe\n    \n    notes = Vector{Int64}()", "    # Initialize\
    \ your answer to an empty vector here\n    answer=Vector{Int64}()\n    music_array=music_string.split('\
    \ ')\n    for element in music_array\n        if element!='.'\n            music_note=element\n\
    \            music_note_length=length(music_note)\n            if music_note=='o'\
    \ or music_note=='O'\n                answer=append(answer,4)\n            elseif\
    \ music_note=='|' or music_note=='/'\n                answer=append(answer,2)\n\
    \            elseif music_note=='|'\n                answer=append(answer,1)\n\
    \            else\n                answer=append(answer,1)\n                answer=append(answer,music_note_length)\n\
    \        end\n    end\n    return answer\nend\n</cell>\n<code language=julia-1.6>\n\
    # Check your function against a small test case\n@test parse_music(\"o o| .| o|\
    \ o| .| .| .| .| o o\") == [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n</cell>\n<text>\n\
    EXTRA CREDIT:\nIf you can do it in under $3 minutes in Julia, do it!", "    if\
    \ music_string == \"o\" \n        music_string = \"o|\"\n    else \n        music_string\
    \ = \".|\"\n    end", "  music_chars = music_string.split('')\n  music_chars =\
    \ music_chars[music_chars[length((music_string)):end] .!= '.']\n  return parse_music_chars(music_chars)\n\
    end\n</cell>\n<text>\nSolution\nClick below for the solution.", "    parsed_music\
    \ = Vector{Int64}()\n    for note in music_string\n        if note == \"o\" \n\
    \            parsed_music += 4*ones(4)\n        elseif note == \"o|\" \n     \
    \       parsed_music += 2*ones(2)\n        elseif note == \".|\" \n          \
    \  parsed_music += 1*ones(1)\n        else\n            error((\"parse_music:\
    \ This note has invalid symbol: \\\"$(note)\\\"\"))\n        end\n    end\n  \
    \  return parsed_music\nend\n</cell>\n<text>\nNext, let's write a function which\
    \ takes a note and a chord and returns the chord which contains all the notes\
    \ (including itself).", "    if music_string == \"\"\n        return Vector{Int64}()\n\
    \    else\n        notes, beats = music_string.split(\" \")\n        return Vector{Int64}(split(notes))\
    \ |> sum\n    end\nend", "    \n    music_list = music_string.split(\" \")\n \
    \   \n    \n    return music_list |> map(parse_note) |> sum(+,1)\n    \nend \n\
    </cell>\n<text>\nTask\nImplement the function count_durations(music_list::Vector{String})\
    \ which returns a vector containing the duration of each note in the music list.",
  "    parsed_string=\"\"\n    parsed_string=music_string.split(\" \")\n    parsed_string=[x\
    \ for x in parsed_string if x != \"\"]\n    parsed_string=[x for x in parsed_string\
    \ if x != \"o\"]\n    parsed_string=parsed_string.map{x -> parse(Int,x)}\n   \
    \ parsed_string=parsed_string.map(x->length(x)).sum\n    return parsed_string\n\
    end\n</code>\nThis function parses the musical string and returns vector of integers\
    \ indicating number of beats per note (in this case 4 per 'o').\n<|/ a tags=julia\
    \ dscore=2 |>\n<| c |>\nThanks so much! This is very helpful!\n<|/ c |>\n<| a\
    \ tags=julia dscore=2 |>\nI do not know Julia but here is my Python version:\n\
    <code>\n# this function is made to get number of beats per note\ndef parseMusic(music):\n\
    \    result = []\n    notes = music.split(' ')\n    for note in notes:\n     \
    \   note = note.strip()\n        if note == '':\n            continue\n      \
    \  note = note.lower()\n        if 'o' in note:\n            result.append(4)\n\
    \        elif '|' in note:\n            result.append(2)\n        else:\n    \
    \        result.append(1)\n    return result", "    music_string = music_string.split(\"\
    \\\\|\")\n    music_string = [x.split(\"o\") for x in music_string]\n    music_string\
    \ = [x for x in music_string if x != []]\n    music_string = [x for x in music_string\
    \ if x != [\"\"]]\n    music_string = [x for x in music_string if x != [\".\"\
    ]]\n    music_string = [x for x in music_string if x != [\"o\"]]\n    music_string\
    \ = [x for x in music_string if x != []]\n    music_string = [x for x in music_string\
    \ if x != [\".\"]]\n    music_string = [x for x in music_string if x != [\"o\"\
    ]]\n    music_string = [x for x in music_string if x != []]\n    music_string\
    \ = [x for x in music_string if x != [\".\"]]\n    music_string = [x for x in\
    \ music_string if x != [\"o\"]]\n    music_string = [x for x in music_string if\
    \ x != []]\n    music_string = [x for x in music_string if x != [\".\"]]\n   \
    \ music_string = [x for x in music_string if x != [\"o\"]]\n    music_string =\
    \ [x for x in music_string if x != []]\n    music_string = [x for x in music_string\
    \ if x != [\".\"]]\n    music_string = [x for x in music_string if x != [\"o\"\
    ]]\n    music_string = [x for x in music_string if x != []]\n    music_string\
    \ = [x for x in music_string if x != [\".\"]]\n    music_string = [x for x in\
    \ music_string if x != [\"o\"]]\n    music_string = [x for x in music_string if\
    \ x != []]\n    music_string = [x for x in music_string if x != [\".\"]]\n   \
    \ music_string = [x for x in music_string if x != [\"o\"]]\n    music_string =\
    \ [x for x in music_string if x != []]\n    music_string = [x for x in music_string\
    \ if x != [\".\"]]\n    music_string = [x for x in music_string if x != [\"o\"\
    ]]\n    music_string = [x for x in music_string if x != []]\n    music_string\
    \ = [x for x in music_string if x != [\".\"]]\n    music_string = [x for x in\
    \ music_string if x != [\"o\"]]\n    music_string = [x for x in music_string if\
    \ x != []]\n    music_string = [x for x in music_string if x != [\".\"]]\n   \
    \ music_string = [x for x in music_string if x != [\"o\"]]", "    vector = zeros(Int,\
    \ length(music_string))\n    current_index = 0\n    \n    for note_index in 1:length(music_string)\n\
    \        note = music_string[note_index]\n        \n        if note == \"o\"\n\
    \            vector[note_index] = 4\n        end\n        \n        if note ==\
    \ \"o|\"\n            vector[note_index] = 2\n        end", '    #your code goes
    here', "    music_array = music_string.split(\" \")\n    music_length = length(music_array)\n\
    \    note_array = [music_array[i] for i in range(music_length)]\n    note_length\
    \ = length(note_array)", "    return parse_music_vec(music_string.split(\" \"\
    ))\nend", '    music_notes = music_string.split(" ")', "    music_string = music_string.strip\n\
    \    music_array = music_string.split\n    music_beats_array = Array{Int, 1}(undef,\
    \ 0)\n    for element in music_array\n        if element==\"o\"\n            music_beats_array=push!(music_beats_array,\
    \ 4)\n        elseif element==\"o|\"\n            music_beats_array=push!(music_beats_array,\
    \ 2)\n        elseif element==\".|\"\n            music_beats_array=push!(music_beats_array,\
    \ 1)\n        else\n            println(\"unknown note in music_string\")\n  \
    \      end\n    end\n    return music_beats_array\nend\n</cell>\n<code language=julia-1.0>\n\
    # Run this cell to test your function\n@test isapprox(parse_music(\"o o| .| o|\
    \ o| .| .| .| .| o o\"), [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4])\n</cell>\n<text>\n\
    Next, use the function parse_music to generate a musical composition given a vector\
    \ of notes.", "    music_string = music_string\n    music_list = split(music_string)\
    \ \n    music_vector = Vector{Int64}()\n    for notes in music_list \n       \
    \ notes = lower(notes)\n        if notes in valid_notes\n            note_count\
    \ = valid_notes[notes]\n        else\n            note_count = 1\n        end\n\
    \        for _ in 1:note_count\n            music_vector += 1 \n        end\n\
    \    end\n    return music_vector\nend\n</cell>\n<code language=julia-1.0>\n#\
    \ test your code\n# note these should all give you the same result\n@test all(parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\") == [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4])\n@test\
    \ all(parse_music(\"o o| .| o| o| .| o| .| o\") == [4, 2, 1, 2, 3, 1, 1, 1, 1,\
    \ 4, 4])\n@test all(parse_music(\"o|o o|.|o|o|.|o|\") == [4, 2, 1, 2, 3, 1, 1,\
    \ 1, 1, 4, 4])\n@test all(parse_music(\"o|o o|o|o|o|o|\") == [4, 2, 1, 2, 3, 1,\
    \ 1, 1, 1, 4, 4])\n@test all(parse_music(\"o|o o|o|o|o|o|\") == [4, 2, 1, 2, 3,\
    \ 1, 1, 1, 1, 4, 4])\n@test all(parse_music(\"o|o o|o|o|o|o|\") == [4, 2, 1, 2,\
    \ 3, 1, 1, 1, 1, 4, 4])\n@test all(parse_music(\"o|o o|o|o|o|o|\") == [4, 2, 1,\
    \ 2, 3, 1, 1, 1, 1, 4, 4])\n@test all(parse_music(\"o|o o|o|o|o|o|\") == [4, 2,\
    \ 1, 2, 3, 1, 1, 1, 1, 4, 4])\n@test all(parse_music(\"o|o o|o|o|o|o|\") == [4,\
    \ 2, 1, 2, 3, 1, 1, 1, 1, 4, 4])\n@test all(parse_music(\"o|o o|o|o|o|o|\") ==\
    \ [4, 2, 1, 2, 3, 1, 1, 1, 1, 4, 4])\n@test all(parse_music(\"o|o o|o|o|o|o|\"\
    ) == [4, 2, 1, 2, 3, 1, 1, 1, 1, 4, 4])\n@test all(parse_music(\"o|o o|o|o|o|o|\"\
    ) == [4, 2, 1, 2, 3, 1, 1, 1, 1, 4, 4])\n@test all(parse_music(\"o|o o|o|o|o|o|\"\
    ) == [4, 2, 1, 2, 3, 1, 1, 1, 1, 4, 4])\n@test all(parse_music(\"o|", "    \n\
    \    music_string.replace(\" \", \"\") #removes spaces\n    music_string.replace(\"\
    \ \", \"\") #removes spaces\n    music_string.replace(\" \", \"\") #removes spaces\n\
    \    music_string.replace(\" \", \"\") #removes spaces\n    music_string.replace(\"\
    \ \", \"\") #removes spaces\n    music_string.replace(\" \", \"\") #removes spaces\n\
    \    music_string.replace(\" \", \"\") #removes spaces", "    notes = music_string.split(\"\
    \ \")\n    vec = zeros(Int64, length(notes))\n    for i,note in enumerate(notes)\n\
    \        if note == \"o\"\n            vec[i] = 4\n        elseif note == \"o|\"\
    \n            vec[i] = 2\n        elseif note == \".|\"\n            vec[i] =\
    \ 1\n        else\n            throw(\"music string contains invalid note\")\n\
    \        end\n    end\n    return vec\nend\n</code>\n<|/ a |>\n<| c |>\nThe function\
    \ works fine on my system but throws a `NoMethodError` on julia 0.6.4 on a Mac\
    \ (same `ERROR: LoadError: MethodError: no method matching getindex(::Symbol)`\
    \ error from OP)\n<|/ c |>\n<| c |>\nI guess you have a different `getindex` defined\
    \ somewhere else. Try `using Base.getindex` to solve the issue.\n<|/ c |>\n<|\
    \ c |>\nI suspect `getindex` became a method of [`Dict`](http://docs.julialang.org/en/latest/stdlib/collections/#Base.Dict)\
    \ a long time ago in v0.6. `Dict` should have been a method of `Base` since then.\n\
    <|/ c |>\n<| c |>\nAh yes, I see now how `getindex` became a method of `Dict`.\
    \ Am I correct in thinking that this approach would require a nested for-loop?\n\
    <|/ c |>\n<| c |>\nI am not sure, but I think it would be similar. Maybe there\
    \ is some nice way that can map this into a comprehension, something like `[getindex(Dict(\"\
    o\"=>4,\"o|\"=>2,\".|\"=>1), x) for x in \"o o| .| o| o| .| .| .| .| o o\"]`.\n\
    <|/ c |>\n<| a dscore=1 |>\nHere's a solution using Julia v0.5 and functional\
    \ programming (which I believe is the preferred way in Julia).\n<code>\njulia>\
    \ function parse_music(s::String)\n           if length(s)<1\n               return\
    \ []\n           elseif s[end-1] != ' '\n               return [parse(Int, collect(s)[1:end-1])+1]\n\
    \           elseif s[end-2] != ' '\n               return [parse(Int, collect(s)[1:end-2)+1]+1]\n\
    \           elseif s[end-3] != ' '\n               return [parse(Int, collect(s)[1:end-3)+1]+1]\n\
    \           elseif s[end-4] != ' '\n               return [parse(Int, collect(s)[1:end-",
  "    music_array = music_string.split(\" \")\n    music_notes = Array{String, 1}()\n\
    \    music_beats = Array{Int, 1}()", "    music_str = music_string.split(\" \"\
    )\n    notes = music_str[2:end-1]\n    note_ints = Vector{Int64}()\n    for note\
    \ in notes\n        if note == \".\"\n            push!(note_ints, 0)\n      \
    \  elseif note == \"o\"\n            push!(note_ints, 4)\n        elseif note\
    \ == \"|\"\n            push!(note_ints, 2)\n        elseif note == \"-\"\n  \
    \          push!(note_ints, 1)\n        else\n            println(note, \"is an\
    \ invalid note\")\n            exit()\n        end\n    end\n    return note_ints\n\
    end", "    # Your code goes here\n    return music_string.split(\".\").map(parse)",
  "    music_string_array = music_string.split(\" \")\n    music_vector = zeros(length(music_string))\n\
    \    for element in music_string_array\n        if element[2] == \"o\" # whole\
    \ note, lasts four beats\n            music_vector = music_vector + 4\n      \
    \  elseif element[2] == \"o|\" # half note, lasts two beats\n            music_vector\
    \ = music_vector + 2\n        elseif element[2] == \".|\" # quater note, lasts\
    \ one beat\n            music_vector = music_vector + 1\n        end\n    end\n\
    \    return music_vector\nend\n</cell>\n<text>\nNow you can try to play with parse_music\
    \ to create musical scores of various musical forms.", '    # your code here',
  "    music_string.split(\" \") |> map(x->split(x)) |> map(x->map(Int64) ) |> map(x->sum(x)\
    \ )\nend\n</cell>\n<text>\nNow let's try to execute the function", "    music_string\
    \ = music_string[1:end-1]\n    parsed_music = parse_music_helper(music_string)\n\
    \    parsed_music_as_vec = vector(parsed_music)\n    return parsed_music_as_vec\n\
    end\n</cell>\n<code language=julia-0.6>\nmusic_notes = parse_music(\"\"\"\n  \
    \  o o|\n    \n    .|\n    \n    o|\n    \n    o|\n    \n    .|\n    \n    .|\n\
    \    \n    .|\n    \n    o|\n    \n    o|\n    \n    .|\n    \n    .|\n    \n\
    \    o|\n    \"\"\")\n</cell>\n<text>\nTask 2: Implement a function which takes\
    \ vector of integers representing musical notes and returns vector of integers\
    \ representing musical chord symbols\n    corresponding to each note. Notes will\
    \ be represented by integers from 0 to 127 (there are 127 notes), chord symbols\
    \ will be represented by\n    integers from 0 to 63.", "    music_notes = music_string.split(\"\
    \\n\")\n    music_notes_vector = []\n    for note in music_notes\n        split_note\
    \ = note.split(\" \")\n        note_vector = []\n        for note_character in\
    \ split_note\n            note_character_index = ord(note_character)\n       \
    \     note_vector.append(note_character_index)\n            music_notes_vector.append(note_character_index)\n\
    \    end\n    music_notes_vector\nend\n</cell>\n<code language=julia-1.0>\n# Run\
    \ this cell to test your code\nmusic_string = @sprintf(\"%c %c %c %c %c %c %c\
    \ %c %c %c %c %c\\n\" \u2248 \"|\" \u2248 \"|\" \u2248 \"|\" \u2248 \"|\" \u2248\
    \ \"|\" \u2248 \"|\" \u2248 \"|\" \u2248 \"|\" \u2248 \"|\" \u2248 \"|\")\n# Expected\
    \ output: music_string = \"| | | | | |\\n| | | |\"\nparsed_music = parse_music(music_string)\n\
    parsed_music\n</cell>\n<text>\nWrite a function that takes a single note and returns\
    \ the number of beat it lasts.", "    music_string = music_string[1:end] # remove\
    \ first \"o\"\n    notes = split(music_string, \" \")\n    vector = ones(length(notes))\
    \ * 4\n    for note in notes\n        if note == \"o\"\n            vector[end]\
    \ = 4\n        elseif note == \"o|\"\n            vector[end - 1] = 2\n      \
    \  elseif note == \".|\"\n            vector[end - 2] = 1\n        end\n    end\n\
    \    return vector\nend\n</cell>\n<text>\nExercise 1\nWrite a function that converts\
    \ a note name such as \"Bb3\" into the corresponding musical notation.", '  n_beats
    = parse(music_string)', '    music_string = music_string.upper()', "end\n</cell>\n\
    <text>\nTask 4 - Tokenize a Music", "        music_string_array = music_string.split(\"\
    \ \")\n        music_string_array[music_string_array.end] <- music_string_array[music_string_array.end]\n\
    \        music_string_array |> println\n        music_string_array |> println",
  "    music_notes = music_string.split(\" \") |> String.split(\"|\") |> String.split(\"\
    o\") |> collect\n    return music_notes |> Enum.map(parse_note) |> Enum.sum\n\
    end\n</code>\n<|/ a tags=functional-programming,julia |>\n<| c |>\nThanks for\
    \ the help! When I run the first function it comes back with: ERROR: MethodError:\
    \ no method matching split(::Symbol)\nClosest candidates are:\n  split(::Type{String},\
    \ pattern::AbstractString{String,N}) where {N,String} at /Users/nstenstler/Documents/Julia_Projects/Lab_10/Lab10.jl:45\n\
    \  split(::Type{String}, pattern::AbstractString) at /Users/nstenstler/Documents/Julia_Projects/Lab_10/Lab10.jl:42\n\
    \  split(::Type{String}, pattern::Any) at /Users/nstenstler/Documents/Julia_Projects/Lab_10/Lab10.jl:42",
  "</code>\nSolution\n<code>\nparse_music(music_string)\n</code>\n<|/ a |>\n<| c |>\n\
    This code returns an error for me `@assert length(music_string) == 6, \"Input\
    \ music string must be six characters in length\"` `@assert nchar(music_string)\
    \ == 6, \"Input music string must have exactly six characters\"` any ideas?\n\
    <|/ c |>\n<| c |>\nCan you provide an example of your input string? The error\
    \ indicates that your input string has more than 6 characters. Perhaps you copied\
    \ it incorrectly?\n<|/ c |>\n<| c |>\nThe input string is `o o| .| o| o| .| .|\
    \ .| .| o o` the solution you provided above returns `1` for `parse_music(\"o\
    \ o| .| o| o| .| .| .| .| o o\")` which is not correct. Thank you for helping\
    \ me though!\n<|/ c |>\n<| c |>\nThat is because you have misinterpreted the requirements,\
    \ as noted by user3702606. Your input string has 6 characters, but the function\
    \ only considers 6.\n<|/ c |>\n<| c |>\nI updated my answer. It was a typo, that\
    \ caused the function to not work as it expected.\n<|/ c |>\n<| a |>\nThe function\
    \ count_beats_per_note could be defined as:\n<code>", "# your code here\nend\n\
    </cell>\n<text>\nProblem 4 (2 points). Implement the function invert_to_pitch\
    \ which takes a string of musical notes represented by integer vector and returns\
    \ a string representation of musical notes. The function should return empty string\
    \ if musical notes are too long to represent by one integer or if there are too\
    \ many notes, for example if you try to use string representation of 12 notes.",
  "    music_vector = Vector{Int64}(undef, length(music_string))\n    for i = 1:length(music_string)\n\
    \        if music_string[i] == 'o'\n            music_vector[i] = 4\n        elseif\
    \ music_string[i] == 'o|'\n            music_vector[i] = 2\n        elseif music_string[i]\
    \ == '.|'\n            music_vector[i] = 1\n        else\n            throw(ArgumentError(\"\
    Invalid notes string in parse_music\"))\n        end\n    end\n    return music_vector\n\
    end\n</cell>\n<text>\nExercise 3", "    music_vector = music_string.split(\"\"\
    ) |> Enum.filter(x -> x != \"o\" && (x != \"|\" || x != \".\") ) |> collect\n\
    \    music_vector |> Enum.filter(x -> x == \"o\" && x <= \"o|\") |> Enum.map(x\
    \ -> 4 + (\"o|\" == x ? 2 : 1) ) |> collect\nend\n</cell>\n<code language=julia-0.4>\n\
    music_string = \"o o| .| o| o| .| .| .| .| .| o o\"\nparse_music(music_string)\n\
    </cell>\n<text>\nThe last function is very simple. It returns number of beats\
    \ corresponding to each note in a given vector. You can use it as a starting point\
    \ for parsing any string.", "    # Implement this function\n    return music_string.split(\"\
    \ \").map(x -> if x == \".\" then 0 else 1)\nend\n</cell>\n<text>\nPractice implementing\
    \ parse_music function.", "    \n    # your code here\n    \n    return \nend",
  "    \n    song_length = length_in_beats(music_string)\n    song = parse_music_string(music_string)\n\
    \    song_vector = zeros(song_length)", "    music_string = music_string.replace(\"\
    \ \", \"\")\n    music_list = music_string.split(\"|\")\n    return parse_music_list(music_list)\n\
    end", "    music_notes = music_string.split(\" \")\n    notes = Vector{Int64}()\n\
    \    for note in music_notes\n        if note == \"o\"\n            notes.push(4)\n\
    \        elseif note == \"o|\"\n            notes.push(2)\n        elseif note\
    \ == \".|\"\n            notes.push(1)\n        elseif note == \"|o\"\n      \
    \      notes.push(4)\n        else\n            println(\"Unknown note string\
    \ encountered, skipping\")\n        end\n    end\n    return notes\nend\n</cell>\n\
    <code language=julia-0.5>", "    music_list = music_string.split(\" \")\n    num_notes\
    \ = length(music_list)\n    note_vector = Vector{Int64}(undef, num_notes)\n  \
    \  for note in music_list\n        try\n            beat_count = parse_note(note)\n\
    \            note_vector[parse_note(note)] += 1\n        catch\n            error(\"\
    Parsing error: Cannot parse note `$(note)`! Aborting!\")\n        end\n    end\n\
    \    return note_vector\nend\n</cell>\n<code language=julia-0.4>\n@test parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\") == [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n</cell>\n\
    <text>\nExercise 10\nWrite function which takes as input a string representing\
    \ musical notes in a special ASCII format, and\nreturns vector of integers corresponding\
    \ to how many beats does each not last. \nFor example, here is one such string:\n\
    'o o| .| o| o| .| .| .| .| o o'\nYou should return [4, 2, 1, 2, 2, 1, 1, 1, 1,\
    \ 4, 4].", "    music_string = music_string[1:end-1]\n    notes = music_string.split(\"\
    |\")\n    \n    notes_vectors = Array(Int64, length(notes))\n    \n    i = 0\n\
    \    while i < length(notes)\n        note = notes[i]\n        \n        beat_counts\
    \ = get_beat_counts(note)\n        for c in beat_counts\n            notes_vectors[i]\
    \ = notes_vectors[i] - c\n        end\n        i = i + 1\n    end", '    parse_music=music_string.split("
    ")', "\"\"\"\n    Parse musical note from music string.", "    music_list = split(music_string)\n\
    \    music_vec = Vector{Int64}()\n    for music in music_list\n        if music\
    \ =~ \"o$\"\n            music_vec += 4\n        elseif music =~ \"o\\|\"\n  \
    \          music_vec += 2\n        elseif music =~ \"\\.\"\n            music_vec\
    \ += 1\n        else\n            error(\"Unknown music type: $music\")\n    \
    \    end\n    end\n    return music_vec\nend", "    music_string = music_string[1:end-1]\n\
    \    parts = split(music_string, \"|\")\n    notes = Dict{String, Int64}()\n \
    \   \n    for part in parts\n        beats, note = split(part, \"o\")\n      \
    \  notes[note] = beats\n    end", "    music_string = music_string\n    music_string\
    \ = music_string[1:length(music_string) - 1]\n    music_string = \"\".join(music_string)\n\
    \    music_list = music_string.split(\" \")", "    vec = [0,0,0,0]\n    for char\
    \ in music_string\n        if char == \"o\"\n            vec[2] += 1\n       \
    \ elif char == \"|\"\n            vec[1] += 1\n        else\n            vec[0]\
    \ += 1\n    end", "    music_string = music_string.replace(\"\\n\", \"\") # remove\
    \ new line characters\n    music_list = music_string.split(\" \")\n    music_list.remove(\"\
    o\")\n    music_list.remove(\"o|\")\n    music_list.remove(\"|.\")\n    return\
    \ music_list.map(parseInt)\nend", "    music_string = music_string[music_string.end-1..end]\n\
    \    music_vector = Vector{Int64}()\n    for note in music_string\n        if\
    \ note == 'o'\n            music_vector += 4\n        else if note == 'o|'\n \
    \           music_vector += 2\n        else if note == '.|'\n            music_vector\
    \ += 1\n        else\n            error(\"Not a recognized note\")\n    end\n\
    \    return music_vector\nend", "end\n</cell>\n<code language=julia-0.5>\n###\
    \ Exercise: Write a function that will take in a string representing musical notes\
    \ (as specified in the lecture)\n### and return vector of integers corresponding\
    \ to how many beats does each note last.\n### Here is a legend:\n### 'o' - whole\
    \ note, lasts four beats\n### 'o|' - half note, lasts two beats\n### '.|' - quater\
    \ note, lasts one beat", "    notes = music_string.split(\"\")\n    l = length(notes)\n\
    \    beats = zeros(l)\n    i = 1\n    note_length = length(\"o\")\n    while i\
    \ < l\n        if notes[i] == \"o\"\n            beats[i] += 4\n            i\
    \ = i + note_length\n        else\n            if notes[i] == \"|\"\n        \
    \        beats[i] += 2\n                i = i + note_length\n            else\n\
    \                if notes[i] == \".\"\n                    beats[i] += 1\n   \
    \                 i = i + note_length\n                end\n            end\n\
    \        end\n    end\n    beats\nend\n</cell>\n<code language=julia-1.3>\n# ok,\
    \ let's check our function\nparse_music(\"o o| .| o| o| .| .| .| .| o o\")\n</cell>\n\
    <text>\nPart 5 (fast)\nAs you already noticed, our function doesn't work well\
    \ for strings with lots of non-o's and dots. So we will write new one, but it\
    \ will be almost the same. As you see, it's more a copy&paste job.", "    parse_music_helper(music_string)\n\
    end", "    music_list = music_string.split(' ')\n    music_list.remove('')\n \
    \   music_list.remove('')\n    music_list.remove('')\n    music_list.remove('')\n\
    \    music_list = music_list.remove('')\n    music_list = music_list.remove('')\n\
    \    music_list = music_list.remove('')\n    music_list = music_list.remove('')\n\
    \    music_list = music_list.remove('')\n    music_list = music_list.remove('')\n\
    \    music_list = music_list.remove('')\n    music_list = music_list.remove('')\n\
    \    music_list = music_list.remove('')\n    music_list = music_list.remove('')\n\
    \    music_list = music_list.remove('')\n    music_list = music_list.remove('')\n\
    \    music_list = music_list.remove('')\n    music_list = music_list.remove('')\n\
    \    music_list = music_list.remove('')\n    music_list = music_list.remove('')\n\
    \    music_list = music_list.remove('')\n    music_list = music_list.remove('')\n\
    \    music_list = music_list.remove('')\n    music_list = music_list.remove('')\n\
    \    music_list = music_list.remove('')\n    music_list = music_list.remove('')\n\
    \    music_list = music_list.remove('')\n    music_list = music_list.remove('')\n\
    \    music_list = music_list.remove('')\n    music_list = music_list.remove('')\n\
    \    music_list = music_list.remove('')\n    music_list = music_list.remove('')\n\
    \    music_list = music_list.remove('')\n    music_list = music_list.remove('')\n\
    \    music_list = music_list.remove('')\n    music_list = music_list.remove('')\n\
    \    music_list = music_list.remove('')\n    music_list = music_list.remove('')\n\
    \    music_list = music_list.remove('')\n    music_list = music_list.remove('')\n\
    \    music_list = music_list.remove('')\n    music_list = music_list.remove('')\n\
    \    music_list = music_list.remove('')\n    music_list = music_list.remove('')\n\
    \    music_list = music_list.remove('')\n    music_list = music_list.remove('')\n\
    \    music_list = music_list.remove('')\n    music_list = music_list.remove('')\n\
    \    music_list = music_list.remove('')\n    music_list = music_list.remove('')\n\
    \    music_list = music_list.remove('')\n    music_list = musi", "    \n    music_str\
    \ = music_string.split(\" \")\n    \n    # Initialize a vector of zeros, and add\
    \ to it each of the beats\n    beats = zeros(Int, length(music_str))\n    for\
    \ ii in range(length(music_str))\n        if music_str[ii] == \"o\"\n        \
    \    beats[ii] = 4\n        \n        elseif music_str[ii] == \"o|\"\n       \
    \     beats[ii] = 2\n        \n        elseif music_str[ii] == \"|.\"\n      \
    \      beats[ii] = 1\n        end\n    end\n    return beats\nend\n</code>\n<|/\
    \ a |>\n<| c |>\nHow would you write this in Rust? I'm new to Rust and I can't\
    \ seem to figure out what to do with this function. I'm coming from Python.\n\
    <|/ c |>\n<| c |>\nI added a Rust version. Basically I split your input string\
    \ into an array of words using `.split`, then I iterate over each word and add\
    \ it to the `beats` vector if it's a note (an `o`, `|`, `|`, or `|.`). For a longer\
    \ string you will have to write more complicated logic and handle errors. Does\
    \ this help?\n<|/ c |>\n<| c |>\nYes, thank you. Your code helped me a lot. I\
    \ appreciate it.\n<|/ c |>\n<| a |>\nThere are multiple ways to do this. Here's\
    \ one:\n<code>", "end\n</cell>\n<code language=julia-1.5>", "    music_string\
    \ = music_string.replace(\"o\", \"o o\").replace(\"|\", \"o|\")\n    music_string\
    \ = music_string.replace(\".\", \".|\")\n    music_string = music_string.replace(\"\
    , \", \",\")\n    return parse_music_string(music_string)\nend", "    music_string\
    \ = music_string.strip(\" \\n\\r\")\n    \n    notes = music_string.split(//)\n\
    \    notes_vector = []\n    for note in notes\n        if note == \"\"\n     \
    \       notes_vector.append(0)\n        elseif note == \"o\"\n            notes_vector\
    \ = notes_vector + [0..-4]\n        elseif note == \"o|\"\n            notes_vector\
    \ = notes_vector + [0..-4]\n        elseif note == \".|\"\n            notes_vector\
    \ = notes_vector + [0..-1]\n        elseif note == \"o|.\"\n            notes_vector\
    \ = notes_vector + [0..-2]\n        elseif note == \".o.\"\n            notes_vector\
    \ = notes_vector + [0..-3]\n        elseif note == \".|.\"\n            notes_vector\
    \ = notes_vector + [0..-2]\n        elseif note == \".o|.\"\n            notes_vector\
    \ = notes_vector + [0..-3]\n        elseif note == \".o.|.\"\n            notes_vector\
    \ = notes_vector + [0..-4]\n        elseif note == \".o.|.\"\n            notes_vector\
    \ = notes_vector + [0..-4]\n        elseif note == \".|.|\"\n            notes_vector\
    \ = notes_vector + [0..-2]\n        elseif note == \".|.|.\"\n            notes_vector\
    \ = notes_vector + [0..-3]\n        elseif note == \".|.o\"\n            notes_vector\
    \ = notes_vector + [0..-2]\n        elseif note == \".|.o|\"\n            notes_vector\
    \ = notes_vector + [0..-3]\n        elseif note == \".|.o|.\"\n            notes_vector\
    \ = notes_vector + [0..-4]\n        elseif note == \".o.o\"\n            notes_vector\
    \ = notes_vector + [0..-1]\n        elseif note == \".o.o|\"\n            notes_vector\
    \ = notes_vector + [0..-2]\n        elseif note == \".o.o|.\"\n            notes_vector\
    \ = notes_vector + [0..-3]\n        elseif note == \".o.o|.\"\n            notes_vector\
    \ = notes_vector + [0..-4]\n        elseif note == \".o.o|.\"\n            notes_vector\
    \ = notes_vector + [0..-4]\n        elseif note == \".o.o|.\"\n            notes_vector\
    \ = notes_vector + [0..-4]\n        elseif note == \".o.o|.\"\n            notes_",
  "    # Your code here\nend\n</cell>\n<code language=julia-1.5>\n# Test your code\n\
    @assert parse_pitches(\"o o| .| o| o| .| .| .| .| o o\") == [4, 2, 1, 2, 2, 1,\
    \ 1, 1, 1, 4, 4]\n@assert parse_pitches(\"o o| o| o| .| .| .| .| .| o o\") ==\
    \ [4, 1, 1, 1, 1, 1, 1, 1, 2, 1]\n@assert parse_pitches(\"o o| o| o| .| .| .|\
    \ .| .| o o\") == [4, 1, 1, 1, 1, 1, 1, 1, 2, 1]\n@assert parse_pitches(\"o o|\
    \ o| o| .| .| .| .| .| o o\") == [4, 1, 1, 1, 1, 1, 1, 1, 2, 1]\n@assert parse_pitches(\"\
    o o| o| o| .| .| .| .| .| o o\") == [4, 1, 1, 1, 1, 1, 1, 1, 2, 1]\n@assert parse_pitches(\"\
    o o| o| o| .| .| .| .| .| o o\") == [4, 1, 1, 1, 1, 1, 1, 1, 2, 1]\n@assert parse_pitches(\"\
    o o| o| o| .| .| .| .| .| o o\") == [4, 1, 1, 1, 1, 1, 1, 1, 2, 1]\n@assert parse_pitches(\"\
    o o| o| o| .| .| .| .| .| o o\") == [4, 1, 1, 1, 1, 1, 1, 1, 2, 1]\n@assert parse_pitches(\"\
    o o| o| o| .| .| .| .| .| o o\") == [4, 1, 1, 1, 1, 1, 1, 1, 2, 1]\n@assert parse_pitches(\"\
    o o| o| o| .| .| .| .| .| o o\") == [4, 1, 1, 1, 1, 1, 1, 1, 2, 1]\n@assert parse_pitches(\"\
    o o| o| o| .| .| .| .| .| o o\") == [4, 1, 1, 1, 1, 1, 1, 1, 2, 1]\n@assert parse_pitches(\"\
    o o| o| o| .| .| .| .| .| o o\") == [4, 1, 1, 1, 1, 1, 1, 1, 2, 1]\n@assert parse_pitches(\"\
    o o| o| o| .| .| .| .| .| o o\") == [4, 1, 1, 1, 1, 1, 1, 1, 2, 1]\n@assert parse_pitches(\"\
    o o| o| o| .| .| .| .| .| o o\") == [4, 1, 1, 1, 1, 1, 1, 1, 2, 1]\n@assert parse_pitches(\"\
    o o| o| ", "    notes              = music_string.split(\" \") |> collect\n  \
    \  notes              = map(x->x.split(\"|\")[0].strip(), notes) |> map(x->x.split(\"\
    |\")[1], notes)\n    notes              = map(x->x.split(\"-\")[1], notes) |>\
    \ map(x->x.split(\"-\")[0], notes)\n    notes              = map(x->x.split(\"\
    |\")[0].strip(), notes) |> map(x->x.split(\"|\")[2], notes)\n    notes       \
    \       = map(x->x.split(\"-\")[1], notes) |> map(x->x.split(\"-\")[0], notes)\n\
    \    notes              = map(x->x.split(\"|\")[0].strip(), notes) |> map(x->x.split(\"\
    |\")[3], notes)\n    notes              = map(x->x.split(\"-\")[1], notes) |>\
    \ map(x->x.split(\"-\")[0], notes)\n    notes              = map(x->x.split(\"\
    |\")[0].strip(), notes) |> map(x->x.split(\"|\")[4], notes)\n    notes       \
    \       = map(x->x.split(\"-\")[1], notes) |> map(x->x.split(\"-\")[0], notes)\n\
    \    notes              = map(x->x.split(\"|\")[0].strip(), notes) |> map(x->x.split(\"\
    |\")[5], notes)\n    notes              = map(x->x.split(\"-\")[1], notes) |>\
    \ map(x->x.split(\"-\")[0], notes)\n    notes              = map(x->x.split(\"\
    |\")[0].strip(), notes) |> map(x->x.split(\"|\")[6], notes)\n    notes       \
    \       = map(x->x.split(\"-\")[1], notes) |> map(x->x.split(\"-\")[0], notes)\n\
    \    notes              = map(x->x.split(\"|\")[0].strip(), notes) |> map(x->x.split(\"\
    |\")[7], notes)\n    notes              = map(x->x.split(\"-\")[1], notes) |>\
    \ map(x->x.split(\"-\")[0], notes)\n    notes              = map(x->x.split(\"\
    |\")[0].strip(), notes) |> map(x->x.split(\"|\")[8], notes)\n    notes       \
    \       = map(x->x.split(\"-\")[1], notes) |> map(x->x.split(\"-\")[0], notes)\n\
    \    notes              = map(x->x.split(\"|\")[0].strip(), notes) |> map(x->x.split(\"\
    |\")[9], notes)\n    notes              = map(x->x.split(\"-\")[1], note", " \
    \   music_string = music_string.split(\" \") |> map( &String.toUpper ) |> collect\n\
    \    music_string_length = length( music_string )\n    vectorized_music_string\
    \ = Array(music_string)\n    music_vector_length = music_string_length / 4\n \
    \   music_vector = Vector{Int64}(undef, music_vector_length)\n    for i in 1:music_vector_length\n\
    \        music_vector[i] = if i < music_string_length/2 \n            4 \n   \
    \         else music_string_length - 1 - i\n    end\n    return music_vector\n\
    end", "    # your code goes here\nend\n</cell>\n<cell>\n#export\n@testset \"music\
    \ parser\" begin\n  music_string = \"o o| .| o| o| .| .| .| .| o o\"\n  music_notes\
    \ = parse_music(music_string)\n  @test music_notes[1] == 4 # whole note\n  @test\
    \ music_notes[2] == 2 # half note\n  @test music_notes[3] == 2 # quater note\n\
    \  @test music_notes[4] == 1 # rest note\n  @test music_notes[5] == 1 # rest note\n\
    \  @test music_notes[6] == 1 # rest note\n  @test music_notes[7] == 1 # rest note\n\
    \  @test music_notes[8] == 1 # rest note\n  @test music_notes[9] == 4 # whole\
    \ note\n  @test music_notes[10] == 4 # whole note\n  @test music_notes[11] ==\
    \ 4 # whole note\nend\n</cell>\n<text>\nTask 1. Implement a function that splits\
    \ given string into words by whitespaces (i.e. \" \").\nYour function should accept\
    \ a vector of strings and return vector of strings with splitted words.", "  \
    \  note_to_beats = Dict(\"o\" => 4, \"o|\" => 2, \".|\" => 1)\n    note_to_ind\
    \ = Dict(\"o\" => 0, \"o|\" => 1, \".|\" => 2)\n    note_strings = music_string.split(\"\
    |\")\n    result = Vector{Int64}()\n    for note in note_strings\n        beats\
    \ = note_to_beats[note]\n        ind = 0\n        if note == \"o\"\n         \
    \   beats = 4\n        end\n        result += beats * ones(ind)\n        note_to_ind[note]\
    \ = ind\n    end\n    return result\nend\n</cell>\n<code language=julia-1.5>",
  "    return parse(music_string)\nend", "    music_list = music_string.split(' ')\n\
    \    music_beats = 0\n    for i in music_list:\n        if i.isdigit() and not\
    \ i.isalpha():\n            music_beats += 1\n    return music_beats\nend \n</cell>\n\
    <code language=julia-1.5>\n@time \nparsed_music = parse_music(\"o o| .| o| o|\
    \ .| .| .| .| .| o o\");\nparsed_music\n</cell>\n<text>\nLet's now implement our\
    \ parse_musical function to take in a string representing musical notes in a special\
    \ ASCII format\nand return a vector of integers corresponding to how many beats\
    \ does each not last.", "    # YOUR CODE HERE\nend\n</cell>\n<text>\nLet's see\
    \ what parse_music returns:", "    note_pattern = match(r\"o+|\\\\.+|o*\", music_string)\n\
    \    notes = note_pattern |> captures\n    \n    note_counts = note_pattern |>\
    \ captures\n    note_counts = note_counts[2:end]\n    note_counts = note_counts\
    \ |> collect{case i if i mod 2 == 0 => 0 case i if i mod 2 != 0 => 1}\n    note_counts\
    \ = collect(0 => note_counts, 1 => note_counts, 2 => note_counts)\n    \n    note_counts\
    \ = vec(note_counts, 3)\n    note_counts = vec(note_counts, 3)", "    music_string\
    \ = music_string.trim()\n    music_string[music_string.end-1] = \"\"\n    notes\
    \ = music_string.split(\"o|.|\")\n    return notes\nend", "    # your code here\n\
    \    # return music_string :: Vector{Int64}\n    music_list = music_string.split(\"\
    \ \")\n    music_list = filter(x -> !(x==\"o\") && !(x==\"o|\") && !(x==\".|\"\
    ), music_list)\n    music_list = map(parse_note, music_list)\n    music_list =\
    \ map(x -> x*4, music_list)\n    music_list = map(x -> x*2, music_list)\n    music_list\
    \ = map(x -> x+4, music_list)\n    music_list = map(x -> x-1, music_list)\n  \
    \  music_list = map(x -> x, music_list)\n    music_list = map(x -> x+1, music_list)\n\
    \    music_list = map(x -> x-1, music_list)\n    music_list = map(x -> x, music_list)\n\
    \    music_list = map(x -> x+4, music_list)\n    return music_list\nend", "  \
    \  music_string.split(\"\\n\")\n    \n    music_lines = music_string.split(\"\\\
    n\")\n    music_lines[:] = filter(x -> !iswhitespace(x), music_lines)\n    music_lines[:]\
    \ = filter(x -> !isascii(x), music_lines)\n    music_lines[:] = filter(x -> !isblank(x),\
    \ music_lines)\n    \n    music_lines[:] = map(x -> parse_music_line(x), music_lines)\n\
    \    return reduce(vcat, music_lines)\nend\n</cell>\n<code language=julia-1.0>\n\
    \"\"\"\n    parse_music_line(line::String)", "# Write your code here\nend", '    music_string
    = music_string.strip()', "    notes = music_string.split('|')\n    notes = [notes[i:i+4]\
    \ for i in range(0,len(notes),4)]\n    beats = Vector{Int64}()\n    for note in\
    \ notes\n        beats = [beats[i] + note[i+1] for i in range(0,length(note),2)]\n\
    \    end\n    return beats\nend\n</cell>\n<text>\nTask 9. Write a function that\
    \ reads music from standard input and parses the music into vector of integers\n\
    \    according to the rules described above and returns the result of the function"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
