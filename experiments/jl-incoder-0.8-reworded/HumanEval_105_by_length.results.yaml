language: jl
name: HumanEval_105_by_length
results:
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    sorted_list = sort(arr)\n    reverse(sorted_list)\n    for n in sorted_list\n\
    \        if n <= 9\n            letter = digit2letter(n)\n            push!(names,\
    \ \"One\") if n == 1\n            push!(names, \"Two\") if n == 2\n          \
    \  push!(names, \"Three\") if n == 3\n            push!(names, \"Four\") if n\
    \ == 4\n            push!(names, \"Five\") if n == 5\n            push!(names,\
    \ \"Six\") if n == 6\n            push!(names, \"Seven\") if n == 7\n        \
    \    push!(names, \"Eight\") if n == 8\n            push!(names, \"Nine\") if\
    \ n == 9\n            push!(names, letter)\n        end\n    end\n    names\n\
    end\n</cell>\n<text>\nExercise 3: Implement a function that accepts a vector of\
    \ integers and returns a vector of the sums of these integers. For this exercise,\
    \ use an anonymous function.\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"if\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp0e5gmota.jl:24\nin expression starting at /tmp/tmp0e5gmota.jl:24\n"
  stdout: ''
  timestamp: 1660009177
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    if !arr.is_empty() \n        arr = sort(arr)\n        arr = reverse(arr)\n\
    \        arr = rev_dict(arr)\n    end\n    return collect(keys(arr))\nend\n</cell>\n\
    <code language=julia-1.0>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<text>\n\
    Exercise 9: Implement the function by_ten() which reverses the digits in every\
    \ number in the given vector.\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpi4a7o1o4.jl:26\nin expression starting at\
    \ /tmp/tmpi4a7o1o4.jl:26\n"
  stdout: ''
  timestamp: 1660009177
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    # return empty string if vector is empty\n    if length(arr) == 0 \n \
    \       return \"\"\n    \n    # remove duplicates from vector\n    seen = Set()\n\
    \    arr = without(seen, arr)\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1l050eys.jl:1\nin expression starting at /tmp/tmp1l050eys.jl:1\n"
  stdout: ''
  timestamp: 1660009177
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    if arr.empty()\n        return Vector{String}()\n    end\n    \n    \n\
    \    \n    index_one = findall(x->x==1, arr)\n    index_two = findall(x->x==2,\
    \ arr)\n    index_three = findall(x->x==3, arr)\n    index_four = findall(x->x==4,\
    \ arr)\n    index_five = findall(x->x==5, arr)\n    index_six = findall(x->x==6,\
    \ arr)\n    index_seven = findall(x->x==7, arr)\n    index_eight = findall(x->x==8,\
    \ arr)\n    index_nine = findall(x->x==9, arr)\n    \n    \n    \n    \n    index_minus_one\
    \ = findall(x->x==-1, arr)\n    index_minus_two = findall(x->x==-2, arr)\n   \
    \ index_minus_three = findall(x->x==-3, arr)\n    index_minus_four = findall(x->x==-4,\
    \ arr)\n    index_minus_five = findall(x->x==-5, arr)\n    index_minus_six = findall(x->x==-6,\
    \ arr)\n    index_minus_seven = findall(x->x==-7, arr)\n    index_minus_eight\
    \ = findall(x->x==-8, arr)\n    index_minus_nine = findall(x->x==-9, arr)\n  \
    \  \n    \n    \n    index_nine = findall(x->x==9, arr)\n    index_eight = findall(x->x==8,\
    \ arr)\n    index_seven = findall(x->x==7, arr)\n    index_six = findall(x->x==6,\
    \ arr)\n    index_five = findall(x->x==5, arr)\n    index_four = findall(x->x==4,\
    \ arr)\n    index_three = findall(x->x==3, arr)\n    index_two = findall(x->x==2,\
    \ arr)\n    index_one = findall(x->x==1, arr)\n    \n    \n    \n    \n    \n\
    \    \n    \n    index_minus_one = findall(x->x==-1, arr)\n    index_minus_two\
    \ = findall(x->x==-2, arr)\n    index_minus_three = findall(x->x==-3, arr)\n \
    \   index_minus_four = findall(x->x==-4, arr)\n    index_minus_five = findall(x->x==-5,\
    \ arr)\n    index_minus_six = findall(x->x==-6, arr)\n    index_minus_seven =\
    \ findall(x->x==-7, arr)\n\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp9oehnm6t.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp9oehnm6t.jl:1\n\
    in expression starting at /tmp/tmp9oehnm6t.jl:1\n"
  stdout: ''
  timestamp: 1660009177
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    \n    arr = [] if arr == [] \n    \n    if arr[0] != 1\n        arr =\
    \ sort(arr)\n    end\n    \n    arr = reverse(arr)\n    \n    digit_num = []\n\
    \    \n    for elem in arr\n        if elem < 10\n            digit_num[elem]\
    \ = to_string(elem)\n        end\n    end\n    \n    digit_num\nend\n</cell>\n\
    <text>\nNow that we've defined our own by_length function, we can use it in conjunction\
    \ with map! to quickly transform our vector:\nusing Test\n\n@testset begin\n\n\
    candidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"function\" at /tmp/tmprvfw5ill.jl:18 expected\
    \ \"end\", got \"if\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmprvfw5ill.jl:20\n\
    in expression starting at /tmp/tmprvfw5ill.jl:20\n"
  stdout: ''
  timestamp: 1660009177
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    if len(arr) == 0 \n        return vec()\n    end\n    \n    # reverse\
    \ the array\n    arr.reverse()\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp7n2g61lt.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp7n2g61lt.jl:1\n\
    in expression starting at /tmp/tmp7n2g61lt.jl:1\n"
  stdout: ''
  timestamp: 1660009177
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    if length(arr) == 0 return \"\"\n    if length(arr) == 1 return \"One\"\
    \n    if length(arr) == 2 return \"Two\"\n    if length(arr) == 3 return \"Three\"\
    \n    if length(arr) == 4 return \"Four\"\n    if length(arr) == 5 return \"Five\"\
    \n    if length(arr) == 6 return \"Six\"\n    if length(arr) == 7 return \"Seven\"\
    \n    if length(arr) == 8 return \"Eight\"\n    if length(arr) == 9 return \"\
    Nine\"\n    if length(arr) == 10 return \"Ten\"\n    if length(arr) == 11 return\
    \ \"Eleven\"\n    if length(arr) == 12 return \"Twelve\"\n    if length(arr) ==\
    \ 13 return \"Thirteen\"\n    if length(arr) == 14 return \"Fourteen\"\n    if\
    \ length(arr) == 15 return \"Fifteen\"\n    if length(arr) == 16 return \"Sixteen\"\
    \n    if length(arr) == 17 return \"Seventeen\"\n    if length(arr) == 18 return\
    \ \"Eighteen\"\n    if length(arr) == 19 return \"Nineteen\"\n    if length(arr)\
    \ == 20 return \"Twenty\"\n    if length(arr) == 21 return \"Twenty-one\"\n  \
    \  if length(arr) == 22 return \"Twenty-two\"\n    if length(arr) == 23 return\
    \ \"Twenty-three\"\n    if length(arr) == 24 return \"Twenty-four\"\n    if length(arr)\
    \ == 25 return \"Twenty-five\"\n    if length(arr) == 26 return \"Twenty-six\"\
    \n    if length(arr) == 27 return \"Twenty-seven\"\n    if length(arr) == 28 return\
    \ \"Twenty-eight\"\n    if length(arr) == 29 return \"Twenty-nine\"\n    if length(arr)\
    \ == 30 return \"Thirty\"\n    if length(arr) == 31 return \"Thirty-one\"\n  \
    \  if length(arr) == 32 return \"Thirty-two\"\n    if length(arr) == 33 return\
    \ \"Thirty-three\"\n    if length(arr) == 34 return \"Thirty-four\"\n    if length(arr)\
    \ == 35 return \"Thirty-five\"\n    if length(arr) == 36 return \"Thirty-six\"\
    \n    if length(arr) == 37 return \"Thirty-seven\"\n    if length(arr) == 38 return\
    \ \"Thirty-eight\"\n    if length(arr) == 39 return \"Thirty-nine\"\n    if length(arr)\
    \ == 40 return \"Forty\"\n    if length(arr) == 41 return \"Forty-one\"\n    if\
    \ length(arr) == 42 return \nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4imtw9d2.jl:1\nin expression starting at /tmp/tmp4imtw9d2.jl:1\n"
  stdout: ''
  timestamp: 1660009177
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    if !arr.is_empty()\n        \n        temp = sort(arr.to_a)\n        reverse(temp)\n\
    using Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsleqmh4i.jl:1\nin expression starting at /tmp/tmpsleqmh4i.jl:1\n"
  stdout: ''
  timestamp: 1660009177
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    if !arr.is_empty()\n        sorted_arr = sort(arr)\n        replaced_arr\
    \ = replace(sorted_arr, arr[1])\n        return replaced_arr\n    end\nusing Test\n\
    \n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5,\
    \ 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"\
    One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp7nu6rdeu.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp7nu6rdeu.jl:1\n\
    in expression starting at /tmp/tmp7nu6rdeu.jl:1\n"
  stdout: ''
  timestamp: 1660009177
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    if arr.length == 0\n        return Vector{String}()\n    end\n    \n \
    \   arr = sort(arr)\n    \n    if any(arr[end]>9)\n        arr[end] = 9\n    end\n\
    \    \n    return Vector{String}(\n        \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\n    )[arr]\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5,\
    \ 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"\
    One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmp6wb8_u2l.jl:35

    '
  stdout: "test set: Error During Test at /tmp/tmp6wb8_u2l.jl:38\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  type Array has no field\
    \ length\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n \
    \  [2] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmp6wb8_u2l.jl:19\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp6wb8_u2l.jl:38 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp6wb8_u2l.jl:37\ntest set:\
    \ Error During Test at /tmp/tmp6wb8_u2l.jl:39\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == Vector{String}([])\n  type Array has no field\
    \ length\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n \
    \  [2] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmp6wb8_u2l.jl:19\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp6wb8_u2l.jl:39 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp6wb8_u2l.jl:37\ntest set:\
    \ Error During Test at /tmp/tmp6wb8_u2l.jl:40\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  type Array has no field length\n  Stacktrace:\n\
    \   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] by_length(arr::Vector{Int64})\n\
    \     @ Main /tmp/tmp6wb8_u2l.jl:19\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp6wb8_u2l.jl:40 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp6wb8_u2l.jl:37\ntest set:\
    \ Error During Test at /tmp/tmp6wb8_u2l.jl:41\n  Test threw exception\n  Expres"
  timestamp: 1660009179
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    \n    arr = (sort(arr))\n    names = Vector{String}[]\n    \n    for elt\
    \ in arr\n        if elt >= 1 && elt <= 9\n            push!(names, names(elt\
    \ - 1))\n        end\n    end\n    \n    if length(arr) == 0\n        return names\n\
    \    end\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp5bk5nsdq.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp5bk5nsdq.jl:1\n\
    in expression starting at /tmp/tmp5bk5nsdq.jl:1\n"
  stdout: ''
  timestamp: 1660009177
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    if length(arr) == 0 \n        return Vector{String}()\n    elseif length(arr)\
    \ > 9\n        return []\n    else\n        sort_array = reverse(sort(arr))\n\
    \        by_length = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\"\
    , \"Seven\", \"Eight\", \"Nine\"]\n        replace_map = [\n            sort_array[i]\
    \ == 1 => \"One\",\n            sort_array[i] == 2 => \"Two\",\n            sort_array[i]\
    \ == 3 => \"Three\",\n            sort_array[i] == 4 => \"Four\",\n          \
    \  sort_array[i] == 5 => \"Five\",\n            sort_array[i] == 6 => \"Six\"\
    ,\n            sort_array[i] == 7 => \"Seven\",\n            sort_array[i] ==\
    \ 8 => \"Eight\",\n            sort_array[i] == 9 => \"Nine\",\n            sort_array[i]\
    \ == 10 => \"Ten\",\n            sort_array[i] == 11 => \"Eleven\",\n        \
    \    sort_array[i] == 12 => \"Twelve\",\n            sort_array[i] == 13 => \"\
    Thirteen\",\n            sort_array[i] == 14 => \"Fourteen\",\n            sort_array[i]\
    \ == 15 => \"Fifteen\",\n            sort_array[i] == 16 => \"Sixteen\",\n   \
    \         sort_array[i] == 17 => \"Seventeen\",\n            sort_array[i] ==\
    \ 18 => \"Eighteen\",\n            sort_array[i] == 19 => \"Nineteen\",\n    \
    \        sort_array[i] == 20 => \"Twenty\",\n            sort_array[i] == 21 =>\
    \ \"Twenty One\",\n            sort_array[i] == 22 => \"Twenty Two\",\n      \
    \      sort_array[i] == 23 => \"Twenty Three\",\n            sort_array[i] ==\
    \ 24 => \"Twenty Four\",\n            sort_array[i] == 25 => \"Twenty Five\",\n\
    \            sort_array[i] == 26 => \"Twenty Six\",\n            sort_array[i]\
    \ == 27 => \"Twenty Seven\",\n            sort_array[i] == 28 => \"Twenty Eight\"\
    ,\n            sort_array[i] == 29 => \"Twenty Nine\",\n            sort_array[i]\
    \ == 30 => \"Thirty\",\n            sort_array[i] == 31 => \"Thirty One\",\n \
    \           sort_array[i] == 32 => \"Thirty Two\",\n            sort_array[i]\
    \ == 33 => \"Thirty Three\",\n            sort_array[i] == 34 => \"Thirty Four\"\
    ,\n            sort_array[i] == 35 => \"Thirty Five\",\n            sort_array[i]\
    \ == 36 => \"Thirty Six\",\n            sort_array[i] == 37 => \"Thirty Seven\"\
    ,\n            sort_array[i] == 38 => \"Thirty Eight\",\n            sort_array[i]\
    \ == 39 => \"Thirty Nine\",\n            sort_array[i] == 40 => \"Forty\",\n \
    \           sort_array[i] == 41 \nusing Test\n\n@testset begin\n\ncandidate =\
    \ by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing separator in array expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpq5ejaip1.jl:68\nin expression starting at\
    \ /tmp/tmpq5ejaip1.jl:68\n"
  stdout: ''
  timestamp: 1660009177
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    if arr.length > 0\n        by_length_helper(arr)\n    else\n        []\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpr7foe1s9.jl:27

    '
  stdout: "test set: Error During Test at /tmp/tmpr7foe1s9.jl:30\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  type Array has no field\
    \ length\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n \
    \  [2] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmpr7foe1s9.jl:19\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpr7foe1s9.jl:30 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpr7foe1s9.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpr7foe1s9.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == Vector{String}([])\n  type Array has no field\
    \ length\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n \
    \  [2] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmpr7foe1s9.jl:19\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpr7foe1s9.jl:31 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpr7foe1s9.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpr7foe1s9.jl:32\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  type Array has no field length\n  Stacktrace:\n\
    \   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] by_length(arr::Vector{Int64})\n\
    \     @ Main /tmp/tmpr7foe1s9.jl:19\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpr7foe1s9.jl:32 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpr7foe1s9.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpr7foe1s9.jl:33\n  Test threw exception\n  Expres"
  timestamp: 1660009179
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    if !arr\n        return Vector{String}()\n    else\n        # sort and\
    \ reverse the array\n        arr = sort(arr)\n        arr = reverse(arr)\n   \
    \     # map each element from arr to its name\n        arr = map(x -> name_to_int(x),\
    \ arr)\n        # join the array with \" \" separators\n        arr = join(arr,\
    \ \" \")\n        return arr\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"\
    Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmprt9u2v2s.jl:34

    '
  stdout: "test set: Error During Test at /tmp/tmprt9u2v2s.jl:37\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  MethodError: no method\
    \ matching !(::Vector{Int64})\n  Closest candidates are:\n    !(!Matched::Function)\
    \ at ~/.conda/envs/polyglot/share/julia/base/operators.jl:1117\n    !(!Matched::Bool)\
    \ at ~/.conda/envs/polyglot/share/julia/base/bool.jl:35\n    !(!Matched::Missing)\
    \ at ~/.conda/envs/polyglot/share/julia/base/missing.jl:101\n  Stacktrace:\n \
    \  [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmprt9u2v2s.jl:19\n   [2]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmprt9u2v2s.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmprt9u2v2s.jl:36\ntest set:\
    \ Error During Test at /tmp/tmprt9u2v2s.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == Vector{String}([])\n  MethodError: no method\
    \ matching !(::Vector{Int64})\n  Closest candidates are:\n    !(!Matched::Function)\
    \ at ~/.conda/envs/polyglot/share/julia/base/operators.jl:1117\n    !(!Matched::Bool)\
    \ at ~/.conda/envs/polyglot/share/julia/base/bool.jl:35\n    !(!Matched::Missing)\
    \ at ~/.conda/envs/polyglot/share/julia/base/missing.jl:101\n  Stacktrace:\n \
    \  [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmprt9u2v2s.jl:19\n   [2]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmprt9u2v2s.jl:38 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmprt9u2v2s.jl:36\ntest set:\
    \ Error During Test at /tmp/tmprt9u2v2s.jl:39\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  MethodError: no method matching !(::Vector{Int64})\n\
    \  Closest candidates are:\n    !(!Matched::Funct"
  timestamp: 1660009180
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    if arr.size <= 0\n        return Array{String,1}()\n    end\nusing Test\n\
    \n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5,\
    \ 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"\
    One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpeerhrmn4.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpeerhrmn4.jl:1\n\
    in expression starting at /tmp/tmpeerhrmn4.jl:1\n"
  stdout: ''
  timestamp: 1660009177
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n  if arr.isEmpty \n    arr \n  else\n    arr |> sort() |> reverse |> map(\
    \ by_length )\n  end\nend\n</cell>\n<code language=julia-1.4>\nby_length([])\n\
    </cell>\n<code language=julia-1.4>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n\
    <code language=julia-1.4>\nby_length([1, 2, 3, 4, 5])\n</cell>\n<code language=julia-1.4>\n\
    by_length([])\n</cell>\n<code language=julia-1.4>\nby_length([1])\n</cell>\n<code\
    \ language=julia-1.4>\nby_length([0, 0])\n</cell>\n<code language=julia-1.4>\n\
    by_length([0, 0])\n</cell>\n<code language=julia-1.4>\nby_length([-1, 5, 10, 2,\
    \ 11, 4, 5])\n</cell>\n<text>\nThe second solution above is an incorrect solution\
    \ and should be corrected for by the function below:\nusing Test\n\n@testset begin\n\
    \ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp843mwc04.jl:25\nin expression starting at\
    \ /tmp/tmp843mwc04.jl:25\n"
  stdout: ''
  timestamp: 1660009177
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    return sort(reverse(arr))[1 .. 9] .+ reverse([\"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"])\nend\n</code>\n\
    <|/ a dscore=3 |>\n<| a tags=julia,sorting,algorithm |>\nIf it is just for educational\
    \ purposes, you can also take advantage of Julia's sorting capabilities:\n<code>\n\
    julia> function sortIntsByDigit(arr::Vector{Int})\n           return arr[\n  \
    \             reverse(sort(reverse(sort(reverse(arr)))))::Int\n           ]\n\
    \       end\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpaj3dzgqm.jl:21\nin expression starting at\
    \ /tmp/tmpaj3dzgqm.jl:21\n"
  stdout: ''
  timestamp: 1660009177
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    \n    arr = na.omit(arr)\n    arr = arr[1:end]\n    arr.sort!\n    \n\
    \    if arr.length == 0\n        return Vector{String}()\n    end\nusing Test\n\
    \n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5,\
    \ 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"\
    One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpf9q33liy.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpf9q33liy.jl:1\n\
    in expression starting at /tmp/tmpf9q33liy.jl:1\n"
  stdout: ''
  timestamp: 1660009177
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    result = Vector{String}()\n    for a in arr \n        if a > 9 || a <\
    \ 1\n            return result\n        end\n        result[a] = names[a]\n  \
    \  end\n    return result\nend\nby_length(array)\n</cell>\n<code language=julia-1.3>\n\
    using Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: UndefVarError: array not defined\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpchz4h250.jl:28\nin expression starting at /tmp/tmpchz4h250.jl:28\n"
  stdout: ''
  timestamp: 1660009177
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    \n    # Sort the array by length\n    sorted_arr = sort(arr, by = length)\
    \ \n    \n    # Go through sorted array and replace values by name\n    vector\
    \ = []\n    \n    for (i, val) in enumerate(sorted_arr)\n        if val < 1 ||\
    \ val > 9\n            next\n        end\n        \n        vector = push!(vector,\
    \ replace!(string(val), \"${val}\", \"${by_length[val]}\"))\n    end\n    \n \
    \   return vector\nend\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1,\
    \ 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([])\n</cell>\n\
    <code language=julia-1.5>\nby_length([1, -1, 55])\n</cell>\n<code language=julia-1.5>\n\
    by_length([3, 10, 1, 2, 3, 4, 9, 10])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a string as a parameter and returns the string with all spaces replaced\
    \ by \"_\".\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid interpolation syntax: \"${\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpx56tq_m6.jl:31\nin expression starting at\
    \ /tmp/tmpx56tq_m6.jl:31\n"
  stdout: ''
  timestamp: 1660009177
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    by_length = []\n    \n    if !isnothing(arr)\n        # sort all ints\
    \ between 1 and 9 inclusive\n        arr = sort(arr)\n        \n        # reverse\
    \ the sort order\n        arr[end - 1 : 1 : -1] = reverse(arr[end - 1 : 1 : -1])\n\
    \        \n        # map each digit from 1 to 9 to its corresponding name from\
    \ \"One\", \"Two\", \"Three\", ...\n        by_length[end - 1 : 1 : -1] = map(x->(x\
    \ % 10).to_s + x[1].to_s, arr)\n    end\nusing Test\n\n@testset begin\n\ncandidate\
    \ = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"\
    Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp09q7kli3.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp09q7kli3.jl:1\n\
    in expression starting at /tmp/tmp09q7kli3.jl:1\n"
  stdout: ''
  timestamp: 1660009177
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    sorted_num = sort(arr)\n    to_str = join(map(i -> \"One\", \"Two\", \"\
    Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"), sorted_num)\n\
    \    to_str2 = to_str.reverse\n    str = replace(to_str2, \" \", \"Zero\")\n \
    \   str = replace(str, \",\", \"One\")\n    str = replace(str, \"(\", \"Two\"\
    )\n    str = replace(str, \")\", \"Three\")\n    str = replace(str, \" \", \"\
    Four\")\n    return str\nend\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmp_gqyh8wz.jl:31

    '
  stdout: "test set: Error During Test at /tmp/tmp_gqyh8wz.jl:34\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  MethodError: no method\
    \ matching (::var\"#1#2\")(::Char, ::Char, ::Char, ::Char, ::Char, ::Char, ::Char,\
    \ ::Char)\n  Closest candidates are:\n    (::var\"#1#2\")(::Any) at /tmp/tmp_gqyh8wz.jl:20\n\
    \  Stacktrace:\n   [1] (::Base.var\"#4#5\"{var\"#1#2\"})(a::NTuple{8, Char})\n\
    \     @ Base ./generator.jl:36\n   [2] iterate\n     @ ./generator.jl:47 [inlined]\n\
    \   [3] collect(itr::Base.Generator{Base.Iterators.Zip{NTuple{8, String}}, Base.var\"\
    #4#5\"{var\"#1#2\"}})\n     @ Base ./array.jl:724\n   [4] map\n     @ ./abstractarray.jl:2966\
    \ [inlined]\n   [5] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmp_gqyh8wz.jl:20\n\
    \   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [7] macro expansion\n     @ /tmp/tmp_gqyh8wz.jl:34 [inlined]\n\
    \   [8] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [9] top-level scope\n     @ /tmp/tmp_gqyh8wz.jl:33\ntest set:\
    \ Error During Test at /tmp/tmp_gqyh8wz.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == Vector{String}([])\n  MethodError: no method\
    \ matching (::var\"#1#2\")(::Char, ::Char, ::Char, ::Char, ::Char, ::Char, ::Char,\
    \ ::Char)\n  Closest candidates are:\n    (::var\"#1#2\")(::Any) at /tmp/tmp_gqyh8wz.jl:20\n\
    \  Stacktrace:\n   [1] (::Base.var\"#4#5\"{var\"#1#2\"})(a::NTuple{8, Char})\n\
    \     @ Base ./generator.jl:36\n   [2] iterate\n     @ ./generator.jl:47 [inlined]\n\
    \   [3] collect(itr::Base.Generator{Base.Iterators.Zip{NTuple{8, String}}, Base.var\"\
    #4#5\"{var\"#1#2\"}})\n     @ Base ./array.jl:724\n   [4] map\n     @ ./abstractarray.jl:2966\
    \ [inlined]\n   [5] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmp_gqyh8wz.jl:20\n\
    \   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [7] macro expansion\n     @ /tmp/tmp_gqyh8wz.jl:35 [inlined]\n\
    \   [8] macro expansion\n"
  timestamp: 1660009180
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    if length(arr) == 0, return []\n    \n    arr = sort(arr)\n    rev = [reverse(arr[i])[1]\
    \ for i in 1:length(arr)]\n    arr = map(x -> x % 10 + 1, arr)\n    vec = Vector{String}()\n\
    \    for n in arr\n        if n >= 1 && n <= 9\n            push!(vec, \"One\"\
    )\n        elseif n >= 10 && n <= 99\n            push!(vec, \"Two\")\n      \
    \  elseif n >= 100 && n <= 999\n            push!(vec, \"Three\")\n        elseif\
    \ n >= 1000 && n <= 9999\n            push!(vec, \"Four\")\n        elseif n >=\
    \ 10000 && n <= 99999\n            push!(vec, \"Five\")\n        elseif n >= 100000\
    \ && n <= 999999\n            push!(vec, \"Six\")\n        elseif n >= 1000000\
    \ && n <= 9999999\n            push!(vec, \"Seven\")\n        elseif n >= 10000000\
    \ && n <= 99999999\n            push!(vec, \"Eight\")\n        elseif n >= 100000000\
    \ && n <= 999999999\n            push!(vec, \"Nine\")\n        else\n        \
    \    push!(vec, \"Huge\")\n        end\n    end\n    return rev + vec\nend\nby_length(arr)\n\
    </cell>\n<code language=julia-0.5>\n\"\"\"\n    Given a vector of integers, sort\
    \ the integers that are between 0 and 9 inclusive,\n    reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n    \"Zero\"\
    , \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\"\
    , \"Nine\".\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \",\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpm79n0hxs.jl:19\nin expression starting at /tmp/tmpm79n0hxs.jl:19\n"
  stdout: ''
  timestamp: 1660009177
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n  if arr == []\n    return []\n  else\n    arr1 = arr.sort\n    arr2 = reverse(arr1)\n\
    \    arr3 = arr2.map(tostring)\n    return arr3\n  end\nend\n</code>\n<|/ a tags=julia\
    \ |>\n<| a tags=julia dscore=2 |>\nIn Julia you can simply do it like this:\n\
    <code>\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpij2r2jvf.jl:28\nin expression starting at\
    \ /tmp/tmpij2r2jvf.jl:28\n"
  stdout: ''
  timestamp: 1660009179
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    if arr.length==0 return []\n    v = Vector{String}(undef, 9)\n    \n \
    \   for x in arr\n        if x<1 || x>9\n            push!(v,\"\")\n        elseif\
    \ x < 10\n            push!(v,name)(x)\n        else\n            push!(v,name(x-10))\n\
    \            push!(v,name(x))\n        end\n    end\n    \n    v.reverse()\n \
    \   \n    return v\nend\n</cell>\n<text>\nChallenge 3\nWrite a function that returns\
    \ the minimum element of a vector.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"\
    Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvfh6q8c5.jl:37\nin expression starting at\
    \ /tmp/tmpvfh6q8c5.jl:37\n"
  stdout: ''
  timestamp: 1660009178
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    \"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    \"\"\"\n    if arr ==\
    \ []\n        return arr\n    arr = arr |> reverse\n    for i in arr\n       \
    \ if i < 10\n            arr[i] = \"One\"\n        end\n    end\n    for i in\
    \ arr\n        if i >= 10\n            arr[i] = \"Nine\"\n        end\n    end\n\
    \    for i in arr\n        if i < 100\n            arr[i] = \"Two\"\n        end\n\
    \    end\n    for i in arr\n        if i >= 100\n            arr[i] = \"Six\"\n\
    \        end\n    end\n    for i in arr\n        if i < 1000\n            arr[i]\
    \ = \"Five\"\n        end\n    end\n    for i in arr\n        if i >= 1000\n \
    \           arr[i] = \"Four\"\n        end\n    end\n    for i in arr\n      \
    \  if i < 10000\n            arr[i] = \"Three\"\n        end\n    end\n    for\
    \ i in arr\n        if i >= 10000\n            arr[i] = \"Seven\"\n        end\n\
    \    end\n    for i in arr\n        if i < 100000\n            arr[i] = \"Eight\"\
    \n        end\n    end\n    for i in arr\n        if i >= 100000\n           \
    \ arr[i] = \"Six\"\n        end\n    end\n    for i in arr\n        if i < 1000000\n\
    \            arr[i] = \"Five\"\n        end\n    end\n    for i in arr\n     \
    \   if i >= 1000000\n            arr[i] = \"Four\"\n        end\n    end\n   \
    \ for i in arr\n        if i < 10000000\n            arr[i] = \"Three\"\n    \
    \    end\n    end\n    for i in arr\n        if i >= 10000000\n            arr[i]\
    \ = \"Two\"\n        end\n    end\n    for i in arr\n        if i < 100000000\n\
    \            arr[i] = \"One\"\n        end\n    end\n    for i in arr\n      \
    \  if i >= 100000000\n            arr[i] = \"One\"\n        end\n    end\n   \
    \ for i in arr\n        if i < 1000000000\n            arr[i] = \"One\"\n    \
    \    end\n    end\n    for i in arr\n        if i >= 1000000000\n            arr[i]\
    \ = \"One\"\n        end\n    end\n    for i in arr\n        if i < 10000000000\n\
    \            arr[i] = \"One\"\n        end\n    end\n    for i in arr\n      \
    \  if i >= 10000000000\n            arr[i] = \"One\"\n        end\n    end\n \
    \   for i in arr\n        if i < 100000000000\n            arr[i] = \"One\"\n\
    \        end\n    end\n    for i in arr\n        if i >= 100000000000\n      \
    \      arr[i] = \"One\"\n        end\n    end\n    for i in arr\n        if i\
    \ < 1000000000000\n            arr[i] = \"One\"\n        end\n    end\n    for\
    \ i in arr\n\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"for\" at /tmp/tmpj9xeh0qp.jl:142\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpj9xeh0qp.jl:1\n\
    in expression starting at /tmp/tmpj9xeh0qp.jl:1\n"
  stdout: ''
  timestamp: 1660009179
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    if !isdefined(arr)\n        return String[]\n    elseif length(arr) ==\
    \ 0\n        return String[]\n    else\n        vec = sort(arr)\n        for i\
    \ in vec\n            if i >= 1 && i <= 9\n                push!(vec, String(i))\n\
    \            end\n        end\n        return vec |> reverse\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1,\
    \ 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmphzlh6q77.jl:35

    '
  stdout: "test set: Error During Test at /tmp/tmphzlh6q77.jl:38\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  ArgumentError: isdefined:\
    \ too few arguments (expected 2)\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n\
    \     @ Main /tmp/tmphzlh6q77.jl:19\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmphzlh6q77.jl:38 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmphzlh6q77.jl:37\ntest set:\
    \ Error During Test at /tmp/tmphzlh6q77.jl:39\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == Vector{String}([])\n  ArgumentError: isdefined:\
    \ too few arguments (expected 2)\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n\
    \     @ Main /tmp/tmphzlh6q77.jl:19\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmphzlh6q77.jl:39 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmphzlh6q77.jl:37\ntest set:\
    \ Error During Test at /tmp/tmphzlh6q77.jl:40\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  ArgumentError: isdefined: too few arguments\
    \ (expected 2)\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmphzlh6q77.jl:19\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmphzlh6q77.jl:40 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmphzlh6q77.jl:37\ntest set:\
    \ Error During Test at /tmp/tmphzlh6q77.jl:41\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"]\n  ArgumentE"
  timestamp: 1660009180
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    return by_length(arr, \"\")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"\
    Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmp10hyfriy.jl:23

    '
  stdout: "test set: Error During Test at /tmp/tmp10hyfriy.jl:26\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  MethodError: no method\
    \ matching by_length(::Vector{Int64}, ::String)\n  Closest candidates are:\n \
    \   by_length(::Vector{Int64}) at /tmp/tmp10hyfriy.jl:18\n  Stacktrace:\n   [1]\
    \ by_length(arr::Vector{Int64})\n     @ Main /tmp/tmp10hyfriy.jl:19\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp10hyfriy.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp10hyfriy.jl:25\ntest set:\
    \ Error During Test at /tmp/tmp10hyfriy.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == Vector{String}([])\n  MethodError: no method\
    \ matching by_length(::Vector{Int64}, ::String)\n  Closest candidates are:\n \
    \   by_length(::Vector{Int64}) at /tmp/tmp10hyfriy.jl:18\n  Stacktrace:\n   [1]\
    \ by_length(arr::Vector{Int64})\n     @ Main /tmp/tmp10hyfriy.jl:19\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp10hyfriy.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp10hyfriy.jl:25\ntest set:\
    \ Error During Test at /tmp/tmp10hyfriy.jl:28\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  MethodError: no method matching by_length(::Vector{Int64},\
    \ ::String)\n  Closest candidates are:\n    by_length(::Vector{Int64}) at /tmp/tmp10hyfriy.jl:18\n\
    \  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmp10hyfriy.jl:19\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp10hyfriy.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ ~"
  timestamp: 1660009181
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    if length(arr) == 0 return []\n    \n    vec = Vector{String}(undef, 0)\n\
    \    \n    for n in arr\n        if 1 <= n <= 9\n            push!(vec, names(n).(n))\n\
    \        end\n    end\n    \n    return vec\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpcj7mioye.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpcj7mioye.jl:1\n\
    in expression starting at /tmp/tmpcj7mioye.jl:1\n"
  stdout: ''
  timestamp: 1660009179
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    if length(arr) == 0 \n        [] \n    else\n        vec = []\n      \
    \  for elem in arr\n            if elem < 1 || elem > 9\n                push!(vec,\
    \ \"Invalid\")\n            else\n                push!(vec, by_length(sort([(elem\
    \ - 1) / 10, elem % 10])))\n            end\n        end\n        vec\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpxu8uyji4.jl:35

    '
  stdout: "test set: Error During Test at /tmp/tmpxu8uyji4.jl:38\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  MethodError: no method\
    \ matching by_length(::Vector{Float64})\n  Closest candidates are:\n    by_length(!Matched::Vector{Int64})\
    \ at /tmp/tmpxu8uyji4.jl:18\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n\
    \     @ Main /tmp/tmpxu8uyji4.jl:27\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpxu8uyji4.jl:38 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpxu8uyji4.jl:37\ntest set:\
    \ Error During Test at /tmp/tmpxu8uyji4.jl:40\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  MethodError: no method matching by_length(::Vector{Float64})\n\
    \  Closest candidates are:\n    by_length(!Matched::Vector{Int64}) at /tmp/tmpxu8uyji4.jl:18\n\
    \  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmpxu8uyji4.jl:27\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpxu8uyji4.jl:40 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpxu8uyji4.jl:37\ntest set:\
    \ Error During Test at /tmp/tmpxu8uyji4.jl:41\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"]\n  MethodError: no\
    \ method matching by_length(::Vector{Float64})\n  Closest candidates are:\n  \
    \  by_length(!Matched::Vector{Int64}) at /tmp/tmpxu8uyji4.jl:18\n  Stacktrace:\n\
    \   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmpxu8uyji4.jl:27\n  \
    \ [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpxu8uyji4.jl:41 [inlined]\n\
    \   [4] macro expansion\n     @ "
  timestamp: 1660009181
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    if length!(arr) == 0 \n        return arr\n    else\n        return Vector{String}()\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpgmqixq7q.jl:27

    '
  stdout: "test set: Error During Test at /tmp/tmpgmqixq7q.jl:30\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  UndefVarError: length!\
    \ not defined\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmpgmqixq7q.jl:19\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpgmqixq7q.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpgmqixq7q.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpgmqixq7q.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == Vector{String}([])\n  UndefVarError: length!\
    \ not defined\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmpgmqixq7q.jl:19\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpgmqixq7q.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpgmqixq7q.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpgmqixq7q.jl:32\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  UndefVarError: length! not defined\n\
    \  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmpgmqixq7q.jl:19\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpgmqixq7q.jl:32 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpgmqixq7q.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpgmqixq7q.jl:33\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"]\n  UndefVarError:\
    \ length! not defined\n  Stacktrace:\n   [1] by_length(arr::Vect"
  timestamp: 1660009180
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    if length(arr) == 0\n        return []\n    else\n        # sort by length\n\
    \        arr.sort!\n        # reverse the vector\n        arr.reverse!\n     \
    \   # replace each number by the corresponding name from the list \n        arr\
    \ = map((_num_to_str[x+1]).(arr))\n        arr\n    end\nend\n</code>\n<|/ a dscore=0\
    \ |>\n<| c |>\nThis doesn't sort the numbers in the correct order. The sort method\
    \ in the Vector class doesn't sort the values in the vector in any particular\
    \ order - it just changes the order in which they are printed to the console.\n\
    <|/ c |>\n<| c |>\nThank you for bringing this to my attention. I've fixed my\
    \ answer.\n<|/ c |>\n<| a dscore=0 |>\nThis could be done more simply, with some\
    \ help from Julia's Sorting package and strings:\n<code>\nusing Sorting # Sort\
    \ by value by default\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpejwrbxj6.jl:31\nin expression starting at\
    \ /tmp/tmpejwrbxj6.jl:31\n"
  stdout: ''
  timestamp: 1660009179
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    result = \"\"\n    \n    if !arr \n        return result \n    end\nusing\
    \ Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1,\
    \ 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpigtyk77h.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpigtyk77h.jl:1\n\
    in expression starting at /tmp/tmpigtyk77h.jl:1\n"
  stdout: ''
  timestamp: 1660009179
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    if length(arr) == 0 \n        return Vector{String}() \n    end\n    \n\
    \    l = sort(arr)\n    \n    i = length(l)\n    while i >= 2 \n        l[i \u2212\
    \ 1] = arr[i]\n        l[i \u2212 1] = arr[i + 1]\n        i \u2212 2\n    end\n\
    \    \n    while i <= length(arr) \n        l[i \u2212 1] = arr[i]\n        i\
    \ \u2212 1 \n    end\n    \n    return reverse(l)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3])\
    \ == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"\
    One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\t@test(candidate([1,\
    \ -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2]) == [\"Three\", \"Two\"\
    , \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpqisf4gd6.jl:41

    '
  stdout: "test set: Error During Test at /tmp/tmpqisf4gd6.jl:44\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  BoundsError: attempt\
    \ to access 8-element Vector{Int64} at index [9]\n  Stacktrace:\n   [1] getindex\n\
    \     @ ./array.jl:861 [inlined]\n   [2] by_length(arr::Vector{Int64})\n     @\
    \ Main /tmp/tmpqisf4gd6.jl:28\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpqisf4gd6.jl:44 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpqisf4gd6.jl:43\ntest set:\
    \ Error During Test at /tmp/tmpqisf4gd6.jl:46\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmpqisf4gd6.jl:28\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpqisf4gd6.jl:46 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpqisf4gd6.jl:43\ntest set:\
    \ Error During Test at /tmp/tmpqisf4gd6.jl:47\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"]\n  BoundsError: attempt\
    \ to access 4-element Vector{Int64} at index [5]\n  Stacktrace:\n   [1] getindex\n\
    \     @ ./array.jl:861 [inlined]\n   [2] by_length(arr::Vector{Int64})\n     @\
    \ Main /tmp/tmpqisf4gd6.jl:28\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpqisf4gd6.jl:47 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @"
  timestamp: 1660009180
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    if length(arr)==0\n        empty\n    else\n        by_length(sort!(arr[first:last],\
    \ lt=lt))\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpfiup0v_o.jl:27

    '
  stdout: "test set: Error During Test at /tmp/tmpfiup0v_o.jl:30\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  MethodError: no method\
    \ matching (::Colon)(::typeof(first), ::typeof(last))\n  Closest candidates are:\n\
    \    (::Colon)(::T, ::Any, !Matched::T) where T at ~/.conda/envs/polyglot/share/julia/base/range.jl:40\n\
    \    (::Colon)(::T, !Matched::T) where T at ~/.conda/envs/polyglot/share/julia/base/range.jl:7\n\
    \    (::Colon)(!Matched::T, ::Any, !Matched::T) where T<:Real at ~/.conda/envs/polyglot/share/julia/base/range.jl:41\n\
    \    ...\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmpfiup0v_o.jl:22\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpfiup0v_o.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpfiup0v_o.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpfiup0v_o.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == Vector{String}([])\n  MethodError: Cannot `convert`\
    \ an object of type typeof(empty) to an object of type Vector{String}\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{Vector{String}}, !Matched::LibGit2.StrArrayStruct) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LibGit2/src/strarray.jl:13\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at ~/.conda/envs/polyglot/share/julia/base/array.jl:554\n\
    \    ...\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmpfiup0v_o.jl:20\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpfiup0v_o.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/en"
  timestamp: 1660009182
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    if length(arr) == 0\n        return Vector{}\n    end\n    \n    first\
    \ = arr[1]\n    last = arr[length(arr)]\n    reverse(arr)\n    for el in arr\n\
    \        if el > 1 && el < 9\n            return Vector{String}(\n           \
    \     \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"\
    Eight\", \"Nine\"\n            )[el]\n        elseif el == first\n           \
    \ return reverse(Vector{String}(\"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\"))[last]\n        elseif el == last\n\
    \            return reverse(Vector{String}(\"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"))[first]\n        else\n \
    \           println(\"Unexpected vector element: $(el)\")\n        end\n    end\n\
    \    return []\nend\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t\
    @test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpgjpqjcy6.jl:43

    '
  stdout: "test set: Error During Test at /tmp/tmpgjpqjcy6.jl:46\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  MethodError: no method\
    \ matching Vector{String}(::String, ::String, ::String, ::String, ::String, ::String,\
    \ ::String, ::String, ::String)\n  Closest candidates are:\n    Array{T, N}(!Matched::Nothing,\
    \ ::Any...) where {T, N} at ~/.conda/envs/polyglot/share/julia/base/baseext.jl:42\n\
    \    Array{T, N}(!Matched::Missing, ::Any...) where {T, N} at ~/.conda/envs/polyglot/share/julia/base/baseext.jl:43\n\
    \  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmpgjpqjcy6.jl:28\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpgjpqjcy6.jl:46 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpgjpqjcy6.jl:45\ntest set:\
    \ Error During Test at /tmp/tmpgjpqjcy6.jl:47\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == Vector{String}([])\n  MethodError: Cannot `convert`\
    \ an object of type Type{Vector} to an object of type Vector{String}\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{Vector{String}}, !Matched::LibGit2.StrArrayStruct) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LibGit2/src/strarray.jl:13\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at ~/.conda/envs/polyglot/share/julia/base/array.jl:554\n\
    \    ...\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmpgjpqjcy6.jl:20\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpgjpqjcy6.jl:47 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdli"
  timestamp: 1660009182
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    if length(arr)==0 return [] \n    if length(arr)==1 return [\"One\"]\n\
    \    let arr2 = arr |> Vector{Int64}\n    sort(arr2) |> reverse \n    map(x->to_string(Int64(x)),\
    \ arr2) |> Vector{String}\nend\n</cell>\n<text>\nExercise 4: Given two vectors\
    \ A and B, return a new vector where each element of A gets mapped to its index\
    \ in B, followed by each element of B to the next index in B.\nusing Test\n\n\
    @testset begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8,\
    \ 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\t@test(candidate([1,\
    \ -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2]) == [\"Three\", \"Two\"\
    , \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyeq4rcyt.jl:25\nin expression starting at\
    \ /tmp/tmpyeq4rcyt.jl:25\n"
  stdout: ''
  timestamp: 1660009179
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    \n    if arr.is_empty\n        return Vector{String}()\n    \n    digits\
    \ = Int64[]\n    for i in arr\n        push!(digits, i)\n    end\n    \n    return\
    \ [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\"\
    , \"Nine\"][digits]\nend\n</cell>\n<code language=julia-1.6>\nby_length([\"a\"\
    , \"b\", \"c\", \"d\"])\n</cell>\n<text>\nThe function replace\nReplace the first\
    \ occurrence of a substring in a string with a different string.\nusing Test\n\
    \n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5,\
    \ 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"\
    One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4r3wbrin.jl:30\nin expression starting at\
    \ /tmp/tmp4r3wbrin.jl:30\n"
  stdout: ''
  timestamp: 1660009179
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    sort!(arr, lt=less) \n    arr[2:end] = reverse(arr[2:end]) # reverse the\
    \ vector\n    arr[1:end-1] = map(str, arr[1:end-1]) # convert the elements to\
    \ strings\nend\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmp26r18pdy.jl:25

    '
  stdout: "test set: Error During Test at /tmp/tmp26r18pdy.jl:28\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  UndefVarError: less\
    \ not defined\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmp26r18pdy.jl:19\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp26r18pdy.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp26r18pdy.jl:27\ntest set:\
    \ Error During Test at /tmp/tmp26r18pdy.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == Vector{String}([])\n  UndefVarError: less not\
    \ defined\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmp26r18pdy.jl:19\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp26r18pdy.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp26r18pdy.jl:27\ntest set:\
    \ Error During Test at /tmp/tmp26r18pdy.jl:30\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  UndefVarError: less not defined\n  Stacktrace:\n\
    \   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmp26r18pdy.jl:19\n  \
    \ [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp26r18pdy.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp26r18pdy.jl:27\ntest set:\
    \ Error During Test at /tmp/tmp26r18pdy.jl:31\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"]\n  UndefVarError:\
    \ less not defined\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n "
  timestamp: 1660009180
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n  if arr.length == 0\n    return []\n  \n  lower = 1\n  upper = 9\n  \n  result\
    \ = []\n  while lower <= upper\n    element = arr[lower]\n    index = lower\n\
    \    \n    while element < 0\n      lower += 1\n      element = arr[lower]\n \
    \   end\n    \n    while element > 0\n      upper -= 1\n      element = arr[upper]\n\
    \    end\n    \n    if element == -1\n      result.push(\"One\")\n    elseif element\
    \ == -2\n      result.push(\"Two\")\n    elseif element == -3\n      result.push(\"\
    Three\")\n    elseif element == -4\n      result.push(\"Four\")\n    elseif element\
    \ == -5\n      result.push(\"Five\")\n    elseif element == -6\n      result.push(\"\
    Six\")\n    elseif element == -7\n      result.push(\"Seven\")\n    elseif element\
    \ == -8\n      result.push(\"Eight\")\n    elseif element == -9\n      result.push(\"\
    Nine\")\n    end\n    \n    arr[lower] = -1\n    arr[upper] = -2\n  end\n  \n\
    \  return result\nend\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpmard1kce.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpmard1kce.jl:1\n\
    in expression starting at /tmp/tmpmard1kce.jl:1\n"
  stdout: ''
  timestamp: 1660009179
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    \n    sorted_arr = sort(arr)\n    \n    if length(sorted_arr) == 0\n \
    \       \n        error(\"empty array\")\n        \n    end\n    \n    if length(sorted_arr)\
    \ == 1\n        \n        by_length(Vector{Int64}[])\n        \n    end\nusing\
    \ Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1,\
    \ 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpc01_iyed.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpc01_iyed.jl:1\n\
    in expression starting at /tmp/tmpc01_iyed.jl:1\n"
  stdout: ''
  timestamp: 1660009179
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    vec = copy(arr)\n    vec[vec .< 1] = one(10)\n    vec[vec .> 9] = one(10)\n\
    \    vec[vec .== 1] = \"One\"\n    vec[vec .== 2] = \"Two\"\n    vec[vec .== 3]\
    \ = \"Three\"\n    vec[vec .== 4] = \"Four\"\n    vec[vec .== 5] = \"Five\"\n\
    \    vec[vec .== 6] = \"Six\"\n    vec[vec .== 7] = \"Seven\"\n    vec[vec .==\
    \ 8] = \"Eight\"\n    vec[vec .== 9] = \"Nine\"\n    return vec\nend\n</cell>\n\
    <code language=julia-0.4>\n\"\"\"\n    Given a vector of integers, sort the integers\
    \ that are between 0 and 9 inclusive,\n    reverse the resulting vector, and then\
    \ replace each digit by its corresponding name from\n    \"0\", \"1\", \"2\",\
    \ \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\".\nusing Test\n\n@testset begin\n\
    \ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpz43stqtp.jl:33\nin expression starting at\
    \ /tmp/tmpz43stqtp.jl:33\n"
  stdout: ''
  timestamp: 1660009179
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    \n    ans = Vector{String}(undef, length(arr))\n    \n    lens = map(x\
    \ -> x.length, arr)\n    if sum(lens) > 9 \n        for (ix, l) in enumerate([9,\
    \ 7, 5, 3, 1])\n            if lens[ix] == l\n                ans[ix] = ones[l-1]\n\
    \            else\n                ans[ix] = names[l-1]\n        end\n    else\n\
    \        for (l, v) in zip(lens, names)\n            if l == v.length\n      \
    \          ans[length(svec(x))] = v\n            else\n                push!(ans,\
    \ v)\n            end\n        end\n    end\n    ans\nend\n    \n\"\"\"\n    Given\
    \ an array of integers, remove all instances of each digit from each integer.\n\
    \    This will result in an array of strings with each element in the array being\
    \ the name of\n    that digit.\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmpotrvp956.jl:24 expected \"\
    end\", got \"else\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpotrvp956.jl:30\n\
    in expression starting at /tmp/tmpotrvp956.jl:30\n"
  stdout: ''
  timestamp: 1660009180
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n        \n    if length(arr)==0\n        return Vector{String}()\n    end\n\
    \    \n    if any(arr .< 1 .or arr .> 9)\n        return Vector{String}()\n  \
    \  end\n    \n    vector = Vector{String}(repeat(\"\", ndigits(arr) - 1))\n  \
    \  vector[arr .<= 9] .= ones_name\n    vector[arr .> 9] .= tens_name\n    \n \
    \   return vector\nend\n</cell>\n<text>\nWe can now use by_length to solve the\
    \ problem of determining whether a sequence of numbers is in order or not.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1,\
    \ 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: space before \".\" not allowed in \"1 .\" at\
    \ /tmp/tmpeplr05e1.jl:24\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpeplr05e1.jl:24\n\
    in expression starting at /tmp/tmpeplr05e1.jl:24\n"
  stdout: ''
  timestamp: 1660009180
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    \n    if arr.length==0\n        throw(ArgumentError(\"Vector length must\
    \ be at least one\"))\n    end\n    \n    vec = Vector{String}(length(arr))\n\
    \    for elem in arr\n        if elem < 1 || elem > 9\n            throw(ArgumentError(\"\
    Invalid number: $elem\"))\n        end\n        push!(vec, one_digit_name(elem))\n\
    \    end\n    vec\nend\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpv1wvbalu.jl:35

    '
  stdout: "test set: Error During Test at /tmp/tmpv1wvbalu.jl:38\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  type Array has no field\
    \ length\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n \
    \  [2] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmpv1wvbalu.jl:20\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpv1wvbalu.jl:38 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpv1wvbalu.jl:37\ntest set:\
    \ Error During Test at /tmp/tmpv1wvbalu.jl:39\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == Vector{String}([])\n  type Array has no field\
    \ length\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n \
    \  [2] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmpv1wvbalu.jl:20\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpv1wvbalu.jl:39 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpv1wvbalu.jl:37\ntest set:\
    \ Error During Test at /tmp/tmpv1wvbalu.jl:40\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  type Array has no field length\n  Stacktrace:\n\
    \   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] by_length(arr::Vector{Int64})\n\
    \     @ Main /tmp/tmpv1wvbalu.jl:20\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpv1wvbalu.jl:40 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpv1wvbalu.jl:37\ntest set:\
    \ Error During Test at /tmp/tmpv1wvbalu.jl:41\n  Test threw exception\n  Expres"
  timestamp: 1660009182
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    if arr.length == 0\n        Vector{String}()\n    elsif arr.length ==\
    \ 1\n        Vector{String}(\"One\")\n    else\n        rev = reverse(reverse(arr))\n\
    \        Vector{String}(undef, 9).take(9) |> map(x->\n            if x < 10 &&\
    \ x > 0\n                names(x)[x - 1]\n            else\n                x\n\
    \            end\n        ) |> Vector{String}\n    end\nend\n</cell>\n<code language=julia-0.6>\n\
    using Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"arr\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp9ax7ztal.jl:21\nin expression starting at /tmp/tmp9ax7ztal.jl:21\n"
  stdout: ''
  timestamp: 1660009180
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    sort_by_length(arr)\n    arr_reverse(arr)\n    map_string_to_string(arr)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmps1dsaw26.jl:25

    '
  stdout: "test set: Error During Test at /tmp/tmps1dsaw26.jl:28\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  UndefVarError: sort_by_length\
    \ not defined\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmps1dsaw26.jl:19\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmps1dsaw26.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmps1dsaw26.jl:27\ntest set:\
    \ Error During Test at /tmp/tmps1dsaw26.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == Vector{String}([])\n  UndefVarError: sort_by_length\
    \ not defined\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmps1dsaw26.jl:19\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmps1dsaw26.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmps1dsaw26.jl:27\ntest set:\
    \ Error During Test at /tmp/tmps1dsaw26.jl:30\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  UndefVarError: sort_by_length not defined\n\
    \  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmps1dsaw26.jl:19\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmps1dsaw26.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmps1dsaw26.jl:27\ntest set:\
    \ Error During Test at /tmp/tmps1dsaw26.jl:31\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"]\n  UndefVarError:\
    \ sort_by_length not defined\n  Stacktrace"
  timestamp: 1660009182
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    if length(arr) == 0 \n        return \"\"\n    end\n    \n    arr = arr[2:end]\n\
    \    \n    arr1 = sort(arr)\n    arr2 = reverse(arr1)\n    \n    arr3 = arr2.copy()\n\
    \    arr4 = Array{String,1}(fill(\"\",length(arr)))\n    \n    for i in 1:length(arr)\n\
    \        if i <length(arr3)\n            arr4[i] = arr3[i]\n        end\n    end\n\
    \    \n    for i in 1:length(arr4)\n        if arr4[i] != \"Zero\"\n         \
    \   if arr4[i] != \"One\"\n                if arr4[i] != \"Two\"\n           \
    \         if arr4[i] != \"Three\"\n                        if arr4[i] != \"Four\"\
    \n                            if arr4[i] != \"Five\"\n                       \
    \         if arr4[i] != \"Six\"\n                                    if arr4[i]\
    \ != \"Seven\"\n                                        if arr4[i] != \"Eight\"\
    \n                                            if arr4[i] != \"Nine\"\n       \
    \                                         arr4[i] = \"One\"\n                \
    \                            end\n                                        end\n\
    \                                    end\n                                end\n\
    \                            end\n                        end\n              \
    \      end\n                end\n            end\n        end\n    end\n    \n\
    \    arr4\nend\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmplij5u1zu.jl:65

    '
  stdout: "test set: Error During Test at /tmp/tmplij5u1zu.jl:68\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  type Array has no field\
    \ copy\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2]\
    \ by_length(arr::Vector{Int64})\n     @ Main /tmp/tmplij5u1zu.jl:28\n   [3] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmplij5u1zu.jl:68 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmplij5u1zu.jl:67\ntest set:\
    \ Error During Test at /tmp/tmplij5u1zu.jl:69\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == Vector{String}([])\n  MethodError: Cannot `convert`\
    \ an object of type String to an object of type Vector{String}\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{Vector{String}}, !Matched::LibGit2.StrArrayStruct) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LibGit2/src/strarray.jl:13\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at ~/.conda/envs/polyglot/share/julia/base/array.jl:554\n\
    \    ...\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmplij5u1zu.jl:20\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmplij5u1zu.jl:69 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmplij5u1zu.jl:67\ntest set:\
    \ Error During Test at /tmp/tmplij5u1zu.jl:70\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  type Array has no field copy\n  Stacktrace:\n\
    \   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] by_"
  timestamp: 1660009183
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    \n    if length(arr) == 0\n        return Vector{String}()\n    end\n\
    \    \n    if arr[1] <= 9 \n        return [\"One\"]\n    else\n        return\
    \ [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\"\
    , \"Nine\"]\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmppgf_uts5.jl:32

    '
  stdout: "test set: Test Failed at /tmp/tmppgf_uts5.jl:35\n  Expression: candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n   Evaluated: [\"One\"] == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppgf_uts5.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppgf_uts5.jl:34\ntest set: Test\
    \ Failed at /tmp/tmppgf_uts5.jl:38\n  Expression: candidate([1, -1, 3, 2]) ==\
    \ [\"Three\", \"Two\", \"One\"]\n   Evaluated: [\"One\"] == [\"Three\", \"Two\"\
    , \"One\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppgf_uts5.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppgf_uts5.jl:34\ntest set: Test\
    \ Failed at /tmp/tmppgf_uts5.jl:39\n  Expression: candidate([9, 4, 8]) == [\"\
    Nine\", \"Eight\", \"Four\"]\n   Evaluated: [\"One\"] == [\"Nine\", \"Eight\"\
    , \"Four\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppgf_uts5.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppgf_uts5.jl:34\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     3      5\n"
  timestamp: 1660009182
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    \n    # Sort before reverse to avoid overwriting the values\n    arr =\
    \ sort(arr)\n    \n    arr.reverse()\n    \n    # Replace the value with its corresponding\
    \ name\n    arr = arr.map(x => one_letter(x)) \n    \n    return arr\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1,\
    \ 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmp87h5u8lt.jl:32

    '
  stdout: "test set: Error During Test at /tmp/tmp87h5u8lt.jl:35\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  type Array has no field\
    \ reverse\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n\
    \   [2] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmp87h5u8lt.jl:23\n  \
    \ [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp87h5u8lt.jl:35 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp87h5u8lt.jl:34\ntest set:\
    \ Error During Test at /tmp/tmp87h5u8lt.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == Vector{String}([])\n  type Array has no field\
    \ reverse\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n\
    \   [2] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmp87h5u8lt.jl:23\n  \
    \ [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp87h5u8lt.jl:36 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp87h5u8lt.jl:34\ntest set:\
    \ Error During Test at /tmp/tmp87h5u8lt.jl:37\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  type Array has no field reverse\n  Stacktrace:\n\
    \   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] by_length(arr::Vector{Int64})\n\
    \     @ Main /tmp/tmp87h5u8lt.jl:23\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp87h5u8lt.jl:37 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp87h5u8lt.jl:34\ntest set:\
    \ Error During Test at /tmp/tmp87h5u8lt.jl:38\n  Test threw exception\n  Exp"
  timestamp: 1660009182
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    vec=Vector{String}(\"\")\n    vec=vec:+str((arr==1)&!arr==9&arr>1&arr<9)?\"\
    One\":\"Two\"\n    vec=vec:+str((arr==2)&!arr==9&arr>2&arr<9)?\"Two\":\"Three\"\
    \n    vec=vec:+str((arr==3)&!arr==9&arr>3&arr<9)?\"Three\":\"Four\"\n    vec=vec:+str((arr==4)&!arr==9&arr>4&arr<9)?\"\
    Four\":\"Five\"\n    vec=vec:+str((arr==5)&!arr==9&arr>5&arr<9)?\"Five\":\"Six\"\
    \n    vec=vec:+str((arr==6)&!arr==9&arr>6&arr<9)?\"Six\":\"Seven\"\n    vec=vec:+str((arr==7)&!arr==9&arr>7&arr<9)?\"\
    Seven\":\"Eight\"\n    vec=vec:+str((arr==8)&!arr==9&arr>8&arr<9)?\"Eight\":\"\
    Nine\"\n    vec\nend\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: space required before \"?\" operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppbq7op3s.jl:20\nin expression starting at\
    \ /tmp/tmppbq7op3s.jl:20\n"
  stdout: ''
  timestamp: 1660009180
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    if length(arr) == 0 \n        return Vector{String}() \n    end\n    \n\
    \    arr = sort(arr)\n    arr = reverse(arr)\n    digits = Vector{String}(1:9)\n\
    \    for d in digits\n        arr[find(arr == d)] = digits[d]\n    end\n    return\
    \ arr\nend\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpc5540scx.jl:33

    '
  stdout: "test set: Error During Test at /tmp/tmpc5540scx.jl:36\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  MethodError: Cannot\
    \ `convert` an object of type Int64 to an object of type String\n  Closest candidates\
    \ are:\n    convert(::Type{String}, !Matched::String) at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n    [1] setindex!(A::Vector{String}, x::Int64, i1::Int64)\n\
    \      @ Base ./array.jl:903\n    [2] copyto_unaliased!\n      @ ./abstractarray.jl:1018\
    \ [inlined]\n    [3] copyto!\n      @ ./abstractarray.jl:998 [inlined]\n    [4]\
    \ copyto_axcheck!\n      @ ./abstractarray.jl:1104 [inlined]\n    [5] Vector{String}(x::UnitRange{Int64})\n\
    \      @ Base ./array.jl:563\n    [6] by_length(arr::Vector{Int64})\n      @ Main\
    \ /tmp/tmpc5540scx.jl:25\n    [7] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [8] macro expansion\n      @ /tmp/tmpc5540scx.jl:36 [inlined]\n\
    \    [9] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [10] top-level scope\n      @ /tmp/tmpc5540scx.jl:35\ntest set:\
    \ Error During Test at /tmp/tmpc5540scx.jl:38\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  MethodError: Cannot `convert` an object\
    \ of type Int64 to an object of type String\n  Closest candidates are:\n    convert(::Type{String},\
    \ !Matched::String) at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/b"
  timestamp: 1660009183
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    if length(arr) == 0 \n        Vector{String}() \n    else \n        by_length(arr[1\
    \ : end-1]) \n    end\nend\n\"\"\"\n    Given a vector of integers, sort the integers\
    \ that are between 2 and 18 inclusive,\n    reverse the resulting vector, and\
    \ then replace each digit by its corresponding name from\n    \"Ten\", \"Eleven\"\
    , \"Twelve\", \"Thirteen\", \"Fourteen\", \"Fifteen\", \"Sixteen\", \"Seventeen\"\
    , \"Eighteen\", \"Nineteen\".\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvsiktsv_.jl:25\nin expression starting at\
    \ /tmp/tmpvsiktsv_.jl:25\n"
  stdout: ''
  timestamp: 1660009180
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    sorted_arr = sort(arr) \n    sorted_arr.reverse() \n    replace_digits(sorted_arr)\
    \ \nend\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpgct11_t9.jl:25

    '
  stdout: "test set: Error During Test at /tmp/tmpgct11_t9.jl:28\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  type Array has no field\
    \ reverse\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n\
    \   [2] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmpgct11_t9.jl:20\n  \
    \ [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpgct11_t9.jl:28 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpgct11_t9.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpgct11_t9.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == Vector{String}([])\n  type Array has no field\
    \ reverse\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n\
    \   [2] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmpgct11_t9.jl:20\n  \
    \ [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpgct11_t9.jl:29 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpgct11_t9.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpgct11_t9.jl:30\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  type Array has no field reverse\n  Stacktrace:\n\
    \   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] by_length(arr::Vector{Int64})\n\
    \     @ Main /tmp/tmpgct11_t9.jl:20\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpgct11_t9.jl:30 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpgct11_t9.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpgct11_t9.jl:31\n  Test threw exception\n  Exp"
  timestamp: 1660009182
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    if arr.size <= 0\n        return Vector{String}()\n    el = arr[1]\n \
    \   pos = 1\n    arr[1:end-1] = arr[1:end-1].sorted\n    arr[1] = el\n    \n \
    \   while pos < arr.size\n        if arr[pos] == el\n            pos += 1\n  \
    \          continue\n        endpos = pos+9\n        if endpos > arr.size\n  \
    \          endpos = arr.size\n        endpos = endpos - 1\n        \n        arr[pos+1]\
    \ = arr(pos)\n        pos = endpos\n        arr[pos+1] = el\n    end\n    return\
    \ arr\nend\nby_length(arr)\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"while\" at /tmp/tmpmk3n1a4x.jl:26\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpmk3n1a4x.jl:1\n\
    in expression starting at /tmp/tmpmk3n1a4x.jl:1\n"
  stdout: ''
  timestamp: 1660009181
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    if arr.empty\n        return Vector{String}()\n    \n    ones = sort(Vector{Int64}(1,\
    \ 2, 3, 4))\n    twos = sort(Vector{Int64}(8, 7, 6, 5, 4, 3, 2, 1))\n    threes\
    \ = sort(Vector{Int64}(1, 9, 2, 8, 3, 7, 4, 6, 5))\n    fours = sort(Vector{Int64}(1,\
    \ 10, 2, 9, 3, 8, 4, 7, 5, 6, 4))\n    fives = sort(Vector{Int64}(1, 9, 2, 8,\
    \ 3, 7, 4, 6, 5, 0))\n    sixes = sort(Vector{Int64}(1, 10, 2, 9, 3, 8, 4, 7,\
    \ 5, 6, 4, 0))\n    sevens = sort(Vector{Int64}(1, 9, 2, 8, 3, 7, 4, 6, 5, 0))\n\
    \    eights = sort(Vector{Int64}(1, 9, 2, 8, 3, 7, 4, 6, 5))\n    nines = sort(Vector{Int64}(1,\
    \ 9, 2, 8, 3, 7, 4, 6))\n    \n    v = Vector{String}(undef, 0)\n    for i in\
    \ ones, twos, threes, fours, fives, sixes, sevens, eights, nines\n        v =\
    \ v + [get(i[1], i[2])]\n    end\n    \n    return v\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3])\
    \ == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"\
    One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\t@test(candidate([1,\
    \ -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2]) == [\"Three\", \"Two\"\
    , \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid iteration specification\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0euh7q_6.jl:33\nin expression starting at\
    \ /tmp/tmp0euh7q_6.jl:33\n"
  stdout: ''
  timestamp: 1660009181
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    sort_by(arr) \n    reverse(arr) \n    map_replace(arr, x -> \"One\"[x\
    \ == 1], \"Two\"[x == 2], \"Three\"[x == 3], \n            \"Four\"[x == 4], \"\
    Five\"[x == 5], \"Six\"[x == 6], \"Seven\"[x == 7], \n            \"Eight\"[x\
    \ == 8], \"Nine\"[x == 9])\nend\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmp70k_aoh_.jl:27

    '
  stdout: "test set: Error During Test at /tmp/tmp70k_aoh_.jl:30\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  UndefVarError: sort_by\
    \ not defined\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmp70k_aoh_.jl:19\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp70k_aoh_.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp70k_aoh_.jl:29\ntest set:\
    \ Error During Test at /tmp/tmp70k_aoh_.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == Vector{String}([])\n  UndefVarError: sort_by\
    \ not defined\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmp70k_aoh_.jl:19\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp70k_aoh_.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp70k_aoh_.jl:29\ntest set:\
    \ Error During Test at /tmp/tmp70k_aoh_.jl:32\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  UndefVarError: sort_by not defined\n\
    \  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmp70k_aoh_.jl:19\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp70k_aoh_.jl:32 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp70k_aoh_.jl:29\ntest set:\
    \ Error During Test at /tmp/tmp70k_aoh_.jl:33\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"]\n  UndefVarError:\
    \ sort_by not defined\n  Stacktrace:\n   [1] by_length(arr::Vect"
  timestamp: 1660009183
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    \n    if isempty(arr)\n        return Vector{String}()\n    end\n    \n\
    \    by_length_result =  Vector{String}()\n    \n    length_array=collect(1:9)\n\
    \    \n    for val in arr\n        \n        ind=findfirst(x -> x<=val, length_array)\n\
    \        \n        if ind == nothing\n            by_length_result .= [\"One\"\
    ]\n        elseif ind == length(length_array)\n            by_length_result .=\
    \ [\"Nine\"]\n        else\n            by_length_result .= [string(length_array[ind])]\n\
    \        end\n        \n    end\n    \n    return by_length_result\nend\nby_length()\n\
    using Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: MethodError: no method matching by_length()\nClosest\
    \ candidates are:\n  by_length(!Matched::Vector{Int64}) at /tmp/tmphdnxpu_n.jl:18\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmphdnxpu_n.jl:44\nin expression\
    \ starting at /tmp/tmphdnxpu_n.jl:44\n"
  stdout: ''
  timestamp: 1660009185
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    n = length(arr)\n    arr = arr[2:end]\n    return if n == 0 \n       \
    \ vec![]\n    else\n        if n < 10\n            vec![\"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"][arr]\n        else\n\
    \            vec![\"Ten\", \"Eleven\", \"Twelve\", \"Thirteen\", \"Fourteen\"\
    , \"Fifteen\", \"Sixteen\", \"Seventeen\", \"Eighteen\", \"Nineteen\"][arr]\n\
    \        end\n    end\nend\n</cell>\n<code language=julia-1.5>\nby_length([])\n\
    </cell>\n<code language=julia-1.5>\nby_length([1])\n</cell>\n<code language=julia-1.5>\n\
    by_length([1, 2, 3])\n</cell>\n<text>\nA more complicated example which handles\
    \ negative numbers:\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t\
    @test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpp_qmoem9.jl:31\nin expression starting at\
    \ /tmp/tmpp_qmoem9.jl:31\n"
  stdout: ''
  timestamp: 1660009182
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    len = arr.length\n    if len > 0\n        by_length_helper(arr, [])\n\
    \    else\n        []\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"\
    Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmp97ptqpj9.jl:28

    '
  stdout: "test set: Error During Test at /tmp/tmp97ptqpj9.jl:31\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  type Array has no field\
    \ length\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n \
    \  [2] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmp97ptqpj9.jl:19\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp97ptqpj9.jl:31 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp97ptqpj9.jl:30\ntest set:\
    \ Error During Test at /tmp/tmp97ptqpj9.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == Vector{String}([])\n  type Array has no field\
    \ length\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n \
    \  [2] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmp97ptqpj9.jl:19\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp97ptqpj9.jl:32 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp97ptqpj9.jl:30\ntest set:\
    \ Error During Test at /tmp/tmp97ptqpj9.jl:33\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  type Array has no field length\n  Stacktrace:\n\
    \   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] by_length(arr::Vector{Int64})\n\
    \     @ Main /tmp/tmp97ptqpj9.jl:19\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp97ptqpj9.jl:33 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp97ptqpj9.jl:30\ntest set:\
    \ Error During Test at /tmp/tmp97ptqpj9.jl:34\n  Test threw exception\n  Expres"
  timestamp: 1660009184
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    arr=arr\n    if arr==[]\n        return [];\n    end\n    \n    if arr[1]==1\n\
    \        return [\"One\"]\n    end\n    if arr[1]==-1\n        return [\"Two\"\
    ]\n    end\n    if arr[1]==5\n        return [\"Five\"]\n    end\n    if arr[1]==8\n\
    \        return [\"Eight\"]\n    end\n    if arr[1]==9\n        return [\"Nine\"\
    ]\n    end\n    if arr[2]==1\n        return [\"One\"]\n    end\n    if arr[2]==-1\n\
    \        return [\"Two\"]\n    end\n    if arr[2]==5\n        return [\"Five\"\
    ]\n    end\n    if arr[2]==8\n        return [\"Eight\"]\n    end\n    if arr[2]==9\n\
    \        return [\"Nine\"]\n    end\n    if arr[3]==1\n        return [\"One\"\
    ]\n    end\n    if arr[3]==-1\n        return [\"Two\"]\n    end\n    if arr[3]==5\n\
    \        return [\"Five\"]\n    end\n    if arr[3]==8\n        return [\"Eight\"\
    ]\n    end\n    if arr[3]==9\n        return [\"Nine\"]\n    end\n    if arr[4]==1\n\
    \        return [\"One\"]\n    end\n    if arr[4]==-1\n        return [\"Two\"\
    ]\n    end\n    if arr[4]==5\n        return [\"Five\"]\n    end\n    if arr[4]==8\n\
    \        return [\"Eight\"]\n    end\n    if arr[4]==9\n        return [\"Nine\"\
    ]\n    end\n    if arr[5]==1\n        return [\"One\"]\n    end\n    if arr[5]==-1\n\
    \        return [\"Two\"]\n    end\n    if arr[5]==5\n        return [\"Five\"\
    ]\n    end\n    if arr[5]==8\n        return [\"Eight\"]\n    end\n    if arr[5]==9\n\
    \        return [\"Nine\"]\n    end\n    if arr[6]==1\n        return [\"One\"\
    ]\n    end\n    if arr[6]==-1\n        return [\"Two\"]\n    end\n    if arr[6]==5\n\
    \        return [\"Five\"]\n    end\n    if arr[6]==8\n        return [\"Eight\"\
    ]\n    end\n    if arr[6]==9\n        return [\"Nine\"]\n    end\n    if arr[7]==1\n\
    \        return [\"One\"]\n    end\n    if arr[7]==-1\n        return [\"Two\"\
    ]\n    end\n    if arr[7]==5\n        return [\"Five\"]\n    end\n    if arr[7]==8\n\
    \        return [\"Eight\"]\n    end\n    if arr[7]==9\n        return [\"Nine\"\
    ]\n    end\n    if arr[8]==1\n        return [\"One\nusing Test\n\n@testset begin\n\
    \ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpoml9nfth.jl:136\nin expression starting at\
    \ /tmp/tmpoml9nfth.jl:136\n"
  stdout: ''
  timestamp: 1660009182
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    l = arr.length()\n    \n    if l==0\n        return \"\"\n    elseif l==1\n\
    \        return [\"One\"]\n    elseif l==2\n        return [\"One\", \"Two\"]\n\
    \    elseif l==3\n        return [\"One\", \"Two\", \"Three\"]\n    elseif l==4\n\
    \        return [\"One\", \"Two\", \"Three\", \"Four\"]\n    elseif l==5\n   \
    \     return [\"One\", \"Two\", \"Three\", \"Four\", \"Five\"]\n    elseif l==6\n\
    \        return [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\"]\n \
    \   elseif l==7\n        return [\"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\"]\n    elseif l==8\n        return [\"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\"]\n    elseif l==9\n      \
    \  return [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\"]\n    end\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpodmurhy4.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpodmurhy4.jl:1\n\
    in expression starting at /tmp/tmpodmurhy4.jl:1\n"
  stdout: ''
  timestamp: 1660009182
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    sorted_arr = sort(arr)\n    vect = Vector{String}(undef, 9)\n    for i\
    \ in sorted_arr\n        vect[i] = \"One\"\n        if i < 9\n            vect[i+1]\
    \ = \"Two\"\n            if i < 18\n                vect[i+2] = \"Three\"\n  \
    \              if i < 27\n                    vect[i+3] = \"Four\"\n         \
    \           if i < 36\n                        vect[i+4] = \"Five\"\n        \
    \                if i < 45\n                            vect[i+5] = \"Six\"\n\
    \                            if i < 54\n                                vect[i+6]\
    \ = \"Seven\"\n                                if i < 63\n                   \
    \                 vect[i+7] = \"Eight\"\n                                    if\
    \ i < 72\n                                        vect[i+8] = \"Nine\"\n    end\n\
    \    vect\nend\n</code>\nI hope that helps someone in the future :)\n<|/ a dscore=5\
    \ |>\n<| c |>\nI like this method. Although I noticed that the return type changes\
    \ from String to Vector{String}. Is there a way to fix this?\n<|/ c |>\n<| c |>\n\
    : Just add `return vect` at the end of the function.\n<|/ c |>\n<| c |>\nGreat\
    \ solution! It would be nice if the `if` statements were replaced by `case`, but\
    \ I guess they are equivalent in this case.\n<|/ c |>\n<| c |>\nI think this is\
    \ a bad solution. For instance, if we have an array `[2, 2, 1, 2, 1, 3, 1]`, the\
    \ output will be `[\"One\", \"Two\", \"One\", \"One\", \"Two\", \"One\"]`.\n<|/\
    \ c |>\n<| c |>\n: I agree with you. I haven't gotten around to optimizing this\
    \ method yet, since I am just trying to get it working first. Hopefully someone\
    \ else will give a more elegant answer shortly. I will update my answer shortly.\n\
    <|/ c |>\n<| a tags=julia,string,arrays |>\nIf you want a purely functional approach,\
    \ use Iterators.reduce:\n<code>\nreduce(x -> [x == '1' ? \"One\" : (x == '2' ?\
    \ \"Two\" : (x == '3' ? \"Three\" : (x == '4' ? \"Four\" : (x == '5' ? \"Five\"\
    \ : (x == '6' ? \"Six\" : (x == '7' ? \"Seven\" : (x == '8' ? \"Eight\" : (x ==\
    \ '9' ? \"Nine\" : \"Unknown\"))))))]), input)\n</code>\n<|/ a dscore=4 |>\n<|\
    \ a tags=julia,string,arrays |>\nAnother possible solution, using zip and mapslices:\n\
    <code>\njulia> mapslices(x -> x == \"1\" ? \"One\" : x == \"2\" ? \"Two\" : x\
    \ == \"3\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqx0ovq4t.jl:42\nin expression starting at\
    \ /tmp/tmpqx0ovq4t.jl:42\n"
  stdout: ''
  timestamp: 1660009182
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    \n    len = arr.length\n    if len == 0 \n        arr = Vector{String}([])\
    \ \n    else \n        # reverse the array\n        revArr = reverse(arr)\n  \
    \      # map each digit to the name\n        digitNameArr = Vector{String}(undef,\
    \ 10)\n        digitNameArr[1] = \"One\"\n        digitNameArr[2] = \"Two\"\n\
    \        digitNameArr[3] = \"Three\"\n        digitNameArr[4] = \"Four\"\n   \
    \     digitNameArr[5] = \"Five\"\n        digitNameArr[6] = \"Six\"\n        digitNameArr[7]\
    \ = \"Seven\"\n        digitNameArr[8] = \"Eight\"\n        digitNameArr[9] =\
    \ \"Nine\"\n        for i=1:(len-1)\n            digitNameArr[revArr[i]] = digitNameArr[revArr[i]]\n\
    \        end\n        arr = digitNameArr\n    end\n    return arr\nend\n</cell>\n\
    <code language=julia-0.6>\nby_length(vector)\n</cell>\n<text>\n3.5 Using nested\
    \ for loops\nWrite a function that prints the numbers 1 to 10 with each number\
    \ on a new line.\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpatly3erc.jl:44\nin expression starting at\
    \ /tmp/tmpatly3erc.jl:44\n"
  stdout: ''
  timestamp: 1660009182
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    if length(arr) == 0 \n        return [] \n    else if length(arr) == 1\
    \ \n        return [\"One\"]\n    else \n        digits = arr\n        [first,\
    \ last] = extrema(digits)\n        first = first + 1\n        [last, first] =\
    \ extrema(last)\n        last = last+1\n        sorted_digits = arr[first:last]\n\
    \        [first, last] = extrema(sorted_digits)\n        first = first + 1\n \
    \       [last, first] = extrema(last)\n        last = last+1\n        inverted_sorted_digits\
    \ = reverse(sorted_digits[first:last])\n        reversed_sorted_digits = reverse(inverted_sorted_digits)\n\
    \        digits[first:last] = reversed_sorted_digits\n        digits = reverse[digits]\n\
    \        return get_names(digits)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    by_length([])\n</cell>\n<code language=julia-1.5>\nby_length([1,2,3,4,5,6,7,8,9])\n\
    </cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n\
    <code language=julia-1.5>\nby_length([12, 10, 45, 11, 10, 5, 19, 6, 18, 19])\n\
    </cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n\
    <text>\nThe last step is to turn this into a function that takes an array of integers\
    \ and returns the array of strings:\nusing Test\n\n@testset begin\n\ncandidate\
    \ = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"\
    Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9hpyeqno.jl:21\nin expression starting at\
    \ /tmp/tmp9hpyeqno.jl:21\n"
  stdout: ''
  timestamp: 1660009182
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    arr = sort(arr)\n    \n    len = length(arr)\n    \n    if len == 0 \n\
    \        return Vector{}\n    \n    if len < 10\n        return Vector{String}(undef,0)\n\
    \    end\n    \n    names = Vector{String}(undef,10)\n    names[1] = \"One\"\n\
    \    names[2] = \"Two\"\n    names[3] = \"Three\"\n    names[4] = \"Four\"\n \
    \   names[5] = \"Five\"\n    names[6] = \"Six\"\n    names[7] = \"Seven\"\n  \
    \  names[8] = \"Eight\"\n    names[9] = \"Nine\"\n    \n    \n    \n    \n   \
    \ \n    return map(names,arr[10:(len-9)])\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp506qk1n5.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp506qk1n5.jl:1\n\
    in expression starting at /tmp/tmp506qk1n5.jl:1\n"
  stdout: ''
  timestamp: 1660009182
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    if len(arr) == 0 \n        Vector{String}()\n    elseif length(arr) ==\
    \ 1 \n        Vector{String}([One(arr)])\n    elseif length(arr) > 9 \n      \
    \  error(\"length exceed 9\")\n    elseif length(arr) < 1 \n        error(\"length\
    \ exceed 1\")\n    else \n        reverse(reverse(arr))\n        for idx in arr\
    \ \n            idx = idx % 10\n            vec[One(idx)] = One(idx)\n       \
    \ end\n        return vec\n    end\nend\n</cell>\n<text>\nExample\nusing Test\n\
    \n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5,\
    \ 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"\
    One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzqppw_so.jl:36\nin expression starting at\
    \ /tmp/tmpzqppw_so.jl:36\n"
  stdout: ''
  timestamp: 1660009182
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    \n    if !arr\n        return Array{String}(undef, 0)\n    end\nusing\
    \ Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1,\
    \ 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxwdfq8q3.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxwdfq8q3.jl:1\n\
    in expression starting at /tmp/tmpxwdfq8q3.jl:1\n"
  stdout: ''
  timestamp: 1660009183
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n  if arr == []\n    return []\n  else\n    arr1 = sort!(arr.[1:9])\n    arr2\
    \ = sort!(arr.[9:end])\n    arr2[1] = \"One\"\n    arr2[9] = \"Nine\"\n    return\
    \ arr1\n  end\nend\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t\
    @test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"9:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmptyou2lmg.jl:23\nin expression\
    \ starting at /tmp/tmptyou2lmg.jl:23\n"
  stdout: ''
  timestamp: 1660009183
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    l = Vector{Int64}()\n    for elem in arr\n        push!(l, elem) \n  \
    \  end\n    l = sort(l)\n    l = reverse(l)\n    l = String[]\n    for elem in\
    \ l\n        push!(l, names[elem])\n    end\n    return l\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8,\
    \ 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\t@test(candidate([1,\
    \ -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2]) == [\"Three\", \"Two\"\
    , \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmplpgn49by.jl:33

    '
  stdout: "test set: Test Failed at /tmp/tmplpgn49by.jl:36\n  Expression: candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n   Evaluated: String[] == [\"Eight\", \"Five\",\
    \ \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplpgn49by.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplpgn49by.jl:35\ntest set: Test\
    \ Failed at /tmp/tmplpgn49by.jl:38\n  Expression: candidate([1, -1, 55]) == [\"\
    One\"]\n   Evaluated: String[] == [\"One\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmplpgn49by.jl:38 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmplpgn49by.jl:35\ntest set: Test Failed at /tmp/tmplpgn49by.jl:39\n\
    \  Expression: candidate([1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"]\n   Evaluated:\
    \ String[] == [\"Three\", \"Two\", \"One\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmplpgn49by.jl:39 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmplpgn49by.jl:35\ntest set: Test Failed at /tmp/tmplpgn49by.jl:40\n\
    \  Expression: candidate([9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"]\n   Evaluated:\
    \ String[] == [\"Nine\", \"Eight\", \"Four\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmplpgn49by.jl:40 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmplpgn49by.jl:35\nTest Summary: | Pass "
  timestamp: 1660009185
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    if length(arr) == 0 \n        Vector{String}() \n    elseif length(arr)\
    \ == 1 \n        [\"One\"]\n    else\n        arr = arr[2:end]\n        reverse(arr)\n\
    \        digits = map(i->string(i), arr)\n        return map(i->lookup[i], digits)\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpc8g52dqs.jl:32

    '
  stdout: "test set: Error During Test at /tmp/tmpc8g52dqs.jl:35\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  UndefVarError: lookup\
    \ not defined\n  Stacktrace:\n    [1] (::var\"#2#4\")(i::String)\n      @ Main\
    \ /tmp/tmpc8g52dqs.jl:27\n    [2] iterate\n      @ ./generator.jl:47 [inlined]\n\
    \    [3] _collect(c::Vector{String}, itr::Base.Generator{Vector{String}, var\"\
    #2#4\"}, #unused#::Base.EltypeUnknown, isz::Base.HasShape{1})\n      @ Base ./array.jl:744\n\
    \    [4] collect_similar\n      @ ./array.jl:653 [inlined]\n    [5] map\n    \
    \  @ ./abstractarray.jl:2867 [inlined]\n    [6] by_length(arr::Vector{Int64})\n\
    \      @ Main /tmp/tmpc8g52dqs.jl:27\n    [7] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [8] macro expansion\n      @ /tmp/tmpc8g52dqs.jl:35 [inlined]\n\
    \    [9] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [10] top-level scope\n      @ /tmp/tmpc8g52dqs.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpc8g52dqs.jl:37\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  UndefVarError: lookup not defined\n \
    \ Stacktrace:\n    [1] (::var\"#2#4\")(i::String)\n      @ Main /tmp/tmpc8g52dqs.jl:27\n\
    \    [2] iterate\n      @ ./generator.jl:47 [inlined]\n    [3] _collect(c::Vector{String},\
    \ itr::Base.Generator{Vector{String}, var\"#2#4\"}, #unused#::Base.EltypeUnknown,\
    \ isz::Base.HasShape{1})\n      @ Base ./array.jl:744\n    [4] collect_similar\n\
    \      @ ./array.jl:653 [inlined]\n    [5] map\n      @ ./abstractarray.jl:2867\
    \ [inlined]\n    [6] by_length(arr::Vector{Int64})\n      @ Main /tmp/tmpc8g52dqs.jl:27\n\
    \    [7] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [8] macro expansion\n      @ /tmp/tmpc8g52dqs.jl:37 [inlined]\n\
    \    [9] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [10] top-level scope\n      @ /tmp/tmpc8g52dqs.jl:34\ntest s"
  timestamp: 1660009185
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    if length(arr)==0 \n        Vector{String}()\n    elseif length(arr)==1\n\
    \        [\"One\", \"One\"][arr[1]]\n    elseif length(arr)==2\n        [\"One\"\
    , \"Two\"][arr[1]]\n    elseif length(arr)==3\n        [\"One\", \"Three\", \"\
    Three\"][arr[1]]\n    elseif length(arr)==4\n        [\"One\", \"Four\", \"Four\"\
    ][arr[1]]\n    elseif length(arr)==5\n        [\"One\", \"Five\", \"Five\"][arr[1]]\n\
    \    elseif length(arr)==6\n        [\"One\", \"Six\", \"Six\"][arr[1]]\n    elseif\
    \ length(arr)==7\n        [\"One\", \"Seven\", \"Seven\"][arr[1]]\n    elseif\
    \ length(arr)==8\n        [\"One\", \"Eight\", \"Eight\"][arr[1]]\n    elseif\
    \ length(arr)==9\n        [\"One\", \"Nine\", \"Nine\"][arr[1]]\n    else\n  \
    \      error(\"invalid vector size $(length(arr))\")\n    end\nend\n</cell>\n\
    <text>\nQuestion 4\nImplement a function that creates a set of words from a text\
    \ using some kind of tokenization process. You can tokenize the text into a vector\
    \ of strings by splitting it at whitespace, or you can tokenize it into a vector\
    \ of words by splitting it at punctuation characters.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3])\
    \ == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"\
    One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\t@test(candidate([1,\
    \ -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2]) == [\"Three\", \"Two\"\
    , \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7wutjpcd.jl:43\nin expression starting at\
    \ /tmp/tmp7wutjpcd.jl:43\n"
  stdout: ''
  timestamp: 1660009184
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    lengths = arr.map(x -> length(x))\n    rev_lengths = reverse(lengths)\n\
    \    rev_lengths.zip([\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\"\
    , \"Seven\", \"Eight\", \"Nine\"]).collect{x->x[1]}\nend\nby_length(arr)\n</cell>\n\
    <code language=julia-1.0>\n\"\"\"\n    by_length(arr::Vector{Int64}, names::Vector{String})::Vector{String}\n\
    \    \n    given a vector of integers and a vector of strings, return a new vector\
    \ of strings with\n    the strings from the second vector appended to each of\
    \ the strings in the first vector,\n    sorted in ascending order using the names\
    \ from the second vector.\n    \n    For example, given these vectors:\n    >>>\
    \ by_length([1], [\"One\"])\n    [\"One\"]\n    >>> by_length([], [\"One\"])\n\
    \    []\n    >>> by_length([2, 1, 1, 4, 5, 8, 2, 3], [\"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"])\n    [\"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    ]\n    \n      If the first vector has any strange number ignore it:\n    >>>\
    \ by_length([-1, 55], [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\"\
    , \"Seven\", \"Eight\", \"Nine\"])\n    [\"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    \n      If the second\
    \ vector is empty, return an empty vector:\n    >>> by_length([1], [])\n    []\n\
    \    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: UndefVarError: arr not defined\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpraw95cow.jl:23\nin expression starting at /tmp/tmpraw95cow.jl:23\n"
  stdout: ''
  timestamp: 1660009184
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    if arr.length == 0\n        return Vec[]\n    end\n    \n    \n    vec\
    \ = vec()\n    \n    map(by, arr)\n    return reverse(vec)\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8,\
    \ 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\t@test(candidate([1,\
    \ -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2]) == [\"Three\", \"Two\"\
    , \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmp8q6s_19r.jl:31

    '
  stdout: "test set: Error During Test at /tmp/tmp8q6s_19r.jl:34\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  type Array has no field\
    \ length\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n \
    \  [2] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmp8q6s_19r.jl:19\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp8q6s_19r.jl:34 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp8q6s_19r.jl:33\ntest set:\
    \ Error During Test at /tmp/tmp8q6s_19r.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == Vector{String}([])\n  type Array has no field\
    \ length\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n \
    \  [2] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmp8q6s_19r.jl:19\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp8q6s_19r.jl:35 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp8q6s_19r.jl:33\ntest set:\
    \ Error During Test at /tmp/tmp8q6s_19r.jl:36\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  type Array has no field length\n  Stacktrace:\n\
    \   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] by_length(arr::Vector{Int64})\n\
    \     @ Main /tmp/tmp8q6s_19r.jl:19\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp8q6s_19r.jl:36 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp8q6s_19r.jl:33\ntest set:\
    \ Error During Test at /tmp/tmp8q6s_19r.jl:37\n  Test threw exception\n  Expres"
  timestamp: 1660009185
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    if isempty(arr)\n        return Vector{String}()\n    end\nusing Test\n\
    \n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5,\
    \ 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"\
    One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpevuhapvl.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpevuhapvl.jl:1\n\
    in expression starting at /tmp/tmpevuhapvl.jl:1\n"
  stdout: ''
  timestamp: 1660009184
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n  if arr.length == 0\n    return []\n  elseif arr.length <= 9\n    by_length_helper(arr,\
    \ \"\")\n  else\n    by_length_helper(arr, \"\")\n  end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3])\
    \ == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"\
    One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\t@test(candidate([1,\
    \ -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2]) == [\"Three\", \"Two\"\
    , \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpugmit_7l.jl:29

    '
  stdout: "test set: Error During Test at /tmp/tmpugmit_7l.jl:32\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  type Array has no field\
    \ length\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n \
    \  [2] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmpugmit_7l.jl:19\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpugmit_7l.jl:32 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpugmit_7l.jl:31\ntest set:\
    \ Error During Test at /tmp/tmpugmit_7l.jl:33\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == Vector{String}([])\n  type Array has no field\
    \ length\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n \
    \  [2] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmpugmit_7l.jl:19\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpugmit_7l.jl:33 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpugmit_7l.jl:31\ntest set:\
    \ Error During Test at /tmp/tmpugmit_7l.jl:34\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  type Array has no field length\n  Stacktrace:\n\
    \   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] by_length(arr::Vector{Int64})\n\
    \     @ Main /tmp/tmpugmit_7l.jl:19\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpugmit_7l.jl:34 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpugmit_7l.jl:31\ntest set:\
    \ Error During Test at /tmp/tmpugmit_7l.jl:35\n  Test threw exception\n  Expres"
  timestamp: 1660009185
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    sort(arr) \n    reverse!(arr) \n    return map(names(get_enums), arr)\
    \ \nend\n</code>\n<|/ a |>\n<| c |>\n`map(names(get_enums), arr)`  is the most\
    \ concise solution!\n<|/ c |>\n<| a dscore=4 |>\nTo expand on Mat M's answer,\
    \ if you're writing code in Julia 0.3 or earlier, you can write this without using\
    \ any packages using the built-in Base.getfield function:\n<code>\njulia> a =\
    \ Int64[]\n0-element Array{Int64,1}\nusing Test\n\n@testset begin\n\ncandidate\
    \ = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"\
    Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpksk7xcwv.jl:23\nin expression starting at\
    \ /tmp/tmpksk7xcwv.jl:23\n"
  stdout: ''
  timestamp: 1660009184
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    if length!(arr) == 0 \n        return Vector{String}(undef, 0)\n    end\n\
    \    \n    max_length = maximum(arr)\n    sorted_arr = sort(arr)\n    \n    digit\
    \ = Int64([])\n    for el in sorted_arr\n        if el == max_length\n       \
    \     push!(digit, el)\n        end\n    end\nusing Test\n\n@testset begin\n\n\
    candidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpyjuilgp0.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpyjuilgp0.jl:1\n\
    in expression starting at /tmp/tmpyjuilgp0.jl:1\n"
  stdout: ''
  timestamp: 1660009184
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    \n    if arr.length == 0\n        return Vector{String}()\n    end\n \
    \   \n    sorted = sort(arr)\n    \n    digits_names = Vector{String}()\n    \n\
    \    for digit in sorted\n        digits_names = [digits_names ; \"One\", \"Two\"\
    , \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n  \
    \  end\n    \n    by_length(digits_names[1:])\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected comma in array expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkrx_9cv6.jl:29\nin expression starting at\
    \ /tmp/tmpkrx_9cv6.jl:29\n"
  stdout: ''
  timestamp: 1660009184
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    if length(arr) == 0\n        []\n    elseif length(arr) == 1 \n      \
    \  \"One\"\n    elseif length(arr) == 2\n        \"Two\"\n    elseif length(arr)\
    \ == 3\n        \"Three\"\n    elseif length(arr) == 4\n        \"Four\"\n   \
    \ elseif length(arr) == 5\n        \"Five\"\n    elseif length(arr) == 6\n   \
    \     \"Six\"\n    elseif length(arr) == 7\n        \"Seven\"\n    elseif length(arr)\
    \ == 8\n        \"Eight\"\n    elseif length(arr) == 9\n        \"Nine\"\n   \
    \ end\nend\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpxoypbt93.jl:43

    '
  stdout: "test set: Error During Test at /tmp/tmpxoypbt93.jl:46\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  MethodError: Cannot\
    \ `convert` an object of type String to an object of type Vector{String}\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{Vector{String}}, !Matched::LibGit2.StrArrayStruct) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LibGit2/src/strarray.jl:13\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at ~/.conda/envs/polyglot/share/julia/base/array.jl:554\n\
    \    ...\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmpxoypbt93.jl:36\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpxoypbt93.jl:46 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpxoypbt93.jl:45\ntest set:\
    \ Error During Test at /tmp/tmpxoypbt93.jl:48\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  MethodError: Cannot `convert` an object\
    \ of type String to an object of type Vector{String}\n  Closest candidates are:\n\
    \    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{Vector{String}}, !Matched::LibGit2.StrArrayStruct) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LibGit2/src/strarray.jl:13\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at ~/.conda/envs/polyglot/share/julia/base/array.jl:554\n\
    \    ...\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmpxoypbt93.jl:26\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl"
  timestamp: 1660009187
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    if arr.length == 0\n        return Vector{String}()\n    end\nusing Test\n\
    \n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5,\
    \ 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"\
    One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpp1sosq4c.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpp1sosq4c.jl:1\n\
    in expression starting at /tmp/tmpp1sosq4c.jl:1\n"
  stdout: ''
  timestamp: 1660009184
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    return if arr == []\n        Vector{String}()\n    else if length(arr)\
    \ == 1\n        [arr[1]]\n    else\n        arr |> reverse |> collect (() -> One)\
    \ |> Vector{String}\n    end\nend\n</cell>\n<code language=julia-1.4>\nby_length([1,\
    \ 1, 4, 5, 8, 2, 3])\n</cell>\n<text>\nby_length([2, 2, 2, 3, 4, 5, 6, 7, 9, 9])\n\
    using Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpizrkfbri.jl:21\nin expression starting at\
    \ /tmp/tmpizrkfbri.jl:21\n"
  stdout: ''
  timestamp: 1660009184
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    if length(arr) == 0 \n        return [] \n    end\n    \n    high = maximum(arr)\n\
    \    arr = arr[arr <= high]\n    arr = reverse(arr)\n    \n    # replace each\
    \ digit by the name from \"One\" to \"Nine\"\n    for val in arr \n        @assert\
    \ val in \"One\"..\"Nine\" \n        arr[arr == val] = \"One\"\n    end\n    return\
    \ arr\nend\n</code>\n<|/ a dscore=2 tags=sorting,julia,arrays |>\n<| a |>\nAnother\
    \ variation on G. Chandler's solution:\n<code>\nusing Test\n\n@testset begin\n\
    \ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzn17_lkm.jl:34\nin expression starting at\
    \ /tmp/tmpzn17_lkm.jl:34\n"
  stdout: ''
  timestamp: 1660009184
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    if arr.is_empty() || arr.length == 0\n        return Vector{String}()\n\
    \    end\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpkq4hab42.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpkq4hab42.jl:1\n\
    in expression starting at /tmp/tmpkq4hab42.jl:1\n"
  stdout: ''
  timestamp: 1660009184
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    if length(arr) == 0\n        return Vector{String}[]\n    \n    idx =\
    \ 1\n    idx2 = 0\n    idx3 = 0\n    \n    arr = sort(arr)\n    \n    for x in\
    \ arr\n        if idx == x\n            idx = 1\n            idx2 = idx3\n   \
    \     elseif idx2 == x\n            idx3 = idx2\n            idx2 = 0\n      \
    \      idx = idx + 1\n        elseif idx3 == x\n            idx = idx2\n     \
    \       idx2 = idx3\n            idx3 = 0\n            idx = idx + 1\n       \
    \ else\n            idx3 = idx3 + 1\n        end\n    end\n    \n    arr = arr[idx2:idx]\n\
    \    \n    arr = reverse(arr)\n    arr = replace(arr, \"1\", \"One\")\n    arr\
    \ = replace(arr, \"2\", \"Two\")\n    arr = replace(arr, \"3\", \"Three\")\n \
    \   arr = replace(arr, \"4\", \"Four\")\n    arr = replace(arr, \"5\", \"Five\"\
    )\n    arr = replace(arr, \"6\", \"Six\")\n    arr = replace(arr, \"7\", \"Seven\"\
    )\n    arr = replace(arr, \"8\", \"Eight\")\n    arr = replace(arr, \"9\", \"\
    Nine\")\n    \n    arr = reverse(arr)\n    \n    return arr\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5,\
    \ 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"\
    One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp0cg2elo_.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp0cg2elo_.jl:1\n\
    in expression starting at /tmp/tmp0cg2elo_.jl:1\n"
  stdout: ''
  timestamp: 1660009184
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    return if arr.size == 0 \n        Vector{String}()\n    else \n      \
    \  \n        # Sort the array and reverse the result\n        arr = sort(arr)\
    \ \n        arr = reverse(arr) \n        \n        # Replace each element by its\
    \ corresponding name \n        arr = map(x->replace(x, x==1, 1:10), \"One\", \"\
    Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    ) \n        return arr \n    end\nend\n</cell>\n<code language=julia-0.5>\nby_length([1])\n\
    </cell>\n<code language=julia-0.5>\nby_length([1, 4, 3, 1])\n</cell>\n<code language=julia-0.5>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-0.5>\nby_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-0.5>\nby_length([])\n</cell>\n\
    <code language=julia-0.5>\nby_length([1, -1, 55])\n</cell>\n<text>\nExercise 5\n\
    Write a function called by_weight that takes in an array of integers and returns\
    \ a vector\nof strings that represent the names of the numbers from the original\
    \ array that have at\nleast one digit in the range [1, 9] and at least one digit\
    \ in the range [2, 10].\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpp1a33d_a.jl:32\nin expression starting at\
    \ /tmp/tmpp1a33d_a.jl:32\n"
  stdout: ''
  timestamp: 1660009185
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    \n    if length(arr) == 0 \n        \"\"\n    elseif length(arr) == 1\n\
    \        arr[end]\n    elseif length(arr) > 9\n        arr[end]\n    else\n  \
    \      arr = arr.reverse\n        \n        for n in arr\n            replace!(arr,\
    \ n, \"One\")\n            replace!(arr, n, \"Two\")\n            replace!(arr,\
    \ n, \"Three\")\n            replace!(arr, n, \"Four\")\n            replace!(arr,\
    \ n, \"Five\")\n            replace!(arr, n, \"Six\")\n            replace!(arr,\
    \ n, \"Seven\")\n            replace!(arr, n, \"Eight\")\n            replace!(arr,\
    \ n, \"Nine\")\n        end\n        \n        arr\n    end\nend\n</cell>\n<text>\n\
    Exercise 3: Replace all numbers above 10 with \"Eleven To the Nineteenth\"\nRewrite\
    \ the by_length function above to do this.\nHint: use an if statement to check\
    \ if n is greater than or equal to 10.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"\
    Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2txds472.jl:44\nin expression starting at\
    \ /tmp/tmp2txds472.jl:44\n"
  stdout: ''
  timestamp: 1660009185
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    v = Vector{String}(undef, length(arr))\n    idx = 0\n    while idx < length(arr)\n\
    \        if arr[idx] >= 1 && arr[idx] <= 9\n            push!(v, \"One\")\n  \
    \          push!(v, \"Two\")\n            push!(v, \"Three\")\n            push!(v,\
    \ \"Four\")\n            push!(v, \"Five\")\n            push!(v, \"Six\")\n \
    \           push!(v, \"Seven\")\n            push!(v, \"Eight\")\n           \
    \ push!(v, \"Nine\")\n        end\n        if arr[idx] >= 10 && arr[idx] <= 19\n\
    \            push!(v, \"Ten\")\n            push!(v, \"Eleven\")\n           \
    \ push!(v, \"Twelve\")\n            push!(v, \"Thirteen\")\n            push!(v,\
    \ \"Fourteen\")\n            push!(v, \"Fifteen\")\n            push!(v, \"Sixteen\"\
    )\n            push!(v, \"Seventeen\")\n            push!(v, \"Eighteen\")\n \
    \           push!(v, \"Nineteen\")\n        end\n        if arr[idx] >= 20 &&\
    \ arr[idx] <= 99\n            push!(v, \"Twenty\")\n            push!(v, \"Thirty\"\
    )\n            push!(v, \"Forty\")\n            push!(v, \"Fifty\")\n        \
    \    push!(v, \"Sixty\")\n            push!(v, \"Seventy\")\n            push!(v,\
    \ \"Eighty\")\n            push!(v, \"Ninety\")\n        end\n        if arr[idx]\
    \ > 100\n            push!(v, \"Hundred\")\n        end\n        if arr[idx] >\
    \ 100\n            push!(v, \"Thousand\")\n        end\n        if arr[idx] >=\
    \ 10\n            push!(v, \"One\")\n        end\n        if arr[idx] >= 1\n \
    \           push!(v, \"Two\")\n        end\n        if arr[idx] >= -1\n      \
    \      push!(v, \"Three\")\n        end\n        if arr[idx] >= -3\n         \
    \   push!(v, \"Four\")\n        end\n        if arr[idx] >= -6\n            push!(v,\
    \ \"Five\")\n        end\n        if arr[idx] >= -9\n            push!(v, \"Six\"\
    )\n        end\n        if arr[idx] >= -12\n            push!(v, \"Seven\")\n\
    \        end\n        if arr[idx] >= -18\n            push!(v, \"Eight\")\n  \
    \      end\n        if arr[idx] >= -24\n            push!(v, \"Nine\")\n     \
    \   end\n        if arr\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpp_rh745m.jl:1\nin expression starting at /tmp/tmpp_rh745m.jl:1\n"
  stdout: ''
  timestamp: 1660009185
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    if !arr.empty\n        start = min(arr)\n        finish = max(arr)\n \
    \       vec = Vector{String}(undef, 0)\n        for i in start:-1:finish\n   \
    \         push!(vec, name_by_length(i))\n        end\n        reverse!(vec)\n\
    \        replace_all(vec, start+1, finish, name_by_length(start))\n        return\
    \ vec\n    end\n    return []\nend\n\"\"\"\n    Given a vector of integers, sort\
    \ the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ vector, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdxl9fsqe.jl:32\nin expression starting at\
    \ /tmp/tmpdxl9fsqe.jl:32\n"
  stdout: ''
  timestamp: 1660009185
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n   \n    arr == [] || return []\n    \n    arr == Int64[] || return []\n \
    \   \n    arr_sorted = arr |> sort\n    \n    string = \"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\n    \n    arr_sorted\
    \ |> reverse |> vec |> replace! x-> string |> vec\n    \nend\n</cell>\n<text>\n\
    Exercise: Write a function that replaces each digit in a number by the name of\
    \ the digit from 1 to 9. Test your function by inputting the numbers 1 and 10.\n\
    using Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"function\" at /tmp/tmpnyp_fa4z.jl:18 expected\
    \ \"end\", got \"x\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpnyp_fa4z.jl:28\n\
    in expression starting at /tmp/tmpnyp_fa4z.jl:28\n"
  stdout: ''
  timestamp: 1660009185
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    if arr == []\n        return Vector{String}()\n    end\n    \n    vec\
    \ = Vector{String}(undef, 9)\n    \n    for i in 1:9\n        if 1 <= arr[i] <=\
    \ 9\n            vec[i] = \"One\"\n        else\n            vec[i] = \"Nine\"\
    \n        end\n    end\n    \n    for j in arr[9:end]\n        if j == 0 || j\
    \ == -1\n            continue\n        end\n        for i in 1:9\n           \
    \ if 1 <= arr[i] <= 9\n                vec[i] = vec[i] .+ String(i-j, \"One\"\
    )\n            else\n                vec[i] = vec[i] .+ String(i-j, \"Nine\")\n\
    \            end\n        end\n    end\n    \n    return vec\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5,\
    \ 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"\
    One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpp_7h9gpi.jl:50

    '
  stdout: "test set: Error During Test at /tmp/tmpp_7h9gpi.jl:53\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  BoundsError: attempt\
    \ to access 8-element Vector{Int64} at index [9]\n  Stacktrace:\n   [1] getindex\n\
    \     @ ./array.jl:861 [inlined]\n   [2] by_length(arr::Vector{Int64})\n     @\
    \ Main /tmp/tmpp_7h9gpi.jl:26\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpp_7h9gpi.jl:53 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpp_7h9gpi.jl:52\ntest set:\
    \ Error During Test at /tmp/tmpp_7h9gpi.jl:55\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmpp_7h9gpi.jl:26\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpp_7h9gpi.jl:55 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpp_7h9gpi.jl:52\ntest set:\
    \ Error During Test at /tmp/tmpp_7h9gpi.jl:56\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"]\n  BoundsError: attempt\
    \ to access 4-element Vector{Int64} at index [5]\n  Stacktrace:\n   [1] getindex\n\
    \     @ ./array.jl:861 [inlined]\n   [2] by_length(arr::Vector{Int64})\n     @\
    \ Main /tmp/tmpp_7h9gpi.jl:26\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpp_7h9gpi.jl:56 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @"
  timestamp: 1660009187
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    if arr == []\n        return Vector{String}()\n    elseif all(arr[i] <=\
    \ 9 && arr[i+1] <= 9 for i=2:length(arr))\n        # All numbers are between 1\
    \ and 9\n        \n        # Vector{String}() is the string concatenation operator\n\
    \        digits = Vector{String}()\n        for n in arr\n            push!(digits,\
    \ digit(n))\n        end\n        \n        push!(digits, reverse(digits))\n \
    \       \n        push!(digits, \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\")\n        return digits\n    else\n\
    \        # Ignore other numbers\n        return Vector{String}()\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmp1cz4d24y.jl:41

    '
  stdout: "test set: Error During Test at /tmp/tmp1cz4d24y.jl:44\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  BoundsError: attempt\
    \ to access 8-element Vector{Int64} at index [9]\n  Stacktrace:\n    [1] getindex\n\
    \      @ ./array.jl:861 [inlined]\n    [2] #1\n      @ ./none:0 [inlined]\n  \
    \  [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] _all\n      @ ./reduce.jl:1164\
    \ [inlined]\n    [5] all\n      @ ./reduce.jl:1152 [inlined]\n    [6] all\n  \
    \    @ ./reduce.jl:1070 [inlined]\n    [7] by_length(arr::Vector{Int64})\n   \
    \   @ Main /tmp/tmp1cz4d24y.jl:21\n    [8] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [9] macro expansion\n      @ /tmp/tmp1cz4d24y.jl:44 [inlined]\n\
    \   [10] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmp1cz4d24y.jl:43\ntest set:\
    \ Test Failed at /tmp/tmp1cz4d24y.jl:46\n  Expression: candidate([1, -1, 55])\
    \ == [\"One\"]\n   Evaluated: String[] == [\"One\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp1cz4d24y.jl:46 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp1cz4d24y.jl:43\ntest set: Error During Test\
    \ at /tmp/tmp1cz4d24y.jl:47\n  Test threw exception\n  Expression: candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"]\n  BoundsError: attempt to access\
    \ 4-element Vector{Int64} at index [5]\n  Stacktrace:\n    [1] getindex\n    \
    \  @ ./array.jl:861 [inlined]\n    [2] #1\n      @ ./none:0 [inlined]\n    [3]\
    \ iterate\n      @ ./generator.jl:47 [inlined]\n    [4] _all\n      @ ./reduce.jl:1164\
    \ [inlined]\n    [5] all\n      @ ./reduce.jl:1152 [inlined]\n    [6] all\n  \
    \    @ ./reduce.jl:1070 [inlined]\n    [7] by_length(arr::Vector{Int64})\n   \
    \   @ Main /tmp/tmp1cz4d24y.jl:21\n    [8] macro expansion\n      @ "
  timestamp: 1660009188
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    \n    by_length = Vector{String}(undef, 0)\n    \n    if length(arr) ==\
    \ 0 \n        by_length\n        return\n    end\n    \n    for i in reverse(arr)\
    \ \n        by_length[1] = (\"One\")\n        by_length[2] = (\"Two\")\n     \
    \   by_length[3] = (\"Three\")\n        by_length[4] = (\"Four\")\n        by_length[5]\
    \ = (\"Five\")\n        by_length[6] = (\"Six\")\n        by_length[7] = (\"Seven\"\
    )\n        by_length[8] = (\"Eight\")\n        by_length[9] = (\"Nine\")\n   \
    \     \n        if i <= 9\n            by_length[i] = names(i)[1]\n        else\n\
    \            by_length[i] = names(i-1)[1]\n        end\n    end\n    by_length\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpdered8z_.jl:48

    '
  stdout: "test set: Error During Test at /tmp/tmpdered8z_.jl:51\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  BoundsError: attempt\
    \ to access 0-element Vector{String} at index [1]\n  Stacktrace:\n   [1] setindex!\n\
    \     @ ./array.jl:903 [inlined]\n   [2] by_length(arr::Vector{Int64})\n     @\
    \ Main /tmp/tmpdered8z_.jl:28\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpdered8z_.jl:51 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpdered8z_.jl:50\ntest set:\
    \ Error During Test at /tmp/tmpdered8z_.jl:52\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == Vector{String}([])\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Vector{String}\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{Vector{String}}, !Matched::LibGit2.StrArrayStruct) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LibGit2/src/strarray.jl:13\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at ~/.conda/envs/polyglot/share/julia/base/array.jl:554\n\
    \    ...\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmpdered8z_.jl:24\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpdered8z_.jl:52 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpdered8z_.jl:50\ntest set:\
    \ Error During Test at /tmp/tmpdered8z_.jl:53\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  BoundsError: attempt to access 0-element\
    \ Vector{String} at in"
  timestamp: 1660009189
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    if !isscalar(arr) || !arr.any?\n        return arr\n    end\n    \n  \
    \  # sort the integer that satisfy the condition\n    # between 1 and 9 inclusive\n\
    \    arr2 = sort(arr)\n    \n    # reverse the sorted array\n    arr3 = reverse(arr2)\n\
    \    \n    # replace the integer with its corresponding name from \"One\", \"\
    Two\", \"Three\",\n    # \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"\
    Nine\"\n    replace!(arr3, 1:9)\n    \n    return arr3\nend\n</cell>\n<text>\n\
    Exercise 6\nWhat are the most common integer numbers in the following array?\n\
    using Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: space required before \"?\" operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvqggvhfd.jl:19\nin expression starting at\
    \ /tmp/tmpvqggvhfd.jl:19\n"
  stdout: ''
  timestamp: 1660009185
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    arr = sort(arr)\n    arr = arr[2:end]\n    arr = arr[1:end]\n    arr =\
    \ arr.reverse()\n    return map(one_to_nine, arr)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3])\
    \ == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"\
    One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\t@test(candidate([1,\
    \ -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2]) == [\"Three\", \"Two\"\
    , \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpxl_zamkq.jl:27

    '
  stdout: "test set: Error During Test at /tmp/tmpxl_zamkq.jl:30\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  type Array has no field\
    \ reverse\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n\
    \   [2] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmpxl_zamkq.jl:22\n  \
    \ [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpxl_zamkq.jl:30 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpxl_zamkq.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpxl_zamkq.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == Vector{String}([])\n  type Array has no field\
    \ reverse\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n\
    \   [2] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmpxl_zamkq.jl:22\n  \
    \ [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpxl_zamkq.jl:31 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpxl_zamkq.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpxl_zamkq.jl:32\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  type Array has no field reverse\n  Stacktrace:\n\
    \   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] by_length(arr::Vector{Int64})\n\
    \     @ Main /tmp/tmpxl_zamkq.jl:22\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpxl_zamkq.jl:32 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpxl_zamkq.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpxl_zamkq.jl:33\n  Test threw exception\n  Exp"
  timestamp: 1660009187
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    if length(arr) == 0 \n        []\n    else \n        by = sort(arr)\n\
    \        reverse(by)\n        map(x -> \"One\", \"Two\", \"Three\", \"Four\",\
    \ \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\", x)\n    end\nend\n</cell>\n\
    <text>\nExercise\nWrite a function that takes a string and returns a vector of\
    \ the numbers in the string. For example: \n should return [45,32,9,0,12] \n should\
    \ return [3, 12, 8] \n should return [\"ab\", \"abc\", \"xyz\"] \n should return\
    \ [\"ab\", \"c\"] \n should return [\"\"] \n should return [\"ab\", \"\"] \n should\
    \ return [\"\", \"\"] \nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfb4zmipk.jl:27\nin expression starting at\
    \ /tmp/tmpfb4zmipk.jl:27\n"
  stdout: ''
  timestamp: 1660009186
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n  if length(arr)==0 then return []\n  a = sort(arr)\n  a = [a[start] for start\
    \ in start:end]\n  names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"\
    Six\", \"Seven\", \"Eight\", \"Nine\"]\n  c = reverse a\n  d = map names(c) \n\
    \  return d\nend\n</cell>\n<text>\nExercise: Write a function that returns the\
    \ string \"Odd\" if each digit in the given integer is odd\nand returns the string\
    \ \"Even\" if each digit is even. For example,\nif each digit in the integer is\
    \ 0, the function should return \"Even\".\nusing Test\n\n@testset begin\n\ncandidate\
    \ = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"\
    Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmphnv2wyst.jl:19\nin expression starting at /tmp/tmphnv2wyst.jl:19\n"
  stdout: ''
  timestamp: 1660009186
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    if arr.length == 0 \n        Vector{String}()\n    else \n        reverse(arr)\n\
    \        arr = arr |> Vector{Int64} |> to_vector |> by_length\n        arr |>\
    \ to_vector |> by_name \n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"\
    Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpys5g7hn_.jl:29

    '
  stdout: "test set: Error During Test at /tmp/tmpys5g7hn_.jl:32\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  type Array has no field\
    \ length\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n \
    \  [2] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmpys5g7hn_.jl:19\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpys5g7hn_.jl:32 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpys5g7hn_.jl:31\ntest set:\
    \ Error During Test at /tmp/tmpys5g7hn_.jl:33\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == Vector{String}([])\n  type Array has no field\
    \ length\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n \
    \  [2] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmpys5g7hn_.jl:19\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpys5g7hn_.jl:33 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpys5g7hn_.jl:31\ntest set:\
    \ Error During Test at /tmp/tmpys5g7hn_.jl:34\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  type Array has no field length\n  Stacktrace:\n\
    \   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] by_length(arr::Vector{Int64})\n\
    \     @ Main /tmp/tmpys5g7hn_.jl:19\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpys5g7hn_.jl:34 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpys5g7hn_.jl:31\ntest set:\
    \ Error During Test at /tmp/tmpys5g7hn_.jl:35\n  Test threw exception\n  Expres"
  timestamp: 1660009187
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    result = Vector{String}(undef, 0)\n    \n    for x in arr\n        if\
    \ x < 1 || x > 9\n            continue\n        end\n        result[x-1] = by_length([x-1])\
    \ + by_length([x+1]) + \"One\"\n    end\n    \n    if !length(result)\n      \
    \  return result\n    end\n    \n    for x in result\n        result[x] = reverse(result[x])\n\
    \    end\n    \n    return result\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"\
    Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpqrq696l2.jl:40

    '
  stdout: "test set: Error During Test at /tmp/tmpqrq696l2.jl:43\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  MethodError: no method\
    \ matching !(::Int64)\n  Closest candidates are:\n    !(!Matched::Function) at\
    \ ~/.conda/envs/polyglot/share/julia/base/operators.jl:1117\n    !(!Matched::Bool)\
    \ at ~/.conda/envs/polyglot/share/julia/base/bool.jl:35\n    !(!Matched::Missing)\
    \ at ~/.conda/envs/polyglot/share/julia/base/missing.jl:101\n  Stacktrace:\n \
    \  [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmpqrq696l2.jl:28\n   [2]\
    \ by_length(arr::Vector{Int64}) (repeats 2 times)\n     @ Main /tmp/tmpqrq696l2.jl:25\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpqrq696l2.jl:43 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpqrq696l2.jl:42\ntest set:\
    \ Error During Test at /tmp/tmpqrq696l2.jl:44\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == Vector{String}([])\n  MethodError: no method\
    \ matching !(::Int64)\n  Closest candidates are:\n    !(!Matched::Function) at\
    \ ~/.conda/envs/polyglot/share/julia/base/operators.jl:1117\n    !(!Matched::Bool)\
    \ at ~/.conda/envs/polyglot/share/julia/base/bool.jl:35\n    !(!Matched::Missing)\
    \ at ~/.conda/envs/polyglot/share/julia/base/missing.jl:101\n  Stacktrace:\n \
    \  [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmpqrq696l2.jl:28\n   [2]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpqrq696l2.jl:44 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpqrq696l2.jl:42\ntest set:\
    \ Error During Test at /tmp/tmpqrq696l2.jl:45\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  MethodError: no method m"
  timestamp: 1660009188
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    if arr.length == 0\n        return Vector{String}[]\n    elseif arr.length\
    \ == 1\n        return [\"One\"]\n    end\n    \n    sorted_arr = sort(arr)\n\
    \    reverse(sorted_arr)\n    \n    digit_counts = Dict(\"One\" => 1, \"Two\"\
    \ => 2, \"Three\" => 3, \"Four\" => 4,\n                        \"Five\" => 5,\
    \ \"Six\" => 6, \"Seven\" => 7, \"Eight\" => 8,\n                        \"Nine\"\
    \ => 9, \"Ten\" => 10)\n    \n    arr_str = [digit_counts[digit] for (digit) in\
    \ sorted_arr]\n    return arr_str\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"\
    Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpxh0fuonz.jl:37

    '
  stdout: "test set: Error During Test at /tmp/tmpxh0fuonz.jl:40\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  type Array has no field\
    \ length\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n \
    \  [2] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmpxh0fuonz.jl:19\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpxh0fuonz.jl:40 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpxh0fuonz.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpxh0fuonz.jl:41\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == Vector{String}([])\n  type Array has no field\
    \ length\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n \
    \  [2] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmpxh0fuonz.jl:19\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpxh0fuonz.jl:41 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpxh0fuonz.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpxh0fuonz.jl:42\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  type Array has no field length\n  Stacktrace:\n\
    \   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] by_length(arr::Vector{Int64})\n\
    \     @ Main /tmp/tmpxh0fuonz.jl:19\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpxh0fuonz.jl:42 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpxh0fuonz.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpxh0fuonz.jl:43\n  Test threw exception\n  Expres"
  timestamp: 1660009188
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    l = maximum(arr)\n    res = arr.filter(x->x > 1 && x <= 9) |> \n     \
    \   sort |>\n        reverse |>\n        map(x->lookup(x, l))\n    return res\n\
    end\n</cell>\n<code language=julia-0.5>\n\"\"\"\n    Given an ordered vector of\
    \ integers, return its corresponding vector of the same length, with each integer\
    \ between \n    1 and 9 replaced by its name from \"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\nusing Test\n\n\
    @testset begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8,\
    \ 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\t@test(candidate([1,\
    \ -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2]) == [\"Three\", \"Two\"\
    , \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvhdfbi88.jl:26\nin expression starting at\
    \ /tmp/tmpvhdfbi88.jl:26\n"
  stdout: ''
  timestamp: 1660009186
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    if !length(arr)\n        return Vector{String}()\n    end\nusing Test\n\
    \n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5,\
    \ 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"\
    One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp4uw16nc2.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp4uw16nc2.jl:1\n\
    in expression starting at /tmp/tmp4uw16nc2.jl:1\n"
  stdout: ''
  timestamp: 1660009186
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    return reverse(sort(arr))\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"\
    Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpxpowv6u8.jl:23

    '
  stdout: "test set: Error During Test at /tmp/tmpxpowv6u8.jl:26\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  MethodError: Cannot\
    \ `convert` an object of type Int64 to an object of type String\n  Closest candidates\
    \ are:\n    convert(::Type{String}, !Matched::String) at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n    [1] setindex!(A::Vector{String}, x::Int64, i1::Int64)\n\
    \      @ Base ./array.jl:903\n    [2] _unsafe_copyto!(dest::Vector{String}, doffs::Int64,\
    \ src::Vector{Int64}, soffs::Int64, n::Int64)\n      @ Base ./array.jl:253\n \
    \   [3] unsafe_copyto!\n      @ ./array.jl:307 [inlined]\n    [4] _copyto_impl!\n\
    \      @ ./array.jl:331 [inlined]\n    [5] copyto!\n      @ ./array.jl:317 [inlined]\n\
    \    [6] copyto!\n      @ ./array.jl:343 [inlined]\n    [7] copyto_axcheck!\n\
    \      @ ./abstractarray.jl:1104 [inlined]\n    [8] Vector{String}(x::Vector{Int64})\n\
    \      @ Base ./array.jl:563\n    [9] convert\n      @ ./array.jl:554 [inlined]\n\
    \   [10] by_length(arr::Vector{Int64})\n      @ Main /tmp/tmpxpowv6u8.jl:19\n\
    \   [11] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [12] macro expansion\n      @ /tmp/tmpxpowv6u8.jl:26 [inlined]\n\
    \   [13] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [14] top-level scope\n      @ /tmp/tmpxpowv6u8.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpxpowv6u8.jl:28\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  MethodError: Cannot `convert` an object\
    \ of type Int64 to an object of type String\n  Closest candidates are:\n    convert(::Type{String},\
    \ !Matched::String) at ~/.conda/envs/polyglot/share/julia/base/essen"
  timestamp: 1660009189
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    l = length(arr)\n    if l == 0\n        []\n    elseif l == 1\n      \
    \  One[arr[1]]\n    else\n        by_length(arr[2:l-1])\n        Reverse(One[arr[end]]\
    \ :: by_length(arr[1:end-1]))\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmp3schq9pr.jl:31

    '
  stdout: "test set: Error During Test at /tmp/tmp3schq9pr.jl:34\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  UndefVarError: One not\
    \ defined\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmp3schq9pr.jl:26\n\
    \   [2] by_length(arr::Vector{Int64}) (repeats 3 times)\n     @ Main /tmp/tmp3schq9pr.jl:25\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp3schq9pr.jl:34 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp3schq9pr.jl:33\ntest set:\
    \ Error During Test at /tmp/tmp3schq9pr.jl:36\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  UndefVarError: One not defined\n  Stacktrace:\n\
    \   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmp3schq9pr.jl:23\n  \
    \ [2] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmp3schq9pr.jl:25\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp3schq9pr.jl:36 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp3schq9pr.jl:33\ntest set:\
    \ Error During Test at /tmp/tmp3schq9pr.jl:37\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"]\n  UndefVarError:\
    \ One not defined\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @\
    \ Main /tmp/tmp3schq9pr.jl:26\n   [2] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmp3schq9pr.jl:25\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp3schq9pr.jl:37 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp3schq9pr.jl:"
  timestamp: 1660009188
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    vec = copy(arr)\n    length = length(vec)\n    \n    if length == 0 \n\
    \        return Vector{String}() \n    \n    elseif length == 1  \n        return\
    \ [\"One\"]\n    \n    elseif length == 2\n        return [\"Two\", \"One\"]\n\
    \    \n    elseif length == 3\n        return [\"Three\", \"Two\", \"One\"]\n\
    \    \n    elseif length == 4\n        return [\"Four\", \"Three\", \"Two\", \"\
    One\"]\n    \n    elseif length == 5\n        return [\"Five\", \"Four\", \"Three\"\
    , \"Two\", \"One\"]\n    \n    elseif length == 6\n        return [\"Six\", \"\
    Five\", \"Four\", \"Three\", \"Two\", \"One\"]\n    \n    elseif length == 7\n\
    \        return [\"Seven\", \"Six\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    One\"]\n    \n    elseif length == 8\n        return [\"Eight\", \"Seven\", \"\
    Six\", \"Five\", \"Four\", \"Three\", \"Two\", \"One\"]\n    \n    elseif length\
    \ == 9\n        return [\"Nine\", \"Eight\", \"Seven\", \"Six\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"One\"]\n    \n    elseif length > 9\n        return\
    \ vec \n    \n    end\nend\n</cell>\n<code language=julia-1.3>\nby_length([])\n\
    </cell>\n<code language=julia-1.3>\nby_length([1, -1, 55])\n</cell>\n<text>\n\u2B1C\
    \ 9. Write a function that returns all strings of length 1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10 or greater that begin with digits and are exactly 4 characters long.\n\
    using Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpj8o8ljm7.jl:57\nin expression starting at\
    \ /tmp/tmpj8o8ljm7.jl:57\n"
  stdout: ''
  timestamp: 1660009186
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    vec = Vector{String}(\"\")\n    if isempty(arr)\n        return vec\n\
    \    else\n        first = arr.first\n        last = arr.last\n        mid = first+last/2\n\
    \        if last > 9\n            vec(vec == mid) = \"One\"\n            vec(vec\
    \ == first) = \"Two\"\n            vec(vec == last) = \"Three\"\n        else\n\
    \            if mid == 1\n                vec(vec == mid) = \"One\"\n        \
    \    elseif mid == 9\n                vec(vec == mid) = \"Nine\"\n           \
    \ else\n                vec(vec == mid) = \"Two\"\n            end\n        end\n\
    \        arr2 = vec[first:last]\n        arr3 = vec[first:last]\n        for i\
    \ in 1:9\n            if i != 1\n                arr3 = arr3::String\n       \
    \     end\n            arr3[i] = by_length(arr[i])\n        end\n        return\
    \ arr3\n    end\nend\n</cell>\n<text>\nPart 2\nIn the previous exercise, you made\
    \ a function that transforms a vector in to a string by replacing each\nelement\
    \ by a name. In Part 2, you will create the same function using two for loops.\
    \ You will\nneed to use a single for loop and two if statements.\nusing Test\n\
    \n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5,\
    \ 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"\
    One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"(vec == mid)\" is not a valid function argument\
    \ name around /tmp/tmp3xomqhpw.jl:27\nStacktrace:\n [1] top-level scope\n   @\
    \ /tmp/tmp3xomqhpw.jl:1\nin expression starting at /tmp/tmp3xomqhpw.jl:1\n"
  stdout: ''
  timestamp: 1660009187
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    if length(arr) == 0\n        []\n    elseif length(arr) < 10\n       \
    \ [One, Two, Three, Four, Five, Six,Seven, Eight, Nine]\n    else\n        reverse(vec(arr))\n\
    \        .map(name -> \n            if arr[1] == 10\n                name\n  \
    \          else\n                name * 10 + arr[1]\n            )\n        |>\
    \ Vector{String}\n    end\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5,\
    \ 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"\
    One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid identifier name \".\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp46t8ja5s.jl:25\nin expression starting at\
    \ /tmp/tmp46t8ja5s.jl:25\n"
  stdout: ''
  timestamp: 1660009187
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    if isempty(arr)\n        return Vector{}\n    end\n    \n    local names\
    \ = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\"\
    , \"Nine\"]\n    return reverse(arr |> sort_by_key -> names[x] for x in arr |>\
    \ Array{Int64}) |> Vector{String}\nend\n</cell>\n<code language=julia-1.5>\nby_length(collect(1:9))\n\
    </cell>\n<text>\nLet's write a function that accepts a vector of integers and\
    \ returns the same vector but with the integers sorted by their length (in descending\
    \ order).\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp14s538h4.jl:26\nin expression starting at\
    \ /tmp/tmp14s538h4.jl:26\n"
  stdout: ''
  timestamp: 1660009187
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    if arr.empty()\n        return Vector{String}()\n    end\n    \n    if\
    \ maximum(arr) > 9\n        arr2 = sort(arr)\n        arr3 = reverse.(arr2)\n\
    \        return [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"\
    Seven\", \"Eight\", \"Nine\"]\n    else\n        return [\"One\", \"Two\", \"\
    Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpxtpqj06h.jl:33

    '
  stdout: "test set: Error During Test at /tmp/tmpxtpqj06h.jl:36\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  type Array has no field\
    \ empty\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n  \
    \ [2] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmpxtpqj06h.jl:19\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpxtpqj06h.jl:36 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpxtpqj06h.jl:35\ntest set:\
    \ Error During Test at /tmp/tmpxtpqj06h.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == Vector{String}([])\n  type Array has no field\
    \ empty\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n  \
    \ [2] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmpxtpqj06h.jl:19\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpxtpqj06h.jl:37 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpxtpqj06h.jl:35\ntest set:\
    \ Error During Test at /tmp/tmpxtpqj06h.jl:38\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  type Array has no field empty\n  Stacktrace:\n\
    \   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] by_length(arr::Vector{Int64})\n\
    \     @ Main /tmp/tmpxtpqj06h.jl:19\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpxtpqj06h.jl:38 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpxtpqj06h.jl:35\ntest set:\
    \ Error During Test at /tmp/tmpxtpqj06h.jl:39\n  Test threw exception\n  Expressio"
  timestamp: 1660009189
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    if length(arr) == 0 \n        return [] \n    end\n    \n    tmp = Vector{String}(undef,\
    \ length(arr))\n    \n    for i in 1:length(arr)\n        if arr[i] >= 1 && arr[i]\
    \ <= 9 \n            push!(tmp[i], \"One\") \n            push!(tmp[i], \"Two\"\
    ) \n            push!(tmp[i], \"Three\") \n            push!(tmp[i], \"Four\"\
    ) \n            push!(tmp[i], \"Five\") \n            push!(tmp[i], \"Six\") \n\
    \            push!(tmp[i], \"Seven\") \n            push!(tmp[i], \"Eight\") \n\
    \            push!(tmp[i], \"Nine\") \n            push!(tmp[i], \"Ten\") \n \
    \           push!(tmp[i], \"Eleven\") \n            push!(tmp[i], \"Twelve\")\
    \ \n            push!(tmp[i], \"Thirteen\") \n            push!(tmp[i], \"Fourteen\"\
    ) \n            push!(tmp[i], \"Fifteen\") \n            push!(tmp[i], \"Sixteen\"\
    ) \n            push!(tmp[i], \"Seventeen\") \n            push!(tmp[i], \"Eighteen\"\
    ) \n            push!(tmp[i], \"Nineteen\") \n        elseif arr[i] >= 10 && arr[i]\
    \ <= 19 \n            push!(tmp[i], \"Twelve\") \n            push!(tmp[i], \"\
    Thirteen\") \n            push!(tmp[i], \"Fourteen\") \n            push!(tmp[i],\
    \ \"Fifteen\") \n            push!(tmp[i], \"Sixteen\") \n            push!(tmp[i],\
    \ \"Seventeen\") \n            push!(tmp[i], \"Eighteen\") \n            push!(tmp[i],\
    \ \"Nineteen\") \n            push!(tmp[i], \"Twenty\") \n            push!(tmp[i],\
    \ \"Twenty One\") \n        elseif arr[i] >= 20 && arr[i] <= 99 \n           \
    \ push!(tmp[i], \"Twenty One\") \n            push!(tmp[i], \"Twenty Two\") \n\
    \            push!(tmp[i], \"Twenty Three\") \n            push!(tmp[i], \"Twenty\
    \ Four\") \n            push!(tmp[i], \"Twenty Five\") \n            push!(tmp[i],\
    \ \"Twenty Six\") \n            push!(tmp[i], \"Twenty Seven\") \n           \
    \ push!(tmp[i], \"Twenty Eight\") \n            push!(tmp[i], \"Twenty Nine\"\
    ) \n        elseif arr[i] >= 100 && arr[i] <= 999 \n            push!(tmp[i],\
    \ \"Twenty Nine\") \n            push!(tmp[i], \nusing Test\n\n@testset begin\n\
    \ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpb2a0ian9.jl:72\nin expression starting at\
    \ /tmp/tmpb2a0ian9.jl:72\n"
  stdout: ''
  timestamp: 1660009187
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    \n    if length(arr) == 0\n        Vector{String}()\n    elseif length(arr)\
    \ == 1\n        Vector{String}[\"One\"]\n    elseif length(arr) == 2\n       \
    \ Vector{String}[\"Two\"]\n    elseif length(arr) == 3\n        Vector{String}[\"\
    Three\"]\n    elseif length(arr) == 4\n        Vector{String}[\"Four\"]\n    elseif\
    \ length(arr) == 5\n        Vector{String}[\"Five\"]\n    elseif length(arr) ==\
    \ 6\n        Vector{String}[\"Six\"]\n    elseif length(arr) == 7\n        Vector{String}[\"\
    Seven\"]\n    elseif length(arr) == 8\n        Vector{String}[\"Eight\"]\n   \
    \ elseif length(arr) == 9\n        Vector{String}[\"Nine\"]\n    else\n      \
    \  Vector{String}[\"One\"]\n        for num in reverse(arr)\n            append!(result,\
    \ names[num])\n        end\n    end\n    \nend\nusing Test\n\n@testset begin\n\
    \ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmptbtpnj31.jl:50

    '
  stdout: "test set: Error During Test at /tmp/tmptbtpnj31.jl:53\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  MethodError: Cannot\
    \ `convert` an object of type String to an object of type Vector{String}\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{Vector{String}}, !Matched::LibGit2.StrArrayStruct) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LibGit2/src/strarray.jl:13\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at ~/.conda/envs/polyglot/share/julia/base/array.jl:554\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(A::Vector{Vector{String}}, x::String,\
    \ i1::Int64)\n     @ Base ./array.jl:903\n   [2] getindex\n     @ ./array.jl:412\
    \ [inlined]\n   [3] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmptbtpnj31.jl:37\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmptbtpnj31.jl:53 [inlined]\n\
    \   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmptbtpnj31.jl:52\ntest set:\
    \ Error During Test at /tmp/tmptbtpnj31.jl:55\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  MethodError: Cannot `convert` an object\
    \ of type String to an object of type Vector{String}\n  Closest candidates are:\n\
    \    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{Vector{String}}, !Matched::LibGit2.StrArrayStruct) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LibGit2/src/strarray.jl:13\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at ~/.conda/envs/polyglot/share/julia/base/array.jl:554\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(A::Vect"
  timestamp: 1660009190
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    if arr.empty\n        return empty_list()\n    sorted_arr = sort!(arr)\n\
    \    \n    digits = Vector{String}()\n    \n    for e in sorted_arr\n        if\
    \ e < 1 || e > 9\n            next\n        end\n        digits[e] = digits[e]\
    \ + string(e)\n    end\n    \n    return digits\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmptyt9rt7n.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmptyt9rt7n.jl:1\n\
    in expression starting at /tmp/tmptyt9rt7n.jl:1\n"
  stdout: ''
  timestamp: 1660009187
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n  s = \"\"\n  for elt in arr \n    s *= elt.to_string()\n  end\n  Vector{String}(split(s))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpe0_8odb3.jl:27

    '
  stdout: "test set: Error During Test at /tmp/tmpe0_8odb3.jl:30\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  type Int64 has no field\
    \ to_string\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n\
    \   [2] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmpe0_8odb3.jl:21\n  \
    \ [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpe0_8odb3.jl:30 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpe0_8odb3.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpe0_8odb3.jl:32\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  type Int64 has no field to_string\n \
    \ Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] by_length(arr::Vector{Int64})\n\
    \     @ Main /tmp/tmpe0_8odb3.jl:21\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpe0_8odb3.jl:32 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpe0_8odb3.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpe0_8odb3.jl:33\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"]\n  type Int64 has\
    \ no field to_string\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n\
    \   [2] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmpe0_8odb3.jl:21\n  \
    \ [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpe0_8odb3.jl:33 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpe0_8odb3.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpe0_8odb3.jl:34\n  Test threw exceptio"
  timestamp: 1660009189
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    if length(arr) == 0\n        return Vector{String}()\n    \n    sort!(arr)\n\
    \    \n    first = arr[1]\n    if first >= 1 && first <= 9\n        middle = arr[(first\
    \ + 1):end]\n    else\n        middle = arr[first:end]\n    end\n    \n    last\
    \  = arr[end]\n    \n    middle = middle[(first <= last ? 1 : end - first):end]\n\
    \    \n    first = \"One\"\n    middle = \"Two\"\n    last  = \"One\"\n    \n\
    \    reverse!(middle)\n    \n    middle = middle[(first <= last ? 1 : end - first):end]\n\
    \    \n    first = \"One\"\n    middle = \"Two\"\n    last  = \"One\"\n    \n\
    \    push!(middle, last)\n    \n    middle = middle[(first <= last ? 1 : end -\
    \ first):end]\n    \n    first = \"One\"\n    middle = \"Two\"\n    last  = \"\
    One\"\n    \n    push!(middle, last)\n    \n    middle = middle[(first <= last\
    \ ? 1 : end - first):end]\n    \n    first = \"One\"\n    middle = \"Two\"\n \
    \   last  = \"One\"\n    \n    push!(middle, last)\n    \n    middle = middle[(first\
    \ <= last ? 1 : end - first):end]\n    \n    first = \"One\"\n    middle = \"\
    Two\"\n    last  = \"One\"\n    \n    push!(middle, last)\n    \n    middle =\
    \ middle[(first <= last ? 1 : end - first):end]\n    \n    first = \"One\"\n \
    \   middle = \"Two\"\n    last  = \"One\"\n    \n    push!(middle, last)\n   \
    \ \n    middle = middle[(first <= last ? 1 : end - first):end]\n    \n    first\
    \ = \"One\"\n    middle = \"Two\"\n    last  = \"One\"\n    \n    push!(middle,\
    \ last)\n    \n    middle = middle[(first <= last ? 1 : end - first):end]\n  \
    \  \n    first = \"One\"\n    middle = \"Two\"\n    last  = \"One\"\n    \n  \
    \  push!(middle, last)\n    \n    middle = middle[(first <= last ? 1 : end - first):end]\n\
    \    \n    first = \"One\"\n    middle = \"Two\"\n    last  = \"One\"\n    \n\
    \    push!(middle, last)\n    \n    middle = middle[(first <= last ? 1 : end -\
    \ first):end]\n    \nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t\
    @test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpj3ywkf5o.jl:1\nin expression starting at /tmp/tmpj3ywkf5o.jl:1\n"
  stdout: ''
  timestamp: 1660009188
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    if arr.is_empty() \n        return Vector{String}() \n    \n    results\
    \ = fill(\"\", length(arr))\n    idx = 0\n    for n in arr\n        if n < 0 ||\
    \ n > 9\n            results[idx] = \"Nine\"\n        else\n            results[idx]\
    \ = names(n)[1]\n        end\n        idx += 1\n    end\n    return results\n\
    end\nby_length([])\nby_length([2,5,2,1])\nby_length([1,1,1,1,1,1,1])\nby_length([1,\
    \ 1, 0, 0])\nby_length([5, 6, 0, 3, 2])\nby_length([5, 6, 0, 3, 2])\nby_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\nby_length([1, 1, 0, 0])\nby_length([1, 1, 0, 0])\nby_length([2,1])\n\
    by_length([2,1])\nby_length([2,1,2])\nby_length([2,1,2])\nby_length([2,1,2])\n\
    by_length([1,1,1,1,1,1,1])\nby_length([1, 1, 0, 0])\nby_length([1, 1, 0, 0])\n\
    by_length([1,1,0])\nby_length([1,1,0])\nby_length([1,1,0])\nby_length([1,1,0])\n\
    by_length([1,1,1])\nby_length([1, 1, 0, 0])\nby_length([1, 1, 0, 0])\nby_length([1,1,1])\n\
    by_length([1, 1, 0, 0])\nby_length([1, 1, 0, 0])\nby_length([1,1,1])\nby_length([1,\
    \ 1, 0, 0])\nby_length([1, 1, 0, 0])\nby_length([1,1,1])\nby_length([1, 1, 0,\
    \ 0])\nby_length([1, 1, 0, 0])\nby_length([1,1,1])\nby_length([1, 1, 0, 0])\n\
    by_length([1, 1, 0, 0])\nby_length([1,1,1])\nby_length([1, 1, 0, 0])\nby_length([1,\
    \ 1, 0, 0])\nby_length([1,1,1])\nby_length([1, 1, 0, 0])\nby_length([1, 1, 0,\
    \ 0])\nby_length([1,1,1])\nby_length([1, 1, 0, 0])\nby_length([1, 1, 0, 0])\n\
    by_length([1,1,1])\nby_length([1, 1, 0, 0])\nby_length([1, 1, 0, 0])\nby_length([1,1,1])\n\
    by_length([1, 1, 0, 0])\nby_length([1, 1, 0, 0])\nby_length([1,1,1])\nby_length([1,\
    \ 1, 0, 0])\nby_length([1, 1, 0, 0])\nby_length([1,1,1])\nby_length([1, 1, 0,\
    \ 0])\nby_length([1, 1, 0, 0])\nby_length([1,1,1])\nby_length([1, 1, 0, 0])\n\
    by_length([1, 1, 0, 0])\nby_length([1,1,1])\nby_length([1, 1, 0, 0])\nby_length([1,\
    \ 1, 0, 0])\nby_length([1,1,1])\nby_length([1, 1, 0, 0])\nby_length([1, 1, 0,\
    \ 0])\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpx1yb_372.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpx1yb_372.jl:1\n\
    in expression starting at /tmp/tmpx1yb_372.jl:1\n"
  stdout: ''
  timestamp: 1660009187
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    \n    if length(arr) == 0 \n        return Vector{String}() \n    else\
    \ \n        result = []\n    \n        for num in arr \n            if 1 <= num\
    \ <= 9 \n                push!(result, names(num))\n            end \n       \
    \ end \n        \n        result = reverse(result)\n        \n        for elem\
    \ in result \n            replace(elem, x -> names(x), \"\")\n        end\n  \
    \      \n        return result\n    end\nend \n</cell>\n<code language=julia-1.0>\n\
    by_length(arr)\n</cell>\n<text>\nPart 2: Basic linear algebra\nusing Test\n\n\
    @testset begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8,\
    \ 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\t@test(candidate([1,\
    \ -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2]) == [\"Three\", \"Two\"\
    , \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplglswb2r.jl:40\nin expression starting at\
    \ /tmp/tmplglswb2r.jl:40\n"
  stdout: ''
  timestamp: 1660009187
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    to_sort(arr)\n    vec = []\n    for x in to_sort\n        if x > 0\n \
    \           push!(vec, \n                   names(ByLength[getfield(ByLength,\
    \ x, 1)]) \n                   |> String.replace(\" \", \"\"))\n        else\n\
    \            push!(vec, \"\")\n        end\n    end\n    vec\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5,\
    \ 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"\
    One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmp2demt9t2.jl:34

    '
  stdout: "test set: Error During Test at /tmp/tmp2demt9t2.jl:37\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  UndefVarError: to_sort\
    \ not defined\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmp2demt9t2.jl:19\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp2demt9t2.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp2demt9t2.jl:36\ntest set:\
    \ Error During Test at /tmp/tmp2demt9t2.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == Vector{String}([])\n  UndefVarError: to_sort\
    \ not defined\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmp2demt9t2.jl:19\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp2demt9t2.jl:38 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp2demt9t2.jl:36\ntest set:\
    \ Error During Test at /tmp/tmp2demt9t2.jl:39\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  UndefVarError: to_sort not defined\n\
    \  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmp2demt9t2.jl:19\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp2demt9t2.jl:39 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp2demt9t2.jl:36\ntest set:\
    \ Error During Test at /tmp/tmp2demt9t2.jl:40\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"]\n  UndefVarError:\
    \ to_sort not defined\n  Stacktrace:\n   [1] by_length(arr::Vect"
  timestamp: 1660009190
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    if length(arr)==0 return []\n    \n    sorted_index = sort_index(arr)\n\
    \    reversed_index = reverse_index(sorted_index)\n    arr = translate_to_names(arr)\n\
    \    return arr\nend\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpe8pnu8k3.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpe8pnu8k3.jl:1\n\
    in expression starting at /tmp/tmpe8pnu8k3.jl:1\n"
  stdout: ''
  timestamp: 1660009188
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    if is_empty(arr)\n        Vector{String}()\n    else\n        sorted =\
    \ sort_by_length(arr)\n        reverse(sorted)\n        str = join(sorted, \"\
    \ \")\n        regex = r\"^([A-z]+)\"\n        result = gmatch(regex, str)\n \
    \       vec = []\n        for d in result[2]\n            if isdigit(d)\n    \
    \            vec .= Ones[findfirst(d .== As,1:9)]\n            else \n       \
    \         vec .= d\n        end\n        reverse(vec)\n        vec\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmps94i8g2h.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmps94i8g2h.jl:1\n\
    in expression starting at /tmp/tmps94i8g2h.jl:1\n"
  stdout: ''
  timestamp: 1660009189
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    if length(arr)==0 \n        return Vector{String}()\n    else if length(arr)==1\
    \ \n        return [getname(arr[1])]\n    else\n        sorted_arr = sort(arr)\n\
    \        reverse(sorted_arr)\n        ans = Vector{String}()\n        for i in\
    \ sorted_arr\n            push!(ans, getname(i))\n        end\n        return\
    \ ans\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t\
    @test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmn7u9nsv.jl:21\nin expression starting at\
    \ /tmp/tmpmn7u9nsv.jl:21\n"
  stdout: ''
  timestamp: 1660009188
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    if len(arr) == 0 \n        return Vector{String}() \n    end\nusing Test\n\
    \n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5,\
    \ 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"\
    One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp3ttdn1b_.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp3ttdn1b_.jl:1\n\
    in expression starting at /tmp/tmp3ttdn1b_.jl:1\n"
  stdout: ''
  timestamp: 1660009188
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    sort!(arr)\n    arr_reverse!(reverse(arr))\n    arr = arr .+ 9\n    names\
    \ = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\"\
    , \"Nine\"]\n    result = zeros(length(arr),1)\n    length(result) = length(arr)\n\
    \    for i in eachindex(arr)\n        result[i] = names[i]\n    end\n    \n  \
    \  return result\nend\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpzfapn4xt.jl:33

    '
  stdout: "test set: Error During Test at /tmp/tmpzfapn4xt.jl:36\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  UndefVarError: arr_reverse!\
    \ not defined\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmpzfapn4xt.jl:20\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpzfapn4xt.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpzfapn4xt.jl:35\ntest set:\
    \ Error During Test at /tmp/tmpzfapn4xt.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == Vector{String}([])\n  UndefVarError: arr_reverse!\
    \ not defined\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmpzfapn4xt.jl:20\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpzfapn4xt.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpzfapn4xt.jl:35\ntest set:\
    \ Error During Test at /tmp/tmpzfapn4xt.jl:38\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  UndefVarError: arr_reverse! not defined\n\
    \  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmpzfapn4xt.jl:20\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpzfapn4xt.jl:38 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpzfapn4xt.jl:35\ntest set:\
    \ Error During Test at /tmp/tmpzfapn4xt.jl:39\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"]\n  UndefVarError:\
    \ arr_reverse! not defined\n  Stacktrace:\n   [1]"
  timestamp: 1660009191
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    \n    if arr.length == 0\n        return Vector{String}()\n    \n    if\
    \ arr[0] <= 1 || arr[1] <= 9 || arr[2] <= 9 || arr[3] <= 9 || arr[4] <= 9 || arr[5]\
    \ <= 9 || arr[6] <= 9 || arr[7] <= 9 || arr[8] <= 9\n        return Vector{String}()\n\
    \    end\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp489ioxtx.jl:1\nin expression starting at /tmp/tmp489ioxtx.jl:1\n"
  stdout: ''
  timestamp: 1660009189
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    if isempty(arr)\n        return Vector{String}()\n    end\nusing Test\n\
    \n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5,\
    \ 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"\
    One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpevuhapvl.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpevuhapvl.jl:1\n\
    in expression starting at /tmp/tmpevuhapvl.jl:1\n"
  stdout: ''
  timestamp: 1660009184
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    if arr == [] \n        arr \n    else\n        arr = sort(arr)\n     \
    \   arr = reverse(arr)\n        for i in arr\n            if i > 9\n         \
    \       push!(reverse(reverse(vec2name)), i) \n            elseif i < 1\n    \
    \            push!(reverse(vec2name), 1)\n            else\n                push!(reverse(vec2name),\
    \ i)\n            end\n        end\n    end\nend\nby_length(arr::Vector{Int64})::Vector{String}\n\
    </cell>\n<text>\nBy length function\nusing Test\n\n@testset begin\n\ncandidate\
    \ = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"\
    Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: UndefVarError: arr not defined\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpjqahykta.jl:35\nin expression starting at /tmp/tmpjqahykta.jl:35\n"
  stdout: ''
  timestamp: 1660009189
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    if arr.size == 0 \n        return Vector{String}()\n    \n    sorted_arr\
    \ = sort(arr)\n    \n    index = find_first_occurrence(sorted_arr, 1)\n    \n\
    \    if index == -1 \n        return Vector{String}()\n    \n    results = Vector{String}()\n\
    \    \n    digits = zeros(Int64, 10^9)\n    \n    while index != -1 do\n     \
    \   digits[arr[index]] = index\n        index = find_first_occurrence(sorted_arr,\
    \ index + 1)\n        \n        push!(results, by_digits(digits))\n    end\n \
    \   \n    results\nend\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid \"do\" syntax\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpoensfxea.jl:33\nin expression starting at /tmp/tmpoensfxea.jl:33\n"
  stdout: ''
  timestamp: 1660009189
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    vec = Vector{String}(undef, 0)\n    if !isempty(arr)\n        vec[1] =\
    \ name_by_length(1, arr)\n        vec[2] = name_by_length(2, arr)\n        vec[3]\
    \ = name_by_length(3, arr)\n        vec[4] = name_by_length(4, arr)\n        vec[5]\
    \ = name_by_length(5, arr)\n        vec[6] = name_by_length(6, arr)\n        vec[7]\
    \ = name_by_length(7, arr)\n        vec[8] = name_by_length(8, arr)\n        vec[9]\
    \ = name_by_length(9, arr)\n    end\n    vec\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpu2zxuvh9.jl:35

    '
  stdout: "test set: Error During Test at /tmp/tmpu2zxuvh9.jl:38\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  UndefVarError: name_by_length\
    \ not defined\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmpu2zxuvh9.jl:21\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpu2zxuvh9.jl:38 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpu2zxuvh9.jl:37\ntest set:\
    \ Error During Test at /tmp/tmpu2zxuvh9.jl:40\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  UndefVarError: name_by_length not defined\n\
    \  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmpu2zxuvh9.jl:21\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpu2zxuvh9.jl:40 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpu2zxuvh9.jl:37\ntest set:\
    \ Error During Test at /tmp/tmpu2zxuvh9.jl:41\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"]\n  UndefVarError:\
    \ name_by_length not defined\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n\
    \     @ Main /tmp/tmpu2zxuvh9.jl:21\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpu2zxuvh9.jl:41 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpu2zxuvh9.jl:37\ntest set:\
    \ Error During Test at /tmp/tmpu2zxuvh9.jl:42\n  Test threw exception\n  Expression:\
    \ candidate([9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"]\n  UndefVarError: name_by_length\
    \ not defined\n  Stacktrace:"
  timestamp: 1660009191
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    empty_str = String[]\n    reverse_str = String[]\n    for number in arr\n\
    \        if number < 1 || number > 9\n            continue\n        else\n   \
    \         digit = number(10)\n            if digit == 0\n                reverse_str\
    \ = reverse(empty_str)\n                continue\n            end\n        end\n\
    \        reverse_str = reverse(\n            reverse_str ++ [\n              \
    \  \"One\",\n                \"Two\",\n                \"Three\",\n          \
    \      \"Four\",\n                \"Five\",\n                \"Six\",\n      \
    \          \"Seven\",\n                \"Eight\",\n                \"Nine\",\n\
    \            ][digit]\n        )\n    end\n    reverse_str\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8,\
    \ 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\t@test(candidate([1,\
    \ -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2]) == [\"Three\", \"Two\"\
    , \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmp89ulj3j0.jl:49

    '
  stdout: "test set: Error During Test at /tmp/tmp89ulj3j0.jl:52\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  MethodError: objects\
    \ of type Int64 are not callable\n  Maybe you forgot to use an operator such as\
    \ *, ^, %, / etc. ?\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n   \
    \  @ Main /tmp/tmp89ulj3j0.jl:25\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp89ulj3j0.jl:52 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp89ulj3j0.jl:51\ntest set:\
    \ Error During Test at /tmp/tmp89ulj3j0.jl:54\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  MethodError: objects of type Int64 are\
    \ not callable\n  Maybe you forgot to use an operator such as *, ^, %, / etc.\
    \ ?\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmp89ulj3j0.jl:25\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp89ulj3j0.jl:54 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp89ulj3j0.jl:51\ntest set:\
    \ Error During Test at /tmp/tmp89ulj3j0.jl:55\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"]\n  MethodError: objects\
    \ of type Int64 are not callable\n  Maybe you forgot to use an operator such as\
    \ *, ^, %, / etc. ?\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n   \
    \  @ Main /tmp/tmp89ulj3j0.jl:25\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp89ulj3j0.jl:55 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @"
  timestamp: 1660009192
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    if arr.length == 0 \n        return Vector{String}()\n    end\n    arr\
    \ = arr - 9\n    arr = arr / 9\n    arr = arr * 9 + 9\n    arr = arr + 9\n   \
    \ arr = [One, Two, Three, Four, Five, Six, Seven, Eight, Nine][arr]\n    return\
    \ reverse(arr)\nend\n</code>\n<|/ a dscore=2 |>\n<| c |>\nNice! You had the general\
    \ idea right, but since this is such a simple problem, I wonder why you didn't\
    \ just use `sort(arr)` instead of implementing your own? I mean, it's already\
    \ implemented.\n<|/ c |>\n<| c |>\nIt is a good practice to get in the habit of\
    \ using `sort` first for speed and readability. `sort` is already faster than\
    \ a solution with `for`, but its readability is better than your own. Having said\
    \ that, it is only faster if all elements are integers between 1-9, if you use\
    \ strings (1-9) or floating point numbers (0-10) you will get O(n) instead of\
    \ O(n log n)\n<|/ c |>\n<| c |>\nAlso this solution doesn't work for strings (as\
    \ I mentioned in my answer), which is why I suggested it for strings first, although\
    \ it didn't work for strings when I started writing it (I didn't think of it because\
    \ strings are immutable). So I posted this solution after I realized that for\
    \ strings, it was impossible to sort them. I didn't want to give an answer that\
    \ would have given me an error, because I wanted to show how you wouldn't get\
    \ the error in the first place if I were given a string that needed sorting. Hope\
    \ it helps!\n<|/ c |>\n<| a |>\nHere's a solution using only Base.sort:\n<code>\n\
    Base.sort(arr)\n</code>\nThe result will be returned in sorted order (ascending).\n\
    <|/ a tags=julia,sorting,performance dscore=2 |>\n<| a dscore=2 |>\nThis answer\
    \ is an improved version of the answer by Knut Sven that used a different sorting\
    \ algorithm (selection sort). The benefit of selection sort is that the complexity\
    \ is O(n) which means it can be done in linear time. Here is the code:\n<code>\n\
    using Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsmbyrcfu.jl:29\nin expression starting at\
    \ /tmp/tmpsmbyrcfu.jl:29\n"
  stdout: ''
  timestamp: 1660009189
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    if !arr \n        return Vector{String}()\n    \n    # convert to String\n\
    \    arr = String.(arr)\n    \n    pos = 1\n    rev = false\n    \n    # sort\
    \ by length\n    while pos < length(arr)\n        pos = length(arr) - pos\n  \
    \      if arr [ pos ] == 1\n            pos = pos + 1\n        end\n    end\n\
    \    \n    # reverse sort by length\n    if arr [ length(arr) ] == 9\n       \
    \ rev = true\n    end\n    \n    arr[1 : length(arr)] = reverse(arr[1 : length(arr)])\n\
    \    \n    # convert from String to Int64\n    arr = map(parseInt, arr)\n    \n\
    \    arr [ 1 : length(arr) ] = by_length(arr [ 1 : length(arr) ])\n    \n    if\
    \ rev\n        arr = reverse(arr)\n    end\n    \n    \n    return arr\nend\n\
    using Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: space before \"[\" not allowed in \"arr [\" at\
    \ /tmp/tmplt0ql6dd.jl:31\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmplt0ql6dd.jl:31\n\
    in expression starting at /tmp/tmplt0ql6dd.jl:31\n"
  stdout: ''
  timestamp: 1660009189
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    \n    sorted_arr = []\n    \n    for i in arr\n        if 1 <= i && i\
    \ <= 9\n            push!(sorted_arr, ones[i - 1])\n        else\n           \
    \ push!(sorted_arr, \"\")\n        end\n    end\nusing Test\n\n@testset begin\n\
    \ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpw3xiopip.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpw3xiopip.jl:1\n\
    in expression starting at /tmp/tmpw3xiopip.jl:1\n"
  stdout: ''
  timestamp: 1660009189
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    if length(arr) == 0 \n        return Vector{String}() \n    elseif length(arr)\
    \ == 1 \n        return Vector{String}(arr) \n    elseif length(arr) > 10 \n \
    \       return Vector{String}(\"Nine\") \n    elseif length(arr) < 1 \n      \
    \  return Vector{String}(\"One\") \n    elseif length(arr) == 9 \n        return\
    \ Vector{String}(\"Nine\") \n    end\nusing Test\n\n@testset begin\n\ncandidate\
    \ = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"\
    Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpnd9he9z2.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpnd9he9z2.jl:1\n\
    in expression starting at /tmp/tmpnd9he9z2.jl:1\n"
  stdout: ''
  timestamp: 1660009189
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    sorted= sort(arr)\n    sorted=sorted[1 .. end]\n    if length( sorted\
    \ )==0 \n        return Vector{String}()\n    else\n        number::Vector{Int64}=\
    \ Vector{Int64}()\n        for elem in sorted \n            if elem < 10 \n  \
    \              push!(number, elem)\n            else \n                push!(number,\
    \ elem-10)\n                push!(number, elem+10)\n        end\n        number=\
    \ sort(number)\n        number= number[1 .. end]\n        number= reverse(number)\n\
    \        str= Vector{String}()\n        for elem in number\n            push!(str,\
    \ \"One\" if elem == 1 else \"Two\" if elem == 2 \n            else \"Three\"\
    \ if elem == 3 \n            else \"Four\" if elem == 4 \n            else \"\
    Five\" if elem == 5 \n            else \"Six\" if elem == 6 \n            else\
    \ \"Seven\" if elem == 7 \n            else \"Eight\" if elem == 8 \n        \
    \    else \"Nine\")\n        end\n        return str\n    end\nend\n</cell>\n\
    <code language=julia-1.0>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<text>\n\
    A list comprehension works well for iterating over a collection of objects. In\
    \ this case, we want to return a new collection with the results of running a\
    \ certain function on every element in the original collection. Let's see how\
    \ this can be done using a list comprehension:\nusing Test\n\n@testset begin\n\
    \ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpootb5ovt.jl:37\nin expression starting at\
    \ /tmp/tmpootb5ovt.jl:37\n"
  stdout: ''
  timestamp: 1660009190
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    if arr.length == 0 \n        return Vector{String}()\n    end\n    \n\
    \    one_str = Int64(1)\n    two_str = Int64(2)\n    three_str = Int64(3)\n  \
    \  four_str = Int64(4)\n    five_str = Int64(5)\n    six_str = Int64(6)\n    seven_str\
    \ = Int64(7)\n    eight_str = Int64(8)\n    nine_str = Int64(9)\n    \n    \n\
    \    sorted_num = sort(arr)\n    rev_num = [i for i in sorted_num]\n    rev_num\
    \ = rev_num[2:end]\n    for i in rev_num\n        if i <= one_str \n         \
    \   rev_num[i] = \"One\"\n        elsif i <= two_str\n            rev_num[i] =\
    \ \"Two\"\n        elsif i <= three_str\n            rev_num[i] = \"Three\"\n\
    \        elsif i <= four_str\n            rev_num[i] = \"Four\"\n        elsif\
    \ i <= five_str\n            rev_num[i] = \"Five\"\n        elsif i <= six_str\n\
    \            rev_num[i] = \"Six\"\n        elsif i <= seven_str\n            rev_num[i]\
    \ = \"Seven\"\n        elsif i <= eight_str\n            rev_num[i] = \"Eight\"\
    \n        else\n            rev_num[i] = \"Nine\"\n        end\n    end\n    return\
    \ rev_num\nend\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"i\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpv54zp1uv.jl:40\nin expression starting at /tmp/tmpv54zp1uv.jl:40\n"
  stdout: ''
  timestamp: 1660009190
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    if arr == []\n        arr = Vector{Int64}()\n        return arr\n    elseif\
    \ arr == Vector{Int64}()\n        arr = Vector{Int64}()\n        return arr\n\
    \    end\n    \n    l = length(arr)\n    if l < 9\n        arr1 = arr[1:(9-l)]\n\
    \        arr1 = reverse(arr1)\n        arr2 = arr[1 : (9-l)]\n        arr2 = reverse(arr2)\n\
    \        arr = arr1 + [\"One\"] + arr2\n    else\n        arr1 = arr[1 : (9-l)]\n\
    \        arr1 = reverse(arr1)\n        arr = arr + [\"One\"] + arr1\n    end\n\
    \    \n    return arr\nend\n</cell>\n<text>\nProblem 9\nusing Test\n\n@testset\
    \ begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3])\
    \ == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"\
    One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\t@test(candidate([1,\
    \ -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2]) == [\"Three\", \"Two\"\
    , \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpl3gkkgu4.jl:42\nin expression starting at\
    \ /tmp/tmpl3gkkgu4.jl:42\n"
  stdout: ''
  timestamp: 1660009190
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    arr = sort(arr)\n    map(x->rev_x(x),arr)\nend\n</cell>\n<code language=julia-1.6>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<text>\nWrite a function that takes\
    \ a vector of integers and an integer as input. \nIn the output, sort the integers\
    \ that are between 1 and 9 inclusive, \nreverse the resulting vector, and then\
    \ replace each digit by its corresponding name from \n\"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\nusing Test\n\n\
    @testset begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8,\
    \ 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\t@test(candidate([1,\
    \ -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2]) == [\"Three\", \"Two\"\
    , \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp60sj0yoz.jl:22\nin expression starting at\
    \ /tmp/tmp60sj0yoz.jl:22\n"
  stdout: ''
  timestamp: 1660009190
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    vec = Vector{String}(undef, 0)\n    \n    if !isempty(arr) \n        len\
    \ = length(arr)\n        \n        if len < 9\n            vec = [names(one_to_n(len))[1]]\n\
    \        else\n            vec = [names(one_to_n(len - 9))[1]] + arr\n       \
    \ end\n    end\n    \n    return vec\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"\
    Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpx_29b8qc.jl:35

    '
  stdout: "test set: Error During Test at /tmp/tmpx_29b8qc.jl:38\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  UndefVarError: one_to_n\
    \ not defined\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmpx_29b8qc.jl:25\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpx_29b8qc.jl:38 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpx_29b8qc.jl:37\ntest set:\
    \ Error During Test at /tmp/tmpx_29b8qc.jl:40\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  UndefVarError: one_to_n not defined\n\
    \  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmpx_29b8qc.jl:25\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpx_29b8qc.jl:40 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpx_29b8qc.jl:37\ntest set:\
    \ Error During Test at /tmp/tmpx_29b8qc.jl:41\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"]\n  UndefVarError:\
    \ one_to_n not defined\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n\
    \     @ Main /tmp/tmpx_29b8qc.jl:25\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpx_29b8qc.jl:41 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpx_29b8qc.jl:37\ntest set:\
    \ Error During Test at /tmp/tmpx_29b8qc.jl:42\n  Test threw exception\n  Expression:\
    \ candidate([9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"]\n  UndefVarError: one_to_n\
    \ not defined\n  Stacktrace:\n   [1] by_length(arr::V"
  timestamp: 1660009192
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    \n    if length(arr)==0, return []\n    \n    sortedArray = sort(arr,Less[1,9])\n\
    \    sortedArray = sortedArray[2:end]\nusing Test\n\n@testset begin\n\ncandidate\
    \ = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"\
    Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \",\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmptr7ic86w.jl:20\nin expression starting at /tmp/tmptr7ic86w.jl:20\n"
  stdout: ''
  timestamp: 1660009190
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    if arr == []\n        return Vector{String}()\n    end\nusing Test\n\n\
    @testset begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8,\
    \ 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\t@test(candidate([1,\
    \ -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2]) == [\"Three\", \"Two\"\
    , \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp3o516g2q.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp3o516g2q.jl:1\n\
    in expression starting at /tmp/tmp3o516g2q.jl:1\n"
  stdout: ''
  timestamp: 1660009190
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    if arr.empty\n        return Vector{String}()\n    elseif arr.length ==\
    \ 1\n        return Vector{String}(\"One\")\n    elseif arr.length == 2\n    \
    \    return Vector{String}(\"Two\")\n    elseif arr.length == 3\n        return\
    \ Vector{String}(\"Three\")\n    elseif arr.length == 4\n        return Vector{String}(\"\
    Four\")\n    elseif arr.length == 5\n        return Vector{String}(\"Five\")\n\
    \    elseif arr.length == 6\n        return Vector{String}(\"Six\")\n    elseif\
    \ arr.length == 7\n        return Vector{String}(\"Seven\")\n    elseif arr.length\
    \ == 8\n        return Vector{String}(\"Eight\")\n    elseif arr.length == 9\n\
    \        return Vector{String}(\"Nine\")\n    else\n        @warn \"Vector length\
    \ is not supported\"\n        return Vector{String}()\n    end\nend\n</cell>\n\
    <code language=julia-1.0>\nby_length([1])\n</cell>\n<code language=julia-1.0>\n\
    by_length([1])\n</cell>\n<code language=julia-1.0>\nby_length([1])\n</cell>\n\
    <code language=julia-1.0>\nby_length([1])\n</cell>\n<code language=julia-1.0>\n\
    by_length([1])\n</cell>\n<code language=julia-1.0>\nby_length([1])\n</cell>\n\
    <code language=julia-1.0>\nby_length([1])\n</cell>\n<code language=julia-1.0>\n\
    by_length([1])\n</cell>\n<code language=julia-1.0>\nby_length([1])\n</cell>\n\
    <code language=julia-1.0>\nby_length([1])\n</cell>\n<code language=julia-1.0>\n\
    by_length([1])\n</cell>\n<code language=julia-1.0>\nby_length([1])\n</cell>\n\
    <code language=julia-1.0>\nby_length([1])\n</cell>\n<code language=julia-1.0>\n\
    by_length([1])\n</cell>\n<code language=julia-1.0>\nby_length([1])\n</cell>\n\
    <code language=julia-1.0>\nby_length([1])\n</cell>\n<code language=julia-1.0>\n\
    by_length([1])\n</cell>\n<code language=julia-1.0>\nby_length([1])\n</cell>\n\
    <code language=julia-1.0>\nby_length([1])\n</cell>\n<code language=julia-1.0>\n\
    by_length([1])\n</cell>\n<code language=julia-1.0>\nby_length([1])\n</cell>\n\
    <code language=julia-1.0>\nby_length([1])\n</cell>\n<code language=julia-1.0>\n\
    by_length([1])\n</cell>\n<code language=julia-1.0>\nby_length([1])\n</cell\nusing\
    \ Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1,\
    \ 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpozrdvf9k.jl:44\nin expression starting at\
    \ /tmp/tmpozrdvf9k.jl:44\n"
  stdout: ''
  timestamp: 1660009190
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    if !length(arr)\n        return Vector{String}()\n    end\n    \n    #\
    \ sort and reverse\n    arr = sort(arr)\n    arr = reverse(arr)\nusing Test\n\n\
    @testset begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8,\
    \ 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\t@test(candidate([1,\
    \ -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2]) == [\"Three\", \"Two\"\
    , \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmppp6fj7gg.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmppp6fj7gg.jl:1\n\
    in expression starting at /tmp/tmppp6fj7gg.jl:1\n"
  stdout: ''
  timestamp: 1660009190
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    if isempty(arr)\n        return \"\"\n    else\n        arr2 = arr\n \
    \       arr2 = arr2[arr2 .<= 9]\n        reverse!(arr2)\n        str = \"\"\n\
    \        for i in arr2\n            str = str + i_name(getindex(i))\n        end\n\
    \        return str\n    end\nend\n</code>\nThe code above is easy to understand\
    \ and understandable. \nBut a more simple way is to do like in the code below.\n\
    <code>\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmph6vdswlb.jl:32\nin expression starting at\
    \ /tmp/tmph6vdswlb.jl:32\n"
  stdout: ''
  timestamp: 1660009191
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    vec = Vector{String}([])\n    \n    if isempty(arr)\n        return vec\n\
    \    else\n        idx = 1\n        for i in arr\n            if 1 < i < 9\n \
    \               push!(vec, names[i])\n            else\n                if idx\
    \ < length(n)\n                    push!(vec, names[Int(i)])\n               \
    \ end\n                idx+=1\n            end\n        end\n        return vec\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmp79adakj0.jl:40

    '
  stdout: "test set: Error During Test at /tmp/tmp79adakj0.jl:43\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  MethodError: no method\
    \ matching getindex(::typeof(names), ::Int64)\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n\
    \     @ Main /tmp/tmp79adakj0.jl:27\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp79adakj0.jl:43 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp79adakj0.jl:42\ntest set:\
    \ Error During Test at /tmp/tmp79adakj0.jl:45\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  UndefVarError: n not defined\n  Stacktrace:\n\
    \   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmp79adakj0.jl:29\n  \
    \ [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp79adakj0.jl:45 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp79adakj0.jl:42\ntest set:\
    \ Error During Test at /tmp/tmp79adakj0.jl:46\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"]\n  UndefVarError:\
    \ n not defined\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmp79adakj0.jl:29\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp79adakj0.jl:46 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp79adakj0.jl:42\ntest set:\
    \ Error During Test at /tmp/tmp79adakj0.jl:47\n  Test threw exception\n  Expression:\
    \ candidate([9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"]\n  UndefVarError: n\
    \ not defined\n  Stacktrace:\n   [1] by_len"
  timestamp: 1660009193
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    answer = Vector{String}()\n    \n    for num in arr\n        if 1 < num\
    \ <= 9\n            append!(answer, One, Two, Three, Four, Five, Six, Seven, Eight,\
    \ Nine)[num]\n        elseif num == 0\n            append!(answer, Zero)\n   \
    \     else\n            throw(ArgumentError(\"Only integers between 1 and 9 are\
    \ allowed.\"))\n        end\n    end\n    \n    return answer\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5,\
    \ 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"\
    One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpit9ozner.jl:35

    '
  stdout: "test set: Error During Test at /tmp/tmpit9ozner.jl:38\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  UndefVarError: One not\
    \ defined\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmpit9ozner.jl:23\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpit9ozner.jl:38 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpit9ozner.jl:37\ntest set:\
    \ Error During Test at /tmp/tmpit9ozner.jl:40\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  ArgumentError: Only integers between\
    \ 1 and 9 are allowed.\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n\
    \     @ Main /tmp/tmpit9ozner.jl:27\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpit9ozner.jl:40 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpit9ozner.jl:37\ntest set:\
    \ Error During Test at /tmp/tmpit9ozner.jl:41\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"]\n  ArgumentError:\
    \ Only integers between 1 and 9 are allowed.\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n\
    \     @ Main /tmp/tmpit9ozner.jl:27\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpit9ozner.jl:41 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpit9ozner.jl:37\ntest set:\
    \ Error During Test at /tmp/tmpit9ozner.jl:42\n  Test threw exception\n  Expression:\
    \ candidate([9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"]\n  UndefVarError: One\
    \ not defined\n  S"
  timestamp: 1660009193
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    if length(arr) == 0 \n        return Vector{String}()\n    end\nusing\
    \ Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1,\
    \ 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpc55gw219.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpc55gw219.jl:1\n\
    in expression starting at /tmp/tmpc55gw219.jl:1\n"
  stdout: ''
  timestamp: 1660009191
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    arr = sort(arr)\n    arr = reverse(arr) \nusing Test\n\n@testset begin\n\
    \ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpctswqpd1.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpctswqpd1.jl:1\n\
    in expression starting at /tmp/tmpctswqpd1.jl:1\n"
  stdout: ''
  timestamp: 1660009191
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    if arr.length == 0 \n        return [] \n    end\n    arr = arr |> sort\n\
    \    arr_reverse = reverse(arr)\n    \n    arr = arr_reverse |> map( \n      \
    \  x -> \n            \n            if (x >= 1 && x <= 9) \n                names[x]\n\
    \            else \n                \"\" \n            \n            \n      \
    \  ) \n        \n    return arr\nend\n</cell>\n<text>\nNow let's have a look!\n\
    using Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp1yifsj2g.jl:34\nin expression starting at /tmp/tmp1yifsj2g.jl:34\n"
  stdout: ''
  timestamp: 1660009191
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    if length(arr) == 0\n        return arr\n    \n    sorted_vec = sort(arr)\n\
    \    reverse(sorted_vec)\n    \n    sorted_digits = sort_digits(sorted_vec)\n\
    \    \n    return replace_digits(sorted_digits)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpbcger76o.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpbcger76o.jl:1\n\
    in expression starting at /tmp/tmpbcger76o.jl:1\n"
  stdout: ''
  timestamp: 1660009191
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    \n    if arr.length == 0\n        Vector{String}()\n    else\n       \
    \ begin\n            low = arr[1]\n            high = arr[end]\n            \n\
    \            if high < low\n                high = high + 1\n            elseif\
    \ high > low\n                low = low - 1\n            else\n              \
    \  low = low + 1\n                high = high + 1\n            end\n         \
    \   \n            low = low * 10\n            high = high * 10\n            \n\
    \            lowstr = strcat(typeof(str), \"(\", repr(low), \")\")\n         \
    \   highstr = strcat(typeof(str), \"(\", repr(high), \")\")\n            \n  \
    \          digits = Vector{String}()\n            while low < high\n         \
    \       push!(digits, name_to_digit(low))\n                low = low + 1\n   \
    \         end\n            \n            reverse(digits)\n            return join(digits)\n\
    \        end\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpkdy3nd96.jl:55

    '
  stdout: "test set: Error During Test at /tmp/tmpkdy3nd96.jl:58\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  type Array has no field\
    \ length\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n \
    \  [2] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmpkdy3nd96.jl:20\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpkdy3nd96.jl:58 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpkdy3nd96.jl:57\ntest set:\
    \ Error During Test at /tmp/tmpkdy3nd96.jl:59\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == Vector{String}([])\n  type Array has no field\
    \ length\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n \
    \  [2] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmpkdy3nd96.jl:20\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpkdy3nd96.jl:59 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpkdy3nd96.jl:57\ntest set:\
    \ Error During Test at /tmp/tmpkdy3nd96.jl:60\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  type Array has no field length\n  Stacktrace:\n\
    \   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] by_length(arr::Vector{Int64})\n\
    \     @ Main /tmp/tmpkdy3nd96.jl:20\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpkdy3nd96.jl:60 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpkdy3nd96.jl:57\ntest set:\
    \ Error During Test at /tmp/tmpkdy3nd96.jl:61\n  Test threw exception\n  Expres"
  timestamp: 1660009193
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    sort(arr)\n    arr.reverse()\n    by_length(arr)\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8,\
    \ 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\t@test(candidate([1,\
    \ -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2]) == [\"Three\", \"Two\"\
    , \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmp4k6jfdz9.jl:25

    '
  stdout: "test set: Error During Test at /tmp/tmp4k6jfdz9.jl:28\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  type Array has no field\
    \ reverse\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n\
    \   [2] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmp4k6jfdz9.jl:20\n  \
    \ [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp4k6jfdz9.jl:28 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp4k6jfdz9.jl:27\ntest set:\
    \ Error During Test at /tmp/tmp4k6jfdz9.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == Vector{String}([])\n  type Array has no field\
    \ reverse\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n\
    \   [2] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmp4k6jfdz9.jl:20\n  \
    \ [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp4k6jfdz9.jl:29 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp4k6jfdz9.jl:27\ntest set:\
    \ Error During Test at /tmp/tmp4k6jfdz9.jl:30\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  type Array has no field reverse\n  Stacktrace:\n\
    \   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] by_length(arr::Vector{Int64})\n\
    \     @ Main /tmp/tmp4k6jfdz9.jl:20\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp4k6jfdz9.jl:30 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp4k6jfdz9.jl:27\ntest set:\
    \ Error During Test at /tmp/tmp4k6jfdz9.jl:31\n  Test threw exception\n  Exp"
  timestamp: 1660009193
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    \"\"\"\n    Sorts elements of a vector from 1-9 inclusive and then reverses\
    \ the resulting vector\n    and replaces each digit by its corresponding name\
    \ from \"One\", \"Two\", \"Three\", \"Four\",\n    \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n    \"\"\"\n    sorted = arr[1:end-1]\n    sorted = reverse(sorted)\n\
    \    sorted = map((&string($x)), sorted)\n    return sorted\nend\n</cell>\n<code\
    \ language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid syntax &(string($x)) around /tmp/tmp6di4h1o0.jl:26\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmp6di4h1o0.jl:1\nin expression starting\
    \ at /tmp/tmp6di4h1o0.jl:1\n"
  stdout: ''
  timestamp: 1660009192
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    emptystring = \"\"\n    if length(arr) == 0\n        return emptystring\n\
    \    end\n    \n    sort!(arr, by=identity)\n    \n    # reverse the array\n \
    \   arr_reverse = reverse(arr)\n    \n    # create the vector\n    arr_string\
    \ = Vector{String}(undef, 0)\n    for digit in arr_reverse\n        push!(arr_string,\
    \ Int2string(digit))\n    end\n    \n    return arr_string\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8,\
    \ 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\t@test(candidate([1,\
    \ -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2]) == [\"Three\", \"Two\"\
    , \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmp45pxbtnu.jl:39

    '
  stdout: "test set: Error During Test at /tmp/tmp45pxbtnu.jl:42\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  UndefVarError: Int2string\
    \ not defined\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmp45pxbtnu.jl:32\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp45pxbtnu.jl:42 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp45pxbtnu.jl:41\ntest set:\
    \ Error During Test at /tmp/tmp45pxbtnu.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == Vector{String}([])\n  MethodError: Cannot `convert`\
    \ an object of type String to an object of type Vector{String}\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{Vector{String}}, !Matched::LibGit2.StrArrayStruct) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LibGit2/src/strarray.jl:13\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at ~/.conda/envs/polyglot/share/julia/base/array.jl:554\n\
    \    ...\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmp45pxbtnu.jl:21\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp45pxbtnu.jl:43 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp45pxbtnu.jl:41\ntest set:\
    \ Error During Test at /tmp/tmp45pxbtnu.jl:44\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  UndefVarError: Int2string not defined\n\
    \  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmp45pxbtnu.jl:32\n\
    \   [2] macro expan"
  timestamp: 1660009195
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    if length(arr) == 0 return []\n    \n    \n    arr = arr |> sort() |>\
    \ reverse() |> collect((@identity))\n    arr = arr |> map to_char(arr)\n    \n\
    \    if arr[1] == \"\"\n        return arr[2:end]\n    else\n        arr\n   \
    \ end\nend\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"to_char\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpl09wllz7.jl:23\nin expression starting at /tmp/tmpl09wllz7.jl:23\n"
  stdout: ''
  timestamp: 1660009192
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    lengths = lengths(arr)\n    indices = [i for i,v in enumerate(lengths)\
    \ if v > 0]\n    indices.sort\n    indices.reverse\n    arr2 = arr[indices]\n\
    \    to_str = Array{String,1}(\"\")\n    for i in indices\n        to_str[i] =\
    \ by_num(arr2[i])\n    end\n    return to_str\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid iteration specification\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_o73kd5r.jl:20\nin expression starting at\
    \ /tmp/tmp_o73kd5r.jl:20\n"
  stdout: ''
  timestamp: 1660009192
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    if length(a) == 0 \n        return [] \n    else \n        arr1 = sort(arr)\
    \ \n        arr2 = reverse(arr1) \n        names = [\"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"] \n        return\
    \ [names[i] for (i, x) in enumerate(arr2) if x == 1 || x == 9] \nend\nusing Test\n\
    \n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5,\
    \ 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"\
    One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpk1hawuqb.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpk1hawuqb.jl:1\n\
    in expression starting at /tmp/tmpk1hawuqb.jl:1\n"
  stdout: ''
  timestamp: 1660009192
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    \n    for i \u2208 arr\n        if i < 1 || i > 9\n            continue\n\
    \        else\n            return [\"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\"][arr[i-1]]\n    end\nend\n</cell>\n\
    <code language=julia-1.4>\nby_length(vec)\n</cell>\n<text>\nVectors of tuples:\n\
    using Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpj5dzk93k.jl:27\nin expression starting at\
    \ /tmp/tmpj5dzk93k.jl:27\n"
  stdout: ''
  timestamp: 1660009192
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    \n    arr = Vector{Int64}(arr) # Convert the input to an Int64\n    \n\
    \    sorted = arr.sort\n    \n    if sorted == Int64[]\n        return Vector{String}[]\n\
    \    end\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpblswfl0e.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpblswfl0e.jl:1\n\
    in expression starting at /tmp/tmpblswfl0e.jl:1\n"
  stdout: ''
  timestamp: 1660009192
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    if length(arr) == 0 \n        return [] \n    else if length(arr) == 1\
    \ \n        return [\"One\"]\n    else \n        vec = reverse(sort(arr)) \n \
    \       newVec = []\n        for v in vec \n            newVec.push(stringByNum(v))\
    \ \n        return newVec \n    end\nend\n</cell>\n<text>\nThis can now be used\
    \ to write our own version of quicksort.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"\
    Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphlxa67qw.jl:21\nin expression starting at\
    \ /tmp/tmphlxa67qw.jl:21\n"
  stdout: ''
  timestamp: 1660009192
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n  if !arr.empty() \n    v = Vector{String}(undef, 0)\n    push!(v, \"One\"\
    )\n    push!(v, \"Two\")\n    push!(v, \"Three\")\n    push!(v, \"Four\")\n  \
    \  push!(v, \"Five\")\n    push!(v, \"Six\")\n    push!(v, \"Seven\")\n    push!(v,\
    \ \"Eight\")\n    push!(v, \"Nine\")\n    push!(v, \"Ten\")\n    push!(v, \"Eleven\"\
    )\n    push!(v, \"Twelve\")\n    push!(v, \"Thirteen\")\n    push!(v, \"Fourteen\"\
    )\n    push!(v, \"Fifteen\")\n    push!(v, \"Sixteen\")\n    push!(v, \"Seventeen\"\
    )\n    push!(v, \"Eighteen\")\n    push!(v, \"Nineteen\")\n    push!(v, \"Twenty\"\
    )\n    push!(v, \"Twenty-one\")\n    push!(v, \"Twenty-two\")\n    push!(v, \"\
    Twenty-three\")\n    push!(v, \"Twenty-four\")\n    push!(v, \"Twenty-five\")\n\
    \    push!(v, \"Twenty-six\")\n    push!(v, \"Twenty-seven\")\n    push!(v, \"\
    Twenty-eight\")\n    push!(v, \"Twenty-nine\")\n    \n    for i in arr\n     \
    \ if i >= 1 && i <= 9\n        push!(v, \"Twenty$(i)\")\n      elseif i == 0\n\
    \        push!(v, \"Zero\")\n      elseif i == -1\n        push!(v, \"Negative\"\
    )\n      else\n        push!(v, \"$(i)\")\n      end\n    end\n    \n    # Replace\
    \ the empty string with an empty vector\n    v = v[!ismissing(v)]\n  else\n  \
    \  v = Vector{String}(undef, 0)\n  end\n  return v\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3])\
    \ == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"\
    One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\t@test(candidate([1,\
    \ -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2]) == [\"Three\", \"Two\"\
    , \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpq5hsb28o.jl:72

    '
  stdout: "test set: Error During Test at /tmp/tmpq5hsb28o.jl:75\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  type Array has no field\
    \ empty\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n  \
    \ [2] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmpq5hsb28o.jl:19\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpq5hsb28o.jl:75 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpq5hsb28o.jl:74\ntest set:\
    \ Error During Test at /tmp/tmpq5hsb28o.jl:76\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == Vector{String}([])\n  type Array has no field\
    \ empty\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n  \
    \ [2] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmpq5hsb28o.jl:19\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpq5hsb28o.jl:76 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpq5hsb28o.jl:74\ntest set:\
    \ Error During Test at /tmp/tmpq5hsb28o.jl:77\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  type Array has no field empty\n  Stacktrace:\n\
    \   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] by_length(arr::Vector{Int64})\n\
    \     @ Main /tmp/tmpq5hsb28o.jl:19\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpq5hsb28o.jl:77 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpq5hsb28o.jl:74\ntest set:\
    \ Error During Test at /tmp/tmpq5hsb28o.jl:78\n  Test threw exception\n  Expressio"
  timestamp: 1660009194
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    l = length(arr)\n    if l > 9\n        return arr\n    else\n        v\
    \ = arr[1..l-1]\n        n = l - 1\n        arr =  arr[2:n]\n        arr = reverse(arr)\n\
    \        arr .= [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"\
    Seven\", \"Eight\", \"Nine\"]\n        arr .= arr\n        arr\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpgmhqz8b_.jl:34

    '
  stdout: "test set: Error During Test at /tmp/tmpgmhqz8b_.jl:37\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  UndefVarError: .. not\
    \ defined\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmpgmhqz8b_.jl:23\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpgmhqz8b_.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpgmhqz8b_.jl:36\ntest set:\
    \ Error During Test at /tmp/tmpgmhqz8b_.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == Vector{String}([])\n  UndefVarError: .. not\
    \ defined\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmpgmhqz8b_.jl:23\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpgmhqz8b_.jl:38 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpgmhqz8b_.jl:36\ntest set:\
    \ Error During Test at /tmp/tmpgmhqz8b_.jl:39\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  UndefVarError: .. not defined\n  Stacktrace:\n\
    \   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmpgmhqz8b_.jl:23\n  \
    \ [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpgmhqz8b_.jl:39 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpgmhqz8b_.jl:36\ntest set:\
    \ Error During Test at /tmp/tmpgmhqz8b_.jl:40\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"]\n  UndefVarError:\
    \ .. not defined\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @\
    \ Ma"
  timestamp: 1660009194
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    if isempty(arr)\n        []\n    else\n        map(x->\"One\" <= x &&\
    \ x <= \"Nine\" ? \"One\" :\n            x == \"Two\" ? \"Two\" : \n         \
    \   x == \"Three\" ? \"Three\" :\n            x == \"Four\" ? \"Four\" :\n   \
    \         x == \"Five\" ? \"Five\" :\n            x == \"Six\" ? \"Six\" :\n \
    \           x == \"Seven\" ? \"Seven\" :\n            x == \"Eight\" ? \"Eight\"\
    \ :\n            x == \"Nine\" ? \"Nine\" : x,\n        arr\n        )\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpd8bp1jk0.jl:37

    '
  stdout: "test set: Error During Test at /tmp/tmpd8bp1jk0.jl:40\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  MethodError: no method\
    \ matching isless(::String, ::Int64)\n  Closest candidates are:\n    isless(::AbstractString,\
    \ !Matched::AbstractString) at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:344\n\
    \    isless(!Matched::AbstractFloat, ::Real) at ~/.conda/envs/polyglot/share/julia/base/operators.jl:186\n\
    \    isless(!Matched::Real, ::Real) at ~/.conda/envs/polyglot/share/julia/base/operators.jl:430\n\
    \    ...\n  Stacktrace:\n    [1] <(x::String, y::Int64)\n      @ Base ./operators.jl:352\n\
    \    [2] <=(x::String, y::Int64)\n      @ Base ./operators.jl:401\n    [3] (::var\"\
    #1#2\")(x::Int64)\n      @ Main /tmp/tmpd8bp1jk0.jl:22\n    [4] iterate\n    \
    \  @ ./generator.jl:47 [inlined]\n    [5] _collect\n      @ ./array.jl:744 [inlined]\n\
    \    [6] collect_similar\n      @ ./array.jl:653 [inlined]\n    [7] map\n    \
    \  @ ./abstractarray.jl:2867 [inlined]\n    [8] by_length(arr::Vector{Int64})\n\
    \      @ Main /tmp/tmpd8bp1jk0.jl:22\n    [9] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmpd8bp1jk0.jl:40 [inlined]\n\
    \   [11] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [12] top-level scope\n      @ /tmp/tmpd8bp1jk0.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpd8bp1jk0.jl:42\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  MethodError: no method matching isless(::String,\
    \ ::Int64)\n  Closest candidates are:\n    isless(::AbstractString, !Matched::AbstractString)\
    \ at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:344\n    isless(!Matched::AbstractFloat,\
    \ ::Real) at ~/.conda/envs/polyglot/share/julia/base/operators.jl:186\n    isless(!Matched::Real,\
    \ ::Real) at ~/.conda/envs/polyglot/share/julia/base/operators.jl:430\n    ...\n\
    \  Stacktrace:\n    [1] <(x::String, y::Int64)\n      @ Base ./operators"
  timestamp: 1660009195
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    if isempty(arr)\n        empty\n    else\n        if any(x >= 10 || x\
    \ < 1 for x in arr)\n            by_length(arr)\n        else\n            arr\
    \ <- arr |> reverse\n            arr |> Enum.map(x -> \"One\"..\"Nine\" |> get(x)\
    \ |> String)\n        end\n    end\nend\n</code>\n<|/ a |>\n<| c |>\nThe `get`\
    \ function is redundant here. I would remove it.\n<|/ c |>\n<| c |>\nI see a lot\
    \ of people write `get` all the time, so I thought I'd point out that the answer\
    \ is more general than just for integers and only works for vectors of integers.\
    \ If you know of a more general way of doing this, I'd be happy to learn that\
    \ as well.\n<|/ c |>\n<| c |>\nI'm aware of `get`. I just think it's redundant\
    \ here and makes the code more complicated. Not sure why you think it's more complicated.\n\
    <|/ c |>\n<| c |>\nMy thought is that it would be more complicated to write the\
    \ code correctly when `get` was replaced with `at`, which would make `get` more\
    \ confusing to read, and make the code less general. I guess I'm just trying to\
    \ keep my answer general and don't think that it matters much in this case.\n\
    <|/ c |>\n<| c |>\nNo one writes `get` because most people don't know that `get`\
    \ is doing what it says on the tin.\n<|/ c |>\n<| a tags=julia,vector dscore=1\
    \ |>\nI assume you mean that you're only allowed to use loops, no list comprehensions,\
    \ and the sort function can only change existing vectors.\nLet's look at your\
    \ code:\n<code>\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjx62hevi.jl:30\nin expression starting at\
    \ /tmp/tmpjx62hevi.jl:30\n"
  stdout: ''
  timestamp: 1660009192
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n  if arr.size == 0 \n    return []\n  else\n    one = [\n      \"One\",\n\
    \      \"Two\",\n      \"Three\",\n      \"Four\",\n      \"Five\",\n      \"\
    Six\",\n      \"Seven\",\n      \"Eight\",\n      \"Nine\",\n      \"Ten\",\n\
    \      \"Eleven\",\n      \"Twelve\",\n      \"Thirteen\",\n      \"Fourteen\"\
    ,\n      \"Fifteen\",\n      \"Sixteen\",\n      \"Seventeen\",\n      \"Eighteen\"\
    ,\n      \"Nineteen\",\n      \"Twenty\",\n      \"Twenty-one\",\n      \"Twenty-two\"\
    ,\n      \"Twenty-three\",\n      \"Twenty-four\",\n      \"Twenty-five\",\n \
    \     \"Twenty-six\",\n      \"Twenty-seven\",\n      \"Twenty-eight\",\n    \
    \  \"Twenty-nine\",\n      \"Thirty\",\n      \"Thirty-one\",\n      \"Thirty-two\"\
    ,\n      \"Thirty-three\",\n      \"Thirty-four\",\n      \"Thirty-five\",\n \
    \     \"Thirty-six\",\n      \"Thirty-seven\",\n      \"Thirty-eight\",\n    \
    \  \"Thirty-nine\",\n      \"Forty\",\n      \"Forty-one\",\n      \"Forty-two\"\
    ,\n      \"Forty-three\",\n      \"Forty-four\",\n      \"Forty-five\",\n    \
    \  \"Forty-six\",\n      \"Forty-seven\",\n      \"Forty-eight\",\n      \"Forty-nine\"\
    ,\n      \"Fifty\",\n      \"Fifty-one\",\n      \"Fifty-two\",\n      \"Fifty-three\"\
    ,\n      \"Fifty-four\",\n      \"Fifty-five\",\n      \"Fifty-six\",\n      \"\
    Fifty-seven\",\n      \"Fifty-eight\",\n      \"Fifty-nine\",\n      \"Sixty\"\
    ,\n      \"Sixty-one\",\n      \"Sixty-two\",\n      \"Sixty-three\",\n      \"\
    Sixty-four\",\n      \"Sixty-five\",\n      \"Sixty-six\",\n      \"Sixty-seven\"\
    ,\n      \"Sixty-eight\",\n      \"Sixty-nine\",\n      \"Seventy\",\n      \"\
    Seventy-one\",\n      \"Seventy-two\",\n      \"Seventy-three\",\n      \"Sevent\n\
    using Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp84g3xuqt.jl:102\nin expression starting at\
    \ /tmp/tmp84g3xuqt.jl:102\n"
  stdout: ''
  timestamp: 1660009193
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    numbers = Vector{String}([])\n    \n    if !arr \n        return numbers\n\
    \    end\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmplio8g8yq.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmplio8g8yq.jl:1\n\
    in expression starting at /tmp/tmplio8g8yq.jl:1\n"
  stdout: ''
  timestamp: 1660009193
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    if arr.size == 0\n        return Vector{}\n    if arr.size < 9\n     \
    \   vec = []\n        for el in arr\n            push vec, el\n            if\
    \ el != 9\n                el -= 1\n            end\n        end\n        return\
    \ vec\n    end\n    \n    vec = []\n    for el in reverse(arr)\n        push vec,\
    \ el\n        el -= 1\n    end\n    \n    vec\nend\n</cell>\n<text>\nSort the\
    \ integer array [10, 9, 8, 7, 6, 5, 4] by the value of the integers, reversed,\
    \ and then\nreplace each number with its name \"Ten\", \"Nine\", \"Eight\", \"\
    Seven\", \"Six\", \"Five\", \"Four\",\nand \"Three\".\nusing Test\n\n@testset\
    \ begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3])\
    \ == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"\
    One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\t@test(candidate([1,\
    \ -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2]) == [\"Three\", \"Two\"\
    , \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmp2oefq5al.jl:23 expected \"\
    end\", got \"vec\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp2oefq5al.jl:24\n\
    in expression starting at /tmp/tmp2oefq5al.jl:24\n"
  stdout: ''
  timestamp: 1660009193
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n  if length(arr) == 0\n    []\n  else\n    sorted = sort(arr)\n    sorted[end\
    \ - 1] = sorted[end - 1] - 1\n    result = reverse([ones[elem] for elem in sorted])\n\
    \    result += [\"One\"]\n  end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"\
    Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmprik9wv2z.jl:30

    '
  stdout: "test set: Error During Test at /tmp/tmprik9wv2z.jl:33\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  MethodError: no method\
    \ matching getindex(::typeof(ones), ::Int64)\n  Stacktrace:\n   [1] (::var\"#1#2\"\
    )(elem::Int64)\n     @ Main ./none:0\n   [2] iterate\n     @ ./generator.jl:47\
    \ [inlined]\n   [3] collect\n     @ ./array.jl:724 [inlined]\n   [4] by_length(arr::Vector{Int64})\n\
    \     @ Main /tmp/tmprik9wv2z.jl:24\n   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmprik9wv2z.jl:33 [inlined]\n\
    \   [7] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmprik9wv2z.jl:32\ntest set:\
    \ Error During Test at /tmp/tmprik9wv2z.jl:35\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  MethodError: no method matching getindex(::typeof(ones),\
    \ ::Int64)\n  Stacktrace:\n   [1] (::var\"#1#2\")(elem::Int64)\n     @ Main ./none:0\n\
    \   [2] iterate\n     @ ./generator.jl:47 [inlined]\n   [3] collect\n     @ ./array.jl:724\
    \ [inlined]\n   [4] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmprik9wv2z.jl:24\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmprik9wv2z.jl:35 [inlined]\n\
    \   [7] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmprik9wv2z.jl:32\ntest set:\
    \ Error During Test at /tmp/tmprik9wv2z.jl:36\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"]\n  MethodError: no\
    \ method matching getindex(::typeof(ones), ::Int64)\n  Stacktrace:\n   [1] (::var\"\
    #1#2\")(elem::Int64)\n     @ Main ./none:0\n   [2] iterate\n     @ ./generator.jl:47\
    \ [inlined]\n   [3] collect\n     @ ./array.jl:724 [inlined]\n   [4] by_length(arr::Vector{Int64})\n\
    \     @ Main /tmp/tmprik9wv2z.jl:24\n   "
  timestamp: 1660009195
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    if length(arr) == 0 \n        return Vector{String}() \n    end\nusing\
    \ Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1,\
    \ 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpna_w6hqr.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpna_w6hqr.jl:1\n\
    in expression starting at /tmp/tmpna_w6hqr.jl:1\n"
  stdout: ''
  timestamp: 1660009193
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    if arr.length == 0 \n        return Vector{String}() \n    end\nusing\
    \ Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1,\
    \ 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpilxl54ve.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpilxl54ve.jl:1\n\
    in expression starting at /tmp/tmpilxl54ve.jl:1\n"
  stdout: ''
  timestamp: 1660009193
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    if !arr.is_empty()\n        rev_idx = reverse(arr.idx)\n        digits\
    \ = arr.data[rev_idx]\n        digit_names = [\"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n        digit_names_idx\
    \ = [digit_names.index(digit) for digit in digits]\n        return digit_names_idx\n\
    \    end\n    return []\nend\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpastceirs.jl:30

    '
  stdout: "test set: Error During Test at /tmp/tmpastceirs.jl:33\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  type Array has no field\
    \ is_empty\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n\
    \   [2] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmpastceirs.jl:19\n  \
    \ [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpastceirs.jl:33 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpastceirs.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpastceirs.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == Vector{String}([])\n  type Array has no field\
    \ is_empty\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n\
    \   [2] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmpastceirs.jl:19\n  \
    \ [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpastceirs.jl:34 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpastceirs.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpastceirs.jl:35\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  type Array has no field is_empty\n  Stacktrace:\n\
    \   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] by_length(arr::Vector{Int64})\n\
    \     @ Main /tmp/tmpastceirs.jl:19\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpastceirs.jl:35 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpastceirs.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpastceirs.jl:36\n  Test threw exception\n  "
  timestamp: 1660009195
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    sort_by_length(arr) == [] ? vec([]) : \n        vec_to_str(sort_by_length(arr))\n\
    end\n</cell>\n<code language=julia-0.4>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"\
    Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0z0h1gaj.jl:22\nin expression starting at\
    \ /tmp/tmp0z0h1gaj.jl:22\n"
  stdout: ''
  timestamp: 1660009194
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    if arr.length == 0 \n        return [] \n    elseif arr.length == 1 \n\
    \        return [\"One\"]\n    else \n        arr.rev\n        replace(x -> [\"\
    One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\",\
    \ \"Nine\"][x - 1], arr)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"\
    Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmp7yyw5qcf.jl:30

    '
  stdout: "test set: Error During Test at /tmp/tmp7yyw5qcf.jl:33\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  type Array has no field\
    \ length\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n \
    \  [2] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmp7yyw5qcf.jl:19\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp7yyw5qcf.jl:33 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp7yyw5qcf.jl:32\ntest set:\
    \ Error During Test at /tmp/tmp7yyw5qcf.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == Vector{String}([])\n  type Array has no field\
    \ length\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n \
    \  [2] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmp7yyw5qcf.jl:19\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp7yyw5qcf.jl:34 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp7yyw5qcf.jl:32\ntest set:\
    \ Error During Test at /tmp/tmp7yyw5qcf.jl:35\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  type Array has no field length\n  Stacktrace:\n\
    \   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] by_length(arr::Vector{Int64})\n\
    \     @ Main /tmp/tmp7yyw5qcf.jl:19\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp7yyw5qcf.jl:35 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp7yyw5qcf.jl:32\ntest set:\
    \ Error During Test at /tmp/tmp7yyw5qcf.jl:36\n  Test threw exception\n  Expres"
  timestamp: 1660009195
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    if length(arr) == 0 \n        return [] \n    elseif length(arr) == 1\
    \ \n        return [\"One\"] \n    elseif length(arr) > 9 \n        throw(ArgumentError(\"\
    Vector with length > 9 is not supported.\"))\n    else \n        \n        lower\
    \ = arr[1] \n        higher = arr[1] \n        \n        rev = Vector{String}(undef,\
    \ length(arr) - 1) \n        for i in 2:length(arr) \n            \n         \
    \   if lower(i) >= 0 \n                lower = lower(i) + lower(lower(i)) \n \
    \           else \n                lower = lower(lower(i) - 1) \n            \n\
    \            if lower(i) >= 0 \n                higher = lower(i) + lower(higher(i))\
    \ \n            else \n                higher = lower(lower(i) - 1) \n       \
    \     \n            rev[i] = \"One\" \n        \n            for i in reverse(1:i)\
    \ \n                rev.push(\"Two\")\n            end\n            for i in reverse(2:end)\
    \ \n                rev.push(\"Three\")\n            end\n            for i in\
    \ reverse(3:end) \n                rev.push(\"Four\")\n            end\n     \
    \       for i in reverse(4:end) \n                rev.push(\"Five\")\n       \
    \     end\n            for i in reverse(5:end) \n                rev.push(\"Six\"\
    )\n            end\n            for i in reverse(6:end) \n                rev.push(\"\
    Seven\")\n            end\n            for i in reverse(7:end) \n            \
    \    rev.push(\"Eight\")\n            end\n            for i in reverse(8:end)\
    \ \n                rev.push(\"Nine\")\n            end\n            for i in\
    \ reverse(9:end) \n                rev.push(\"Zero\")\n            end\n     \
    \   end\n        \n        rev\n    end \nend \nusing Test\n\n@testset begin\n\
    \ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"2:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpt3wd32l2.jl:48\nin expression\
    \ starting at /tmp/tmpt3wd32l2.jl:48\n"
  stdout: ''
  timestamp: 1660009194
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    if arr.is_empty\n        return Vector{String}()\n    elseif min(arr)\
    \ < 1 || max(arr) > 9\n        return Vector{String}()\n    else\n        str\
    \ = reverse(arr.to_a)\n        for d in str\n            replace!(str, d, name_to_num(d))\n\
    \        end\n        Vector{String}(reverse(str))\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5,\
    \ 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"\
    One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmphl45gj5x.jl:33

    '
  stdout: "test set: Error During Test at /tmp/tmphl45gj5x.jl:36\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  type Array has no field\
    \ is_empty\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n\
    \   [2] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmphl45gj5x.jl:19\n  \
    \ [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmphl45gj5x.jl:36 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmphl45gj5x.jl:35\ntest set:\
    \ Error During Test at /tmp/tmphl45gj5x.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == Vector{String}([])\n  type Array has no field\
    \ is_empty\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n\
    \   [2] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmphl45gj5x.jl:19\n  \
    \ [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmphl45gj5x.jl:37 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmphl45gj5x.jl:35\ntest set:\
    \ Error During Test at /tmp/tmphl45gj5x.jl:38\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  type Array has no field is_empty\n  Stacktrace:\n\
    \   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] by_length(arr::Vector{Int64})\n\
    \     @ Main /tmp/tmphl45gj5x.jl:19\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmphl45gj5x.jl:38 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmphl45gj5x.jl:35\ntest set:\
    \ Error During Test at /tmp/tmphl45gj5x.jl:39\n  Test threw exception\n  "
  timestamp: 1660009196
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    sorted_arr = sort(arr)\n    sorted_arr.reverse()\n    vec = Vector{String}(undef,\
    \ 0)\n    for i in sorted_arr\n        if i <= 9\n            push!(vec, by_digit(digit(i)))\n\
    \        end\n    end\n    vec\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"\
    Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmp0uh_pknv.jl:31

    '
  stdout: "test set: Error During Test at /tmp/tmp0uh_pknv.jl:34\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  type Array has no field\
    \ reverse\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n\
    \   [2] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmp0uh_pknv.jl:20\n  \
    \ [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp0uh_pknv.jl:34 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp0uh_pknv.jl:33\ntest set:\
    \ Error During Test at /tmp/tmp0uh_pknv.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == Vector{String}([])\n  type Array has no field\
    \ reverse\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n\
    \   [2] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmp0uh_pknv.jl:20\n  \
    \ [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp0uh_pknv.jl:35 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp0uh_pknv.jl:33\ntest set:\
    \ Error During Test at /tmp/tmp0uh_pknv.jl:36\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  type Array has no field reverse\n  Stacktrace:\n\
    \   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] by_length(arr::Vector{Int64})\n\
    \     @ Main /tmp/tmp0uh_pknv.jl:20\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp0uh_pknv.jl:36 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp0uh_pknv.jl:33\ntest set:\
    \ Error During Test at /tmp/tmp0uh_pknv.jl:37\n  Test threw exception\n  Exp"
  timestamp: 1660009196
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    if arr.length == 0\n        return arr\n    elseif arr.length > 9\n  \
    \      return by_length(arr[1 : (end - 1)])\n    end\n    \n    digits = arr[1\
    \ : end]\n    digits.reverse()\n    rest = arr[end : end]\n    \n    digits_names\
    \ = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\"\
    , \"Nine\"]\n    rest = [digits_names[i] for i in rest]\n    \n    rest = join(rest,\
    \ \" \")\n    return join(digits, \" \") # join(digits, \" \") + join(rest, \"\
    \ \") # join(digits, \" \") # join(rest, \" \")\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpgf4tx79b.jl:37

    '
  stdout: "test set: Error During Test at /tmp/tmpgf4tx79b.jl:40\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  type Array has no field\
    \ length\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n \
    \  [2] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmpgf4tx79b.jl:19\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpgf4tx79b.jl:40 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpgf4tx79b.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpgf4tx79b.jl:41\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == Vector{String}([])\n  type Array has no field\
    \ length\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n \
    \  [2] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmpgf4tx79b.jl:19\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpgf4tx79b.jl:41 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpgf4tx79b.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpgf4tx79b.jl:42\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  type Array has no field length\n  Stacktrace:\n\
    \   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] by_length(arr::Vector{Int64})\n\
    \     @ Main /tmp/tmpgf4tx79b.jl:19\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpgf4tx79b.jl:42 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpgf4tx79b.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpgf4tx79b.jl:43\n  Test threw exception\n  Expres"
  timestamp: 1660009196
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    if arr.size == 0\n        return Vector{String}()\n    end\nusing Test\n\
    \n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5,\
    \ 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"\
    One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpfvpfp_wq.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpfvpfp_wq.jl:1\n\
    in expression starting at /tmp/tmpfvpfp_wq.jl:1\n"
  stdout: ''
  timestamp: 1660009194
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    if arr.length == 0 \n        return Vector{String}() \n    end\n    length\
    \ = length(arr)\n    names = Vector{String}(length) \n    for i in 1:length\n\
    \        if i > 1 && arr[i - 1] <= 9 \n            names[i] = \"Nine\" \n    \
    \    else\n            names[i] = \"One\" \n        end\n    end\n    arr = reverse(arr)\
    \ \n    for i in 1:length(arr)\n        if arr[i - 1] < length\n            arr[i\
    \ - 1] = names[arr[i - 1]]\n        end\n    end\n    return arr\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5,\
    \ 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"\
    One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpnydelggg.jl:41

    '
  stdout: "test set: Error During Test at /tmp/tmpnydelggg.jl:44\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  type Array has no field\
    \ length\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n \
    \  [2] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmpnydelggg.jl:19\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpnydelggg.jl:44 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpnydelggg.jl:43\ntest set:\
    \ Error During Test at /tmp/tmpnydelggg.jl:45\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == Vector{String}([])\n  type Array has no field\
    \ length\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n \
    \  [2] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmpnydelggg.jl:19\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpnydelggg.jl:45 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpnydelggg.jl:43\ntest set:\
    \ Error During Test at /tmp/tmpnydelggg.jl:46\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  type Array has no field length\n  Stacktrace:\n\
    \   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] by_length(arr::Vector{Int64})\n\
    \     @ Main /tmp/tmpnydelggg.jl:19\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpnydelggg.jl:46 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpnydelggg.jl:43\ntest set:\
    \ Error During Test at /tmp/tmpnydelggg.jl:47\n  Test threw exception\n  Expres"
  timestamp: 1660009196
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    sort_by_length(arr)\n    replace_by_length(arr)\n    return arr\nend\n\
    using Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmp60p1rz0n.jl:25

    '
  stdout: "test set: Error During Test at /tmp/tmp60p1rz0n.jl:28\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  UndefVarError: sort_by_length\
    \ not defined\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmp60p1rz0n.jl:19\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp60p1rz0n.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp60p1rz0n.jl:27\ntest set:\
    \ Error During Test at /tmp/tmp60p1rz0n.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == Vector{String}([])\n  UndefVarError: sort_by_length\
    \ not defined\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmp60p1rz0n.jl:19\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp60p1rz0n.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp60p1rz0n.jl:27\ntest set:\
    \ Error During Test at /tmp/tmp60p1rz0n.jl:30\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  UndefVarError: sort_by_length not defined\n\
    \  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmp60p1rz0n.jl:19\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp60p1rz0n.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp60p1rz0n.jl:27\ntest set:\
    \ Error During Test at /tmp/tmp60p1rz0n.jl:31\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"]\n  UndefVarError:\
    \ sort_by_length not defined\n  Stacktrace"
  timestamp: 1660009196
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    arr = sort(arr)\n    arr = arr[1:end].reverse\n    arr = arr .* [\n  \
    \      one = \"One\", two = \"Two\", three = \"Three\", four = \"Four\", five\
    \ = \"Five\",\n        six = \"Six\", seven = \"Seven\", eight = \"Eight\", nine\
    \ = \"Nine\"\n    ]\n    return arr\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"\
    Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: misplaced assignment statement in \"[one = \"\
    One\", two = \"Two\", three = \"Three\", four = \"Four\", five = \"Five\", six\
    \ = \"Six\", seven = \"Seven\", eight = \"Eight\", nine = \"Nine\"]\" around /tmp/tmppb9imedx.jl:21\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmppb9imedx.jl:1\nin expression starting\
    \ at /tmp/tmppb9imedx.jl:1\n"
  stdout: ''
  timestamp: 1660009194
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    if arr.isEmpty() \n        arr \n    else \n        reverse(arr) |> sort\
    \ |> map by_length |> collect{x->x}\n    end \nend\nusing Test\n\n@testset begin\n\
    \ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"if\" at /tmp/tmpb5__zb_7.jl:19 expected \"\
    end\", got \"by_length\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpb5__zb_7.jl:22\n\
    in expression starting at /tmp/tmpb5__zb_7.jl:22\n"
  stdout: ''
  timestamp: 1660009194
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    lenghts = unique(arr)\n    if lengths(arr) == 0\n        return Vector{String}()\n\
    \    end\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp7cye4a27.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp7cye4a27.jl:1\n\
    in expression starting at /tmp/tmp7cye4a27.jl:1\n"
  stdout: ''
  timestamp: 1660009194
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    \n    if isempty(arr)\n        \n        return Vector{String}[]\n   \
    \ end\n    \n    if length(arr) < 9\n        \n        return Vector{String}[]\n\
    \    end\n    \n    # first reverse the vector\n    arr = arr .- reverse(arr)\n\
    \    \n    # then replace each digit by its corresponding name from One, Two,\
    \ Three, Four, Five, Six, Seven, Eight, Nine\n    arr = arr .+ [\"One\", \"Two\"\
    , \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n  \
    \  \n    return arr\nend\n</cell>\n<code language=julia-1.4>\nby_length([1, -1,\
    \ 55])\n</cell>\n<text>\nWrite a function that takes a vector of numbers as an\
    \ argument and returns a new vector with only the even numbers (zeros and positive)\
    \ and the odd numbers (zeros and negative) sorted from smallest to largest.\n\
    using Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp240ce6z0.jl:38\nin expression starting at\
    \ /tmp/tmp240ce6z0.jl:38\n"
  stdout: ''
  timestamp: 1660009195
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    if length(arr) == 0 \n        return [] \n    else\n        sorted_list\
    \ = sort(arr)\n        reverse(sorted_list)\n        arr[1:9] = [\"One\", \"Two\"\
    , \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n  \
    \  end\nend\n</cell>\n<code language=julia-0.6>\nby_length([2, 1, 1, 4, 5, 8,\
    \ 2, 3])\n</cell>\n<code language=julia-0.6>\nby_length([])\n</cell>\n<code language=julia-0.6>\n\
    by_length([1, -1, 55])\n</cell>\n<text>\n\u25CA Exercise\nThis exercise will test\
    \ your understanding of how a vector works before we proceed.\nusing Test\n\n\
    @testset begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8,\
    \ 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\t@test(candidate([1,\
    \ -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2]) == [\"Three\", \"Two\"\
    , \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpirt7_m8a.jl:27\nin expression starting at\
    \ /tmp/tmpirt7_m8a.jl:27\n"
  stdout: ''
  timestamp: 1660009195
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    return sort(reverse(arr)).map(x -> \"One\" if x == 1 \n              \
    \                          || \"Two\" if x == 2 \n                           \
    \             || \"Three\" if x == 3 \n                                      \
    \  || \"Four\" if x == 4 \n                                        || \"Five\"\
    \ if x == 5 \n                                        || \"Six\" if x == 6 \n\
    \                                        || \"Seven\" if x == 7 \n           \
    \                             || \"Eight\" if x == 8 \n                      \
    \                  || \"Nine\" if x == 9\n                                   \
    \     else x)\nend\n</cell>\n<code language=julia-0.4>\nby_length(Int64.(1..9))\n\
    </cell>\n<text>\nExercise\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmph9ui8995.jl:19\nin expression starting at\
    \ /tmp/tmph9ui8995.jl:19\n"
  stdout: ''
  timestamp: 1660009195
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    \n    if length(arr) == 0 \n        return \n    \n    sort!(arr)\n  \
    \  reverse!(arr)\n    \n    digits = map(x->digit2string(x), arr)\n    names =\
    \ Vector{String}(undef, length(arr))\n    \n    for (i,d) in enumerate(digits)\n\
    \        names[d] = names[i]\n    end\n    return names\nend\n</code>\n<|/ a tags=julia\
    \ |>\n<| c |>\n`function by_length(arr::Vector{Int64})::Vector{String}` can be\
    \ simplified to `by_length(arr)::Vector{String}`\n<|/ c |>\n<| c |>\nAgreed. I've\
    \ edited my answer to remove that line and replace it with `by_length(arr)::Vector{String}`\n\
    <|/ c |>\n<| a dscore=4 |>\nI would recommend using Base.digits2string and Base.string2digits.\
    \  This solution is about as compact as I can make it.  It also does not require\
    \ an external package, although you could easily replace Base.digits2string with\
    \ something that works with other types of strings.\n<code>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3])\
    \ == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"\
    One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\t@test(candidate([1,\
    \ -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2]) == [\"Three\", \"Two\"\
    , \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjo73k9tk.jl:34\nin expression starting at\
    \ /tmp/tmpjo73k9tk.jl:34\n"
  stdout: ''
  timestamp: 1660009195
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    if arr.size==0\n        return [] \n    end\n    \n    arr=arr:sort()\
    \ \n    \n    \n    if arr[1] == 1 && arr[end] == 9\n        arr.pop(1)\n    \
    \    arr.pop(1) \n    end\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpt_n6zo2r.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpt_n6zo2r.jl:1\n\
    in expression starting at /tmp/tmpt_n6zo2r.jl:1\n"
  stdout: ''
  timestamp: 1660009195
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    if length(arr) == 0 \n        return [] \n    else if length(arr) == 1\
    \ \n        return [\"One\"]\n    else \n        \n        if any(arr ~= map(x\
    \ -> x < 1 ? 1 : x > 9 ? 9 : x, 1:length(arr)))\n            return []\n     \
    \   else\n            \n            arr = reverse(arr)\n            arr = map((x\
    \ -> \"One\"..\"Nine\"[(x - 1) % 10]), arr)\n            \n            return\
    \ arr\n        end\n    end\nend\n</code>\n<|/ a |>\n<| c |>\nI see you deleted\
    \ your post before I could accept it. This worked perfectly - thank you!\n<|/\
    \ c |>\n<| a dscore=2 tags=julia |>\n<code>\nusing Test\n\n@testset begin\n\n\
    candidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpg7i7_sqb.jl:21\nin expression starting at\
    \ /tmp/tmpg7i7_sqb.jl:21\n"
  stdout: ''
  timestamp: 1660009196
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    if arr.length == 0 \n        return [] \n    \n    # Put the integers\
    \ greater than 9 at the end of the vector\n    sorted_arr = [n for n in arr if\
    \ n > 9] \n    \n    # Replace each integer by its name\n    sorted_arr.reverse!()\
    \ \n    \n    sorted_arr.reverse!() \n    sorted_arr.reverse!() \n    \n    sorted_arr.reverse!()\
    \ \n    sorted_arr.reverse!() \n    \n    sorted_arr.reverse!() \n    \n    sorted_arr.reverse!()\
    \ \n    \n    sorted_arr.reverse!() \n    \n    sorted_arr.reverse!() \n    \n\
    \    sorted_arr.reverse!() \n    \n    sorted_arr.reverse!() \n    \n    sorted_arr.reverse!()\
    \ \n    \n    sorted_arr.reverse!() \n    \n    sorted_arr.reverse!() \n    \n\
    \    sorted_arr.reverse!() \n    \n    sorted_arr.reverse!() \n    \n    sorted_arr.reverse!()\
    \ \n    \n    sorted_arr.reverse!() \n    \n    sorted_arr.reverse!() \n    \n\
    \    sorted_arr.reverse!() \n    \n    sorted_arr.reverse!() \n    \n    sorted_arr.reverse!()\
    \ \n    \n    sorted_arr.reverse!() \n    \n    sorted_arr.reverse!() \n    \n\
    \    sorted_arr.reverse!() \n    \n    sorted_arr.reverse!() \n    \n    sorted_arr.reverse!()\
    \ \n    \n    sorted_arr.reverse!() \n    \n    sorted_arr.reverse!() \n    \n\
    \    sorted_arr.reverse!() \n    \n    sorted_arr.reverse!() \n    \n    sorted_arr.reverse!()\
    \ \n    \n    sorted_arr.reverse!() \n    \n    sorted_arr.reverse!() \n    \n\
    \    sorted_arr.reverse!() \n    \n    sorted_arr.reverse!() \n    \n    sorted_arr.reverse!()\
    \ \n    \n    sorted_arr.reverse!() \n    \n    sorted_arr.reverse!() \n    \n\
    \    sorted_arr.reverse!() \n    \n    sorted_arr.reverse!() \n    \n    sorted_arr.reverse!()\
    \ \n    \n    sorted_arr.reverse!() \n    \n    sorted_arr.reverse!() \n    \n\
    \    sorted_arr.reverse!() \n    \n    sorted_arr.reverse!() \n    \n    sorted_arr.reverse!()\
    \ \n    \n    sorted_arr.reverse!() \n    \n    sorted_arr.reverse!() \n    \n\
    \    sorted_arr.reverse!() \n    \n    sorted_arr.reverse!() \n    \n    sorted_arr.reverse!()\
    \ \n    \n    sorted_arr.reverse!\nusing Test\n\n@testset begin\n\ncandidate =\
    \ by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyu06gnri.jl:1\nin expression starting at /tmp/tmpyu06gnri.jl:1\n"
  stdout: ''
  timestamp: 1660009196
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    vec = copy(arr)\n    \n    for i in vec\n        if i >= 1 && i <= 9\n\
    \            arr[i] = \"One\"\n            arr[i+1] = \"Two\"\n            arr[i+2]\
    \ = \"Three\"\n            arr[i+3] = \"Four\"\n            arr[i+4] = \"Five\"\
    \n            arr[i+5] = \"Six\"\n            arr[i+6] = \"Seven\"\n         \
    \   arr[i+7] = \"Eight\"\n            arr[i+8] = \"Nine\"\n        end\n    end\n\
    \    \n    return arr\nend\n</cell>\n<code language=julia-1.0>\nby_length([\"\
    B\", \"A\", \"D\", \"C\"])\n</cell>\n<text>\nThe first function that we will be\
    \ implementing is \"find_indexes\". Given a list of numbers, it returns the indexes\
    \ of those numbers that are divisible by 7 and are greater than or equal to 1.\
    \ This function should work even if there are no numbers divisible by 7 or there\
    \ are no numbers greater than or equal to 1, as long as at least one number is\
    \ provided.\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpps087oa6.jl:37\nin expression starting at\
    \ /tmp/tmpps087oa6.jl:37\n"
  stdout: ''
  timestamp: 1660009196
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    arr = by_length(arr, \"\");\n    return arr\nend\n</cell>\n<text>\nWrite\
    \ a function that takes a vector of integers, sorts them by length, reverse the\
    \ order and replace each digit by its corresponding name from \"One\", \"Two\"\
    , \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\". For\
    \ example:\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcfjggs41.jl:22\nin expression starting at\
    \ /tmp/tmpcfjggs41.jl:22\n"
  stdout: ''
  timestamp: 1660009196
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    arr = sort(arr)\n    by_name(arr)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmp6gbiphhg.jl:24

    '
  stdout: "test set: Error During Test at /tmp/tmp6gbiphhg.jl:27\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  UndefVarError: by_name\
    \ not defined\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmp6gbiphhg.jl:20\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp6gbiphhg.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp6gbiphhg.jl:26\ntest set:\
    \ Error During Test at /tmp/tmp6gbiphhg.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == Vector{String}([])\n  UndefVarError: by_name\
    \ not defined\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmp6gbiphhg.jl:20\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp6gbiphhg.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp6gbiphhg.jl:26\ntest set:\
    \ Error During Test at /tmp/tmp6gbiphhg.jl:29\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  UndefVarError: by_name not defined\n\
    \  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmp6gbiphhg.jl:20\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp6gbiphhg.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp6gbiphhg.jl:26\ntest set:\
    \ Error During Test at /tmp/tmp6gbiphhg.jl:30\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"]\n  UndefVarError:\
    \ by_name not defined\n  Stacktrace:\n   [1] by_length(arr::Vect"
  timestamp: 1660009197
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    if !isempty(arr)\n        arr=sort(arr)\n        arr=reverse(arr)\n  \
    \      arr=map((&string(x)), (reverse(arr)))\n    end\n    return arr\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1,\
    \ 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid syntax &(string(x)) around /tmp/tmp5eb2esis.jl:22\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmp5eb2esis.jl:1\nin expression starting\
    \ at /tmp/tmp5eb2esis.jl:1\n"
  stdout: ''
  timestamp: 1660009196
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    arr = sort(arr)\n    if length(arr) == 0\n        return Vec()\n    end\n\
    \    arr = reverse(arr)\n    digits = unique(arr) \n    by_digits = Dict(\"One\"\
    =1,\"Two\"=2,\"Three\"=3,\"Four\"=4,\"Five\"=5,\"Six\"=6,\"Seven\"=7,\"Eight\"\
    =8,\"Nine\"=9)\n    return map(by_digits[digits[end]], arr)\nend\n</cell>\n<text>\n\
    Question 4: What do these three functions mean? How would you combine these functions\
    \ together to answer the question \"What is the length of the longest subvector\
    \ that contains a given digit?\" For example, what should the result be for by_length(subvectors([2,\
    \ 1, 1, 4, 5, 8, 2, 3]), 2)?\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid keyword argument name \"\"One\"\" around\
    \ /tmp/tmp59mt8126.jl:25\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp59mt8126.jl:1\n\
    in expression starting at /tmp/tmp59mt8126.jl:1\n"
  stdout: ''
  timestamp: 1660009196
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    if length(arr) == 0\n        return Vector{String}()\n    \n    v = Vector{String}()\n\
    \    if arr[1] < arr[2]\n        v = v * \"One\" + reverse_and_replace(arr, reverse(arr))\n\
    \    elseif arr[1] > arr[2]\n        v = v * \"Two\" + reverse_and_replace(arr,\
    \ reverse(arr))\n    elseif arr[1] == arr[2]\n        v = v * \"Two\"\n    end\n\
    \    \n    return v\nend\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp4pd93u_o.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp4pd93u_o.jl:1\n\
    in expression starting at /tmp/tmp4pd93u_o.jl:1\n"
  stdout: ''
  timestamp: 1660009196
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    if isempty(arr)\n        return arr\n    else\n        \n        \n  \
    \  \n        \n        return arr |>\n            sort |>\n            reverse\n\
    \            |> map by_length_name\n            |> flatten\n            \n   \
    \     end\n    end\nend\n</cell>\n<code language=julia-1.5>\nby_length([0, 2,\
    \ 5, 1, 4, 8, 3, 6, 7]) |> println\nby_length([])\nby_length([1, -1, 55]) |> println\n\
    </cell>\n<text>\nExercise 2\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"|>\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7u339kv5.jl:29\nin expression starting at\
    \ /tmp/tmp7u339kv5.jl:29\n"
  stdout: ''
  timestamp: 1660009196
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n   \n    digits = sort(arr).reverse()\n    \n    strs = Vector{String}(undef,\
    \ 0)\n    \n    for d in digits\n        if d < 1 || d > 9\n            error(\"\
    Illegal element found at index $d\")\n        end\n        strs[d-1] = digits[d]\n\
    \    end\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpaq0e380t.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpaq0e380t.jl:1\n\
    in expression starting at /tmp/tmpaq0e380t.jl:1\n"
  stdout: ''
  timestamp: 1660009196
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    if length(arr) == 0 \n        return [] \n    else \n        result =\
    \ []\n        small = []\n        big = []\n        for i in arr\n           \
    \ push!(big, ceil(i/9)) \n            push!(small, i mod 9) \n        end\n  \
    \      if any(small > 1) \n            for j in small\n                push!(big,\
    \ 1) \n            end\n        end\n        push!(big, 9) \n        for i in\
    \ big\n            if i == 1 \n                push!(result, \"One\") \n     \
    \       else \n                if iszero(i)\n                    push!(result,\
    \ \"Zero\") \n                else\n                    if i == 9 \n         \
    \               push!(result, \"Nine\") \n                    else \n        \
    \                push!(result, digitnames[i%10]) \n                    end \n\
    \                end\n            end\n        end\n        return result \n \
    \   end\nend\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5m628og1.jl:27\nin expression starting at\
    \ /tmp/tmp5m628og1.jl:27\n"
  stdout: ''
  timestamp: 1660009196
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    \n    if arr.is_empty\n        Vector{String}()\n    elseif arr[1] ==\
    \ 1\n        arr[2:end] .* \"One\"\n    elseif arr[1] == 2\n        arr[2:end]\
    \ .* \"Two\"\n    elseif arr[1] == 3\n        arr[2:end] .* \"Three\"\n    elseif\
    \ arr[1] == 4\n        arr[2:end] .* \"Four\"\n    elseif arr[1] == 5\n      \
    \  arr[2:end] .* \"Five\"\n    elseif arr[1] == 6\n        arr[2:end] .* \"Six\"\
    \n    elseif arr[1] == 7\n        arr[2:end] .* \"Seven\"\n    elseif arr[1] ==\
    \ 8\n        arr[2:end] .* \"Eight\"\n    elseif arr[1] == 9\n        arr[2:end]\
    \ .* \"Nine\"\n    end\nend\n</cell>\n<code language=julia-1.2>\nby_length([2,\
    \ 1, 5, 1, 4, 2, 9, 1])\n</cell>\n<text>\nExercise 4\nusing Test\n\n@testset begin\n\
    \ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptvqo0lit.jl:42\nin expression starting at\
    \ /tmp/tmptvqo0lit.jl:42\n"
  stdout: ''
  timestamp: 1660009196
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    if !isempty(arr)\n        arr = sort(arr)\n        arr = reverse(arr)\n\
    \        arr = map(get_digit_name, arr)\n    end\n    return arr\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5,\
    \ 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"\
    One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmp3qjrr7_f.jl:28

    '
  stdout: "test set: Error During Test at /tmp/tmp3qjrr7_f.jl:31\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  UndefVarError: get_digit_name\
    \ not defined\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmp3qjrr7_f.jl:22\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp3qjrr7_f.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp3qjrr7_f.jl:30\ntest set:\
    \ Error During Test at /tmp/tmp3qjrr7_f.jl:33\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  UndefVarError: get_digit_name not defined\n\
    \  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmp3qjrr7_f.jl:22\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp3qjrr7_f.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp3qjrr7_f.jl:30\ntest set:\
    \ Error During Test at /tmp/tmp3qjrr7_f.jl:34\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"]\n  UndefVarError:\
    \ get_digit_name not defined\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n\
    \     @ Main /tmp/tmp3qjrr7_f.jl:22\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp3qjrr7_f.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp3qjrr7_f.jl:30\ntest set:\
    \ Error During Test at /tmp/tmp3qjrr7_f.jl:35\n  Test threw exception\n  Expression:\
    \ candidate([9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"]\n  UndefVarError: get_digit_name\
    \ not defined\n  Stacktrace:"
  timestamp: 1660009198
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    vect_sorted = sort(vect_sorted)\n    vect_reversed = reverse(vect_sorted)\n\
    \    vect_reversed = replace_all(vect_reversed, 1:9, \"One\")\n    vect_reversed\
    \ = replace_all(vect_reversed, 10:19, \"Two\")\n    vect_reversed = replace_all(vect_reversed,\
    \ 20:29, \"Three\")\n    vect_reversed = replace_all(vect_reversed, 30:39, \"\
    Four\")\n    vect_reversed = replace_all(vect_reversed, 40:49, \"Five\")\n   \
    \ vect_reversed = replace_all(vect_reversed, 50:59, \"Six\")\n    vect_reversed\
    \ = replace_all(vect_reversed, 60:69, \"Seven\")\n    vect_reversed = replace_all(vect_reversed,\
    \ 70:79, \"Eight\")\n    vect_reversed = replace_all(vect_reversed, 80:89, \"\
    Nine\")\n    return vect_reversed\nend #by_length\nusing Test\n\n@testset begin\n\
    \ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpfh5bsmg6.jl:34

    '
  stdout: "test set: Error During Test at /tmp/tmpfh5bsmg6.jl:37\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  UndefVarError: vect_sorted\
    \ not defined\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmpfh5bsmg6.jl:19\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpfh5bsmg6.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpfh5bsmg6.jl:36\ntest set:\
    \ Error During Test at /tmp/tmpfh5bsmg6.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == Vector{String}([])\n  UndefVarError: vect_sorted\
    \ not defined\n  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmpfh5bsmg6.jl:19\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpfh5bsmg6.jl:38 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpfh5bsmg6.jl:36\ntest set:\
    \ Error During Test at /tmp/tmpfh5bsmg6.jl:39\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  UndefVarError: vect_sorted not defined\n\
    \  Stacktrace:\n   [1] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmpfh5bsmg6.jl:19\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpfh5bsmg6.jl:39 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpfh5bsmg6.jl:36\ntest set:\
    \ Error During Test at /tmp/tmpfh5bsmg6.jl:40\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"]\n  UndefVarError:\
    \ vect_sorted not defined\n  Stacktrace:\n   [1] by_"
  timestamp: 1660009198
