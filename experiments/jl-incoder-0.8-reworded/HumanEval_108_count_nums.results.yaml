language: jl
name: HumanEval_108_count_nums
results:
- exit_code: 1
  program: "\"\"\"\n    Write a function count_nums which takes a vector of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([])\n    0\n \
    \   >>> count_nums([-1, 11, -11])\n    1\n    >>> count_nums([1, 1, 2])\n    3\n\
    \    \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    count = 0\n\
    \    for x in arr\n        if x < 0\n            sign = -sign(x)\n           \
    \ x -= sign\n        end\n        if x == 0\n            count += 1\n        \
    \    continue\n        if x > 0\n            count += 1\n        end\n    end\n\
    \    return count\nend\n</cell>\n<text>\nTask 3.2\nWrite a function find_sum_by_digit(arr,\
    \ sign) which takes a vector arr and a sign\nand returns a vector which contains\
    \ the sum of the digits in the numbers, i.e.\nthe sign of arr before adding each\
    \ digit of arr. The sign of the result vector\nis determined by the sign of the\
    \ sign argument of the function:\nThe sign of the result vector is determined\
    \ by the sign of the sign argument of\nthe function:\ne.g. if sign is +1, then\
    \ find_sum_by_digit([1, 1, 1], 1) yields [1, 1, 1], and if sign\nis -1, then find_sum_by_digit([1,\
    \ 1, 1], -1) yields [-1, -1, -1].\nusing Test\n\n@testset begin\n\ncandidate =\
    \ count_nums;\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([-1,\
    \ -2, 0]) == 0)\n\t@test(candidate([1, 1, 2, -2, 3, 4, 5]) == 6)\n\t@test(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1, 100, 98, -7, 1, -1]) == 4)\n\
    \t@test(candidate([12, 23, 34, -45, -56, 0]) == 5)\n\t@test(candidate([0, 1])\
    \ == 1)\n\t@test(candidate([1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplsy2reb5.jl:29\nin expression starting at\
    \ /tmp/tmplsy2reb5.jl:29\n"
  stdout: ''
  timestamp: 1660004018
- exit_code: 1
  program: "\"\"\"\n    Write a function count_nums which takes a vector of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([])\n    0\n \
    \   >>> count_nums([-1, 11, -11])\n    1\n    >>> count_nums([1, 1, 2])\n    3\n\
    \    \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    count = Vector{Int64}(undef,\
    \ 0)\n    for (i, item) in enumerate(arr)\n        if item > 0\n            count\
    \ += i\n        end\n    end\n    return length(count)\nend\n</cell>\n<text>\n\
    To check that your count_nums works correctly, use tests to check if its output\
    \ matches your expectations.\nusing Test\n\n@testset begin\n\ncandidate = count_nums;\n\
    \t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([-1, -2, 0]) ==\
    \ 0)\n\t@test(candidate([1, 1, 2, -2, 3, 4, 5]) == 6)\n\t@test(candidate([1, 6,\
    \ 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1, 100, 98, -7, 1, -1]) == 4)\n\t\
    @test(candidate([12, 23, 34, -45, -56, 0]) == 5)\n\t@test(candidate([0, 1]) ==\
    \ 1)\n\t@test(candidate([1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9s5qdp2_.jl:22\nin expression starting at\
    \ /tmp/tmp9s5qdp2_.jl:22\n"
  stdout: ''
  timestamp: 1660004018
- exit_code: 1
  program: "\"\"\"\n    Write a function count_nums which takes a vector of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([])\n    0\n \
    \   >>> count_nums([-1, 11, -11])\n    1\n    >>> count_nums([1, 1, 2])\n    3\n\
    \    \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    result = zeros(Int64,\
    \ length(arr))\n    for i = 1:length(arr)\n        if abs(arr[i]) >= 10\n    \
    \        digit = abs(arr[i])\n            idx = findfirst(x -> x == digit, arr)\n\
    \            result[i] += idx < 0 ? -1 : idx\n        end\n    end\n    return\
    \ result\nend\n</cell>\n<code language=julia-0.6>\ncount_nums([-2, -1, 11])\n\
    </cell>\n<text>\nPart 2: Write a function to return the first element of the vector\n\
    where the number of digits in the number are greater than 4.\nIf there are no\
    \ such elements in the vector, then return -1.\nusing Test\n\n@testset begin\n\
    \ncandidate = count_nums;\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([-1,\
    \ -2, 0]) == 0)\n\t@test(candidate([1, 1, 2, -2, 3, 4, 5]) == 6)\n\t@test(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1, 100, 98, -7, 1, -1]) == 4)\n\
    \t@test(candidate([12, 23, 34, -45, -56, 0]) == 5)\n\t@test(candidate([0, 1])\
    \ == 1)\n\t@test(candidate([1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyswiw47f.jl:24\nin expression starting at\
    \ /tmp/tmpyswiw47f.jl:24\n"
  stdout: ''
  timestamp: 1660004018
- exit_code: 1
  program: "\"\"\"\n    Write a function count_nums which takes a vector of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([])\n    0\n \
    \   >>> count_nums([-1, 11, -11])\n    1\n    >>> count_nums([1, 1, 2])\n    3\n\
    \    \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    count=0\n  \
    \  for n in arr\n        if n >= 0 && sum( digits(n) ) > 0 \n            count\
    \ = count + 1\n        end\n    end\n    return count\nend\n</code>\n<|/ a dscore=2\
    \ tags=julia |>\n<| c |>\nThank you for you solution and the great explanation.\n\
    <|/ c |>\n<| a dscore=1 |>\nAn alternative solution that uses Julia's native functionality\
    \ as much as possible. This solution has a similar execution time to the one by\
    \ Lasse, but it is more concise:\n<code>\njulia> countdigits(x) = sum(x .<= digits(x)[1],\
    \ digits(x)) <= digits(x) ? 1 : 0\ncountdigits (generic function with 1 method)\n\
    using Test\n\n@testset begin\n\ncandidate = count_nums;\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([-1, -2, 0]) == 0)\n\t@test(candidate([1, 1, 2, -2,\
    \ 3, 4, 5]) == 6)\n\t@test(candidate([1, 6, 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1,\
    \ 100, 98, -7, 1, -1]) == 4)\n\t@test(candidate([12, 23, 34, -45, -56, 0]) ==\
    \ 5)\n\t@test(candidate([0, 1]) == 1)\n\t@test(candidate([1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp83lv_4lr.jl:22\nin expression starting at\
    \ /tmp/tmp83lv_4lr.jl:22\n"
  stdout: ''
  timestamp: 1660004018
- exit_code: 1
  program: "\"\"\"\n    Write a function count_nums which takes a vector of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([])\n    0\n \
    \   >>> count_nums([-1, 11, -11])\n    1\n    >>> count_nums([1, 1, 2])\n    3\n\
    \    \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    if length(arr)\
    \ == 0 \n        return 0 \n    \n    let mut count = 0 \n    for i in arr \n\
    \        count += i mod 10 \n        count += ((i - count mod 10) div 10) \n \
    \   \n    count \nend\n</cell>\n<text>\nThe sum of the digits of positive integers\
    \ is calculated by using the count_nums function above. For example, count_nums([1,\
    \ 2, 3, -4]) returns 2, because there are two 1's, three 2's, and one 4. If there\
    \ are no positive integers in the vector, the function should return 0.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = count_nums;\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([-1, -2, 0]) == 0)\n\t@test(candidate([1, 1, 2, -2,\
    \ 3, 4, 5]) == 6)\n\t@test(candidate([1, 6, 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1,\
    \ 100, 98, -7, 1, -1]) == 4)\n\t@test(candidate([12, 23, 34, -45, -56, 0]) ==\
    \ 5)\n\t@test(candidate([0, 1]) == 1)\n\t@test(candidate([1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: let variables should end in \";\" or newline\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmpa_sarfav.jl:17\nin expression\
    \ starting at /tmp/tmpa_sarfav.jl:17\n"
  stdout: ''
  timestamp: 1660004018
- exit_code: 1
  program: "\"\"\"\n    Write a function count_nums which takes a vector of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([])\n    0\n \
    \   >>> count_nums([-1, 11, -11])\n    1\n    >>> count_nums([1, 1, 2])\n    3\n\
    \    \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    count = 0\n\
    \    for i in arr\n        if i >= 0 && i < 10\n            count += 1\n     \
    \   end\n    end\n    return count\nend\n</cell>\n<text>\nThe function count_nums\
    \ takes numbers as input and returns a number\n    representing the number of\
    \ elements which has a sum of digits > 0.\n    If a number is negative, then its\
    \ first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2,\
    \ and 3.\n    >>> count_nums([])\n    0\n    >>> count_nums([-1, 11, -11])\n \
    \   1\n    >>> count_nums([1, 1, 2])\n    3\n    \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = count_nums;\n\t@test(candidate(Vector{Int64}([])) == 0)\n\
    \t@test(candidate([-1, -2, 0]) == 0)\n\t@test(candidate([1, 1, 2, -2, 3, 4, 5])\
    \ == 6)\n\t@test(candidate([1, 6, 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1,\
    \ 100, 98, -7, 1, -1]) == 4)\n\t@test(candidate([12, 23, 34, -45, -56, 0]) ==\
    \ 5)\n\t@test(candidate([0, 1]) == 1)\n\t@test(candidate([1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdc9pq_1e.jl:22\nin expression starting at\
    \ /tmp/tmpdc9pq_1e.jl:22\n"
  stdout: ''
  timestamp: 1660004018
- exit_code: 1
  program: "\"\"\"\n    Write a function count_nums which takes a vector of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([])\n    0\n \
    \   >>> count_nums([-1, 11, -11])\n    1\n    >>> count_nums([1, 1, 2])\n    3\n\
    \    \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    count = 0\n\
    \    for v in arr\n        if v > 0\n            count += 1\n        end\n   \
    \ end\n    return count\nend\n</cell>\n<code language=julia-0.6>\n@time count_nums(rand(1000));\n\
    </cell>\n<code language=julia-0.6>\n@time count_nums(randn(1000));\n</cell>\n\
    <text>\nA recursive function\nLet's look at what happens when we use a recursive\
    \ function.  Recall that a recursive function is a function that calls itself.\n\
    using Test\n\n@testset begin\n\ncandidate = count_nums;\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([-1, -2, 0]) == 0)\n\t@test(candidate([1, 1, 2, -2,\
    \ 3, 4, 5]) == 6)\n\t@test(candidate([1, 6, 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1,\
    \ 100, 98, -7, 1, -1]) == 4)\n\t@test(candidate([12, 23, 34, -45, -56, 0]) ==\
    \ 5)\n\t@test(candidate([0, 1]) == 1)\n\t@test(candidate([1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1fkmcqmd.jl:22\nin expression starting at\
    \ /tmp/tmp1fkmcqmd.jl:22\n"
  stdout: ''
  timestamp: 1660004018
- exit_code: 1
  program: "\"\"\"\n    Write a function count_nums which takes a vector of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([])\n    0\n \
    \   >>> count_nums([-1, 11, -11])\n    1\n    >>> count_nums([1, 1, 2])\n    3\n\
    \    \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    digits = Vector{Int64}()\n\
    \    for i in arr\n        digits = vcat(digits, digits(abs(i)))\n    end\n  \
    \  return length(filter(x -> x > 0n, digits))\nend\n</cell>\n<text>\nExercise\n\
    Write a function that counts the number of elements in a list that have\na sum\
    \ of digits > 0.\nusing Test\n\n@testset begin\n\ncandidate = count_nums;\n\t\
    @test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([-1, -2, 0]) == 0)\n\
    \t@test(candidate([1, 1, 2, -2, 3, 4, 5]) == 6)\n\t@test(candidate([1, 6, 9, -6,\
    \ 0, 1, 5]) == 5)\n\t@test(candidate([1, 100, 98, -7, 1, -1]) == 4)\n\t@test(candidate([12,\
    \ 23, 34, -45, -56, 0]) == 5)\n\t@test(candidate([0, 1]) == 1)\n\t@test(candidate([1])\
    \ == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqf30or6v.jl:20\nin expression starting at\
    \ /tmp/tmpqf30or6v.jl:20\n"
  stdout: ''
  timestamp: 1660004018
- exit_code: 1
  program: "\"\"\"\n    Write a function count_nums which takes a vector of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([])\n    0\n \
    \   >>> count_nums([-1, 11, -11])\n    1\n    >>> count_nums([1, 1, 2])\n    3\n\
    \    \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    count_nums_helper(arr,\
    \ zeros(Int64, length(arr)))\nend\n</cell>\n<code language=julia-1.5>\ncount_nums([-1,11,-11])\n\
    </cell>\n<code language=julia-1.5>\ncount_nums([-1,11,-11,-1,2,-3,111,-21])\n\
    </cell>\n<text>\nWrite a function to get the number of positive integers that\
    \ have a sum > 0.\nE.g. [1, 2, 3, 4] has sum 5 because 1 + 2 + 3 = 5 and then\
    \ 4.\nUse count_nums.\nThis function should not be used on the result of\ncount_sum_digits(...).\n\
    >>> count_num_pos_ints([1,2,3,4])\n1\n>>> count_num_pos_ints([1,2,-3,4])\n3\n\
    using Test\n\n@testset begin\n\ncandidate = count_nums;\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([-1, -2, 0]) == 0)\n\t@test(candidate([1, 1, 2, -2,\
    \ 3, 4, 5]) == 6)\n\t@test(candidate([1, 6, 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1,\
    \ 100, 98, -7, 1, -1]) == 4)\n\t@test(candidate([12, 23, 34, -45, -56, 0]) ==\
    \ 5)\n\t@test(candidate([0, 1]) == 1)\n\t@test(candidate([1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmdtrjxf3.jl:16\nin expression starting at\
    \ /tmp/tmpmdtrjxf3.jl:16\n"
  stdout: ''
  timestamp: 1660004018
- exit_code: 1
  program: "\"\"\"\n    Write a function count_nums which takes a vector of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([])\n    0\n \
    \   >>> count_nums([-1, 11, -11])\n    1\n    >>> count_nums([1, 1, 2])\n    3\n\
    \    \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    count=0\n  \
    \  for n in arr\n        count = count + 1\n        if n<0\n            n = abs(n)\n\
    \            count = count + 1\n        end\n    end\n    return count\nend\n\
    </cell>\n<code language=julia-0.5>\ncount_nums([1,-1,1,2,3])\n</cell>\n<text>\n\
    Exercise: Write a function count_nonzeros(arr::Vector{Int64})::Int64  which returns\
    \ a vector of counts of nonzero integers in the vector arr.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = count_nums;\n\t@test(candidate(Vector{Int64}([])) == 0)\n\
    \t@test(candidate([-1, -2, 0]) == 0)\n\t@test(candidate([1, 1, 2, -2, 3, 4, 5])\
    \ == 6)\n\t@test(candidate([1, 6, 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1,\
    \ 100, 98, -7, 1, -1]) == 4)\n\t@test(candidate([12, 23, 34, -45, -56, 0]) ==\
    \ 5)\n\t@test(candidate([0, 1]) == 1)\n\t@test(candidate([1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9ccvwc2t.jl:24\nin expression starting at\
    \ /tmp/tmp9ccvwc2t.jl:24\n"
  stdout: ''
  timestamp: 1660004018
- exit_code: 1
  program: "\"\"\"\n    Write a function count_nums which takes a vector of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([])\n    0\n \
    \   >>> count_nums([-1, 11, -11])\n    1\n    >>> count_nums([1, 1, 2])\n    3\n\
    \    \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    if isempty(arr)\n\
    \        return 0\n    if all(x < 0 for x in arr)\n        arr = arr .+ arr .-arr\n\
    \    end\nusing Test\n\n@testset begin\n\ncandidate = count_nums;\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([-1, -2, 0]) == 0)\n\t@test(candidate([1, 1, 2, -2,\
    \ 3, 4, 5]) == 6)\n\t@test(candidate([1, 6, 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1,\
    \ 100, 98, -7, 1, -1]) == 4)\n\t@test(candidate([12, 23, 34, -45, -56, 0]) ==\
    \ 5)\n\t@test(candidate([0, 1]) == 1)\n\t@test(candidate([1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_swjf391.jl:1\nin expression starting at /tmp/tmp_swjf391.jl:1\n"
  stdout: ''
  timestamp: 1660004018
- exit_code: 1
  program: "\"\"\"\n    Write a function count_nums which takes a vector of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([])\n    0\n \
    \   >>> count_nums([-1, 11, -11])\n    1\n    >>> count_nums([1, 1, 2])\n    3\n\
    \    \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    cnt = 0\n  \
    \  for x in arr\n        if x < 0\n            cnt += 1\n            x %= 10\n\
    \        elseif x == 0\n            cnt += 1\n        else\n            cnt +=\
    \ count_nums(x/10)\n        end\n    end\n    return cnt\nend\n</code>\n<|/ a\
    \ tags=big-o,time-complexity,julia dscore=1 |>\n<| c |>\nFor starters, you can\
    \ do `if x < 0` instead of `if x < 0 || x == 0` because the second clause doesn't\
    \ get executed if `x < 0` evaluates to `true` anyway\n<|/ c |>\n<| c |>\nThanks\
    \ very much for the corrections! I've added the correction to the answer.\n<|/\
    \ c |>\n<| a |>\nI believe this is a better answer, it avoids having to call count_nums\
    \ twice as you suggest.\n<code>\nusing Test\n\n@testset begin\n\ncandidate = count_nums;\n\
    \t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([-1, -2, 0]) ==\
    \ 0)\n\t@test(candidate([1, 1, 2, -2, 3, 4, 5]) == 6)\n\t@test(candidate([1, 6,\
    \ 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1, 100, 98, -7, 1, -1]) == 4)\n\t\
    @test(candidate([12, 23, 34, -45, -56, 0]) == 5)\n\t@test(candidate([0, 1]) ==\
    \ 1)\n\t@test(candidate([1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp528ckdp7.jl:27\nin expression starting at\
    \ /tmp/tmp528ckdp7.jl:27\n"
  stdout: ''
  timestamp: 1660004018
- exit_code: 1
  program: "\"\"\"\n    Write a function count_nums which takes a vector of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([])\n    0\n \
    \   >>> count_nums([-1, 11, -11])\n    1\n    >>> count_nums([1, 1, 2])\n    3\n\
    \    \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    for i in arr\
    \ \n        temp = abs(i) \n        if temp < 10 \n            sum += 1\n    \
    \    else if temp < 100 \n            sum += 2\n        else if temp < 1000 \n\
    \            sum += 3\n        else if temp < 10000 \n            sum += 4\n \
    \       else if temp < 100000 \n            sum += 5\n        else if temp < 1000000\
    \ \n            sum += 6\n        else if temp < 10000000 \n            sum +=\
    \ 7\n        else if temp < 100000000 \n            sum += 8\n        else if\
    \ temp < 1000000000 \n            sum += 9\n        else \n            sum +=\
    \ 10 \n    end\n    return sum\nend\n</cell>\n<code language=julia-1.3>\ncount_nums([-2,\
    \ -1, 0, 2, -10, 1, 2, -10, 1])\n</cell>\n<text>\nExercise\nWrite a function to\
    \ compute the absolute difference between two vectors. Vector\nlengths are assumed\
    \ equal, so the output is the absolute value of\nthe sum of absolute differences\
    \ between corresponding elements.  For\nexample, if the input vectors are [1,2,3]\
    \ and [4,5,6], the output should be\nabs(5 + 6 + 3 - 1 + 2 - 4) = 7.\nusing Test\n\
    \n@testset begin\n\ncandidate = count_nums;\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([-1, -2, 0]) == 0)\n\t@test(candidate([1, 1, 2, -2,\
    \ 3, 4, 5]) == 6)\n\t@test(candidate([1, 6, 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1,\
    \ 100, 98, -7, 1, -1]) == 4)\n\t@test(candidate([12, 23, 34, -45, -56, 0]) ==\
    \ 5)\n\t@test(candidate([0, 1]) == 1)\n\t@test(candidate([1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbttj9alj.jl:18\nin expression starting at\
    \ /tmp/tmpbttj9alj.jl:18\n"
  stdout: ''
  timestamp: 1660004018
- exit_code: 1
  program: "\"\"\"\n    Write a function count_nums which takes a vector of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([])\n    0\n \
    \   >>> count_nums([-1, 11, -11])\n    1\n    >>> count_nums([1, 1, 2])\n    3\n\
    \    \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    \"\"\"\n   \
    \ Write a function that takes a vector of integers and returns the number of elements\
    \ which has a sum of digits > 0.\n    If a number is negative, then its first\
    \ signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n\
    \    >>> count_nums([])\n    0\n    >>> count_nums([-1, 11, -11])\n    1\n   \
    \ >>> count_nums([1, 1, 2])\n    3\n    \"\"\"\n    if arr == []\n        return\
    \ 0 \n    end = 0\n    sum = 0\n    for x in arr \n        if x < 0 \n       \
    \     neg = (x < 0) * -1\n            i = round(neg + x) + 1\n            sum\
    \ += i\n        else\n            sum += x \n        end\n    end\n    return\
    \ sum \nend\n</code>\n<|/ a dscore=0 |>\n<| a |>\nHere's a Julia solution that\
    \ takes advantage of the fact that you can generate vectors in base 2. And that\
    \ you can easily count the number when you're in base 10 (you can also count it\
    \ with the decimal place). Thus you only need to deal with the positive numbers\
    \ and you get an asymptotic O(n) solution.\n<code>\nusing Test\n\n@testset begin\n\
    \ncandidate = count_nums;\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([-1,\
    \ -2, 0]) == 0)\n\t@test(candidate([1, 1, 2, -2, 3, 4, 5]) == 6)\n\t@test(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1, 100, 98, -7, 1, -1]) == 4)\n\
    \t@test(candidate([12, 23, 34, -45, -56, 0]) == 5)\n\t@test(candidate([0, 1])\
    \ == 1)\n\t@test(candidate([1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid assignment location \"if (arr == [])\n\
    \    # /tmp/tmp64irxev9.jl, line 26\n    return 0\nend\" around /tmp/tmp64irxev9.jl:25\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmp64irxev9.jl:1\nin expression starting\
    \ at /tmp/tmp64irxev9.jl:1\n"
  stdout: ''
  timestamp: 1660004018
- exit_code: 1
  program: "\"\"\"\n    Write a function count_nums which takes a vector of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([])\n    0\n \
    \   >>> count_nums([-1, 11, -11])\n    1\n    >>> count_nums([1, 1, 2])\n    3\n\
    \    \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    \n    for i\
    \ in arr\n        if i > 0 \n            return 1 + count_nums(arr[i+1::i])\n\
    \        else\n            return 1\n    end\n    return 0\nend\n</cell>\n<text>\n\
    Exercise 2: count_signs\nWrite a function that takes in a vector of integers and\
    \ returns the number of elements which has a sum of digits < 0.\nIf a number is\
    \ positive, then its first signed digit will be positive:\ne.g. -123 has signed\
    \ digits -1, 2, and 3.\nA number with no digits will be returned as 0\ne.g. 12\
    \ has only 0 digits\nThe input vector may have any number of elements.\nYou may\
    \ assume that none of the elements are negative.\nThe function will take O(n)\
    \ time.\n\"\"\"\nusing Test\n\n@testset begin\n\ncandidate = count_nums;\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([-1, -2, 0]) == 0)\n\t@test(candidate([1, 1, 2, -2,\
    \ 3, 4, 5]) == 6)\n\t@test(candidate([1, 6, 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1,\
    \ 100, 98, -7, 1, -1]) == 4)\n\t@test(candidate([12, 23, 34, -45, -56, 0]) ==\
    \ 5)\n\t@test(candidate([0, 1]) == 1)\n\t@test(candidate([1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpind12zmh.jl:23\nin expression starting at\
    \ /tmp/tmpind12zmh.jl:23\n"
  stdout: ''
  timestamp: 1660004018
- exit_code: 1
  program: "\"\"\"\n    Write a function count_nums which takes a vector of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([])\n    0\n \
    \   >>> count_nums([-1, 11, -11])\n    1\n    >>> count_nums([1, 1, 2])\n    3\n\
    \    \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    s = 0 \n   \
    \ for x in arr \n        s = s + x \n        if x < 0 \n            s = s - x\n\
    \        end\n    end\n    return s \nend\n</cell>\n<cell>\ncount_nums(vec1)\n\
    </cell>\n<cell>\ncount_nums(vec2)\n</cell>\n<text>\nExercise 4\nWrite a function\
    \ count_num_negs which takes a vector of integers and returns\n    the number\
    \ of elements which has a sum of digits < 0.\n    >>> count_num_negs([])\n   \
    \ 0\n    >>> count_num_negs([2, -1, 3, -2])\n    2\n    >>> count_num_negs([2,\
    \ -3, 4, -2])\n    1\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate =\
    \ count_nums;\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([-1,\
    \ -2, 0]) == 0)\n\t@test(candidate([1, 1, 2, -2, 3, 4, 5]) == 6)\n\t@test(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1, 100, 98, -7, 1, -1]) == 4)\n\
    \t@test(candidate([12, 23, 34, -45, -56, 0]) == 5)\n\t@test(candidate([0, 1])\
    \ == 1)\n\t@test(candidate([1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbk1jcv8e.jl:23\nin expression starting at\
    \ /tmp/tmpbk1jcv8e.jl:23\n"
  stdout: ''
  timestamp: 1660004018
- exit_code: 1
  program: "\"\"\"\n    Write a function count_nums which takes a vector of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([])\n    0\n \
    \   >>> count_nums([-1, 11, -11])\n    1\n    >>> count_nums([1, 1, 2])\n    3\n\
    \    \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    if arr.length\
    \ == 0\n        return 0\n    \n    #arr is all positive\n    if all(isPositive(arr))\n\
    \        return length(arr)\n    \n    #arr is all negative\n    if all(isNegative(arr))\n\
    \        return length(arr)\n    \n    #arr is all zero\n    if all(arr == 0)\n\
    \        return 0\n    \n    if arr.length % 2 == 1\n        even = arr[end-1:end]\n\
    \        odd = arr[1:end-1]\n    else \n        even = arr[end-1:end]\n      \
    \  odd = arr[1:end]\n    end\n    \n    if even >= 0\n        evenSum = sum(map(abs,\
    \ even))\n    elseif even < 0\n        evenSum = sum(map(abs, even))\n    else\n\
    \        evenSum = 0\n    end\n    if odd >= 0\n        oddSum = sum(map(abs,\
    \ odd))\n    elseif odd < 0\n        oddSum = sum(map(abs, odd))\n    else\n \
    \       oddSum = 0\n    end\n    \n    return oddSum + evenSum\nend\ncount_nums(x)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_nums;\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([-1, -2, 0]) == 0)\n\t@test(candidate([1, 1, 2, -2,\
    \ 3, 4, 5]) == 6)\n\t@test(candidate([1, 6, 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1,\
    \ 100, 98, -7, 1, -1]) == 4)\n\t@test(candidate([12, 23, 34, -45, -56, 0]) ==\
    \ 5)\n\t@test(candidate([0, 1]) == 1)\n\t@test(candidate([1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcr6nqv10.jl:1\nin expression starting at /tmp/tmpcr6nqv10.jl:1\n"
  stdout: ''
  timestamp: 1660004018
- exit_code: 1
  program: "\"\"\"\n    Write a function count_nums which takes a vector of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([])\n    0\n \
    \   >>> count_nums([-1, 11, -11])\n    1\n    >>> count_nums([1, 1, 2])\n    3\n\
    \    \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    sum::Int64 =\
    \ 0\n    for i in arr \n        if i == 0 \n            continue\n        else\
    \ \n            sum += i \n        end\n    end\n    return sum \nend\n</cell>\n\
    <cell>\nusing Test\n\n@testset begin\n\ncandidate = count_nums;\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([-1, -2, 0]) == 0)\n\t@test(candidate([1, 1, 2, -2,\
    \ 3, 4, 5]) == 6)\n\t@test(candidate([1, 6, 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1,\
    \ 100, 98, -7, 1, -1]) == 4)\n\t@test(candidate([12, 23, 34, -45, -56, 0]) ==\
    \ 5)\n\t@test(candidate([0, 1]) == 1)\n\t@test(candidate([1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxe_b8od7.jl:24\nin expression starting at\
    \ /tmp/tmpxe_b8od7.jl:24\n"
  stdout: ''
  timestamp: 1660004018
- exit_code: 1
  program: "\"\"\"\n    Write a function count_nums which takes a vector of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([])\n    0\n \
    \   >>> count_nums([-1, 11, -11])\n    1\n    >>> count_nums([1, 1, 2])\n    3\n\
    \    \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    cnt_nums = 0\n\
    \    for x in arr\n        if x > 0\n            cnt_nums += 1\n        end\n\
    \    end\n    cnt_nums\nend\n</cell>\n<code language=julia-1.6>\ncount_nums([-2,\
    \ 1, 2, -3, 4, 0])\n</cell>\n<text>\nExercise 4\nWrite a function count_neg_nums\
    \ that takes a vector of integers and returns the number\nof elements which has\
    \ a negative sum of the digits.\n    >>> count_neg_nums([-2, 1, 2, -3, 4, 0])\n\
    \    1\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = count_nums;\n\t\
    @test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([-1, -2, 0]) == 0)\n\
    \t@test(candidate([1, 1, 2, -2, 3, 4, 5]) == 6)\n\t@test(candidate([1, 6, 9, -6,\
    \ 0, 1, 5]) == 5)\n\t@test(candidate([1, 100, 98, -7, 1, -1]) == 4)\n\t@test(candidate([12,\
    \ 23, 34, -45, -56, 0]) == 5)\n\t@test(candidate([0, 1]) == 1)\n\t@test(candidate([1])\
    \ == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpset7ck1f.jl:22\nin expression starting at\
    \ /tmp/tmpset7ck1f.jl:22\n"
  stdout: ''
  timestamp: 1660004018
- exit_code: 1
  program: "\"\"\"\n    Write a function count_nums which takes a vector of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([])\n    0\n \
    \   >>> count_nums([-1, 11, -11])\n    1\n    >>> count_nums([1, 1, 2])\n    3\n\
    \    \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    count = 0\n\
    \    for x in arr\n        if x < 0\n            sign =  1\n            x %= abs(x)\n\
    \        else\n            sign = 0\n        end\n        if x == 0\n        \
    \    count += 1\n            continue\n        end\n        \n        digits =\
    \ x%10\n        digits = sign * digits\n        if digits == 0\n            count\
    \ += 1\n        else\n            count += digits\n        end\n    end\n    return\
    \ count\nend\n</cell>\n<code language=julia-0.6>\ncount_nums([2,-3,5])\n</cell>\n\
    <text>\nExercise 7: Write a function count_evens which takes the vector of integers\
    \ as input and returns the number of elements where the first digit is even.\n\
    \    >>> count_evens([2, -3, 5, -6, 4])\n    1\n    \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = count_nums;\n\t@test(candidate(Vector{Int64}([])) == 0)\n\
    \t@test(candidate([-1, -2, 0]) == 0)\n\t@test(candidate([1, 1, 2, -2, 3, 4, 5])\
    \ == 6)\n\t@test(candidate([1, 6, 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1,\
    \ 100, 98, -7, 1, -1]) == 4)\n\t@test(candidate([12, 23, 34, -45, -56, 0]) ==\
    \ 5)\n\t@test(candidate([0, 1]) == 1)\n\t@test(candidate([1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpspithdi7.jl:37\nin expression starting at\
    \ /tmp/tmpspithdi7.jl:37\n"
  stdout: ''
  timestamp: 1660004018
- exit_code: 1
  program: "\"\"\"\n    Write a function count_nums which takes a vector of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([])\n    0\n \
    \   >>> count_nums([-1, 11, -11])\n    1\n    >>> count_nums([1, 1, 2])\n    3\n\
    \    \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    n = length(arr)\n\
    \    s = sum(arr)\n    return length([d for d in (-s-1) .. s if d > 0])\nend\n\
    using Test\n\n@testset begin\n\ncandidate = count_nums;\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([-1, -2, 0]) == 0)\n\t@test(candidate([1, 1, 2, -2,\
    \ 3, 4, 5]) == 6)\n\t@test(candidate([1, 6, 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1,\
    \ 100, 98, -7, 1, -1]) == 4)\n\t@test(candidate([12, 23, 34, -45, -56, 0]) ==\
    \ 5)\n\t@test(candidate([0, 1]) == 1)\n\t@test(candidate([1]) == 1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpjeh31kx1.jl:20

    '
  stdout: "test set: Error During Test at /tmp/tmpjeh31kx1.jl:23\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == 0\n  UndefVarError: .. not defined\n\
    \  Stacktrace:\n   [1] count_nums(arr::Vector{Int64})\n     @ Main /tmp/tmpjeh31kx1.jl:16\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpjeh31kx1.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpjeh31kx1.jl:22\ntest set:\
    \ Error During Test at /tmp/tmpjeh31kx1.jl:24\n  Test threw exception\n  Expression:\
    \ candidate([-1, -2, 0]) == 0\n  UndefVarError: .. not defined\n  Stacktrace:\n\
    \   [1] count_nums(arr::Vector{Int64})\n     @ Main /tmp/tmpjeh31kx1.jl:16\n \
    \  [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpjeh31kx1.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpjeh31kx1.jl:22\ntest set:\
    \ Error During Test at /tmp/tmpjeh31kx1.jl:25\n  Test threw exception\n  Expression:\
    \ candidate([1, 1, 2, -2, 3, 4, 5]) == 6\n  UndefVarError: .. not defined\n  Stacktrace:\n\
    \   [1] count_nums(arr::Vector{Int64})\n     @ Main /tmp/tmpjeh31kx1.jl:16\n \
    \  [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpjeh31kx1.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpjeh31kx1.jl:22\ntest set:\
    \ Error During Test at /tmp/tmpjeh31kx1.jl:26\n  Test threw exception\n  Expression:\
    \ candidate([1, 6, 9, -6, 0, 1, 5]) == 5\n  UndefVarError: .. not defined\n  Stacktrace:\n\
    \   [1] count_nums(arr::Vector{Int64})\n     @ Main /tmp/tmpjeh31kx1.jl:16\n \
    \  [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdl"
  timestamp: 1660004021
- exit_code: 1
  program: "\"\"\"\n    Write a function count_nums which takes a vector of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([])\n    0\n \
    \   >>> count_nums([-1, 11, -11])\n    1\n    >>> count_nums([1, 1, 2])\n    3\n\
    \    \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    if length(arr)\
    \ == 0 \n        return 0 \n    \n    # Initialise the array counters to zero\n\
    \    counters = zeros(Int64, length(arr))\n    \n    # Iterate through the elements\
    \ of the array\n    for i in 1:length(arr) \n        # Count the number of elements\
    \ which are greater than 0\n        if arr[i] > 0 \n            # Iterate through\
    \ the elements in the vector\n            for j in 1:length(arr) \n          \
    \      # If the element is in the array\n                if arr[j] == arr[i] \n\
    \                    # Increase the counter in the array\n                   \
    \ counters[i] += 1 \n                    break \n            endfor \n       \
    \ else \n            # If the element has a negative sign \n            # then\
    \ it is a negative number\n            counters[i] += 1 if arr[i] < 0 else -1\
    \ \n        endif \n    endfor \n    \n    # Return result\n    return sum(counters)\n\
    endfunction \n</cell>\n<text>\nTask 3 - Counting Numbers\nWrite a recursive function\
    \ count_nums which takes a vector of integers and returns the number of elements\
    \ which has a sum of digits > 0.\nFor example, count_nums([2, -3, -5]) should\
    \ return 2 because there are two numbers in the vector, 1 with a sum of digits\
    \ > 0 and 3 with a sum of digits > 0\nusing Test\n\n@testset begin\n\ncandidate\
    \ = count_nums;\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([-1,\
    \ -2, 0]) == 0)\n\t@test(candidate([1, 1, 2, -2, 3, 4, 5]) == 6)\n\t@test(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1, 100, 98, -7, 1, -1]) == 4)\n\
    \t@test(candidate([12, 23, 34, -45, -56, 0]) == 5)\n\t@test(candidate([0, 1])\
    \ == 1)\n\t@test(candidate([1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"if\" at /tmp/tmp44mlb8yp.jl:27 expected \"\
    end\", got \"if\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp44mlb8yp.jl:35\n\
    in expression starting at /tmp/tmp44mlb8yp.jl:35\n"
  stdout: ''
  timestamp: 1660004018
- exit_code: 1
  program: "\"\"\"\n    Write a function count_nums which takes a vector of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([])\n    0\n \
    \   >>> count_nums([-1, 11, -11])\n    1\n    >>> count_nums([1, 1, 2])\n    3\n\
    \    \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    count = 0\n\
    \    for x in arr\n        if x < 0\n            x = -x\n        elseif x == 0\n\
    \            continue\n        elseif x < 10\n            count = count + 1\n\
    \        elseif x < 100\n            count = count + 10\n        elseif x < 1000\n\
    \            count = count + 100\n        elseif x < 10000\n            count\
    \ = count + 1000\n        elseif x < 100000\n            count = count + 10000\n\
    \        elseif x < 1000000\n            count = count + 100000\n        elseif\
    \ x < 10000000\n            count = count + 1000000\n        elseif x < 100000000\n\
    \            count = count + 10000000\n        elseif x < 1000000000\n       \
    \     count = count + 100000000\n        elseif x < 10000000000\n            count\
    \ = count + 1000000000\n        elseif x < 100000000000\n            count = count\
    \ + 10000000000\n        elseif x < 1000000000000\n            count = count +\
    \ 100000000000\n        elseif x < 10000000000000\n            count = count +\
    \ 1000000000000\n        elseif x < 100000000000000\n            count = count\
    \ + 10000000000000\n        elseif x < 1000000000000000\n            count = count\
    \ + 100000000000000\n        elseif x < 10000000000000000\n            count =\
    \ count + 1000000000000000\n        elseif x < 100000000000000000\n          \
    \  count = count + 10000000000000000\n        elseif x < 1000000000000000000\n\
    \            count = count + 100000000000000000\n        else\n            count\
    \ = count + 1\n        end\n    end\n    return count\nend\n</code>\n<|/ a tags=julia\
    \ dscore=2 |>\n<| c |>\nNice solution! You might want to mention that the loop\
    \ is unrolled and thus very fast if you have many numbers and you know how many\
    \ iterations Julia needs to do. You could also use `divrem` to get a more compact\
    \ solution.\n<|/ c |>\n<| c |>\nThanks, I added your `divrem` suggestion to the\
    \ answer.\n<|/ c |>\n<| c |>\nThe `divrem` solution is really nice and I learned\
    \ something new about `divrem`. However, it seems that it cannot handle a very\
    \ large vector with many zeroes (although it returns `1`).\n<|/ c |>\n<| c |>\n\
    I do not understand how you get a 1 from `count_nums([1,0,0,0])`. Do you mean\
    \ that you get `0` from `count_nums([1,0])`?\n<|/ c |>\n<| c |>\nSorry, I mixed\
    \ up `count_nums([1,0])` with `count_nums([1])`. Please see the updated answer.\n\
    <|/ c |>\n<| a |>\nI did a benchmark on various solutions using Julia 1.6.0 with\
    \ the results of the \nusing Test\n\n@testset begin\n\ncandidate = count_nums;\n\
    \t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([-1, -2, 0]) ==\
    \ 0)\n\t@test(candidate([1, 1, 2, -2, 3, 4, 5]) == 6)\n\t@test(candidate([1, 6,\
    \ 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1, 100, 98, -7, 1, -1]) == 4)\n\t\
    @test(candidate([12, 23, 34, -45, -56, 0]) == 5)\n\t@test(candidate([0, 1]) ==\
    \ 1)\n\t@test(candidate([1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpn_sjjnyy.jl:62\nin expression starting at\
    \ /tmp/tmpn_sjjnyy.jl:62\n"
  stdout: ''
  timestamp: 1660004018
- exit_code: 1
  program: "\"\"\"\n    Write a function count_nums which takes a vector of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([])\n    0\n \
    \   >>> count_nums([-1, 11, -11])\n    1\n    >>> count_nums([1, 1, 2])\n    3\n\
    \    \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    cnt = 0\n  \
    \  for x in arr\n        if x < 0\n            neg = -x\n            cnt += x\n\
    \        else\n            cnt += x%10\n        end\n    end\n    return cnt\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_nums;\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([-1, -2, 0]) == 0)\n\t@test(candidate([1, 1, 2, -2,\
    \ 3, 4, 5]) == 6)\n\t@test(candidate([1, 6, 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1,\
    \ 100, 98, -7, 1, -1]) == 4)\n\t@test(candidate([12, 23, 34, -45, -56, 0]) ==\
    \ 5)\n\t@test(candidate([0, 1]) == 1)\n\t@test(candidate([1]) == 1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp1sh_bx4f.jl:27

    '
  stdout: "test set: Test Failed at /tmp/tmp1sh_bx4f.jl:31\n  Expression: candidate([-1,\
    \ -2, 0]) == 0\n   Evaluated: -3 == 0\nStacktrace:\n [1] macro expansion\n   @\
    \ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp1sh_bx4f.jl:31 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp1sh_bx4f.jl:29\ntest set: Test Failed at /tmp/tmp1sh_bx4f.jl:32\n\
    \  Expression: candidate([1, 1, 2, -2, 3, 4, 5]) == 6\n   Evaluated: 14 == 6\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1sh_bx4f.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1sh_bx4f.jl:29\ntest set: Test\
    \ Failed at /tmp/tmp1sh_bx4f.jl:33\n  Expression: candidate([1, 6, 9, -6, 0, 1,\
    \ 5]) == 5\n   Evaluated: 16 == 5\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1sh_bx4f.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1sh_bx4f.jl:29\ntest set: Test\
    \ Failed at /tmp/tmp1sh_bx4f.jl:34\n  Expression: candidate([1, 100, 98, -7, 1,\
    \ -1]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1sh_bx4f.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1sh_bx4f.jl:29\ntest set: Test\
    \ Failed at /tmp/tmp1sh_bx4f.jl:35\n  Expression: candidate([12, 23, 34, -45,\
    \ -56, 0]) == 5\n   Evaluated: -92 == 5\nStacktrace:\n [1] macro expansion\n \
    \  @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] mac"
  timestamp: 1660004021
- exit_code: 1
  program: "\"\"\"\n    Write a function count_nums which takes a vector of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([])\n    0\n \
    \   >>> count_nums([-1, 11, -11])\n    1\n    >>> count_nums([1, 1, 2])\n    3\n\
    \    \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n count_nums(arr.map(sum))\n\
    end\n</cell>\n<text>\nExercise: Write a function to sum all the numbers in a vector\
    \ that are\ndivisible by 3. This function should work with a vector of any length.\n\
    using Test\n\n@testset begin\n\ncandidate = count_nums;\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([-1, -2, 0]) == 0)\n\t@test(candidate([1, 1, 2, -2,\
    \ 3, 4, 5]) == 6)\n\t@test(candidate([1, 6, 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1,\
    \ 100, 98, -7, 1, -1]) == 4)\n\t@test(candidate([12, 23, 34, -45, -56, 0]) ==\
    \ 5)\n\t@test(candidate([0, 1]) == 1)\n\t@test(candidate([1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdkjkydz5.jl:16\nin expression starting at\
    \ /tmp/tmpdkjkydz5.jl:16\n"
  stdout: ''
  timestamp: 1660004020
- exit_code: 1
  program: "\"\"\"\n    Write a function count_nums which takes a vector of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([])\n    0\n \
    \   >>> count_nums([-1, 11, -11])\n    1\n    >>> count_nums([1, 1, 2])\n    3\n\
    \    \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    count_digits\
    \ = zero(1)\n    for x in arr\n        if (x < 0)\n            count_digits +=\
    \ 1\n            x ^= x\n        end\n        count_digits += trunc(log2(x))\n\
    \    end\n    return count_digits\nend\n</cell>\n<code language=julia-1.5>\n#\
    \ Solution using for loop\nusing Test\n\n@testset begin\n\ncandidate = count_nums;\n\
    \t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([-1, -2, 0]) ==\
    \ 0)\n\t@test(candidate([1, 1, 2, -2, 3, 4, 5]) == 6)\n\t@test(candidate([1, 6,\
    \ 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1, 100, 98, -7, 1, -1]) == 4)\n\t\
    @test(candidate([12, 23, 34, -45, -56, 0]) == 5)\n\t@test(candidate([0, 1]) ==\
    \ 1)\n\t@test(candidate([1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpifb7nn60.jl:24\nin expression starting at\
    \ /tmp/tmpifb7nn60.jl:24\n"
  stdout: ''
  timestamp: 1660004020
- exit_code: -1
  program: "\"\"\"\n    Write a function count_nums which takes a vector of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([])\n    0\n \
    \   >>> count_nums([-1, 11, -11])\n    1\n    >>> count_nums([1, 1, 2])\n    3\n\
    \    \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    # write your\
    \ code in Julia. You may want to use the built-in function length.\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = count_nums;\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([-1, -2, 0]) == 0)\n\t@test(candidate([1, 1, 2, -2,\
    \ 3, 4, 5]) == 6)\n\t@test(candidate([1, 6, 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1,\
    \ 100, 98, -7, 1, -1]) == 4)\n\t@test(candidate([12, 23, 34, -45, -56, 0]) ==\
    \ 5)\n\t@test(candidate([0, 1]) == 1)\n\t@test(candidate([1]) == 1)\nend\n"
  status: Timeout
  stderr: 'ERROR: LoadError: '
  stdout: "test set: Error During Test at /tmp/tmp7_obfg1a.jl:21\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == 0\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\n  Closest candidates are:\n\
    \    convert(::Type{T}, !Matched::Ptr) where T<:Integer at ~/.conda/envs/polyglot/share/julia/base/pointer.jl:23\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:7\n\
    \    ...\n  Stacktrace:\n   [1] count_nums(arr::Vector{Int64})\n     @ Main /tmp/tmp7_obfg1a.jl:15\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp7_obfg1a.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp7_obfg1a.jl:20\ntest set:\
    \ Error During Test at /tmp/tmp7_obfg1a.jl:22\n  Test threw exception\n  Expression:\
    \ candidate([-1, -2, 0]) == 0\n  MethodError: Cannot `convert` an object of type\
    \ Nothing to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::Ptr) where T<:Integer at ~/.conda/envs/polyglot/share/julia/base/pointer.jl:23\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:7\n\
    \    ...\n  Stacktrace:\n   [1] count_nums(arr::Vector{Int64})\n     @ Main /tmp/tmp7_obfg1a.jl:15\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp7_obfg1a.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp7_obfg1a.jl:20\ntest set:\
    \ Error During Test at /tmp/tmp7_obfg1a.jl:23\n  Test thr"
  timestamp: 1660004023
- exit_code: 1
  program: "\"\"\"\n    Write a function count_nums which takes a vector of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([])\n    0\n \
    \   >>> count_nums([-1, 11, -11])\n    1\n    >>> count_nums([1, 1, 2])\n    3\n\
    \    \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    return sum(arr.map(function(x)->(x\
    \ > 0)).collect())\nend\n</code>\nAnd then just use count_nums(vec).\n<|/ a |>\n\
    <| a tags=julia |>\nHere are two approaches to the problem of finding the number\
    \ of elements in a vector that has a sum that is greater than zero: \nApproach\
    \ 1: \nThe first method involves converting the vector to a vector with only positive\
    \ elements, then finding the length and summing the original vector (which only\
    \ contains negative values). \n<code>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = count_nums;\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([-1,\
    \ -2, 0]) == 0)\n\t@test(candidate([1, 1, 2, -2, 3, 4, 5]) == 6)\n\t@test(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1, 100, 98, -7, 1, -1]) == 4)\n\
    \t@test(candidate([12, 23, 34, -45, -56, 0]) == 5)\n\t@test(candidate([0, 1])\
    \ == 1)\n\t@test(candidate([1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid identifier name \"->\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqxbcjafd.jl:14\nin expression starting at\
    \ /tmp/tmpqxbcjafd.jl:14\n"
  stdout: ''
  timestamp: 1660004020
- exit_code: 1
  program: "\"\"\"\n    Write a function count_nums which takes a vector of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([])\n    0\n \
    \   >>> count_nums([-1, 11, -11])\n    1\n    >>> count_nums([1, 1, 2])\n    3\n\
    \    \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    for n in arr\n\
    \        if n >= 0 && n <= 9\n            i = n - 1\n        else \n         \
    \   i = ceil(Int64.log(n))\n        end\n        if i > 9\n            return\
    \ count_nums(arr[i..-1]) + 1\n        else\n            return count_nums(arr[i..-1])\
    \ + 1\n        end\n    end\n    return 0\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = count_nums;\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([-1,\
    \ -2, 0]) == 0)\n\t@test(candidate([1, 1, 2, -2, 3, 4, 5]) == 6)\n\t@test(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1, 100, 98, -7, 1, -1]) == 4)\n\
    \t@test(candidate([12, 23, 34, -45, -56, 0]) == 5)\n\t@test(candidate([0, 1])\
    \ == 1)\n\t@test(candidate([1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid operator \"..-\" near column 37\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpav31iw1j.jl:21\nin expression starting at\
    \ /tmp/tmpav31iw1j.jl:21\n"
  stdout: ''
  timestamp: 1660004020
- exit_code: 1
  program: "\"\"\"\n    Write a function count_nums which takes a vector of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([])\n    0\n \
    \   >>> count_nums([-1, 11, -11])\n    1\n    >>> count_nums([1, 1, 2])\n    3\n\
    \    \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    count = 0\n\
    \    for i in arr\n        if i > 0 && (i >= 0)\n            count += 1\n    \
    \    end\n    end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = count_nums;\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([-1,\
    \ -2, 0]) == 0)\n\t@test(candidate([1, 1, 2, -2, 3, 4, 5]) == 6)\n\t@test(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1, 100, 98, -7, 1, -1]) == 4)\n\
    \t@test(candidate([12, 23, 34, -45, -56, 0]) == 5)\n\t@test(candidate([0, 1])\
    \ == 1)\n\t@test(candidate([1]) == 1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 7 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpwc5s5dwq.jl:24

    '
  stdout: "test set: Test Failed at /tmp/tmpwc5s5dwq.jl:32\n  Expression: candidate([12,\
    \ 23, 34, -45, -56, 0]) == 5\n   Evaluated: 3 == 5\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpwc5s5dwq.jl:32 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpwc5s5dwq.jl:26\nTest Summary: | Pass  Fail\
    \  Total\ntest set      |    7     1      8\n"
  timestamp: 1660004021
- exit_code: 1
  program: "\"\"\"\n    Write a function count_nums which takes a vector of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([])\n    0\n \
    \   >>> count_nums([-1, 11, -11])\n    1\n    >>> count_nums([1, 1, 2])\n    3\n\
    \    \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    lens = map(length,\
    \ arr)\n    sum(a -> if a > 0 then a else -a[1], lens)\nend\n</cell>\n<code language=julia-1.1>\n\
    count_nums([-2, -2, -1, -1, 1, 1, 2, 3, -3, 3, -3, -3, -2, -1, -11])\n</cell>\n\
    <text>\nQuestion 3\nCreate a function is_prime which tests if a number is prime\
    \ or composite.\nYou may want to review the following: Julia is a functional programming\
    \ language, so\nyou may want to use functions instead of loops.\nusing Test\n\n\
    @testset begin\n\ncandidate = count_nums;\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([-1, -2, 0]) == 0)\n\t@test(candidate([1, 1, 2, -2,\
    \ 3, 4, 5]) == 6)\n\t@test(candidate([1, 6, 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1,\
    \ 100, 98, -7, 1, -1]) == 4)\n\t@test(candidate([12, 23, 34, -45, -56, 0]) ==\
    \ 5)\n\t@test(candidate([0, 1]) == 1)\n\t@test(candidate([1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"a\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpodluvn7d.jl:15\nin expression starting at /tmp/tmpodluvn7d.jl:15\n"
  stdout: ''
  timestamp: 1660004020
- exit_code: 1
  program: "\"\"\"\n    Write a function count_nums which takes a vector of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([])\n    0\n \
    \   >>> count_nums([-1, 11, -11])\n    1\n    >>> count_nums([1, 1, 2])\n    3\n\
    \    \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    if arr.is_empty()\n\
    \        return 0;\n    sum_of_digits = sum(arr)\n    if sum_of_digits == 0\n\
    \        return 0;\n    count = 1\n    sum_of_digits > 0 ? arr > 0 ? count +=\
    \ 1 : sum_of_digits += 1 : arr < 0 ? count += count_nums(negate(arr)) : 0\n  \
    \  return count\nend\n</code>\n<|/ a |>\n<| a dscore=2 |>\nYou can try this in\
    \ one line and without mutations :\n<code>\ncount_nums([i for i in arr if i >\
    \ 0] == length(arr)\n</code>\n<|/ a tags=julia,function,arrays,sum,count |>\n\
    <| a dscore=1 tags=julia,function,arrays,sum,count |>\nFor a generic function\
    \ count_nums which can handle vectors of any type (and also handles negative numbers),\
    \ you can use a filter function and a reduce:\n<code>\ncount_nums = reduce(count_nums_generic,\
    \ arr)\nusing Test\n\n@testset begin\n\ncandidate = count_nums;\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([-1, -2, 0]) == 0)\n\t@test(candidate([1, 1, 2, -2,\
    \ 3, 4, 5]) == 6)\n\t@test(candidate([1, 6, 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1,\
    \ 100, 98, -7, 1, -1]) == 4)\n\t@test(candidate([12, 23, 34, -45, -56, 0]) ==\
    \ 5)\n\t@test(candidate([0, 1]) == 1)\n\t@test(candidate([1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvax79rff.jl:23\nin expression starting at\
    \ /tmp/tmpvax79rff.jl:23\n"
  stdout: ''
  timestamp: 1660004020
- exit_code: 1
  program: "\"\"\"\n    Write a function count_nums which takes a vector of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([])\n    0\n \
    \   >>> count_nums([-1, 11, -11])\n    1\n    >>> count_nums([1, 1, 2])\n    3\n\
    \    \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    n = length(arr)\n\
    \    ans = 0\n    for e in arr\n        if e < 0\n            ans += 1\n     \
    \       continue\n        ans += mod(e, 10)\n    end\n    return ans\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = count_nums;\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([-1, -2, 0]) == 0)\n\t@test(candidate([1, 1, 2, -2,\
    \ 3, 4, 5]) == 6)\n\t@test(candidate([1, 6, 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1,\
    \ 100, 98, -7, 1, -1]) == 4)\n\t@test(candidate([12, 23, 34, -45, -56, 0]) ==\
    \ 5)\n\t@test(candidate([0, 1]) == 1)\n\t@test(candidate([1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmph5yvog09.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmph5yvog09.jl:1\n\
    in expression starting at /tmp/tmph5yvog09.jl:1\n"
  stdout: ''
  timestamp: 1660004020
- exit_code: 1
  program: "\"\"\"\n    Write a function count_nums which takes a vector of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([])\n    0\n \
    \   >>> count_nums([-1, 11, -11])\n    1\n    >>> count_nums([1, 1, 2])\n    3\n\
    \    \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    s = 0\n    for\
    \ x in arr\n        s += x % 10\n    end\n    return s\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = count_nums;\n\t@test(candidate(Vector{Int64}([])) == 0)\n\
    \t@test(candidate([-1, -2, 0]) == 0)\n\t@test(candidate([1, 1, 2, -2, 3, 4, 5])\
    \ == 6)\n\t@test(candidate([1, 6, 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1,\
    \ 100, 98, -7, 1, -1]) == 4)\n\t@test(candidate([12, 23, 34, -45, -56, 0]) ==\
    \ 5)\n\t@test(candidate([0, 1]) == 1)\n\t@test(candidate([1]) == 1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmphqwv0ut1.jl:22

    '
  stdout: "test set: Test Failed at /tmp/tmphqwv0ut1.jl:26\n  Expression: candidate([-1,\
    \ -2, 0]) == 0\n   Evaluated: -3 == 0\nStacktrace:\n [1] macro expansion\n   @\
    \ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmphqwv0ut1.jl:26 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmphqwv0ut1.jl:24\ntest set: Test Failed at /tmp/tmphqwv0ut1.jl:27\n\
    \  Expression: candidate([1, 1, 2, -2, 3, 4, 5]) == 6\n   Evaluated: 14 == 6\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphqwv0ut1.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphqwv0ut1.jl:24\ntest set: Test\
    \ Failed at /tmp/tmphqwv0ut1.jl:28\n  Expression: candidate([1, 6, 9, -6, 0, 1,\
    \ 5]) == 5\n   Evaluated: 16 == 5\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphqwv0ut1.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphqwv0ut1.jl:24\ntest set: Test\
    \ Failed at /tmp/tmphqwv0ut1.jl:29\n  Expression: candidate([1, 100, 98, -7, 1,\
    \ -1]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphqwv0ut1.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphqwv0ut1.jl:24\ntest set: Test\
    \ Failed at /tmp/tmphqwv0ut1.jl:30\n  Expression: candidate([12, 23, 34, -45,\
    \ -56, 0]) == 5\n   Evaluated: -2 == 5\nStacktrace:\n [1] macro expansion\n  \
    \ @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macr"
  timestamp: 1660004021
- exit_code: 1
  program: "\"\"\"\n    Write a function count_nums which takes a vector of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([])\n    0\n \
    \   >>> count_nums([-1, 11, -11])\n    1\n    >>> count_nums([1, 1, 2])\n    3\n\
    \    \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    sum = 0\n  \
    \  for i in arr\n        if i > 0 \n            sum += i \n        else\n    \
    \        if sum < 0\n                sum += -i\n            end\n        end\n\
    \    end\n    return sum\nend\n</cell>\n<text>\nA little more concise version\n\
    using Test\n\n@testset begin\n\ncandidate = count_nums;\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([-1, -2, 0]) == 0)\n\t@test(candidate([1, 1, 2, -2,\
    \ 3, 4, 5]) == 6)\n\t@test(candidate([1, 6, 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1,\
    \ 100, 98, -7, 1, -1]) == 4)\n\t@test(candidate([12, 23, 34, -45, -56, 0]) ==\
    \ 5)\n\t@test(candidate([0, 1]) == 1)\n\t@test(candidate([1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0z3h2a3w.jl:26\nin expression starting at\
    \ /tmp/tmp0z3h2a3w.jl:26\n"
  stdout: ''
  timestamp: 1660004020
- exit_code: 1
  program: "\"\"\"\n    Write a function count_nums which takes a vector of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([])\n    0\n \
    \   >>> count_nums([-1, 11, -11])\n    1\n    >>> count_nums([1, 1, 2])\n    3\n\
    \    \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n     n = arr.length\n\
    \     if n == 0 \n       return 0\n     elseif n == 1\n       return arr[0]\n\
    \     else\n       sum = 0\n       for elt in arr\n         if elt > 0 \n    \
    \       sum += elt \n         else\n           return -1\n         end\n     \
    \  return sum\n     end\nend\ncount_nums(arr::Vector{Int64}) = count_nums(arr)'\n\
    count_nums(arr::Vector{Int8}) = count_nums(arr)'\ncount_nums(arr::Vector{Int16})\
    \ = count_nums(arr)'\ncount_nums(arr::Vector{Int32}) = count_nums(arr)'\ncount_nums(arr::Vector{Int64})\
    \ = count_nums(arr)'\ncount_nums(arr::Vector{Int}) = count_nums(arr)'\ncount_nums(arr::Vector{Bool})\
    \ = count_nums(arr)'\ncount_nums(arr::Vector{Complex}) = count_nums(arr)'\ncount_nums(arr::Vector{Float64})\
    \ = count_nums(arr)'\ncount_nums(arr::Vector{Float32}) = count_nums(arr)'\ncount_nums(arr::Vector{ComplexF64})\
    \ = count_nums(arr)'\ncount_nums(arr::Vector{ComplexF32}) = count_nums(arr)'\n\
    count_nums(arr::Vector{Float64Vector}) = count_nums(arr)'\ncount_nums(arr::Vector{ComplexF64Vector})\
    \ = count_nums(arr)'\ncount_nums(arr::Vector{ComplexF32Vector}) = count_nums(arr)'\n\
    count_nums(arr::Vector{IntVector}) = count_nums(arr)'\ncount_nums(arr::Vector{BoolVector})\
    \ = count_nums(arr)'\ncount_nums(arr::Vector{Int8Vector}) = count_nums(arr)'\n\
    count_nums(arr::Vector{Int16Vector}) = count_nums(arr)'\ncount_nums(arr::Vector{Int32Vector})\
    \ = count_nums(arr)'\ncount_nums(arr::Vector{IntVector})::Int64 = count_nums(arr)'\n\
    count_nums(arr::Vector{BoolVector})::Int64 = count_nums(arr)'\ncount_nums(arr::Vector{ComplexF64Vector})::Int64\
    \ = count_nums(arr)'\ncount_nums(arr::Vector{ComplexF32Vector})::Int64 = count_nums(arr)'\n\
    count_nums(arr::Vector{Float64Vector\nusing Test\n\n@testset begin\n\ncandidate\
    \ = count_nums;\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([-1,\
    \ -2, 0]) == 0)\n\t@test(candidate([1, 1, 2, -2, 3, 4, 5]) == 6)\n\t@test(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1, 100, 98, -7, 1, -1]) == 4)\n\
    \t@test(candidate([12, 23, 34, -45, -56, 0]) == 5)\n\t@test(candidate([0, 1])\
    \ == 1)\n\t@test(candidate([1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or } in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjuhgaegc.jl:55\nin expression starting at\
    \ /tmp/tmpjuhgaegc.jl:55\n"
  stdout: ''
  timestamp: 1660004020
- exit_code: 1
  program: "\"\"\"\n    Write a function count_nums which takes a vector of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([])\n    0\n \
    \   >>> count_nums([-1, 11, -11])\n    1\n    >>> count_nums([1, 1, 2])\n    3\n\
    \    \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    if arr.empty()\n\
    \        return 0\n    \n    # we start by counting the number of positive integer\
    \ digits\n    pos_digits = sum(a <= 0 for a in arr)\n    \n    # we then add on\
    \ any remaining negative integer digits (starting with 0)\n    neg_digits = sum(a\
    \ <= 0 for a in arr where a > 0)\n    \n    # finally we add the number of remaining\
    \ positive integer digits\n    tot_digits = pos_digits + neg_digits\n    \n  \
    \  # return our final answer\n    return tot_digits\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = count_nums;\n\t@test(candidate(Vector{Int64}([])) == 0)\n\
    \t@test(candidate([-1, -2, 0]) == 0)\n\t@test(candidate([1, 1, 2, -2, 3, 4, 5])\
    \ == 6)\n\t@test(candidate([1, 6, 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1,\
    \ 100, 98, -7, 1, -1]) == 4)\n\t@test(candidate([12, 23, 34, -45, -56, 0]) ==\
    \ 5)\n\t@test(candidate([0, 1]) == 1)\n\t@test(candidate([1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpjkej74l_.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjkej74l_.jl:1\n\
    in expression starting at /tmp/tmpjkej74l_.jl:1\n"
  stdout: ''
  timestamp: 1660004020
- exit_code: 1
  program: "\"\"\"\n    Write a function count_nums which takes a vector of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([])\n    0\n \
    \   >>> count_nums([-1, 11, -11])\n    1\n    >>> count_nums([1, 1, 2])\n    3\n\
    \    \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    # Fill this\
    \ in.\n    return 0\nend\nusing Test\n\n@testset begin\n\ncandidate = count_nums;\n\
    \t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([-1, -2, 0]) ==\
    \ 0)\n\t@test(candidate([1, 1, 2, -2, 3, 4, 5]) == 6)\n\t@test(candidate([1, 6,\
    \ 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1, 100, 98, -7, 1, -1]) == 4)\n\t\
    @test(candidate([12, 23, 34, -45, -56, 0]) == 5)\n\t@test(candidate([0, 1]) ==\
    \ 1)\n\t@test(candidate([1]) == 1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpsiccaio1.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmpsiccaio1.jl:24\n  Expression: candidate([1,\
    \ 1, 2, -2, 3, 4, 5]) == 6\n   Evaluated: 0 == 6\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpsiccaio1.jl:24 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpsiccaio1.jl:21\ntest set: Test Failed at /tmp/tmpsiccaio1.jl:25\n\
    \  Expression: candidate([1, 6, 9, -6, 0, 1, 5]) == 5\n   Evaluated: 0 == 5\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpsiccaio1.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpsiccaio1.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpsiccaio1.jl:26\n  Expression: candidate([1, 100, 98, -7, 1,\
    \ -1]) == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpsiccaio1.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpsiccaio1.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpsiccaio1.jl:27\n  Expression: candidate([12, 23, 34, -45,\
    \ -56, 0]) == 5\n   Evaluated: 0 == 5\nStacktrace:\n [1] macro expansion\n   @\
    \ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpsiccaio1.jl:27 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpsiccaio1.jl:21\ntest set: Test Failed at /tmp/tmpsiccaio1.jl:28\n\
    \  Expression: candidate([0, 1]) == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansi"
  timestamp: 1660004021
- exit_code: 1
  program: "\"\"\"\n    Write a function count_nums which takes a vector of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([])\n    0\n \
    \   >>> count_nums([-1, 11, -11])\n    1\n    >>> count_nums([1, 1, 2])\n    3\n\
    \    \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    first = -Int64(0)\n\
    \    last = -Int64(0)\n    for i in arr\n        if i < 0\n            first =\
    \ i\n        elseif last > 0\n            last -= last\n            last = i\n\
    \        else\n            last += i\n        end\n    end\n    return last +\
    \ 1\nend\n</cell>\n<text>\nExercise 4: count_nums\nWrite a function count_nums\
    \ which takes a vector of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \ >>> count_nums([])\n    0\n    >>> count_nums([-1, 11, -11])\n    1\n    >>>\
    \ count_nums([1, 1, 2])\n    3\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = count_nums;\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([-1,\
    \ -2, 0]) == 0)\n\t@test(candidate([1, 1, 2, -2, 3, 4, 5]) == 6)\n\t@test(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1, 100, 98, -7, 1, -1]) == 4)\n\
    \t@test(candidate([12, 23, 34, -45, -56, 0]) == 5)\n\t@test(candidate([0, 1])\
    \ == 1)\n\t@test(candidate([1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp743fkupu.jl:28\nin expression starting at\
    \ /tmp/tmp743fkupu.jl:28\n"
  stdout: ''
  timestamp: 1660004020
- exit_code: 1
  program: "\"\"\"\n    Write a function count_nums which takes a vector of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([])\n    0\n \
    \   >>> count_nums([-1, 11, -11])\n    1\n    >>> count_nums([1, 1, 2])\n    3\n\
    \    \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n  sum = 0\n  for\
    \ n in arr\n    if n <0\n      sign <- sign(n)\n      n = sign * n + Int64(10^-10)\n\
    \    end\n    sum += n\n  end\n  return sum\nend\n</code>\n(The above code will\
    \ give an incorrect answer for a negative number, but this can be fixed with a\
    \ little bit of extra code)\n<|/ a tags=julia,function |>\n<| c |>\nThank you\
    \ for the help and for showing me the code. This will certainly help me in the\
    \ future. I didn't know how to make function like that.\n<|/ c |>\n<| a tags=julia,function\
    \ dscore=1 |>\nYou can use reduce and sign:\n<code>\nusing Test\n\n@testset begin\n\
    \ncandidate = count_nums;\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([-1,\
    \ -2, 0]) == 0)\n\t@test(candidate([1, 1, 2, -2, 3, 4, 5]) == 6)\n\t@test(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1, 100, 98, -7, 1, -1]) == 4)\n\
    \t@test(candidate([12, 23, 34, -45, -56, 0]) == 5)\n\t@test(candidate([0, 1])\
    \ == 1)\n\t@test(candidate([1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgjyn4a7v.jl:24\nin expression starting at\
    \ /tmp/tmpgjyn4a7v.jl:24\n"
  stdout: ''
  timestamp: 1660004020
- exit_code: 1
  program: "\"\"\"\n    Write a function count_nums which takes a vector of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([])\n    0\n \
    \   >>> count_nums([-1, 11, -11])\n    1\n    >>> count_nums([1, 1, 2])\n    3\n\
    \    \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    count = 0\n\
    \    for i in arr\n        if i > 0\n            count = count + 1\n        end\n\
    \    end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = count_nums;\n\
    \t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([-1, -2, 0]) ==\
    \ 0)\n\t@test(candidate([1, 1, 2, -2, 3, 4, 5]) == 6)\n\t@test(candidate([1, 6,\
    \ 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1, 100, 98, -7, 1, -1]) == 4)\n\t\
    @test(candidate([12, 23, 34, -45, -56, 0]) == 5)\n\t@test(candidate([0, 1]) ==\
    \ 1)\n\t@test(candidate([1]) == 1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 7 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp5gjmj01o.jl:24

    '
  stdout: "test set: Test Failed at /tmp/tmp5gjmj01o.jl:32\n  Expression: candidate([12,\
    \ 23, 34, -45, -56, 0]) == 5\n   Evaluated: 3 == 5\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp5gjmj01o.jl:32 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp5gjmj01o.jl:26\nTest Summary: | Pass  Fail\
    \  Total\ntest set      |    7     1      8\n"
  timestamp: 1660004021
- exit_code: 1
  program: "\"\"\"\n    Write a function count_nums which takes a vector of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([])\n    0\n \
    \   >>> count_nums([-1, 11, -11])\n    1\n    >>> count_nums([1, 1, 2])\n    3\n\
    \    \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    sum = 0\n  \
    \  for i in arr\n        if i < 0\n            sum += sign(i) * -1\n        else\n\
    \            sum += i\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    count_nums([-10, -5, 9, -8, 5])\n</cell>\n<text>\n\u23F8 Write a function count_chars\
    \ which takes a vector of strings and returns\n    the number of elements which\
    \ has a length of greater than 1.\n    >>> count_chars([])\n    0\n    >>> count_chars([\"\
    h\", \"he\", \"hel\", \"hell\"])\n    3\n    >>> count_chars([\"hey\", \"hi\"\
    ])\n    2\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = count_nums;\n\
    \t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([-1, -2, 0]) ==\
    \ 0)\n\t@test(candidate([1, 1, 2, -2, 3, 4, 5]) == 6)\n\t@test(candidate([1, 6,\
    \ 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1, 100, 98, -7, 1, -1]) == 4)\n\t\
    @test(candidate([12, 23, 34, -45, -56, 0]) == 5)\n\t@test(candidate([0, 1]) ==\
    \ 1)\n\t@test(candidate([1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpb_165wwg.jl:23\nin expression starting at\
    \ /tmp/tmpb_165wwg.jl:23\n"
  stdout: ''
  timestamp: 1660004020
- exit_code: 1
  program: "\"\"\"\n    Write a function count_nums which takes a vector of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([])\n    0\n \
    \   >>> count_nums([-1, 11, -11])\n    1\n    >>> count_nums([1, 1, 2])\n    3\n\
    \    \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    if isempty(arr)\n\
    \        return 0\n    if sum(x -> x < 0, arr) == 0\n        return length(arr)\n\
    \    # else\n    digit_sum = map(x -> x % 10, arr)\n    sum((x -> digit_sum[x]\
    \ > 0, arr))\nend\nusing Test\n\n@testset begin\n\ncandidate = count_nums;\n\t\
    @test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([-1, -2, 0]) == 0)\n\
    \t@test(candidate([1, 1, 2, -2, 3, 4, 5]) == 6)\n\t@test(candidate([1, 6, 9, -6,\
    \ 0, 1, 5]) == 5)\n\t@test(candidate([1, 100, 98, -7, 1, -1]) == 4)\n\t@test(candidate([12,\
    \ 23, 34, -45, -56, 0]) == 5)\n\t@test(candidate([0, 1]) == 1)\n\t@test(candidate([1])\
    \ == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_4blgjb7.jl:1\nin expression starting at /tmp/tmp_4blgjb7.jl:1\n"
  stdout: ''
  timestamp: 1660004020
- exit_code: 1
  program: "\"\"\"\n    Write a function count_nums which takes a vector of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([])\n    0\n \
    \   >>> count_nums([-1, 11, -11])\n    1\n    >>> count_nums([1, 1, 2])\n    3\n\
    \    \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    count = 0\n\
    \    for i in arr\n        if i > 0 && i > 1\n            count += count_nums(i\
    \ - 1) + 1\n        else\n            count += count_nums(i - 1)\n        end\n\
    \    end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = count_nums;\n\
    \t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([-1, -2, 0]) ==\
    \ 0)\n\t@test(candidate([1, 1, 2, -2, 3, 4, 5]) == 6)\n\t@test(candidate([1, 6,\
    \ 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1, 100, 98, -7, 1, -1]) == 4)\n\t\
    @test(candidate([12, 23, 34, -45, -56, 0]) == 5)\n\t@test(candidate([0, 1]) ==\
    \ 1)\n\t@test(candidate([1]) == 1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmp_n85b0jr.jl:26

    '
  stdout: "test set: Error During Test at /tmp/tmp_n85b0jr.jl:30\n  Test threw exception\n\
    \  Expression: candidate([-1, -2, 0]) == 0\n  MethodError: no method matching\
    \ count_nums(::Int64)\n  Closest candidates are:\n    count_nums(!Matched::Vector{Int64})\
    \ at /tmp/tmp_n85b0jr.jl:13\n  Stacktrace:\n   [1] count_nums(arr::Vector{Int64})\n\
    \     @ Main /tmp/tmp_n85b0jr.jl:0\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp_n85b0jr.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp_n85b0jr.jl:28\ntest set:\
    \ Error During Test at /tmp/tmp_n85b0jr.jl:31\n  Test threw exception\n  Expression:\
    \ candidate([1, 1, 2, -2, 3, 4, 5]) == 6\n  MethodError: no method matching count_nums(::Int64)\n\
    \  Closest candidates are:\n    count_nums(!Matched::Vector{Int64}) at /tmp/tmp_n85b0jr.jl:13\n\
    \  Stacktrace:\n   [1] count_nums(arr::Vector{Int64})\n     @ Main /tmp/tmp_n85b0jr.jl:0\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp_n85b0jr.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp_n85b0jr.jl:28\ntest set:\
    \ Error During Test at /tmp/tmp_n85b0jr.jl:32\n  Test threw exception\n  Expression:\
    \ candidate([1, 6, 9, -6, 0, 1, 5]) == 5\n  MethodError: no method matching count_nums(::Int64)\n\
    \  Closest candidates are:\n    count_nums(!Matched::Vector{Int64}) at /tmp/tmp_n85b0jr.jl:13\n\
    \  Stacktrace:\n   [1] count_nums(arr::Vector{Int64})\n     @ Main /tmp/tmp_n85b0jr.jl:0\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp_n85b0jr.jl:32 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n    "
  timestamp: 1660004023
- exit_code: 1
  program: "\"\"\"\n    Write a function count_nums which takes a vector of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([])\n    0\n \
    \   >>> count_nums([-1, 11, -11])\n    1\n    >>> count_nums([1, 1, 2])\n    3\n\
    \    \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    count_nums(arr,0,0)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_nums;\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([-1, -2, 0]) == 0)\n\t@test(candidate([1, 1, 2, -2,\
    \ 3, 4, 5]) == 6)\n\t@test(candidate([1, 6, 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1,\
    \ 100, 98, -7, 1, -1]) == 4)\n\t@test(candidate([12, 23, 34, -45, -56, 0]) ==\
    \ 5)\n\t@test(candidate([0, 1]) == 1)\n\t@test(candidate([1]) == 1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmp4tpuw2m9.jl:18

    '
  stdout: "test set: Error During Test at /tmp/tmp4tpuw2m9.jl:21\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == 0\n  MethodError: no method matching\
    \ count_nums(::Vector{Int64}, ::Int64, ::Int64)\n  Closest candidates are:\n \
    \   count_nums(::Vector{Int64}) at /tmp/tmp4tpuw2m9.jl:13\n  Stacktrace:\n   [1]\
    \ count_nums(arr::Vector{Int64})\n     @ Main /tmp/tmp4tpuw2m9.jl:14\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp4tpuw2m9.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp4tpuw2m9.jl:20\ntest set:\
    \ Error During Test at /tmp/tmp4tpuw2m9.jl:22\n  Test threw exception\n  Expression:\
    \ candidate([-1, -2, 0]) == 0\n  MethodError: no method matching count_nums(::Vector{Int64},\
    \ ::Int64, ::Int64)\n  Closest candidates are:\n    count_nums(::Vector{Int64})\
    \ at /tmp/tmp4tpuw2m9.jl:13\n  Stacktrace:\n   [1] count_nums(arr::Vector{Int64})\n\
    \     @ Main /tmp/tmp4tpuw2m9.jl:14\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp4tpuw2m9.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp4tpuw2m9.jl:20\ntest set:\
    \ Error During Test at /tmp/tmp4tpuw2m9.jl:23\n  Test threw exception\n  Expression:\
    \ candidate([1, 1, 2, -2, 3, 4, 5]) == 6\n  MethodError: no method matching count_nums(::Vector{Int64},\
    \ ::Int64, ::Int64)\n  Closest candidates are:\n    count_nums(::Vector{Int64})\
    \ at /tmp/tmp4tpuw2m9.jl:13\n  Stacktrace:\n   [1] count_nums(arr::Vector{Int64})\n\
    \     @ Main /tmp/tmp4tpuw2m9.jl:14\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp4tpuw2m9.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/sr"
  timestamp: 1660004023
- exit_code: 1
  program: "\"\"\"\n    Write a function count_nums which takes a vector of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([])\n    0\n \
    \   >>> count_nums([-1, 11, -11])\n    1\n    >>> count_nums([1, 1, 2])\n    3\n\
    \    \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    count = 0\n\
    \    for x in arr\n        if x > 0 \n            count = count + 1\n        end\n\
    \    end\n    return count\nend\n</cell>\n<code language=julia-1.6>\ncount_nums(rand(1:1000))\n\
    </cell>\n<code language=julia-1.6>\n# count_nums(rand(1:100))\n</cell>\n<code\
    \ language=julia-1.6>\ncount_nums([-1, 11, -11])\n</cell>\n<text>\nWrite a function\
    \ to test if an element is an integer. \nTest elements for inclusion in the following\
    \ sets: $[-1, \u22122, \u22123, \u22124, \u22125, \u22126, \u22127, \u22128, \u2212\
    9, -10, -100, 101, 102, 103, 104, 105, 106]$\nTest elements for inclusion in the\
    \ following sets: $[1, \u22121, \u22122, \u22123, \u22124, \u22125, \u22126, \u2212\
    7, \u22128, \u22129, -10, -100, 101, 102, 103, 104, 105, 106]$\nTest elements\
    \ for inclusion in the following sets: $[-\u221E, \u221E, 10, 100, 1000, 10000,\
    \ 100000, 1000000, 1000000000, 1000000000000]$\nusing Test\n\n@testset begin\n\
    \ncandidate = count_nums;\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([-1,\
    \ -2, 0]) == 0)\n\t@test(candidate([1, 1, 2, -2, 3, 4, 5]) == 6)\n\t@test(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1, 100, 98, -7, 1, -1]) == 4)\n\
    \t@test(candidate([12, 23, 34, -45, -56, 0]) == 5)\n\t@test(candidate([0, 1])\
    \ == 1)\n\t@test(candidate([1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4f45e0dd.jl:22\nin expression starting at\
    \ /tmp/tmp4f45e0dd.jl:22\n"
  stdout: ''
  timestamp: 1660004022
- exit_code: 1
  program: "\"\"\"\n    Write a function count_nums which takes a vector of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([])\n    0\n \
    \   >>> count_nums([-1, 11, -11])\n    1\n    >>> count_nums([1, 1, 2])\n    3\n\
    \    \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    sum = 0\n  \
    \  for i in arr\n        sum += i\n    end\n    return sum\nend\n</code>\n<|/\
    \ a dscore=1 tags=vectorization,julia |>\n<| a tags=vectorization,julia |>\nHere\
    \ is a solution that uses bitwise operations:\n<code>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = count_nums;\n\t@test(candidate(Vector{Int64}([])) == 0)\n\
    \t@test(candidate([-1, -2, 0]) == 0)\n\t@test(candidate([1, 1, 2, -2, 3, 4, 5])\
    \ == 6)\n\t@test(candidate([1, 6, 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1,\
    \ 100, 98, -7, 1, -1]) == 4)\n\t@test(candidate([12, 23, 34, -45, -56, 0]) ==\
    \ 5)\n\t@test(candidate([0, 1]) == 1)\n\t@test(candidate([1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphkd4khue.jl:20\nin expression starting at\
    \ /tmp/tmphkd4khue.jl:20\n"
  stdout: ''
  timestamp: 1660004022
- exit_code: 1
  program: "\"\"\"\n    Write a function count_nums which takes a vector of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([])\n    0\n \
    \   >>> count_nums([-1, 11, -11])\n    1\n    >>> count_nums([1, 1, 2])\n    3\n\
    \    \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    cnt = 0\n  \
    \  for i in arr\n        cnt += count(i .> 0)\n    end\n    return cnt\nend\n\
    </code>\n<|/ a dscore=2 |>\n<| c |>\nThanks for the input. My question was more\
    \ along the lines of how I write it in Julia. How would you write this in Julia\
    \ without using any packages.\n<|/ c |>\n<| c |>\n, added a Julia version of this\
    \ solution as well. Hope that helps.\n<|/ c |>\n<| c |>\nIt helps a lot. I didn't\
    \ know Julia had a built in function for that. Thanks!\n<|/ c |>\n<| c |>\n, I've\
    \ also added an answer using only standard Julia packages. Does that help?\n<|/\
    \ c |>\n<| a dscore=0 |>\nThis works as well.\n<code>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = count_nums;\n\t@test(candidate(Vector{Int64}([])) == 0)\n\
    \t@test(candidate([-1, -2, 0]) == 0)\n\t@test(candidate([1, 1, 2, -2, 3, 4, 5])\
    \ == 6)\n\t@test(candidate([1, 6, 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1,\
    \ 100, 98, -7, 1, -1]) == 4)\n\t@test(candidate([12, 23, 34, -45, -56, 0]) ==\
    \ 5)\n\t@test(candidate([0, 1]) == 1)\n\t@test(candidate([1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpatan6y4l.jl:20\nin expression starting at\
    \ /tmp/tmpatan6y4l.jl:20\n"
  stdout: ''
  timestamp: 1660004022
- exit_code: 1
  program: "\"\"\"\n    Write a function count_nums which takes a vector of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([])\n    0\n \
    \   >>> count_nums([-1, 11, -11])\n    1\n    >>> count_nums([1, 1, 2])\n    3\n\
    \    \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    firstDigit =\
    \ arr[0]\n    if firstDigit < 0 \n        firstDigit *= -1\n    endIndex = arr.size\
    \ - 1\n    for i in 1:endIndex\n        if arr[i] > 0 \n            break\n  \
    \  endIndex -= 1\n    return endIndex - i + 1\nend\n</cell>\n<code language=julia-1.0>\n\
    count_nums([-2, -1, 123, 123, -4321])\n</cell>\n<code language=julia-1.0>\ncount_nums([-2,\
    \ -1, 123, 123, -4321]) == count_nums([-4, -1, 123, 123, -4321])\n</cell>\n<text>\n\
    Exercise: Write a function count_nums which takes a vector of integers and returns\n\
    \    the number of elements which has a sum of digits < 0.\n    e.g. -123 has\
    \ signed digits -1, 2, and 3.\n    >>> count_nums([])\n    0\n    >>> count_nums([-1,\
    \ 11, -11])\n    0\n    >>> count_nums([1, 1, 2])\n    2\n    \"\"\"\nusing Test\n\
    \n@testset begin\n\ncandidate = count_nums;\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([-1, -2, 0]) == 0)\n\t@test(candidate([1, 1, 2, -2,\
    \ 3, 4, 5]) == 6)\n\t@test(candidate([1, 6, 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1,\
    \ 100, 98, -7, 1, -1]) == 4)\n\t@test(candidate([12, 23, 34, -45, -56, 0]) ==\
    \ 5)\n\t@test(candidate([0, 1]) == 1)\n\t@test(candidate([1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpaknrgkow.jl:24\nin expression starting at\
    \ /tmp/tmpaknrgkow.jl:24\n"
  stdout: ''
  timestamp: 1660004022
- exit_code: 1
  program: "\"\"\"\n    Write a function count_nums which takes a vector of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([])\n    0\n \
    \   >>> count_nums([-1, 11, -11])\n    1\n    >>> count_nums([1, 1, 2])\n    3\n\
    \    \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    if !isempty(arr)\n\
    \       return sum(arr .> 0) + 1\n    else\n       return 0\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = count_nums;\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([-1, -2, 0]) == 0)\n\t@test(candidate([1, 1, 2, -2,\
    \ 3, 4, 5]) == 6)\n\t@test(candidate([1, 6, 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1,\
    \ 100, 98, -7, 1, -1]) == 4)\n\t@test(candidate([12, 23, 34, -45, -56, 0]) ==\
    \ 5)\n\t@test(candidate([0, 1]) == 1)\n\t@test(candidate([1]) == 1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 7 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpf3nx3b1a.jl:22

    '
  stdout: "test set: Test Failed at /tmp/tmpf3nx3b1a.jl:26\n  Expression: candidate([-1,\
    \ -2, 0]) == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1] macro expansion\n   @\
    \ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpf3nx3b1a.jl:26 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpf3nx3b1a.jl:24\ntest set: Test Failed at /tmp/tmpf3nx3b1a.jl:27\n\
    \  Expression: candidate([1, 1, 2, -2, 3, 4, 5]) == 6\n   Evaluated: 7 == 6\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpf3nx3b1a.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpf3nx3b1a.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpf3nx3b1a.jl:28\n  Expression: candidate([1, 6, 9, -6, 0, 1,\
    \ 5]) == 5\n   Evaluated: 6 == 5\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpf3nx3b1a.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpf3nx3b1a.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpf3nx3b1a.jl:29\n  Expression: candidate([1, 100, 98, -7, 1,\
    \ -1]) == 4\n   Evaluated: 5 == 4\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpf3nx3b1a.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpf3nx3b1a.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpf3nx3b1a.jl:30\n  Expression: candidate([12, 23, 34, -45,\
    \ -56, 0]) == 5\n   Evaluated: 4 == 5\nStacktrace:\n [1] macro expansion\n   @\
    \ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro ex"
  timestamp: 1660004023
- exit_code: 1
  program: "\"\"\"\n    Write a function count_nums which takes a vector of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([])\n    0\n \
    \   >>> count_nums([-1, 11, -11])\n    1\n    >>> count_nums([1, 1, 2])\n    3\n\
    \    \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    if length(arr)\
    \ == 0 \n        return 0\n    if arr[0] < 0 \n        arr[0] *= -1\n    end\n\
    \    sum = 0\n    for i \u2208 arr \n        sum += i\n        if sum > 9 \n \
    \           return 1\n        end\n    end\n    return 0\nend\n</cell>\n<text>\n\
    Now let's try it with the test case:\nusing Test\n\n@testset begin\n\ncandidate\
    \ = count_nums;\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([-1,\
    \ -2, 0]) == 0)\n\t@test(candidate([1, 1, 2, -2, 3, 4, 5]) == 6)\n\t@test(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1, 100, 98, -7, 1, -1]) == 4)\n\
    \t@test(candidate([12, 23, 34, -45, -56, 0]) == 5)\n\t@test(candidate([0, 1])\
    \ == 1)\n\t@test(candidate([1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpinixkfp8.jl:28\nin expression starting at\
    \ /tmp/tmpinixkfp8.jl:28\n"
  stdout: ''
  timestamp: 1660004022
- exit_code: 1
  program: "\"\"\"\n    Write a function count_nums which takes a vector of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([])\n    0\n \
    \   >>> count_nums([-1, 11, -11])\n    1\n    >>> count_nums([1, 1, 2])\n    3\n\
    \    \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    count = 0\n\
    \    for v in arr\n        if v >= 0\n            count += 1\n        elseif v\
    \ < 0\n            count = count + abs(v)\n        end\n    end\n    return count\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_nums;\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([-1, -2, 0]) == 0)\n\t@test(candidate([1, 1, 2, -2,\
    \ 3, 4, 5]) == 6)\n\t@test(candidate([1, 6, 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1,\
    \ 100, 98, -7, 1, -1]) == 4)\n\t@test(candidate([12, 23, 34, -45, -56, 0]) ==\
    \ 5)\n\t@test(candidate([0, 1]) == 1)\n\t@test(candidate([1]) == 1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpyzxxz_t8.jl:26

    '
  stdout: "test set: Test Failed at /tmp/tmpyzxxz_t8.jl:30\n  Expression: candidate([-1,\
    \ -2, 0]) == 0\n   Evaluated: 4 == 0\nStacktrace:\n [1] macro expansion\n   @\
    \ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpyzxxz_t8.jl:30 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpyzxxz_t8.jl:28\ntest set: Test Failed at /tmp/tmpyzxxz_t8.jl:31\n\
    \  Expression: candidate([1, 1, 2, -2, 3, 4, 5]) == 6\n   Evaluated: 8 == 6\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyzxxz_t8.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyzxxz_t8.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpyzxxz_t8.jl:32\n  Expression: candidate([1, 6, 9, -6, 0, 1,\
    \ 5]) == 5\n   Evaluated: 12 == 5\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyzxxz_t8.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyzxxz_t8.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpyzxxz_t8.jl:33\n  Expression: candidate([1, 100, 98, -7, 1,\
    \ -1]) == 4\n   Evaluated: 12 == 4\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyzxxz_t8.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyzxxz_t8.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpyzxxz_t8.jl:34\n  Expression: candidate([12, 23, 34, -45,\
    \ -56, 0]) == 5\n   Evaluated: 105 == 5\nStacktrace:\n [1] macro expansion\n \
    \  @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macr"
  timestamp: 1660004023
- exit_code: 1
  program: "\"\"\"\n    Write a function count_nums which takes a vector of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([])\n    0\n \
    \   >>> count_nums([-1, 11, -11])\n    1\n    >>> count_nums([1, 1, 2])\n    3\n\
    \    \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    count = 0\n\
    \    sum_of_digits = 0\n    for i in arr\n        if i >= 0\n            sum_of_digits\
    \ = sum_of_digits + Int(i)\n        end\n    end\n    if sum_of_digits == 0\n\
    \        return 0\n    else\n        return count\n    end\nend\n</cell>\n<code\
    \ language=julia-1.0>\ncount_nums([-1, 11, -11])\n</cell>\n<text>\nTasks\nusing\
    \ Test\n\n@testset begin\n\ncandidate = count_nums;\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([-1, -2, 0]) == 0)\n\t@test(candidate([1, 1, 2, -2,\
    \ 3, 4, 5]) == 6)\n\t@test(candidate([1, 6, 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1,\
    \ 100, 98, -7, 1, -1]) == 4)\n\t@test(candidate([12, 23, 34, -45, -56, 0]) ==\
    \ 5)\n\t@test(candidate([0, 1]) == 1)\n\t@test(candidate([1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp77h8z2am.jl:27\nin expression starting at\
    \ /tmp/tmp77h8z2am.jl:27\n"
  stdout: ''
  timestamp: 1660004022
- exit_code: 1
  program: "\"\"\"\n    Write a function count_nums which takes a vector of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([])\n    0\n \
    \   >>> count_nums([-1, 11, -11])\n    1\n    >>> count_nums([1, 1, 2])\n    3\n\
    \    \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    \"\"\"Count\
    \ the number of elements with a sum of digits.\"\"\"\n\"\"\"Answer:\"\"\"\n  \
    \  for n in arr\n        if n > 0 && digits(n) > 0 \n            return 1 + count_nums(n::Vector{Int64})\
    \ # recursive call\n    end\n    return 0\nend\n</cell>\n<text>\nQ4. Write a function\
    \ sum_of_digits(n) that returns the sum of digits of n. For example, sum_of_digits(12)\
    \ -> 4.\nusing Test\n\n@testset begin\n\ncandidate = count_nums;\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([-1, -2, 0]) == 0)\n\t@test(candidate([1, 1, 2, -2,\
    \ 3, 4, 5]) == 6)\n\t@test(candidate([1, 6, 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1,\
    \ 100, 98, -7, 1, -1]) == 4)\n\t@test(candidate([12, 23, 34, -45, -56, 0]) ==\
    \ 5)\n\t@test(candidate([0, 1]) == 1)\n\t@test(candidate([1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpce2d70kp.jl:22\nin expression starting at\
    \ /tmp/tmpce2d70kp.jl:22\n"
  stdout: ''
  timestamp: 1660004022
- exit_code: 1
  program: "\"\"\"\n    Write a function count_nums which takes a vector of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([])\n    0\n \
    \   >>> count_nums([-1, 11, -11])\n    1\n    >>> count_nums([1, 1, 2])\n    3\n\
    \    \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    sum = 0\n  \
    \  for n in arr\n        if n < 0\n            sum += n*sign(n)\n        else\n\
    \            sum += n\n    end\n    \n    return sum\nend\n</cell>\n<code language=julia-1.0>\n\
    count_nums([-2, 1, 2, 0])\n</cell>\n<code language=julia-1.0>\ncount_nums([-1,\
    \ 11, -11])\n</cell>\n<code language=julia-1.0>\ncount_nums([1, 1, 2])\n</cell>\n\
    <code language=julia-1.0>\ncount_nums([1, 2, 3, -4, 1])\n</cell>\n<text>\nProblem\
    \ 2\nusing Test\n\n@testset begin\n\ncandidate = count_nums;\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([-1, -2, 0]) == 0)\n\t@test(candidate([1, 1, 2, -2,\
    \ 3, 4, 5]) == 6)\n\t@test(candidate([1, 6, 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1,\
    \ 100, 98, -7, 1, -1]) == 4)\n\t@test(candidate([12, 23, 34, -45, -56, 0]) ==\
    \ 5)\n\t@test(candidate([0, 1]) == 1)\n\t@test(candidate([1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfz5_3hir.jl:24\nin expression starting at\
    \ /tmp/tmpfz5_3hir.jl:24\n"
  stdout: ''
  timestamp: 1660004022
- exit_code: 1
  program: "\"\"\"\n    Write a function count_nums which takes a vector of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([])\n    0\n \
    \   >>> count_nums([-1, 11, -11])\n    1\n    >>> count_nums([1, 1, 2])\n    3\n\
    \    \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    count = 0\n\
    \    for num in arr \n        if num < 0\n            digit = num ./ Int64(-1)\n\
    \            if digit > Int64(10)\n                digit = Int64(10)\n       \
    \     elseif digit < -Int64(10)\n                digit = -Int64(10)\n        \
    \    end\n            count += digit * Int64(10) \n        else\n            count\
    \ += 1\n        end\n    end\n    return count\nend\n</cell>\n<code language=julia-1.4>\n\
    count_nums(arr)\n</cell>\n<code language=julia-1.4>\ncount_nums(arr)\n</cell>\n\
    <code language=julia-1.4>\nusing Test\n\n@testset begin\n\ncandidate = count_nums;\n\
    \t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([-1, -2, 0]) ==\
    \ 0)\n\t@test(candidate([1, 1, 2, -2, 3, 4, 5]) == 6)\n\t@test(candidate([1, 6,\
    \ 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1, 100, 98, -7, 1, -1]) == 4)\n\t\
    @test(candidate([12, 23, 34, -45, -56, 0]) == 5)\n\t@test(candidate([0, 1]) ==\
    \ 1)\n\t@test(candidate([1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsv40ug3k.jl:30\nin expression starting at\
    \ /tmp/tmpsv40ug3k.jl:30\n"
  stdout: ''
  timestamp: 1660004022
- exit_code: 1
  program: "\"\"\"\n    Write a function count_nums which takes a vector of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([])\n    0\n \
    \   >>> count_nums([-1, 11, -11])\n    1\n    >>> count_nums([1, 1, 2])\n    3\n\
    \    \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    # Your code\
    \ here\n    count = 0\n    for ele in arr\n        if ele > 0 && ele < 9 \n  \
    \          count = count + 1\n        end\n    end\n    return count\nend\n</cell>\n\
    <cell>\ncount_nums(rand(1:10000))\n</cell>\n<text>\nCounting primes\nWe've learned\
    \ how to find elements of a vector that satisfy some condition. Let's extend our\
    \ knowledge of vectors and conditional statements to condition on a condition\
    \ involving the sum of the elements. To find an element of a vector that satisfies\
    \ a condition, we can use filter. Let's define a function count_primes which takes\
    \ an input vector and returns a vector containing the number of elements in the\
    \ input vector that are prime numbers.\nFor simplicity, we'll assume the input\
    \ vector is non-empty, and we'll return an output vector the same length as the\
    \ input vector.\nusing Test\n\n@testset begin\n\ncandidate = count_nums;\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([-1, -2, 0]) == 0)\n\t@test(candidate([1, 1, 2, -2,\
    \ 3, 4, 5]) == 6)\n\t@test(candidate([1, 6, 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1,\
    \ 100, 98, -7, 1, -1]) == 4)\n\t@test(candidate([12, 23, 34, -45, -56, 0]) ==\
    \ 5)\n\t@test(candidate([0, 1]) == 1)\n\t@test(candidate([1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpc12gmg5n.jl:23\nin expression starting at\
    \ /tmp/tmpc12gmg5n.jl:23\n"
  stdout: ''
  timestamp: 1660004022
- exit_code: 1
  program: "\"\"\"\n    Write a function count_nums which takes a vector of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([])\n    0\n \
    \   >>> count_nums([-1, 11, -11])\n    1\n    >>> count_nums([1, 1, 2])\n    3\n\
    \    \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    \n    for i\
    \ in arr\n        if i > 0 \n            count = 1\n            for j in arr\n\
    \                if j > 0 \n                    count += 1\n                 \
    \   if j != i\n                        break\n            \n            if i >\
    \ 0 \n                if count == 1\n                    return count\n      \
    \          else \n                    if count > 1\n                        return\
    \ count\n                    else\n                        return 0\n        \
    \    else\n                return 0\n        end\n    end\n    return 0\nend\n\
    </cell>\n<code language=julia-1.5>\ncount_nums(rand(Int64, 10))\n</cell>\n<text>\n\
    Problem 5\nWrite a function find_sum(arr::Vector{Int64}, val::Int64) which returns\
    \ the index of\nthe element that has a sum of digits > val \nIf arr is empty,\
    \ find_sum should return -1.\nIf arr is empty and val is greater than 0, find_sum\
    \ should return -1.\nIf arr is empty and val is 0, find_sum should return 0.\n\
    For all other cases, find_sum should return the index of the element of arr.\n\
    Example: arr = [1, 2, 2, 3], val = 2\nfind_sum(arr, 2) = 3\nusing Test\n\n@testset\
    \ begin\n\ncandidate = count_nums;\n\t@test(candidate(Vector{Int64}([])) == 0)\n\
    \t@test(candidate([-1, -2, 0]) == 0)\n\t@test(candidate([1, 1, 2, -2, 3, 4, 5])\
    \ == 6)\n\t@test(candidate([1, 6, 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1,\
    \ 100, 98, -7, 1, -1]) == 4)\n\t@test(candidate([12, 23, 34, -45, -56, 0]) ==\
    \ 5)\n\t@test(candidate([0, 1]) == 1)\n\t@test(candidate([1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"if\" at /tmp/tmp_mcr4owc.jl:28 expected \"\
    end\", got \"else\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp_mcr4owc.jl:32\n\
    in expression starting at /tmp/tmp_mcr4owc.jl:32\n"
  stdout: ''
  timestamp: 1660004022
- exit_code: 1
  program: "\"\"\"\n    Write a function count_nums which takes a vector of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([])\n    0\n \
    \   >>> count_nums([-1, 11, -11])\n    1\n    >>> count_nums([1, 1, 2])\n    3\n\
    \    \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    sum_of_digits\
    \ = sum(a % 10 for a in arr)\n    return sum_of_digits > 0 ? count_nums(arr.[sum_of_digits\
    \ .. -1]) + 1 : 0\nend # count_nums\nusing Test\n\n@testset begin\n\ncandidate\
    \ = count_nums;\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([-1,\
    \ -2, 0]) == 0)\n\t@test(candidate([1, 1, 2, -2, 3, 4, 5]) == 6)\n\t@test(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1, 100, 98, -7, 1, -1]) == 4)\n\
    \t@test(candidate([12, 23, 34, -45, -56, 0]) == 5)\n\t@test(candidate([0, 1])\
    \ == 1)\n\t@test(candidate([1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid syntax \"arr.[(sum_of_digits .. -1)]\"\
    \ around /tmp/tmpi_8q7q2u.jl:15\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpi_8q7q2u.jl:1\n\
    in expression starting at /tmp/tmpi_8q7q2u.jl:1\n"
  stdout: ''
  timestamp: 1660004022
- exit_code: 1
  program: "\"\"\"\n    Write a function count_nums which takes a vector of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([])\n    0\n \
    \   >>> count_nums([-1, 11, -11])\n    1\n    >>> count_nums([1, 1, 2])\n    3\n\
    \    \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n  count = 0\n  for\
    \ num in arr\n    if isa(num, Int64)\n      if num > 0\n        count += 1\n \
    \     else \n        sign =sign(num)\n        if sign == -1\n          count +=\
    \ 1\n        end\n    end\n  end\n  return count\nend\n</cell>\n<code language=julia-1.0>\n\
    count_nums([-12, -10, -7, 1])\n</cell>\n<code language=julia-1.0>\n@assert count_nums([12,\
    \ 10, -7, 1]) == 3\n@assert count_nums([13, 20, -8, 3, -2]) == 1\n</cell>\n<text>\n\
    count_digits(n)\nusing Test\n\n@testset begin\n\ncandidate = count_nums;\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([-1, -2, 0]) == 0)\n\t@test(candidate([1, 1, 2, -2,\
    \ 3, 4, 5]) == 6)\n\t@test(candidate([1, 6, 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1,\
    \ 100, 98, -7, 1, -1]) == 4)\n\t@test(candidate([12, 23, 34, -45, -56, 0]) ==\
    \ 5)\n\t@test(candidate([0, 1]) == 1)\n\t@test(candidate([1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpy3l601se.jl:28\nin expression starting at\
    \ /tmp/tmpy3l601se.jl:28\n"
  stdout: ''
  timestamp: 1660004022
- exit_code: 1
  program: "\"\"\"\n    Write a function count_nums which takes a vector of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([])\n    0\n \
    \   >>> count_nums([-1, 11, -11])\n    1\n    >>> count_nums([1, 1, 2])\n    3\n\
    \    \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    \n    num_list\
    \ = Int64[]\n    for i in arr\n        if i >= 0\n            num_list += getIndices(i,\
    \ digits_sum(i))\n        else\n            num_list += getIndices(-i, digits_sum(-i))\n\
    \        end\n    end\n    \n    return length(num_list) - length(filter(x ->\
    \ x <=0, num_list))\nend\n</cell>\n<code language=julia-1.5>\ncount_nums(Int64[-2,\
    \ -1, -1, 1, 1])\n</cell>\n<text>\nCounting numbers in a string\nThe method occurs\
    \ will return the number of times any character appears in a string.\nusing Test\n\
    \n@testset begin\n\ncandidate = count_nums;\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([-1, -2, 0]) == 0)\n\t@test(candidate([1, 1, 2, -2,\
    \ 3, 4, 5]) == 6)\n\t@test(candidate([1, 6, 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1,\
    \ 100, 98, -7, 1, -1]) == 4)\n\t@test(candidate([12, 23, 34, -45, -56, 0]) ==\
    \ 5)\n\t@test(candidate([0, 1]) == 1)\n\t@test(candidate([1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpccxxavn0.jl:26\nin expression starting at\
    \ /tmp/tmpccxxavn0.jl:26\n"
  stdout: ''
  timestamp: 1660004023
- exit_code: 1
  program: "\"\"\"\n    Write a function count_nums which takes a vector of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([])\n    0\n \
    \   >>> count_nums([-1, 11, -11])\n    1\n    >>> count_nums([1, 1, 2])\n    3\n\
    \    \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    return sum(map(x->\
    \ x > 0, arr))\nend\nusing Test\n\n@testset begin\n\ncandidate = count_nums;\n\
    \t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([-1, -2, 0]) ==\
    \ 0)\n\t@test(candidate([1, 1, 2, -2, 3, 4, 5]) == 6)\n\t@test(candidate([1, 6,\
    \ 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1, 100, 98, -7, 1, -1]) == 4)\n\t\
    @test(candidate([12, 23, 34, -45, -56, 0]) == 5)\n\t@test(candidate([0, 1]) ==\
    \ 1)\n\t@test(candidate([1]) == 1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 7 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpb7qtr5qn.jl:18

    '
  stdout: "test set: Test Failed at /tmp/tmpb7qtr5qn.jl:26\n  Expression: candidate([12,\
    \ 23, 34, -45, -56, 0]) == 5\n   Evaluated: 3 == 5\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpb7qtr5qn.jl:26 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpb7qtr5qn.jl:20\nTest Summary: | Pass  Fail\
    \  Total\ntest set      |    7     1      8\n"
  timestamp: 1660004024
- exit_code: 1
  program: "\"\"\"\n    Write a function count_nums which takes a vector of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([])\n    0\n \
    \   >>> count_nums([-1, 11, -11])\n    1\n    >>> count_nums([1, 1, 2])\n    3\n\
    \    \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    \n    sum_digits\
    \ = sum(x .* map(x->10^x-1, arr))\n    \n    if sum_digits == 0\n        return\
    \ 0\n    \n    if sum_digits < 0\n        sign = 1\n    else\n        sign = -1\n\
    \    end\n    \n    count_nums(arr[sign:end]).+sign(sum_digits)\nend\n</cell>\n\
    <text>\nWe can now use the count_nums function in our count_numbers function:\n\
    using Test\n\n@testset begin\n\ncandidate = count_nums;\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([-1, -2, 0]) == 0)\n\t@test(candidate([1, 1, 2, -2,\
    \ 3, 4, 5]) == 6)\n\t@test(candidate([1, 6, 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1,\
    \ 100, 98, -7, 1, -1]) == 4)\n\t@test(candidate([12, 23, 34, -45, -56, 0]) ==\
    \ 5)\n\t@test(candidate([0, 1]) == 1)\n\t@test(candidate([1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp73hbyd4e.jl:28\nin expression starting at\
    \ /tmp/tmp73hbyd4e.jl:28\n"
  stdout: ''
  timestamp: 1660004023
- exit_code: 1
  program: "\"\"\"\n    Write a function count_nums which takes a vector of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([])\n    0\n \
    \   >>> count_nums([-1, 11, -11])\n    1\n    >>> count_nums([1, 1, 2])\n    3\n\
    \    \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    if arr.length\
    \ == 0\n        return 0\n    let digits_at_start = [sum(arr .* (digits(arr[i])::Int64))\n\
    \                          for i in 1:arr.length]\n    if any(digits_at_start\
    \ .< 0)\n        return count_nums(arr[end+1]) \n    elseif digits_at_start[end]\
    \ <= 0\n        return count_nums(arr[end+1:]) + 1\n    else\n        return digits_at_start[end]\n\
    \    end\nend\n</code>\n<|/ a |>\n<| a tags=algorithm,big-o,time-complexity,julia\
    \ |>\nMy algorithm works quite well, and is more efficient than the other solutions\
    \ posted so far:\n<code>\nusing Test\n\n@testset begin\n\ncandidate = count_nums;\n\
    \t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([-1, -2, 0]) ==\
    \ 0)\n\t@test(candidate([1, 1, 2, -2, 3, 4, 5]) == 6)\n\t@test(candidate([1, 6,\
    \ 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1, 100, 98, -7, 1, -1]) == 4)\n\t\
    @test(candidate([12, 23, 34, -45, -56, 0]) == 5)\n\t@test(candidate([0, 1]) ==\
    \ 1)\n\t@test(candidate([1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"(end + 1):\" range\
    \ expression \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmphhlpvk4c.jl:21\n\
    in expression starting at /tmp/tmphhlpvk4c.jl:21\n"
  stdout: ''
  timestamp: 1660004023
- exit_code: 1
  program: "\"\"\"\n    Write a function count_nums which takes a vector of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([])\n    0\n \
    \   >>> count_nums([-1, 11, -11])\n    1\n    >>> count_nums([1, 1, 2])\n    3\n\
    \    \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    count = 0\n\
    \    sign = 1\n    for n in arr\n        count += 1\n        sign *= if n < 0\
    \ \n            -1\n        elseif n == 0 \n            0\n        elseif n >\
    \ 0\n            1\n        end\n    end\n    return sign * count\nend\n</cell>\n\
    <cell>\n@test count_nums([1]) == 1\n@test count_nums([-1, 2, -3]) == 2\n@test\
    \ count_nums([-1, 2, 3, -4]) == 3\n</cell>\n<text>\nExercise: Counting number\
    \ of positive integers\nWrite a function count_positives \nwhich takes a vector\
    \ of integers and returns the number of positive \nintegers in the vector.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = count_nums;\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([-1, -2, 0]) == 0)\n\t@test(candidate([1, 1, 2, -2,\
    \ 3, 4, 5]) == 6)\n\t@test(candidate([1, 6, 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1,\
    \ 100, 98, -7, 1, -1]) == 4)\n\t@test(candidate([12, 23, 34, -45, -56, 0]) ==\
    \ 5)\n\t@test(candidate([0, 1]) == 1)\n\t@test(candidate([1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprjcupw9i.jl:28\nin expression starting at\
    \ /tmp/tmprjcupw9i.jl:28\n"
  stdout: ''
  timestamp: 1660004023
- exit_code: 1
  program: "\"\"\"\n    Write a function count_nums which takes a vector of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([])\n    0\n \
    \   >>> count_nums([-1, 11, -11])\n    1\n    >>> count_nums([1, 1, 2])\n    3\n\
    \    \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    for e in arr\
    \ \n        if e > 0 \n            return 1 + count_nums(getDigits(e)) \n    \
    \    else \n            return count_nums(getDigits(-e)) + 1 \nend \nusing Test\n\
    \n@testset begin\n\ncandidate = count_nums;\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([-1, -2, 0]) == 0)\n\t@test(candidate([1, 1, 2, -2,\
    \ 3, 4, 5]) == 6)\n\t@test(candidate([1, 6, 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1,\
    \ 100, 98, -7, 1, -1]) == 4)\n\t@test(candidate([12, 23, 34, -45, -56, 0]) ==\
    \ 5)\n\t@test(candidate([0, 1]) == 1)\n\t@test(candidate([1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"for\" at /tmp/tmpuo7qfms7.jl:14\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpuo7qfms7.jl:1\n\
    in expression starting at /tmp/tmpuo7qfms7.jl:1\n"
  stdout: ''
  timestamp: 1660004023
- exit_code: 1
  program: "\"\"\"\n    Write a function count_nums which takes a vector of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([])\n    0\n \
    \   >>> count_nums([-1, 11, -11])\n    1\n    >>> count_nums([1, 1, 2])\n    3\n\
    \    \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    count =0\n \
    \   for i in arr\n        if i>0\n            count+=1\n        else\n       \
    \     if i<0\n                count+=10\n            end\n        end\n    end\n\
    \    return count\nend\n</cell>\n<code language=julia-1.0>\ncount_nums([1, 1,\
    \ 2, 3, 5, 8, 13, 21, 34])\n</cell>\n<text>\nProblem 3\nWrite a function count_evens\
    \ which takes in an array of integers and returns\nthe number of elements which\
    \ are even.\nFor example, count_evens([2, 4, 5, 6, 10, 12]) is 3 because only\
    \ 2, 6, 10, and 12 are even.\nHint: You can loop over an array with a for loop,\
    \ but you might find it easier to use an iterator such as an array.\nusing Test\n\
    \n@testset begin\n\ncandidate = count_nums;\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([-1, -2, 0]) == 0)\n\t@test(candidate([1, 1, 2, -2,\
    \ 3, 4, 5]) == 6)\n\t@test(candidate([1, 6, 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1,\
    \ 100, 98, -7, 1, -1]) == 4)\n\t@test(candidate([12, 23, 34, -45, -56, 0]) ==\
    \ 5)\n\t@test(candidate([0, 1]) == 1)\n\t@test(candidate([1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpazkm6o1z.jl:26\nin expression starting at\
    \ /tmp/tmpazkm6o1z.jl:26\n"
  stdout: ''
  timestamp: 1660004023
- exit_code: 1
  program: "\"\"\"\n    Write a function count_nums which takes a vector of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([])\n    0\n \
    \   >>> count_nums([-1, 11, -11])\n    1\n    >>> count_nums([1, 1, 2])\n    3\n\
    \    \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    sum = 0\n  \
    \  for i in arr\n        sum += i if i < 0 else abs(i) % 10\n    end\n    return\
    \ sum\nend\nusing Test\n\n@testset begin\n\ncandidate = count_nums;\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([-1, -2, 0]) == 0)\n\t@test(candidate([1, 1, 2, -2,\
    \ 3, 4, 5]) == 6)\n\t@test(candidate([1, 6, 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1,\
    \ 100, 98, -7, 1, -1]) == 4)\n\t@test(candidate([12, 23, 34, -45, -56, 0]) ==\
    \ 5)\n\t@test(candidate([0, 1]) == 1)\n\t@test(candidate([1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmpebou48nw.jl:15 expected \"\
    end\", got \"if\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpebou48nw.jl:16\n\
    in expression starting at /tmp/tmpebou48nw.jl:16\n"
  stdout: ''
  timestamp: 1660004023
- exit_code: 1
  program: "\"\"\"\n    Write a function count_nums which takes a vector of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([])\n    0\n \
    \   >>> count_nums([-1, 11, -11])\n    1\n    >>> count_nums([1, 1, 2])\n    3\n\
    \    \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    \n    return\
    \ sum(x -> x > 0, arr)\nend\n</cell>\n<code language=julia-0.6>\ncount_nums(vec)\n\
    </cell>\n<text>\nQuestion 4\nWrite a function count_digits(arr::Vector{Int64})\
    \ that takes a vector of integers and returns the number of digits in each element\
    \ of the vector.\nFor example, if the vector [6, 3, 9, 7, 10, 15] is passed to\
    \ the function, the function should return [3, 3, 3, 1, 1, 2]\nusing Test\n\n\
    @testset begin\n\ncandidate = count_nums;\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([-1, -2, 0]) == 0)\n\t@test(candidate([1, 1, 2, -2,\
    \ 3, 4, 5]) == 6)\n\t@test(candidate([1, 6, 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1,\
    \ 100, 98, -7, 1, -1]) == 4)\n\t@test(candidate([12, 23, 34, -45, -56, 0]) ==\
    \ 5)\n\t@test(candidate([0, 1]) == 1)\n\t@test(candidate([1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1i2998qm.jl:17\nin expression starting at\
    \ /tmp/tmp1i2998qm.jl:17\n"
  stdout: ''
  timestamp: 1660004023
- exit_code: 1
  program: "\"\"\"\n    Write a function count_nums which takes a vector of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([])\n    0\n \
    \   >>> count_nums([-1, 11, -11])\n    1\n    >>> count_nums([1, 1, 2])\n    3\n\
    \    \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    if arr.size\
    \ <= 0\n        return 0\n    end\n    flag = True\n    sum_digits = sum(digits(arr))\n\
    \    digit = sum_digits\n    for i in arr[1 : (end-1)]\n        if i == 0\n  \
    \          flag = False\n            continue\n        if i > 0\n            if\
    \ flag\n                if digit >= sum_digits\n                    flag = True\n\
    \                    digit = sum_digits\n                    i = i - 1\n     \
    \               continue\n                else\n                    i = i - 1\n\
    \                    continue\n            end\n            digit = digit * 10\
    \ + i\n        else\n            if flag\n                if digit < sum_digits\n\
    \                    flag = True\n                    digit = sum_digits\n   \
    \                 i = i - 1\n                    continue\n                else\n\
    \                    i = i - 1\n                    continue\n            end\n\
    \            digit = digit * 10 - i\n        end\n    end\n    return digit\n\
    end\n</code>\n<|/ a tags=julia |>\n<| c |>\nIf your goal is efficiency, `digits(arr::Vector{Int})`\
    \ should be written as `digits(arr::Vector{Int64})`\n<|/ c |>\n<| c |>\nThanks\
    \ for the suggestion, I used `Int64` because I didn't want to alter the output\
    \ type to `Float64` because that was the type returned from `sum`.  I guess I\
    \ could have used `Int`.  The reason I used `Int64` was because the `Int` type\
    \ can only contain whole numbers.\n<|/ c |>\n<| a dscore=2 |>\nThe easiest solution\
    \ is to convert your array to an appropriate type. E.g.\n<code>\njulia> arr=[1,2,3]\n\
    3-element Array{Int64,1}:\n 1\n 2\n 3\nusing Test\n\n@testset begin\n\ncandidate\
    \ = count_nums;\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([-1,\
    \ -2, 0]) == 0)\n\t@test(candidate([1, 1, 2, -2, 3, 4, 5]) == 6)\n\t@test(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1, 100, 98, -7, 1, -1]) == 4)\n\
    \t@test(candidate([12, 23, 34, -45, -56, 0]) == 5)\n\t@test(candidate([0, 1])\
    \ == 1)\n\t@test(candidate([1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpz5v26mov.jl:52\nin expression starting at\
    \ /tmp/tmpz5v26mov.jl:52\n"
  stdout: ''
  timestamp: 1660004024
- exit_code: 1
  program: "\"\"\"\n    Write a function count_nums which takes a vector of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([])\n    0\n \
    \   >>> count_nums([-1, 11, -11])\n    1\n    >>> count_nums([1, 1, 2])\n    3\n\
    \    \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    for i in arr\n\
    \        if i > 0  \n            if i == 0\n                return 1\n       \
    \     else \n                t = mod(i, 10)\n                j = Int(floor(t))\n\
    \                if j > 0\n                    i = i - j\n                end\n\
    \            end\n        end\n    end\n    return 0\nend\n</cell>\n<code language=julia-0.6>\n\
    count_nums([-12, 12, -5, -1, -7, -8, 9, -13, 13])\n</cell>\n<code language=julia-0.6>\n\
    count_nums([10, 1, 4, 6, -12, 2, -3, 4])\n</cell>\n<code language=julia-0.6>\n\
    # Write a function that takes in a vector of strings and returns the\n# number\
    \ of strings that begin with the letter 'b'.\n# e.g. \"bat\" and \"dal\" have\
    \ \"b\" as the first letter\nusing Test\n\n@testset begin\n\ncandidate = count_nums;\n\
    \t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([-1, -2, 0]) ==\
    \ 0)\n\t@test(candidate([1, 1, 2, -2, 3, 4, 5]) == 6)\n\t@test(candidate([1, 6,\
    \ 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1, 100, 98, -7, 1, -1]) == 4)\n\t\
    @test(candidate([12, 23, 34, -45, -56, 0]) == 5)\n\t@test(candidate([0, 1]) ==\
    \ 1)\n\t@test(candidate([1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfare3zkq.jl:29\nin expression starting at\
    \ /tmp/tmpfare3zkq.jl:29\n"
  stdout: ''
  timestamp: 1660004023
- exit_code: 1
  program: "\"\"\"\n    Write a function count_nums which takes a vector of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([])\n    0\n \
    \   >>> count_nums([-1, 11, -11])\n    1\n    >>> count_nums([1, 1, 2])\n    3\n\
    \    \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    count = 0.0\n\
    \    sign = signbit(arr[1])\n    for elt in arr\n        if elt < 0\n        \
    \    elt *= sign\n        end\n        if abs(elt) > 9.0\n            elt = round(elt)\n\
    \        end\n        count += 1\n    end\n    return count\nend\n</cell>\n<code\
    \ language=julia-1.5>\ncount_nums([-3, -12, -14, -7, 0, 2, 5, -10])\n</cell>\n\
    <text>\nPart 3. Write a function that can find the digits of PI. Your function\
    \ should take in two arguments, num and den, where num is the number of digits\
    \ in the numerator and den is the number of digits in the denominator. Your function\
    \ should return all prime factors of the product of the numerator and the denominator\
    \ where each prime factor is less than the product of the denominator. Do not\
    \ include prime factors larger than the product of the denominator.\n(See \"Example\
    \ Use\" above.)\nusing Test\n\n@testset begin\n\ncandidate = count_nums;\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([-1, -2, 0]) == 0)\n\t@test(candidate([1, 1, 2, -2,\
    \ 3, 4, 5]) == 6)\n\t@test(candidate([1, 6, 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1,\
    \ 100, 98, -7, 1, -1]) == 4)\n\t@test(candidate([12, 23, 34, -45, -56, 0]) ==\
    \ 5)\n\t@test(candidate([0, 1]) == 1)\n\t@test(candidate([1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplkrypamb.jl:27\nin expression starting at\
    \ /tmp/tmplkrypamb.jl:27\n"
  stdout: ''
  timestamp: 1660004024
- exit_code: 1
  program: "\"\"\"\n    Write a function count_nums which takes a vector of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([])\n    0\n \
    \   >>> count_nums([-1, 11, -11])\n    1\n    >>> count_nums([1, 1, 2])\n    3\n\
    \    \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n   count = 0\n \
    \  for num in arr\n    if num > 0\n       count += 1\n       break\n   end\n \
    \  return count\nend\n</code>\n<|/ a tags=julia |>\n<| a tags=julia |>\nHere is\
    \ a solution using Base.scan:\n<code>\ncount_nums(x::Vector{Int64}) = Base.scan(+,x,0,1)\n\
    </code>\nHere is another solution using Base.takewhile:\n<code>\ncount_nums(x::Vector{Int64})\
    \ = Base.takewhile(+,x,0,1)\n</code>\n<|/ a dscore=1 |>\n<| a dscore=0 |>\nIn\
    \ addition to's solution, we can use count function:\n<code>\njulia> count(x->sum(sign(x)>0),x)\n\
    2\n</code>\n<|/ a tags=julia |>\n<| c |>\nThis is really the best solution, since\
    \ it works directly with vectors and it's very short\n<|/ c |>\n<| c |>\n`count`\
    \ is not a good solution, since it has to traverse the entire vector `x` even\
    \ though it never returns `false`. `count_nums` is more efficient.\n<|/ c |>\n\
    <| c |>\nThis is true for small vectors, but for large vectors, `count_nums` will\
    \ be faster.\n<|/ c |>\n<| a tags=julia |>\nAnother solution is to use map, and\
    \ count the boolean values returned by map:\n<code>\njulia> count_nums(x::Vector{Int64})\
    \ = sum(map(x->sign(sum(x>0)),x)==1)\ncount_nums (generic function with 1 method)\n\
    using Test\n\n@testset begin\n\ncandidate = count_nums;\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([-1, -2, 0]) == 0)\n\t@test(candidate([1, 1, 2, -2,\
    \ 3, 4, 5]) == 6)\n\t@test(candidate([1, 6, 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1,\
    \ 100, 98, -7, 1, -1]) == 4)\n\t@test(candidate([12, 23, 34, -45, -56, 0]) ==\
    \ 5)\n\t@test(candidate([0, 1]) == 1)\n\t@test(candidate([1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpq_a35o0j.jl:22\nin expression starting at\
    \ /tmp/tmpq_a35o0j.jl:22\n"
  stdout: ''
  timestamp: 1660004023
- exit_code: 1
  program: "\"\"\"\n    Write a function count_nums which takes a vector of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([])\n    0\n \
    \   >>> count_nums([-1, 11, -11])\n    1\n    >>> count_nums([1, 1, 2])\n    3\n\
    \    \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    sum = 0\n  \
    \  for x in arr\n        if x >= 0 \n            sum += x\n        else\n    \
    \        sum += x<0? -x:x\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.0>\n\
    count_nums([-1, 1, -2, 2, -3, 3, -4, 4, -5, 5, -6, 6, -7, 7, -8, 8])\n</cell>\n\
    <text>\nExercise\nWrite a function count_num_sd(arr::Vector{Int64})::Float64 which\
    \ returns the sum of the absolute values of each element\nof arr and returns the\
    \ square root of the result.  It does not work for\nnegative numbers, but it works\
    \ with zeros and positive.\n    >>> count_num_sd([1, 1, 1])\n    0.0\n    >>>\
    \ count_num_sd([-1, 1, -2, 2, -3, 3, -4, 4, -5, 5, -6, 6, -7, 7, -8, 8])\n   \
    \ 1.7320508075688772\n    >>> count_num_sd([1, 2, 3])\n    4.47213595499958\n\
    \    >>> count_num_sd([-11, -12, 13])\n    -1.0\n    >>> count_num_sd([-10, -9,\
    \ -10])\n    2.0\n    >>> count_num_sd([1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89,\
    \ 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946])\n    94.64575916564613\n\
    \    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = count_nums;\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([-1, -2, 0]) == 0)\n\t@test(candidate([1, 1, 2, -2,\
    \ 3, 4, 5]) == 6)\n\t@test(candidate([1, 6, 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1,\
    \ 100, 98, -7, 1, -1]) == 4)\n\t@test(candidate([12, 23, 34, -45, -56, 0]) ==\
    \ 5)\n\t@test(candidate([0, 1]) == 1)\n\t@test(candidate([1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: space required before \"?\" operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdi_w9pi0.jl:19\nin expression starting at\
    \ /tmp/tmpdi_w9pi0.jl:19\n"
  stdout: ''
  timestamp: 1660004023
- exit_code: 1
  program: "\"\"\"\n    Write a function count_nums which takes a vector of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([])\n    0\n \
    \   >>> count_nums([-1, 11, -11])\n    1\n    >>> count_nums([1, 1, 2])\n    3\n\
    \    \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    # Your code\
    \ here\n    @assert length(arr) >= 0\n    if arr == []\n        return 0\n   \
    \ \n    sign = signbit(arr[1])\n    \n    sum_of_digits = sum(arr)\n    if sum_of_digits\
    \ == 0\n        return sign == 0\n    \n    if sign == 0\n        return 1 + count_nums(arr[sign\
    \ == 0]) \n    \n    return 1 + count_nums(arr[sign == 0]) + count_nums(arr[sign\
    \ == 1])\nusing Test\n\n@testset begin\n\ncandidate = count_nums;\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([-1, -2, 0]) == 0)\n\t@test(candidate([1, 1, 2, -2,\
    \ 3, 4, 5]) == 6)\n\t@test(candidate([1, 6, 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1,\
    \ 100, 98, -7, 1, -1]) == 4)\n\t@test(candidate([12, 23, 34, -45, -56, 0]) ==\
    \ 5)\n\t@test(candidate([0, 1]) == 1)\n\t@test(candidate([1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_6aur3bd.jl:1\nin expression starting at /tmp/tmp_6aur3bd.jl:1\n"
  stdout: ''
  timestamp: 1660004024
- exit_code: 1
  program: "\"\"\"\n    Write a function count_nums which takes a vector of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([])\n    0\n \
    \   >>> count_nums([-1, 11, -11])\n    1\n    >>> count_nums([1, 1, 2])\n    3\n\
    \    \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n  \n    if arr.length==0\n\
    \        return 0\n    end\nusing Test\n\n@testset begin\n\ncandidate = count_nums;\n\
    \t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([-1, -2, 0]) ==\
    \ 0)\n\t@test(candidate([1, 1, 2, -2, 3, 4, 5]) == 6)\n\t@test(candidate([1, 6,\
    \ 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1, 100, 98, -7, 1, -1]) == 4)\n\t\
    @test(candidate([12, 23, 34, -45, -56, 0]) == 5)\n\t@test(candidate([0, 1]) ==\
    \ 1)\n\t@test(candidate([1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpcf9i9e95.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpcf9i9e95.jl:1\n\
    in expression starting at /tmp/tmpcf9i9e95.jl:1\n"
  stdout: ''
  timestamp: 1660004023
- exit_code: 1
  program: "\"\"\"\n    Write a function count_nums which takes a vector of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([])\n    0\n \
    \   >>> count_nums([-1, 11, -11])\n    1\n    >>> count_nums([1, 1, 2])\n    3\n\
    \    \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    count=0\n  \
    \  for n in arr\n        if n<0\n            n = -n\n        end\n        if n==0\n\
    \            count+=1\n            continue\n        if n<10\n            count+=1\n\
    \            continue\n        digits = divrem(abs(n), 10)\n        if digits[1]==1\n\
    \            count+=digits[2]\n        else\n            count+=digits[2]+digits[3]\n\
    \        end\n    end\n    return count\nend\n</code>\n<|/ a tags=sum-of-digits,julia\
    \ dscore=2 |>\n<| a |>\nThis is my solution for those who are looking for an answer\
    \ on Julia 1.3 which does not support divrem and their code is not complete. There\
    \ are some functions not used in the code such as digits(n), divrem(n,d), divrem(n::Int64,\
    \ n2::Int64), divrem(n::Int64, n2::Int64)::Tuple{Int64,Int64} and the function\
    \ count_nums. If you need them, you can find them on the Internet and copy the\
    \ codes here.\n<code>\nusing DelimitedFiles\nusing DataFrames\nusing Test\n\n\
    @testset begin\n\ncandidate = count_nums;\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([-1, -2, 0]) == 0)\n\t@test(candidate([1, 1, 2, -2,\
    \ 3, 4, 5]) == 6)\n\t@test(candidate([1, 6, 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1,\
    \ 100, 98, -7, 1, -1]) == 4)\n\t@test(candidate([12, 23, 34, -45, -56, 0]) ==\
    \ 5)\n\t@test(candidate([0, 1]) == 1)\n\t@test(candidate([1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbrofla5o.jl:34\nin expression starting at\
    \ /tmp/tmpbrofla5o.jl:34\n"
  stdout: ''
  timestamp: 1660004024
- exit_code: 1
  program: "\"\"\"\n    Write a function count_nums which takes a vector of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([])\n    0\n \
    \   >>> count_nums([-1, 11, -11])\n    1\n    >>> count_nums([1, 1, 2])\n    3\n\
    \    \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    \n    return\
    \ Int64(reduce(vcat, \n                        [count_nums(Vector{Int64}(filter(a\
    \ -> a > 0, a::Int64)[1:end-1])) \n                        for a in arr]))\nusing\
    \ Test\n\n@testset begin\n\ncandidate = count_nums;\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([-1, -2, 0]) == 0)\n\t@test(candidate([1, 1, 2, -2,\
    \ 3, 4, 5]) == 6)\n\t@test(candidate([1, 6, 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1,\
    \ 100, 98, -7, 1, -1]) == 4)\n\t@test(candidate([12, 23, 34, -45, -56, 0]) ==\
    \ 5)\n\t@test(candidate([0, 1]) == 1)\n\t@test(candidate([1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpup6wfxla.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpup6wfxla.jl:1\n\
    in expression starting at /tmp/tmpup6wfxla.jl:1\n"
  stdout: ''
  timestamp: 1660004024
- exit_code: 1
  program: "\"\"\"\n    Write a function count_nums which takes a vector of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([])\n    0\n \
    \   >>> count_nums([-1, 11, -11])\n    1\n    >>> count_nums([1, 1, 2])\n    3\n\
    \    \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    for i in arr\n\
    \        if i < 0\n            sign = 1\n            abs(i)\n        else\n  \
    \          sign = 0\n        end\n        digits = floor(Int, log10(i))\n    \
    \    digits = length(arr) - digits\n        digit_sum = sum([i for i in arr if\
    \ i > 0])\n        \n        if digits == digit_sum\n            count = 1\n \
    \       else\n            count = 0\n        end\n        \n        if sign ~=\
    \ 0\n            count *= -1\n        end\n        \n        count += digits\n\
    \        \n        return count\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    count_nums([-1, 2, 0, 3])\n</cell>\n<text>\nExercise\nWrite a function count_digits_vec\
    \ which takes a vector of integers and returns the number of digits in the vector.\n\
    \    >>> count_digits_vec([-1, 11, -11])\n    4\n    >>> count_digits_vec([1,\
    \ 1, 2])\n    3\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = count_nums;\n\
    \t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([-1, -2, 0]) ==\
    \ 0)\n\t@test(candidate([1, 1, 2, -2, 3, 4, 5]) == 6)\n\t@test(candidate([1, 6,\
    \ 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1, 100, 98, -7, 1, -1]) == 4)\n\t\
    @test(candidate([12, 23, 34, -45, -56, 0]) == 5)\n\t@test(candidate([0, 1]) ==\
    \ 1)\n\t@test(candidate([1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpd4aw7v4u.jl:40\nin expression starting at\
    \ /tmp/tmpd4aw7v4u.jl:40\n"
  stdout: ''
  timestamp: 1660004025
- exit_code: 1
  program: "\"\"\"\n    Write a function count_nums which takes a vector of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([])\n    0\n \
    \   >>> count_nums([-1, 11, -11])\n    1\n    >>> count_nums([1, 1, 2])\n    3\n\
    \    \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    \n    if arr.length\
    \ == 0 \n        return 0\n    \n    sum = 0\n    for i in arr\n        if i <\
    \ 0\n            sign = -1\n        else\n            sign = 1\n        \n   \
    \     sum = sum + sign * abs(i)\n    end\n    \n    return sum\nend\n</cell>\n\
    <text>\nQuestion 13: Counts the number of elements in arr that has a sum of digits\
    \ < 0\nusing Test\n\n@testset begin\n\ncandidate = count_nums;\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([-1, -2, 0]) == 0)\n\t@test(candidate([1, 1, 2, -2,\
    \ 3, 4, 5]) == 6)\n\t@test(candidate([1, 6, 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1,\
    \ 100, 98, -7, 1, -1]) == 4)\n\t@test(candidate([12, 23, 34, -45, -56, 0]) ==\
    \ 5)\n\t@test(candidate([0, 1]) == 1)\n\t@test(candidate([1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpennx038u.jl:30\nin expression starting at\
    \ /tmp/tmpennx038u.jl:30\n"
  stdout: ''
  timestamp: 1660004025
- exit_code: 1
  program: "\"\"\"\n    Write a function count_nums which takes a vector of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([])\n    0\n \
    \   >>> count_nums([-1, 11, -11])\n    1\n    >>> count_nums([1, 1, 2])\n    3\n\
    \    \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    count = 0\n\
    \    for num in arr \n        if num < 0 \n            count += abs(num)\n   \
    \     else\n            count += num\n        end\n    end\n    return count\n\
    end\n</cell>\n<code language=julia-1.3>\ncount_nums([-1, 2, -3, 4, 5, -6, 7, 8,\
    \ -9, 10])\n</cell>\n<code language=julia-1.3>\nusing Test\n\n@testset begin\n\
    \ncandidate = count_nums;\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([-1,\
    \ -2, 0]) == 0)\n\t@test(candidate([1, 1, 2, -2, 3, 4, 5]) == 6)\n\t@test(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1, 100, 98, -7, 1, -1]) == 4)\n\
    \t@test(candidate([12, 23, 34, -45, -56, 0]) == 5)\n\t@test(candidate([0, 1])\
    \ == 1)\n\t@test(candidate([1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppj2tk65t.jl:24\nin expression starting at\
    \ /tmp/tmppj2tk65t.jl:24\n"
  stdout: ''
  timestamp: 1660004025
- exit_code: 1
  program: "\"\"\"\n    Write a function count_nums which takes a vector of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([])\n    0\n \
    \   >>> count_nums([-1, 11, -11])\n    1\n    >>> count_nums([1, 1, 2])\n    3\n\
    \    \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    count = 0\n\
    \    for elt in arr\n        if elt > 0\n            count += elt.digits() - elt.digits(elt.digits()+1)\n\
    \        end\n    end\n    return count\nend\nusing Test\n\n@testset begin\n\n\
    candidate = count_nums;\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([-1,\
    \ -2, 0]) == 0)\n\t@test(candidate([1, 1, 2, -2, 3, 4, 5]) == 6)\n\t@test(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1, 100, 98, -7, 1, -1]) == 4)\n\
    \t@test(candidate([12, 23, 34, -45, -56, 0]) == 5)\n\t@test(candidate([0, 1])\
    \ == 1)\n\t@test(candidate([1]) == 1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 0 failed, 6 errored,
    0 broken.

    in expression starting at /tmp/tmp08zvv5bn.jl:24

    '
  stdout: "test set: Error During Test at /tmp/tmp08zvv5bn.jl:29\n  Test threw exception\n\
    \  Expression: candidate([1, 1, 2, -2, 3, 4, 5]) == 6\n  type Int64 has no field\
    \ digits\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n \
    \  [2] count_nums(arr::Vector{Int64})\n     @ Main /tmp/tmp08zvv5bn.jl:17\n  \
    \ [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp08zvv5bn.jl:29 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp08zvv5bn.jl:26\ntest set:\
    \ Error During Test at /tmp/tmp08zvv5bn.jl:30\n  Test threw exception\n  Expression:\
    \ candidate([1, 6, 9, -6, 0, 1, 5]) == 5\n  type Int64 has no field digits\n \
    \ Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] count_nums(arr::Vector{Int64})\n\
    \     @ Main /tmp/tmp08zvv5bn.jl:17\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp08zvv5bn.jl:30 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp08zvv5bn.jl:26\ntest set:\
    \ Error During Test at /tmp/tmp08zvv5bn.jl:31\n  Test threw exception\n  Expression:\
    \ candidate([1, 100, 98, -7, 1, -1]) == 4\n  type Int64 has no field digits\n\
    \  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] count_nums(arr::Vector{Int64})\n\
    \     @ Main /tmp/tmp08zvv5bn.jl:17\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp08zvv5bn.jl:31 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp08zvv5bn.jl:26\ntest set:\
    \ Error During Test at /tmp/tmp08zvv5bn.jl:32\n  Test threw exception\n  Expression:\
    \ candidate([12, 23, 34, -45, -56, 0]) == 5\n  type Int64 has n"
  timestamp: 1660004027
- exit_code: 1
  program: "\"\"\"\n    Write a function count_nums which takes a vector of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([])\n    0\n \
    \   >>> count_nums([-1, 11, -11])\n    1\n    >>> count_nums([1, 1, 2])\n    3\n\
    \    \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    # arr[arr==0]=\
    \ 0 # remove zero numbers\n    # return arr.filter(x -> x .> 0).sum()\n    \n\
    \    cnt=0\n    for i in arr\n        if i>0\n            cnt += i\n        end\n\
    \    end\n    return cnt\nend\n</code>\n<|/ a tags=julia,functional-programming\
    \ |>\n<| c |>\nThis does not provide an answer to the question. To critique or\
    \ request clarification from an author, leave a comment below their post. - [From\
    \ Review](/review/low-quality-posts/24449491)\n<|/ c |>\n<| c |>\n: Can you help\
    \ me with my answer? It does exactly what the OP asked. The second part is just\
    \ a summary of the first. If you have a different way of solving it then I am\
    \ happy to provide it.\n<|/ c |>\n<| c |>\nIf you have any more questions please\
    \ ask me. I will reply soon.\n<|/ c |>\n<| c |>\nI have edited my answer. If you\
    \ have any more questions please ask.\n<|/ c |>\n<| c |>\nThanks - I appreciate\
    \ the effort.\n<|/ c |>\n<| a tags=julia,functional-programming dscore=2 |>\n\
    This is my solution, first let me show you the steps needed to solve the problem:\n\
    <code>\njulia> arr = [-1, 11, -11]\n3-element Vector{Int64}:\n -11\n 11\n -11\n\
    using Test\n\n@testset begin\n\ncandidate = count_nums;\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([-1, -2, 0]) == 0)\n\t@test(candidate([1, 1, 2, -2,\
    \ 3, 4, 5]) == 6)\n\t@test(candidate([1, 6, 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1,\
    \ 100, 98, -7, 1, -1]) == 4)\n\t@test(candidate([12, 23, 34, -45, -56, 0]) ==\
    \ 5)\n\t@test(candidate([0, 1]) == 1)\n\t@test(candidate([1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpez357fv6.jl:25\nin expression starting at\
    \ /tmp/tmpez357fv6.jl:25\n"
  stdout: ''
  timestamp: 1660004025
- exit_code: 1
  program: "\"\"\"\n    Write a function count_nums which takes a vector of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([])\n    0\n \
    \   >>> count_nums([-1, 11, -11])\n    1\n    >>> count_nums([1, 1, 2])\n    3\n\
    \    \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n        count =\
    \ 0\n        for x in arr\n            if x == 0 || x%10 == 0\n              \
    \  count += 1\n            elseif x < 0\n                count += count_nums(Int64[-x])\n\
    \            end\n        end\n        return count\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = count_nums;\n\t@test(candidate(Vector{Int64}([])) == 0)\n\
    \t@test(candidate([-1, -2, 0]) == 0)\n\t@test(candidate([1, 1, 2, -2, 3, 4, 5])\
    \ == 6)\n\t@test(candidate([1, 6, 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1,\
    \ 100, 98, -7, 1, -1]) == 4)\n\t@test(candidate([12, 23, 34, -45, -56, 0]) ==\
    \ 5)\n\t@test(candidate([0, 1]) == 1)\n\t@test(candidate([1]) == 1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp2mxkxhxp.jl:26

    '
  stdout: "test set: Test Failed at /tmp/tmp2mxkxhxp.jl:30\n  Expression: candidate([-1,\
    \ -2, 0]) == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1] macro expansion\n   @\
    \ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp2mxkxhxp.jl:30 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp2mxkxhxp.jl:28\ntest set: Test Failed at /tmp/tmp2mxkxhxp.jl:31\n\
    \  Expression: candidate([1, 1, 2, -2, 3, 4, 5]) == 6\n   Evaluated: 0 == 6\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2mxkxhxp.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2mxkxhxp.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp2mxkxhxp.jl:32\n  Expression: candidate([1, 6, 9, -6, 0, 1,\
    \ 5]) == 5\n   Evaluated: 1 == 5\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2mxkxhxp.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2mxkxhxp.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp2mxkxhxp.jl:33\n  Expression: candidate([1, 100, 98, -7, 1,\
    \ -1]) == 4\n   Evaluated: 1 == 4\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2mxkxhxp.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2mxkxhxp.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp2mxkxhxp.jl:34\n  Expression: candidate([12, 23, 34, -45,\
    \ -56, 0]) == 5\n   Evaluated: 1 == 5\nStacktrace:\n [1] macro expansion\n   @\
    \ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro ex"
  timestamp: 1660004026
- exit_code: 1
  program: "\"\"\"\n    Write a function count_nums which takes a vector of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([])\n    0\n \
    \   >>> count_nums([-1, 11, -11])\n    1\n    >>> count_nums([1, 1, 2])\n    3\n\
    \    \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    count = 0\n\
    \    for i in arr\n        if i > 0 \n            count += i\n        end\n  \
    \  end\n    return count\nend\n</cell>\n<text>\nSolution\nThe code below is not\
    \ optimized, but runs quickly. Use the count_nums function above to solve the\
    \ above problems.\nusing Test\n\n@testset begin\n\ncandidate = count_nums;\n\t\
    @test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([-1, -2, 0]) == 0)\n\
    \t@test(candidate([1, 1, 2, -2, 3, 4, 5]) == 6)\n\t@test(candidate([1, 6, 9, -6,\
    \ 0, 1, 5]) == 5)\n\t@test(candidate([1, 100, 98, -7, 1, -1]) == 4)\n\t@test(candidate([12,\
    \ 23, 34, -45, -56, 0]) == 5)\n\t@test(candidate([0, 1]) == 1)\n\t@test(candidate([1])\
    \ == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpe6_5mvx2.jl:22\nin expression starting at\
    \ /tmp/tmpe6_5mvx2.jl:22\n"
  stdout: ''
  timestamp: 1660004025
- exit_code: 1
  program: "\"\"\"\n    Write a function count_nums which takes a vector of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([])\n    0\n \
    \   >>> count_nums([-1, 11, -11])\n    1\n    >>> count_nums([1, 1, 2])\n    3\n\
    \    \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    sum = 0\n  \
    \  for i in arr\n        sum += i % 10\n    end\n    return sum\nend\n</code>\n\
    <|/ a dscore=2 |>\n<| c |>\n`count_nums(Int64[])` should be `0`, not `1`\n<|/\
    \ c |>\n<| a tags=julia |>\nThis problem can be solved using an iterative approach\
    \ by iterating over each digit, removing the previous digit from the sum and appending\
    \ it to the current digit.\n<code>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = count_nums;\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([-1,\
    \ -2, 0]) == 0)\n\t@test(candidate([1, 1, 2, -2, 3, 4, 5]) == 6)\n\t@test(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1, 100, 98, -7, 1, -1]) == 4)\n\
    \t@test(candidate([12, 23, 34, -45, -56, 0]) == 5)\n\t@test(candidate([0, 1])\
    \ == 1)\n\t@test(candidate([1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzfqasvll.jl:20\nin expression starting at\
    \ /tmp/tmpzfqasvll.jl:20\n"
  stdout: ''
  timestamp: 1660004025
- exit_code: 1
  program: "\"\"\"\n    Write a function count_nums which takes a vector of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([])\n    0\n \
    \   >>> count_nums([-1, 11, -11])\n    1\n    >>> count_nums([1, 1, 2])\n    3\n\
    \    \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    if isa(arr,\
    \ Vector)\n        sum_ = sum(arr)\n        if sum_ > 0\n            return count_nums(arr[sum_\
    \ .. end])\n        else\n            return 0\n        end\n    elseif isa(arr,\
    \ Int64)\n        if arr > 0\n            return 1 + count_nums(arr[1 .. end])\n\
    \        else\n            return 0\n        end\n    end\nend\n</code>\n<|/ a\
    \ dscore=0 |>\n<| a tags=function,julia |>\n<code>\nusing Test\n\n@testset begin\n\
    \ncandidate = count_nums;\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([-1,\
    \ -2, 0]) == 0)\n\t@test(candidate([1, 1, 2, -2, 3, 4, 5]) == 6)\n\t@test(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1, 100, 98, -7, 1, -1]) == 4)\n\
    \t@test(candidate([12, 23, 34, -45, -56, 0]) == 5)\n\t@test(candidate([0, 1])\
    \ == 1)\n\t@test(candidate([1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1v7lbqh4.jl:29\nin expression starting at\
    \ /tmp/tmp1v7lbqh4.jl:29\n"
  stdout: ''
  timestamp: 1660004025
- exit_code: 1
  program: "\"\"\"\n    Write a function count_nums which takes a vector of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([])\n    0\n \
    \   >>> count_nums([-1, 11, -11])\n    1\n    >>> count_nums([1, 1, 2])\n    3\n\
    \    \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    count = 0\n\
    \    for n in arr \n        if n > 0\n            count += 1\n        end\n  \
    \  end\n    return count\nend\n</cell>\n<code language=julia-1.0>\ncount_nums(collect(digits))\n\
    </cell>\n<text>\nLet's try it on some test data:\nusing Test\n\n@testset begin\n\
    \ncandidate = count_nums;\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([-1,\
    \ -2, 0]) == 0)\n\t@test(candidate([1, 1, 2, -2, 3, 4, 5]) == 6)\n\t@test(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1, 100, 98, -7, 1, -1]) == 4)\n\
    \t@test(candidate([12, 23, 34, -45, -56, 0]) == 5)\n\t@test(candidate([0, 1])\
    \ == 1)\n\t@test(candidate([1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp16yvhbbq.jl:22\nin expression starting at\
    \ /tmp/tmp16yvhbbq.jl:22\n"
  stdout: ''
  timestamp: 1660004025
- exit_code: 1
  program: "\"\"\"\n    Write a function count_nums which takes a vector of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([])\n    0\n \
    \   >>> count_nums([-1, 11, -11])\n    1\n    >>> count_nums([1, 1, 2])\n    3\n\
    \    \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    count = 0\n\
    \    for element in arr\n        if element > 0 \n            count += 1\n   \
    \     end\n    end\n    return count\nend\ncount_nums(a)\nusing Test\n\n@testset\
    \ begin\n\ncandidate = count_nums;\n\t@test(candidate(Vector{Int64}([])) == 0)\n\
    \t@test(candidate([-1, -2, 0]) == 0)\n\t@test(candidate([1, 1, 2, -2, 3, 4, 5])\
    \ == 6)\n\t@test(candidate([1, 6, 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1,\
    \ 100, 98, -7, 1, -1]) == 4)\n\t@test(candidate([12, 23, 34, -45, -56, 0]) ==\
    \ 5)\n\t@test(candidate([0, 1]) == 1)\n\t@test(candidate([1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: UndefVarError: a not defined\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpyz1mpne6.jl:22\nin expression starting at /tmp/tmpyz1mpne6.jl:22\n"
  stdout: ''
  timestamp: 1660004025
- exit_code: 1
  program: "\"\"\"\n    Write a function count_nums which takes a vector of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([])\n    0\n \
    \   >>> count_nums([-1, 11, -11])\n    1\n    >>> count_nums([1, 1, 2])\n    3\n\
    \    \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    count=0\n  \
    \  for i in arr \n        if i>=0 \n            count+=1\n        end\n    end\
    \ \n    return count\nend\n</cell>\n<text>\nProblem 4b\nWrite a function which\
    \ returns the number of positive numbers in a vector arr:\nIf any element in arr\
    \ is negative, then its first signed digit will be negative:\ne.g. -123 has signed\
    \ digits -1, 2, and 3.\n>>> count_nums([])\n0\n>>> count_nums([-1, 11, -11])\n\
    1\n>>> count_nums([1, 1, 2])\n3\nusing Test\n\n@testset begin\n\ncandidate = count_nums;\n\
    \t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([-1, -2, 0]) ==\
    \ 0)\n\t@test(candidate([1, 1, 2, -2, 3, 4, 5]) == 6)\n\t@test(candidate([1, 6,\
    \ 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1, 100, 98, -7, 1, -1]) == 4)\n\t\
    @test(candidate([12, 23, 34, -45, -56, 0]) == 5)\n\t@test(candidate([0, 1]) ==\
    \ 1)\n\t@test(candidate([1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkfyrvgwu.jl:22\nin expression starting at\
    \ /tmp/tmpkfyrvgwu.jl:22\n"
  stdout: ''
  timestamp: 1660004025
- exit_code: 1
  program: "\"\"\"\n    Write a function count_nums which takes a vector of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([])\n    0\n \
    \   >>> count_nums([-1, 11, -11])\n    1\n    >>> count_nums([1, 1, 2])\n    3\n\
    \    \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    if arr.is_empty\n\
    \        return 0\n    \n    digits = arr[1...end]\n    count = 1\n    \n    for\
    \ i in digits\n        if i < 0\n            i = -i\n            count += 1\n\
    \        end\n    end\n    return count\nend\n</cell>\n<code language=julia-1.3>\n\
    count_nums([-1, 11, -11])\n</cell>\n<text>\nProblem 7\nWrite a function count_num_digits\
    \ that takes a vector of integers and returns\nthe number of digits of each number.\
    \ If a number is negative, then its\nfirst signed digit will be negative: e.g.\
    \ -123 has signed digits -1, 2, and 3.\n>>> count_num_digits([])\n0\n>>> count_num_digits([-1,\
    \ 11, -11])\n1\n>>> count_num_digits([1, 2, 1])\n2\n>>> count_num_digits([-1,\
    \ 11, 11, -1, 1, -1])\n3\n>>> count_num_digits([-4, 3, 2, 1])\n4\n>>> count_num_digits([-9,\
    \ 10, -3, 8, -7, -12, 5, -1])\n5\n\"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = count_nums;\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([-1,\
    \ -2, 0]) == 0)\n\t@test(candidate([1, 1, 2, -2, 3, 4, 5]) == 6)\n\t@test(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1, 100, 98, -7, 1, -1]) == 4)\n\
    \t@test(candidate([12, 23, 34, -45, -56, 0]) == 5)\n\t@test(candidate([0, 1])\
    \ == 1)\n\t@test(candidate([1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: expected \"]\" or separator in arguments to \"\
    [ ]\"; got \"1...end\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp8nehq0rh.jl:17\n\
    in expression starting at /tmp/tmp8nehq0rh.jl:17\n"
  stdout: ''
  timestamp: 1660004025
- exit_code: 1
  program: "\"\"\"\n    Write a function count_nums which takes a vector of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([])\n    0\n \
    \   >>> count_nums([-1, 11, -11])\n    1\n    >>> count_nums([1, 1, 2])\n    3\n\
    \    \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    arr = sort(arr)\n\
    \    count_ = 0\n    for i in arr\n        count_ += (i % (i - i) == 0) ? 1 :\
    \ 0\n    end\n    count_\nend\nusing Test\n\n@testset begin\n\ncandidate = count_nums;\n\
    \t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([-1, -2, 0]) ==\
    \ 0)\n\t@test(candidate([1, 1, 2, -2, 3, 4, 5]) == 6)\n\t@test(candidate([1, 6,\
    \ 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1, 100, 98, -7, 1, -1]) == 4)\n\t\
    @test(candidate([12, 23, 34, -45, -56, 0]) == 5)\n\t@test(candidate([0, 1]) ==\
    \ 1)\n\t@test(candidate([1]) == 1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpu7dbwab8.jl:23

    '
  stdout: "test set: Error During Test at /tmp/tmpu7dbwab8.jl:27\n  Test threw exception\n\
    \  Expression: candidate([-1, -2, 0]) == 0\n  DivideError: integer division error\n\
    \  Stacktrace:\n   [1] rem\n     @ ./int.jl:285 [inlined]\n   [2] count_nums(arr::Vector{Int64})\n\
    \     @ Main /tmp/tmpu7dbwab8.jl:17\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpu7dbwab8.jl:27 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpu7dbwab8.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpu7dbwab8.jl:28\n  Test threw exception\n  Expression:\
    \ candidate([1, 1, 2, -2, 3, 4, 5]) == 6\n  DivideError: integer division error\n\
    \  Stacktrace:\n   [1] rem\n     @ ./int.jl:285 [inlined]\n   [2] count_nums(arr::Vector{Int64})\n\
    \     @ Main /tmp/tmpu7dbwab8.jl:17\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpu7dbwab8.jl:28 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpu7dbwab8.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpu7dbwab8.jl:29\n  Test threw exception\n  Expression:\
    \ candidate([1, 6, 9, -6, 0, 1, 5]) == 5\n  DivideError: integer division error\n\
    \  Stacktrace:\n   [1] rem\n     @ ./int.jl:285 [inlined]\n   [2] count_nums(arr::Vector{Int64})\n\
    \     @ Main /tmp/tmpu7dbwab8.jl:17\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpu7dbwab8.jl:29 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpu7dbwab8.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpu7dbwab8.jl:30\n  Test threw exception\n  Expression:\
    \ candidate([1, 100, 98, -7, 1, -1]) == 4\n  DivideError: integer division error\n\
    \  S"
  timestamp: 1660004027
- exit_code: 1
  program: "\"\"\"\n    Write a function count_nums which takes a vector of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([])\n    0\n \
    \   >>> count_nums([-1, 11, -11])\n    1\n    >>> count_nums([1, 1, 2])\n    3\n\
    \    \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    if len(arr)\
    \ == 0 \n        0 \n    else \n        firstnum = arr[0]\n        if firstnum\
    \ < 0 \n            firstnum = -firstnum\n            arr[1] = firstnum\n    \
    \    else \n            arr[1] = 0\n        for i in arr \n            if i >=\
    \ 0 \n                digit = floor(log10(i))\n                arr[1] += digit\
    \ \n            else \n                arr[1] += -digit \n        end\n    end\n\
    end\n</cell>\n<code language=julia-1.3>\ncount_nums(vec1)\n</cell>\n<code language=julia-1.3>\n\
    using Test\n\n@testset begin\n\ncandidate = count_nums;\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([-1, -2, 0]) == 0)\n\t@test(candidate([1, 1, 2, -2,\
    \ 3, 4, 5]) == 6)\n\t@test(candidate([1, 6, 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1,\
    \ 100, 98, -7, 1, -1]) == 4)\n\t@test(candidate([12, 23, 34, -45, -56, 0]) ==\
    \ 5)\n\t@test(candidate([0, 1]) == 1)\n\t@test(candidate([1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7q65_jls.jl:32\nin expression starting at\
    \ /tmp/tmp7q65_jls.jl:32\n"
  stdout: ''
  timestamp: 1660004025
- exit_code: 1
  program: "\"\"\"\n    Write a function count_nums which takes a vector of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([])\n    0\n \
    \   >>> count_nums([-1, 11, -11])\n    1\n    >>> count_nums([1, 1, 2])\n    3\n\
    \    \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    if !is_sorted(arr)\
    \ \n        arr = sort(arr)\n    end\n    sum = 0\n    idx = 0\n    for v in arr\n\
    \        while v > 0\n            if idx < length(v)\n                sum += v[idx]\n\
    \            end\n            v /= 10\n            idx += 1\n        end\n   \
    \ end\n    return sum\nend\n\"\"\"\n    Write a function count_nums which takes\
    \ a vector of integers and returns\n    the number of elements which has a sum\
    \ of digits > 0.\n    i.e. if -12 has signed digits -1, -2, and -3 then the sum\
    \ would be 0.\n    >>> count_nums([])\n    0\n    >>> count_nums([-1, 11, -11])\n\
    \    1\n    >>> count_nums([1, 1, 2])\n    3\n    \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = count_nums;\n\t@test(candidate(Vector{Int64}([])) == 0)\n\
    \t@test(candidate([-1, -2, 0]) == 0)\n\t@test(candidate([1, 1, 2, -2, 3, 4, 5])\
    \ == 6)\n\t@test(candidate([1, 6, 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1,\
    \ 100, 98, -7, 1, -1]) == 4)\n\t@test(candidate([12, 23, 34, -45, -56, 0]) ==\
    \ 5)\n\t@test(candidate([0, 1]) == 1)\n\t@test(candidate([1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nusing Test\n\
    \nStacktrace:\n [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level\
    \ scope\n   @ /tmp/tmpy6pesldw.jl:30\nin expression starting at /tmp/tmpy6pesldw.jl:30\n"
  stdout: ''
  timestamp: 1660004026
- exit_code: 1
  program: "\"\"\"\n    Write a function count_nums which takes a vector of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([])\n    0\n \
    \   >>> count_nums([-1, 11, -11])\n    1\n    >>> count_nums([1, 1, 2])\n    3\n\
    \    \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    if length(arr)==0\n\
    \        return 0\n    end\n    \n    count_nums(arr[1:end-1]) = (count_nums(arr[1:end-1])\
    \ - length(arr) + 1) \n    return count_nums(arr[1:end-1]) \nend\n</cell>\n<text>\n\
    Tests\nWe'll test our count_nums function using the tests package.\nusing Test\n\
    \n@testset begin\n\ncandidate = count_nums;\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([-1, -2, 0]) == 0)\n\t@test(candidate([1, 1, 2, -2,\
    \ 3, 4, 5]) == 6)\n\t@test(candidate([1, 6, 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1,\
    \ 100, 98, -7, 1, -1]) == 4)\n\t@test(candidate([12, 23, 34, -45, -56, 0]) ==\
    \ 5)\n\t@test(candidate([0, 1]) == 1)\n\t@test(candidate([1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"arr[1:(end - 1)]\" is not a valid function\
    \ argument name around /tmp/tmpbdnmgnuj.jl:18\nStacktrace:\n [1] top-level scope\n\
    \   @ /tmp/tmpbdnmgnuj.jl:1\nin expression starting at /tmp/tmpbdnmgnuj.jl:1\n"
  stdout: ''
  timestamp: 1660004025
- exit_code: 1
  program: "\"\"\"\n    Write a function count_nums which takes a vector of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([])\n    0\n \
    \   >>> count_nums([-1, 11, -11])\n    1\n    >>> count_nums([1, 1, 2])\n    3\n\
    \    \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n  count_sum = 0\n\
    \  i = 0\n  while i < length(arr)\n    if arr[i] > 0\n      count_sum += arr[i]\n\
    \      i += 1\n    else arr[i] < 0\n      count_sum -= abs(arr[i])\n      i +=\
    \ 1\n    end\n  end\n  count_sum\nend\n</code>\nThe above code works for positive\
    \ integers but will error out for negative integers. To fix it, you can take an\
    \ if statement to check if arr[i] is negative. If yes, add abs(arr[i]) to the\
    \ count_sum variable.\nAlso, the count_nums function now returns a Int64, not\
    \ an Int. Your code will now run as expected.\n<|/ a dscore=1 tags=julia |>\n\
    <| c |>\nthanks for the reply, but I didn't understand the code properly. could\
    \ you please explain it a bit.\n<|/ c |>\n<| c |>\nadded some explanation on the\
    \ code. Let me know if you need more clarification.\n<|/ c |>\n<| a |>\nI think\
    \ you can rewrite the function in this way:\n<code>\nusing Test\n\n@testset begin\n\
    \ncandidate = count_nums;\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([-1,\
    \ -2, 0]) == 0)\n\t@test(candidate([1, 1, 2, -2, 3, 4, 5]) == 6)\n\t@test(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1, 100, 98, -7, 1, -1]) == 4)\n\
    \t@test(candidate([12, 23, 34, -45, -56, 0]) == 5)\n\t@test(candidate([0, 1])\
    \ == 1)\n\t@test(candidate([1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0p_lkb8d.jl:27\nin expression starting at\
    \ /tmp/tmp0p_lkb8d.jl:27\n"
  stdout: ''
  timestamp: 1660004025
- exit_code: 1
  program: "\"\"\"\n    Write a function count_nums which takes a vector of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([])\n    0\n \
    \   >>> count_nums([-1, 11, -11])\n    1\n    >>> count_nums([1, 1, 2])\n    3\n\
    \    \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    arr |> takeWhile\
    \ (_ > 0) |> last\nend\n</cell>\n<code language=julia-0.6>\n@code_native count_nums([-111,\
    \ -1, 11, 11])\n</cell>\n<code language=julia-0.6>\n# Slow but correct\nusing\
    \ Test\n\n@testset begin\n\ncandidate = count_nums;\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([-1, -2, 0]) == 0)\n\t@test(candidate([1, 1, 2, -2,\
    \ 3, 4, 5]) == 6)\n\t@test(candidate([1, 6, 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1,\
    \ 100, 98, -7, 1, -1]) == 4)\n\t@test(candidate([12, 23, 34, -45, -56, 0]) ==\
    \ 5)\n\t@test(candidate([0, 1]) == 1)\n\t@test(candidate([1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: space before \"(\" not allowed in \"takeWhile\
    \ (\" at /tmp/tmpmndmt1r_.jl:14\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpmndmt1r_.jl:14\n\
    in expression starting at /tmp/tmpmndmt1r_.jl:14\n"
  stdout: ''
  timestamp: 1660004026
- exit_code: 1
  program: "\"\"\"\n    Write a function count_nums which takes a vector of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([])\n    0\n \
    \   >>> count_nums([-1, 11, -11])\n    1\n    >>> count_nums([1, 1, 2])\n    3\n\
    \    \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    for i in arr\n\
    \        return count_nums(arr) if (i>0)\n    end\n    return 0\nend\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nPlease do not post screenshots of code or data - put\
    \ it in your post, select it and type `ctrl-k` or the `{}` button to format it\
    \ as code\n<|/ c |>\n<| c |>\nApologies, I was unable to get the code to format\
    \ correctly. Thanks for the pointer.\n<|/ c |>\n<| c |>\nWhat do you mean? Just\
    \ copy and paste the code into your post?\n<|/ c |>\n<| c |>\nIf your code doesn't\
    \ format correctly, then please paste it into your post - I didn't need to do\
    \ any formatting here!\n<|/ c |>\n<| c |>\nOh, sorry. The code was formatted correctly,\
    \ just not properly copy/pasted here. It should be fixed now. Thank you!\n<|/\
    \ c |>\n<| a dscore=0 |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate =\
    \ count_nums;\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([-1,\
    \ -2, 0]) == 0)\n\t@test(candidate([1, 1, 2, -2, 3, 4, 5]) == 6)\n\t@test(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1, 100, 98, -7, 1, -1]) == 4)\n\
    \t@test(candidate([12, 23, 34, -45, -56, 0]) == 5)\n\t@test(candidate([0, 1])\
    \ == 1)\n\t@test(candidate([1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmpv6ji6roq.jl:14 expected \"\
    end\", got \"if\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpv6ji6roq.jl:15\n\
    in expression starting at /tmp/tmpv6ji6roq.jl:15\n"
  stdout: ''
  timestamp: 1660004025
- exit_code: 1
  program: "\"\"\"\n    Write a function count_nums which takes a vector of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([])\n    0\n \
    \   >>> count_nums([-1, 11, -11])\n    1\n    >>> count_nums([1, 1, 2])\n    3\n\
    \    \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    \n    if arr\
    \ == [] \n        return 0 \n    \n    count = 0\n    for i in arr \n        if\
    \ i > 0 \n            count += 1\n        end\n    end\n    return count\nend\n\
    using Test\n\n@testset begin\n\ncandidate = count_nums;\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([-1, -2, 0]) == 0)\n\t@test(candidate([1, 1, 2, -2,\
    \ 3, 4, 5]) == 6)\n\t@test(candidate([1, 6, 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1,\
    \ 100, 98, -7, 1, -1]) == 4)\n\t@test(candidate([12, 23, 34, -45, -56, 0]) ==\
    \ 5)\n\t@test(candidate([0, 1]) == 1)\n\t@test(candidate([1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpmouaklo7.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpmouaklo7.jl:1\n\
    in expression starting at /tmp/tmpmouaklo7.jl:1\n"
  stdout: ''
  timestamp: 1660004025
- exit_code: 1
  program: "\"\"\"\n    Write a function count_nums which takes a vector of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([])\n    0\n \
    \   >>> count_nums([-1, 11, -11])\n    1\n    >>> count_nums([1, 1, 2])\n    3\n\
    \    \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    sum=0\n    for\
    \ x in arr \n        if x < 0\n            sign = -sign(x)\n            x *= sign\n\
    \        end\n        sum += x\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.6>\n\
    count_nums(a)\n</cell>\n<text>\nExercise 3\nWrite a function that removes all\
    \ the leading zeros from an array\nusing Test\n\n@testset begin\n\ncandidate =\
    \ count_nums;\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([-1,\
    \ -2, 0]) == 0)\n\t@test(candidate([1, 1, 2, -2, 3, 4, 5]) == 6)\n\t@test(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1, 100, 98, -7, 1, -1]) == 4)\n\
    \t@test(candidate([12, 23, 34, -45, -56, 0]) == 5)\n\t@test(candidate([0, 1])\
    \ == 1)\n\t@test(candidate([1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2ydk227q.jl:24\nin expression starting at\
    \ /tmp/tmp2ydk227q.jl:24\n"
  stdout: ''
  timestamp: 1660004025
- exit_code: 1
  program: "\"\"\"\n    Write a function count_nums which takes a vector of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([])\n    0\n \
    \   >>> count_nums([-1, 11, -11])\n    1\n    >>> count_nums([1, 1, 2])\n    3\n\
    \    \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    \"\"\"Count\
    \ the number of numbers with positive digits\"\"\"\n    \n    arr = copy(arr)\n\
    \    for i in arr\n        if i != 0\n            count = 1\n            digit\
    \ = 1\n            while i > 0\n                if i mod 10 > digit\n        \
    \            count = 1\n                end\n                count *= 10\n   \
    \             digit += 1\n                i /= 10\n            end\n         \
    \   return count\n        end\n    end\n    return 0\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = count_nums;\n\t@test(candidate(Vector{Int64}([])) == 0)\n\
    \t@test(candidate([-1, -2, 0]) == 0)\n\t@test(candidate([1, 1, 2, -2, 3, 4, 5])\
    \ == 6)\n\t@test(candidate([1, 6, 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1,\
    \ 100, 98, -7, 1, -1]) == 4)\n\t@test(candidate([12, 23, 34, -45, -56, 0]) ==\
    \ 5)\n\t@test(candidate([0, 1]) == 1)\n\t@test(candidate([1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"10\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp_so8ao9v.jl:22\nin expression starting at /tmp/tmp_so8ao9v.jl:22\n"
  stdout: ''
  timestamp: 1660004026
- exit_code: 1
  program: "\"\"\"\n    Write a function count_nums which takes a vector of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([])\n    0\n \
    \   >>> count_nums([-1, 11, -11])\n    1\n    >>> count_nums([1, 1, 2])\n    3\n\
    \    \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n  ans = 0\n  for\
    \ n in arr\n    if n < 0\n      n1 = abs(n)\n      ans += (n1 & -n1) == n1\n \
    \   else\n      ans += 1\n  end\n  ans\nend\n</cell>\n<code language=julia-1.5>\n\
    count_nums([])\n</cell>\n<code language=julia-1.5>\ncount_nums([-1, 11, -11])\n\
    </cell>\n<code language=julia-1.5>\ncount_nums([1, 1, 2])\n</cell>\n<text>\nExercise:\
    \ Write a function that counts the number of positive integers \n  less than or\
    \ equal to $n$:\nusing Test\n\n@testset begin\n\ncandidate = count_nums;\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([-1, -2, 0]) == 0)\n\t@test(candidate([1, 1, 2, -2,\
    \ 3, 4, 5]) == 6)\n\t@test(candidate([1, 6, 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1,\
    \ 100, 98, -7, 1, -1]) == 4)\n\t@test(candidate([12, 23, 34, -45, -56, 0]) ==\
    \ 5)\n\t@test(candidate([0, 1]) == 1)\n\t@test(candidate([1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpp83fqyey.jl:24\nin expression starting at\
    \ /tmp/tmpp83fqyey.jl:24\n"
  stdout: ''
  timestamp: 1660004026
- exit_code: 1
  program: "\"\"\"\n    Write a function count_nums which takes a vector of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([])\n    0\n \
    \   >>> count_nums([-1, 11, -11])\n    1\n    >>> count_nums([1, 1, 2])\n    3\n\
    \    \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    for i in arr\n\
    \        if i > 0 \n            sum::Int64 = 0\n            for j in arr\n   \
    \             if j >= i\n                    sum += j\n                if j <\
    \ 0\n                    sum += j\n                    if sum > 0\n          \
    \              return 0\n                    else \n                        sum\
    \ = 0\n        end\n    end\n    return 1\nend\n</cell>\n<code language=julia-1.0>\n\
    count_nums(v)\n</cell>\n<code language=julia-1.0>\ncount_nums(zeros(10000000))\n\
    </cell>\n<code language=julia-1.0>\ncount_nums(v[10:end])\n</cell>\n<code language=julia-1.0>\n\
    count_nums(v[10:100000])\n</cell>\n<code language=julia-1.0>\ncount_nums(v[10:10000])\n\
    </cell>\n<code language=julia-1.0>\ncount_nums(v[10:100001])\n</cell>\n<code language=julia-1.0>\n\
    count_nums(v[10:100002])\n</cell>\n<code language=julia-1.0>\ncount_nums(v[10:100003])\n\
    </cell>\n<code language=julia-1.0>\ncount_nums(v[10:100004])\n</cell>\n<code language=julia-1.0>\n\
    count_nums(v[10:100005])\n</cell>\n<code language=julia-1.0>\ncount_nums(v[10:100006])\n\
    </cell>\n<code language=julia-1.0>\ncount_nums(v[10:100007])\n</cell>\n<code language=julia-1.0>\n\
    count_nums(v[10:100008])\n</cell>\n<code language=julia-1.0>\ncount_nums(v[10:100009])\n\
    </cell>\n<code language=julia-1.0>\ncount_nums(v[10:100010])\n</cell>\n<code language=julia-1.0>\n\
    count_nums(v[10:100011])\n</cell>\n<code language=julia-1.0>\ncount_nums(v[10:100012])\n\
    </cell>\n<code language=julia-1.0>\ncount_nums(v[10:100013])\n</cell>\n<code language=julia-1.0>\n\
    count_nums(v[10:100014])\n</cell>\n<code language=julia-1.0>\ncount_nums(v[10:100015])\n\
    </cell>\n<code language=julia-1.0>\ncount_nums(v[10:100016])\n</cell>\n<code language=julia-1.0>\n\
    count_nums(v[10:100017])\n</cell>\n<code language=julia-1.0>\ncount_nums(v[10:100018])\n\
    </cell>\n<code language=julia-1.0>\ncount_num\nusing Test\n\n@testset begin\n\n\
    candidate = count_nums;\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([-1,\
    \ -2, 0]) == 0)\n\t@test(candidate([1, 1, 2, -2, 3, 4, 5]) == 6)\n\t@test(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1, 100, 98, -7, 1, -1]) == 4)\n\
    \t@test(candidate([12, 23, 34, -45, -56, 0]) == 5)\n\t@test(candidate([0, 1])\
    \ == 1)\n\t@test(candidate([1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmps4f1_doi.jl:30\nin expression starting at\
    \ /tmp/tmps4f1_doi.jl:30\n"
  stdout: ''
  timestamp: 1660004026
- exit_code: 1
  program: "\"\"\"\n    Write a function count_nums which takes a vector of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([])\n    0\n \
    \   >>> count_nums([-1, 11, -11])\n    1\n    >>> count_nums([1, 1, 2])\n    3\n\
    \    \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    arr = arr.sort()\n\
    \    if arr[1] == -99 \n        return 0 \n    else \n        cnt = 0\n      \
    \  while arr[end]-arr[1] >= 0 \n            cnt += 1 \n            arr[end] -=\
    \ 1 \n        end\n    end\n    return cnt \nend\n</cell>\n<text>\nExercise 1:\n\
    Write a function which takes in a vector of numbers and returns the number of\
    \ elements that have a sum of digits of 5 and a sum of digits of  3 and a sum\
    \ of digits of  4.\nusing Test\n\n@testset begin\n\ncandidate = count_nums;\n\t\
    @test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([-1, -2, 0]) == 0)\n\
    \t@test(candidate([1, 1, 2, -2, 3, 4, 5]) == 6)\n\t@test(candidate([1, 6, 9, -6,\
    \ 0, 1, 5]) == 5)\n\t@test(candidate([1, 100, 98, -7, 1, -1]) == 4)\n\t@test(candidate([12,\
    \ 23, 34, -45, -56, 0]) == 5)\n\t@test(candidate([0, 1]) == 1)\n\t@test(candidate([1])\
    \ == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxtumvvry.jl:26\nin expression starting at\
    \ /tmp/tmpxtumvvry.jl:26\n"
  stdout: ''
  timestamp: 1660004027
- exit_code: 1
  program: "\"\"\"\n    Write a function count_nums which takes a vector of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([])\n    0\n \
    \   >>> count_nums([-1, 11, -11])\n    1\n    >>> count_nums([1, 1, 2])\n    3\n\
    \    \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    if arr == []\n\
    \        return 0\n    \n    \n    if any(iszero(arr))\n        return 0\n   \
    \ \n    sz = length(arr)\n    \n    \n    if sz == 0\n        return 0 \n    \n\
    \    \n    if iszero(arr[sz-1])\n        return sz\n    \n    \n    arr1 = arr[1:sz]\n\
    \    if any(arr1 > 0)\n        return sz\n    \n    \n    arr2 = arr1[end-1:end]\n\
    \    if any(arr2 > 0)\n        return sz\n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \nusing Test\n\n@testset begin\n\ncandidate\
    \ = count_nums;\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([-1,\
    \ -2, 0]) == 0)\n\t@test(candidate([1, 1, 2, -2, 3, 4, 5]) == 6)\n\t@test(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1, 100, 98, -7, 1, -1]) == 4)\n\
    \t@test(candidate([12, 23, 34, -45, -56, 0]) == 5)\n\t@test(candidate([0, 1])\
    \ == 1)\n\t@test(candidate([1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpz857hapm.jl:1\nin expression starting at /tmp/tmpz857hapm.jl:1\n"
  stdout: ''
  timestamp: 1660004026
- exit_code: 1
  program: "\"\"\"\n    Write a function count_nums which takes a vector of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([])\n    0\n \
    \   >>> count_nums([-1, 11, -11])\n    1\n    >>> count_nums([1, 1, 2])\n    3\n\
    \    \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    sum_digits =\
    \ 0\n    for i in arr\n        if i > 0 \n            sum_digits += digit_sum(i)\n\
    \        end\n    end\n    return sum_digits\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = count_nums;\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([-1,\
    \ -2, 0]) == 0)\n\t@test(candidate([1, 1, 2, -2, 3, 4, 5]) == 6)\n\t@test(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1, 100, 98, -7, 1, -1]) == 4)\n\
    \t@test(candidate([12, 23, 34, -45, -56, 0]) == 5)\n\t@test(candidate([0, 1])\
    \ == 1)\n\t@test(candidate([1]) == 1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 0 failed, 6 errored,
    0 broken.

    in expression starting at /tmp/tmpefi1dcui.jl:24

    '
  stdout: "test set: Error During Test at /tmp/tmpefi1dcui.jl:29\n  Test threw exception\n\
    \  Expression: candidate([1, 1, 2, -2, 3, 4, 5]) == 6\n  UndefVarError: digit_sum\
    \ not defined\n  Stacktrace:\n   [1] count_nums(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmpefi1dcui.jl:17\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpefi1dcui.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpefi1dcui.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpefi1dcui.jl:30\n  Test threw exception\n  Expression:\
    \ candidate([1, 6, 9, -6, 0, 1, 5]) == 5\n  UndefVarError: digit_sum not defined\n\
    \  Stacktrace:\n   [1] count_nums(arr::Vector{Int64})\n     @ Main /tmp/tmpefi1dcui.jl:17\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpefi1dcui.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpefi1dcui.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpefi1dcui.jl:31\n  Test threw exception\n  Expression:\
    \ candidate([1, 100, 98, -7, 1, -1]) == 4\n  UndefVarError: digit_sum not defined\n\
    \  Stacktrace:\n   [1] count_nums(arr::Vector{Int64})\n     @ Main /tmp/tmpefi1dcui.jl:17\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpefi1dcui.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpefi1dcui.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpefi1dcui.jl:32\n  Test threw exception\n  Expression:\
    \ candidate([12, 23, 34, -45, -56, 0]) == 5\n  UndefVarError: digit_sum not defined\n\
    \  Stacktrace:\n   [1] count_nums(arr::Vector{Int64})\n     @ Main /tmp/tmpefi1dcui.jl:17\n\
    \   [2] macro expansio"
  timestamp: 1660004029
- exit_code: 1
  program: "\"\"\"\n    Write a function count_nums which takes a vector of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([])\n    0\n \
    \   >>> count_nums([-1, 11, -11])\n    1\n    >>> count_nums([1, 1, 2])\n    3\n\
    \    \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    count_nums@Base\
    \ \nend\n</cell>\n<text>\nNotice that the last line is indented under the function,\
    \ to indicate that it is in its own\nscope. This scoping is very important in\
    \ Julia. It is very important that you understand it so you can write efficient\
    \ code. Forgetting to indent the last line will bite you hard.\nusing Test\n\n\
    @testset begin\n\ncandidate = count_nums;\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([-1, -2, 0]) == 0)\n\t@test(candidate([1, 1, 2, -2,\
    \ 3, 4, 5]) == 6)\n\t@test(candidate([1, 6, 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1,\
    \ 100, 98, -7, 1, -1]) == 4)\n\t@test(candidate([12, 23, 34, -45, -56, 0]) ==\
    \ 5)\n\t@test(candidate([0, 1]) == 1)\n\t@test(candidate([1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"function\" at /tmp/tmpd0gsbdsj.jl:13 expected\
    \ \"end\", got \"@\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpd0gsbdsj.jl:14\n\
    in expression starting at /tmp/tmpd0gsbdsj.jl:14\n"
  stdout: ''
  timestamp: 1660004027
- exit_code: 1
  program: "\"\"\"\n    Write a function count_nums which takes a vector of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([])\n    0\n \
    \   >>> count_nums([-1, 11, -11])\n    1\n    >>> count_nums([1, 1, 2])\n    3\n\
    \    \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    count = 0\n\
    \    for i in arr \n        if i >= 0 \n            count += floor((i-1)/10)*10\
    \ + floor(i/10)\n        end\n    end\n    return count\nend\n</code>\n<|/ a dscore=0\
    \ |>\n<| a dscore=0 tags=julia,math,algorithm |>\nHere is an answer with benchmarks\
    \ including all answers from\n<code>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = count_nums;\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([-1,\
    \ -2, 0]) == 0)\n\t@test(candidate([1, 1, 2, -2, 3, 4, 5]) == 6)\n\t@test(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1, 100, 98, -7, 1, -1]) == 4)\n\
    \t@test(candidate([12, 23, 34, -45, -56, 0]) == 5)\n\t@test(candidate([0, 1])\
    \ == 1)\n\t@test(candidate([1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzksh5_4p.jl:22\nin expression starting at\
    \ /tmp/tmpzksh5_4p.jl:22\n"
  stdout: ''
  timestamp: 1660004027
- exit_code: 1
  program: "\"\"\"\n    Write a function count_nums which takes a vector of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([])\n    0\n \
    \   >>> count_nums([-1, 11, -11])\n    1\n    >>> count_nums([1, 1, 2])\n    3\n\
    \    \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    \"\"\"Count\
    \ the number of elements which has a sum of digits > 0.\"\"\"\n    cnt = 0\n \
    \   for i in arr\n        if isqrt(i) > 0\n            cnt += 1\n        end\n\
    \    end\n    return cnt\nend\n</cell>\n<code language=julia-1.4>\nusing Test\n\
    \n@testset begin\n\ncandidate = count_nums;\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([-1, -2, 0]) == 0)\n\t@test(candidate([1, 1, 2, -2,\
    \ 3, 4, 5]) == 6)\n\t@test(candidate([1, 6, 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1,\
    \ 100, 98, -7, 1, -1]) == 4)\n\t@test(candidate([12, 23, 34, -45, -56, 0]) ==\
    \ 5)\n\t@test(candidate([0, 1]) == 1)\n\t@test(candidate([1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpl1b82_x3.jl:23\nin expression starting at\
    \ /tmp/tmpl1b82_x3.jl:23\n"
  stdout: ''
  timestamp: 1660004027
- exit_code: 1
  program: "\"\"\"\n    Write a function count_nums which takes a vector of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([])\n    0\n \
    \   >>> count_nums([-1, 11, -11])\n    1\n    >>> count_nums([1, 1, 2])\n    3\n\
    \    \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    count = sum(arr.>0)\n\
    \    if count > 0\n        sign = -sign(first(arr))\n        count *= sign\n \
    \   end\n    count\nend\n</cell>\n<cell>\n@assert count_nums([-1, 11, -11]) ==\
    \ -1\n@assert count_nums([-3, -9, 11, -10]) == -9\n@assert count_nums([-1, 0,\
    \ 1, -4, -3, 3, -1]) == 0\n@assert count_nums([1, 1, 1, 1, 1]) == 1\n@assert count_nums([1,\
    \ 2, 3, 4, 5]) == 4\n@assert count_nums([1, 1, -2, 3, -4, -5, -7, -9, -8]) ==\
    \ -8\n</cell>\n<text>\nWrite a function that computes the sum of the digits of\
    \ an integer.\nFor example, given 111 return 3 because 3 + 1 + 1 = 6.\nThat is,\
    \ sum the digits of an integer\nusing Test\n\n@testset begin\n\ncandidate = count_nums;\n\
    \t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([-1, -2, 0]) ==\
    \ 0)\n\t@test(candidate([1, 1, 2, -2, 3, 4, 5]) == 6)\n\t@test(candidate([1, 6,\
    \ 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1, 100, 98, -7, 1, -1]) == 4)\n\t\
    @test(candidate([12, 23, 34, -45, -56, 0]) == 5)\n\t@test(candidate([0, 1]) ==\
    \ 1)\n\t@test(candidate([1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphzxir_ee.jl:21\nin expression starting at\
    \ /tmp/tmphzxir_ee.jl:21\n"
  stdout: ''
  timestamp: 1660004027
- exit_code: 1
  program: "\"\"\"\n    Write a function count_nums which takes a vector of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([])\n    0\n \
    \   >>> count_nums([-1, 11, -11])\n    1\n    >>> count_nums([1, 1, 2])\n    3\n\
    \    \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    n=0\n    for\
    \ x in arr\n        if x<0 \n            n += (x<0)\n        else\n          \
    \  n += getSumDigits(x)\n        end\n    end\n    return n\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = count_nums;\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([-1, -2, 0]) == 0)\n\t@test(candidate([1, 1, 2, -2,\
    \ 3, 4, 5]) == 6)\n\t@test(candidate([1, 6, 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1,\
    \ 100, 98, -7, 1, -1]) == 4)\n\t@test(candidate([12, 23, 34, -45, -56, 0]) ==\
    \ 5)\n\t@test(candidate([0, 1]) == 1)\n\t@test(candidate([1]) == 1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpr82__kvd.jl:26

    '
  stdout: "test set: Error During Test at /tmp/tmpr82__kvd.jl:30\n  Test threw exception\n\
    \  Expression: candidate([-1, -2, 0]) == 0\n  UndefVarError: getSumDigits not\
    \ defined\n  Stacktrace:\n   [1] count_nums(arr::Vector{Int64})\n     @ Main /tmp/tmpr82__kvd.jl:19\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpr82__kvd.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpr82__kvd.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpr82__kvd.jl:31\n  Test threw exception\n  Expression:\
    \ candidate([1, 1, 2, -2, 3, 4, 5]) == 6\n  UndefVarError: getSumDigits not defined\n\
    \  Stacktrace:\n   [1] count_nums(arr::Vector{Int64})\n     @ Main /tmp/tmpr82__kvd.jl:19\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpr82__kvd.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpr82__kvd.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpr82__kvd.jl:32\n  Test threw exception\n  Expression:\
    \ candidate([1, 6, 9, -6, 0, 1, 5]) == 5\n  UndefVarError: getSumDigits not defined\n\
    \  Stacktrace:\n   [1] count_nums(arr::Vector{Int64})\n     @ Main /tmp/tmpr82__kvd.jl:19\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpr82__kvd.jl:32 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpr82__kvd.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpr82__kvd.jl:33\n  Test threw exception\n  Expression:\
    \ candidate([1, 100, 98, -7, 1, -1]) == 4\n  UndefVarError: getSumDigits not defined\n\
    \  Stacktrace:\n   [1] count_nums(arr::Vector{Int64})\n     @ Main /tmp/tmpr82__kvd.jl:19\n\
    \   [2] macro expansion\n"
  timestamp: 1660004029
- exit_code: 1
  program: "\"\"\"\n    Write a function count_nums which takes a vector of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([])\n    0\n \
    \   >>> count_nums([-1, 11, -11])\n    1\n    >>> count_nums([1, 1, 2])\n    3\n\
    \    \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    \"\"\"\n   \
    \ Write a function count_nums which takes a vector of integers and returns\n \
    \   the number of elements which has a sum of digits > 0.\n    If a number is\
    \ negative, then its first signed digit will be negative:\n    e.g. -123 has signed\
    \ digits -1, 2, and 3.\n    >>> count_nums([])\n    0\n    >>> count_nums([-1,\
    \ 11, -11])\n    1\n    >>> count_nums([1, 1, 2])\n    3\n    \"\"\"\n \n    \"\
    \"\"\n    Write a function count_nums which takes a vector of integers and returns\n\
    \    the number of elements which has a sum of digits > 0.\n    If a number is\
    \ negative, then its first signed digit will be negative:\n    e.g. -123 has signed\
    \ digits -1, 2, and 3.\n    >>> count_nums([])\n    0\n    >>> count_nums([-1,\
    \ 11, -11])\n    1\n    >>> count_nums([1, 1, 2])\n    3\n    \"\"\"\n    return\
    \ sum(arr.>0)\nend\n</cell>\n<text>\nProblem 2b\nusing Test\n\n@testset begin\n\
    \ncandidate = count_nums;\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([-1,\
    \ -2, 0]) == 0)\n\t@test(candidate([1, 1, 2, -2, 3, 4, 5]) == 6)\n\t@test(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1, 100, 98, -7, 1, -1]) == 4)\n\
    \t@test(candidate([12, 23, 34, -45, -56, 0]) == 5)\n\t@test(candidate([0, 1])\
    \ == 1)\n\t@test(candidate([1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwah8j2ei.jl:41\nin expression starting at\
    \ /tmp/tmpwah8j2ei.jl:41\n"
  stdout: ''
  timestamp: 1660004027
- exit_code: 1
  program: "\"\"\"\n    Write a function count_nums which takes a vector of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([])\n    0\n \
    \   >>> count_nums([-1, 11, -11])\n    1\n    >>> count_nums([1, 1, 2])\n    3\n\
    \    \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    if arr == []\n\
    \        return 0 \n    sum_digits = 0..0\n    for a in arr\n        sum_digits\
    \ += floor(Int64(a))\n    return count_nums(sum_digits .> 0)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = count_nums;\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([-1, -2, 0]) == 0)\n\t@test(candidate([1, 1, 2, -2,\
    \ 3, 4, 5]) == 6)\n\t@test(candidate([1, 6, 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1,\
    \ 100, 98, -7, 1, -1]) == 4)\n\t@test(candidate([12, 23, 34, -45, -56, 0]) ==\
    \ 5)\n\t@test(candidate([0, 1]) == 1)\n\t@test(candidate([1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpphy_5amv.jl:1\nin expression starting at /tmp/tmpphy_5amv.jl:1\n"
  stdout: ''
  timestamp: 1660004027
- exit_code: 1
  program: "\"\"\"\n    Write a function count_nums which takes a vector of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([])\n    0\n \
    \   >>> count_nums([-1, 11, -11])\n    1\n    >>> count_nums([1, 1, 2])\n    3\n\
    \    \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    count = 0\n\
    \    arrlen = length(arr)\n    for i in 1:arrlen \n        if arr[i] > 0 \n  \
    \          count += 1\n        end\n    end\n    return count\nend\n</cell>\n\
    <code language=julia-1.1>\ncount_nums([1, -1, -3])\n</cell>\n<code language=julia-1.1>\n\
    count_nums([1, -2, 3])\n</cell>\n<text>\nSolution 3: Using Loops\nThe for loop\
    \ in Julia is very similar to the for loop in other languages, \nbut there are\
    \ some important differences:\nusing Test\n\n@testset begin\n\ncandidate = count_nums;\n\
    \t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([-1, -2, 0]) ==\
    \ 0)\n\t@test(candidate([1, 1, 2, -2, 3, 4, 5]) == 6)\n\t@test(candidate([1, 6,\
    \ 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1, 100, 98, -7, 1, -1]) == 4)\n\t\
    @test(candidate([12, 23, 34, -45, -56, 0]) == 5)\n\t@test(candidate([0, 1]) ==\
    \ 1)\n\t@test(candidate([1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnt9dycpt.jl:23\nin expression starting at\
    \ /tmp/tmpnt9dycpt.jl:23\n"
  stdout: ''
  timestamp: 1660004027
- exit_code: 1
  program: "\"\"\"\n    Write a function count_nums which takes a vector of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([])\n    0\n \
    \   >>> count_nums([-1, 11, -11])\n    1\n    >>> count_nums([1, 1, 2])\n    3\n\
    \    \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    return Int64(\
    \ # Convert to Int64 from Int\n        ifelse( \n            arr[1] == 0, # First\
    \ element has no digit\n            ifelse(\n                arr[1] < 0, # First\
    \ element has negative digit\n                    -arr[1] + 1, # First element\
    \ is -ve\n                    count_nums(arr[2 : end]) # Else get number of digits\
    \ on rest of array\n                ),\n            arr[1] < 0, # First element\
    \ has negative digit\n                -arr[1] + 1, # First element is -ve\n  \
    \              count_nums(arr[2 : end]) # Else get number of digits on rest of\
    \ array\n            ) + \n            sum(i for i in arr \n                if\
    \ i >= 0) # Only consider elements >= 0\n            )\n        )\nend\n</cell>\n\
    <cell>\ncount_nums([-1, 10, -5, -2, 8, 0, -12, 0, -24])\n</cell>\n<text>\nThe\
    \ solution\nWe are only going to solve this for Int64 arrays. We also have to\
    \ keep track of how many elements we are looking at at each level of the recursion.\n\
    using Test\n\n@testset begin\n\ncandidate = count_nums;\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([-1, -2, 0]) == 0)\n\t@test(candidate([1, 1, 2, -2,\
    \ 3, 4, 5]) == 6)\n\t@test(candidate([1, 6, 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1,\
    \ 100, 98, -7, 1, -1]) == 4)\n\t@test(candidate([12, 23, 34, -45, -56, 0]) ==\
    \ 5)\n\t@test(candidate([0, 1]) == 1)\n\t@test(candidate([1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpwhvt5l58.jl:29\nin expression starting at /tmp/tmpwhvt5l58.jl:29\n"
  stdout: ''
  timestamp: 1660004027
- exit_code: 1
  program: "\"\"\"\n    Write a function count_nums which takes a vector of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([])\n    0\n \
    \   >>> count_nums([-1, 11, -11])\n    1\n    >>> count_nums([1, 1, 2])\n    3\n\
    \    \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    n = 0\n    for\
    \ e in arr\n        n += digits_sum(e)\n    end\n    return n\nend\n</cell>\n\
    <text>\nExercise: Write a function that returns the index of the element which\
    \ has a sum of digits > 0.\nusing Test\n\n@testset begin\n\ncandidate = count_nums;\n\
    \t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([-1, -2, 0]) ==\
    \ 0)\n\t@test(candidate([1, 1, 2, -2, 3, 4, 5]) == 6)\n\t@test(candidate([1, 6,\
    \ 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1, 100, 98, -7, 1, -1]) == 4)\n\t\
    @test(candidate([12, 23, 34, -45, -56, 0]) == 5)\n\t@test(candidate([0, 1]) ==\
    \ 1)\n\t@test(candidate([1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpitvovu2m.jl:20\nin expression starting at\
    \ /tmp/tmpitvovu2m.jl:20\n"
  stdout: ''
  timestamp: 1660004027
- exit_code: 1
  program: "\"\"\"\n    Write a function count_nums which takes a vector of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([])\n    0\n \
    \   >>> count_nums([-1, 11, -11])\n    1\n    >>> count_nums([1, 1, 2])\n    3\n\
    \    \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    cnt_nums = zero(Int64)\n\
    \    for n in arr\n        if n > 0\n            cnt_nums += 1\n        end\n\
    \    end\n    cnt_nums\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n\
    @testset begin\n\ncandidate = count_nums;\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([-1, -2, 0]) == 0)\n\t@test(candidate([1, 1, 2, -2,\
    \ 3, 4, 5]) == 6)\n\t@test(candidate([1, 6, 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1,\
    \ 100, 98, -7, 1, -1]) == 4)\n\t@test(candidate([12, 23, 34, -45, -56, 0]) ==\
    \ 5)\n\t@test(candidate([0, 1]) == 1)\n\t@test(candidate([1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmoloxuto.jl:22\nin expression starting at\
    \ /tmp/tmpmoloxuto.jl:22\n"
  stdout: ''
  timestamp: 1660004027
- exit_code: 1
  program: "\"\"\"\n    Write a function count_nums which takes a vector of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([])\n    0\n \
    \   >>> count_nums([-1, 11, -11])\n    1\n    >>> count_nums([1, 1, 2])\n    3\n\
    \    \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    sum = 0\n  \
    \  for i in arr\n        sum += i\n    end\n    return sum\nend\n</cell>\n<text>\n\
    Now that we can count how many elements in a vector have the sum greater than\
    \ 0, we can use the count_nums function to answer a question like:\nusing Test\n\
    \n@testset begin\n\ncandidate = count_nums;\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([-1, -2, 0]) == 0)\n\t@test(candidate([1, 1, 2, -2,\
    \ 3, 4, 5]) == 6)\n\t@test(candidate([1, 6, 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1,\
    \ 100, 98, -7, 1, -1]) == 4)\n\t@test(candidate([12, 23, 34, -45, -56, 0]) ==\
    \ 5)\n\t@test(candidate([0, 1]) == 1)\n\t@test(candidate([1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvt4iqlru.jl:20\nin expression starting at\
    \ /tmp/tmpvt4iqlru.jl:20\n"
  stdout: ''
  timestamp: 1660004027
- exit_code: 1
  program: "\"\"\"\n    Write a function count_nums which takes a vector of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([])\n    0\n \
    \   >>> count_nums([-1, 11, -11])\n    1\n    >>> count_nums([1, 1, 2])\n    3\n\
    \    \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    return sum(\
    \ map( iszero, arr ) )\nend count_nums\n</cell>\n<text>\nNow write a function\
    \ to sum all the numbers in the array in the function count_nums. \nFor example,\
    \ if the input is  [-1, 11, -5, 2, -3, 1, -4, 2, 0], the output is 3.\nusing Test\n\
    \n@testset begin\n\ncandidate = count_nums;\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([-1, -2, 0]) == 0)\n\t@test(candidate([1, 1, 2, -2,\
    \ 3, 4, 5]) == 6)\n\t@test(candidate([1, 6, 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1,\
    \ 100, 98, -7, 1, -1]) == 4)\n\t@test(candidate([12, 23, 34, -45, -56, 0]) ==\
    \ 5)\n\t@test(candidate([0, 1]) == 1)\n\t@test(candidate([1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: extra token \"count_nums\" after end of expression\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmpnajmnj9_.jl:15\nin expression\
    \ starting at /tmp/tmpnajmnj9_.jl:15\n"
  stdout: ''
  timestamp: 1660004028
- exit_code: 1
  program: "\"\"\"\n    Write a function count_nums which takes a vector of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([])\n    0\n \
    \   >>> count_nums([-1, 11, -11])\n    1\n    >>> count_nums([1, 1, 2])\n    3\n\
    \    \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    count_nums_helper(arr,\
    \ 0, 0)\nend\n</cell>\n<code language=julia-1.1>\ncount_nums([-2, 1, 2, 5, -3])\n\
    </cell>\n<text>\nNext let's write a function to sum all elements in an array which\
    \ have a sum of digits > 0.\nusing Test\n\n@testset begin\n\ncandidate = count_nums;\n\
    \t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([-1, -2, 0]) ==\
    \ 0)\n\t@test(candidate([1, 1, 2, -2, 3, 4, 5]) == 6)\n\t@test(candidate([1, 6,\
    \ 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1, 100, 98, -7, 1, -1]) == 4)\n\t\
    @test(candidate([12, 23, 34, -45, -56, 0]) == 5)\n\t@test(candidate([0, 1]) ==\
    \ 1)\n\t@test(candidate([1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwxppx1eb.jl:16\nin expression starting at\
    \ /tmp/tmpwxppx1eb.jl:16\n"
  stdout: ''
  timestamp: 1660004028
- exit_code: 1
  program: "\"\"\"\n    Write a function count_nums which takes a vector of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([])\n    0\n \
    \   >>> count_nums([-1, 11, -11])\n    1\n    >>> count_nums([1, 1, 2])\n    3\n\
    \    \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    count = 0\n\
    \    for i in arr\n        if i > 0 \n            count = count + 1\n        end\
    \ \n    end\n    return count\nend\n</cell>\n<code language=julia-1.0>\ncount_nums(Int64.(-11))\n\
    </cell>\n<code language=julia-1.0>\ncount_nums(Int64.(-112))\n</cell>\n<code language=julia-1.0>\n\
    count_nums(Int64.(-12))\n</cell>\n<text>\nPart 2: Write a function that returns\
    \ the absolute value of a number.\nusing Test\n\n@testset begin\n\ncandidate =\
    \ count_nums;\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([-1,\
    \ -2, 0]) == 0)\n\t@test(candidate([1, 1, 2, -2, 3, 4, 5]) == 6)\n\t@test(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1, 100, 98, -7, 1, -1]) == 4)\n\
    \t@test(candidate([12, 23, 34, -45, -56, 0]) == 5)\n\t@test(candidate([0, 1])\
    \ == 1)\n\t@test(candidate([1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppvymu20p.jl:22\nin expression starting at\
    \ /tmp/tmppvymu20p.jl:22\n"
  stdout: ''
  timestamp: 1660004028
- exit_code: 1
  program: "\"\"\"\n    Write a function count_nums which takes a vector of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([])\n    0\n \
    \   >>> count_nums([-1, 11, -11])\n    1\n    >>> count_nums([1, 1, 2])\n    3\n\
    \    \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    for x in arr\n\
    \        if x < 0\n            firstx = -1 * (floor(log10(x)) % 10)\n        \
    \    x -= firstx\n        end\n        if x > 0\n            secondx = floor(log10(x))\
    \ % 10\n            x -= secondx\n        end\n        if x == 0\n           \
    \ thirdx = floor(log10(x)) % 10\n            x -= thirdx\n        end\n      \
    \  if x == 0\n            fourthx = floor(log10(x)) % 10\n            x -= fourthx\n\
    \        end\n        if x > 0\n            fifthx = floor(log10(x)) % 10\n  \
    \          x -= fifthx\n        end\n        if x > 4\n            sixthx = floor(log10(x))\
    \ % 10\n            x -= sixthx\n        end\n        if x > 8\n            seventhx\
    \ = floor(log10(x)) % 10\n            x -= seventhx\n        end\n        if x\
    \ > 12\n            eighthx = floor(log10(x)) % 10\n            x -= eighthx\n\
    \        end\n        if x > 16\n            ninthx = floor(log10(x)) % 10\n \
    \           x -= ninthx\n        end\n        if x > 20\n            tenthx =\
    \ floor(log10(x)) % 10\n            x -= tenthx\n        end\n        if x > 24\n\
    \            eleventhx = floor(log10(x)) % 10\n            x -= eleventhx\n  \
    \      end\n        if x > 30\n            twelvethx = floor(log10(x)) % 10\n\
    \            x -= twelvethx\n        end\n        if x > 36\n            thirteenthx\
    \ = floor(log10(x)) % 10\n            x -= thirteenthx\n        end\n        if\
    \ x > 42\n            fourtwentyfirstx = floor(log10(x)) % 10\n            x -=\
    \ fourtwentyfirstx\n        end\n        if x > 48\n            fourtwentysecondx\
    \ = floor(log10(x)) % 10\n            x -= fourtwentysecondx\n        end\n  \
    \      if x > 54\n            fourtwentythirdx = floor(log10(x)) % 10\n      \
    \      x -= fourtwentythirdx\n        end\n        if x > 60\n            fourtwentyfourthx\
    \ = floor(log10(x)) % 10\n            x -= fourtwentyfourthx\n        end\n  \
    \      if x > 68\n            fourtwentyfifthx = floor(log10(x)) % 10\n      \
    \      x -= fourtwentyfifthx\n        end\n        if x > 76\n            fourtwentysixthx\
    \ = floor(log10(x)) % 10\n            x -= fourtwentysixthx\n        end\n   \
    \     if x > \nusing Test\n\n@testset begin\n\ncandidate = count_nums;\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([-1, -2, 0]) == 0)\n\t@test(candidate([1, 1, 2, -2,\
    \ 3, 4, 5]) == 6)\n\t@test(candidate([1, 6, 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1,\
    \ 100, 98, -7, 1, -1]) == 4)\n\t@test(candidate([12, 23, 34, -45, -56, 0]) ==\
    \ 5)\n\t@test(candidate([0, 1]) == 1)\n\t@test(candidate([1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpicecn9yr.jl:1\nin expression starting at /tmp/tmpicecn9yr.jl:1\n"
  stdout: ''
  timestamp: 1660004028
- exit_code: 1
  program: "\"\"\"\n    Write a function count_nums which takes a vector of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([])\n    0\n \
    \   >>> count_nums([-1, 11, -11])\n    1\n    >>> count_nums([1, 1, 2])\n    3\n\
    \    \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    if arr == []\
    \ \n        return 0 \n    \n    first = arr[1] \n    last  = arr[-1] \n    \n\
    \    if first < 0 \n        return count_nums(arr[last+1:end]) + first \n    \n\
    \    else \n        return count_nums(arr[first+1:last]) + first \nend\n</cell>\n\
    <text>\nNow we have:\nusing Test\n\n@testset begin\n\ncandidate = count_nums;\n\
    \t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([-1, -2, 0]) ==\
    \ 0)\n\t@test(candidate([1, 1, 2, -2, 3, 4, 5]) == 6)\n\t@test(candidate([1, 6,\
    \ 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1, 100, 98, -7, 1, -1]) == 4)\n\t\
    @test(candidate([12, 23, 34, -45, -56, 0]) == 5)\n\t@test(candidate([0, 1]) ==\
    \ 1)\n\t@test(candidate([1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjcvn2mb1.jl:26\nin expression starting at\
    \ /tmp/tmpjcvn2mb1.jl:26\n"
  stdout: ''
  timestamp: 1660004028
- exit_code: 1
  program: "\"\"\"\n    Write a function count_nums which takes a vector of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([])\n    0\n \
    \   >>> count_nums([-1, 11, -11])\n    1\n    >>> count_nums([1, 1, 2])\n    3\n\
    \    \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    return sum(i\
    \ for i in arr if i >= 0)\nend\ncount_nums(v) # testing\n</cell>\n<text>\nExercise\
    \ 9\nusing Test\n\n@testset begin\n\ncandidate = count_nums;\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([-1, -2, 0]) == 0)\n\t@test(candidate([1, 1, 2, -2,\
    \ 3, 4, 5]) == 6)\n\t@test(candidate([1, 6, 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1,\
    \ 100, 98, -7, 1, -1]) == 4)\n\t@test(candidate([12, 23, 34, -45, -56, 0]) ==\
    \ 5)\n\t@test(candidate([0, 1]) == 1)\n\t@test(candidate([1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: UndefVarError: v not defined\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp9zom4gbq.jl:16\nin expression starting at /tmp/tmp9zom4gbq.jl:16\n"
  stdout: ''
  timestamp: 1660004028
- exit_code: 1
  program: "\"\"\"\n    Write a function count_nums which takes a vector of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([])\n    0\n \
    \   >>> count_nums([-1, 11, -11])\n    1\n    >>> count_nums([1, 1, 2])\n    3\n\
    \    \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    return sum(arr\
    \ |> sign)\nend\n</cell>\n<code language=julia-1.5>\ncount_nums([-1, 11, -11])\n\
    </cell>\n<code language=julia-1.5>\n@code_native(count_nums)\n</cell>\n<text>\n\
    Exercise: Write a count_nums_v which works on any iterable of integers, and returns\
    \ the number of elements which has a sum of digits > 0.\nIf there is a number\
    \ with negative first digit, then it must have a second digit > 0, too:\ne.g.\
    \ -123 has signed digits -1, 2 and 3.\nIn general, this problem is equivalent\
    \ to counting numbers of length n which satisfy a condition x1 + ... + xn-1 >\
    \ 0.\nThe function count_nums_v will be similar to count_nums, except that it\
    \ will operate on vectors of length n.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = count_nums;\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([-1,\
    \ -2, 0]) == 0)\n\t@test(candidate([1, 1, 2, -2, 3, 4, 5]) == 6)\n\t@test(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1, 100, 98, -7, 1, -1]) == 4)\n\
    \t@test(candidate([12, 23, 34, -45, -56, 0]) == 5)\n\t@test(candidate([0, 1])\
    \ == 1)\n\t@test(candidate([1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6_7kl28f.jl:16\nin expression starting at\
    \ /tmp/tmp6_7kl28f.jl:16\n"
  stdout: ''
  timestamp: 1660004028
- exit_code: 1
  program: "\"\"\"\n    Write a function count_nums which takes a vector of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([])\n    0\n \
    \   >>> count_nums([-1, 11, -11])\n    1\n    >>> count_nums([1, 1, 2])\n    3\n\
    \    \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    for i in arr\
    \ \n        if i < 0 \n            i = abs(i)\n        end\n        if sum(isqrt(i.digits))\
    \ \n            return 1\n        else \n            return 0\n        end\n \
    \   end\n    return 0\nend\n</cell>\n<text>\nAnd now use count_nums to solve the\
    \ problem:\nusing Test\n\n@testset begin\n\ncandidate = count_nums;\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([-1, -2, 0]) == 0)\n\t@test(candidate([1, 1, 2, -2,\
    \ 3, 4, 5]) == 6)\n\t@test(candidate([1, 6, 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1,\
    \ 100, 98, -7, 1, -1]) == 4)\n\t@test(candidate([12, 23, 34, -45, -56, 0]) ==\
    \ 5)\n\t@test(candidate([0, 1]) == 1)\n\t@test(candidate([1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfbge4m33.jl:26\nin expression starting at\
    \ /tmp/tmpfbge4m33.jl:26\n"
  stdout: ''
  timestamp: 1660004028
- exit_code: 1
  program: "\"\"\"\n    Write a function count_nums which takes a vector of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([])\n    0\n \
    \   >>> count_nums([-1, 11, -11])\n    1\n    >>> count_nums([1, 1, 2])\n    3\n\
    \    \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    ans=0\n    for\
    \ n in arr\n        if sum(n)>0\n            ans+=1\n        end\n    end\n  \
    \  ans\nend\ncount_nums([-1,-11,11])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes an array of integers nums and returns the\nnumber of elements of\
    \ nums that have an even sum.\nusing Test\n\n@testset begin\n\ncandidate = count_nums;\n\
    \t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([-1, -2, 0]) ==\
    \ 0)\n\t@test(candidate([1, 1, 2, -2, 3, 4, 5]) == 6)\n\t@test(candidate([1, 6,\
    \ 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1, 100, 98, -7, 1, -1]) == 4)\n\t\
    @test(candidate([12, 23, 34, -45, -56, 0]) == 5)\n\t@test(candidate([0, 1]) ==\
    \ 1)\n\t@test(candidate([1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5y8n3i_v.jl:23\nin expression starting at\
    \ /tmp/tmp5y8n3i_v.jl:23\n"
  stdout: ''
  timestamp: 1660004028
- exit_code: 1
  program: "\"\"\"\n    Write a function count_nums which takes a vector of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([])\n    0\n \
    \   >>> count_nums([-1, 11, -11])\n    1\n    >>> count_nums([1, 1, 2])\n    3\n\
    \    \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    count=0\n  \
    \  for num in arr\n        if num >= 0\n            count+=1\n        end\n  \
    \  end\n    return count\nend\n</cell>\n<text>\nExercise 4\nWrite a function that\
    \ finds the index of the first occurrence of the number 15 in a vector of Int64.\n\
    If the number 15 is not present, the function should return -1.\nIf the number\
    \ is present, the function should return the index of the first occurrence of\
    \ the number 15 in the vector.\nA vector with only negative numbers is not a valid\
    \ argument, so the function should return -1.\nusing Test\n\n@testset begin\n\n\
    candidate = count_nums;\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([-1,\
    \ -2, 0]) == 0)\n\t@test(candidate([1, 1, 2, -2, 3, 4, 5]) == 6)\n\t@test(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1, 100, 98, -7, 1, -1]) == 4)\n\
    \t@test(candidate([12, 23, 34, -45, -56, 0]) == 5)\n\t@test(candidate([0, 1])\
    \ == 1)\n\t@test(candidate([1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqtzfzlwh.jl:22\nin expression starting at\
    \ /tmp/tmpqtzfzlwh.jl:22\n"
  stdout: ''
  timestamp: 1660004029
- exit_code: 1
  program: "\"\"\"\n    Write a function count_nums which takes a vector of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([])\n    0\n \
    \   >>> count_nums([-1, 11, -11])\n    1\n    >>> count_nums([1, 1, 2])\n    3\n\
    \    \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    counter = 0\n\
    \    for a in arr\n        if a > 0\n            counter += 1\n        end\n \
    \   end\n    return counter\nend\n</cell>\n<cell>\ncount_nums(x)\n</cell>\n<text>\n\
    Exercise #3\nWrite a function which takes an array of strings as an argument and\
    \ returns a string containing all the elements of the array concatenated together\
    \ (separated by a space), with the result sorted alphabetically. For example,\
    \ \n[\"Hello\", \"World\", \"What\", \"a\", \"great\", \"day\"]\nwould become\n\
    \"Hello World what a great day\".\nUse the sort! function on the array before\
    \ returning the string.\nYou can convert an integer into a string using the str\
    \ function. For example, str(1234) returns \"1234\".\nusing Test\n\n@testset begin\n\
    \ncandidate = count_nums;\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([-1,\
    \ -2, 0]) == 0)\n\t@test(candidate([1, 1, 2, -2, 3, 4, 5]) == 6)\n\t@test(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1, 100, 98, -7, 1, -1]) == 4)\n\
    \t@test(candidate([12, 23, 34, -45, -56, 0]) == 5)\n\t@test(candidate([0, 1])\
    \ == 1)\n\t@test(candidate([1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpur4d89a6.jl:22\nin expression starting at\
    \ /tmp/tmpur4d89a6.jl:22\n"
  stdout: ''
  timestamp: 1660004029
- exit_code: 1
  program: "\"\"\"\n    Write a function count_nums which takes a vector of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([])\n    0\n \
    \   >>> count_nums([-1, 11, -11])\n    1\n    >>> count_nums([1, 1, 2])\n    3\n\
    \    \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    num_sum::Int64\
    \ = 0\n    for v in arr\n        num_sum::Int64 += (\n            ifelse(sign(v)\
    \ == -1, sign(v) * log10(v) + 1, 0) )\n    end\n    return num_sum\nend\n</cell>\n\
    <cell>\ncount_nums(digits)\n</cell>\n<text>\n6. Write a function that returns\
    \ the sum of the numbers in the integer array\n    that have digits with absolute\
    \ value less than a given integer. For example:\nusing Test\n\n@testset begin\n\
    \ncandidate = count_nums;\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([-1,\
    \ -2, 0]) == 0)\n\t@test(candidate([1, 1, 2, -2, 3, 4, 5]) == 6)\n\t@test(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1, 100, 98, -7, 1, -1]) == 4)\n\
    \t@test(candidate([12, 23, 34, -45, -56, 0]) == 5)\n\t@test(candidate([0, 1])\
    \ == 1)\n\t@test(candidate([1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpf_z78efs.jl:21\nin expression starting at\
    \ /tmp/tmpf_z78efs.jl:21\n"
  stdout: ''
  timestamp: 1660004029
- exit_code: 1
  program: "\"\"\"\n    Write a function count_nums which takes a vector of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([])\n    0\n \
    \   >>> count_nums([-1, 11, -11])\n    1\n    >>> count_nums([1, 1, 2])\n    3\n\
    \    \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    if arr.length\
    \ == 0 \n        return 0 \n    digits = arr .- min(arr)\n    digits = min(digits)\
    \ \n    return sum( digits[digits>0]) \nend\ncount_nums(arr)\nusing Test\n\n@testset\
    \ begin\n\ncandidate = count_nums;\n\t@test(candidate(Vector{Int64}([])) == 0)\n\
    \t@test(candidate([-1, -2, 0]) == 0)\n\t@test(candidate([1, 1, 2, -2, 3, 4, 5])\
    \ == 6)\n\t@test(candidate([1, 6, 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1,\
    \ 100, 98, -7, 1, -1]) == 4)\n\t@test(candidate([12, 23, 34, -45, -56, 0]) ==\
    \ 5)\n\t@test(candidate([0, 1]) == 1)\n\t@test(candidate([1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp8abahwzh.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp8abahwzh.jl:1\n\
    in expression starting at /tmp/tmp8abahwzh.jl:1\n"
  stdout: ''
  timestamp: 1660004029
- exit_code: 1
  program: "\"\"\"\n    Write a function count_nums which takes a vector of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([])\n    0\n \
    \   >>> count_nums([-1, 11, -11])\n    1\n    >>> count_nums([1, 1, 2])\n    3\n\
    \    \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    for n in arr\n\
    \        if n < 0\n            sign = -sign(n)\n            n *= sign\n      \
    \  else\n            sign = 0\n        end\n        if sign == 0\n           \
    \ count += 1\n        end\n    end\n    return count\nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes two vectors A and B as inputs and returns\na\
    \ vector of pairs of integers such that a[i] and b[i] are in A and a[j] and b[j]\n\
    are in B, such that:\nusing Test\n\n@testset begin\n\ncandidate = count_nums;\n\
    \t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([-1, -2, 0]) ==\
    \ 0)\n\t@test(candidate([1, 1, 2, -2, 3, 4, 5]) == 6)\n\t@test(candidate([1, 6,\
    \ 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1, 100, 98, -7, 1, -1]) == 4)\n\t\
    @test(candidate([12, 23, 34, -45, -56, 0]) == 5)\n\t@test(candidate([0, 1]) ==\
    \ 1)\n\t@test(candidate([1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp53mxvcyb.jl:27\nin expression starting at\
    \ /tmp/tmp53mxvcyb.jl:27\n"
  stdout: ''
  timestamp: 1660004029
- exit_code: 1
  program: "\"\"\"\n    Write a function count_nums which takes a vector of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([])\n    0\n \
    \   >>> count_nums([-1, 11, -11])\n    1\n    >>> count_nums([1, 1, 2])\n    3\n\
    \    \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    digits = arr\n\
    \    digits_sum = sum(digits)\n    if digits_sum > 0\n        count_nums(digits[digits_sum\
    \ > 0])\n    else\n        0\n    end\nend\n</code>\n<|/ a |>\n<| c |>\n`count_nums`\
    \ should return 0 if the sum of the digits is 0.\n<|/ c |>\n<| c |>\nSorry, I\
    \ missed that. Thanks for the observation.\n<|/ c |>\n<| a dscore=2 |>\nHere is\
    \ my take, using vectorization to generate the numbers and summing them up, avoiding\
    \ any looping. It also has some error-handling to prevent any negative numbers\
    \ (and to return 0 as the sum for zero-length vectors, as requested).\n<code>\n\
    using Test\n\n@testset begin\n\ncandidate = count_nums;\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([-1, -2, 0]) == 0)\n\t@test(candidate([1, 1, 2, -2,\
    \ 3, 4, 5]) == 6)\n\t@test(candidate([1, 6, 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1,\
    \ 100, 98, -7, 1, -1]) == 4)\n\t@test(candidate([12, 23, 34, -45, -56, 0]) ==\
    \ 5)\n\t@test(candidate([0, 1]) == 1)\n\t@test(candidate([1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6wicmn70.jl:22\nin expression starting at\
    \ /tmp/tmp6wicmn70.jl:22\n"
  stdout: ''
  timestamp: 1660004029
- exit_code: 1
  program: "\"\"\"\n    Write a function count_nums which takes a vector of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([])\n    0\n \
    \   >>> count_nums([-1, 11, -11])\n    1\n    >>> count_nums([1, 1, 2])\n    3\n\
    \    \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    len_arr = length(arr)\n\
    \    if len_arr == 0 \n        return 0 \n    elseif len_arr == 1 \n        return\
    \ arr[arr[0]] \n    else\n        return count_nums(arr[1 : (end-1)]) + arr[end]\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = count_nums;\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([-1, -2, 0]) == 0)\n\t@test(candidate([1, 1, 2, -2,\
    \ 3, 4, 5]) == 6)\n\t@test(candidate([1, 6, 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1,\
    \ 100, 98, -7, 1, -1]) == 4)\n\t@test(candidate([12, 23, 34, -45, -56, 0]) ==\
    \ 5)\n\t@test(candidate([0, 1]) == 1)\n\t@test(candidate([1]) == 1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpdmrg5ryd.jl:25

    '
  stdout: "test set: Error During Test at /tmp/tmpdmrg5ryd.jl:29\n  Test threw exception\n\
    \  Expression: candidate([-1, -2, 0]) == 0\n  BoundsError: attempt to access 1-element\
    \ Vector{Int64} at index [0]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] count_nums(arr::Vector{Int64})\n     @ Main /tmp/tmpdmrg5ryd.jl:18\n\
    \   [3] count_nums(arr::Vector{Int64}) (repeats 2 times)\n     @ Main /tmp/tmpdmrg5ryd.jl:20\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpdmrg5ryd.jl:29 [inlined]\n\
    \   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpdmrg5ryd.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpdmrg5ryd.jl:30\n  Test threw exception\n  Expression:\
    \ candidate([1, 1, 2, -2, 3, 4, 5]) == 6\n  BoundsError: attempt to access 1-element\
    \ Vector{Int64} at index [0]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] count_nums(arr::Vector{Int64})\n     @ Main /tmp/tmpdmrg5ryd.jl:18\n\
    \   [3] count_nums(arr::Vector{Int64}) (repeats 6 times)\n     @ Main /tmp/tmpdmrg5ryd.jl:20\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpdmrg5ryd.jl:30 [inlined]\n\
    \   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpdmrg5ryd.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpdmrg5ryd.jl:31\n  Test threw exception\n  Expression:\
    \ candidate([1, 6, 9, -6, 0, 1, 5]) == 5\n  BoundsError: attempt to access 1-element\
    \ Vector{Int64} at index [0]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] count_nums(arr::Vector{Int64})\n     @ Main /tmp/tmpdmrg5ryd.jl:18\n\
    \   [3] count_nums(arr::Vector{Int64}) (repeats 6 times)\n     @ Main /tmp/tmpdmrg5ryd.jl:20\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] "
  timestamp: 1660004032
- exit_code: 1
  program: "\"\"\"\n    Write a function count_nums which takes a vector of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([])\n    0\n \
    \   >>> count_nums([-1, 11, -11])\n    1\n    >>> count_nums([1, 1, 2])\n    3\n\
    \    \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    if arr == []\n\
    \        return 0\n    else\n        count_nums(arr[1:end-1]) + 1 + \n       \
    \     count_nums(arr[2:end])\n    end\nend\n</code>\n<|/ a dscore=1 |>\n<| a tags=recursion,julia\
    \ |>\nI suggest to keep it simple. Here is one way to do it\n<code>\nusing Test\n\
    \n@testset begin\n\ncandidate = count_nums;\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([-1, -2, 0]) == 0)\n\t@test(candidate([1, 1, 2, -2,\
    \ 3, 4, 5]) == 6)\n\t@test(candidate([1, 6, 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1,\
    \ 100, 98, -7, 1, -1]) == 4)\n\t@test(candidate([12, 23, 34, -45, -56, 0]) ==\
    \ 5)\n\t@test(candidate([0, 1]) == 1)\n\t@test(candidate([1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphs0rcemq.jl:21\nin expression starting at\
    \ /tmp/tmphs0rcemq.jl:21\n"
  stdout: ''
  timestamp: 1660004029
- exit_code: 1
  program: "\"\"\"\n    Write a function count_nums which takes a vector of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([])\n    0\n \
    \   >>> count_nums([-1, 11, -11])\n    1\n    >>> count_nums([1, 1, 2])\n    3\n\
    \    \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    # initialize\
    \ counter\n    num_to_count = Int64(0)\n    for i in arr \n        if i >= 0 \n\
    \            temp = divrem(i,10) + 1 \n            num_to_count += 1 \n      \
    \  else\n            temp = i\n        end\n    end\n    return num_to_count\n\
    end\n</cell>\n<cell>\n@test count_nums([1,2,-3,3,-4,-5]) == 3\n@test count_nums([1,\
    \ -2, 2, -3, -4, 5, -6, -7, -8]) == 9\n</cell>\n<text>\nExercise\nWrite a function\
    \ that counts all the numbers with a sum greater than zero and less than or equal\
    \ to 100. Test it using count_nums_between_0_and_100 and count_nums_over_100_or_under.\n\
    using Test\n\n@testset begin\n\ncandidate = count_nums;\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([-1, -2, 0]) == 0)\n\t@test(candidate([1, 1, 2, -2,\
    \ 3, 4, 5]) == 6)\n\t@test(candidate([1, 6, 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1,\
    \ 100, 98, -7, 1, -1]) == 4)\n\t@test(candidate([12, 23, 34, -45, -56, 0]) ==\
    \ 5)\n\t@test(candidate([0, 1]) == 1)\n\t@test(candidate([1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpm9p4dg2i.jl:26\nin expression starting at\
    \ /tmp/tmpm9p4dg2i.jl:26\n"
  stdout: ''
  timestamp: 1660004029
- exit_code: 1
  program: "\"\"\"\n    Write a function count_nums which takes a vector of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([])\n    0\n \
    \   >>> count_nums([-1, 11, -11])\n    1\n    >>> count_nums([1, 1, 2])\n    3\n\
    \    \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    count = 0\n\
    \    sign = 1 if arr[1] < 0 else 0\n    for a in arr \n        digit = if sign\
    \ < 0 then -a else a\n        if digit > 0 \n            count += 1\n        \
    \    \n        end\n    end\n    \n    return count\nend\n</cell>\n<code language=julia-1.6>\n\
    count_nums([-1,2,-1])\n</cell>\n<text>\nExercise 2\nusing Test\n\n@testset begin\n\
    \ncandidate = count_nums;\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([-1,\
    \ -2, 0]) == 0)\n\t@test(candidate([1, 1, 2, -2, 3, 4, 5]) == 6)\n\t@test(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1, 100, 98, -7, 1, -1]) == 4)\n\
    \t@test(candidate([12, 23, 34, -45, -56, 0]) == 5)\n\t@test(candidate([0, 1])\
    \ == 1)\n\t@test(candidate([1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"function\" at /tmp/tmp3yb_94dv.jl:13 expected\
    \ \"end\", got \"if\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp3yb_94dv.jl:15\n\
    in expression starting at /tmp/tmp3yb_94dv.jl:15\n"
  stdout: ''
  timestamp: 1660004029
- exit_code: 1
  program: "\"\"\"\n    Write a function count_nums which takes a vector of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([])\n    0\n \
    \   >>> count_nums([-1, 11, -11])\n    1\n    >>> count_nums([1, 1, 2])\n    3\n\
    \    \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n  sum_digits = 0\n\
    \  for item in arr\n    sum_digits += item%10\n  end\n  return sum_digits\nend\n\
    </cell>\n<text>\nExercise 14: Write a function count_nums which takes a vector\
    \ of integers and returns the number of elements which has a sum of digits > 0.\n\
    using Test\n\n@testset begin\n\ncandidate = count_nums;\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([-1, -2, 0]) == 0)\n\t@test(candidate([1, 1, 2, -2,\
    \ 3, 4, 5]) == 6)\n\t@test(candidate([1, 6, 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1,\
    \ 100, 98, -7, 1, -1]) == 4)\n\t@test(candidate([12, 23, 34, -45, -56, 0]) ==\
    \ 5)\n\t@test(candidate([0, 1]) == 1)\n\t@test(candidate([1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkp_t0rb_.jl:20\nin expression starting at\
    \ /tmp/tmpkp_t0rb_.jl:20\n"
  stdout: ''
  timestamp: 1660004029
- exit_code: 1
  program: "\"\"\"\n    Write a function count_nums which takes a vector of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([])\n    0\n \
    \   >>> count_nums([-1, 11, -11])\n    1\n    >>> count_nums([1, 1, 2])\n    3\n\
    \    \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    total = 0\n\
    \    for n in arr\n        if n >= 0\n            total += n\n        else\n \
    \           total -= Int(floor(log10(abs(n))))\n    end\n    return total\nend\n\
    count_nums(rand(3:10))\nusing Test\n\n@testset begin\n\ncandidate = count_nums;\n\
    \t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([-1, -2, 0]) ==\
    \ 0)\n\t@test(candidate([1, 1, 2, -2, 3, 4, 5]) == 6)\n\t@test(candidate([1, 6,\
    \ 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1, 100, 98, -7, 1, -1]) == 4)\n\t\
    @test(candidate([12, 23, 34, -45, -56, 0]) == 5)\n\t@test(candidate([0, 1]) ==\
    \ 1)\n\t@test(candidate([1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp3901qecf.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp3901qecf.jl:1\n\
    in expression starting at /tmp/tmp3901qecf.jl:1\n"
  stdout: ''
  timestamp: 1660004029
- exit_code: 1
  program: "\"\"\"\n    Write a function count_nums which takes a vector of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([])\n    0\n \
    \   >>> count_nums([-1, 11, -11])\n    1\n    >>> count_nums([1, 1, 2])\n    3\n\
    \    \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    if arr.length==0\n\
    \        return 0 \n    if any(arr<0)\n        return -1 \n    return sum(arr[arr>0].>0)\
    \ \nend\n</cell>\n<code language=julia-1.5>\n@code_warntype count_nums([-123,\
    \ 123, 12, -1, 1, 11])\n</cell>\n<code language=julia-1.5>\n@code_warntype count_nums([-123,\
    \ 123, 12, -1, 1, 11])\n</cell>\n<code language=julia-1.5>\n@code_warntype count_nums([-123,\
    \ 123, 12, -1, 1, 11])\n</cell>\n<code language=julia-1.5>\n@code_warntype count_nums([-123,\
    \ 123, 12, -1, 1, 11])\n</cell>\n<text>\nExercise\nWrite a function count_nums\
    \ which takes a vector of integers and returns\nthe number of elements which has\
    \ a sum of digits > 0.\nIf a number is negative, then its first signed digit will\
    \ be negative:\ne.g. -123 has signed digits -1, 2, and 3.\ne.g. [1, 2, 3] has\
    \ no such elements, and so should be zero.\nFor an empty vector the function should\
    \ return zero.\nExamples\ncount_nums([3, -6, 10, -5, -4, 3])\ncount_nums([])\n\
    count_nums([1, 2, 3])\ncount_nums([-1, 2, 3, -5])\nusing Test\n\n@testset begin\n\
    \ncandidate = count_nums;\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([-1,\
    \ -2, 0]) == 0)\n\t@test(candidate([1, 1, 2, -2, 3, 4, 5]) == 6)\n\t@test(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1, 100, 98, -7, 1, -1]) == 4)\n\
    \t@test(candidate([12, 23, 34, -45, -56, 0]) == 5)\n\t@test(candidate([0, 1])\
    \ == 1)\n\t@test(candidate([1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7dl4p028.jl:20\nin expression starting at\
    \ /tmp/tmp7dl4p028.jl:20\n"
  stdout: ''
  timestamp: 1660004029
- exit_code: 1
  program: "\"\"\"\n    Write a function count_nums which takes a vector of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([])\n    0\n \
    \   >>> count_nums([-1, 11, -11])\n    1\n    >>> count_nums([1, 1, 2])\n    3\n\
    \    \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    count_digits=0\n\
    \    for i in arr\n        count_digits = count_digits+length(digits(i))\n   \
    \ end\n    return count_digits\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = count_nums;\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([-1,\
    \ -2, 0]) == 0)\n\t@test(candidate([1, 1, 2, -2, 3, 4, 5]) == 6)\n\t@test(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1, 100, 98, -7, 1, -1]) == 4)\n\
    \t@test(candidate([12, 23, 34, -45, -56, 0]) == 5)\n\t@test(candidate([0, 1])\
    \ == 1)\n\t@test(candidate([1]) == 1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpbo_a5m7m.jl:22

    '
  stdout: "test set: Test Failed at /tmp/tmpbo_a5m7m.jl:26\n  Expression: candidate([-1,\
    \ -2, 0]) == 0\n   Evaluated: 3 == 0\nStacktrace:\n [1] macro expansion\n   @\
    \ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpbo_a5m7m.jl:26 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpbo_a5m7m.jl:24\ntest set: Test Failed at /tmp/tmpbo_a5m7m.jl:27\n\
    \  Expression: candidate([1, 1, 2, -2, 3, 4, 5]) == 6\n   Evaluated: 7 == 6\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbo_a5m7m.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbo_a5m7m.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpbo_a5m7m.jl:28\n  Expression: candidate([1, 6, 9, -6, 0, 1,\
    \ 5]) == 5\n   Evaluated: 7 == 5\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbo_a5m7m.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbo_a5m7m.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpbo_a5m7m.jl:29\n  Expression: candidate([1, 100, 98, -7, 1,\
    \ -1]) == 4\n   Evaluated: 9 == 4\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbo_a5m7m.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbo_a5m7m.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpbo_a5m7m.jl:30\n  Expression: candidate([12, 23, 34, -45,\
    \ -56, 0]) == 5\n   Evaluated: 11 == 5\nStacktrace:\n [1] macro expansion\n  \
    \ @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro e"
  timestamp: 1660004031
- exit_code: 1
  program: "\"\"\"\n    Write a function count_nums which takes a vector of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([])\n    0\n \
    \   >>> count_nums([-1, 11, -11])\n    1\n    >>> count_nums([1, 1, 2])\n    3\n\
    \    \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    n = sum(x for\
    \ x \u2208 arr if x > 0)\n    \n    if n < 0\n        sign = -(arr[n - 1] % 10)\n\
    \        n *= sign\n    end\n    return n\nend\n</cell>\n<code language=julia-1.5>\n\
    count_nums([4, 0, 8, -9, 0])\n</cell>\n<code language=julia-1.5>\ncount_nums([-4,\
    \ -3, -2, -1])\n</cell>\n<text>\n(Optional) Homework exercise\nWrite a function\
    \ which takes a vector of integers and returns its product mod 10 (use Euclid's\
    \ algorithm to compute this product). \nFor example, \ncount_products([4, 0, 8,\
    \ -9, 0]) = 24\nusing Test\n\n@testset begin\n\ncandidate = count_nums;\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([-1, -2, 0]) == 0)\n\t@test(candidate([1, 1, 2, -2,\
    \ 3, 4, 5]) == 6)\n\t@test(candidate([1, 6, 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1,\
    \ 100, 98, -7, 1, -1]) == 4)\n\t@test(candidate([12, 23, 34, -45, -56, 0]) ==\
    \ 5)\n\t@test(candidate([0, 1]) == 1)\n\t@test(candidate([1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpaay2554a.jl:22\nin expression starting at\
    \ /tmp/tmpaay2554a.jl:22\n"
  stdout: ''
  timestamp: 1660004030
- exit_code: 1
  program: "\"\"\"\n    Write a function count_nums which takes a vector of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([])\n    0\n \
    \   >>> count_nums([-1, 11, -11])\n    1\n    >>> count_nums([1, 1, 2])\n    3\n\
    \    \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    if len(arr)\
    \ == 0 \n        return 0 \n    else \n        positivesum = 0 \n        for elt\
    \ in arr \n            if elt > 0 \n                positivesum += elt \n    \
    \        else \n                positivesum += elt * elt \n        return positivesum\
    \ \n    end\nend\n</cell>\n<code language=julia-0.6>\ncount_nums([-5, -1, 2, 5])\n\
    </cell>\n<code language=julia-0.6>\ncount_nums([-1, 2, -5])\n</cell>\n<code language=julia-0.6>\n\
    count_nums([1, -6, 2, -8, 3, 5])\n</cell>\n<code language=julia-0.6>\nusing Test\n\
    \n@testset begin\n\ncandidate = count_nums;\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([-1, -2, 0]) == 0)\n\t@test(candidate([1, 1, 2, -2,\
    \ 3, 4, 5]) == 6)\n\t@test(candidate([1, 6, 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1,\
    \ 100, 98, -7, 1, -1]) == 4)\n\t@test(candidate([12, 23, 34, -45, -56, 0]) ==\
    \ 5)\n\t@test(candidate([0, 1]) == 1)\n\t@test(candidate([1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmps1ilbaj8.jl:26\nin expression starting at\
    \ /tmp/tmps1ilbaj8.jl:26\n"
  stdout: ''
  timestamp: 1660004030
- exit_code: 1
  program: "\"\"\"\n    Write a function count_nums which takes a vector of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([])\n    0\n \
    \   >>> count_nums([-1, 11, -11])\n    1\n    >>> count_nums([1, 1, 2])\n    3\n\
    \    \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    sum_nums = sum(arr)\n\
    \    if sum_nums == 0\n        return 0\n    if sum_nums < 0\n        sum_nums\
    \ *= -1\n        sum_nums %= 10\n    end\n    for num in arr\n        if sum_nums\
    \ - num < 0\n            return sum((-sum_nums - num).abs) + 1\n        end\n\
    \    end\n    return length(arr)\nend\n</cell>\n<text>\nSolution 3\nThe easiest\
    \ solution is to use recursion:\nusing Test\n\n@testset begin\n\ncandidate = count_nums;\n\
    \t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([-1, -2, 0]) ==\
    \ 0)\n\t@test(candidate([1, 1, 2, -2, 3, 4, 5]) == 6)\n\t@test(candidate([1, 6,\
    \ 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1, 100, 98, -7, 1, -1]) == 4)\n\t\
    @test(candidate([12, 23, 34, -45, -56, 0]) == 5)\n\t@test(candidate([0, 1]) ==\
    \ 1)\n\t@test(candidate([1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_9fwbyu9.jl:28\nin expression starting at\
    \ /tmp/tmp_9fwbyu9.jl:28\n"
  stdout: ''
  timestamp: 1660004030
- exit_code: 1
  program: "\"\"\"\n    Write a function count_nums which takes a vector of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([])\n    0\n \
    \   >>> count_nums([-1, 11, -11])\n    1\n    >>> count_nums([1, 1, 2])\n    3\n\
    \    \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    count_nums =\
    \ \n    end = 0\n    count=0\n    for e in arr\n        if e<0\n            e\
    \ = -e\n            count += 1\n        end+=1\n    end\n    for e in arr\n  \
    \      count += e<0 ? e * count_nums(end) : 1 \n    end\n    return count\nend\n\
    </cell>\n<code language=julia-1.6>\n@code_warntype count_nums([1, 11, -11, 2])\n\
    </cell>\n<text>\nNext, let's see how we can use map to calculate our sum. First,\
    \ let's write a function that takes our vector and calculates the sum of the numbers\
    \ in the vector:\nusing Test\n\n@testset begin\n\ncandidate = count_nums;\n\t\
    @test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([-1, -2, 0]) == 0)\n\
    \t@test(candidate([1, 1, 2, -2, 3, 4, 5]) == 6)\n\t@test(candidate([1, 6, 9, -6,\
    \ 0, 1, 5]) == 5)\n\t@test(candidate([1, 100, 98, -7, 1, -1]) == 4)\n\t@test(candidate([12,\
    \ 23, 34, -45, -56, 0]) == 5)\n\t@test(candidate([0, 1]) == 1)\n\t@test(candidate([1])\
    \ == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"end\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp77_xixz7.jl:15\nin expression starting at /tmp/tmp77_xixz7.jl:15\n"
  stdout: ''
  timestamp: 1660004030
- exit_code: 1
  program: "\"\"\"\n    Write a function count_nums which takes a vector of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([])\n    0\n \
    \   >>> count_nums([-1, 11, -11])\n    1\n    >>> count_nums([1, 1, 2])\n    3\n\
    \    \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    count_nums =\
    \ zeros(length(arr))\n    for x in arr\n        if x>=0 \n            count_nums[x+1]\
    \ = count_nums[x+1] + x\n        else\n            count_nums[x+1] = count_nums[x+1]\
    \ - x\n        end\n    end\n    count_nums\nend\n</cell>\n<code language=julia-1.0>\n\
    count_nums([-123,-100,0,1,7,1,2,-3,-1,2])\n</cell>\n<text>\nProblem 7. Write a\
    \ function remove_from_arr() which takes in an array of integers\n    and returns\
    \ the same array with the integers in the array that have a sum\n    of digits\
    \ > 0.\n    e.g. [12, 1, -4, -1, -2] would become [12, 4]\n    >>> remove_from_arr([12,\
    \ 1, -4, -1, -2])\n    [12, 4]\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = count_nums;\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([-1,\
    \ -2, 0]) == 0)\n\t@test(candidate([1, 1, 2, -2, 3, 4, 5]) == 6)\n\t@test(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1, 100, 98, -7, 1, -1]) == 4)\n\
    \t@test(candidate([12, 23, 34, -45, -56, 0]) == 5)\n\t@test(candidate([0, 1])\
    \ == 1)\n\t@test(candidate([1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpy9qfnlzd.jl:24\nin expression starting at\
    \ /tmp/tmpy9qfnlzd.jl:24\n"
  stdout: ''
  timestamp: 1660004030
- exit_code: 1
  program: "\"\"\"\n    Write a function count_nums which takes a vector of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([])\n    0\n \
    \   >>> count_nums([-1, 11, -11])\n    1\n    >>> count_nums([1, 1, 2])\n    3\n\
    \    \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    if arr.iszero()\n\
    \        return 0\n    if arr.head < 0\n        return count_nums(-arr)\n    count_nums2(arr,\
    \ arr.tail)\nend\nusing Test\n\n@testset begin\n\ncandidate = count_nums;\n\t\
    @test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([-1, -2, 0]) == 0)\n\
    \t@test(candidate([1, 1, 2, -2, 3, 4, 5]) == 6)\n\t@test(candidate([1, 6, 9, -6,\
    \ 0, 1, 5]) == 5)\n\t@test(candidate([1, 100, 98, -7, 1, -1]) == 4)\n\t@test(candidate([12,\
    \ 23, 34, -45, -56, 0]) == 5)\n\t@test(candidate([0, 1]) == 1)\n\t@test(candidate([1])\
    \ == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpf7hiz39o.jl:1\nin expression starting at /tmp/tmpf7hiz39o.jl:1\n"
  stdout: ''
  timestamp: 1660004030
- exit_code: 1
  program: "\"\"\"\n    Write a function count_nums which takes a vector of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([])\n    0\n \
    \   >>> count_nums([-1, 11, -11])\n    1\n    >>> count_nums([1, 1, 2])\n    3\n\
    \    \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    count = 0\n\
    \    for x in arr\n        sum = sum(x)\n        if sum >= 0\n            count\
    \ = count + 1\n        end\n    end\n    return count\nend\n</cell>\n<code language=julia-1.5>\n\
    count_nums(a)\n</cell>\n<text>\nWrite a function that takes an array of integers\
    \ and returns the number of elements whose sum of digits is greater than 0:\n\
    using Test\n\n@testset begin\n\ncandidate = count_nums;\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([-1, -2, 0]) == 0)\n\t@test(candidate([1, 1, 2, -2,\
    \ 3, 4, 5]) == 6)\n\t@test(candidate([1, 6, 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1,\
    \ 100, 98, -7, 1, -1]) == 4)\n\t@test(candidate([12, 23, 34, -45, -56, 0]) ==\
    \ 5)\n\t@test(candidate([0, 1]) == 1)\n\t@test(candidate([1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjmhb0cii.jl:23\nin expression starting at\
    \ /tmp/tmpjmhb0cii.jl:23\n"
  stdout: ''
  timestamp: 1660004030
- exit_code: 1
  program: "\"\"\"\n    Write a function count_nums which takes a vector of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([])\n    0\n \
    \   >>> count_nums([-1, 11, -11])\n    1\n    >>> count_nums([1, 1, 2])\n    3\n\
    \    \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    cnt=0\n    for\
    \ x in arr \n        cnt+=x \n        if x != 0 \n            cnt -= x mod 10\
    \ \n            cnt += x mod 10 \n        end\n    end\n    cnt\nend\n</code>\n\
    <|/ a |>\n<| a dscore=2 tags=julia |>\nFor a version that doesn't use modulus\
    \ but only division and addition:\n<code>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = count_nums;\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([-1,\
    \ -2, 0]) == 0)\n\t@test(candidate([1, 1, 2, -2, 3, 4, 5]) == 6)\n\t@test(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1, 100, 98, -7, 1, -1]) == 4)\n\
    \t@test(candidate([12, 23, 34, -45, -56, 0]) == 5)\n\t@test(candidate([0, 1])\
    \ == 1)\n\t@test(candidate([1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"mod\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpl_ppenl6.jl:18\nin expression starting at /tmp/tmpl_ppenl6.jl:18\n"
  stdout: ''
  timestamp: 1660004031
- exit_code: 1
  program: "\"\"\"\n    Write a function count_nums which takes a vector of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([])\n    0\n \
    \   >>> count_nums([-1, 11, -11])\n    1\n    >>> count_nums([1, 1, 2])\n    3\n\
    \    \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    sum_digits =\
    \ 0.\n    for elt in arr\n        if elt <0\n            elt *= -1\n         \
    \   sum_digits += elt % 10\n        else\n            sum_digits += elt % 10\n\
    \        end\n    end\n    return length(arr) - sum_digits\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = count_nums;\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([-1, -2, 0]) == 0)\n\t@test(candidate([1, 1, 2, -2,\
    \ 3, 4, 5]) == 6)\n\t@test(candidate([1, 6, 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1,\
    \ 100, 98, -7, 1, -1]) == 4)\n\t@test(candidate([12, 23, 34, -45, -56, 0]) ==\
    \ 5)\n\t@test(candidate([0, 1]) == 1)\n\t@test(candidate([1]) == 1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpgtb5lztz.jl:27

    '
  stdout: "test set: Test Failed at /tmp/tmpgtb5lztz.jl:32\n  Expression: candidate([1,\
    \ 1, 2, -2, 3, 4, 5]) == 6\n   Evaluated: -11 == 6\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpgtb5lztz.jl:32 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpgtb5lztz.jl:29\ntest set: Test Failed at /tmp/tmpgtb5lztz.jl:33\n\
    \  Expression: candidate([1, 6, 9, -6, 0, 1, 5]) == 5\n   Evaluated: -21 == 5\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpgtb5lztz.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgtb5lztz.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpgtb5lztz.jl:34\n  Expression: candidate([1, 100, 98, -7, 1,\
    \ -1]) == 4\n   Evaluated: -12 == 4\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpgtb5lztz.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgtb5lztz.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpgtb5lztz.jl:35\n  Expression: candidate([12, 23, 34, -45,\
    \ -56, 0]) == 5\n   Evaluated: -14 == 5\nStacktrace:\n [1] macro expansion\n \
    \  @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpgtb5lztz.jl:35 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpgtb5lztz.jl:29\ntest set: Test Failed at /tmp/tmpgtb5lztz.jl:37\n\
    \  Expression: candidate([1]) == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro ex"
  timestamp: 1660004032
- exit_code: 1
  program: "\"\"\"\n    Write a function count_nums which takes a vector of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([])\n    0\n \
    \   >>> count_nums([-1, 11, -11])\n    1\n    >>> count_nums([1, 1, 2])\n    3\n\
    \    \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    \n    count\
    \ = 0\n    \n    for a in arr \n        if a > 0 \n            count += a \n \
    \       else \n            sign = -(a % 10) \n            count += sign * count_nums(a\
    \ / 10) \n    end \n    \n    return count \nend\nusing Test\n\n@testset begin\n\
    \ncandidate = count_nums;\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([-1,\
    \ -2, 0]) == 0)\n\t@test(candidate([1, 1, 2, -2, 3, 4, 5]) == 6)\n\t@test(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1, 100, 98, -7, 1, -1]) == 4)\n\
    \t@test(candidate([12, 23, 34, -45, -56, 0]) == 5)\n\t@test(candidate([0, 1])\
    \ == 1)\n\t@test(candidate([1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpvafju4vf.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpvafju4vf.jl:1\n\
    in expression starting at /tmp/tmpvafju4vf.jl:1\n"
  stdout: ''
  timestamp: 1660004031
- exit_code: 1
  program: "\"\"\"\n    Write a function count_nums which takes a vector of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([])\n    0\n \
    \   >>> count_nums([-1, 11, -11])\n    1\n    >>> count_nums([1, 1, 2])\n    3\n\
    \    \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    count = 0\n\
    \    for e in arr \n        count += sum(e > 0) \n    end\n    return count\n\
    end\n</cell>\n<text>\nNow let's test our count_nums function.\nusing Test\n\n\
    @testset begin\n\ncandidate = count_nums;\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([-1, -2, 0]) == 0)\n\t@test(candidate([1, 1, 2, -2,\
    \ 3, 4, 5]) == 6)\n\t@test(candidate([1, 6, 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1,\
    \ 100, 98, -7, 1, -1]) == 4)\n\t@test(candidate([12, 23, 34, -45, -56, 0]) ==\
    \ 5)\n\t@test(candidate([0, 1]) == 1)\n\t@test(candidate([1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzg99bj2l.jl:20\nin expression starting at\
    \ /tmp/tmpzg99bj2l.jl:20\n"
  stdout: ''
  timestamp: 1660004031
- exit_code: 1
  program: "\"\"\"\n    Write a function count_nums which takes a vector of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([])\n    0\n \
    \   >>> count_nums([-1, 11, -11])\n    1\n    >>> count_nums([1, 1, 2])\n    3\n\
    \    \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    \n    sum =\
    \ 0\n    for i in arr\n        sum += i\n        if sum > 0\n            break\n\
    \    end\n    return sum\nend\nusing Test\n\n@testset begin\n\ncandidate = count_nums;\n\
    \t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([-1, -2, 0]) ==\
    \ 0)\n\t@test(candidate([1, 1, 2, -2, 3, 4, 5]) == 6)\n\t@test(candidate([1, 6,\
    \ 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1, 100, 98, -7, 1, -1]) == 4)\n\t\
    @test(candidate([12, 23, 34, -45, -56, 0]) == 5)\n\t@test(candidate([0, 1]) ==\
    \ 1)\n\t@test(candidate([1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp5vtgk0es.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp5vtgk0es.jl:1\n\
    in expression starting at /tmp/tmp5vtgk0es.jl:1\n"
  stdout: ''
  timestamp: 1660004031
- exit_code: 1
  program: "\"\"\"\n    Write a function count_nums which takes a vector of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([])\n    0\n \
    \   >>> count_nums([-1, 11, -11])\n    1\n    >>> count_nums([1, 1, 2])\n    3\n\
    \    \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    len_arr = size(arr)\n\
    \    count_num = 0\n    for x in arr\n        if x < 0\n            count_num\
    \ += (x - abs(x)) * (-1)^(len_arr - 1) \n        else \n            count_num\
    \ += 1\n    end\n    return count_num\nend\n</cell>\n<code language=julia-1.5>\n\
    count_nums([-1, 11, -11])\n</cell>\n<text>\nExercise: Write a function that takes\
    \ in an array of floats and returns a vector of integers that corresponds to the\
    \ float values with largest absolute values.\nusing Test\n\n@testset begin\n\n\
    candidate = count_nums;\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([-1,\
    \ -2, 0]) == 0)\n\t@test(candidate([1, 1, 2, -2, 3, 4, 5]) == 6)\n\t@test(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1, 100, 98, -7, 1, -1]) == 4)\n\
    \t@test(candidate([12, 23, 34, -45, -56, 0]) == 5)\n\t@test(candidate([0, 1])\
    \ == 1)\n\t@test(candidate([1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp32kgiltj.jl:24\nin expression starting at\
    \ /tmp/tmp32kgiltj.jl:24\n"
  stdout: ''
  timestamp: 1660004031
- exit_code: 1
  program: "\"\"\"\n    Write a function count_nums which takes a vector of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([])\n    0\n \
    \   >>> count_nums([-1, 11, -11])\n    1\n    >>> count_nums([1, 1, 2])\n    3\n\
    \    \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    \"\"\"\n   \
    \ Write a function that counts the number of elements with a sum of the digits\n\
    \    of the number are greater than zero.\n    >>> count_nums([])\n    0\n   \
    \ >>> count_nums([-1, 11, -11])\n    1\n    >>> count_nums([1, 1, 2])\n    3\n\
    \    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = count_nums;\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([-1, -2, 0]) == 0)\n\t@test(candidate([1, 1, 2, -2,\
    \ 3, 4, 5]) == 6)\n\t@test(candidate([1, 6, 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1,\
    \ 100, 98, -7, 1, -1]) == 4)\n\t@test(candidate([12, 23, 34, -45, -56, 0]) ==\
    \ 5)\n\t@test(candidate([0, 1]) == 1)\n\t@test(candidate([1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp0yanjwfj.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp0yanjwfj.jl:1\n\
    in expression starting at /tmp/tmp0yanjwfj.jl:1\n"
  stdout: ''
  timestamp: 1660004031
- exit_code: -1
  program: "\"\"\"\n    Write a function count_nums which takes a vector of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([])\n    0\n \
    \   >>> count_nums([-1, 11, -11])\n    1\n    >>> count_nums([1, 1, 2])\n    3\n\
    \    \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    count=0\n  \
    \  for i in arr\n        if i<0\n            i=-i\n        end\n        count\
    \ = count + i\n    end\n    return count\nend\ncount_nums([])\nusing Test\n\n\
    @testset begin\n\ncandidate = count_nums;\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([-1, -2, 0]) == 0)\n\t@test(candidate([1, 1, 2, -2,\
    \ 3, 4, 5]) == 6)\n\t@test(candidate([1, 6, 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1,\
    \ 100, 98, -7, 1, -1]) == 4)\n\t@test(candidate([12, 23, 34, -45, -56, 0]) ==\
    \ 5)\n\t@test(candidate([0, 1]) == 1)\n\t@test(candidate([1]) == 1)\nend\n"
  status: Timeout
  stderr: 'ERROR: LoadError: MethodError: no method matching count_nums(::Vector{Any})'
  stdout: ''
  timestamp: 1660004034
- exit_code: 1
  program: "\"\"\"\n    Write a function count_nums which takes a vector of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([])\n    0\n \
    \   >>> count_nums([-1, 11, -11])\n    1\n    >>> count_nums([1, 1, 2])\n    3\n\
    \    \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    return length(arr[arr\
    \ .> 0])\nend\n</cell>\n<text>\nNow write a function to add together the digits\
    \ of a number:\nusing Test\n\n@testset begin\n\ncandidate = count_nums;\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([-1, -2, 0]) == 0)\n\t@test(candidate([1, 1, 2, -2,\
    \ 3, 4, 5]) == 6)\n\t@test(candidate([1, 6, 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1,\
    \ 100, 98, -7, 1, -1]) == 4)\n\t@test(candidate([12, 23, 34, -45, -56, 0]) ==\
    \ 5)\n\t@test(candidate([0, 1]) == 1)\n\t@test(candidate([1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpc4n_glo2.jl:16\nin expression starting at\
    \ /tmp/tmpc4n_glo2.jl:16\n"
  stdout: ''
  timestamp: 1660004031
- exit_code: 1
  program: "\"\"\"\n    Write a function count_nums which takes a vector of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([])\n    0\n \
    \   >>> count_nums([-1, 11, -11])\n    1\n    >>> count_nums([1, 1, 2])\n    3\n\
    \    \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    sum_ = sum_digits(arr)\n\
    \    return arr.size - sum_\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ count_nums;\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([-1,\
    \ -2, 0]) == 0)\n\t@test(candidate([1, 1, 2, -2, 3, 4, 5]) == 6)\n\t@test(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1, 100, 98, -7, 1, -1]) == 4)\n\
    \t@test(candidate([12, 23, 34, -45, -56, 0]) == 5)\n\t@test(candidate([0, 1])\
    \ == 1)\n\t@test(candidate([1]) == 1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpnzlmpezs.jl:19

    '
  stdout: "test set: Error During Test at /tmp/tmpnzlmpezs.jl:22\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == 0\n  UndefVarError: sum_digits\
    \ not defined\n  Stacktrace:\n   [1] count_nums(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmpnzlmpezs.jl:14\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpnzlmpezs.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpnzlmpezs.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpnzlmpezs.jl:23\n  Test threw exception\n  Expression:\
    \ candidate([-1, -2, 0]) == 0\n  UndefVarError: sum_digits not defined\n  Stacktrace:\n\
    \   [1] count_nums(arr::Vector{Int64})\n     @ Main /tmp/tmpnzlmpezs.jl:14\n \
    \  [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpnzlmpezs.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpnzlmpezs.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpnzlmpezs.jl:24\n  Test threw exception\n  Expression:\
    \ candidate([1, 1, 2, -2, 3, 4, 5]) == 6\n  UndefVarError: sum_digits not defined\n\
    \  Stacktrace:\n   [1] count_nums(arr::Vector{Int64})\n     @ Main /tmp/tmpnzlmpezs.jl:14\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpnzlmpezs.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpnzlmpezs.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpnzlmpezs.jl:25\n  Test threw exception\n  Expression:\
    \ candidate([1, 6, 9, -6, 0, 1, 5]) == 5\n  UndefVarError: sum_digits not defined\n\
    \  Stacktrace:\n   [1] count_nums(arr::Vector{Int64})\n     @ Main /tmp/tmpnzlmpezs.jl:14\n\
    \   [2] macro expansion\n     @ ~/.cond"
  timestamp: 1660004033
- exit_code: 1
  program: "\"\"\"\n    Write a function count_nums which takes a vector of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([])\n    0\n \
    \   >>> count_nums([-1, 11, -11])\n    1\n    >>> count_nums([1, 1, 2])\n    3\n\
    \    \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    counter = 0\n\
    \    for x in arr\n        digits = Int64(x)\n        counter += digits\n    \
    \    if digits < 0\n            counter += digits * digits\n        end\n    end\n\
    \    return counter\nend\n</cell>\n<text>\nTest your Code\nRun the cell below.\
    \ If there is no output, then your code is correct.\nusing Test\n\n@testset begin\n\
    \ncandidate = count_nums;\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([-1,\
    \ -2, 0]) == 0)\n\t@test(candidate([1, 1, 2, -2, 3, 4, 5]) == 6)\n\t@test(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1, 100, 98, -7, 1, -1]) == 4)\n\
    \t@test(candidate([12, 23, 34, -45, -56, 0]) == 5)\n\t@test(candidate([0, 1])\
    \ == 1)\n\t@test(candidate([1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4vu7o0si.jl:24\nin expression starting at\
    \ /tmp/tmp4vu7o0si.jl:24\n"
  stdout: ''
  timestamp: 1660004031
- exit_code: 1
  program: "\"\"\"\n    Write a function count_nums which takes a vector of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([])\n    0\n \
    \   >>> count_nums([-1, 11, -11])\n    1\n    >>> count_nums([1, 1, 2])\n    3\n\
    \    \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    sum_of_digits\
    \ = sum([i for i in arr if i > 0])\n    if sum_of_digits == 0\n        return\
    \ 0\n    return arr.size - sum_of_digits\nend\n</cell>\n<code language=julia-1.5>\n\
    count_nums([-1, 11, -11])\n</cell>\n<code language=julia-1.5>\ncount_nums([1,\
    \ 2, 3, -10])\n</cell>\n<text>\nExercise 10\nWrite a function count_nums which\
    \ takes a vector of integers and returns\nthe number of elements which has a sum\
    \ of digits < 0.\nIf a number is negative, then its first signed digit will be\
    \ positive:\ne.g. -123 has signed digits -1, 2, and 3.\nThe function is identical\
    \ to the function count_nums.\nA third function that counts the number of positive\
    \ and negative\nnumbers is also provided as count_nums.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = count_nums;\n\t@test(candidate(Vector{Int64}([])) == 0)\n\
    \t@test(candidate([-1, -2, 0]) == 0)\n\t@test(candidate([1, 1, 2, -2, 3, 4, 5])\
    \ == 6)\n\t@test(candidate([1, 6, 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1,\
    \ 100, 98, -7, 1, -1]) == 4)\n\t@test(candidate([12, 23, 34, -45, -56, 0]) ==\
    \ 5)\n\t@test(candidate([0, 1]) == 1)\n\t@test(candidate([1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyeuoud3g.jl:19\nin expression starting at\
    \ /tmp/tmpyeuoud3g.jl:19\n"
  stdout: ''
  timestamp: 1660004031
- exit_code: 1
  program: "\"\"\"\n    Write a function count_nums which takes a vector of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([])\n    0\n \
    \   >>> count_nums([-1, 11, -11])\n    1\n    >>> count_nums([1, 1, 2])\n    3\n\
    \    \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    count = 0\n\
    \    for n in arr\n        count += n % 10\n    end\n    return count\nend\n</cell>\n\
    <code language=julia-1.5>\ncount_nums(range(-9, 10))\n</cell>\n<text>\nExercise\
    \ 1\nusing Test\n\n@testset begin\n\ncandidate = count_nums;\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([-1, -2, 0]) == 0)\n\t@test(candidate([1, 1, 2, -2,\
    \ 3, 4, 5]) == 6)\n\t@test(candidate([1, 6, 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1,\
    \ 100, 98, -7, 1, -1]) == 4)\n\t@test(candidate([12, 23, 34, -45, -56, 0]) ==\
    \ 5)\n\t@test(candidate([0, 1]) == 1)\n\t@test(candidate([1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0i5a_q60.jl:20\nin expression starting at\
    \ /tmp/tmp0i5a_q60.jl:20\n"
  stdout: ''
  timestamp: 1660004031
- exit_code: 1
  program: "\"\"\"\n    Write a function count_nums which takes a vector of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([])\n    0\n \
    \   >>> count_nums([-1, 11, -11])\n    1\n    >>> count_nums([1, 1, 2])\n    3\n\
    \    \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    count_nums =\
    \ 0\n    for x in arr\n        if x < 0 \n            count_nums += 1\n      \
    \      x %= 10\n        end\n        if x == 0\n            continue\n       \
    \ count_nums += (x % 10)\n    end\n    return count_nums\nend\n</code>\n<|/ a\
    \ tags=julia dscore=1 |>\n<| a |>\nUsing just loops and bit-manipulation we can\
    \ do something like this:\n<code>\nusing Test\n\n@testset begin\n\ncandidate =\
    \ count_nums;\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([-1,\
    \ -2, 0]) == 0)\n\t@test(candidate([1, 1, 2, -2, 3, 4, 5]) == 6)\n\t@test(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1, 100, 98, -7, 1, -1]) == 4)\n\
    \t@test(candidate([12, 23, 34, -45, -56, 0]) == 5)\n\t@test(candidate([0, 1])\
    \ == 1)\n\t@test(candidate([1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpminqzuid.jl:26\nin expression starting at\
    \ /tmp/tmpminqzuid.jl:26\n"
  stdout: ''
  timestamp: 1660004031
- exit_code: 1
  program: "\"\"\"\n    Write a function count_nums which takes a vector of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([])\n    0\n \
    \   >>> count_nums([-1, 11, -11])\n    1\n    >>> count_nums([1, 1, 2])\n    3\n\
    \    \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    count = 0\n\
    \    for n in arr\n        if n > 0 \n            for i \u2208 digits(n)\n   \
    \             if i >= 0\n                    count += 1\n                end\n\
    \            end\n        end\n    end\n    return count\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = count_nums;\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([-1, -2, 0]) == 0)\n\t@test(candidate([1, 1, 2, -2,\
    \ 3, 4, 5]) == 6)\n\t@test(candidate([1, 6, 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1,\
    \ 100, 98, -7, 1, -1]) == 4)\n\t@test(candidate([12, 23, 34, -45, -56, 0]) ==\
    \ 5)\n\t@test(candidate([0, 1]) == 1)\n\t@test(candidate([1]) == 1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpq9z7qof4.jl:28

    '
  stdout: "test set: Test Failed at /tmp/tmpq9z7qof4.jl:35\n  Expression: candidate([1,\
    \ 100, 98, -7, 1, -1]) == 4\n   Evaluated: 7 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpq9z7qof4.jl:35 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpq9z7qof4.jl:30\ntest set: Test Failed at /tmp/tmpq9z7qof4.jl:36\n\
    \  Expression: candidate([12, 23, 34, -45, -56, 0]) == 5\n   Evaluated: 6 == 5\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpq9z7qof4.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpq9z7qof4.jl:30\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  timestamp: 1660004033
- exit_code: 1
  program: "\"\"\"\n    Write a function count_nums which takes a vector of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([])\n    0\n \
    \   >>> count_nums([-1, 11, -11])\n    1\n    >>> count_nums([1, 1, 2])\n    3\n\
    \    \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    n = 0\n    for\
    \ i in arr\n        if i >= 0\n            n += floor((log10(i)) :: Int64)\n \
    \       end\n    end\n    return n\nend\n</cell>\n<text>\nProblem 3c\nusing Test\n\
    \n@testset begin\n\ncandidate = count_nums;\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([-1, -2, 0]) == 0)\n\t@test(candidate([1, 1, 2, -2,\
    \ 3, 4, 5]) == 6)\n\t@test(candidate([1, 6, 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1,\
    \ 100, 98, -7, 1, -1]) == 4)\n\t@test(candidate([12, 23, 34, -45, -56, 0]) ==\
    \ 5)\n\t@test(candidate([0, 1]) == 1)\n\t@test(candidate([1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpykp6nhhr.jl:22\nin expression starting at\
    \ /tmp/tmpykp6nhhr.jl:22\n"
  stdout: ''
  timestamp: 1660004032
- exit_code: 1
  program: "\"\"\"\n    Write a function count_nums which takes a vector of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([])\n    0\n \
    \   >>> count_nums([-1, 11, -11])\n    1\n    >>> count_nums([1, 1, 2])\n    3\n\
    \    \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    counter = 0\n\
    \    for num in arr\n        if (num > 0) & (num > -10)\n            counter =\
    \ counter + 1\n        end\n    end\n    return counter\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = count_nums;\n\t@test(candidate(Vector{Int64}([])) == 0)\n\
    \t@test(candidate([-1, -2, 0]) == 0)\n\t@test(candidate([1, 1, 2, -2, 3, 4, 5])\
    \ == 6)\n\t@test(candidate([1, 6, 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1,\
    \ 100, 98, -7, 1, -1]) == 4)\n\t@test(candidate([12, 23, 34, -45, -56, 0]) ==\
    \ 5)\n\t@test(candidate([0, 1]) == 1)\n\t@test(candidate([1]) == 1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 7 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp5m60cizc.jl:24

    '
  stdout: "test set: Test Failed at /tmp/tmp5m60cizc.jl:32\n  Expression: candidate([12,\
    \ 23, 34, -45, -56, 0]) == 5\n   Evaluated: 3 == 5\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp5m60cizc.jl:32 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp5m60cizc.jl:26\nTest Summary: | Pass  Fail\
    \  Total\ntest set      |    7     1      8\n"
  timestamp: 1660004033
- exit_code: 1
  program: "\"\"\"\n    Write a function count_nums which takes a vector of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([])\n    0\n \
    \   >>> count_nums([-1, 11, -11])\n    1\n    >>> count_nums([1, 1, 2])\n    3\n\
    \    \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    count_nums_helper(arr)\n\
    end \nusing Test\n\n@testset begin\n\ncandidate = count_nums;\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([-1, -2, 0]) == 0)\n\t@test(candidate([1, 1, 2, -2,\
    \ 3, 4, 5]) == 6)\n\t@test(candidate([1, 6, 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1,\
    \ 100, 98, -7, 1, -1]) == 4)\n\t@test(candidate([12, 23, 34, -45, -56, 0]) ==\
    \ 5)\n\t@test(candidate([0, 1]) == 1)\n\t@test(candidate([1]) == 1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpu7gv8aq3.jl:18

    '
  stdout: "test set: Error During Test at /tmp/tmpu7gv8aq3.jl:21\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == 0\n  UndefVarError: count_nums_helper\
    \ not defined\n  Stacktrace:\n   [1] count_nums(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmpu7gv8aq3.jl:14\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpu7gv8aq3.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpu7gv8aq3.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpu7gv8aq3.jl:22\n  Test threw exception\n  Expression:\
    \ candidate([-1, -2, 0]) == 0\n  UndefVarError: count_nums_helper not defined\n\
    \  Stacktrace:\n   [1] count_nums(arr::Vector{Int64})\n     @ Main /tmp/tmpu7gv8aq3.jl:14\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpu7gv8aq3.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpu7gv8aq3.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpu7gv8aq3.jl:23\n  Test threw exception\n  Expression:\
    \ candidate([1, 1, 2, -2, 3, 4, 5]) == 6\n  UndefVarError: count_nums_helper not\
    \ defined\n  Stacktrace:\n   [1] count_nums(arr::Vector{Int64})\n     @ Main /tmp/tmpu7gv8aq3.jl:14\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpu7gv8aq3.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpu7gv8aq3.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpu7gv8aq3.jl:24\n  Test threw exception\n  Expression:\
    \ candidate([1, 6, 9, -6, 0, 1, 5]) == 5\n  UndefVarError: count_nums_helper not\
    \ defined\n  Stacktrace:\n   [1] count_nums(arr::Vector{Int64})\n     @ Main /tmp/tmpu7gv8aq3.jl:14\n\
    \   [2] ma"
  timestamp: 1660004034
- exit_code: 1
  program: "\"\"\"\n    Write a function count_nums which takes a vector of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([])\n    0\n \
    \   >>> count_nums([-1, 11, -11])\n    1\n    >>> count_nums([1, 1, 2])\n    3\n\
    \    \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    count=0\n  \
    \  for i in arr\n        if i>0\n            count=count+1\n        else\n   \
    \         count=count+sign(i)\n        end\n    end\n    return count\nend\n</cell>\n\
    <text>\nSolution 2\nA more efficient solution to the problem, which uses the same\
    \ general approach as the one above is to use the count_if function.\nusing Test\n\
    \n@testset begin\n\ncandidate = count_nums;\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([-1, -2, 0]) == 0)\n\t@test(candidate([1, 1, 2, -2,\
    \ 3, 4, 5]) == 6)\n\t@test(candidate([1, 6, 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1,\
    \ 100, 98, -7, 1, -1]) == 4)\n\t@test(candidate([12, 23, 34, -45, -56, 0]) ==\
    \ 5)\n\t@test(candidate([0, 1]) == 1)\n\t@test(candidate([1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprjripx89.jl:24\nin expression starting at\
    \ /tmp/tmprjripx89.jl:24\n"
  stdout: ''
  timestamp: 1660004032
- exit_code: 1
  program: "\"\"\"\n    Write a function count_nums which takes a vector of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([])\n    0\n \
    \   >>> count_nums([-1, 11, -11])\n    1\n    >>> count_nums([1, 1, 2])\n    3\n\
    \    \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    if length(arr)\
    \ == 0 \n        return 0 \n    \n    count = 1 \n    for n in arr \n        \n\
    \        if n \u2265 0 \n            if n == Int(n) - n \n                count\
    \ += 1\n            end \n        else \n            if n \u2265 Int(-n) - n \n\
    \                count += 1\n            end \n        end \n    end \n    \n\
    \    return count\nend\n</cell>\n<code language=julia-1.5>\ncount_nums([-1, 2,\
    \ 3, -2])\n</cell>\n<text>\nExercise 3\nWrite a function that returns the number\
    \ of integers in a vector that have \nthe sum of the digits > 0.\nIf there is\
    \ a number that is negative, then the number will be \npositive:\ne.g. -111 has\
    \ signed digits -1, -2, and 1.\nIf the number is 0, then it will not be counted.\n\
    e.g. 2 has no digits.\nThe function should work with integers and negative numbers.\n\
    The function should also work with vectors.\nusing Test\n\n@testset begin\n\n\
    candidate = count_nums;\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([-1,\
    \ -2, 0]) == 0)\n\t@test(candidate([1, 1, 2, -2, 3, 4, 5]) == 6)\n\t@test(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1, 100, 98, -7, 1, -1]) == 4)\n\
    \t@test(candidate([12, 23, 34, -45, -56, 0]) == 5)\n\t@test(candidate([0, 1])\
    \ == 1)\n\t@test(candidate([1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_5pe40kd.jl:33\nin expression starting at\
    \ /tmp/tmp_5pe40kd.jl:33\n"
  stdout: ''
  timestamp: 1660004032
- exit_code: 1
  program: "\"\"\"\n    Write a function count_nums which takes a vector of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([])\n    0\n \
    \   >>> count_nums([-1, 11, -11])\n    1\n    >>> count_nums([1, 1, 2])\n    3\n\
    \    \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    sum = 0\n  \
    \  for i in arr\n        sum += abs(i)\n    end\n    return sum\nend\n</cell>\n\
    <text>\nTo test our function, let's try it on a few values:\nusing Test\n\n@testset\
    \ begin\n\ncandidate = count_nums;\n\t@test(candidate(Vector{Int64}([])) == 0)\n\
    \t@test(candidate([-1, -2, 0]) == 0)\n\t@test(candidate([1, 1, 2, -2, 3, 4, 5])\
    \ == 6)\n\t@test(candidate([1, 6, 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1,\
    \ 100, 98, -7, 1, -1]) == 4)\n\t@test(candidate([12, 23, 34, -45, -56, 0]) ==\
    \ 5)\n\t@test(candidate([0, 1]) == 1)\n\t@test(candidate([1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpevj0o6qh.jl:20\nin expression starting at\
    \ /tmp/tmpevj0o6qh.jl:20\n"
  stdout: ''
  timestamp: 1660004032
- exit_code: 1
  program: "\"\"\"\n    Write a function count_nums which takes a vector of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([])\n    0\n \
    \   >>> count_nums([-1, 11, -11])\n    1\n    >>> count_nums([1, 1, 2])\n    3\n\
    \    \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    count_nums_impl(arr,\
    \ 0, 0)\nend\nusing Test\n\n@testset begin\n\ncandidate = count_nums;\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([-1, -2, 0]) == 0)\n\t@test(candidate([1, 1, 2, -2,\
    \ 3, 4, 5]) == 6)\n\t@test(candidate([1, 6, 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1,\
    \ 100, 98, -7, 1, -1]) == 4)\n\t@test(candidate([12, 23, 34, -45, -56, 0]) ==\
    \ 5)\n\t@test(candidate([0, 1]) == 1)\n\t@test(candidate([1]) == 1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpxymorwn6.jl:18

    '
  stdout: "test set: Error During Test at /tmp/tmpxymorwn6.jl:21\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == 0\n  UndefVarError: count_nums_impl\
    \ not defined\n  Stacktrace:\n   [1] count_nums(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmpxymorwn6.jl:14\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpxymorwn6.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpxymorwn6.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpxymorwn6.jl:22\n  Test threw exception\n  Expression:\
    \ candidate([-1, -2, 0]) == 0\n  UndefVarError: count_nums_impl not defined\n\
    \  Stacktrace:\n   [1] count_nums(arr::Vector{Int64})\n     @ Main /tmp/tmpxymorwn6.jl:14\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpxymorwn6.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpxymorwn6.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpxymorwn6.jl:23\n  Test threw exception\n  Expression:\
    \ candidate([1, 1, 2, -2, 3, 4, 5]) == 6\n  UndefVarError: count_nums_impl not\
    \ defined\n  Stacktrace:\n   [1] count_nums(arr::Vector{Int64})\n     @ Main /tmp/tmpxymorwn6.jl:14\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpxymorwn6.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpxymorwn6.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpxymorwn6.jl:24\n  Test threw exception\n  Expression:\
    \ candidate([1, 6, 9, -6, 0, 1, 5]) == 5\n  UndefVarError: count_nums_impl not\
    \ defined\n  Stacktrace:\n   [1] count_nums(arr::Vector{Int64})\n     @ Main /tmp/tmpxymorwn6.jl:14\n\
    \   [2] macro expa"
  timestamp: 1660004035
- exit_code: 1
  program: "\"\"\"\n    Write a function count_nums which takes a vector of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([])\n    0\n \
    \   >>> count_nums([-1, 11, -11])\n    1\n    >>> count_nums([1, 1, 2])\n    3\n\
    \    \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    nums::Vector{Int64}\
    \ = Vector{Int64}(arr)\n    len = length(nums)\n    count = 0\n    for v in nums\n\
    \        count += 1\n        if v < 0\n            count -= (v < 0) \n       \
    \ else\n            break\n    end\n    return count\nend\n</cell>\n<code language=julia-1.4>\n\
    count_nums([-2, -1, 1, 2, 3, 5, 6, 7, 8, 9, 12, 13, 14, 14, 14, 14])\n</cell>\n\
    <code language=julia-1.4>\ncount_nums([12, 13, 14, 15, 16, 17, 18])\n</cell>\n\
    <code language=julia-1.4>\ncount_nums([1, 2, 3, 4, -1])\n</cell>\n<code language=julia-1.4>\n\
    count_nums([-1, 1, -2, 1, 1])\n</cell>\n<code language=julia-1.4>\ncount_nums([-1,\
    \ 1, -2, 1, 1])\n</cell>\n<code language=julia-1.4>\ncount_nums([1, 2, 3, -1,\
    \ -1])\n</cell>\n<code language=julia-1.4>\ncount_nums([-1, 1, -2, 1, 1])\n</cell>\n\
    <code language=julia-1.4>\ncount_nums([-2, 2, -5, 7, -10, 3])\n</cell>\n<code\
    \ language=julia-1.4>\ncount_nums([-2, 3, -4, 7, -10, 10])\n</cell>\n<code language=julia-1.4>\n\
    count_nums([-4, -1, -5, 2, 7, -10, 10])\n</cell>\n<code language=julia-1.4>\n\
    count_nums([-2, -4, -6, -7, -8, -1, -10, -10, -10, -10])\n</cell>\n<text>\n3.3\
    \ Exercise\nImplement the function `count_digits_large` which computes the number\
    \ of digits in each entry in the array `nums`.\nusing Test\n\n@testset begin\n\
    \ncandidate = count_nums;\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([-1,\
    \ -2, 0]) == 0)\n\t@test(candidate([1, 1, 2, -2, 3, 4, 5]) == 6)\n\t@test(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1, 100, 98, -7, 1, -1]) == 4)\n\
    \t@test(candidate([12, 23, 34, -45, -56, 0]) == 5)\n\t@test(candidate([0, 1])\
    \ == 1)\n\t@test(candidate([1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzazs4v_y.jl:26\nin expression starting at\
    \ /tmp/tmpzazs4v_y.jl:26\n"
  stdout: ''
  timestamp: 1660004033
- exit_code: 1
  program: "\"\"\"\n    Write a function count_nums which takes a vector of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([])\n    0\n \
    \   >>> count_nums([-1, 11, -11])\n    1\n    >>> count_nums([1, 1, 2])\n    3\n\
    \    \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    if arr.empty\n\
    \        return 0 \n    digits = zeros(Int64)\n    digit_sum = 0\n    if arr[0]\
    \ < 0 \n        arr[0] = abs(arr[0])\n        arr[1] = -arr[1]\n    end\nusing\
    \ Test\n\n@testset begin\n\ncandidate = count_nums;\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([-1, -2, 0]) == 0)\n\t@test(candidate([1, 1, 2, -2,\
    \ 3, 4, 5]) == 6)\n\t@test(candidate([1, 6, 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1,\
    \ 100, 98, -7, 1, -1]) == 4)\n\t@test(candidate([12, 23, 34, -45, -56, 0]) ==\
    \ 5)\n\t@test(candidate([0, 1]) == 1)\n\t@test(candidate([1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyrjx03vh.jl:1\nin expression starting at /tmp/tmpyrjx03vh.jl:1\n"
  stdout: ''
  timestamp: 1660004033
- exit_code: 1
  program: "\"\"\"\n    Write a function count_nums which takes a vector of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([])\n    0\n \
    \   >>> count_nums([-1, 11, -11])\n    1\n    >>> count_nums([1, 1, 2])\n    3\n\
    \    \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    count = 0\n\
    \    for i in arr\n        if i > 0 \n            if ((i % 10) > 0) \n       \
    \         count += 1\n            else\n                count = count\n      \
    \  end\n    end\n    return count\nend\ncount_nums(x)\nusing Test\n\n@testset\
    \ begin\n\ncandidate = count_nums;\n\t@test(candidate(Vector{Int64}([])) == 0)\n\
    \t@test(candidate([-1, -2, 0]) == 0)\n\t@test(candidate([1, 1, 2, -2, 3, 4, 5])\
    \ == 6)\n\t@test(candidate([1, 6, 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1,\
    \ 100, 98, -7, 1, -1]) == 4)\n\t@test(candidate([12, 23, 34, -45, -56, 0]) ==\
    \ 5)\n\t@test(candidate([0, 1]) == 1)\n\t@test(candidate([1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpbwxw54zc.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpbwxw54zc.jl:1\n\
    in expression starting at /tmp/tmpbwxw54zc.jl:1\n"
  stdout: ''
  timestamp: 1660004033
- exit_code: 1
  program: "\"\"\"\n    Write a function count_nums which takes a vector of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([])\n    0\n \
    \   >>> count_nums([-1, 11, -11])\n    1\n    >>> count_nums([1, 1, 2])\n    3\n\
    \    \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    if arr.size\
    \ == 0\n        return 0\n    if arr[1] == -arr[0]\n        return count_nums(tail(arr))\n\
    \    end\n    first = arr[1] - arr[0]\n    cnt = 0\n    for x in arr\n       \
    \ if x > first + 2\n            return cnt + (x - first)\n        end\n      \
    \  cnt += 1\n    end\n    return cnt\nend\n</cell>\n<code language=julia-1.3>\n\
    count_nums(collect(0:10))\n</cell>\n<text>\nPart 2: Counting Words\nImplement\
    \ a function that can count the number of words in a string.\nYou may assume that\
    \ a maximum line length of 80 characters is allowed.\nusing Test\n\n@testset begin\n\
    \ncandidate = count_nums;\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([-1,\
    \ -2, 0]) == 0)\n\t@test(candidate([1, 1, 2, -2, 3, 4, 5]) == 6)\n\t@test(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1, 100, 98, -7, 1, -1]) == 4)\n\
    \t@test(candidate([12, 23, 34, -45, -56, 0]) == 5)\n\t@test(candidate([0, 1])\
    \ == 1)\n\t@test(candidate([1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpm7zegyqi.jl:29\nin expression starting at\
    \ /tmp/tmpm7zegyqi.jl:29\n"
  stdout: ''
  timestamp: 1660004033
- exit_code: 1
  program: "\"\"\"\n    Write a function count_nums which takes a vector of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([])\n    0\n \
    \   >>> count_nums([-1, 11, -11])\n    1\n    >>> count_nums([1, 1, 2])\n    3\n\
    \    \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    count_nums =\
    \ 0\n    for i in arr\n        if i > 0\n            count_nums += 1\n       \
    \ end\n    end\n    count_nums\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = count_nums;\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([-1,\
    \ -2, 0]) == 0)\n\t@test(candidate([1, 1, 2, -2, 3, 4, 5]) == 6)\n\t@test(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1, 100, 98, -7, 1, -1]) == 4)\n\
    \t@test(candidate([12, 23, 34, -45, -56, 0]) == 5)\n\t@test(candidate([0, 1])\
    \ == 1)\n\t@test(candidate([1]) == 1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 7 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpj2dlcueb.jl:24

    '
  stdout: "test set: Test Failed at /tmp/tmpj2dlcueb.jl:32\n  Expression: candidate([12,\
    \ 23, 34, -45, -56, 0]) == 5\n   Evaluated: 3 == 5\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpj2dlcueb.jl:32 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpj2dlcueb.jl:26\nTest Summary: | Pass  Fail\
    \  Total\ntest set      |    7     1      8\n"
  timestamp: 1660004034
- exit_code: 1
  program: "\"\"\"\n    Write a function count_nums which takes a vector of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([])\n    0\n \
    \   >>> count_nums([-1, 11, -11])\n    1\n    >>> count_nums([1, 1, 2])\n    3\n\
    \    \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    first = 1\n\
    \    for i in arr\n        first += abs\n    end\n    return first\n</code>\n\
    And then apply the function to each element in the vector, i.e. vectorize(count_nums)\n\
    <|/ a tags=arrays,julia,vector dscore=1 |>\n<| a dscore=1 |>\nAnother variation\
    \ on's answer using findall:\n<code>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = count_nums;\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([-1,\
    \ -2, 0]) == 0)\n\t@test(candidate([1, 1, 2, -2, 3, 4, 5]) == 6)\n\t@test(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1, 100, 98, -7, 1, -1]) == 4)\n\
    \t@test(candidate([12, 23, 34, -45, -56, 0]) == 5)\n\t@test(candidate([0, 1])\
    \ == 1)\n\t@test(candidate([1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzwfq7w99.jl:19\nin expression starting at\
    \ /tmp/tmpzwfq7w99.jl:19\n"
  stdout: ''
  timestamp: 1660004033
- exit_code: 1
  program: "\"\"\"\n    Write a function count_nums which takes a vector of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([])\n    0\n \
    \   >>> count_nums([-1, 11, -11])\n    1\n    >>> count_nums([1, 1, 2])\n    3\n\
    \    \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n  count = 0\n  for\
    \ val in arr \n    if (val<0)\n      val *= -1\n    count += (val<0)?(val*(val>0)+1):val\n\
    \  end\n  return count\nend\nusing Test\n\n@testset begin\n\ncandidate = count_nums;\n\
    \t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([-1, -2, 0]) ==\
    \ 0)\n\t@test(candidate([1, 1, 2, -2, 3, 4, 5]) == 6)\n\t@test(candidate([1, 6,\
    \ 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1, 100, 98, -7, 1, -1]) == 4)\n\t\
    @test(candidate([12, 23, 34, -45, -56, 0]) == 5)\n\t@test(candidate([0, 1]) ==\
    \ 1)\n\t@test(candidate([1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: space required before \"?\" operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpeusajdpv.jl:18\nin expression starting at\
    \ /tmp/tmpeusajdpv.jl:18\n"
  stdout: ''
  timestamp: 1660004033
- exit_code: 1
  program: "\"\"\"\n    Write a function count_nums which takes a vector of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([])\n    0\n \
    \   >>> count_nums([-1, 11, -11])\n    1\n    >>> count_nums([1, 1, 2])\n    3\n\
    \    \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    if arr.iszero()\
    \ \n        return 0\n    elseif arr.isone() \n        return 1 \n    elseif arr.istwo()\
    \ \n        return 2\n    elseif arr.isthree() \n        return 3\n    elseif\
    \ arr.isfour() \n        return 4\n    elseif arr.isfive() \n        return 5\n\
    \    elseif arr.issix() \n        return 6\n    elseif arr.isseven() \n      \
    \  return 7\n    elseif arr.iseight() \n        return 8\n    elseif arr.isnine()\
    \ \n        return 9\n    end\nusing Test\n\n@testset begin\n\ncandidate = count_nums;\n\
    \t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([-1, -2, 0]) ==\
    \ 0)\n\t@test(candidate([1, 1, 2, -2, 3, 4, 5]) == 6)\n\t@test(candidate([1, 6,\
    \ 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1, 100, 98, -7, 1, -1]) == 4)\n\t\
    @test(candidate([12, 23, 34, -45, -56, 0]) == 5)\n\t@test(candidate([0, 1]) ==\
    \ 1)\n\t@test(candidate([1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpmj38u9cx.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpmj38u9cx.jl:1\n\
    in expression starting at /tmp/tmpmj38u9cx.jl:1\n"
  stdout: ''
  timestamp: 1660004033
- exit_code: 1
  program: "\"\"\"\n    Write a function count_nums which takes a vector of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([])\n    0\n \
    \   >>> count_nums([-1, 11, -11])\n    1\n    >>> count_nums([1, 1, 2])\n    3\n\
    \    \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    count_nums =\
    \ if arr == [] \n        0\n    else\n        digit = arr[1]\n        count_nums\
    \ = if digit < 0 \n            count_nums - count_nums(arr[2 : end])\n       \
    \ else\n            count_nums + count_nums(arr[2 : end])\n        end\n    end\n\
    end\n</code>\n<|/ a tags=sum,vector,julia |>\n<| a dscore=1 |>\nFor a general\
    \ function f that you want to apply to a list of elements x, you can use the reduce\
    \ function:\n<code>\nusing Test\n\n@testset begin\n\ncandidate = count_nums;\n\
    \t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([-1, -2, 0]) ==\
    \ 0)\n\t@test(candidate([1, 1, 2, -2, 3, 4, 5]) == 6)\n\t@test(candidate([1, 6,\
    \ 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1, 100, 98, -7, 1, -1]) == 4)\n\t\
    @test(candidate([12, 23, 34, -45, -56, 0]) == 5)\n\t@test(candidate([0, 1]) ==\
    \ 1)\n\t@test(candidate([1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpww1qc8_l.jl:25\nin expression starting at\
    \ /tmp/tmpww1qc8_l.jl:25\n"
  stdout: ''
  timestamp: 1660004033
- exit_code: 1
  program: "\"\"\"\n    Write a function count_nums which takes a vector of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([])\n    0\n \
    \   >>> count_nums([-1, 11, -11])\n    1\n    >>> count_nums([1, 1, 2])\n    3\n\
    \    \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    count=0\n  \
    \  for n in arr\n        if n >=0 \n            count+=1\n            if n >=\
    \ 10 \n                count += 2\n            elseif n >= -10 \n            \
    \    count+=3\n            else\n                count+=1 \n        end\n    end\n\
    \    return count\nend\ncount_nums(arr)\n</cell>\n<text>\nExercise 7\nWrite a\
    \ function count_num_digits that takes a vector of integers and returns the number\
    \ of digits in the integers. \nusing Test\n\n@testset begin\n\ncandidate = count_nums;\n\
    \t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([-1, -2, 0]) ==\
    \ 0)\n\t@test(candidate([1, 1, 2, -2, 3, 4, 5]) == 6)\n\t@test(candidate([1, 6,\
    \ 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1, 100, 98, -7, 1, -1]) == 4)\n\t\
    @test(candidate([12, 23, 34, -45, -56, 0]) == 5)\n\t@test(candidate([0, 1]) ==\
    \ 1)\n\t@test(candidate([1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_sphcbax.jl:29\nin expression starting at\
    \ /tmp/tmp_sphcbax.jl:29\n"
  stdout: ''
  timestamp: 1660004033
- exit_code: 1
  program: "\"\"\"\n    Write a function count_nums which takes a vector of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([])\n    0\n \
    \   >>> count_nums([-1, 11, -11])\n    1\n    >>> count_nums([1, 1, 2])\n    3\n\
    \    \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    count = 0\n\
    \    for x in arr\n        count = 0\n        for digit in x\n            count\
    \ += 1\n            if count > 1\n                break\n        end\n    end\n\
    \    return count\nend\n</cell>\n<code language=julia-1.6>\n@assert count_nums([])\
    \ == 0\n@assert count_nums([-1, 11, -11]) == 1\n@assert count_nums([1, 1, 2])\
    \ == 3\n</cell>\n<text>\nTask 2: Digit sum\nWrite a function sum_digits_positive,\
    \ which takes a vector of integers and returns the sum of the positive digits\
    \ in the numbers.\n    e.g. [5, -2, -7, 12] returns 5 (sum of digits for positive\
    \ numbers).\n    >>> sum_digits_positive([])\n    0\n    >>> sum_digits_positive([5,\
    \ -2, -7, 12])\n    5\n    >>> sum_digits_positive([1, -3, 4])\n    -3\n    >>>\
    \ sum_digits_positive([9, -1, -2, -4, -1, 3, 0])\n    8\n    \"\"\"\nusing Test\n\
    \n@testset begin\n\ncandidate = count_nums;\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([-1, -2, 0]) == 0)\n\t@test(candidate([1, 1, 2, -2,\
    \ 3, 4, 5]) == 6)\n\t@test(candidate([1, 6, 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1,\
    \ 100, 98, -7, 1, -1]) == 4)\n\t@test(candidate([12, 23, 34, -45, -56, 0]) ==\
    \ 5)\n\t@test(candidate([0, 1]) == 1)\n\t@test(candidate([1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpftnszsgq.jl:25\nin expression starting at\
    \ /tmp/tmpftnszsgq.jl:25\n"
  stdout: ''
  timestamp: 1660004033
- exit_code: 1
  program: "\"\"\"\n    Write a function count_nums which takes a vector of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([])\n    0\n \
    \   >>> count_nums([-1, 11, -11])\n    1\n    >>> count_nums([1, 1, 2])\n    3\n\
    \    \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    # your code\
    \ here\n    \"\"\"\n    \n    - count_nums(arr::Vector{Int64})\n    \n    - Return\
    \ a function which returns a vector of integers \n    which has a sum of digits\
    \ > 0, and whose length is equal to the number\n    of elements in arr. \n   \
    \ \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = count_nums;\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([-1, -2, 0]) == 0)\n\t@test(candidate([1, 1, 2, -2,\
    \ 3, 4, 5]) == 6)\n\t@test(candidate([1, 6, 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1,\
    \ 100, 98, -7, 1, -1]) == 4)\n\t@test(candidate([12, 23, 34, -45, -56, 0]) ==\
    \ 5)\n\t@test(candidate([0, 1]) == 1)\n\t@test(candidate([1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpdz1bul_2.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpdz1bul_2.jl:1\n\
    in expression starting at /tmp/tmpdz1bul_2.jl:1\n"
  stdout: ''
  timestamp: 1660004033
- exit_code: 1
  program: "\"\"\"\n    Write a function count_nums which takes a vector of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([])\n    0\n \
    \   >>> count_nums([-1, 11, -11])\n    1\n    >>> count_nums([1, 1, 2])\n    3\n\
    \    \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    if arr == []\n\
    \        return 0\n    else if arr[1] < 0\n        neg1 = arr[1]\n        return\
    \ count_nums(neg1*(arr[2:end]-1)) \n    else\n        return count_nums(arr[1:end-1])\
    \ + count_nums(arr[2:end]-1)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    count_nums([-1, 2, -3, 4])\n</cell>\n<text>\nExercise 4.20\nWrite a function count_ints\
    \ which takes a vector of integers and returns\n    the number of elements which\
    \ has a sum of digits < 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \ >>> count_ints([])\n    0\n    >>> count_ints([-1, 11, -11])\n    1\n    >>>\
    \ count_ints([1, 1, 2])\n    0\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = count_nums;\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([-1,\
    \ -2, 0]) == 0)\n\t@test(candidate([1, 1, 2, -2, 3, 4, 5]) == 6)\n\t@test(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1, 100, 98, -7, 1, -1]) == 4)\n\
    \t@test(candidate([12, 23, 34, -45, -56, 0]) == 5)\n\t@test(candidate([0, 1])\
    \ == 1)\n\t@test(candidate([1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_brn5268.jl:16\nin expression starting at\
    \ /tmp/tmp_brn5268.jl:16\n"
  stdout: ''
  timestamp: 1660004034
- exit_code: 1
  program: "\"\"\"\n    Write a function count_nums which takes a vector of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([])\n    0\n \
    \   >>> count_nums([-1, 11, -11])\n    1\n    >>> count_nums([1, 1, 2])\n    3\n\
    \    \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n\t\n\tsum = 0\n\t\
    for v in arr\n\t\tif v <= 0\n\t\t\tcontinue\n\t\tsum += v%10\n\tend\n\treturn\
    \ sum\nend\nusing Test\n\n@testset begin\n\ncandidate = count_nums;\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([-1, -2, 0]) == 0)\n\t@test(candidate([1, 1, 2, -2,\
    \ 3, 4, 5]) == 6)\n\t@test(candidate([1, 6, 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1,\
    \ 100, 98, -7, 1, -1]) == 4)\n\t@test(candidate([12, 23, 34, -45, -56, 0]) ==\
    \ 5)\n\t@test(candidate([0, 1]) == 1)\n\t@test(candidate([1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpgzb10xyc.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpgzb10xyc.jl:1\n\
    in expression starting at /tmp/tmpgzb10xyc.jl:1\n"
  stdout: ''
  timestamp: 1660004034
- exit_code: 1
  program: "\"\"\"\n    Write a function count_nums which takes a vector of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([])\n    0\n \
    \   >>> count_nums([-1, 11, -11])\n    1\n    >>> count_nums([1, 1, 2])\n    3\n\
    \    \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    sum_ = 0\n \
    \   for x in arr\n        sum_ += x\n        if sum_ == 0 \n            continue\n\
    \        if sum_ > 0 \n            break\n    end\n    return sum_\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = count_nums;\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([-1, -2, 0]) == 0)\n\t@test(candidate([1, 1, 2, -2,\
    \ 3, 4, 5]) == 6)\n\t@test(candidate([1, 6, 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1,\
    \ 100, 98, -7, 1, -1]) == 4)\n\t@test(candidate([12, 23, 34, -45, -56, 0]) ==\
    \ 5)\n\t@test(candidate([0, 1]) == 1)\n\t@test(candidate([1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"for\" at /tmp/tmp6wsx1u1j.jl:15\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp6wsx1u1j.jl:1\n\
    in expression starting at /tmp/tmp6wsx1u1j.jl:1\n"
  stdout: ''
  timestamp: 1660004034
- exit_code: 1
  program: "\"\"\"\n    Write a function count_nums which takes a vector of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([])\n    0\n \
    \   >>> count_nums([-1, 11, -11])\n    1\n    >>> count_nums([1, 1, 2])\n    3\n\
    \    \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    # remove all\
    \ non-positive numbers from arr\n    arr = arr[arr |> collect{x -> x > 0}]\n \
    \   # if the length of the array is 1, then return 1\n    if length(arr) == 1\n\
    \        return 1\n    # else return length of arr minus first digit\n    else\n\
    \        length(arr)-arr[1] \n    end\nend\n</cell>\n<text>\nWrite a function\
    \ sum_of_digits that takes a vector of integers and returns the sum of digits\
    \ > 0.\nIf any number has a sum of digits < 0, then it must be returned as -99.\n\
    For example: -99 would return -99.\n    >>> sum_of_digits([])\n    99\n    >>>\
    \ sum_of_digits([-1, 11, -11])\n    -1\n    >>> sum_of_digits([1, 1, 2])\n   \
    \ 3\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = count_nums;\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([-1, -2, 0]) == 0)\n\t@test(candidate([1, 1, 2, -2,\
    \ 3, 4, 5]) == 6)\n\t@test(candidate([1, 6, 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1,\
    \ 100, 98, -7, 1, -1]) == 4)\n\t@test(candidate([12, 23, 34, -45, -56, 0]) ==\
    \ 5)\n\t@test(candidate([0, 1]) == 1)\n\t@test(candidate([1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6xtlgmxc.jl:24\nin expression starting at\
    \ /tmp/tmp6xtlgmxc.jl:24\n"
  stdout: ''
  timestamp: 1660004034
- exit_code: 1
  program: "\"\"\"\n    Write a function count_nums which takes a vector of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([])\n    0\n \
    \   >>> count_nums([-1, 11, -11])\n    1\n    >>> count_nums([1, 1, 2])\n    3\n\
    \    \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    #Write your\
    \ code here\n    count = 0\n    for x in arr\n        if x > 0\n            count\
    \ += 1\n        end\n    end\n    return count\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = count_nums;\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([-1,\
    \ -2, 0]) == 0)\n\t@test(candidate([1, 1, 2, -2, 3, 4, 5]) == 6)\n\t@test(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1, 100, 98, -7, 1, -1]) == 4)\n\
    \t@test(candidate([12, 23, 34, -45, -56, 0]) == 5)\n\t@test(candidate([0, 1])\
    \ == 1)\n\t@test(candidate([1]) == 1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 7 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp9px_d4ci.jl:25

    '
  stdout: "test set: Test Failed at /tmp/tmp9px_d4ci.jl:33\n  Expression: candidate([12,\
    \ 23, 34, -45, -56, 0]) == 5\n   Evaluated: 3 == 5\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp9px_d4ci.jl:33 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp9px_d4ci.jl:27\nTest Summary: | Pass  Fail\
    \  Total\ntest set      |    7     1      8\n"
  timestamp: 1660004035
- exit_code: 1
  program: "\"\"\"\n    Write a function count_nums which takes a vector of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([])\n    0\n \
    \   >>> count_nums([-1, 11, -11])\n    1\n    >>> count_nums([1, 1, 2])\n    3\n\
    \    \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    \n    for x\
    \ in arr\n        if x >= 0\n            return 1 + count_nums(arr - x)\n    \
    \    else\n            return 1 + count_nums(arr[x + 1..end]) + x\n    end\n \
    \   return 0\nend\n</cell>\n<text>\nExercise 1\nFor count_nums([-1, 11, -11]),\
    \ what is the expected output?\nusing Test\n\n@testset begin\n\ncandidate = count_nums;\n\
    \t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([-1, -2, 0]) ==\
    \ 0)\n\t@test(candidate([1, 1, 2, -2, 3, 4, 5]) == 6)\n\t@test(candidate([1, 6,\
    \ 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1, 100, 98, -7, 1, -1]) == 4)\n\t\
    @test(candidate([12, 23, 34, -45, -56, 0]) == 5)\n\t@test(candidate([0, 1]) ==\
    \ 1)\n\t@test(candidate([1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_uj2bqis.jl:23\nin expression starting at\
    \ /tmp/tmp_uj2bqis.jl:23\n"
  stdout: ''
  timestamp: 1660004034
- exit_code: 1
  program: "\"\"\"\n    Write a function count_nums which takes a vector of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([])\n    0\n \
    \   >>> count_nums([-1, 11, -11])\n    1\n    >>> count_nums([1, 1, 2])\n    3\n\
    \    \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    for x in arr\
    \ \n        if x < 0 \n            digit = -(div(x, 10))\n        else \n    \
    \        digit = div(x, 10)\n        if digit > 0 \n            sum += digit\n\
    \        end\n    end\n    return sum\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = count_nums;\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([-1,\
    \ -2, 0]) == 0)\n\t@test(candidate([1, 1, 2, -2, 3, 4, 5]) == 6)\n\t@test(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1, 100, 98, -7, 1, -1]) == 4)\n\
    \t@test(candidate([12, 23, 34, -45, -56, 0]) == 5)\n\t@test(candidate([0, 1])\
    \ == 1)\n\t@test(candidate([1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpzrjvkpzc.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpzrjvkpzc.jl:1\n\
    in expression starting at /tmp/tmpzrjvkpzc.jl:1\n"
  stdout: ''
  timestamp: 1660004034
- exit_code: 1
  program: "\"\"\"\n    Write a function count_nums which takes a vector of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([])\n    0\n \
    \   >>> count_nums([-1, 11, -11])\n    1\n    >>> count_nums([1, 1, 2])\n    3\n\
    \    \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n  n = length(arr)\n\
    \  sum = 0\n  for idx in 1:n\n    if idx == 1 || (idx > 1 && arr[idx] > 0 && arr[idx]\
    \ < 10)\n      continue\n    sum += arr[idx] - 10\n  end\n  return sum\nend\n\
    </cell>\n<text>\ncount_nums2\nusing Test\n\n@testset begin\n\ncandidate = count_nums;\n\
    \t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([-1, -2, 0]) ==\
    \ 0)\n\t@test(candidate([1, 1, 2, -2, 3, 4, 5]) == 6)\n\t@test(candidate([1, 6,\
    \ 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1, 100, 98, -7, 1, -1]) == 4)\n\t\
    @test(candidate([12, 23, 34, -45, -56, 0]) == 5)\n\t@test(candidate([0, 1]) ==\
    \ 1)\n\t@test(candidate([1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp57xpdyt9.jl:23\nin expression starting at\
    \ /tmp/tmp57xpdyt9.jl:23\n"
  stdout: ''
  timestamp: 1660004034
- exit_code: 1
  program: "\"\"\"\n    Write a function count_nums which takes a vector of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([])\n    0\n \
    \   >>> count_nums([-1, 11, -11])\n    1\n    >>> count_nums([1, 1, 2])\n    3\n\
    \    \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    len = length(arr)\n\
    \    if len == 0 \n        return 0 \n    else \n        first = arr[1]\n    \
    \    last = arr[len]\n        firstsign = first<0?1:0\n        lastsign = last<0?1:0\n\
    \        sum = 0\n        for n in arr[firstsign:lastsign] \n            sum =\
    \ sum + n \n        end\n        return sum\n    end\nend\n</cell>\n<code language=julia-1.4>\n\
    count_nums([1, 2, -3, 4, -5, 6, 7, -8, 9])\n</cell>\n<text>\nProblem 5.2\nusing\
    \ Test\n\n@testset begin\n\ncandidate = count_nums;\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([-1, -2, 0]) == 0)\n\t@test(candidate([1, 1, 2, -2,\
    \ 3, 4, 5]) == 6)\n\t@test(candidate([1, 6, 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1,\
    \ 100, 98, -7, 1, -1]) == 4)\n\t@test(candidate([12, 23, 34, -45, -56, 0]) ==\
    \ 5)\n\t@test(candidate([0, 1]) == 1)\n\t@test(candidate([1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: space required before \"?\" operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpe5k6up6a.jl:20\nin expression starting at\
    \ /tmp/tmpe5k6up6a.jl:20\n"
  stdout: ''
  timestamp: 1660004034
- exit_code: 1
  program: "\"\"\"\n    Write a function count_nums which takes a vector of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([])\n    0\n \
    \   >>> count_nums([-1, 11, -11])\n    1\n    >>> count_nums([1, 1, 2])\n    3\n\
    \    \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    len_arr = length(arr)\n\
    \    if len_arr == 0 \n        return 0 \n    else if len_arr == 1\n        return\
    \ 1 \n    end\n    if arr[1] < 0 \n        arr[1] = arr[1]*-1\n        sign =\
    \ 1\n    else \n        sign = 0 \n    end\n    sum_digits = 0\n    for n in arr\n\
    \        if n < 10 \n            sum_digits += n \n        else \n           \
    \ sum_digits += n*sign\n        end\n    end\n    return sum_digits \nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = count_nums;\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([-1, -2, 0]) == 0)\n\t@test(candidate([1, 1, 2, -2,\
    \ 3, 4, 5]) == 6)\n\t@test(candidate([1, 6, 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1,\
    \ 100, 98, -7, 1, -1]) == 4)\n\t@test(candidate([12, 23, 34, -45, -56, 0]) ==\
    \ 5)\n\t@test(candidate([0, 1]) == 1)\n\t@test(candidate([1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmh376xy6.jl:17\nin expression starting at\
    \ /tmp/tmpmh376xy6.jl:17\n"
  stdout: ''
  timestamp: 1660004034
- exit_code: 1
  program: "\"\"\"\n    Write a function count_nums which takes a vector of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([])\n    0\n \
    \   >>> count_nums([-1, 11, -11])\n    1\n    >>> count_nums([1, 1, 2])\n    3\n\
    \    \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    if all(arr >=0),\
    \ 0 else sum(arr .> 0) \nend\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThanks for\
    \ your help. I don't think I explained myself well. I was able to do it using\
    \ just a single function, I just don't understand how I can count all the digits\
    \ > 0 without using any loop. Thanks again\n<|/ c |>\n<| a dscore=0 |>\nHere's\
    \ a way to do it using a single loop:\n<code>\nusing Test\n\n@testset begin\n\n\
    candidate = count_nums;\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([-1,\
    \ -2, 0]) == 0)\n\t@test(candidate([1, 1, 2, -2, 3, 4, 5]) == 6)\n\t@test(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1, 100, 98, -7, 1, -1]) == 4)\n\
    \t@test(candidate([12, 23, 34, -45, -56, 0]) == 5)\n\t@test(candidate([0, 1])\
    \ == 1)\n\t@test(candidate([1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \",\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpdt54ci1w.jl:14\nin expression starting at /tmp/tmpdt54ci1w.jl:14\n"
  stdout: ''
  timestamp: 1660004034
- exit_code: 1
  program: "\"\"\"\n    Write a function count_nums which takes a vector of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([])\n    0\n \
    \   >>> count_nums([-1, 11, -11])\n    1\n    >>> count_nums([1, 1, 2])\n    3\n\
    \    \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    return sum(\
    \ arr .!= 0 ) - arr.first(digits(arr)[1]) \nend\n</cell>\n<text>\ncount_nums\n\
    using Test\n\n@testset begin\n\ncandidate = count_nums;\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([-1, -2, 0]) == 0)\n\t@test(candidate([1, 1, 2, -2,\
    \ 3, 4, 5]) == 6)\n\t@test(candidate([1, 6, 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1,\
    \ 100, 98, -7, 1, -1]) == 4)\n\t@test(candidate([12, 23, 34, -45, -56, 0]) ==\
    \ 5)\n\t@test(candidate([0, 1]) == 1)\n\t@test(candidate([1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9v10tqy9.jl:16\nin expression starting at\
    \ /tmp/tmp9v10tqy9.jl:16\n"
  stdout: ''
  timestamp: 1660004034
- exit_code: 1
  program: "\"\"\"\n    Write a function count_nums which takes a vector of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([])\n    0\n \
    \   >>> count_nums([-1, 11, -11])\n    1\n    >>> count_nums([1, 1, 2])\n    3\n\
    \    \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    count_num =\
    \ falses(length(arr))\n    for element in arr\n        if element > 0\n      \
    \      count_num[element - 1] = true\n        end\n    end\n    return length(arr[count_num])\n\
    end\n</cell>\n<code language=julia-0.6>\ncount_nums([1, -3, 3, -6, 7])\n</cell>\n\
    <text>\nWrite a function sum_of_digits which takes a vector of integers and returns\n\
    the sum of digits of the number. If a number is negative, its first signed \n\
    digit will be negative: e.g. -123 has signed digits -1, 2, and 3.\n    >>> sum_of_digits([])\n\
    \    0.0\n    >>> sum_of_digits([-1, 11, -11])\n    2.0\n    >>> sum_of_digits([1,\
    \ 1, 2])\n    3.0\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = count_nums;\n\
    \t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([-1, -2, 0]) ==\
    \ 0)\n\t@test(candidate([1, 1, 2, -2, 3, 4, 5]) == 6)\n\t@test(candidate([1, 6,\
    \ 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1, 100, 98, -7, 1, -1]) == 4)\n\t\
    @test(candidate([12, 23, 34, -45, -56, 0]) == 5)\n\t@test(candidate([0, 1]) ==\
    \ 1)\n\t@test(candidate([1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplz5r_1_u.jl:22\nin expression starting at\
    \ /tmp/tmplz5r_1_u.jl:22\n"
  stdout: ''
  timestamp: 1660004035
- exit_code: 1
  program: "\"\"\"\n    Write a function count_nums which takes a vector of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([])\n    0\n \
    \   >>> count_nums([-1, 11, -11])\n    1\n    >>> count_nums([1, 1, 2])\n    3\n\
    \    \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    zeros = 0\n\
    \    for x in arr\n        if x < 0\n            x %= 10\n            zeros +=\
    \ 1\n        end\n    end\n    return zeros\nend\n</cell>\n<code language=julia-1.0>\n\
    count_nums([-2, -1, 0, 1, 5, -23, -7, -8])\n</cell>\n<text>\nWrite a function\
    \ that sums up all numbers in a vector. Your function should return a number.\n\
    If your vector is empty, then your function should return 0.\nHint: the sum()\
    \ function should be helpful.\nusing Test\n\n@testset begin\n\ncandidate = count_nums;\n\
    \t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([-1, -2, 0]) ==\
    \ 0)\n\t@test(candidate([1, 1, 2, -2, 3, 4, 5]) == 6)\n\t@test(candidate([1, 6,\
    \ 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1, 100, 98, -7, 1, -1]) == 4)\n\t\
    @test(candidate([12, 23, 34, -45, -56, 0]) == 5)\n\t@test(candidate([0, 1]) ==\
    \ 1)\n\t@test(candidate([1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1w37p1ie.jl:23\nin expression starting at\
    \ /tmp/tmp1w37p1ie.jl:23\n"
  stdout: ''
  timestamp: 1660004035
- exit_code: 1
  program: "\"\"\"\n    Write a function count_nums which takes a vector of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([])\n    0\n \
    \   >>> count_nums([-1, 11, -11])\n    1\n    >>> count_nums([1, 1, 2])\n    3\n\
    \    \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    \"\"\"\n   \
    \ Write a function that takes a vector of integers and returns the number\n  \
    \  of elements which has a sum of digits > 0.\n    \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = count_nums;\n\t@test(candidate(Vector{Int64}([])) == 0)\n\
    \t@test(candidate([-1, -2, 0]) == 0)\n\t@test(candidate([1, 1, 2, -2, 3, 4, 5])\
    \ == 6)\n\t@test(candidate([1, 6, 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1,\
    \ 100, 98, -7, 1, -1]) == 4)\n\t@test(candidate([12, 23, 34, -45, -56, 0]) ==\
    \ 5)\n\t@test(candidate([0, 1]) == 1)\n\t@test(candidate([1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpzpl7cnxd.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpzpl7cnxd.jl:1\n\
    in expression starting at /tmp/tmpzpl7cnxd.jl:1\n"
  stdout: ''
  timestamp: 1660004035
- exit_code: 1
  program: "\"\"\"\n    Write a function count_nums which takes a vector of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([])\n    0\n \
    \   >>> count_nums([-1, 11, -11])\n    1\n    >>> count_nums([1, 1, 2])\n    3\n\
    \    \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    count_nums =\
    \ arr.sum() \n    for i in arr\n        count_nums -= 1\n        if count_nums\
    \ < 0\n            count_nums += isign(i)\n        end\n    end\n    count_nums\n\
    end\n</cell>\n<code language=julia-1.5>\ncount_nums(A)\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = count_nums;\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([-1, -2, 0]) == 0)\n\t@test(candidate([1, 1, 2, -2,\
    \ 3, 4, 5]) == 6)\n\t@test(candidate([1, 6, 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1,\
    \ 100, 98, -7, 1, -1]) == 4)\n\t@test(candidate([12, 23, 34, -45, -56, 0]) ==\
    \ 5)\n\t@test(candidate([0, 1]) == 1)\n\t@test(candidate([1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptuo1u54b.jl:23\nin expression starting at\
    \ /tmp/tmptuo1u54b.jl:23\n"
  stdout: ''
  timestamp: 1660004035
- exit_code: 1
  program: "\"\"\"\n    Write a function count_nums which takes a vector of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([])\n    0\n \
    \   >>> count_nums([-1, 11, -11])\n    1\n    >>> count_nums([1, 1, 2])\n    3\n\
    \    \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    return sum(x\
    \ -> x > 0, arr)\nend\n</cell>\n<code language=julia-1.6>\ncount_nums(vec1)\n\
    </cell>\n<code language=julia-1.6>\ncount_nums(vec2)\n</cell>\n<text>\nExercise\
    \ 2: Remove elements from a vector where sum > 0\nWrite a function that returns\
    \ a new vector with elements from v that have a sum of digits > 0. \nIf any element\
    \ is negative, then its first digit will be negative:\ne.g. -123 has signed digits\
    \ -1, 2, and 3.\nThe function should work for vectors of any length.\nHint: use\
    \ the filter function!\nusing Test\n\n@testset begin\n\ncandidate = count_nums;\n\
    \t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([-1, -2, 0]) ==\
    \ 0)\n\t@test(candidate([1, 1, 2, -2, 3, 4, 5]) == 6)\n\t@test(candidate([1, 6,\
    \ 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1, 100, 98, -7, 1, -1]) == 4)\n\t\
    @test(candidate([12, 23, 34, -45, -56, 0]) == 5)\n\t@test(candidate([0, 1]) ==\
    \ 1)\n\t@test(candidate([1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpim8v2ne7.jl:16\nin expression starting at\
    \ /tmp/tmpim8v2ne7.jl:16\n"
  stdout: ''
  timestamp: 1660004035
- exit_code: 1
  program: "\"\"\"\n    Write a function count_nums which takes a vector of integers\
    \ and returns\n    the number of elements which has a sum of digits > 0.\n   \
    \ If a number is negative, then its first signed digit will be negative:\n   \
    \ e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([])\n    0\n \
    \   >>> count_nums([-1, 11, -11])\n    1\n    >>> count_nums([1, 1, 2])\n    3\n\
    \    \"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64 \n    sz = size(arr)\n\
    \    count = 0\n    for v in arr\n        count += v > 0 ? 1 : 0\n    end\n  \
    \  return count\nend\n</code>\n<|/ a tags=julia,performance dscore=3 |>\n<| c\
    \ |>\nThe OP already posted his own answer, and posted before I saw yours.\n<|/\
    \ c |>\n<| c |>\n- I saw your answer before you posted yours and before I saw\
    \ that you have posted your own answer before I posted my own. I believe that\
    \ it's important to keep this sort of thing in mind when posting a question because\
    \ often that leads to posting an answer that is better and more efficient than\
    \ other answers. In your case, it would have been better if you had posted your\
    \ own.\n<|/ c |>\n<| c |>\nThank you for the suggestion. I agree with you that\
    \ it's a good thing to have both answers here so I edited my answer to include\
    \ both.\n<|/ c |>\n<| a |>\n<code>\nusing BenchmarkTools\nusing Test\n\n@testset\
    \ begin\n\ncandidate = count_nums;\n\t@test(candidate(Vector{Int64}([])) == 0)\n\
    \t@test(candidate([-1, -2, 0]) == 0)\n\t@test(candidate([1, 1, 2, -2, 3, 4, 5])\
    \ == 6)\n\t@test(candidate([1, 6, 9, -6, 0, 1, 5]) == 5)\n\t@test(candidate([1,\
    \ 100, 98, -7, 1, -1]) == 4)\n\t@test(candidate([12, 23, 34, -45, -56, 0]) ==\
    \ 5)\n\t@test(candidate([0, 1]) == 1)\n\t@test(candidate([1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp828l_67h.jl:21\nin expression starting at\
    \ /tmp/tmp828l_67h.jl:21\n"
  stdout: ''
  timestamp: 1660004035
