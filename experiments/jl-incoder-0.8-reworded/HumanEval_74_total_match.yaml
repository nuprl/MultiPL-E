name: HumanEval_74_total_match
language: jl
prompt: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
  \ the vector that has \n    total number of chars in the all strings of the vector\
  \ less than the other vector.\n\n    if the two vectors have the same number of\
  \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
  \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
  , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\",\
  \ \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
  ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
  4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
  \ lst2::Vector{String})::Vector{String} \n"
tests: "using Test\n\n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
  \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
  ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
  ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
  4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
  , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
  , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
  hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
  \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
  \ == Vector{String}([]))\nend\n"
completions: ["    return vec1 = Set([lst for (lst, a) in zip(lst1, lst2) if a < lst\
    \ and lst != \"\"])\nend\n</cell>\n<code language=julia-1.5>\ntotal_match([\"\
    1\", \"2\", \"3\", \"4\", \"5\"], [\"4\", \"5\", \"5\"])\n</cell>\n<code language=julia-1.5>\n\
    total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n</cell>\n<code language=julia-1.5>\n\
    total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\"])\n</cell>\n<code\
    \ language=julia-1.5>\ntotal_match([\"4\"], [\"1\", \"2\", \"3\", \"4\"])\n</cell>\n\
    <code language=julia-1.5>\ntotal_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"\
    5\"])\n</cell>\n<code language=julia-1.5>\ntotal_match([\"4\"], [\"1\", \"2\"\
    , \"3\", \"4\"])\n</cell>\n<code language=julia-1.5>\ntotal_match([\"4\"], [\"\
    1\", \"2\", \"3\", \"4\"])\n</cell>\n<code language=julia-1.5>\ntotal_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\"])\n</cell>\n<code language=julia-1.5>\ntotal_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\"])\n</cell>\n<code language=julia-1.5>\ntotal_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\"])\n</cell>\n<code language=julia-1.5>\ntotal_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\"])\n</cell>\n<code language=julia-1.5>\ntotal_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\"])\n</cell>\n<code language=julia-1.5>\ntotal_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\"])\n</cell>\n<code language=julia-1.5>\ntotal_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\"])\n</cell>\n<code language=julia-1.5>\ntotal_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\"])\n</cell>\n<code language=julia-1.5>\ntotal_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\"])\n</cell>\n<code language=julia-1.5>\ntotal_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\"])\n</cell>\n<code language=julia-1.5>\ntotal_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\"])\n</cell>\n<code language=julia-1.5>\ntotal_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\"])\n</cell>\n<code language=julia-1.5>\ntotal_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\"])\n</cell>\n<code language=julia-1.5>\ntotal_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\"])\n</cell>\n<code language=juli", "    list1\
    \ = [x for x in lst1 for x in lst2 if x < x] \n    list2 = [x for x in lst2 for\
    \ x in lst1 if x < x] \n    list = list1 + list2\n    list.sort!(x -> length(x),\
    \ reverse =true)\n    \n    if list1 == list2\n        return list1\n    else\n\
    \        return list2\n    end\nend\n</code>\n<|/ a tags=sorting,vector,string,julia,list\
    \ dscore=2 |>\n<| c |>\nThis code has a bug. The `list1 = [x for x in lst1 for\
    \ x in lst2 if x < x] ` part doesn't do what it should.\n<|/ c |>\n<| c |>\nThanks,\
    \ I'll fix that.  I did not realize it was an issue with the ordering of the lists\
    \ based on the example input.\n<|/ c |>\n<| c |>\nThanks for the update.  I modified\
    \ my answer to handle the new scenario.\n<|/ c |>\n<| c |>\nThanks, I edited my\
    \ answer based on your suggestions.\n<|/ c |>\n<| c |>\nThanks Mike. It looks\
    \ like your code has still a bug. Let's take `lst1 = [\"abcd\", \"efgh\", \"ijkl\"\
    ]` and `lst2 = [\"abcde\", \"fghij\", \"klmn\"]`. Your code returns `[\"abcde\"\
    , \"fghij\", \"klmn\"]` when it should be returning `[\"abcde\", \"fghij\", \"\
    ijkl\"]`.\n<|/ c |>\n<| a |>\nI believe this is the shortest possible implementation:\n\
    <code>", "   if length (lst1)==length (lst2)\n       return lst1\n   elseif length\
    \ (lst1)>length (lst2)\n       return lst2\n   end\n   lst2 = [ el for el in lst2\
    \ if el not in lst1]\n   lst1 = [ el for el in lst1 if el not in lst2]\n   return\
    \ lst1\nend\n</cell>\n<code language=julia-0.6>\ntotal_match ([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"])\n</cell>\n<code language=julia-0.6>\ntotal_match ([\"hi\"\
    , \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n</cell>\n<code language=julia-0.6>\n\
    total_match ([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n</cell>\n<code language=julia-0.6>\n\
    total_match ([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n</cell>\n<text>\n\
    Exercise: Write a function called common_prefix that takes two vectors of strings\
    \ and returns the vector that has \n    common prefix of those vectors. \n   \
    \ if the two vectors have the same number of chars, return the first vector.",
  "    res::Vector{String} = Vector{String}(undef, 0)\n    for elem in lst2\n    \
    \    for word in lst1\n            if elem == word\n                push!(res,\
    \ word)\n                break\n        end\n    end\n    return res\nend", " \
    \   total_chars = \"\"\n    for each in lst1\n        total_chars = total_chars\
    \ .+ each\n    end\n    for each in lst2\n        total_chars = total_chars .+\
    \ each\n    end\n    total_chars = total_chars .- lst2\n    total_chars = total_chars\
    \ .- lst1\n    \n    total_chars = total_chars .- union(lst1, lst2)\n    \n  \
    \  return lst2\nend\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis does not work as\
    \ `total_chars` is a character vector which does not have a `count` method.\n\
    <|/ c |>\n<| a tags=julia |>\nHere's a solution that also returns a Boolean vector:\n\
    <code>", "    vec1 = Vector{String}(lst1)\n    vec2 = Vector{String}(lst2)\n \
    \   if vec1.size == vec2.size\n        return vec1\n    return vec2\nend\n</cell>\n\
    <code language=julia-1.0>\ntotal_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n\
    </cell>\n<code language=julia-1.0>\ntotal_match([\"hi\", \"admin\"], [\"hi\",\
    \ \"hi\", \"admin\", \"project\"])\n</cell>\n<code language=julia-1.0>\ntotal_match([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n</cell>\n<code language=julia-1.0>\n\
    total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n</cell>\n<text>\nExercise:\
    \ Write a function that accepts two vectors of numbers and returns the vector\
    \ that has \n    total number of numbers in the all numbers of the vector less\
    \ than the other vector.", "    \n    if length(lst1) < length(lst2)\n       \
    \ return lst1\n    else\n        return lst2\n    end\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function called is_pangram that accepts a string and returns\
    \ a boolean indicating if the string is a pangram or not. Pangrams are words that\
    \ are formed from the letters of the English alphabet and do not contain repeated\
    \ letters. For example, the word \"rabbit\" is a pangram, while \"grangrangrangran\"\
    \ is a non-pangram.", "    \n    lst3 = Vector{String}(length(lst1))\n    for\
    \ i = 1:length(lst1)\n        if length(lst2) > i && all(x -> x == lst2[i], lst2[i:])\n\
    \            lst3[i] = lst1[i]\n        end\n    end\n    \n    return lst3\n\
    end", "    if len(lst1)==0 || len(lst2)==0\n        return lst1\n    \n    if\
    \ length(lst1) > length(lst2)\n        return lst2\n    else\n        return lst1\n\
    \    end\nend", "    num_char_lst1 = map(length, lst1)\n    num_char_lst2 = map(length,\
    \ lst2)\n    \n    if length(lst1) == length(lst2)\n        lst = lst1\n    else\n\
    \        lst = []\n    end", "  if length(lst1) > length(lst2)\n    return lst1\n\
    \  else \n    return lst2\n  end\nend", "    count = 0\n    for i in lst1\n  \
    \      if i == lst2\n            count = count + 1\n        end\n    end\n   \
    \ count = 0\n    for i in lst2\n        if i == lst1\n            count = count\
    \ + 1\n        end\n    end\n    if count == length(lst1)\n        return lst1\n\
    \    elseif count == length(lst2)\n        return lst2\n    else\n        return\
    \ lst1\n    end\nend\n</code>\n<|/ a tags=string,julia,vector dscore=0 |>\n<|\
    \ a tags=string,julia,vector |>\n<code>", "    vec1 = length(lst1)\n    vec2 =\
    \ length(lst2)\n    if vec1 != vec2\n        error(\"The vectors have different\
    \ lengths\")\n    end\n    match = Vector{String}(vec1)\n    match_size = 0\n\
    \    for string in lst1\n        if string <= lst2\n            push!(match, string)\n\
    \            match_size+=1\n        end\n    end\n    return match\nend", "  \
    \  \n    len1 = length(lst1)\n    len2 = length(lst2)\n    \n    if len1 == len2\n\
    \        \n        lst1\n        \n    else\n        \n        len2\n        \n\
    \    end\n    \nend", "    if length(lst1) == length(lst2)\n        return lst1\n\
    \    else\n        ans = []\n        for s1 in lst1\n            for s2 in lst2\n\
    \                if length(s2) > length(s1)\n                    push!(ans, s2)\n\
    \                end\n            end\n        end\n        return ans\n    end\n\
    end\n</cell>\n<cell>\n# run this cell first", "    result = Vector{String}(length(lst1))\n\
    \    for i in eachindex(lst1)\n        result[i] = length(lst1[i]) < length(lst2[i])\
    \ ? lst1[i] : lst2[i]\n    end\n    return result\nend", "        if length(lst1)\
    \ == length(lst2) \n            return [lst1[i]+lst2[i] | i <- 1:length(lst1)]\n\
    \        else\n            return lst1\n        end\n    end", "    if length(lst1)\
    \ == length(lst2) \n        \n        return lst1\n    \n    elseif length(lst1)\
    \ < length(lst2)\n    \n        lst = lst1\n        \n        for i in lst2\n\
    \            if i in lst\n                lst = lst - [i]\n            end\n \
    \       end\n        \n        return lst\n    \n    else\n        \n        lst\
    \ = lst1\n        \n        for i in lst2\n            if i in lst\n         \
    \       lst = lst + [i]\n            end\n        end\n        \n        return\
    \ lst\n    end\nend\n</code>\n<|/ q |>\n<| c |>\nWelcome to SO! For future reference,\
    \ it is helpful to provide more specific details - for example by providing code\
    \ snippets or even a specific question. As it is, it is difficult to tell which\
    \ parts you're having trouble with, and thus it is difficult to provide you with\
    \ useful help.\n<|/ c |>\n<| c |>\nThanks for the feedback. I've updated the post\
    \ with the code I have so far. Thanks for your feedback!\n<|/ c |>\n<| a dscore=0\
    \ |>\nThe easiest way would probably be to just use filter instead of writing\
    \ a for loop. For example, to remove all elements from lst1 that also exist in\
    \ lst2, you could just use:\n<code>\nlst1 = filter(x -> !(y in lst2), lst1)\n\
    </code>\n<|/ a tags=julia |>\n<| c |>\nThanks for your help but unfortunately\
    \ this solution is not working. What I'm looking for is to find the number of\
    \ chars in the strings where the condition is satisfied (for example, total number\
    \ of chars in strings where the char is less than 'h' and 'm' in the example.\
    \ My current solution is finding out the sum of chars in the strings that are\
    \ less than each string in lst2.\n<|/ c |>\n<| a dscore=0 tags=julia |>\nIt would\
    \ be better to use a Vector{Int}, or a Set {Int}, instead of a Vector{String},\
    \ but the question doesn't specify how you want the result to be printed.\nHere's\
    \ a version that prints the result as you expect:\n<code>", "      \nend", " \
    \   list1 = [x for x in lst1 if (x in lst2)]\n    list2 = [x for x in lst2 if\
    \ (x in lst1)]\n    if length(list2) == length(list1)\n        list = list1\n\
    \    else\n        list = list2\n    end\n    return list\nend\n</code>\n<|/ a\
    \ tags=sorting,arrays,julia |>\n<| a tags=sorting,arrays,julia |>\nThe below is\
    \ a simple solution using for loop and conditional check\n<code>", "    \n   \
    \ \n    #calculate the number of chars in all the strings\n    len1 = length(lst1)\n\
    \    len2 = length(lst2)", '    match = Vector{String}(undef, 0)', "    \"\"\"\
    \n    Write your code in Julia 1.0\n    \"\"\"\n    if length(lst1) == length(lst2)\n\
    \        return lst1\n    else if length(lst1) > length(lst2)\n        return\
    \ lst1\n    end\n    \n    total = 0\n    \n    for str in lst1\n        total\
    \ += count(str, \"hI\")\n    end\n    \n    for str in lst2\n        total +=\
    \ count(str, \"hI\")\n    end\n    \n    return lst1[total .< length(lst1)]\n\
    end", "    if length(lst1) != length(lst2)\n        return lst1\n    \n    total\
    \ = 0\n    for str in lst1\n        total += length(str)\n    end\n    \n    for\
    \ str in lst2\n        total += length(str)\n    end", "    lst3 = lst2\n    idx1\
    \ = 1\n    for el in lst1\n        if el != lst1[idx1]\n            idx1 = idx1\
    \ + 1\n            lst3 = lst3 + 1\n        end\n    end\n    idx2 = 1\n    for\
    \ el in lst2\n        if el != lst2[idx2]\n            idx2 = idx2 + 1\n     \
    \       lst3 = lst3 + 1\n        end\n    end\n    if length(lst1) < length(lst2)\n\
    \        lst3 = lst1\n    end\n    return lst3\nend", "    \n    #println(\"lst1\
    \ : \", lst1)\n    #println(\"lst2 : \", lst2)\n    n = length(lst1)\n    res1\
    \ = []\n    res2 = []\n    for i=1:n\n        str = lst1[i]\n        indx = find(lst2,\
    \ str)\n        res1 = res1 .+ indx\n        res2 = res2 .+ indx\n    end\n  \
    \  \n    res1 = unique(res1)\n    res2 = unique(res2)\n    return intersect(res1,\
    \ res2)\nend\n    \nend\n</cell>\n<code language=julia-1.0>", "  if length(lst1)<length(lst2)\n\
    \    return lst1\n  else\n    return lst2\n  end\nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns whether two strings contain the same number\
    \ of chars. For example:", "   \n    for i in 1...length(lst1)\n        if(lst1[i]\
    \ == lst2[i])\n            lst1[i]\n        else\n            lst2\n        end\n\
    \    end\nend\n</code>\n<|/ a dscore=0 |>\n<| c |>\nHi, welcome to SO. Please\
    \ be aware that your answer would benefit from a little more explanation of how\
    \ your code is working. If you could add this, it would be a great answer. See\
    \ https://stackoverflow.com/help/how-to-answer for more information.\n<|/ c |>\n\
    <| c |>\nHey, thanks for the advice. I think I understand how this would work\
    \ now, but I'm having difficulty implementing this because I'm not using Julia\
    \ 1.3. Any ideas as to how to accomplish this in version 1.3 (which I have access\
    \ to due to my university's security policies), or would it just be to rewrite\
    \ this as a for loop?\n<|/ c |>\n<| a |>\nA little late, but this is what I would\
    \ do. I also like the answer that showed you how to write this with functional\
    \ programming because I think it is pretty elegant. My answer also shows you how\
    \ to write this with vanilla Julia, which is a bit more verbose, but is more explicit\
    \ and concise.\n<code>", "    total_match = Set{String}()\n    for elem in lst1\n\
    \        if elem == elem\n            total_match += elem\n        elseif elem\
    \ <= lst2\n            total_match += elem\n        end\n    end\n    return total_match\n\
    end", "        if length( lst1 ) >  length( lst2 )\n            return lst1\n\
    \        else\n            return lst2\n        end\n    end\n</code>\n<|/ a tags=string,char,julia\
    \ |>\n<| c |>\nI think this answer is wrong. The question is about returning all\
    \ strings shorter than a given string. I tried it (with Julia v1.5.4) and it seems\
    \ to give the wrong answer, because `\"hi\" < \"hello\"` returns false and `length(total_match(\"\
    hi\", \"hello\")) == length(total_match(\"hi\", \"hello\"))` returns true. Instead\
    \ you should do `sum(length(total_match(lst1, lst2)) < length(x) for x in zip(lst1,\
    \ lst2))`\n<|/ c |>\n<| c |>\nIt should be `sum(length(total_match(lst1, lst2))\
    \ < length(x) for x in zip(lst1, lst2))` and not `sum(length(total_match(lst1,\
    \ lst2)) < length(x) for x in zip(lst1, lst2)) == length(total_match(lst1, lst2))`\
    \ as pointed out. Also, I think you should use `length(x) < length(y)` instead\
    \ of `length(total_match(x, y)) < length(total_match(x, y))` as pointed out.\n\
    <|/ c |>\n<| c |>\nThanks, I see my mistakes now.\n<|/ c |>\n<| a tags=string,char,julia\
    \ |>\nThe accepted answer is wrong. Here is my modified version with a comprehension.\n\
    <code>", "    if length(lst1) != length(lst2) \n        return lst1\n    else\
    \ \n        total_chars(lst1)\n    end\nend", "  if length(lst1) != length(lst2)\n\
    \    return []\n  elseif length(lst1) != 0\n    return lst1\n  elseif length(lst2)\
    \ == 0\n    return []\n  else\n    return total_match(lst2, lst1)\n  end\nend\n\
    \"\"\"\n    Write a function that returns all sublists of size k that occur in\
    \ lst1 but not in lst2.", "        vector1 = Vector{String}(lst1)\n        vector2\
    \ = Vector{String}(lst2)\n    vector3 = vector1.filter(x -> ! vector2.contains(x))\n\
    \    vector3 = vector3.union!(vector2)\n    return vector3\nend", "    n1 = length(lst1)\n\
    \    n2 = length(lst2)\n    if n1 == n2\n        return lst1\n    elseif n1 <\
    \ n2\n        lst2 = lst2[1:n1]\n        lst1 = lst1[1:n1]\n        return total_match(lst1,\
    \ lst2)\n    else\n        lst2 = lst2[1:n2]\n        lst1 = lst1[1:n2]\n    \
    \    return total_match(lst1, lst2)\n    end\nend", "    len1 = length(lst1)\n\
    \    len2 = length(lst2)\n    if len1 == len2\n        return lst1\n    elseif\
    \ len1 < len2\n        return lst1\n    elseif len1 == len2\n        return lst2\n\
    \    end\n    \n    total = 0\n    list1 = []\n    list2 = []\n    list3 = []\n\
    \    for element in lst1\n        if lst2[i] == element\n            total +=\
    \ 1\n        elseif element in lst2\n            list1 += element\n        else\n\
    \            list2 += element\n        end\n    end\n    for element in lst2\n\
    \        if lst1[length] == element\n            total += 1\n        elseif element\
    \ in lst1\n            list3 += element\n        else\n            list3 += element\n\
    \        end\n    end\n    return list1 + list2 + list3\nend", "    return lst1\
    \ .< lst2\nend\n</code>\n<|/ a dscore=1 |>\n<| a dscore=0 |>\nHow about something\
    \ like this:\n<code>", "    len1, len2 = length(lst1), length(lst2)\n    if len1\
    \ == len2\n        return [lst1[i] | i <- enumerate((lst1, lst2))]\n    elseif\
    \ len1 > len2\n        return list((lst2, lst1)[findall(lst1 < lst2)])\n    else\n\
    \        return list((lst1, lst2)[findall(lst2 < lst1)])\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\ntotal_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"\
    5\"])\n</cell>\n<code language=julia-1.5>\ntotal_match([\"hi\", \"admin\"], [\"\
    hI\", \"Hi\"])\n</cell>\n<code language=julia-1.5>\ntotal_match([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"])\n</cell>\n<code language=julia-1.5>\n\
    total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n</cell>\n<text>\n\
    Subset sum problem\nGiven an array arr of positive integers and a number x, find\
    \ all subsets whose sum is x.", "    \n    i = length(lst1) + length(lst2)\n \
    \   j = lst1.length + lst2.length\n    \n    if i==0\n        return lst2\n  \
    \  elseif j==0\n        return lst1\n    end", "    \n    # if the length of the\
    \ lists are the same, return the first list\n    if length(lst1) == length(lst2)\n\
    \        return lst1\n    # if the length of the lists are not the same, return\
    \ the first list\n    else\n        for i in eachindex(lst1)\n            if lst1[i]\
    \ > lst2[i]\n                lst2[i] = lst1[i]\n            end\n        end\n\
    \        \n        return lst2\n    end\nend", "    if length(lst1) == length(lst2)\n\
    \        res=lst1\n        for i=1:length(lst1)\n            if lst1[i] < lst2[i]\n\
    \                res[i]=\"\"\n            end\n        end\n        return res\n\
    \    else\n        return lst1\n    end\nend\n</cell>\n<text>\nA. total_match_all\n\
    Write a function that accepts a string and a vector of strings and returns the\
    \ vector that has \nall the chars in the string that occurs in all the strings\
    \ of the vector less than the string.", "    if length(lst1) == length(lst2)\n\
    \        return lst1\n    else\n        return lst1\n    end\nend", "    \n  \
    \  @assert length(lst1) == length(lst2) \"two vectors must have same length\"\n\
    \    \n    vec = []\n    \n    for i in 1:length(lst1)\n        push!(vec, lst1[i])\n\
    \    end\n    \n    for j in 1:length(lst2)\n        push!(vec, lst2[j])\n   \
    \ end\n    \n    return vec[findall(x -> x < length(lst2), vec)]\nend\n</cell>\n\
    <code language=julia-1.0>\n@assert total_match([\"hi\", \"admin\"], [\"hI\", \"\
    Hi\"]) == [\"hI\", \"Hi\"]\n@assert total_match([\"hi\", \"admin\"], [\"hi\",\
    \ \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"]\n@assert total_match([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]\n@assert\
    \ total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]\n</cell>\n\
    <code language=julia-1.0>\ntotal_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"\
    hi\"])\n</cell>\n<code language=julia-1.0>\ntotal_match([\"4\"], [\"1\", \"2\"\
    , \"3\", \"4\", \"5\"])\n</cell>\n<text>\nTotal word match\nWrite a function that\
    \ accepts two vectors of strings and returns the vector that has \ntotal word\
    \ count of chars in the all strings of the vector less than the other vector.",
  "    lst3 = Vector{String}(lst1)\n    \n    for v in lst2\n        if !contains(lst3,\
    \ v)\n            lst3 = v::lst3\n        end\n    end\n    \n    return lst3\n\
    end", "    \n    lst3 = lst1\n    push!(lst3, \"\")\n    for i in 2:length(lst1)\n\
    \        if length(lst3) <= length(lst2) && lst1[i] <= lst2[length(lst3)]\n  \
    \          push!(lst3, lst1[i])\n        else\n            push!(lst3, lst1[1])\n\
    \        end\n    end\n    return lst3\nend", "        if length(lst1) != length(lst2)\n\
    \            throw(ArgumentError(\"the two vectors have different lengths\"))\n\
    \        end", "    \n    len1 = length(lst1)\n    len2 = length(lst2)\n    \n\
    \    if len1 != len2\n        error(\"The number of strings in two vectors does\
    \ not match\")\n    end\n    \n    \n    \n    for i in 1:len1\n        if lst1[i]\
    \ < lst2[i]\n            break\n        end\n    end\n    \n    \n    \n    return\
    \ lst1[:i+1]\nend", "    \n    if length(lst1) == length(lst2)\n        return\
    \ lst1\n    elseif length(lst1) == 0\n        return lst2\n    elseif length(lst2)\
    \ == 0\n        return lst1\n    end", "    if len(lst1)!=length(lst2) \n    \
    \    raise ArgumentError(\"Vectors have different sizes.\") \n    end", "    \"\
    \"\"\n    Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.", "    \n    if length(lst1) < length(lst2) \n \
    \       return lst1\n    else\n        return lst2\n    end\nend\n</cell>\n<text>\n\
    Exercise\nImplement the total_match_all function.", "    if length(lst1) == length(lst2)\n\
    \        return lst1\n    else\n        return lst2\n    end\nend\n</cell>\n<text>\n\
    Now we can write a function that takes a string and returns a string that has\
    \ all the letters in it sorted in alphabetical order and no duplicates.", "  \
    \  total_match = []\n    for element in lst1\n        if element < lst2[1]\n \
    \           total_match << element\n        end\n    end\n    return total_match\n\
    end", "    if len(lst1) == len(lst2) \n        return lst1\n    else\n       return\
    \ [x for x in lst1 if len(x) <= len(lst2)]\n    end\nend\n</code>\n<|/ a dscore=0\
    \ |>\n<| c |>\nThe function works only when strings are of same lenght. When one\
    \ of strings has more chars than the other, it does not return the string that\
    \ has more characters. E.g. when strings look like this [\"hi\", \"admin\"], [\"\
    hi\", \"hi\", \"admin\", \"project\"], [\"hi\", \"hi\"], the result should be\
    \ [\"hi\", \"admin\"]. Instead the function returns [\"hi\", \"admin\", \"project\"\
    ]\n<|/ c |>\n<| c |>\nThis looks like homework - in that case, you should add\
    \ a homework tag to your question\n<|/ c |>\n<| c |>\nI added the tag now. Thanks\
    \ for pointing out this mistake\n<|/ c |>\n<| c |>\nI edited the answer to account\
    \ for the length of the string being different\n<|/ c |>\n<| c |>\nThis is not\
    \ the solution I'm looking for. The function should return all strings that have\
    \ more chars, not just those that are the same length\n<|/ c |>\n<| a dscore=0\
    \ |>\nI managed to solve my problem thanks to some answers above and by changing\
    \ my mind about the question - I came up with this solution:\n<code>", "    if\
    \ length (lst1) != length (lst2)\n       return []\n    end", "    total=0\n \
    \   for i in eachindex(lst1) \n        if lst1[i] < lst2[total] \n           \
    \ total = total + 1\n        else \n            break\n    end\n    return lst1[1:total]\n\
    end\n</code>\n<|/ a |>\n<| a tags=sorting,string,julia |>\nHere is one solution\
    \ with no extra collections:\n<code>", "    if length(lst1) != length(lst2) \n\
    \        return \"Error\"\n    else\n        total_char = sum([length(lst1[i])\
    \ for i in 1:length(lst1)])\n        return filter(x -> length(lst1[x]) < length(lst2),\
    \ lst1)\n    end\nend\n</code>\n<|/ a dscore=1 |>\n<| a |>\nHere's a pure Ruby\
    \ solution (although using an intermediate hash is fine):\n<code>\ndef total_match(lst1,\
    \ lst2)\n  hashes = Hash.new\n  lst1.each { |item| hashes[item] += 1 }\n  lst2.each\
    \ { |item| hashes[item] -= 1 }\n  hashes.delete_if { |k, v| v == 0 }\n  hashes.keys\n\
    end\n</code>\nI see you've already accepted an answer using itertools and sets.\
    \  That solution is fine, but you could also do it in one line:\n<code>\nimport\
    \ itertools", "        \n    total_len::Int = 0\n    for str1 in lst1\n      \
    \  for str2 in lst2\n            if str1 == str2\n                total_len +=\
    \ 1\n            else\n                break\n        end\n    end", "    len_lst1,\
    \ len_lst2 = length(lst1), length(lst2)\n    if len_lst1 == len_lst2\n       \
    \ lst1\n    else\n        if len_lst1 < len_lst2\n            append!(lst1, lst2[0..(len_lst1-len_lst2)])\n\
    \        else\n            append!(lst2, lst1[0..(len_lst2-len_lst1)])\n     \
    \   end\n    end\nend\n</cell>\n<text>\nWrite a function that converts a vector\
    \ into an integer vector", "    lst3 = []\n    for str1 in lst1\n        for str2\
    \ in lst2\n            if str1<str2\n                push!(lst3, str1)\n     \
    \       end\n        end\n    end\n    return lst3\nend", "    diff = Vector{String}(diff(lst1,\
    \ lst2))\n    if length(diff)==0\n        return lst1\n    end\n    return lst1[findall(diff\
    \ .< 0)...]\nend", "    \n    \n    length = length(lst1)\n    \n    lst3 = vec()\n\
    \    \n    for x in lst1\n        if length(lst1) > length(lst2)\n           \
    \ lst3 = lst1 + lst2\n        elseif length(lst1) < length(lst2)\n           \
    \ lst3 = lst2 + lst1\n        elseif length(lst1) == length(lst2)\n          \
    \  lst3 = lst1\n        end\n        push!(lst3, x)\n    end\n    \n    return\
    \ lst3\nend\n</cell>\n<cell>\ntotal_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ])\n</cell>\n<cell>\ntotal_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n</cell>\n<cell>\ntotal_match([\"hi\", \"admin\"], [\"hI\", \"\
    hi\", \"hi\"])\n</cell>\n<cell>\ntotal_match([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"])\n</cell>\n<cell>\ntotal_match([\"hi\", \"admin\"], [\"hi\", \"admin\"\
    , \"project\"])\n</cell>\n<cell>\ntotal_match([\"hi\", \"admin\"], [\"hi\", \"\
    admin\", \"project\"])\n</cell>\n<text>\nVector of String lengths", "    if length(lst1)\
    \ == length(lst2)\n        return lst1\n    elseif length(lst1) == 0\n       \
    \ return lst2\n    elseif length(lst2) == 0\n        return lst1\n    end\n  \
    \  \n    counts = Dict()\n    for elem in lst1\n        push!(counts, elem)\n\
    \    end\n    for elem in lst2\n        push!(counts, elem)\n    end", "    if\
    \ length(lst1) == length(lst2)\n        return lst1\n    else\n        count_list1\
    \ = zeros(Int, length(lst1))\n        count_list2 = zeros(Int, length(lst2))\n\
    \        for i in 1:length(lst1)\n            count_list1[i] = count(lst1[i])\n\
    \            count_list2[i] = count(lst2[i])\n        end", "    match = Vector{String}()\n\
    \    for i in length(lst1)\n        for j in length(lst2)\n            if lst1[i]\
    \ < lst2[j]\n                push!(match, lst1[i])\n            end\n        end\n\
    \    end\n    return match\nend\n</code>\n<|/ a dscore=1 tags=vector,string,julia,sorting\
    \ |>\n<| c |>\nI am a newbie, can you please explain what does `::Vector{String}`\
    \ do here? Thank you very much for your answer.\n<|/ c |>\n<| c |>\nThis is a\
    \ constructor type annotation. `::Vector{String}` is a type annotation. In this\
    \ case the type annotation is applied to the function `total_match` which is returning\
    \ a `Vector` of `String`s. You can read more [here](https://julialang.org/blog/2017/01/announcing-types-in-julia/).\n\
    <|/ c |>\n<| c |>\nIt makes sense. Thank you very much!\n<|/ c |>\n<| a dscore=1\
    \ |>\n<code>", "    if lst1 == [] && lst2 == []\n        return lst1\n    if lst1\
    \ == []\n        return lst2\n    if lst2 == []\n        return lst1\n    \n \
    \   # Count the number of chars in the vector. \n    count1 = 0\n    count2 =\
    \ 0\n    for string in lst1\n        count1 = count1 + length(string(lst1))\n\
    \    end", "    # return lst1 if length(lst1)==length(lst2)\n    \n    return\
    \ lst1 if length(lst1)==length(lst2) else lst1\nend\n</cell>\n<text>\nWrite a\
    \ function that accepts a string of chars and returns the number of times the\
    \ string appears in the string.", "    return filter(lst -> size(lst) <= size(lst2),\
    \ lst1)\nend", "    count = 0\n    for i in lst1 do \n        for j in lst2 do\
    \ \n            count = count + length(sub(i, j))\n            if count >= length(sub(i,j))\n\
    \                return i\n            end\n        end\n    end\n    return []\n\
    end\n</cell>\n<code language=julia-1.5>", "    vec1 = Vec{String}(lst1)\n    vec2\
    \ = Vec{String}(lst2)\n    vec1_size = length(vec1)\n    vec2_size = length(vec2)\n\
    \    if vec1_size == vec2_size\n        return vec1\n    else\n        result\
    \ = []\n        for i in vec1\n            count_1 = length(findall(i -> i <=\
    \ vec2[i], vec1))\n            result = [i | count_1 <= vec2_size for i in result]\n\
    \        end\n        return result\n    end\nend\n</cell>\n<text>\nExercise 3\n\
    Write a function that takes two vectors of strings and returns the vector that\
    \ has \ntotal number of chars in the all strings of the vector less than the other\
    \ vector.", "        if length(lst1) == length(lst2)\n            lst\n      \
    \  else\n            lst1 + lst2[length(lst1):length(lst2)]\n        end\n   \
    \ end\n</code>\n<|/ a tags=string,julia |>\n<| a |>\nAs the other answer says,\
    \ there is a function for this in Base. It would be\n<code>\nBase.min(vec::AbstractVector,\
    \ len::Int) = min(vec, len..(length(vec)+len-1))\n</code>\nand you can use it\
    \ like \n<code>\nmin([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n</code>\nto get an\
    \ answer of [\"hI\", \"Hi\"].\n<|/ a dscore=2 tags=string,julia |>\n<| c |>\n\
    If one does not want to use base function then one can use `Vector{String}(vec)`\
    \ instead of `AbstractVector(vec)` as function argument\n<|/ c |>\n<| a dscore=2\
    \ tags=string,julia |>\nThis should do the trick\n<code>\ntotal_match(::Array{String,1},::Array{String,1})\
    \ = \n        [ x[1:end-1] == y[1:end-1] ? x : x .+ y[end] for\n          x =\
    \ [\"hi\", \"admin\"], y = [\"hI\", \"Hi\"] ]\n</code>\n<|/ a |>\n<| a |>\nYou\
    \ can use the min function.\n<code>\nmin([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ])\n</code>\n<|/ a tags=string,julia dscore=2 |>\n<| a tags=string,julia |>\n\
    One can define an operator with multiple dispatch for vectors of strings as follows:\n\
    <code>\n# operator with multiple dispatch for vectors of strings\n\"\"\"\n$(Symbol(\"\
    =\"))(v::AbstractVector,w::AbstractVector) = \n    # find the first position with\
    \ an equal number of characters \n    pos = min(length(w)+length(v.first),length(w)+length(w[end]))\
    \ \n    # return a slice of the array starting from that position\n    v.first[1:pos]\
    \ == w[1:pos]\n\"\"\"\nBase.$(Symbol(\"=\"))(v::AbstractVector,w::AbstractVector)\
    \ = \n    # find the first position with an equal number of characters \n    pos\
    \ = min(length(w)+length(v.first),length(w)+length(w[end])) \n    # return a slice\
    \ of the array starting from that position\n    v.first[1:pos] == w[1:pos]", " \
    \   if length(lst1)==length(lst2)\n        return lst1\n    if length(lst1)>length(lst2)\n\
    \        return \"\"\n    return \"\"\nend\n</code>\n<|/ a tags=matching,string,vector,julia\
    \ |>\n<| a dscore=0 |>\nYou can also use the filter function and specify the condition\
    \ for your string.\n<code>\njulia> filter(x -> length(x) <=2, [i for i in [\"\
    hi\", \"admin\", \"hey\", \"hey_hi\"]])\n5-element Array{String,1}:\n \"hi\"\n\
    \ \"hey\"\n \"hey_hi\"\n</code>\n<|/ a tags=matching,string,vector,julia |>\n\
    <| a tags=matching,string,vector,julia |>\nYou can also use the filter function\
    \ and specify the condition for your string.\n<code>\njulia> filter(x -> length(x)\
    \ <=2, [i for i in [\"hi\", \"admin\", \"hey\", \"hey_hi\"]])\n5-element Array{String,1}:\n\
    \ \"hi\"\n \"hey\"\n \"hey_hi\"\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n\
    You can use the following code:\n<code>", "    \n    # if the two vectors have\
    \ the same number of chars, return the first vector\n    # this case is for when\
    \ we are comparing vectors with equal length\n    if length(lst1) == length(lst2)\n\
    \        return lst1\n    \n    # count the number of chars in both vectors \n\
    \    sum1 = sum(map(x -> length(x), lst1))\n    sum2 = sum(map(x -> length(x),\
    \ lst2))\n    \n    # create a vector for the output and append each char with\
    \ the count of its frequency in both vectors \n    res = Vector{String}(undef,\
    \ 0)\n    for x in lst1\n        for y in lst2\n            if x == y\n      \
    \          push!(res, x)\n            else\n                push!(res, (x + string(length(y)))\
    \ )\n            end\n        end\n    end\n    \n    # return a vector containing\
    \ chars whose frequency in both vectors is less than the other\n    filter(x ->\
    \ length(x) > length(res), res)\nend\n</code>\n<|/ a dscore=2 tags=string,julia,arrays,string-length\
    \ |>\n<| c |>\nIf you're going to use `@inbounds`, you should be careful about\
    \ memory efficiency. `map`, `filter`, `pop!`, `push!`, `length`, etc. are all\
    \ O(n) in Julia 1.x; `@inbounds` is O(1) in Julia 2. The `map`, `filter`, `pop!`,\
    \ and `push!` functions are designed to operate on the entire vector at once.\
    \ For example, `map!(x -> pop!(x); x)` is O(n) in Julia 1.x; it's O(1) in Julia\
    \ 2.\n<|/ c |>\n<| c |>\nYou're right, in this specific case I didn't notice any\
    \ difference between `map`, `filter`, `pop!`, and `push!`.\n<|/ c |>\n<| a |>\n\
    Based on Kornel Poincar's answer. Here is a more generic function that works with\
    \ Vector{String}\n<code>", "    len1 = length(lst1)\n    len2 = length(lst2)\n\
    \    if len1 != len2\n        return lst1\n    elseif len1 == len2\n        return\
    \ lst1\n    elseif len1 <= length(lst2)\n        total_match_vector = Vector{String}(undef,\
    \ 0)\n        for i=1:len1\n            if !contains(lst2, lst1[i])\n        \
    \        total_match_vector = push!(total_match_vector, lst1[i])\n           \
    \ end\n        end\n        total_match_vector\n    else\n        total_match_vector\
    \ = Vector{String}(undef, 0)\n        for i=1:len2\n            if !contains(lst1,\
    \ lst2[i])\n                total_match_vector = push!(total_match_vector, lst2[i])\n\
    \            end\n        end\n        total_match_vector\n    end\nend\n</code>\n\
    <|/ a dscore=2 |>\n<| c |>\nThank you for the answer! I added the additional information\
    \ regarding what I was trying.\n<|/ c |>\n<| c |>\n: In your question you mentioned\
    \ that you are looking for exact match, not fuzzy match. Which one are you looking\
    \ for?\n<|/ c |>\n<| c |>\nI actually just changed a variable name to something\
    \ different and forgot to change the question. My bad!\n<|/ c |>\n<| c |>\n: Can\
    \ you provide an example which doesn't work? I tried the solution above on these\
    \ three examples and they all worked: \n`total_match([\"hi\", \"admin\"], [\"\
    hI\", \"Hi\"]) \ntotal_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\",\
    \ \"project\"])\ntotal_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])`\n\
    <|/ c |>\n<| c |>\nI edited my original question to include a screenshot of my\
    \ terminal output. I believe that my code does exactly what you're telling me\
    \ to do. I don't understand why it isn't working. If you could take a look at\
    \ my code and give me feedback on it that would be amazing.\n<|/ c |>\n<| a |>\n\
    Here are a few notes based on the code you provided:\n(1) The code you provided\
    \ is not complete. Your function definition does not include return type. \n(2)\
    \ In your code, you are calling total_match twice with the same vector. However,\
    \ the second time you call it, it will not do what you expect because you are\
    \ doing this: total_match(total_match(...)) instead of total_match(...).\n(3)\
    \ You do not need to call length(lst) before iterating over the vector. length(lst)\
    \ is called once only. You can use map() to do what you are trying to do. For\
    \ example, here's your function rewritten", "  if length(lst1) == length(lst2)\n\
    \    lst\n  else \n    lst2\n  end \nend\n</code>\n<|/ a |>\n<| a dscore=0 |>\n\
    The answer above is wrong if you have different cases of the same character.\n\
    Example:\n<code>\ntotal_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n\
    </code>\nThis will return [\"hI\",\"hi\", \"hi\"] because they both contain \"\
    hi\"\nIf you want the answer to include both \"hI\" and \"Hi\", you must change\
    \ it to:\n<code>", "    if length(lst1) == length(lst2)\n        \n        \n\
    \        \n        for i in length(lst1)\n            if lst1[i] < lst2[i]\n \
    \               lst2 += lst1[i]\n                lst1 = lst1[i+1::end]\n     \
    \           break\n            else\n                lst1 += lst1[i]\n       \
    \         \n            end\n        end\n        return lst1\n    end\n    \n\
    \    return []\nend\n</cell>\n<code language=julia-1.5>\n@testset \"total_match\
    \ function\" begin\n    @testset \"test case\" begin\n        length(total_match([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]))\n        length(total_match([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]))\n        length(total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"hi\"]))\n        length(total_match([\"4\"\
    ], [\"1\", \"2\", \"3\", \"4\", \"5\"]))\n    end\nend\n</cell>\n<code language=julia-1.5>",
  "    if length(lst1) == length(lst2) \n        return lst1 \n    \n    total = 0\n\
    \    for i in 1:length(lst1) \n        total += length(lst1[i])\n    end\n   \
    \ \n    matches = []\n    for i in 1:length(lst2) \n        if length(lst1[i])\
    \ <= total \n            push!(matches, lst2[i])\n        end\n    end\n    return\
    \ matches\nend\n</cell>\n<code language=julia-1.0>\ntotal_match([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"])\n</cell>\n<code language=julia-1.0>\ntotal_match([\"hi\"\
    , \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n</cell>\n<code language=julia-1.0>\n\
    total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n</cell>\n<code language=julia-1.0>\n\
    total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n</cell>\n<code language=julia-1.0>\n\
    total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"hi\", \"admin\", \"project\"\
    ])\n</cell>\n<code language=julia-1.0>\ntotal_match([\"hi\", \"admin\"], [\"hi\"\
    , \"hi\", \"hi\", \"admin\", \"project\", \"project\", \"project\", \"project\"\
    ])\n</cell>\n<code language=julia-1.0>\ntotal_match([\"hi\", \"admin\"], [\"hi\"\
    , \"hi\", \"hi\", \"admin\", \"project\", \"project\", \"project\", \"project\"\
    , \"project\", \"admin\", \"admin\", \"admin\", \"admin\", \"project\", \"project\"\
    , \"project\", \"project\", \"project\", \"admin\", \"admin\", \"admin\", \"admin\"\
    , \"admin\", \"project\", \"project\", \"project\", \"project\", \"project\",\
    \ \"admin\", \"admin\", \"admin\", \"admin\", \"admin\", \"admin\", \"admin\"\
    , \"project\", \"project\", \"project\", \"project\", \"admin\", \"admin\", \"\
    admin\", \"admin\", \"admin\", \"admin\", \"admin\", \"admin\", \"admin\", \"\
    admin\", \"admin\", \"admin\", \"admin\", \"admin\", \"admin\", \"admin\", \"\
    admin\", \"admin\", \"admin\", \"admin\", \"admin\", \"admin\", \"admin\", \"\
    admin\", \"admin\", \"admin\", \"admin\", \"admin\", \"admin\", \"admin\", \"\
    admin\", \"admin\", \"admin\", \"admin\", \"admin\", \"admin\", \"admin\", \"\
    admin\", \"admin\", \"admin\", \"admin\", \"admin\", \"admin\", \"admin\", \"\
    admin\", \"admin\", \"admin\", \"admin\", \"admin\", \"admin\", \"admin\", \"\
    admin\", \"admin\", \"admin\", \"admin\", \"admin\", \"admin\", \"admin\", \"\
    admin\", \"admin\", \"admin\", \"admin\", \"admin\", \"admin\", \"admin\", \"\
    admin\", \"admin\", \"admin\", \"admin\", \"admin\", \"admin\", \"admin\", \"\
    admin\", \"admin\", \"admin\", \"admin\", \"admin\", \"admin\", \"admin\", \"\
    admin\", \"admin\", \"admin\", \"admin\", \"admin\", \"admin\", \"admin\", \"\
    admin\", \"admin\", \"admin\", \"admin", "    if length(lst1) == length(lst2)\n\
    \        \n        for (i1,i2) in [(length(lst1),1), (length(lst2),1)] do \n \
    \           if lst1[i1] == lst2[i2]\n                lst1[i1] = lst1[i1]\n   \
    \             lst1[i2] = lst1[i2]\n            end\n        end\n    end", " \
    \   \n    if length(lst1) != length(lst2) \n        error(\"two vectors have different\
    \ length\")\n    end\n    \n    matching = [i for i in lst1 if i < lst2]\n   \
    \ \n    string1 = \"\"\n    string2 = \"\"\n    for i in matching\n        if\
    \ i isa Vector{String}\n            string1 = string1 \u222A i\n        end\n\
    \        if i isa String\n            string2 = string2 \u222A i\n        end\n\
    \    end\n    \n    return string1\nend", "        \n    match1 = Set()\n    match2\
    \ = Set()\n    \n    for (elt in lst1)\n        match1 += Set{String}(elt)\n \
    \   end\n    \n    for (elt in lst2)\n        match2 += Set{String}(elt)\n   \
    \ end", "    \n    lst1.map(x->count(x)<=count(y) ? x : y) \nend\n</cell>\n<cell>\n\
    total_match(\"hi\", \"Hi\")\n</cell>\n<cell>\ntotal_match([\"hi\", \"admin\"],\
    \ [\"hI\", \"Hi\"])\n</cell>\n<cell>\ntotal_match([\"hi\", \"admin\"], [\"hi\"\
    , \"hi\", \"admin\", \"project\"])\n</cell>\n<cell>\ntotal_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n</cell>\n<text>\n10.2.3 Vectorized String operations\n\
    10.2.3.1 String concatenation", "    minimum = minimum(lst1,lst2)\n    maximum\
    \ = maximum(lst1,lst2)\n    \n    if length(minimum) == length(maximum) \n   \
    \     return minimum\n    else\n        return minimum[minimum.>=maximum]\n  \
    \  end\nend\n</cell>\n<text>\nThe function total match returns the list of words\
    \ that have all the characters in the list1 and list2", "    \n    if length(lst1)\
    \ == length(lst2)\n        return lst1\n    \n    length1 = length(lst1)\n   \
    \ length2 = length(lst2)\n    \n    # count the chars\n    char_count1 = Dict()\n\
    \    char_count2 = Dict()\n    \n    for word in lst1\n        for ch in word\n\
    \            char_count1[ch] = get(char_count1, ch, 0) + 1\n        end\n    end\n\
    \    \n    for word in lst2\n        for ch in word\n            char_count2[ch]\
    \ = get(char_count2, ch, 0) + 1\n        end\n    end\n    \n    if length(char_count1)\
    \ > length(char_count2)\n        diff1 = char_count1 .- char_count2\n        total1\
    \ = Dict()\n        for kv in diff1\n            total1[get!(char_count2, kv.key)]\
    \ = get(total1, kv.key, 0) + 1\n        end\n        \n        total = sort(collect(values(total1)))\n\
    \        \n        return total\n    elseif length(char_count1) < length(char_count2)\n\
    \        diff2 = char_count2 .- char_count1\n        total2 = Dict()\n       \
    \ for kv in diff2\n            total2[get!(char_count1, kv.key)] = get(total2,\
    \ kv.key, 0) + 1\n        end\n        \n        total = sort(collect(values(total2)))\n\
    \        \n        return total\n    else\n        return lst1\n    end\nend\n\
    </cell>\n<text>\nPart III : Hash Table", "    if length(lst1) == length(lst2)\n\
    \        return lst1\n    else \n        lst2::Vector{String}\n        lst1::Vector{String}\n\
    \        \n        len_lst1 = length(lst1)\n        len_lst2 = length(lst2)\n\
    \        \n        vec_res = Vector{String}(len_lst1)\n        \n        for i_val\
    \ in 1:len_lst1\n            if all(elem in lst2 for elem in lst1[i_val]) < true\n\
    \                vec_res[i_val] = lst1[i_val]\n            else\n            \
    \    vec_res[i_val] = lst2[i_val]\n            end\n        end\n        \n  \
    \      return vec_res\n    end\nend\n</cell>\n<code language=julia-1.4>\n@test\
    \ total_match([\"a\",\"b\",\"c\"], [\"a\",\"c\",\"d\"]) == [\"a\"]\n@test total_match([\"\
    a\",\"b\",\"c\"], [\"b\",\"a\",\"c\",\"d\"]) == [\"b\",\"a\"]\n@test total_match([\"\
    a\",\"b\",\"c\"], [\"b\",\"c\",\"a\",\"d\"]) == [\"b\",\"c\"]\n@test total_match([\"\
    a\",\"b\",\"c\"], [\"b\",\"d\",\"a\",\"c\"]) == [\"b\",\"d\",\"a\"]\n@test total_match([\"\
    a\"], [\"a\"]) == [\"a\"]\n@test total_match([\"a\"], []) == []\n</cell>\n<text>\n\
    Exercise 3", "    \n    max_length = max(lengths(lst1), lengths(lst2))\n    max_length\
    \ += 1", "    n=0\n    for v in lst2\n        n+=length(v)\n    end", "    if\
    \ length(lst1) != length(lst2)\n        error(\"Vectors must have equal length\"\
    )\n    end\n    return sort(lst1) .< sort(lst2)\nend\n</cell>\n<code language=julia-1.5>\n\
    total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n</cell>\n<code language=julia-1.5>\n\
    total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n</cell>\n\
    <code language=julia-1.5>\ntotal_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"\
    hi\"])\n</cell>\n<code language=julia-1.5>\ntotal_match([\"4\"], [\"1\", \"2\"\
    , \"3\", \"4\", \"5\"])\n</cell>\n<text>\n6.3 Intersection\nWrite a function that\
    \ accepts a vector and returns the elements of that vector that are also elements\
    \ of another vector.", "    if size(lst1) == size(lst2)\n        total = length(lst1)\n\
    \        for i in 1 : size(lst1)\n            if lst1[i] > lst2[i]\n         \
    \       total -= 1\n            end\n        end\n        return lst1\n    else\n\
    \        return lst2\n    end\nend\n\"\"\"\n    Write a function that accepts\
    \ two vectors of numbers and returns the vector that has \n    total number of\
    \ numbers in the all numbers of the vector less than the other vector.", "   \
    \ \n    ans = lst1\n    for i in 1:length(lst1)\n        if lst1[i] <= lst2[i]\n\
    \            ans = ans + [i]\n        end\n    end\n    ans\nend\n</code>\n<|/\
    \ a dscore=0 |>\n<| c |>\nIf this answer helped, please consider upvoting or accepting\
    \ it as the answer.\n<|/ c |>\n<| a |>\nHere's a way you could do it:\n<code>",
  "    lst1_len = length(lst1)\n    lst2_len = length(lst2)\n    if lst1_len == lst2_len\n\
    \        return lst1\n    end\n    \n    lst1_len = sum(map(length, lst1))\n \
    \   lst2_len = sum(map(length, lst2))\n    \n    match_lst = Vector{String}(undef,\
    \ lst1_len)\n    match_lst[1] = lst1[1]\n    i = 2\n    for idx in 2:lst1_len\n\
    \        if lst1[idx] == lst2[i]\n            match_lst[idx] = lst1[idx]\n   \
    \         i += 1\n        else\n            match_lst[idx] = lst2[i]\n       \
    \     i += 1\n        end\n    end\n    \n    \n    return match_lst\nend", " \
    \   s = Vector{String}(lst1)\n    t = Vector{String}(lst2)\n    v = sort(union(s,t))\n\
    \    total = 0\n    length(v) do i \n        if v[i] < t[i] \n            total\
    \ += 1\n        end\n    end\n    return v[total < length(t)]\nend\n</cell>\n\
    <code language=julia-1.5>\ntotal_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n\
    </cell>\n<code language=julia-1.5>\ntotal_match([\"hi\", \"admin\"], [\"hi\",\
    \ \"hi\", \"admin\", \"project\"])\n</cell>\n<code language=julia-1.5>\ntotal_match([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n</cell>\n<code language=julia-1.5>\n\
    total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n</cell>\n<code language=julia-1.5>\n\
    total_match([\"1\"], [\"2\", \"3\"])\n</cell>\n<code language=julia-1.5>\ntotal_match([\"\
    1\"], [\"1\", \"3\"])\n</cell>\n<code language=julia-1.5>\ntotal_match([\"1\"\
    ], [\"2\", \"1\", \"3\"])\n</cell>\n<text>\nQ. Write a function that accepts two\
    \ vectors of strings and returns the number of chars that match in both vectors.",
  "    \n    total_char = 0\n    for v in lst2\n        total_char = total_char +\
    \ length(v)\n    end\n    \n    char_count = 0\n    for v in lst1\n        char_count\
    \ += length(v)\n    end\n    \n    if char_count < total_char\n        lst1\n\
    \    else\n        lst2\n    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\
    \"\n    Write a function that accepts two vectors of strings and returns the vector\
    \ that has \n    total number of chars in the all strings of the vector less than\
    \ the other vector.", "    if length(lst1) != length(lst2) \n        error(\"\
    Vectors have different length\")\n    end\n    if length(lst1) == length(lst2)\n\
    \        return lst1\n    end\n    \n    for i in 1:length(lst1)\n        lst1[i]\
    \ = lowercase(lst1[i])\n        lst2[i] = lowercase(lst2[i])\n    end", "    l1_cnt=length(lst1)\n\
    \    l2_cnt=length(lst2)\n    \n    if l1_cnt==l2_cnt\n        return lst1\n \
    \   else\n        if l1_cnt>l2_cnt\n            smaller=lst1\n            larger=lst2\n\
    \        else\n            smaller=lst2\n            larger=lst1\n        end\n\
    \    end", "    \n    # initialize to empty if empty\n    if lst1 == [] && lst2\
    \ == [] return []\n    if lst1 == [] return lst2\n    if lst2 == [] return lst1",
  "    if length(lst1) == length(lst2)\n        return lst1\n    else\n        len1\
    \ = length(lst1)\n        len2 = length(lst2)\n        diff = len1-len2\n    \
    \    return lst1[diff...] \n    end\nend\n</cell>\n<code language=julia-1.6>\n\
    total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n</cell>\n<code language=julia-1.6>\n\
    total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n</cell>\n\
    <code language=julia-1.6>\ntotal_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"\
    hi\"])\n</cell>\n<code language=julia-1.6>\ntotal_match([\"4\"], [\"1\", \"2\"\
    , \"3\", \"4\", \"5\"])\n</cell>\n<code language=julia-1.6>\nusing Test\n</cell>\n\
    <code language=julia-1.6>\n@test total_match([\"hi\", \"admin\"], [\"hI\", \"\
    Hi\"]) = [\"hi\", \"admin\"]\n@test total_match([\"hi\", \"admin\"], [\"hi\",\
    \ \"hi\", \"admin\", \"project\"]) = [\"hi\", \"admin\"]\n@test total_match([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) = [\"hi\", \"admin\"]\n@test total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) = [\"4\"]\n</cell>\n<text>\nQ9", " \
    \   length1 = length(lst1)\n    length2 = length(lst2)\n    if length1 == length2\n\
    \        return lst1\n    elseif length1 > length2\n        len1, len2 = length1,\
    \ length2\n    else\n        len1, len2 = length2, length1\n    end\n    string1\
    \ = \"\"\n    string2 = \"\"\n    count1, count2 = 0, 0\n    for str1 in lst1\n\
    \        for str2 in lst2\n            if str1 \u2265 str2\n                string1\
    \ = string1 .+ str1\n                count1 = count1 + 1\n            else\n \
    \               string2 = string2 .+ str2\n                count2 = count2 + 1\n\
    \            end\n        end\n    end\n    string1 = string1[count1:len1]\n \
    \   string2 = string2[count2:len2]\n    if count1 < len1\n        return string1\n\
    \    elseif count2 < len2\n        return string2\n    else\n        push!(string1,\
    \ string2)\n        sort!(string1)\n        return string1\n    end\nend\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a vector and returns the number\
    \ of characters in the strings that are \nshorter than or equal to the number\
    \ of characters in the vector.", "  m1 = size(lst1)\n  m2 = size(lst2)\n  if m1\
    \ == m2\n    return lst1\n  else\n    \n    counts = Dict()\n    \n    for i \u2208\
    \ 1:m2\n      counts[lst2[i]] = counts.get(lst2[i], 0) + 1\n    end\n    \n  \
    \  for i \u2208 1:m1\n      counts[lst1[i]] = counts.get(lst1[i], 0) - 1\n   \
    \ end\n    \n    lst = Vector{String}(undef, m1)\n    \n    for i \u2208 1:m1\n\
    \      if counts[lst1[i]] == 0\n        lst[i] = lst1[i]\n      else\n       \
    \ counts[lst1[i]] -= 1\n      end\n    end\n    \n    return lst\n  end\nend",
  "    res::Vector{String} = []\n    for el in lst2\n        if el in lst1\n     \
    \       push!(res, el)\n        end\n    end\n    return res\nend\n</cell>\n<code\
    \ language=julia-1.0>\ntotal_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n</cell>\n\
    <code language=julia-1.0>\ntotal_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"\
    admin\", \"project\"])\n</cell>\n<code language=julia-1.0>\ntotal_match([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"])\n</cell>\n<code language=julia-1.0>\n\
    total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n</cell>\n<text>\nExercise\
    \ 4\nWrite a function that returns the length of any string given.", "    if length(lst1)==length(lst2)\n\
    \        return lst1\n    else\n        lst3=lst1\n        for i=1:length(lst2)\n\
    \            lst3=findall(lst3, x -> x<lst2[i])\n            if length(lst3)==0\n\
    \                lst3=union(lst1, lst2[i])\n            else\n               \
    \ break\n            end\n        end\n        return lst3\n    end\nend", " \
    \   if length(lst1) == length(lst2) \n        return lst1\n    else \n       \
    \ vec1 = lst1\n        vec2 = lst2\n        vec2 = union(vec1, vec2) \n      \
    \  cnt1 = length(vec1)\n        cnt2 = length(vec2)\n        cnt3 = cnt1 + cnt2\n\
    \        len1 = length(vec1[1])\n        len2 = length(vec2[1])\n        vec3\
    \ = Vec()\n        for i in 1:cnt3\n            if length(vec3) < len1 \n    \
    \            vec3 = vec3 .+ vec1[i]\n            else \n                vec3 =\
    \ vec3 .+ vec2[i]\n            end\n        end\n        \n        if length(vec3)\
    \ == len1\n            return vec3\n        else\n            return vec3\n  \
    \      end\n    end\nend\n</cell>\n<code language=julia-1.4>\ntotal_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n</cell>\n<text>\n\
    9.4.5 count and count_in", "    match_char::Vector{String}= Vector{String}(undef,length(lst1))\n\
    \    for word in lst1\n        for char in lst2\n            if word==char\n \
    \               match_char[findall(x->x==char, word)] <-  word\n            end\n\
    \        end\n    end\n    match_char\nend", "    \n    if length(lst1) == length(lst2)\n\
    \        return lst1\n    else\n        rem1 = lst1[end-1:end]\n        rem2 =\
    \ lst2[end-1:end]\n        \n        lst1_n = length(lst1)\n        lst2_n = length(lst2)\n\
    \        \n        len_m = max(length(lst1), length(lst2))", "    \n    for i\
    \ in 1:length(lst2)\n        push!(result, length(lst1) >= length(lst2) ? lst1[i]\
    \ : \"\")\n    end\n    return arr\nend", "    \n        \n    lst = sort(lst1,\
    \ lst2)", "    if length(lst1) != length(lst2)\n        error(\"vectors length\
    \ not equal\")\n    end\n    \n    match_idx = 0\n    for i in eachindex(lst1)\n\
    \        for j in eachindex(lst2)\n            if length(lst1[i]) > length(lst2[j])\n\
    \                match_idx += 1\n            end\n        end\n    end", "   \
    \ if length(lst1) == length(lst2)\n        return lst1\n    else\n        remaining_list\
    \ = lst1\n        \n        for i in 1:length(lst2)\n            remaining_list[i]\
    \ = remove(huge(lst1), lst2[i])\n        end\n        \n        if length(remaining_list)\
    \ == 0\n            return lst2\n        else\n            return remaining_list\n\
    \        end\n    end\nend", "    \n    if lst1 == lst2\n        lst1\n    else\n\
    \        lst1 .>= lst2\n    end", "    if length(lst1) == length(lst2)\n     \
    \   \n        total = 0\n        for elt in lst1\n            total = total +\
    \ length(elt)\n        end\n        for elt in lst2\n            total = total\
    \ + length(elt)\n        end\n        \n        if total < length(lst1)\n    \
    \        push!(lst1, \"\")\n        elseif total < length(lst2)\n            push!(lst2,\
    \ \"\")\n        end\n        return lst1\n    else\n        throw(ArgumentError(\"\
    Vectors must have equal length\"))\n    end\nend", "    \n    if length(lst1)\
    \ == length(lst2)\n        return lst1\n    else\n        chars = Set{String}(lst1)\n\
    \        chars.difference_update(lst2)\n        return chars\n    end\nend", " \
    \   total = 0\n    for n in lst1\n        total += length(filter(x -> x < n, lst2))\n\
    \    end\n    if total == length(lst1)\n        return lst1\n    else\n      \
    \  return lst2\n    end\nend", "    n1_strlen1 = length(lst1)\n    n2_strlen2\
    \ = length(lst2)\n    if n1_strlen1 == 0 || n2_strlen2 == 0\n        return lst1\n\
    \    end\n    if n1_strlen1 > n2_strlen2\n        push!(lst2, lst1[n1_strlen1])\n\
    \        lst1 = lst1[1:n1_strlen1]\n        return lst1\n    elseif n2_strlen1\
    \ > n1_strlen2\n        push!(lst1, lst2[n2_strlen2])\n        lst2 = lst2[1:n2_strlen2]\n\
    \        return lst2\n    end\n    total_len = 0\n    for elem in lst1\n     \
    \   total_len = total_len + length(elem)\n    end\n    for elem in lst2\n    \
    \    total_len = total_len + length(elem)\n    end\n    if total_len == 0 && length(lst1)\
    \ == 0 && length(lst2) == 0\n        return \"\"\n    end\n    if total_len ==\
    \ 0 && length(lst1) == 0 && length(lst2) > 0\n        return lst2\n    end\n \
    \   if total_len > 0 && length(lst1) == 0 && length(lst2) == 0\n        return\
    \ lst1\n    end\n    if total_len > 0 && length(lst1) == 0 && length(lst2) > 0\n\
    \        return lst2\n    end\n    if total_len == 0 && length(lst1) > 0 && length(lst2)\
    \ == 0\n        return lst1\n    end\n    if total_len == 0 && length(lst1) >\
    \ 0 && length(lst2) > 0\n        return lst2\n    end\n    if total_len > 0 &&\
    \ length(lst1) == 0 && length(lst2) == 0\n        return lst1\n    end\n    if\
    \ total_len > 0 && length(lst1) == 0 && length(lst2) > 0\n        return lst2\n\
    \    end\n    if total_len > 0 && length(lst1) > 0 && length(lst2) == 0\n    \
    \    return lst1\n    end\n    if total_len > 0 && length(lst1) > 0 && length(lst2)\
    \ > 0\n        return lst2\n    end\n    return []\nend", "     \n    return lst1\
    \ \nend", "    if length(lst1) != length(lst2)\n        error(\"Vectors have different\
    \ size\")\n    end\n    sum = 0\n    for i in eachindex(lst1)\n        if lst1[i]\
    \ < lst2[i]\n            sum += length(lst1[i])\n        else\n            sum\
    \ += length(lst2[i])\n        end\n    end\n    return lst1[findall(lst1 .< lst2,\
    \ x -> x > sum)]\nend\n</cell>\n<text>\nExercise 1\nWrite a function that returns\
    \ a string that is the concatenation of all words in a string. \nIf there are\
    \ no words, return an empty string", "    result = Set()\n    for s in lst1 do\
    \ result.insert(length(s)) end\n    for s in lst2 do result.insert(length(s))\
    \ end\n    lst3 = lst1[SetIterator( sort(result) )]\n    return lst3\nend", " \
    \   if length(lst1) != length(lst2) \n        return lst1\n    \n    chars   \
    \ = reduce(+, map(length, lst1)) \n    bigger   = length(lst1) > length(lst2)\n\
    \    \n    if bigger \n        lst1 = lst2\n        lst2 = lst1\n    end", " \
    \   if length(lst1) > length(lst2) \n        lst1, lst2 = lst2, lst1 \n    else\
    \ \n        lst1, lst2 = lst2, lst1 \n    end \n    \n    matches = [] \n    for\
    \ str in lst1 \n        for str2 in lst2 \n            if length(str) <=length(matches)\
    \ and str2 <= matches \n            matches.push(str) \n            end \n   \
    \     end \n    end \n    return matches \nend\n</cell>\n<code language=julia-1.3>\n\
    total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n</cell>\n<code language=julia-1.3>\n\
    total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n</cell>\n\
    <code language=julia-1.3>\ntotal_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"\
    hi\"])\n</cell>\n<code language=julia-1.3>\ntotal_match([\"4\"], [\"1\", \"2\"\
    , \"3\", \"4\", \"5\"])\n</cell>\n<text>\n4.5 The vector that has only strings\
    \ of the length 3", "    strings = Vec([])\n    for i in 1:length(lst1)\n    \
    \    if lst1[i] < lst2[i]\n            push!(strings, lst1[i])\n        end\n\
    \    end\n    return strings\nend\n</code>\n<|/ a dscore=3 |>\n<| a dscore=2 tags=julia,performance\
    \ |>\nHere's a version that does O(log n) string comparisons (this might not be\
    \ optimal in terms of asymptotic runtime performance)\n<code>", "     \n    n\
    \ = length(lst1)\n    m = length(lst2)\n    \n    if m==n\n        return lst1\n\
    \    else\n        \n        diff = 0\n        \n        for i in 1:n\n      \
    \      diff = diff+length(lst1[i])-length(lst2[i])\n            \n           \
    \ if diff < 0\n                diff = diff + n\n            else\n           \
    \     break\n            end\n        end\n        \n        answer = []\n   \
    \     \n        for i in 1:n\n            push!(answer, lst1[i])\n        end\n\
    \        \n        for i in 1:m\n            push!(answer, lst2[i])\n        end\n\
    \        \n        return answer\n    end\nend", "        if length(lst1) > length(lst2)\
    \ \n            return lst1 \n        else \n            return lst2 \n    end\n\
    \    end", "     #return if both have same length\n    if length(lst1) == length(lst2)\n\
    \        return lst1\n    end\n    #find total chars in all strings\n    char_total\
    \ = 0\n    for str in lst1\n        char_total += length(str)\n    end\n    char_total\
    \ += length(lst2)\n    \n    \n    #get max number of chars in each string\n \
    \   max_chars = []\n    for str in lst1\n        for char in str\n           \
    \ if !contains(max_chars, char)\n                max_chars = [char]\n        \
    \    else\n                max_chars = [char]\n            end\n        end\n\
    \    end", "    \n    \n    return lst1\nend", "    \n    if length(lst1) == length(lst2)\
    \ \n        vec = []\n        for a in lst1\n            for b in lst2\n     \
    \           if a < b\n                    push!(vec, a)\n                else\n\
    \                    push!(vec, b)\n                end\n            end\n   \
    \     end\n        return vec\n    end", "    total = 0\n    for e in lst1\n \
    \       total += count(e, lst2)\n        if total > count(lst1, lst2)\n      \
    \      total = 0\n        end\n    end\n    return lst1 \nend\n</cell>\n<text>\n\
    Exercise: Vectorize\nThe total_match function above can be optimized by using\
    \ vectorization. Write a function that accepts a vector v1 of strings and a vector\
    \ v2 of strings and returns the vector that has total number of chars in the all\
    \ strings of the vector less than the other vector. \nTo vectorize a function\
    \ you can use @. Vectorization is very important for numerical computation, for\
    \ example. \nThe @. operator allows you to vectorize a function.", "    if length(lst1)\
    \ < length(lst2)\n        return lst1\n    else\n        return lst2\n    end\n\
    end", "  result = []\n  for v in lst1\n    if sum(a == \"-\" for a in v) <= sum(a\
    \ == \"-\" for a in lst2)\n      break\n    else\n      result += v\n  end\n \
    \ return result\nend", "    count = 0\n    for elem in lst2\n        count +=\
    \ length(lst1) \n    end\n    lst3 = lst1\n    lst3 = lst3[count : end]\n    lst3\n\
    end\n</code>\n<|/ a |>\n<| a dscore=1 |>\nThe question is \"Find the number of\
    \ characters in each string less than the length of the other string\", I suggest\
    \ to create a new array which contains the length of the 2 strings (A) and the\
    \ number of characters in each string (A[i]) less than the length of the other\
    \ string (B[i]) at each iteration, then concatenate all arrays (A+B), sort the\
    \ arrays (B), then remove the last value of the concatenated array (B[end]), then\
    \ return the first array (A).\n<code>", "    n = length(lst1)\n    m = length(lst2)\n\
    \    m = m if n == m else n\n    idx = Vector{Int64}(undef,m)\n    for i=1:m\n\
    \        idx[i] = findlast(lst1[i],lst2[i])\n    end", "    sz1 = length(lst1)\n\
    \    sz2 = length(lst2)\n    if sz1 == sz2 \n        lst1\n    else \n       \
    \ lst1[sz1:sz2]\n    end\nend\n</cell>\n<text>\nTotal Number of Repeated Characters\n\
    Write a function that accepts two strings and returns the number of times a \n\
    character from string a is repeated in string b.", "    if length(lst1) == length(lst2)\n\
    \        for i in 1:length(lst1)\n            if count(lst1[i], lst2) > count(lst1[i],\
    \ lst1)\n                push!(lst3, lst1[i])\n            end\n        end\n\
    \        return lst3\n    else\n        return lst1\n    end\nend", "    \n  \
    \  total_matches = []\n    for n in lst1\n        for i in lst2\n            if\
    \ n < i\n                total_matches.append(i)\n                break\n    \
    \    end\n    end", "    if length(lst1) == length(lst2) \n        return lst1\n\
    \    elseif length(lst1) == length(unique(lst2)) \n        return lst1\n    elseif\
    \ length(lst2) == length(unique(lst1)) \n        return lst2\n    else\n     \
    \   println(\"lst1 has length: \" , length(lst1), \" and lst2 has length: \",\
    \ length(lst2), \"\\n ERROR: vectors of different lengths\")\n    end\nend", " \
    \   \n    if length(lst1) == length(lst2)\n        for i in 1:length(lst1)\n \
    \           if length(lst1[i]) < length(lst2[i])\n                return lst1[i]\n\
    \            end\n        end\n        return lst2\n    else\n        if length(lst2)\
    \ == length(lst1)\n            for i in 1:length(lst2)\n                if length(lst2[i])\
    \ < length(lst1[i])\n                    return lst2[i]\n                end\n\
    \            end\n            return lst1\n        else\n            return lst2\n\
    \        end\n    end\nend\n</cell>\n<cell>\n# Write your answer here", "    \
    \  lst1 = sort(lst1)\n      lst2 = sort(lst2)\n      length1, length2 = length(lst1),\
    \ length(lst2)\n      if length1 == length2\n        return lst1\n      elseif\
    \ length1 > length2\n        diff = lst1[length2...] - lst2[length1...]\n    \
    \    return lst1 + diff\n      else\n        diff = lst2[length1...] - lst1[length2...]\n\
    \        return lst2 + diff\n      end\n    end\n</code>\n<|/ a dscore=0 |>\n\
    <| c |>\nPlease don't post links to external sites. Links can go dead.\n<|/ c\
    \ |>\n<| c |>\nI didn't want to copy the function contents and all that. Just\
    \ provide the link to my function here.\n<|/ c |>\n<| c |>\nYour function was\
    \ copied from an external site. I was just pointing out that it was not a reliable\
    \ resource for future visitors. You should not post links to external sites. You\
    \ can put a comment on your own answer instead.\n<|/ c |>\n<| c |>\nAs for the\
    \ downvote - I didn't downvote you. But if you see my answer above, I have also\
    \ provided the solution to the same problem in O(M+N) where M is number of words\
    \ and N is number of chars. No need to sort the lists. In case there are duplicate\
    \ elements in the lists, they will be added only once. Also no need of having\
    \ additional variables. This is my answer to this problem.\n<|/ c |>\n<| c |>\n\
    Sure, I understand your point of view. Since I am a newbie, I thought I should\
    \ provide everything as much as I can. Since you are right, I should post the\
    \ solution as well.\n<|/ c |>\n<| a |>\nYou don't have to sort them if you use\
    \ binary search.\n<code>", "    return lst1\nend", "    if length(lst1)==length(lst2)\n\
    \        return lst1\n    elseif length(lst1)>length(lst2)\n        return lst1\n\
    \    else\n        return lst2\n    end\nend", "    if lst1.length == lst2.length\n\
    \        return lst1\n    else\n        lst3 = copy(lst2)\n        for i in 1:length(lst3)\n\
    \            if lst3[i] <= lst1[end] == false\n                lst3[i] <= lst1[end]\
    \ == false\n            end\n        end\n        return lst3\n    end\nend",
  "    return lst1\n    if length(lst1) != length(lst2)\n        return []\n    else\
    \ \n        count = 0\n        for a in lst1\n            for b in lst2\n    \
    \            if a < b\n                    count += 1\n                end\n \
    \           end\n        end\n        return lst1[count+1:end] \n    end\nend\n\
    \"\"\"\n    Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n    total number of chars in the all strings of the vector\
    \ greater than the other vector.", "    lst3 = Vector{String}()\n    len = length(lst1)\n\
    \    \n    for i=1:length(lst2)\n        len2 = length(lst2[i])\n        for j=1:len2\n\
    \            if (lst1[i] == lst2[j])\n                push!(lst3, lst1[i])\n \
    \           end\n        end\n    end\n    \n    return lst3\nend\n</cell>\n<text>\n\
    Write a function that accepts two vectors of strings and returns the vector that\
    \ has \ntotal number of chars in the all strings of the vector less than the other\
    \ vector.", "    length1 = length(lst1)\n    length2 = length(lst2)\n    if length1\
    \ == length2\n        return lst1\n    else\n        leng1 = length(lst1[i])\n\
    \        leng2 = length(lst2[i])\n        if leng1 < leng2\n            length1,\
    \ length2 = length2, length1\n        end\n        lst3 = Vector{String}(undef,\
    \ 0)\n        for j in 1:length(lst2)\n            if length(lst1[j]) < length2\n\
    \                lst3 .= lst2[j]\n            else\n                lst3 .= lst1[j]\n\
    \            end\n        end\n        return lst3\n    end\nend\n</code>\n<|/\
    \ a dscore=0 |>\n<| c |>\nThis works only for string vectors. What if I have an\
    \ integer vector?\n<|/ c |>\n<| c |>\nYou could convert the integer vector into\
    \ a string vector using [`join`](http://docs.julialang.org/en/stable/base/strings/#Base.join).\n\
    <|/ c |>\n<| c |>\nFor integer vector it doesnt work either. How should I do it?\n\
    <|/ c |>\n<| c |>\nCould you provide an example of your input and output?\n<|/\
    \ c |>\n<| c |>\nI added the example\n<|/ c |>\n<| a |>\nYou can use the set data\
    \ structure. It has fast searching and does not require a for loop.\n<code>",
  "    total_length = 0\n    for str in lst1 \n        total_length += length(str)\n\
    \    end\n    for str in lst2\n        total_length += length(str)\n    end\n\
    \    \n    match = zeros(total_length)\n    for str in lst1\n        match[findall(x->x<str,\
    \ lst2)] = total_length\n    end\n    return match[findall(x->x<total_length,\
    \ match)]\nend", "  \n  if(length(lst1) == length(lst2))\n    return lst1\n  elseif(length(lst1)\
    \ > length(lst2))\n    return []\n  elseif(length(lst1) < length(lst2))\n    return\
    \ []\n  end\n  \n  let i1 = 1\n  let i2 = 1\n  while(i <= length(lst1) && i <=\
    \ length(lst2))\n    if(lst1[i] > lst2[i])\n      return []\n    end\n    i +=\
    \ 1\n  end\n  return lst1\nend\n</cell>\n<code language=julia-1.5>\ntotal_match([1,2,3],[5,6])\n\
    </cell>\n<text>\nChallenge 15: Find out if one vector has all elements in the\
    \ other vector", "    num_chars = sum(map(len,lst1))\n    num_chars_other = sum(map(len,lst2))\n\
    \    if num_chars == num_chars_other\n        return lst1\n    else\n        return\
    \ lst1\n    end\nend", "  if length(lst1) != length(lst2) \n    return lst1 \n\
    \  else \n    matches=[]\n    for ele in lst1\n      for ele2 in lst2\n      \
    \  if ele < ele2\n          push!(matches,ele)\n        end\n      end\n    end\n\
    \    return matches\n  end\nend", "        if length(lst1) == length(lst2) \n\
    \            return lst1 \n        \n        vec1 = \"\"\n        vec2 = \"\"\n\
    \        for val in lst1\n            vec1 += val\n        end\n        for val\
    \ in lst2\n            vec2 += val\n        end\n        if length(vec1) == length(vec2)\n\
    \            return vec1\n        end\n        vec1 = \"\"\n        vec2 = \"\"\
    \n        for val in lst2\n            vec1 += val\n        end\n        for val\
    \ in lst1\n            vec2 += val\n        end\n        if length(vec1) == length(vec2)\n\
    \            return vec1\n        end\n        vec1 = \"\"\n        vec2 = \"\"\
    \n        for val in lst2\n            vec1 += val\n        end\n        for val\
    \ in lst1\n            vec2 += val\n        end\n        if length(vec1) == length(vec2)\n\
    \            return vec1\n        end\n        vec1 = \"\"\n        vec2 = \"\"\
    \n        for val in lst2\n            vec1 += val\n        end\n        for val\
    \ in lst1\n            vec2 += val\n        end\n        if length(vec1) == length(vec2)\n\
    \            return vec1\n        end\n        vec1 = \"\"\n        vec2 = \"\"\
    \n        for val in lst2\n            vec1 += val\n        end\n        for val\
    \ in lst1\n            vec2 += val\n        end\n        if length(vec1) == length(vec2)\n\
    \            return vec1\n        end\n        vec1 = \"\"\n        vec2 = \"\"\
    \n        for val in lst2\n            vec1 += val\n        end\n        for val\
    \ in lst1\n            vec2 += val\n        end\n        if length(vec1) == length(vec2)\n\
    \            return vec1\n        end\n        vec1 = \"\"\n        vec2 = \"\"\
    \n        for val in lst2\n            vec1 += val\n        end\n        for val\
    \ in lst1\n            vec2 += val\n        end\n        if length(vec1) == length(vec2)\n\
    \            return vec1\n        end\n        vec1 = \"\"\n        vec2 = \"\"\
    \n        for val in lst2\n            vec1 += val\n        end\n        for val\
    \ in lst1\n            vec2 += val\n        end\n        if length(vec1) == length(vec2)\n\
    \            return vec1\n        end\n        vec1 = \"\"\n        vec2 = \"\"\
    \n        for val in lst2\n            vec1 += val\n        end\n        for val\
    \ in lst1\n            vec2 += val\n        end\n        if length(vec1) == length(vec2)\n\
    \            return vec1\n        end\n        vec1 = \"\"\n        vec2 = \"\"\
    \n        for val in lst2\n            vec1 += val\n        end\n        for val\
    \ in lst1\n            vec2 += val\n        end\n        if length(vec1) == length(vec2)\n\
    \            return vec1\n", "    \n    \n    \nend", "    if length(lst1) ==\
    \ length(lst2)\n        return lst1\n    end\n    \n    i = 2\n    \n    count1\
    \ = 1\n    count2 = 1\n    \n    max_length = max(length(lst1), length(lst2))\n\
    \    \n    while i <= max_length\n        count1 = count1 + length(lst1[i-1])\n\
    \        count2 = count2 + length(lst2[i-1])\n        i = i + 1\n    end", " \
    \   sz1 = length(lst1)\n    sz2 = length(lst2)", "    if length(lst1) == length(lst2)\
    \ \n        return lst1\n    else \n        diff1 = diff(lst1)\n        diff2\
    \ = diff(lst2)\n        \n        total = length(diff1) + length(diff2)\n    \
    \    diff1.zip(diff2).reduce(total)\n    end\nend\n</code>\n<|/ a tags=julia,match,string,regex\
    \ dscore=0 |>\n<| a dscore=0 |>\nAnother option would be to use matchall() which\
    \ returns a list of tuples.  Then use filter() to keep the tuple that has the\
    \ maximum length for both lists being considered.  Then you can use getindex()\
    \ to extract the corresponding vectors.\n<code>", "    #return lst1 #return the\
    \ same vector if it has same length\n    return vec((i for i in lst1 if i < lst2[1]))",
  "    if len(lst1) == 0\n        return lst2\n    \n    if len(lst2) == 0\n     \
    \   return lst1\n    \n    if lst1[0] == lst2[0]\n        return total_match(lst1[2:end],\
    \ lst2[2:end])\n    \n    if length(lst1) > length(lst2)\n        return total_match(lst1[2:end],\
    \ lst2[end+1:end+length(lst1)])\n    \n    if length(lst1) < length(lst2)\n  \
    \      return total_match(lst1[end+1:end+length(lst2)], lst2[2:end])\n    end\n\
    \    \n    \n    return lst1\nend\n</cell>\n<code language=julia-1.5>\ntotal_match([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"])\n</cell>\n<code language=julia-1.5>\ntotal_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n</cell>\n<code language=julia-1.5>\n\
    total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n</cell>\n<code language=julia-1.5>\n\
    total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n</cell>\n<code language=julia-1.5>",
  "    list1 = []\n    list2 = []\n    for i in lst1 \n        list1 = list1 + count(i)\n\
    \    end\n    for i in lst2 \n        list2 = list2 + count(i)\n    end\n    if\
    \ length(list1) == length(list2) \n        return lst1 \n    end\n    if length(list1)\
    \ > length(list2) \n        for i in list1\n            if !in(i, list2)\n   \
    \             list2 = list2 + [i]\n            end\n        end\n        return\
    \ list2\n    end\n    for i in list2\n        if !in(i, list1)\n            list1\
    \ = list1 + [i]\n        end\n    end\n    return list1\nend", "    ans = vec()\n\
    \    lst1 = sort(lst1)\n    lst2 = sort(lst2)\n    length = length(lst1)\n   \
    \ for ii in 1:length\n        for jj in 1:length\n            push!(ans, join(lst1[ii],\
    \ lst2[jj]))\n        end\n    end\n    ans\nend", "  if(length(lst1) != length(lst2))\
    \ return [] \n  if(length(lst1) == 0) return []\n  m = match(lst1, lst2)\n  if(m\
    \ == 1)\n    return lst1\n  else\n    lst3 = lst1\n    for i = 2:length(lst1)\n\
    \      lst3 = union(lst3,lst1[i:])\n    end\n    return lst3\n  end\nend\n</cell>\n\
    <code language=julia-1.0>", "    if length(lst1) == length(lst2)\n        cnt=0\n\
    \        for str in lst1\n            for char in str\n                cnt+=1\n\
    \        end\n        cnt=0\n        for str in lst2\n            for char in\
    \ str\n                cnt+=1\n        end\n        if cnt==length(lst1)\n   \
    \         return lst1\n        else\n            return lst2\n        end\n  \
    \  elseif length(lst1) > length(lst2)\n        cnt = 0\n        for str in lst2\n\
    \            for char in str\n                cnt += 1\n            end\n    \
    \    end\n        for str in lst1\n            for char in str\n             \
    \   cnt += 1\n            end\n        end\n        if cnt == length(lst1)\n \
    \           return lst2\n        else\n            return lst1\n        end\n\
    \    else\n        cnt = 0\n        for str in lst1\n            for char in str\n\
    \                cnt += 1\n            end\n        end\n        for str in lst2\n\
    \            for char in str\n                cnt += 1\n            end\n    \
    \    end\n        if cnt == length(lst1)\n            return lst1\n        else\n\
    \            return lst2\n        end\n    end\nend\n</code>\n<|/ a tags=string,julia\
    \ |>\n<| a |>\nAs far as I understood from the question, the following code should\
    \ do the job:\n<code>\nusing PyCall\n@pyimport functools # for reduce", "    if\
    \ length(lst1)==length(lst2) && all(x -> contains(x,lst2) && contains(x,lst1),\
    \ lst1)\n        return lst1\n    else \n        return [x for x in  lst2 if contains(x,lst1)\
    \ || contains(x,lst2)]\nend\n</cell>\n<text>\nTask 3.6", "     if length(lst1)\
    \ == length(lst2)\n        return lst1\n     else \n        if length(lst1) >\
    \ length(lst2)\n            lst1 = reverse(lst1)\n            lst2 = reverse(lst2)\n\
    \        end", "    if length(lst1) != length(lst2) \n        return \"List length\
    \ does not match\"\n    end\n    lst3 = []\n    for i in eachindex(lst1)\n   \
    \     if lst1[i] < lst2[i] \n            lst3 += lst1[i]\n        end\n    end\n\
    \    lst3\nend", "    n = length(lst1)\n    m = length(lst2)\n    cnt = 0\n  \
    \  \n    for i in 1 : n\n        if length(cnt) == m or length(cnt) == 0 \n  \
    \          return lst1\n        else\n            cnt += length(lst1[i])\n   \
    \     end\n    end\n    return lst1\nend", "    \n    if length( lst1 ) == length(\
    \ lst2 ) \n        \n        total = 0\n        for element in lst1\n        \
    \    total += length(element)\n        end\n        \n        for element in lst2\n\
    \            total -= length(element)\n        end\n        \n        if total\
    \ == 0\n            return lst1\n        else\n            return lst2\n     \
    \   end\n    else\n        \n        return lst2\n    end\nend\n</cell>\n<text>\n\
    Problem 4 (2 points)\nWrite a function that, given two vectors of strings, returns\
    \ the first element of the longest string if the first is longer, and returns\
    \ the second element if the first is shorter.", "    if length(lst1) != length(lst2)\
    \ \n        error(\"Vectors have different sizes\") \n    else \n        result\
    \ = [] \n        for (i,j) in zip(lst1, lst2) \n            if i >= j \n     \
    \           result.append(i) \n            end \n        end \n        return\
    \ result\n    end\nend\n</cell>\n<text>\nThe function above takes a first vector\
    \ and a second vector. The function checks whether the number of chars in each\
    \ string are the same or different. If the number of chars are the same, the function\
    \ returns the first vector. Otherwise, the function returns the second vector.",
  "    diff = diff(lst1, lst2)\n    lst = union(lst1, lst2)\n    sort(lst)\n    return\
    \ lst[findall(lst.!=diff)]\nend", "    \"\"\"\n    Write a function that accepts\
    \ two vectors of strings and returns the vector that has \n    total number of\
    \ chars in the all strings of the vector less than the other vector.", "    \n\
    \    diff = Set{String}(Set{String}(lst1) + Set{String}(lst2))\n    \n    diff\
    \ = Set{String}(diff(lst1, lst2))\n    if length(diff) == 0 \n        return lst1\n\
    \    elseif length(diff) > 0 \n        return filter(x -> !diff(lst1, x)==diff(lst2,\
    \ x), lst1)\n    else\n        throw(ArgumentError(\"Vectors should have same\
    \ length\"))\n    end\nend", "    return Vector{String}(undef,0)\n    for x in\
    \ lst1\n        push!(total_match, lst2, x)\n    end\n    return lst1\nend", " \
    \   \n    \n    \nend\n</cell>\n<code language=julia-1.5>", "    l1 = length(lst1)\n\
    \    l2 = length(lst2)\n    match_vec = Vector{String}(\"\")\n    match_vec =\
    \ append(match_vec, lst1)\n    if l1 != l2\n        for i in 1:l1\n          \
    \  match_vec = append(match_vec, lst2)\n        end\n    elseif l1 == l2\n   \
    \     match_vec = append(match_vec, lst1)\n    else\n        match_vec = lst1\n\
    \    end\n    return match_vec\nend\ntotal_match([\"hi\", \"admin\"], [\"hI\"\
    , \"Hi\"])\ntotal_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\ntotal_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\ntotal_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\ntotal_match([\"4\"], [\"4\", \"1\"\
    , \"2\", \"3\", \"5\"])\ntotal_match([\"4\"], [\"1\", \"3\", \"4\"])\ntotal_match([\"\
    4\"], [\"1\", \"3\", \"5\"])\ntotal_match([\"4\"], [\"1\", \"3\", \"4\", \"5\"\
    ])\ntotal_match([\"4\"], [\"4\", \"1\", \"3\", \"5\"])\ntotal_match([\"4\"], [\"\
    4\", \"1\", \"3\", \"5\"])\ntotal_match([\"4\"], [\"4\", \"1\", \"3\", \"5\"])\n\
    total_match([\"4\"], [\"4\", \"1\", \"3\", \"5\", \"6\"])\ntotal_match([\"4\"\
    , \"6\", \"3\", \"4\", \"5\"], [\"4\", \"1\", \"3\", \"5\", \"6\"])\ntotal_match([\"\
    4\", \"6\", \"3\", \"4\", \"5\"], [\"4\", \"1\", \"3\", \"5\", \"6\"])\ntotal_match([\"\
    4\", \"6\", \"3\", \"4\", \"5\"], [\"4\", \"1\", \"3\", \"5\", \"6\"])\ntotal_match([\"\
    4\", \"6\", \"3\", \"4\", \"5\"], [\"4\", \"1\", \"3\", \"5\", \"6\"])\ntotal_match([\"\
    4\", \"6\", \"3\", \"4\", \"5\"], [\"4\", \"1\", \"3\", \"5\", \"6\"])\ntotal_match([\"\
    4\", \"6\", \"3\", \"4\", \"5\"], [\"4\", \"1\", \"3\", \"5\", \"6\"])\ntotal_match([\"\
    4\", \"6\", \"3\", \"4\", \"5\"], [\"4\", \"1\", \"3\", \"5\", \"6\"])\ntotal_match([\"\
    4\", \"6\", \"3\", \"4\", \"5\"], [\"4\", \"1\", \"3\", \"5\", \"6\"])\ntotal_match([\"\
    4\", \"6\", \"3\", \"4\", \"5\"], [\"4\", \"1\", \"3\", \"5\", \"6\"])\ntotal_match([\"\
    4\", \"6\", \"3\", \"4\", \"5\"], [\"4\", \"1\", \"3\", \"5\", \"6\"])\ntotal_match([\"\
    4\", \"6\", \"3\", \"4\", \"5\"], [\"4\", \"1\", \"3\", \"5\", \"6\"])\ntotal_match([\"\
    4\", \"6\", \"3\", \"4\", \"5\"], [\"4\", \"1\", \"3\", \"5\", \"6\"])\ntotal_match([\"",
  "    if lst1 == [] and lst2 == []\n        return [] \n    if lst1 == [] and !lst2\n\
    \        return [] \n    if !lst1 and lst2 == []\n        return [] \n    \n \
    \   if length(lst1) < length(lst2)\n        return lst1 \n    else \n        return\
    \ lst2 \n    end\nend", "    if length(lst1) == length(lst2)\n        lst1\n \
    \   else \n        lst2\n    end\nend", "    len1=length (lst1)\n    len2=length\
    \ (lst2)\n    if len1 == len2\n        if len1==0\n            return lst1\n \
    \       else\n            return lst1\n    end\n    i=0\n    j=0\n    k=len1\n\
    \    while i<len1 && j<len2\n        if lst1[i] < lst2[j]\n            push!(lst1,\
    \ lst1[i])\n            i += 1\n        else \n            push!(lst2, lst2[j])\n\
    \            j += 1\n        end\n        i += 1\n        k += 1\n    end\n  \
    \  lst1[k:end] = lst1[len1-1:end]\n    lst2[k:end] = lst2[len2-1:end]\n    return\
    \ lst1\nend\n</code>\nAnd your final code:\n<code>", "    \n    if length(lst1)\
    \ == length(lst2)\n        vec1 = lst1\n        vec2 = lst2\n    else\n      \
    \  vec1 = reverse(lst2)\n        vec2 = reverse(lst1)\n    end", "    lst1 = lst1\
    \ .+ lst2\n    lst1 = map(str, lst1)\n    lst2 = map(str, lst2)\n    \n    lst1\
    \ = unique(lst1)\n    lst2 = unique(lst2)\n    \n    arr1 = lst1 .- lst2\n   \
    \ arr2 = lst2 .- lst1\n    \n    \n    if length(arr1) < length(arr2) \n     \
    \   return arr1\n    elseif length(arr2) > length(arr1) \n        return arr2\n\
    \    else\n        return arr1\n    end\nend", "    size1 = length(lst1)\n   \
    \ size2 = length(lst2)\n    if size1 == size2\n        return lst1\n    else \n\
    \        return lst2[findfirst(a -> a < lst2, lst1) - 1 : findfirst(a -> a < lst2,\
    \ lst1) + size2]\n    end\nend", "    matches=Vector{String}(undef, 0)\n    for\
    \ string in lst1\n        matches=[string]\n        for string in lst2\n     \
    \       if string(1<:)<string(end) && matches==[]\n                push!(matches,string)\n\
    \            end\n        end\n    end\n    matches\nend\ntotal_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n</cell>\n<code language=julia-1.6>", " \n   \
    \ lengths = []\n    for x in lst1\n        push!(lengths, length(lst1))\n    end\n\
    \    for x in lst2\n        push!(lengths, length(lst2))\n    end\n    sort(lengths)",
  "    total::Int = 1\n    for i in lst1\n        total += length(i)\n    end\n  \
    \  for i in lst2\n        total += length(i)\n    end\n    if total == length(lst1)\
    \ && total == length(lst2)\n        return lst1\n    end\n    return []\nend",
  "    lst3 = filter(i -> i.length >= lst2.length, lst1)\n    if lst3 == lst2\n  \
    \      return lst1\n    end\n    return lst3\nend ", "    if length(lst1) == length(lst2)\n\
    \        \n        for i=1:length(lst1)\n            if length(lst1[i]) > length(lst2[i])\n\
    \                lst2 = lst2[lst2!=lst1[i]]\n            else\n              \
    \  lst1 = lst1[lst1!=lst2[i]]\n            end\n        end\n        \n      \
    \  return lst1\n    else\n        error(\"two vectors are not of same length\"\
    )\n    end\nend\n</cell>\n<code language=julia-0.6>\n\"\"\"\nWrite a function\
    \ that returns true if the first letter of the word is in the second \nletter\
    \ of the word, and false otherwise.", "    if len(lst1) != length(lst2)\n    \
    \    error(\"lst1 length should be equal to lst2 length.\")\n    end\n    ans\
    \ = []\n    \n    for element in lst1\n        push!(ans, element)\n    end\n\
    \    for element in lst2\n        push!(ans, element)\n    end", "    \n    if\
    \ length(lst1)==length(lst2) && length(lst1)==length(unique(lst2)) \n        return\
    \ lst1\n    else \n        return lst2\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    total_match([\"hi\", \"admin\"], [\"hi\", \"admin\"])\n</cell>\n<code language=julia-1.5>\n\
    total_match([\"hi\", \"admin\"], [\"hi\", \"admin\", \"project\"])\n</cell>\n\
    <code language=julia-1.5>\ntotal_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"\
    hi\"])\n</cell>\n<code language=julia-1.5>\ntotal_match([\"4\"], [\"1\", \"2\"\
    , \"3\", \"4\", \"5\"])\n</cell>\n<code language=julia-1.5>\ntotal_match([\"4\"\
    ], [\"2\", \"2\", \"2\", \"3\", \"4\"])\n</cell>\n<code language=julia-1.5>\n\
    total_match([\"4\"], [\"2\", \"3\", \"2\", \"3\", \"4\"])\n</cell>\n<code language=julia-1.5>\n\
    total_match([\"4\"], [\"2\", \"2\", \"2\", \"3\", \"4\", \"5\"])\n</cell>\n<code\
    \ language=julia-1.5>\ntotal_match([\"4\"], [\"2\", \"3\", \"2\", \"2\", \"4\"\
    , \"5\"])\n</cell>\n<code language=julia-1.5>\ntotal_match([\"4\"], [\"2\", \"\
    2\", \"2\", \"3\", \"4\", \"5\"])\n</cell>\n<code language=julia-1.5>\ntotal_match([\"\
    4\"], [\"2\", \"3\", \"2\", \"2\", \"4\", \"5\", \"5\", \"5\", \"5\"])\n</cell>\n\
    <text>\nWrite a function that accepts two vectors of strings and returns the vector\
    \ that has \n    total number of chars in the all strings of the vector less than\
    \ the other vector.", "    sum = 0\n    for el in lst1\n        sum = sum + el\n\
    \    end\n    for el in lst2\n        sum = sum + el\n    end\n    if sum == length(lst1)\n\
    \        return lst1\n    else\n        return lst2\n    end\nend\n</cell>\n<text>\n\
    Task 2\nWrite a function that accepts two vectors of strings and returns the vector\
    \ that has \ntotal length as the sum of the lengths of strings in the vectors.",
  "    res = copy(lst1)\n    if length(res) == length(lst2)\n        return res\n\
    \    end\n    push!(res, \"\")\n    for v in lst2\n        push!(res, v[isequal(res,v)==:false\
    \ ? 1 : end])\n    end\n    return res\nend\n</cell>\n<code language=julia-1.0>\n\
    total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n</cell>\n<text>\n4.4.4 Find\
    \ substrings", "    s = lst1; t = lst2;\n    if length(lst1) == length(lst2)\n\
    \        return lst1;\n    else\n        return [];\n    end\nend\n\"\"\"\n  \
    \  Write a function that accepts a string and returns the length of string.",
  "  if length(lst1) == length(lst2) \n    return lst1\n  else\n    \n    for v in\
    \ lst1\n      a = count_char(v, lst2)\n      b = count_chars(v, lst2)\n      if\
    \ a < b\n        return v\n      end\n    end\n    return lst1\n  end\nend", " \
    \    \n    charlst1 = charlst2 = CharList()\n    for el1 in lst1\n        for\
    \ el2 in lst2\n            charlst1 += el1\n            charlst2 += el2\n    \
    \        if charlst1.count > charlst2.count\n                return el1\n    \
    \        elseif charlst1.count == charlst2.count\n                return el2\n\
    \            end\n        end\n    end\n    return charlst1\nend", "    result\
    \ = Vector{String}(undef, length(lst1))\n    \n    for index in 1:length(lst1)\n\
    \        if isinf(length(lst1[index])) || isinf(length(lst2[index]))\n       \
    \     result[index] = lst1[index]\n        elseif length(lst1[index]) > length(lst2[index])\n\
    \            result[index] = lst1[index]\n        elseif length(lst1[index]) <\
    \ length(lst2[index])\n            result[index] = lst2[index]\n        else\n\
    \            result[index] = lst1[index] if contains(lst2[index], lst1[index])\
    \ else lst2[index]\n        end\n    end\n    \n    return result\nend\n</code>\n\
    <|/ a dscore=1 tags=algorithm,string,arrays,vector,julia |>\n<| a tags=algorithm,string,arrays,vector,julia\
    \ dscore=0 |>\nThis is quite easy to do with Julia's native String functions.\
    \ It will be a bit slower than's answer, but much more memory efficient. I don't\
    \ know which one to use, so I'll use both to demonstrate the idea.\n<code>", " \
    \   sum = 0\n    for i in length(lst, 1)\n        sum += length(lst1)\n    end\n\
    \    for j in length(lst, 1)\n        sum += length(lst2)\n    end\n    if sum\
    \ == length(lst)\n        return lst\n    else\n        return throw(string(\"\
    Length mismatch\"))\n    end\nend", "    if length(lst1) == length(lst2)\n   \
    \     \n        for i in 1:length(lst1)\n            if length(lst1[i]) <= length(lst2[i])\n\
    \                lst3 = lst1\n            else \n                lst3 = lst2\n\
    \            end\n            if length(lst3[i])>length(lst2[i])\n           \
    \     lst3[i] = \"\"\n            elseif length(lst3[i])<length(lst2[i])\n   \
    \             lst3[i] = \"\"\n            elseif length(lst3[i])==length(lst2[i])\n\
    \                \n                lst3 = lst3[i+1::length]\n            end\n\
    \        end\n        return lst3\n    else \n        return lst2\n    end\nend\n\
    </code>\n<|/ a |>\n<| a |>\nThe solution provided by is perfectly fine, but if\
    \ you would like to achieve this using only map and filter, you could do it using\
    \ the following code:\n<code>\na = [1, 2]\nb = [2, 1]", "  if size(lst1) == size(lst2)\n\
    \    return lst1\n  elseif size(lst1) > size(lst2)\n    return lst2\n  else\n\
    \    i = lst1[1]\n    for j in lst2\n      if j > i\n        i += 1\n      else\n\
    \        return lst1\n      end\n    end\n    return lst1\n  end\nend", "    if\
    \ length(lst1) != length(lst2) \n        error(\"Vectors must have same length\"\
    ) \n    end\n    res = []\n    for i in eachindex(lst1)\n        if length(lst1[i])\
    \ >= length(lst2[i])\n            push!(res, lst1[i])\n        end\n    end\n\
    \    return res\nend\n</cell>\n<code language=julia-1.0>\ntotal_match([\"hi\"\
    , \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n</cell>\n<text>\nExercise\
    \ 7.02\nWrite a function that accepts two vectors of strings and returns the vector\
    \ that has \ntotal number of chars in the all strings of the vector less than\
    \ the other vector.", "    vec2 = Vector{String}(lst2)\n    if size(vec1) != size(vec2)\n\
    \        throw(ArgumentError(\"Vectors must have same size\"))\n    end\n    arr1\
    \ = Array{String, 1}(lst1)\n    arr2 = Array{String, 1}(vec2)\n    arr3 = Array{String,\
    \ 1}(Vec(lst1))\n    arr4 = Array{String, 1}(Vec(vec2))\n    arr5 = Array(vec1)\n\
    \    arr6 = Array(vec2)\n    arr7 = Array{String, 1}(vec(lst1))\n    arr8 = Array{String,\
    \ 1}(vec(vec2))\n    arr9 = Array(vec(lst1))\n    arr10 = Array(vec(vec2))\n \
    \   arr11 = Array(vec(lst2))\n    arr12 = Array(vec(vec2))\n    arr13 = Array(vec(lst1))\n\
    \    arr14 = Array(vec(vec2))\n    arr15 = Array(vec(lst2))\n    arr16 = Array(vec(vec2))\n\
    \    arr17 = Array(vec(lst2))\n    arr18 = Array(vec(vec2))\n    arr19 = Array(vec(lst1))\n\
    \    arr20 = Array(vec(vec2))\n    arr21 = Array(vec(lst2))\n    arr22 = Array(vec(vec2))\n\
    \    arr23 = Array(vec(lst2))\n    arr24 = Array(vec(vec2))\n    arr25 = Array(vec(lst1))\n\
    \    arr26 = Array(vec(vec2))\n    arr27 = Array(vec(lst2))\n    arr28 = Array(vec(vec2))\n\
    \    arr29 = Array(vec(lst1))\n    arr30 = Array(vec(vec2))\n    arr31 = Array(vec(lst2))\n\
    \    arr32 = Array(vec(vec2))\n    arr33 = Array(vec(lst2))\n    arr34 = Array(vec(vec2))\n\
    \    arr35 = Array(vec(lst1))\n    arr36 = Array(vec(vec2))\n    arr37 = Array(vec(lst2))\n\
    \    arr38 = Array(vec(vec2))\n    arr39 = Array(vec(lst2))\n    arr40 = Array(vec(vec2))\n\
    \    arr41 = Array(vec(lst1))\n    arr42 = Array(vec(vec2))\n    arr43 = Array(vec(lst2))\n\
    \    arr44 = Array(vec(vec2))\n    arr45 = Array(vec(lst2))\n    arr46 = Array(vec(vec2))\n\
    \    arr47 = Array(vec(lst1))\n    arr48 = Array(", "    l1 = 0\n    l2 = 0\n\
    \    for i in eachindex(lst1) \n        lst1 = lst1[i]\n    end\n    for i in\
    \ eachindex(lst2) \n        lst2 = lst2[i]\n    end\n    return if lst1 == []\
    \ return lst2\n    return if lst2 == [] return lst1\n    for i in eachindex(lst1)\
    \ \n        l1 = l1+length(lst1[i])\n    end\n    for i in eachindex(lst2) \n\
    \        l2 = l2+length(lst2[i])\n    end\n    return if l1 <= l2 return lst1\n\
    \    return if l2 <= l1 return lst2\n    return lst1\nend\n</cell>\n<code language=julia-1.6>\n\
    total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n</cell>\n<code language=julia-1.6>\n\
    total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n</cell>\n\
    <code language=julia-1.6>\ntotal_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"\
    hi\"])\n</cell>\n<code language=julia-1.6>\ntotal_match([\"4\"], [\"1\", \"2\"\
    , \"3\", \"4\", \"5\"])\n</cell>\n<text>\nQuestion 11. Write a function that checks\
    \ whether two lists are exactly the same or not, if two lists are exactly the\
    \ same\nthen return true, else return false. Make sure that if the lists are not\
    \ the same but are of the same length, then also return true.", "    if length(lst1)\
    \ ~= length(lst2)\n        throw(ArgumentError(\"Length of vectors must be same\"\
    ))\n    end\n    \n    matcher = Dict()\n    for (key, value) in zip(lst1, lst2)\n\
    \        if value == key\n            matcher[key] = value\n        else\n   \
    \         delete!(matcher, key)\n        end\n    end", "    lst1 = sort(lst1)\n\
    \    lst2 = sort(lst2)\n    i = 0\n    j = length(lst2)\n    ans = lst1\n    while\
    \ i < length(lst1) && j < length(lst2)\n        if lst1[i] < lst2[j]\n       \
    \     i = i + 1\n        else\n            j = j + 1\n        end\n        push!(ans,\
    \ lst1[i])\n    end\n    ans\nend\n</cell>\n<code language=julia-1.1>\ntotal_match([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"])\n</cell>\n<code language=julia-1.1>\ntotal_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n</cell>\n<code language=julia-1.1>\n\
    total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n</cell>\n<code language=julia-1.1>\n\
    total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n</cell>\n<text>\nExercise\
    \ 1\nWrite a function that accepts two vectors of strings and returns the vector\
    \ that has \nthe words that appear in all of the strings, not in the first string\
    \ and not in the \nsecond string. Write the function as a generator function,\
    \ not as a top-level function.", "    # Your code here\nend\n</cell>\n<code language=julia-1.0>\n\
    # Run this cell to test\n@test total_match([], []) == []\n@test total_match([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]\n@test total_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ]\n@test total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\"\
    , \"hi\", \"hi\"]\n@test total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"\
    5\"]) == [\"4\"]\n</cell>\n<code language=julia-1.0>", "        if length(lst1)\
    \ == length(lst2)\n            return lst1\n        else if length(lst1) > length(lst2)\n\
    \            return lst2\n        else\n            return lst1\n        end\n\
    \    end\n</code>\n<|/ a |>\n<| a dscore=0 |>\nThis function will work for you\
    \ :\n<code>", "    match=Vector{String}(\"\")\n    for i in 1:length(lst1)\n \
    \       if length(lst1[i])==length(lst2[i])\n            for j in 1:length(lst1[i])\n\
    \                if lst1[i][j]<lst2[i][j]\n                    push!(match,lst1[i][j])\n\
    \                end\n            end\n        else\n            push!(match,lst1[i])\n\
    \        end\n    end\n    return match\nend", "    lst_chars = Vector{String}(lst1)\n\
    \    for elem in lst2\n        if elem == \" \"\n            lst_chars << \" \"\
    \n        else \n            lst_chars << elem\n    end\n    lst_chars_diff =\
    \ Vector{String}(setdiff(lst_chars, lst2))\n    lst_chars_diff_size = length(lst_chars_diff)\n\
    \    if lst_chars_diff_size == length(lst_chars)\n        return lst_chars\n \
    \   elseif lst_chars_diff_size == 0\n        return lst_chars_diff\n    elseif\
    \ lst_chars_diff_size < length(lst_chars)\n        return lst_chars_diff\n   \
    \ end\n    return []\nend\n</cell>\n<code language=julia-1.5>\ntotal_match([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"])\n</cell>\n<text>\nWrite a function that accepts\
    \ two vectors of strings, counts the number of times a given string appears in\
    \ the first vector, and then returns the string with maximum number of occurrences\
    \ in the first vector.", "    if length(lst1) == length(lst2)\n        lst\n \
    \   else\n        lst1\n    end\nend\n</code>\n<|/ a |>\n<| c |>\nNice solution\
    \ which should work in most circumstances. But it does not work in the general\
    \ case, for example when `lst1` and `lst2` are lists of sets, where some sets\
    \ are subsets of others. But then again, the question stated that the input vectors\
    \ were lists of strings.\n<|/ c |>\n<| a dscore=0 tags=algorithm,string,ruby,sorting,vector\
    \ |>\nHere's a Ruby solution I wrote:\n<code>\ndef string_max_len_diff(string,\
    \ *strings)\n  strings.map {|s| s.chars.map(&:chr).map(&:length).max }\n    .map(&:min)\n\
    \    .select {|i| (i - string.chars.map(&:chr).map(&:length).min).positive?}\n\
    end\n</code>\nThis works because String is comparable, and therefore can be compared\
    \ with <=>:\n<code>\n\"abcd\" <=> \"abcd\"\n#=> true\n\"abcd\" <=> \"ab\"\n#=>\
    \ true\n\"abcd\" <=> \"abc\"\n#=> true\n\"abcd\" <=> \"abd\"\n#=> true\n\"abcd\"\
    \ <=> \"abcde\"\n#=> true\n\"abcd\" <=> \"abe\"\n#=> true\n\"abcd\" <=> \"abde\"\
    \n#=> true\n\"abcd\" <=> \"abef\"\n#=> true\n\"abcd\" <=> \"abcdef\"\n#=> true\n\
    \"abcd\" <=> \"abce\"\n#=> true\n\"abcd\" <=> \"abcefghijk\"\n#=> true\n\"abcd\"\
    \ <=> \"abcefghijklmnopqrstuvwxyz\"\n#=> true\n</code>\nThe method above takes\
    \ the minimum difference in char lengths between the string and the minimum char\
    \ lengths in any of the strings it takes arguments for. It then checks if that\
    \ difference is positive. If it is, that string is the largest string it can possibly\
    \ be, so the return value is an array of those strings.\nExample\n<code>\nstring_max_len_diff(\"\
    abcdef\", *[\"abde\", \"abdef\", \"abe\"])\n#=> [\"abde\", \"abdef\", \"abe\"\
    ]\n</code>\nThis can be expanded to take an array of strings as follows:\n<code>\n\
    string_max_len_diff(\"abc\", *[\"abd\", \"abe\", \"abf\"])\n#=> [\"abd\", \"abe\"\
    , \"abf\"]\n</code>\nHere's a more ", "    \"\"\"\n    Write a function that accepts\
    \ two vectors of strings and returns the vector that has \n    total number of\
    \ chars in the all strings of the vector less than the other vector.", "    lst3\
    \ = lst1\n    lst4 = lst2\n    for index in 1:length(lst1)\n        lst3[index]\
    \ = findall(x -> x =~ \"^$\",lst1[index])\n        lst4[index] = findall(x ->\
    \ x =~ \"^$\",lst2[index])\n        if length(lst3[index])==0 && length(lst4[index])==0\
    \ \n            continue\n        elseif length(lst3[index])==0\n            lst3[index]\
    \ = lst4[index]\n        elseif length(lst4[index])==0\n            lst4[index]\
    \ = lst3[index]\n        end\n        if length(lst3[index]) == length(lst4[index])\n\
    \            for index in 1:length(lst3[index])\n                if lst3[index][i]\
    \ > lst4[index][i]\n                    lst3[index][index] = lst3[index][i]\n\
    \                    lst4[index][index] = lst4[index][i]\n                end\n\
    \            end\n        end\n    end\n    return lst3\nend"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
