language: jl
name: HumanEval_4_mean_absolute_deviation
results:
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    if len(numbers) == 0 \n        error(\"Cannot calculate MAD on an empty\
    \ dataset\")\n    end\n    mean_number = mean(numbers)\n    return sum([abs(x\
    \ - mean_number) for x in numbers]) / length(numbers)\nend\n</cell>\n<text>\n\
    A function that can calculate mean absolute deviation for a vector of numbers\
    \ and a number x\nand returns the result. \n(Note that this is different from\
    \ mean absolute deviation. \nThis calculates the mean absolute deviation for the\
    \ entire vector, \nwhereas Mean Absolute Deviation only calculates the MAD for\
    \ one number)\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpp0ah354l.jl:16\nin expression starting at\
    \ /tmp/tmpp0ah354l.jl:16\n"
  stdout: ''
  timestamp: 1659979420
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    center = mean(numbers)\n    return sum(abs2(number - center) for number\
    \ in numbers) / length(numbers)\nend\n</code>\n<|/ a tags=julia,standard-deviation\
    \ |>\n<| c |>\nI believe this has already been answered here: https://stackoverflow.com/questions/56406555/how-to-calculate-the-standard-deviation-of-a-vector-of-numbers-in-julia\n\
    <|/ c |>\n<| a |>\nJust to follow up on the answer from, I found that VectorStats.jl\
    \ has a function mad() which does what I've asked above.\nhttps://github.com/ksteele/VectorStats.jl\n\
    <|/ a dscore=1 tags=julia,standard-deviation |>\n<| a tags=julia,standard-deviation\
    \ dscore=0 |>\nFor completeness, the following is how one can calculate the standard\
    \ deviation with StatsBase.std() by using the same functions as in StatsBase.jl\
    \ (using rsqrt for simplicity):\n<code>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = mean_absolute_deviation;\n\t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp13f3qgr9.jl:13\nin expression starting at\
    \ /tmp/tmp13f3qgr9.jl:13\n"
  stdout: ''
  timestamp: 1659979420
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    numbers = numbers[:]\n    sum = 0.0\n    for i in numbers\n        sum\
    \ += abs(i - mean(numbers))\n    end\n    return sum / length(numbers)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0,\
    \ 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpq_kw64lv.jl:19

    '
  stdout: "test set: Error During Test at /tmp/tmpq_kw64lv.jl:22\n  Test threw exception\n\
    \  Expression: candidate([1.0, 2.0]) == 0.5\n  UndefVarError: mean not defined\n\
    \  Stacktrace:\n   [1] mean_absolute_deviation(numbers::Vector{Float64})\n   \
    \  @ Main /tmp/tmpq_kw64lv.jl:13\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpq_kw64lv.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpq_kw64lv.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpq_kw64lv.jl:23\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 3.0, 4.0]) == 1.0\n  UndefVarError: mean not defined\n\
    \  Stacktrace:\n   [1] mean_absolute_deviation(numbers::Vector{Float64})\n   \
    \  @ Main /tmp/tmpq_kw64lv.jl:13\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpq_kw64lv.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpq_kw64lv.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpq_kw64lv.jl:24\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2\n  UndefVarError: mean not defined\n\
    \  Stacktrace:\n   [1] mean_absolute_deviation(numbers::Vector{Float64})\n   \
    \  @ Main /tmp/tmpq_kw64lv.jl:13\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpq_kw64lv.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpq_kw64lv.jl:21\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  timestamp: 1659979422
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    \"\"\" Calculate Mean Absolute Deviation around mean of input data. \"\
    \"\"\n    sum = 0\n    for x in numbers\n        sum += abs(x - mean)\n    return\
    \ sum/length(numbers)\nend\n</cell>\n<code language=julia-1.3>\nmean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n</cell>\n<text>\nMean Absolute Deviation (MAD) can be used\
    \ for data smoothing or outlier removal.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = mean_absolute_deviation;\n\t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0fhqzs3g.jl:16\nin expression starting at\
    \ /tmp/tmp0fhqzs3g.jl:16\n"
  stdout: ''
  timestamp: 1659979420
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum(abs2(numbers - mean(numbers))) \nend\nusing Test\n\n@testset begin\n\
    \ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0, 2.0]) == 0.5)\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpliyd74jy.jl:14

    '
  stdout: "test set: Error During Test at /tmp/tmpliyd74jy.jl:17\n  Test threw exception\n\
    \  Expression: candidate([1.0, 2.0]) == 0.5\n  UndefVarError: mean not defined\n\
    \  Stacktrace:\n   [1] mean_absolute_deviation(numbers::Vector{Float64})\n   \
    \  @ Main /tmp/tmpliyd74jy.jl:10\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpliyd74jy.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpliyd74jy.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpliyd74jy.jl:18\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 3.0, 4.0]) == 1.0\n  UndefVarError: mean not defined\n\
    \  Stacktrace:\n   [1] mean_absolute_deviation(numbers::Vector{Float64})\n   \
    \  @ Main /tmp/tmpliyd74jy.jl:10\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpliyd74jy.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpliyd74jy.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpliyd74jy.jl:19\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2\n  UndefVarError: mean not defined\n\
    \  Stacktrace:\n   [1] mean_absolute_deviation(numbers::Vector{Float64})\n   \
    \  @ Main /tmp/tmpliyd74jy.jl:10\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpliyd74jy.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpliyd74jy.jl:16\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  timestamp: 1659979422
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    if length(numbers) < 2\n        raise \"Number of entries must be greater\
    \ than 2\"\n    end\n    # calculate the mean\n    mean = mean(numbers)\n    return\
    \ mean(map(abs, numbers - mean))\nend\n</cell>\n<text>\nThe next function will\
    \ be used to calculate a moving average. It takes the mean of the passed in values\
    \ and calculates the average. In the example above, the mean was calculated over\
    \ the vector [1,2,3,4,5,6,7,8,9,10] and the average was calculated from 1 through\
    \ 10. The moving average is calculated by taking each element of the vector and\
    \ adding it to the running average. The return value is the mean of the values\
    \ in the vector.\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"\"\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpb9fdiit1.jl:11\nin expression starting at /tmp/tmpb9fdiit1.jl:11\n"
  stdout: ''
  timestamp: 1659979420
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    mean_ = mean(numbers)\n    diff = numbers - mean_\n    sum_abs = sum(abs2,\
    \ diff)\n    return sum_abs / length(diff)\nend\n</cell>\n<text>\nCalculate Root\
    \ Mean Squared Error\nThe RMSE (root mean squared error) measures the average\
    \ of the squared errors, dividing the squared errors by their sizes:\nRMSE = SQRT(SUM((x\
    \ - x_mean)^2))\nwhere:\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpu4xppqe0.jl:15\nin expression starting at\
    \ /tmp/tmpu4xppqe0.jl:15\n"
  stdout: ''
  timestamp: 1659979420
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    return mean((numbers - mean(numbers)) .^ 2)\nend\n</cell>\n<text>\nCalculating\
    \ the median is pretty much identical to the mean:\nusing Test\n\n@testset begin\n\
    \ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0, 2.0]) == 0.5)\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphb5fht90.jl:12\nin expression starting at\
    \ /tmp/tmphb5fht90.jl:12\n"
  stdout: ''
  timestamp: 1659979420
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    mean_val = mean(numbers)\n    return (reduce(+, map(abs, numbers)) - mean_val).^2/length(numbers)\n\
    end\n</cell>\n<text>\n$$\\large \\text{MAE} = \\sqrt{\\frac{\\sum |y-\\hat{y}|}{\\\
    sum |y|}}$$\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpb4cl_1m7.jl:13\nin expression starting at\
    \ /tmp/tmpb4cl_1m7.jl:13\n"
  stdout: ''
  timestamp: 1659979420
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    \"\"\"\n    Mean Absolute Deviation\n    \n    \n    \n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = mean_absolute_deviation;\n\t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpl9n9f_om.jl:9\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpl9n9f_om.jl:1\n\
    in expression starting at /tmp/tmpl9n9f_om.jl:1\n"
  stdout: ''
  timestamp: 1659979420
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    \n    n = length(numbers)\n    if n == 0 \n        return 0.0\n    end\n\
    using Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0,\
    \ 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp76xmpnr0.jl:9\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp76xmpnr0.jl:1\n\
    in expression starting at /tmp/tmp76xmpnr0.jl:1\n"
  stdout: ''
  timestamp: 1659979420
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n\tsum_absolute_deviation = 0.0 \n\tfor i in numbers do \n\t\tsum_absolute_deviation\
    \ = sum_absolute_deviation + abs  (i-mean(i))\n\tend \n\tMAD = sum_absolute_deviation/length(numbers)\n\
    \treturn MAD\nend\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid \"do\" syntax\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpobgk3i4s.jl:11\nin expression starting at /tmp/tmpobgk3i4s.jl:11\n"
  stdout: ''
  timestamp: 1659979420
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n        sum = 0\n        count = 0\n        for element in numbers\n     \
    \       sum = sum + abs(element - mean(numbers))\n            count = count +\
    \ 1\n        return sum / count\n</code>\nThe example above is simple and clear.\
    \ Now, let us try it with the example from Andrew Stravinsky's book Linear Algebra\
    \ and its example: Calculating Standard Deviation of an Array in Python. \n<code>\n\
    using Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0,\
    \ 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpj1oymmw4.jl:16\nin expression starting at\
    \ /tmp/tmpj1oymmw4.jl:16\n"
  stdout: ''
  timestamp: 1659979420
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    mean_ = mean(numbers)\n    return sum((numbers - mean_) .* numbers .-\
    \ numbers .* (numbers - mean_))/length(numbers)\nend\n</cell>\n<cell>\n@time mean_absolute_deviation(data)\n\
    </cell>\n<text>\nExercise: Write a function that returns an array of element-wise\
    \ square roots \nof the input array of numbers.\nusing Test\n\n@testset begin\n\
    \ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0, 2.0]) == 0.5)\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp55jul4qy.jl:13\nin expression starting at\
    \ /tmp/tmp55jul4qy.jl:13\n"
  stdout: ''
  timestamp: 1659979420
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n        sum=0.0\n        for n in numbers\n            sum += (n - mean(numbers))^2\n\
    \        end\n        return sum/(length(numbers)-1.0)\n    end\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a vector of input numbers, and returns\
    \ the sum of the squared differences between all elements and the corresponding\
    \ mean of the input vector.\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkv45s5fk.jl:16\nin expression starting at\
    \ /tmp/tmpkv45s5fk.jl:16\n"
  stdout: ''
  timestamp: 1659979420
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    avg = mean(numbers)\n    return mean(abs(numbers - avg))\nend\n</cell>\n\
    <text>\nFunction to generate random numbers (uniform distribution)\nusing Test\n\
    \n@testset begin\n\ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0,\
    \ 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpiouyur5l.jl:13\nin expression starting at\
    \ /tmp/tmpiouyur5l.jl:13\n"
  stdout: ''
  timestamp: 1659979420
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    \"\"\"\n    Calculate Mean Absolute Deviation for each element in a vector\n\
    \    >>> [mean_absolute_deviation([1.0, 2.0, 3.0]), mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0]), mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])]\n    1.0\n \
    \   2.0\n    3.0\n    \"\"\"\n    return mean(map(abs, numbers)) \nend\n</cell>\n\
    <text>\nCalculate Mean Absolute Deviation of Vector with Data\nThe Mean Absolute\
    \ Deviation (MAD) is calculated as\nusing Test\n\n@testset begin\n\ncandidate\
    \ = mean_absolute_deviation;\n\t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphdr8cl7b.jl:19\nin expression starting at\
    \ /tmp/tmphdr8cl7b.jl:19\n"
  stdout: ''
  timestamp: 1659979420
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = sum(abs2, numbers)\n    return sum / length(numbers)\nend\n</cell>\n\
    <code language=julia-1.6>\nmean_absolute_deviation(numbers)\n</cell>\n<text>\n\
    The average absolute error is another useful metric to study when comparing predictions\
    \ to observations. By computing the average absolute error, you can study the\
    \ performance of your model on new and unseen data. Below, we calculate the mean\
    \ absolute error of our predictions on the first three observations of our test\
    \ set.\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplqsfk8oj.jl:13\nin expression starting at\
    \ /tmp/tmplqsfk8oj.jl:13\n"
  stdout: ''
  timestamp: 1659979420
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    local m = 0\n    for n in numbers do\n        local m = m + math.abs(n\
    \ - mean(numbers))\n    end\n    return m\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0, 2.0]) == 0.5)\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid \"do\" syntax\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpnvca4s5l.jl:11\nin expression starting at /tmp/tmpnvca4s5l.jl:11\n"
  stdout: ''
  timestamp: 1659979420
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    return sqrt(mean(abs2.(numbers - mean(numbers))))\nend\n</cell>\n<text>\n\
    The RMS of a set of numbers is defined as the square root of the mean of the squared\
    \ differences from the mean.\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpa9uf8tbn.jl:12\nin expression starting at\
    \ /tmp/tmpa9uf8tbn.jl:12\n"
  stdout: ''
  timestamp: 1659979420
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n  deviations = map(abs, numbers)\n  mean = mean(numbers)\n  return sum(abs(deviations)\
    \ - mean)/length(deviations)\nend\n</cell>\n<code language=julia-1.6>\njulia>\
    \ mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n1.0\n</cell>\n<code language=julia-1.6>\n\
    mean_absolute_deviation([0.5, 0.2, 0.8, 0.6])\n</cell>\n<text>\nLet's look at\
    \ this in Julia\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4rkgxcka.jl:14\nin expression starting at\
    \ /tmp/tmp4rkgxcka.jl:14\n"
  stdout: ''
  timestamp: 1659979420
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    \"\"\"Calculate the mean absolute deviation of a set of numbers\nusing\
    \ Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0,\
    \ 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4nqanrlo.jl:1\nin expression starting at /tmp/tmp4nqanrlo.jl:1\n"
  stdout: ''
  timestamp: 1659979420
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    abs_deviations = map(abs, numbers)\n    abs_deviations_mean = mean(abs_deviations)\n\
    \    return mean(abs_deviations.map(x -> (x - abs_deviations_mean).abs))\nend\n\
    </cell>\n<text>\nExercise\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3cqsblej.jl:14\nin expression starting at\
    \ /tmp/tmp3cqsblej.jl:14\n"
  stdout: ''
  timestamp: 1659979420
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    total = sum(numbers)\n    return sqrt(sum([(n-total)^2 for n in numbers])\
    \ / length(numbers))\nend\n</cell>\n<text>\nLet's check that our Mean Absolute\
    \ Deviation calculation is working correctly:\nusing Test\n\n@testset begin\n\n\
    candidate = mean_absolute_deviation;\n\t@test(candidate([1.0, 2.0]) == 0.5)\n\t\
    @test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0,\
    \ 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp52fsg9_2.jl:13\nin expression starting at\
    \ /tmp/tmp52fsg9_2.jl:13\n"
  stdout: ''
  timestamp: 1659979422
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    mean =  mean(numbers)\n    return sum(abs2 - mean for abs2 in numbers)/length(numbers)\n\
    end\n</cell>\n<code language=julia-0.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = mean_absolute_deviation;\n\t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnqqyk8_6.jl:13\nin expression starting at\
    \ /tmp/tmpnqqyk8_6.jl:13\n"
  stdout: ''
  timestamp: 1659979422
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    n::Int = length(numbers)\n    sum::Float64 = 0.0\n    for j in 1:n\n \
    \       sum += (numbers[j] - mean(numbers)) * (numbers[j] - mean(numbers))\n \
    \   end\n    return sum / n\nend\n</cell>\n<code language=julia-1.4>\nmean_absolute_deviation([1,2,3,4])\n\
    </cell>\n<code language=julia-1.4>\n# We want to plot the input number array for\
    \ different deviation\n# levels and compare the results with the MAD value.\n\
    using Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0,\
    \ 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxizc8cwx.jl:17\nin expression starting at\
    \ /tmp/tmpxizc8cwx.jl:17\n"
  stdout: ''
  timestamp: 1659979422
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    mean =  mean(numbers)\n    sum = 0.0\n    for number in numbers\n    \
    \    sum += (number - mean) * (number - mean)\n    end\nusing Test\n\n@testset\
    \ begin\n\ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0, 2.0])\
    \ == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp_c0oxypm.jl:9\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp_c0oxypm.jl:1\n\
    in expression starting at /tmp/tmp_c0oxypm.jl:1\n"
  stdout: ''
  timestamp: 1659979422
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    return mean(abs2(numbers)) \nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = mean_absolute_deviation;\n\t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpavntz0ll.jl:14

    '
  stdout: "test set: Error During Test at /tmp/tmpavntz0ll.jl:17\n  Test threw exception\n\
    \  Expression: candidate([1.0, 2.0]) == 0.5\n  MethodError: no method matching\
    \ abs2(::Vector{Float64})\n  Closest candidates are:\n    abs2(!Matched::Complex)\
    \ at ~/.conda/envs/polyglot/share/julia/base/complex.jl:278\n    abs2(!Matched::Bool)\
    \ at ~/.conda/envs/polyglot/share/julia/base/bool.jl:150\n    abs2(!Matched::Real)\
    \ at ~/.conda/envs/polyglot/share/julia/base/number.jl:177\n    ...\n  Stacktrace:\n\
    \   [1] mean_absolute_deviation(numbers::Vector{Float64})\n     @ Main /tmp/tmpavntz0ll.jl:10\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpavntz0ll.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpavntz0ll.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpavntz0ll.jl:18\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 3.0, 4.0]) == 1.0\n  MethodError: no method matching abs2(::Vector{Float64})\n\
    \  Closest candidates are:\n    abs2(!Matched::Complex) at ~/.conda/envs/polyglot/share/julia/base/complex.jl:278\n\
    \    abs2(!Matched::Bool) at ~/.conda/envs/polyglot/share/julia/base/bool.jl:150\n\
    \    abs2(!Matched::Real) at ~/.conda/envs/polyglot/share/julia/base/number.jl:177\n\
    \    ...\n  Stacktrace:\n   [1] mean_absolute_deviation(numbers::Vector{Float64})\n\
    \     @ Main /tmp/tmpavntz0ll.jl:10\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpavntz0ll.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpavntz0ll.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpavntz0ll.jl:19\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2\n  MethodError: no method matching\
    \ abs2(::Vector{Float64})\n  Closest candidates are:\n    abs2(!Matched::Co"
  timestamp: 1659979425
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    \"\"\"For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = mean_absolute_deviation;\n\t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp_5u6k01u.jl:9\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp_5u6k01u.jl:1\n\
    in expression starting at /tmp/tmp_5u6k01u.jl:1\n"
  stdout: ''
  timestamp: 1659979422
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    avg = mean(numbers)\n    return sum([abs(x - avg) for x in numbers]) /\
    \ length(numbers)\nend\n</cell>\n<code language=julia-1.6>\n# Testing our mean\
    \ absolute deviation function\n@test mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0\n@test mean_absolute_deviation([1.0, 2.0]) == 0.5\n</cell>\n<code language=julia-1.6>\n\
    # Plot the distribution of mean absolute deviations\nx = 1:100\ny = map(x->mean_absolute_deviation(x),\
    \ x)\nplot(x, y)\nplot!(; label=\"\")\n</cell>\n<text>\nThis function is useful\
    \ for calculating and plotting variance. There are many more functions such as\
    \ mean-squared error, standard deviation, and correlation.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0, 2.0])\
    \ == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjggjm677.jl:13\nin expression starting at\
    \ /tmp/tmpjggjm677.jl:13\n"
  stdout: ''
  timestamp: 1659979422
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for i in numbers\n        sum += abs(i - mean)\n    end\n\
    \    return sum / (length(numbers) - 1)\nend\nusing Test\n\n@testset begin\n\n\
    candidate = mean_absolute_deviation;\n\t@test(candidate([1.0, 2.0]) == 0.5)\n\t\
    @test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0,\
    \ 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpbfa8a8n9.jl:18

    '
  stdout: "test set: Error During Test at /tmp/tmpbfa8a8n9.jl:21\n  Test threw exception\n\
    \  Expression: candidate([1.0, 2.0]) == 0.5\n  UndefVarError: mean not defined\n\
    \  Stacktrace:\n   [1] mean_absolute_deviation(numbers::Vector{Float64})\n   \
    \  @ Main /tmp/tmpbfa8a8n9.jl:12\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpbfa8a8n9.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpbfa8a8n9.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpbfa8a8n9.jl:22\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 3.0, 4.0]) == 1.0\n  UndefVarError: mean not defined\n\
    \  Stacktrace:\n   [1] mean_absolute_deviation(numbers::Vector{Float64})\n   \
    \  @ Main /tmp/tmpbfa8a8n9.jl:12\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpbfa8a8n9.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpbfa8a8n9.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpbfa8a8n9.jl:23\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2\n  UndefVarError: mean not defined\n\
    \  Stacktrace:\n   [1] mean_absolute_deviation(numbers::Vector{Float64})\n   \
    \  @ Main /tmp/tmpbfa8a8n9.jl:12\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpbfa8a8n9.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpbfa8a8n9.jl:20\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  timestamp: 1659979424
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum(abs2, numbers)/length(numbers)\nend\n</cell>\n<code language=julia-1.0>\n\
    # Your mean_absolute_error function should also work on the GPU.\n@cuda function\
    \ mean_absolute_error(numbers::Vector{Float64})::Float64\n  mean(abs2, numbers)\n\
    end\n</cell>\n<code language=julia-1.0>\n@assert mean_absolute_error(Vector{Float64}([4.0,\
    \ 5.0, 6.0])) == 3.0\n@assert mean_absolute_error(Vector{Float64}([1.0, 2.0, 3.0,\
    \ 4.0])) == 1.0\n</cell>\n<text>\nMean Squared Error\nusing Test\n\n@testset begin\n\
    \ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0, 2.0]) == 0.5)\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpx03c7af9.jl:12\nin expression starting at\
    \ /tmp/tmpx03c7af9.jl:12\n"
  stdout: ''
  timestamp: 1659979422
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    # Calculate sum of all deviations\n    sum_of_all_deviations = 0.0\n \
    \   for number in numbers\n        sum_of_all_deviations += fabs(number - mean(numbers))\n\
    \    end\n    # Divide by total number of observations\n    return sum_of_all_deviations\
    \ / length(numbers)\nend\n</code>\n<|/ a dscore=2 tags=statistics,julia |>\n<|\
    \ a dscore=1 |>\nA straightforward way to calculate mean absolute deviation is\n\
    <code>\nimport Statistics\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprprkad8i.jl:18\nin expression starting at\
    \ /tmp/tmprprkad8i.jl:18\n"
  stdout: ''
  timestamp: 1659979422
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum::Float64 = 0.0\n    total::Float64 = 0.0\n    for x in numbers\n \
    \       sum += abs(x - mean(x))\n        total += 1\n    return sum / total\n\
    </code>\n<|/ a tags=julia |>\n<| a |>\nI like to use JIT-compiled functions for\
    \ this kind of thing, as these will be faster than unsafe and non-JIT-compiled\
    \ code. \n<code>\njulia> using BenchmarkTools\nusing Test\n\n@testset begin\n\n\
    candidate = mean_absolute_deviation;\n\t@test(candidate([1.0, 2.0]) == 0.5)\n\t\
    @test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0,\
    \ 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpy7jsgt_l.jl:16\nin expression starting at\
    \ /tmp/tmpy7jsgt_l.jl:16\n"
  stdout: ''
  timestamp: 1659979422
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum_of_squared_deviations = 0.0\n    for i in numbers\n        sum_of_squared_deviations\
    \ += pow((numbers[i] - mean(numbers)), 2)\n    return sqrt(sum_of_squared_deviations\
    \ / length(numbers))\nend\n</cell>\n<text>\nExercise #5\nusing Test\n\n@testset\
    \ begin\n\ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0, 2.0])\
    \ == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp30eyy66f.jl:15\nin expression starting at\
    \ /tmp/tmp30eyy66f.jl:15\n"
  stdout: ''
  timestamp: 1659979422
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    average::Float64 = 0.0\n    sum::Float64 = 0.0\n    for num in numbers\n\
    \        average += num\n        sum += 1.0\n    end\n    average/sum\nend\n</cell>\n\
    <code language=julia-0.4>\njulia_stat(numbers)\n</cell>\n<code language=julia-0.4>\n\
    # Mean Absolute Deviation\njulia_stat(numbers)\n</cell>\n<code language=julia-0.4>\n\
    using Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0,\
    \ 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpne86l48a.jl:18\nin expression starting at\
    \ /tmp/tmpne86l48a.jl:18\n"
  stdout: ''
  timestamp: 1659979422
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    return mean(filter(x -> abs(x - mean(numbers)), numbers))\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0,\
    \ 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmp094qn2go.jl:14

    '
  stdout: "test set: Error During Test at /tmp/tmp094qn2go.jl:17\n  Test threw exception\n\
    \  Expression: candidate([1.0, 2.0]) == 0.5\n  UndefVarError: mean not defined\n\
    \  Stacktrace:\n   [1] (::var\"#1#2\"{Vector{Float64}})(x::Float64)\n     @ Main\
    \ /tmp/tmp094qn2go.jl:10\n   [2] filter(f::var\"#1#2\"{Vector{Float64}}, a::Vector{Float64})\n\
    \     @ Base ./array.jl:2484\n   [3] mean_absolute_deviation(numbers::Vector{Float64})\n\
    \     @ Main /tmp/tmp094qn2go.jl:10\n   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmp094qn2go.jl:17 [inlined]\n\
    \   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmp094qn2go.jl:16\ntest set:\
    \ Error During Test at /tmp/tmp094qn2go.jl:18\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 3.0, 4.0]) == 1.0\n  UndefVarError: mean not defined\n\
    \  Stacktrace:\n   [1] (::var\"#1#2\"{Vector{Float64}})(x::Float64)\n     @ Main\
    \ /tmp/tmp094qn2go.jl:10\n   [2] filter(f::var\"#1#2\"{Vector{Float64}}, a::Vector{Float64})\n\
    \     @ Base ./array.jl:2484\n   [3] mean_absolute_deviation(numbers::Vector{Float64})\n\
    \     @ Main /tmp/tmp094qn2go.jl:10\n   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmp094qn2go.jl:18 [inlined]\n\
    \   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmp094qn2go.jl:16\ntest set:\
    \ Error During Test at /tmp/tmp094qn2go.jl:19\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2\n  UndefVarError: mean not defined\n\
    \  Stacktrace:\n   [1] (::var\"#1#2\"{Vector{Float64}})(x::Float64)\n     @ Main\
    \ /tmp/tmp094qn2go.jl:10\n   [2] filter(f::var\"#1#2\"{Vector{Float64}}, a::Vector{Float64})\n\
    \     @ Base ./array.jl:2484\n   [3] mean_absolute_deviation(numbers::Vector{Float64})\n\
    \     @ Main /tmp/tmp094qn2go.jl:10\n   [4] macro expansion\n     @ ~/.conda/envs"
  timestamp: 1659979424
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    summand = numbers.sum::Float64\n    return sqrt(summand/length(numbers))\n\
    end\n</cell>\n<cell>\n# Let's check it out:\nmean_absolute_deviation([1,2,3,4,5])\n\
    </cell>\n<text>\nWe can see that our implementation does produce reasonable results:\n\
    $$\n\\mbox{mean_absolute_deviation}(\\mathbf{x}) = \\sqrt{n}\\cdot \\left[ \\\
    sum{i=1}^n | x_i - \\mu| \\right]\n$$\n(we ignore the denominator for now and\
    \ just focus on \\sqrt{n})\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0u7ksa_s.jl:13\nin expression starting at\
    \ /tmp/tmp0u7ksa_s.jl:13\n"
  stdout: ''
  timestamp: 1659979422
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = sum(numbers)\n    return sum / length(numbers)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0,\
    \ 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmp3c1cocnj.jl:15

    '
  stdout: "test set: Error During Test at /tmp/tmp3c1cocnj.jl:18\n  Test threw exception\n\
    \  Expression: candidate([1.0, 2.0]) == 0.5\n  UndefVarError: sum not defined\n\
    \  Stacktrace:\n   [1] mean_absolute_deviation(numbers::Vector{Float64})\n   \
    \  @ Main /tmp/tmp3c1cocnj.jl:10\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp3c1cocnj.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp3c1cocnj.jl:17\ntest set:\
    \ Error During Test at /tmp/tmp3c1cocnj.jl:19\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 3.0, 4.0]) == 1.0\n  UndefVarError: sum not defined\n \
    \ Stacktrace:\n   [1] mean_absolute_deviation(numbers::Vector{Float64})\n    \
    \ @ Main /tmp/tmp3c1cocnj.jl:10\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp3c1cocnj.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp3c1cocnj.jl:17\ntest set:\
    \ Error During Test at /tmp/tmp3c1cocnj.jl:20\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2\n  UndefVarError: sum not defined\n\
    \  Stacktrace:\n   [1] mean_absolute_deviation(numbers::Vector{Float64})\n   \
    \  @ Main /tmp/tmp3c1cocnj.jl:10\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp3c1cocnj.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp3c1cocnj.jl:17\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  timestamp: 1659979424
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n  n = length(numbers)\n  mad <- 0.0;\n  for i in 1:n\n    mad = mad + abs(numbers[i]\
    \ - mean(numbers))\n  end\n  mad / n\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = mean_absolute_deviation;\n\t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmps4rwaep8.jl:19

    '
  stdout: "test set: Error During Test at /tmp/tmps4rwaep8.jl:22\n  Test threw exception\n\
    \  Expression: candidate([1.0, 2.0]) == 0.5\n  UndefVarError: mad not defined\n\
    \  Stacktrace:\n   [1] mean_absolute_deviation(numbers::Vector{Float64})\n   \
    \  @ Main /tmp/tmps4rwaep8.jl:11\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmps4rwaep8.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmps4rwaep8.jl:21\ntest set:\
    \ Error During Test at /tmp/tmps4rwaep8.jl:23\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 3.0, 4.0]) == 1.0\n  UndefVarError: mad not defined\n \
    \ Stacktrace:\n   [1] mean_absolute_deviation(numbers::Vector{Float64})\n    \
    \ @ Main /tmp/tmps4rwaep8.jl:11\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmps4rwaep8.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmps4rwaep8.jl:21\ntest set:\
    \ Error During Test at /tmp/tmps4rwaep8.jl:24\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2\n  UndefVarError: mad not defined\n\
    \  Stacktrace:\n   [1] mean_absolute_deviation(numbers::Vector{Float64})\n   \
    \  @ Main /tmp/tmps4rwaep8.jl:11\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmps4rwaep8.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmps4rwaep8.jl:21\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  timestamp: 1659979424
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    if numbers == []\n        error(\"mean_absolute_deviation was called with\
    \ an empty list\")\n    end\n    numbers_mean = mean(numbers)\n    return mean(abs.(numbers\
    \ - numbers_mean))\nend\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmp_92gykuz.jl:18

    '
  stdout: "test set: Error During Test at /tmp/tmp_92gykuz.jl:21\n  Test threw exception\n\
    \  Expression: candidate([1.0, 2.0]) == 0.5\n  UndefVarError: mean not defined\n\
    \  Stacktrace:\n   [1] mean_absolute_deviation(numbers::Vector{Float64})\n   \
    \  @ Main /tmp/tmp_92gykuz.jl:13\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp_92gykuz.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp_92gykuz.jl:20\ntest set:\
    \ Error During Test at /tmp/tmp_92gykuz.jl:22\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 3.0, 4.0]) == 1.0\n  UndefVarError: mean not defined\n\
    \  Stacktrace:\n   [1] mean_absolute_deviation(numbers::Vector{Float64})\n   \
    \  @ Main /tmp/tmp_92gykuz.jl:13\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp_92gykuz.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp_92gykuz.jl:20\ntest set:\
    \ Error During Test at /tmp/tmp_92gykuz.jl:23\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2\n  UndefVarError: mean not defined\n\
    \  Stacktrace:\n   [1] mean_absolute_deviation(numbers::Vector{Float64})\n   \
    \  @ Main /tmp/tmp_92gykuz.jl:13\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp_92gykuz.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp_92gykuz.jl:20\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  timestamp: 1659979424
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for x in numbers\n        sum = sum + abs(x - sum / length(numbers))\n\
    \    end\n    return sum / length(numbers)\nend\n</cell>\n<code language=julia-1.2>\n\
    mean([1,2,3,4,5])\n</cell>\n<code language=julia-1.2>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0, 2.0])\
    \ == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpd787ht5t.jl:16\nin expression starting at\
    \ /tmp/tmpd787ht5t.jl:16\n"
  stdout: ''
  timestamp: 1659979422
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n   \n    return mean(map(abs, numbers - mean(numbers)))\nend\n</cell>\n<text>\n\
    Exercise: Find the mean absolute deviation for a vector of input numbers:\nusing\
    \ Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0,\
    \ 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp89eqmjk0.jl:13\nin expression starting at\
    \ /tmp/tmp89eqmjk0.jl:13\n"
  stdout: ''
  timestamp: 1659979422
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum_abs_deviation = 0\n    sum_mean = 0\n    for x in numbers\n      \
    \  sum_abs_deviation += math.abs(x - mean(x))\n        sum_mean += x\n    end\n\
    \    return sum_abs_deviation / length(numbers)\nend\n</cell>\n<text>\n4. Mean\
    \ Absolute Deviation on all vectors:\nThe function below takes in an array of\
    \ vectors and calculates the mean MAD between \nall the vectors. The vectors are\
    \ sorted by the vector's length.\nusing Test\n\n@testset begin\n\ncandidate =\
    \ mean_absolute_deviation;\n\t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1qnoijv0.jl:18\nin expression starting at\
    \ /tmp/tmp1qnoijv0.jl:18\n"
  stdout: ''
  timestamp: 1659979422
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    median = quantile(numbers, 0.5)\n    dev = map(x -> abs(x - median), numbers)\n\
    \    mean(dev)\nend\n</cell>\n<text>\nStatistical Tests\nWe now need to perform\
    \ some statistical tests to see if we can reject the null hypothesis that all\
    \ input numbers are drawn from the same distribution. We will perform some tests\
    \ on random samples of input numbers to see if the mean value is the same as that\
    \ of the mean of all input numbers.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = mean_absolute_deviation;\n\t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9_i6e4l4.jl:14\nin expression starting at\
    \ /tmp/tmp9_i6e4l4.jl:14\n"
  stdout: ''
  timestamp: 1659979424
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum((x - mean(numbers)) .* x, dims = 1)\nend\n</cell>\n<text>\n4.2.3 Mean\
    \ Absolute Deviation Function\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpl29wsqmd.jl:12\nin expression starting at\
    \ /tmp/tmpl29wsqmd.jl:12\n"
  stdout: ''
  timestamp: 1659979424
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    if length(numbers) <= 1\n        return NaN\n    end\nusing Test\n\n@testset\
    \ begin\n\ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0, 2.0])\
    \ == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmplwy8jkmt.jl:9\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmplwy8jkmt.jl:1\n\
    in expression starting at /tmp/tmplwy8jkmt.jl:1\n"
  stdout: ''
  timestamp: 1659979424
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n\tsum = 0.0\n\tfor n in numbers\n\t\tsum = sum + abs(n - mean(n))\n\tend\n\
    \tMAD = sum / length(numbers)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = mean_absolute_deviation;\n\t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpcv6m_nvv.jl:18

    '
  stdout: "test set: Error During Test at /tmp/tmpcv6m_nvv.jl:21\n  Test threw exception\n\
    \  Expression: candidate([1.0, 2.0]) == 0.5\n  UndefVarError: mean not defined\n\
    \  Stacktrace:\n   [1] mean_absolute_deviation(numbers::Vector{Float64})\n   \
    \  @ Main /tmp/tmpcv6m_nvv.jl:12\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpcv6m_nvv.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpcv6m_nvv.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpcv6m_nvv.jl:22\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 3.0, 4.0]) == 1.0\n  UndefVarError: mean not defined\n\
    \  Stacktrace:\n   [1] mean_absolute_deviation(numbers::Vector{Float64})\n   \
    \  @ Main /tmp/tmpcv6m_nvv.jl:12\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpcv6m_nvv.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpcv6m_nvv.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpcv6m_nvv.jl:23\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2\n  UndefVarError: mean not defined\n\
    \  Stacktrace:\n   [1] mean_absolute_deviation(numbers::Vector{Float64})\n   \
    \  @ Main /tmp/tmpcv6m_nvv.jl:12\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpcv6m_nvv.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpcv6m_nvv.jl:20\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  timestamp: 1659979425
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    if length(numbers) < 2\n        error(\"Invalid input\")\n    end\n  \
    \  d1 = numbers[1] - numbers[2]\n    return d1 / mean(numbers)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0,\
    \ 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpkg3lcalv.jl:18

    '
  stdout: "test set: Error During Test at /tmp/tmpkg3lcalv.jl:21\n  Test threw exception\n\
    \  Expression: candidate([1.0, 2.0]) == 0.5\n  UndefVarError: mean not defined\n\
    \  Stacktrace:\n   [1] mean_absolute_deviation(numbers::Vector{Float64})\n   \
    \  @ Main /tmp/tmpkg3lcalv.jl:14\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpkg3lcalv.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpkg3lcalv.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpkg3lcalv.jl:22\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 3.0, 4.0]) == 1.0\n  UndefVarError: mean not defined\n\
    \  Stacktrace:\n   [1] mean_absolute_deviation(numbers::Vector{Float64})\n   \
    \  @ Main /tmp/tmpkg3lcalv.jl:14\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpkg3lcalv.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpkg3lcalv.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpkg3lcalv.jl:23\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2\n  UndefVarError: mean not defined\n\
    \  Stacktrace:\n   [1] mean_absolute_deviation(numbers::Vector{Float64})\n   \
    \  @ Main /tmp/tmpkg3lcalv.jl:14\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpkg3lcalv.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpkg3lcalv.jl:20\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  timestamp: 1659979425
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum(abs  (x-mean(x))  for x \u2208 numbers)/length(numbers)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0,\
    \ 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: space before \"(\" not allowed in \"abs (\" at\
    \ /tmp/tmpm7mv2rw4.jl:10\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpm7mv2rw4.jl:10\n\
    in expression starting at /tmp/tmpm7mv2rw4.jl:10\n"
  stdout: ''
  timestamp: 1659979424
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n\"\"\"\n    return mean(abs2(numbers-mean(numbers)))\nend #function _mean_absolute_deviation\n\
    </code>\n<|/ a tags=julia,statistics dscore=4 |>\n<| c |>\nCan you be specific\
    \ how this is different from the already existing answer which used `statistics`\
    \ package?\n<|/ c |>\n<| a dscore=3 |>\nJust to mention that in Julia v0.3 and\
    \ later you can do this:\n<code>\njulia> mean(collect(1:20))\n6\nusing Test\n\n\
    @testset begin\n\ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0,\
    \ 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpx5dt7foz.jl:1\nin expression starting at /tmp/tmpx5dt7foz.jl:1\n"
  stdout: ''
  timestamp: 1659979424
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    \n\"\"\"\n    Calculate the root mean squared deviation from the mean\
    \ of a vector.\n    RMSD = square root of (sum of squares - mean of vector)\n\
    \    >>> rms_deviation([1.0, 2.0, 3.0])\n    0.7071067811865476\n\"\"\"\nusing\
    \ Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0,\
    \ 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp7538qqtp.jl:9\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp7538qqtp.jl:1\n\
    in expression starting at /tmp/tmp7538qqtp.jl:1\n"
  stdout: ''
  timestamp: 1659979424
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    # Find the mean and calculate the difference between each number and the\
    \ mean\n    mean := mean(numbers)\n    differences := filter(x->abs(x-mean) <\
    \ MAX, numbers)\n    return mean(differences)\nend\n</code>\n<|/ a tags=vector,mean,julia\
    \ |>\n<| c |>\nThat's a lot slower than mine, about as fast as `std(numbers)`\n\
    <|/ c |>\n<| a dscore=2 |>\nThis might be a good use case for the StatsTools.jl\
    \ package.\n<code>\njulia> using StatsTools\njulia> data = [1.0 2 3 4 5]\njulia>\
    \ mean(data)\n1.414214\njulia> stdev(data)\n0.707107\n</code>\n<|/ a tags=vector,mean,julia\
    \ |>\n<| c |>\nFor small number of elements (e.g. only 1) and a small number of\
    \ standard deviations you can get significant performance gain by calculating\
    \ `mean` and `stdev` separately.\n<|/ c |>\n<| a tags=vector,mean,julia |>\nI\
    \ have done this in Julia by converting the list into an array and find the mean\
    \ and variance using statistics.jl:\n<code>\njulia> using Statistics\njulia> data\
    \ = [1, 2, 3, 4, 5, 6]\njulia> mean(data)\n3.0\njulia> std(data)\n1.581139\n</code>\n\
    <|/ a dscore=2 |>\n<| a dscore=1 |>\n<code>\nusing Statistics, Statistics.Distributions\n\
    using Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0,\
    \ 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unsupported assignment operator \":=\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6ex2tpx8.jl:1\nin expression starting at /tmp/tmp6ex2tpx8.jl:1\n"
  stdout: ''
  timestamp: 1659979424
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    diff = numbers - mean(numbers)\n    ma = sum(abs2(diff))/length(numbers)\n\
    \    return ma\nend\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpoxstcges.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmpoxstcges.jl:19\n  Test threw exception\n\
    \  Expression: candidate([1.0, 2.0]) == 0.5\n  UndefVarError: mean not defined\n\
    \  Stacktrace:\n   [1] mean_absolute_deviation(numbers::Vector{Float64})\n   \
    \  @ Main /tmp/tmpoxstcges.jl:10\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpoxstcges.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpoxstcges.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpoxstcges.jl:20\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 3.0, 4.0]) == 1.0\n  UndefVarError: mean not defined\n\
    \  Stacktrace:\n   [1] mean_absolute_deviation(numbers::Vector{Float64})\n   \
    \  @ Main /tmp/tmpoxstcges.jl:10\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpoxstcges.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpoxstcges.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpoxstcges.jl:21\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2\n  UndefVarError: mean not defined\n\
    \  Stacktrace:\n   [1] mean_absolute_deviation(numbers::Vector{Float64})\n   \
    \  @ Main /tmp/tmpoxstcges.jl:10\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpoxstcges.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpoxstcges.jl:18\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  timestamp: 1659979425
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum::Float64 = 0\n    for number in numbers\n        sum += abs(number-mean(numbers))\n\
    \    end\n    return sum / length(numbers)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0, 2.0]) == 0.5)\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpv6080t89.jl:18

    '
  stdout: "test set: Error During Test at /tmp/tmpv6080t89.jl:21\n  Test threw exception\n\
    \  Expression: candidate([1.0, 2.0]) == 0.5\n  UndefVarError: mean not defined\n\
    \  Stacktrace:\n   [1] mean_absolute_deviation(numbers::Vector{Float64})\n   \
    \  @ Main /tmp/tmpv6080t89.jl:12\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpv6080t89.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpv6080t89.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpv6080t89.jl:22\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 3.0, 4.0]) == 1.0\n  UndefVarError: mean not defined\n\
    \  Stacktrace:\n   [1] mean_absolute_deviation(numbers::Vector{Float64})\n   \
    \  @ Main /tmp/tmpv6080t89.jl:12\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpv6080t89.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpv6080t89.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpv6080t89.jl:23\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2\n  UndefVarError: mean not defined\n\
    \  Stacktrace:\n   [1] mean_absolute_deviation(numbers::Vector{Float64})\n   \
    \  @ Main /tmp/tmpv6080t89.jl:12\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpv6080t89.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpv6080t89.jl:20\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  timestamp: 1659979425
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    diff = numbers[2:end] - numbers[1:end-1]\n    return ma(diff)\nend\n</cell>\n\
    <code language=julia-1.6>\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpytdd9xix.jl:13\nin expression starting at\
    \ /tmp/tmpytdd9xix.jl:13\n"
  stdout: ''
  timestamp: 1659979424
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum::Float64 = 0.0\n    for i in numbers do\n        sum += abs(i - mean)\n\
    \    end\n    return sum / length(numbers)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0, 2.0]) == 0.5)\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid \"do\" syntax\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpjiov98ai.jl:11\nin expression starting at /tmp/tmpjiov98ai.jl:11\n"
  stdout: ''
  timestamp: 1659979424
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n  mean1 = mean(numbers)\n  squared_deviations = map(x -> abs (x-mean1), numbers)\n\
    \  return mean(squared_deviations)\nend\n</cell>\n<text>\n4.5. Mean Square Error\n\
    For a given vector of input numbers, calculate Mean Square Error.\nMean Square\
    \ Error is calculated as mean( squared absolute differences ):\nMSLE = mean |\
    \ x - x_mean |^2\n    >>> mean_sqaure_error([1.0, 2.0, 3.0, 4.0])\n    1.5\n \
    \   \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: space before \"(\" not allowed in \"abs (\" at\
    \ /tmp/tmpcw_mbvhe.jl:11\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpcw_mbvhe.jl:11\n\
    in expression starting at /tmp/tmpcw_mbvhe.jl:11\n"
  stdout: ''
  timestamp: 1659979424
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    n = length(numbers)\n    mean = sum(numbers) / n\n    deviations = map(deviation,\
    \ numbers)\n    return sum(deviations) / n\nend\n</code>\nI guess you can do this\
    \ in a few lines of python code but I just wanted to give a Julia solution. \n\
    The benefit of Julia is that it will take care of vectorization and broadcasting\
    \ automatically for you.\nThe Julia code below is the same as the python code\
    \ above. \n<code>\nusing Statistics \n# using LinearAlgebra\nusing Test\n\n@testset\
    \ begin\n\ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0, 2.0])\
    \ == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4evby6tt.jl:15\nin expression starting at\
    \ /tmp/tmp4evby6tt.jl:15\n"
  stdout: ''
  timestamp: 1659979424
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    return mean(abs2, numbers)\nend\n</cell>\n<code language=julia-0.6>\n\
    @testset \"Mean Absolute Deviation\" begin\n    numbers = Vector{Float64}(undef,\
    \ 5)\n    numbers[1] = 1\n    numbers[2] = 2\n    numbers[3] = 3\n    numbers[4]\
    \ = 4\n    numbers[5] = 3\n    \n    @test mean_absolute_deviation(numbers) ==\
    \ 3.0\n    @test mean_absolute_deviation([1,2,3,4,5]) == 3.0\nend\n</cell>\n<text>\n\
    The function mean returns the mean of a vector of numbers.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0, 2.0])\
    \ == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0_nnl4_9.jl:12\nin expression starting at\
    \ /tmp/tmp0_nnl4_9.jl:12\n"
  stdout: ''
  timestamp: 1659979424
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    mean_val::Float64 = mean(numbers)\n    return sum([abs(x - mean_val) for\
    \ x in numbers]) / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ (MAD) is a common metric to evaluate outliers in a dataset. It measures how\
    \ far a value is from the mean (average), or the expected value from a population\
    \ mean.\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9jimpug8.jl:13\nin expression starting at\
    \ /tmp/tmp9jimpug8.jl:13\n"
  stdout: ''
  timestamp: 1659979424
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    absdiffs = abs.(numbers - mean(numbers))\n    return mean(absdiffs)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\t\
    @test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0]) ==\
    \ 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpux5qrrti.jl:15

    '
  stdout: "test set: Error During Test at /tmp/tmpux5qrrti.jl:18\n  Test threw exception\n\
    \  Expression: candidate([1.0, 2.0]) == 0.5\n  UndefVarError: mean not defined\n\
    \  Stacktrace:\n   [1] mean_absolute_deviation(numbers::Vector{Float64})\n   \
    \  @ Main /tmp/tmpux5qrrti.jl:10\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpux5qrrti.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpux5qrrti.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpux5qrrti.jl:19\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 3.0, 4.0]) == 1.0\n  UndefVarError: mean not defined\n\
    \  Stacktrace:\n   [1] mean_absolute_deviation(numbers::Vector{Float64})\n   \
    \  @ Main /tmp/tmpux5qrrti.jl:10\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpux5qrrti.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpux5qrrti.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpux5qrrti.jl:20\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2\n  UndefVarError: mean not defined\n\
    \  Stacktrace:\n   [1] mean_absolute_deviation(numbers::Vector{Float64})\n   \
    \  @ Main /tmp/tmpux5qrrti.jl:10\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpux5qrrti.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpux5qrrti.jl:17\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  timestamp: 1659979427
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    mean_ = mean(numbers)\n    return mean(map(abs, numbers-mean_))\nusing\
    \ Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0,\
    \ 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpi_2td0i3.jl:9\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpi_2td0i3.jl:1\n\
    in expression starting at /tmp/tmpi_2td0i3.jl:1\n"
  stdout: ''
  timestamp: 1659979425
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    deviations = numbers .- mean(numbers)\n    absolute_deviations = map(fabs(deviations),\
    \ numbers)\n    mad = reduce(+, absolute_deviations)\n    return mad \nend\n</cell>\n\
    <text>\nTests\nLet's test our implementation of Mean Absolute Deviation:\nusing\
    \ Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0,\
    \ 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpio0t6bw0.jl:15\nin expression starting at\
    \ /tmp/tmpio0t6bw0.jl:15\n"
  stdout: ''
  timestamp: 1659979425
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    return (sum(abs2.(numbers - mean(numbers))) /  length(numbers)) \nend\
    \ \n</cell>\n<text>\nMean Absolute Deviation - Part 2\nusing Test\n\n@testset\
    \ begin\n\ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0, 2.0])\
    \ == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppyqkgrzd.jl:12\nin expression starting at\
    \ /tmp/tmppyqkgrzd.jl:12\n"
  stdout: ''
  timestamp: 1659979425
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    mean(absdiff(numbers))\nend\n</cell>\n<text>\nThe mean_absolute_deviation\
    \ function works on any type of Vector of numbers.\nusing Test\n\n@testset begin\n\
    \ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0, 2.0]) == 0.5)\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpla7nwksw.jl:12\nin expression starting at\
    \ /tmp/tmpla7nwksw.jl:12\n"
  stdout: ''
  timestamp: 1659979425
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n  mean(mean(abs(numbers - mean(numbers))))\nend\n</cell>\n<text>\nLet's plot\
    \ some data to see the variance this measures over:\nusing Test\n\n@testset begin\n\
    \ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0, 2.0]) == 0.5)\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptj_8ti6x.jl:12\nin expression starting at\
    \ /tmp/tmptj_8ti6x.jl:12\n"
  stdout: ''
  timestamp: 1659979425
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    \n    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n\
    \    end\n    return sum / length(numbers)\nend\n</cell>\n<code language=julia-1.4>\n\
    mean_absolute_deviation(numbers)\n</cell>\n<text>\nIn Julia there are many built-in\
    \ math functions including mean, median, min, max, abs, sin, cos, sqrt, and even\
    \ the pow function. Here we use the median function to calculate the value of\
    \ a number as the middle value in a vector or list. Let's see how it works.\n\
    using Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0,\
    \ 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpynbuwj1r.jl:17\nin expression starting at\
    \ /tmp/tmpynbuwj1r.jl:17\n"
  stdout: ''
  timestamp: 1659979425
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    average = mean(numbers)\n    sum_of_squares = 0\n    for i in numbers\n\
    \        sum_of_squares = sum_of_squares + i*i\n    end\n    return (sum_of_squares\
    \ - average*average)/ length(numbers)\nend\n</cell>\n<code language=julia-1.3>\n\
    @assert mean_absolute_deviation([1,2,3]) == (sqrt(3)/2)\n</cell>\n<text>\nPart\
    \ 6: Descriptive Statistics for Routines and Other Containers\nWe have just seen,\
    \ how our functions work on vectors. This section will help us understand what\
    \ these functions do on other containers, like lists and matrices. It is best\
    \ to look at the official documentation, as this is highly detailed and explains\
    \ many subtleties.\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9vp5vpuk.jl:17\nin expression starting at\
    \ /tmp/tmp9vp5vpuk.jl:17\n"
  stdout: ''
  timestamp: 1659979425
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    return sqrt(mean(absdiff(numbers, mean(numbers))))\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0,\
    \ 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpdlzx7vui.jl:14

    '
  stdout: "test set: Error During Test at /tmp/tmpdlzx7vui.jl:17\n  Test threw exception\n\
    \  Expression: candidate([1.0, 2.0]) == 0.5\n  UndefVarError: mean not defined\n\
    \  Stacktrace:\n   [1] mean_absolute_deviation(numbers::Vector{Float64})\n   \
    \  @ Main /tmp/tmpdlzx7vui.jl:10\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpdlzx7vui.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpdlzx7vui.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpdlzx7vui.jl:18\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 3.0, 4.0]) == 1.0\n  UndefVarError: mean not defined\n\
    \  Stacktrace:\n   [1] mean_absolute_deviation(numbers::Vector{Float64})\n   \
    \  @ Main /tmp/tmpdlzx7vui.jl:10\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpdlzx7vui.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpdlzx7vui.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpdlzx7vui.jl:19\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2\n  UndefVarError: mean not defined\n\
    \  Stacktrace:\n   [1] mean_absolute_deviation(numbers::Vector{Float64})\n   \
    \  @ Main /tmp/tmpdlzx7vui.jl:10\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpdlzx7vui.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpdlzx7vui.jl:16\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  timestamp: 1659979427
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n\"\"\"\nCalculate the mean absolute deviation (MAD) of a given vector of input\
    \ numbers\n\"\"\"\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp8dsgkltg.jl:9\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp8dsgkltg.jl:1\n\
    in expression starting at /tmp/tmp8dsgkltg.jl:1\n"
  stdout: ''
  timestamp: 1659979425
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    mean_x = mean(numbers)\n    return mean(map (abs2, numbers - mean_x))\
    \ \nend\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: space before \"(\" not allowed in \"map (\" at\
    \ /tmp/tmp6b0934dk.jl:11\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp6b0934dk.jl:11\n\
    in expression starting at /tmp/tmp6b0934dk.jl:11\n"
  stdout: ''
  timestamp: 1659979425
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    MAD = zeros(length(numbers))\n    for i in eachindex(numbers)\n      \
    \  MAD[i] = mean((numbers[i] - mean(numbers)) / mean(numbers))\n    end\n    return\
    \ MAD\nend\n</cell>\n<text>\nMean Absolute Deviation Function\nusing Test\n\n\
    @testset begin\n\ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0,\
    \ 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpn_bzvd2v.jl:16\nin expression starting at\
    \ /tmp/tmpn_bzvd2v.jl:16\n"
  stdout: ''
  timestamp: 1659979426
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n   \
    \ return sum/length(numbers)\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ mean_absolute_deviation;\n\t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpedwopkig.jl:9\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpedwopkig.jl:1\n\
    in expression starting at /tmp/tmpedwopkig.jl:1\n"
  stdout: ''
  timestamp: 1659979425
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    mean_of_the_numbers = mean(numbers)\n    deviations = [abs(number - mean_of_the_numbers)\
    \ for number in numbers]\n    return mean(deviations)\nusing Test\n\n@testset\
    \ begin\n\ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0, 2.0])\
    \ == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpz6c6wq1b.jl:9\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpz6c6wq1b.jl:1\n\
    in expression starting at /tmp/tmpz6c6wq1b.jl:1\n"
  stdout: ''
  timestamp: 1659979426
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    # Compute the mean\n    mean = mean(numbers)\n    # Compute the deviation\n\
    \    deviation = map(x -> abs (x-mean), numbers)\n    # Return the average\n \
    \   mean(deviation)\nend\n</cell>\n<text>\nExercise 1: Mean Absolute Deviation\n\
    Write a function that takes an array as an argument and returns the mean absolute\
    \ deviation\nof the values in the array.\nFor a vector of input numbers, calculate\
    \ MAD.\nFor example, if the input vector is [1, 2, 3, 4], the output should be\
    \ 3.0.\nThe function should ignore non-numeric types and return a NaN instead.\n\
    using Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0,\
    \ 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: space before \"(\" not allowed in \"abs (\" at\
    \ /tmp/tmpfftifcgg.jl:13\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpfftifcgg.jl:13\n\
    in expression starting at /tmp/tmpfftifcgg.jl:13\n"
  stdout: ''
  timestamp: 1659979426
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    absdiff(numbers, mean(numbers))\nend\n</cell>\n<text>\nWe will also need\
    \ mean squared deviation function:\nusing Test\n\n@testset begin\n\ncandidate\
    \ = mean_absolute_deviation;\n\t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpp0tyya94.jl:12\nin expression starting at\
    \ /tmp/tmpp0tyya94.jl:12\n"
  stdout: ''
  timestamp: 1659979425
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    \n    \n    sum_of_squared_differences = 0.0 \n    for x in numbers \n\
    \        sum_of_squared_differences += (x - mean(x))^2 \n    return sqrt(sum_of_squared_differences/length(numbers))\
    \ \nend \n</cell>\n<code language=julia-0.5>\n## Practice: \n# Write a function\
    \ to calculate the median absolute deviation of a given vector of input numbers.\n\
    using Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0,\
    \ 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0uxwft7i.jl:17\nin expression starting at\
    \ /tmp/tmp0uxwft7i.jl:17\n"
  stdout: ''
  timestamp: 1659979426
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    mean_number = mean(numbers)\n    differences = numbers - mean_number\n\
    \    absolute_differences = map(f->abs(f), differences)\n    mad = mean(absolute_differences)\n\
    \    return mad \nend\n</cell>\n<code language=julia-1.3>\nusing Random\nusing\
    \ Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0,\
    \ 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgd9or_lk.jl:16\nin expression starting at\
    \ /tmp/tmpgd9or_lk.jl:16\n"
  stdout: ''
  timestamp: 1659979426
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n  return mean(abs.(numbers - mean(numbers)))\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0, 2.0])\
    \ == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpkw81py0g.jl:14

    '
  stdout: "test set: Error During Test at /tmp/tmpkw81py0g.jl:17\n  Test threw exception\n\
    \  Expression: candidate([1.0, 2.0]) == 0.5\n  UndefVarError: mean not defined\n\
    \  Stacktrace:\n   [1] mean_absolute_deviation(numbers::Vector{Float64})\n   \
    \  @ Main /tmp/tmpkw81py0g.jl:10\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpkw81py0g.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpkw81py0g.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpkw81py0g.jl:18\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 3.0, 4.0]) == 1.0\n  UndefVarError: mean not defined\n\
    \  Stacktrace:\n   [1] mean_absolute_deviation(numbers::Vector{Float64})\n   \
    \  @ Main /tmp/tmpkw81py0g.jl:10\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpkw81py0g.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpkw81py0g.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpkw81py0g.jl:19\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2\n  UndefVarError: mean not defined\n\
    \  Stacktrace:\n   [1] mean_absolute_deviation(numbers::Vector{Float64})\n   \
    \  @ Main /tmp/tmpkw81py0g.jl:10\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpkw81py0g.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpkw81py0g.jl:16\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  timestamp: 1659979374
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    median(numbers)\n    numbers = [abs(i-median(numbers)) for i in numbers]\n\
    \    mean(numbers)\nend\n</cell>\n<text>\nExercise: What is the value of this\
    \ function for a vector of length 3? How would you modify it if you were instead\
    \ given a vector of length 4?\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpk7pytheo.jl:14\nin expression starting at\
    \ /tmp/tmpk7pytheo.jl:14\n"
  stdout: ''
  timestamp: 1659979426
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    return mean(map(abs, numbers))\nend\n</cell>\n<code language=julia-1.3>\n\
    \"\"\"\n    median_absolute_deviation\nusing Test\n\n@testset begin\n\ncandidate\
    \ = mean_absolute_deviation;\n\t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzdivmhl_.jl:12\nin expression starting at\
    \ /tmp/tmpzdivmhl_.jl:12\n"
  stdout: ''
  timestamp: 1659979427
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n  m = (sum(numbers) + mean(numbers)) / 2\n  mad = 0\n  for n in numbers\n\
    \      mad += abs(n - m) \n  end\n  mad /= length(numbers)\n  return mad\nend\n\
    using Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0,\
    \ 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpj8r0d748.jl:20

    '
  stdout: "test set: Error During Test at /tmp/tmpj8r0d748.jl:23\n  Test threw exception\n\
    \  Expression: candidate([1.0, 2.0]) == 0.5\n  UndefVarError: mean not defined\n\
    \  Stacktrace:\n   [1] mean_absolute_deviation(numbers::Vector{Float64})\n   \
    \  @ Main /tmp/tmpj8r0d748.jl:10\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpj8r0d748.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpj8r0d748.jl:22\ntest set:\
    \ Error During Test at /tmp/tmpj8r0d748.jl:24\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 3.0, 4.0]) == 1.0\n  UndefVarError: mean not defined\n\
    \  Stacktrace:\n   [1] mean_absolute_deviation(numbers::Vector{Float64})\n   \
    \  @ Main /tmp/tmpj8r0d748.jl:10\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpj8r0d748.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpj8r0d748.jl:22\ntest set:\
    \ Error During Test at /tmp/tmpj8r0d748.jl:25\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2\n  UndefVarError: mean not defined\n\
    \  Stacktrace:\n   [1] mean_absolute_deviation(numbers::Vector{Float64})\n   \
    \  @ Main /tmp/tmpj8r0d748.jl:10\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpj8r0d748.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpj8r0d748.jl:22\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  timestamp: 1659979429
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    import numpy as np\n    return np.mean(np.fabs(numbers - np.mean(numbers)))\n\
    using Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0,\
    \ 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp4a9ke7os.jl:9\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp4a9ke7os.jl:1\n\
    in expression starting at /tmp/tmp4a9ke7os.jl:1\n"
  stdout: ''
  timestamp: 1659979427
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    return mean(abs.(numbers)) \nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = mean_absolute_deviation;\n\t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpojge1n5z.jl:14

    '
  stdout: "test set: Error During Test at /tmp/tmpojge1n5z.jl:17\n  Test threw exception\n\
    \  Expression: candidate([1.0, 2.0]) == 0.5\n  UndefVarError: mean not defined\n\
    \  Stacktrace:\n   [1] mean_absolute_deviation(numbers::Vector{Float64})\n   \
    \  @ Main /tmp/tmpojge1n5z.jl:10\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpojge1n5z.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpojge1n5z.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpojge1n5z.jl:18\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 3.0, 4.0]) == 1.0\n  UndefVarError: mean not defined\n\
    \  Stacktrace:\n   [1] mean_absolute_deviation(numbers::Vector{Float64})\n   \
    \  @ Main /tmp/tmpojge1n5z.jl:10\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpojge1n5z.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpojge1n5z.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpojge1n5z.jl:19\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2\n  UndefVarError: mean not defined\n\
    \  Stacktrace:\n   [1] mean_absolute_deviation(numbers::Vector{Float64})\n   \
    \  @ Main /tmp/tmpojge1n5z.jl:10\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpojge1n5z.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpojge1n5z.jl:16\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  timestamp: 1659979429
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    return sqrt(mean(absdiff(numbers, mean(numbers))))\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0,\
    \ 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpdlzx7vui.jl:14

    '
  stdout: "test set: Error During Test at /tmp/tmpdlzx7vui.jl:17\n  Test threw exception\n\
    \  Expression: candidate([1.0, 2.0]) == 0.5\n  UndefVarError: mean not defined\n\
    \  Stacktrace:\n   [1] mean_absolute_deviation(numbers::Vector{Float64})\n   \
    \  @ Main /tmp/tmpdlzx7vui.jl:10\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpdlzx7vui.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpdlzx7vui.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpdlzx7vui.jl:18\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 3.0, 4.0]) == 1.0\n  UndefVarError: mean not defined\n\
    \  Stacktrace:\n   [1] mean_absolute_deviation(numbers::Vector{Float64})\n   \
    \  @ Main /tmp/tmpdlzx7vui.jl:10\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpdlzx7vui.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpdlzx7vui.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpdlzx7vui.jl:19\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2\n  UndefVarError: mean not defined\n\
    \  Stacktrace:\n   [1] mean_absolute_deviation(numbers::Vector{Float64})\n   \
    \  @ Main /tmp/tmpdlzx7vui.jl:10\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpdlzx7vui.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpdlzx7vui.jl:16\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  timestamp: 1659979427
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    return mean(\n        map(\n            abs\n            , numbers\n \
    \       )\n    ) \nend\n</code>\n<|/ a |>\n<| a dscore=4 tags=julia |>\nThere\
    \ has got to be a better way. Anybody know about a package that takes care of\
    \ this? Pretty much all standard statistics libraries in Julia are not suited\
    \ for this.\nI ended up writing a package for this.\nhttps://github.com/kristopherrschner/StatisticsFunctions\n\
    <|/ a |>\n<| a tags=julia |>\nThis might be too late, but there is a simpler way\
    \ to do this using StatsBase.jl. \n<code>\njulia> using StatsBase\nusing Test\n\
    \n@testset begin\n\ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0,\
    \ 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpim7_xitf.jl:17\nin expression starting at\
    \ /tmp/tmpim7_xitf.jl:17\n"
  stdout: ''
  timestamp: 1659979427
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    n = length(numbers)\n    sum = 0.0\n    for x in numbers\n        sum\
    \ += abs(x - mean(x))\n    end\n    sum / (n-1.0)\nend\n</cell>\n<code language=julia-0.5>\n\
    using DataFrames\n</cell>\n<code language=julia-0.5>\nmean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n</cell>\n<code language=julia-0.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0, 2.0])\
    \ == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpz6z2wpit.jl:17\nin expression starting at\
    \ /tmp/tmpz6z2wpit.jl:17\n"
  stdout: ''
  timestamp: 1659979427
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    return (map(abs, numbers) - mean(numbers)) .^ 2 \nend \nusing Test\n\n\
    @testset begin\n\ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0,\
    \ 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpmukkdd80.jl:14

    '
  stdout: "test set: Error During Test at /tmp/tmpmukkdd80.jl:17\n  Test threw exception\n\
    \  Expression: candidate([1.0, 2.0]) == 0.5\n  UndefVarError: mean not defined\n\
    \  Stacktrace:\n   [1] mean_absolute_deviation(numbers::Vector{Float64})\n   \
    \  @ Main /tmp/tmpmukkdd80.jl:10\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpmukkdd80.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpmukkdd80.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpmukkdd80.jl:18\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 3.0, 4.0]) == 1.0\n  UndefVarError: mean not defined\n\
    \  Stacktrace:\n   [1] mean_absolute_deviation(numbers::Vector{Float64})\n   \
    \  @ Main /tmp/tmpmukkdd80.jl:10\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpmukkdd80.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpmukkdd80.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpmukkdd80.jl:19\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2\n  UndefVarError: mean not defined\n\
    \  Stacktrace:\n   [1] mean_absolute_deviation(numbers::Vector{Float64})\n   \
    \  @ Main /tmp/tmpmukkdd80.jl:10\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpmukkdd80.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpmukkdd80.jl:16\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  timestamp: 1659979429
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    avg := mean(numbers)\n    squares := map(numbers, (x) -> pow(x, 2))\n\
    \    square_avg := sum(squares) / length(numbers)\n    square_diff := map(squares,\
    \ (x) -> x - square_avg)\n    mad_avg := sum(map(square_diff, abs) / length(numbers))\
    \ \n    mad_avg \nend\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unsupported assignment operator \":=\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpda_j5w48.jl:1\nin expression starting at /tmp/tmpda_j5w48.jl:1\n"
  stdout: ''
  timestamp: 1659979427
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    # calculate the mean and standard deviation of the input numbers\n   \
    \ number_mean = mean(numbers)\n    number_std = std(numbers)\n    # calculate\
    \ the MAD\n    return mean(map((number-number_mean).abs, numbers))\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0,\
    \ 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmp0etm37xy.jl:18

    '
  stdout: "test set: Error During Test at /tmp/tmp0etm37xy.jl:21\n  Test threw exception\n\
    \  Expression: candidate([1.0, 2.0]) == 0.5\n  UndefVarError: mean not defined\n\
    \  Stacktrace:\n   [1] mean_absolute_deviation(numbers::Vector{Float64})\n   \
    \  @ Main /tmp/tmp0etm37xy.jl:11\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp0etm37xy.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp0etm37xy.jl:20\ntest set:\
    \ Error During Test at /tmp/tmp0etm37xy.jl:22\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 3.0, 4.0]) == 1.0\n  UndefVarError: mean not defined\n\
    \  Stacktrace:\n   [1] mean_absolute_deviation(numbers::Vector{Float64})\n   \
    \  @ Main /tmp/tmp0etm37xy.jl:11\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp0etm37xy.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp0etm37xy.jl:20\ntest set:\
    \ Error During Test at /tmp/tmp0etm37xy.jl:23\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2\n  UndefVarError: mean not defined\n\
    \  Stacktrace:\n   [1] mean_absolute_deviation(numbers::Vector{Float64})\n   \
    \  @ Main /tmp/tmp0etm37xy.jl:11\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp0etm37xy.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp0etm37xy.jl:20\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  timestamp: 1659979429
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum_of_squares = 0.\n    for i in numbers\n        sum_of_squares += math.pow((i\
    \ - mean(numbers)), 2)\n    return sqrt(sum_of_squares) / length(numbers)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0,\
    \ 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp64igp69d.jl:9\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp64igp69d.jl:1\n\
    in expression starting at /tmp/tmp64igp69d.jl:1\n"
  stdout: ''
  timestamp: 1659979427
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    return (sum([abs(i-mean_number(numbers)) for i in numbers])::Float64 /\
    \ length(numbers))\nend\n</cell>\n<text>\nPart 3: Regression Analysis\nusing Test\n\
    \n@testset begin\n\ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0,\
    \ 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpq91h_5ra.jl:12\nin expression starting at\
    \ /tmp/tmpq91h_5ra.jl:12\n"
  stdout: ''
  timestamp: 1659979427
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    mean = sum(numbers)\n    diff = numbers - mean\n    return mean(abs.(diff))\n\
    end\n</code>\n<|/ a dscore=2 tags=julia,math,mean,vector,stddev |>\n<| a |>\n\
    The question asks for the standard deviation of a vector (i.e., sqrt(sum((x-mean(x))^2)/length(x)))\
    \ but the answer given by does not take into account the degrees of freedom. Here\
    \ is a function that accounts for this.\n<code>\nusing Statistics\nusing Test\n\
    \n@testset begin\n\ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0,\
    \ 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2ko4c8jl.jl:14\nin expression starting at\
    \ /tmp/tmp2ko4c8jl.jl:14\n"
  stdout: ''
  timestamp: 1659979427
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n\tsum = sum(numbers)\n\tnn = length(numbers)\n\tmean = sum / nn\n\tmad = 0.0\n\
    \tfor number in numbers\n\t\tmad += abs(number - mean)\n\tend\n\treturn mad\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\t\
    @test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0]) ==\
    \ 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmp6pbrmj23.jl:21

    '
  stdout: "test set: Error During Test at /tmp/tmp6pbrmj23.jl:24\n  Test threw exception\n\
    \  Expression: candidate([1.0, 2.0]) == 0.5\n  UndefVarError: sum not defined\n\
    \  Stacktrace:\n   [1] mean_absolute_deviation(numbers::Vector{Float64})\n   \
    \  @ Main /tmp/tmp6pbrmj23.jl:10\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp6pbrmj23.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp6pbrmj23.jl:23\ntest set:\
    \ Error During Test at /tmp/tmp6pbrmj23.jl:25\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 3.0, 4.0]) == 1.0\n  UndefVarError: sum not defined\n \
    \ Stacktrace:\n   [1] mean_absolute_deviation(numbers::Vector{Float64})\n    \
    \ @ Main /tmp/tmp6pbrmj23.jl:10\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp6pbrmj23.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp6pbrmj23.jl:23\ntest set:\
    \ Error During Test at /tmp/tmp6pbrmj23.jl:26\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2\n  UndefVarError: sum not defined\n\
    \  Stacktrace:\n   [1] mean_absolute_deviation(numbers::Vector{Float64})\n   \
    \  @ Main /tmp/tmp6pbrmj23.jl:10\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp6pbrmj23.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp6pbrmj23.jl:23\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  timestamp: 1659979429
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0\n    for n in numbers\n        sum += abs(n - mean(n))\n    end\n\
    \    sum / length(numbers)\nend\n</cell>\n<code language=julia-1.2>\nusing Test\n\
    \n@testset begin\n\ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0,\
    \ 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpr009f4bc.jl:16\nin expression starting at\
    \ /tmp/tmpr009f4bc.jl:16\n"
  stdout: ''
  timestamp: 1659979427
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum::Float64 = 0.0\n    for i in numbers\n        sum += abs(i - mean(i))\n\
    \    return sum/length(numbers)\nend\n</cell>\n<text>\nTest the function with\
    \ some sample data:\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp172rl07f.jl:15\nin expression starting at\
    \ /tmp/tmp172rl07f.jl:15\n"
  stdout: ''
  timestamp: 1659979427
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    abs_vals = map(abs, numbers)\n    mean_val = mean(abs_vals)\n    return\
    \ mean(map(abs, filter(e -> e < mean_val, numbers))) \nend\n</cell>\n<code language=julia-1.0>\n\
    @doc mean_absolute_deviation\n</cell>\n<code language=julia-1.0>\n@code_native\
    \ mean_absolute_deviation\n</cell>\n<text>\nTo calculate the variance (standard\
    \ deviation), we need the squared deviation from the mean:\nusing Test\n\n@testset\
    \ begin\n\ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0, 2.0])\
    \ == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgmqxm1xj.jl:14\nin expression starting at\
    \ /tmp/tmpgmqxm1xj.jl:14\n"
  stdout: ''
  timestamp: 1659979427
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    \"\"\"\n    Args:\n        numbers (Vector[Float64]): Vector of input\
    \ numbers\n    Returns:\n        Float64: Mean Absolute Deviation around the mean\
    \ of the input numbers\n    \"\"\"\n    return mean(abs.(numbers - mean(numbers)))\n\
    end \nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\t\
    @test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0]) ==\
    \ 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpy8k5dn1i.jl:20

    '
  stdout: "test set: Error During Test at /tmp/tmpy8k5dn1i.jl:23\n  Test threw exception\n\
    \  Expression: candidate([1.0, 2.0]) == 0.5\n  UndefVarError: mean not defined\n\
    \  Stacktrace:\n   [1] mean_absolute_deviation(numbers::Vector{Float64})\n   \
    \  @ Main /tmp/tmpy8k5dn1i.jl:16\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpy8k5dn1i.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpy8k5dn1i.jl:22\ntest set:\
    \ Error During Test at /tmp/tmpy8k5dn1i.jl:24\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 3.0, 4.0]) == 1.0\n  UndefVarError: mean not defined\n\
    \  Stacktrace:\n   [1] mean_absolute_deviation(numbers::Vector{Float64})\n   \
    \  @ Main /tmp/tmpy8k5dn1i.jl:16\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpy8k5dn1i.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpy8k5dn1i.jl:22\ntest set:\
    \ Error During Test at /tmp/tmpy8k5dn1i.jl:25\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2\n  UndefVarError: mean not defined\n\
    \  Stacktrace:\n   [1] mean_absolute_deviation(numbers::Vector{Float64})\n   \
    \  @ Main /tmp/tmpy8k5dn1i.jl:16\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpy8k5dn1i.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpy8k5dn1i.jl:22\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  timestamp: 1659979429
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n  length = length(numbers)\n  mean = mean(numbers)\n  sum = 0.0\n  for n in\
    \ numbers\n    sum += abs(n - mean)\n  end\n  return sum / length\nend\n</cell>\n\
    <text>\nThis function is a bit more efficient than the built-in mean() function,\
    \ as it does not need to calculate the mean of all numbers. However, it is much\
    \ more inefficient for large vectors.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = mean_absolute_deviation;\n\t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphzfhsfsv.jl:18\nin expression starting at\
    \ /tmp/tmphzfhsfsv.jl:18\n"
  stdout: ''
  timestamp: 1659979427
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n\t\n\tsum = 0\n\tfor (el) in numbers \n\t\tsum = sum + (el-mean(numbers))^2\
    \ \n\tend\n\treturn sum/length(numbers)\nend\nusing Test\n\n@testset begin\n\n\
    candidate = mean_absolute_deviation;\n\t@test(candidate([1.0, 2.0]) == 0.5)\n\t\
    @test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0,\
    \ 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpuax65klt.jl:19

    '
  stdout: "test set: Error During Test at /tmp/tmpuax65klt.jl:22\n  Test threw exception\n\
    \  Expression: candidate([1.0, 2.0]) == 0.5\n  UndefVarError: mean not defined\n\
    \  Stacktrace:\n   [1] mean_absolute_deviation(numbers::Vector{Float64})\n   \
    \  @ Main /tmp/tmpuax65klt.jl:13\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpuax65klt.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpuax65klt.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpuax65klt.jl:23\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 3.0, 4.0]) == 1.0\n  UndefVarError: mean not defined\n\
    \  Stacktrace:\n   [1] mean_absolute_deviation(numbers::Vector{Float64})\n   \
    \  @ Main /tmp/tmpuax65klt.jl:13\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpuax65klt.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpuax65klt.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpuax65klt.jl:24\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2\n  UndefVarError: mean not defined\n\
    \  Stacktrace:\n   [1] mean_absolute_deviation(numbers::Vector{Float64})\n   \
    \  @ Main /tmp/tmpuax65klt.jl:13\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpuax65klt.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpuax65klt.jl:21\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  timestamp: 1659979429
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n  x_mean = mean(numbers)\n  return abs(numbers .- x_mean)\nend\n</cell>\n\
    <code language=julia-1.5>\n@time mean_absolute_deviation([1.0 for _ in 1:10000])\n\
    </cell>\n<text>\n1.3 Find outliers\nIn the previous section we calculated the\
    \ Mean Absolute Deviation for a vector of numbers. \nThis gives us a good idea\
    \ of what we expect this dataset to look like. \nTo find outliers, we could use\
    \ other methods. \nOne such method is the Interquartile range (IQR) which we calculate\
    \ by\n$$ IQR = Q3 - Q1 $$\nwhere Q1, Q3 are the quartiles of this dataset. \n\
    We can then plot this and see where it starts to get bad.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0, 2.0])\
    \ == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpn_mj07k9.jl:13\nin expression starting at\
    \ /tmp/tmpn_mj07k9.jl:13\n"
  stdout: ''
  timestamp: 1659979427
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n \n  return(sum(abs2,numbers)/length(numbers))\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0, 2.0])\
    \ == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpa338y_hs.jl:15

    '
  stdout: "test set: Test Failed at /tmp/tmpa338y_hs.jl:18\n  Expression: candidate([1.0,\
    \ 2.0]) == 0.5\n   Evaluated: 2.5 == 0.5\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpa338y_hs.jl:18 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpa338y_hs.jl:17\ntest set: Test Failed at /tmp/tmpa338y_hs.jl:19\n\
    \  Expression: candidate([1.0, 2.0, 3.0, 4.0]) == 1.0\n   Evaluated: 7.5 == 1.0\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpa338y_hs.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpa338y_hs.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpa338y_hs.jl:20\n  Expression: candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2\n   Evaluated: 11.0 == 1.2\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpa338y_hs.jl:20 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpa338y_hs.jl:17\nTest Summary: | Fail  Total\n\
    test set      |    3      3\n"
  timestamp: 1659979429
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for i in numbers:\n        sum = sum + abs(i - mean)\n\
    \    return sum/length(numbers)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = mean_absolute_deviation;\n\t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmn2faeiu.jl:12\nin expression starting at\
    \ /tmp/tmpmn2faeiu.jl:12\n"
  stdout: ''
  timestamp: 1659979429
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum=0\n    for x in numbers \n        sum += abs(x - mean(x))\n    end\n\
    \    return sum/length(numbers)\nend\n</cell>\n<text>\nLet's now calculate the\
    \ MAD for a few different inputs, and see what result we get back.\nusing Test\n\
    \n@testset begin\n\ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0,\
    \ 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0vvf9ho2.jl:16\nin expression starting at\
    \ /tmp/tmp0vvf9ho2.jl:16\n"
  stdout: ''
  timestamp: 1659979429
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    center = mean(numbers)\n    sum((numbers - center).abs)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0,\
    \ 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpste4zr13.jl:15

    '
  stdout: "test set: Error During Test at /tmp/tmpste4zr13.jl:18\n  Test threw exception\n\
    \  Expression: candidate([1.0, 2.0]) == 0.5\n  UndefVarError: mean not defined\n\
    \  Stacktrace:\n   [1] mean_absolute_deviation(numbers::Vector{Float64})\n   \
    \  @ Main /tmp/tmpste4zr13.jl:10\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpste4zr13.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpste4zr13.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpste4zr13.jl:19\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 3.0, 4.0]) == 1.0\n  UndefVarError: mean not defined\n\
    \  Stacktrace:\n   [1] mean_absolute_deviation(numbers::Vector{Float64})\n   \
    \  @ Main /tmp/tmpste4zr13.jl:10\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpste4zr13.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpste4zr13.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpste4zr13.jl:20\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2\n  UndefVarError: mean not defined\n\
    \  Stacktrace:\n   [1] mean_absolute_deviation(numbers::Vector{Float64})\n   \
    \  @ Main /tmp/tmpste4zr13.jl:10\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpste4zr13.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpste4zr13.jl:17\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  timestamp: 1659979431
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n  \n    sum = 0\n  \n    for i in numbers:\n        sum = sum + abs(i - mean(i))\n\
    \  \n    return sum / length(numbers)\nusing Test\n\n@testset begin\n\ncandidate\
    \ = mean_absolute_deviation;\n\t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprhqs_0x6.jl:14\nin expression starting at\
    \ /tmp/tmprhqs_0x6.jl:14\n"
  stdout: ''
  timestamp: 1659979429
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n  sum = 0.0\n  for n in numbers\n    sum += abs(n - mean(numbers))\n  end\n\
    \  return sum / length(numbers)\nend\n</code>\n<|/ a dscore=0 |>\n<| a |>\nThis\
    \ is more general than the other answers since it calculates the median of a set\
    \ of numbers.\n<code>\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpse_x7cpl.jl:16\nin expression starting at\
    \ /tmp/tmpse_x7cpl.jl:16\n"
  stdout: ''
  timestamp: 1659979429
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    diff = numbers .- mean (numbers)\n    return sum diff .* diff ./(length(diff)-1)\n\
    end\n</cell>\n<code language=julia-0.5>\nmean_absolute_deviation([1,2,3])\n</cell>\n\
    <code language=julia-0.5>\nmean_absolute_deviation([1,2,4])\n</cell>\n<text>\n\
    Mean Absolute Deviation Function for DataFrames\nusing Test\n\n@testset begin\n\
    \ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0, 2.0]) == 0.5)\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: space before \"(\" not allowed in \"mean (\"\
    \ at /tmp/tmponc6cq4p.jl:10\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmponc6cq4p.jl:10\n\
    in expression starting at /tmp/tmponc6cq4p.jl:10\n"
  stdout: ''
  timestamp: 1659979429
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    return sqrt(mean(abs2(numbers-mean(numbers))))\nend\n</cell>\n<text>\n\
    Let's look at the MAD.\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdzis6xhe.jl:12\nin expression starting at\
    \ /tmp/tmpdzis6xhe.jl:12\n"
  stdout: ''
  timestamp: 1659979429
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    N = length(numbers)\n    average = sum(numbers)/N\n    devs = Float64[]\n\
    \    for n in numbers\n        devpush!(devs, n - average)\n    end\n    return\
    \ mean(devs)\nend\n</cell>\n<code language=julia-1.5>\nmean_absolute_deviation([1,2,3,4,5,6])\n\
    </cell>\n<text>\nWhat is the median of a set of numbers?\nusing Test\n\n@testset\
    \ begin\n\ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0, 2.0])\
    \ == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwa5bwfsp.jl:18\nin expression starting at\
    \ /tmp/tmpwa5bwfsp.jl:18\n"
  stdout: ''
  timestamp: 1659979429
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum::Float64 = 0.\n    for i in numbers:\n        sum = sum + abs(i -\
    \ mean(i))\n    return sum/length(numbers)\nend mean_absolute_deviation\n\"\"\"\
    \n    Calculate the mean absolute deviation of the given data set.\n    >>> data\
    \ = [1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0,\
    \ 15.0, 16.0, 17.0, 18.0, 19.0, 20.0, 21.0, 22.0, 23.0, 24.0, 25.0, 26.0]\n  \
    \  >>> mean_absolute_deviation(data)\n    5.166666666666666\n    \n    \"\"\"\n\
    using Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0,\
    \ 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyz84i69l.jl:12\nin expression starting at\
    \ /tmp/tmpyz84i69l.jl:12\n"
  stdout: ''
  timestamp: 1659979429
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    return mean(abs.(numbers-mean(numbers)))\nusing Test\n\n@testset begin\n\
    \ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0, 2.0]) == 0.5)\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpyy7wr76e.jl:9\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpyy7wr76e.jl:1\n\
    in expression starting at /tmp/tmpyy7wr76e.jl:1\n"
  stdout: ''
  timestamp: 1659979429
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    return mean(abs.(numbers - mean(numbers)))\nend #\nusing Test\n\n@testset\
    \ begin\n\ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0, 2.0])\
    \ == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpv8_z_p6w.jl:14

    '
  stdout: "test set: Error During Test at /tmp/tmpv8_z_p6w.jl:17\n  Test threw exception\n\
    \  Expression: candidate([1.0, 2.0]) == 0.5\n  UndefVarError: mean not defined\n\
    \  Stacktrace:\n   [1] mean_absolute_deviation(numbers::Vector{Float64})\n   \
    \  @ Main /tmp/tmpv8_z_p6w.jl:10\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpv8_z_p6w.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpv8_z_p6w.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpv8_z_p6w.jl:18\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 3.0, 4.0]) == 1.0\n  UndefVarError: mean not defined\n\
    \  Stacktrace:\n   [1] mean_absolute_deviation(numbers::Vector{Float64})\n   \
    \  @ Main /tmp/tmpv8_z_p6w.jl:10\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpv8_z_p6w.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpv8_z_p6w.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpv8_z_p6w.jl:19\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2\n  UndefVarError: mean not defined\n\
    \  Stacktrace:\n   [1] mean_absolute_deviation(numbers::Vector{Float64})\n   \
    \  @ Main /tmp/tmpv8_z_p6w.jl:10\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpv8_z_p6w.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpv8_z_p6w.jl:16\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  timestamp: 1659979431
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    return mean(abs.(numbers - mean(numbers)))\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0, 2.0])\
    \ == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpl95gt8nk.jl:14

    '
  stdout: "test set: Error During Test at /tmp/tmpl95gt8nk.jl:17\n  Test threw exception\n\
    \  Expression: candidate([1.0, 2.0]) == 0.5\n  UndefVarError: mean not defined\n\
    \  Stacktrace:\n   [1] mean_absolute_deviation(numbers::Vector{Float64})\n   \
    \  @ Main /tmp/tmpl95gt8nk.jl:10\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpl95gt8nk.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpl95gt8nk.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpl95gt8nk.jl:18\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 3.0, 4.0]) == 1.0\n  UndefVarError: mean not defined\n\
    \  Stacktrace:\n   [1] mean_absolute_deviation(numbers::Vector{Float64})\n   \
    \  @ Main /tmp/tmpl95gt8nk.jl:10\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpl95gt8nk.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpl95gt8nk.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpl95gt8nk.jl:19\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2\n  UndefVarError: mean not defined\n\
    \  Stacktrace:\n   [1] mean_absolute_deviation(numbers::Vector{Float64})\n   \
    \  @ Main /tmp/tmpl95gt8nk.jl:10\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpl95gt8nk.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpl95gt8nk.jl:16\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  timestamp: 1659979367
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum(abs.(numbers - mean(numbers)))/length(numbers)\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0,\
    \ 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpeuqkf2rj.jl:14

    '
  stdout: "test set: Error During Test at /tmp/tmpeuqkf2rj.jl:17\n  Test threw exception\n\
    \  Expression: candidate([1.0, 2.0]) == 0.5\n  UndefVarError: mean not defined\n\
    \  Stacktrace:\n   [1] mean_absolute_deviation(numbers::Vector{Float64})\n   \
    \  @ Main /tmp/tmpeuqkf2rj.jl:10\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpeuqkf2rj.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpeuqkf2rj.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpeuqkf2rj.jl:18\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 3.0, 4.0]) == 1.0\n  UndefVarError: mean not defined\n\
    \  Stacktrace:\n   [1] mean_absolute_deviation(numbers::Vector{Float64})\n   \
    \  @ Main /tmp/tmpeuqkf2rj.jl:10\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpeuqkf2rj.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpeuqkf2rj.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpeuqkf2rj.jl:19\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2\n  UndefVarError: mean not defined\n\
    \  Stacktrace:\n   [1] mean_absolute_deviation(numbers::Vector{Float64})\n   \
    \  @ Main /tmp/tmpeuqkf2rj.jl:10\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpeuqkf2rj.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpeuqkf2rj.jl:16\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  timestamp: 1659979431
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    count = 0\n    for n in numbers:\n        sum += abs (n\
    \ - mean (numbers))\n        count += 1\n    if count > 0\n        return sum\
    \ / count\n    else\n        return 0.0\n    end\nend\n</cell>\n<text>\nExercise\
    \ 1: Calculate the Mean Absolute Deviation for a dataset with 2 input elements\n\
    Calculate the mean absolute deviation for the dataset with 2 input elements. \n\
    What is your answer?\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppp6az3nk.jl:13\nin expression starting at\
    \ /tmp/tmppp6az3nk.jl:13\n"
  stdout: ''
  timestamp: 1659979429
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    \n    # calculate mean of numbers\n    average = sum(numbers) / length(numbers)\n\
    using Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0,\
    \ 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp73hhtokb.jl:9\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp73hhtokb.jl:1\n\
    in expression starting at /tmp/tmp73hhtokb.jl:1\n"
  stdout: ''
  timestamp: 1659979429
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum(abs(self-mean(numbers))) / length(self)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0, 2.0])\
    \ == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmp9b5d6ybd.jl:14

    '
  stdout: "test set: Error During Test at /tmp/tmp9b5d6ybd.jl:17\n  Test threw exception\n\
    \  Expression: candidate([1.0, 2.0]) == 0.5\n  UndefVarError: mean not defined\n\
    \  Stacktrace:\n   [1] mean_absolute_deviation(numbers::Vector{Float64})\n   \
    \  @ Main /tmp/tmp9b5d6ybd.jl:10\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp9b5d6ybd.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp9b5d6ybd.jl:16\ntest set:\
    \ Error During Test at /tmp/tmp9b5d6ybd.jl:18\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 3.0, 4.0]) == 1.0\n  UndefVarError: mean not defined\n\
    \  Stacktrace:\n   [1] mean_absolute_deviation(numbers::Vector{Float64})\n   \
    \  @ Main /tmp/tmp9b5d6ybd.jl:10\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp9b5d6ybd.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp9b5d6ybd.jl:16\ntest set:\
    \ Error During Test at /tmp/tmp9b5d6ybd.jl:19\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2\n  UndefVarError: mean not defined\n\
    \  Stacktrace:\n   [1] mean_absolute_deviation(numbers::Vector{Float64})\n   \
    \  @ Main /tmp/tmp9b5d6ybd.jl:10\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp9b5d6ybd.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp9b5d6ybd.jl:16\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  timestamp: 1659979431
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n\"\"\"\n    \n    \"\"\"\n    Calculate standard deviation\n    \"\"\"\nusing\
    \ Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0,\
    \ 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"function\" at /tmp/tmp01f3w4yj.jl:9 expected\
    \ \"end\", got \"standard\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp01f3w4yj.jl:13\n\
    in expression starting at /tmp/tmp01f3w4yj.jl:13\n"
  stdout: ''
  timestamp: 1659979431
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    \"\"\"Calculate the Mean Absolute Deviation using Python built-in function\n\
    \    statistics.mean() with one argument - a list.\n    \"\"\"\n\"\"\"\n    Calculate\
    \ the Mean Absolute Deviation using Python built-in function\n    statistics.mean()\
    \ with two arguments - the list and the centerpoint \n    (mean in this case).\n\
    \    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp1hdx0z54.jl:9\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp1hdx0z54.jl:1\n\
    in expression starting at /tmp/tmp1hdx0z54.jl:1\n"
  stdout: ''
  timestamp: 1659979431
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    mean(abs2, numbers)\nend\n</cell>\n<text>\nWhat does it mean to calculate\
    \ MAD?\nWhat does it mean to calculate an absolute deviation?\nusing Test\n\n\
    @testset begin\n\ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0,\
    \ 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpps5uw_k1.jl:12\nin expression starting at\
    \ /tmp/tmpps5uw_k1.jl:12\n"
  stdout: ''
  timestamp: 1659979431
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    number_mean = mean(numbers)\n    dev = [abs(x-number_mean) for x in numbers]\n\
    \    return mean(dev)\nend\n</cell>\n<code language=julia-1.5>\n@code_native mean_absolute_deviation(numbers)\n\
    </cell>\n<text>\nAs you can see, the performance of this function has improved\
    \ over previous, slower implementations. So let's now have a look at how we can\
    \ use it!\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdbm2ykud.jl:14\nin expression starting at\
    \ /tmp/tmpdbm2ykud.jl:14\n"
  stdout: ''
  timestamp: 1659979431
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    abs_diff = @-@ numbers .- @mean!(numbers)\n    mad = mean(abs_diff)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\t\
    @test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0]) ==\
    \ 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: space before \"numbers\" not allowed in \"@ numbers\"\
    \ at /tmp/tmpzovsj5zb.jl:10\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpzovsj5zb.jl:10\n\
    in expression starting at /tmp/tmpzovsj5zb.jl:10\n"
  stdout: ''
  timestamp: 1659979431
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    abs2 = |numbers| |> abs\n    abs2 |> sum\nend\n</cell>\n<cell>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0,\
    \ 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"|\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyu1210fg.jl:10\nin expression starting at\
    \ /tmp/tmpyu1210fg.jl:10\n"
  stdout: ''
  timestamp: 1659979430
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    \n    abs_deviations = map(abs, numbers)\n    mean_abs_deviation = mean(abs_deviations)\n\
    \    \n    return mean_abs_deviation\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = mean_absolute_deviation;\n\t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpegt8ftre.jl:18

    '
  stdout: "test set: Error During Test at /tmp/tmpegt8ftre.jl:21\n  Test threw exception\n\
    \  Expression: candidate([1.0, 2.0]) == 0.5\n  UndefVarError: mean not defined\n\
    \  Stacktrace:\n   [1] mean_absolute_deviation(numbers::Vector{Float64})\n   \
    \  @ Main /tmp/tmpegt8ftre.jl:12\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpegt8ftre.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpegt8ftre.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpegt8ftre.jl:22\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 3.0, 4.0]) == 1.0\n  UndefVarError: mean not defined\n\
    \  Stacktrace:\n   [1] mean_absolute_deviation(numbers::Vector{Float64})\n   \
    \  @ Main /tmp/tmpegt8ftre.jl:12\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpegt8ftre.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpegt8ftre.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpegt8ftre.jl:23\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2\n  UndefVarError: mean not defined\n\
    \  Stacktrace:\n   [1] mean_absolute_deviation(numbers::Vector{Float64})\n   \
    \  @ Main /tmp/tmpegt8ftre.jl:12\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpegt8ftre.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpegt8ftre.jl:20\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  timestamp: 1659979432
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n\tsum = 0.0\n\tn = length(numbers)\n\tfor i in 0 .. n-1 do\n\t\tsum = sum\
    \ + abs(numbers[i] - mean(numbers))\n\tend\n\treturn sum / n\nend\n</cell>\n<code\
    \ language=julia-0.5>\n## Let's make our own function to do this\nusing Test\n\
    \n@testset begin\n\ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0,\
    \ 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid \"do\" syntax\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpmb_65p2u.jl:12\nin expression starting at /tmp/tmpmb_65p2u.jl:12\n"
  stdout: ''
  timestamp: 1659979431
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum(abs2.(numbers - mean(numbers)))/length(numbers)\nend\n</cell>\n<text>\n\
    3. Plot MAD\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9uiqbv0f.jl:12\nin expression starting at\
    \ /tmp/tmp9uiqbv0f.jl:12\n"
  stdout: ''
  timestamp: 1659979431
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    mad <- mean(abs.(numbers - mean(numbers)))\n    return mad\nusing Test\n\
    \n@testset begin\n\ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0,\
    \ 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpc4cb8eny.jl:9\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpc4cb8eny.jl:1\n\
    in expression starting at /tmp/tmpc4cb8eny.jl:1\n"
  stdout: ''
  timestamp: 1659979431
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum_abs_diff <- sum(abs2, numbers)\n    return sum_abs_diff / length(numbers)\n\
    end\n</cell>\n<text>\n4. Exploratory Data Analysis\nBefore starting our exploratory\
    \ data analysis process, let's do some basic preliminary data analysis and have\
    \ a basic idea of how data looks like. We'll start with creating a data frame\
    \ with just a single column.\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsmf3ht65.jl:13\nin expression starting at\
    \ /tmp/tmpsmf3ht65.jl:13\n"
  stdout: ''
  timestamp: 1659979431
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    \"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n\"\"\"\n## Mean Squared Deviation\n###\
    \ mean - average | x - x_mean |^2\n\"\"\"\n\"\"\"\n#### mean - average | x - x_mean\
    \ |^2\n\"\"\"\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpywkyl7bj.jl:9\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpywkyl7bj.jl:1\n\
    in expression starting at /tmp/tmpywkyl7bj.jl:1\n"
  stdout: ''
  timestamp: 1659979431
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    median = sort(numbers)[length(numbers)/2]\n    diff = numbers - median\n\
    \    maad = mean(abs.(diff))\n    return maad\nusing Test\n\n@testset begin\n\n\
    candidate = mean_absolute_deviation;\n\t@test(candidate([1.0, 2.0]) == 0.5)\n\t\
    @test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0,\
    \ 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpmybh_4j9.jl:9\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpmybh_4j9.jl:1\n\
    in expression starting at /tmp/tmpmybh_4j9.jl:1\n"
  stdout: ''
  timestamp: 1659979431
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n \n    return mean(map(abs, numbers)) \nend\nusing Test\n\n@testset begin\n\
    \ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0, 2.0]) == 0.5)\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpl_nv9f1x.jl:15

    '
  stdout: "test set: Error During Test at /tmp/tmpl_nv9f1x.jl:18\n  Test threw exception\n\
    \  Expression: candidate([1.0, 2.0]) == 0.5\n  UndefVarError: mean not defined\n\
    \  Stacktrace:\n   [1] mean_absolute_deviation(numbers::Vector{Float64})\n   \
    \  @ Main /tmp/tmpl_nv9f1x.jl:11\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpl_nv9f1x.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpl_nv9f1x.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpl_nv9f1x.jl:19\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 3.0, 4.0]) == 1.0\n  UndefVarError: mean not defined\n\
    \  Stacktrace:\n   [1] mean_absolute_deviation(numbers::Vector{Float64})\n   \
    \  @ Main /tmp/tmpl_nv9f1x.jl:11\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpl_nv9f1x.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpl_nv9f1x.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpl_nv9f1x.jl:20\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2\n  UndefVarError: mean not defined\n\
    \  Stacktrace:\n   [1] mean_absolute_deviation(numbers::Vector{Float64})\n   \
    \  @ Main /tmp/tmpl_nv9f1x.jl:11\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpl_nv9f1x.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpl_nv9f1x.jl:17\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  timestamp: 1659979432
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum((numbers - mean(numbers)) .^ 2)\nend\n</cell>\n<text>\nAs shown above,\
    \ Mean Absolute Deviation is a robust measure of variability in a set of numbers.\
    \ This is because we are measuring the distance between the points, and so points\
    \ closer than others will be affected by outliers not far away from the mean by\
    \ outliers far away from them.\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpu6o6lgb7.jl:12\nin expression starting at\
    \ /tmp/tmpu6o6lgb7.jl:12\n"
  stdout: ''
  timestamp: 1659979431
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    number = mean(numbers)\n    deviation = numbers .- number\n    mean_abs\
    \ = mean(deviation)\n    return mean_abs\nend\nusing Test\n\n@testset begin\n\n\
    candidate = mean_absolute_deviation;\n\t@test(candidate([1.0, 2.0]) == 0.5)\n\t\
    @test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0,\
    \ 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpxsq64mea.jl:17

    '
  stdout: "test set: Error During Test at /tmp/tmpxsq64mea.jl:20\n  Test threw exception\n\
    \  Expression: candidate([1.0, 2.0]) == 0.5\n  UndefVarError: mean not defined\n\
    \  Stacktrace:\n   [1] mean_absolute_deviation(numbers::Vector{Float64})\n   \
    \  @ Main /tmp/tmpxsq64mea.jl:10\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpxsq64mea.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpxsq64mea.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpxsq64mea.jl:21\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 3.0, 4.0]) == 1.0\n  UndefVarError: mean not defined\n\
    \  Stacktrace:\n   [1] mean_absolute_deviation(numbers::Vector{Float64})\n   \
    \  @ Main /tmp/tmpxsq64mea.jl:10\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpxsq64mea.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpxsq64mea.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpxsq64mea.jl:22\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2\n  UndefVarError: mean not defined\n\
    \  Stacktrace:\n   [1] mean_absolute_deviation(numbers::Vector{Float64})\n   \
    \  @ Main /tmp/tmpxsq64mea.jl:10\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpxsq64mea.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpxsq64mea.jl:19\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  timestamp: 1659979432
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n  sum_abs = 0.0\n  for x in numbers \n    sum_abs += abs(x - mean(x))\n  end\n\
    \  return sum_abs / length(numbers)\nend\n</cell>\n<text>\nMean Squared Error\n\
    using Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0,\
    \ 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjcjmov34.jl:16\nin expression starting at\
    \ /tmp/tmpjcjmov34.jl:16\n"
  stdout: ''
  timestamp: 1659979431
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    s = 0.0\n    for i in numbers\n        s = s + abs\n    s /= length(numbers)\n\
    \    return s\nend\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpkcjmvzvg.jl:9\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpkcjmvzvg.jl:1\n\
    in expression starting at /tmp/tmpkcjmvzvg.jl:1\n"
  stdout: ''
  timestamp: 1659979431
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for number in numbers\n        sum += abs(number - mean(numbers))\n\
    \    end\n    return sum / length(numbers)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0, 2.0]) == 0.5)\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpr4m6iqvt.jl:18

    '
  stdout: "test set: Error During Test at /tmp/tmpr4m6iqvt.jl:21\n  Test threw exception\n\
    \  Expression: candidate([1.0, 2.0]) == 0.5\n  UndefVarError: mean not defined\n\
    \  Stacktrace:\n   [1] mean_absolute_deviation(numbers::Vector{Float64})\n   \
    \  @ Main /tmp/tmpr4m6iqvt.jl:12\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpr4m6iqvt.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpr4m6iqvt.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpr4m6iqvt.jl:22\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 3.0, 4.0]) == 1.0\n  UndefVarError: mean not defined\n\
    \  Stacktrace:\n   [1] mean_absolute_deviation(numbers::Vector{Float64})\n   \
    \  @ Main /tmp/tmpr4m6iqvt.jl:12\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpr4m6iqvt.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpr4m6iqvt.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpr4m6iqvt.jl:23\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2\n  UndefVarError: mean not defined\n\
    \  Stacktrace:\n   [1] mean_absolute_deviation(numbers::Vector{Float64})\n   \
    \  @ Main /tmp/tmpr4m6iqvt.jl:12\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpr4m6iqvt.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpr4m6iqvt.jl:20\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  timestamp: 1659979433
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n  \n  n_numbers = length(numbers)\n  x_mean = mean(numbers)\n  made_numbers\
    \ = copy(numbers)\n  made_numbers .-= x_mean\n  \n  made_numbers./=n_numbers\n\
    \  return mean(made_numbers)\nend\n</cell>\n<code language=julia-1.5>\nmean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0, 2.0])\
    \ == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsfvzzjd7.jl:19\nin expression starting at\
    \ /tmp/tmpsfvzzjd7.jl:19\n"
  stdout: ''
  timestamp: 1659979432
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for number in numbers\n        sum += abs(number-mean(numbers))\n\
    \    end\n    return sum/length(numbers)\nend\nusing Test\n\n@testset begin\n\n\
    candidate = mean_absolute_deviation;\n\t@test(candidate([1.0, 2.0]) == 0.5)\n\t\
    @test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0,\
    \ 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmp8237xnxk.jl:18

    '
  stdout: "test set: Error During Test at /tmp/tmp8237xnxk.jl:21\n  Test threw exception\n\
    \  Expression: candidate([1.0, 2.0]) == 0.5\n  UndefVarError: mean not defined\n\
    \  Stacktrace:\n   [1] mean_absolute_deviation(numbers::Vector{Float64})\n   \
    \  @ Main /tmp/tmp8237xnxk.jl:12\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp8237xnxk.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp8237xnxk.jl:20\ntest set:\
    \ Error During Test at /tmp/tmp8237xnxk.jl:22\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 3.0, 4.0]) == 1.0\n  UndefVarError: mean not defined\n\
    \  Stacktrace:\n   [1] mean_absolute_deviation(numbers::Vector{Float64})\n   \
    \  @ Main /tmp/tmp8237xnxk.jl:12\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp8237xnxk.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp8237xnxk.jl:20\ntest set:\
    \ Error During Test at /tmp/tmp8237xnxk.jl:23\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2\n  UndefVarError: mean not defined\n\
    \  Stacktrace:\n   [1] mean_absolute_deviation(numbers::Vector{Float64})\n   \
    \  @ Main /tmp/tmp8237xnxk.jl:12\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp8237xnxk.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp8237xnxk.jl:20\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  timestamp: 1659979434
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    if length(numbers)==0\n        error(\"Mean Absolute Deviation requires\
    \ at least one data point.\")\n    end\n    \n    let mean=mean(numbers)\n   \
    \ \n    return sum((x-mean)^2 for x in numbers)/length(numbers)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0,\
    \ 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpvx51q003.jl:9\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpvx51q003.jl:1\n\
    in expression starting at /tmp/tmpvx51q003.jl:1\n"
  stdout: ''
  timestamp: 1659979432
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    \n    return mean(map(abs, numbers))\nend\n</cell>\n<text>\nVectorized\
    \ Mean Absolute Deviation\nIf you have many numbers, you may find this function\
    \ is much more efficient than looping over them. Vectorized mean-squared deviation\
    \ is a mathematical concept that generalizes the mean absolute deviation function.\n\
    using Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0,\
    \ 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcvp_kk9v.jl:13\nin expression starting at\
    \ /tmp/tmpcvp_kk9v.jl:13\n"
  stdout: ''
  timestamp: 1659979432
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum::Float64 = 0.0\n    for value in numbers\n        sum += value\n \
    \   end\n    return sum / Float64(length(numbers))\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0, 2.0])\
    \ == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmppwt9r0b_.jl:18

    '
  stdout: "test set: Test Failed at /tmp/tmppwt9r0b_.jl:21\n  Expression: candidate([1.0,\
    \ 2.0]) == 0.5\n   Evaluated: 1.5 == 0.5\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmppwt9r0b_.jl:21 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmppwt9r0b_.jl:20\ntest set: Test Failed at /tmp/tmppwt9r0b_.jl:22\n\
    \  Expression: candidate([1.0, 2.0, 3.0, 4.0]) == 1.0\n   Evaluated: 2.5 == 1.0\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppwt9r0b_.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppwt9r0b_.jl:20\ntest set: Test\
    \ Failed at /tmp/tmppwt9r0b_.jl:23\n  Expression: candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2\n   Evaluated: 3.0 == 1.2\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmppwt9r0b_.jl:23 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmppwt9r0b_.jl:20\nTest Summary: | Fail  Total\n\
    test set      |    3      3\n"
  timestamp: 1659979434
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum_of_squares = 0.0 \n    for n in numbers do \n        sum_of_squares\
    \ += math.pow(n-mean(n),2)\n    avg = sum_of_squares/length(numbers) \n    return\
    \ math.sqrt(avg)\nend\n</code>\n<|/ a tags=julia |>\n<| c |>\nIf this answered\
    \ your question, you should accept it (click the check mark). This will give reputation\
    \ to the person who posted it, and others who will come to this question later\
    \ will know that it's been answered.\n<|/ c |>\n<| c |>\nYou also can use [`StatsBase`](https://github.com/JuliaData/StatsBase.jl)\
    \ with `mean(x)`.\n<|/ c |>\n<| a dscore=3 |>\nIf your array is big, you may want\
    \ to use map to compute mean quickly.\n<code>\nusing Statistics\nusing Test\n\n\
    @testset begin\n\ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0,\
    \ 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid \"do\" syntax\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp5oddzjmf.jl:11\nin expression starting at /tmp/tmp5oddzjmf.jl:11\n"
  stdout: ''
  timestamp: 1659979432
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    return (Float64)mean(abs.(numbers - mean(numbers)))\nend\n</cell>\n<cell>\n\
    # export\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp331eztgs.jl:12\nin expression starting at\
    \ /tmp/tmp331eztgs.jl:12\n"
  stdout: ''
  timestamp: 1659979432
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    numbers.mean()\nend\n</cell>\n<text>\nExercise 3.13: Implement the function\
    \ std_dev(numbers::Vector{Float64})\nThe function std_dev should calculate the\
    \ standard deviation for a given\nvector of numbers. The standard deviation is\
    \ the square root of the\naverage of squaring the differences between the numbers\
    \ given and the\nmean of the numbers given.\nStandard deviation is a measure of\
    \ the variability of a set of numbers\naround its mean.\nFor a sample of size\
    \ n, calculate the standard deviation as follows,\n$$\n\\sigma = \\sqrt{\\frac{1}{n}\
    \ \\sum_{i=1}^{n} (x_i - \\bar{x})^2}\n$$\nHere, $\\bar{x}$ is the sample mean.\n\
    Standard deviation is the square root of the average of squaring the\ndifferences\
    \ between the numbers given and the sample mean.\nstd_dev should accept a vector\
    \ of numbers and return its standard\ndeviation.\nStandard deviation is a measure\
    \ of the variability of a set of numbers\naround its mean. For a sample of size\
    \ n, calculate the standard\ndeviation as follows, $$\\sigma = \\sqrt{\\frac{1}{n}\
    \ \\sum_{i=1}^{n} (x_i - \\bar{x})^2}$$\nHere, $\\bar{x}$ is the sample mean.\n\
    Standard deviation is the square root of the average of squaring the\ndifferences\
    \ between the numbers given and the sample mean.\nExample: \nFor a sample of size\
    \ 3 with elements [2, 3, 4] calculate the standard\ndeviation as follows, $$\\\
    sigma = \\sqrt{\\frac{1}{3} \\sum_{i=1}^{3} (x_i - \\bar{x})^2}$$\nHere, $\\bar{x}$\
    \ is the sample mean 2.5.\nstd_dev([2.5, 3, 4.0])\n2.0\nExample: \nFor a sample\
    \ of size 3 with elements [2, 3, 4] calculate the standard\ndeviation as follows,\
    \ $$\\sigma = \\sqrt{\\frac{1}{3} \\sum_{i=1}^{3} (x_i - \\bar{x})^2}$$\nHere,\
    \ $\\bar{x}$ is the sample mean 2.5.\nstd_dev([2.5, 3, 4.0])\n2.0\nExample: \n\
    For a sample of size 3 with elements [2, 3, 4] calculate the standard\ndeviation\
    \ as follows, $$\\sigma = \\sqrt{\\frac{1}{3} \\sum_{i=1}^{3} (x_i - \\bar{x})^2}$$\n\
    Here, $\\bar{x}$ is the sample mean 2.5.\nstd_dev([2.5, 3, 4.0])\n2.0\nExample:\
    \ \nFor a sample of size 3 with elements [2, 3, 4] calculate the standard\nusing\
    \ Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0,\
    \ 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprwahu07m.jl:12\nin expression starting at\
    \ /tmp/tmprwahu07m.jl:12\n"
  stdout: ''
  timestamp: 1659979432
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    total = 0.0\n    sum_of_squares = 0.0\n    for i in numbers\n        total\
    \ += i\n        sum_of_squares += i**2\n    end\n    return total / length(numbers)\
    \ - sum_of_squares / length(numbers)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = mean_absolute_deviation;\n\t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"x^y\" instead of \"x**y\" for exponentiation,\
    \ and \"x...\" instead of \"**x\" for splatting.\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpiok3uwl6.jl:14\nin expression starting at /tmp/tmpiok3uwl6.jl:14\n"
  stdout: ''
  timestamp: 1659979433
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    result = 0.0\n    for number in numbers\n        result += abs ((number\
    \ - mean(numbers)) )\n    end\n    result / length(numbers)\nend\n</code>\n<|/\
    \ a |>\n<| a dscore=0 |>\n<code>\nusing Statistics\nusing Test\n\n@testset begin\n\
    \ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0, 2.0]) == 0.5)\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: space before \"(\" not allowed in \"abs (\" at\
    \ /tmp/tmptyld03at.jl:12\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmptyld03at.jl:12\n\
    in expression starting at /tmp/tmptyld03at.jl:12\n"
  stdout: ''
  timestamp: 1659979432
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n  return mean(map((numbers-mean(numbers)).abs, numbers))\nend\n</cell>\n<text>\n\
    Mean Absolute Deviation\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp35qf7mf5.jl:12\nin expression starting at\
    \ /tmp/tmp35qf7mf5.jl:12\n"
  stdout: ''
  timestamp: 1659979433
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    mean_number = mean(numbers)\n    return sum((numbers - mean_number).abs)\
    \ / (length(numbers) - 1)\nend\n</cell>\n<text>\nLet's test the mean absolute\
    \ deviation function:\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvua3o_fq.jl:13\nin expression starting at\
    \ /tmp/tmpvua3o_fq.jl:13\n"
  stdout: ''
  timestamp: 1659979433
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    # Calculate the mean of the numbers\n    sum_of_squares = 0.\n    for\
    \ x in numbers\n        sum_of_squares += (x - mean(x))^2\n    end\n    return\
    \ sqrt(sum_of_squares/length(numbers))\nend\n</cell>\n<cell>\n# Run the code\n\
    </cell>\n<cell>\n# TEST Calculate Mean Absolute Deviation (2a)\nTest.assertTrue(\
    \ mean_absolute_deviation([1,2,3]) == 1.0, \"Mean Absolute Deviation does not\
    \ work\" )\nTest.assertTrue( mean_absolute_deviation([1,2,3,4]) == 1.0, \"Mean\
    \ Absolute Deviation does not work\" )\nTest.assertTrue( mean_absolute_deviation([1,-1,2,-2])\
    \ == 1.0, \"Mean Absolute Deviation does not work\" )\nTest.assertTrue( mean_absolute_deviation([1,-1,2,-2])\
    \ == 1.0, \"Mean Absolute Deviation does not work\" )\nTest.assertTrue( mean_absolute_deviation([1.0])\
    \ == 1.0, \"Mean Absolute Deviation does not work\" )\nTest.assertTrue( mean_absolute_deviation([1.5])\
    \ == 1.0, \"Mean Absolute Deviation does not work\" )\nTest.assertTrue( mean_absolute_deviation([1,2,3])\
    \ == 1.0, \"Mean Absolute Deviation does not work\" )\nTest.assertTrue( mean_absolute_deviation([-1.5])\
    \ == 1.0, \"Mean Absolute Deviation does not work\" )\nTest.assertTrue( mean_absolute_deviation([1,2,-3])\
    \ == 1.0, \"Mean Absolute Deviation does not work\" )\nTest.assertTrue( mean_absolute_deviation([-1.5,2.5,3.5])\
    \ == 1.0, \"Mean Absolute Deviation does not work\" )\n</cell>\n<text>\nProblem\
    \ 3\nWrite a function that will compute the kurtosis of the input data set.\n\
    using Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0,\
    \ 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpto4qsget.jl:17\nin expression starting at\
    \ /tmp/tmpto4qsget.jl:17\n"
  stdout: ''
  timestamp: 1659979433
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    \"\"\"\n    :param numbers: the data\n    :return: the MAD around the\
    \ mean\n    \"\"\"\n    \"\"\"\n    Calculate the Mean Absolute Deviation.\n \
    \   \n    For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nend\n    \nusing Test\n\n@testset begin\n\
    \ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0, 2.0]) == 0.5)\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpq0hn1vrd.jl:29

    '
  stdout: "test set: Error During Test at /tmp/tmpq0hn1vrd.jl:32\n  Test threw exception\n\
    \  Expression: candidate([1.0, 2.0]) == 0.5\n  MethodError: Cannot `convert` an\
    \ object of type String to an object of type Float64\n  Closest candidates are:\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] mean_absolute_deviation(numbers::Vector{Float64})\n\
    \     @ Main /tmp/tmpq0hn1vrd.jl:14\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpq0hn1vrd.jl:32 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpq0hn1vrd.jl:31\ntest set:\
    \ Error During Test at /tmp/tmpq0hn1vrd.jl:33\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 3.0, 4.0]) == 1.0\n  MethodError: Cannot `convert` an object\
    \ of type String to an object of type Float64\n  Closest candidates are:\n   \
    \ convert(::Type{T}, !Matched::T) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] mean_absolute_deviation(numbers::Vector{Float64})\n\
    \     @ Main /tmp/tmpq0hn1vrd.jl:14\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpq0hn1vrd.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n  "
  timestamp: 1659979435
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for x in numbers\n        sum += (x - mean(x))^2.0\n  \
    \  div = length(numbers)\n    return sum / (div * 1.0)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0, 2.0])\
    \ == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp4s6yxwro.jl:9\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp4s6yxwro.jl:1\n\
    in expression starting at /tmp/tmp4s6yxwro.jl:1\n"
  stdout: ''
  timestamp: 1659979433
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    _mean = mean(numbers)\n    _madev = sum([abs(x - _mean) for x in numbers])\
    \ / length(numbers)\n    return _madev\nend\nusing Test\n\n@testset begin\n\n\
    candidate = mean_absolute_deviation;\n\t@test(candidate([1.0, 2.0]) == 0.5)\n\t\
    @test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0,\
    \ 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmp_w3qwhkf.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmp_w3qwhkf.jl:19\n  Test threw exception\n\
    \  Expression: candidate([1.0, 2.0]) == 0.5\n  UndefVarError: mean not defined\n\
    \  Stacktrace:\n   [1] mean_absolute_deviation(numbers::Vector{Float64})\n   \
    \  @ Main /tmp/tmp_w3qwhkf.jl:10\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp_w3qwhkf.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp_w3qwhkf.jl:18\ntest set:\
    \ Error During Test at /tmp/tmp_w3qwhkf.jl:20\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 3.0, 4.0]) == 1.0\n  UndefVarError: mean not defined\n\
    \  Stacktrace:\n   [1] mean_absolute_deviation(numbers::Vector{Float64})\n   \
    \  @ Main /tmp/tmp_w3qwhkf.jl:10\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp_w3qwhkf.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp_w3qwhkf.jl:18\ntest set:\
    \ Error During Test at /tmp/tmp_w3qwhkf.jl:21\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2\n  UndefVarError: mean not defined\n\
    \  Stacktrace:\n   [1] mean_absolute_deviation(numbers::Vector{Float64})\n   \
    \  @ Main /tmp/tmp_w3qwhkf.jl:10\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp_w3qwhkf.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp_w3qwhkf.jl:18\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  timestamp: 1659979434
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    \n    mean_number = mean(numbers)\n    return mean(map(abs, numbers-mean_number))\n\
    end\n</code>\n<|/ a tags=julia |>\n<| a dscore=2 |>\nAn alternative to writing\
    \ your own function and using it would be to use the Statistics.jl package, here\
    \ is an example using your data\n<code>\njulia> using Statistics\nusing Test\n\
    \n@testset begin\n\ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0,\
    \ 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgt531c6_.jl:14\nin expression starting at\
    \ /tmp/tmpgt531c6_.jl:14\n"
  stdout: ''
  timestamp: 1659979433
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum_abs = 0\n    sum_abs_squared = 0\n    for n in numbers\n        sum_abs_squared\
    \ += n**2\n        sum_abs += n\n    \n    return sum_abs / (sum(numbers)-sum_abs_squared)\n\
    using Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0,\
    \ 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"x^y\" instead of \"x**y\" for exponentiation,\
    \ and \"x...\" instead of \"**x\" for splatting.\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpbz6wf78i.jl:13\nin expression starting at /tmp/tmpbz6wf78i.jl:13\n"
  stdout: ''
  timestamp: 1659979433
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0\n    count = 0\n    for x in numbers:\n        sum += abs(x -\
    \ mean(x))\n        count += 1\n    if count == 0\n        error(\"List is empty\"\
    )\n    end\n    return sum / count\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = mean_absolute_deviation;\n\t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmping78f39.jl:13\nin expression starting at\
    \ /tmp/tmping78f39.jl:13\n"
  stdout: ''
  timestamp: 1659979433
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    return (sum(abs2(numbers - mean(numbers)))) / length(numbers)\nend\n</cell>\n\
    <text>\nMean Absolute Deviation Coefficient\n$$ MADc = \\displaystyle\\sum{x\\\
    in\\mathbb{R}}|x - \\bar{x}|$$\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp15lwo6y2.jl:12\nin expression starting at\
    \ /tmp/tmp15lwo6y2.jl:12\n"
  stdout: ''
  timestamp: 1659979434
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    # Calculate mean of data\n    mean := mean(numbers)\n    # Calculate MAD\
    \ using mean\n    mad := 0.0\n    for x in numbers\n        diff = x - mean\n\
    \        mad = mad + abs2(diff)\n    end\n    return mad\nend\n</cell>\n<text>\n\
    Mean Absolute Deviation Coefficient (MAPD).\nThe MAPD is a measure of how similar\
    \ the data is to a normal distribution.\nMAPD = average | x - x_mean |\nThe MAPD\
    \ can be calculated as follows:\nMAPD = sum(x * [x - x_mean] ) / sum(x) * 1.0\n\
    For a list of values, MAPD can be calculated by taking the sum of the absolute\
    \ values\nof the difference of the values from the mean and then dividing by the\
    \ sum of the values.\nMAPD can range from 0 to 1 where 0 indicates no difference\
    \ and 1 indicates some \nsimilarity. For example, with [2.0, 1.0, 0.0, 3.0, 4.0,\
    \ 5.0], the mean would be 2.0 \nand the MAPD would be 0.5.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0, 2.0])\
    \ == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unsupported assignment operator \":=\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpou7nbnpo.jl:1\nin expression starting at /tmp/tmpou7nbnpo.jl:1\n"
  stdout: ''
  timestamp: 1659979434
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    numbers.mean(abs) + sqrt((numbers-mean(numbers)).^2./length(numbers))\n\
    end\n</cell>\n<text>\nThis code snippet takes advantage of the built-in map()\
    \ function, which applies a function to every element in a collection. map() can\
    \ take a function with a single argument that returns any number of values, and\
    \ returns a new collection of the same type with those values appended together.\n\
    using Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0,\
    \ 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid syntax \"2./\"; add space(s) to clarify\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmp3cpo6ie9.jl:10\nin expression\
    \ starting at /tmp/tmp3cpo6ie9.jl:10\n"
  stdout: ''
  timestamp: 1659979434
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    return mean(abs(numbers - mean(numbers)))\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0, 2.0])\
    \ == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpmxhmm_ia.jl:14

    '
  stdout: "test set: Error During Test at /tmp/tmpmxhmm_ia.jl:17\n  Test threw exception\n\
    \  Expression: candidate([1.0, 2.0]) == 0.5\n  UndefVarError: mean not defined\n\
    \  Stacktrace:\n   [1] mean_absolute_deviation(numbers::Vector{Float64})\n   \
    \  @ Main /tmp/tmpmxhmm_ia.jl:10\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpmxhmm_ia.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpmxhmm_ia.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpmxhmm_ia.jl:18\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 3.0, 4.0]) == 1.0\n  UndefVarError: mean not defined\n\
    \  Stacktrace:\n   [1] mean_absolute_deviation(numbers::Vector{Float64})\n   \
    \  @ Main /tmp/tmpmxhmm_ia.jl:10\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpmxhmm_ia.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpmxhmm_ia.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpmxhmm_ia.jl:19\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2\n  UndefVarError: mean not defined\n\
    \  Stacktrace:\n   [1] mean_absolute_deviation(numbers::Vector{Float64})\n   \
    \  @ Main /tmp/tmpmxhmm_ia.jl:10\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpmxhmm_ia.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpmxhmm_ia.jl:16\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  timestamp: 1659979436
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    mean(abs(numbers - mean(numbers)))\nend\n</cell>\n<text>\nExercise 13\n\
    Write a function max_in_vector that accepts a vector and returns the max element\
    \ of that vector. This function should use reduce to solve the problem.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0,\
    \ 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp76rsb8io.jl:12\nin expression starting at\
    \ /tmp/tmp76rsb8io.jl:12\n"
  stdout: ''
  timestamp: 1659979434
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    return mean(abs.(numbers - mean(numbers)))\nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes in a list of numbers and returns the sum of the\
    \ squares\nof the numbers. Write a test for this function.\nTo test your function,\
    \ use the following numbers:\nnumbers = [1, 2, 3, 4, 5, 6, 7]\nExpected output:\n\
    22.25\n\"\"\"\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmvmdq__a.jl:12\nin expression starting at\
    \ /tmp/tmpmvmdq__a.jl:12\n"
  stdout: ''
  timestamp: 1659979434
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    abs_diff = Float64[]\n    for x in numbers\n        abs_diff += abs(x\
    \ - mean(x))\n    end\n    return mean(abs_diff)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0, 2.0])\
    \ == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmp0pggi269.jl:18

    '
  stdout: "test set: Error During Test at /tmp/tmp0pggi269.jl:21\n  Test threw exception\n\
    \  Expression: candidate([1.0, 2.0]) == 0.5\n  UndefVarError: mean not defined\n\
    \  Stacktrace:\n   [1] mean_absolute_deviation(numbers::Vector{Float64})\n   \
    \  @ Main /tmp/tmp0pggi269.jl:12\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp0pggi269.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp0pggi269.jl:20\ntest set:\
    \ Error During Test at /tmp/tmp0pggi269.jl:22\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 3.0, 4.0]) == 1.0\n  UndefVarError: mean not defined\n\
    \  Stacktrace:\n   [1] mean_absolute_deviation(numbers::Vector{Float64})\n   \
    \  @ Main /tmp/tmp0pggi269.jl:12\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp0pggi269.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp0pggi269.jl:20\ntest set:\
    \ Error During Test at /tmp/tmp0pggi269.jl:23\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2\n  UndefVarError: mean not defined\n\
    \  Stacktrace:\n   [1] mean_absolute_deviation(numbers::Vector{Float64})\n   \
    \  @ Main /tmp/tmp0pggi269.jl:12\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp0pggi269.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp0pggi269.jl:20\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  timestamp: 1659979436
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum_of_squares = 0.\n    for number in numbers\n        sum_of_squares\
    \ += (number - mean(number)) ^ 2\n    end\n    return sqrt(sum_of_squares/length(numbers))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\t\
    @test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0]) ==\
    \ 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpdvim275u.jl:18

    '
  stdout: "test set: Error During Test at /tmp/tmpdvim275u.jl:21\n  Test threw exception\n\
    \  Expression: candidate([1.0, 2.0]) == 0.5\n  UndefVarError: mean not defined\n\
    \  Stacktrace:\n   [1] mean_absolute_deviation(numbers::Vector{Float64})\n   \
    \  @ Main /tmp/tmpdvim275u.jl:12\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpdvim275u.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpdvim275u.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpdvim275u.jl:22\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 3.0, 4.0]) == 1.0\n  UndefVarError: mean not defined\n\
    \  Stacktrace:\n   [1] mean_absolute_deviation(numbers::Vector{Float64})\n   \
    \  @ Main /tmp/tmpdvim275u.jl:12\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpdvim275u.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpdvim275u.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpdvim275u.jl:23\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2\n  UndefVarError: mean not defined\n\
    \  Stacktrace:\n   [1] mean_absolute_deviation(numbers::Vector{Float64})\n   \
    \  @ Main /tmp/tmpdvim275u.jl:12\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpdvim275u.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpdvim275u.jl:20\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  timestamp: 1659979436
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    \n    absDiff = numbers .- mean(numbers)\n    absDiff = absDiff ./ sum(absDiff)\n\
    \    return mean(absDiff) \nend \nusing Test\n\n@testset begin\n\ncandidate =\
    \ mean_absolute_deviation;\n\t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpi8zhdd_1.jl:17

    '
  stdout: "test set: Error During Test at /tmp/tmpi8zhdd_1.jl:20\n  Test threw exception\n\
    \  Expression: candidate([1.0, 2.0]) == 0.5\n  UndefVarError: mean not defined\n\
    \  Stacktrace:\n   [1] mean_absolute_deviation(numbers::Vector{Float64})\n   \
    \  @ Main /tmp/tmpi8zhdd_1.jl:11\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpi8zhdd_1.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpi8zhdd_1.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpi8zhdd_1.jl:21\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 3.0, 4.0]) == 1.0\n  UndefVarError: mean not defined\n\
    \  Stacktrace:\n   [1] mean_absolute_deviation(numbers::Vector{Float64})\n   \
    \  @ Main /tmp/tmpi8zhdd_1.jl:11\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpi8zhdd_1.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpi8zhdd_1.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpi8zhdd_1.jl:22\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2\n  UndefVarError: mean not defined\n\
    \  Stacktrace:\n   [1] mean_absolute_deviation(numbers::Vector{Float64})\n   \
    \  @ Main /tmp/tmpi8zhdd_1.jl:11\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpi8zhdd_1.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpi8zhdd_1.jl:19\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  timestamp: 1659979436
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    return (sum([abs(x - mean(numbers)) for x in numbers]) / length(numbers))\
    \ \nend \n</cell>\n<text>\nMean Absolute Deviation vs. Sample Size\nTo understand\
    \ the performance of our MAD vs Sample Size test, we compare these two metrics:\n\
    using Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0,\
    \ 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvwhigtda.jl:12\nin expression starting at\
    \ /tmp/tmpvwhigtda.jl:12\n"
  stdout: ''
  timestamp: 1659979434
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    numbers = convert(Vector{Float64}, numbers)\n    ma = 0.0\n    for n in\
    \ numbers\n        ma += abs(n - mean(n))\n    end\n    return ma / length(numbers)\n\
    end\n</code>\nThe MAD function works extremely well on large datasets and vectors\
    \ containing tens of thousands of floating point numbers. \n<code>\n# Calculate\
    \ Mean Absolute Deviation of a dataset and compare it with \n# the mean of the\
    \ dataset\nmean_absolute_deviation([1.0,2.0,3.0,4.0]) \n# 1.0\n</code>\n<|/ a\
    \ dscore=4 |>\n<| a |>\nI used the above answers but with R:\n<code>\n# calculate\
    \ mean from dataset\nmean <- rowMeans(dat)\nusing Test\n\n@testset begin\n\ncandidate\
    \ = mean_absolute_deviation;\n\t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1cep1yqp.jl:17\nin expression starting at\
    \ /tmp/tmp1cep1yqp.jl:17\n"
  stdout: ''
  timestamp: 1659979434
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for n in numbers:\n        sum = sum + abs(n - sum)\n \
    \   return sum / length(numbers)\nend\n</cell>\n<code language=julia-1.1>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0,\
    \ 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6awcqf83.jl:12\nin expression starting at\
    \ /tmp/tmp6awcqf83.jl:12\n"
  stdout: ''
  timestamp: 1659979434
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n  local x = numbers\n  local mean = x[1]\n  for x in x[2:end]\n    local d\
    \ = x - mean\n    local new_mean = mean + d * d\n    mean =  new_mean / 2.0\n\
    \  end\n  return mean\nend\n</cell>\n<text>\nMean Absolute Deviation is the average\
    \ absolute difference between each element and a centerpoint (mean in this case):\n\
    using Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0,\
    \ 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpj41g4s1b.jl:19\nin expression starting at\
    \ /tmp/tmpj41g4s1b.jl:19\n"
  stdout: ''
  timestamp: 1659979434
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    median = mean(numbers)\n    sum = 0\n    for i in numbers\n        sum\
    \ += abs(i-median)\n    end\n    return sum/length(numbers)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0,\
    \ 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpjpsx97md.jl:19

    '
  stdout: "test set: Error During Test at /tmp/tmpjpsx97md.jl:22\n  Test threw exception\n\
    \  Expression: candidate([1.0, 2.0]) == 0.5\n  UndefVarError: mean not defined\n\
    \  Stacktrace:\n   [1] mean_absolute_deviation(numbers::Vector{Float64})\n   \
    \  @ Main /tmp/tmpjpsx97md.jl:10\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpjpsx97md.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpjpsx97md.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpjpsx97md.jl:23\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 3.0, 4.0]) == 1.0\n  UndefVarError: mean not defined\n\
    \  Stacktrace:\n   [1] mean_absolute_deviation(numbers::Vector{Float64})\n   \
    \  @ Main /tmp/tmpjpsx97md.jl:10\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpjpsx97md.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpjpsx97md.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpjpsx97md.jl:24\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2\n  UndefVarError: mean not defined\n\
    \  Stacktrace:\n   [1] mean_absolute_deviation(numbers::Vector{Float64})\n   \
    \  @ Main /tmp/tmpjpsx97md.jl:10\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpjpsx97md.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpjpsx97md.jl:21\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  timestamp: 1659979436
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    len = length(numbers)\n    if len < 2\n        error(\"Input vector must\
    \ have at least two elements\") \n    end\n    sum(abs2(numbers - mean(numbers)))\
    \ / len\nend\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpnba8qdrl.jl:18

    '
  stdout: "test set: Error During Test at /tmp/tmpnba8qdrl.jl:21\n  Test threw exception\n\
    \  Expression: candidate([1.0, 2.0]) == 0.5\n  UndefVarError: mean not defined\n\
    \  Stacktrace:\n   [1] mean_absolute_deviation(numbers::Vector{Float64})\n   \
    \  @ Main /tmp/tmpnba8qdrl.jl:14\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpnba8qdrl.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpnba8qdrl.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpnba8qdrl.jl:22\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 3.0, 4.0]) == 1.0\n  UndefVarError: mean not defined\n\
    \  Stacktrace:\n   [1] mean_absolute_deviation(numbers::Vector{Float64})\n   \
    \  @ Main /tmp/tmpnba8qdrl.jl:14\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpnba8qdrl.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpnba8qdrl.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpnba8qdrl.jl:23\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2\n  UndefVarError: mean not defined\n\
    \  Stacktrace:\n   [1] mean_absolute_deviation(numbers::Vector{Float64})\n   \
    \  @ Main /tmp/tmpnba8qdrl.jl:14\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpnba8qdrl.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpnba8qdrl.jl:20\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  timestamp: 1659979436
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    MAD = 0\n    for number in numbers:\n        MAD = MAD + abs(number -\
    \ mean(number))\n    return MAD\nend #mean_absolute_deviation\n</cell>\n<code\
    \ language=julia-0.4>\n#To use this function, uncomment it below and run the cell\n\
    #@code_native(pyfunc, pyfunc_arguments)\n#pyfunc(pyfunc_arguments)\nmean_absolute_deviation([1,2,3])\n\
    </cell>\n<code language=julia-0.4>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = mean_absolute_deviation;\n\t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp62sq8vdh.jl:12\nin expression starting at\
    \ /tmp/tmp62sq8vdh.jl:12\n"
  stdout: ''
  timestamp: 1659979434
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum_abs = 0\n    for x in numbers \n        sum_abs += abs(x-mean(x))\n\
    \    \n    return sum_abs / length(numbers)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0, 2.0]) == 0.5)\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp7zfvgiyp.jl:9\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp7zfvgiyp.jl:1\n\
    in expression starting at /tmp/tmp7zfvgiyp.jl:1\n"
  stdout: ''
  timestamp: 1659979434
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    return mean(abs.(numbers - mean(numbers)))\nend\n</cell>\n<text>\nNow,\
    \ let's try it out with some numbers:\nusing Test\n\n@testset begin\n\ncandidate\
    \ = mean_absolute_deviation;\n\t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxu0uef7u.jl:12\nin expression starting at\
    \ /tmp/tmpxu0uef7u.jl:12\n"
  stdout: ''
  timestamp: 1659979435
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    \"\"\"\n    Mean Absolute Deviation calculation\n    \"\"\"\n    sum =\
    \ 0.0\n    N = length(numbers)\n    for n in numbers do\n        sum = sum + abs\
    \ (n)\n    end\n    return sum/N\nend\n</cell>\n<code language=julia-1.0>\nmean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n</cell>\n<text>\nMean Absolute Error (MAE) function\nusing\
    \ Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0,\
    \ 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid \"do\" syntax\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp0ko2ioup.jl:15\nin expression starting at /tmp/tmp0ko2ioup.jl:15\n"
  stdout: ''
  timestamp: 1659979435
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n\"\"\"\n    Calculate the Mean Absolute Deviation (MAD) of a dataset.\n  \
    \  MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0,\
    \ 4.0])\n    1.0\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp197_ffgo.jl:9\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp197_ffgo.jl:1\n\
    in expression starting at /tmp/tmp197_ffgo.jl:1\n"
  stdout: ''
  timestamp: 1659979435
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n  mean_number = mean(numbers)\n  mad =  sum((numbers-mean_number)^2)\n  return\
    \ mad/length(numbers)\nend\n</cell>\n<code language=julia-1.3>\n@testset \"mean_absolute_deviation\"\
    \ begin\n  numbers = [1, 2, 3, 4, 5]\n  @test mean_absolute_deviation(numbers)\
    \ == 1\n  @test mean_absolute_deviation(numbers) == 1.5\n  @test mean_absolute_deviation(numbers)\
    \ == 2\n  @test mean_absolute_deviation(numbers) == 2.5\n  @test mean_absolute_deviation(numbers)\
    \ == 3\n  @test mean_absolute_deviation(numbers) == 3.5\n  @test mean_absolute_deviation(numbers)\
    \ == 4\n  @test mean_absolute_deviation(numbers) == 4.5\n  @test mean_absolute_deviation(numbers)\
    \ == 5\nend\n</cell>\n<code language=julia-1.3>\n@testset \"mean_absolute_deviation\"\
    \ begin\n  numbers = [1, 2, 3, 4, 5]\n  @test mean_absolute_deviation(numbers)\
    \ == mean(numbers)\nend\n</cell>\n<text>\nMedian Absolute Deviation\nMedian Absolute\
    \ Deviation in Julia can be implemented as follows\nusing Test\n\n@testset begin\n\
    \ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0, 2.0]) == 0.5)\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmm77wt6i.jl:14\nin expression starting at\
    \ /tmp/tmpmm77wt6i.jl:14\n"
  stdout: ''
  timestamp: 1659979436
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    return sqrt(mean(abs2(numbers - mean(numbers))))\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0,\
    \ 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmplfcp9lbl.jl:14

    '
  stdout: "test set: Error During Test at /tmp/tmplfcp9lbl.jl:17\n  Test threw exception\n\
    \  Expression: candidate([1.0, 2.0]) == 0.5\n  UndefVarError: mean not defined\n\
    \  Stacktrace:\n   [1] mean_absolute_deviation(numbers::Vector{Float64})\n   \
    \  @ Main /tmp/tmplfcp9lbl.jl:10\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmplfcp9lbl.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmplfcp9lbl.jl:16\ntest set:\
    \ Error During Test at /tmp/tmplfcp9lbl.jl:18\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 3.0, 4.0]) == 1.0\n  UndefVarError: mean not defined\n\
    \  Stacktrace:\n   [1] mean_absolute_deviation(numbers::Vector{Float64})\n   \
    \  @ Main /tmp/tmplfcp9lbl.jl:10\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmplfcp9lbl.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmplfcp9lbl.jl:16\ntest set:\
    \ Error During Test at /tmp/tmplfcp9lbl.jl:19\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2\n  UndefVarError: mean not defined\n\
    \  Stacktrace:\n   [1] mean_absolute_deviation(numbers::Vector{Float64})\n   \
    \  @ Main /tmp/tmplfcp9lbl.jl:10\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmplfcp9lbl.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmplfcp9lbl.jl:16\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  timestamp: 1659979437
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    \"\"\" This function calculates mean absolute deviation (MAD) \n    of\
    \ a dataset \"\"\"\n    \n    size = length(numbers)\n    return sum((numbers\
    \ - mean(numbers)).^2, 1/size) - mean(numbers.^2, 1/size)\nusing Test\n\n@testset\
    \ begin\n\ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0, 2.0])\
    \ == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpbigz27tp.jl:9\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpbigz27tp.jl:1\n\
    in expression starting at /tmp/tmpbigz27tp.jl:1\n"
  stdout: ''
  timestamp: 1659979436
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n</code>\nI used this function to calculate the average deviation for the whole\
    \ dataset, and plot the results:\n<code>\n# Plotting \nscatter(vector, deviations)\n\
    plot!(means, deviations)\n</code>\nAnd the results are shown below:\n<|/ a dscore=1\
    \ |>\n<| a dscore=0 |>\nOne way to do this would be to use cumsum from the base\
    \ package to accumulate running sum of square deviation from mean. Then use cumprod\
    \ to get the running product of deviation from mean:\n<code>\nimport Base.cumsum\n\
    import Base.cumprod\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2vukh9my.jl:10\nin expression starting at\
    \ /tmp/tmp2vukh9my.jl:10\n"
  stdout: ''
  timestamp: 1659979436
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    \n    # initialize sum\n    sum =0.0\nusing Test\n\n@testset begin\n\n\
    candidate = mean_absolute_deviation;\n\t@test(candidate([1.0, 2.0]) == 0.5)\n\t\
    @test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0,\
    \ 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp0jgvluvf.jl:9\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp0jgvluvf.jl:1\n\
    in expression starting at /tmp/tmp0jgvluvf.jl:1\n"
  stdout: ''
  timestamp: 1659979436
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    numbers = copy(numbers)\n    length = length(numbers)\n    sum = 0.0\n\
    \    for index in 1:length\n        sum = sum + abs(numbers[index] - mean(numbers))\n\
    \    end\n    return sum / length\nend\n</code>\n<|/ a tags=julia |>\n<| c |>\n\
    This answer is incorrect, because `mean` is not applied to a vector. `mean(numbers)`\
    \ will compute an element of the vector `numbers` so you end up computing the\
    \ mean of `numbers` itself.\n<|/ c |>\n<| c |>\nThanks for your comment. I updated\
    \ the solution and I hope that it is now correct.\n<|/ c |>\n<| c |>\nThis is\
    \ now correct.\n<|/ c |>\n<| a |>\nYou can achieve this easily with the Statistics\
    \ package:\n<code>\njulia> using Statistics\nusing Test\n\n@testset begin\n\n\
    candidate = mean_absolute_deviation;\n\t@test(candidate([1.0, 2.0]) == 0.5)\n\t\
    @test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0,\
    \ 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_0h5x53y.jl:18\nin expression starting at\
    \ /tmp/tmp_0h5x53y.jl:18\n"
  stdout: ''
  timestamp: 1659979436
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    return (numbers - mean(numbers)) .^ 2 ./ sqrt(length(numbers)) \nend \n\
    </code>\n<|/ a dscore=2 |>\n<| a dscore=1 |>\n<code>\nusing Statistics\nusing\
    \ LinearAlgebra\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8khd7h4t.jl:12\nin expression starting at\
    \ /tmp/tmp8khd7h4t.jl:12\n"
  stdout: ''
  timestamp: 1659979436
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    abs_devs = abs(numbers - mean(numbers))\n    return mean(abs_devs)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0,\
    \ 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpabz48bah.jl:15

    '
  stdout: "test set: Error During Test at /tmp/tmpabz48bah.jl:18\n  Test threw exception\n\
    \  Expression: candidate([1.0, 2.0]) == 0.5\n  UndefVarError: mean not defined\n\
    \  Stacktrace:\n   [1] mean_absolute_deviation(numbers::Vector{Float64})\n   \
    \  @ Main /tmp/tmpabz48bah.jl:10\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpabz48bah.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpabz48bah.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpabz48bah.jl:19\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 3.0, 4.0]) == 1.0\n  UndefVarError: mean not defined\n\
    \  Stacktrace:\n   [1] mean_absolute_deviation(numbers::Vector{Float64})\n   \
    \  @ Main /tmp/tmpabz48bah.jl:10\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpabz48bah.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpabz48bah.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpabz48bah.jl:20\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2\n  UndefVarError: mean not defined\n\
    \  Stacktrace:\n   [1] mean_absolute_deviation(numbers::Vector{Float64})\n   \
    \  @ Main /tmp/tmpabz48bah.jl:10\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpabz48bah.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpabz48bah.jl:17\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  timestamp: 1659979437
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n  sum(abs2(numbers - mean(numbers)) / length(numbers)) / length(numbers)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\t\
    @test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0]) ==\
    \ 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmp6ngihtko.jl:14

    '
  stdout: "test set: Error During Test at /tmp/tmp6ngihtko.jl:17\n  Test threw exception\n\
    \  Expression: candidate([1.0, 2.0]) == 0.5\n  UndefVarError: mean not defined\n\
    \  Stacktrace:\n   [1] mean_absolute_deviation(numbers::Vector{Float64})\n   \
    \  @ Main /tmp/tmp6ngihtko.jl:10\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp6ngihtko.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp6ngihtko.jl:16\ntest set:\
    \ Error During Test at /tmp/tmp6ngihtko.jl:18\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 3.0, 4.0]) == 1.0\n  UndefVarError: mean not defined\n\
    \  Stacktrace:\n   [1] mean_absolute_deviation(numbers::Vector{Float64})\n   \
    \  @ Main /tmp/tmp6ngihtko.jl:10\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp6ngihtko.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp6ngihtko.jl:16\ntest set:\
    \ Error During Test at /tmp/tmp6ngihtko.jl:19\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2\n  UndefVarError: mean not defined\n\
    \  Stacktrace:\n   [1] mean_absolute_deviation(numbers::Vector{Float64})\n   \
    \  @ Main /tmp/tmp6ngihtko.jl:10\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp6ngihtko.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp6ngihtko.jl:16\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  timestamp: 1659979438
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n  sum::Float64 = 0.0\n  for n in numbers\n    sum += abs{n} - mean(n)\n  end\n\
    \  return(sum/length(numbers))\nend\n  \n  \nusing Test\n\n@testset begin\n\n\
    candidate = mean_absolute_deviation;\n\t@test(candidate([1.0, 2.0]) == 0.5)\n\t\
    @test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0,\
    \ 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmp6m8cop9g.jl:20

    '
  stdout: "test set: Error During Test at /tmp/tmp6m8cop9g.jl:23\n  Test threw exception\n\
    \  Expression: candidate([1.0, 2.0]) == 0.5\n  TypeError: in Type{...} expression,\
    \ expected UnionAll, got a value of type typeof(abs)\n  Stacktrace:\n   [1] mean_absolute_deviation(numbers::Vector{Float64})\n\
    \     @ Main /tmp/tmp6m8cop9g.jl:12\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp6m8cop9g.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp6m8cop9g.jl:22\ntest set:\
    \ Error During Test at /tmp/tmp6m8cop9g.jl:24\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 3.0, 4.0]) == 1.0\n  TypeError: in Type{...} expression,\
    \ expected UnionAll, got a value of type typeof(abs)\n  Stacktrace:\n   [1] mean_absolute_deviation(numbers::Vector{Float64})\n\
    \     @ Main /tmp/tmp6m8cop9g.jl:12\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp6m8cop9g.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp6m8cop9g.jl:22\ntest set:\
    \ Error During Test at /tmp/tmp6m8cop9g.jl:25\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2\n  TypeError: in Type{...} expression,\
    \ expected UnionAll, got a value of type typeof(abs)\n  Stacktrace:\n   [1] mean_absolute_deviation(numbers::Vector{Float64})\n\
    \     @ Main /tmp/tmp6m8cop9g.jl:12\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp6m8cop9g.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp6m8cop9g.jl:22\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  timestamp: 1659979437
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    return (Float64)mean(abs.(numbers-mean(numbers)))\nend\n</cell>\n<text>\n\
    Mean Absolute Deviation on a Dataset\nusing Test\n\n@testset begin\n\ncandidate\
    \ = mean_absolute_deviation;\n\t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpuaaudt3m.jl:12\nin expression starting at\
    \ /tmp/tmpuaaudt3m.jl:12\n"
  stdout: ''
  timestamp: 1659979436
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    \"\"\" Calculate Mean Absolute Deviation around a mean of a given dataset.\n\
    \    Mean Absolute Deviation is the average absolute difference between each\n\
    \    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean\
    \ |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\
    \nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0,\
    \ 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpfeutzyig.jl:9\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpfeutzyig.jl:1\n\
    in expression starting at /tmp/tmpfeutzyig.jl:1\n"
  stdout: ''
  timestamp: 1659979436
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    # Calculate mean value\n    m_x = np.mean(numbers)\nusing Test\n\n@testset\
    \ begin\n\ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0, 2.0])\
    \ == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmprm_fho65.jl:9\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmprm_fho65.jl:1\n\
    in expression starting at /tmp/tmprm_fho65.jl:1\n"
  stdout: ''
  timestamp: 1659979436
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    mean_number = mean(numbers)\n    abs_devs = abs_diff(numbers, mean_number)\n\
    \    ma = mean(abs_devs)\n    return ma\nusing Test\n\n@testset begin\n\ncandidate\
    \ = mean_absolute_deviation;\n\t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpq6mytelk.jl:9\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpq6mytelk.jl:1\n\
    in expression starting at /tmp/tmpq6mytelk.jl:1\n"
  stdout: ''
  timestamp: 1659979436
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for i in numbers\n        sum += abs(i - mean(numbers))\n\
    \    end\n    return sum/length(numbers)\nend\n</code>\nThis function is written\
    \ in Julia language (see the Julia documentation here).\n<|/ a dscore=2 tags=statistics,julia,arrays\
    \ |>\n<| c |>\nthanks, although not exactly what I wanted, this is nice and clean\
    \ and easy to understand\n<|/ c |>\n<| c |>\nYou're welcome. This is not exactly\
    \ what you wanted, but it's what you're looking for!\n<|/ c |>\n<| a dscore=1\
    \ tags=statistics,julia,arrays |>\nThe first part is easy. Just get the mean using\
    \ sum and len. \n<code>\nmean(x) = sum(x)/length(x)\n</code>\nYou get the difference\
    \ between each number and the mean with map, and then take the mean of the map\
    \ result. \n<code>\nmean(map(abs(x-mean(x)), x))\n</code>\n<|/ a |>\n<| c |>\n\
    thank you! I have used your solution but edited it slightly.\n<|/ c |>\n<| a tags=statistics,julia,arrays\
    \ |>\n<code>\nusing Statistics\nusing Distributions\nusing StatsPlots\nusing DataFrames\n\
    using GLM\nusing CSV\nusing StatsBase\nusing Test\n\n@testset begin\n\ncandidate\
    \ = mean_absolute_deviation;\n\t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmm8_o8zd.jl:16\nin expression starting at\
    \ /tmp/tmpmm8_o8zd.jl:16\n"
  stdout: ''
  timestamp: 1659979436
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    \"\"\"Calculate Mean Absolute Deviation from vector \"\"\"\n    diff =\
    \ numbers - mean(numbers)\n    MAD = sum(abs2(diff)) / (length(numbers)) \n  \
    \  return MAD\nend\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmphu55ndcr.jl:17

    '
  stdout: "test set: Error During Test at /tmp/tmphu55ndcr.jl:20\n  Test threw exception\n\
    \  Expression: candidate([1.0, 2.0]) == 0.5\n  UndefVarError: mean not defined\n\
    \  Stacktrace:\n   [1] mean_absolute_deviation(numbers::Vector{Float64})\n   \
    \  @ Main /tmp/tmphu55ndcr.jl:11\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmphu55ndcr.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmphu55ndcr.jl:19\ntest set:\
    \ Error During Test at /tmp/tmphu55ndcr.jl:21\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 3.0, 4.0]) == 1.0\n  UndefVarError: mean not defined\n\
    \  Stacktrace:\n   [1] mean_absolute_deviation(numbers::Vector{Float64})\n   \
    \  @ Main /tmp/tmphu55ndcr.jl:11\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmphu55ndcr.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmphu55ndcr.jl:19\ntest set:\
    \ Error During Test at /tmp/tmphu55ndcr.jl:22\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2\n  UndefVarError: mean not defined\n\
    \  Stacktrace:\n   [1] mean_absolute_deviation(numbers::Vector{Float64})\n   \
    \  @ Main /tmp/tmphu55ndcr.jl:11\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmphu55ndcr.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmphu55ndcr.jl:19\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  timestamp: 1659979438
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n\tsum(abs2, numbers)/length(numbers)\nend\n</cell>\n<text>\nNow let's use\
    \ our new mean_absolute_deviation function defined above:\nusing Test\n\n@testset\
    \ begin\n\ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0, 2.0])\
    \ == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcrz54j4q.jl:12\nin expression starting at\
    \ /tmp/tmpcrz54j4q.jl:12\n"
  stdout: ''
  timestamp: 1659979437
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    abs_diffs = map abs  (numbers-mean(numbers))\n    return mean(abs_diffs)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\t\
    @test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0]) ==\
    \ 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"function\" at /tmp/tmp0j_ww2kg.jl:9 expected\
    \ \"end\", got \"abs\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp0j_ww2kg.jl:10\n\
    in expression starting at /tmp/tmp0j_ww2kg.jl:10\n"
  stdout: ''
  timestamp: 1659979437
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    if length(numbers) == 0 \n        error(\"Not enough numbers. Cannot calculate\
    \ mean absolute deviation\")\n    end\n    \n    mean =  mean(numbers)\n    \n\
    \    return mean((numbers .- mean)\n            .* (numbers .- mean)) \nend\n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \nusing Test\n\n@testset\
    \ begin\n\ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0, 2.0])\
    \ == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpx58m5h2e.jl:251

    '
  stdout: "test set: Error During Test at /tmp/tmpx58m5h2e.jl:254\n  Test threw exception\n\
    \  Expression: candidate([1.0, 2.0]) == 0.5\n  UndefVarError: mean not defined\n\
    \  Stacktrace:\n   [1] mean_absolute_deviation(numbers::Vector{Float64})\n   \
    \  @ Main /tmp/tmpx58m5h2e.jl:14\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpx58m5h2e.jl:254 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpx58m5h2e.jl:253\ntest set:\
    \ Error During Test at /tmp/tmpx58m5h2e.jl:255\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 3.0, 4.0]) == 1.0\n  UndefVarError: mean not defined\n\
    \  Stacktrace:\n   [1] mean_absolute_deviation(numbers::Vector{Float64})\n   \
    \  @ Main /tmp/tmpx58m5h2e.jl:14\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpx58m5h2e.jl:255 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpx58m5h2e.jl:253\ntest set:\
    \ Error During Test at /tmp/tmpx58m5h2e.jl:256\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2\n  UndefVarError: mean not defined\n\
    \  Stacktrace:\n   [1] mean_absolute_deviation(numbers::Vector{Float64})\n   \
    \  @ Main /tmp/tmpx58m5h2e.jl:14\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpx58m5h2e.jl:256 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpx58m5h2e.jl:253\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  timestamp: 1659979438
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for i in numbers\n        sum += abs(i - mean(i))\n   \
    \ end\n    return sum / length(numbers)\nend\nusing Test\n\n@testset begin\n\n\
    candidate = mean_absolute_deviation;\n\t@test(candidate([1.0, 2.0]) == 0.5)\n\t\
    @test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0,\
    \ 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpgzh73uf_.jl:18

    '
  stdout: "test set: Error During Test at /tmp/tmpgzh73uf_.jl:21\n  Test threw exception\n\
    \  Expression: candidate([1.0, 2.0]) == 0.5\n  UndefVarError: mean not defined\n\
    \  Stacktrace:\n   [1] mean_absolute_deviation(numbers::Vector{Float64})\n   \
    \  @ Main /tmp/tmpgzh73uf_.jl:12\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpgzh73uf_.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpgzh73uf_.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpgzh73uf_.jl:22\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 3.0, 4.0]) == 1.0\n  UndefVarError: mean not defined\n\
    \  Stacktrace:\n   [1] mean_absolute_deviation(numbers::Vector{Float64})\n   \
    \  @ Main /tmp/tmpgzh73uf_.jl:12\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpgzh73uf_.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpgzh73uf_.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpgzh73uf_.jl:23\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2\n  UndefVarError: mean not defined\n\
    \  Stacktrace:\n   [1] mean_absolute_deviation(numbers::Vector{Float64})\n   \
    \  @ Main /tmp/tmpgzh73uf_.jl:12\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpgzh73uf_.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpgzh73uf_.jl:20\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  timestamp: 1659979439
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    # average of absolute differences between points\n    number_mean = mean(numbers)\n\
    \    abs = map(abs, numbers)\n    return sum(abs) / length(abs) \nend\nusing Test\n\
    \n@testset begin\n\ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0,\
    \ 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpojvtz60m.jl:17

    '
  stdout: "test set: Error During Test at /tmp/tmpojvtz60m.jl:20\n  Test threw exception\n\
    \  Expression: candidate([1.0, 2.0]) == 0.5\n  UndefVarError: mean not defined\n\
    \  Stacktrace:\n   [1] mean_absolute_deviation(numbers::Vector{Float64})\n   \
    \  @ Main /tmp/tmpojvtz60m.jl:11\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpojvtz60m.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpojvtz60m.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpojvtz60m.jl:21\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 3.0, 4.0]) == 1.0\n  UndefVarError: mean not defined\n\
    \  Stacktrace:\n   [1] mean_absolute_deviation(numbers::Vector{Float64})\n   \
    \  @ Main /tmp/tmpojvtz60m.jl:11\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpojvtz60m.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpojvtz60m.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpojvtz60m.jl:22\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2\n  UndefVarError: mean not defined\n\
    \  Stacktrace:\n   [1] mean_absolute_deviation(numbers::Vector{Float64})\n   \
    \  @ Main /tmp/tmpojvtz60m.jl:11\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpojvtz60m.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpojvtz60m.jl:19\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  timestamp: 1659979438
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for i in numbers\n        sum = sum + abs(i - mean(x))\n\
    \    end\n    return sum / length(numbers)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0, 2.0]) == 0.5)\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpydj2bz6h.jl:18

    '
  stdout: "test set: Error During Test at /tmp/tmpydj2bz6h.jl:21\n  Test threw exception\n\
    \  Expression: candidate([1.0, 2.0]) == 0.5\n  UndefVarError: mean not defined\n\
    \  Stacktrace:\n   [1] mean_absolute_deviation(numbers::Vector{Float64})\n   \
    \  @ Main /tmp/tmpydj2bz6h.jl:12\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpydj2bz6h.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpydj2bz6h.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpydj2bz6h.jl:22\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 3.0, 4.0]) == 1.0\n  UndefVarError: mean not defined\n\
    \  Stacktrace:\n   [1] mean_absolute_deviation(numbers::Vector{Float64})\n   \
    \  @ Main /tmp/tmpydj2bz6h.jl:12\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpydj2bz6h.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpydj2bz6h.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpydj2bz6h.jl:23\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2\n  UndefVarError: mean not defined\n\
    \  Stacktrace:\n   [1] mean_absolute_deviation(numbers::Vector{Float64})\n   \
    \  @ Main /tmp/tmpydj2bz6h.jl:12\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpydj2bz6h.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpydj2bz6h.jl:20\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  timestamp: 1659979439
- exit_code: 1
  program: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    center = mean(numbers)\n    return sum(abs2(number - center) for number\
    \ in numbers) / length(numbers)\nend\n</cell>\n<text>\n4.5.2 Mean Absolute Error\n\
    In statistics, Mean Absolute Error or MAE is a measurement of how far the errors\
    \ between two variables are from a mean. This quantity can be thought of as distance,\
    \ with the mean (or median) being our reference quantity.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0, 2.0])\
    \ == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpenum_2cw.jl:13\nin expression starting at\
    \ /tmp/tmpenum_2cw.jl:13\n"
  stdout: ''
  timestamp: 1659979437
