name: HumanEval_140_fix_spaces
language: jl
prompt: "\"\"\"\n    Given a string text, replace all spaces in it with underscores,\
  \ \n    and if a string has more than 2 consecutive spaces, \n    then replace all\
  \ consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\
  \n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example\
  \ 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\
  \n    \"\"\"\nfunction fix_spaces(text::String)::String \n"
tests: "using Test\n\n@testset begin\n\ncandidate = fix_spaces;\n\t@test(candidate(\"\
  Example\") == \"Example\")\n\t@test(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\"\
  )\n\t@test(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\
  )\n\t@test(candidate(\"Exa   mple\") == \"Exa-mple\")\n\t@test(candidate(\"   Exa\
  \ 1 2 2 mple\") == \"-Exa_1_2_2_mple\")\nend\n"
completions: ["    local s = text\n    local i, j = 1, length(s)\n    while i <= j\
    \ do\n        if s[i] == \" \" then\n            s[i] = \"_\"\n        elseif\
    \ i == j then\n            if s[i-1] == \" \" and s[i-2] == \" \" then\n     \
    \           s[i] = \"-\"\n            end\n        end\n        i = i + 1\n  \
    \  end\n    return s\nend\n</code>\n<|/ a dscore=0 |>\n<| a |>\nI wrote a short\
    \ python script that will perform this operation in a batch mode and will generate\
    \ a new text file with the corrected text.\n<code>\n#!/usr/bin/env python\nimport\
    \ re", "    # Replace all spaces with underscores\n    text:=text\n    text:=replace(text,\
    \ \" \", \"_\")", "    replaced =  text\n    replaced = replaced.replace(\" \"\
    , \"_\") \n    replaced = replaced.replace(\" \", \"-\") \n    if replaced ==\
    \ \"_\"\n        replaced = text\n    endpos = length(text) \n    while replaced\
    \ == text\n        replaced = replaced[endpos:end]\n    endpos = length(replaced)\
    \ \n    replaced = replaced[1:endpos-1]\n    return replaced\n</code>\n<|/ a |>\n\
    <| a tags=julia |>\nHere is a nice way to remove extra space (including tab)\n\
    <code>\njulia> a = \"       abc         \";\njulia> a = \"a   b    c       \"\
    ;\njulia> replace.(\" $a \", r\"^\\s+\", \"\")\n\"abc\"\n</code>\nThe above removes\
    \ leading and trailing spaces. \n<code>\njulia> a = \"  abc\";\njulia> replace.(\"\
    \ $a \", r\"^\\s+\", \"\")\n\"abc\"\n</code>\nThis removes only leading and trailing\
    \ spaces.\n<code>\njulia> a = \"  abc  \";\njulia> replace.(\" $a \", r\"^\\s+\"\
    , \"\")\n\"abc\"\n</code>\nThis removes only leading and trailing spaces.\n<code>\n\
    julia> a = \"  abc \";\njulia> replace.(\" $a \", r\"^\\s+\", \"\")\n\"abc \"\n\
    </code>\nThis removes only leading and trailing spaces.\n<code>\njulia> a = \"\
    \  abc \";\njulia> replace.(\" $a \", r\"^\\s+\", \"\")\n\"abc\"\n</code>\nThis\
    \ removes only leading and trailing spaces.\n<code>\njulia> a = \"  abc  \";\n\
    julia> replace.(\" $a \", r\"^\\s+\", \"\")\n\"abc\"\n</code>\nThis removes only\
    \ leading and trailing spaces.\n<code>\njulia> a = \"  abc  \";\njulia> replace.(\"\
    \ $a \", r\"^\\s+\", \"\")\n\"abc\"\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis\
    \ solution does not work if the string contains a tab as in a = \"a\\tb\", a is\
    \ replaced by an empty string, and a = \"a\\ttb\" replaces a = \"a\\t\"\n<|/ c\
    \ |>\n<| a |>\nJulia 0.6 has some new functions for this\n<code>\njulia> a = \"\
    a b\"\n\"a b\"", "    if length(text) > 2 \n        then\n            \n     \
    \       local firstSpaceIndex = findFirst(\" \", text)\n            local lastSpaceIndex\
    \ = findFirst(\" \", text, last(text))\n            \n            if firstSpaceIndex\
    \ == -1 || lastSpaceIndex == -1\n                || firstSpaceIndex > lastSpaceIndex\n\
    \            then\n                return text\n            else\n           \
    \     local result = \"_\"\n                for i = firstSpaceIndex, to lastSpaceIndex,\
    \ -1\n                do\n                    result = result .. \"_\"\n     \
    \           end\n                return result .. text[lastSpaceIndex:end]\n \
    \           end\n        else\n            return text\n        end\n    end\n\
    end\n</cell>\n<code language=julia-0.5>\n\"\"\"\n    fix_underscores(text::String)",
  "    text = replace(text, '[ ]+', '_')\n    text = replace(text, ' {2,}', ' - ')\n\
    \    text = replace(text, ' {2,}', '_')\n    return text\nend", "    \n    \"\
    \ Replace spaces with underscores \"\n    return replace(text, \"\\ \", \" \"\
    )\n    \n    \" Replace multiple spaces with a single dash \"\n    return replace(text,\
    \ \"  \", \" \")\n    \nend\n</code>\n<|/ a dscore=2 |>\n<| a |>\nIf you're using\
    \ julia v0.7, you can do this using Strings with regular expressions.\nHere's\
    \ a sample that demonstrates:\n<code>\nusing Strings", "</code>\n<|/ a tags=replace,string,regex,julia\
    \ |>\n<| c |>\nI think the function should be called `fix_spaces` not `stripspaces`\
    \ because `stripspaces` doesn't modify the string.\n<|/ c |>\n<| c |>\n, you're\
    \ right! I fixed the answer, thanks!\n<|/ c |>\n<| a tags=replace,string,regex,julia\
    \ dscore=1 |>\nTo complement the answers of Joshua C. and Feng Yanhong, here is\
    \ a solution that also handles replacements on multiple consecutive spaces.\n\
    <code>", "    str = split(text)\n    str[1] = str[1]:replace(\" \", \"_\")\n \
    \   if str[1] != \"\" && !str[1]:isspace()\n        str = join(str)\n    str =\
    \ str[1]:replace(\" \", \"-\")\n    return str\nend", "</code>\n<code>\n    \"\
    \"\"\n    Replace underscores with spaces, if there are more than 2 consecutive\
    \ spaces\n    \"\"\"", "\"\"\"\n    Given a string text, replace all spaces in\
    \ it with underscores, \n    and if a string has more than 2 consecutive spaces,\
    \ \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\"\
    \ Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\
    \n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\"\
    \ Example 3\")\n    \"_Example-3\"\n    \"\"\"\nend", "    \n    if text == \"\
    \ \" return \"_\"\n    if text == \"  \" return \"_\"\n    if text == \"   \"\
    \ return \"_\"\n    if text == \" _ \" return \"_\"\n    if text == \" _ _\" return\
    \ \"_\"\n    if text == \" _ _ \" return \"_\"\n    if text == \" _ _ _\" return\
    \ \"_\"\n    if text == \" _ _ _ \" return \"_\"\n    if text == \" _ _ _ _\"\
    \ return \"_\"\n    if text == \" _ _ _ _ \" return \"_\"\n    if text == \" _\
    \ _ _ _ _\" return \"_\"\n    if text == \" _ _ _ _ _ \" return \"_\"\n    if\
    \ text == \" _ _ _ _ _ _\" return \"_\"\n    if text == \" _ _ _ _ _ _ \" return\
    \ \"_\"\n    if text == \" _ _ _ _ _ _ _\" return \"_\"\n    return text\nend\n\
    </cell>\n<text>\nThe following function remove_numbers is responsible for removing\
    \ numbers from text.", "    \n    text = replace(text,\" \",\"_\")\n    text =\
    \ replace(text,\"  \",\"_\")\n    text = replace(text,\"\\n \",\"_\")\n    return\
    \ text\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\nGiven a string text,\
    \ replace all spaces in it with underscores, \n    and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with - \n  \
    \  \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\"\
    \ Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"\
    _Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \"\"\
    \"", "    \n    modified_text = replace(replace(text, ' ' , '_'), ' ', '_')\n\
    \    modified_text = replace(modified_text, ' ' , '-')\n    modified_text = replace(modified_text,\
    \ ' ', '_')\n    \n    return modified_text", "  \n    words = split(\" \", text)\n\
    \    \n    fix_words = []\n    for i in words\n        if i !=\"\"\n         \
    \   fix_words.push(i)\n        else\n            fix_words.push(\"-\")\n    end\n\
    \    \n    return join(fix_words, \"_\")\nend\n</cell>\n<code language=julia-1.5>\n\
    ## Putting it all together", "    if text == \" \"\n        return text\n    if\
    \ text.isspace() || text.isalpha()\n        return text\n    return text.replace(\"\
    \ \", \"_\")\nend", "    replacement_text = text\n    replacement_text = replacement_text.replace(\"\
    \ \", \"_\")\n    replacement_text = replacement_text.replace(\" \", \"\")\n \
    \   replacement_text = replacement_text.replace(\"  \", \"_\")\n    return replacement_text\n\
    </code>\n<|/ a tags=haskell,string,replace,regex,replaceall |>\n<| c |>\nWhy not\
    \ just `replaceAll` in your first example?\n<|/ c |>\n<| c |>\n, replaceAll won't\
    \ work in this case because there are multiple spaces adjacent to each other.\
    \ See the OP's examples. My suggestion is what I would do if I was going to do\
    \ this by hand in GHCi.\n<|/ c |>\n<| a dscore=4 |>\nA simple recursive function\
    \ using Maybe String instead of String.\n<code>\nfixSpace :: String -> String\n\
    fixSpace \"\" = \"\"\nfixSpace \" \" \"\" = \"_\"\nfixSpace (x:xs) \n  | x ==\
    \ '_' = fixSpace xs\n  | x == '-' = fixSpace (x:xs)\n  | otherwise = x+(x:xs)\n\
    </code>\n<|/ a tags=haskell,string,replace,regex,replaceall |>\n<| a |>\n<code>\n\
    fixSpaces :: String -> String\nfixSpaces \"\" =  \"\"\nfixSpaces x | elem ' '\
    \ x = x \n            | otherwise = \"_\" ++ fixSpaces (drop 1 x)\n</code>\n<|/\
    \ a tags=haskell,string,replace,regex,replaceall dscore=3 |>\n<| c |>\nThe line\
    \ `| otherwise = fixSpaces (drop 1 x)` is superfluous, since `drop` will never\
    \ fail, and `otherwise` never runs.\n<|/ c |>\n<| a dscore=2 |>\nI wanted to give\
    \ a more general solution which covers all kinds of patterns of whitespace, e.g.\
    \ spaces, tabs, newlines, etc.\n<code>\nimport Data.Text.Lazy as L", "    \n \
    \   \"\"\"\n    This function takes in a string text and returns a \n    new string\
    \ where any spaces are replaced with a \n    hyphen and consecutive spaces with\
    \ an underscore.\n    \n    >>> fix_spaces(\"Example\")\n    \"Example\"\n   \
    \ >>> fix_spaces(\"Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\"Example\
    \ 2\")\n    \"Example_2\"\n    >>> fix_spaces(\"Example 3\")\n    \"Example_3\"\
    \n    \"\"\"\n    return text.replace(\" \",\"_\").replace(\"  \",\"_\")", " \
    \   if text == \"\"\n        \"\"\n    elseif length(text) == 1\n        replace(text,\
    \ \" \", \"_\")\n    else\n        if text(1) == \" \" && text(text-2) == \" \"\
    \n            text(2:end-1) = \"_\"\n            text(2:end) = \"\"\n        else\n\
    \            if text(1) == \" \" && text(text-2) != \" \"\n                text(2:end-1)\
    \ = \"-\"\n            end\n        end\n    end\nend\n\"\"\"\n    Given a string\
    \ text, remove all trailing spaces from it. \n    \n    >>> remove_trailing_spaces(\"\
    \ Example\")\n    \"Example\"\n    >>> remove_trailing_spaces(\" Example  \")\n\
    \    \"Example\"\n    >>> remove_trailing_spaces(\" Example  \\n\")\n    \"Example\"\
    \n    >>> remove_trailing_spaces(\"Example\\n\")\n    \"Example\"\n    \"\"\"",
  "    text = replace(replace(replace(text, \" \", \"_\"), \"  \", \"-\"), \"  \"\
    , \"_\")\n    if text contains \"-\" \n        text =  \"_\" * length(text) \n\
    \    end\n    return text\nend\n</code>\n<|/ a tags=julia,string dscore=0 |>\n\
    <| a tags=julia,string |>\nJust for completeness, here's a solution using regular\
    \ expressions:\n<code>\njulia> function fix_spaces(str)\n           re.sub(r\"\
    \ \", \"_\", str) |> \n           re.sub(r\"-+_+\", \"_\", str)\n       end\n\
    fix_spaces (generic function with 1 method)", "  text_list = split(text)\n  text_list[3]\
    \ = replace(text_list[3], \" \", \"_\")\n  return  join(text_list)\nend", "  \
    \  \n    split_spaces = text.split(\" \") \n    \n    fix_spaces_out = []\n  \
    \  \n    for i in split_spaces\n        if i != \"\"\n            fix_spaces_out.append(fix_spaces(i))\n\
    \        else\n            fix_spaces_out.push(i)\n    end\n    \n    return fix_spaces_out[1]\
    \ + \"_\" + fix_spaces_out[2]\nend", "    if text == \" \"\n    else text\nend",
  "    replaced = text.replace(' ', '_')\n    if replaced != text and replaced !=\
    \ replace(replaced, '', ''):\n        replaced = replace(replaced, '', '') \n\
    \    return replaced\n</code>\n<|/ a |>\n<| c |>\nHi, thanks for your answer,\
    \ but it doesn't work: if you try fix_spaces('Example  1') you get example_1 instead\
    \ of Example_1 :)\n<|/ c |>\n<| c |>\nI see you modified your answer, and added\
    \ the spaces :)\n<|/ c |>\n<| c |>\nYeah, I noticed it after I submitted it, but\
    \ didn't want to edit it. I just wanted to clarify that I was doing the correct\
    \ thing with my original answer.\n<|/ c |>\n<| a dscore=1 |>\nI solved this problem\
    \ in the following way:\n<code>", "    return (text:gsub(\"([ \\-])\", \"_\\\\\
    1\")):gsub(\" +\", \"_\")\nend ", "    if text == \"\" then return text\n    \n\
    \    if text.find(\"  \") > -1 then \n        space_pos = text.find(\"  \")\n\
    \        text_splits = split(text, \" \")\n        return join(text_splits[1:space_pos],\
    \ \" \")\n        \n    endl_idx = text.find(\"\\n\")\n    if endl_idx > -1 then\
    \ \n        space_pos = text.find(\"  \", endl_idx)\n        if space_pos > -1\
    \ then\n            text_splits = split(text, \" \")\n            return join(text_splits[endl_idx\
    \ + 1 .. space_pos], \" \")\n        end\n    end\n    return text\nend\n    \n\
    \"\"\"\n    Given a string text, replace all tabs in it with underscores, \n \
    \   and if a string has more than 2 consecutive tabs, \n    then replace all consecutive\
    \ tabs with - \n    \n    >>> fix_tabs(\" Example\")\n    \"Example\"\n    >>>\
    \ fix_tabs(\" Example 1\")\n    \"Example_1\"\n    >>> fix_tabs(\" Example 2\"\
    )\n    \"_Example_2\"\n    >>> fix_tabs(\" Example 3\")\n    \"_Example-3\"\n\
    \    \"\"\"", "    \"\"\"\n    Given a string text, replace all spaces in it with\
    \ underscores, \n    and if a string has more than 2 consecutive spaces, \n  \
    \  then replace all consecutive spaces with - \n    \"\"\"\n    \n    if text\
    \ == \"\"\n        then return text\n        \n    if text == \" \"\n        then\
    \ return \"-\"\n        \n    tmp = split(text)\n    \n    for i in tmp\n    \
    \    do return replace(i, \" \", \"_\")\n        \n    \nend function\n</cell>\n\
    <text>\nThe split function splits the string into an array of strings based on\
    \ the delimiter (ie, spaces in this case).", "    return replace(\" \",\"_\",text)\
    \ \nend ", "     return text.gsub!(\" \", \"_\") \nend", "    \n    \"\"\"\n \
    \   Replace all spaces with underscores and \n    all consecutive spaces with\
    \ underscores.\n    \n    >>> fix_spaces(\"Example 1\")\n    \"Example\"\n   \
    \ >>> fix_spaces(\"Example 2\")\n    \"Example_2\"\n    >>> fix_spaces(\"Example\
    \ 3\")\n    \"Example_3\"\n    \"\"\"", "    \"Replace all spaces in it with underscores\
    \ and if a string has more than 2 consecutive spaces, replace all consecutive\
    \ spaces with -\"\n    text = text.replace(\" \",\"_\")\n    return text\nend\n\
    </code>\n<|/ a dscore=0 tags=string,julia,replace,regex,replace |>\n<| a tags=string,julia,replace,regex,replace\
    \ |>\nThis should be as simple as\n<code>", "    text = replace(replace(replace(replace(text,\
    \ \" \", \"_\"), \"  \", \"_\"), \"  \", \" \"), \"  \", \" \")\n    return text\n\
    end", "    fixed_text = text\n    fixed_text = replace(fixed_text, \" \", \"_\"\
    )\n    if fixed_text !~ /^\\s*$/ \n        fixed_text = replace(fixed_text, \"\
    \ \", \"-\")\n    end\n    fixed_text\nend\n</cell>\n<code language=julia-1.5>\n\
    # Test your function \nfix_spaces(\" Example\")\n</cell>\n<text>\nImplement a\
    \ function for trimming text (removing spaces from the beginning\nand end of text)\
    \ which does not touch punctuation or emoticons.", "    # Replace spaces with\
    \ underscores\n    return replace(replace(text, \"_\", \" \"), _\" \", \"_\")",
  "    split_text = split(text)\n    fix_space_length(split_text)\n    return join(split_text)\n\
    </code>\n<|/ a |>\n<| a dscore=0 |>\nThe function you are looking for is split_string().\
    \ Here's an example of how to use it:\n<code>\njulia> str = \"hello world\"\n\"\
    hello world\"", "    \n    \n    # replace all spaces with underscores\n    return\
    \ replace(replace(replace(text, \" \", \"_\"), \"  \", \"_\"), \" \", \"-\")\n\
    end", "    \n    splits = split(text)\n    let result = []\n    \n    for i in\
    \ splits\n        if i == \"_\"\n            result[end] = i\n        else\n \
    \           result[end] = i\n            result[end+1] = i\n            end+2\n\
    \        end\n    end\n    \n    join(result)\nend\n</cell>\n<text>\nWhat if we\
    \ wanted to fix the spaces on the left and right, but not on the center ?", " \
    \   fixed = replace_spaces(text)\n    fixed = replace(fixed, \" \", \"-\")\n \
    \   fixed = replace(fixed, \" \", \"-\")\n    fixed = replace(fixed, \" \", \"\
    -\")\n    fixed = replace(fixed, \" \", \"-\")\n    return fixed\n</code>\n<|/\
    \ a |>\n<| a tags=string,lua,string dscore=2 |>\nI use this and it works great:\n\
    <code>\nlocal function replace_spaces(str)\n  local space_pos = string.find(str,\
    \ \" \")\n  if space_pos > 0 then\n    str = string.gsub(str, \" \", \"_\")\n\
    \    str = string.gsub(str, \" \", \"_\")\n  end\n  return str\nend\n</code>\n\
    <|/ a |>\n<| c |>\nThis should be the correct answer. Thanks for sharing.\n<|/\
    \ c |>\n<| a dscore=2 |>\nI've created an extension for string in Lua to replace\
    \ all spaces in string with underscores. \n<code>", "    if text == \" \"\n  \
    \      return \"_\"\n    else\n        return text\n</code>\n<|/ a tags=julia,whitespace,regex\
    \ |>\n<| c |>\nI think the `if` statement should be `if text==\" \"`.\n<|/ c |>\n\
    <| c |>\nI think you need to use `end` instead of `else`, otherwise `fix_spaces`\
    \ will return a `String` instead of `Nothing`.\n<|/ c |>\n<| a tags=julia,whitespace,regex\
    \ dscore=2 |>\nI wrote a package for string replacement which supports multiple\
    \ replacements simultaneously and also supports more efficient replacement in\
    \ some cases. Here is an example of usage:\n<code>\nusing StringReplace", "  \
    \  str = text.replace(\" \",\"_\")\n    if text.count (\" \")>2 \n        str\
    \ = str.replace (\" \",\"_\")\n    end\n    return str\nend", "    fix_spaces_(text,\
    \ \"\")\nend\n</cell>\n<code language=julia-1.4>", "  text.gsub!(\" \",\"_\")\n\
    \  if text.gsub!(\" \",\"\") <> \"\" then \n    text.gsub!(\"  \",\"\")\n  end\n\
    \  if text.gsub!(\" \",\"-\") <> \"\" then \n    text.gsub!(\"  \",\"-\")\n  end\n\
    \  return text\nend\n</cell>\n<text>\nString Length", "    words = text.split(\"\
    \ \")\n    new_words = []\n    for word in words\n        if word.length > 2 \n\
    \            word.replace(\" \",\"_\")\n        else \n            word\n    return\
    \ new_words\nend\n</cell>\n<code language=julia-0.6>\n@time fix_spaces(text1)\n\
    @time fix_spaces(text2)\n@time fix_spaces(text3)\n</cell>\n<text>\nExercise 2",
  "  \n  text = replace(text, \"  \",\"_\")\n  \n  # Make sure there are no more than\
    \ two consecutive spaces\n  # and that all consecutive spaces are replaced with\
    \ -\n  \n  no_consecutive_spaces = length(filter(x -> x == ' ', text))\n  if no_consecutive_spaces\
    \ > 2\n    no_consecutive_spaces = length(filter(x -> x == ' ', text))-1\n   \
    \ text = replace(text, '  ','-')\n  \n  \n  return text", "    fix_spaces(text,\
    \ [], \"\")\nend", "    \n    if length(text) < 2 return text\n    \n    if starts(text,\
    \ \"  \")\n        \n        space_pos = index(text, \"  \")\n        if space_pos\
    \ < length(text) - 2\n            \n            space_pos = space_pos + 1\n  \
    \          \n            text2 = text[space_pos:]\n            \n            while\
    \ starts(text2, \"  \")\n                \n                space_pos = space_pos\
    \ + 1\n                text2 = text2[2:]\n                \n            \n   \
    \         text2 = text2[1:end-1]\n            \n            text = text[1:space_pos-1]\
    \ + text2 + \"-\"\n        \n        end\n    end\n    \n    return text\nend\n\
    </code>\n<|/ a tags=string,replace,julia |>\n<| c |>\nIt should be noted that\
    \ Julia makes it easy to implement a variant of `fix_spaces` that also replaces\
    \ single spaces with underscores: `fix_spaces(text) =  replace(replace(replace(replace(text,\"\
    \  \",'_'),\"  \", '_'), '_', '\\_'), '_', '\\_')`.\n<|/ c |>\n<| c |>\nNice.\
    \  I didn't know about `replace`.\n<|/ c |>\n<| c |>\nYou probably want `str.replace`\
    \ rather than `replace`.\n<|/ c |>\n<| a |>\nThe string package has a bunch of\
    \ useful string manipulation functions. In particular, string.replace replaces\
    \ substrings (substring searching by regular expression) while stripos returns\
    \ the position of substring in a string. Also, string.rev reverses the string\
    \ while splits the string into an array of words. In your case, you can use the\
    \ former functions to replace the spaces with underscores, and split the string\
    \ by spaces to get the array:\n<code>\njulia> using Strings", "    \nend\n</code>\n\
    <|/ a tags=julia,string |>\n<| c |>\nThis does not answer the question (where\
    \ `String` is in fact a custom type), since this function does not address the\
    \ problem of consecutive spaces in the `String` itself. Also, the `end` keyword\
    \ is not necessary (I believe it has been removed with Julia 2.0).\n<|/ c |>\n\
    <| a dscore=2 |>\n<code>", "    fixed_text = replace(replace(replace(replace(replace(replace(text,\"\
    \  \",\"_\"),\"  \",\"\"),\"  \",\"\"),\"  \",\"_\"),\"  \",\"\")\n    return\
    \ fixed_text\nend", "    let replacement = \" \"\n    if text ~= text && text\
    \ contains \" \" \n        then let replacement_ = \" \" :: String\n        else\
    \ let replacement_ = \"_\" :: String\n    \n    let rec fix_spaces_ text replacement\
    \ = \n        if text ~= text && text contains \" \" \n            then let text_\
    \ = text :: String in\n                if text_ contains \"  \"\n            \
    \        then fix_spaces_ (text [1..]) replacement\n                    else fix_spaces_\
    \ (text_[1..]) replacement_\n                else fix_spaces_ (text_) replacement\n\
    \        else text\n    \n    fix_spaces_ text replacement\nend\n</cell>\n<code\
    \ language=julia-1.3>\ntest_str = \" Example\"\n</cell>\n<code language=julia-1.3>\n\
    if test_str == fix_spaces(test_str)\n    println(\"PASSED: fix_spaces worked\"\
    )\nelse\n    println(\"FAILED: fix_spaces did not work\")\nend\n</cell>\n<text>\n\
    Escape characters\nJulia allows single and double quotes (' and \") to represent\
    \ characters, which means you can include \" as part of a string.", "  local result\
    \ = text\n  if text:len() > 1 then\n    local words = split(text, \" \")\n   \
    \ for i=1,length(words) do \n      if words[i]:len() > 1 then\n        words[i]\
    \ = \"_\"\n      end\n    end\n    result = join(words, \" \")\n  end\n  return\
    \ result\nend\n\"\"\"\n    Given a string text, replace all tabs in it with underscores,\
    \ \n    and if a string has more than 2 consecutive tabs, \n    then replace all\
    \ consecutive tabs with - \n    \n    >>> fix_tabs(\" Example\")\n    \"Example\"\
    \n    >>> fix_tabs(\" Example 1\")\n    \"Example_1\"\n    >>> fix_tabs(\" Example\
    \ 2\")\n    \"_Example_2\"\n    >>> fix_tabs(\" Example 3\")\n    \"_Example-3\"\
    \n    \"\"\"", "    \"\"\"\n    Given a string text, replace all spaces in it\
    \ with underscores, \n    and if a string has more than 2 consecutive spaces,\
    \ \n    then replace all consecutive spaces with - \n    \"\"\"\n    if text ==\
    \ \"\"\n        \"\"\n    elseif length(text) > 2\n        chars = split(text,\
    \ \" \")\n        chars = chars[2:length(chars) - 1]\n        chars = join(chars,\
    \ \"_\")\n        chars\n    else\n        chars = split(text, \" \")\n      \
    \  chars = chars[2:length(chars) - 1]\n        chars = join(chars, \"-\")\n  \
    \      chars\n    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function definition\
    \ for replace_all! that replaces all occurrences of a given substring with another\
    \ substring. For example, to replace all \"the's\" with \"they's\", call replace_all!\
    \ \"the's\", \"they's\". Don't worry about escaping special characters if you\
    \ call it with a single string argument.", "    return text.gsub(\"\\\\s+\", \"\
    _\").gsub(\"\\\\s+$\", \"_\")\nend\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThe regex\
    \ `\"\\\\s+\"` is almost certainly not correct since that means \"one or more\
    \ space characters\". It means \"one or more space characters, followed by a newline,\
    \ or followed by a carriage return, or followed by a vertical tab, or followed\
    \ by a form feed\" or something similar, which will break for all kinds of whitespace\
    \ and line endings.\n<|/ c |>\n<| c |>\nThis is not the best regex. It would replace\
    \ all whitespace characters, including tabs, newlines and carriage returns and\
    \ vertical tabs. `\"[\\\\t ]+\"` would have been more correct.\n<|/ c |>\n<| c\
    \ |>\nYes, you're correct. I've updated the answer accordingly.\n<|/ c |>\n<|\
    \ c |>\nI agree with John that it's not ideal, but this works, and is straightforward\
    \ to read, so thanks!\n<|/ c |>\n<| a dscore=0 |>\nAs John said, you should not\
    \ use regular expressions. Use String::split:\n<code>", "    \n    text1 = text\n\
    \    \n    # Replace spaces with underscores\n    text1 = replace(text1, \" \"\
    , \"_\")\n    \n    # Replace consecutive spaces with -\n    text2 = replace(text1,\
    \ \" \", \"-\")\n    \n    # if the string has more than 2 consecutive spaces\n\
    \    if length(text2) > 2 \n    then\n        text3 = text2\n        \n      \
    \  # Replace all consecutive spaces with - \n        text3 = replace(text3, \"\
    \ \", \"-\")\n        \n        text4 = text2\n    \n        # Replace all consecutive\
    \ spaces with -\n        text4 = replace(text4, \" \", \"-\")\n    \n        text5\
    \ = text1\n    \n        # Replace all consecutive spaces with -\n        text5\
    \ = replace(text5, \" \", \"-\")\n    \n        text6 = text1\n    \n        #\
    \ Replace all consecutive spaces with -\n        text6 = replace(text6, \" \"\
    , \"-\")\n    \n        text7 = text1\n    \n        # Replace all consecutive\
    \ spaces with -\n        text7 = replace(text7, \" \", \"-\")\n    \n        text8\
    \ = text1\n    \n        # Replace all consecutive spaces with -\n        text8\
    \ = replace(text8, \" \", \"-\")\n    \n        text9 = text1\n    \n        #\
    \ Replace all consecutive spaces with -\n        text9 = replace(text9, \" \"\
    , \"-\")\n    \n        text10 = text1\n    \n        # Replace all consecutive\
    \ spaces with -\n        text10 = replace(text10, \" \", \"-\")\n    \n      \
    \  text11 = text1\n    \n        # Replace all consecutive spaces with -\n   \
    \     text11 = replace(text11, \" \", \"-\")\n    \n        text12 = text1\n \
    \   \n        # Replace all consecutive spaces with -\n        text12 = replace(text12,\
    \ \" \", \"-\")\n    \n        text13 = text1\n    \n        # Replace all consecutive\
    \ spaces with -\n        text13 = replace(text13, \" \", \"-\")\n    \n      \
    \  text14 = text1\n    \n        # Replace all consecutive spaces with -\n   \
    \     text14 = replace(text14, \" \", \"-\")\n    \n        text15 = text1\n \
    \   \n        # Replace all consecutive spaces with -\n        text15 = replace(text15,\
    \ \" \", \"-\")\n    \n        text16 = text1\n    \n        # Replace all consecutive\
    \ spaces with -\n        text16 = replace(text16, \" \", \"-\")\n    \n      \
    \  text17 = text1\n    \n        # Replace all consecutive spaces with -\n   \
    \     text17 = replace(text17, \" \", \"-\")\n    \n        text18 = text1\n \
    \   \n        # Replace all consecutive spaces with -\n        text18 = replace(text18,\
    \ \" \", \"-\")\n    \n        text19 = ", "    if !is_string_empty_or_whitespace(text)\n\
    \        replace(text, \"  \", \"_\")\n        replace(text, \" \", \"_\")\n \
    \       replace(text, \" \", \"-\")\n    end\n    return text\nend\n\"\"\"\n \
    \   Replace all periods with underscores\n    \n    >>> fix_periods(\"Example.\"\
    )\n    \"Example.\"\n    \"\"\"", "    if text == \"\"\n        \"\"\n    elseif\
    \ text[1] == \" \" || text[2] == \" \"\n        text.replace(text[1],'_')\n  \
    \  elseif text[1] == \" \"\n        text.replace(text[1],\"_\")\n    else\n  \
    \      text.replace(text[1],\"_\")\n    end\nend\n</cell>\n<code language=julia-0.5>",
  "    if text == \"\"\n    else \n        text = replace(\" \", \"_\", text)\n  \
    \  end\nend", "    str = text.replace(\" \",\"_\")\n    str = str.replace(\" \"\
    ,\"_\")\n    if str == \"_\" or str == \"_\\n\":\n        str = \"\"\n    return\
    \ str\nend\n</cell>\n<code language=julia-1.0>", "    l = string.split(text, '\\\
    n')\n    l = map((&fix_spaces), l)\n    l = filter((&is_space), l)\n    text =\
    \ join(l, \"\\n\")\nend\n</cell>\n<code language=julia-0.4>\n\"\"\"\n    function\
    \ replace_space(text::String, space::String)::String\n    \"\"\"\n    function\
    \ replace_space(text::String, space::String)::String\n        \n        if length(space)\
    \ < 2\n            text\n        else\n            l = string.split(text)\n  \
    \          l = map((&replace_space), l)\n            l = filter((&is_space), l)\n\
    \            text = join(l, \"\")\n        end\n    end\nend\n</cell>\n<code language=julia-0.4>\n\
    \"\"\"\n    function replace_space(text::String, space::String)::String\n    \"\
    \"\"\n    function replace_space(text::String, space::String)::String\n      \
    \  \n        if length(space) < 2\n            text\n        else\n          \
    \  l = string.split(text)\n            l = map((&replace_space), l)\n        \
    \    l = filter((&is_space), l)\n            text = join(l, \"\")\n        end\n\
    \    end\nend\n</cell>\n<code language=julia-0.4>\n\"\"\"\n    function replace_space(text::String,\
    \ space::String)::String\n    \"\"\"\n    function replace_space(text::String,\
    \ space::String)::String\n        \n        if length(space) < 2\n           \
    \ text\n        else\n            l = string.split(text)\n            l = map((&replace_space),\
    \ l)\n            l = filter((&is_space), l)\n            text = join(l, \"\"\
    )\n        end\n    end\nend\n</cell>\n<code language=julia-0.4>\n\"\"\"\n   \
    \ function replace_space(text::String, space::String)::String\n    \"\"\"\n  \
    \  function replace_space(text::String, space::String)::String\n        \n   \
    \     if length(space) < 2\n            text\n        else\n            l = string.split(text)\n\
    \            l = map((&replace_space), l)\n            l = filter((&is_space),\
    \ l)\n            text = join(l, \"\")\n        end\n    end\nend\n</cell>\n<code\
    \ language=julia-0.4>\n\"\"\"\n    function replace_space(text::String, space::String)::String\n\
    \    \"\"\"\n    function replace_space(text::String, space::String)::String\n\
    \        \n        if length(space) < 2\n            text\n        else\n    \
    \        l = string.split(text)\n            l = map((&replace_space), l)\n  \
    \          l = filter((&is_space), l)\n            text = join(l, \"\")\n    \
    \    end\n    end\nend\n</cell>\n<code language=julia-0.4>\n\"\"\"\n    function\
    \ replace_space(text::String, space::", "    return text.gsub(\" \", \"_\").gsub(\"\
    \ {2,}\", \"_\").gsub(\"_{2,}\", \"-\")\nend\n</cell>\n<text>\nString Normalization\n\
    String normalization converts all uppercase characters to lowercase, \nall lowercase\
    \ characters to uppercase, and all numbers to letters. \nThis can help improve\
    \ accuracy in comparing strings. \nIt can also improve processing speed if the\
    \ dataset is too large. \nSome examples: \n\"McDonalds\" -> \"mcdonalds\"\n\"\
    McDonalds\" -> \"mcdonalds\"\n\"McDonalds\" -> \"McDonalds\"\n\"AABbA\" -> \"\
    aabb\"\n\"AABbA\" -> \"AABBa\"\n\"AABbA\" -> \"aabba\"", "    s = text\n    for\
    \ c in [\"\\n\", \"\\t\", \" \", \"\\r\"]\n        s = StringReplaceAll(s, \"\\\
    \\$c$c\",\"_\")\n        s = StringReplaceAll(s, \"\\\\s{2,}\", \"_\")\n    return\
    \ s\nend\n</cell>\n<text>\nThe remove_unwanted_chars function below takes a string\
    \ as its input and returns a new string where all unwanted characters have been\
    \ removed. \nNote that in reality we do not remove anything from the string, because\
    \ most of them have no impact on the result of the function.", "  fix_spaces_regex\
    \ = Regex(\" \") # remove all spaces at once\n  result = replace_all(fix_spaces_regex,\"\
    _\")\n  consec_spaces_regex = Regex(\" {2}\") # remove all consecutive spaces\
    \ at once\n  result = replace_all(consec_spaces_regex,\"-\")\n  return result\n\
    end", "    \"\"\"\n    Given a string text, replace all spaces in it with underscores,\
    \ \n    and if a string has more than 2 consecutive spaces, \n    then replace\
    \ all consecutive spaces with - \n    \n    >>> fix_spaces(\"Example 1\")\n  \
    \  \"Example_1\"\n    >>> fix_spaces(\"Example 2\")\n    \"_Example_2\"\n    >>>\
    \ fix_spaces(\"Example 3\")\n    \"_Example-3\"\n    \"\"\"", "    # replace spaces\
    \ with underscores\n    return replace(replace(replace(text, \" \", \"_\"), \"\
    \  \", \"_\"), \"  -\", \"-\")\nend\n</cell>\n<text>\nThis function is called\
    \ repeatedly to remove extra whitespace. \nThe function call looks complicated\
    \ but is really just a series of \nnested calls to replace, split and join", " \
    \   local new_text = text\n    if text == \" \" \n    then\n        new_text =\
    \ new_text  \n    elseif text == \" \"\n    then\n        new_text = new_text\
    \ \n    else\n        new_text = new_text .. \"-\"\n    end\n    new_text = new_text\
    \ .. \"_\"\n    new_text = new_text .. text\n    new_text = new_text .. \"_\"\n\
    \    new_text = new_text .. text\n    new_text = new_text .. \"_\"\n    new_text\
    \ = new_text .. text\n    new_text = new_text .. \"_\"\n    new_text = new_text\
    \ .. text\n    new_text = new_text .. \"_\"\n    new_text = new_text .. text\n\
    \    new_text = new_text .. \"_\"\n    new_text = new_text .. text\n    new_text\
    \ = new_text .. \"_\"\n    new_text = new_text .. text\n    new_text = new_text\
    \ .. \"_\"\n    new_text = new_text .. text\n    new_text = new_text .. \"_\"\n\
    \    new_text = new_text .. text\n    new_text = new_text .. \"_\"\n    new_text\
    \ = new_text .. text\n    new_text = new_text .. \"_\"\n    new_text = new_text\
    \ .. text\n    new_text = new_text .. \"_\"\n    new_text = new_text .. text\n\
    \    new_text = new_text .. \"_\"\n    new_text = new_text .. text\n    new_text\
    \ = new_text .. \"_\"\n    new_text = new_text .. text\n    new_text = new_text\
    \ .. \"_\"\n    new_text = new_text .. text\n    new_text = new_text .. \"_\"\n\
    \    new_text = new_text .. text\n    new_text = new_text .. \"_\"\n    new_text\
    \ = new_text .. text\n    new_text = new_text .. \"_\"\n    new_text = new_text\
    \ .. text\n    new_text = new_text .. \"_\"\n    new_text = new_text .. text\n\
    \    new_text = new_text .. \"_\"\n    new_text = new_text .. text\n    new_text\
    \ = new_text .. \"_\"\n    new_text = new_text .. text\n    new_text = new_text\
    \ .. \"_\"\n    new_text = new_text .. text\n    new_text = new_text .. \"_\"\n\
    \    new_text = new_text .. text\n    new_text = new_text .. \"_\"\n    new_text\
    \ = new_text .. text\n    new_text = new_text .. \"_\"\n    new_text = new_text\
    \ .. text\n    new_text = new_text .. \"_\"\n    new_text = new_text .. text\n\
    \    new_text = new_text .. \"_\"\n    new_text = new_text .. text\n    new_text\
    \ = new_text .. \"_\"\n    new_text = new_text .. text\n    new_text = new_text\
    \ .. \"_\"\n    new_text = new_text .. text\n    new_text = new_text .. \"_\"\n\
    \    new_text = new_text .. text\n    new_text = new_text .. \"_\"\n    new_text\
    \ = new_text .. text\n", "  if text.len() <> 0 then\n    if text == \" \" then\n\
    \      return \"_\"\n    else\n      new_text = String[]\n      forall i in text.chars\
    \ ->\n        if i = \" \" then\n          new_text += i\n        else\n     \
    \     new_text += i\n          new_text += \"-\"\n        end\n      new_text\
    \ = new_text[0..-2]\n      return new_text\n    end\n  else\n    return text\n\
    \  end\nend\n</cell>\n<cell>\n\"\"\"\nGiven a string, \nif a string has more than\
    \ 2 consecutive spaces, \nthen replace all consecutive spaces with - \n\"\"\"",
  "  text = text.split(\" \")\n  for i = 1:length(text)\n    if (text[i] === \" \"\
    )\n      text[i] = \"_\"\n    end\n  end\n  text = join(text, \"\")\n  text =\
    \ replace(text, \" +\", \"_\")\n  text = replace(text, \"  \", \"_\")\n  return\
    \ text\nend", "    fixed_text = \"\"\n    for char in text\n        char = char(char)\n\
    \        if char == \" \"\n            fixed_text += \"_\"\n        elseif char\
    \ == \" \" && fixed_text != \"\"\n            fixed_text += \"-\"\n        else\n\
    \            fixed_text += char(char)\n    end\n    return fixed_text\nend\n</code>\n\
    <|/ a tags=julia,string,replace |>\n<| c |>\nI really like this solution and I\
    \ will be using this in many places in my code. I would only add a note that it\
    \ doesn't work in some cases. For example, `fix_spaces(\"_Example-3\")` returns\
    \ \"_Example-3\"\n<|/ c |>\n<| c |>\nThis is very helpful. I found out that there\
    \ is a string method `replace` that works the same as you proposed in your answer.\
    \ For example, I had to write `replace(\" \", \"_\", \"Example 3\")` to get the\
    \ right result.\n<|/ c |>\n<| a tags=julia,string,replace |>\nThe answer from\
    \ was very helpful.\nThe other way to solve this issue is by using Strings functions.\
    \ For example, we can use replace:\n<code>\nreplace(\"Example 3\", \"Example \"\
    , \" \")\n</code>\nThis code returns \"_ _ _ _\". So, in order to replace consecutive\
    \ spaces with a single space, we need to replace all the spaces with \"_\".\n\
    <code>\nreplace(\"Example 3\", \"Example \", \"_\")\n</code>\nThis code returns\
    \ \"_Example_3\".\nTo fix consecutive spaces, we must replace all the spaces with\
    \ a single space.\n<code>\nreplace(\"Example 3 \", \"Example \", \"_\")\n</code>\n\
    This code returns \"_ _ _ _\".\n<|/ a dscore=0 |>\n<| c |>\nThis will only work\
    \ for the first occurrence. You should use replace! to replace the string.\n<|/\
    \ c |>\n<| a dscore=0 |>\nThe most general solution is using regex:\n<code>\n\
    julia> re = Regex(r\"(?<=\\s)(?=[^\\s]+$)\")\nRegex(\"(?<=\\\\s)(?=[^\\\\s]+$)\"\
    )", "    \n    fix_spaces_helper(text, \"\")\nend", "    tmp = text\n    \n  \
    \  for word in split(\" \", tmp)\n        tmp = tmp.replace(word, \"_\")\n   \
    \ \n    if str_size(tmp) > 2\n        tmp = replace(\" \", \"_\", tmp)\n    end",
  "    \n    length = lengthInChars(text)\n    \n    if length <= 2\n        replaced\
    \ = text\n    else\n        replaced = replace_space(text) \n        \n    return\
    \ replaced\n</code>\n<|/ a |>\n<| c |>\nThanks for this idea! I'm a bit confused\
    \ though. How would I apply this function in my current code? Would I put it in\
    \ a function? And what would the output be like?\n<|/ c |>\n<| c |>\nI added a\
    \ short example to the answer showing you how this might be used in your code.\
    \ Let me know if it helps :)\n<|/ c |>\n<| c |>\nWhat if I want to keep the original\
    \ text but convert all spaces to underscores?\n<|/ c |>\n<| c |>\njust replace\
    \ `spaceChar = ' '` with `spaceChar = '_'`.\n<|/ c |>\n<| c |>\nThanks again.\
    \ How can I modify this if I wanted to preserve the spaces and underscores?\n\
    <|/ c |>\n<| a tags=string,julia,regex |>\nBased on answer, but shorter:\n<code>",
  "    if text.chars == \" \" \n        then return text\n        elseif text.chars\
    \ == text.chars[end - 2] && text.chars[end - 1] == \" \"\n            then return\
    \ text\n            else \n                return text + text.chars[end - 1]\n\
    end\n</cell>\n<code language=julia-0.6>\n\"\"\"\nRemove spaces until 2 consecutive\
    \ spaces are found\n\"\"\"", "    if is_empty_text(text)\n        \"\"\n    else\
    \ \n        replace(text, \"  \", \"_\")\n        fix_spaces(replace(text, \"\
    \  \", \"_\"))\n    end\nend\n</code>\n<|/ a |>\n<| c |>\nThis should be an edit\
    \ to [this answer](https://stackoverflow.com/a/45487439/1295504) rather than an\
    \ answer that has been deleted (the other answer has a link to the edit history,\
    \ and the edit history was edited after the other answer was deleted).\n<|/ c\
    \ |>\n<| c |>\nYes, I wanted to delete it but I don't have 50 reputation, and\
    \ I tried to delete it but then I realized that I have to wait 10 minutes. So\
    \ I kept it as is and added my answer.\n<|/ c |>\n<| c |>\nThe other answer was\
    \ helpful, but I found that I needed a slightly different solution, so I added\
    \ my own answer.\n<|/ c |>\n<| a dscore=4 |>\nTo answer the question \"what if\
    \ I want to keep the first and last space?\" in the comments above, all you have\
    \ to do is add another replace call:\n<code>\nreplace(replace(text, \"  \", \"\
    \ \"), \"  \", \" \")\n</code>\n<|/ a tags=string,julia,replace |>\n<| c |>\n\
    This should be an edit to [this answer](https://stackoverflow.com/a/45487439/1295504)\
    \ rather than an answer that has been deleted (the other answer has a link to\
    \ the edit history, and the edit history was edited after the other answer was\
    \ deleted).\n<|/ c |>\n<| a tags=string,julia,replace |>\nJulia v1.5 added the\
    \ function chomp to remove characters at the end of a string.\nE.g.\n<code>\n\
    julia> chomp(\" Example \")\n\" Example\"\n</code>\n<|/ a dscore=4 |>\n<| a tags=string,julia,replace\
    \ |>\nTo delete all consecutive spaces from a string, you can use something like:\n\
    <code>", "    \n    let text = text:match {\n        \"\" => return text\n   \
    \     \" \" => return \"_\"\n        _ => return text\n    }\n    \n    let splitted\
    \ = text:split(\" \"):map(fun x->x+1)\n    \n    if splitted[1] == splitted[2]\
    \ \n        then splitted[1] = \"_\"\n        else splitted[2] = \"_\"\n    \n\
    \    else if splitted[1] - splitted[2] = 1\n        then splitted[1] = \"_\"\n\
    \        else splitted[2] = \"_\"\n    \n    else if splitted[1] - splitted[2]\
    \ = 2\n        then splitted[1] = \"-\"\n        else splitted[2] = \"-\"\n  \
    \  \n    else if splitted[1] - splitted[2] = 2\n        then splitted[1] = \"\
    -\"\n        else splitted[2] = \"-\"\n    \n    else if splitted[1] - splitted[2]\
    \ = 1\n        then splitted[1] = \"-\"\n        else splitted[2] = \"-\"\n  \
    \  \n    else if splitted[1] == splitted[2]\n        then splitted[1] = \"-\"\n\
    \        else splitted[2] = \"-\"\n    \n    else if splitted[1] == splitted[2]\n\
    \        then splitted[1] = \"-\"\n        else splitted[2] = \"-\"\n    \n  \
    \  else if splitted[1] - splitted[2] = 1\n        then splitted[1] = \"-\"\n \
    \       else splitted[2] = \"-\"\n    \n    else if splitted[1] == splitted[2]\n\
    \        then splitted[1] = \"-\"\n        else splitted[2] = \"-\"\n    \n  \
    \  else if splitted[1] - splitted[2] = 2\n        then splitted[1] = \"-\"\n \
    \       else splitted[2] = \"-\"\n    \n    else if splitted[1] - splitted[2]\
    \ = 1\n        then splitted[1] = \"-\"\n        else splitted[2] = \"-\"\n  \
    \  \n    else if splitted[1] == splitted[2]\n        then splitted[1] = \"-\"\n\
    \        else splitted[2] = \"-\"\n    \n    else if splitted[1] - splitted[2]\
    \ = 2\n        then splitted[1] = \"-\"\n        else splitted[2] = \"-\"\n  \
    \  \n    else if splitted[1] - splitted[2] = 1\n        then splitted[1] = \"\
    -\"\n        else splitted[2] = \"-\"\n    \n    else if splitted[1] == splitted[2]\n\
    \        then splitted[1] = \"-\"\n        else splitted[2] = \"-\"\n    \n  \
    \  else if splitted[1] - splitted[2] = 2\n        then splitted[1] = \"-\"\n \
    \       else splitted[2] = \"-\"\n    \n    else if splitted[1] - splitted[2]\
    \ = 1\n        then splitted[1] = \"-\"\n        else splitted", "    string_split\
    \ = split(\" \", text)\n    string_join_result = join(string_split, \" _\")\n\
    \    string_join_result = replace(string_join_result, \"  \",\"_\")\n    return\
    \ string_join_result\nend", "    words = split(text, \" \")\n    words = map(make_space,\
    \ words)\n    words = map(cycle_word, words)\n    words = map(fix_spaces_cycle,\
    \ words)\n    return join(words)\nend", "</code>\n<code>\nfix_spaces(text) =\n\
    \    replace(\" \", \"_\", text) |>\n    replace(\" {2,}\", \"_\", text) |>\n\
    \    replace(\" {2,}\", \"_\", text) |>\n    replace(\" {2,}\", \"_\", text) |>\n\
    \    replace(\" {2,}\", \"_\", text)\nend\n</code>\n<|/ a tags=julia |>\n<| a\
    \ tags=julia |>\nThis one seems to work for me:\n<code>", "    return replace(\"\
    \ \",\"_\",text)\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\nGiven a string\
    \ text, \nreplace all non-alphanumeric characters with an underscore.", "    \n\
    \    \n    \"\"\"\n    When text has consecutive spaces, then fix it to a single\
    \ space.\n    \"\"\"\n    function fix_spaces(text::String)::String \n       \
    \ text = replace(text, \" \", \"_\")\n        \n        text = replace(text, \"\
    \  \", \" \")\n        \n        return text\n    end\n    \nend\n</code>\n<|/\
    \ a tags=julia dscore=3 |>\n<| a dscore=3 |>\n<code>\njulia> function fix_spaces(text)\n\
    \           text = replace(text, \" \", \"_\")\n           text = replace(text,\
    \ \"  \", \"_\")\n           return text\n       end", "  \n    if text.count\
    \ \" \"<2\n        \n        return text", "  new_text = \"\"\n  for c in text\n\
    \    if c == \" \"\n      new_text += \"_\"\n    else\n      new_text += c\n \
    \ end\n  if new_text != text\n    return new_text\n  else\n    return text\n \
    \ end\nend\n</code>\nAnd here is the function to remove all punctuation:\n<code>",
  "    \n    return replace(replace(replace(replace(replace(replace(\n           \
    \ replace(replace(replace(replace(replace(replace(\n                    replace(replace(replace(replace(replace(replace(replace(\n\
    \                    replace(replace(replace(replace(replace(replace(\n      \
    \              replace(replace(replace(replace(replace(replace(replace(\n    \
    \                replace(replace(replace(replace(replace(replace(replace(replace(\n\
    \                    replace(replace(replace(replace(replace(replace(replace(replace(replace(\n\
    \                    replace(replace(replace(replace(replace(replace(replace(replace(\n\
    \                    replace(replace(replace(replace(replace(replace(replace(replace(\n\
    \                    replace(replace(replace(replace(replace(replace(replace(replace(\n\
    \                    replace(replace(replace(replace(replace(replace(replace(replace(replace(\n\
    \                    replace(replace(replace(replace(replace(replace(replace(replace(replace(\n\
    \                    replace(replace(replace(replace(replace(replace(replace(replace(replace(\n\
    \                    replace(replace(replace(replace(replace(replace(replace(replace(replace(\n\
    \                    replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(\n\
    \                    replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(\n\
    \                    replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(\n\
    \                    replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(\n\
    \                    replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(\n\
    \                    replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(\n\
    \                    replace(replace(replace(replace(replace(replace(replace(replace(replace(\n\
    \                    replace(replace(replace(replace(replace(replace(replace(replace(replace(\n\
    \                    replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(\n\
    \                    replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(\n\
    \                    replace(replace(replace(replace(replace(replace(replace(replace(replace(\n\
    \                    replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(\n\
    \                    replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(\n\
    \                    replace(replace(replace(replace(replace(replace(replace(replace(replace(\n\
    \                    replace(replace(replace(replace(replace(replace(replace(replace(replace(\n\
    \                    replace(replace(replace(replace(replace(replace(replace(replace(replace(\n\
    \                    replace(replace(replace(replace(replace(replace(replace(replace(replace(\n\
    \                    replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(\n\
    \                    replace(replace(replace(replace(replace(replace(replace(replace(replace(\n\
    \                    replace(replace(replace(replace(replace(replace(replace(replace(replace(\n\
    \                    replace(replace(replace(replace(replace(replace(replace(replace(replace(\n\
    \                    replace(replace(replace(replace(replace(replace(replace(replace(replace(\n\
    \                    replace(replace(replace(replace(replace(replace(replace(replace(replace(\n\
    \                    replace(replace(replace(replace(replace(replace(replace(replace(replace(\n\
    \                    replace(replace(replace(replace(replace(replace(replace(replace(replace(\n\
    \                    replace(replace(replace(replace(replace(replace(replace(replace(\n\
    \                    replace(replace(replace(replace(replace(replace(replace(replace(replace(\n\
    \                    replace(replace(replace(replace(replace(replace(replace(replace(replace(\n\
    \                    replace(replace(replace(replace(replace(replace(replace(replace(replace(\n\
    \                    replace(replace(replace(replace(replace(replace(replace(replace(replace(\n\
    \                    replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(\n\
    \                    replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(\n\
    \                    replace(replace(replace(replace(replace(replace(replace(",
  "    let mut txt = text\n    for c in txt\n        if c == ' ' then txt = txt.replace('\
    \ ', '_') \n        if c == '_' then txt = txt.replace('_', ' ', 2, 1)\n     \
    \   txt\nend\n</code>\n<|/ a tags=regex,julia,string |>\n<| c |>\nWhy do you replace\
    \ \"_-\" with \"-\"? What does it mean in your context?\n<|/ c |>\n<| a tags=regex,julia,string\
    \ |>\n<code>\n# Example 1\njulia> \"hello_world\".replace(\" \" => \"_\")\n\"\
    hello_world\"\njulia> \"hello_world\".replace(\" \" => \"_\")\n\"hello_world\"",
  "    \"\"\"\n    Given a string text, replace all spaces in it with underscores,\
    \ \n    and if a string has more than 2 consecutive spaces, \n    then replace\
    \ all consecutive spaces with - \n    \"\"\"\n    if text == \" \" \n        then\
    \ \"-\" \n        else replace(replace(replace(text, \"  \", \"__\"), \"__\",\
    \ \"_\"), \"_\", \"-\")\nend\n</code>\n<|/ a dscore=2 tags=julia,string |>\n<|\
    \ c |>\nWhat happens if you have a string with more than one space? `fix_spaces(\"\
    \ Hello World \")` returns `-Hello-World_-`.\n<|/ c |>\n<| c |>\nI've added a\
    \ version that handles strings with more than one space.\n<|/ c |>\n<| c |>\n\
    Also I edited the question to show that it should work with strings of any length.\n\
    <|/ c |>\n<| a tags=julia,string |>\nThe answer from Mike Howles is very helpful\
    \ and very concise, but I wanted to add something that may help future users,\
    \ since he forgot to mention that strings are immutable. So if that is the case\
    \ then his solution will not work. In that case, I recommend using the following:\n\
    <code>", "    # Replace spaces with underscores\n    replace(text, \" \", \"_\"\
    )\n    # If the string has more than 2 consecutive spaces\n    if find_consecutive(text)\
    \ > 2 \n        # replace all consecutive spaces with -\n        replace(text,\
    \ \"  \", \"_\")\n    end\n    # Return the updated text\n    return text\nend\n\
    </code>\n<|/ a tags=julia |>\n<| c |>\nThanks for the effort but this doesn't\
    \ actually work as you wrote it. My code was written to convert multiple spaces\
    \ to underscores, but it turns out that if you have a string of more than one\
    \ space then it needs to be changed to an underscore. ", "    \"\"\"\n    Given\
    \ a string text, replace all spaces in it with underscores, \n    and if a string\
    \ has more than 2 consecutive spaces, \n    then replace all consecutive spaces\
    \ with - \n    \n    >>> fix_spaces(\"Example\")\n    \"Example\"\n    >>> fix_spaces(\"\
    Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\"Example 2\")\n    \"_Example_2\"\
    \n    >>> fix_spaces(\"Example 3\")\n    \"_Example-3\"\n    \"\"\"\n    return\
    \ text.gsub!(\" \", \"_\")\nend\n</cell>\n<code language=julia-0.5>\n\"\"\"\n\
    \    string_to_bool(str::String)\n    \n    Returns a boolean if the given string\
    \ is either \"True\" or \"False\".\n    \n    >>> string_to_bool(\"True\")\n \
    \   true\n    >>> string_to_bool(\"False\")\n    false\n    >>> string_to_bool(\"\
    true\")\n    true\n    >>> string_to_bool(\"false\")\n    false\n    >>> string_to_bool(\"\
    yes\")\n    true\n    >>> string_to_bool(\"no\")\n    false\n    >>> string_to_bool(\"\
    yeah\")\n    true\n    >>> string_to_bool(\"yup\")\n    false\n    \"\"\"", " \
    \   if length( text ) == 0 || text == \"None\" \n    then return \"None\"\n  \
    \  else \n        return replace(text, \"  \",\"_\")\n    end\nend", "    \"\"\
    \"Remove consecutive whitespace and convert a string to lowercase\"\"\"\n    lowertext\
    \ = text.to_lowercase()\n    space_idx = findall(lowertext, \" \")\n    if length(space_idx)\
    \ > 1\n        text2 = replace(text, \"  \", \"_\")\n        text2 = replace(text2,\
    \ \"_\", \"-\")\n        return text2\n    else\n        return text\nend\n</code>\n\
    <|/ a |>\n<| c |>\nThis answer would be improved by commenting how the code is\
    \ used and/or explained.\n<|/ c |>\n<| c |>\nThanks! I added a brief explanation\
    \ above\n<|/ c |>\n<| c |>\nThanks Matthias for the detailed explanation. I will\
    \ try it right now.\n<|/ c |>\n<| a dscore=3 |>\nA little less code golf, this\
    \ should work:\n<code>\ntext.replace(\" \",\"_\").replace(\" \",\"_\").strip!\n\
    </code>\n<|/ a tags=julia |>\n<| a |>\nThe accepted answer is good, but it doesn't\
    \ actually answer the question. As Matthias says, it only replaces spaces but\
    \ not consecutive spaces with an underscore.\nTo do that, we need to use replaceall:\n\
    <code>\ntext2 = replaceall(text, \"  \", \" \")\n</code>\nThe original answer:\n\
    <code>", "    replaced = text\n    \n    replaced = replaced .split(\"\\n\") .map\
    \ (replace)", "    str = text\n    if str == \" \" return str\n    if str == \"\
    \" return str\n    if str==\" \"\n        if str[1..-1]==\" \"\n            if\
    \ length(str)>1\n                str = \"\"\n                while str[1..-1]==\"\
    \ \"\n                    str = str+1\n            end\n        end\n    end\n\
    \    return str\nend\n\"\"\"\n    remove_extra_spaces(text::String)::String\n\
    \    \n    Given a string text, \n    remove extra spaces at the beginning and\
    \ end of it,\n    and if a string has more than 2 consecutive spaces,\n    then\
    \ remove all consecutive spaces with -", "  text = replace(\" \", \"_\", text)\
    \ \n  text = replace(\" \", \"_\", text) \n  text = replace(\" \", \"_\", text)\
    \ \n  return text\nend\n</cell>\n<code language=julia-0.4>\n# Write the function\
    \ split_on_whitespace, which takes a string \n# and returns a list of words on\
    \ which the function was applied. ", "  replaced_text = replace_spaces(text)\n\
    \  if length(replaced_text) > 2\n    replaced_text = replace_consecutive_spaces(replaced_text)\n\
    \  end\n  return replaced_text\nend\n</code>\n<|/ a dscore=2 tags=replace,julia\
    \ |>\n<| c |>\nI think you should include the code of the other functions you\
    \ use in your answer, because they might be useful for others.\n<|/ c |>\n<| a\
    \ tags=replace,julia |>\nI believe a regex solution is probably the best in most\
    \ cases, but since there are some examples in here that use \"replace\" I'd like\
    \ to show that you can also use \"replace!\".\n<code>\njulia> replace!(\"example\"\
    , \"\\\\s+\", \"_\")\n\"example\"", "    \n        replaced_text = text\n    \
    \    \n        replaced_text = replaced_text |> String.replace(\" \",\"_\")\n\
    \        \n        \n        for ii in 1:(length(replaced_text) - 2)\n       \
    \     \n            if replaced_text[ii+1] == \" \"\n                \n      \
    \          replaced_text[ii+1] = \"-\"\n            \n            else\n     \
    \       \n                replaced_text[ii] = replaced_text[ii]\n            \n\
    \            end\n            \n        end\n        \n        return replaced_text\n\
    \    \nend\n</cell>\n<code language=julia-1.3>\n\"\"\" \n    Trims the leading\
    \ and trailing spaces in a string\n    \n    >>> trim(\" Example \")\n    \"Example\"\
    \n    >>> trim(\" Example 1 \")\n    \"Example1\"\n    >>> trim(\" Example 2 \"\
    )\n    \"Example2\"\n    >>> trim(\" Example 3 \")\n    \"Example3\"\n    \"\"\
    \"", "    string = text\n    replaced_text = string\n    \n    for c in spaces:\n\
    \        replaced_text = replaced_text.replace(c, underscore)\n    \n    replaced_text\
    \ = replaced_text.strip()\n    \n    return replaced_text\n</code>\n<code>\n \
    \   \"\"\"\n    Given a string text, replace all special characters with underscores,\
    \ \n    and if a string has more than 3 consecutive special characters, \n   \
    \ then replace all consecutive special characters with - \n    \n    >>> fix_specials(\"\
    \ Example\")\n    \"Example\"\n    >>> fix_specials(\" Example 1\")\n    \"Example_1\"\
    \n    >>> fix_specials(\" Example 2\")\n    \"Example_2\"\n    >>> fix_specials(\"\
    \ Example 3\")\n    \"Example_3\"\n    \"\"\"", "    # remove any spaces from\
    \ text\n    text_split = split(text, \" \")\n    \n    # fix spaces \n    for\
    \ word in text_split\n        if word != \"\"\n            word = replace(word,\
    \ \"_\", \"_\")\n            word = replace(word, \"-\", \"-\")\n            word\
    \ = replace(word, \" \", \"-\")\n        end\n    end\n    \n    return join(text_split,\
    \ \" \")\nend\n</code>\n<|/ a dscore=1 tags=julia,string,replace |>\n<| c |>\n\
    Thanks for the explanation :)\n<|/ c |>\n<| a tags=julia,string,replace |>\nIn\
    \ order to replace all spaces with \"_\" I would do something like:\n<code>\n\
    julia> str = \" Example\"\n\" Example\"", "    text = replace(\" \", \"_\", text)\n\
    \    text = replace(text, \" \", \"\")\n    return text\nend\n</cell>\n<code language=julia-1.4>\n\
    \"\"\"\n    fix_numbers(text::String)", "  \n    if text == \"\"\n        return\
    \ \"\"\n    \n    if all(text[i] == \" \" for i in 1:length(text))\n        return\
    \ text\n    \n    if all(text[i] == \" \" for i in 1:length(text) - 2)\n     \
    \   replace(text, \" \", \"_\")\n    else\n        replace(text, \" \", \"_\"\
    )\n        replace(text, \" \", \"_\")\n    \n    return text\nend\n</code>\n\
    This works fine:\n<code>\njulia> fix_spaces(\"  Example  \")\n\"Example\"\n</code>\n\
    But this doesn't:\n<code>\njulia> fix_spaces(\"Example\")\n\"Example\"\n</code>\n\
    <|/ a dscore=0 tags=julia,string |>\n<| a dscore=0 |>\nHere is a simple solution,\
    \ assuming that \"-\" is only used for consecutive spaces.\n<code>", "    if text\
    \ == \"\"\n        return text\n    \n    lets = text\n    \n    i = 2\n    while\
    \ i < length(text) and isspace(lets[i])\n        i += 1\n        \n    if i ==\
    \ length(text)\n        return text\n    \n    lets = replace(lets, \" \", \"\
    _\")\n    \n    if length(lets) > 2\n        lets = replace(lets, \" \", \"_\"\
    )\n        \n    i = 2\n    while i < length(text) and isspace(lets[i])\n    \
    \    i += 1\n        \n    if i == length(text)\n        return text\n    \n \
    \   lets = replace(lets, \"_\", \"-\")\n    \n    return lets\n</code>\n<|/ a\
    \ dscore=3 tags=julia |>\n<| c |>\nThis doesn't really seem like a good idea,\
    \ it isn't immediately obvious how it works and it makes your code hard to read\
    \ by introducing temporary variables that are only used once.  Also, this doesn't\
    \ actually solve the problem as stated in the question. `fix_spaces(\"Example\
    \ 3 \")` returns `Example-3` instead of `Example_3-`.\n<|/ c |>\n<| c |>\n, could\
    \ you please explain why `fix_spaces(\"Example 3 \")` returns `Example-3` instead\
    \ of `Example_3-`? I thought it was an interesting question because I had to solve\
    \ it myself :)\n<|/ c |>\n<| c |>\nBecause the issue is that `fix_spaces` should\
    \ return `\"Example_3\"` whereas your code returns `\"Example3\"`.  The issue\
    \ isn't that your code doesn't work, it's that your solution doesn't work.  And\
    \ it is very important to understand why your solution doesn't work.  And you\
    \ didn't ask for an explanation.  Your solution is wrong and your explanation\
    \ is useful.  So this isn't an answer.\n<|/ c |>\n<| c |>\n, I agree that your\
    \ solution should be the accepted answer.\n<|/ c |>\n<| c |>\nI agree, and I pointed\
    \ out that my solution is not a good one because I said that it is not a good\
    \ idea. I didn't ask for an explanation, I just wrote a solution that works and\
    \ pointed out that the other solutions didn't work because they were not good\
    \ enough. I know it's easy to downvote and to just be pedantic, but in this case,\
    \ I think that the code I wrote is clear, it's easy to understand and I tried\
    \ to explain why it doesn't work. Again, just trying to help and thank you for\
    \ downvoting my answer :).\n<|/ c |>\n<| a dscore=1 |>\nHere is my solution:\n\
    <code>", "    \n    if length(text) > 2\n        text = sub(pattern=\" \", replacement=\"\
    _\", text)\n    end\n    \n    return text", "    fixed_text = \"\"\n    \n  \
    \  for letter in text \n        fixed_text += letter\n        if letter != \"\
    \ \"\n            fixed_text += \"_\"\n        end\n    end", "    text = text.strip\n\
    \    text = replace(text,\"\\\\s+\",\"_\")\n    text = replace(text,\" \",\"_\"\
    )\n    text = replace(text,\"  \",\"_\")\n    return text\n</code>\n<|/ a dscore=1\
    \ |>\n<| c |>\nThis doesn't seem to take into account that there could be more\
    \ than one space between words. For example, this sentence would be \"This Is\
    \ A Sentence\".\n<|/ c |>\n<| c |>\nYes it does, I actually tested it before posting\
    \ and it worked perfectly.\n<|/ c |>\n<| c |>\nI agree that it works and I tested\
    \ it before posting this. I'm sorry if it was not clear, but I wanted to point\
    \ out that it does not take into account that there could be more than one space\
    \ between words. For example, this is an example sentence.\n<|/ c |>\n<| c |>\n\
    I updated my answer to include this case in the example I gave. I tested this\
    \ and it does handle multiple spaces between words. I also tested it with other\
    \ sentences and it still works.\n<|/ c |>\n<| c |>\nYour solution doesn't take\
    \ into account that there could be more than one space between words and it also\
    \ doesn't account for more than 2 consecutive spaces. So it would be wrong for\
    \ the following sentence: \"This is an example sentence.\"\n<|/ c |>\n<| a tags=julia,string,regex\
    \ |>\nHere's another option:\n<code>", "    if text == \"\"\n    text \n    elseif\
    \ text[0] == \" \"\n        fix_spaces(text[1:end])\n    else\n        text[1:end]\
    \ \n    end\nend\n</cell>\n<code language=julia-0.5>\n\"\"\"\n    Given a string\
    \ text, replace all non-alphanumeric characters with _\n    \n    >>> fix_underscores(\"\
    Example 2?\")\n    \"Example_2?\"\n    >>> fix_underscores(\"Example 2\")\n  \
    \  \"Example_2\"\n    >>> fix_underscores(\"Example 3\")\n    \"Example_3\"\n\
    \    \"\"\"", "</code>\n<|/ q tags=julia |>\n<| a |>\nIn general, if you want\
    \ to replace consecutive spaces then you can use replace:\n<code>\njulia> text\
    \ = \"Example   1\"\n\"Example   1\"", "    \n    # Replace all spaces with underscores\n\
    \    text = replace(text, \" \", \"_\")\n    \n    # If text has more than 2 consecutive\
    \ spaces, replace all consecutive spaces with -\n    if hasConsecutiveSpaces(text)\n\
    \        text = replace(text, \" \", \"-\")\n    end\n    return text\nend", " \
    \   #fix the spaces first\n    fixed = replace(\" \",\"_\",text)\n    if fixed.count('\
    \ ') >2 \n        #then fix the consecutive spaces and then fix the single spaces\n\
    \        fixed = replace(\" \",\"-\",fixed)\n        fixed = replace(\" \",\"\
    _\",fixed)\n    end\n    return fixed\nend\n</code>\n<|/ a |>\n<| a |>\nThis one\
    \ worked for me (it replaces spaces with hyphens inside brackets):\n<code>", " \
    \   \"Replace all spaces in it with underscores, \n    and if a string has more\
    \ than 2 consecutive spaces, \n    then replace all consecutive spaces with -\"\
    \n    \n    string = \"\"\n    for c in text\n        if c == \" \" || c ==\"\\\
    n\"\n            string = string + \"-\"\n        else\n            string = string\
    \ + c\n    return string\n</code>\n<|/ a tags=string,julia dscore=3 |>\n<| a dscore=2\
    \ |>\nIn general you don't want to modify strings in place, but this can be useful\
    \ when you want to return a new string without modifying any existing string variables.\
    \ For your example, you can do the following:\n<code>", "    fixed = text\n  \
    \  if fixed == \"\"\n        then return fixed\n    if fixed.count == 1\n    \
    \    then return \"_\"\n    if fixed.count > 2\n        then return \"_\"\n  \
    \      \n    return fixed\nend\n</cell>\n<text>\nNow let's write a function that\
    \ will take a list of strings and concatenate them all together with a - between\
    \ them. The function should take a list of strings (words) and return a single\
    \ string that is the concatenation of all of the strings in the list.", "    if\
    \ text:\n        local s = text\n        s = s.replace(\"_\", \"_\")\n       \
    \ s = s.replace(\"  \", \"_\")\n        s = s.replace(\"  \", \"_\") \n      \
    \  return s\n    else \n        return \"\"\nend", "    \n    text_split = split(text,\
    \ \" \")\n    text_split = [_ for _ in text_split if _ != \"\"]\n    text_split_rev\
    \ = reverse(text_split)\n    \n    consec_spaces = 0\n    \n    for elem in text_split_rev:\n\
    \        if elem == \" \":\n            consec_spaces += 1\n        else:\n  \
    \          if consec_spaces > 0:\n                text_split_rev[consec_spaces]\
    \ = \"_\"\n            consec_spaces = 0\n            \n    text = join(reverse(text_split_rev),\
    \ \" \")\n    \n    return text", "    \n    string.replace(text, \" \",\"_\"\
    )\n    string.replace(text, \" \", \"-\")\n    string.replace(text, \" \", \"\
    -\") \n    \n    if !string.isspace(string[1])\n        string[1] = \" \"\n  \
    \      string[1] = \" \"\n    \n    \nend\n</code>\n<|/ a dscore=0 |>\n<| a |>\n\
    If you're using Julia, there is an easier way with regex-replace:\n<code>\njulia>\
    \ string.replace(\" \", \"_\", \"a b\", Regex(\"([^\\W_])\"))\n\"a_b\"\n</code>\n\
    Here, Regex(\"([^\\W_])\") is a regex that matches everything except alphanumeric\
    \ characters and underscores. Note that this regex only matches the first character\
    \ and does not match subsequent characters. If you want to match the entire string,\
    \ add Regex(\"^([^\\W_]*)$\"). Another way to write this is Regex(r\"^([^\\W_]*)$\"\
    ).\nIf you just want to replace spaces with underscores, you can do this with\
    \ replace:\n<code>\njulia> replace!(\" \", \"_\", \"a b\")\n\"a_b\"\n</code>\n\
    <|/ a dscore=0 tags=string,replace,julia |>\n<| c |>\nThe `Regex` version works,\
    \ but the regex is unnecessarily complicated (it also matches other characters\
    \ that don't need `Regex` to be useful). You could also use `string.replace(\"\
    \ \", \"_\", \"a b\")` if you wanted.\n<|/ c |>\n<| c |>\nI did not know about\
    \ `string.replace()` and I did not know about `Regex`. I will edit my answer now.\
    \ I think that the Regex version is simpler though.\n<|/ c |>\n<| c |>\nYour answer\
    \ is better. `string.replace` doesn't support the optional replacement parameter,\
    \ so `replace!` would be the best solution, IMO.\n<|/ c |>\n<| c |>\nThanks for\
    \ the tip!\n<|/ c |>\n<| a |>\nIn addition to other answers, you can use a function\
    \ instead of a string literal:\n<code>\njulia> function fix_spaces(text::String)\n\
    \           return replace(text, \" \", \"_\")\n       end\nfix_spaces (generic\
    \ function with 1 method)", "    \n    length = 0\n    for i in text\n       \
    \ length += 1\n    end\n    \n    return text.gsub(\" \",\"_\")", "    \n    if\
    \ length(p(text)) > 2\n        return replace(\" \", \"_\", text(1))\n    else\n\
    \        return text\nend", "  result = text.gsub!(/\\s+/,\"_\") \n  result =\
    \ result.gsub!(/\\s{2,}/,\"_\") \n  result = result.gsub!(/\\s{2,}\\-/,\"-\")\
    \ \n  result\nend\n</cell>\n<code language=julia-0.4>\n\"\"\"\n    remove_special_chars(text::String)",
  "    \n    text_ = text\n    \n    # replace any spaces with underscores\n    text_\
    \ = text_.replace(\" \", \"_\")\n    \n    # replace any consecutive spaces with\
    \ -\n    text_ = text_.split(\"  \").map((x, i) -> x if i == 0 else \"-\" ).join(\"\
    _\")\n    \n    return text_\nend\n</cell>\n<code language=julia-1.3>\n@test fix_spaces(\"\
    Example 1\") == \" Example_1\"\n@test fix_spaces(\"Example 2\") == \" _Example_2\"\
    \n@test fix_spaces(\"Example 3\") == \" _Example-3\"\n</cell>\n<code language=julia-1.3>\n\
    \"\"\"\n    Given a binary image B, \n    remove all pixels in image B that are\
    \ above or below a threshold t.\n    \n    t can be a float or an int, but it's\
    \ recommended to use \n    a float for consistency with OpenCV.\n    \n    This\
    \ function is based on OpenCV's inRange function.\n    \n    https://opencv.jp/opencvdocs/master/d4/dae/group__imgproc__misc.html#ga760edf862a6cd5ddc12f1f5ddde5ff68\n\
    \    \n    https://stackoverflow.com/questions/46691727/how-to-change-the-colors-of-a-binary-image-based-on-a-range-of-values-in-openc\n\
    \    \n    https://docs.scipy.org/doc/scipy/reference/generated/scipy.ndimage.generic_filter.html\n\
    \    \n    https://stackoverflow.com/questions/46691727/how-to-change-the-colors-of-a-binary-image-based-on-a-range-of-values-in-openc\n\
    \    \n    https://docs.scipy.org/doc/scipy/reference/generated/scipy.ndimage.generic_filter.html\n\
    \    \n    >>> get_pixels(image, threshold=0.3, filter_type=\"inRange\")\n   \
    \ \"\"\"", "    \n  text == \" \" ? \"_\" : text\n  text = text.replace(\" \"\
    ,\"_\")\n  text = text.replace{\" \",\"_\"}\n  return text \nend", "    \n   \
    \ string=text\n    \n    if str_size(string)>1\n        \n        for i in string:\n\
    \            if i==' ' then\n                string=replace_all(string, i, \"\"\
    )\n                \n            if i==\"\" then\n                string=replace_all(string,\
    \ \"_\", \"\")\n                \n    end\n    \n    return string\nend", "  \
    \  # your code here\nend\n</code>\n<|/ a dscore=3 |>\n<| a |>\nThe string module\
    \ has a function which does exactly that:\n<code>\ns = \" Example \"\ns = string(s)\n\
    </code>\nThe output will just be the string \"Example\", which you can change\
    \ as you wish.\n<|/ a tags=julia,replace dscore=3 |>\n<| c |>\nThanks, it works\
    \ with Julia 0.5.0.\n<|/ c |>\n<| a |>\nThe most straightforward way is to use\
    \ regular expressions, e.g.\n<code>\njulia> s = \"This is a test string\"\n\"\
    This is a test string\"", "  return replace(text, \" \", \"_\")\nend\n</cell>\n\
    <code language=julia-1.5>\n\"\"\"\n    Given a string text, \n    return a dictionary\
    \ keyed by consecutive digits, \n    each value being the number of spaces between\
    \ the consecutive digits\n    \n    >>> string_to_digit_count(\"example\")\n \
    \   {1:3, 2:2, 3:1}\n    >>> string_to_digit_count(\"example 1\")\n    {1:2, 2:2,\
    \ 3:3}\n    >>> string_to_digit_count(\"example 2\")\n    {1:1, 2:2, 3:1}\n  \
    \  >>> string_to_digit_count(\"example 3\")\n    {1:2, 2:1, 3:3}\n    >>> string_to_digit_count(\"\
    example 4\")\n    {1:1, 2:2, 3:3}\n    \"\"\"", "    text.split(\" \").map(_fix_spaces).join(\"\
    \ \")\nend\n</code>\n<|/ a dscore=1 |>\n<| a dscore=0 |>\nHere is my implementation\
    \ using String's split, replace and join functions. I hope it helps someone. \n\
    <code>\nmodule Replacer", "    return replace(\" \", \"_\", text)\nend", "  if\
    \ text.length <= 2\n    text\n  else\n    replace(text, \" \", \"_\")\n  end\n\
    end\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    fix_special_chars(text::String)",
  "    fixed = replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(text,\
    \ \"   \", \"_\"), \"  \", \"_\"), \"  \", \"_\"), \"  \", \"_\"), \"  \", \"\
    _\"), \"  \", \"_\"), \"  \", \"_\"), \"  \", \"_\"), \"  \", \"_\"), \"  \",\
    \ \"_\"), \"  \", \"_\"), \"  \", \"_\"), \"  \", \"_\"), \"  \", \"_\"), \" \
    \ \", \"_\")\nend", "    splitted = split(text) \n    return join(splitted) \n\
    end\n</cell>\n<code language=julia-1.0>", "    \n    count = 0\n    for c in text\n\
    \        if c == \" \"\n            count += 1\n        elseif count == 2\n  \
    \          c = \"_\"\n            count = 0\n        end\n    end\n    \n    return\
    \ text\nend\n</cell>\n<code language=julia-1.5>\n@doc fix_spaces\n</cell>\n<code\
    \ language=julia-1.5>\ntext2 = fix_spaces(\" Example 3\")\n</cell>\n<code language=julia-1.5>\n\
    text2\n</cell>\n<code language=julia-1.5>\n@test text2 == \" Example-3\"\n</cell>\n\
    <code language=julia-1.5>\ntext3 = \"Example 4\"\n</cell>\n<code language=julia-1.5>",
  "    \n    replace(\" \",\"_\",text)\n    \n    while space(text)\n    replace(\"\
    \ \",\"-\",text)\n    \n    return text\nend", "  new_text = \" \" *(length(text)\
    \ - length(replace(text, \"  \", \" \")))\n  new_text = replace(new_text, \" \"\
    , \"-\")\n  return new_text\nend \n</cell>\n<text>\nFix the case of the text\n\
    The function below takes two parameters: the first is the text and the second\
    \ is the lowercase version of the text. \nIf the text is all caps or all lowercase,\
    \ then return the lowercase version, else return the capitalized version of the\
    \ text.", "    local s=text\n    s=replace(s, \" \", \"_\")\n    s=replace(s,\
    \ \" -\", \"_\")\n    s=replace(s, \"  \", \"_\")\n    return s\nend", "    fix_spaces\
    \ = replace(\" \", \"_\", text)\n    fix_spaces = replace(\" \", \"-\", fix_spaces)\n\
    end\n</cell>\n<cell>\nfix_spaces(\" Example 1\")\n</cell>\n<cell>\nfix_spaces(\"\
    Example 2\")\n</cell>\n<cell>\nfix_spaces(\"Example 3\")\n</cell>\n<text>\nFunction\
    \ to remove special characters from text data\nThe function cleans texts while\
    \ preserving other characters. The function removes punctuation, stopwords, numbers,\
    \ and extra white spaces. It also converts all characters to lower case. If we\
    \ remove stopwords from the text, the text is more informative as it will have\
    \ less stop words. It also removes numbers.", "    return replace(text, \" \"\
    , \"_\")\nend\n</cell>\n<code language=julia-1.3>\n\"\"\"\n    find_chars(string::AbstractString,\
    \ chars::AbstractString)", "    \n    fixes = replace(\" \", \"_\") |> to_string()\n\
    \    \n    if fixes == text \n        then return text \n        else \n     \
    \       first_space = fixes.find(\" \")\n            \n            if first_space\
    \ == -1 \n                then return fixes\n                else \n         \
    \           second_space = fixes.find(\" \", first_space + 1)\n              \
    \      \n                    if second_space == -1 \n                        then\
    \ return fixes\n                        else \n                            return\
    \ fixes.replace(\" \", \"_\", second_space)\n    \n\"\"\"\n    Given a string\
    \ text, replace all digits with underscores, \n    and if a string has more than\
    \ 3 consecutive digits, \n    then replace all consecutive digits with - \n  \
    \  \n    >>> fix_digits(\" 123\")\n    \"123\"\n    >>> fix_digits(\" 123abc\"\
    )\n    \"123abc\"\n    >>> fix_digits(\" 123abc 1\")\n    \"123abc_1\"\n    >>>\
    \ fix_digits(\" 123abc 2\")\n    \"123abc_2\"\n    >>> fix_digits(\" 123abc 3\"\
    )\n    \"123abc_3\"\n    \"\"\"", "    \"\"\"\n    Find the first whitespace character\
    \ in text, \n    and find the last whitespace character in text, \n    and replace\
    \ that space with underscore.\n    If a text has more than two consecutive spaces,\
    \ \n    then replace all consecutive spaces with -\n    \n    >>> fix_spaces(\"\
    Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\"Example 2\")\n    \"Example_2\"\
    \n    >>> fix_spaces(\"Example 3\")\n    \"Example_3\"\n    \"\"\"", "    \n \
    \   \"\"\"\n    Given a string text, replace all spaces in it with underscores,\
    \ \n    and if a string has more than 2 consecutive spaces, \n    then replace\
    \ all consecutive spaces with - \n    \"\"\"\n    if text == \" \":\n        return\
    \ text\n    if text == \"_\":\n        return text\n    \n    spaces = ''\n  \
    \  \n    for c in text:\n        if c == ' ':\n            spaces += \"_\"\n \
    \       else:\n            spaces += c\n    \n    replaced = spaces.replace('\
    \ ', '_')\n    \n    \n    \n    \n    return replaced\nend\n</cell>\n<code language=julia-1.3>\n\
    \"\"\"\nGiven a string text, replace all spaces in it with underscores, \n   \
    \ and if a string has more than 2 consecutive spaces, \n    then replace all consecutive\
    \ spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n  \
    \  >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example\
    \ 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\
    \n    \"\"\"", "    fixed = \"\"\n    while text != \"\"\n        fixed = text\
    \ ++ fixed\n        if fixed.size == 1\n            text = fixed.char\n      \
    \  else\n            if fixed.is_space\n                fixed += \"_\"\n     \
    \       else\n                fixed += \"-\"\n            end\n        end\n \
    \   end\n    return fixed\nend", "    text \u2190 replace(\" \", \"_\", text)\n\
    \    text \u2190 replace(\" \", \"_\", text, true, 2)\n    return text\n</code>\n\
    This function replaces all spaces in it with underscores, as well as consecutive\
    \ spaces with a single -, while also allowing for strings with more than 2 consecutive\
    \ spaces.\nThe final function call returns the following results:\n<code>\njulia>\
    \ fix_spaces(\" Example 1\")\n\"Example_1\"", "    text = replace(text,\"\\s\"\
    ,\"_\")\n    text = replace(text,\"\\s{2,}\",\"_\")\n    return text\nend", " \
    \   \n    \"\"\"\n    A function that replaces spaces with underscores\n    if\
    \ there are 2 or more consecutive spaces.\n    The function also replaces consecutive\
    \ spaces with a hyphen.\n    \"\"\"", "    if text == \"\" \n    then return text\
    \ \n    else \n        if text == \" \" \n        then return \"_\"\n        else\
    \ if text[0..2] == \"_\" \n        then return text\n        else if text[1..-1]\
    \ == \" \" \n        then return text\n        else if text[1] == \"_\" \n   \
    \     then return text\n        else if text[2:end] == \"_\" \n        then return\
    \ text\n        else if text[2:end] == \"-\"\n        then return text\n     \
    \   else if text[2:end] == \"_\"\n        then return text\n        else if text[2:end-1]\
    \ == \"_\"\n        then return text\n        else if text[2:end-1] == \"-\"\n\
    \        then return text\n        else if text[2:end-1] == \"_\"\n        then\
    \ return text\n        else if text[2:end-1] == \"_\"\n        then return text\n\
    \        else if text[2:end-1] == \"_\"\n        then return text\n        else\
    \ if text[2:end] == \"-\"\n        then return text\n        else if text[2:end]\
    \ == \"-\"\n        then return text\n        else if text[2:end] == \"-\"\n \
    \       then return text\n        else if text[2:end] == \"-\"\n        then return\
    \ text\n        else if text[2:end] == \"-\"\n        then return text\n     \
    \   else if text[2:end] == \"-\"\n        then return text\n        else if text[2:end]\
    \ == \"-\"\n        then return text\n        else if text[2:end] == \"-\"\n \
    \       then return text\n        else if text[2:end] == \"-\"\n        then return\
    \ text\n        else if text[2:end] == \"-\"\n        then return text\n     \
    \   else if text[2:end] == \"-\"\n        then return text\n        else if text[2:end]\
    \ == \"-\"\n        then return text\n        else if text[2:end] == \"-\"\n \
    \       then return text\n        else if text[2:end] == \"-\"\n        then return\
    \ text\n        else if text[2:end] == \"-\"\n        then return text\n     \
    \   else if text[2:end] == \"-\"\n        then return text\n        else if text[2:end]\
    \ == \"-\"\n        then return text\n        else if text[2:end] == \"-\"\n \
    \       then return text\n        else if text[2:end] == \"-\"\n        then return\
    \ text\n        else if text[2:end] == \"-\"\n        then return text\n     \
    \   else if text[2:end] == \"-\"\n        then return text\n        else if text[2:end]\
    \ == \"-\"\n        then return text\n        else if text[2:end] == \"-\"\n \
    \       then return text\n        else if text[2:end] == \"-\"\n        then return\
    \ text\n        else if text[2:end] == \"-\"\n        then return text\n     \
    \   else if text[2:", "    return replace(replace(replace(text,\"  \",\" \"),\"\
    \    \",\"_\"),\" \",\"\")\nend\n</cell>\n<code language=julia-1.5>\nusing DelimitedFiles\n\
    </cell>\n<text>\nThe function readdlm(filename) reads a delimited file where each\
    \ line is a comma-separated list of values, and returns an Array{String,1}. The\
    \ first element of the returned Array is the string of the header line, which\
    \ you discard. The remaining elements are the elements of that line.", "    return\
    \ replace(replace(replace(replace(text, \" \", \"_\"), \"\\t\", \"_\"), \"\\r\"\
    , \"_\"), \n        \"\\n\", \"_\")\nend\n</cell>\n<text>\nThe next cell contains\
    \ code to test our fix_spaces function by running a few examples:", "    \n  \
    \  return replace(replace(replace(replace(replace(text, ' ','_'), '  ', ''), '\
    \  ', ''), '  ', '_'), '  ', '') \nend\n</cell>\n<text>\nExercise 6: Tokenize\
    \ a document\nThe first step is to tokenize a document. Here are some options:",
  "    text = replace(\" \", \"_\", text)\n    text = replace(\" \", \"-\", text)\n\
    \    text = replace(\" \", \"-\", text)\n    text = replace(\" \", \"-\", text)\n\
    \    return text\nend \n</cell>\n<code language=julia-1.4>\n@test fix_spaces(\"\
    Example\") == \" Example\"\n@test fix_spaces(\"Example 1\") == \" Example_1\"\n\
    @test fix_spaces(\"Example 2\") == \" _Example_2\"\n@test fix_spaces(\"Example\
    \ 3\") == \" _Example-3\"\n</cell>\n<text>\nreplace()", "    text = replace(text,\
    \ \"  \", \"_\")\n    if text == \" \" || (text == \"_\" && text == \"_\") then\
    \ \n        return text\n    else \n        text = replace(text, \"  \", \"_\"\
    )\n        return text\nend\n</cell>\n<code language=julia-0.6>", "    \n    splits\
    \ = split(text)\n    \n    if lengths(splits)>2\n        splits = map(x->replace_spaces(x),\
    \ splits)\n    \n    return join(splits)\nend\n</cell>\n<code language=julia-1.5>\n\
    # Replace multiple spaces with a single space", "  \n    # Replace all spaces\
    \ with underscores\n    text = replace(\" \", \"_\", text)\n  \n    # Replace\
    \ consecutive spaces with dashes\n    text = replace(\" \", \"-\", text)\n  \n\
    \    return text\nend\n</cell>\n<text>\nfix_newlines Function", "    return replace(replace(replace(replace(text,\
    \ \"  \", \"_\"), \"  \", \" \"), \"  \", \" \"), \"  \", \" \") \nend\n</cell>\n\
    <code language=julia-1.5>", "    \n    # replace spaces with underscores\n   \
    \ text = text.gsub(\" \",\"_\")\n    \n    # replace consecutive spaces with -\n\
    \    if text != \" \" and text !~ \" \" \n        \n        text = text.gsub(\"\
    \ \",\"-\") \n    end \n    \n    return text\nend\n</cell>\n<code language=julia-1.5>\n\
    # test that fix_spaces works\nfix_spaces(\"A test\")\n</cell>\n<text>\nNow we\
    \ are ready to implement our TextParser function - which we'll call parse_text\
    \ for now - for parsing the lines of text that we have parsed so far (we haven't\
    \ yet processed the full input text yet!) into a vector of tokens. There are several\
    \ steps:", "    \n    if length(text) == 0 or text[0] == ' ' \n    or text[1]\
    \ == ' ' or text[-1] == ' ' \n    then return text\n    \n    if length(text)\
    \ >= 2 and \n        text[1] == ' ' and text[2] == ' ' \n    then return text\n\
    \    \n    fix_spaces(text[2:end]) \n    \n    function fix_spaces(text::String)::String\
    \ \n        if length(text) == 0 or text[0] == ' ' \n        or text[1] == ' '\
    \ or text[-1] == ' ' \n        then return text\n        \n        if length(text)\
    \ >= 2 and \n            text[1] == ' ' and text[2] == ' ' \n        then return\
    \ text\n        \n        fix_spaces(text[2:end]) \n    end\nend\n</code>\n<|/\
    \ a |>\n<| a dscore=1 tags=recursion,julia |>\nThis should be faster:\n<code>",
  "</code>\n<|/ a dscore=4 |>\n<| c |>\nI think you meant to write `fix_spaces` not\
    \ `fix_space`\n<|/ c |>\n<| c |>\nYou are correct.  I have fixed it.  Thanks for\
    \ the heads-up.\n<|/ c |>\n<| a dscore=3 tags=haskell,string,replace |>\nI personally\
    \ like using regular expressions:\n<code>\nimport Text.Regex.PCRE\nimport Data.Text\
    \ (unpack)", "    if text.length <= 2\n        return text\n    if text.count\
    \ ' '*2\n        return text\n    \n    \n    \n\"\"\"\n    Get the number of\
    \ spaces in a string. \n    \n    >>> get_spaces(\"example\")\n    4\n    >>>\
    \ get_spaces(\"    example    \")\n    7\n    >>> get_spaces(\"  \")\n    0\n\"\
    \"\"", "    \n    if text == \" \"\n        \n        return text\n    \n    else\n\
    \        \n        local fix1 = text:gsub(\"\\\\s+\",\"_\")\n        local fix2\
    \ = fix1:gsub(\"_+\",\"-\")\n        \n        return fix2\n    \n    end\n  \
    \  \nend\n    \n</cell>\n<text>\nFunction fix_punct", "    return (text |> String.replace\
    \ \" \", \"_\") |> String.replace \" \", \"-\" |> String.replace \" \", \"_\"\n\
    end", "    if text == \" \" \n    then \"_\" \n    else text \n    end\nend\n\
    </cell>\n<code language=julia-0.6>\n# Examples\n\"\"\"\nGiven a string text, replace\
    \ all spaces in it with underscores, \n    and if a string has more than 2 consecutive\
    \ spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\"\
    \ Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\
    \n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\"\
    \ Example 3\")\n    \"_Example-3\"\n\"\"\"", "  \n  str = text.strip(\" \")\n\
    \  str = str.replace(\" \", \"_\")\n  \n  if str.length > 2\n    str = str.replace(\"\
    \ \", \"-\")\n  \n  return str\nend", "    if text == \" \"\n        then return\
    \ \"_\"\n    elif text == \"  \"\n        then return \"-\"\n    else \n     \
    \   return replace(text, \"  \", \"_\")\nend\n</cell>\n<code language=julia-1.6>\n\
    @test fix_spaces(\"Example\") == \" Example\"\n@test fix_spaces(\"Example 1\"\
    ) == \"Example_1\"\n@test fix_spaces(\"Example 2\") == \"_Example_2\"\n@test fix_spaces(\"\
    Example 3\") == \"_Example-3\"\n</cell>\n<text>\nThe function count_words takes\
    \ text and returns a Dict of words and their counts.", "    \n    if text == \"\
    \"\n        \n        return \"\"\n    \n    if isspace(text[1]) \n        \n\
    \        return text\n    \n    endpos = find_space(text, 0)\n    \n    return\
    \ text[1:endpos] ~ \"-\" ~ text[(endpos + 1):endpos] \nend", "    \"\"\"\n   \
    \ Given a string text, replace all spaces in it with underscores, \n    and if\
    \ a string has more than 2 consecutive spaces, \n    then replace all consecutive\
    \ spaces with - \n    \"\"\"\n    \n    split_text = split(text)\n    \n    split_text\
    \ = filter(x->isspace(x), split_text)\n    \n    if size(split_text) == size(split_text)\n\
    \        \n        split_text = split_text |> map(x->sub(x,\" \"), split_text)\n\
    \        \n        return join(split_text, \"-\")\n    end\nend\n</cell>\n<text>\n\
    Problem 2b: Replace consecutive spaces (\"-\") with one space\nGiven a string\
    \ text, replace all spaces in it with underscores, \n    and if a string has more\
    \ than 2 consecutive spaces, \n    then replace all consecutive spaces with one\
    \ space \n    \n    >>> fix_spaces_one(\"-Example\")\n    \"Example\"\n    >>>\
    \ fix_spaces_one(\"-Example1\")\n    \"Example1\"\n    >>> fix_spaces_one(\"-Example2\"\
    )\n    \"Example2\"\n    >>> fix_spaces_one(\"-Example3\")\n    \"Example3\"\n\
    \    \"\"\"", "    \n    return replace(replace(text, \"  \", \"_\"), \"  \",\
    \ \"_\")\nend", "    \n    \n    return replace(replace(replace(text, \" \", \"\
    _\"), \"-\", \"_\"), \"  \", \"_\")\nend\n</cell>\n<code language=julia-0.5>\n\
    # using Pkg; Pkg.add(\"PyPlot\")\n# using PyPlot", "    fix_spaces_impl(text)\n\
    end", "    if text.length() > 2 \n        then text.gsub!(\" \",\"_\") \n    \
    \    text.gsub!(\" \",\"-\")\n        return text\n    end\n    return text\n\
    end\n\"\"\"\n    Splits a string into an array of strings. \n    \n    >>> splits(\"\
    one two three\")\n    [\"one\", \"two\", \"three\"]\n    >>> splits(\"one\")\n\
    \    [\"one\"]\n    \"\"\"", "    if text == \"\"\n        \"\"\n    else\n  \
    \      if text[1]==\" \"\n            text[1] = \"_\"\n            if text[2]==\"\
    \ \"\n                text[2] = \"_\"\n                text[3] = \"_\"\n     \
    \       end\n        end\n        return text\n    end\nend\n</cell>\n<text>\n\
    Let's try it!", "    \n    \"\"\"\n    Given a string text, replace all spaces\
    \ in it with underscores, \n    and if a string has more than 2 consecutive spaces,\
    \ \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces('\
    \ Example')\n    'Example'\n    >>> fix_spaces(' Example 1')\n    'Example_1'\n\
    \    >>> fix_spaces(' Example 2')\n    'Example_2'\n    >>> fix_spaces(' Example\
    \ 3')\n    'Example_3'\n    \"\"\"\n    return replace_all(text, \"\\s+\", \"\
    _\")", "    \nend\n</code>\nThe only difference is that the function returns text\
    \ instead of nothing and that all text is replaced by underscores.\n<|/ a dscore=2\
    \ tags=replace,string,julia |>\n<| c |>\nThanks a lot for your detailed answer!\n\
    <|/ c |>\n<| a |>\nMy two cents:\n<code>\njulia> \"   \" |> x -> replace(x, \"\
    \ \", \"_\", \"g\")\n\"___\"", "\"\"\"\nReplace all spaces in text with underscores\n\
    \"\"\"\n    text.gsub!(\" \",\"_\")\n    text.gsub!(\" \",\"_\")\n    return text\n\
    end", "    \n    if text == \"\" \n        then return text\n    \n    else \n\
    \        \n        if text == \" \" \n            then return \"_\"\n    \n  \
    \      elsif isspace(text[1]) \n            then return \"-\"\n    \n        else\
    \ \n            \n            if isspace(text[2])\n                then return\
    \ text\n            \n            else\n                \n                return\
    \ text[1:end-1] + \"_\" + text[end:]\nend\n</cell>\n<text>\n3.7 Text wrapping\
    \ in Julia\n3.7.1 Fixing line length", "    \n    \n    text = \"_\" * (text.count(\"\
    \  \") + 1) \n    \n    return text\nend\n</cell>\n<code language=julia-1.5>\n\
    @time for t in map(fix_spaces, \"Hello    World!   \")\n    println(t)\nend\n\
    </cell>\n<code language=julia-1.5>\n@time for t in map(fix_spaces, \"Hello   \
    \ World!   \")\n    println(t)\nend\n</cell>\n<text>\nMore fun facts\nThe above\
    \ function can actually be used in a variety of different ways", "    replaced\
    \ = replaceAll(\" \", \"_\", text)\n    replaced = replaceAll(\"  \", \"_\", replaced)\n\
    \    replaced = replaceAll(\"  \", \"_\", replaced)\n    replaced = replaceAll(\"\
    \  \", \"_\", replaced)\n    return replaced\nend \n</code>\n<|/ a dscore=2 |>\n\
    <| a tags=string,julia,regex |>\nYou can do this in one line, with regex and strings:\n\
    <code>\njulia> using Regex", "    \" Replaces all spaces in it with underscores\
    \ \" \n    return replace(text, \" \", \"_\") \nend ", "    \n    #return if text\
    \ is empty\n    if text == \"\" \n    then \n        return text \n    else \n\
    \        \n        #replace all spaces with underscores\n        fixed_text =\
    \ text.gsub(\" \", \"_\") \n        \n        #replace all consecutive spaces\
    \ with an underscore \n        fixed_text = fixed_text.gsub(\" +\", \"_\") \n\
    \        \n        return fixed_text \n    end\nend\n</cell>\n<code language=julia-1.4>\n\
    \"\"\"\nGiven a sequence of strings (i.e. a list of strings), \n    remove all\
    \ spaces from each string \n    and return a new list of strings with no spaces\n\
    \    \n>>> no_spaces([\"Example\", \"Example_1\"])\n[\"Example\", \"Example_1\"\
    ]\n>>> no_spaces([\"Example\", \"Example\", \"Example\"])\n[\"Example\", \"Example\"\
    ]\n\"\"\"", "     return replace(\" \", \"_\", text)\nend\n</cell>\n<code language=julia-1.2>\n\
    \"\"\"\nGiven a string text, convert to all lowercase letters\n\"\"\"", "  text\
    \ = text.strip()\n  text = replace_spaces(text)\n  text = replace_consecutive_spaces(text)\n\
    \  return text\nend", "    \n    let\n        space_index = text.index(\" \")\n\
    \        \n        if space_index == -1\n            \n            error(\"Could\
    \ not fix spaces: string has no spaces at index \", space_index)\n        \n \
    \       elseif space_index == 0\n            \n            error(\"Could not fix\
    \ spaces: string has no spaces at index 0\", space_index)\n        \n        elseif\
    \ space_index > 0\n            \n            error(\"Could not fix spaces: string\
    \ has spaces at \", space_index, \", but cannot fix consecutive spaces to -\"\
    , space_index)\n        \n        else\n            \n            fix_spaces_helper(text,\
    \ 0, space_index - 1, space_index) \n    \n    end\n    \nend", "    words = split(text,\"\
    \\s\")\n    return join(map(fix_spaces,words),\"-\")\nend", "    return stringreplace(text,\
    \ \"\\s\",\"_\")\nend\n</cell>\n<code language=julia-1.1>\n\"\"\"\n    Given a\
    \ string text, replace all capital letters in it with \n    lower case letters,\
    \ \n    \n    >>> fix_caps(\" Example\")\n    \"example\"\n    >>> fix_caps(\"\
    \ Example 1\")\n    \"example_1\"\n    >>> fix_caps(\" Example 2\")\n    \"_example_2\"\
    \n    >>> fix_caps(\" Example 3\")\n    \"_example_3\"\n    \"\"\"", "    if text\
    \ == \"\"\n        then return \"\"\n    else if length(text) >= 2\n        then\
    \ fix_spaces(replace(text, \" \", \"-\"))\n    else if length(text) == 1\n   \
    \     then replace(text, \"-\", \"\")\n    else \n        text\n    end\nend\n\
    </cell>\n<code language=julia-1.0>", "  fix_spaces_ = text |> String.replace \"\
    \ \" -> \"_\"\n  fix_spaces_ = fix_spaces_ |> String.replace \" \" -> \"-\"\n\
    \  fix_spaces_ = fix_spaces_ |> String.trim |> String.replace \"-\" -> \"_\"\n\
    \  return fix_spaces_\n</code>\n<|/ a dscore=2 tags=string,replace,julia,arrays\
    \ |>\n<| a dscore=2 |>\nI like the answer by Chadwick.  But I wanted to throw\
    \ in my own idea, which I believe is more concise.  \n<code>\njulia> str = \"\
    hello  world   okay  okay  okay\"\n\"hello  world   okay  okay  okay\"", "   \
    \ \n    fix_spaces_helper(text, 0, 0, true)\n    return text\nend\n</code>\n<|/\
    \ a dscore=1 |>\n<| a tags=julia |>\nTo solve this problem efficiently, I would\
    \ recommend splitting the text into words (where you split by spaces), then joining\
    \ those words back together with a '-' between them. Then, you can remove any\
    \ spaces left over, which is easy. The following should do the trick.\n<code>",
  "    \n    replacements = [\n        (\"  \", \"_\"),\n        (\" -\", \"_\")\n\
    \    ]\n    for (key, value) in replacements\n        text = text.replace(key,\
    \ value)\n    \n    return text\n</cell>\n<text>\nExercise 2: Fix Numbers\nFix\
    \ all numbers in all text documents in your corpus.", "    s = text\n    s = replaceall(s,\
    \ \"\\s\", \"-\") \n    s = replaceall(s, \"\\s{2,}\", \"-\")\n    return s\n\
    end\n</cell>\n<code language=julia-1.5>\n#export", "    \n    return (text.gsub(\"\
    \ \",\"_\")).strip(\"-\")\nend\n</code>\n<|/ a |>\n<| c |>\nIt works but it messes\
    \ up my strings. I mean, when I use the function on the strings below, it returns\
    \ me the original string.", "    \n    # Replace multiple consecutive spaces with\
    \ a single dash\n    \n    pattern = \" +\"\n    replacement = \"-\"\n    result\
    \ = text\n    result = gsub(pattern,replacement,result)\n    \n    return result\
    \ \nend", "    \n    if text == \"\"\n        return text\n    \n    let (first,\
    \ rest) = split(text, \" \")\n    \n    if first == \"_\"\n        return text\n\
    \    \n    if rest\n        return fix_spaces(first..\" - \"..rest)\n    \n  \
    \  first\nend\n</cell>\n<code language=julia-1.0>\ntext1 = \"Example   Example\
    \ 1   \"\ntext2 = \"Example 2 \"\ntext3 = \"Example 3\"\n</cell>\n<code language=julia-1.0>\n\
    text1\n</cell>\n<code language=julia-1.0>\ntext2\n</cell>\n<code language=julia-1.0>\n\
    text3\n</cell>\n<code language=julia-1.0>\nfix_spaces(text1)\n</cell>\n<code language=julia-1.0>\n\
    fix_spaces(text2)\n</cell>\n<code language=julia-1.0>\nfix_spaces(text3)\n</cell>\n\
    <text>\nWhat if we have words like \"Example\", \"Examples\" and \"Examples\"\
    \ in our texts? \nCan we fix that?", "    \n    replace = [\" \", \"_\", \"_\"\
    , \"-\"]\n    \n    text = text\n    \n    for i in 0 .. text.length\n       \
    \ \n        if text[i] == \" \"\n            \n            text[i] = \"_\"\n \
    \           \n        end\n            \n    end\n    \n    text = text\n    \n\
    \    for i in 0 .. text.length\n        \n        if text[i] == \" \"\n      \
    \      \n            if text[i+1] == \" \"\n                \n               \
    \ text[i] = \"-\"\n                \n                i = i + 1\n            end\n\
    \        end\n            \n    end\n    \n    return text\nend\n</code>\n<|/\
    \ a tags=julia dscore=1 |>\n<| a tags=julia |>\n<code>", "    no_spaces = replace(text,\"\
    \\\\s+\",\"_\")\n    if no_spaces contains \" \" \n        no_spaces = replace(no_spaces,\"\
    \ \",\"_\")\n        no_spaces = replace(no_spaces,\"-\",\"_\")\n    end\nend\n\
    </cell>\n<code language=julia-1.3>\n\"\"\"\n    Given a string text, replace all\
    \ characters in it with \n    a character represented by a tuple, \n    and if\
    \ a string has more than 2 consecutive characters,\n    then replace all consecutive\
    \ characters with _\n    \n    >>> fix_chars(\" Example\")\n    \"Example\"\n\
    \    >>> fix_chars(\" Example 1\")\n    \"Example_1\"\n    >>> fix_chars(\" Example\
    \ 2\")\n    \"_Example_2\"\n    >>> fix_chars(\" Example 3\")\n    \"_Example-3\"\
    \n    >>> fix_chars(\" Example 4 (5)\")\n    \"_Example-4_5_\"\n    >>> fix_chars(\"\
    \ Example 5 (5)\")\n    \"_Example-5-5\"\n    \"\"\"", "    text = replace(text,\
    \ \" \", \"_\")\n    \n    # handle consecutive spaces\n    count = 0\n    while\
    \ count < length(text) - 2\n        text = replace(text, \" \", \"-\")\n     \
    \   count += 1\n    end\n    return text\n</code>\n<|/ a |>\n<| a dscore=1 tags=string,julia,replace,regex\
    \ |>\nHere's another way using replaceall. I've added another option for cases\
    \ where there is a non-alphanumeric character after the end of the string:\n<code>\n\
    julia> replaceall(\"Example_1\", \"(.*?) 1\", \"_$1\")\n\"Example_1\"", "    str\
    \ = text\n    if str.length < 2\n        return str\n    \n    str = str.replace(\"\
    \ \",\"_\")\n    str = str.replace(\"  \",\"_\")\n    \n    str1 = \"\"\n    for\
    \ str in str\n        str1 = str1 + str\n    end\n    return str1\nend\n</cell>\n\
    <code language=julia-1.5>\n\"\"\"\n    count_characters(text::String)::Int\n \
    \   Count the number of characters in a string\n    \n    >>> count_characters(\"\
    Hello\")\n    6\n    >>> count_characters(\"Hello     World\")\n    12\n    \"\
    \"\"", "    \n        \n    text = text.replace(\" \", \"_\")\n    \n    if text.size\
    \ > 2\n        text.replace(\" \", \"_\")\n    else\n        text\n    end\nend\n\
    \    ", "    \n    if text == \"\"\n        return text\n    \n    local spaces_count\
    \ = 0\n    local consec_spaces = false\n    \n    for (i,c) in enumerate(text)\n\
    \        do\n            if c == \" \"\n                then spaces_count += 1\n\
    \            else if spaces_count > 1\n                then consec_spaces = true\n\
    \            end\n        end\n    end\n    \n    if consec_spaces == false\n\
    \        then return text\n    else\n        for (i,c) in enumerate(text)\n  \
    \          if c == \" \"\n                then text = string.replace_all(text,\
    \ \" \", \"_\")\n            end\n        end\n        return text\n    end\n\
    end\n</cell>\n<text>\nIn Julia we can also use the regex library, to find and\
    \ replace patterns very easily", "  fixed_text = text\n  fixed_text = replace(fixed_text,\"\
    \\s\",\"\")\n  fixed_text = replace(fixed_text,\"\\s\",\" \")\n  fixed_text =\
    \ replace(fixed_text,\"\\s_\",\" \")\n  fixed_text = replace(fixed_text,\"_\"\
    ,\" \")\n  fixed_text = replace(fixed_text,\"_\\s_\",\" \")\n  fixed_text = replace(fixed_text,\"\
    _\\s_\\s_\",\" \")\n  fixed_text = replace(fixed_text,\"_\\s_\\s_\\s_\",\" \"\
    )\n  fixed_text = replace(fixed_text,\"_\\s_\\s_\\s_\\s_\",\" \")\n  fixed_text\
    \ = replace(fixed_text,\"_\\s_\\s_\\s_\\s_\\s_\",\" \")\n  fixed_text = replace(fixed_text,\"\
    _\\s_\\s_\\s_\\s_\\s_\\s_\",\" \")\n  fixed_text = replace(fixed_text,\"_\\s_\\\
    s_\\s_\\s_\\s_\\s_\\s_\",\" \")\n  fixed_text = replace(fixed_text,\"_\\s_\\s_\\\
    s_\\s_\\s_\\s_\\s_\\s_\",\" \")\n  fixed_text = replace(fixed_text,\"_\\s_\\s_\\\
    s_\\s_\\s_\\s_\\s_\\s_\\s_\",\" \")\n  fixed_text = replace(fixed_text,\"_\\s_\\\
    s_\\s_\\s_\\s_\\s_\\s_\\s_\\s_\\s_\",\" \")\n  fixed_text = replace(fixed_text,\"\
    _\\s_\\s_\\s_\\s_\\s_\\s_\\s_\\s_\\s_\\s_\\s_\\s_\",\" \")\n  fixed_text = replace(fixed_text,\"\
    _\\s_\\s_\\s_\\s_\\s_\\s_\\s_\\s_\\s_\\s_\\s_\\s_\\s_\",\" \")\n  fixed_text =\
    \ replace(fixed_text,\"_\\s_\\s_\\s_\\s_\\s_\\s_\\s_\\s_\\s_\\s_\\s_\\s_\\s_\\\
    s_\",\" \")\n  fixed_text = replace(fixed_text,\"_\\s_\\s_\\s_\\s_\\s_\\s_\\s_\\\
    s_\\s_\\s_\\s_\\s_\\s_\\s_\\s_\",\" \")\n  fixed_text = replace(fixed_text,\"\
    _\\s_\\s_\\s_\\s_\\s_\\s_\\s_\\s_\\s_\\s_\\s_\\s_\\s_\\s_\\s_\\s_\\s_\",\" \"\
    )\n  fixed_text = replace(fixed_text,\"_\\s_\\s_\\s_\\s_\\s_\\s_\\s_\\s_\\s_\\\
    s_\\s_\\s_\\s_\\s_\\s_\\s_\\s_\\s_\",", "    \" ... \"\nend\n</cell>\n<text>\n\
    Strings in Julia\nStrings in Julia are mutable. \nThis means that operations on\
    \ a string will change the string. \nThe original string can be reconstructed\
    \ using quotation marks. ", "    return replace(\" \", \"_\", replace(\" \", \"\
    _\", text))\nend", "    \"\"\"This function replaces spaces with underscores and\
    \ \n    replaces consecutive spaces with -\"\"\"\n    text = text\n    string\
    \ = text\n    \n    string = replace(string, \" \", \"_\")\n    string = replace(string,\
    \ \" \", \"_\")\n    string = replace(string, \" \", \"_\")\n    \n    return\
    \ string\n</code>\n<|/ a tags=string,julia |>\n<| c |>\nAh, I see. Thank you!\n\
    <|/ c |>\n<| c |>\nThis is what I was looking for, thank you!\n<|/ c |>\n<| a\
    \ tags=string,julia dscore=2 |>\nIn Julia, this is done by string interpolation.\
    \ \n<code>\njulia> string(\"Example 1\") |> string\n\"Example_1\";\n</code>\n\
    This works because strings are immutable and |> returns the left argument.\n<|/\
    \ a |>\n<| c |>\nThis answer is a better fit for the OP's question.\n<|/ c |>\n\
    <| a |>\nI like string's replace for its readability, and it takes care of all\
    \ of the edge cases for you. But you can also use replace if you want, for instance:\n\
    <code>", "    replacements = [\" \"=>\"_\",\"_\" =>\"-\"]\n    words = word_split(text)\n\
    \    i = 0\n    while i<length(words) do \n        if words[i] != \"\"\n     \
    \       words[i] = replace(words[i],replacements)\n        i += 1\n    end\n \
    \   return join(words,\" \")\nend\n</code>\n<|/ a tags=julia,replace,string |>\n\
    <| c |>\nHow would I extend this to replace all repeated consecutive spaces? \
    \ For example, when I have a string like \"This is    example\", I would want\
    \ it to become \"This-is_example\".  How would I do that?\n<|/ c |>\n<| c |>\n\
    I have added a working version of the script in my answer. If you want to know\
    \ why, I would have to look up \"replace\" :)\n<|/ c |>\n<| a tags=julia,replace,string\
    \ |>\nI needed a solution that worked with arbitrary separators, not just spaces,\
    \ so I came up with the following (based on Kristof's answer).\n<code>", "   \
    \ tmp = replace(\" \",\"_\",text)\n    if length(tmp) > 2\n        tmp= replace(\"\
    \ \",\"-\",tmp)\n    end\n    return tmp\nend\n</cell>\n<text>\nExercise: Convert\
    \ a string into its lower case version\nHint: use the lowercase function from\
    \ Julia's Base module.", "    \"\"\"Replace all spaces in it with underscores\"\
    \"\"\n    return replace(text, \"  \", \"_\")\nend", "    \n    replaceChars =\
    \ \"_\" # replace all spaces with underscores \n    \n    replaceCharOccur = countCharOccurrences(text,\
    \ \" \") # Count the number of occurences of a character\n    if replaceCharOccur\
    \ > 2 \n        replaceCharOccurOccur = replaceCharOccur - 2 # Make sure that\
    \ there are at least 2 consecutive spaces\n        replaceCharOccurOccur = replaceCharOccurOccur\
    \ + replaceCharOccurOccur # Make sure that the number of consecutive spaces is\
    \ at least 2\n    \n    replaceCharOccurOccur = replaceCharOccurOccur % 2 # Make\
    \ sure that there are an even number of consecutive spaces\n    \n    for i in\
    \ 1 .. replaceCharOccurOccur \n        text = replace(text, \" \", replaceChars)\
    \ # Replace all spaces with underscores\n    end\n    \n    return text\nend",
  "    fixed_text = text.replace(\" \", \"_\")\n    fixed_text = fixed_text.replace(\"\
    \ \", \"-\")\n    return fixed_text\nend\n</code>\n<|/ a tags=string,replace,julia\
    \ dscore=2 |>\n<| c |>\nThe problem is also that `replace` returns a new string\
    \ with all the replacements made, but `i` is the position in the original string\
    \ where the replacement should happen, rather than the position of the original\
    \ space.  So you'd have to replace `i` with `i+1` in the second line of the function,\
    \ and `i+1` in the last line.  That's not very elegant, but it should work. There\
    \ are probably some more elegant ways to do this, but it would involve some sort\
    \ of mutable array (probably a tuple or array).\n<|/ c |>\n<| a dscore=1 |>\n\
    Just a minor variation on what wrote\n<code>", "    \" Create a string with any\
    \ spaces in it replaced by an underscore\"\n    return replace(replace(text, \"\
    \  \", \" \"), \"  \", \" \") \nend ", "   \n    return (text |> str.replace(\"\
    \ \", \"_\")) |> str.rep(\" \", \"_\") |> str.replace(\" \", \"-\") |> str\nend\n\
    </cell>\n<text>\nStrings: $String.substring$", "    \"\"\"\n    Given a string\
    \ text, replace all spaces in it with underscores, \n    and if a string has more\
    \ than 2 consecutive spaces, \n    then replace all consecutive spaces with -\n\
    \    \"\"\"\n    \n    strings=text.replace(' ','_')\n    \n    #replace all spaces\
    \ with underscores\n    for x in strings: \n        if x != '_': \n          \
    \  x=x+'_' \n    \n    #replace all consecutive spaces with -\n    for x in strings:\
    \ \n        if x.find(' ')!=-1: \n            x=x.replace(x[0:x.find(' ')],'-')\
    \ \n    \n    return strings", "    return text |> replace(\" \", \"_\") |> replace(\"\
    \ \", \"\") |> replace(\" \", \"\")\nend\n</code>\nNow you just need to make a\
    \ \"to_lowercase\" function and apply it to every word in the sentence:\n<code>",
  "    \"Replace all spaces in it with underscores, and if a string has more than\
    \ 2 consecutive spaces, \n    then replace all consecutive spaces with -. \n \
    \   \n    >>> fix_spaces(\"Example 1\")\n    \"Example\"\n    >>> fix_spaces(\"\
    Example 2\")\n    \"Example\"\n    >>> fix_spaces(\"Example 3\")\n    \"Example\"\
    \n    \"\"\"\nend"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
