language: jl
name: HumanEval_114_minSubArraySum
results:
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    if len(nums) <=\
    \ 0\n        return 0\n    \n    let sum_of_subarray = sumSubArrays(nums)\n  \
    \  let sum = sum_of_subarray[0]\n    for i in 1..length(sum_of_subarray)\n   \
    \     if sum_of_subarray[i] < sum\n            sum = sum_of_subarray[i]\n    \
    \    end\n    end\n    sum\nend\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\
    \t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) ==\
    \ -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"let\" at /tmp/tmpcdzplzsh.jl:14\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpcdzplzsh.jl:1\n\
    in expression starting at /tmp/tmpcdzplzsh.jl:1\n"
  stdout: ''
  timestamp: 1660009406
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    n = length(nums)\n\
    \    min_sum = Int64(0)\n    \n    for i = 1...n\n        \n        minsum = Int64(0)\n\
    \        \n        for j = i...n\n            \n            minsum += nums[j]\n\
    \            \n            if minsum < min_sum\n                min_sum = minsum\n\
    \            end\n            \n        end\n    end\n    \n    return min_sum\n\
    end\n</cell>\n<code language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2, 4])\n\
    </cell>\n<code language=julia-1.5>\nminSubArraySum([-1, -2, -3])\n</cell>\n<text>\n\
    The above functions return the same result, but they are very different:\nusing\
    \ Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"...\" expression outside call around /tmp/tmpwzpdqoxw.jl:15\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmpwzpdqoxw.jl:1\nin expression starting\
    \ at /tmp/tmpwzpdqoxw.jl:1\n"
  stdout: ''
  timestamp: 1660009406
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    arr = nums\n \
    \   len = length(arr)\n    # Initialize max with first element\n    max = arr[1]\n\
    \    for i = 2; i <= len; i++)\n        min = i\n        for j = len+2; j > 1;\
    \ j /= 2\n            if arr[j] < arr[min] \n                min = j\n       \
    \ max = min + max \n    return max\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1,\
    \ -2, -3]) == -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpvibrt0qz.jl:15\nin expression starting at /tmp/tmpvibrt0qz.jl:15\n"
  stdout: ''
  timestamp: 1660009406
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    local min = Int64(Inf)\n\
    \    for n in nums\n        if n < 0\n            n = -n\n        end\n      \
    \  if min > n\n            min = n\n        end\n    end\n    return min\nend\n\
    </cell>\n<code language=julia-1.4>\n@time minSubArraySum(nums)\n</cell>\n<text>\n\
    Part 2\nGiven a vector of integers nums, find the maximum sum of any non-empty\
    \ sub-vector\n    of nums.\n    Example\n    >>> maxSubArraySum([2, 3, 4, 1, 2,\
    \ 4])\n    15\n    >>> maxSubArraySum([-1, -2, -3])\n    -3\n    \"\"\"\nusing\
    \ Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp51bcnfl6.jl:22\nin expression starting at\
    \ /tmp/tmp51bcnfl6.jl:22\n"
  stdout: ''
  timestamp: 1660009406
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    local min_sum\
    \ = math.inf\n    for value in nums do\n        if value < 0 then\n          \
    \  value = -value\n        end\n        local sub_sum = 0\n        for sub_value\
    \ in value do\n            sub_sum += sub_value\n        end\n        if sub_sum\
    \ < min_sum then\n            min_sum = sub_sum\n        end\n    end\n    return\
    \ min_sum\nend\n\"\"\"\n    Given a vector of integers nums, find the minimum\
    \ sum of any non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid \"do\" syntax\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpna0q_spr.jl:12\nin expression starting at /tmp/tmpna0q_spr.jl:12\n"
  stdout: ''
  timestamp: 1660009406
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    res = Int64(0)\n\
    \    for x in nums\n        for y in nums[x:end] \n            res = min(res,\
    \ x + y) \n        end\n    end\n    return res\nend\n</cell>\n<text>\nThis looks\
    \ pretty good.  We could do the same thing with nested for loops, using more memory\
    \ and processing power, but let's see how it performs:\nusing Test\n\n@testset\
    \ begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1, 2, 4])\
    \ == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1, -2, -3,\
    \ 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpe1oenix9.jl:19\nin expression starting at\
    \ /tmp/tmpe1oenix9.jl:19\n"
  stdout: ''
  timestamp: 1660009405
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    length  =  length(nums)\n\
    \    \n    if (length == 0)\n        return 0;\n    \n    minSubArraySum = Inf(Int64)\n\
    \    minSubArraySumIndex = -1\n    \n    for index in range(1, length-1)\n   \
    \     \n        if (nums[index] > nums[index+1])\n            \n            nextMinSubArraySum\
    \ = minimum(nums[index:length])\n            \n            while (nums[index]\
    \ > nums[index+1])\n                \n                index -= 1\n           \
    \     \n                if (index < 0)\n                    return minSubArraySum\n\
    \                \n                index+=1\n                nextMinSubArraySum\
    \ = minimum(nums[index:length])\n                \n            minSubArraySum\
    \ += nextMinSubArraySum\n            \n        \n        else\n            \n\
    \            nextMinSubArraySum = minimum(nums[index:length])\n            \n\
    \            while (nums[index] > nums[index+1])\n                \n         \
    \       index += 1\n                \n                if (index > length-1)\n\
    \                    return minSubArraySum\n                \n               \
    \ index+=1\n                nextMinSubArraySum = minimum(nums[index:length])\n\
    \                \n            minSubArraySum += nextMinSubArraySum\n        \
    \    \n        end\n    end\n    \n    return minSubArraySum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1,\
    \ 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"while\" at /tmp/tmp_zixj7_j.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp_zixj7_j.jl:1\n\
    in expression starting at /tmp/tmp_zixj7_j.jl:1\n"
  stdout: ''
  timestamp: 1660009406
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    #find minimum\
    \ sum\n    minimum = Int64(0)\n    for i in nums \n        if minimum > i \n \
    \           minimum = i \n        end\n    end\n    return minimum\nend\n</cell>\n\
    <text>\nThe function minSubArraySum(nums) returns the minimum subarray sum.\n\
    using Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpn8iaimq1.jl:20\nin expression starting at\
    \ /tmp/tmpn8iaimq1.jl:20\n"
  stdout: ''
  timestamp: 1660009406
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    nums = nums[2:end]\n\
    \    \n    if sum(nums) == 0\n        return 0\n    end\n    \n    answer = minimum(nums)\n\
    \    for num in nums\n        answer = minimum(answer, num + answer)\n    end\n\
    \    \n    return answer\nend\n</cell>\n<code language=julia-1.3>\nminSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n</cell>\n<code language=julia-1.3>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1, 2, 4])\
    \ == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1, -2, -3,\
    \ 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpat1percc.jl:25\nin expression starting at\
    \ /tmp/tmpat1percc.jl:25\n"
  stdout: ''
  timestamp: 1660009406
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    # Initialize\
    \ max and min values based on first element\n    max = nums[0]\n    min = nums[0]\n\
    \    \n    # Iterate through remaining elements to find the min sum\n    for i\
    \ in 1..nums.length \n        if nums[i] < min \n            min = nums[i]\n \
    \       elseif nums[i] > max\n            max = nums[i]\n        else\n      \
    \      min = min + nums[i]\n        end\n    end\n    return min\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1,\
    \ 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 12 errored,
    0 broken.

    in expression starting at /tmp/tmplym5g_o7.jl:30

    '
  stdout: "test set: Error During Test at /tmp/tmplym5g_o7.jl:33\n  Test threw exception\n\
    \  Expression: candidate([2, 3, 4, 1, 2, 4]) == 1\n  BoundsError: attempt to access\
    \ 6-element Vector{Int64} at index [0]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] minSubArraySum(nums::Vector{Int64})\n     @\
    \ Main /tmp/tmplym5g_o7.jl:13\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmplym5g_o7.jl:33 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmplym5g_o7.jl:32\ntest set:\
    \ Error During Test at /tmp/tmplym5g_o7.jl:34\n  Test threw exception\n  Expression:\
    \ candidate([-1, -2, -3]) == -6\n  BoundsError: attempt to access 3-element Vector{Int64}\
    \ at index [0]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861 [inlined]\n\
    \   [2] minSubArraySum(nums::Vector{Int64})\n     @ Main /tmp/tmplym5g_o7.jl:13\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmplym5g_o7.jl:34 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmplym5g_o7.jl:32\ntest set:\
    \ Error During Test at /tmp/tmplym5g_o7.jl:35\n  Test threw exception\n  Expression:\
    \ candidate([-1, -2, -3, 2, -10]) == -14\n  BoundsError: attempt to access 5-element\
    \ Vector{Int64} at index [0]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] minSubArraySum(nums::Vector{Int64})\n     @ Main /tmp/tmplym5g_o7.jl:13\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmplym5g_o7.jl:35 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmplym5g_o7.jl:32\ntest set:\
    \ Error During Test at /tmp/tmplym"
  timestamp: 1660009408
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    l = length(nums)\n\
    \    if l == 0 \n        return 0 \n    else \n        if l == 1 \n          \
    \  return nums[head(nums)] \n        else\n            ret = min(minSubArraySum(nums[1:(head(nums)\
    \ - 1)]), \n                      minSubArraySum(nums[2:(head(nums) - 1)])) +\
    \ \n                   nums[head(tail(nums))]\n            return ret \nend\n\"\
    \"\"\n    Given an integer num, find the length of the shortest substring containing\
    \ that number.\n    Example\n    >>> lengthOfShortestSubstring([9, 3, 6, 4, 8,\
    \ 1, 7, 5, 2])\n    3\n    >>> lengthOfShortestSubstring([1, 3, 3, 3, 3])\n  \
    \  3\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\
    \t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) ==\
    \ -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"if\" at /tmp/tmpacuxbkpk.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpacuxbkpk.jl:1\n\
    in expression starting at /tmp/tmpacuxbkpk.jl:1\n"
  stdout: ''
  timestamp: 1660009405
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    result = minimum(nums)\n\
    \    for x in nums do \n        result = result + x\n    end\n    return result\n\
    end\n</cell>\n<code language=julia-1.6>\nminSubArraySum([2, 3, 4, 1, 2, 4])\n\
    </cell>\n<code language=julia-1.6>\nminSubArraySum([-1, -2, -3])\n</cell>\n<code\
    \ language=julia-1.6>\nminSubArraySum([0, 1, 2, 3])\n</cell>\n<code language=julia-1.6>\n\
    using Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid \"do\" syntax\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpsshxq9z2.jl:12\nin expression starting at /tmp/tmpsshxq9z2.jl:12\n"
  stdout: ''
  timestamp: 1660009406
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    if nums == []\n\
    \        return 0;\n    end\n    subArrSum = minSubArraySum(nums[1:end-1]) + nums[1];\n\
    \    return subArrSum;\nend\n</cell>\n<text>\nRecursion\nusing Test\n\n@testset\
    \ begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1, 2, 4])\
    \ == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1, -2, -3,\
    \ 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmps9qu9erd.jl:17\nin expression starting at\
    \ /tmp/tmps9qu9erd.jl:17\n"
  stdout: ''
  timestamp: 1660009406
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n  sum = 0\n  for num\
    \ in nums\n    if num > 0\n      sum += num\n    end\n  end\n  return sum\nend\n\
    </cell>\n<code language=julia-0.5>\nsumminsubarray = @time minSubArraySum(arr);\n\
    </cell>\n<text>\nWe have now a working solution.  Let's benchmark it.\nusing Test\n\
    \n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1,\
    \ 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2g_xp12d.jl:19\nin expression starting at\
    \ /tmp/tmp2g_xp12d.jl:19\n"
  stdout: ''
  timestamp: 1660009405
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    nums = nums[2:end]\n\
    \    return minimum(nums) + minimum(nums)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t\
    @test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1, -2, -3, 2, -10])\
    \ == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\t@test(candidate([0,\
    \ 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3, 10, -5]) == -6)\n\t\
    @test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10, 11,\
    \ 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\t\
    @test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 8 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmptvbtd2uc.jl:16

    '
  stdout: "test set: Test Failed at /tmp/tmptvbtd2uc.jl:19\n  Expression: candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1\n   Evaluated: 2 == 1\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmptvbtd2uc.jl:19 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmptvbtd2uc.jl:18\ntest set: Test Failed at /tmp/tmptvbtd2uc.jl:21\n\
    \  Expression: candidate([-1, -2, -3, 2, -10]) == -14\n   Evaluated: -20 == -14\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptvbtd2uc.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptvbtd2uc.jl:18\ntest set: Error\
    \ During Test at /tmp/tmptvbtd2uc.jl:22\n  Test threw exception\n  Expression:\
    \ candidate([-9999999999999999]) == -9999999999999999\n  ArgumentError: reducing\
    \ over an empty collection is not allowed\n  Stacktrace:\n    [1] _empty_reduce_error()\n\
    \      @ Base ./reduce.jl:301\n    [2] reduce_empty(op::Function, #unused#::Type{Int64})\n\
    \      @ Base ./reduce.jl:311\n    [3] mapreduce_empty(#unused#::typeof(identity),\
    \ op::Function, T::Type)\n      @ Base ./reduce.jl:345\n    [4] reduce_empty(op::Base.MappingRF{typeof(identity),\
    \ typeof(min)}, #unused#::Type{Int64})\n      @ Base ./reduce.jl:331\n    [5]\
    \ reduce_empty_iter\n      @ ./reduce.jl:357 [inlined]\n    [6] mapreduce_empty_iter(f::Function,\
    \ op::Function, itr::Vector{Int64}, ItrEltype::Base.HasEltype)\n      @ Base ./reduce.jl:353\n\
    \    [7] _mapreduce\n      @ ./reduce.jl:402 [inlined]\n    [8] _mapreduce_dim\n\
    \      @ ./reducedim.jl:330 [inlined]\n    [9] #mapreduce#731\n      @ ./reducedim.jl:322\
    \ [inlined]\n   [10] mapreduce\n      @ ./reducedim.jl:322 [inlined]\n   [11]\
    \ #_minimum#753\n      @ ./reducedim.jl:894 [inlined]\n   [12] _minimum\n    \
    \  @ ./reducedim.jl:894 [inlined]\n   [13] #_minimu"
  timestamp: 1660009409
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    arrSum =\
    \ 0\n    for n in nums\n        arrSum += n\n    end\n    return arrSum\nend\n\
    using Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 5 passed, 7 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpesfkpsi3.jl:20

    '
  stdout: "test set: Test Failed at /tmp/tmpesfkpsi3.jl:23\n  Expression: candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1\n   Evaluated: 16 == 1\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpesfkpsi3.jl:23 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpesfkpsi3.jl:22\ntest set: Test Failed at /tmp/tmpesfkpsi3.jl:27\n\
    \  Expression: candidate([0, 10, 20, 1000000]) == 0\n   Evaluated: 1000030 ==\
    \ 0\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpesfkpsi3.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpesfkpsi3.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpesfkpsi3.jl:28\n  Expression: candidate([-1, -2, -3, 10, -5])\
    \ == -6\n   Evaluated: -1 == -6\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpesfkpsi3.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpesfkpsi3.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpesfkpsi3.jl:29\n  Expression: candidate([100, -1, -2, -3,\
    \ 10, -5]) == -6\n   Evaluated: 99 == -6\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpesfkpsi3.jl:29 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpesfkpsi3.jl:22\ntest set: Test Failed at /tmp/tmpesfkpsi3.jl:30\n\
    \  Expression: candidate([10, 11, 13, 8, 3, 4]) == 3\n   Evaluated: 49 == 3\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined"
  timestamp: 1660009407
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    if nums == Nil\
    \ \n        return 0 \n    \n    minimum = Inf \n    for a in nums \n        if\
    \ (minimum > -a) \n            minimum = -a \n        \n    return minimum \n\
    end\n</cell>\n<code language=julia-0.4>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1,\
    \ -2, -3]) == -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5qx5ej_g.jl:21\nin expression starting at\
    \ /tmp/tmp5qx5ej_g.jl:21\n"
  stdout: ''
  timestamp: 1660009405
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    nums = nums[end]\n\
    \    if nums == 0 \n        return 0\n    else \n        return nums + minSubArraySum(nums[2:end-1])\n\
    end\n</cell>\n<text>\nminSubArraySum\nusing Test\n\n@testset begin\n\ncandidate\
    \ = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1,\
    \ -2, -3]) == -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7_o8sc2o.jl:17\nin expression starting at\
    \ /tmp/tmp7_o8sc2o.jl:17\n"
  stdout: ''
  timestamp: 1660009406
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    \"\"\"\n\
    \    Function to compute the minimum sum of any sub-array in nums.\n    Input:\
    \ nums - Vector of integers\n    Output: Minimum sum of any non-empty sub-array\
    \ in nums\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\
    \t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) ==\
    \ -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp_5bp15k6.jl:10\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp_5bp15k6.jl:1\n\
    in expression starting at /tmp/tmp_5bp15k6.jl:1\n"
  stdout: ''
  timestamp: 1660009405
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    if nums.length\
    \ == 0 \n        return nums[0] \n    \n    local min_sum = nums[0] \n    local\
    \ cur_min = nums[0] \n    local cur_sum = nums[0] \nusing Test\n\n@testset begin\n\
    \ncandidate = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t\
    @test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1, -2, -3, 2, -10])\
    \ == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\t@test(candidate([0,\
    \ 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3, 10, -5]) == -6)\n\t\
    @test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10, 11,\
    \ 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\t\
    @test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp856o5rcb.jl:1\nin expression starting at /tmp/tmp856o5rcb.jl:1\n"
  stdout: ''
  timestamp: 1660009405
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    # Your code here\n\
    \    size = length(nums)\n    min_sum = zeros(Int, size)\n    for i in 1:size\n\
    \        sub_array = nums[i:end-i-1]\n        sub_sum = minimum(sub_array)\n \
    \       min_sum[i] = sub_sum\n    end\n    return minimum(min_sum)\nend\n</cell>\n\
    <text>\nThe function above finds the minimum sub-array of nums (without replacement).\
    \ What if we want to find the minimum sub-array of nums with replacement?\nusing\
    \ Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcwl9meyg.jl:21\nin expression starting at\
    \ /tmp/tmpcwl9meyg.jl:21\n"
  stdout: ''
  timestamp: 1660009406
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    # Your code here\n\
    \    length = (nums.length / 2)\n    s = sum(nums[0 : length])\n    for i = length\
    \ to length + nums.length - 1\n        s = s + nums[i]\n    end\n    return s\n\
    end\n</cell>\n<text>\n\u56DE\u7B54:\nusing Test\n\n@testset begin\n\ncandidate\
    \ = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1,\
    \ -2, -3]) == -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmpiari29ok.jl:14 expected \"\
    end\", got \"length\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpiari29ok.jl:14\n\
    in expression starting at /tmp/tmpiari29ok.jl:14\n"
  stdout: ''
  timestamp: 1660009406
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    n = length(nums)\n\
    \    if n == 0\n        return 0\n    if n == 1\n        return nums[0]\n    \n\
    \    sum = 0\n    l = [1]\n    for i in 2:n\n        for j in l\n            sum\
    \ += nums[i]\n            if sum > j\n                sum = j\n            end\n\
    \        end\n        l = [sum, sum + nums[i]]\n    end\n    return l[1]\nend\n\
    using Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4qbrdn5l.jl:1\nin expression starting at /tmp/tmp4qbrdn5l.jl:1\n"
  stdout: ''
  timestamp: 1660009405
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    return minimum(subArraySums(nums))\n\
    end\n</cell>\n<text>\nThe main method here is the subArraySums function. This\
    \ function takes the vector, and looks for any sub-arrays that are non-empty.\
    \ We can see that this function has a return type of Vector{Int64}. That means\
    \ it can only return one Int64 value, which is what the minimum function expects.\n\
    using Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpj3o4yu7y.jl:13\nin expression starting at\
    \ /tmp/tmpj3o4yu7y.jl:13\n"
  stdout: ''
  timestamp: 1660009407
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n\tminSum::Int64=0\n\
    \tnums::Vector{Int64} \n\tfor\ti in 1:length(nums)\n\t\tif nums[i]>0\n\t\t\tsum::Int64=0\n\
    \t\t\tsum+=nums[i]\n\t\t\tfor j in i+1:length(nums)\n\t\t\t\tif nums[j]>0\n\t\t\
    \t\t\tsum+=nums[j]\n\t\t\t\telse\n\t\t\t\t\tbreak\n\t\t\t\tend\n\t\t\tend\n\t\t\
    \tif sum<minSum\n\t\t\t\tminSum=sum\n\t\t\tend\n\t\tend\n\tend\n\tminSum\nend\n\
    </cell>\n<text>\n6. \u6700\u5927\u6570\nGiven a vector of integers nums, find\
    \ the maximum element in nums.\nExample\n    >>> max([1, 2, 3, 4])\n    4\n  \
    \  >>> max([-1, -2, -3, 0])\n    0\n\"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1,\
    \ -2, -3]) == -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqtbhbkzn.jl:31\nin expression starting at\
    \ /tmp/tmpqtbhbkzn.jl:31\n"
  stdout: ''
  timestamp: 1660009407
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    if nums == []\n\
    \        return 0\n    else if nums == [1]\n        return 1\n    elseif nums\
    \ == [2]\n        return 2\n    else\n        let (head, tail) = tail(tail(nums))\n\
    \        return head + minSubArraySum(tail)\n    end\nend\n\"\"\"\n    Given a\
    \ vector of integers nums, find the maximum number of times any element appears\
    \ in nums.\n    Example\n    >>> maxAppearances([1, 1, 2])\n    1\n    >>> maxAppearances([-2,\
    \ 2, 2, -2, -1])\n    3\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1,\
    \ -2, -3]) == -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptbm6f_aw.jl:13\nin expression starting at\
    \ /tmp/tmptbm6f_aw.jl:13\n"
  stdout: ''
  timestamp: 1660009407
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    if nums.size <=\
    \ 0 \n        return 0 \n    end\n    \n    local sum = 0 \n    local minSoFar\
    \ = 0 \n    for i = 1, nums.size do \n        if i == 1 \n            sum = nums[0]\
    \ \n        else \n            sum = sum + nums[i] \n            if sum < minSoFar\
    \ then \n                minSoFar = sum \n            end \n        end\n    end\n\
    \    return minSoFar \nend\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\
    \t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) ==\
    \ -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid iteration specification\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppr3cyc7u.jl:17\nin expression starting at\
    \ /tmp/tmppr3cyc7u.jl:17\n"
  stdout: ''
  timestamp: 1660009407
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    if nums.length==0\
    \ \n        return 0 \n    \n    minimum = math.min(minSubArraySum(nums[2:end-1]),\
    \ nums[1]+minSubArraySum(nums[3:end]))\n    \n    return minimum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1,\
    \ 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpne2wgadv.jl:10\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpne2wgadv.jl:1\n\
    in expression starting at /tmp/tmpne2wgadv.jl:1\n"
  stdout: ''
  timestamp: 1660009407
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    # Your code here\n\
    end\n</cell>\n<text>\nExamine and execute the test cell below.\nusing Test\n\n\
    @testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1,\
    \ 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpq2y9zgzc.jl:13\nin expression starting at\
    \ /tmp/tmpq2y9zgzc.jl:13\n"
  stdout: ''
  timestamp: 1660009407
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    return min(sum(a)\
    \ for a in subsets(nums))\nend\n</code>\n<|/ a dscore=1 |>\n<| a tags=vector,arrays,julia,algorithm,sum\
    \ |>\nHere is a solution with an explicit loop.\n<code>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1, 2, 4])\
    \ == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1, -2, -3,\
    \ 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp02zi8bqd.jl:13\nin expression starting at\
    \ /tmp/tmp02zi8bqd.jl:13\n"
  stdout: ''
  timestamp: 1660009407
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    \"\"\"\n    Solution\
    \ 1 - Recursive function\n    Input: nums: an array of integers\n    Output: The\
    \ minimum sum of any non-empty sub-vector of nums\n    \"\"\"\n    \n    return\
    \ findMinSumHelper(nums, 0, length(nums), 0)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t\
    @test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1, -2, -3, 2, -10])\
    \ == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\t@test(candidate([0,\
    \ 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3, 10, -5]) == -6)\n\t\
    @test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10, 11,\
    \ 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\t\
    @test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 12 errored,
    0 broken.

    in expression starting at /tmp/tmpw0nmzd79.jl:21

    '
  stdout: "test set: Error During Test at /tmp/tmpw0nmzd79.jl:24\n  Test threw exception\n\
    \  Expression: candidate([2, 3, 4, 1, 2, 4]) == 1\n  UndefVarError: findMinSumHelper\
    \ not defined\n  Stacktrace:\n   [1] minSubArraySum(nums::Vector{Int64})\n   \
    \  @ Main /tmp/tmpw0nmzd79.jl:17\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpw0nmzd79.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpw0nmzd79.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpw0nmzd79.jl:25\n  Test threw exception\n  Expression:\
    \ candidate([-1, -2, -3]) == -6\n  UndefVarError: findMinSumHelper not defined\n\
    \  Stacktrace:\n   [1] minSubArraySum(nums::Vector{Int64})\n     @ Main /tmp/tmpw0nmzd79.jl:17\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpw0nmzd79.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpw0nmzd79.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpw0nmzd79.jl:26\n  Test threw exception\n  Expression:\
    \ candidate([-1, -2, -3, 2, -10]) == -14\n  UndefVarError: findMinSumHelper not\
    \ defined\n  Stacktrace:\n   [1] minSubArraySum(nums::Vector{Int64})\n     @ Main\
    \ /tmp/tmpw0nmzd79.jl:17\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpw0nmzd79.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpw0nmzd79.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpw0nmzd79.jl:27\n  Test threw exception\n  Expression:\
    \ candidate([-9999999999999999]) == -9999999999999999\n  UndefVarError: findMinSumHelper\
    \ not defined\n  Stacktrace:\n   [1] minSubArraySum(nums::Vector{Int64})\n   \
    \  @ Main "
  timestamp: 1660009410
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    nums = nums[:]\n\
    \    local sum::Int64 = 0\n    local cnt::Int64 = 0\n    local min = Inf.sign;\n\
    \    local max;\n    for ix in nums do\n        if ix < 0 then\n            cnt\
    \ += 1\n        else\n            cnt -= 1\n        end\n        sum += ix\n \
    \       if cnt > 0 then\n            if cnt > min then\n                min =\
    \ cnt\n                max = ix\n            end\n        end\n    end\n    \n\
    \    return min\nend\n</cell>\n<code language=julia-1.5>\nminSubArraySum([-2,\
    \ -3, -2, -4])\n</cell>\n<text>\nProblem 10\nFind the median of a list of numbers\n\
    using Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid \"do\" syntax\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpr4n0oc55.jl:16\nin expression starting at /tmp/tmpr4n0oc55.jl:16\n"
  stdout: ''
  timestamp: 1660009407
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    sum::Int64 = 0\n\
    \    for num in nums\n        sum::Int64 = sum + num\n    end\n    return sum\n\
    end\n\"\"\"\nGiven a matrix and a list of column indices, return the minimum sum\
    \ in the matrix.\nExample\n    >>> minSum([[1, 2, 3, -1, 4], [3, 1, 1, 2, -3],\
    \ [3, 3, 2, 1, 1]])\n    -2\n    >>> minSum([[1, 2, 3, -1, 4], [3, 1, 1, 2, -3],\
    \ [3, 3, 2, 1, 1]], [0, 2])\n    -4\n    >>> minSum([[1, 2, 3, -1, 4], [3, 1,\
    \ 1, 2, -3], [3, 3, 2, 1, 1]], [1, 1])\n    -4\n\"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1, 2, 4])\
    \ == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1, -2, -3,\
    \ 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: multiple type declarations for \"sum\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphqwgh0v8.jl:1\nin expression starting at /tmp/tmphqwgh0v8.jl:1\n"
  stdout: ''
  timestamp: 1660009407
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    local sum\
    \ = Int.Min\n    \n    for i in nums\n        sum = math.min(sum, i+min)\n   \
    \ end\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpv_zimzo1.jl:10\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpv_zimzo1.jl:1\n\
    in expression starting at /tmp/tmpv_zimzo1.jl:1\n"
  stdout: ''
  timestamp: 1660009407
- exit_code: -1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    vec=copy(nums)\n\
    \    while length(vec)>0\n        mini=minimum(vec)\n        vec=filter(mini!==vec\
    \ , vec)\n    end\n    return mini\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1,\
    \ -2, -3]) == -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  status: Timeout
  stderr: 'ERROR: LoadError: '
  stdout: "test set: Error During Test at /tmp/tmpdryikeh5.jl:23\n  Test threw exception\n\
    \  Expression: candidate([2, 3, 4, 1, 2, 4]) == 1\n  MethodError: objects of type\
    \ Bool are not callable\n  Maybe you forgot to use an operator such as *, ^, %,\
    \ / etc. ?\n  Stacktrace:\n   [1] filter(f::Bool, a::Vector{Int64})\n     @ Base\
    \ ./array.jl:2484\n   [2] minSubArraySum(nums::Vector{Int64})\n     @ Main /tmp/tmpdryikeh5.jl:14\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpdryikeh5.jl:23 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpdryikeh5.jl:22\ntest set:\
    \ Error During Test at /tmp/tmpdryikeh5.jl:24\n  Test threw exception\n  Expression:\
    \ candidate([-1, -2, -3]) == -6\n  MethodError: objects of type Bool are not callable\n\
    \  Maybe you forgot to use an operator such as *, ^, %, / etc. ?\n  Stacktrace:\n\
    \   [1] filter(f::Bool, a::Vector{Int64})\n     @ Base ./array.jl:2484\n   [2]\
    \ minSubArraySum(nums::Vector{Int64})\n     @ Main /tmp/tmpdryikeh5.jl:14\n  \
    \ [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpdryikeh5.jl:24 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpdryikeh5.jl:22\ntest set:\
    \ Error During Test at /tmp/tmpdryikeh5.jl:25\n  Test threw exception\n  Expression:\
    \ candidate([-1, -2, -3, 2, -10]) == -14\n  MethodError: objects of type Bool\
    \ are not callable\n  Maybe you forgot to use an operator such as *, ^, %, / etc.\
    \ ?\n  Stacktrace:\n   [1] filter(f::Bool, a::Vector{Int64})\n     @ Base ./array.jl:2484\n\
    \   [2] minSubArraySum(nums::Vector{Int64})\n     @ Main /tmp/tmpdryikeh5.jl:14\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpdryikeh5.jl:25 [inlined]\n"
  timestamp: 1660009411
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    if length(nums)\
    \ <= 0\n        return 0\n    end\n    local minSum = nums[1]\n    for i in 2:length(nums)\n\
    \        local sum = minSum + nums[i]\n        if sum < minSum\n            minSum\
    \ = sum\n        else\n            break\n        end\n    end\n    return minSum\n\
    end\n</cell>\n<text>\n7. \u4E8C\u5206\u67E5\u627E\n\u5BF9\u4E8E\u4E00\u7EF4\u6570\
    \u7EC4\uFF0C\u4E00\u4E2A\u4E8C\u5206\u67E5\u627E\u5C31\u662F\u7EDF\u8BA1\u6570\
    \u7EC4\u4E2D\u4E00\u6BB5\u76F8\u540C\u7684\u5143\u7D20\u7684\u4E2A\u6570\u7684\
    \u51FD\u6570\u3002\n\u5982 A = [1, 2, 4, 6, 6] \u662F\u4E00\u4E2A 3 \u7EF4\u6570\
    \u7EC4\uFF0C\u7EDF\u8BA1\u6570\u7EC4\u4E2D\u7B2C\u4E09\u4E2A\u5143\u7D20\u662F\
    \ 6\uFF0C \u7B2C\u4E8C\u4E2A\u5143\u7D20\u662F 6\uFF0C\n\u7B2C\u4E00\u4E2A\u5143\
    \u7D20\u662F 1\uFF0C\u603B\u5171\u6709 2 \u4E2A 6 \uFF0C\u56E0\u6B64\u53EF\u4EE5\
    \u8FD4\u56DE\u4E00\u4E2A 2 \u7EF4\u6570\u7EC4\uFF0C\u5176\u4E2D\u7B2C\u4E00\u5217\
    \u662F 1 \u548C 3\uFF0C\u7B2C\u4E8C\u5217\u662F 2\n\u548C 4\u3002\nusing Test\n\
    \n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1,\
    \ 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3waa7sij.jl:25\nin expression starting at\
    \ /tmp/tmp3waa7sij.jl:25\n"
  stdout: ''
  timestamp: 1660009407
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    lenn = length(nums)\n\
    \    if lenn < 2\n        return nums[1]\n    \n    vec = [0 for i=1:lenn]\n \
    \   for i=1:lenn\n        vec[i] = nums[i]\n    end\nusing Test\n\n@testset begin\n\
    \ncandidate = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t\
    @test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1, -2, -3, 2, -10])\
    \ == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\t@test(candidate([0,\
    \ 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3, 10, -5]) == -6)\n\t\
    @test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10, 11,\
    \ 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\t\
    @test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9lpcpn0b.jl:1\nin expression starting at /tmp/tmp9lpcpn0b.jl:1\n"
  stdout: ''
  timestamp: 1660009407
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    len = length(nums)\n\
    \    if len == 0 \n        return 0 \n    \n    m = ceil(sqrt(len))\n    if m\
    \ == 0 \n        return 0 \n    \n    sum = 0\n    left = 0\n    right = m\nusing\
    \ Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgje7htx4.jl:1\nin expression starting at /tmp/tmpgje7htx4.jl:1\n"
  stdout: ''
  timestamp: 1660009407
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    # base case\
    \ : an empty vector\n    if length(nums) == 0 \n        return 0  \nusing Test\n\
    \n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1,\
    \ 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdblujrep.jl:1\nin expression starting at /tmp/tmpdblujrep.jl:1\n"
  stdout: ''
  timestamp: 1660009407
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    sum = 0\n    for\
    \ i in nums\n        for j in nums\n            sum+=i\n            sum+=j\n \
    \           if sum < 0\n                sum = 0\n            end\n        end\n\
    \    end\n    return sum\nend\n</cell>\n<code language=julia-1.0>\nminSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n</cell>\n<code language=julia-1.0>\nminSubArraySum([-1, -2,\
    \ -3])\n</cell>\n<code language=julia-1.0>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1,\
    \ -2, -3]) == -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmps9aqqm8q.jl:23\nin expression starting at\
    \ /tmp/tmps9aqqm8q.jl:23\n"
  stdout: ''
  timestamp: 1660009407
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    nums = nums[:]\n\
    \    i = nums.length\n    v = Int64(-1)\n    \n    while(i>0)\n        v = min(v,\
    \ nums[i-1] + v)\n        i = i-1\n        \n    return v\nend\n    \n    \n\"\
    \"\"\n    Given a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2, 3, 4, 1, 2,\
    \ 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\"\"\nusing\
    \ Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpmqgrtdqx.jl:10\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpmqgrtdqx.jl:1\n\
    in expression starting at /tmp/tmpmqgrtdqx.jl:1\n"
  stdout: ''
  timestamp: 1660009407
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    for elem in nums\n\
    \        if elem < 0 || sum( nums[elem+1:end] ) == 0\n            continue\n \
    \       else \n            minsum = minimum(sum( nums[elem+1:end] ))\n       \
    \ end\n    end\n    minsum\nend\n</cell>\n<text>\n6.5 Nth root\nGiven an integer\
    \ $n$, find the $n$th root of a number $x$. Assume $x \\leq 1$.\nusing Test\n\n\
    @testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1,\
    \ 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxjt7fmzc.jl:20\nin expression starting at\
    \ /tmp/tmpxjt7fmzc.jl:20\n"
  stdout: ''
  timestamp: 1660009407
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    \"\"\"\n    Given\
    \ a vector of integers nums, find the minimum sum of any non-empty sub-vector\n\
    \    of nums.\n    Example\n    >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n    1\n\
    \    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1, 2, 4])\
    \ == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1, -2, -3,\
    \ 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp6ke1rkzv.jl:10\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp6ke1rkzv.jl:1\n\
    in expression starting at /tmp/tmp6ke1rkzv.jl:1\n"
  stdout: ''
  timestamp: 1660009407
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    cdef int i, N\
    \ = length(nums)\n    cdef int min_sum = nums[0]\n    for i in range(N):\n   \
    \     if nums[i] > min_sum:\n            min_sum = nums[i]\n    return min_sum\n\
    end \nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"function\" at /tmp/tmpsab_tqcw.jl:10 expected\
    \ \"end\", got \"int\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpsab_tqcw.jl:11\n\
    in expression starting at /tmp/tmpsab_tqcw.jl:11\n"
  stdout: ''
  timestamp: 1660009409
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    sum=0\n    for\
    \ x in nums\n        sum=sum+x\n    end\n    return sum\nend\n</cell>\n<text>\n\
    To find maximum sub array:\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\
    \t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) ==\
    \ -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp746wei6g.jl:17\nin expression starting at\
    \ /tmp/tmp746wei6g.jl:17\n"
  stdout: ''
  timestamp: 1660009409
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n \n\"\"\"\n    This\
    \ function computes the minimum sum of any non-empty sub-array of nums.\n    It\
    \ is a helper function.\n    \n    Parameters\n    ----------\n    nums: Int64[]\n\
    \        An array of integers.\n    \n    Returns\n    -------\n    ans: int\n\
    \        The minimum sum of any non-empty sub-array of nums.\n    \n    Notes\n\
    \    -----\n    This function should be called from within a function with the\
    \ signature:\n    \n        function minSubArraySum(nums:Int64):Int64\n    \n\
    \    Examples\n    --------\n    >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n    1\n\
    \    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \n\"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1, 2, 4])\
    \ == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1, -2, -3,\
    \ 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp6h6s276b.jl:10\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp6h6s276b.jl:1\n\
    in expression starting at /tmp/tmp6h6s276b.jl:1\n"
  stdout: ''
  timestamp: 1660009409
- exit_code: -1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    sum_vector = Vector{Int64}(undef,\
    \ 0)\n    for num in nums\n        sum_vector += num\n    end\n    return sum_vector\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  status: Timeout
  stderr: ''
  stdout: "test set: Error During Test at /tmp/tmpmin1goc9.jl:22\n  Test threw exception\n\
    \  Expression: candidate([2, 3, 4, 1, 2, 4]) == 1\n  MethodError: no method matching\
    \ +(::Vector{Int64}, ::Int64)\n  For element-wise addition, use broadcasting with\
    \ dot syntax: array .+ scalar\n  Closest candidates are:\n    +(::Any, ::Any,\
    \ !Matched::Any, !Matched::Any...) at ~/.conda/envs/polyglot/share/julia/base/operators.jl:655\n\
    \    +(!Matched::T, ::T) where T<:Union{Int128, Int16, Int32, Int64, Int8, UInt128,\
    \ UInt16, UInt32, UInt64, UInt8} at ~/.conda/envs/polyglot/share/julia/base/int.jl:87\n\
    \    +(!Matched::LinearAlgebra.UniformScaling, ::Number) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:145\n\
    \    ...\n  Stacktrace:\n   [1] minSubArraySum(nums::Vector{Int64})\n     @ Main\
    \ /tmp/tmpmin1goc9.jl:13\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpmin1goc9.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpmin1goc9.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpmin1goc9.jl:23\n  Test threw exception\n  Expression:\
    \ candidate([-1, -2, -3]) == -6\n  MethodError: no method matching +(::Vector{Int64},\
    \ ::Int64)\n  For element-wise addition, use broadcasting with dot syntax: array\
    \ .+ scalar\n  Closest candidates are:\n    +(::Any, ::Any, !Matched::Any, !Matched::Any...)\
    \ at ~/.conda/envs/polyglot/share/julia/base/operators.jl:655\n    +(!Matched::T,\
    \ ::T) where T<:Union{Int128, Int16, Int32, Int64, Int8, UInt128, UInt16, UInt32,\
    \ UInt64, UInt8} at ~/.conda/envs/polyglot/share/julia/base/int.jl:87\n    +(!Matched::LinearAlgebra.UniformScaling,\
    \ ::Number) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:145\n\
    \    ...\n  Stacktrace:\n   [1] minSubArraySum(nums::Vector{Int64})\n     @ Main\
    \ /tmp/tmpmin1goc9.jl:13\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/"
  timestamp: 1660009412
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    \"\"\"\n    Given\
    \ a vector of integers nums, find the minimum sum of any non-empty sub-vector\n\
    \    of nums.\n    Example\n    >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n    1\n\
    \    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\"\"\n    if nums == []\n\
    \        return 0;\n    if nums.length < 0\n        return -nums.length;\n   \
    \ \n    var min = nums[0];\n    var min_len = nums.length;\n    for i in 1:(nums.length)\n\
    \        if nums[i] < min\n            min = nums[i];\n        elseif nums[i]\
    \ != min\n            min_len = nums.length;\n        else\n            break;\n\
    \    end\n    return min\nend\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\
    \t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) ==\
    \ -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"min\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpb7os1lso.jl:25\nin expression starting at /tmp/tmpb7os1lso.jl:25\n"
  stdout: ''
  timestamp: 1660009409
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    \"\"\"\n    Given\
    \ a vector of integers nums, find the minimum sum of any non-empty sub-vector\n\
    \    of nums.\n    Example\n    >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n    1\n\
    \    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\"\"\n    return minimum(nums)\n\
    end\n</cell>\n<code language=julia-1.1>\nminimumSubArraySum([2, 3, 4, 1, 2, 4])\n\
    </cell>\n<text>\nExercise 3: Recursive Solutions\nusing Test\n\n@testset begin\n\
    \ncandidate = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t\
    @test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1, -2, -3, 2, -10])\
    \ == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\t@test(candidate([0,\
    \ 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3, 10, -5]) == -6)\n\t\
    @test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10, 11,\
    \ 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\t\
    @test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9dqjj_od.jl:22\nin expression starting at\
    \ /tmp/tmp9dqjj_od.jl:22\n"
  stdout: ''
  timestamp: 1660009409
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    n = length(nums)\n\
    \    sum_ = sum(nums)\n    if sum_ < 0\n        return sum_\n    minimum = sum_\n\
    \    for i in 1:n\n        minimum = min(minimum, nums[i] + minSubArraySum(nums[i+1:n]))\n\
    \    end\n    return minimum\nend\n</code>\nFor big arrays, a more efficient algorithm\
    \ can be developed. One possibility is to first sort the array in O(nlogn), then\
    \ applying the algorithm mentioned in the above post, which runs in O(n).\n<|/\
    \ a dscore=1 |>\n<| c |>\nWhile this is correct, it's an O(n^2) solution. The\
    \ [O(n) solution](http://stackoverflow.com/questions/3343038/minimum-sum-of-subsets-of-numbers)\
    \ is better.\n<|/ c |>\n<| a dscore=0 |>\nA naive solution:\n<code>\nusing Test\n\
    \n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1,\
    \ 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpih7g7pn1.jl:21\nin expression starting at\
    \ /tmp/tmpih7g7pn1.jl:21\n"
  stdout: ''
  timestamp: 1660009409
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    if len(nums) <=\
    \ 0\n        throw(ArgumentError(\"Cannot compute the minimum sum of a vector\
    \ of length 0\"))\n    end\n    total = 0\n    for i in eachindex(nums)\n    \
    \    total += nums[i]\n    end\n    return total\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1, 2, 4])\
    \ == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1, -2, -3,\
    \ 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 12 errored,
    0 broken.

    in expression starting at /tmp/tmpv1ntre6p.jl:22

    '
  stdout: "test set: Error During Test at /tmp/tmpv1ntre6p.jl:25\n  Test threw exception\n\
    \  Expression: candidate([2, 3, 4, 1, 2, 4]) == 1\n  UndefVarError: len not defined\n\
    \  Stacktrace:\n   [1] minSubArraySum(nums::Vector{Int64})\n     @ Main /tmp/tmpv1ntre6p.jl:11\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpv1ntre6p.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpv1ntre6p.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpv1ntre6p.jl:26\n  Test threw exception\n  Expression:\
    \ candidate([-1, -2, -3]) == -6\n  UndefVarError: len not defined\n  Stacktrace:\n\
    \   [1] minSubArraySum(nums::Vector{Int64})\n     @ Main /tmp/tmpv1ntre6p.jl:11\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpv1ntre6p.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpv1ntre6p.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpv1ntre6p.jl:27\n  Test threw exception\n  Expression:\
    \ candidate([-1, -2, -3, 2, -10]) == -14\n  UndefVarError: len not defined\n \
    \ Stacktrace:\n   [1] minSubArraySum(nums::Vector{Int64})\n     @ Main /tmp/tmpv1ntre6p.jl:11\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpv1ntre6p.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpv1ntre6p.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpv1ntre6p.jl:28\n  Test threw exception\n  Expression:\
    \ candidate([-9999999999999999]) == -9999999999999999\n  UndefVarError: len not\
    \ defined\n  Stacktrace:\n   [1] minSubArraySum(nums::Vector{Int64})\n     @ Main\
    \ /tmp/tmpv1ntre6p.jl:11\n   [2] macro expansion\n     @"
  timestamp: 1660009412
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    if nums == []\
    \ \n        return 0 \n    else if length(nums) < 2 \n        return nums[1] \n\
    \    else \n        \n        val low = min(nums)\n        val high = max(nums)\n\
    \        return low + minSubArraySum(Vector{Int64}[nums[i]-1 for i in range(1,length(nums))])\
    \ \n    end\nend\n\"\"\"\n    Given a vector of integers nums, find the minimum\
    \ sum of any non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6x63v6qp.jl:13\nin expression starting at\
    \ /tmp/tmp6x63v6qp.jl:13\n"
  stdout: ''
  timestamp: 1660009409
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    # Write your code\
    \ in Python 3.6\n    \n    # Base Case\n    if length(nums) < 1 return 0\n   \
    \ \n    # Recursive Case\n    # Initialize our answer with the first value in\
    \ the vector\n    answer =nums[1]\n    for i=2:length(nums)\n        answer =\
    \ answer + nums[i]\n    end\n    return answer\nusing Test\n\n@testset begin\n\
    \ncandidate = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t\
    @test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1, -2, -3, 2, -10])\
    \ == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\t@test(candidate([0,\
    \ 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3, 10, -5]) == -6)\n\t\
    @test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10, 11,\
    \ 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\t\
    @test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxynojkl7.jl:1\nin expression starting at /tmp/tmpxynojkl7.jl:1\n"
  stdout: ''
  timestamp: 1660009409
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n  \n    sum = zero(Int64)\n\
    \    for v in nums\n        for i = 1:v\n            sum += i\n        end\n \
    \   end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1,\
    \ 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmnvvdpim.jl:20\nin expression starting at\
    \ /tmp/tmpmnvvdpim.jl:20\n"
  stdout: ''
  timestamp: 1660009409
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    sum::Int64 = 0\n\
    \    i=0\n    while i<length(nums)\n        sum = sum + nums[i]\n        if sum<0\n\
    \           sum = 0\n        end\n        i=i+1\n    end\n    return sum\nend\n\
    using Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 12 errored,
    0 broken.

    in expression starting at /tmp/tmplsyo4ybg.jl:24

    '
  stdout: "test set: Error During Test at /tmp/tmplsyo4ybg.jl:27\n  Test threw exception\n\
    \  Expression: candidate([2, 3, 4, 1, 2, 4]) == 1\n  BoundsError: attempt to access\
    \ 6-element Vector{Int64} at index [0]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] minSubArraySum(nums::Vector{Int64})\n     @\
    \ Main /tmp/tmplsyo4ybg.jl:14\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmplsyo4ybg.jl:27 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmplsyo4ybg.jl:26\ntest set:\
    \ Error During Test at /tmp/tmplsyo4ybg.jl:28\n  Test threw exception\n  Expression:\
    \ candidate([-1, -2, -3]) == -6\n  BoundsError: attempt to access 3-element Vector{Int64}\
    \ at index [0]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861 [inlined]\n\
    \   [2] minSubArraySum(nums::Vector{Int64})\n     @ Main /tmp/tmplsyo4ybg.jl:14\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmplsyo4ybg.jl:28 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmplsyo4ybg.jl:26\ntest set:\
    \ Error During Test at /tmp/tmplsyo4ybg.jl:29\n  Test threw exception\n  Expression:\
    \ candidate([-1, -2, -3, 2, -10]) == -14\n  BoundsError: attempt to access 5-element\
    \ Vector{Int64} at index [0]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] minSubArraySum(nums::Vector{Int64})\n     @ Main /tmp/tmplsyo4ybg.jl:14\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmplsyo4ybg.jl:29 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmplsyo4ybg.jl:26\ntest set:\
    \ Error During Test at /tmp/tmplsy"
  timestamp: 1660009412
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    min = Inf \n \
    \   for x in nums \n        if min > x \n            min = x \n        else \n\
    \            min = min + x \n    return min \nend\n</cell>\n<code language=julia-0.6>\n\
    minSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<text>\nQuestion 2\nWrite a function\
    \ which takes in a vector of integers nums, returns 1 if there exist two elements\
    \ i and j such that \nnums[i] + nums[j] = minSubArraySum(nums[i:j]), 0 otherwise.\n\
    using Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsv4qp7lk.jl:19\nin expression starting at\
    \ /tmp/tmpsv4qp7lk.jl:19\n"
  stdout: ''
  timestamp: 1660009409
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    sum = 0\n    min\
    \ = Inf.Int64 \n    for x in nums \n        sum += x\n        if sum < min \n\
    \            min = sum\n        end\n    end\n    min\nend\n</cell>\n<code language=julia-1.1>\n\
    minSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<code language=julia-1.1>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpshek5jde.jl:21\nin expression starting at\
    \ /tmp/tmpshek5jde.jl:21\n"
  stdout: ''
  timestamp: 1660009409
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    \"\"\"\n    \n\
    \    >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1,\
    \ -2, -3])\n    -6\n    \"\"\"\n    \n    min_sum = Inf\n    \n    for i in nums\n\
    \        if i < 0\n            continue\n        \n        if min_sum > 0\n  \
    \          min_sum -= i\n        else\n            min_sum += i\n    end\n   \
    \ return min_sum\nend\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\
    \t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) ==\
    \ -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"for\" at /tmp/tmpcst9odbk.jl:21\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpcst9odbk.jl:1\n\
    in expression starting at /tmp/tmpcst9odbk.jl:1\n"
  stdout: ''
  timestamp: 1660009409
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    min = nums[0]\n\
    \    for v in nums do \n        if v > min \n            min = -min\n        elseif\
    \ v < min \n            min = v\n        end\n    end\n    return min\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid \"do\" syntax\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpr8pdyzu2.jl:12\nin expression starting at /tmp/tmpr8pdyzu2.jl:12\n"
  stdout: ''
  timestamp: 1660009409
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    sum = 0\n    for\
    \ n in nums\n        sum += n\n    return sum\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t\
    @test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1, -2, -3, 2, -10])\
    \ == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\t@test(candidate([0,\
    \ 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3, 10, -5]) == -6)\n\t\
    @test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10, 11,\
    \ 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\t\
    @test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpt4_5r94p.jl:10\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpt4_5r94p.jl:1\n\
    in expression starting at /tmp/tmpt4_5r94p.jl:1\n"
  stdout: ''
  timestamp: 1660009409
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    for i =\
    \ 1:length(nums)\n        min_sum = minimum(nums[i:i+length(nums)])\n        \n\
    \        if min_sum != nums[i]\n            \n            return nums[i]\n   \
    \     \n        end\n    end\nend\n</cell>\n<code language=julia-1.3>\nminSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n</cell>\n<code language=julia-1.3>\n@assert minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]) == 1 \n</cell>\n<text>\nFind two integers in an array whose\
    \ sum is closest to a given target\n(Hint, you might want to use @inbounds magic).\n\
    using Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmph23h1rmm.jl:22\nin expression starting at\
    \ /tmp/tmph23h1rmm.jl:22\n"
  stdout: ''
  timestamp: 1660009409
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    minNum = nums[1]\n\
    \    minSubArraySum = nums[1]\n    for num in nums[2:end]\n        if num < minNum\n\
    \            minNum = num\n            minSubArraySum = num\n        elseif num\
    \ == minNum\n            minSubArraySum += num\n        end\n    end\n    return\
    \ minSubArraySum\nend\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\
    \t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) ==\
    \ -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 8 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp73zhyxi3.jl:25

    '
  stdout: "test set: Test Failed at /tmp/tmp73zhyxi3.jl:29\n  Expression: candidate([-1,\
    \ -2, -3]) == -6\n   Evaluated: -3 == -6\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp73zhyxi3.jl:29 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp73zhyxi3.jl:27\ntest set: Test Failed at /tmp/tmp73zhyxi3.jl:30\n\
    \  Expression: candidate([-1, -2, -3, 2, -10]) == -14\n   Evaluated: -10 == -14\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp73zhyxi3.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp73zhyxi3.jl:27\ntest set: Test\
    \ Failed at /tmp/tmp73zhyxi3.jl:33\n  Expression: candidate([-1, -2, -3, 10, -5])\
    \ == -6\n   Evaluated: -5 == -6\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp73zhyxi3.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp73zhyxi3.jl:27\ntest set: Test\
    \ Failed at /tmp/tmp73zhyxi3.jl:34\n  Expression: candidate([100, -1, -2, -3,\
    \ 10, -5]) == -6\n   Evaluated: -5 == -6\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp73zhyxi3.jl:34 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp73zhyxi3.jl:27\nTest Summary: | Pass  Fail\
    \  Total\ntest set      |    8     4     12\n"
  timestamp: 1660009410
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    mini = maximum(nums)\n\
    \    for i in 1:length(nums)\n        mini = mini + nums[i]\n    end\n    return\
    \ mini\nend\n</cell>\n<text>\n3.5 Part C. Longest Substring with Concatenation\
    \ of Two Strings\nGiven two strings str1 and str2, find the length of longest\
    \ common substring between str1 and str2. \nIf such substring does not exist,\
    \ return 0.\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0g3g042k.jl:17\nin expression starting at\
    \ /tmp/tmp0g3g042k.jl:17\n"
  stdout: ''
  timestamp: 1660009410
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    s = sum(nums)\n\
    \    for i in nums \n        if i != 0 \n            s += i \n        else \n\
    \            s += 0\n    end\n    return s\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t\
    @test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1, -2, -3, 2, -10])\
    \ == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\t@test(candidate([0,\
    \ 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3, 10, -5]) == -6)\n\t\
    @test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10, 11,\
    \ 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\t\
    @test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpp7zi4iyl.jl:10\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpp7zi4iyl.jl:1\n\
    in expression starting at /tmp/tmpp7zi4iyl.jl:1\n"
  stdout: ''
  timestamp: 1660009410
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    if nums == []\
    \ \n        return 0 \n    else \n        return min(subArraySum(nums)) \nend\n\
    </cell>\n<code language=julia-0.4>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1,\
    \ -2, -3]) == -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpz6pkrza6.jl:16\nin expression starting at\
    \ /tmp/tmpz6pkrza6.jl:16\n"
  stdout: ''
  timestamp: 1660009411
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    return sum( minSubArraySumHelper(nums)\
    \ )\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp1l4w3vcq.jl:10\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp1l4w3vcq.jl:1\n\
    in expression starting at /tmp/tmp1l4w3vcq.jl:1\n"
  stdout: ''
  timestamp: 1660009411
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    if length(nums)\
    \ == 0 \n        return 0 \n    else \n        return minimum(sum(subArray(nums,\
    \ 1:(length(nums)-1), 2))) \nend\n</cell>\n<code language=julia-1.6>\n@test minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]) == 1;\n@test minSubArraySum([-1, -2, -3]) == -6;\n</cell>\n\
    <code language=julia-1.6>\n\"\"\"\n    Given a vector of integers nums, find the\
    \ minimum sum of any non-empty sub-vector\n    of nums.\n    Example\n    >>>\
    \ minSubArraySum([2, 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n\
    \    -6\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\
    \t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) ==\
    \ -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpr7tmtpga.jl:16\nin expression starting at\
    \ /tmp/tmpr7tmtpga.jl:16\n"
  stdout: ''
  timestamp: 1660009411
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    local sum = 0\n\
    \    local min = minimum(nums)\n    for a in nums do\n        if a < min then\
    \ \n            min = a \n        end\n    end\n    \n    for a in nums do\n \
    \       sum += a\n        if sum >= min then\n            return sum\n       \
    \ end\n    end\n    return min\nend\n</cell>\n<code language=julia-1.6>\n\"\"\"\
    \nGiven a vector of integers nums, find the minimum product of any non-empty sub-vector\n\
    \    of nums.\n    Example\n    >>> minSubArrayProduct([2, 3, 4, 1, 2, 4])\n \
    \   24\n    >>> minSubArrayProduct([-1, -2, -3])\n    -6\n    \"\"\"\nusing Test\n\
    \n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1,\
    \ 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid \"do\" syntax\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpq0daczh5.jl:13\nin expression starting at /tmp/tmpq0daczh5.jl:13\n"
  stdout: ''
  timestamp: 1660009411
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n  N = length(nums)\n\
    \  if N == 0 \n    return 0\n  end\n  minSum = minimum(nums)\n  for i=2:N\n  \
    \  if nums[i]>minSum\n      minSum = nums[i]\n    else\n      break\n    end\n\
    \  end\n  return minSum\nend\n</cell>\n<text>\nQ7. Implement the function which\
    \ returns the minimum number of integers that can be represented as a sum of the\
    \ elements in nums.\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\
    \t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) ==\
    \ -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpiuxfx7_u.jl:25\nin expression starting at\
    \ /tmp/tmpiuxfx7_u.jl:25\n"
  stdout: ''
  timestamp: 1660009411
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    # Write your code\
    \ in Python 3.7\n    sum = 0\n    for x in nums:\n        sum += x\n    return\
    \ sum\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpq8ovr4_p.jl:14\nin expression starting at\
    \ /tmp/tmpq8ovr4_p.jl:14\n"
  stdout: ''
  timestamp: 1660009411
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    min_sum = Int.MAX_VALUE\n\
    \    for v in nums\n        if (v > 0 && v < min_sum)\n            min_sum = v\n\
    \        end\n    end\n    return min_sum\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpipyryrsj.jl:19\nin expression starting at\
    \ /tmp/tmpipyryrsj.jl:19\n"
  stdout: ''
  timestamp: 1660009411
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n  minSum::Int64 =\
    \ nums[1]\n  for val in nums[2:end]\n    minSum = min (minSum, val + minSum)\n\
    \  end\n  return minSum\nend\n</cell>\n<text>\nTest Your Solution\nusing Test\n\
    \n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1,\
    \ 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: space before \"(\" not allowed in \"min (\" at\
    \ /tmp/tmp9vf7e_f8.jl:13\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp9vf7e_f8.jl:13\n\
    in expression starting at /tmp/tmp9vf7e_f8.jl:13\n"
  stdout: ''
  timestamp: 1660009411
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    # Write your code\
    \ here.\n    pass\nend\n</cell>\n<code language=julia-1.0>\nminSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n</cell>\n<code language=julia-1.0>\nminSubArraySum([-1, -2,\
    \ -3])\n</cell>\n<code language=julia-1.0>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1,\
    \ -2, -3]) == -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0ol7hwe5.jl:14\nin expression starting at\
    \ /tmp/tmp0ol7hwe5.jl:14\n"
  stdout: ''
  timestamp: 1660009411
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    if nums == []\
    \ \n        zero::Int64 = nums[end] \n        if zero == 0 \n            return\
    \ 0\n        else \n            return zero\n    end\n    low::Int64 = 0\n   \
    \ high::Int64 = length(nums)\n    sum::Int64 = nums[end]\n    while low <= high\n\
    \        mid = (low + high)//2\n        if nums[mid] < 0\n            low = mid\
    \ + 1\n        else\n            high = mid\n            sum = sum + nums[mid]\n\
    \        end\n    end\n    return sum\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1,\
    \ -2, -3]) == -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp_hut2hn7.jl:10\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp_hut2hn7.jl:1\n\
    in expression starting at /tmp/tmp_hut2hn7.jl:1\n"
  stdout: ''
  timestamp: 1660009411
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    i = nums[1];\n\
    \    j = nums[length(nums)];\n    minSum = -Int(0);\n    for k = 2 : length(nums)-1\n\
    \        i = i + nums[k];\n        j = j - nums[k];\n        minSum = minSum +\
    \ (abs(i-j)+abs(i-j))^2;\n    end\n    return minSum;\nend;\n</code>\n<|/ a dscore=2\
    \ tags=algorithm,dynamic-programming,language-agnostic |>\n<| a tags=algorithm,dynamic-programming,language-agnostic\
    \ |>\nLet me know if i can optimize it further.\n<code>\n#include <bits/stdc++.h>\n\
    using namespace std;\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\
    \t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) ==\
    \ -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpc6b66xle.jl:21\nin expression starting at\
    \ /tmp/tmpc6b66xle.jl:21\n"
  stdout: ''
  timestamp: 1660009411
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    for k in 1:length(nums)\n\
    \        if k == 1 \n            return nums[k]\n        else\n            left\
    \ = sum(nums[k-1:k])\n            right = sum(nums[k+1:k+1])\n            return\
    \ min(left, right)  \n        end\n    end\n    return 0\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1,\
    \ 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 8 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmppdawefy9.jl:24

    '
  stdout: "test set: Test Failed at /tmp/tmppdawefy9.jl:27\n  Expression: candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1\n   Evaluated: 2 == 1\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmppdawefy9.jl:27 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmppdawefy9.jl:26\ntest set: Test Failed at /tmp/tmppdawefy9.jl:28\n\
    \  Expression: candidate([-1, -2, -3]) == -6\n   Evaluated: -1 == -6\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppdawefy9.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppdawefy9.jl:26\ntest set: Test\
    \ Failed at /tmp/tmppdawefy9.jl:29\n  Expression: candidate([-1, -2, -3, 2, -10])\
    \ == -14\n   Evaluated: -1 == -14\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppdawefy9.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppdawefy9.jl:26\ntest set: Test\
    \ Failed at /tmp/tmppdawefy9.jl:32\n  Expression: candidate([-1, -2, -3, 10, -5])\
    \ == -6\n   Evaluated: -1 == -6\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppdawefy9.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppdawefy9.jl:26\ntest set: Test\
    \ Failed at /tmp/tmppdawefy9.jl:33\n  Expression: candidate([100, -1, -2, -3,\
    \ 10, -5]) == -6\n   Evaluated: 100 == -6\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] m"
  timestamp: 1660009412
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    sum::Int64 = 0\n\
    \    for i in nums\n        sum += i\n    end\nusing Test\n\n@testset begin\n\n\
    candidate = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1,\
    \ -2, -3]) == -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp2c0bac1w.jl:10\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp2c0bac1w.jl:1\n\
    in expression starting at /tmp/tmp2c0bac1w.jl:1\n"
  stdout: ''
  timestamp: 1660009411
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    \n    for\
    \ i in length(nums):-1:2 \n        if nums[i] != nums[i+1] \n            nums[i]\
    \ = nums[i] + nums[i+1] \n            nums[i+1] = 0\n        else\n          \
    \  nums[i+1] = nums[i+1] + nums[i]\n        end\n    end\n    return nums[1]\n\
    using Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp8olznoku.jl:10\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp8olznoku.jl:1\n\
    in expression starting at /tmp/tmp8olznoku.jl:1\n"
  stdout: ''
  timestamp: 1660009411
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    \"\"\"\n    Given\
    \ a vector of integers nums, find the minimum sum of any non-empty sub-vector\n\
    \    of nums.\n    Example\n    >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n    1\n\
    \    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\"\"\n    if nums == []\n\
    \        return Inf\n    \n    minSum::Int64 = nums[1] + nums[2] + nums[3] + nums[4]\
    \ + nums[5] + nums[6] + nums[7] + nums[8] + nums[9] + nums[10] + nums[11] + nums[12]\
    \ + nums[13] + nums[14] + nums[15] + nums[16] + nums[17] + nums[18] + nums[19]\
    \ + nums[20] + nums[21] + nums[22] + nums[23] + nums[24] + nums[25] + nums[26]\
    \ + nums[27] + nums[28] + nums[29] + nums[30] + nums[31] + nums[32] + nums[33]\
    \ + nums[34] + nums[35] + nums[36] + nums[37] + nums[38] + nums[39] + nums[40]\
    \ + nums[41] + nums[42] + nums[43] + nums[44] + nums[45] + nums[46] + nums[47]\
    \ + nums[48] + nums[49] + nums[50] + nums[51] + nums[52] + nums[53] + nums[54]\
    \ + nums[55] + nums[56] + nums[57] + nums[58] + nums[59] + nums[60] + nums[61]\
    \ + nums[62] + nums[63] + nums[64] + nums[65] + nums[66] + nums[67] + nums[68]\
    \ + nums[69] + nums[70] + nums[71] + nums[72] + nums[73] + nums[74] + nums[75]\
    \ + nums[76] + nums[77] + nums[78] + nums[79] + nums[80] + nums[81] + nums[82]\
    \ + nums[83] + nums[84] + nums[85] + nums[86] + nums[87] + nums[88] + nums[89]\
    \ + nums[90] + nums[91] + nums[92] + nums[93] + nums[94] + nums[95] + nums[96]\
    \ + nums[97] + nums[98] + nums[99] + nums[100] + nums[101] + nums[102] + nums[103]\
    \ + nums[104] + nums[105] + nums[106] + num\nusing Test\n\n@testset begin\n\n\
    candidate = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1,\
    \ -2, -3]) == -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpeyw94vvf.jl:1\nin expression starting at /tmp/tmpeyw94vvf.jl:1\n"
  stdout: ''
  timestamp: 1660009411
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    ans = Inf # initialize\
    \ our result\n    for x in nums do \n        ans = minimum(ans, x) # update our\
    \ answer\n    end\n    return ans\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1,\
    \ -2, -3]) == -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid \"do\" syntax\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpet7n53xs.jl:12\nin expression starting at /tmp/tmpet7n53xs.jl:12\n"
  stdout: ''
  timestamp: 1660009412
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    sum_arr\
    \ = zeros(eltype(nums)) #initialize array to zeros\n    \n    sum_arr[0] = nums[1]\n\
    \    \n    for i = 1:length(nums)\n        if nums[i] < sum_arr[i]\n         \
    \   sum_arr[i] = nums[i]\n        else\n            sum_arr[i] -= sum_arr[i-1]\n\
    \        end\n    end\n    \n    return sum_arr[1]\nend\n</cell>\n<code language=julia-1.5>\n\
    minSubArraySum([2, 3, 3, 4, 1, 2, 4])\n</cell>\n<code language=julia-1.5>\nminSubArraySum([-1,\
    \ -2, -3])\n</cell>\n<text>\nFind the maximum sum of an array\nusing Test\n\n\
    @testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1,\
    \ 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9_4ct0tb.jl:26\nin expression starting at\
    \ /tmp/tmp9_4ct0tb.jl:26\n"
  stdout: ''
  timestamp: 1660009412
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    minimum\
    \ = nums[0]\n    for n in nums[2:end]\n        if n <= minimum\n            minimum\
    \ = n\n        else\n            return minimum\n    end\n    return minimum\n\
    end\n</cell>\n<code language=julia-1.6>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1,\
    \ -2, -3]) == -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpn1lu_ttb.jl:21\nin expression starting at\
    \ /tmp/tmpn1lu_ttb.jl:21\n"
  stdout: ''
  timestamp: 1660009412
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    if nums == Nil\
    \ return 0\n    smallest_sum = findMinSum(nums[1:])\n    return smallest_sum +\
    \ minSubArraySum(nums[2:end-1]) \nend\n    \n\"\"\"\n    Given a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n    of nums.\n    Example\n\
    \    >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1,\
    \ -2, -3])\n    -6\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\
    \t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) ==\
    \ -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"1:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpuln6hz7o.jl:12\nin expression\
    \ starting at /tmp/tmpuln6hz7o.jl:12\n"
  stdout: ''
  timestamp: 1660009412
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n\"\"\"\n    Given\
    \ a vector of integers nums, find the minimum sum of any non-empty sub-vector\n\
    \    of nums.\n    Example\n    >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n    1\n\
    \    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1, 2, 4])\
    \ == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1, -2, -3,\
    \ 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp8soyl2gp.jl:10\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp8soyl2gp.jl:1\n\
    in expression starting at /tmp/tmp8soyl2gp.jl:1\n"
  stdout: ''
  timestamp: 1660009412
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    i = start\n  \
    \  j = end\n    currentSum = nums[i]\n    minimum = currentSum\n    while i !=\
    \ j\n        if currentSum < minimum\n            minimum = currentSum\n     \
    \   else\n            break\n        end\n        currentSum -= nums[i]\n    \
    \    i += 1\n    end\n    return minimum\nend\nusing Test\n\n@testset begin\n\n\
    candidate = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1,\
    \ -2, -3]) == -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"end\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpfui16h9o.jl:12\nin expression starting at /tmp/tmpfui16h9o.jl:12\n"
  stdout: ''
  timestamp: 1660009412
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    minimumSum = nums[1]\n\
    \    for i in 2:length(nums)\n        minimumSum = min(minimumSum, nums[i] + minimumSum)\n\
    \    end\n    return minimumSum\nend\n</code>\n<|/ a dscore=3 tags=julia |>\n\
    <| a dscore=2 tags=julia |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1,\
    \ -2, -3]) == -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpo7ipazqb.jl:17\nin expression starting at\
    \ /tmp/tmpo7ipazqb.jl:17\n"
  stdout: ''
  timestamp: 1660009412
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    if nums == []\n\
    \        return 0\n    \n    let n = length(nums)\n    \n    let m = 0\n    \n\
    \    for i in 0..n - 1\n        m += nums[i]\n        \n    for i in 0..n - 2\n\
    \        if nums[i] + nums[i+1] < m\n            m = nums[i] + nums[i+1]\n   \
    \     \n    return m\nend\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\
    \t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) ==\
    \ -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"for\" at /tmp/tmp1a_0_g5a.jl:21\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp1a_0_g5a.jl:1\n\
    in expression starting at /tmp/tmp1a_0_g5a.jl:1\n"
  stdout: ''
  timestamp: 1660009412
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    if len(nums) ==\
    \ 0:\n        return 0;\n    var subSum = nums[1];\n    for num in nums[2:end]\n\
    \        subSum += num\n    end\n    return subSum\nend\n\"\"\"\n    Find a vector\
    \ (nums, length) such that nums[0] = nums[1] x nums[length-1]\n    Example\n \
    \   >>> findVector([2, 3, 1, 4, 1], 2)\n    ((3, 1), 2)\n    \"\"\"\nusing Test\n\
    \n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1,\
    \ 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_1fjpfcb.jl:12\nin expression starting at\
    \ /tmp/tmp_1fjpfcb.jl:12\n"
  stdout: ''
  timestamp: 1660009413
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    return sum(take(nones<-nums,\
    \ takewhile(!iszero, nums)))\nend\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThank\
    \ you, that is just beautiful\n<|/ c |>\n<| c |>\nCan you explain what `takewhile(!iszero,\
    \ nums)` does? How does it work?\n<|/ c |>\n<| c |>\nIt is a predicate which takes\
    \ a vector and returns true if there is a zero in that vector. So that means `takewhile`\
    \ only takes elements which are `non-zero`.\n<|/ c |>\n<| a tags=performance,vectorization,julia,sum\
    \ |>\nA few things:\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\
    \t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) ==\
    \ -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptn4lndbv.jl:13\nin expression starting at\
    \ /tmp/tmptn4lndbv.jl:13\n"
  stdout: ''
  timestamp: 1660009413
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    if nums == []\
    \ || nums == [-0, -0] \n        return -0 \n    local sum = 0\n    local i = 1\n\
    \    while i <= length(nums)\n        sum += nums[i]\n        if sum > 0\n   \
    \         break\n        end\n        i += 1 \n    end\n    return sum\nend\n\
    using Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpfbtl8nf8.jl:10\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpfbtl8nf8.jl:1\n\
    in expression starting at /tmp/tmpfbtl8nf8.jl:1\n"
  stdout: ''
  timestamp: 1660009413
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    minimum = nums.last\n\
    \    for i in nums[2:end]\n        if minimum > i\n            minimum = i\n \
    \       end\n    end\n    return minimum\nend\n</code>\n<|/ a tags=julia |>\n\
    <| a dscore=2 tags=julia |>\nFor those who need more efficient solution, I would\
    \ recommend using Sets.\n<code>\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\
    \t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) ==\
    \ -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpngqits_l.jl:19\nin expression starting at\
    \ /tmp/tmpngqits_l.jl:19\n"
  stdout: ''
  timestamp: 1660009412
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    return sum(island_nums(nums))\n\
    end\n</cell>\n<code language=julia-1.6>\n@time minSubArraySum(sort(randn(1e6)))\n\
    </cell>\n<text>\nProblem 2.3\nA palindromic number reads the same both ways. The\
    \ largest palindrome made from the product of two 2-digit numbers is 9009 = 91\
    \ x 99.\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0bggr6qn.jl:13\nin expression starting at\
    \ /tmp/tmp0bggr6qn.jl:13\n"
  stdout: ''
  timestamp: 1660009412
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    if nums == nil\n\
    \        return 0;\n    elseif length(nums) < 2\n        return nums[end];\n \
    \   else\n        nums = nums[2:end]; \n        sum_array = [nums[end]];\n   \
    \     sum_array_size = sum_array_size = 1;\n        sum_size = sum_array[1];\n\
    \        sum_array[1] = nums[end - 1];\n        sum_array[2] = nums[end - 2];\n\
    \        for i = end - 3 downto 1\n            sum_array_size = sum_array_size\
    \ + 1;\n            sum_size = sum_size+sum_array[i+1];\n            sum_array[i+1]\
    \ = nums[i];\n            sum_array[i+2] = nums[i+1];\n        end\n        \n\
    \        for i = end - 2 downto 1\n            if sum_array[i+1] == 0 || sum_array_size\
    \ == sum_array_size-1\n                continue;\n            else\n         \
    \       sum_size = sum_size+sum_array[i+1];\n            end\n        end\n  \
    \  end\n    return sum_size;\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ minSubArraySum;\n\t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1,\
    \ -2, -3]) == -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"end\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpecrzab9e.jl:22\nin expression starting at /tmp/tmpecrzab9e.jl:22\n"
  stdout: ''
  timestamp: 1660009413
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    min_sum = Int64(Inf)\n\
    \    for x in nums \n        if x < min_sum \n            min_sum = x\n      \
    \  else\n            min_sum = min(x, min_sum)\n        end\n    end\n    return\
    \ min_sum\nend\n\"\"\"\n    Given a vector of integers nums, find the maximum\
    \ sum of any non-empty sub-vector\n    of nums.\n    Example\n    >>> maxSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    4\n    >>> maxSubArraySum([-1, -2, -3])\n    3\n    \"\"\
    \"\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nusing Test\n\
    \nStacktrace:\n [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level\
    \ scope\n   @ /tmp/tmp714ao_bi.jl:21\nin expression starting at /tmp/tmp714ao_bi.jl:21\n"
  stdout: ''
  timestamp: 1660009413
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    local min = sys.maxint\n\
    \    for num in nums\n        local tmp_min = minSubArraySum(nums[num + 1] - num\
    \ + 1) \n        if tmp_min < min\n            min = tmp_min\n        end\n  \
    \  end\n    return min\nend\n</cell>\n<code language=julia-1.1>\nusing Test\n\n\
    @testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1,\
    \ 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp87c0rq0t.jl:20\nin expression starting at\
    \ /tmp/tmp87c0rq0t.jl:20\n"
  stdout: ''
  timestamp: 1660009413
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    local sum::Int64\
    \ = Int64(0)\n    local i::Int64 = 0\n    local j::Int64 = 0\n    local cnt::Int64\
    \ = 0\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpt61gzwxy.jl:10\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpt61gzwxy.jl:1\n\
    in expression starting at /tmp/tmpt61gzwxy.jl:1\n"
  stdout: ''
  timestamp: 1660009413
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    min_sum = Int.Max\n\
    \    for i in nums\n        cur_sum = i + min_sum\n        if cur_sum < 0\n  \
    \          continue\n        min_sum = cur_sum\n    end\n    return min_sum\n\
    end\n</cell>\n<code language=julia-1.0>\n\"\"\"\n    Given an array nums, a vector\
    \ of integers k, and an integer k, find the minimum sum\n    of any non-empty\
    \ sub-array of the array such that the kth element is the maximum\n    value in\
    \ the sub-array.\n    Example\n    >>> minMaxArray([2, 3, 4, 1, 2, 4], [1, 4,\
    \ 2], 2)\n    5\n    >>> minMaxArray([-1, -2, -3], [-1, 0, 2], 1)\n    -2\n  \
    \  \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_nxnbzob.jl:20\nin expression starting at\
    \ /tmp/tmp_nxnbzob.jl:20\n"
  stdout: ''
  timestamp: 1660009413
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    if length(nums)==0\n\
    \        return -1\n    end\n    min = Int64(min(nums)) \n    if min == 0\n  \
    \      return -1\n    end\n    for v in nums[2:end]\n        min = min - v\n \
    \   end\n    return min\nend\n</cell>\n<code language=julia-1.5>\n@time minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n</cell>\n<code language=julia-1.5>\n@time minSubArraySum([-1,\
    \ -2, -3])\n</cell>\n<text>\nProblem 7\nA permutation is an ordered arrangement\
    \ of objects. For example, 3124 is one possible permutation of the numbers 1,\
    \ 2, 3 and 4. If all of the permutations are listed numerically or alphabetically,\
    \ we call it lexicographic order. The lexicographic permutations of 0, 1 and 2\
    \ are:\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpg1f32jq8.jl:23\nin expression starting at\
    \ /tmp/tmpg1f32jq8.jl:23\n"
  stdout: ''
  timestamp: 1660009413
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    if length(nums)\
    \ < 1 \n        error(\"The input vector must be of size greater than 0.\") \n\
    \    end \n    \n    minimum = -Inf \n    \n    for index in sort(collect(1:length(nums)))\
    \ \n        maximum = minimum \n        \n        for curIndex in sort((index\
    \ + 1):length(nums)), \n        \n            current = nums[curIndex] - nums[index]\
    \ \n            minimum = min(minimum, current + maximum) \n            \n   \
    \         maximum = max(maximum, current) \n        end \n        \n        minimum\
    \ = min(minimum, maximum) \n    end \n    \n    return minimum \nend \nusing Test\n\
    \n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1,\
    \ 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 12 errored,
    0 broken.

    in expression starting at /tmp/tmpirdwnbhb.jl:35

    '
  stdout: "test set: Error During Test at /tmp/tmpirdwnbhb.jl:38\n  Test threw exception\n\
    \  Expression: candidate([2, 3, 4, 1, 2, 4]) == 1\n  InexactError: Int64(-Inf)\n\
    \  Stacktrace:\n   [1] Int64\n     @ ./float.jl:812 [inlined]\n   [2] convert\n\
    \     @ ./number.jl:7 [inlined]\n   [3] minSubArraySum(nums::Vector{Int64})\n\
    \     @ Main /tmp/tmpirdwnbhb.jl:31\n   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpirdwnbhb.jl:38 [inlined]\n\
    \   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpirdwnbhb.jl:37\ntest set:\
    \ Error During Test at /tmp/tmpirdwnbhb.jl:39\n  Test threw exception\n  Expression:\
    \ candidate([-1, -2, -3]) == -6\n  InexactError: Int64(-Inf)\n  Stacktrace:\n\
    \   [1] Int64\n     @ ./float.jl:812 [inlined]\n   [2] convert\n     @ ./number.jl:7\
    \ [inlined]\n   [3] minSubArraySum(nums::Vector{Int64})\n     @ Main /tmp/tmpirdwnbhb.jl:31\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpirdwnbhb.jl:39 [inlined]\n\
    \   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpirdwnbhb.jl:37\ntest set:\
    \ Error During Test at /tmp/tmpirdwnbhb.jl:40\n  Test threw exception\n  Expression:\
    \ candidate([-1, -2, -3, 2, -10]) == -14\n  InexactError: Int64(-Inf)\n  Stacktrace:\n\
    \   [1] Int64\n     @ ./float.jl:812 [inlined]\n   [2] convert\n     @ ./number.jl:7\
    \ [inlined]\n   [3] minSubArraySum(nums::Vector{Int64})\n     @ Main /tmp/tmpirdwnbhb.jl:31\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpirdwnbhb.jl:40 [inlined]\n\
    \   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpirdwnbhb.jl:37\ntest set:\
    \ Error During Test at /tmp/tmp"
  timestamp: 1660009416
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    \"\"\"\n    Given\
    \ a vector of integers nums, find the minimum sum of any non-empty sub-vector\n\
    \    of nums.\n    Example\n    >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n    1\n\
    \    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\"\"\n    return minimum(subArraySum(nums))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 12 errored,
    0 broken.

    in expression starting at /tmp/tmpbxzd9nws.jl:24

    '
  stdout: "test set: Error During Test at /tmp/tmpbxzd9nws.jl:27\n  Test threw exception\n\
    \  Expression: candidate([2, 3, 4, 1, 2, 4]) == 1\n  UndefVarError: subArraySum\
    \ not defined\n  Stacktrace:\n   [1] minSubArraySum(nums::Vector{Int64})\n   \
    \  @ Main /tmp/tmpbxzd9nws.jl:20\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpbxzd9nws.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpbxzd9nws.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpbxzd9nws.jl:28\n  Test threw exception\n  Expression:\
    \ candidate([-1, -2, -3]) == -6\n  UndefVarError: subArraySum not defined\n  Stacktrace:\n\
    \   [1] minSubArraySum(nums::Vector{Int64})\n     @ Main /tmp/tmpbxzd9nws.jl:20\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpbxzd9nws.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpbxzd9nws.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpbxzd9nws.jl:29\n  Test threw exception\n  Expression:\
    \ candidate([-1, -2, -3, 2, -10]) == -14\n  UndefVarError: subArraySum not defined\n\
    \  Stacktrace:\n   [1] minSubArraySum(nums::Vector{Int64})\n     @ Main /tmp/tmpbxzd9nws.jl:20\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpbxzd9nws.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpbxzd9nws.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpbxzd9nws.jl:30\n  Test threw exception\n  Expression:\
    \ candidate([-9999999999999999]) == -9999999999999999\n  UndefVarError: subArraySum\
    \ not defined\n  Stacktrace:\n   [1] minSubArraySum(nums::Vector{Int64})\n   \
    \  @ Main /tmp/tmpbxzd9nws.jl:"
  timestamp: 1660009416
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    sum::Int64=0\n\
    \    for elt in nums do\n        sum+=elt\n    end\n    return sum\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid \"do\" syntax\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpuofyjvit.jl:12\nin expression starting at /tmp/tmpuofyjvit.jl:12\n"
  stdout: ''
  timestamp: 1660009414
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    minSum = -100\n\
    \    for v in nums \n        if v > 0 && minSum > 0\n            minSum = minSum\
    \ - v\n        else\n            minSum = minSum\n        end\n    end\n    return\
    \ minSum\nend\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t\
    @test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) ==\
    \ -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 12 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpkgkea9w0.jl:23

    '
  stdout: "test set: Test Failed at /tmp/tmpkgkea9w0.jl:26\n  Expression: candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1\n   Evaluated: -100 == 1\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpkgkea9w0.jl:26 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpkgkea9w0.jl:25\ntest set: Test Failed at /tmp/tmpkgkea9w0.jl:27\n\
    \  Expression: candidate([-1, -2, -3]) == -6\n   Evaluated: -100 == -6\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkgkea9w0.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkgkea9w0.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpkgkea9w0.jl:28\n  Expression: candidate([-1, -2, -3, 2, -10])\
    \ == -14\n   Evaluated: -100 == -14\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkgkea9w0.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkgkea9w0.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpkgkea9w0.jl:29\n  Expression: candidate([-9999999999999999])\
    \ == -9999999999999999\n   Evaluated: -100 == -9999999999999999\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkgkea9w0.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkgkea9w0.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpkgkea9w0.jl:30\n  Expression: candidate([0, 10, 20, 1000000])\
    \ == 0\n   Evaluated: -100 == 0\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/"
  timestamp: 1660009415
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    n = nums.length\n\
    \    \n    if n < 2 \n        return 0 \n    end\n    \n    # Compute the sum\
    \ using DP\n    if n <= 2 \n        return nums[1] \n    end\n    \n    \n   \
    \ # Initialize DP table\n    DP = Array{Any}(undef, n)\n    \n    # Set the initial\
    \ cell\n    DP .= Float64[]\n    DP[1] = 0\n    \n    # Fill up cells from 2 to\
    \ n\n    for i = 2:n\n        DP[i] = nums[i] + DP[i-1]\n    end\n    \n    #\
    \ Finally pick the min value from DP\n    minSum = nums[1] + minSubArraySum(subset(nums,\
    \ 2))\n    for i in 1:n-1\n        minSum = min(minSum, DP[i])\n    end\n    return\
    \ minSum\nend\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t\
    @test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) ==\
    \ -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 12 errored,
    0 broken.

    in expression starting at /tmp/tmpswr8wqcl.jl:45

    '
  stdout: "test set: Error During Test at /tmp/tmpswr8wqcl.jl:48\n  Test threw exception\n\
    \  Expression: candidate([2, 3, 4, 1, 2, 4]) == 1\n  type Array has no field length\n\
    \  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] minSubArraySum(nums::Vector{Int64})\n\
    \     @ Main /tmp/tmpswr8wqcl.jl:12\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpswr8wqcl.jl:48 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpswr8wqcl.jl:47\ntest set:\
    \ Error During Test at /tmp/tmpswr8wqcl.jl:49\n  Test threw exception\n  Expression:\
    \ candidate([-1, -2, -3]) == -6\n  type Array has no field length\n  Stacktrace:\n\
    \   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] minSubArraySum(nums::Vector{Int64})\n\
    \     @ Main /tmp/tmpswr8wqcl.jl:12\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpswr8wqcl.jl:49 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpswr8wqcl.jl:47\ntest set:\
    \ Error During Test at /tmp/tmpswr8wqcl.jl:50\n  Test threw exception\n  Expression:\
    \ candidate([-1, -2, -3, 2, -10]) == -14\n  type Array has no field length\n \
    \ Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] minSubArraySum(nums::Vector{Int64})\n\
    \     @ Main /tmp/tmpswr8wqcl.jl:12\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpswr8wqcl.jl:50 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpswr8wqcl.jl:47\ntest set:\
    \ Error During Test at /tmp/tmpswr8wqcl.jl:51\n  Test threw exception\n  Expression:\
    \ candidate([-9999999999999999]) == -9999999999999999\n  type "
  timestamp: 1660009416
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    if length(nums)\
    \ == 0 \n        return 0 \n    else \n        return reduce(max, map(i -> (nums[i\
    \ - 1] + min(nums[i + 1], nums[i + 2])), 1:end))\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1, 2, 4])\
    \ == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1, -2, -3,\
    \ 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"1:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpbx36m5t8.jl:14\nin expression\
    \ starting at /tmp/tmpbx36m5t8.jl:14\n"
  stdout: ''
  timestamp: 1660009414
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    result =  Int64(0);\n\
    \    for x in nums\n        result = min(result, x+minSubArraySum(drop(nums, x)))\n\
    \    end\n    result\nend\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\
    \t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) ==\
    \ -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 12 errored,
    0 broken.

    in expression starting at /tmp/tmpjnrcn41x.jl:19

    '
  stdout: "test set: Error During Test at /tmp/tmpjnrcn41x.jl:22\n  Test threw exception\n\
    \  Expression: candidate([2, 3, 4, 1, 2, 4]) == 1\n  UndefVarError: drop not defined\n\
    \  Stacktrace:\n   [1] minSubArraySum(nums::Vector{Int64})\n     @ Main /tmp/tmpjnrcn41x.jl:13\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpjnrcn41x.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpjnrcn41x.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpjnrcn41x.jl:23\n  Test threw exception\n  Expression:\
    \ candidate([-1, -2, -3]) == -6\n  UndefVarError: drop not defined\n  Stacktrace:\n\
    \   [1] minSubArraySum(nums::Vector{Int64})\n     @ Main /tmp/tmpjnrcn41x.jl:13\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpjnrcn41x.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpjnrcn41x.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpjnrcn41x.jl:24\n  Test threw exception\n  Expression:\
    \ candidate([-1, -2, -3, 2, -10]) == -14\n  UndefVarError: drop not defined\n\
    \  Stacktrace:\n   [1] minSubArraySum(nums::Vector{Int64})\n     @ Main /tmp/tmpjnrcn41x.jl:13\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpjnrcn41x.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpjnrcn41x.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpjnrcn41x.jl:25\n  Test threw exception\n  Expression:\
    \ candidate([-9999999999999999]) == -9999999999999999\n  UndefVarError: drop not\
    \ defined\n  Stacktrace:\n   [1] minSubArraySum(nums::Vector{Int64})\n     @ Main\
    \ /tmp/tmpjnrcn41x.jl:13\n   [2] macro expansion\n  "
  timestamp: 1660009416
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    if nums == nil\n\
    \        0\n    else\n        minimum(minimum(subArraySum(nums,1,length(nums)-1)),\n\
    \                 minimum(subArraySum(nums,1,length(nums)-1)))\n    end\nend\n\
    </cell>\n<text>\nRecursive Functions\nA recursive function is a function that\
    \ calls itself. A recursive function can call itself in one of two ways:\nusing\
    \ Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvc39xwjn.jl:18\nin expression starting at\
    \ /tmp/tmpvc39xwjn.jl:18\n"
  stdout: ''
  timestamp: 1660009414
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    vec = [0 for n\
    \ in 1:length(nums)] \n    count = 0\n    vec[1] = nums[1]\n    for i = 2:length(nums)\n\
    \        if vec[i-1] > nums[i]\n            vec[i] = nums[i]\n        else\n \
    \           vec[i] = vec[i-1] + nums[i]\n        end\n        count += 1\n   \
    \ end\n    return vec[end]\nend\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\
    \t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) ==\
    \ -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 8 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpnud_j_bi.jl:26

    '
  stdout: "test set: Test Failed at /tmp/tmpnud_j_bi.jl:29\n  Expression: candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1\n   Evaluated: 7 == 1\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpnud_j_bi.jl:29 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpnud_j_bi.jl:28\ntest set: Test Failed at /tmp/tmpnud_j_bi.jl:30\n\
    \  Expression: candidate([-1, -2, -3]) == -6\n   Evaluated: -3 == -6\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnud_j_bi.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnud_j_bi.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpnud_j_bi.jl:31\n  Expression: candidate([-1, -2, -3, 2, -10])\
    \ == -14\n   Evaluated: -10 == -14\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnud_j_bi.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnud_j_bi.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpnud_j_bi.jl:33\n  Expression: candidate([0, 10, 20, 1000000])\
    \ == 0\n   Evaluated: 1000030 == 0\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnud_j_bi.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnud_j_bi.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpnud_j_bi.jl:34\n  Expression: candidate([-1, -2, -3, 10, -5])\
    \ == -6\n   Evaluated: -5 == -6\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] mac"
  timestamp: 1660009415
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    # Base case\n\
    \    if length(nums) == 0 return 0\nusing Test\n\n@testset begin\n\ncandidate\
    \ = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1,\
    \ -2, -3]) == -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfu38pvi5.jl:1\nin expression starting at /tmp/tmpfu38pvi5.jl:1\n"
  stdout: ''
  timestamp: 1660009414
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    smallest_sum::Int64\
    \ = Int64(Inf)\n    for n in nums\n        if smallest_sum < n \n            smallest_sum\
    \ = n\n        end\n    end\n    return smallest_sum\nend\n</cell>\n<code language=julia-0.6>\n\
    minSubArraySum([1, 2, 3, 4, 1, 2, 4])\n</cell>\n<text>\nExercise 1\nWhat is the\
    \ minimum sum of the following sub-arrays?\nusing Test\n\n@testset begin\n\ncandidate\
    \ = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1,\
    \ -2, -3]) == -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_sqso9ql.jl:19\nin expression starting at\
    \ /tmp/tmp_sqso9ql.jl:19\n"
  stdout: ''
  timestamp: 1660009414
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    return sum( filter(x\
    \ -> x > 0, nums)) - minimum(nums)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1,\
    \ -2, -3]) == -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 12 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpy0t02a2q.jl:15

    '
  stdout: "test set: Test Failed at /tmp/tmpy0t02a2q.jl:18\n  Expression: candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1\n   Evaluated: 15 == 1\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpy0t02a2q.jl:18 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpy0t02a2q.jl:17\ntest set: Test Failed at /tmp/tmpy0t02a2q.jl:19\n\
    \  Expression: candidate([-1, -2, -3]) == -6\n   Evaluated: 3 == -6\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpy0t02a2q.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpy0t02a2q.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpy0t02a2q.jl:20\n  Expression: candidate([-1, -2, -3, 2, -10])\
    \ == -14\n   Evaluated: 12 == -14\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpy0t02a2q.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpy0t02a2q.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpy0t02a2q.jl:21\n  Expression: candidate([-9999999999999999])\
    \ == -9999999999999999\n   Evaluated: 9999999999999999 == -9999999999999999\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpy0t02a2q.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpy0t02a2q.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpy0t02a2q.jl:22\n  Expression: candidate([0, 10, 20, 1000000])\
    \ == 0\n   Evaluated: 1000030 == 0\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1"
  timestamp: 1660009416
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    # Write your code\
    \ here.\n    sum=0\n    for n in nums:\n        sum+=n\n    return sum\nusing\
    \ Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmperkxt6x3.jl:14\nin expression starting at\
    \ /tmp/tmperkxt6x3.jl:14\n"
  stdout: ''
  timestamp: 1660009414
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    \"\"\"\n    Given\
    \ a vector of integers nums, find the minimum sum of any non-empty sub-vector\n\
    \    of nums.\n    Example\n    >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n    1\n\
    \    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1, 2, 4])\
    \ == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1, -2, -3,\
    \ 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp6ke1rkzv.jl:10\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp6ke1rkzv.jl:1\n\
    in expression starting at /tmp/tmp6ke1rkzv.jl:1\n"
  stdout: ''
  timestamp: 1660009407
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    if len(nums) <\
    \ 1\n        return 0\n    \n    left = 0\n    right = 0\n    \n    min_sum =\
    \ nums[left]\n    \n    for j in nums[left+1..end](left + 1)\n        if j > min_sum\n\
    \            min_sum = j\n        end\n    end\n    \n    for i in nums[right+1..end](right\
    \ + 1)\n        if i > min_sum\n            min_sum = i\n        end\n    end\n\
    \    \n    min_sum\nend\n</cell>\n<code language=julia-1.5>\nusing BenchmarkTools\n\
    @btime minSubArraySum(vec(10^7)::Vector{Int64})\n@btime minSubArraySum(vec(10^8)::Vector{Int64})\n\
    </cell>\n<code language=julia-1.5>\n\"\"\"\n    Finds the smallest sum of any\
    \ non-empty sub-array of nums.\n    Example\n    >>> minSubArraySum([2, 3, 4,\
    \ 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n\"\"\"\nusing\
    \ Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpx61ks3h4.jl:33\nin expression starting at\
    \ /tmp/tmpx61ks3h4.jl:33\n"
  stdout: ''
  timestamp: 1660009414
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    minimum=Inf.0\
    \ \n    len=length(nums)\n    for i=1:len \n        current=nums[i]\n        for\
    \ j=i+1:len\n            current+=nums[j]\n            if current < minimum\n\
    \                minimum=current\n            end\n        end\n    end\n    return\
    \ minimum\nend\n\"\"\"\n    Given a vector of integers nums, find the maximum\
    \ sum of any non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    10\n    >>> minSubArraySum([-1, -2, -3])\n    -4\n    \"\
    \"\"\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"function\" at /tmp/tmp4a30rrf0.jl:10 expected\
    \ \"end\", got \"0.0\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp4a30rrf0.jl:11\n\
    in expression starting at /tmp/tmp4a30rrf0.jl:11\n"
  stdout: ''
  timestamp: 1660009414
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    #write your code\
    \ here\n    \n    return \nend\n</cell>\n<text>\nQuestion 7\nImplement minSubArraySum()\
    \ using @parallel directive.\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\
    \t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) ==\
    \ -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpaly1_6ti.jl:15\nin expression starting at\
    \ /tmp/tmpaly1_6ti.jl:15\n"
  stdout: ''
  timestamp: 1660009415
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    if nums == []\n\
    \        return 0;\n    else if nums[1] > 0\n        return nums[1];\n    else\n\
    \        return minSubArraySum(nums[2:end])\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1, 2, 4])\
    \ == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1, -2, -3,\
    \ 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppc92p080.jl:13\nin expression starting at\
    \ /tmp/tmppc92p080.jl:13\n"
  stdout: ''
  timestamp: 1660009414
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    return findMinSumOfSubArray(nums)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 12 errored,
    0 broken.

    in expression starting at /tmp/tmpsjvlz84l.jl:15

    '
  stdout: "test set: Error During Test at /tmp/tmpsjvlz84l.jl:18\n  Test threw exception\n\
    \  Expression: candidate([2, 3, 4, 1, 2, 4]) == 1\n  UndefVarError: findMinSumOfSubArray\
    \ not defined\n  Stacktrace:\n   [1] minSubArraySum(nums::Vector{Int64})\n   \
    \  @ Main /tmp/tmpsjvlz84l.jl:11\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpsjvlz84l.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpsjvlz84l.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpsjvlz84l.jl:19\n  Test threw exception\n  Expression:\
    \ candidate([-1, -2, -3]) == -6\n  UndefVarError: findMinSumOfSubArray not defined\n\
    \  Stacktrace:\n   [1] minSubArraySum(nums::Vector{Int64})\n     @ Main /tmp/tmpsjvlz84l.jl:11\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpsjvlz84l.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpsjvlz84l.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpsjvlz84l.jl:20\n  Test threw exception\n  Expression:\
    \ candidate([-1, -2, -3, 2, -10]) == -14\n  UndefVarError: findMinSumOfSubArray\
    \ not defined\n  Stacktrace:\n   [1] minSubArraySum(nums::Vector{Int64})\n   \
    \  @ Main /tmp/tmpsjvlz84l.jl:11\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpsjvlz84l.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpsjvlz84l.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpsjvlz84l.jl:21\n  Test threw exception\n  Expression:\
    \ candidate([-9999999999999999]) == -9999999999999999\n  UndefVarError: findMinSumOfSubArray\
    \ not defined\n  Stacktrace:\n   [1] minSubArraySum(nums::Vector{Int6"
  timestamp: 1660009417
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n\"\"\"\n    Given\
    \ a vector of integers nums, find the minimum sum of any non-empty sub-vector\n\
    \    of nums.\n    Example\n    >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n    1\n\
    \    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\"\"\nend\n</cell>\n<code\
    \ language=julia-1.3>\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\
    \t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) ==\
    \ -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8c6lup72.jl:21\nin expression starting at\
    \ /tmp/tmp8c6lup72.jl:21\n"
  stdout: ''
  timestamp: 1660009415
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    if nums.isEmpty()\
    \ then return 0\n    \n    minimum = minimumSubArraySum(nums[1:end-1]) + nums[0]\n\
    \    \n    for e in nums[2:end] do minimum = min(minimum, minimumSubArraySum(e))\
    \ end\n    \n    return minimum\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1,\
    \ -2, -3]) == -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpkh3z_a5w.jl:11\nin expression starting at /tmp/tmpkh3z_a5w.jl:11\n"
  stdout: ''
  timestamp: 1660009415
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    if nums == nil\
    \ \n        0\n    else\n        local sum = 0\n        for i in nums\n      \
    \      sum = sum + i\n        end\n        return sum\n    end\nend\n</cell>\n\
    <code language=julia-1.6>\n# Test\nusing Test\n\n@testset begin\n\ncandidate =\
    \ minSubArraySum;\n\t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1,\
    \ -2, -3]) == -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpidv_ehcb.jl:21\nin expression starting at\
    \ /tmp/tmpidv_ehcb.jl:21\n"
  stdout: ''
  timestamp: 1660009415
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    n = length(nums)\n\
    \    minsum::Int64 = 0\n    for i = 0:n\n        if i > 0\n            minsum\
    \ = minsum + nums[i - 1]\n        else\n            minsum = nums[i]\n       \
    \ end\n    end\n    minsum\nend\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\
    \t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) ==\
    \ -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 12 errored,
    0 broken.

    in expression starting at /tmp/tmpefos2ev0.jl:24

    '
  stdout: "test set: Error During Test at /tmp/tmpefos2ev0.jl:27\n  Test threw exception\n\
    \  Expression: candidate([2, 3, 4, 1, 2, 4]) == 1\n  BoundsError: attempt to access\
    \ 6-element Vector{Int64} at index [0]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] minSubArraySum(nums::Vector{Int64})\n     @\
    \ Main /tmp/tmpefos2ev0.jl:17\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpefos2ev0.jl:27 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpefos2ev0.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpefos2ev0.jl:28\n  Test threw exception\n  Expression:\
    \ candidate([-1, -2, -3]) == -6\n  BoundsError: attempt to access 3-element Vector{Int64}\
    \ at index [0]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861 [inlined]\n\
    \   [2] minSubArraySum(nums::Vector{Int64})\n     @ Main /tmp/tmpefos2ev0.jl:17\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpefos2ev0.jl:28 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpefos2ev0.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpefos2ev0.jl:29\n  Test threw exception\n  Expression:\
    \ candidate([-1, -2, -3, 2, -10]) == -14\n  BoundsError: attempt to access 5-element\
    \ Vector{Int64} at index [0]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] minSubArraySum(nums::Vector{Int64})\n     @ Main /tmp/tmpefos2ev0.jl:17\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpefos2ev0.jl:29 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpefos2ev0.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpefo"
  timestamp: 1660009417
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    if length(nums)\
    \ <= 0\n        return 0\n    sum = 0 \n    current = 1\n    for i = 1:length(nums)\n\
    \        sum += nums[i]\n        if sum < current\n            current = sum\n\
    \        end\n    end\n    return current\nend\n</cell>\n<text>\nProblem 5\nusing\
    \ Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0g_ijhzu.jl:23\nin expression starting at\
    \ /tmp/tmp0g_ijhzu.jl:23\n"
  stdout: ''
  timestamp: 1660009415
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    if nums == Nil\
    \ then return 0 \n    \n    \n    let sum::Int64 = sum(nums) \n    if sum == 0\
    \ then return 0 \n    \n    \n    let min = Inf \n    for x in nums do \n    \
    \    if x < min then min = x \n    \n    \n    \n    let max::Int64 = Nil \n \
    \   let maxSum = sum(max) \n    \n    \n    if maxSum == 0 then return sum \n\
    \    \n    \n    for x in nums do \n        if x < max then \n            max\
    \ = max[:x] ++ max[x + 1: ] \n            \n            \n    if sum == sum then\
    \ return sum\n    \n    \n    if sum > maxSum + min then \n        return sum\
    \ \n    else \n        return maxSum + min \nend \n</cell>\n<text>\nFinding Longest\
    \ Common Prefix in an Array\nGiven two strings 'str1' and 'str2', find the longest\
    \ common prefix in\nthem. The longest common prefix may occur multiple times in\
    \ str1 and str2\n(so return the longest common prefix appearing multiple times\
    \ in both str1 and\nstr2). The same goes for the longest common suffix also.\n\
    using Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp0b2v2bum.jl:11\nin expression starting at /tmp/tmp0b2v2bum.jl:11\n"
  stdout: ''
  timestamp: 1660009416
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    if nums == nil\n\
    \        return 0\n    if nums == []\n        return 0\n    sum::Int64 = nums[0]\n\
    \    min::Int64 = nums[0]\n    for i in 1:length(nums)\n        if i > 1 && nums[i]\
    \ < min \n            min::Int64 = nums[i]\n        elseif i == 1\n          \
    \  sum::Int64 = nums[i]\n        elseif nums[i] < sum + min \n            sum::Int64\
    \ = nums[i]\n        end\n    end\n    return sum\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1, 2, 4])\
    \ == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1, -2, -3,\
    \ 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp34ccyoy7.jl:1\nin expression starting at /tmp/tmp34ccyoy7.jl:1\n"
  stdout: ''
  timestamp: 1660009416
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    sum = 0\n    arr\
    \ = zeros(Int64, length(nums))\n    for idx in 1:length(nums)\n        arr[idx]\
    \ = nums[idx]\n    end\n    for idx in 2:length(arr)\n        if sum + arr[idx]\
    \ > arr[idx-1]\n            sum = sum + arr[idx-1]\n        elseif arr[idx-1]\
    \ + arr[idx] < arr[idx]\n            sum = sum + arr[idx]\n        else\n    \
    \        sum = sum + arr[idx-1]\n        end\n    end\n    return sum\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 12 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp3mtmjbi0.jl:29

    '
  stdout: "test set: Test Failed at /tmp/tmp3mtmjbi0.jl:32\n  Expression: candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1\n   Evaluated: 12 == 1\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp3mtmjbi0.jl:32 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp3mtmjbi0.jl:31\ntest set: Test Failed at /tmp/tmp3mtmjbi0.jl:33\n\
    \  Expression: candidate([-1, -2, -3]) == -6\n   Evaluated: -5 == -6\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3mtmjbi0.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3mtmjbi0.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp3mtmjbi0.jl:34\n  Expression: candidate([-1, -2, -3, 2, -10])\
    \ == -14\n   Evaluated: -1 == -14\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3mtmjbi0.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3mtmjbi0.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp3mtmjbi0.jl:35\n  Expression: candidate([-9999999999999999])\
    \ == -9999999999999999\n   Evaluated: 0 == -9999999999999999\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3mtmjbi0.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3mtmjbi0.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp3mtmjbi0.jl:36\n  Expression: candidate([0, 10, 20, 1000000])\
    \ == 0\n   Evaluated: 30 == 0\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl"
  timestamp: 1660009417
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    \"\"\"\n    Given\
    \ a vector of integers nums, find the minimum sum of any non-empty sub-vector\n\
    \    of nums.\n    Example\n    >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n    1\n\
    \    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\"\"\n    return sum(minSubArraySum(tail)\
    \ for head in nums for tail in [nums[head:end-1] for end in (length(nums)+1):-1])\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"end\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpoqbr0_aw.jl:20\nin expression starting at /tmp/tmpoqbr0_aw.jl:20\n"
  stdout: ''
  timestamp: 1660009416
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    len = length(nums)\n\
    \    sum = 0\n    for i in 1:len\n        sum = sum + nums[i]\n    end\n    return\
    \ sum\nend\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 5 passed, 7 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpsgizjbb6.jl:20

    '
  stdout: "test set: Test Failed at /tmp/tmpsgizjbb6.jl:23\n  Expression: candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1\n   Evaluated: 16 == 1\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpsgizjbb6.jl:23 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpsgizjbb6.jl:22\ntest set: Test Failed at /tmp/tmpsgizjbb6.jl:27\n\
    \  Expression: candidate([0, 10, 20, 1000000]) == 0\n   Evaluated: 1000030 ==\
    \ 0\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpsgizjbb6.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpsgizjbb6.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpsgizjbb6.jl:28\n  Expression: candidate([-1, -2, -3, 10, -5])\
    \ == -6\n   Evaluated: -1 == -6\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpsgizjbb6.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpsgizjbb6.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpsgizjbb6.jl:29\n  Expression: candidate([100, -1, -2, -3,\
    \ 10, -5]) == -6\n   Evaluated: 99 == -6\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpsgizjbb6.jl:29 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpsgizjbb6.jl:22\ntest set: Test Failed at /tmp/tmpsgizjbb6.jl:30\n\
    \  Expression: candidate([10, 11, 13, 8, 3, 4]) == 3\n   Evaluated: 49 == 3\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined"
  timestamp: 1660009417
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    if nums == []\n\
    \        return 0\n    \n    var minSum = inf\n    var minLength = nums.length\n\
    \    \n    for i in nums\n        if i == 0\n            continue\n        minSum\
    \ = min(minSum, i) + minSubArraySum(nums[1 : end-1])\n    \n    minSum -= minLength\n\
    \    return minSum\nend\n\"\"\"\n    Given a vector of integers nums, find the\
    \ minimum sum of any non-empty sub-vector\n    of nums, starting with the first\
    \ element in nums.\n    Example\n    >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    \    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\"\"\nusing Test\n\
    \n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1,\
    \ 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"minSum\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpxgk1dbn7.jl:14\nin expression starting at /tmp/tmpxgk1dbn7.jl:14\n"
  stdout: ''
  timestamp: 1660009416
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    if length(nums)==0\n\
    \        return 0;\n    end\n    if nums[1] > 0\n        return nums[1];\n   \
    \ end\n    if nums[2] > 0\n        return nums[2] + minSubArraySum(nums[2:end])\n\
    \    end\n    \n    minSubArraySum(nums[2:end])\nend\nminSubArraySum([num for\
    \ num in nums])\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\
    \t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) ==\
    \ -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: UndefVarError: nums not defined\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpwm0lqs3d.jl:23\nin expression starting at /tmp/tmpwm0lqs3d.jl:23\n"
  stdout: ''
  timestamp: 1660009416
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    minSum = int64(Int64.(minNum))\n\
    \    \n    for num in nums\n        if num < minSum\n            minSum = num\n\
    \        else\n            minSum = minSum - num\n        end\n    end\n    return\
    \ minSum\nend\n</code>\n<|/ a dscore=1 |>\n<| a dscore=0 tags=julia |>\n<code>\n\
    using Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpuq2k8r8t.jl:22\nin expression starting at\
    \ /tmp/tmpuq2k8r8t.jl:22\n"
  stdout: ''
  timestamp: 1660009416
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    min_subsum::Int64\
    \ = 0\n    for v in nums\n        min_subsum = v + min_subsum\n    end\n    return\
    \ min_subsum\nend\n</cell>\n<code language=julia-1.0>\nminSubArraySum([2, 3, 4,\
    \ 1, 2, 4])\n</cell>\n<text>\nMinimum subarray sum\nGiven a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\nof nums.\nExample\n\
    Given nums = [2, 3, 4, 1, 2, 4], the function should return 2.\nusing Test\n\n\
    @testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1,\
    \ 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpk69s5udh.jl:17\nin expression starting at\
    \ /tmp/tmpk69s5udh.jl:17\n"
  stdout: ''
  timestamp: 1660009416
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    # write\
    \ your code in Julia here\n    \nend\n</cell>\n<text>\n\u23CE Write a function\
    \ that computes the minimum sum of the first k positive integers in an array\n\
    \u23CE Write a function that computes the minimum sum of the first k positive\
    \ integers in an array\n\u23CE Write a function that computes the minimum sum\
    \ of the first k positive integers in an array\n\u23CE Write a function that computes\
    \ the minimum sum of the first k positive integers in an array\n\u23CE Write a\
    \ function that computes the minimum sum of the first k positive integers in an\
    \ array\n\u23CE Write a function that computes the minimum sum of the first k\
    \ positive integers in an array\n\u23CE Write a function that computes the minimum\
    \ sum of the first k positive integers in an array\n\u23CE Write a function that\
    \ computes the minimum sum of the first k positive integers in an array\n\u23CE\
    \ Write a function that computes the minimum sum of the first k positive integers\
    \ in an array\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t\
    @test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) ==\
    \ -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnt3j_9is.jl:15\nin expression starting at\
    \ /tmp/tmpnt3j_9is.jl:15\n"
  stdout: ''
  timestamp: 1660009416
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    n=length(nums)\n\
    \    if n==1\n        return nums[1]\n    end\n    sums=Vector{Int64}()\n    sums[1]=nums[1]\n\
    \    for i=2:n\n        sums[i]=nums[i]+sums[i-1]\n    end\n    return minimum(sums)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 0 failed, 9 errored,
    0 broken.

    in expression starting at /tmp/tmp4jhc30jk.jl:24

    '
  stdout: "test set: Error During Test at /tmp/tmp4jhc30jk.jl:27\n  Test threw exception\n\
    \  Expression: candidate([2, 3, 4, 1, 2, 4]) == 1\n  BoundsError: attempt to access\
    \ 0-element Vector{Int64} at index [1]\n  Stacktrace:\n   [1] setindex!\n    \
    \ @ ./array.jl:903 [inlined]\n   [2] minSubArraySum(nums::Vector{Int64})\n   \
    \  @ Main /tmp/tmp4jhc30jk.jl:16\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp4jhc30jk.jl:27 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp4jhc30jk.jl:26\ntest set:\
    \ Error During Test at /tmp/tmp4jhc30jk.jl:28\n  Test threw exception\n  Expression:\
    \ candidate([-1, -2, -3]) == -6\n  BoundsError: attempt to access 0-element Vector{Int64}\
    \ at index [1]\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:903 [inlined]\n\
    \   [2] minSubArraySum(nums::Vector{Int64})\n     @ Main /tmp/tmp4jhc30jk.jl:16\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp4jhc30jk.jl:28 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp4jhc30jk.jl:26\ntest set:\
    \ Error During Test at /tmp/tmp4jhc30jk.jl:29\n  Test threw exception\n  Expression:\
    \ candidate([-1, -2, -3, 2, -10]) == -14\n  BoundsError: attempt to access 0-element\
    \ Vector{Int64} at index [1]\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:903\
    \ [inlined]\n   [2] minSubArraySum(nums::Vector{Int64})\n     @ Main /tmp/tmp4jhc30jk.jl:16\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp4jhc30jk.jl:29 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp4jhc30jk.jl:26\ntest set:\
    \ Error During Test at /tmp/tmp"
  timestamp: 1660009419
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    for i in nums\n\
    \        min = min\n        sum = 0\n        for j in nums\n            if j <\
    \ i\n                sum += j\n            elseif j > i\n                sum +=\
    \ i\n                min = j\n            else\n                sum += j - i\n\
    \        end\n        if sum < min\n            min = sum\n        end\n    end\n\
    \    return min\nend\n</cell>\n<code language=julia-1.3>\nminSubArraySum([2, 3,\
    \ 4, 1, 2, 4])\n</cell>\n<text>\nThe last part is now the most important. This\
    \ part will take care of all the complexities that we just learned. We will use\
    \ the Julia language to write our algorithms and functions in Julia to help us\
    \ solve our problems. Therefore, it is important to remember that we can write\
    \ any type of Julia code that we want. Remember, this includes our own Julia function\
    \ definitions, function calls, for loops, while loops, and everything that you\
    \ can do in Julia. We just need to remember that these are Julia code, not Python\
    \ code, so we are going to have to be careful with our variable names.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpa20uogg0.jl:29\nin expression starting at\
    \ /tmp/tmpa20uogg0.jl:29\n"
  stdout: ''
  timestamp: 1660009416
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    nums = nums[nums\
    \ .!= 0]\n    min_sum = nums[end]\n    index_max = end\n    for (i, val) in enumerate(nums)\n\
    \        if val > min_sum\n            min_sum = val \n            index_max =\
    \ i\n        end\n    end\n    minSubArraySum = min_sum\n    minSubArraySum_end\
    \ = index_max\n    return minSubArraySum\nend\nusing Test\n\n@testset begin\n\n\
    candidate = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1,\
    \ -2, -3]) == -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"end\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpk7klx928.jl:14\nin expression starting at /tmp/tmpk7klx928.jl:14\n"
  stdout: ''
  timestamp: 1660009416
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n\"\"\"\n    Given\
    \ a vector of integers nums, find the minimum sum of any non-empty sub-vector\n\
    \    of nums.\n    Example\n    >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n    1\n\
    \    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1, 2, 4])\
    \ == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1, -2, -3,\
    \ 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp8soyl2gp.jl:10\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp8soyl2gp.jl:1\n\
    in expression starting at /tmp/tmp8soyl2gp.jl:1\n"
  stdout: ''
  timestamp: 1660009412
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    answer = Int64(0)\n\
    \    nums.foreach(x -> answer += x)\n    return answer\nend\n</cell>\n<text>\n\
    The function above can be written in a single line, but since we're using a functional\
    \ programming language we might as well do it in a single line since it makes\
    \ the function more readable.\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\
    \t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) ==\
    \ -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsm9uwkvl.jl:15\nin expression starting at\
    \ /tmp/tmpsm9uwkvl.jl:15\n"
  stdout: ''
  timestamp: 1660009417
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    min = nums[0]\n\
    \    sum = nums[1]\n    for num in nums[2:end]\n        if num >= sum\n      \
    \      sum -= num\n        else\n            min += sum\n            sum = num\n\
    \        end \n    end\n    \n    return min\nend\n</cell>\n<code language=julia-1.4>\n\
    minSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<text>\nWrite a function minSubArraySum(nums::Array{Int64,\
    \ 1}) which takes in a list of integers and returns the minimum sum of the given\
    \ sub-array\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplxot5ocj.jl:25\nin expression starting at\
    \ /tmp/tmplxot5ocj.jl:25\n"
  stdout: ''
  timestamp: 1660009417
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    if length (nums)\
    \ <= 1 \n        return nums[1] \n    if length (nums) <= 2 \n        return min(nums[1\
    \ : end-1]) + min(nums[2 : end]) \n    \n    let rec min_sub_array_sum (nums::Vector{Int64},\
    \ index::Int64)::Int64 = \n        if index > length(nums) \n            return\
    \ nums[index] \n        \n        min_sub_array_sum(nums, index+1) \n        +\
    \ min_sub_array_sum(nums, index+1) \n    \n    \n    return min_sub_array_sum(nums,\
    \ 0) \nend \nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: space before \"(\" not allowed in \"length (\"\
    \ at /tmp/tmpul_2c0ut.jl:11\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpul_2c0ut.jl:11\n\
    in expression starting at /tmp/tmpul_2c0ut.jl:11\n"
  stdout: ''
  timestamp: 1660009417
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    min_sum = Inf(Inf)\n\
    \    for i \u2208 nums \n        for j \u2208 nums[(i+1):end] \n            min_sum\
    \ = min(min_sum, i+j) \n    return min_sum \nend\nusing Test\n\n@testset begin\n\
    \ncandidate = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t\
    @test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1, -2, -3, 2, -10])\
    \ == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\t@test(candidate([0,\
    \ 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3, 10, -5]) == -6)\n\t\
    @test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10, 11,\
    \ 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\t\
    @test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"for\" at /tmp/tmpdmqhl7c6.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpdmqhl7c6.jl:1\n\
    in expression starting at /tmp/tmpdmqhl7c6.jl:1\n"
  stdout: ''
  timestamp: 1660009417
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    sum = int64(0)\n\
    \    pointer = int32(0)\n    size = length(nums)\n    while pointer < size\n \
    \       sum += nums[pointer]\n        pointer += 1\n    end\nusing Test\n\n@testset\
    \ begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1, 2, 4])\
    \ == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1, -2, -3,\
    \ 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp301bsf_h.jl:10\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp301bsf_h.jl:1\n\
    in expression starting at /tmp/tmp301bsf_h.jl:1\n"
  stdout: ''
  timestamp: 1660009417
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    n = length(nums)\n\
    \    if n < 3 then return n\n    \n    # initialize max and sum\n    max = -Inf\n\
    \    sum = -Inf\n    \n    # calculate sum\n    for i in 1:n\n        sum+=nums[i]\n\
    \        if sum>max then max = sum\n    end\n    \n    # recurse\n    sum -= nums[1]\n\
    \    if sum<0 then return sum else return minSubArraySum(sub(nums, 2:end))\nend\
    \ \nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpfn43s5wm.jl:13\nin expression starting at /tmp/tmpfn43s5wm.jl:13\n"
  stdout: ''
  timestamp: 1660009418
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    \n    if\
    \ nums == Nil \n        return 0 \n    \n    \n    minSubArraySum = nums[1] +\
    \ minSubArraySum(nums[2:end])\n    minSubArraySum = min(minSubArraySum, nums[end])\n\
    \    minSubArraySum = minSubArraySum + minSubArraySum(nums[2:end])\n    \n   \
    \ return minSubArraySum \n    \n    \nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1,\
    \ -2, -3]) == -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmphivmj_59.jl:10\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmphivmj_59.jl:1\n\
    in expression starting at /tmp/tmphivmj_59.jl:1\n"
  stdout: ''
  timestamp: 1660009418
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    smallestSum =\
    \ nums[1]\n    for x in nums[2:length(nums)]\n        smallestSum += smallestSum\
    \ - x\n    end\n    return smallestSum\nend\nusing Test\n\n@testset begin\n\n\
    candidate = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1,\
    \ -2, -3]) == -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 9 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpb8crz0ku.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmpb8crz0ku.jl:22\n  Expression: candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1\n   Evaluated: -28 == 1\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpb8crz0ku.jl:22 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpb8crz0ku.jl:21\ntest set: Test Failed at /tmp/tmpb8crz0ku.jl:23\n\
    \  Expression: candidate([-1, -2, -3]) == -6\n   Evaluated: 3 == -6\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpb8crz0ku.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpb8crz0ku.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpb8crz0ku.jl:24\n  Expression: candidate([-1, -2, -3, 2, -10])\
    \ == -14\n   Evaluated: 18 == -14\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpb8crz0ku.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpb8crz0ku.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpb8crz0ku.jl:26\n  Expression: candidate([0, 10, 20, 1000000])\
    \ == 0\n   Evaluated: -1000080 == 0\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpb8crz0ku.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpb8crz0ku.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpb8crz0ku.jl:27\n  Expression: candidate([-1, -2, -3, 10, -5])\
    \ == -6\n   Evaluated: -3 == -6\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] ma"
  timestamp: 1660009419
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    # Your code here\n\
    \tres = Int64(0);\n\tfor i in nums\n\t\tres += i\n\t\t\n\treturn res\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp7qmdeetb.jl:10\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp7qmdeetb.jl:1\n\
    in expression starting at /tmp/tmp7qmdeetb.jl:1\n"
  stdout: ''
  timestamp: 1660009418
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    # Create\
    \ a vector that holds the minimum sum \n    # of the current array\n    \n   \
    \ # The last element in the subarray is nums[end]\n    # and we start our calculation\
    \ from its position\n    # because we already know that every number in the \n\
    \    # array has a minimum of 0\n    \n    min_sum = nums[end]\n    \n    # Find\
    \ the minimum sum from the remaining sub-vector\n    for i in (end - 1)...0 \n\
    \        # Since we need to start from the \n        # second last element we\
    \ need to iterate \n        # all the way back to the first element\n        \n\
    \        min_sum = min(min_sum + nums[i], min_sum + nums[i+1]) \n    end\n   \
    \ \n    # Return the minimum sum\n    return min_sum\nend\n</cell>\n<code language=julia-0.5>\n\
    \"\"\"\n    Given a vector of integers nums, \n    find the maximum sum of any\
    \ non-empty sub-vector of\n    nums.\n    Example\n    >>> maxSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    6\n    >>> maxSubArraySum([-1, -2, -3])\n    3\n    \"\"\
    \"\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"end\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpdx07mpoo.jl:23\nin expression starting at /tmp/tmpdx07mpoo.jl:23\n"
  stdout: ''
  timestamp: 1660009418
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    minval = nums[1]\n\
    \    for val in nums[2:length(nums)] \n        if val < minval \n            minval\
    \ = val \n        elseif val == minval \n            minval = minval + nums[length(nums)]\
    \ \n        else \n            minval = minval - nums[length(nums)] \n       \
    \ end\n    end\n    return minval\nend\n</cell>\n<text>\nNow let's put it all\
    \ together and write a function that will take the vector nums as an input, and\
    \ return a vector of a minimum sum sub-array for each element of the vector.\n\
    using Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0k29p8_1.jl:23\nin expression starting at\
    \ /tmp/tmp0k29p8_1.jl:23\n"
  stdout: ''
  timestamp: 1660009418
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    if nums == []\n\
    \        return 0\n    end\n    \n    local minSubArraySum = nums[1]\n    for\
    \ i = 2:length(nums)\n        minSubArraySum = min(minSubArraySum, nums[i] + minSubArraySum)\n\
    \    end\n    \n    return minSubArraySum\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t\
    @test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1, -2, -3, 2, -10])\
    \ == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\t@test(candidate([0,\
    \ 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3, 10, -5]) == -6)\n\t\
    @test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10, 11,\
    \ 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\t\
    @test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 5 passed, 7 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp9dmv2gob.jl:24

    '
  stdout: "test set: Test Failed at /tmp/tmp9dmv2gob.jl:27\n  Expression: candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1\n   Evaluated: 2 == 1\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp9dmv2gob.jl:27 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp9dmv2gob.jl:26\ntest set: Test Failed at /tmp/tmp9dmv2gob.jl:29\n\
    \  Expression: candidate([-1, -2, -3, 2, -10]) == -14\n   Evaluated: -16 == -14\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9dmv2gob.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9dmv2gob.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp9dmv2gob.jl:32\n  Expression: candidate([-1, -2, -3, 10, -5])\
    \ == -6\n   Evaluated: -11 == -6\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9dmv2gob.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9dmv2gob.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp9dmv2gob.jl:33\n  Expression: candidate([100, -1, -2, -3,\
    \ 10, -5]) == -6\n   Evaluated: 89 == -6\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp9dmv2gob.jl:33 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp9dmv2gob.jl:26\ntest set: Test Failed at /tmp/tmp9dmv2gob.jl:34\n\
    \  Expression: candidate([10, 11, 13, 8, 3, 4]) == 3\n   Evaluated: 10 == 3\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined"
  timestamp: 1660009419
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    \n    \n\
    \    # write your code in Rust, a mix of Julia and Rust would be a good way\n\
    \    # to learn it\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\
    \t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) ==\
    \ -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmppwv5o1hv.jl:10\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmppwv5o1hv.jl:1\n\
    in expression starting at /tmp/tmppwv5o1hv.jl:1\n"
  stdout: ''
  timestamp: 1660009418
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    answer = nums[1]\n\
    \    for num in nums[2:end]\n        answer = min(answer, num + nums[1])\n   \
    \ end\n    answer\nend\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\
    \t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) ==\
    \ -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 5 passed, 7 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpe_o2zm9z.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmpe_o2zm9z.jl:22\n  Expression: candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1\n   Evaluated: 2 == 1\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpe_o2zm9z.jl:22 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpe_o2zm9z.jl:21\ntest set: Test Failed at /tmp/tmpe_o2zm9z.jl:23\n\
    \  Expression: candidate([-1, -2, -3]) == -6\n   Evaluated: -4 == -6\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpe_o2zm9z.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpe_o2zm9z.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpe_o2zm9z.jl:24\n  Expression: candidate([-1, -2, -3, 2, -10])\
    \ == -14\n   Evaluated: -11 == -14\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpe_o2zm9z.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpe_o2zm9z.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpe_o2zm9z.jl:28\n  Expression: candidate([100, -1, -2, -3,\
    \ 10, -5]) == -6\n   Evaluated: 95 == -6\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpe_o2zm9z.jl:28 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpe_o2zm9z.jl:21\ntest set: Test Failed at /tmp/tmpe_o2zm9z.jl:29\n\
    \  Expression: candidate([10, 11, 13, 8, 3, 4]) == 3\n   Evaluated: 10 == 3\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] ma"
  timestamp: 1660009419
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n  \n  sum = 0 \n \
    \ for item in nums do \n    if item > 0 \n      sum += item \n    end \n  end\
    \ \n  return sum \nend \n</cell>\n<text>\nBack to the original problem\nusing\
    \ Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid \"do\" syntax\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp7_biivdv.jl:13\nin expression starting at /tmp/tmp7_biivdv.jl:13\n"
  stdout: ''
  timestamp: 1660009418
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    if nums.empty()\
    \ || length(nums)==0\n        return 0\n    end\n    s = nums[1]\n    \n    for\
    \ x in nums[2:end]\n        s = min(s, x + s)\n    end\n    return s\nend\n</cell>\n\
    <text>\nPart VI. Algorithm to find minimum sum contiguous subarray\nGiven a vector\
    \ of integers nums, find the minimum sum of any non-empty sub-vector of nums.\n\
    using Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpoqlbqsd_.jl:21\nin expression starting at\
    \ /tmp/tmpoqlbqsd_.jl:21\n"
  stdout: ''
  timestamp: 1660009418
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    smallestSum::Int64\
    \ = 0\n    for i in nums\n        if smallestSum < i\n            smallestSum\
    \ = i\n        end\n    end\n    return smallestSum\nend\n</cell>\n<text>\nExercises:\n\
    using Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp66zii8xr.jl:19\nin expression starting at\
    \ /tmp/tmp66zii8xr.jl:19\n"
  stdout: ''
  timestamp: 1660009418
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n\"\"\"\n    Return\
    \ the minimum sum of any non-empty sub-vector of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp4sagie41.jl:10\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp4sagie41.jl:1\n\
    in expression starting at /tmp/tmp4sagie41.jl:1\n"
  stdout: ''
  timestamp: 1660009418
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    return recursivelyMinSubArraySum(nums,0)\n\
    end\n</cell>\n<text>\nProblem 3: Recursive Solution\nWrite a recursive solution\
    \ function called recursivelyMinSubArraySum.\nusing Test\n\n@testset begin\n\n\
    candidate = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1,\
    \ -2, -3]) == -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvl31z4dx.jl:13\nin expression starting at\
    \ /tmp/tmpvl31z4dx.jl:13\n"
  stdout: ''
  timestamp: 1660009419
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    largest\
    \ = nums[1]\n    smallest = nums[1]\n    \n    for i in 2:length(nums)\n     \
    \   if nums[i] < smallest\n            largest = smallest\n            smallest\
    \ = nums[i]\n        elseif nums[i] > largest\n            largest = nums[i]\n\
    \        end\n    end\n    return largest\nend\n</cell>\n<text>\nMinimum Path\
    \ Sum: Find a path that leads to the minimum sum\nusing Test\n\n@testset begin\n\
    \ncandidate = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t\
    @test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1, -2, -3, 2, -10])\
    \ == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\t@test(candidate([0,\
    \ 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3, 10, -5]) == -6)\n\t\
    @test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10, 11,\
    \ 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\t\
    @test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcxtsf8f4.jl:25\nin expression starting at\
    \ /tmp/tmpcxtsf8f4.jl:25\n"
  stdout: ''
  timestamp: 1660009419
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    sum = 0\n    len::Int64\
    \ = 0\n    for v in nums\n        sum+=v\n        len += 1\n        if len ==\
    \ length(nums)\n            min = sum\n        else\n            min = min(min,\
    \ sum)\n        end\n    end\n    return min\nend\n</cell>\n<code language=julia-1.5>\n\
    minSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<code language=julia-1.5>\nminSubArraySum([-1,\
    \ -2, -3])\n</cell>\n<text>\nThe sum of an even number of natural numbers\nIt\
    \ is interesting to see that the sum of an even number of natural numbers is equal\
    \ to the sum of the\nsquares of the numbers.\nusing Test\n\n@testset begin\n\n\
    candidate = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1,\
    \ -2, -3]) == -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpa5fsuqh6.jl:24\nin expression starting at\
    \ /tmp/tmpa5fsuqh6.jl:24\n"
  stdout: ''
  timestamp: 1660009419
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    sum=0\n    for\
    \ i in nums\n        if sum<i && i!=0 && i>=0 \n            sum=i\n        end\n\
    \    end\n    return sum\nend\n</cell>\n<text>\nThe second function takes a vector\
    \ of integers, removes the smallest element of that vector and returns its position\n\
    in the vector. The index must be returned as a Vector{Int}\nusing Test\n\n@testset\
    \ begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1, 2, 4])\
    \ == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1, -2, -3,\
    \ 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8wld0a6j.jl:19\nin expression starting at\
    \ /tmp/tmp8wld0a6j.jl:19\n"
  stdout: ''
  timestamp: 1660009419
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    # Write your code\
    \ here.\n    sum::Int64 = 0\n    i = 0\n    \n    while i < length(nums)\n   \
    \     if nums[i] >= 0\n            sum += nums[i]\n            i += 1\n      \
    \  else\n            i = 1\n            sum += nums[i]\n        end\n    end\n\
    \    \n    return sum\nend\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\
    \t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) ==\
    \ -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 12 errored,
    0 broken.

    in expression starting at /tmp/tmp53xmnguj.jl:29

    '
  stdout: "test set: Error During Test at /tmp/tmp53xmnguj.jl:32\n  Test threw exception\n\
    \  Expression: candidate([2, 3, 4, 1, 2, 4]) == 1\n  BoundsError: attempt to access\
    \ 6-element Vector{Int64} at index [0]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] minSubArraySum(nums::Vector{Int64})\n     @\
    \ Main /tmp/tmp53xmnguj.jl:16\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp53xmnguj.jl:32 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp53xmnguj.jl:31\ntest set:\
    \ Error During Test at /tmp/tmp53xmnguj.jl:33\n  Test threw exception\n  Expression:\
    \ candidate([-1, -2, -3]) == -6\n  BoundsError: attempt to access 3-element Vector{Int64}\
    \ at index [0]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861 [inlined]\n\
    \   [2] minSubArraySum(nums::Vector{Int64})\n     @ Main /tmp/tmp53xmnguj.jl:16\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp53xmnguj.jl:33 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp53xmnguj.jl:31\ntest set:\
    \ Error During Test at /tmp/tmp53xmnguj.jl:34\n  Test threw exception\n  Expression:\
    \ candidate([-1, -2, -3, 2, -10]) == -14\n  BoundsError: attempt to access 5-element\
    \ Vector{Int64} at index [0]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] minSubArraySum(nums::Vector{Int64})\n     @ Main /tmp/tmp53xmnguj.jl:16\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp53xmnguj.jl:34 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp53xmnguj.jl:31\ntest set:\
    \ Error During Test at /tmp/tmp53x"
  timestamp: 1660009422
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    if nums\
    \ == Vector{Int64}() \n        return 0\n    \n    left = 0\n    right = length(nums)\
    \ - 1\n    \n    while left < right\n        if nums[left] > 0\n            right\
    \ -= 1\n        else\n            left += 1\n        end\n    end\n    \n    if\
    \ left == right\n        left = left\n    end\n    \n    return nums[left] + minSubArraySum(nums[left\
    \ + 1, right])\nend\n</cell>\n<text>\nLet's try it out on some examples:\nusing\
    \ Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3lirkkeu.jl:32\nin expression starting at\
    \ /tmp/tmp3lirkkeu.jl:32\n"
  stdout: ''
  timestamp: 1660009419
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    if nums == []\
    \ then \n        return 0;\n    elseif nums == [1] \n        return 1;\n    else\n\
    \        local n = length(nums)\n        local ans = 1\n        local num = 0\n\
    \        while num < n do\n            num2 = nums[num];\n            local sum\
    \ = 0\n            for i in 1:n do\n                sum = sum + nums[i]\n    \
    \            if num2 < sum then\n                    break\n                end\n\
    \            end\n            if sum > ans then\n                ans = sum\n \
    \           end\n            num = num + 1\n        end\n        return ans\n\
    \    end\nend\n</cell>\n<text>\n\u6700\u5927\u6570\u7EC4\u548C\nusing Test\n\n\
    @testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1,\
    \ 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid \"do\" syntax\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpnt0_717h.jl:19\nin expression starting at /tmp/tmpnt0_717h.jl:19\n"
  stdout: ''
  timestamp: 1660009419
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n  if nums.size ==\
    \ 0 \n    return 0\n  end\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\
    \t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) ==\
    \ -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp9sxyy3hr.jl:10\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp9sxyy3hr.jl:1\n\
    in expression starting at /tmp/tmp9sxyy3hr.jl:1\n"
  stdout: ''
  timestamp: 1660009419
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    # Write\
    \ your code here\n    sum=0\n    for v in nums\n        sum = sum + v\n    end\n\
    \    return sum\nend\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\
    \t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) ==\
    \ -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 5 passed, 7 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpun85pg8g.jl:21

    '
  stdout: "test set: Test Failed at /tmp/tmpun85pg8g.jl:24\n  Expression: candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1\n   Evaluated: 16 == 1\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpun85pg8g.jl:24 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpun85pg8g.jl:23\ntest set: Test Failed at /tmp/tmpun85pg8g.jl:28\n\
    \  Expression: candidate([0, 10, 20, 1000000]) == 0\n   Evaluated: 1000030 ==\
    \ 0\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpun85pg8g.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpun85pg8g.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpun85pg8g.jl:29\n  Expression: candidate([-1, -2, -3, 10, -5])\
    \ == -6\n   Evaluated: -1 == -6\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpun85pg8g.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpun85pg8g.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpun85pg8g.jl:30\n  Expression: candidate([100, -1, -2, -3,\
    \ 10, -5]) == -6\n   Evaluated: 99 == -6\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpun85pg8g.jl:30 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpun85pg8g.jl:23\ntest set: Test Failed at /tmp/tmpun85pg8g.jl:31\n\
    \  Expression: candidate([10, 11, 13, 8, 3, 4]) == 3\n   Evaluated: 49 == 3\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined"
  timestamp: 1660009420
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    sum::Int64 = 0\n\
    \    idx::Int64 = 0\n    for i in nums\n        if i >= 0\n            sum +=\
    \ i\n            idx += 1\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1,\
    \ 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 11 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpro8mjmdw.jl:23

    '
  stdout: "test set: Test Failed at /tmp/tmpro8mjmdw.jl:26\n  Expression: candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1\n   Evaluated: 16 == 1\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpro8mjmdw.jl:26 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpro8mjmdw.jl:25\ntest set: Test Failed at /tmp/tmpro8mjmdw.jl:27\n\
    \  Expression: candidate([-1, -2, -3]) == -6\n   Evaluated: 0 == -6\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpro8mjmdw.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpro8mjmdw.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpro8mjmdw.jl:28\n  Expression: candidate([-1, -2, -3, 2, -10])\
    \ == -14\n   Evaluated: 2 == -14\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpro8mjmdw.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpro8mjmdw.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpro8mjmdw.jl:29\n  Expression: candidate([-9999999999999999])\
    \ == -9999999999999999\n   Evaluated: 0 == -9999999999999999\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpro8mjmdw.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpro8mjmdw.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpro8mjmdw.jl:30\n  Expression: candidate([0, 10, 20, 1000000])\
    \ == 0\n   Evaluated: 1000030 == 0\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test"
  timestamp: 1660009421
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    \"\"\"\n    Given\
    \ a vector of integers nums, find the minimum sum of any non-empty sub-vector\n\
    \    of nums.\n    Example\n    >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n    1\n\
    \    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1, 2, 4])\
    \ == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1, -2, -3,\
    \ 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp6ke1rkzv.jl:10\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp6ke1rkzv.jl:1\n\
    in expression starting at /tmp/tmp6ke1rkzv.jl:1\n"
  stdout: ''
  timestamp: 1660009407
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    # write your code\
    \ in Python 2.7\n    # find the minimum sum of a sub-vector\n    # initialize\
    \ min to -Infinity\n    # initialize sum to 0\n    # loop through the vector\n\
    \    # if the current element in the vector is positive, \n    # increment sum\
    \ by current element\n    # else decrement sum by current element\n    # if the\
    \ sum is less than min, update min to sum\n    # return min\n    # write your\
    \ code in Python 3.6\n    # find the minimum sum of a sub-vector\n    # initialize\
    \ min to -Infinity\n    # initialize sum to 0\n    # loop through the vector\n\
    \    # if the current element in the vector is positive, \n    # increment sum\
    \ by current element\n    # else decrement sum by current element\n    # if the\
    \ sum is less than min, update min to sum\n    # return min\nusing Test\n\n@testset\
    \ begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1, 2, 4])\
    \ == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1, -2, -3,\
    \ 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp4ckiadjg.jl:10\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp4ckiadjg.jl:1\n\
    in expression starting at /tmp/tmp4ckiadjg.jl:1\n"
  stdout: ''
  timestamp: 1660009420
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    \"\"\"\n    Given\
    \ a vector of integers nums, find the minimum sum of any non-empty sub-vector\n\
    \    of nums.\n    Example\n    >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n    1\n\
    \    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1, 2, 4])\
    \ == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1, -2, -3,\
    \ 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp6ke1rkzv.jl:10\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp6ke1rkzv.jl:1\n\
    in expression starting at /tmp/tmp6ke1rkzv.jl:1\n"
  stdout: ''
  timestamp: 1660009407
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    # base case\n\
    \    if nums.len==1 \n        return nums[0]\n    end\n    \n    # find the max\
    \ sum possible of the sub array starting from the right side of the array\n  \
    \  sum::Int64 = nums[end]\n    \n    # loop through all the elements from the\
    \ right side of the array\n    for i in (length(nums)-1):ind \n        \n    \
    \    # if the sum is not yet exceeded\n        if sum+nums[i]>sum \n        \n\
    \            # find the minimum sum possible of the sub array starting from the\
    \ right side of the array and ignoring the current element \n            newSum::Int64\
    \ = sum+nums[i]\n            \n            # if the minimum sum possible of the\
    \ sub array starting from the right side of the array is smaller than the current\
    \ sum then update the current sum and ignore the current element\n           \
    \ if newSum<sum\n                sum = newSum\n            end\n            \n\
    \            # if the minimum sum possible of the sub array starting from the\
    \ right side of the array is greater than the current sum then ignore the current\
    \ element\n            elseif newSum>sum\n                continue\n         \
    \   end\n        elseif sum+nums[i]<sum\n            \n            # find the\
    \ minimum sum possible of the sub array starting from the right side of the array\
    \ and ignore the current element\n            newSum::Int64 = sum+nums[i]\n  \
    \          \n            # if the minimum sum possible of the sub array starting\
    \ from the right side of the array is smaller than the current sum then update\
    \ the current sum and ignore the current element\n            if newSum<sum\n\
    \                sum = newSum\n            end\n            \n            # if\
    \ the minimum sum possible of the sub array starting from the right side of the\
    \ array is greater than the current sum then ignore the current element\n    \
    \        elseif newSum>sum\n                continue\n            end\n      \
    \  end\n    end\n    return sum\nend\n</cell>\n<text>\nFind the maximum subarray\
    \ of size k which sums to n.\nThe function should return an array containing one\
    \ integer which is the max sum of a subarray of size k which sums to n. \nThe\
    \ function is defined as:\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\
    \t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) ==\
    \ -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmp41ihfxmf.jl:21 expected \"\
    end\", got \"elseif\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp41ihfxmf.jl:38\n\
    in expression starting at /tmp/tmp41ihfxmf.jl:38\n"
  stdout: ''
  timestamp: 1660009420
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    if length(nums)\
    \ <= 1\n        return nums[end]\n    end\n    \n    min_sum = minimum(subArraySum(nums[1:end-1]))\n\
    \    if min_sum == 0 && length(nums) > 1\n        min_sum = minimum(subArraySum(nums[2:end]))\n\
    \    end\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpveulgddn.jl:10\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpveulgddn.jl:1\n\
    in expression starting at /tmp/tmpveulgddn.jl:1\n"
  stdout: ''
  timestamp: 1660009420
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    n = length(nums)\n\
    \    if n < 1 \n        return -1\n    end\nusing Test\n\n@testset begin\n\ncandidate\
    \ = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1,\
    \ -2, -3]) == -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp05qrfaqr.jl:10\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp05qrfaqr.jl:1\n\
    in expression starting at /tmp/tmp05qrfaqr.jl:1\n"
  stdout: ''
  timestamp: 1660009420
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    if nums == []\n\
    \        return 0\n    \n    min = math.inf\n    index = 1\n    while index <=\
    \ length(nums)\n        sum = sumSubArraySum(nums, index, length(nums))\n    \
    \    if sum < min\n            min = sum\n        elseif sum == min\n        \
    \    index = index + 1 \n        else\n            index = 1\n        end\n  \
    \  end\n    min\nend\n</code>\n<|/ a |>\n<| a |>\nHere's a recursive approach\
    \ which seems to me to be the simplest to implement and understand:\n<code>\n\
    using Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5kkvltmo.jl:28\nin expression starting at\
    \ /tmp/tmp5kkvltmo.jl:28\n"
  stdout: ''
  timestamp: 1660009420
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    sum::Int64 = 0\n\
    \    for i in nums\n        sum += i\n    end\n    return sum\nend\n</cell>\n\
    <text>\nSolution\nWe could now solve the problem by writing a custom function\
    \ with the minimum subArray sum function written above. The function signature\
    \ will look like this:\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\
    \t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) ==\
    \ -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpit8_fhbt.jl:17\nin expression starting at\
    \ /tmp/tmpit8_fhbt.jl:17\n"
  stdout: ''
  timestamp: 1660009420
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    i, s = 0, zero(0)\n\
    \    for el in nums\n        if el > 0 \n            s += el\n        else\n \
    \           s += i\n        i += 1\n    end\n    return s\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@time minSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<code\
    \ language=julia-1.5>\n@time minSubArraySum([-1, -2, -3])\n</cell>\n<text>\nExercise\n\
    For each of the five exercises, solve the algorithm for a different size vector\
    \ and check its correctness. How long does the algorithm take to run for a vector\
    \ of size $10^5$ and $10^6$? Can you tell by how much each run takes compared\
    \ to the run that took so long for the smaller vector?\nusing Test\n\n@testset\
    \ begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1, 2, 4])\
    \ == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1, -2, -3,\
    \ 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1kd45ejx.jl:21\nin expression starting at\
    \ /tmp/tmp1kd45ejx.jl:21\n"
  stdout: ''
  timestamp: 1660009420
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    \"\"\"\n    Given\
    \ a vector of integers nums, find the minimum sum of any non-empty sub-vector\n\
    \    of nums.\n    Example\n    >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n    1\n\
    \    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\"\"\n    function minSubArraySum(nums::Vector{Int64})\n\
    \        return sum(nums[:]) \n    end\nusing Test\n\n@testset begin\n\ncandidate\
    \ = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1,\
    \ -2, -3]) == -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpot9sjbrp.jl:10\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpot9sjbrp.jl:1\n\
    in expression starting at /tmp/tmpot9sjbrp.jl:1\n"
  stdout: ''
  timestamp: 1660009420
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    minSum =\
    \ -Inf \n    for num in nums do \n        minSum = min(minSum, num + num) \n \
    \   end\n    return minSum\nend\n</cell>\n<code language=julia-1.3>\nminSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n</cell>\n<text>\nQuestion 1.3: Which of the following is faster,\
    \ min or max?\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t\
    @test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) ==\
    \ -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid \"do\" syntax\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp1tcpl56f.jl:13\nin expression starting at /tmp/tmp1tcpl56f.jl:13\n"
  stdout: ''
  timestamp: 1660009420
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    if len(nums)==0\
    \ return 0\n    minimum=nums[0]\n    for i in nums[2:end-1] minimum+=i\n    return\
    \ minimum\nend \n</cell>\n<text>\nProblem 10\nGiven two arrays of ints, find the\
    \ length of the smallest common prefix of all elements.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1, 2, 4])\
    \ == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1, -2, -3,\
    \ 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpe_yoovnz.jl:16\nin expression starting at\
    \ /tmp/tmpe_yoovnz.jl:16\n"
  stdout: ''
  timestamp: 1660009420
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    \"\"\"\n    This\
    \ function returns the minimum sum of a sub-array of the \n    input vector, nums.\n\
    using Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3n91ji61.jl:1\nin expression starting at /tmp/tmp3n91ji61.jl:1\n"
  stdout: ''
  timestamp: 1660009421
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    return sum(nums)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 5 passed, 7 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpipxpgxlk.jl:15

    '
  stdout: "test set: Test Failed at /tmp/tmpipxpgxlk.jl:18\n  Expression: candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1\n   Evaluated: 16 == 1\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpipxpgxlk.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpipxpgxlk.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpipxpgxlk.jl:22\n  Expression: candidate([0, 10, 20, 1000000])\
    \ == 0\n   Evaluated: 1000030 == 0\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpipxpgxlk.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpipxpgxlk.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpipxpgxlk.jl:23\n  Expression: candidate([-1, -2, -3, 10, -5])\
    \ == -6\n   Evaluated: -1 == -6\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpipxpgxlk.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpipxpgxlk.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpipxpgxlk.jl:24\n  Expression: candidate([100, -1, -2, -3,\
    \ 10, -5]) == -6\n   Evaluated: 99 == -6\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpipxpgxlk.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpipxpgxlk.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpipxpgxlk.jl:25\n  Expression: candidate([10, 11, 13, 8, 3,\
    \ 4]) == 3\n   Evaluated: 49 == 3\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/ju"
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    for i in\
    \ nums\n        \n        if i == 0\n        \n            minSum = i\n      \
    \      \n        else \n        \n            if i + minSum > i\n            \n\
    \                minSum = i + 1\n            \n            else \n           \
    \ \n                minSum = i\n            \n            end\n        end\n \
    \       \n    end\n    \n    return minSum\nend\n</cell>\n<code language=julia-1.0>\n\
    minSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<code language=julia-1.0>\nminSubArraySum([-1,\
    \ -2, -3])\n</cell>\n<code language=julia-1.0>\n# Using a while loop\nusing Test\n\
    \n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1,\
    \ 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_qku5j92.jl:35\nin expression starting at\
    \ /tmp/tmp_qku5j92.jl:35\n"
  stdout: ''
  timestamp: 1660009420
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    \"\"\"\n    Given\
    \ a vector of integers nums, find the minimum sum of any non-empty sub-vector\n\
    \    of nums.\n    Example\n    >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n    1\n\
    \    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\"\"\n    minimum = nums.min()\n\
    \    idx = nums.indexof(minimum)\n    minimums = Vector{Int64}()\n    minimums.push(minimum)\n\
    \    for i in nums[idx+1:end]\n        if minimums.last == minimum + i\n     \
    \       minimums.push(minimum + i)\n        else\n            return minimum\n\
    \        end\n    end\n    return minimum\nend\n\"\"\"\n    Given a vector of\
    \ integers nums, find the minimum sum of any non-empty sub-vector\n    of nums.\n\
    \    Example\n    >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1,\
    \ -2, -3])\n    -6\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\
    \t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) ==\
    \ -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nusing Test\n\
    \nStacktrace:\n [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level\
    \ scope\n   @ /tmp/tmppeye3j7z.jl:33\nin expression starting at /tmp/tmppeye3j7z.jl:33\n"
  stdout: ''
  timestamp: 1660009421
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    min = Int.max(nums[0])\n\
    \    \n    for a in nums do \n        if a > min then \n            min = a \n\
    \        end\n    end\n    min\nend\n</cell>\n<text>\nWrite a function which accepts\
    \ a vector of integers (nums) and finds the maximum sum of any non-empty sub-vector\
    \ of nums.\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid \"do\" syntax\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpn0ngltyy.jl:14\nin expression starting at /tmp/tmpn0ngltyy.jl:14\n"
  stdout: ''
  timestamp: 1660009421
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    len = length(nums)\n\
    \    if len == 0 then return 0 end\n    if len == 1 then return nums[0] end\n\
    using Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp0sjc6b_u.jl:12\nin expression starting at /tmp/tmp0sjc6b_u.jl:12\n"
  stdout: ''
  timestamp: 1660009421
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    len = length(nums)\n\
    \    if len == 0 \n        throw(ArgumentError(\"Invalid array length\"))\n  \
    \  end\n    local cur_min = nums[1]\n    for i = 2:len\n        local current_sum\
    \ = sum(nums[2 : i])\n        if current_sum < cur_min\n            cur_min =\
    \ current_sum\n        end\n    end\n    return cur_min\nend\n</cell>\n<code language=julia-0.5>\n\
    minSubArraySum([4, -5, 6, -3, 1, -2, -1])\n</cell>\n<text>\nGreat! Now let's use\
    \ our minSubArraySum function to find the minimum number in a vector!\nusing Test\n\
    \n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1,\
    \ 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfljo155z.jl:24\nin expression starting at\
    \ /tmp/tmpfljo155z.jl:24\n"
  stdout: ''
  timestamp: 1660009421
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    minSum = Int.max\n\
    \    for k in nums\n        if k == 0\n            continue\n        if k < 0\n\
    \            continue\n        minSum = min(minSum, k)\n    end\n    minSum\n\
    end\n</cell>\n<text>\nWe will now implement a function which determines whether\
    \ a given array contains only 1s or not. \nNote that we will only use vectorized\
    \ code for this function (i.e. no explicit loops). \nThis will be a benefit for\
    \ our overall performance.\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\
    \t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) ==\
    \ -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvnnd0ufv.jl:21\nin expression starting at\
    \ /tmp/tmpvnnd0ufv.jl:21\n"
  stdout: ''
  timestamp: 1660009421
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    # Write your code\
    \ in Julia 0.5.1\n    k = nums[1]\n    ans = k\n    for j in 2:length(nums)\n\
    \        ans = max(ans, k + nums[j])\n        k = ans\n    end\n    return ans\n\
    end\n</cell>\n<text>\nPart III: Implementing QuickSelect\nImplement the function\
    \ quickSelect() that takes as input a sorted vector nums and an integer k, and\
    \ returns kth smallest element of nums. It is assumed that all values in nums\
    \ are unique.\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t\
    @test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) ==\
    \ -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcfu_0bex.jl:20\nin expression starting at\
    \ /tmp/tmpcfu_0bex.jl:20\n"
  stdout: ''
  timestamp: 1660009421
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    minArraySum =\
    \ 0\n    for x in nums\n        minArraySum = minArraySum + x\n    end\nusing\
    \ Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpc5ik71x8.jl:10\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpc5ik71x8.jl:1\n\
    in expression starting at /tmp/tmpc5ik71x8.jl:1\n"
  stdout: ''
  timestamp: 1660009421
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    for i in length(nums):-1:1\n\
    \        sum = sum(nums[i:end])\n        if sum < 0\n            return sum\n\
    \        elseif sum == 0\n            return abs(nums[i])\n        else\n    \
    \        return min((sum, abs(nums[i])))\n        end\n    end\n    return 0\n\
    end\n</cell>\n<code language=julia-0.6>\nminSubArraySum([2, 3, 4, 1, 2, 4])\n\
    </cell>\n<code language=julia-0.6>\nminSubArraySum([-1, -2, -3])\n</cell>\n<text>\n\
    Part 2\nUsing the same method, find the minimum sum of any non-negative integer\
    \ sub-array of nums.\nExample\nminSubArraySum([2, 3, 4, 1, 2, 4])\nminSubArraySum([-1,\
    \ -2, -3])\nminSubArraySum([4, 0, 1, 2])\nminSubArraySum([7, 4, 3, 1])\nminSubArraySum([2,\
    \ 2, 2])\nminSubArraySum([2, 2, 2, 1])\nminSubArraySum([0, 3, 2])\nminSubArraySum([1,\
    \ 3, 2, 1, 2, 3])\nminSubArraySum([0, -2, -5, -4, -3, -6, -7, -8])\nminSubArraySum([10,\
    \ 20, 30, 10, 20, 20, 20, 20])\nminSubArraySum([10, 20, 30, 10, 20, 20, 20, 20])\n\
    minSubArraySum([-10, -20, -30, -10, -20, -20, -20, -20])\nminSubArraySum([-5,\
    \ -10, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20,\
    \ -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20,\
    \ -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20,\
    \ -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20,\
    \ -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20,\
    \ -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20,\
    \ -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20,\
    \ -20, -20, -20, -20, -20, -20, -\nusing Test\n\n@testset begin\n\ncandidate =\
    \ minSubArraySum;\n\t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1,\
    \ -2, -3]) == -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpa4ijqbwi.jl:23\nin expression starting at\
    \ /tmp/tmpa4ijqbwi.jl:23\n"
  stdout: ''
  timestamp: 1660009421
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    nums = nums[2:end]\
    \ #O(n) but better than O(n)\n    \n    #O(n) solution\n    minSum = nums[1]\n\
    \    for i in 2:length(nums)\n        if nums[i-1] > nums[i]\n            minSum\
    \ = min(nums[i], minSum)\n        else\n            minSum = min(nums[i-1], minSum)\n\
    \        end\n    end\n    return minSum\nend\n</cell>\n<code language=julia-1.5>\n\
    using BenchmarkTools\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\
    \t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) ==\
    \ -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxct9gyw6.jl:25\nin expression starting at\
    \ /tmp/tmpxct9gyw6.jl:25\n"
  stdout: ''
  timestamp: 1660009421
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    sum = 0\n    for\
    \ a in nums\n        sum += a\n    end\nusing Test\n\n@testset begin\n\ncandidate\
    \ = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1,\
    \ -2, -3]) == -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpcupqeg2h.jl:10\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpcupqeg2h.jl:1\n\
    in expression starting at /tmp/tmpcupqeg2h.jl:1\n"
  stdout: ''
  timestamp: 1660009421
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    if length(nums)\
    \ < 1 \n        throw(ArgumentError(\"Vector not long enough\")) \n    end\n \
    \   \n    if length(nums) == 1 \n        return nums[0] \n    end\nusing Test\n\
    \n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1,\
    \ 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpjr3wll0y.jl:10\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjr3wll0y.jl:1\n\
    in expression starting at /tmp/tmpjr3wll0y.jl:1\n"
  stdout: ''
  timestamp: 1660009422
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    if isempty(nums)\
    \ \n        error(\"Subset sum to zero not possible\") \n    end\n    lengthOfSubArray\
    \ = zeros(Int, length(nums))\n    sumOfSubArray = zeros(Int, length(nums))\n \
    \   for i in 1:length(nums)\n        if nums[i] <= 0\n            error(\"Subset\
    \ sum cannot contain negative numbers\")\n        end\n        lengthOfSubArray[i]\
    \ = 1\n        sumOfSubArray[i] = nums[i]\n    end\n    for i in 1:length(lengthOfSubArray)\n\
    \        if sumOfSubArray[i] < sumOfSubArray[i - 1] \n            return sumOfSubArray[i]\n\
    \        end\n        lengthOfSubArray[i] = lengthOfSubArray[i - 1] + 1\n    \
    \    sumOfSubArray[i] = nums[i - 1] + nums[i]\n    end\n    return sumOfSubArray[end]\
    \ \nend\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 12 errored,
    0 broken.

    in expression starting at /tmp/tmp4qeb01js.jl:34

    '
  stdout: "test set: Error During Test at /tmp/tmp4qeb01js.jl:37\n  Test threw exception\n\
    \  Expression: candidate([2, 3, 4, 1, 2, 4]) == 1\n  BoundsError: attempt to access\
    \ 6-element Vector{Int64} at index [0]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] minSubArraySum(nums::Vector{Int64})\n     @\
    \ Main /tmp/tmp4qeb01js.jl:24\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp4qeb01js.jl:37 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp4qeb01js.jl:36\ntest set:\
    \ Error During Test at /tmp/tmp4qeb01js.jl:38\n  Test threw exception\n  Expression:\
    \ candidate([-1, -2, -3]) == -6\n  Subset sum cannot contain negative numbers\n\
    \  Stacktrace:\n   [1] error(s::String)\n     @ Base ./error.jl:33\n   [2] minSubArraySum(nums::Vector{Int64})\n\
    \     @ Main /tmp/tmp4qeb01js.jl:18\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp4qeb01js.jl:38 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp4qeb01js.jl:36\ntest set:\
    \ Error During Test at /tmp/tmp4qeb01js.jl:39\n  Test threw exception\n  Expression:\
    \ candidate([-1, -2, -3, 2, -10]) == -14\n  Subset sum cannot contain negative\
    \ numbers\n  Stacktrace:\n   [1] error(s::String)\n     @ Base ./error.jl:33\n\
    \   [2] minSubArraySum(nums::Vector{Int64})\n     @ Main /tmp/tmp4qeb01js.jl:18\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp4qeb01js.jl:39 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp4qeb01js.jl:36\ntest set:\
    \ Error During Test at /tmp/tmp4qeb01js.jl:40\n  Test threw exception\n  Expressio"
  timestamp: 1660009424
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    if nums.is_empty()\
    \ \n        return 0 \n    min = nums.last \n    for x in nums[2:end] \n     \
    \   min = min + x \n    min = min + nums[1] \n    return min \nend\nusing Test\n\
    \n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1,\
    \ 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpl_re_mhp.jl:1\nin expression starting at /tmp/tmpl_re_mhp.jl:1\n"
  stdout: ''
  timestamp: 1660009422
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    minSubArraySum\
    \ = Int64(0)\n    \n    function minSubArraySumHelper(nums, minSubArraySum, minSubArray)::Int64\
    \ \n        if length(nums) == 0 \n            return minSubArraySum\n       \
    \ elseif length(nums) == 1 \n            return minSubArraySum + nums[0]\n   \
    \     end\n        \n        var minSum = Int64(Inf)\n        var minSubArray\
    \ = Int64(0)\n        for elem in nums\n            if elem < minSum\n       \
    \         minSum = elem\n                minSubArray = elem\n            elseif\
    \ elem >= minSum\n                minSubArray += elem-minSum\n            end\n\
    \        end\n        minSubArraySumHelper(nums[1:end-1], minSubArraySum+minSubArray,\
    \ minSubArray)\n    end\n    \n    minSubArraySumHelper(nums, Int64(Inf), Int64(Inf))\n\
    \    return minSubArraySum\nend\n</cell>\n<code language=julia-1.0>\nminSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n</cell>\n<code language=julia-1.0>\nminSubArraySum([-1, -2,\
    \ -3])\n</cell>\n<code language=julia-1.0>\nminSubArraySum([-6, -2, -3])\n</cell>\n\
    <code language=julia-1.0>\nminSubArraySum([-6, -3, -6, -6, -6])\n</cell>\n<code\
    \ language=julia-1.0>\nminSubArraySum([-6, -7, -3, -6, -6, -6])\n</cell>\n<code\
    \ language=julia-1.0>\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\
    \t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) ==\
    \ -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"function\" at /tmp/tmp8j996pvm.jl:13 expected\
    \ \"end\", got \"minSum\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp8j996pvm.jl:20\n\
    in expression starting at /tmp/tmp8j996pvm.jl:20\n"
  stdout: ''
  timestamp: 1660009422
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    nums = nums[:]\n\
    \    \n    sum = 0\n    \n    lenNum = length(nums)\n    \n    \n    for num in\
    \ nums\n        if num != 0\n            sum += num\n        else\n          \
    \  sum -= num\n        end\n    end\n    \n    \n    \n    return sum\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 5 passed, 7 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpwsu71shg.jl:33

    '
  stdout: "test set: Test Failed at /tmp/tmpwsu71shg.jl:36\n  Expression: candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1\n   Evaluated: 16 == 1\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpwsu71shg.jl:36 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpwsu71shg.jl:35\ntest set: Test Failed at /tmp/tmpwsu71shg.jl:40\n\
    \  Expression: candidate([0, 10, 20, 1000000]) == 0\n   Evaluated: 1000030 ==\
    \ 0\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwsu71shg.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwsu71shg.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpwsu71shg.jl:41\n  Expression: candidate([-1, -2, -3, 10, -5])\
    \ == -6\n   Evaluated: -1 == -6\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwsu71shg.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwsu71shg.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpwsu71shg.jl:42\n  Expression: candidate([100, -1, -2, -3,\
    \ 10, -5]) == -6\n   Evaluated: 99 == -6\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpwsu71shg.jl:42 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpwsu71shg.jl:35\ntest set: Test Failed at /tmp/tmpwsu71shg.jl:43\n\
    \  Expression: candidate([10, 11, 13, 8, 3, 4]) == 3\n   Evaluated: 49 == 3\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined"
  timestamp: 1660009423
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    # Your code goes\
    \ here\n    return nums.sum\nend\n</cell>\n<text>\nProblem 8 (60 pts)\nA common\
    \ application of $k$-means is to determine the optimal number of clusters for\
    \ your dataset.  Here are a few things you might want to try, in decreasing order\
    \ of difficulty:\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\
    \t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) ==\
    \ -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptblv7qlb.jl:14\nin expression starting at\
    \ /tmp/tmptblv7qlb.jl:14\n"
  stdout: ''
  timestamp: 1660009422
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    if nums == []\
    \ \n        return 0 \n    \n    left = minSubArraySum(nums[1:end-1]) \n    right\
    \ = minSubArraySum(nums[2:end]) - nums[1] - nums[2] + nums[1] - nums[3]\n    return\
    \ left if left <= right else right \nend \n</cell>\n<code language=julia-1.6>\n\
    # Solution 2\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t\
    @test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) ==\
    \ -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"if\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpsaty2ecy.jl:16\nin expression starting at /tmp/tmpsaty2ecy.jl:16\n"
  stdout: ''
  timestamp: 1660009422
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    minimum_so_far\
    \ = 0\n    for n in nums\n        minimum_so_far += n \n    end\n    return minimum_so_far\n\
    end\n</cell>\n<code language=julia-1.6>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1,\
    \ -2, -3]) == -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0_cw_eg9.jl:17\nin expression starting at\
    \ /tmp/tmp0_cw_eg9.jl:17\n"
  stdout: ''
  timestamp: 1660009422
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    sum = 0\n\
    \    \n    for x in nums\n        \n        sum += x\n    end\n    \n    return\
    \ sum\nend\n</cell>\n<code language=julia-1.5>\n# %load solutions/minSubArraySum.jl\n\
    using Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8mfbg8c3.jl:21\nin expression starting at\
    \ /tmp/tmp8mfbg8c3.jl:21\n"
  stdout: ''
  timestamp: 1660009422
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    min = length(nums)\n\
    \    for i in 1:length(nums)\n        min = min if nums[i] == 0 else min(nums[i],\
    \ min - nums[i])\n    end\n    min\nend\n</cell>\n<text>\nQ2. What is the minimum\
    \ sum of a non-empty sub-vector of nums?\nExample 1:\nInput: nums = [2,4,1,2,4]\n\
    Output: 1\nExplanation: The minimal sum is 1+2+4 = 6\nExample 2:\nInput: nums\
    \ = [-1,-2,-3]\nOutput: -6\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\
    \t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) ==\
    \ -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmpd3m1nxtz.jl:12 expected \"\
    end\", got \"if\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpd3m1nxtz.jl:13\n\
    in expression starting at /tmp/tmpd3m1nxtz.jl:13\n"
  stdout: ''
  timestamp: 1660009422
- exit_code: 1
  program: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64 \n    minSubArraySum\
    \ = minimum(sum(nums))\n    for i=1:length(nums)\n        if nums[i]-minSubArraySum\
    \ > 0 \n            minSubArraySum = nums[i]\n        end\n    end\n    return\
    \ minSubArraySum\nend\n</cell>\n<text>\nRecursive Solution\nusing Test\n\n@testset\
    \ begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1, 2, 4])\
    \ == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1, -2, -3,\
    \ 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfq0wzxhg.jl:19\nin expression starting at\
    \ /tmp/tmpfq0wzxhg.jl:19\n"
  stdout: ''
  timestamp: 1660009422
