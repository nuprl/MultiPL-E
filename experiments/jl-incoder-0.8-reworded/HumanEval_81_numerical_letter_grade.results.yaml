language: jl
name: HumanEval_81_numerical_letter_grade
results:
- exit_code: 1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a vector of GPAs for some students and you have to write\
    \ \n    a function that can output a vector of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grades_copy = grades\n    gpas = grades_copy |> map(x->(x<4.0 ? x*4 :\
    \ (x>3.7 ? x : 3.7-x)) ,grades_copy)\n    grades_copy = grades_copy |> map(x->(x<3.0\
    \ ? x*3 : (x>3.3 ? x : 3.3-x)) ,grades_copy)\n    grades_copy = grades_copy |>\
    \ map(x->(x<2.0 ? x*2 : (x>2.7 ? x : 2.7-x)) ,grades_copy)\n    grades_copy =\
    \ grades_copy |> map(x->(x<2.3 ? x*2 : (x>2.3 ? x : 2.3-x)) ,grades_copy)\n  \
    \  grades_copy = grades_copy |> map(x->(x<2.0 ? x*2 : (x>1.7  ? x : 1.7-x)) ,grades_copy)\n\
    \    grades_copy = grades_copy |> map(x->(x<1.7 ? x*2 : (x > 1.0 ? x : 1.0-x))\
    \ ,grades_copy)\n    grades_copy = grades_copy |> map(x->(x<1.3 ? x*2 : (x>1.3\
    \ ? x : 1.3-x)) ,grades_copy)\n    grades_copy = grades_copy |> map(x->(x<1.0\
    \ ? x*2 : (x>0.7  ? x : 0.7-x)) ,grades_copy)\n    grades_copy = grades_copy |>\
    \ map(x->(x<0.7 ? x*2 : (x > 0.0  ? x : 0.0-x)) ,grades_copy)\n    grades_copy\
    \ = grades_copy |> map(x->(x<0.0 ? x*2 : (x > 0.0  ? x : 0.0-x)) ,grades_copy)\n\
    \    grades_copy = grades_copy |> map(x->(x<0.0 ? x*2 : (x > 0.0  ? x : 0.0-x))\
    \ ,grades_copy)\n    grades_copy = grades_copy |> map(x->(x<0.0 ? x*2 : (x > 0.0\
    \  ? x : 0.0-x)) ,grades_copy)\n    grades_copy = grades_copy |> map(x->(x<0.0\
    \ ? x*2 : (x > 0.0  ? x : 0.0-x)) ,grades_copy)\n    grades_copy = grades_copy\
    \ |> map(x->(x<0.0 ? x*2 : (x > 0.0  ? x : 0.0-x)) ,grades_copy)\n    grades_copy\
    \ = grades_copy |> map(x->(x<0.0 ? x*2 : (x > 0.0  ? x : 0.0-x)) ,grades_copy\n\
    using Test\n\n@testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp131ghnbh.jl:43\nin expression starting at\
    \ /tmp/tmp131ghnbh.jl:43\n"
  stdout: ''
  timestamp: 1660012017
- exit_code: 1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a vector of GPAs for some students and you have to write\
    \ \n    a function that can output a vector of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    \"\"\"\n    Grades an array of grades using the table of letter grades\n\
    \    \"\"\"\n    grades.sort()\n    grade_vector = zeros(length(grades)-1) \n\
    \    for grade in grades\n        grade_vector[grades.index(grade)] = grade_equation[grade\
    \ > 0]\n    end\n    grade_vector\nend\n</cell>\n<text>\nThe previous function\
    \ grade_equation was taken from Project Euler.  We can use it to grade a bunch\
    \ of things!\nusing Test\n\n@testset begin\n\ncandidate = numerical_letter_grade;\n\
    \t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"\
    A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5]) == [\"\
    D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5,\
    \ 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpm4g7a11h.jl:37\nin expression starting at\
    \ /tmp/tmpm4g7a11h.jl:37\n"
  stdout: ''
  timestamp: 1660012018
- exit_code: 1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a vector of GPAs for some students and you have to write\
    \ \n    a function that can output a vector of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n\"\"\"\nTakes vector of GPAs and outputs a vector with letter grades.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpf5ut2pmz.jl:1\nin expression starting at /tmp/tmpf5ut2pmz.jl:1\n"
  stdout: ''
  timestamp: 1660012017
- exit_code: 1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a vector of GPAs for some students and you have to write\
    \ \n    a function that can output a vector of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n\"\"\"This function is to be used to give the grade of students.\nIt returns\
    \ vector that has the letter grades for every student. \nThe grades and letter\
    \ grades are vectors.\n\"\"\"\n    #@assert grades[end]==0.0 \"The grades vector\
    \ does not have the final value 0.0\"\n    if grades[end]==0.0 return \"E\"\n\
    \    \n    if grades[1]<4.0 return \"A+\"\n    if grades[1]<3.7 return \"A\"\n\
    \    if grades[1]<3.3 return \"A-\"\n    if grades[1]<3.0 return \"B+\"\n    if\
    \ grades[1]<2.7 return \"B\"\n    if grades[1]<2.3 return \"B-\"\n    if grades[1]<2.0\
    \ return \"C+\"\n    if grades[1]<1.7 return \"C\"\n    if grades[1]<1.3 return\
    \ \"C-\"\n    if grades[1]<1.0 return \"D+\"\n    if grades[1]<0.7 return \"D\"\
    \n    if grades[1]<0.0 return \"D-\"\n    if grades[1]==0.0 return \"D\"\n   \
    \ return \"D+\"\nend\n</cell>\n<text>\nProblem 3\nWrite a function that returns\
    \ the average of the students in a vector. For example, the following vector has\
    \ three students\nusing Test\n\n@testset begin\n\ncandidate = numerical_letter_grade;\n\
    \t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"\
    A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5]) == [\"\
    D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5,\
    \ 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp84kxapbu.jl:49\nin expression starting at\
    \ /tmp/tmp84kxapbu.jl:49\n"
  stdout: ''
  timestamp: 1660012018
- exit_code: 1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a vector of GPAs for some students and you have to write\
    \ \n    a function that can output a vector of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n  \n  grades.sort()\n  grades = collect(grades)\n  \n  lettergrades = \"\"\
    \n  for grade in grades\n    \n    A = grade<3.5 ? \"A\"\n    B = grade<2.5 ?\
    \ \"B\"\n    C = grade<1.5 ? \"C\"\n    D = grade<0.5 ? \"D\"\n    E = \"E\"\n\
    \    \n    \n    lettergrades =  lettergrades + A+B+C+D+E\n  end\n  \n  lettergrades\
    \ = lettergrades[end-1:end]\n  \nend\n</cell>\n<code language=julia-1.0>\n@code_warntype\
    \ numerical_letter_grade([4.0, 3, 1.7, 2, 3.5])\n</cell>\n<code language=julia-1.0>\n\
    numerical_letter_grade([4.0, 3, 1.7, 2, 3.5])\n</cell>\n<code language=julia-1.0>\n\
    using Test\n\n@testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: colon expected in \"?\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpc3jk19ac.jl:35\nin expression starting at\
    \ /tmp/tmpc3jk19ac.jl:35\n"
  stdout: ''
  timestamp: 1660012017
- exit_code: 1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a vector of GPAs for some students and you have to write\
    \ \n    a function that can output a vector of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grades.sort() \n    if grades[1] < 3.0 then \"B\" \n    else if grades[1]\
    \ > 3.0 && grades[2] < 3.0 then \"B-\" \n    else if grades[1] > 3.0 && grades[2]\
    \ > 3.0 then \"B-\" \n    else if grades[1] > 3.0 && grades[2] < 3.0 && grades[3]\
    \ < 3.0 then \"C-\" \n    else if grades[1] > 3.0 && grades[2] > 3.0 && grades[3]\
    \ > 3.0 then \"C-\" \n    else if grades[1] > 3.0 && grades[2] < 3.0 && grades[3]\
    \ > 3.0 then \"C-\" \n    else if grades[1] < 3.0 && grades[2] > 3.0 && grades[3]\
    \ < 3.0 then \"C\" \n    else if grades[1] > 3.0 && grades[2] > 3.0 && grades[3]\
    \ > 3.0 then \"C\" \n    else if grades[1] > 3.0 && grades[2] > 3.0 && grades[3]\
    \ < 3.0 then \"C\" \n    else if grades[1] < 3.0 && grades[2] < 3.0 && grades[3]\
    \ > 3.0 then \"C+\" \n    else if grades[1] < 3.0 && grades[2] < 3.0 && grades[3]\
    \ < 3.0 then \"C+\" \n    else if grades[1] < 3.0 && grades[2] < 3.0 then \"D+\"\
    \ \n    else if grades[1] < 3.0 && grades[2] > 3.0 then \"D+\" \n    else if grades[1]\
    \ > 3.0 then \"D+\" \n    else if grades[1] > 3.0 && grades[2] < 3.0 then \"D+\"\
    \ \n    else if grades[1] > 3.0 && grades[2] > 3.0 && grades[3] < 3.0 then \"\
    D+\" \n    else if grades[1] > 3.0 && grades[2] > 3.0 && grades[3] > 3.0 then\
    \ \"D+\" \n    else if grades[1] > 3.0 && grades[2] < 3.0 && grades[3] > 3.0 then\
    \ \"D+\" \n    else if grades[1] < 3.0 && grades[2] > 3.0 && grades[3] > 3.0 then\
    \ \"D-\" \n    else if grades[1] < 3.0 && grades[2] < 3.0 && grades[3] < 3.0 then\
    \ \"D-\" \n    else if grades[1] < 3.0 && grades[2] < 3.0 then \"D-\" \n    else\
    \ if grades[1] < 3.0 && grades[2] > 3.0 then \"D-\" \n    else if grades[1] >\
    \ 3.0 then \"D-\" \n    else if grades[1] > 3.0 && grades[2] < 3.0 then \"D-\"\
    \ \n\nusing Test\n\n@testset begin\n\ncandidate = numerical_letter_grade;\n\t\
    @test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"\
    ])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"\
    ])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7])\
    \ == [\"E\", \"D-\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"\"\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpa1g0nlly.jl:28\nin expression starting at /tmp/tmpa1g0nlly.jl:28\n"
  stdout: ''
  timestamp: 1660012017
- exit_code: 1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a vector of GPAs for some students and you have to write\
    \ \n    a function that can output a vector of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grades = sort(grades)\n    grades_sum = sum(grades)\n    if grades_sum\
    \ == 0\n        return [\"E\"]\n    end\n    if grades_sum < 2.0\n        return\
    \ [\"E\"]\n    end\n    grades_sum_inv = 1.0/grades_sum\n    grades_inv_sum =\
    \ sum(map(x -> grades_sum_inv*x, reverse(grades)))\n    if grades_inv_sum < 1.0\n\
    \        return [\"E\"]\n    end\n    \n    grades_inv_sum_inv = 1.0/grades_inv_sum\n\
    \    grades_inv_sum = sum(map(x -> grades_inv_sum_inv*x, reverse(grades)))\n \
    \   if grades_inv_sum < 1.0\n        return [\"E\"]\n    end\n    grades_inv_sum_inv\
    \ = 1.0/grades_inv_sum\n    grades_inv_sum = sum(map(x -> grades_inv_sum_inv*x,\
    \ reverse(grades)))\n    if grades_inv_sum < 1.0\n        return [\"E\"]\n   \
    \ end\nusing Test\n\n@testset begin\n\ncandidate = numerical_letter_grade;\n\t\
    @test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"\
    ])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"\
    ])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7])\
    \ == [\"E\", \"D-\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmppelh4th0.jl:26\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmppelh4th0.jl:1\n\
    in expression starting at /tmp/tmppelh4th0.jl:1\n"
  stdout: ''
  timestamp: 1660012017
- exit_code: 1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a vector of GPAs for some students and you have to write\
    \ \n    a function that can output a vector of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    \"\"\"Function calculates and outputs lettergrade vector given grades\n\
    \    \n    Arguments:\n        - grades(Vector): vector of student GPAs\n    \n\
    \    Returns:\n        - grades(Vector): vector of letter grades\n    \"\"\"\n\
    \    return map(lettergrade_function,grades)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0, 3, 1.7, 2, 3.5])\
    \ == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2]) == [\"\
    D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0]) == [\"\
    E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\"\
    , \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 6 errored,
    0 broken.

    in expression starting at /tmp/tmpq2buv3ma.jl:39

    '
  stdout: "test set: Error During Test at /tmp/tmpq2buv3ma.jl:42\n  Test threw exception\n\
    \  Expression: candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"\
    C\", \"A-\"]\n  UndefVarError: lettergrade_function not defined\n  Stacktrace:\n\
    \   [1] numerical_letter_grade(grades::Vector{Float64})\n     @ Main /tmp/tmpq2buv3ma.jl:35\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpq2buv3ma.jl:42 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpq2buv3ma.jl:41\ntest set:\
    \ Error During Test at /tmp/tmpq2buv3ma.jl:43\n  Test threw exception\n  Expression:\
    \ candidate([1.2]) == [\"D+\"]\n  UndefVarError: lettergrade_function not defined\n\
    \  Stacktrace:\n   [1] numerical_letter_grade(grades::Vector{Float64})\n     @\
    \ Main /tmp/tmpq2buv3ma.jl:35\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpq2buv3ma.jl:43 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpq2buv3ma.jl:41\ntest set:\
    \ Error During Test at /tmp/tmpq2buv3ma.jl:44\n  Test threw exception\n  Expression:\
    \ candidate([0.5]) == [\"D-\"]\n  UndefVarError: lettergrade_function not defined\n\
    \  Stacktrace:\n   [1] numerical_letter_grade(grades::Vector{Float64})\n     @\
    \ Main /tmp/tmpq2buv3ma.jl:35\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpq2buv3ma.jl:44 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpq2buv3ma.jl:41\ntest set:\
    \ Error During Test at /tmp/tmpq2buv3ma.jl:45\n  Test threw exception\n  Expression:\
    \ candidate([0.0]) == [\"E\"]\n  UndefVarError: lettergrade_function not defined\n\
    \  Stacktrace:\n   [1] numeric"
  timestamp: 1660012020
- exit_code: 1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a vector of GPAs for some students and you have to write\
    \ \n    a function that can output a vector of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    \"\"\"Returns a numerical grade for a vector of grades.\n    \"\"\"\n\
    \  grades_string = map(x -> letter_to_grade(x),\n  grade_equation(grades))\n \
    \ string_grades = String.(grades_string)\n  return(string_grades)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 6 errored,
    0 broken.

    in expression starting at /tmp/tmph1n8w9cy.jl:36

    '
  stdout: "test set: Error During Test at /tmp/tmph1n8w9cy.jl:39\n  Test threw exception\n\
    \  Expression: candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"\
    C\", \"A-\"]\n  UndefVarError: grade_equation not defined\n  Stacktrace:\n   [1]\
    \ numerical_letter_grade(grades::Vector{Float64})\n     @ Main /tmp/tmph1n8w9cy.jl:29\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmph1n8w9cy.jl:39 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmph1n8w9cy.jl:38\ntest set:\
    \ Error During Test at /tmp/tmph1n8w9cy.jl:40\n  Test threw exception\n  Expression:\
    \ candidate([1.2]) == [\"D+\"]\n  UndefVarError: grade_equation not defined\n\
    \  Stacktrace:\n   [1] numerical_letter_grade(grades::Vector{Float64})\n     @\
    \ Main /tmp/tmph1n8w9cy.jl:29\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmph1n8w9cy.jl:40 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmph1n8w9cy.jl:38\ntest set:\
    \ Error During Test at /tmp/tmph1n8w9cy.jl:41\n  Test threw exception\n  Expression:\
    \ candidate([0.5]) == [\"D-\"]\n  UndefVarError: grade_equation not defined\n\
    \  Stacktrace:\n   [1] numerical_letter_grade(grades::Vector{Float64})\n     @\
    \ Main /tmp/tmph1n8w9cy.jl:29\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmph1n8w9cy.jl:41 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmph1n8w9cy.jl:38\ntest set:\
    \ Error During Test at /tmp/tmph1n8w9cy.jl:42\n  Test threw exception\n  Expression:\
    \ candidate([0.0]) == [\"E\"]\n  UndefVarError: grade_equation not defined\n \
    \ Stacktrace:\n   [1] numerical_letter_grade(grades::"
  timestamp: 1660012020
- exit_code: 1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a vector of GPAs for some students and you have to write\
    \ \n    a function that can output a vector of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grades.sort()\n    grades = grades[2:end-1]\n    \n    # Calculate the\
    \ gpa for each student\n    gpa = grades.map(x => ((2.0/(1.0+x))^((grades.size\
    \ - x) / grades.size)) - 1.0)\n    \n    # Calculate the letter grade\n    grades\
    \ = grade_vector(gpa)\n    return grades\nend\nusing Test\n\n@testset begin\n\n\
    candidate = numerical_letter_grade;\n\t@test(candidate([4.0, 3, 1.7, 2, 3.5])\
    \ == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2]) == [\"\
    D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0]) == [\"\
    E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\"\
    , \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 6 errored,
    0 broken.

    in expression starting at /tmp/tmpl28gjayv.jl:39

    '
  stdout: "test set: Error During Test at /tmp/tmpl28gjayv.jl:42\n  Test threw exception\n\
    \  Expression: candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"\
    C\", \"A-\"]\n  type Array has no field sort\n  Stacktrace:\n   [1] getproperty\n\
    \     @ ./Base.jl:42 [inlined]\n   [2] numerical_letter_grade(grades::Vector{Float64})\n\
    \     @ Main /tmp/tmpl28gjayv.jl:27\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpl28gjayv.jl:42 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpl28gjayv.jl:41\ntest set:\
    \ Error During Test at /tmp/tmpl28gjayv.jl:43\n  Test threw exception\n  Expression:\
    \ candidate([1.2]) == [\"D+\"]\n  type Array has no field sort\n  Stacktrace:\n\
    \   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] numerical_letter_grade(grades::Vector{Float64})\n\
    \     @ Main /tmp/tmpl28gjayv.jl:27\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpl28gjayv.jl:43 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpl28gjayv.jl:41\ntest set:\
    \ Error During Test at /tmp/tmpl28gjayv.jl:44\n  Test threw exception\n  Expression:\
    \ candidate([0.5]) == [\"D-\"]\n  type Array has no field sort\n  Stacktrace:\n\
    \   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] numerical_letter_grade(grades::Vector{Float64})\n\
    \     @ Main /tmp/tmpl28gjayv.jl:27\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpl28gjayv.jl:44 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpl28gjayv.jl:41\ntest set:\
    \ Error During Test at /tmp/tmpl28gjayv.jl:45\n  Test threw exception\n  Expression:\
    \ candidate([0.0"
  timestamp: 1660012019
- exit_code: 1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a vector of GPAs for some students and you have to write\
    \ \n    a function that can output a vector of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n  \n    lettergrades = Vector{String}(undef, 0)\n    \n    # Write your code\n\
    \    for i in grades\n      \n        if i > 2.3\n          lettergrades[1] =\
    \ \"D+\"\n        else if i > 1.7\n          lettergrades[2] = \"C\"\n       \
    \ else if i > 1.1\n          lettergrades[3] = \"C-\"\n        else if i > 1.0\n\
    \          lettergrades[4] = \"B+\"\n        else if i > 0.7\n          lettergrades[5]\
    \ = \"B\"\n        else if i > 0.5\n          lettergrades[6] = \"B-\"\n     \
    \   else if i > 0.2\n          lettergrades[7] = \"A-\"\n        else if i > 0.0\n\
    \          lettergrades[8] = \"A+\"\n        else \n          lettergrades[1]\
    \ = \"D+\"\n          lettergrades[2] = \"C\"\n          lettergrades[3] = \"\
    C-\"\n          lettergrades[4] = \"B+\"\n          lettergrades[5] = \"B\"\n\
    \          lettergrades[6] = \"B-\"\n          lettergrades[7] = \"A-\"\n    \
    \      lettergrades[8] = \"A+\"\n          lettergrades[1] = \"D+\"\n        \
    \  lettergrades[2] = \"C\"\n          lettergrades[3] = \"C-\"\n          lettergrades[4]\
    \ = \"B+\"\n          lettergrades[5] = \"B\"\n          lettergrades[6] = \"\
    B-\"\n          lettergrades[7] = \"A-\"\n          lettergrades[8] = \"A+\"\n\
    \          \n        end\n    end\n    \n    return lettergrades\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpz0cqyvm1.jl:35\nin expression starting at\
    \ /tmp/tmpz0cqyvm1.jl:35\n"
  stdout: ''
  timestamp: 1660012017
- exit_code: 1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a vector of GPAs for some students and you have to write\
    \ \n    a function that can output a vector of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grade_array=[]\n    grades.sort()\n    sum_of_grades=0.0\n    i=grades.length-1\n\
    \    grade=grades[i]\n    while i>0\n        sum_of_grades+=(grade-grades[i-1])*(i-1)\n\
    \        i=i-1\n    end\n    sum_of_grades+=grade\n    \n    for grade in grades\n\
    \        grade_array.append((grade-grades[grades.length-1])*grades.length-1)\n\
    \    end\n    \n    for i=grades.length:-1:1\n        if grade_array[i]<=sum_of_grades\n\
    \            if grade_array[i]<sum_of_grades-grades[i]\n                grade_array[i]=sum_of_grades-grades[i]\n\
    \            else\n                grade_array[i]=sum_of_grades\n            end\n\
    \        end\n    end\n    \n    return grade_array\nend\n</cell>\n<code language=julia-1.0>\n\
    grade_equation([4.0, 3, 1.7, 2, 3.5])\n</cell>\n<code language=julia-1.0>\ngrade_equation([4.0,\
    \ 3, 1.7, 2, 3.5])\n</cell>\n<text>\nQuestion 10\nWrite a function called count_occurrences\
    \ that takes a vector of letters, an \ninteger, and a string and returns the number\
    \ of times each letter appears in a \nvector of letters using the following table:\n\
    \               Letter |      Occurrences\n               -----+------------------------------------------------------------------\n\
    \               A     |      3\n               B     |      1\n              \
    \ C     |      2\n               D     |      2\n               E     |      1\n\
    \               F     |      0\n               G     |      1\n              \
    \ H     |      2\n               I     |      3\n               J     |      1\n\
    \               K     |      1\n               L     |      2\n              \
    \ M     |      1\n               N     |      2\n               O     |      1\n\
    \               P     |      3\n               Q     |      1\n              \
    \ R     |      2\n               S     |      1\n               T     |      2\n\
    \               U     |      1\n               V     |      1\n              \
    \ W     |      1\n               X     |      1\n               Y     |      1\n\
    \               Z     |      2\n               --------+------------------------------------------------------------------\n\
    \               a      |      9\n               b      |      8\n            \
    \   c      |      8\n               d      |      7\n               e      | \
    \     6\n               f      |      6\n               g      |      5\n    \
    \           h      |      5\n               i      |      5\n               j\
    \      |      5\n               k      |      5\n               l      |     \
    \ 5\n               m      |      5\n               n      |      5\n        \
    \       \nusing Test\n\n@testset begin\n\ncandidate = numerical_letter_grade;\n\
    \t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"\
    A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5]) == [\"\
    D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5,\
    \ 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxrzs318d.jl:54\nin expression starting at\
    \ /tmp/tmpxrzs318d.jl:54\n"
  stdout: ''
  timestamp: 1660012017
- exit_code: 1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a vector of GPAs for some students and you have to write\
    \ \n    a function that can output a vector of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n\"\"\"\nThis function takes the vector of GPAs and returns a vector of letter\
    \ grades using the \ntable above.\n\"\"\"\ngrades = sort(grades)\ngrade_index\
    \ = Vector{Float64}()\ngrade_index[1] = grades[1]\ngrade_index[2] = grades[1]\n\
    grade_index[3] = grades[2]\ngrade_index[4] = grades[2]\ngrade_index[5] = grades[2]\n\
    grade_index[6] = grades[3]\ngrade_index[7] = grades[3]\ngrade_index[8] = grades[3]\n\
    grade_index[9] = grades[3]\ngrade_index[10] = grades[4]\ngrade_index[11] = grades[4]\n\
    grade_index[12] = grades[4]\ngrade_index[13] = grades[5]\ngrade_index[14] = grades[5]\n\
    grade_index[15] = grades[5]\ngrade_index[16] = grades[6]\ngrade_index[17] = grades[6]\n\
    grade_index[18] = grades[6]\ngrade_index[19] = grades[6]\ngrade_index[20] = grades[6]\n\
    grade_index[21] = grades[6]\ngrade_index[22] = grades[6]\ngrade_index[23] = grades[6]\n\
    grade_index[24] = grades[6]\ngrade_index[25] = grades[6]\ngrade_index[26] = grades[6]\n\
    grade_index[27] = grades[6]\ngrade_index[28] = grades[6]\ngrade_index[29] = grades[6]\n\
    grade_index[30] = grades[6]\ngrade_index[31] = grades[6]\ngrade_index[32] = grades[6]\n\
    grade_index[33] = grades[6]\ngrade_index[34] = grades[6]\ngrade_index[35] = grades[6]\n\
    grade_index[36] = grades[6]\ngrade_index[37] = grades[6]\ngrade_index[38] = grades[6]\n\
    grade_index[39] = grades[6]\ngrade_index[40] = grades[6]\ngrade_index[41] = grades[6]\n\
    grade_index[42] = grades[6]\ngrade_index[43] = grades[6]\ngrade_index[44] = grades[6]\n\
    grade_index[45] = grades[6]\ngrade_index[46] = grades[6]\ngrade_index[47] = grades[6]\n\
    grade_index[48] = grades[6]\ngrade_index[49] = grades[6]\ngrade_index[50] = grades[6]\n\
    grade_index[51] = grades[6]\ngrade_index[52] = grades[6]\ngrade_index[53] = grades[6]\n\
    grade_index[54] = grades[6]\ngrade_index[55] = grades[6]\ngrade_index[56] = grades[6]\n\
    grade_index\nusing Test\n\n@testset begin\n\ncandidate = numerical_letter_grade;\n\
    \t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"\
    A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5]) == [\"\
    D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5,\
    \ 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmps0q3fulu.jl:26\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmps0q3fulu.jl:1\n\
    in expression starting at /tmp/tmps0q3fulu.jl:1\n"
  stdout: ''
  timestamp: 1660012018
- exit_code: 1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a vector of GPAs for some students and you have to write\
    \ \n    a function that can output a vector of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    \"\"\"\n    The numerical letter grade is calculated using the grades\
    \ vector\n    \"\"\"\n</code>\n<|/ q tags=algorithm,julia,arrays dscore=0 |>\n\
    <| a dscore=1 |>\nThe idea is to first define the grade scale (which should only\
    \ contain one grade) and then use the grades vector to generate the letter grades.\
    \ Here is a function that does this (it only returns A+ if all grades are positive,\
    \ A- if at least one grade is negative, B+ if all grades are positive, B- if at\
    \ least one grade is negative, C+ if all grades are positive, C if at least one\
    \ grade is negative, D+ if all grades are positive, D if at least one grade is\
    \ negative, and E in the case when all grades are zero):\n<code>\nusing Test\n\
    \n@testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9m38j13z.jl:30\nin expression starting at\
    \ /tmp/tmp9m38j13z.jl:30\n"
  stdout: ''
  timestamp: 1660012018
- exit_code: 1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a vector of GPAs for some students and you have to write\
    \ \n    a function that can output a vector of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    #initialize an empty vector and append the grades \n    letterGrades =\
    \ Vector{String}(undef, 0)\n    letterGrades = letterGrades ++ ['A+','A','A-','B+','B','B-','C+','C','C-','D+','D','D-','F']\
    \ \nusing Test\n\n@testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: character literal contains multiple characters\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmpj6_1tv1o.jl:29\nin expression\
    \ starting at /tmp/tmpj6_1tv1o.jl:29\n"
  stdout: ''
  timestamp: 1660012017
- exit_code: 1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a vector of GPAs for some students and you have to write\
    \ \n    a function that can output a vector of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grades.sort()\n    gpa::Vector{Float64} = grades[end-2:end]\n    grades::Vector{String}\
    \ = \n        gpa.map(\n            x => \n                if x > 3.7 \n     \
    \           then \"A+\" \n                else \n                    if x > 3.3\
    \ \n                    then \"A \" \n                    else \n            \
    \            if x > 3.0 \n                        then \"B+\" \n             \
    \           else \n                            if x > 2.7 \n                 \
    \           then \"B\" \n                            else \n                 \
    \               if x > 2.3 \n                                then \"B-\" \n  \
    \                              else \n                                    if x\
    \ > 2.0 \n                                    then \"C+\" \n                 \
    \                   else \n                                        if x > 1.7\
    \ \n                                        then \"C\" \n                    \
    \                    else \n                                            if x >\
    \ 1.3 \n                                            then \"C-\" \n           \
    \                                 else \n                                    \
    \            if x > 1.0 \n                                                then\
    \ \"D+\" \n                                                else \n           \
    \                                         if x > 0.7 \n                      \
    \                              then \"D\" \n                                 \
    \                   else \n                                                  \
    \      if x > 0.0 \n                                                        then\
    \ \"D-\"\n                                                        else \"E\"\n\
    \    ) \n    grades[end]\nend\n</code>\n<|/ a tags=julia,arrays dscore=0 |>\n\
    <| a dscore=0 |>\nThe solution given by user261476 works fine, but the problem\
    \ is that if you have a vector such as:\n<code>\n[4.0, 3, 1.7, 2, 3.5]\n</code>\n\
    the solution is not going to work because it only finds the grades when the numbers\
    \ are sequential, in the example I provided it was 4.0 > 3.7 > 3.3 > 3.0 > 2.7\
    \ > 2.3 > 2.0 > 1.7 > 1.3 > 1.0 (this order doesn't matter)\nand 3.5 wasn't in\
    \ the vector so I added a check (x < 3.5)\nthe solution is \n<code>\nusing Test\n\
    \n@testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"\"\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpb5uk5vvm.jl:33\nin expression starting at /tmp/tmpb5uk5vvm.jl:33\n"
  stdout: ''
  timestamp: 1660012017
- exit_code: 1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a vector of GPAs for some students and you have to write\
    \ \n    a function that can output a vector of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    \n    grades.sort()\n    \n    grades.reverse()\n    \n    total = 0\n\
    \    \n    for grade in grades\n        total += grade\n        if total < 3.0\n\
    \            return \"F\"\n        elsif total >= 3.0 and total < 4.0\n      \
    \      return \"D\"\n        elseif total >= 4.0 and total < 4.5\n           \
    \ return \"C-\"\n        elseif total >= 4.5 and total < 5.0\n            return\
    \ \"B-\"\n        elseif total >= 5.0 and total < 5.5\n            return \"B+\"\
    \n        elseif total >= 5.5 and total < 6.0\n            return \"A+\"\n   \
    \     elseif total >= 6.0 and total < 6.5\n            return \"A\"\n        elseif\
    \ total >= 6.5 and total < 7.0\n            return \"A-\"\n        elseif total\
    \ >= 7.0\n            return \"F\"\n        end\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"total\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpmz0s0str.jl:38\nin expression starting at /tmp/tmpmz0s0str.jl:38\n"
  stdout: ''
  timestamp: 1660012017
- exit_code: 1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a vector of GPAs for some students and you have to write\
    \ \n    a function that can output a vector of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    \n    grades = sort(grades)\n    \n    if grades[1] < 3.7\n        grade_grade\
    \ = \"A+\"\n    else if grades[1] > 3.7 and grades[1] < 3.3\n        grade_grade\
    \ = \"A\"\n    elseif grades[1] > 3.3 and grades[1] < 3.0\n        grade_grade\
    \ = \"A-\"\n    else\n        grade_grade = \"B+\"\n    end\n    \n    grades[end]\
    \ = grades[end] > 2.7 and grades[end] < 2.3 ? \"B\" : \n                grades[end]\
    \ > 2.3 and grades[end] < 2.0 ? \"B-\" : \n                grades[end] > 1.7 and\
    \ grades[end] < 1.7 ? \"C\" : \n                grades[end] > 1.3 and grades[end]\
    \ < 1.3 ? \"C-\" : \n                grades[end] > 1.0 and grades[end] < 1.0 ?\
    \ \"D+\" : \n                grades[end] > 0.7 and grades[end] < 0.7 ? \"D\" :\
    \ \n                grades[end] > 0.0 and grades[end] < 0.0 ? \"D-\" : \n    \
    \            \"E\"\n        \n    return grade_grade\nend\n</cell>\n<text>\nAnd\
    \ now let's make our final program using our function!\nusing Test\n\n@testset\
    \ begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0, 3, 1.7,\
    \ 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgu2us2_o.jl:32\nin expression starting at\
    \ /tmp/tmpgu2us2_o.jl:32\n"
  stdout: ''
  timestamp: 1660012017
- exit_code: 1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a vector of GPAs for some students and you have to write\
    \ \n    a function that can output a vector of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    \"\"\"\n    Uses the student's GPAs and letter grade table to generate\
    \ the grades.\nusing Test\n\n@testset begin\n\ncandidate = numerical_letter_grade;\n\
    \t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"\
    A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5]) == [\"\
    D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5,\
    \ 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsdezd4kp.jl:1\nin expression starting at /tmp/tmpsdezd4kp.jl:1\n"
  stdout: ''
  timestamp: 1660012017
- exit_code: 1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a vector of GPAs for some students and you have to write\
    \ \n    a function that can output a vector of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grade = grades[2]\n    grade = grade * 2 - 1\n    grade = grade / (4.0\
    \ - 3.0)\n    \n    grade = grade * 7\n    grade = grade + 100\n    grade = grade\
    \ / 100\n    grade = round(grade)\n    \n    if grade < 0.0 or grade > 5.0 then\n\
    \        grade = grade\n    else\n        grade = grade + 3.0\n    end\n    \n\
    \    if grade < 0.0 then\n        grade = \"E\"\n    end\n    \n    if grade <\
    \ 5.0 then\n        grade = grade * 2\n        grade = \"D+\"\n    elseif grade\
    \ < 7.0 then\n        grade = \"C-\"\n    else\n        grade = \"B+\"\n    end\n\
    \    \n    if grade < 7.0 then\n        grade = \"B\"\n    elseif grade < 9.0\
    \ then\n        grade = \"B-\"\n    elseif grade < 11.0 then\n        grade =\
    \ \"C+\"\n    elseif grade < 12.0 then\n        grade = \"C\"\n    elseif grade\
    \ < 13.0 then\n        grade = \"C-\"\n    elseif grade < 14.0 then\n        grade\
    \ = \"D+\"\n    elseif grade < 15.0 then\n        grade = \"D\"\n    else\n  \
    \      grade = \"D-\"\n    end\n    \n    if grade > 15.0 then\n        grade\
    \ = \"D\"\n    elseif grade > 14.0 then\n        grade = \"D-\"\n    elseif grade\
    \ > 13.0 then\n        grade = \"D-\"\n    elseif grade > 12.0 then\n        grade\
    \ = \"D-\"\n    elseif grade > 11.0 then\n        grade = \"D-\"\n    elseif grade\
    \ > 9.0 then\n        grade = \"D-\"\n    elseif grade > 7.0 then\n        grade\
    \ = \"D-\"\n    elseif grade > 5.0 then\n        grade = \"D-\"\n    elseif grade\
    \ > 4.0 then\n        grade = \"D-\"\n    elseif grade > 2.0 then\n        grade\
    \ = \"D-\"\n    elseif grade < 0.0 then\n        grade = \"D-\"\n    else\n  \
    \      grade = \"D-\"\n    end\n    \n    return grade\nend\n    \n\"\"\"\n  \
    \  This function calculates the student's average grade, based on the grades given\
    \ for her semester.\nusing Test\n\n@testset begin\n\ncandidate = numerical_letter_grade;\n\
    \t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"\
    A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5]) == [\"\
    D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5,\
    \ 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"grade\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpcmper25n.jl:36\nin expression starting at /tmp/tmpcmper25n.jl:36\n"
  stdout: ''
  timestamp: 1660012017
- exit_code: 1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a vector of GPAs for some students and you have to write\
    \ \n    a function that can output a vector of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    \n    grades = sort(grades)\n    grade_vector = zeros(size(grades)[1]-6)\n\
    \    \n    grade_vector[6] = [\"E\"]\n    \n    for i=6 to size(grades)[1]\n \
    \       if grades[i] == grades[i-5]\n            grade_vector[i] = \"A+\"\n  \
    \      elseif grades[i] == grades[i-4]\n            grade_vector[i] = \"A\"\n\
    \        elseif grades[i] == grades[i-3]\n            grade_vector[i] = \"A-\"\
    \n        elseif grades[i] == grades[i-2]\n            grade_vector[i] = \"B+\"\
    \n        elseif grades[i] == grades[i-1]\n            grade_vector[i] = \"B\"\
    \n        elseif grades[i] == grades[i]\n            grade_vector[i] = \"B-\"\n\
    \        elseif grades[i] == grades[i+1]\n            grade_vector[i] = \"C+\"\
    \n        elseif grades[i] == grades[i+2]\n            grade_vector[i] = \"C\"\
    \n        elseif grades[i] == grades[i+3]\n            grade_vector[i] = \"C-\"\
    \n        elseif grades[i] == grades[i+4]\n            grade_vector[i] = \"D+\"\
    \n        elseif grades[i] == grades[i+5]\n            grade_vector[i] = \"D\"\
    \n        elseif grades[i] == grades[i+6]\n            grade_vector[i] = \"D-\"\
    \n        else\n            grade_vector[i] = \"E\"\n        end\n    end\n  \
    \  \n    grade_vector = sort(grade_vector)\n    \n    return grade_vector\nend\n\
    using Test\n\n@testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmpe2_wb1t4.jl:33 expected \"\
    end\", got \"size\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpe2_wb1t4.jl:33\n\
    in expression starting at /tmp/tmpe2_wb1t4.jl:33\n"
  stdout: ''
  timestamp: 1660012017
- exit_code: 1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a vector of GPAs for some students and you have to write\
    \ \n    a function that can output a vector of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grades_str=\"\"\n    for grade in grades\n        if grade >0 && grade\
    \ <= 3.0 \n            grades_str=grades_str*\"A+\"\n        elsif grade>3.0 \
    \ && grade <= 3.7\n            grades_str=grades_str*\"A\"\n        elsif grade>3.7\
    \ &&  grade <= 4.0 \n            grades_str=grades_str*\"B+\"\n        elsif grade>4.0\
    \ && grade <= 4.7\n            grades_str=grades_str*\"B\"\n        elsif grade>4.7\
    \ &&  grade <= 5.0\n            grades_str=grades_str*\"B-\"\n        elsif grade>5.0\
    \ && grade <= 5.7\n            grades_str=grades_str*\"B\"\n        elsif grade>5.7\
    \ &&  grade <= 6.0\n            grades_str=grades_str*\"B-\"\n        elsif grade>6.0\
    \ && grade <= 6.7\n            grades_str=grades_str*\"B\"\n        elsif grade>6.7\
    \ &&  grade <= 7.0\n            grades_str=grades_str*\"B-\"\n        elsif grade>7.0\
    \ && grade <= 7.7\n            grades_str=grades_str*\"B\"\n        elsif grade>7.7\
    \ &&  grade <= 8.0\n            grades_str=grades_str*\"B-\"\n        elsif grade>8.0\
    \ && grade <= 8.7\n            grades_str=grades_str*\"B\"\n        elsif grade>8.7\
    \ &&  grade <= 9.0\n            grades_str=grades_str*\"B-\"\n        elsif grade>9.0\
    \ && grade <= 9.7\n            grades_str=grades_str*\"B\"\n        elsif grade>9.7\
    \ &&  grade <= 10.0\n            grades_str=grades_str*\"B-\"\n        elsif grade>10.0\
    \ && grade <= 10.7\n            grades_str=grades_str*\"B\"\n        else\n  \
    \          grades_str=grades_str*\"E\"\n        end\n    end\n    grades_str\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"grade\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpwj7z1wo2.jl:31\nin expression starting at /tmp/tmpwj7z1wo2.jl:31\n"
  stdout: ''
  timestamp: 1660012017
- exit_code: 1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a vector of GPAs for some students and you have to write\
    \ \n    a function that can output a vector of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grade = sum(grades)\n    if grade >= 4.0\n        return [\"A+\"]\n  \
    \  else if grade > 3.7\n        return [\"A\"]\n    else if grade > 3.3\n    \
    \    return [\"A-\"]\n    else if grade > 3.0\n        return [\"B+\"]\n    else\
    \ if grade > 2.7\n        return [\"B\"]\n    else if grade > 2.3\n        return\
    \ [\"B-\"]\n    else if grade > 2.0\n        return [\"C+\"]\n    else if grade\
    \ > 1.7\n        return [\"C\"]\n    else if grade > 1.3\n        return [\"C-\"\
    ]\n    else if grade > 1.0\n        return [\"D+\"]\n    else if grade > 0.7\n\
    \        return [\"D\"]\n    else\n        return [\"D-\"]\n    end\nend\n   \
    \ \nusing Test\n\n@testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpu63ec0zx.jl:30\nin expression starting at\
    \ /tmp/tmpu63ec0zx.jl:30\n"
  stdout: ''
  timestamp: 1660012017
- exit_code: 1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a vector of GPAs for some students and you have to write\
    \ \n    a function that can output a vector of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grades = sort(grades) # Ascending order of grades\n    grade = grades[end]\n\
    \    if grade < 0\n        return [\"E\"]\n    if grade < 2.3\n        return\
    \ [\"C-\"]\n    if grade < 2.4\n        return [\"B\"]\n    if grade < 2.5\n \
    \       return [\"B-\"]\n    if grade < 2.7\n        return [\"B\"]\n    if grade\
    \ < 3.0\n        return [\"B+\"]\n    if grade < 3.3\n        return [\"B\"]\n\
    \    if grade < 3.4\n        return [\"B-\"]\n    if grade < 3.5\n        return\
    \ [\"B-\"]\n    if grade < 3.7\n        return [\"B\"]\n    if grade < 4.0\n \
    \       return [\"A+\"]\n    if grade < 4.3\n        return [\"A\"]\n    if grade\
    \ < 4.4\n        return [\"A-\"]\n    if grade < 4.5\n        return [\"A-\"]\n\
    \    if grade < 4.7\n        return [\"A\"]\n    if grade < 5.0\n        return\
    \ [\"A+\"]\n    if grade < 5.3\n        return [\"A\"]\n    if grade < 5.4\n \
    \       return [\"A-\"]\n    if grade < 5.5\n        return [\"A-\"]\n    if grade\
    \ < 5.7\n        return [\"A\"]\n    if grade < 6.0\n        return [\"A+\"]\n\
    \    if grade < 6.3\n        return [\"A\"]\n    if grade < 6.4\n        return\
    \ [\"A-\"]\n    if grade < 6.5\n        return [\"A-\"]\n    if grade < 6.7\n\
    \        return [\"A\"]\n    if grade < 7.0\n        return [\"A+\"]\n    if grade\
    \ < 7.3\n        return [\"A\"]\n    if grade < 7.4\n        return [\"A-\"]\n\
    \    if grade < 7.5\n        return [\"A-\"]\n    if grade < 7.7\n        return\
    \ [\"A\"]\n    if grade < 8.0\n        return [\"A+\"]\n    if grade < 8.3\n \
    \       return [\"A\"]\n    if grade < 8.4\n        return [\"A-\"]\n    if grade\
    \ < 8.5\n        return [\"A-\"]\n    if grade < 8.7\n        return [\"A\"]\n\
    \    if grade < 9.0\n        return [\"A+\"]\n    if grade < 9.3\n        return\
    \ [\"A\"]\n    if grade < 9.4\n        return [\"A-\"]\n    if grade < 9.5\n \
    \       return [\"A-\"]\n    if grade < 9.7\n        return [\"A\"]\n    if grade\
    \ < 10.0\n        return [\"A+\"]\n    if \nusing Test\n\n@testset begin\n\ncandidate\
    \ = numerical_letter_grade;\n\t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5])\
    \ == [\"D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing condition in \"if\" at /tmp/tmpuewqqq25.jl:111\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmpuewqqq25.jl:112\nin expression\
    \ starting at /tmp/tmpuewqqq25.jl:112\n"
  stdout: ''
  timestamp: 1660012019
- exit_code: 1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a vector of GPAs for some students and you have to write\
    \ \n    a function that can output a vector of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grades = sort(grades)\n    grades = grades[2:end]\n    grades = reverse(grades)\n\
    \    grades = grades[2:end]\n    grades = reverse(grades)\n    grades = grades[2:end]\n\
    \    grades = reverse(grades)\n    grades = grades[2:end]\n    grades = reverse(grades)\n\
    \    grades = grades[2:end]\n    grades = reverse(grades)\n    grades = grades[2:end]\n\
    \    grades = reverse(grades)\n    grades = grades[2:end]\n    grades = reverse(grades)\n\
    \    grades = grades[2:end]\n    grades = reverse(grades)\n    grades = grades[2:end]\n\
    \    grades = reverse(grades)\n    grades = grades[2:end]\n    grades = reverse(grades)\n\
    \    grades = grades[2:end]\n    grades = reverse(grades)\n    grades = grades[2:end]\n\
    \    grades = reverse(grades)\n    grades = grades[2:end]\n    grades = reverse(grades)\n\
    \    grades = grades[2:end]\n    grades = reverse(grades)\n    grades = grades[2:end]\n\
    \    grades = reverse(grades)\n    grades = grades[2:end]\n    grades = reverse(grades)\n\
    \    grades = grades[2:end]\n    grades = reverse(grades)\n    grades = grades[2:end]\n\
    \    grades = reverse(grades)\n    grades = grades[2:end]\n    grades = reverse(grades)\n\
    \    grades = grades[2:end]\n    grades = reverse(grades)\n    grades = grades[2:end]\n\
    \    grades = reverse(grades)\n    grades = grades[2:end]\n    grades = reverse(grades)\n\
    \    grades = grades[2:end]\n    grades = reverse(grades)\n    grades = grades[2:end]\n\
    \    grades = reverse(grades)\n    grades = grades[2:end]\n    grades = reverse(grades)\n\
    \    grades = grades[2:end]\n    grades = reverse(grades)\n    grades = grades[2:end]\n\
    \    grades = reverse(grades)\n    grades = grades[2:end]\n    grades = reverse(grades)\n\
    \    grades = grades[2:end]\n    grades = reverse(grades)\n    grades = grades[2:end]\n\
    \    grades = reverse(grades)\n    grades = grades[2:end]\n    grades = reverse(grades)\n\
    \    grades = grades[2:end]\n    grades = reverse(grades)\n    grades = grades[2:end]\n\
    \    grades = reverse(grades)\n    grades = grades[2:end]\n    grade\nusing Test\n\
    \n@testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp0r_p4d4a.jl:26\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp0r_p4d4a.jl:1\n\
    in expression starting at /tmp/tmp0r_p4d4a.jl:1\n"
  stdout: ''
  timestamp: 1660012019
- exit_code: 1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a vector of GPAs for some students and you have to write\
    \ \n    a function that can output a vector of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    \"\"\"\n    Calculates the letter grades for the given grades.\n    \n\
    \    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\n    \n    grades = [min(grades)-x, max(-grades)\
    \ + x for (grade in grades) x in grade_sign(x)]\n    \n    grades = [grade_sign(x),\
    \ grade] for (grade, grades) in zip(grades, zip(grades[1:], grades[2:]))]\n  \
    \  \n    return [[letter for (grade, letter) in zip(grades, grades_letters)] for\
    \ grades_letters in grades]\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ numerical_letter_grade;\n\t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5])\
    \ == [\"D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing separator in array expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxzm182w2.jl:35\nin expression starting at\
    \ /tmp/tmpxzm182w2.jl:35\n"
  stdout: ''
  timestamp: 1660012019
- exit_code: 1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a vector of GPAs for some students and you have to write\
    \ \n    a function that can output a vector of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    \"\"\"This function will calculate the GPA and letter grade for the vector\n\
    \    grades using the following table:\n             GPA       |    Letter grade\n\
    \              4.0                A+\n            > 3.7                A \n  \
    \          > 3.3                A- \n            > 3.0                B+\n   \
    \         > 2.7                B \n            > 2.3                B-\n     \
    \       > 2.0                C+\n            > 1.7                C\n        \
    \    > 1.3                C-\n            > 1.0                D+ \n         \
    \   > 0.7                D \n            > 0.0                D-\n           \
    \   0.0                E\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = numerical_letter_grade;\n\t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5])\
    \ == [\"D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpke_zgvsq.jl:26\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpke_zgvsq.jl:1\n\
    in expression starting at /tmp/tmpke_zgvsq.jl:1\n"
  stdout: ''
  timestamp: 1660012019
- exit_code: 1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a vector of GPAs for some students and you have to write\
    \ \n    a function that can output a vector of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grade = if grades <  0 then \"F\" else if grades > 0 then \"D\" else if\
    \ grades < 3.0 then \"C\" else if grades < 3.3 then \"B-\" else if grades < 3.7\
    \ then \"B-\" else if grades < 3.9 then \"A-\" else if grades < 4.0 then \"A+\"\
    \ else if grades < 4.3 then \"A-\" else if grades < 4.5 then \"A\" else if grades\
    \ < 4.7 then \"A+\" else if grades < 4.9 then \"A+\" else if grades < 5.0 then\
    \ \"A+\" else if grades < 5.3 then \"A+\" else if grades < 5.5 then \"A\" else\
    \ if grades < 5.7 then \"A\" else if grades < 5.9 then \"A\" else if grades <\
    \ 6.0 then \"A\" else if grades < 6.3 then \"A+\" else if grades < 6.5 then \"\
    A+\" else if grades < 6.7 then \"A+\" else if grades < 6.9 then \"A+\" else if\
    \ grades < 7.0 then \"A+\" else if grades < 7.3 then \"A+\" else if grades < 7.5\
    \ then \"A+\" else if grades < 7.7 then \"A+\" else if grades < 7.9 then \"A+\"\
    \ else if grades < 8.0 then \"A+\" else if grades < 8.3 then \"A+\" else if grades\
    \ < 8.5 then \"A+\" else if grades < 8.7 then \"A+\" else if grades < 8.9 then\
    \ \"A+\" else if grades < 9.0 then \"A+\" else if grades < 9.3 then \"A+\" else\
    \ if grades < 9.5 then \"A+\" else if grades < 9.7 then \"A+\" else if grades\
    \ < 9.9 then \"A+\" else if grades < 10.0 then \"A+\" else if grades < 10.3 then\
    \ \"A+\" else if grades < 10.5 then \"A+\" else if grades < 10.7 then \"A+\" else\
    \ if grades < 10.9 then \"A+\" else if grades < 11.0 then \"A+\" else if grades\
    \ < 11.3 then \"A+\" else if grades < 11.5 then \"A+\" else if grades < 11.7 then\
    \ \"A+\" else if grades < 11.9 then \"A+\" else if grades < 12.0 then \"A+\" else\
    \ if grades < 12.3 then \"A+\" else if grades < 12.5 then \"A+\" else if grades\
    \ < 12.7 then \"A+\" else if grades < 12.9 then \"A+\" else \nusing Test\n\n@testset\
    \ begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0, 3, 1.7,\
    \ 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"\"\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp7dxpahrh.jl:27\nin expression starting at /tmp/tmp7dxpahrh.jl:27\n"
  stdout: ''
  timestamp: 1660012019
- exit_code: -1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a vector of GPAs for some students and you have to write\
    \ \n    a function that can output a vector of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    if length(grades) < 4\n        return \"\"\n    else\n        grades =\
    \ grades[end:end]\n    end\n    for i in grades\n        if i == 0 \n        \
    \    grades[i] = \"D-\"\n        elseif i == 1\n            grades[i] = \"D+\"\
    \n        elseif i == 2\n            grades[i] = \"C\"\n        elseif i == 3\n\
    \            grades[i] = \"C+\"\n        elseif i == 4\n            grades[i]\
    \ = \"B\"\n        elseif i == 5\n            grades[i] = \"B+\"\n        elseif\
    \ i == 6\n            grades[i] = \"A\"\n        elseif i == 7\n            grades[i]\
    \ = \"A+\"\n        elseif i == 8\n            grades[i] = \"A\"\n        elseif\
    \ i == 9\n            grades[i] = \"A-\"\n        elseif i == 10\n           \
    \ grades[i] = \"A-\"\n        elseif i == 11\n            grades[i] = \"A-\"\n\
    \        else\n            grades[i] = \"D\"\n        end\n    end\n    return\
    \ grades\nend\nusing Test\n\n@testset begin\n\ncandidate = numerical_letter_grade;\n\
    \t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"\
    A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5]) == [\"\
    D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5,\
    \ 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  status: Timeout
  stderr: 'ERROR: '
  stdout: "test set: Error During Test at /tmp/tmp572t370a.jl:68\n  Test threw exception\n\
    \  Expression: candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"\
    C\", \"A-\"]\n  ArgumentError: invalid index: 3.5 of type Float64\n  Stacktrace:\n\
    \   [1] to_index(i::Float64)\n     @ Base ./indices.jl:300\n   [2] to_index(A::Vector{Float64},\
    \ i::Float64)\n     @ Base ./indices.jl:277\n   [3] numerical_letter_grade(grades::Vector{Float64})\n\
    \     @ Main /tmp/tmp572t370a.jl:0\n   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmp572t370a.jl:68 [inlined]\n\
    \   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmp572t370a.jl:67\ntest set:\
    \ Error During Test at /tmp/tmp572t370a.jl:69\n  Test threw exception\n  Expression:\
    \ candidate([1.2]) == [\"D+\"]\n  MethodError: Cannot `convert` an object of type\
    \ String to an object of type Vector{String}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::LinearAlgebra.Factorization) where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{Vector{String}}, !Matched::LibGit2.StrArrayStruct) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LibGit2/src/strarray.jl:13\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at ~/.conda/envs/polyglot/share/julia/base/array.jl:554\n\
    \    ...\n  Stacktrace:\n   [1] numerical_letter_grade(grades::Vector{Float64})\n\
    \     @ Main /tmp/tmp572t370a.jl:28\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp572t370a.jl:69 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp572t370a.jl:67\ntest set:\
    \ Error During Test at /tmp/tmp572t370a.jl:70\n  Test threw exception\n  Expression:\
    \ candidate([0.5]) == [\"D-\"]\n  MethodError: Cannot `convert`"
  timestamp: 1660012022
- exit_code: 1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a vector of GPAs for some students and you have to write\
    \ \n    a function that can output a vector of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n\"\"\"\nThis function returns an array of letters corresponding with a vector\
    \ of\ngrades.\nusing Test\n\n@testset begin\n\ncandidate = numerical_letter_grade;\n\
    \t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"\
    A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5]) == [\"\
    D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5,\
    \ 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpb35r3zoe.jl:1\nin expression starting at /tmp/tmpb35r3zoe.jl:1\n"
  stdout: ''
  timestamp: 1660012019
- exit_code: -1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a vector of GPAs for some students and you have to write\
    \ \n    a function that can output a vector of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grades = sort(grades)\n    if grades[1] > grades[2]\n        return [\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    end\n    if grades[1] > grades[3]\n \
    \       return [\"A\", \"B+\", \"B-\", \"C+\", \"C\"]\n    end\n    if grades[2]\
    \ > grades[3]\n        return [\"A\", \"B-\", \"B+\", \"C+\", \"C\"]\n    end\n\
    \    if grades[1] > grades[4]\n        return [\"A\", \"B\", \"B-\", \"C\", \"\
    C-\"]\n    end\n    if grades[2] > grades[4]\n        return [\"A\", \"B+\", \"\
    B-\", \"C+\", \"C\"]\n    end\n    if grades[3] > grades[4]\n        return [\"\
    A\", \"B-\", \"B+\", \"C+\", \"C\"]\n    end\n    return [\"D\", \"D+\", \"E\"\
    ]\nend\nusing Test\n\n@testset begin\n\ncandidate = numerical_letter_grade;\n\t\
    @test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"\
    ])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"\
    ])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7])\
    \ == [\"E\", \"D-\"])\nend\n"
  status: Timeout
  stderr: 'ERROR: LoadError: '
  stdout: "test set: Test Failed at /tmp/tmprpsyay1v.jl:53\n  Expression: candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n   Evaluated: [\"\
    D\", \"D+\", \"E\"] == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprpsyay1v.jl:53 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprpsyay1v.jl:52\ntest set: Error\
    \ During Test at /tmp/tmprpsyay1v.jl:54\n  Test threw exception\n  Expression:\
    \ candidate([1.2]) == [\"D+\"]\n  BoundsError: attempt to access 1-element Vector{Float64}\
    \ at index [2]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861 [inlined]\n\
    \   [2] numerical_letter_grade(grades::Vector{Float64})\n     @ Main /tmp/tmprpsyay1v.jl:28\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmprpsyay1v.jl:54 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmprpsyay1v.jl:52\ntest set:\
    \ Error During Test at /tmp/tmprpsyay1v.jl:55\n  Test threw exception\n  Expression:\
    \ candidate([0.5]) == [\"D-\"]\n  BoundsError: attempt to access 1-element Vector{Float64}\
    \ at index [2]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861 [inlined]\n\
    \   [2] numerical_letter_grade(grades::Vector{Float64})\n     @ Main /tmp/tmprpsyay1v.jl:28\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmprpsyay1v.jl:55 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmprpsyay1v.jl:52\ntest set:\
    \ Error During Test at /tmp/tmprpsyay1v.jl:56\n  Test threw exception\n  Expression:\
    \ candidate([0.0]) == [\"E\"]\n  BoundsError: attempt to access 1-element Vector{Float64}\
    \ at "
  timestamp: 1660012022
- exit_code: 1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a vector of GPAs for some students and you have to write\
    \ \n    a function that can output a vector of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    \"\"\"\n    Numerical letter grades using a formula from \n    https://en.wikipedia.org/wiki/Letter_grade#Numerical_grades\n\
    \    \"\"\"\n    \n    if grades.length==0\n        return \"\"\n    \n    letter_grades=[]\n\
    \    \n    for i in grades\n        \n        if i==0\n            letter_grades.push('D')\n\
    \        \n        elif (i>=0) && (i<=2)\n            letter_grades.push('A+')\n\
    \        \n        elif (i>=3) && (i<=5)\n            letter_grades.push('A')\n\
    \        \n        elif (i>=6) && (i<=8)\n            letter_grades.push('A-')\n\
    \        \n        elif (i>=9) && (i<=11)\n            letter_grades.push('B+')\n\
    \        \n        elif (i>=12) && (i<=13)\n            letter_grades.push('B')\n\
    \        \n        elif (i>=14) && (i<=16)\n            letter_grades.push('B-')\n\
    \        \n        elif (i>=17) && (i<=19)\n            letter_grades.push('C+')\n\
    \        \n        elif (i>=20) && (i<=22)\n            letter_grades.push('C')\n\
    \        \n        elif (i>=23) && (i<=25)\n            letter_grades.push('C-')\n\
    \        \n        elif (i>=26) && (i<=29)\n            letter_grades.push('D+')\n\
    \        \n        elif (i>=30) && (i<=34)\n            letter_grades.push('D')\n\
    \        \n        elif (i>=35) && (i<=39)\n            letter_grades.push('D-')\n\
    \        \n        else\n            letter_grades.push('E')\n        end\n  \
    \      \n    end\n    \n    return letter_grades\n    \nend\n</cell>\n<cell>\n\
    ## TESTING THE FUNCTIONS BELOW ##\nusing Test\n\n@testset begin\n\ncandidate =\
    \ numerical_letter_grade;\n\t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5])\
    \ == [\"D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: space before \"(\" not allowed in \"elif (\"\
    \ at /tmp/tmp2o25pvpu.jl:42\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp2o25pvpu.jl:42\n\
    in expression starting at /tmp/tmp2o25pvpu.jl:42\n"
  stdout: ''
  timestamp: 1660012019
- exit_code: 1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a vector of GPAs for some students and you have to write\
    \ \n    a function that can output a vector of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    \nusing Test\n\n@testset begin\n\ncandidate = numerical_letter_grade;\n\
    \t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"\
    A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5]) == [\"\
    D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5,\
    \ 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxmlbl30b.jl:26\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxmlbl30b.jl:1\n\
    in expression starting at /tmp/tmpxmlbl30b.jl:1\n"
  stdout: ''
  timestamp: 1660012019
- exit_code: 1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a vector of GPAs for some students and you have to write\
    \ \n    a function that can output a vector of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    \"\"\"\n    A function that calculates the letter grade for all the given\
    \ GPAs.\n    The function will output a vector of the letter grades for the given\
    \ vector\n    of GPAs.\nusing Test\n\n@testset begin\n\ncandidate = numerical_letter_grade;\n\
    \t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"\
    A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5]) == [\"\
    D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5,\
    \ 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvmh4grsn.jl:1\nin expression starting at /tmp/tmpvmh4grsn.jl:1\n"
  stdout: ''
  timestamp: 1660012019
- exit_code: 1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a vector of GPAs for some students and you have to write\
    \ \n    a function that can output a vector of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    return [\"A+\", \"A\", \"A-\", \"B+\", \"B\", \"B-\", \"C+\", \"C\", \"\
    C-\", \"D+\", \"D\", \"D-\", \"E\"]\nend\n</cell>\n<text>\nQuestion 4\nWhat happens\
    \ to the grade for students who are on the first semester but not in the\nsecond\
    \ semester?\nusing Test\n\n@testset begin\n\ncandidate = numerical_letter_grade;\n\
    \t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"\
    A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5]) == [\"\
    D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5,\
    \ 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpeemnyq7t.jl:29\nin expression starting at\
    \ /tmp/tmpeemnyq7t.jl:29\n"
  stdout: ''
  timestamp: 1660012019
- exit_code: -1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a vector of GPAs for some students and you have to write\
    \ \n    a function that can output a vector of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grades = sort(grades)\n    if grades[1] < 4.0 \n        letter_grade =\
    \ \"A\"\n    elseif grades[1] < 3.7\n        letter_grade = \"A-\"\n    elseif\
    \ grades[1] < 3.3\n        letter_grade = \"B+\"\n    elseif grades[1] < 3.0\n\
    \        letter_grade = \"B\"\n    elseif grades[1] < 2.7\n        letter_grade\
    \ = \"B-\"\n    elseif grades[1] < 2.3\n        letter_grade = \"B+\"\n    elseif\
    \ grades[1] < 2.0\n        letter_grade = \"C+\"\n    elseif grades[1] < 1.7\n\
    \        letter_grade = \"C\"\n    elseif grades[1] < 1.3\n        letter_grade\
    \ = \"C-\"\n    elseif grades[1] < 1.0\n        letter_grade = \"D+\"\n    elseif\
    \ grades[1] < 0.7\n        letter_grade = \"D\"\n    elseif grades[1] < 0.0\n\
    \        letter_grade = \"D-\"\n    else\n        letter_grade = \"E\"\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  status: Timeout
  stderr: 'ERROR: LoadError: '
  stdout: "test set: Error During Test at /tmp/tmpg5k_2g4e.jl:61\n  Test threw exception\n\
    \  Expression: candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"\
    C\", \"A-\"]\n  MethodError: Cannot `convert` an object of type String to an object\
    \ of type Vector{String}\n  Closest candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{Vector{String}}, !Matched::LibGit2.StrArrayStruct) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LibGit2/src/strarray.jl:13\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at ~/.conda/envs/polyglot/share/julia/base/array.jl:554\n\
    \    ...\n  Stacktrace:\n   [1] numerical_letter_grade(grades::Vector{Float64})\n\
    \     @ Main /tmp/tmpg5k_2g4e.jl:29\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpg5k_2g4e.jl:61 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpg5k_2g4e.jl:60\ntest set:\
    \ Error During Test at /tmp/tmpg5k_2g4e.jl:62\n  Test threw exception\n  Expression:\
    \ candidate([1.2]) == [\"D+\"]\n  MethodError: Cannot `convert` an object of type\
    \ String to an object of type Vector{String}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::LinearAlgebra.Factorization) where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{Vector{String}}, !Matched::LibGit2.StrArrayStruct) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LibGit2/src/strarray.jl:13\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at ~/.conda/envs/polyglot/share/julia/base/array.jl:554\n\
    \    ...\n  Stacktrace:\n   [1] numerical_letter_grade(grades::Vector{Float64})\n\
    \     @ Main /tmp/tmpg5k_2g4e.jl:29\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [in"
  timestamp: 1660012023
- exit_code: 1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a vector of GPAs for some students and you have to write\
    \ \n    a function that can output a vector of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n        grades = [round(x, 1) for x in grades]\n        grades.sort()\n  \
    \      grades = grades[2: (end - 1)]\n        grades = grades[2:end]\n       \
    \ grades = grades[1 : end - 1]\n        grades = grades.map(x->\"A+\" if x > 3.7\
    \ else\n                            \"A\" if x > 3.3 else\n                  \
    \          \"A-\" if x > 3 else\n                            \"B+\" if x > 2.7\
    \ else\n                            \"B\" if x > 2.3 else\n                  \
    \          \"B-\" if x > 2 else\n                            \"C+\" if x > 1.7\
    \ else\n                            \"C\" if x > 1.3 else\n                  \
    \          \"C-\" if x > 1 else\n                            \"D+\" if x > 0.7\
    \ else\n                            \"D\" if x > 0 else\n                    \
    \        \"D-\" if x < 0 else\n                            \"E\")\nend\n</cell>\n\
    <text>\nProblem 7\nusing Test\n\n@testset begin\n\ncandidate = numerical_letter_grade;\n\
    \t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"\
    A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5]) == [\"\
    D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5,\
    \ 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4d4fawfj.jl:32\nin expression starting at\
    \ /tmp/tmp4d4fawfj.jl:32\n"
  stdout: ''
  timestamp: 1660012019
- exit_code: 1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a vector of GPAs for some students and you have to write\
    \ \n    a function that can output a vector of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    \"\"\"Function that takes a vector containing grades and returns a vector\
    \ \n    of letter grades\"\"\"\nusing Test\n\n@testset begin\n\ncandidate = numerical_letter_grade;\n\
    \t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"\
    A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5]) == [\"\
    D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5,\
    \ 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpp2yj_stl.jl:26\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpp2yj_stl.jl:1\n\
    in expression starting at /tmp/tmpp2yj_stl.jl:1\n"
  stdout: ''
  timestamp: 1660012019
- exit_code: 1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a vector of GPAs for some students and you have to write\
    \ \n    a function that can output a vector of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    #your code goes here\nend\n</cell>\n<text>\nExercise 4\nComplete the function\
    \ numerical_grade_equation\nIt should return a list of strings representing the\
    \ grades in the order given in Example 2.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = numerical_letter_grade;\n\t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5])\
    \ == [\"D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpupul4fy2.jl:29\nin expression starting at\
    \ /tmp/tmpupul4fy2.jl:29\n"
  stdout: ''
  timestamp: 1660012019
- exit_code: 1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a vector of GPAs for some students and you have to write\
    \ \n    a function that can output a vector of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grades.sort()\n    grades.reverse()\n    \n    ans=\"\"\n    grade = grades[1]\n\
    \    for i in grades\n        if grade < i && grade !=0\n            grade = i\n\
    \        else\n            ans=ans + chr(((grade - i) % 26) + 65) + \", \"\n \
    \           grade = i\n        end\n    end\n    if grade != 0\n        ans=ans\
    \ + chr(((grade - grades[1]) % 26) + 65) + \", \"\n    end\n    \n    return ans[2:end]\n\
    end\n</cell>\n<code language=julia-1.5>\ngrade_equation([4.0, 3, 1.7, 2, 3.5])\n\
    </cell>\n<text>\n2.5 Write a function that takes two vectors of grades and outputs\
    \ the grade\n    equation using the formula above. Remember the formula above\
    \ is\n    based on the GPA from previous weeks.\n    Example:\n    >>> grades_equation([4.0,\
    \ 3, 1.7, 2, 3.5])\n    > A + B + C + C- + D+ + D- + E\n    \n    \n    Arguments:\n\
    \    - grades(a vector): a vector of GPAs for some students\n    - lettergrades(a\
    \ vector): a vector of letter grades for some students\n    \n    \n    \n   \
    \ Example:\n    >>> grades_equation([4.0, 3, 1.7, 2, 3.5])\n    > A + B + C +\
    \ C- + D+ + D- + E\n    \n    \n    Arguments:\n    - grades(a vector): a vector\
    \ of GPAs for some students\n    - lettergrades(a vector): a vector of letter\
    \ grades for some students\n    \n    \n    \n    Example:\n    >>> grades_equation([4.0,\
    \ 3, 1.7, 2, 3.5])\n    > A + B + C + C- + D+ + D- + E\n    \n    \n    Arguments:\n\
    \    - grades(a vector): a vector of GPAs for some students\n    - lettergrades(a\
    \ vector): a vector of letter grades for some students\n    \n    \n    \n   \
    \ Example:\n    >>> grades_equation([4.0, 3, 1.7, 2, 3.5])\n    > A + B + C +\
    \ C- + D+ + D- + E\n    \n    \n    Arguments:\n    - grades(a vector): a vector\
    \ of GPAs for some students\n    - lettergrades(a vector): a vector of letter\
    \ grades for some students\n    \n    \n    \n    Example:\n    >>> grades_equation([4.0,\
    \ 3, 1.7, 2, 3.5])\n\nusing Test\n\n@testset begin\n\ncandidate = numerical_letter_grade;\n\
    \t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"\
    A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5]) == [\"\
    D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5,\
    \ 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpffop2l1q.jl:46\nin expression starting at\
    \ /tmp/tmpffop2l1q.jl:46\n"
  stdout: ''
  timestamp: 1660012019
- exit_code: 1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a vector of GPAs for some students and you have to write\
    \ \n    a function that can output a vector of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grades  = [g for g in grades if g > 0.0]\n    \n    grades = sort(grades)\n\
    \    \n    grades_length = len(grades)\n    \n    if grades_length <= 1 \n   \
    \     return [\"D-\"]\n    \n    \n    if grades_length > 1 \n        \n     \
    \   sum = 0.0\n        \n        for i = 1: grades_length do\n            sum\
    \ += grades[i]\n        end\n        \n        if sum > 4.0 \n            grades_length\
    \ = grades_length + 1\n        end\n        \n    end\n    \n    grades_length\n\
    \    \n    grades_index = 1:grades_length\n    \n    grades_index[(grades > grades[grades_length])\
    \ / 2] = grades_index[grades_length - 1]\n    \n    grades_index[(grades < grades[grades_length])\
    \ / 2] = grades_index[1]\n    \n    if grades_length < 2 \n        return [\"\
    D-\"]\n    elseif grades_length > 2 \n        \n        grades_index[grades_length]\
    \ = grades_index[1]\n        \n        grades_index[grades_length - 1] = (grades[grades_length\
    \ - 1] - grades[1])/grades[1]\n        \n        grades_index[1] = grades_index[grades_length\
    \ - 2]\n        \n        grades_index\n        \n        grades_length = grades_length\
    \ - 2\n        \n        grades_index = grades_index[(grades > grades[grades_length])\
    \ / 2]\n        \n        grades_index = (grades_length - grades_index)/grades_length\n\
    \        \n        grades_index\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    # using Pkg; Pkg.add(\"DataFrames\")\n</cell>\n<code language=julia-1.5>\n# using\
    \ DataFrames\n</cell>\n<code language=julia-1.5>\n# using Statistics\n</cell>\n\
    <code language=julia-1.5>\n# using Pkg\n</cell>\n<code language=julia-1.5>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid \"do\" syntax\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpg42vvt4v.jl:41\nin expression starting at /tmp/tmpg42vvt4v.jl:41\n"
  stdout: ''
  timestamp: 1660012019
- exit_code: 1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a vector of GPAs for some students and you have to write\
    \ \n    a function that can output a vector of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n      \n    grades_sorted = sort(grades)\n    grades_sorted.reverse()\n  \
    \  grades_sorted.reverse()\n    grades_sorted.reverse()\n    grades_sorted.reverse()\n\
    \    grades_sorted.reverse()\n    grades_sorted.reverse()\n    grades_sorted.reverse()\n\
    \    grades_sorted.reverse()\n    grades_sorted.reverse()\n    grades_sorted.reverse()\n\
    \    grades_sorted.reverse()\n    grades_sorted.reverse()\n    grades_sorted.reverse()\n\
    \    grades_sorted.reverse()\n    grades_sorted.reverse()\n    grades_sorted.reverse()\n\
    \    grades_sorted.reverse()\n    grades_sorted.reverse()\n    grades_sorted.reverse()\n\
    \    grades_sorted.reverse()\n    grades_sorted.reverse()\n    grades_sorted.reverse()\n\
    \    grades_sorted.reverse()\n    grades_sorted.reverse()\n    grades_sorted.reverse()\n\
    \    grades_sorted.reverse()\n    grades_sorted.reverse()\n    grades_sorted.reverse()\n\
    \    grades_sorted.reverse()\n    grades_sorted.reverse()\n    grades_sorted.reverse()\n\
    \    grades_sorted.reverse()\n    grades_sorted.reverse()\n    grades_sorted.reverse()\n\
    \    grades_sorted.reverse()\n    grades_sorted.reverse()\n    grades_sorted.reverse()\n\
    \    grades_sorted.reverse()\n    grades_sorted.reverse()\n    grades_sorted.reverse()\n\
    \    grades_sorted.reverse()\n    grades_sorted.reverse()\n    grades_sorted.reverse()\n\
    \    grades_sorted.reverse()\n    grades_sorted.reverse()\n    grades_sorted.reverse()\n\
    \    grades_sorted.reverse()\n    grades_sorted.reverse()\n    grades_sorted.reverse()\n\
    \    grades_sorted.reverse()\n    grades_sorted.reverse()\n    grades_sorted.reverse()\n\
    \    grades_sorted.reverse()\n    grades_sorted.reverse()\n    grades_sorted.reverse()\n\
    \    grades_sorted.reverse()\n    grades_sorted.reverse()\n    grades_sorted.reverse()\n\
    \    grades_sorted.reverse()\n    grades_sorted.reverse()\n    grades_sorted.reverse()\n\
    \    grades_sorted.reverse()\n    grades_sorted.\nusing Test\n\n@testset begin\n\
    \ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0, 3, 1.7, 2, 3.5])\
    \ == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2]) == [\"\
    D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0]) == [\"\
    E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\"\
    , \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"function\" at /tmp/tmpmaxq1jow.jl:26 expected\
    \ \"end\", got \"Test\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpmaxq1jow.jl:92\n\
    in expression starting at /tmp/tmpmaxq1jow.jl:92\n"
  stdout: ''
  timestamp: 1660012019
- exit_code: 1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a vector of GPAs for some students and you have to write\
    \ \n    a function that can output a vector of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    \n    letter_grades = []\n    \n    for grade in grades\n        if grade\
    \ > 0.0\n            letter_grade = string(\"A+\",1)\n            \n         \
    \   if grade > 3.7\n                letter_grade = string(\"A\",1)\n         \
    \   end\nusing Test\n\n@testset begin\n\ncandidate = numerical_letter_grade;\n\
    \t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"\
    A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5]) == [\"\
    D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5,\
    \ 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5144t6pw.jl:1\nin expression starting at /tmp/tmp5144t6pw.jl:1\n"
  stdout: ''
  timestamp: 1660012020
- exit_code: 1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a vector of GPAs for some students and you have to write\
    \ \n    a function that can output a vector of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grades = sort(grades)\n    grades = grades[2:end]\n    grades = grades[grades.>2.3]\n\
    \    grades = grades[grades.>3.7]\n    grades = grades[grades.>3.3]\n    grades\
    \ = grades[grades.>3.0]\n    grades = grades[grades.>2.7]\n    grades = grades[grades.>2.3]\n\
    \    grades = grades[grades.>2.0]\n    grades = grades[grades.>1.7]\n    grades\
    \ = grades[grades.>1.3]\n    grades = grades[grades.>1.0]\n    grades = grades[grades.>0.7]\n\
    \    grades = grades[grades.>0.3]\n    grades = grades[grades.>0]\n    grades\
    \ = grades[grades.<4.0]\n    grades = grades[grades.>0]\n    grades = grades[grades.<3.0]\n\
    \    grades = grades[grades.>0]\n    grades = grades[grades.<2.0]\n    grades\
    \ = grades[grades.>0]\n    grades = grades[grades.<1.0]\n    grades = grades[grades.<0.0]\n\
    \    grades = grades[grades.<0.3]\n    grades = grades[grades.<0.0]\n    grades\
    \ = grades[grades.<0.7]\n    grades = grades[grades.<1.0]\n    grades = grades[grades.<2.0]\n\
    \    grades = grades[grades.<3.0]\n    grades = grades[grades.<3.3]\n    grades\
    \ = grades[grades.<3.7]\n    grades = grades[grades.<3.7]\n    grades = grades[grades.<3.7]\n\
    \    grades = grades[grades.<3.7]\n    grades = grades[grades.<3.7]\n    grades\
    \ = grades[grades.<3.7]\n    grades = grades[grades.<3.7]\n    grades = grades[grades.<3.7]\n\
    \    grades = grades[grades.<3.7]\n    grades = grades[grades.<3.7]\n    grades\
    \ = grades[grades.<3.7]\n    grades = grades[grades.<3.7]\n    grades = grades[grades.<3.7]\n\
    \    grades = grades[grades.<3.7]\n    grades = grades[grades.<3.7]\n    grades\
    \ = grades[grades.<3.7]\n    grades = grades[grades.<3.7]\n    grades = grades[grades.<3.7]\n\
    \nusing Test\n\n@testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp12wdm8og.jl:26\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp12wdm8og.jl:1\n\
    in expression starting at /tmp/tmp12wdm8og.jl:1\n"
  stdout: ''
  timestamp: 1660012021
- exit_code: 1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a vector of GPAs for some students and you have to write\
    \ \n    a function that can output a vector of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n        grades = sort(grades)\n        grades = grades[2:end]\n        return\
    \ ['A+', 'A-', 'B+', 'B-', 'B', 'C+', 'C', 'C-', 'C', 'D+', 'D', 'D-', 'E'][grades]\n\
    \    end\n</code>\n<|/ a tags=julia,python dscore=4 |>\n<| c |>\nThis is not the\
    \ correct answer for the question. Question asks for Python code, this answer\
    \ is for Julia. Moreover, this code does not work correctly for negative numbers.\n\
    <|/ c |>\n<| c |>\nSorry, my answer was a quick translator from Julia to Python.\
    \ Now I translated it more correctly\n<|/ c |>\n<| a dscore=2 |>\nHere's a simple\
    \ one-line solution that might just get you what you want:\n<code>\ngrades = [4.0,\
    \ 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7]\nusing Test\n\n@testset begin\n\
    \ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0, 3, 1.7, 2, 3.5])\
    \ == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2]) == [\"\
    D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0]) == [\"\
    E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\"\
    , \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: character literal contains multiple characters\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmptulmuqbm.jl:29\nin expression\
    \ starting at /tmp/tmptulmuqbm.jl:29\n"
  stdout: ''
  timestamp: 1660012021
- exit_code: 1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a vector of GPAs for some students and you have to write\
    \ \n    a function that can output a vector of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grades = sort(grades)\n    \n    grade = grades[1]\n    \n    if grade\
    \ <= 4.0 && grade > 3.7 && grade > 3.3 && grade > 3.0 && grade > 2.7 && grade\
    \ > 2.3 && grade > 2.0 && grade > 1.7\n        return [\"A+\"]\n    elsif grade\
    \ <= 3.7 && grade > 3.3 && grade > 3.0 && grade > 2.7 && grade > 2.3 && grade\
    \ > 2.0 && grade > 1.7\n        return [\"A\", \"A-\"]\n    elsif grade <= 3.3\
    \ && grade > 3.0 && grade > 2.7 && grade > 2.3 && grade > 2.0 && grade > 1.7\n\
    \        return [\"B+\"]\n    elsif grade <= 2.7 && grade > 2.3 && grade > 2.0\
    \ && grade > 1.7\n        return [\"B\", \"B-\"]\n    elsif grade <= 2.3 && grade\
    \ > 2.0 && grade > 1.7\n        return [\"C+\"]\n    elsif grade <= 2.0 && grade\
    \ > 1.7\n        return [\"C\"]\n    elsif grade <= 1.7\n        return [\"C-\"\
    ]\n    else \n        return [\"D+\", \"D\", \"D-\", \"E\"]\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"grade\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp6lukz0fj.jl:33\nin expression starting at /tmp/tmp6lukz0fj.jl:33\n"
  stdout: ''
  timestamp: 1660012021
- exit_code: 1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a vector of GPAs for some students and you have to write\
    \ \n    a function that can output a vector of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grades = sort(grades)\n    num_grades = length(grades)\n    letter_grades\
    \ = Vector{String}(repeated(\"\",num_grades))\n    for i = 1:num_grades\n    \
    \    if grades[i] < 4.00\n            letter_grades[i] = \"E-\"\n        else\
    \ if grades[i] >= 3.75 && grades[i] < 3.90\n            letter_grades[i] = \"\
    B-\"\n        else if grades[i] >= 3.75 && grades[i] < 4.00\n            letter_grades[i]\
    \ = \"B-\"\n        else if grades[i] >= 3.25 && grades[i] < 3.50\n          \
    \  letter_grades[i] = \"B-\"\n        else if grades[i] >= 3.00 && grades[i] <\
    \ 3.75\n            letter_grades[i] = \"B-\"\n        else if grades[i] >= 2.75\
    \ && grades[i] < 3.00\n            letter_grades[i] = \"B-\"\n        else if\
    \ grades[i] >= 2.50 && grades[i] < 2.75\n            letter_grades[i] = \"B-\"\
    \n        else if grades[i] >= 2.25 && grades[i] < 2.50\n            letter_grades[i]\
    \ = \"B-\"\n        else if grades[i] >= 2.00 && grades[i] < 2.25\n          \
    \  letter_grades[i] = \"B-\"\n        else if grades[i] >= 1.75 && grades[i] <\
    \ 2.00\n            letter_grades[i] = \"B-\"\n        else if grades[i] >= 1.50\
    \ && grades[i] < 1.75\n            letter_grades[i] = \"B-\"\n        else if\
    \ grades[i] >= 1.25 \n            letter_grades[i] = \"B-\"\n        else if grades[i]\
    \ >= 1.00\n            letter_grades[i] = \"B-\"\n        else if grades[i] >=\
    \ 0.70\n            letter_grades[i] = \"B-\"\n        else if grades[i] >= 0.50\n\
    \            letter_grades[i] = \"B-\"\n        else if grades[i] >= 0.25\n  \
    \          letter_grades[i] = \"B-\"\n        else if grades[i] >= 0.00\n    \
    \        letter_grades[i] = \"B-\"\n        else \n            letter_grades[i]\
    \ = \"B-\"\n        end\n    end\n    return letter_grades\nend\n\"\"\"\n    Write\
    \ a function that takes a vector containing GPA values and converts them to \n\
    \    letter grades.\n    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7,\
    \ 2, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nusing Test\n\
    \n@testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2rwbx4pt.jl:33\nin expression starting at\
    \ /tmp/tmp2rwbx4pt.jl:33\n"
  stdout: ''
  timestamp: 1660012021
- exit_code: 1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a vector of GPAs for some students and you have to write\
    \ \n    a function that can output a vector of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    \"\"\"\n    Calculates the numerical grade\n    \"\"\"\n    letter_grade\
    \ = Vector{String}(undef, 0)\n    for grade in grades\n        if grade > 0 &&\
    \ grade < 3.0 \n            letter_grade = \"A+\"\n        else if grade > 3.0\
    \ && grade < 4.0\n            letter_grade = \"A\"\n        else if grade > 4.0\
    \ && grade < 4.5\n            letter_grade = \"A-\"\n        else if grade > 4.5\
    \ && grade < 5.0\n            letter_grade = \"B+\"\n        else if grade > 5.0\
    \ && grade < 5.5\n            letter_grade = \"B\"\n        else if grade > 5.5\
    \ && grade < 6.0\n            letter_grade = \"B-\"\n        else if grade > 6.0\
    \ && grade < 6.5\n            letter_grade = \"C+\"\n        else if grade > 6.5\
    \ && grade < 7.0\n            letter_grade = \"C\"\n        else if grade > 7.0\
    \ && grade < 7.5\n            letter_grade = \"C-\"\n        else if grade > 7.5\
    \ && grade < 8.0\n            letter_grade = \"D+\"\n        else if grade > 8.0\
    \ && grade < 8.5\n            letter_grade = \"D\"\n        else if grade > 8.5\
    \ && grade < 9.0\n            letter_grade = \"D-\"\n        else if grade > 9.0\n\
    \            letter_grade = \"E\"\n        end\n    end\n    return letter_grade\n\
    end\n</cell>\n<text>\nTest your function\nusing Test\n\n@testset begin\n\ncandidate\
    \ = numerical_letter_grade;\n\t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5])\
    \ == [\"D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyvaa84h9.jl:34\nin expression starting at\
    \ /tmp/tmpyvaa84h9.jl:34\n"
  stdout: ''
  timestamp: 1660012021
- exit_code: 1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a vector of GPAs for some students and you have to write\
    \ \n    a function that can output a vector of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grades.sort!()\n    \n    number_grades = Vector{String}()\n    for i\
    \ in 1:length(grades)\n        if grades[i] > 3.0 && grades[i-1] <= 3.7\n    \
    \        number_grades[i] = \"B+\"\n        elseif grades[i] > 3.7 && grades[i-1]\
    \ <= 3.3\n            number_grades[i] = \"B-\"\n        elseif grades[i] > 3.0\
    \ && grades[i-1] <= 3.0\n            number_grades[i] = \"C+\"\n        elseif\
    \ grades[i] > 3.3 && grades[i-1] <= 2.7\n            number_grades[i] = \"C\"\n\
    \        elseif grades[i] > 2.7 && grades[i-1] <= 2.3\n            number_grades[i]\
    \ = \"C-\"\n        elseif grades[i] > 2.0 && grades[i-1] <= 1.7\n           \
    \ number_grades[i] = \"D+\"\n        elseif grades[i] > 1.7 && grades[i-1] <=\
    \ 1.0\n            number_grades[i] = \"D\"\n        elseif grades[i] > 1.0 &&\
    \ grades[i-1] <= 0.7\n            number_grades[i] = \"D-\"\n        elseif grades[i]\
    \ > 0.7 && grades[i-1] <= 0.0\n            number_grades[i] = \"E\"\n        else\n\
    \            number_grades[i] = \"A+\"\n        end\n    end\n    return number_grades\n\
    end\n</code>\n<|/ a dscore=0 tags=math,julia |>\n<| c |>\nThank you so much. It\
    \ worked perfectly. Also, thank you for the lesson in \"for i in 1:length(grades)\"\
    \ that I didn't know about. This has been very helpful.\n<|/ c |>\n<| c |>\nI\
    \ tried to run the program using vectors but I keep getting an error:\n<|/ c |>\n\
    <| c |>\nERROR: LoadError: MethodError: no method matching -(::Float64, ::Float64)\n\
    Closest candidates are:\n  -(::DataType<float>, ::DataType<float>)\n  -(::DataType<Complex{Float64}},\
    \ ::DataType<Complex{Float64}})\n  -(::DataType<BigFloat>, ::DataType<BigFloat>)\n\
    <|/ c |>\n<| c |>\nThe code worked before I tried to switch it to vectors. I don't\
    \ know what could be wrong with that.\n<|/ c |>\n<| c |>\nHi Aries, can you please\
    \ open a new question on that issue? If this has been resolved please accept one\
    \ of the answers. Thanks!\n<|/ c |>\n<| a tags=math,julia |>\nI believe that it\
    \ is better to solve this problem with matrix algebra:\n<code>\njulia> A = reshape(collect(Float64[4,3,1.7,2.\n\
    using Test\n\n@testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpf48cwhgw.jl:55\nin expression starting at\
    \ /tmp/tmpf48cwhgw.jl:55\n"
  stdout: ''
  timestamp: 1660012021
- exit_code: 1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a vector of GPAs for some students and you have to write\
    \ \n    a function that can output a vector of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    #Write your code here\n    grades.sort!(true)\n    grades1=grades.take(grades.length-1)\n\
    \    grades2=grades.take(grades.length)\n    grades1[length(grades1)-1]-=100\n\
    \    grades2[length(grades2)-1]+=100\n    grades1[length(grades1)-1]/100\n   \
    \ grades2[length(grades2)-1]/100\n    if grades1>grades2 \n        return \"B+\"\
    \ #letter grade of highest grade \n    else \n        return \"D+\" #letter grade\
    \ of lowest grade\nend\ngrade_equation(gpa::Vector{Float64}) = numerical_letter_grade(gpa)\n\
    </cell>\n<code language=julia-1.0>\ngrade_equation([4.0, 3, 1.7, 2, 3.5])\n</cell>\n\
    <code language=julia-1.0>\nusing Test\n\n@testset begin\n\ncandidate = numerical_letter_grade;\n\
    \t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"\
    A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5]) == [\"\
    D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5,\
    \ 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1j8vg7m5.jl:41\nin expression starting at\
    \ /tmp/tmp1j8vg7m5.jl:41\n"
  stdout: ''
  timestamp: 1660012021
- exit_code: 1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a vector of GPAs for some students and you have to write\
    \ \n    a function that can output a vector of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    if grades.size < 2\n        return [\"E\"]\n    end\n    grades = sort(grades)\n\
    \    if grades[1] > 3.0 \n        grades[1] = 4.0\n    end\n    if grades[2] <\
    \ 3.7 \n        grades[2] = 2.7\n    end\n    if grades[3] < 3.3\n        grades[3]\
    \ = 2.3\n    end\n    if grades[4] < 3.0\n        grades[4] = 2.0\n    end\n \
    \   if grades[5] < 2.7\n        grades[5] = 1.7\n    end\n    if grades[6] < 2.3\n\
    \        grades[6] = 1.3\n    end\n    if grades[7] < 1.0\n        grades[7] =\
    \ 1.0\n    end\n    if grades[8] < 0.7\n        grades[8] = 0.7\n    end\n   \
    \ if grades[9] < 0.0\n        grades[9] = 0.0\n    end\n    grades = sort(grades)\n\
    \    grades = reverse(grades)\n    return [\"A+\", \"B\", \"C-\", \"C\", \"A-\"\
    , \"D\", \"D-\", \"E\"]\nend\n</cell>\n<text>\nExercise 12\nThe exercise is to\
    \ make a function named numerical_letter_grade that receives a list of GPAs as\
    \ input and then outputs the list of letters for the grades. That is:\nusing Test\n\
    \n@testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphdv4wtfd.jl:62\nin expression starting at\
    \ /tmp/tmphdv4wtfd.jl:62\n"
  stdout: ''
  timestamp: 1660012021
- exit_code: 1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a vector of GPAs for some students and you have to write\
    \ \n    a function that can output a vector of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    #calculate the average GPA\n    average_gpa = mean(grades)\n    \n   \
    \ #convert grades to letter grades\n    letter_grades = Array{Char,1}(undef, length(grades))\n\
    \    for i = 1:length(grades)\n        if grades[i]>=0 && grades[i] <= 2\n   \
    \         letter_grades[i] = \"A+\"\n        elseif grades[i] >= 3 && grades[i]\
    \ <= 3.7\n            letter_grades[i] = \"A\"\n        elseif grades[i] >= 3.8\
    \ && grades[i] <= 3.3\n            letter_grades[i] = \"A-\"\n        elseif grades[i]\
    \ >= 3 && grades[i] <= 3.0\n            letter_grades[i] = \"B+\"\n        elseif\
    \ grades[i] >= 3.1 && grades[i] <= 2.7\n            letter_grades[i] = \"B\"\n\
    \        elseif grades[i] >= 2.8 && grades[i] <= 2.3\n            letter_grades[i]\
    \ = \"B-\"\n        elseif grades[i] >= 2 && grades[i] <= 1.9\n            letter_grades[i]\
    \ = \"C+\"\n        elseif grades[i] >= 1.8 && grades[i] <= 1.3\n            letter_grades[i]\
    \ = \"C\"\n        elseif grades[i] >= 1.3 && grades[i] <= 1.0\n            letter_grades[i]\
    \ = \"C-\"\n        elseif grades[i] >= 0 && grades[i] <= 0.7\n            letter_grades[i]\
    \ = \"D+\"\n        elseif grades[i] >= 0.7 && grades[i] <= 0\n            letter_grades[i]\
    \ = \"D\"\n        else\n            letter_grades[i] = \"D-\"\n        end\n\
    \    end\n    \n    #return the letter grades\n    return letter_grades\nend\n\
    </cell>\n<code language=julia-1.1>\nnumerical_letter_grade([4.0, 3, 1.7, 2, 3.5])\n\
    </cell>\n<text>\nQuestion 3\nUsing your code from the previous question, write\
    \ a function that takes in a vector of grades and returns another vector of grades\
    \ corresponding to the letter grades shown in the question. The new vectors should\
    \ have the same length as the input vector.\nusing Test\n\n@testset begin\n\n\
    candidate = numerical_letter_grade;\n\t@test(candidate([4.0, 3, 1.7, 2, 3.5])\
    \ == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2]) == [\"\
    D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0]) == [\"\
    E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\"\
    , \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcya5q5qh.jl:63\nin expression starting at\
    \ /tmp/tmpcya5q5qh.jl:63\n"
  stdout: ''
  timestamp: 1660012021
- exit_code: 1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a vector of GPAs for some students and you have to write\
    \ \n    a function that can output a vector of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    \"\"\"\n    Calculates the letter grade for a vector using your function\
    \ \"numerical_letter_grade\"\n    This function uses the \"numerical_letter_grade\"\
    \ function you wrote.\n    \"\"\"\n    \nend\n</cell>\n<text>\nExercise 5\nThe\
    \ students are taking a test and are asked to enter the results of each subject.\
    \ \nEach subject has a different grade and you have to write a function that can\
    \ \noutput the letter grades for each subject in the correct order. \nThe function\
    \ should take two arguments: a vector of results and the subject to \ngrade (either\
    \ \"Math\" or \"Chemistry\").\nusing Test\n\n@testset begin\n\ncandidate = numerical_letter_grade;\n\
    \t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"\
    A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5]) == [\"\
    D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5,\
    \ 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmvce0mfa.jl:33\nin expression starting at\
    \ /tmp/tmpmvce0mfa.jl:33\n"
  stdout: ''
  timestamp: 1660012021
- exit_code: 1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a vector of GPAs for some students and you have to write\
    \ \n    a function that can output a vector of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    #TODO: Write a function that takes grades and returns a vector of letter\n\
    \    #grades.\n    #Write your code here.\nend\n</cell>\n<cell>\n\"\"\"\nWrite\
    \ a function that can take in two vectors (x and y) of floats and return an\n\
    approximation of their Euclidean distance (as a Float64). \n(Remember, Euclidean\
    \ distance is the length of the hypotenuse of a right triangle\nformed from the\
    \ sides of two triangles whose sides are given.)\n\"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0, 3, 1.7,\
    \ 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpojvn44k3.jl:31\nin expression starting at\
    \ /tmp/tmpojvn44k3.jl:31\n"
  stdout: ''
  timestamp: 1660012021
- exit_code: 1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a vector of GPAs for some students and you have to write\
    \ \n    a function that can output a vector of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    \"\"\"\n    Computes the letter grade for a vector\n    of grades given\
    \ in the form [4.0, 3.7, ...]\n    \"\"\"\n    grades_sum = sum(grades)\n    \n\
    \    if grades_sum >= 3.0 \n        return \"A+\"\n    \n    if grades_sum >=\
    \ 3.7\n        return \"A\"\n    \n    if grades_sum >= 3.3\n        return \"\
    A-\"\n    \n    if grades_sum >= 3.0\n        return \"B+\"\n    \n    if grades_sum\
    \ >= 2.7\n        return \"B\"\n    \n    if grades_sum >= 2.3\n        return\
    \ \"B-\"\n    \n    if grades_sum >= 2.0\n        return \"C+\"\n    \n    if\
    \ grades_sum >= 1.7\n        return \"C\"\n    \n    if grades_sum >= 1.3\n  \
    \      return \"C-\"\n    \n    if grades_sum >= 1.0\n        return \"D+\"\n\
    \    \n    if grades_sum >= 0.7\n        return \"D\"\n    \n    if grades_sum\
    \ >= 0.0\n        return \"D-\"\n    \n    return \"E\"\nend\n</cell>\n<code language=julia-1.5>\n\
    println(\"Let's grade this thing! It isn't a bad thing for a grader to have a\
    \ test drive!\")\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0, 3, 1.7, 2, 3.5])\
    \ == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2]) == [\"\
    D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0]) == [\"\
    E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\"\
    , \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_ee7hclk.jl:71\nin expression starting at\
    \ /tmp/tmp_ee7hclk.jl:71\n"
  stdout: ''
  timestamp: 1660012021
- exit_code: 1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a vector of GPAs for some students and you have to write\
    \ \n    a function that can output a vector of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grades = sort(grades)\n    grades = grade_equation(grades)\n    grades\
    \ = grade_letters(grades)\n    return grades\nend\n</cell>\n<code language=julia-0.6>\n\
    @test numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]\n</cell>\n<text>\nTask 3\nWrite a function to calculate the average\
    \ grade (using grade_equation as described above). You can use the @njit macro\
    \ for performance.\nusing Test\n\n@testset begin\n\ncandidate = numerical_letter_grade;\n\
    \t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"\
    A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5]) == [\"\
    D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5,\
    \ 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpv8vc_ur5.jl:32\nin expression starting at\
    \ /tmp/tmpv8vc_ur5.jl:32\n"
  stdout: ''
  timestamp: 1660012021
- exit_code: 1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a vector of GPAs for some students and you have to write\
    \ \n    a function that can output a vector of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n\"\"\"\n    Example of how to call this function on the provided example:\n\
    using Test\n\n@testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpt5hd3khg.jl:1\nin expression starting at /tmp/tmpt5hd3khg.jl:1\n"
  stdout: ''
  timestamp: 1660012021
- exit_code: 1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a vector of GPAs for some students and you have to write\
    \ \n    a function that can output a vector of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    nums = findall(x->x>3.0,grades)\n    if isempty(nums) \n       return\
    \ \"E\"\n    else \n       return[letter(grades[num][1]) .== \"E\" ? \"\" : \"\
    -\" for (num) in nums]\nend\nusing Test\n\n@testset begin\n\ncandidate = numerical_letter_grade;\n\
    \t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"\
    A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5]) == [\"\
    D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5,\
    \ 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpsrqhe1og.jl:26\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpsrqhe1og.jl:1\n\
    in expression starting at /tmp/tmpsrqhe1og.jl:1\n"
  stdout: ''
  timestamp: 1660012021
- exit_code: 1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a vector of GPAs for some students and you have to write\
    \ \n    a function that can output a vector of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    \"\"\"\n    Arguments:\n    grades -- the vector of grades\n    Return:\n\
    \    a vector of letter grades\n    \"\"\"\n    grades.sort()\n    grades_str\
    \ = Array{String}(undef, length(grades))\n    for (ii, v) in enumerate(grades)\n\
    \        grades_str[ii] = string(toupper(v)) + \"+\"\n    end\n    return grades_str\n\
    end\n</code>\n<|/ a dscore=1 |>\n<| c |>\nI understand your code and made a similar\
    \ function using similar logic, except I did not sort the grades beforehand and\
    \ also used `toupper()` instead of `tostring()`. So I accepted this answer\n<|/\
    \ c |>\n<| a tags=julia,linear-equation,optimization,linear-programming |>\nI\
    \ got this to work:\n<code>\nusing LinearAlgebra\nusing Random\nusing Optim\n\
    using Test\n\n@testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdvlyen3h.jl:40\nin expression starting at\
    \ /tmp/tmpdvlyen3h.jl:40\n"
  stdout: ''
  timestamp: 1660012021
- exit_code: 1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a vector of GPAs for some students and you have to write\
    \ \n    a function that can output a vector of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grades=sort(grades)\n    \n    grades_to_letter=[\"A+\",\"A\",\"A-\",\"\
    B+\",\"B\",\"B-\",\"C+\",\"C\",\"C-\",\"D+\",\"D\",\"D-\",\"E\"]\n    \n    \n\
    \    \n    if grades[0]>grades[1] then\n        grades_to_letter[1]=\"B\"\n  \
    \      grades[1]=grades[1]-grades[0]\n        grades_to_letter[2]=\"C+\"\n   \
    \     grades[2]=grades[2]-grades[1]\n        grades_to_letter[3]=\"C\"\n     \
    \   grades[3]=grades[3]-grades[2]\n        grades_to_letter[4]=\"A-\"\n      \
    \  grades[4]=grades[4]-grades[3]\n        \n        \n        \n    else if grades[1]>grades[2]\
    \ then\n        grades_to_letter[1]=\"C\"\n        grades[1]=grades[1]-grades[1]\n\
    \        grades_to_letter[2]=\"C+\"\n        grades[2]=grades[2]-grades[2]\n \
    \       grades_to_letter[3]=\"B+\"\n        grades[3]=grades[3]-grades[3]\n  \
    \      grades_to_letter[4]=\"B\"\n        grades[4]=grades[4]-grades[4]\n    \
    \    \n    else if grades[2]>grades[3] then\n        grades_to_letter[1]=\"A\"\
    \n        grades[1]=grades[1]-grades[1]\n        grades_to_letter[2]=\"A-\"\n\
    \        grades[2]=grades[2]-grades[2]\n        grades_to_letter[3]=\"B+\"\n \
    \       grades[3]=grades[3]-grades[3]\n        grades_to_letter[4]=\"B\"\n   \
    \     grades[4]=grades[4]-grades[4]\n        \n    else if grades[3]>grades[4]\
    \ then\n        grades_to_letter[1]=\"A-\"\n        grades[1]=grades[1]-grades[1]\n\
    \        grades_to_letter[2]=\"A+\"\n        grades[2]=grades[2]-grades[2]\n \
    \       grades_to_letter[3]=\"B+\"\n        grades[3]=grades[3]-grades[3]\n  \
    \      grades_to_letter[4]=\"B\"\n        grades[4]=grades[4]-grades[4]\n    \
    \    \n    else \n        grades_to_letter[1]=\"D+\"\n        grades[1]=grades[1]-grades[1]\n\
    \        grades_to_letter[2]=\"D\"\n        grades[2]=grades[2]-grades[2]\n  \
    \      grades_to_letter[3]=\"D-\"\n        grades[3]=grades[3]-grades[3]\n   \
    \     grades_to_letter[4]=\"D\"\n        grades[4]=grades[4]-grades[4]\n    end\n\
    \    \n    \n    return grade\nusing Test\n\n@testset begin\n\ncandidate = numerical_letter_grade;\n\
    \t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"\
    A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5]) == [\"\
    D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5,\
    \ 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpta80atwy.jl:45\nin expression starting at\
    \ /tmp/tmpta80atwy.jl:45\n"
  stdout: ''
  timestamp: 1660012021
- exit_code: 1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a vector of GPAs for some students and you have to write\
    \ \n    a function that can output a vector of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grade_min = min(grades)\n    grade_max = max(grades)\n    grades_range\
    \ = grade_max - grade_min\n    grade_mean = mean(grades)\n    grades_squared =\
    \ map(x -> x*x, grades)\n    grades_square = sum(grades_squared)\n    grades_range\
    \ = grade_max - grade_min\n    grade_standard_deviation = standard_deviation(grades)\n\
    \    grades_sum = 0\n    for grade in grades\n        grades_sum = grades_sum\
    \ + grade\n    end\n    grades_mean = grades_sum / length(grades)\n    grades_squared\
    \ = map(x -> x*x, grades)\n    grades_square = sum(grades_squared)\n    grades_variance_ratio\
    \ = grades_square / grades_mean\n    grades_variance = grades_squared / grades_mean\
    \ - grade_mean^2\n    grades_standard_deviation = standard_deviation(grades)\n\
    \    grades_product = 1\n    for grade in grades\n        grades_product = grades_product\
    \ * grade\n    end\n    grades_quotient = grades_product / grades_mean\n    grades_quotient_square\
    \ = grades_quotient ^ 2\n    grades_quotient_sum = 0\n    for grade in grades\n\
    \        grades_quotient_sum = grades_quotient_sum + grade\n    end\n    grades_quotient_mean\
    \ = grades_quotient_sum / length(grades)\n    grades_quotient_square = grades_quotient\
    \ ^ 2\n    grades_quotient_standard_deviation = standard_deviation(grades)\n \
    \   grades_quotient_product = 1\n    for grade in grades\n        grades_quotient_product\
    \ = grades_quotient_product * grade\n    end\n    grades_quotient_quotient = grades_quotient_product\
    \ / grades_mean\n    grades_quotient_quotient_square = grades_quotient_quotient\
    \ ^ 2\n    grades_quotient_quotient_sum = 0\n    for grade in grades\n       \
    \ grades_quotient_quotient_sum = grades_quotient_quotient_sum + grade\n    end\n\
    \    grades_quotient_quotient_mean = grades_quotient_quotient_sum / length(grades)\n\
    \    grades_quotient_quotient_square = grades_quotient_quotient ^ 2\n    grades_quotient_quotient_standard_deviation\
    \ = standard_deviation(grades)\n    grades_quotient_quotient_product = 1\n   \
    \ for grade in grades\n        grades_quotient_quotient_product = grades_quotient_quotient_\n\
    using Test\n\n@testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"for\" at /tmp/tmpq4xefrf2.jl:72\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpq4xefrf2.jl:1\n\
    in expression starting at /tmp/tmpq4xefrf2.jl:1\n"
  stdout: ''
  timestamp: 1660012021
- exit_code: 1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a vector of GPAs for some students and you have to write\
    \ \n    a function that can output a vector of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grades_sum = sum(grades)\n    grades_index = 0\n    letter_grades = Vector{String}(undef,\
    \ 0)\n    while grades_index < length(grades)\n        if grades[grades_index]\
    \ <= grades_sum/2 \n            letter_grades = letter_grades + ['A+']\n     \
    \   else if grades[grades_index] > grades_sum/2 \n            letter_grades =\
    \ letter_grades + ['A']\n        else if grades[grades_index] <= grades_sum/2\
    \ + 0.7 \n            letter_grades = letter_grades + ['A']\n        else if grades[grades_index]\
    \ > grades_sum/2 + 0.7 \n            letter_grades = letter_grades + ['A']\n \
    \       else if grades[grades_index] <= grades_sum/2 + 0.3 \n            letter_grades\
    \ = letter_grades + ['B+']\n        else if grades[grades_index] > grades_sum/2\
    \ + 0.3 \n            letter_grades = letter_grades + ['B']\n        else if grades[grades_index]\
    \ <= grades_sum/2 + 0.1 \n            letter_grades = letter_grades + ['B']\n\
    \        else if grades[grades_index] > grades_sum/2 + 0.1 \n            letter_grades\
    \ = letter_grades + ['B']\n        else if grades[grades_index] <= grades_sum/2\
    \ + 0.07 \n            letter_grades = letter_grades + ['C+']\n        else if\
    \ grades[grades_index] > grades_sum/2 + 0.07 \n            letter_grades = letter_grades\
    \ + ['C']\n        else if grades[grades_index] <= grades_sum/2 + 0.03 \n    \
    \        letter_grades = letter_grades + ['C']\n        else if grades[grades_index]\
    \ > grades_sum/2 + 0.03 \n            letter_grades = letter_grades + ['C']\n\
    \        else if grades[grades_index] <= grades_sum/2 + 0.007 \n            letter_grades\
    \ = letter_grades + ['D+']\n        else if grades[grades_index] > grades_sum/2\
    \ + 0.007 \n            letter_grades = letter_grades + ['D']\n        else if\
    \ grades[grades_index] <= grades_sum/2 + 0.003 \n            letter_grades = letter_grades\
    \ + ['D']\n        else if grades[grades_index] > grades_sum/2 + 0.003 \n    \
    \        letter_grades = letter_grades + ['D']\n        else if grades[grades_index]\
    \ <= grades_sum/2 + 0.001 \n            letter_grades = letter_grades + ['D']\n\
    \        else if grades[grades_index] > grades_sum/2 + 0.001 \n            letter_grade\n\
    using Test\n\n@testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: character literal contains multiple characters\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmpamo8o6zv.jl:32\nin expression\
    \ starting at /tmp/tmpamo8o6zv.jl:32\n"
  stdout: ''
  timestamp: 1660012021
- exit_code: 1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a vector of GPAs for some students and you have to write\
    \ \n    a function that can output a vector of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n\"\"\"\nInput:\n    A vector of grades for some students.\nOutput:\n    A\
    \ vector of letter grades using the following table:\n             GPA       |\
    \    Letter grade\n              4.0                A+\n            > 3.7    \
    \            A \n            > 3.3                A- \n            > 3.0     \
    \           B+\n            > 2.7                B \n            > 2.3       \
    \         B-\n            > 2.0                C+\n            > 1.7         \
    \       C\n            > 1.3                C-\n            > 1.0            \
    \    D+ \n            > 0.7                D \n            > 0.0             \
    \   D-\n              0.0                E\n    \n    Example:\n    >>> grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n\"\"\"\n# your\
    \ code here\n    \n</cell>\n<text>\nSolution\nusing Test\n\n@testset begin\n\n\
    candidate = numerical_letter_grade;\n\t@test(candidate([4.0, 3, 1.7, 2, 3.5])\
    \ == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2]) == [\"\
    D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0]) == [\"\
    E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\"\
    , \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp074nnk1v.jl:53\nin expression starting at\
    \ /tmp/tmp074nnk1v.jl:53\n"
  stdout: ''
  timestamp: 1660012022
- exit_code: 1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a vector of GPAs for some students and you have to write\
    \ \n    a function that can output a vector of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grades.sort(ascending=true)\n    return [\"A+\", \"A\", \"A-\", \"B+\"\
    , \"B\", \"B-\", \"C+\", \"C\", \"C-\", \"D+\", \"D\", \"D-\", \"E\"]\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 6 errored,
    0 broken.

    in expression starting at /tmp/tmphgqynwa2.jl:32

    '
  stdout: "test set: Error During Test at /tmp/tmphgqynwa2.jl:35\n  Test threw exception\n\
    \  Expression: candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"\
    C\", \"A-\"]\n  type Array has no field sort\n  Stacktrace:\n   [1] getproperty\n\
    \     @ ./Base.jl:42 [inlined]\n   [2] numerical_letter_grade(grades::Vector{Float64})\n\
    \     @ Main /tmp/tmphgqynwa2.jl:27\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmphgqynwa2.jl:35 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmphgqynwa2.jl:34\ntest set:\
    \ Error During Test at /tmp/tmphgqynwa2.jl:36\n  Test threw exception\n  Expression:\
    \ candidate([1.2]) == [\"D+\"]\n  type Array has no field sort\n  Stacktrace:\n\
    \   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] numerical_letter_grade(grades::Vector{Float64})\n\
    \     @ Main /tmp/tmphgqynwa2.jl:27\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmphgqynwa2.jl:36 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmphgqynwa2.jl:34\ntest set:\
    \ Error During Test at /tmp/tmphgqynwa2.jl:37\n  Test threw exception\n  Expression:\
    \ candidate([0.5]) == [\"D-\"]\n  type Array has no field sort\n  Stacktrace:\n\
    \   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] numerical_letter_grade(grades::Vector{Float64})\n\
    \     @ Main /tmp/tmphgqynwa2.jl:27\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmphgqynwa2.jl:37 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmphgqynwa2.jl:34\ntest set:\
    \ Error During Test at /tmp/tmphgqynwa2.jl:38\n  Test threw exception\n  Expression:\
    \ candidate([0.0"
  timestamp: 1660012025
- exit_code: 1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a vector of GPAs for some students and you have to write\
    \ \n    a function that can output a vector of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grades_sorted = sort(grades)\n    \n    for i=1:length(grades_sorted)\n\
    \        if grades_sorted[i] == 0.0\n            return \"E\"\n        else \n\
    \            if grades_sorted[i]  > 0.0 && grades_sorted[i-1] == 0.0\n       \
    \         return \"D-\" \n            elseif grades_sorted[i]  > 0.0 && grades_sorted[i-1]\
    \ > 0.0\n                return \"D+\" \n            elseif grades_sorted[i] \
    \ > 0.0 && grades_sorted[i-1] < 0.0\n                return \"D\"\n          \
    \  elseif grades_sorted[i]  > 0.0 && grades_sorted[i-1] > 0.0\n              \
    \  return \"C-\"\n            elseif grades_sorted[i]  > 0.0 && grades_sorted[i-1]\
    \ < 0.0\n                return \"C\"\n            elseif grades_sorted[i]  >\
    \ 0.0 && grades_sorted[i-1] > 0.0\n                return \"B-\"\n           \
    \ elseif grades_sorted[i]  > 0.0 && grades_sorted[i-1] < 0.0\n               \
    \ return \"B\"\n            elseif grades_sorted[i]  > 0.0 && grades_sorted[i-1]\
    \ > 0.0\n                return \"A-\"\n            elseif grades_sorted[i]  >\
    \ 0.0 && grades_sorted[i-1] < 0.0\n                return \"A\"\n            elseif\
    \ grades_sorted[i]  > 0.0 && grades_sorted[i-1] > 0.0\n                return\
    \ \"A+\"\n            elseif grades_sorted[i]  > 0.0\n                return \"\
    B+\"\n            elseif grades_sorted[i]  > 0.0\n                return \"C+\"\
    \n            elseif grades_sorted[i]  > 0.0\n                return \"D+\"\n\
    \            elseif grades_sorted[i]  > 0.0\n                return \"D\"\n  \
    \          elseif grades_sorted[i]  > 0.0\n                return \"C\"\n    \
    \        elseif grades_sorted[i]  > 0.0\n                return \"B\"\n      \
    \      elseif grades_sorted[i]  > 0.0\n                return \"A\"\n        \
    \    elseif grades_sorted[i]  > 0.0\n                return \"A+\"\n         \
    \   elseif grades_sorted[i]  > 0.0\n                return \"B+\"\n          \
    \  elseif grades_sorted[i]  > 0.0\n                return \"C+\"\n           \
    \ elseif grades_sorted[i]  > 0.0\n                return \"D+\"\n            elseif\
    \ grades_sorted[i]  > 0.0\n                return \"D-\"\n            elseif grades_sorted[i]\
    \  > 0.0\n                return \"C-\"\n            elseif grades_sorted[i] \
    \ > 0.0\n                return \"B-\"\n            elseif grades_sorted[i]  >\
    \ 0.0\n                return \"A-\"\n            elseif grades_sorted[i]  > 0.0\n\
    using Test\n\n@testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkptlfxq_.jl:1\nin expression starting at /tmp/tmpkptlfxq_.jl:1\n"
  stdout: ''
  timestamp: 1660012023
- exit_code: 1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a vector of GPAs for some students and you have to write\
    \ \n    a function that can output a vector of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = Vector{String}(undef,0)\n    grade = grades[1]\n    letter_grades[1]\
    \ = \"A+\"\n    if grade > 3.0 \n        letter_grades[2] = \"A\"\n        if\
    \ grade > 3.7 \n            letter_grades[3] = \"A+\"\n            if grade >\
    \ 3.3 \n                letter_grades[4] = \"A\"\n                if grade > 3.0\
    \ \n                    letter_grades[5] = \"B+\"\n                    if grade\
    \ > 2.7 \n                        letter_grades[6] = \"B\"\n                 \
    \       if grade > 2.3 \n                            letter_grades[7] = \"B-\"\
    \n                            if grade > 2.0 \n                              \
    \  letter_grades[8] = \"C+\"\n                                if grade > 1.7 \n\
    \                                    letter_grades[9] = \"C\"\n              \
    \                      if grade > 1.3 \n                                     \
    \   letter_grades[10] = \"C-\"\n                                        if grade\
    \ > 1.0 \n                                            letter_grades[11] = \"D+\"\
    \n                                            if grade > 0.7 \n              \
    \                                  letter_grades[12] = \"D\"\n               \
    \                                 if grade > 0.0 \n                          \
    \                          letter_grades[13] = \"D-\"\n                      \
    \                              if grade > 0.0 \n                             \
    \                           letter_grades[14] = \"E\"\n    return letter_grades\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpb0465hwp.jl:1\nin expression starting at /tmp/tmpb0465hwp.jl:1\n"
  stdout: ''
  timestamp: 1660012023
- exit_code: 1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a vector of GPAs for some students and you have to write\
    \ \n    a function that can output a vector of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    if grades<4.0\n        return \"A\"\n    if grades>=3.7\n        return\
    \ \"B\"\n    if grades>=3.3\n        return \"C\"\n    if grades>=3.0\n      \
    \  return \"D\"\n    if grades>=2.7\n        return \"E\"\n    if grades>=2.3\n\
    \        return \"F\"\n    if grades>=2.0\n        return \"G\"\n    if grades>=1.7\n\
    \        return \"A\"\n    if grades>=1.3\n        return \"B\"\n    if grades>=1.1\n\
    \        return \"C\"\n    if grades>=0.7\n        return \"D\"\n    if grades>=0.3\n\
    \        return \"F\"\n    else\n        return \"E\"\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0, 3, 1.7,\
    \ 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqkjp4uql.jl:1\nin expression starting at /tmp/tmpqkjp4uql.jl:1\n"
  stdout: ''
  timestamp: 1660012023
- exit_code: 1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a vector of GPAs for some students and you have to write\
    \ \n    a function that can output a vector of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grades.sort!()\n    grades_reversed = reverse(grades)\n    grades_reversed.pop(1)\n\
    \    grades_reversed.pop(1)\n    grades_reversed.pop(1)\n    grades_reversed.pop(1)\n\
    \    grades_reversed.pop(1)\n    grades_reversed.pop(1)\n    grades_reversed.pop(1)\n\
    \    grades_reversed.pop(1)\n    grades_reversed.pop(1)\n    grades_reversed.pop(1)\n\
    \    grades_reversed.pop(1)\n    grades_reversed.pop(1)\n    grades_reversed.pop(1)\n\
    \    grades_reversed.pop(1)\n    grades_reversed.pop(1)\n    grades_reversed.pop(1)\n\
    \    grades_reversed.pop(1)\n    grades_reversed.pop(1)\n    grades_reversed.pop(1)\n\
    \    grades_reversed.pop(1)\n    grades_reversed.pop(1)\n    grades_reversed.pop(1)\n\
    \    grades_reversed.pop(1)\n    grades_reversed.pop(1)\n    grades_reversed.pop(1)\n\
    \    grades_reversed.pop(1)\n    grades_reversed.pop(1)\n    grades_reversed.pop(1)\n\
    \    grades_reversed.pop(1)\n    grades_reversed.pop(1)\n    grades_reversed.pop(1)\n\
    \    grades_reversed.pop(1)\n    grades_reversed.pop(1)\n    grades_reversed.pop(1)\n\
    \    grades_reversed.pop(1)\n    grades_reversed.pop(1)\n    grades_reversed.pop(1)\n\
    \    grades_reversed.pop(1)\n    grades_reversed.pop(1)\n    grades_reversed.pop(1)\n\
    \    grades_reversed.pop(1)\n    grades_reversed.pop(1)\n    grades_reversed.pop(1)\n\
    \    grades_reversed.pop(1)\n    grades_reversed.pop(1)\n    grades_reversed.pop(1)\n\
    \    grades_reversed.pop(1)\n    grades_reversed.pop(1)\n    grades_reversed.pop(1)\n\
    \    grades_reversed.pop(1)\n    grades_reversed.pop(1)\n    grades_reversed.pop(1)\n\
    \    grades_reversed.pop(1)\n    grades_reversed.pop(1)\n    grades_reversed.pop(1)\n\
    \    grades_reversed.pop(1)\n    grades_reversed.pop(1)\n    grades_reversed.pop(1)\n\
    \    grades_reversed.pop(1)\n    grades_reversed.pop(1)\n    grades_reversed.pop(1)\n\
    \    grades_reversed.pop(1)\n\nusing Test\n\n@testset begin\n\ncandidate = numerical_letter_grade;\n\
    \t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"\
    A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5]) == [\"\
    D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5,\
    \ 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmppfqoia0_.jl:26\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmppfqoia0_.jl:1\n\
    in expression starting at /tmp/tmppfqoia0_.jl:1\n"
  stdout: ''
  timestamp: 1660012023
- exit_code: 1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a vector of GPAs for some students and you have to write\
    \ \n    a function that can output a vector of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n        grade_size = length(grades)\n        if grade_size < 6\n         \
    \   grade_vector = [\"E\", \"F\", \"G\", \"A\", \"A-\"]\n        elseif grade_size\
    \ == 6\n            grade_vector = [\"F\", \"G\", \"A-\", \"A+\", \"B\"]\n   \
    \     elseif grade_size == 7\n            grade_vector = [\"F\", \"G\", \"A-\"\
    , \"A+\", \"B\", \"B-\"]\n        elseif grade_size == 8\n            grade_vector\
    \ = [\"F\", \"G\", \"A-\", \"A+\", \"B\", \"B-\", \"C\"]\n        elseif grade_size\
    \ == 9\n            grade_vector = [\"F\", \"G\", \"A-\", \"A+\", \"B\", \"B-\"\
    , \"C\", \"C-\"]\n        elseif grade_size == 10\n            grade_vector =\
    \ [\"F\", \"G\", \"A-\", \"A+\", \"B\", \"B-\", \"C\", \"C-\", \"D\"]\n      \
    \  elseif grade_size == 11\n            grade_vector = [\"F\", \"G\", \"A-\",\
    \ \"A+\", \"B\", \"B-\", \"C\", \"C-\", \"D-\"]\n        elseif grade_size ==\
    \ 12\n            grade_vector = [\"F\", \"G\", \"A-\", \"A+\", \"B\", \"B-\"\
    , \"C\", \"C-\", \"D-\", \"E-\"]\n        end\n        return grade_vector[grades].\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp6gooc2_6.jl:26\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp6gooc2_6.jl:1\n\
    in expression starting at /tmp/tmp6gooc2_6.jl:1\n"
  stdout: ''
  timestamp: 1660012023
- exit_code: 1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a vector of GPAs for some students and you have to write\
    \ \n    a function that can output a vector of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    \n    \nend\nusing Test\n\n@testset begin\n\ncandidate = numerical_letter_grade;\n\
    \t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"\
    A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5]) == [\"\
    D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5,\
    \ 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 6 errored,
    0 broken.

    in expression starting at /tmp/tmp6bipx6el.jl:32

    '
  stdout: "test set: Error During Test at /tmp/tmp6bipx6el.jl:35\n  Test threw exception\n\
    \  Expression: candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"\
    C\", \"A-\"]\n  MethodError: Cannot `convert` an object of type Nothing to an\
    \ object of type Vector{String}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::LinearAlgebra.Factorization) where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{Vector{String}}, !Matched::LibGit2.StrArrayStruct) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LibGit2/src/strarray.jl:13\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at ~/.conda/envs/polyglot/share/julia/base/array.jl:554\n\
    \    ...\n  Stacktrace:\n   [1] numerical_letter_grade(grades::Vector{Float64})\n\
    \     @ Main /tmp/tmp6bipx6el.jl:29\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp6bipx6el.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp6bipx6el.jl:34\ntest set:\
    \ Error During Test at /tmp/tmp6bipx6el.jl:36\n  Test threw exception\n  Expression:\
    \ candidate([1.2]) == [\"D+\"]\n  MethodError: Cannot `convert` an object of type\
    \ Nothing to an object of type Vector{String}\n  Closest candidates are:\n   \
    \ convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{Vector{String}}, !Matched::LibGit2.StrArrayStruct) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LibGit2/src/strarray.jl:13\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at ~/.conda/envs/polyglot/share/julia/base/array.jl:554\n\
    \    ...\n  Stacktrace:\n   [1] numerical_letter_grade(grades::Vector{Float64})\n\
    \     @ Main /tmp/tmp6bipx6el.jl:29\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ ["
  timestamp: 1660012026
- exit_code: 1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a vector of GPAs for some students and you have to write\
    \ \n    a function that can output a vector of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    \"\"\"\n    Arguments:\n    grades : vector of GPA scores \n    \n   \
    \ Returns a vector containing letter grades.\nusing Test\n\n@testset begin\n\n\
    candidate = numerical_letter_grade;\n\t@test(candidate([4.0, 3, 1.7, 2, 3.5])\
    \ == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2]) == [\"\
    D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0]) == [\"\
    E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\"\
    , \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppz_xpwak.jl:1\nin expression starting at /tmp/tmppz_xpwak.jl:1\n"
  stdout: ''
  timestamp: 1660012023
- exit_code: 1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a vector of GPAs for some students and you have to write\
    \ \n    a function that can output a vector of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grades_sum=sum(grades)\n    grades_length=length(grades)\n    grades_sum/grades_length\n\
    \    if grades<0\n        grades_length=grades_length*(-1)\n        grades_sum/grades_length\n\
    \    end\n    gpas=sort(grades)\n    grades_array=ones(length(grades),1)\n   \
    \ for i in 1:grades_length\n        if gpas[i]>=0\n            grades_array[i]=gpas[i]\n\
    \        else\n            grades_array[i]=grades_array[i]*(grades_sum-gpas[i])/grades_sum\n\
    \        end\n    end\n    gpa_sum=sum(grades_array)\n    grades_array=grades_array./gpa_sum\n\
    \    for i in 1:length(grades_array)\n        if grades_array[i]<0\n         \
    \   grades_array[i]=grades_array[i]*(-1)\n        end\n    end\n    grades_array=sort(grades_array)\n\
    \    grades_array=grades_array[1:grades_length]\n    grades_array=join([\"A\"\
    ,\"B\",\"C-\",\"C\",\"A-\",\"D+\",\"D\",\"D-\",\"E\"],grades_array,\"\\n\")\n\
    \    return grades_array\nend\n</cell>\n<code language=julia-1.5>\n@testset \"\
    Function grades calculation\" begin\n    grades_eq=[4.0, 3, 1.7, 2, 3.5]\n   \
    \ @test grades_eq(grades) == numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]) ==\
    \ [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nend\n</cell>\n<code language=julia-1.5>\n\
    using DataFrames\n</cell>\n<code language=julia-1.5>\ndf = DataFrame(GPA = [4.0,\
    \ 3.7, 3.3, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7])\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpinb1phav.jl:55\nin expression starting at\
    \ /tmp/tmpinb1phav.jl:55\n"
  stdout: ''
  timestamp: 1660012023
- exit_code: 1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a vector of GPAs for some students and you have to write\
    \ \n    a function that can output a vector of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    \"\"\"\n    Write a function that receives a vector of GPAs and return\
    \ a vector of letter grades\n    using the following table:\n             GPA\
    \       |    Letter grade\n              4.0                A+\n            >\
    \ 3.7                A \n            > 3.3                A- \n            > 3.0\
    \                B+\n            > 2.7                B \n            > 2.3  \
    \              B-\n            > 2.0                C+\n            > 1.7    \
    \            C\n            > 1.3                C-\n            > 1.0       \
    \         D+ \n            > 0.7                D \n            > 0.0        \
    \        D-\n              0.0                E\n    \n    Example:\n    >>> grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nusing\
    \ Test\n\n@testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmplwe5uatt.jl:26\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmplwe5uatt.jl:1\n\
    in expression starting at /tmp/tmplwe5uatt.jl:1\n"
  stdout: ''
  timestamp: 1660012023
- exit_code: 1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a vector of GPAs for some students and you have to write\
    \ \n    a function that can output a vector of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grades = [abs(x) for x in grades]\n    grades_mean = mean(grades)\n  \
    \  grades_std = std(grades)\n    \n    if grades_std == 0.0\n        grades_std\
    \ += 0.1\n    end\n    \n    grades_min = 0\n    grades_max = 100\n    \n    grades_letter\
    \ = zeros(length(grades_min),1)\n    \n    grades_min = minimum(grades)\n    grades_max\
    \ = maximum(grades)\n    \n    for i=1:length(grades_min),\n        if (grades[i]\
    \ < grades_min || grades[i] > grades_max)\n            grades_letter[i] = \"E\"\
    \n        elseif grades[i] == grades_mean\n            grades_letter[i] = \"D+\"\
    \n        elseif grades[i] == grades_mean + grades_std\n            grades_letter[i]\
    \ = \"D\"\n        elseif grades[i] == grades_mean - grades_std\n            grades_letter[i]\
    \ = \"D-\"\n        elseif grades[i] == grades_mean + grades_std + grades_max\n\
    \            grades_letter[i] = \"C+\"\n        elseif grades[i] == grades_mean\
    \ - grades_std + grades_max\n            grades_letter[i] = \"C\"\n        elseif\
    \ grades[i] == grades_mean + grades_std - grades_max\n            grades_letter[i]\
    \ = \"C-\"\n        elseif grades[i] == grades_mean - grades_std - grades_max\n\
    \            grades_letter[i] = \"B+\"\n        elseif grades[i] == grades_mean\
    \ + grades_std + grades_max - grades_min\n            grades_letter[i] = \"B\"\
    \n        elseif grades[i] == grades_mean - grades_std + grades_max - grades_min\n\
    \            grades_letter[i] = \"B-\"\n        elseif grades[i] == grades_mean\
    \ + grades_std - grades_max - grades_min\n            grades_letter[i] = \"A+\"\
    \n        elseif grades[i] == grades_mean - grades_std - grades_max - grades_min\n\
    \            grades_letter[i] = \"A\"\n        elseif grades[i] == grades_mean\
    \ + grades_std + grades_max - grades_min - grades_max\n            grades_letter[i]\
    \ = \"A-\"\n        else\n            grades_letter[i] = \"X\"\n        end\n\
    \    end\n    \n    return grades_letter\nend\nusing Test\n\n@testset begin\n\n\
    candidate = numerical_letter_grade;\n\t@test(candidate([4.0, 3, 1.7, 2, 3.5])\
    \ == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2]) == [\"\
    D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0]) == [\"\
    E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\"\
    , \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid iteration specification\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4ufk9hni.jl:73\nin expression starting at\
    \ /tmp/tmp4ufk9hni.jl:73\n"
  stdout: ''
  timestamp: 1660012023
- exit_code: 1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a vector of GPAs for some students and you have to write\
    \ \n    a function that can output a vector of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n\"\"\"\nThis function will return the numerical letter grade for the grades\
    \ vector\nusing Test\n\n@testset begin\n\ncandidate = numerical_letter_grade;\n\
    \t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"\
    A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5]) == [\"\
    D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5,\
    \ 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8o3tv8rl.jl:1\nin expression starting at /tmp/tmp8o3tv8rl.jl:1\n"
  stdout: ''
  timestamp: 1660012023
- exit_code: 1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a vector of GPAs for some students and you have to write\
    \ \n    a function that can output a vector of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n\"\"\"Returns a vector of letter grades given a vector of GPAs. \"\"\"\n \
    \   grades = copy(grades)\n    grades_copy = copy(grades)\n    grades_copy[grades\
    \ < 0] = \"-\"\n    grades_copy[grades > 3] = \"D+\"\n    grades_copy[grades <=\
    \ 2] = \"C\"\n    grades_copy[grades <= 3.5] = \"C+\"\n    grades_copy[grades\
    \ <= 4] = \"B\"\n    grades_copy[grades <= 4.5] = \"B+\"\n    grades_copy[grades\
    \ <= 5] = \"A\"\n    grades_copy[grades <= 5.5] = \"A+\"\n    grades_copy[grades\
    \ <= 6] = \"A-\"\n    grades_copy[grades > 6] = \"D\"\n    grades_copy[grades\
    \ > 7] = \"D-\"\n    grades_copy[grades > 8] = \"C+\"\n    grades_copy[grades\
    \ > 9] = \"C\"\n    grades_copy[grades > 10] = \"B+\"\n    grades_copy[grades\
    \ > 11] = \"B\"\n    grades_copy[grades > 12] = \"B-\"\n    grades_copy[grades\
    \ > 13] = \"A+\"\n    grades_copy[grades > 14] = \"A\"\n    grades_copy[grades\
    \ > 15] = \"A-\"\n    grades_copy[grades > 16] = \"D+\"\n    grades_copy[grades\
    \ > 17] = \"D\"\n    grades_copy[grades > 18] = \"D-\"\n    grades_copy[grades\
    \ > 19] = \"C+\"\n    grades_copy[grades > 20] = \"C\"\n    grades_copy[grades\
    \ > 21] = \"C-\"\n    grades_copy[grades > 22] = \"B+\"\n    grades_copy[grades\
    \ > 23] = \"B\"\n    grades_copy[grades > 24] = \"B-\"\n    grades_copy[grades\
    \ > 25] = \"A+\"\n    grades_copy[grades > 26] = \"A\"\n    grades_copy[grades\
    \ > 27] = \"A-\"\n    grades_copy[grades > 28] = \"D+\"\n    grades_copy[grades\
    \ > 29] = \"D\"\n    grades_copy[grades > 30] = \"D-\"\n    grades_copy[grades\
    \ > 31] = \"C+\"\n    grades_copy[grades > 32] = \"C\"\n    grades_copy[grades\
    \ > 33] = \"C-\"\n    grades_copy[grades > 34] = \"B+\"\n    grades_copy[grades\
    \ > 35] = \"B\"\n    grades_copy[grade\nusing Test\n\n@testset begin\n\ncandidate\
    \ = numerical_letter_grade;\n\t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5])\
    \ == [\"D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprsnikgsv.jl:1\nin expression starting at /tmp/tmprsnikgsv.jl:1\n"
  stdout: ''
  timestamp: 1660012023
- exit_code: 1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a vector of GPAs for some students and you have to write\
    \ \n    a function that can output a vector of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n\"\"\"\nInput: \nusing Test\n\n@testset begin\n\ncandidate = numerical_letter_grade;\n\
    \t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"\
    A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5]) == [\"\
    D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5,\
    \ 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphpnz3o1h.jl:1\nin expression starting at /tmp/tmphpnz3o1h.jl:1\n"
  stdout: ''
  timestamp: 1660012023
- exit_code: 1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a vector of GPAs for some students and you have to write\
    \ \n    a function that can output a vector of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n \n    grades=sort(grades)\n    \n    gradelen=length(grades)\n    \n    if\
    \ gradelen==0\n        return [\"E\"]\n    end\n    \n    if gradelen==1\n   \
    \     return [\"D-\"]\n    end\n    \n    if gradelen==2\n        return [\"C-\"\
    , \"C\"]\n    end\n    \n    if gradelen==3\n        return [\"B-\", \"B\"]\n\
    \    end\n    \n    if gradelen==4\n        return [\"A-\", \"A\"]\n    end\n\
    \    \n    if gradelen==5\n        return [\"A+\", \"A\"]\n    end\n    \n   \
    \ if gradelen==6\n        return [\"D\", \"D+\", \"D-\"]\n    end\n    \n    if\
    \ gradelen==7\n        return [\"C\", \"C+\", \"C-\"]\n    end\n    \n    if gradelen==8\n\
    \        return [\"B\", \"B+\", \"B-\"]\n    end\n    \n    if gradelen==9\n \
    \       return [\"A\", \"A+\", \"A-\"]\n    end\n    \n    if gradelen==10\n \
    \       return [\"A+\", \"A\"]\n    end\n    \n    if gradelen==11\n        return\
    \ [\"C\", \"C+\", \"C-\"]\n    end\n    \n    if gradelen==12\n        return\
    \ [\"B\", \"B+\", \"B-\"]\n    end\n    \n    if gradelen==13\n        return\
    \ [\"A\", \"A+\", \"A-\"]\n    end\n    \n    if gradelen==14\n        return\
    \ [\"A+\", \"A\"]\n    end\n    \n    if gradelen==15\n        return [\"C\",\
    \ \"C+\", \"C-\"]\n    end\n    \n    if gradelen==16\n        return [\"B\",\
    \ \"B+\", \"B-\"]\n    end\n    \n    if gradelen==17\n        return [\"A\",\
    \ \"A+\", \"A-\"]\n    end\n    \n    if gradelen==18\n        return [\"A+\"\
    , \"A\"]\n    end\n    \n    if gradelen==19\n        return [\"C\", \"C+\", \"\
    C-\"]\n    end\n    \n    if gradelen==20\n        return [\"B\", \"B+\", \"B-\"\
    ]\n    end\n    \n    if gradelen==21\n        return [\"A\", \"A+\", \"A-\"]\n\
    \    end\n    \n    if gradelen==22\n        return [\"A+\", \"A\"]\n    end\n\
    \    \n    if gradelen==23\n        return [\"C\", \"C+\", \"C-\"]\n    end\n\
    \    \n    if gradelen==24\n        return [\"B\", \"B+\", \"B-\"]\n    end\n\
    \    \n    if gradelen==25\n        return [\"A\", \"A+\", \"A-\"]\n    end\n\
    \    \n    if gradelen==\nusing Test\n\n@testset begin\n\ncandidate = numerical_letter_grade;\n\
    \t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"\
    A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5]) == [\"\
    D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5,\
    \ 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7k7arnlu.jl:1\nin expression starting at /tmp/tmp7k7arnlu.jl:1\n"
  stdout: ''
  timestamp: 1660012023
- exit_code: 1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a vector of GPAs for some students and you have to write\
    \ \n    a function that can output a vector of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    if grades[1] > 3.7 && grades[1] < 3.3 && grades[2] > 3.7 && grades[2]\
    \ < 3.3 && grades[3] > 3.7 && grades[3] < 3.3 && grades[4] > 3.7 && grades[4]\
    \ < 3.3 && grades[5] > 3.7 && grades[5] < 3.3 && grades[6] > 3.7 && grades[6]\
    \ < 3.3 && grades[7] > 3.7 && grades[7] < 3.3 && grades[8] > 3.7 && grades[8]\
    \ < 3.3 && grades[9] > 3.7 && grades[9] < 3.3 \n    grades[2] =  \"A+\"\n    grades[3]\
    \ = \"A-\"\n    grades[4] = \"B+\"\n    grades[5] = \"B-\"\n    grades[6] = \"\
    B-\"\n    grades[7] = \"C+\"\n    grades[8] = \"C\"\n    grades[9] = \"C-\"\n\
    \    grades[10] = \"D+\"\n    grades[11] = \"D\"\n    grades[12] = \"D-\"\n  \
    \  grades[13] = \"E\"\n    else if grades[1] > 3.3 && grades[1] < 3.7 && grades[2]\
    \ > 3.3 && grades[2] < 3.7 && grades[3] > 3.3 && grades[3] < 3.7 && grades[4]\
    \ > 3.3 && grades[4] < 3.7 && grades[5] > 3.3 && grades[5] < 3.7 && grades[6]\
    \ > 3.3 && grades[6] < 3.7 && grades[7] > 3.3 && grades[7] < 3.7 && grades[8]\
    \ > 3.3 && grades[8] < 3.7 && grades[9] > 3.3 && grades[9] < 3.7 \n    grades[2]\
    \ = \"A\"\n    grades[3] = \"A-\"\n    grades[4] = \"B+\"\n    grades[5] = \"\
    B-\"\n    grades[6] = \"B-\"\n    grades[7] = \"C+\"\n    grades[8] = \"C\"\n\
    \    grades[9] = \"C-\"\n    grades[10] = \"D+\"\n    grades[11] = \"D\"\n   \
    \ grades[12] = \"D-\"\n    grades[13] = \"E\"\n    else if grades[1] > 3.0 &&\
    \ grades[1] < 3.3 && grades[2] > 3.0 && grades[2] < 3.3 && grades[3] > 3.0 &&\
    \ grades[3] < 3.3 && grades[4] > 3.0 && grades[4] < 3.3 && grades[5] > 3.0 &&\
    \ grades[5] < 3.3 && grades[6] > 3.0 && grades[6\nusing Test\n\n@testset begin\n\
    \ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0, 3, 1.7, 2, 3.5])\
    \ == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2]) == [\"\
    D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0]) == [\"\
    E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\"\
    , \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp95d5shfp.jl:40\nin expression starting at\
    \ /tmp/tmp95d5shfp.jl:40\n"
  stdout: ''
  timestamp: 1660012023
- exit_code: 1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a vector of GPAs for some students and you have to write\
    \ \n    a function that can output a vector of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    #code here\nend\n</cell>\n<code language=julia-1.3>\ngrade_equation(gpa_vector)\n\
    </cell>\n<text>\nPart 3: Vectorizing Functions\nAs we saw in the previous section,\
    \ Julia is very efficient at working with vectors. However, there are times when\
    \ working with vectors is inefficient. For example, consider the problem of finding\
    \ all of the primes less than $n$. One way to do this would be to create a vector\
    \ of $n^2$ Boolean values and then iterate over every value and check if it is\
    \ prime. Another way to do it would be to create a vector of all primes up to\
    \ $n$ and then find all of those that are less than $n$. This is expensive both\
    \ in memory and computation. In the example below, we will use the first approach.\
    \ We will also make use of @inbounds in the inner loop to avoid iterating over\
    \ unnecessary values.\nusing Test\n\n@testset begin\n\ncandidate = numerical_letter_grade;\n\
    \t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"\
    A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5]) == [\"\
    D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5,\
    \ 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2qra94_2.jl:29\nin expression starting at\
    \ /tmp/tmp2qra94_2.jl:29\n"
  stdout: ''
  timestamp: 1660012023
- exit_code: 1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a vector of GPAs for some students and you have to write\
    \ \n    a function that can output a vector of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    \"\"\"Given the vector of grades, \n    return the letter grades\"\"\"\
    \n    \n    grades_norm = grades - mean(grades)\n    grades_squared_norm = grades_norm\
    \ * grades_norm\n    \n    numerical_grades = zeros(1, length(grades))\n    \n\
    \    for i \u2208 1:length(grades)\n        if grades_squared_norm[i] > 4.0\n\
    \            numerical_grades[i] = \"A+\"\n        elseif grades_squared_norm[i]\
    \ > 3.0\n            numerical_grades[i] = \"A\"\n        elseif grades_squared_norm[i]\
    \ > 2.0\n            numerical_grades[i] = \"B+\"\n        elseif grades_squared_norm[i]\
    \ > 1.0\n            numerical_grades[i] = \"B\"\n        elseif grades_squared_norm[i]\
    \ > 0.7\n            numerical_grades[i] = \"B-\"\n        elseif grades_squared_norm[i]\
    \ > 0.0\n            numerical_grades[i] = \"C+\"\n        elseif grades_squared_norm[i]\
    \ > 0.0\n            numerical_grades[i] = \"C\"\n        elseif grades_squared_norm[i]\
    \ > 0.0\n            numerical_grades[i] = \"D+\"\n        elseif grades_squared_norm[i]\
    \ > 0.0\n            numerical_grades[i] = \"D\"\n        else\n            numerical_grades[i]\
    \ = \"D-\"\n        end\n    end\n    \n    return numerical_grades\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 6 errored,
    0 broken.

    in expression starting at /tmp/tmpiz_eigu6.jl:63

    '
  stdout: "test set: Error During Test at /tmp/tmpiz_eigu6.jl:66\n  Test threw exception\n\
    \  Expression: candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"\
    C\", \"A-\"]\n  UndefVarError: mean not defined\n  Stacktrace:\n   [1] numerical_letter_grade(grades::Vector{Float64})\n\
    \     @ Main /tmp/tmpiz_eigu6.jl:30\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpiz_eigu6.jl:66 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpiz_eigu6.jl:65\ntest set:\
    \ Error During Test at /tmp/tmpiz_eigu6.jl:67\n  Test threw exception\n  Expression:\
    \ candidate([1.2]) == [\"D+\"]\n  UndefVarError: mean not defined\n  Stacktrace:\n\
    \   [1] numerical_letter_grade(grades::Vector{Float64})\n     @ Main /tmp/tmpiz_eigu6.jl:30\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpiz_eigu6.jl:67 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpiz_eigu6.jl:65\ntest set:\
    \ Error During Test at /tmp/tmpiz_eigu6.jl:68\n  Test threw exception\n  Expression:\
    \ candidate([0.5]) == [\"D-\"]\n  UndefVarError: mean not defined\n  Stacktrace:\n\
    \   [1] numerical_letter_grade(grades::Vector{Float64})\n     @ Main /tmp/tmpiz_eigu6.jl:30\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpiz_eigu6.jl:68 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpiz_eigu6.jl:65\ntest set:\
    \ Error During Test at /tmp/tmpiz_eigu6.jl:69\n  Test threw exception\n  Expression:\
    \ candidate([0.0]) == [\"E\"]\n  UndefVarError: mean not defined\n  Stacktrace:\n\
    \   [1] numerical_letter_grade(grades::Vector{Float64})\n     @ Main /tmp/tmpiz_"
  timestamp: 1660012025
- exit_code: 1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a vector of GPAs for some students and you have to write\
    \ \n    a function that can output a vector of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grades_str = join(map(x -> get(x, grades), Grades), \"+\") # string for\
    \ formatting\n    return split(grades_str, \"+\") # split grades string on \"\
    +\" and return array\nend\nusing Test\n\n@testset begin\n\ncandidate = numerical_letter_grade;\n\
    \t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"\
    A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5]) == [\"\
    D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5,\
    \ 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 6 errored,
    0 broken.

    in expression starting at /tmp/tmpdeshlu8r.jl:32

    '
  stdout: "test set: Error During Test at /tmp/tmpdeshlu8r.jl:35\n  Test threw exception\n\
    \  Expression: candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"\
    C\", \"A-\"]\n  UndefVarError: Grades not defined\n  Stacktrace:\n   [1] numerical_letter_grade(grades::Vector{Float64})\n\
    \     @ Main /tmp/tmpdeshlu8r.jl:27\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpdeshlu8r.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpdeshlu8r.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpdeshlu8r.jl:36\n  Test threw exception\n  Expression:\
    \ candidate([1.2]) == [\"D+\"]\n  UndefVarError: Grades not defined\n  Stacktrace:\n\
    \   [1] numerical_letter_grade(grades::Vector{Float64})\n     @ Main /tmp/tmpdeshlu8r.jl:27\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpdeshlu8r.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpdeshlu8r.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpdeshlu8r.jl:37\n  Test threw exception\n  Expression:\
    \ candidate([0.5]) == [\"D-\"]\n  UndefVarError: Grades not defined\n  Stacktrace:\n\
    \   [1] numerical_letter_grade(grades::Vector{Float64})\n     @ Main /tmp/tmpdeshlu8r.jl:27\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpdeshlu8r.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpdeshlu8r.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpdeshlu8r.jl:38\n  Test threw exception\n  Expression:\
    \ candidate([0.0]) == [\"E\"]\n  UndefVarError: Grades not defined\n  Stacktrace:\n\
    \   [1] numerical_letter_grade(grades::Vector{Float64})\n     @ Main /tm"
  timestamp: 1660012025
- exit_code: 1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a vector of GPAs for some students and you have to write\
    \ \n    a function that can output a vector of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    if grades.length == 1\n        return [\"A+\"]\n    if grades[1] == 0.0\n\
    \        return [\"D-\"]\n    if grades[1] < 4.0\n        return [\"A-\"]\n  \
    \  if grades[1] > 3.7\n        return [\"B+\"]\n    if grades[1] > 3.3\n     \
    \   return [\"B-\"]\n    if grades[1] > 3.0\n        return [\"C+\"]\n    if grades[1]\
    \ > 2.7\n        return [\"C\"]\n    if grades[1] > 2.3\n        return [\"C-\"\
    ]\n    if grades[1] > 2.0\n        return [\"D+\"]\n    if grades[1] > 1.7\n \
    \       return [\"D\"]\n    if grades[1] > 1.0\n        return [\"E\"]\n    return\
    \ [\"D-\"]\nend\n</cell>\n<code language=julia-1.0>\ngrade_equation([4.0, 3, 1.7,\
    \ 2, 3.5])\n</cell>\n<code language=julia-1.0>\n@test grade_equation([4.0, 3,\
    \ 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n@test grade_equation([3.6,\
    \ 3.4, 3.2, 2, 3.0]) == [\"B+\", \"B\", \"C+\", \"C\", \"B-\"]\n</cell>\n<code\
    \ language=julia-1.0>\n@test numerical_letter_grade([4.0, 3, 1.7, 2, 3.5])\n</cell>\n\
    <code language=julia-1.0>\n@test numerical_letter_grade([3.6, 3.4, 3.2, 2, 3.0])\n\
    </cell>\n<code language=julia-1.0>\n@assert grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n@assert grade_equation([3.6, 3.4,\
    \ 3.2, 2, 3.0]) == [\"B+\", \"B\", \"C+\", \"C\", \"B-\"]\n</cell>\n<code language=julia-1.0>\n\
    @assert numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]\n@assert numerical_letter_grade([3.6, 3.4, 3.2, 2, 3.0]) == [\"\
    B+\", \"B\", \"C+\", \"C\", \"B-\"]\n</cell>\n<text>\n2.3 Exercise\nWrite a function\
    \ that takes an array of grades and returns the same array but with letter grades\
    \ instead of GPAs.\nExample: \ngrades = [3.4, 2.7, 2.3, 4.0, 3.3, 2.0]\nlettergrades\
    \ = letter_grades(grades)\nprintln(lettergrades)\nusing Test\n\n@testset begin\n\
    \ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0, 3, 1.7, 2, 3.5])\
    \ == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2]) == [\"\
    D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0]) == [\"\
    E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\"\
    , \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2x0vahqf.jl:51\nin expression starting at\
    \ /tmp/tmp2x0vahqf.jl:51\n"
  stdout: ''
  timestamp: 1660012024
- exit_code: -1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a vector of GPAs for some students and you have to write\
    \ \n    a function that can output a vector of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    \n    grades_sum = sum(grades)\n    \n    if grades_sum < 0.0 && grades[1]\
    \ > 0.0 || grades_sum < 0.0 && grades[2] > 0.0\n        return \"D+\"\n    end\n\
    \    if grades_sum < 0.0 && grades[1] < 0.0 || grades_sum < 0.0 && grades[2] <\
    \ 0.0\n        return \"D-\"\n    end\n    \n    if grades[1] > grades_sum &&\
    \ grades[1] > 0.0\n        return \"A+\"\n    end\n    if grades[1] < grades_sum\
    \ && grades[1] < 0.0\n        return \"A-\"\n    end\n    \n    if grades[2] >\
    \ grades_sum && grades[2] > 0.0\n        return \"B+\"\n    end\n    if grades[2]\
    \ < grades_sum && grades[2] < 0.0\n        return \"B-\"\n    end\n    \n    return\
    \ \"B\"\nend\nusing Test\n\n@testset begin\n\ncandidate = numerical_letter_grade;\n\
    \t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"\
    A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5]) == [\"\
    D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5,\
    \ 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  status: Timeout
  stderr: ''
  stdout: "test set: Error During Test at /tmp/tmpo0coo_2h.jl:58\n  Test threw exception\n\
    \  Expression: candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"\
    C\", \"A-\"]\n  MethodError: Cannot `convert` an object of type String to an object\
    \ of type Vector{String}\n  Closest candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{Vector{String}}, !Matched::LibGit2.StrArrayStruct) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LibGit2/src/strarray.jl:13\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at ~/.conda/envs/polyglot/share/julia/base/array.jl:554\n\
    \    ...\n  Stacktrace:\n   [1] numerical_letter_grade(grades::Vector{Float64})\n\
    \     @ Main /tmp/tmpo0coo_2h.jl:51\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpo0coo_2h.jl:58 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpo0coo_2h.jl:57\ntest set:\
    \ Error During Test at /tmp/tmpo0coo_2h.jl:59\n  Test threw exception\n  Expression:\
    \ candidate([1.2]) == [\"D+\"]\n  BoundsError: attempt to access 1-element Vector{Float64}\
    \ at index [2]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861 [inlined]\n\
    \   [2] numerical_letter_grade(grades::Vector{Float64})\n     @ Main /tmp/tmpo0coo_2h.jl:44\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpo0coo_2h.jl:59 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpo0coo_2h.jl:57\ntest set:\
    \ Error During Test at /tmp/tmpo0coo_2h.jl:60\n  Test threw exception\n  Expression:\
    \ candidate([0.5]) == [\"D-\"]\n  BoundsError: attempt to access 1-element Vector{Float64}\
    \ at index [2]\n  Stacktrace:\n   [1] get"
  timestamp: 1660012027
- exit_code: 1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a vector of GPAs for some students and you have to write\
    \ \n    a function that can output a vector of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grades = (grades - floor(grades)) / (ceil(grades) - floor(grades)) * 100\n\
    \    grades = 100 * (grades - min(grades))\n    grades = grades./100\n    grades\
    \ = round(grades, digits=2)\n    grades = grades..<1\n    grades = grades..>4\n\
    \    grades = grades[grades <= 0 ? 0 : 1]\n    grades = grades[grades >= 1 ? 1\
    \ : 0]\n    grades = letters(grades)\n    return grades\nend\n\"\"\"\n  Write\
    \ a function that takes in a vector of GPAs and outputs a vector of letter grades.\n\
    \  For example, if the input was [4.0, 3, 1.7, 2, 3.5], the output would be [\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"]\n\"\"\"\nusing Test\n\n@testset begin\n\n\
    candidate = numerical_letter_grade;\n\t@test(candidate([4.0, 3, 1.7, 2, 3.5])\
    \ == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2]) == [\"\
    D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0]) == [\"\
    E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\"\
    , \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid operator \"..<\" near column 21\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp24orxao_.jl:31\nin expression starting at\
    \ /tmp/tmp24orxao_.jl:31\n"
  stdout: ''
  timestamp: 1660012024
- exit_code: 1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a vector of GPAs for some students and you have to write\
    \ \n    a function that can output a vector of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grades = sort(grades)\n    for i = 1:length(grades)\n        if grades[i]\
    \ >  3.7\n            return \"A+\"\n        end\n        if grades[i] >  3.3\n\
    \            return \"A\"\n        end\n        if grades[i] >  3.0\n        \
    \    return \"B+\"\n        end\n        if grades[i] >  2.7\n            return\
    \ \"B\"\n        end\n        if grades[i] >  2.3\n            return \"B-\"\n\
    \        end\n        if grades[i] >  2.0\n            return \"C+\"\n       \
    \ end\n        if grades[i] >  1.7\n            return \"C\"\n        end\n  \
    \      if grades[i] >  1.0\n            return \"D+\"\n        end\n        if\
    \ grades[i] >  0.7\n            return \"D\"\n        end\n        if grades[i]\
    \ == 0\n            return \"E\"\n        end\n    end\n    return \"?\"\nend\n\
    </code>\n<|/ a |>\n<| c |>\nHe does **not** want to use \"if else\", he wants\
    \ to use `map`, which is basically `for loop`.\n<|/ c |>\n<| c |>\nOh.. sorry.\
    \ He wants to use a `map` function. In that case, `map` is indeed the right choice\n\
    <|/ c |>\n<| c |>\nthank you very much guys for your answers. I tried your solution\
    \ and it works. But I have a question: Do you know how to make this program work\
    \ without using for loops and if statements? I tried using if statements but it\
    \ didn't work. Thank you very much again!\n<|/ c |>\n<| a tags=julia,loops |>\n\
    For this sort of problem map may be useful. First let's define the letter grades:\n\
    <code>\ngrade_vector = [4.0, 3, 1.7, 2, 3.5]\n</code>\nThen the function letter_grade:\n\
    <code>\nusing Test\n\n@testset begin\n\ncandidate = numerical_letter_grade;\n\t\
    @test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"\
    ])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"\
    ])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7])\
    \ == [\"E\", \"D-\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptmj160l3.jl:62\nin expression starting at\
    \ /tmp/tmptmj160l3.jl:62\n"
  stdout: ''
  timestamp: 1660012024
- exit_code: 1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a vector of GPAs for some students and you have to write\
    \ \n    a function that can output a vector of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    if grades == []\n        return \"\"\n    else\n        first = grades[1]\n\
    \        second = grades[2] \n        if first < 4\n            return \"$A$\"\
    \n        end\n        if first > 3.0 and first < 3.9\n            return \"$A$\"\
    \n        end\n        if second < 4\n            return \"$B$\"\n        end\n\
    \        if second > 3.0 and second < 3.9\n            return \"$B$\"\n      \
    \  end\n        if first > 3.9 and second > 3.7\n            return \"$B$\"\n\
    \        end\n        if first > 3.9 and second < 3.7\n            return \"$B$\"\
    \n        end\n        if first < 3.9 and second < 3.3\n            return \"\
    $C$\"\n        end\n        if first < 3.9 and second > 3.3\n            return\
    \ \"$C$\"\n        end\n        if first > 3.9 and first < 3.3\n            return\
    \ \"$C$\"\n        end\n        if second < 3.9 and second > 3.3\n           \
    \ return \"$C$\"\n        end\n        if second > 3.9 and second < 3.3\n    \
    \        return \"$C$\"\n        end\n        if first > 3.3 and second < 3.7\n\
    \            return \"$C$\"\n        end\n        if first < 3.3 and second >\
    \ 3.7\n            return \"$C$\"\n        end\n        if first > 3.3 and first\
    \ < 3.7\n            return \"$C$\"\n        end\n        if second < 3.7 and\
    \ second > 3.0\n            return \"$C$\"\n        end\n        if second > 3.3\
    \ and second < 3.0\n            return \"$C$\"\n        end\n        if second\
    \ > 3.3 and second < 3.7\n            return \"$C$\"\n        end\n        if\
    \ first < 3.7 and second < 3.0\n            return \"$C$\"\n        end\n    \
    \    if first < 3.3 and second > 3.0\n            return \"$C$\"\n        end\n\
    \        if first < 3.3 and first < 3.7\n            return \"$C$\"\n        end\n\
    \        if second < 3.3 and second > 2.7\n            return \"$C$\"\n      \
    \  end\n        if second > 3.7 and second < 2.7\n            return \"$C$\"\n\
    \        end\n        if second > 3.3 and second < 2.7\n            return \"\
    $C$\"\n        end\n        if second > 3.3 and second < 3.3\n            return\
    \ \"$C$\"\n        end\n        if first > 3.7 and second < 2.3\n            return\
    \ \"$C$\"\n        end\n        if first < 3.7 and second > 2.3\n            return\
    \ \"$C$\"\n        end\n        if first < 3.7 and first < 2.3\n            return\
    \ \"$C$\"\n        end\n        if second < 2.3 and second > 2.0\n           \
    \ return \"$C$\"\n        end\n        if second > 2.7 and second < 2.0\n    \
    \        return \"$C$\"\n        end\n        if second > 2.3 and second < 2.0\n\
    \nusing Test\n\n@testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid interpolation syntax: \"$\"\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0s7mumon.jl:33\nin expression starting at\
    \ /tmp/tmp0s7mumon.jl:33\n"
  stdout: ''
  timestamp: 1660012024
- exit_code: 1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a vector of GPAs for some students and you have to write\
    \ \n    a function that can output a vector of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    \n    grades.sort!()\n    \n    letterGrades = Vector{String}(undef, length(grades))\n\
    using Test\n\n@testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpw2kf32kf.jl:26\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpw2kf32kf.jl:1\n\
    in expression starting at /tmp/tmpw2kf32kf.jl:1\n"
  stdout: ''
  timestamp: 1660012024
- exit_code: 1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a vector of GPAs for some students and you have to write\
    \ \n    a function that can output a vector of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n\"\"\"This function will use the function grade() that is defined above and\
    \ use it to \noutput a vector of letter grades for each element of the vector\
    \ grades.\"\"\"\n    grades_to_pass = grades(grade>=0)\n    letter_grades = Vector{String}(length(grades_to_pass))\n\
    \    for i in grades_to_pass\n        if grades_to_pass[i] > 0\n            letter_grades[i]\
    \ = grade(i)\n        else\n            letter_grades[i] = \"E\"\n        end\n\
    \    end\n    return letter_grades\nend\n</code>\n<|/ q dscore=0 |>\n<| c |>\n\
    Hi there! Welcome to Stack Overflow. Could you please edit your question so that\
    \ it includes the code you're having a problem with? This would help people trying\
    \ to help you. Thanks!\n<|/ c |>\n<| c |>\nThis doesn't seem like a SO question\
    \ at all. Sounds like you just need a course in Python, and a little bit of reading\
    \ about the basics of coding syntax and logic is all you need.\n<|/ c |>\n<| c\
    \ |>\nWelcome to SO. Please read [Under what circumstances may I add \u201Curgent\u201D\
    \ or other similar phrases to my question, in order to obtain faster answers?](//meta.stackoverflow.com/q/326569)\
    \ - the summary is that this is not an ideal way to address volunteers, and is\
    \ probably counterproductive to obtaining answers. Please refrain from adding\
    \ this to your questions.\n<|/ c |>\n<| c |>\nThanks for the tips ! I will keep\
    \ it in mind.\n<|/ c |>\n<| a |>\nIt's not entirely clear to me what your exact\
    \ problem is, but here are some comments regarding the code that you've written:\n\
    using Test\n\n@testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxk2zvoqx.jl:40\nin expression starting at\
    \ /tmp/tmpxk2zvoqx.jl:40\n"
  stdout: ''
  timestamp: 1660012024
- exit_code: 1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a vector of GPAs for some students and you have to write\
    \ \n    a function that can output a vector of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n\"\"\"Returns a numerical vector with the letter grades based on the GPA\n\
    \    \n    Parameters:\n    -----------\n    grades:\n        Vector of numerical\
    \ GPAs.  \nusing Test\n\n@testset begin\n\ncandidate = numerical_letter_grade;\n\
    \t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"\
    A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5]) == [\"\
    D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5,\
    \ 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpl_vy80v0.jl:1\nin expression starting at /tmp/tmpl_vy80v0.jl:1\n"
  stdout: ''
  timestamp: 1660012024
- exit_code: 1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a vector of GPAs for some students and you have to write\
    \ \n    a function that can output a vector of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n     \n    function get_grades(grade::Float64)::String\n        if grade <\
    \ 4.0\n            return \"A+\"\n            \n        else if grade > 3.0\n\
    \            return \"B+\"\n            \n        else if grade > 2.7\n      \
    \      return \"B\"\n            \n        else if grade > 2.0\n            return\
    \ \"B-\"\n            \n        else if grade > 1.7\n            return \"C+\"\
    \n            \n        else if grade > 1.0\n            return \"C\"\n      \
    \      \n        else if grade > 0.7\n            return \"C-\"\n            \n\
    \        else if grade > 0.0\n            return \"D+\"\n            \n      \
    \  else if grade > -0.7\n            return \"D\"\n            \n        else\
    \ if grade > -1.0\n            return \"D-\"\n            \n        else if grade\
    \ > -2.0\n            return \"E\"\n            \n        else if grade < -4.0\n\
    \            return \"F\"\n            \n        else if grade < -3.0\n      \
    \      return \"F+\"\n            \n        else\n            error(\"The grade\
    \ you entered is out of range.\")\n        end\n    end\n    \n    grades = sort(grades)\n\
    \    grades_str = \"\"\n    \n    for grade in grades\n        grades_str = grades_str\
    \ + get_grades(grade) + \" \"\n    end\n    \n    return grades_str\nend\n</code>\n\
    <|/ a tags=julia |>\n<| c |>\nThanks for your help.\n<|/ c |>\n<| c |>\nGlad I\
    \ helped.  If your issue was solved, I would appreciate if you marked my answer\
    \ as \"Accepted\"\n<|/ c |>\n<| c |>\nSorry, I didn't know I should do that. It\
    \ was marked now. Thanks.\n<|/ c |>\n<| c |>\nI realized I didn't really answer\
    \ your question.  I thought you wanted to know how to create the function you\
    \ wanted.  I assumed you knew how to write a function.  I guess I was wrong. \
    \ I edited my answer.  I hope it's what you are looking for.\n<|/ c |>\n<| c |>\n\
    Thank you very much. It was very helpful. I will look more into it.\n<|/ c |>\n\
    <| a dscore=1 |>\nHere is the answer. Hope this helps.\n<code>\nusing Test\n\n\
    @testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpb5oc5ckx.jl:32\nin expression starting at\
    \ /tmp/tmpb5oc5ckx.jl:32\n"
  stdout: ''
  timestamp: 1660012024
- exit_code: 1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a vector of GPAs for some students and you have to write\
    \ \n    a function that can output a vector of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    \n    \"\"\"\n    This is the vector where we store the results of the\
    \ letter grade calculation\n    It is a vector of strings. Each string has the\
    \ GPA of the student\n    next to a letter grade like A+, B, C-, C etc.\n    \n\
    \    The strings are sorted from the lowest GPA to the highest GPA.\n    \n  \
    \  We first need to calculate the GPA of the student. \n    \n    \"\"\"\n   \
    \ \n    \n    \"\"\"\n    First we create a helper function called calculate_grade\n\
    \    It takes as input the vector of grades and returns the GPA of the student\n\
    \    \n    The helper function uses the formula above. \n    \n    Once the GPA\
    \ is calculated, we use the helper function to create a vector\n    with the results\
    \ from the formula above. \n    \n    Once the vector of results is created, we\
    \ sort it from the lowest GPA to the highest GPA.\n    \n    The final vector\
    \ will contain the results of the letter grade calculation\n    \n    \n    \n\
    \    \"\"\"\n    \n    function calculate_grade(grades::Vector{Float64})::Float64\n\
    \        \n        \"\"\"\n        Helper function - calculates the GPA of a given\
    \ vector\n        \n        Input: vector of grades\n        Output: GPA of a\
    \ given vector\n        \n        \"\"\"\n        \n        \n        \n     \
    \   \n    \n    \"\"\"\n    Calculates the GPA of the vector from the formula\
    \ above\n    \n    \n    \"\"\"\n    gpa = calculate_grade(grades)\n    \n   \
    \ \n    \"\"\"\n    Creates a vector of strings based on the results of the letter\
    \ grade calculation.\n    \n    \n    \"\"\"\n    \n    grades = collect(grades)\n\
    \    \n    \n    \"\"\"\n    Creates the vector containing the letter grade calculations\n\
    \    \n    \n    \"\"\"\n    \n    grades_sorted = sort!(grades)\n    \n    \n\
    \    \"\"\"\n    Creates an empty vector to hold the results\n    \n    \n   \
    \ \"\"\"\n    \n    results = Vector{String}()\n    \n    \n    \"\"\"\n    Calculates\
    \ the letter grades\n    \n    \n    \"\"\"\n    for grade in grades_sorted\n\
    \        \n        if grade >= gpa\n        \n            append!(results, \"\
    A+\")\n        \n        elsif grade >= gpa - 0.1\n        \n            append!(results,\
    \ \"A\")\n        \n        elsif grade >= gpa - 0.2\n        \n            append!(results,\
    \ \"A-\")\n        \n        elsif grade >= gpa - 0.3\n        \n            append!(results,\
    \ \"B+\")\n        \n        elsif grade >= gpa - 0.4\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0, 3, 1.7,\
    \ 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"grade\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpitreto59.jl:117\nin expression starting at /tmp/tmpitreto59.jl:117\n"
  stdout: ''
  timestamp: 1660012024
- exit_code: 1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a vector of GPAs for some students and you have to write\
    \ \n    a function that can output a vector of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    \"\"\"This function takes an array of GPAs and outputs a vector of letter\
    \ grades\"\"\"\n    num_grades = length(grades)\n    letter_grades = Array{String,\
    \ 1}()\n    \n    for i=1:num_grades\n        diff = abs(grades[i] - 4.0)\n  \
    \      \n        if diff > 3.0 \n            letter_grades = [letter_grades, \"\
    B-\"]\n        elseif diff > 2.7 \n            letter_grades = [letter_grades,\
    \ \"B\"]\n        elseif diff > 2.0 \n            letter_grades = [letter_grades,\
    \ \"B-\"]\n        elseif diff > 1.7 \n            letter_grades = [letter_grades,\
    \ \"C\"]\n        elseif diff > 1.0 \n            letter_grades = [letter_grades,\
    \ \"C-\"]\n        elseif diff > 0.7 \n            letter_grades = [letter_grades,\
    \ \"C+\"]\n        elseif diff > 0.3 \n            letter_grades = [letter_grades,\
    \ \"C\"]\n        elseif diff > 0.0 \n            letter_grades = [letter_grades,\
    \ \"C+\"]\n        elseif diff < 0.3 \n            letter_grades = [letter_grades,\
    \ \"D-\"]\n        elseif diff < 0.0 \n            letter_grades = [letter_grades,\
    \ \"D-\"]\n        else\n            letter_grades = [letter_grades, \"D\"]\n\
    \        end\n    end\n    \n    return letter_grades\nend\n</code>\n<|/ a tags=julia,arrays\
    \ |>\n<| a tags=julia,arrays dscore=0 |>\nAnother approach that seems to work\
    \ well:\n<code>\nusing Test\n\n@testset begin\n\ncandidate = numerical_letter_grade;\n\
    \t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"\
    A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5]) == [\"\
    D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5,\
    \ 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp83vgzp_l.jl:61\nin expression starting at\
    \ /tmp/tmp83vgzp_l.jl:61\n"
  stdout: ''
  timestamp: 1660012025
- exit_code: 1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a vector of GPAs for some students and you have to write\
    \ \n    a function that can output a vector of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    \nend\n</code>\n<|/ q |>\n<| c |>\nYou haven't asked a question, and you\
    \ haven't shown any effort to solve the problem. See [ask].\n<|/ c |>\n<| c |>\n\
    Your question is very vague, and your code is not minimal enough. Where is your\
    \ problem? What is your question?\n<|/ c |>\n<| c |>\nYeah i know but i am new\
    \ in stack overflow, and i don't know what should i do, i want to write a function\
    \ that can return a string with a given grade and letter grade\n<|/ c |>\n<| c\
    \ |>\nI edited the question with the code i wrote so far\n<|/ c |>\n<| c |>\n\
    This code doesn't make any sense. You are trying to read a line from file using\
    \ `readline()`, but then you are also trying to read the same line again. What\
    \ is the purpose of `readline()` here?\n<|/ c |>\n<| a tags=julia,function dscore=0\
    \ |>\nHere is how I would write the function\n<code>\nusing Test\n\n@testset begin\n\
    \ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0, 3, 1.7, 2, 3.5])\
    \ == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2]) == [\"\
    D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0]) == [\"\
    E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\"\
    , \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyf1g3ejg.jl:29\nin expression starting at\
    \ /tmp/tmpyf1g3ejg.jl:29\n"
  stdout: ''
  timestamp: 1660012025
- exit_code: 1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a vector of GPAs for some students and you have to write\
    \ \n    a function that can output a vector of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grades_sorted = sort(grades)\n    letter_grades = []\n    for grade in\
    \ grades_sorted\n        if grade > 3.7\n            letter_grades.push(\"A+\"\
    )\n        elseif grade > 3.3\n            letter_grades.push(\"A-\")\n      \
    \  elseif grade > 3.0\n            letter_grades.push(\"B+\")\n        elseif\
    \ grade > 2.7\n            letter_grades.push(\"B\")\n        elseif grade > 2.3\n\
    \            letter_grades.push(\"B-\")\n        elseif grade > 2.0\n        \
    \    letter_grades.push(\"C+\")\n        elseif grade > 1.7\n            letter_grades.push(\"\
    C\")\n        elseif grade > 1.3\n            letter_grades.push(\"C-\")\n   \
    \     elseif grade > 1.0\n            letter_grades.push(\"D+\")\n        elseif\
    \ grade > 0.7\n            letter_grades.push(\"D\")\n        elseif grade > 0.0\n\
    \            letter_grades.push(\"D-\")\n        else\n            letter_grades.push(\"\
    E\")\n        end\n    end\n    return letter_grades\nend\n</code>\n<|/ q |>\n\
    <| c |>\nIt would help if you provided an example of input data and expected output.\n\
    <|/ c |>\n<| c |>\nIt would be better to have a function `grade_equation` that\
    \ returns the grades. Then you can simply call it and pass the student grades\
    \ and it will return the grades.\n<|/ c |>\n<| c |>\nAlso, please provide examples\
    \ of input and output so that we can understand what are you asking for.\n<|/\
    \ c |>\n<| a |>\nYour input data has two issues: \nusing Test\n\n@testset begin\n\
    \ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0, 3, 1.7, 2, 3.5])\
    \ == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2]) == [\"\
    D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0]) == [\"\
    E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\"\
    , \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmph18wu9nz.jl:58\nin expression starting at\
    \ /tmp/tmph18wu9nz.jl:58\n"
  stdout: ''
  timestamp: 1660012025
- exit_code: 1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a vector of GPAs for some students and you have to write\
    \ \n    a function that can output a vector of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n\"\"\"Calculate the numerical grades from vector grades\"\"\"\n    \n    return\
    \ [\"A+\" if grade > 3.5 || grade < 3 \n         else \"A-\" if grade > 3 \n \
    \        else \"B+\" if grade > 2.5 || grade < 2 \n         else \"B\" if grade\
    \ > 2 \n         else \"B-\" if grade > 1.5 || grade < 1 \n         else \"C+\"\
    \ if grade > 1.3 || grade < 1 \n         else \"C\" if grade > 1 \n         else\
    \ \"C-\" if grade > 0.7 || grade < 0 \n         else \"D+\" if grade > 0.7 ||\
    \ grade < 0 \n         else \"D\" if grade > 0 \n         else \"D-\" if grade\
    \ < 0 \n         else \"E\" \n         for grade in grades]\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"if\" at /tmp/tmpoj5igb9c.jl:29 expected \"\
    end\", got \"if\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpoj5igb9c.jl:30\n\
    in expression starting at /tmp/tmpoj5igb9c.jl:30\n"
  stdout: ''
  timestamp: 1660012024
- exit_code: 1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a vector of GPAs for some students and you have to write\
    \ \n    a function that can output a vector of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n\"\"\"\nCalculate the letter grade based on the gpas given\n\"\"\"\n    #\
    \ define an emptly list\n    gradeLetters::Vector{String} = []\n    gradeSum =\
    \ 0.0\n    # iterate through the list\n    for grade in grades\n        # compute\
    \ grades sum\n        gradeSum += grade\n        # compute gpa for the grade\n\
    \        gpa = gradeSum / (4.0 * 3.0) \n        # append letter grades\n     \
    \   gradeLetters.append(letterGrade(gpa))\n    end\n    return gradeLetters\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 6 errored,
    0 broken.

    in expression starting at /tmp/tmpq51w0ark.jl:46

    '
  stdout: "test set: Error During Test at /tmp/tmpq51w0ark.jl:49\n  Test threw exception\n\
    \  Expression: candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"\
    C\", \"A-\"]\n  type Array has no field append\n  Stacktrace:\n   [1] getproperty\n\
    \     @ ./Base.jl:42 [inlined]\n   [2] numerical_letter_grade(grades::Vector{Float64})\n\
    \     @ Main /tmp/tmpq51w0ark.jl:40\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpq51w0ark.jl:49 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpq51w0ark.jl:48\ntest set:\
    \ Error During Test at /tmp/tmpq51w0ark.jl:50\n  Test threw exception\n  Expression:\
    \ candidate([1.2]) == [\"D+\"]\n  type Array has no field append\n  Stacktrace:\n\
    \   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] numerical_letter_grade(grades::Vector{Float64})\n\
    \     @ Main /tmp/tmpq51w0ark.jl:40\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpq51w0ark.jl:50 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpq51w0ark.jl:48\ntest set:\
    \ Error During Test at /tmp/tmpq51w0ark.jl:51\n  Test threw exception\n  Expression:\
    \ candidate([0.5]) == [\"D-\"]\n  type Array has no field append\n  Stacktrace:\n\
    \   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] numerical_letter_grade(grades::Vector{Float64})\n\
    \     @ Main /tmp/tmpq51w0ark.jl:40\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpq51w0ark.jl:51 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpq51w0ark.jl:48\ntest set:\
    \ Error During Test at /tmp/tmpq51w0ark.jl:52\n  Test threw exception\n  Expression:\
    \ candidat"
  timestamp: 1660012027
- exit_code: 1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a vector of GPAs for some students and you have to write\
    \ \n    a function that can output a vector of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n\"\"\"\nExample 2:\n>>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n[\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n\"\"\"\n\"\"\"\n## Solution 1\n\"\"\"\nusing Test\n\
    \n@testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpdmay_nqt.jl:26\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpdmay_nqt.jl:1\n\
    in expression starting at /tmp/tmpdmay_nqt.jl:1\n"
  stdout: ''
  timestamp: 1660012025
- exit_code: 1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a vector of GPAs for some students and you have to write\
    \ \n    a function that can output a vector of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    \"\"\"\n    Arguments:\n    grades        Array of GPA values \nusing\
    \ Test\n\n@testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgrxwps40.jl:1\nin expression starting at /tmp/tmpgrxwps40.jl:1\n"
  stdout: ''
  timestamp: 1660012024
- exit_code: 1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a vector of GPAs for some students and you have to write\
    \ \n    a function that can output a vector of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grade = grades[end]\n    if grade > 4.7\n        return \"D+\"\n    elsif\
    \ grade > 4.3\n        return \"D\"\n    elsif grade > 4.0\n        return \"\
    C+\"\n    elsif grade > 3.7\n        return \"C\"\n    elsif grade > 3.3\n   \
    \     return \"C-\"\n    elsif grade > 3.0\n        return \"B+\"\n    elsif grade\
    \ > 2.7\n        return \"B\"\n    elsif grade > 2.3\n        return \"B-\"\n\
    \    elsif grade > 2.0\n        return \"A+\"\n    elsif grade > 1.7\n       \
    \ return \"A\"\n    elsif grade > 1.3\n        return \"A-\"\n    elsif grade\
    \ > 1.0\n        return \"F\"\n    elsif grade > 0.0\n        return \"F-\"\n\
    \    else\n        return \"E\"\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = numerical_letter_grade;\n\t@test(candidate([4.0, 3, 1.7, 2, 3.5])\
    \ == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2]) == [\"\
    D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0]) == [\"\
    E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\"\
    , \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"grade\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpmpdf7ls8.jl:30\nin expression starting at /tmp/tmpmpdf7ls8.jl:30\n"
  stdout: ''
  timestamp: 1660012025
- exit_code: 1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a vector of GPAs for some students and you have to write\
    \ \n    a function that can output a vector of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grades = sort(grades)\n    \n    if grades[1] > grades[2] && grades[1]\
    \ > grades[3] && grades[1] > grades[4] && grades[1] > grades[5] && grades[1] >\
    \ grades[6] && grades[1] > grades[7] && grades[1] > grades[8] && grades[1] > grades[9]\
    \ && grades[1] > grades[10] && grades[1] > grades[11] && grades[1] > grades[12]\
    \ && grades[1] > grades[13] && grades[1] > grades[14] && grades[1] > grades[15]\
    \ && grades[1] > grades[16] && grades[1] > grades[17] && grades[1] > grades[18]\n\
    \        return[\"A+\"]\n    else if grades[1] > grades[2] && grades[1] > grades[3]\
    \ && grades[1] > grades[4] && grades[1] > grades[5] && grades[1] > grades[6] &&\
    \ grades[1] > grades[7] && grades[1] > grades[8] && grades[1] > grades[9] && grades[1]\
    \ > grades[10] && grades[1] > grades[11] && grades[1] > grades[12] && grades[1]\
    \ > grades[13] && grades[1] > grades[14] && grades[1] > grades[15] && grades[1]\
    \ > grades[16] && grades[1] > grades[17] && grades[1] > grades[18] && grades[1]\
    \ > grades[19]\n        return[\"A\"]\n    else if grades[1] > grades[2] && grades[1]\
    \ > grades[3] && grades[1] > grades[4] && grades[1] > grades[5] && grades[1] >\
    \ grades[6] && grades[1] > grades[7] && grades[1] > grades[8] && grades[1] > grades[9]\
    \ && grades[1] > grades[10] && grades[1] > grades[11] && grades[1] > grades[12]\
    \ && grades[1] > grades[13] && grades[1] > grades[14] && grades[1] > grades[15]\
    \ && grades[1] > grades[16] && grades[1] > grades[17] && grades[1] > grades[18]\
    \ && grades[1] > grades[19] && grades[1] > grades[20]\n        return[\"A-\"]\n\
    \    else if grades[1] > grades[2] && grades[1] > grades[3] && grades[1] > grades[4]\
    \ && grades[1] > grades[5] && grades[1] > grades[6] && grades[1] > grades[7] &&\
    \ grades[1] > grades[8] && grades[1] > grades[9] && grades[1] > grades[10] &&\
    \ grades[1] > grades[11] && grades[1] > grades[12] && grades[1] > grades[13] &&\
    \ grades[1] > grades[14] && grades[1] > grades[15] && grades[1]\nusing Test\n\n\
    @testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmputikyehu.jl:31\nin expression starting at\
    \ /tmp/tmputikyehu.jl:31\n"
  stdout: ''
  timestamp: 1660012025
- exit_code: 1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a vector of GPAs for some students and you have to write\
    \ \n    a function that can output a vector of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    \"\"\"\n    This function takes a list of grades, for example: [4.0, 3,\
    \ 1.7, 2, 3.5]\n    and produces [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \"\
    \"\"\n    grades.sort()\n    grade = grades[1]\n    if grade == 0.0 : return [\"\
    D-\"]\n    if grade < 2.0 : return [\"B+\"]\n    if grade < 3.0 : return [\"B\"\
    ]\n    if grade < 4.0 : return [\"A-\"]\n    if grade < 5.0 : return [\"A-\"]\n\
    \    if grade < 6.0 : return [\"A-\"]\n    if grade < 7.0 : return [\"A-\"]\n\
    \    if grade < 8.0 : return [\"A-\"]\n    if grade < 9.0 : return [\"A-\"]\n\
    \    if grade < 10.0 : return [\"A-\"]\n    if grade < 11.0 : return [\"A-\"]\n\
    \    if grade < 12.0 : return [\"A-\"]\n    if grade < 13.0 : return [\"A-\"]\n\
    \    if grade < 14.0 : return [\"A-\"]\n    if grade < 15.0 : return [\"A-\"]\n\
    \    if grade < 16.0 : return [\"A-\"]\n    if grade < 17.0 : return [\"A-\"]\n\
    \    if grade < 18.0 : return [\"A-\"]\n    if grade < 19.0 : return [\"A-\"]\n\
    \    if grade < 20.0 : return [\"A-\"]\n    if grade < 21.0 : return [\"A-\"]\n\
    \    if grade < 22.0 : return [\"A-\"]\n    if grade < 23.0 : return [\"A-\"]\n\
    \    if grade < 24.0 : return [\"A-\"]\n    if grade < 25.0 : return [\"A-\"]\n\
    \    if grade < 26.0 : return [\"A-\"]\n    if grade < 27.0 : return [\"A-\"]\n\
    \    if grade < 28.0 : return [\"A-\"]\n    if grade < 29.0 : return [\"A-\"]\n\
    \    if grade < 30.0 : return [\"A-\"]\n    if grade < 31.0 : return [\"A-\"]\n\
    \    if grade < 32.0 : return [\"A-\"]\n    if grade < 33.0 : return [\"A-\"]\n\
    \    if grade < 34.0 : return [\"A-\"]\n    if grade < 35.0 : return [\"A-\"]\n\
    \    if grade < 36.0 : return [\"A-\"]\n    if grade < 37.0 : return [\"A-\"]\n\
    \    if grade < 38.0 : return [\"A-\"]\n    if grade < 39.0 : return [\"A-\"]\n\
    \    if grade < 40.0 : return [\"A-\"]\n    if grade < 41.0 : return [\"A-\"]\n\
    \    if grade < 42.0 : return [\"A-\"]\nusing Test\n\n@testset begin\n\ncandidate\
    \ = numerical_letter_grade;\n\t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5])\
    \ == [\"D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmqulbuwu.jl:1\nin expression starting at /tmp/tmpmqulbuwu.jl:1\n"
  stdout: ''
  timestamp: 1660012025
- exit_code: 1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a vector of GPAs for some students and you have to write\
    \ \n    a function that can output a vector of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    \n    # Initialize grades into a vector\n    grades::Vector{String} =\
    \ []\n    \n    # Initialize grades into the vector grades\n    for grade in grades\n\
    \        if grade < 4.0\n            grade = \"A+\"\n        elseif grade > 3.7\n\
    \            grade = \"A\"\n        elseif grade > 3.3\n            grade = \"\
    A-\"\n        elseif grade > 3.0\n            grade = \"B+\"\n        elseif grade\
    \ > 2.7\n            grade = \"B\"\n        elseif grade > 2.3\n            grade\
    \ = \"B-\"\n        elseif grade > 2.0\n            grade = \"C+\"\n        elseif\
    \ grade > 1.7\n            grade = \"C\"\n        elseif grade > 1.3\n       \
    \     grade = \"C-\"\n        elseif grade > 1.0\n            grade = \"D+\"\n\
    \        elseif grade > 0.7\n            grade = \"D\"\n        elseif grade >\
    \ 0.0\n            grade = \"D-\"\n        else\n            grade = \"E\"\n \
    \       end\n        \n        push!(grades, grade)\n    end\n    \n    return\
    \ grades\nend\n</cell>\n<text>\nSolution\nWrite a function that takes in a vector\
    \ of GPAs and returns a vector of letter grades using the table above.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfbuwli3f.jl:66\nin expression starting at\
    \ /tmp/tmpfbuwli3f.jl:66\n"
  stdout: ''
  timestamp: 1660012026
- exit_code: 1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a vector of GPAs for some students and you have to write\
    \ \n    a function that can output a vector of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    # Your code goes here!\n    # Example: \n    #grades = [4.0, 3, 1.7, 2,\
    \ 3.5]\n    # return [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    if grades[1]\
    \ > grades[0]\n        return \"A+\" \n    elseif grades[1] < grades[0]\n    \
    \    return \"B\"\n    elseif grades[2] > grades[1]\n        return \"C+\"\n \
    \   elseif grades[2] < grades[1]\n        return \"C\"\n    elseif grades[3] >\
    \ grades[2]\n        return \"C-\"\n    elseif grades[3] < grades[2]\n       \
    \ return \"C\"\n    elseif grades[4] > grades[3]\n        return \"A-\"\n    elseif\
    \ grades[4] < grades[3]\n        return \"A\"\n    elseif grades[5] > grades[4]\n\
    \        return \"B+\"\n    elseif grades[5] < grades[4]\n        return \"B\"\
    \n    elseif grades[6] > grades[5]\n        return \"B-\"\n    elseif grades[6]\
    \ < grades[5]\n        return \"B\"\n    elseif grades[7] > grades[6]\n      \
    \  return \"C+\"\n    elseif grades[7] < grades[6]\n        return \"C\"\n   \
    \ elseif grades[8] > grades[7]\n        return \"C-\"\n    elseif grades[8] <\
    \ grades[7]\n        return \"C\"\n    elseif grades[9] > grades[8]\n        return\
    \ \"A-\"\n    elseif grades[9] < grades[8]\n        return \"A\"\n    elseif grades[10]\
    \ > grades[9]\n        return \"B+\"\n    elseif grades[10] < grades[9]\n    \
    \    return \"B\"\n    elseif grades[11] > grades[10]\n        return \"B-\"\n\
    \    elseif grades[11] < grades[10]\n        return \"B\"\n    elseif grades[12]\
    \ > grades[11]\n        return \"C+\"\n    elseif grades[12] < grades[11]\n  \
    \      return \"C\"\n    elseif grades[13] > grades[12]\n        return \"C-\"\
    \n    elseif grades[13] < grades[12]\n        return \"C\"\n    elseif grades[14]\
    \ > grades[13]\n        return \"A-\"\n    elseif grades[14] < grades[13]\n  \
    \      return \"A\"\n    elseif grades[15] > grades[14]\n        return \"B+\"\
    \n    elseif grades[15] < grades[14]\n        return \"B\"\n    elseif grades[16]\
    \ > grades[15]\n        return \"B-\"\n    elseif grades[16] < grades[15]\n  \
    \      return \"B\"\n    elseif grades[17] > grades[16]\n        return \"C+\"\
    \n    elseif grades[17] < grades[16]\n        return \"C\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0, 3, 1.7,\
    \ 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbmuoedg7.jl:1\nin expression starting at /tmp/tmpbmuoedg7.jl:1\n"
  stdout: ''
  timestamp: 1660012026
- exit_code: 1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a vector of GPAs for some students and you have to write\
    \ \n    a function that can output a vector of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n\"\"\"Write a function that takes in grades and gives you a letter grade \n\
    \    according to the given table: \n    \n    GPA       |    Letter grade\n \
    \       4.0                A+\n        3.7                A \n        3.3    \
    \            A- \n        3.0                B+\n        2.7                B\
    \ \n        2.3                B-\n        2.0                C+\n        1.7\
    \                C\n        1.3                C-\n        1.0               \
    \ D+ \n        0.7                D \n        0.0                D-\n        0.0\
    \                E\n    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2,\
    \ 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n    Args:\n    grades\
    \ (vector): vector of grades\n    \n    Returns:\n    string: the letter grade\
    \ for each element of grades\n    \n    Raises:\n    ValueError: grades must be\
    \ a vector\n    \n    \"\"\"\n    \n    \n    if length(grades) != length(grades)\n\
    \        throw(ArgumentError(\"grades must be a vector\"))\n    end\nusing Test\n\
    \n@testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp2ij8vx6m.jl:26\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp2ij8vx6m.jl:1\n\
    in expression starting at /tmp/tmp2ij8vx6m.jl:1\n"
  stdout: ''
  timestamp: 1660012026
- exit_code: 1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a vector of GPAs for some students and you have to write\
    \ \n    a function that can output a vector of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grades = sort(grades)\n    letter_grade = [\"A+\", \"A\", \"A-\", \"B+\"\
    , \"B\", \"B-\", \"C+\", \"C\", \"C-\", \"D+\", \"D\", \"D-\", \"E\"]\n    idx\
    \ = 0\n    for x in grades\n        if x > 3.0 # grades > 3.0 will be converted\
    \ to A+\n            idx += 1\n            letter_grade[idx] = \"A+\"\n      \
    \  end\n        if x > 2.7 # grades > 2.7 will be converted to B\n           \
    \ idx += 1\n            letter_grade[idx] = \"B\"\n        end\n        if x >\
    \ 2.3 # grades > 2.3 will be converted to B-\n            idx += 1\n         \
    \   letter_grade[idx] = \"B-\"\n        end\n        if x > 2.0 # grades > 2.0\
    \ will be converted to C+\n            idx += 1\n            letter_grade[idx]\
    \ = \"C+\"\n        end\n        if x > 1.7 # grades > 1.7 will be converted to\
    \ C\n            idx += 1\n            letter_grade[idx] = \"C\"\n        end\n\
    \        if x > 1.3 # grades > 1.3 will be converted to C-\n            idx +=\
    \ 1\n            letter_grade[idx] = \"C-\"\n        end\n        if x > 1.0 #\
    \ grades > 1.0 will be converted to D+ \n            idx += 1\n            letter_grade[idx]\
    \ = \"D+\"\n        end\n        if x > 0.7\n            idx += 1\n          \
    \  letter_grade[idx] = \"D\"\n        end\n        if x > 0.0\n            idx\
    \ += 1\n            letter_grade[idx] = \"D-\"\n        end\n    end\n    letter_grade[idx]\
    \ = \"D\"\n    return letter_grade\nend\n</cell>\n<text>\n2. Now that you have\
    \ the code for the grading function, you can call it in the cell below to check\
    \ it out on the provided test case. We'll run your function on the example test\
    \ case that you provided to ensure you were able to pass all of the test cases.\n\
    using Test\n\n@testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzrcxsglc.jl:71\nin expression starting at\
    \ /tmp/tmpzrcxsglc.jl:71\n"
  stdout: ''
  timestamp: 1660012026
- exit_code: 1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a vector of GPAs for some students and you have to write\
    \ \n    a function that can output a vector of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    \"\"\"\n    Implement function below\n    \"\"\"\n    grades = sort(grades)\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n    grades = grades[2:end]\n\
    \    grades = grades[2:end]\n    grades = grades[2:end]\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0, 3, 1.7,\
    \ 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp69b8qox4.jl:26\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp69b8qox4.jl:1\n\
    in expression starting at /tmp/tmp69b8qox4.jl:1\n"
  stdout: ''
  timestamp: 1660012026
- exit_code: 1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a vector of GPAs for some students and you have to write\
    \ \n    a function that can output a vector of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n\"\"\"\nThis function computes the letter grades using the formula above\n\
    \"\"\"\n    letters = Vector{String}(undef,0)\n    \n    gpa = sum(grades)\n \
    \   \n    if gpa<=0\n        return letters \n    \n    if gpa<=3.6\n        letters[1]\
    \ = \"A+\"\n    \n    if gpa>3.6 && gpa<=4.0 \n        letters[1] = \"A\"\n  \
    \      letters[2] = \"A-\"\n    \n    if gpa>4.0 && gpa<=4.7\n        letters[2]\
    \ = \"B+\"\n        letters[3] = \"B\"\n    \n    if gpa>4.7 && gpa<=5.3\n   \
    \     letters[2] = \"B-\"\n    \n    if gpa>5.3 && gpa<=5.9 \n        letters[3]\
    \ = \"C+\"\n        letters[4] = \"C\"\n    \n    if gpa>5.9 && gpa<=6.5\n   \
    \     letters[3] = \"C-\"\n    \n    if gpa>6.5 && gpa<=6.7\n        letters[4]\
    \ = \"D+\"\n        letters[5] = \"D\"\n    \n    if gpa>6.7 && gpa<=6.9\n   \
    \     letters[4] = \"D-\"\n    \n    if gpa>6.9\n        letters[5] = \"E\"\n\
    \    \n    return letters\nend\nusing Test\n\n@testset begin\n\ncandidate = numerical_letter_grade;\n\
    \t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"\
    A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5]) == [\"\
    D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5,\
    \ 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqkwaxxc2.jl:1\nin expression starting at /tmp/tmpqkwaxxc2.jl:1\n"
  stdout: ''
  timestamp: 1660012026
- exit_code: 1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a vector of GPAs for some students and you have to write\
    \ \n    a function that can output a vector of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n\"\"\"\nYour task is to write the function numerical_letter_grade that outputs\
    \ a\nvector of letter grades using the table above.\n    Arguments:\n        grades\
    \  (1 x n) vector of GPAs, where n is the number of students\nusing Test\n\n@testset\
    \ begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0, 3, 1.7,\
    \ 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6j4hh_4j.jl:1\nin expression starting at /tmp/tmp6j4hh_4j.jl:1\n"
  stdout: ''
  timestamp: 1660012026
- exit_code: -1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a vector of GPAs for some students and you have to write\
    \ \n    a function that can output a vector of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grades = sort(grades)\n    grade_point = grades[1]\n    letters = \"\"\
    \n    if grade_point >= 3.0 \n        letters = \"A+\"\n    elseif grade_point\
    \ >= 2.0\n        letters = \"A\"\n    elseif grade_point >= 1.0\n        letters\
    \ = \"B+\"\n    elseif grade_point >= 0.7\n        letters = \"B\"\n    elseif\
    \ grade_point >= 1.0\n        letters = \"C+\"\n    elseif grade_point >= 1.0\n\
    \        letters = \"C\"\n    elseif grade_point >= 0.5\n        letters = \"\
    D+\"\n    elseif grade_point >= 0.0\n        letters = \"D\"\n    elseif grade_point\
    \ >= 0.0\n        letters = \"E\"\n    end\n    return letters\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  status: Timeout
  stderr: 'ERROR: '
  stdout: "test set: Error During Test at /tmp/tmp7mbo88rn.jl:56\n  Test threw exception\n\
    \  Expression: candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"\
    C\", \"A-\"]\n  MethodError: Cannot `convert` an object of type String to an object\
    \ of type Vector{String}\n  Closest candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{Vector{String}}, !Matched::LibGit2.StrArrayStruct) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LibGit2/src/strarray.jl:13\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at ~/.conda/envs/polyglot/share/julia/base/array.jl:554\n\
    \    ...\n  Stacktrace:\n   [1] numerical_letter_grade(grades::Vector{Float64})\n\
    \     @ Main /tmp/tmp7mbo88rn.jl:49\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp7mbo88rn.jl:56 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp7mbo88rn.jl:55\ntest set:\
    \ Error During Test at /tmp/tmp7mbo88rn.jl:57\n  Test threw exception\n  Expression:\
    \ candidate([1.2]) == [\"D+\"]\n  MethodError: Cannot `convert` an object of type\
    \ String to an object of type Vector{String}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::LinearAlgebra.Factorization) where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{Vector{String}}, !Matched::LibGit2.StrArrayStruct) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LibGit2/src/strarray.jl:13\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at ~/.conda/envs/polyglot/share/julia/base/array.jl:554\n\
    \    ...\n  Stacktrace:\n   [1] numerical_letter_grade(grades::Vector{Float64})\n\
    \     @ Main /tmp/tmp7mbo88rn.jl:49\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [in"
  timestamp: 1660012030
- exit_code: 1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a vector of GPAs for some students and you have to write\
    \ \n    a function that can output a vector of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    \n    grades = grades[2:end]\n    grades.sort()\n    grades = grades[2:end]\n\
    using Test\n\n@testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp4o75kn43.jl:26\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp4o75kn43.jl:1\n\
    in expression starting at /tmp/tmp4o75kn43.jl:1\n"
  stdout: ''
  timestamp: 1660012026
- exit_code: 1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a vector of GPAs for some students and you have to write\
    \ \n    a function that can output a vector of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grade_vector = Vector{String}(length(grades))\n    for i = 1:length(grades)\n\
    \        if grades[i] > 3.7\n            grade_vector[i] = \"A+\"\n        elif\
    \ grades[i] > 3.3\n            grade_vector[i] = \"A-\"\n        elif grades[i]\
    \ > 3\n            grade_vector[i] = \"B+\"\n        elif grades[i] > 2.7\n  \
    \          grade_vector[i] = \"B\"\n        elif grades[i] > 2.3\n           \
    \ grade_vector[i] = \"B-\"\n        elif grades[i] > 2\n            grade_vector[i]\
    \ = \"C+\"\n        elif grades[i] > 1.7\n            grade_vector[i] = \"C\"\n\
    \        elif grades[i] > 1.3\n            grade_vector[i] = \"C-\"\n        elif\
    \ grades[i] > 1\n            grade_vector[i] = \"D+\"\n        elif grades[i]\
    \ > 0.7\n            grade_vector[i] = \"D\"\n        else\n            grade_vector[i]\
    \ = \"D-\"\n        end\n    end\n    return grade_vector\nend\n</cell>\n<text>\n\
    Question 7\nusing Test\n\n@testset begin\n\ncandidate = numerical_letter_grade;\n\
    \t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"\
    A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5]) == [\"\
    D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5,\
    \ 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"grades\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmploozfy_o.jl:31\nin expression starting at /tmp/tmploozfy_o.jl:31\n"
  stdout: ''
  timestamp: 1660012026
- exit_code: 1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a vector of GPAs for some students and you have to write\
    \ \n    a function that can output a vector of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grades = grades[:]\n    grades.sort!()\n    sorted_index = [i for (i,\
    \ grade) in enumerate(grades) if grade > 0]\n    sorted_index = sorted_index[reverse(sorted_index)]\n\
    \    \n    if length(sorted_index) > 1\n        return fill(\" \", length(grades)-length(sorted_index)-1)\
    \ => [fill(\" \", length(grades)-length(sorted_index)-1)]\n    end\n    \n   \
    \ letter_grade = grades[sorted_index[1]]\n    \n    grades_to_append = grades[2:end]\n\
    \    for i = length(grades_to_append)-1; i>0; i--\n        if grades_to_append[i]\
    \ > letter_grade\n            letter_grade = grades_to_append[i]\n        end\n\
    \    end\n    \n    return fill(\" \", length(grades)-length(sorted_index)-1)\
    \ => [fill(\" \", length(grades)-length(sorted_index)-1) + string(letter_grade)]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid operator \"--\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpn1b6mne7.jl:39\nin expression starting at /tmp/tmpn1b6mne7.jl:39\n"
  stdout: ''
  timestamp: 1660012026
- exit_code: 1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a vector of GPAs for some students and you have to write\
    \ \n    a function that can output a vector of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    \n    #function to be returned\n    \n    #get GPA\n    \n    #compute\
    \ letter grade\n    \n    #return letter grade\n    \nend\n</cell>\n<code language=julia-1.5>\n\
    grade_equation([4.0, 3, 1.7, 2, 3.5])\n</cell>\n<text>\nExercise\nusing Test\n\
    \n@testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp66miv62i.jl:37\nin expression starting at\
    \ /tmp/tmp66miv62i.jl:37\n"
  stdout: ''
  timestamp: 1660012026
- exit_code: 1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a vector of GPAs for some students and you have to write\
    \ \n    a function that can output a vector of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n\"\"\"\n    Computes letter grades from numerical grades\n    \n    Arguments:\n\
    \        grades (Vector[Float64]): grades \nusing Test\n\n@testset begin\n\ncandidate\
    \ = numerical_letter_grade;\n\t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5])\
    \ == [\"D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp18twd3w3.jl:1\nin expression starting at /tmp/tmp18twd3w3.jl:1\n"
  stdout: ''
  timestamp: 1660012026
- exit_code: 1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a vector of GPAs for some students and you have to write\
    \ \n    a function that can output a vector of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    \"\"\" Outputs a vector of letter grades using the following table: \n\
    \             GPA       |    Letter grade\n              4.0                A+\n\
    \            > 3.7                A \n            > 3.3                A- \n \
    \           > 3.0                B+\n            > 2.7                B \n   \
    \         > 2.3                B-\n            > 2.0                C+\n     \
    \       > 1.7                C\n            > 1.3                C-\n        \
    \    > 1.0                D+ \n            > 0.7                D \n         \
    \   > 0.0                D-\n              0.0                E\n    \n    \n\
    \    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = numerical_letter_grade;\n\t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5])\
    \ == [\"D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp95wqknpx.jl:26\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp95wqknpx.jl:1\n\
    in expression starting at /tmp/tmp95wqknpx.jl:1\n"
  stdout: ''
  timestamp: 1660012026
- exit_code: 1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a vector of GPAs for some students and you have to write\
    \ \n    a function that can output a vector of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grades\n    if grades[1] < 3.0 \n        grades = \"A+\" \n    else if\
    \ grades[1] < 3.7 \n        grades = \"A\" \n    else if grades[1] < 4.0 \n  \
    \      grades = \"B+\" \n    else if grades[1] < 3.3 \n        grades = \"B\"\
    \ \n    else if grades[1] < 3.0 \n        grades = \"B-\" \n    else if grades[1]\
    \ < 2.7 \n        grades = \"B\" \n    else if grades[1] < 2.3 \n        grades\
    \ = \"B-\" \n    else if grades[1] < 2.0 \n        grades = \"C+\" \n    else\
    \ if grades[1] < 1.7 \n        grades = \"C\" \n    else if grades[1] < 1.3 \n\
    \        grades = \"C-\" \n    else if grades[1] < 1.0 \n        grades = \"D+\"\
    \ \n    else if grades[1] < 0.7 \n        grades = \"D\" \n    else if grades[1]\
    \ < 0.0 \n        grades = \"D-\" \n    else\n        grades = \"E\"\n    end\n\
    \    return grades\nend\n</cell>\n<text>\nWe now have to check our answer with\
    \ the correct one\nusing Test\n\n@testset begin\n\ncandidate = numerical_letter_grade;\n\
    \t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"\
    A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5]) == [\"\
    D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5,\
    \ 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpz4_yg522.jl:30\nin expression starting at\
    \ /tmp/tmpz4_yg522.jl:30\n"
  stdout: ''
  timestamp: 1660012027
- exit_code: 1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a vector of GPAs for some students and you have to write\
    \ \n    a function that can output a vector of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grade = grades[end]\n    if grade > 4.0 && grade-grades[1] > 3.7\n   \
    \     return \"A+\"\n    elseif grade > 3.0 && grade-grades[1] > 3.3\n       \
    \ return \"A\"\n    elseif grade > 2.7 && grade-grades[1] > 2.3\n        return\
    \ \"A-\"\n    elseif grade > 2.0 && grade-grades[1] > 2.0\n        return \"B+\"\
    \n    elseif grade > 1.7 && grade-grades[1] > 1.7\n        return \"B\"\n    elseif\
    \ grade > 1.3 && grade-grades[1] > 1.0\n        return \"B-\"\n    elseif grade\
    \ > 0.9 && grade-grades[1] > 0.7\n        return \"C+\"\n    elseif grade > 0.4\
    \ && grade-grades[1] > 0.3\n        return \"C\"\n    elseif grade > 0.0 && grade-grades[1]\
    \ > 0.2\n        return \"C-\"\n    elseif grade > -0.1 && grade-grades[1] > -0.7\n\
    \        return \"D+\"\n    elseif grade > -0.6 && grade-grades[1] > -0.3\n  \
    \      return \"D\"\n    elseif grade > -0.9 && grade-grades[1] > -0.1\n     \
    \   return \"D-\"\n    elseif grade > -1.7 && grade-grades[1] > -1.0\n       \
    \ return \"E\"\n    else\n        return \"\"\n    end\nend\n```\nusing Test\n\
    \n@testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid \"`\" syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpg10aq5lz.jl:58\nin expression starting at\
    \ /tmp/tmpg10aq5lz.jl:58\n"
  stdout: ''
  timestamp: 1660012026
- exit_code: 1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a vector of GPAs for some students and you have to write\
    \ \n    a function that can output a vector of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grades = grades[:]\n    grades[grades == 0] = 1e-10\n    if sum(grades)\
    \ <= 0.5 \n        return [\"D-\", \"D+\"]\n    elseif sum(grades) <= 1.0 \n \
    \       return [\"D\", \"D+\", \"D-\"]\n    elseif sum(grades) <= 2.0 \n     \
    \   return [\"D+\", \"D\", \"D-\"]\n    elseif sum(grades) <= 3.0 \n        return\
    \ [\"D\", \"D+\", \"D-\", \"D+\"]\n    elseif sum(grades) <= 3.5 \n        return\
    \ [\"D+\", \"D\", \"D-\", \"D+\", \"D\"]\n    elseif sum(grades) <= 4.0 \n   \
    \     return [\"D+\", \"D\", \"D-\", \"D+\", \"D\", \"D\"]\n    elseif sum(grades)\
    \ <= 5.0 \n        return [\"D+\", \"D\", \"D-\", \"D+\", \"D\", \"D\", \"D\"\
    , \"D\"]\n    else\n        return [\"D+\", \"D\", \"D-\", \"D+\", \"D\", \"D\"\
    , \"D\", \"D\", \"D\"]\n    end\nend\n</cell>\n<code language=julia-1.5>\ngrade_equation([4.0,\
    \ 3, 1.7, 2, 3.5])\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0, 3, 1.7,\
    \ 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4_u1nnnj.jl:47\nin expression starting at\
    \ /tmp/tmp4_u1nnnj.jl:47\n"
  stdout: ''
  timestamp: 1660012027
- exit_code: 1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a vector of GPAs for some students and you have to write\
    \ \n    a function that can output a vector of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grades = sort(grades)\n    grades_sum = sum(grades)\n    grades_diff =\
    \ grades_sum - grades[1]\n    if grades_diff >= 3.3 \n        return \"D+\"\n\
    \    elseif grades_diff >= 3.0 \n        return \"D\"\n    elseif grades_diff\
    \ >= 2.3 \n        return \"C+\"\n    elseif grades_diff >= 2.7 \n        return\
    \ \"C\"\n    elseif grades_diff >= 2.0 \n        return \"B+\"\n    elseif grades_diff\
    \ >= 1.7\n        return \"B\"\n    elseif grades_diff >= 1.0 \n        return\
    \ \"A+\"\n    elseif grades_diff >= 0.7\n        return \"A\"\n    else\n    \
    \    return \"E\"\n    end\nend\n</code>\n<|/ a tags=julia,arrays |>\n<| c |>\n\
    Thanks for the feedback.  However, I feel like the grading equation was taken\
    \ from here: http://www.maths.rs/algebra/grade/grade.html\nusing Test\n\n@testset\
    \ begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0, 3, 1.7,\
    \ 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4spufftt.jl:50\nin expression starting at\
    \ /tmp/tmp4spufftt.jl:50\n"
  stdout: ''
  timestamp: 1660012027
- exit_code: 1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a vector of GPAs for some students and you have to write\
    \ \n    a function that can output a vector of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n\"\"\"\nThis function will take in a vector of grades and return the letter\n\
    grades using numerical values.\nThis function will also take a grade vector and\
    \ return a grade vector\n\"\"\"\nusing Test\n\n@testset begin\n\ncandidate = numerical_letter_grade;\n\
    \t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"\
    A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5]) == [\"\
    D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5,\
    \ 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpz1bcvb5r.jl:26\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpz1bcvb5r.jl:1\n\
    in expression starting at /tmp/tmpz1bcvb5r.jl:1\n"
  stdout: ''
  timestamp: 1660012027
- exit_code: 1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a vector of GPAs for some students and you have to write\
    \ \n    a function that can output a vector of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    \"\"\"\n    Example :\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n\
    \    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\n    \n    if grades[1]\
    \ < grades[2]\n    \n        if grades[1] < grades[2] \n            # C- \n  \
    \          lettergrade = \"C-\"\n        end\n        \n        if grades[2] <\
    \ grades[1] \n            # B-\n            lettergrade = \"B-\"\n        end\n\
    \        \n        if grades[3] < grades[1] \n            # B-\n            lettergrade\
    \ = \"B-\"\n        end\n        \n        if grades[4] < grades[1] \n       \
    \     # B-\n            lettergrade = \"B-\"\n        end\n        \n    end\n\
    \    \n    if grades[2] < grades[1]\n        \n        if grades[2] < grades[2]\
    \ \n            # C- \n            lettergrade = \"C-\"\n        end\n       \
    \ \n        if grades[1] < grades[1] \n            # B+ \n            lettergrade\
    \ = \"B+\"\n        end\n        \n        if grades[3] < grades[1] \n       \
    \     # B+ \n            lettergrade = \"B+\"\n        end\n        \n       \
    \ if grades[4] < grades[1] \n            # B+ \n            lettergrade = \"B+\"\
    \n        end\n        \n        if grades[1] < grades[1] \n            # A+ \n\
    \            lettergrade = \"A+\"\n        end\n        \n        if grades[2]\
    \ < grades[1] \n            # A+ \n            lettergrade = \"A+\"\n        end\n\
    \        \n        if grades[3] < grades[1] \n            # A+ \n            lettergrade\
    \ = \"A+\"\n        end\n        \n        if grades[4] < grades[1] \n       \
    \     # A+ \n            lettergrade = \"A+\"\n        end\n        \n    end\n\
    \    \n    if grades[3] < grades[1]\n        \n        if grades[3] < grades[2]\
    \ \n            # C+ \n            lettergrade = \"C+\"\n        end\n       \
    \ \n        if grades[2] < grades[1] \n            # B+ \n            lettergrade\
    \ = \"B+\"\n        end\n        \n        if grades[1] < grades[1] \n       \
    \     # A+ \n            lettergrade = \"A+\"\n        end\n        \n       \
    \ if grades[2] < grades[1] \n            # A+ \n            lettergrade = \"A+\"\
    \n        end\n        \n        if grades[3] < grades[1] \n            # A+ \n\
    \            lettergrade = \"A+\"\n        end\n        \n        if grades[4]\
    \ < grades[1] \n            # A+ \n            lettergrade = \"A+\"\n        end\n\
    \        \n    end\n    \n    if grades[4] < grades[1]\n        \n        if grades[4]\
    \ < \nusing Test\n\n@testset begin\n\ncandidate = numerical_letter_grade;\n\t\
    @test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"\
    ])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"\
    ])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7])\
    \ == [\"E\", \"D-\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplin03lcz.jl:1\nin expression starting at /tmp/tmplin03lcz.jl:1\n"
  stdout: ''
  timestamp: 1660012027
- exit_code: 1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a vector of GPAs for some students and you have to write\
    \ \n    a function that can output a vector of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grades_str = [\"A+\", \"A\", \"A-\", \"B+\", \"B\", \"B-\", \"C+\", \"\
    C\", \"C-\", \"D+\", \"D\", \"D-\", \"E\"]\n    \n    grades_str.drop!(grades_str.findIndex(x\
    \ => x < 0))\n    grades_str = grades_str[grades_str.!=0]\n    \n    letter_grade\
    \ = grades_str.map(grade => letter_grades[grade])\n    \n    return letter_grade\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 6 errored,
    0 broken.

    in expression starting at /tmp/tmpjngm6zwh.jl:38

    '
  stdout: "test set: Error During Test at /tmp/tmpjngm6zwh.jl:41\n  Test threw exception\n\
    \  Expression: candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"\
    C\", \"A-\"]\n  type Array has no field drop!\n  Stacktrace:\n   [1] getproperty\n\
    \     @ ./Base.jl:42 [inlined]\n   [2] numerical_letter_grade(grades::Vector{Float64})\n\
    \     @ Main /tmp/tmpjngm6zwh.jl:29\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpjngm6zwh.jl:41 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpjngm6zwh.jl:40\ntest set:\
    \ Error During Test at /tmp/tmpjngm6zwh.jl:42\n  Test threw exception\n  Expression:\
    \ candidate([1.2]) == [\"D+\"]\n  type Array has no field drop!\n  Stacktrace:\n\
    \   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] numerical_letter_grade(grades::Vector{Float64})\n\
    \     @ Main /tmp/tmpjngm6zwh.jl:29\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpjngm6zwh.jl:42 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpjngm6zwh.jl:40\ntest set:\
    \ Error During Test at /tmp/tmpjngm6zwh.jl:43\n  Test threw exception\n  Expression:\
    \ candidate([0.5]) == [\"D-\"]\n  type Array has no field drop!\n  Stacktrace:\n\
    \   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] numerical_letter_grade(grades::Vector{Float64})\n\
    \     @ Main /tmp/tmpjngm6zwh.jl:29\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpjngm6zwh.jl:43 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpjngm6zwh.jl:40\ntest set:\
    \ Error During Test at /tmp/tmpjngm6zwh.jl:44\n  Test threw exception\n  Expression:\
    \ candidate(["
  timestamp: 1660012030
- exit_code: 1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a vector of GPAs for some students and you have to write\
    \ \n    a function that can output a vector of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    return Vector{String}(grades ./ length(grades)).\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpqpdyswxw.jl:26\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpqpdyswxw.jl:1\n\
    in expression starting at /tmp/tmpqpdyswxw.jl:1\n"
  stdout: ''
  timestamp: 1660012028
- exit_code: 1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a vector of GPAs for some students and you have to write\
    \ \n    a function that can output a vector of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grade_vector = []\n    for i in grades \n        if i > 0 && i <= 3.7\
    \ \n            grade_vector.append(\"A+\")\n        else if i > 3.7 && i <= 3.3\
    \ \n            grade_vector.append(\"A\")\n        else if i > 3.3 && i <= 3\
    \ \n            grade_vector.append(\"A-\")\n        else if i > 3 && i <= 2.7\
    \ \n            grade_vector.append(\"B+\")\n        else if i > 2.7 && i <= 2.3\
    \ \n            grade_vector.append(\"B\")\n        else if i > 2.3 && i <= 2\
    \ \n            grade_vector.append(\"B-\")\n        else if i > 2 && i <= 1.7\
    \ \n            grade_vector.append(\"C+\")\n        else if i > 1.7 && i <= 1.3\
    \ \n            grade_vector.append(\"C\")\n        else if i > 1.3 && i <= 1\
    \ \n            grade_vector.append(\"C-\")\n        else if i > 1 && i <= 0.7\
    \ \n            grade_vector.append(\"D+\")\n        else if i > 0.7 && i <= 0\
    \ \n            grade_vector.append(\"D-\")\n        else if i > 0\n         \
    \   grade_vector.append(\"E\")\n        else \n            error(\"Input has to\
    \ be a number between 0 and 1\")\n        end\n    end\n    return grade_vector\n\
    end\n</cell>\n<code language=julia-0.6>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = numerical_letter_grade;\n\t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5])\
    \ == [\"D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9qgmk5h1.jl:31\nin expression starting at\
    \ /tmp/tmp9qgmk5h1.jl:31\n"
  stdout: ''
  timestamp: 1660012028
- exit_code: 1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a vector of GPAs for some students and you have to write\
    \ \n    a function that can output a vector of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    if grades[1]<3 && grades[2]<3\n        return \"C\"\n    if grades[1]<3\
    \ && grades[2]>=3 && grades[1]!=grades[2]\n        return \"B-\"\n    if grades[1]>=3\
    \ && grades[2]<3\n        return \"B\"\n    if grades[1]>=3 && grades[2]>=3 &&\
    \ grades[1]!=grades[2]\n        return \"B-\"\n    if grades[1]>=3 && grades[2]>=3\
    \ && grades[1]==grades[2]\n        return \"B-\"\n    if grades[1]<3 && grades[2]>=3\
    \ && grades[1]==grades[2]\n        return \"C\"\n    \n    if grades[1]>=3 &&\
    \ grades[2]>=3 && grades[1]==grades[2]\n        return \"C\"\n    \n    if grades[1]>=3\
    \ && grades[2]>=3 && grades[1]!=grades[2]\n        return \"C\"\n    \n    if\
    \ grades[1]>=3 && grades[2]<3\n        return \"C\"\n    \n    if grades[1]<3\
    \ && grades[2]>=3 && grades[1]!=grades[2]\n        return \"B-\"\n    \n    if\
    \ grades[1]>=3 && grades[2]>=3 && grades[1]==grades[2]\n        return \"B-\"\n\
    \    \n    if grades[1]<3 && grades[2]>=3 && grades[1]!=grades[2]\n        return\
    \ \"B\"\n    \n    if grades[1]>=3 && grades[2]<3\n        return \"B\"\n    \n\
    \    if grades[1]>=3 && grades[2]>=3 && grades[1]!=grades[2]\n        return \"\
    B\"\n    \n    if grades[1]>=3 && grades[2]<3\n        return \"B\"\n    \n  \
    \  if grades[1]<3 && grades[2]>=3 && grades[1]!=grades[2]\n        return \"C\"\
    \n    \n    if grades[1]<3 && grades[2]>=3 && grades[1]==grades[2]\n        return\
    \ \"C\"\n    \n    if grades[1]<3 && grades[2]>=3 && grades[1]!=grades[2]\n  \
    \      return \"B-\"\n    \n    if grades[1]>=3 && grades[2]<3\n        return\
    \ \"B-\"\n    \n    if grades[1]>=3 && grades[2]>=3 && grades[1]!=grades[2]\n\
    \        return \"B-\"\n    \n    if grades[1]<3 && grades[2]>=3 && grades[1]==grades[2]\n\
    \        return \"B-\"\n    \n    if grades[1]<3 && grades[2]>=3 && grades[1]!=grades[2]\n\
    \        return \"B\"\n    \n    if grades[1]>=3 && grades[2]<3\n        return\
    \ \"B\"\n    \n    if grades[1]>=3 && grades[2]>=3 && grades[1]!=grades[2]\n \
    \       return \"B\"\n    \n    if grades[1]>=3 && grades[2]<3\n        return\
    \ \"\nusing Test\n\n@testset begin\n\ncandidate = numerical_letter_grade;\n\t\
    @test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"\
    ])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"\
    ])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7])\
    \ == [\"E\", \"D-\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0b90ivh2.jl:101\nin expression starting at\
    \ /tmp/tmp0b90ivh2.jl:101\n"
  stdout: ''
  timestamp: 1660012028
- exit_code: 1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a vector of GPAs for some students and you have to write\
    \ \n    a function that can output a vector of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    \"\"\"\n    Calculate the letter grade based on the grades \n    \n  \
    \  Parameters\n    ----------\n    grades: vector of grade points\n    \n    Returns\n\
    \    -------\n    String: letter grades\n    \"\"\"\n    grades = sort(grades)\n\
    \    return [\"A+\", \"A\", \"A-\", \"B+\", \"B\", \"B-\", \"C+\", \"C\", \"C-\"\
    , \"D+\", \"D\", \"D-\", \"E\"][(grades - grades[1]) / (grades[end]-grades[1])]\n\
    end\n</cell>\n<code language=julia-1.0>\ngrade_equation(gpas)\n</cell>\n<text>\n\
    2. Homework\nusing Test\n\n@testset begin\n\ncandidate = numerical_letter_grade;\n\
    \t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"\
    A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5]) == [\"\
    D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5,\
    \ 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsgjla444.jl:41\nin expression starting at\
    \ /tmp/tmpsgjla444.jl:41\n"
  stdout: ''
  timestamp: 1660012028
- exit_code: 1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a vector of GPAs for some students and you have to write\
    \ \n    a function that can output a vector of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grades.sort!()\n    \n    grades_str = [\"A+\", \"A\", \"A-\", \"B+\"\
    , \"B\", \"B-\", \"C+\", \"C\", \"C-\", \"D+\", \"D\", \"D-\", \"E\"]\n    \n\
    \    \n    if grades[end] == 0.0 && grades.last == 0.0\n        return grades_str[end]\n\
    \    \n    if grades[end] > grades[end]\n        grade_diff = grades[end] - grades[end]\n\
    \        grades_str[end] = \"B+\" if grade_diff <= 1.5 else \"B-\"\n        \n\
    \        if grades[end] == grades[end+1]\n            grades_str[end] = \"B+\"\
    \n        else\n            grades_str[end] = \"B-\"\n        end\n    elseif\
    \ grades[end] < grades[end]\n        grade_diff = grades[end+1] - grades[end]\n\
    \        grades_str[end] = \"C+\" if grade_diff <= 1.5 else \"C-\"\n        \n\
    \        if grades[end] == grades[end+1]\n            grades_str[end] = \"C+\"\
    \n        else\n            grades_str[end] = \"C-\"\n        end\n    else\n\
    \        grade_diff = grades[end+1] - grades[end]\n        grades_str[end] = \"\
    D+\" if grade_diff <= 1.5 else \"D-\"\n        \n        if grades[end] == grades[end+1]\n\
    \            grades_str[end] = \"D+\"\n        else\n            grades_str[end]\
    \ = \"D-\"\n        end\n    end\n    \n    if grades[end] == grades[end]\n  \
    \      grades_str[end] = \"A\" if grades[end] > 4.0 else \"A+\"\n    end\n   \
    \ \n    \n    return grades_str\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = numerical_letter_grade;\n\t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5])\
    \ == [\"D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"if\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmprinaz551.jl:37\nin expression starting at /tmp/tmprinaz551.jl:37\n"
  stdout: ''
  timestamp: 1660012028
- exit_code: 1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a vector of GPAs for some students and you have to write\
    \ \n    a function that can output a vector of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grades = sort(grades)\n    grades_diffs = grades[1:] - grades[:-1]\n \
    \   grades_diffs = sort(grades_diffs)\n    grades_diffs[1:] -= grades[:-1]\n \
    \   grades_diffs /= mean(grades_diffs)\n    grades_diffs /= std(grades_diffs)\n\
    \    grades_diffs *= 100\n    grades_diffs = round(grades_diffs)\n    grades_diffs\
    \ = String(grades_diffs)\n    grades_diffs = replace(grades_diffs, \" \", \"\"\
    )\n    grades_diffs = replace(grades_diffs, \"\\n\", \"\") \n    grades_diffs\
    \ = replace(grades_diffs, \"\\t\", \"\")\n    grades_diffs = replace(grades_diffs,\
    \ \" \", \"\")\n    grades_diffs = replace(grades_diffs, \"\\n\", \"\")\n    return\
    \ grades_diffs\nend\n</code>\n<|/ a dscore=1 tags=julia,function,arrays |>\n<|\
    \ a tags=julia,function,arrays dscore=0 |>\nI like Matt's solution as it allows\
    \ for any number of students and grades while being able to output a single vector\
    \ containing letters.\nHere's an alternative approach which utilizes your original\
    \ approach to calculate the letter grades and then outputs a vector of those letters:\n\
    <code>\nusing Test\n\n@testset begin\n\ncandidate = numerical_letter_grade;\n\t\
    @test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"\
    ])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"\
    ])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7])\
    \ == [\"E\", \"D-\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"1:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpe1l3kwip.jl:28\nin expression\
    \ starting at /tmp/tmpe1l3kwip.jl:28\n"
  stdout: ''
  timestamp: 1660012028
- exit_code: 1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a vector of GPAs for some students and you have to write\
    \ \n    a function that can output a vector of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n   \n    grade = grades[1]\n    if (grade > 3.0) then\n        return \"A+\"\
    \n    else if (grade > 2.7) then\n        return \"B+\"\n    else if (grade >\
    \ 2.3) then\n        return \"B\"\n    else if (grade > 2.0) then\n        return\
    \ \"C+\"\n    else if (grade > 1.7) then\n        return \"C\"\n    else if (grade\
    \ > 1.3) then\n        return \"C-\"\n    else if (grade > 1.0) then\n       \
    \ return \"D+\"\n    else if (grade > 0.7) then\n        return \"D\"\n    else\n\
    \        return \"D-\"\n    end\nusing Test\n\n@testset begin\n\ncandidate = numerical_letter_grade;\n\
    \t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"\
    A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5]) == [\"\
    D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5,\
    \ 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpt31vga72.jl:31\nin expression starting at\
    \ /tmp/tmpt31vga72.jl:31\n"
  stdout: ''
  timestamp: 1660012028
- exit_code: 1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a vector of GPAs for some students and you have to write\
    \ \n    a function that can output a vector of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n\"\"\"This function has one parameter\n    grades: a vector of floating point\
    \ numbers indicating the grades of some students\n    \n    It returns the vector\
    \ of letter grades using the table above for GPAs.\n    \n    Example:\n    >>>\
    \ grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"\
    A-\"]\n\"\"\"\n    grades_positive = grades[grades>0]\n    grades_negative = grades[grades<0]\n\
    \    grades_total = length(grades_positive) + length(grades_negative)\n    if\
    \ grades_total < 2\n        return [\"\"]\n    \n    grades_positive = sort(grades_positive)\n\
    \    grades_negative = sort(grades_negative)\nusing Test\n\n@testset begin\n\n\
    candidate = numerical_letter_grade;\n\t@test(candidate([4.0, 3, 1.7, 2, 3.5])\
    \ == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2]) == [\"\
    D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0]) == [\"\
    E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\"\
    , \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdc8y2e5b.jl:1\nin expression starting at /tmp/tmpdc8y2e5b.jl:1\n"
  stdout: ''
  timestamp: 1660012028
- exit_code: 1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a vector of GPAs for some students and you have to write\
    \ \n    a function that can output a vector of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grades=sort(grades)\n    grades=reverse(grades)\n    grades=grades.take(length(grades)-2)\n\
    \    grades=grades.drop(1)\n    grades=reverse(grades)\n    grades=reverse[grades]\n\
    \    grades=reverse(grades)\n    grades=reverse(grades)\n    grades=reverse(grades)\n\
    \    grades=reverse(grades)\n    grades=reverse(grades)\n    grades=reverse(grades)\n\
    \    grades=reverse(grades)\n    grades=reverse(grades)\n    grades=reverse(grades)\n\
    \    grades=reverse(grades)\n    grades=reverse(grades)\n    grades=reverse(grades)\n\
    \    grades=reverse(grades)\n    grades=reverse(grades)\n    grades=reverse(grades)\n\
    \    grades=reverse(grades)\n    grades=reverse(grades)\n    grades=reverse(grades)\n\
    \    grades=reverse(grades)\n    grades=reverse(grades)\n    grades=reverse(grades)\n\
    \    grades=reverse(grades)\n    grades=reverse(grades)\n    grades=reverse(grades)\n\
    \    grades=reverse(grades)\n    grades=reverse(grades)\n    grades=reverse(grades)\n\
    \    grades=reverse(grades)\n    grades=reverse(grades)\n    grades=reverse(grades)\n\
    \    grades=reverse(grades)\n    grades=reverse(grades)\n    grades=reverse(grades)\n\
    \    grades=reverse(grades)\n    grades=reverse(grades)\n    grades=reverse(grades)\n\
    \    grades=reverse(grades)\n    grades=reverse(grades)\n    grades=reverse(grades)\n\
    \    grades=reverse(grades)\n    grades=reverse(grades)\n    grades=reverse(grades)\n\
    \    grades=reverse(grades)\n    grades=reverse(grades)\n    grades=reverse(grades)\n\
    \    grades=reverse(grades)\n    grades=reverse(grades)\n    grades=reverse(grades)\n\
    \    grades=reverse(grades)\n    grades=reverse(grades)\n    grades=reverse(grades)\n\
    \    grades=reverse(grades)\n    grades=reverse(grades)\n    grades=reverse(grades)\n\
    \    grades=reverse(grades)\n    grades=reverse(grades)\n    grades=reverse(grades)\n\
    \    grades=reverse(grades)\n    grades=reverse(grades)\n    grades=reverse(grades)\n\
    \    grades=reverse(grades)\n    grades=reverse(grades)\n    grades=reverse(grades)\n\
    \    grades=reverse(grades)\n    grades=reverse(grades)\n    grades=reverse(grades)\n\
    \nusing Test\n\n@testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp7zgqcxq5.jl:26\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp7zgqcxq5.jl:1\n\
    in expression starting at /tmp/tmp7zgqcxq5.jl:1\n"
  stdout: ''
  timestamp: 1660012028
- exit_code: 1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a vector of GPAs for some students and you have to write\
    \ \n    a function that can output a vector of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    \n    grades_str = \"\"\n    \n    for g in grades\n        if g >= 4.0\n\
    \            grades_str += \"A+\"\n        else if g > 3.7\n            grades_str\
    \ += \"A\"\n        else if g > 3.3\n            grades_str += \"A-\"\n      \
    \  else if g > 3.0\n            grades_str += \"B+\"\n        else if g > 2.7\n\
    \            grades_str += \"B\"\n        else if g > 2.3\n            grades_str\
    \ += \"B-\"\n        else if g > 2.0\n            grades_str += \"C+\"\n     \
    \   else if g > 1.7\n            grades_str += \"C\"\n        else if g > 1.3\n\
    \            grades_str += \"C-\"\n        else if g > 1.0\n            grades_str\
    \ += \"D+\"\n        else if g > 0.7\n            grades_str += \"D\"\n      \
    \  else if g > 0.0\n            grades_str += \"D-\"\n        else\n         \
    \   grades_str += \"E\"\n        end\n    end\n    \n    return grades_str\nend\n\
    </cell>\n<code language=julia-1.6>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = numerical_letter_grade;\n\t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5])\
    \ == [\"D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpesn472y5.jl:33\nin expression starting at\
    \ /tmp/tmpesn472y5.jl:33\n"
  stdout: ''
  timestamp: 1660012028
- exit_code: 1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a vector of GPAs for some students and you have to write\
    \ \n    a function that can output a vector of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grades.sort! \n    grade_array=Array(String, (grades.len()+2)*2) \n  \
    \  grade_array[1, 1] = grades[1]>grades[2] ? \"B+\" : grades[1]==grades[2] ? \"\
    B\" : grades[1]<grades[2] ? \"B-\" :\"\" \n    grade_array[2, 1] = grades[3]>grades[4]\
    \ ? \"C+\" : grades[3]==grades[4] ? \"C\" : grades[3]<grades[4] ? \"C-\" :\"\"\
    \ \n    grade_array[3, 1] = grades[5]>grades[6] ? \"D+\" : grades[5]==grades[6]\
    \ ? \"D\" : grades[5]<grades[6] ? \"D-\" :\"\" \n    grade_array[4, 1] = grades[1]>grades[2]\
    \ ? \"B+\" : grades[1]==grades[2] ? \"B\" : grades[1]<grades[2] ? \"B-\" :\"\"\
    \ \n    grade_array[5, 1] = grades[3]>grades[4] ? \"C+\" : grades[3]==grades[4]\
    \ ? \"C\" : grades[3]<grades[4] ? \"C-\" :\"\" \n    grade_array[6, 1] = grades[5]>grades[6]\
    \ ? \"D+\" : grades[5]==grades[6] ? \"D\" : grades[5]<grades[6] ? \"D-\" :\"\"\
    \ \n    grade_array[7, 1] = grades[7]>grades[8] ? \"E\" : \"\" \n    \n    grades.reverse!\
    \ \n    grades.reverse! \n    \n    for i in 1:grades.len()\n        grade=grades[i]\n\
    \        grade_array[grades.len()-(i+1),1]=grades[grades.len()-(i+1)]>grades[grades.len()-(i+2)]\
    \ ? \"B+\" : grades[grades.len()-(i+1)]==grades[grades.len()-(i+2)] ? \"B\" :\
    \ grades[grades.len()-(i+1)]<grades[grades.len()-(i+2)] ? \"B-\" :\"\" \n    \
    \    grade_array[grades.len()-(i+2),1]=grades[grades.len()-(i+1)]>grades[grades.len()-(i+3)]\
    \ ? \"C+\" : grades[grades.len()-(i+1)]==grades[grades.len()-(i+3)] ? \"C\" :\
    \ grades[grades.len()-(i+1)]<grades[grades.len()-(i+3)] ? \"C-\" :\"\" \n    \
    \    grade_array[grades.len()-(i+3),1]=\nusing Test\n\n@testset begin\n\ncandidate\
    \ = numerical_letter_grade;\n\t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5])\
    \ == [\"D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: space required after colon in \"?\" expression\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmpfirmtccw.jl:29\nin expression\
    \ starting at /tmp/tmpfirmtccw.jl:29\n"
  stdout: ''
  timestamp: 1660012028
- exit_code: 1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a vector of GPAs for some students and you have to write\
    \ \n    a function that can output a vector of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    \n    \n    if grades[1] > 3.7\n        return [\"A+\"]\n    elsif grades[1]\
    \ > 3.3\n        return [\"A\", \"A-\"]\n    elsif grades[1] > 3.0\n        return\
    \ [\"B+\"]\n    elsif grades[1] > 2.7\n        return [\"B\"]\n    elsif grades[1]\
    \ > 2.3\n        return [\"B-\"]\n    elsif grades[1] > 2.0\n        return [\"\
    C+\"]\n    elsif grades[1] > 1.7\n        return [\"C\"]\n    elsif grades[1]\
    \ > 1.3\n        return [\"C-\"]\n    elsif grades[1] > 1.0\n        return [\"\
    D+\"]\n    elsif grades[1] > 0.7\n        return [\"D\"]\n    else\n        return\
    \ [\"D-\"]\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = numerical_letter_grade;\n\
    \t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"\
    A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5]) == [\"\
    D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5,\
    \ 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"grades\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpzdz2sa2q.jl:31\nin expression starting at /tmp/tmpzdz2sa2q.jl:31\n"
  stdout: ''
  timestamp: 1660012028
- exit_code: 1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a vector of GPAs for some students and you have to write\
    \ \n    a function that can output a vector of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    if grades==[]\n        throw(ArgumentError(\"grades cannot be empty\"\
    ))\n    end\n    \n    grades.sort()\n    \n    function get_grade(grades::Vector{Float64})::String\
    \ \n        if grades==[]\n            throw(ArgumentError(\"grades cannot be\
    \ empty\"))\n        end\n    \n        if grades<0 || grades>100\n          \
    \  throw(ArgumentError(\"grades must be a number between 0 and 100\"))\n     \
    \   end\nusing Test\n\n@testset begin\n\ncandidate = numerical_letter_grade;\n\
    \t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"\
    A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5]) == [\"\
    D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5,\
    \ 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpi1bfvq9o.jl:33\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpi1bfvq9o.jl:1\n\
    in expression starting at /tmp/tmpi1bfvq9o.jl:1\n"
  stdout: ''
  timestamp: 1660012028
- exit_code: 1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a vector of GPAs for some students and you have to write\
    \ \n    a function that can output a vector of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    \n\"\"\"\n    Grade the students using the input function and display\
    \ results\n    \n    Arguments:\n    grades A vector of GPAs for students\n  \
    \  \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nusing Test\n\n@testset begin\n\n\
    candidate = numerical_letter_grade;\n\t@test(candidate([4.0, 3, 1.7, 2, 3.5])\
    \ == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2]) == [\"\
    D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0]) == [\"\
    E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\"\
    , \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpax4002m5.jl:26\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpax4002m5.jl:1\n\
    in expression starting at /tmp/tmpax4002m5.jl:1\n"
  stdout: ''
  timestamp: 1660012028
- exit_code: 1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a vector of GPAs for some students and you have to write\
    \ \n    a function that can output a vector of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n\"\"\"\n    Numerical letter grade for numerical grades\n    \n    grades::\
    \ vector of grades\n    \n    returns: vector of letter grades\n    \n    grades::Vector{Float64}:\
    \ The grades to be graded (GPA)\n    \n    \n    Example:\n    >>> grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nusing\
    \ Test\n\n@testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp0cupu5ai.jl:26\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp0cupu5ai.jl:1\n\
    in expression starting at /tmp/tmp0cupu5ai.jl:1\n"
  stdout: ''
  timestamp: 1660012028
- exit_code: 1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a vector of GPAs for some students and you have to write\
    \ \n    a function that can output a vector of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    \n    grades_with_letters =  [\"A+\", \"A\", \"A-\", \"B+\", \"B\", \"\
    B-\", \"C+\", \"C\", \"C-\", \"D+\", \"D\", \"D-\", \"E\"]\n    \n    grades_with_letters[grades]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 6 errored,
    0 broken.

    in expression starting at /tmp/tmpzui91utj.jl:34

    '
  stdout: "test set: Error During Test at /tmp/tmpzui91utj.jl:37\n  Test threw exception\n\
    \  Expression: candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"\
    C\", \"A-\"]\n  ArgumentError: invalid index: 4.0 of type Float64\n  Stacktrace:\n\
    \    [1] to_index(i::Float64)\n      @ Base ./indices.jl:300\n    [2] to_index(A::Vector{String},\
    \ i::Float64)\n      @ Base ./indices.jl:277\n    [3] to_indices\n      @ ./indices.jl:333\
    \ [inlined]\n    [4] to_indices\n      @ ./indices.jl:325 [inlined]\n    [5] getindex\n\
    \      @ ./abstractarray.jl:1218 [inlined]\n    [6] macro expansion\n      @ ./multidimensional.jl:867\
    \ [inlined]\n    [7] macro expansion\n      @ ./cartesian.jl:64 [inlined]\n  \
    \  [8] _unsafe_getindex!\n      @ ./multidimensional.jl:862 [inlined]\n    [9]\
    \ _unsafe_getindex\n      @ ./multidimensional.jl:853 [inlined]\n   [10] _getindex\n\
    \      @ ./multidimensional.jl:839 [inlined]\n   [11] getindex\n      @ ./abstractarray.jl:1218\
    \ [inlined]\n   [12] numerical_letter_grade(grades::Vector{Float64})\n      @\
    \ Main /tmp/tmpzui91utj.jl:30\n   [13] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [14] macro expansion\n      @ /tmp/tmpzui91utj.jl:37 [inlined]\n\
    \   [15] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [16] top-level scope\n      @ /tmp/tmpzui91utj.jl:36\ntest set:\
    \ Error During Test at /tmp/tmpzui91utj.jl:38\n  Test threw exception\n  Expression:\
    \ candidate([1.2]) == [\"D+\"]\n  ArgumentError: invalid index: 1.2 of type Float64\n\
    \  Stacktrace:\n    [1] to_index(i::Float64)\n      @ Base ./indices.jl:300\n\
    \    [2] to_index(A::Vector{String}, i::Float64)\n      @ Base ./indices.jl:277\n\
    \    [3] to_indices\n      @ ./indices.jl:333 [inlined]\n    [4] to_indices\n\
    \      @ ./indices.jl:325 [inlined]\n    [5] getindex\n      @ ./abstractarray.jl:1218\
    \ [inlined]\n    [6] macro expansion\n      @ ./multidimensional.jl:867 [inlined]\n\
    \    [7] macro expansion\n      @ ./cartesian.jl:64 [inlined]\n    [8] _unsafe_getindex!\n\
    \      @ ./multidimensional.jl:862 [inlined]\n    [9] _unsafe"
  timestamp: 1660012031
- exit_code: 1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a vector of GPAs for some students and you have to write\
    \ \n    a function that can output a vector of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grades |> sort() |> sortperm() |> reverse(0) |> tail\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 6 errored,
    0 broken.

    in expression starting at /tmp/tmp8h3lg_8k.jl:31

    '
  stdout: "test set: Error During Test at /tmp/tmp8h3lg_8k.jl:34\n  Test threw exception\n\
    \  Expression: candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"\
    C\", \"A-\"]\n  MethodError: no method matching sort()\n  Closest candidates are:\n\
    \    sort(!Matched::AbstractUnitRange) at ~/.conda/envs/polyglot/share/julia/base/range.jl:1304\n\
    \    sort(!Matched::AbstractRange) at ~/.conda/envs/polyglot/share/julia/base/range.jl:1307\n\
    \    sort(!Matched::SparseArrays.SparseVector{Tv, Ti}; kws...) where {Tv, Ti}\
    \ at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\n\
    \    ...\n  Stacktrace:\n   [1] numerical_letter_grade(grades::Vector{Float64})\n\
    \     @ Main /tmp/tmp8h3lg_8k.jl:27\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp8h3lg_8k.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp8h3lg_8k.jl:33\ntest set:\
    \ Error During Test at /tmp/tmp8h3lg_8k.jl:35\n  Test threw exception\n  Expression:\
    \ candidate([1.2]) == [\"D+\"]\n  MethodError: no method matching sort()\n  Closest\
    \ candidates are:\n    sort(!Matched::AbstractUnitRange) at ~/.conda/envs/polyglot/share/julia/base/range.jl:1304\n\
    \    sort(!Matched::AbstractRange) at ~/.conda/envs/polyglot/share/julia/base/range.jl:1307\n\
    \    sort(!Matched::SparseArrays.SparseVector{Tv, Ti}; kws...) where {Tv, Ti}\
    \ at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\n\
    \    ...\n  Stacktrace:\n   [1] numerical_letter_grade(grades::Vector{Float64})\n\
    \     @ Main /tmp/tmp8h3lg_8k.jl:27\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp8h3lg_8k.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp8h3lg_8k.jl:33\ntest set:\
    \ Error During Test at /tmp/tmp8h3lg_8k."
  timestamp: 1660012031
- exit_code: 1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a vector of GPAs for some students and you have to write\
    \ \n    a function that can output a vector of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grades_float = convert(Vector{Float64},grades)\n    grades_sorted = sort(grades_float)\n\
    \    grade_vector = convert(Vector{Float64},letterGrades(grades_sorted))\n   \
    \ correct_grade = grades_sorted[end]\n    correct_grade_letter = letterGrades(grades_sorted[end])\n\
    \    if grades_sorted[end] == 0.0\n        return [\"D\"]\n    else if grades_sorted[end]\
    \ == 1.0\n        return [\"D-\"]\n    else if grades_sorted[end] == 2.0\n   \
    \     return [\"D+\"]\n    else if grades_sorted[end] == 3.0\n        return [\"\
    C\"]\n    else if grades_sorted[end] == 4.0\n        return [\"C-\"]\n    else\
    \ if grades_sorted[end] == 5.0\n        return [\"C+\"]\n    else if grades_sorted[end]\
    \ == 6.0\n        return [\"B+\"]\n    else if grades_sorted[end] == 7.0\n   \
    \     return [\"B\"]\n    else if grades_sorted[end] == 8.0\n        return [\"\
    B-\"]\n    else if grades_sorted[end] == 9.0\n        return [\"B+\"]\n    else\
    \ if grades_sorted[end] == 10.0\n        return [\"A\"]\n    else if grades_sorted[end]\
    \ == 11.0\n        return [\"A+\"]\n    else if grades_sorted[end] == 12.0\n \
    \       return [\"A\"]\n    else if grades_sorted[end] == 13.0\n        return\
    \ [\"A-\"]\n    else if grades_sorted[end] == 14.0\n        return [\"A-\"]\n\
    \    else if grades_sorted[end] == 15.0\n        return [\"A+\"]\n    else if\
    \ grades_sorted[end] == 16.0\n        return [\"A\"]\n    else if grades_sorted[end]\
    \ == 17.0\n        return [\"A+\"]\n    else if grades_sorted[end] == 18.0\n \
    \       return [\"A-\"]\n    else if grades_sorted[end] == 19.0\n        return\
    \ [\"A-\"]\n    else if grades_sorted[end] == 20.0\n        return [\"A+\"]\n\
    \    else if grades_sorted[end] == 21.0\n        return [\"A\"]\n    else\n  \
    \      return [\"A\"]\n    end\nend\n\"\"\"\nThe function should return a list\
    \ of letter grades for the input vector, sorted in descending order from highest\
    \ to lowest. \nThe function will also return a list of correct grade values for\
    \ the input vector \n(in the same order as the input vector).\nThe correct grade\
    \ values are also listed in the same order as the input vector.\n\nusing Test\n\
    \n@testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprltvjinm.jl:34\nin expression starting at\
    \ /tmp/tmprltvjinm.jl:34\n"
  stdout: ''
  timestamp: 1660012029
- exit_code: 1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a vector of GPAs for some students and you have to write\
    \ \n    a function that can output a vector of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n\"\"\"\nTakes input of students grade vector and outputs a vector of letter\
    \ grades.\nusing Test\n\n@testset begin\n\ncandidate = numerical_letter_grade;\n\
    \t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"\
    A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5]) == [\"\
    D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5,\
    \ 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxsh_ffhi.jl:1\nin expression starting at /tmp/tmpxsh_ffhi.jl:1\n"
  stdout: ''
  timestamp: 1660012029
- exit_code: 1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a vector of GPAs for some students and you have to write\
    \ \n    a function that can output a vector of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    \n    #Create a vector for storing grades\n    grades_vec = Vector{String}(undef,\
    \ 0)\n    \n    #Sort the vector \n    grades_vec = sort(grades)\n    \n    #Get\
    \ the maximum and minimum\n    grade_max_val = grades_vec[1]\n    grade_min_val\
    \ = grades_vec[end]\n    \n    #Loop through the vector\n    for i = 1:length(grades_vec)\n\
    \        \n        #If the current value is the maximum\n        if grades_vec[i]\
    \ == grade_max_val\n            \n            #If the previous value was the minimum\
    \ value\n            if i > 1 \n                \n                #Replace the\
    \ minimum\n                grades_vec[i] = grade_min_val\n            else\n \
    \               \n                #replace the current value\n               \
    \ grades_vec[i] = \"D\"\n            end\n        end\n        \n        #If the\
    \ current value is the minimum\n        if grades_vec[i] == grade_min_val\n  \
    \          \n            #If the previous value was the maximum value\n      \
    \      if i < end\n                \n                #Replace the maximum\n  \
    \              grades_vec[i] = grade_max_val\n            else\n             \
    \   \n                #replace the current value\n                grades_vec[i]\
    \ = \"D\"\n            end\n        end\n    end\n    \n    return grades_vec\n\
    end\n</code>\n<|/ a |>\n<| c |>\nI appreciate your answer but my question is how\
    \ to write it in a way that does not make use of loops or conditionals. Any help\
    \ would be greatly appreciated.\n<|/ c |>\n<| c |>\nI've updated the answer, but\
    \ I am afraid that your teacher doesn't allow you to use loops or conditionals,\
    \ otherwise you will have made a mistake in the assignment :).\n<|/ c |>\n<| a\
    \ dscore=0 |>\nYou can use the following function to return the letter grade from\
    \ an array of numbers:\n<code>\nusing Test\n\n@testset begin\n\ncandidate = numerical_letter_grade;\n\
    \t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"\
    A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5]) == [\"\
    D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5,\
    \ 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"end\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpbmsb_0nc.jl:60\nin expression starting at /tmp/tmpbmsb_0nc.jl:60\n"
  stdout: ''
  timestamp: 1660012029
- exit_code: 1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a vector of GPAs for some students and you have to write\
    \ \n    a function that can output a vector of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n\"\"\"\nA numerical representation of letter grades, based on the given grades\
    \ vector. The function returns a vector with the numerical letter grades.\n  \
    \  \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = numerical_letter_grade;\n\
    \t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"\
    A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5]) == [\"\
    D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5,\
    \ 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpyth9u2wa.jl:26\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpyth9u2wa.jl:1\n\
    in expression starting at /tmp/tmpyth9u2wa.jl:1\n"
  stdout: ''
  timestamp: 1660012029
- exit_code: 1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a vector of GPAs for some students and you have to write\
    \ \n    a function that can output a vector of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    # Define the possible grades in each case using the grade symbols and\
    \ the numerical grades\n    grade_symbols = Vector{String}([\"+\", \"-\", \"A\"\
    , \"B\", \"C\", \"D\", \"E\"])\n    grade_numbers = Vector{Float64}([-4.0, -3.7,\
    \ -3.3, -3.0, -2.7, -2.3, -2.0, -1.7, -1.3, -1.0, -0.7, 0.0, 0.7, 1.3, 1.7, 2.0,\
    \ 2.3, 2.7, 3.0, 3.3, 3.7])\n    \n    letter_grades = Vector{String}()\n    for\
    \ grade in grades\n        numerical_grade = (grade > grade_numbers[1]) ? grade\
    \ : grade_numbers[1]\n        letter_grade = grade_symbols[findfirstindex(grade_symbols,\
    \ numerical_grade)]\n        letter_grades = push!(letter_grades, letter_grade)\n\
    \    end\n    \n    return letter_grades\nend\n</cell>\n<code language=julia-1.5>\n\
    # Write the function and apply it to the data\nusing Test\n\n@testset begin\n\n\
    candidate = numerical_letter_grade;\n\t@test(candidate([4.0, 3, 1.7, 2, 3.5])\
    \ == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2]) == [\"\
    D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0]) == [\"\
    E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\"\
    , \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpo9ovud0s.jl:40\nin expression starting at\
    \ /tmp/tmpo9ovud0s.jl:40\n"
  stdout: ''
  timestamp: 1660012030
- exit_code: 1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a vector of GPAs for some students and you have to write\
    \ \n    a function that can output a vector of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    gradesSorted = sort(grades)\n    \n    gradesSorted[end-1] = gradesSorted[end-1]\
    \ + 1\n    gradesSorted[end] = gradesSorted[end]\n    \n    for i = 1:size(gradesSorted)[1]\
    \ - 1\n        if gradesSorted[i] > gradesSorted[i+1]\n            gradesSorted[i+1]\
    \ = gradesSorted[i] + 1\n        elseif gradesSorted[i] < gradesSorted[i+1]\n\
    \            gradesSorted[i+1] = gradesSorted[i+1] - 1\n        end\n    end\n\
    \    \n    gradesSorted[end] = gradesSorted[end-1] - 1\n    gradesSorted[end-1]\
    \ = gradesSorted[end-1]\n    \n    lettergrade = []\n    for grade in gradesSorted\n\
    \        if grade == 0\n            lettergrade.append(\"E\")\n        elseif\
    \ grade == 1\n            lettergrade.append(\"D+\")\n        elseif grade ==\
    \ 2\n            lettergrade.append(\"D-\")\n        elseif grade == 3\n     \
    \       lettergrade.append(\"C+\")\n        elseif grade == 4\n            lettergrade.append(\"\
    C\")\n        elseif grade == 5\n            lettergrade.append(\"B-\")\n    \
    \    elseif grade == 6\n            lettergrade.append(\"B\")\n        elseif\
    \ grade == 7\n            lettergrade.append(\"B-+\")\n        elseif grade ==\
    \ 8\n            lettergrade.append(\"B+\")\n        elseif grade == 9\n     \
    \       lettergrade.append(\"A-\")\n        elseif grade == 10\n            lettergrade.append(\"\
    A\")\n        elseif grade == 11\n            lettergrade.append(\"A-+\")\n  \
    \      elseif grade == 12\n            lettergrade.append(\"A+\")\n        else\n\
    \            lettergrade.append(\"A\")\n        end\n    end\n    return lettergrade\n\
    end\n    \n    \nend\n</cell>\n<code language=julia-1.6>\nimport Pkg\nPkg.add(\"\
    DifferentialEquations\")\nPkg.add(\"GR\") \nPkg.add(\"Cairo\")\nPkg.add(\"JLD2\"\
    )\nPkg.add(\"Optim\")\nPkg.add(\"DataFrames\")\nPkg.add(\"DataFrames\")\nPkg.add(\"\
    DataFrames\")\nPkg.add(\"Distributions\")\nPkg.add(\"PyPlot\")\nPkg.add(\"Statistics\"\
    )\nPkg.add(\"FileIO\")\nPkg.add(\"PlotlyJS\")\n</cell>\n<code language=julia-1.6>\n\
    include(\"grading.jl\")\n</cell>\n<code language=julia-1.6>\n\nusing Test\n\n\
    @testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"end\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpq1bcoh7l.jl:79\nin expression starting at /tmp/tmpq1bcoh7l.jl:79\n"
  stdout: ''
  timestamp: 1660012030
- exit_code: 1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a vector of GPAs for some students and you have to write\
    \ \n    a function that can output a vector of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grades.sort!\n    if grades[1] > 3.7\n        return \"B+\"\n    end\n\
    using Test\n\n@testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxcy92a1u.jl:26\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxcy92a1u.jl:1\n\
    in expression starting at /tmp/tmpxcy92a1u.jl:1\n"
  stdout: ''
  timestamp: 1660012030
- exit_code: 1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a vector of GPAs for some students and you have to write\
    \ \n    a function that can output a vector of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    \n    grades.sort()\n    \n    \n    \n    \n    \nusing Test\n\n@testset\
    \ begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0, 3, 1.7,\
    \ 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp85c1oa8m.jl:26\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp85c1oa8m.jl:1\n\
    in expression starting at /tmp/tmp85c1oa8m.jl:1\n"
  stdout: ''
  timestamp: 1660012030
- exit_code: 1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a vector of GPAs for some students and you have to write\
    \ \n    a function that can output a vector of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n  \n    grades = grades[:]\n    grades.sort()\n    \n    grades_grades_vector\
    \ = [grades[0], grades[-1]]\n    \n    for (i in 2:length(grades))\n        grades_grades_vector[i]\
    \ = grades[i]\n        \n    grades_vector = grades_grades_vector\n    \n    grades_vector\
    \ = sort(grades_vector)\n    \n    return grades_vector\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0, 3, 1.7,\
    \ 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid iteration specification\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsr907q83.jl:34\nin expression starting at\
    \ /tmp/tmpsr907q83.jl:34\n"
  stdout: ''
  timestamp: 1660012030
- exit_code: -1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a vector of GPAs for some students and you have to write\
    \ \n    a function that can output a vector of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grades\n    grades = grades[end]\n    if grades > 3.7 \n        grades\
    \ = grades - 3.7 \n        return \"A+\"\n    elseif grades > 3.3 \n        grades\
    \ = grades - 3.3 \n        return \"A\"\n    elseif grades > 3 \n        grades\
    \ = grades - 3 \n        return \"B+\"\n    elseif grades > 2.7 \n        grades\
    \ = grades - 2.7 \n        return \"B\"\n    elseif grades > 2.3 \n        grades\
    \ = grades - 2.3 \n        return \"B-\"\n    elseif grades > 2 \n        grades\
    \ = grades - 2 \n        return \"C+\"\n    elseif grades > 1.7 \n        grades\
    \ = grades - 1.7 \n        return \"C\"\n    elseif grades > 1 \n        grades\
    \ = grades - 1 \n        return \"C-\"\n    elseif grades > 0.7 \n        grades\
    \ = grades - 0.7 \n        return \"D\"\n    else\n        grades = grades - 0.0\n\
    \        return \"D-\"\n    end\n    return \"E\"\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0, 3, 1.7,\
    \ 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  status: Timeout
  stderr: 'ERROR: LoadError: '
  stdout: "test set: Error During Test at /tmp/tmpco5gt5o5.jl:67\n  Test threw exception\n\
    \  Expression: candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"\
    C\", \"A-\"]\n  MethodError: Cannot `convert` an object of type String to an object\
    \ of type Vector{String}\n  Closest candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{Vector{String}}, !Matched::LibGit2.StrArrayStruct) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LibGit2/src/strarray.jl:13\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at ~/.conda/envs/polyglot/share/julia/base/array.jl:554\n\
    \    ...\n  Stacktrace:\n   [1] numerical_letter_grade(grades::Vector{Float64})\n\
    \     @ Main /tmp/tmpco5gt5o5.jl:34\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpco5gt5o5.jl:67 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpco5gt5o5.jl:66\ntest set:\
    \ Error During Test at /tmp/tmpco5gt5o5.jl:68\n  Test threw exception\n  Expression:\
    \ candidate([1.2]) == [\"D+\"]\n  MethodError: Cannot `convert` an object of type\
    \ String to an object of type Vector{String}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::LinearAlgebra.Factorization) where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{Vector{String}}, !Matched::LibGit2.StrArrayStruct) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LibGit2/src/strarray.jl:13\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at ~/.conda/envs/polyglot/share/julia/base/array.jl:554\n\
    \    ...\n  Stacktrace:\n   [1] numerical_letter_grade(grades::Vector{Float64})\n\
    \     @ Main /tmp/tmpco5gt5o5.jl:52\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [in"
  timestamp: 1660012033
- exit_code: 1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a vector of GPAs for some students and you have to write\
    \ \n    a function that can output a vector of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    \"\"\"\n    \n    This function takes a vector of GPAs and outputs a vector\
    \ of letters grades.\n    The input vector should be an ordered vector, meaning\
    \ that the first element should\n    be the GPA and the last element should be\
    \ 0.0 and the GPAs are not allowed to exceed 4.0.\n    \n    Example:\n    >>>\
    \ grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"\
    A-\"]\n    \"\"\"\n    \nusing Test\n\n@testset begin\n\ncandidate = numerical_letter_grade;\n\
    \t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"\
    A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5]) == [\"\
    D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5,\
    \ 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpw1yb6pq6.jl:26\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpw1yb6pq6.jl:1\n\
    in expression starting at /tmp/tmpw1yb6pq6.jl:1\n"
  stdout: ''
  timestamp: 1660012030
- exit_code: 1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a vector of GPAs for some students and you have to write\
    \ \n    a function that can output a vector of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    \n    \n    \n    grades_str=\"\"\n    \n    for grade in grades\n   \
    \     if grade>4.0\n            grades_str=grades_str+\"A-\"\n        else if\
    \ grade>3.7\n            grades_str=grades_str+\"A\"\n        else if grade>3.3\n\
    \            grades_str=grades_str+\"A-\"\n        else if grade>3.0\n       \
    \     grades_str=grades_str+\"B+\"\n        else if grade>2.7\n            grades_str=grades_str+\"\
    B\"\n        else if grade>2.3\n            grades_str=grades_str+\"B-\"\n   \
    \     else if grade>2.0\n            grades_str=grades_str+\"C+\"\n        else\
    \ if grade>1.7\n            grades_str=grades_str+\"C\"\n        else if grade>1.3\n\
    \            grades_str=grades_str+\"C-\"\n        else if grade>1.0\n       \
    \     grades_str=grades_str+\"D+\"\n        else if grade>0.7\n            grades_str=grades_str+\"\
    D\"\n        else if grade>0.0\n            grades_str=grades_str+\"D-\"\n   \
    \     else \n            grades_str=grades_str+\"E\"\n        end\n    end\n \
    \   grades_str=grades_str[:-1]\n    return grades_str\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0, 3, 1.7,\
    \ 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpi0ig3_jz.jl:35\nin expression starting at\
    \ /tmp/tmpi0ig3_jz.jl:35\n"
  stdout: ''
  timestamp: 1660012030
- exit_code: 1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a vector of GPAs for some students and you have to write\
    \ \n    a function that can output a vector of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    \n    # Calculate the number of points.\n    total = sum(grades)\n   \
    \ \n    # Calculate the grade\n    result = []\n    for grade in grades\n    \
    \    if grade > 0 && grade < 4\n            append!(result, \"A+\")\n        elsif\
    \ grade > 3 && grade < 3.7\n            append!(result, \"A\")\n        elsif\
    \ grade > 2.7 && grade < 3.3\n            append!(result, \"A-\")\n        elsif\
    \ grade > 2.3 && grade < 3\n            append!(result, \"B+\")\n        elsif\
    \ grade > 1.7 && grade < 3.0\n            append!(result, \"B\")\n        elsif\
    \ grade > 1.3 && grade < 2.7\n            append!(result, \"B-\")\n        elsif\
    \ grade > 1 && grade < 2\n            append!(result, \"C+\")\n        elsif grade\
    \ > 0.7 && grade < 1.3\n            append!(result, \"C\")\n        elsif grade\
    \ > 0 && grade < 1\n            append!(result, \"C-\")\n        elsif grade >\
    \ 0 && grade < 0.7\n            append!(result, \"D+\")\n        elsif grade >\
    \ 0 && grade < 0.3\n            append!(result, \"D\")\n        elsif grade >\
    \ 0 && grade < 0\n            append!(result, \"D-\")\n        else\n        \
    \    append!(result, \"E\")\n        end\n    end\n    \n    # Calculate the average.\n\
    \    avg = total / length(grades)\n    \n    # Convert to a string.\n    result\
    \ = join(result, \"-\")\n    \n    return result\nend\n</cell>\n<code language=julia-1.5>\n\
    grade_equation([4.0, 3, 1.7, 2, 3.5])\n</cell>\n<text>\n5.2 Exercise 4.1\nWrite\
    \ a function that inputs a numerical grade and returns an equation for grading\
    \ a student\u2019s score on the exam. \nThe grading equation for students on the\
    \ exam is as follows:\n$$ E{GPA} = \\frac{GPA}{10^{5}} = \\frac{gpa}{10000} $$\n\
    where $gpa$ is the student\u2019s GPA.\n$$ E{GPA} \\geq 0 $$\nIf the GPA given\
    \ is negative or zero, return \"Invalid GPA\".\nusing Test\n\n@testset begin\n\
    \ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0, 3, 1.7, 2, 3.5])\
    \ == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2]) == [\"\
    D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0]) == [\"\
    E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\"\
    , \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"grade\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp0zmtnd5q.jl:36\nin expression starting at /tmp/tmp0zmtnd5q.jl:36\n"
  stdout: ''
  timestamp: 1660012030
- exit_code: 1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a vector of GPAs for some students and you have to write\
    \ \n    a function that can output a vector of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    # Write your answer here\n    return [\"A+\", \"B\", \"C-\", \"C\", \"\
    A-\"]\nend\n</cell>\n<cell>\ngrades = [4.0, 3, 1.7, 2, 3.5]\n</cell>\n<cell>\n\
    grade_equation(grades)\n</cell>\n<text>\nExercise 5\nusing Test\n\n@testset begin\n\
    \ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0, 3, 1.7, 2, 3.5])\
    \ == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2]) == [\"\
    D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0]) == [\"\
    E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\"\
    , \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5ummh9pe.jl:30\nin expression starting at\
    \ /tmp/tmp5ummh9pe.jl:30\n"
  stdout: ''
  timestamp: 1660012030
- exit_code: 1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a vector of GPAs for some students and you have to write\
    \ \n    a function that can output a vector of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    \"\"\"\n    Takes in a vector of GPAs and outputs a vector with the numerical\
    \ grade.\n    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n\
    \    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\n    numerical_grades\
    \ = Vector{String}(undef, length(grades))\n    grades = sort(grades) # make sure\
    \ grades is sorted\n    \n    for i in 1:length(grades)\n        if (grades[i]<=3.5)\
    \ # use \"and\" instead of \"if\" for efficiency\n            numerical_grades[i]\
    \ = \"A+\" # A+ is graded at 4.0\n        elif (grades[i]>=3.5) & (grades[i]<=3.7)\n\
    \            numerical_grades[i] = \"A\" # A is graded at 3.7\n        elsif (grades[i]>=3.7)\
    \ & (grades[i]<=3.8)\n            numerical_grades[i] = \"A-\" # A- is graded\
    \ at 3.3\n        elif (grades[i]>=3.8) & (grades[i]<=3.9)\n            numerical_grades[i]\
    \ = \"B+\" # B+ is graded at 3.0\n        elif (grades[i]>=3.9) & (grades[i]<=4.0)\n\
    \            numerical_grades[i] = \"B\" # B is graded at 2.7\n        elif (grades[i]>=4.0)\
    \ & (grades[i]<=4.1)\n            numerical_grades[i] = \"B-\" # B- is graded\
    \ at 2.3\n        elif (grades[i]>=4.1) & (grades[i]<=4.2)\n            numerical_grades[i]\
    \ = \"C+\" # C+ is graded at 2.0\n        elif (grades[i]>=4.2) & (grades[i]<=4.3)\n\
    \            numerical_grades[i] = \"C\" # C is graded at 1.7\n        elif (grades[i]>=4.3)\
    \ & (grades[i]<=4.4)\n            numerical_grades[i] = \"C-\" # C- is graded\
    \ at 1.3\n        elif (grades[i]>=4.4) & (grades[i]<=4.5)\n            numerical_grades[i]\
    \ = \"D+\" # D+ is graded at 1.0\n        elif (grades[i]>=4.5) & (grades[i]<=4.6)\n\
    \            numerical_grades[i] = \"D\" # D is graded at 0.7\n        else\n\
    \            numerical_grades[i] = \"D-\" # D- is graded at 0.0\n        end\n\
    \    end\nusing Test\n\n@testset begin\n\ncandidate = numerical_letter_grade;\n\
    \t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"\
    A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5]) == [\"\
    D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5,\
    \ 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: space before \"(\" not allowed in \"elif (\"\
    \ at /tmp/tmpc4_uux8r.jl:40\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpc4_uux8r.jl:40\n\
    in expression starting at /tmp/tmpc4_uux8r.jl:40\n"
  stdout: ''
  timestamp: 1660012030
- exit_code: 1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a vector of GPAs for some students and you have to write\
    \ \n    a function that can output a vector of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    if grades.head == 0.0\n        grades = collect(grades[1 :]).reverse()\n\
    \    grades = grades[end:-1:1]\n    letter_grades = map( (n) -> \"D-\" == n ?\
    \ \"D+\" : \n        n <= 4.0 ? \"A+\" : \n        n <= 3.7 ? \"A\" : \n     \
    \   n <= 3.3 ? \"A-\" : \n        n <= 3.0 ? \"B+\" : \n        n <= 2.7 ? \"\
    B\" : \n        n <= 2.3 ? \"B-\" : \n        n <= 2.0 ? \"C+\" : \n        n\
    \ <= 1.7 ? \"C\" : \n        n <= 1.3 ? \"C-\" : \n        n <= 1.0 ? \"D+\" :\
    \ \n        n <= 0.7 ? \"D\" : \n        n <= 0.0 ? \"D-\" : \n        \"E\",\n\
    \        grades)\n    return letter_grades\n</code>\nThe function above will give\
    \ the letter grades for the students as requested in the example.\n<|/ a tags=haskell,functional-programming,algorithm\
    \ dscore=0 |>\n<| a |>\nAs far as I understand your problem the only thing you\
    \ need to do is generate all permutations of grades vector. \nSo let's see a sample\
    \ code on how you can do it:\n<code>\nimport Data.List (permutations)\nimport\
    \ Data.Maybe (fromMaybe)\nusing Test\n\n@testset begin\n\ncandidate = numerical_letter_grade;\n\
    \t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"\
    A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5]) == [\"\
    D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5,\
    \ 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp987p1wms.jl:46\nin expression starting at\
    \ /tmp/tmp987p1wms.jl:46\n"
  stdout: ''
  timestamp: 1660012030
- exit_code: 1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a vector of GPAs for some students and you have to write\
    \ \n    a function that can output a vector of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n  grades_string = \"\"\n  \n  for grade in grades\n    letter_grade = if grade\
    \ <= 3.6 \n      \"A+\" \n    else if grade > 3.6 && grade <= 3.8 \n      \"A\"\
    \ \n    else if grade > 3.8 && grade <= 3.9 \n      \"A-\"\n    else if grade\
    \ > 3.9 && grade <= 3.10 \n      \"B+\" \n    else if grade > 3.10 && grade <=\
    \ 3.11 \n      \"B\" \n    else if grade > 3.11 && grade <= 3.12 \n      \"B-\"\
    \n    else if grade > 3.12 && grade <= 3.14 \n      \"C+\" \n    else if grade\
    \ > 3.14 && grade <= 3.15 \n      \"C\"\n    else if grade > 3.15 && grade <=\
    \ 3.16 \n      \"C-\"\n    else \n      \"D+\"\n    \n    grades_string = grades_string\
    \ + letter_grade\n  end\n  \n  return grades_string\nend\n</cell>\n<cell>\n# Test\
    \ your function - feel free to try other examples!\nusing Test\n\n@testset begin\n\
    \ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0, 3, 1.7, 2, 3.5])\
    \ == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2]) == [\"\
    D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0]) == [\"\
    E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\"\
    , \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpl7c6j9up.jl:32\nin expression starting at\
    \ /tmp/tmpl7c6j9up.jl:32\n"
  stdout: ''
  timestamp: 1660012030
- exit_code: 1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a vector of GPAs for some students and you have to write\
    \ \n    a function that can output a vector of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n\"\"\"\n    Computes the letter grade for each value in the grades vector.\n\
    \    It computes the numerical (numeral) value of the grade\n    for each value\
    \ in the grades vector.\n    It then computes the letter grade using the \n  \
    \  table of numerical grades and the \n    character grade of the grade.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0s5eltu6.jl:1\nin expression starting at /tmp/tmp0s5eltu6.jl:1\n"
  stdout: ''
  timestamp: 1660012030
- exit_code: 1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a vector of GPAs for some students and you have to write\
    \ \n    a function that can output a vector of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    \"\"\"This function takes a vector of grades and returns a vector of letter\
    \ grades\"\"\"\n    grades_sorted = sort(grades)\n    grade_array = [\"\" for\
    \ _ in 1:length(grades_sorted)]\n    \n    grades_sorted_index = [i for i in 1:length(grades_sorted)]\
    \ \n    grades_sorted_index = [i for i in grades_sorted_index if grades_sorted[i]\
    \ > 0.0]\n    \n    \n    for grade in grades_sorted_index\n        if grades_sorted[grade]\
    \ <= 3.0 || grades_sorted[grade] > 3.7\n            grade_array[grade] = \"A+\"\
    \n        elsif grades_sorted[grade] <= 3.3\n            grade_array[grade] =\
    \ \"A-\"\n        elsif grades_sorted[grade] <= 3.0\n            grade_array[grade]\
    \ = \"B+\"\n        elsif grades_sorted[grade] <= 2.7\n            grade_array[grade]\
    \ = \"B\"\n        elsif grades_sorted[grade] <= 2.3\n            grade_array[grade]\
    \ = \"B-\"\n        elsif grades_sorted[grade] <= 2.0\n            grade_array[grade]\
    \ = \"C+\"\n        elsif grades_sorted[grade] <= 1.7\n            grade_array[grade]\
    \ = \"C\"\n        elsif grades_sorted[grade] <= 1.3\n            grade_array[grade]\
    \ = \"C-\"\n        elsif grades_sorted[grade] <= 1.0\n            grade_array[grade]\
    \ = \"D+\"\n        elsif grades_sorted[grade] <= 0.7\n            grade_array[grade]\
    \ = \"D\"\n        elsif grades_sorted[grade] <= 0.0\n            grade_array[grade]\
    \ = \"D-\"\n        else\n            grade_array[grade] = \"E\"\n        end\n\
    \    end\n    \n    return grade_array\nend\nusing Test\n\n@testset begin\n\n\
    candidate = numerical_letter_grade;\n\t@test(candidate([4.0, 3, 1.7, 2, 3.5])\
    \ == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2]) == [\"\
    D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0]) == [\"\
    E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\"\
    , \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"grades_sorted\"\nStacktrace:\n [1]\
    \ top-level scope\n   @ /tmp/tmpdxfqqlrp.jl:38\nin expression starting at /tmp/tmpdxfqqlrp.jl:38\n"
  stdout: ''
  timestamp: 1660012030
- exit_code: 1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a vector of GPAs for some students and you have to write\
    \ \n    a function that can output a vector of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n\"\"\"\nThis function is an example of a function that returns letter grades\n\
    from a vector of GPAs.\n\"\"\"\n    grades = sort(grades)\n    numerical_grades\
    \ = grades./10\n    if max(grades) >= 4\n        return [\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]\n    end\nusing Test\n\n@testset begin\n\ncandidate = numerical_letter_grade;\n\
    \t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"\
    A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5]) == [\"\
    D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5,\
    \ 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxhahvf3n.jl:26\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxhahvf3n.jl:1\n\
    in expression starting at /tmp/tmpxhahvf3n.jl:1\n"
  stdout: ''
  timestamp: 1660012030
- exit_code: 1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a vector of GPAs for some students and you have to write\
    \ \n    a function that can output a vector of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n\"\"\"\nCalculate the numerical letter grade\nThis function receives a vector\
    \ of grades given by the teacher and returns the \nvector with the numerical letter\
    \ grades.\n    Arguments:\n    grades -- the vector of grades given by the teacher\n\
    using Test\n\n@testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzywnt084.jl:1\nin expression starting at /tmp/tmpzywnt084.jl:1\n"
  stdout: ''
  timestamp: 1660012031
- exit_code: 1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a vector of GPAs for some students and you have to write\
    \ \n    a function that can output a vector of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grades=sort(grades);\n    grades_sum=sum(grades);\n    grades_diff=grades-grades_sum;\n\
    \    grades_diff=sort(grades_diff);\n    grades_sum=sort(grades_sum);\n    grades_sum=grades_sum';\n\
    \    grades_diff=grades_diff';\n    grades_sum=reshape(grades_sum,1,length(grades_sum));\n\
    \    grades_diff=reshape(grades_diff,1,length(grades_diff));\n    grades_diff=reshape(grades_diff,1,length(grades_diff));\n\
    \    grades_diff=grades_sum-grades_diff;\n    grades_diff=reshape(grades_diff,1,length(grades_diff));\n\
    \    grades_diff=grades_diff';\n    grades_diff=reshape(grades_diff,length(grades_diff),1);\n\
    \    grades_diff=grades_diff';\n    grades_sum=reshape(grades_sum,length(grades_sum),1);\n\
    \    grades_sum=grades_sum';\n    grades_diff=reshape(grades_diff,length(grades_diff),1);\n\
    \    grades_diff=grades_diff';\n    grades_diff=reshape(grades_diff,length(grades_diff),1);\n\
    \    grades_diff=grades_diff';\n    grades_sum=reshape(grades_sum,length(grades_sum),1);\n\
    \    grades_sum=grades_sum';\n    grades_sum=grades_sum';\n    grades_diff=reshape(grades_diff,length(grades_diff),1);\n\
    \    grades_diff=grades_diff';\n    grades_diff=reshape(grades_diff,length(grades_diff),1);\n\
    \    grades_diff=grades_diff';\n    grades_diff=reshape(grades_diff,length(grades_diff),1);\n\
    \    grades_diff=grades_diff';\n    grades_diff=reshape(grades_diff,length(grades_diff),1);\n\
    \    grades_diff=grades_diff';\n    grades_diff=reshape(grades_diff,length(grades_diff),1);\n\
    \    grades_diff=grades_diff';\n    grades_diff=reshape(grades_diff,length(grades_diff),1);\n\
    \    grades_diff=grades_diff';\n    grades_diff=reshape(grades_diff,length(grades_diff),1);\n\
    \    grades_diff=grades_diff';\n    grades_diff=reshape(grades_diff,length(grades_diff),1);\n\
    using Test\n\n@testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpl0jpbb8d.jl:26\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpl0jpbb8d.jl:1\n\
    in expression starting at /tmp/tmpl0jpbb8d.jl:1\n"
  stdout: ''
  timestamp: 1660012031
- exit_code: 1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a vector of GPAs for some students and you have to write\
    \ \n    a function that can output a vector of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grades =  sort(grades)\n    return map(i->{\n        if i>=4.0\n     \
    \       return \"A+\";\n        if i>=3.7\n            return \"A\";\n       \
    \ if i>=3.3\n            return \"A-\";\n        if i>=3.0\n            return\
    \ \"B+\";\n        if i>=2.7\n            return \"B\";\n        if i>=2.3\n \
    \           return \"B-\";\n        if i>=2.0\n            return \"C+\";\n  \
    \      if i>=1.7\n            return \"C\";\n        if i>=1.3\n            return\
    \ \"C-\";\n        if i>=1.0\n            return \"D+\";\n        if i>= 0.7\n\
    \            return \"D\";\n        if i>= 0.0\n            return \"D-\";\n \
    \       return \"E\"\n    },grades)\nend\n</code>\n<|/ a dscore=1 tags=julia,performance\
    \ |>\n<| c |>\nThanks so much! This code worked and even produced the correct\
    \ output. I am new to programming, so this was a great learning experience. I\
    \ am going to study this code and try to understand it.\n<|/ c |>\n<| c |>\nHappy\
    \ to help! I highly recommend you have a look at this book: https://books.google.com/\
    \ - it is about learning Julia in a very thorough manner and is a great resource\
    \ for beginners. Just ask if you have any questions.\n<|/ c |>\n<| a tags=julia,performance\
    \ |>\nYou could try the following. This works using an enumerator to iterate through\
    \ the values and finding the grades in the vector and then converting the result\
    \ to the desired format you wanted.\n<code>\ngrades = [3.5 3.7 4.0 2.7 2.3 2.3\
    \ 2.0 1.7 1.3 1.0 0.7 0.0]\ngrades_enum = enumerate(grades)\nresult = []\nfor\
    \ (index, value) in grades_enum\n    if value >= 4.0\n        result = [value,\
    \ \"A+\"]\n    elseif value >= 3.7\n        result = [value, \"A\"]\n    elseif\
    \ value >= 3.3\n        result = [value, \"A-\"]\n    elseif value >= 3.0\n  \
    \      result = [value, \"B+\"]\n    elseif value >= 2.7\n        result = [value,\
    \ \"B\"]\n    elseif value >= 2.3\n        result = [value, \"B-\"]\n    elseif\
    \ value >= 2.0\n        result = [value, \"C+\"]\n    elseif value >= 1.7\n  \
    \      result = [value, \"C\"]\n    elseif value >= 1.3\n        result = [value,\
    \ \"C-\"]\n    elseif value >= 1.0\n        result = [value, \"D+\"]\n    elseif\
    \ value >= 0.7\n        result = [value, \"D\"]\n    elseif value >= 0.0\n   \
    \     result = [value, \"D-\"]\n    else\nusing Test\n\n@testset begin\n\ncandidate\
    \ = numerical_letter_grade;\n\t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5])\
    \ == [\"D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"}\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpqx9s8n5d.jl:54\nin expression starting at /tmp/tmpqx9s8n5d.jl:54\n"
  stdout: ''
  timestamp: 1660012031
- exit_code: 1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a vector of GPAs for some students and you have to write\
    \ \n    a function that can output a vector of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    \n    # initialize the result vector\n    result = Vector{String}(length(grades))\n\
    \    \n    # loop through the input grades\n    for ii = 1:length(grades)\n  \
    \      if grades[ii] >= 4.0\n            result[ii] = \"A+\"\n        elseif grades[ii]\
    \ >= 3.7\n            result[ii] = \"A\"\n        elseif grades[ii] >= 3.3\n \
    \           result[ii] = \"A-\"\n        elseif grades[ii] >= 3.0\n          \
    \  result[ii] = \"B+\"\n        elseif grades[ii] >= 2.7\n            result[ii]\
    \ = \"B\"\n        elseif grades[ii] >= 2.3\n            result[ii] = \"B-\"\n\
    \        elseif grades[ii] >= 2.0\n            result[ii] = \"C+\"\n        elseif\
    \ grades[ii] >= 1.7\n            result[ii] = \"C\"\n        elseif grades[ii]\
    \ >= 1.3\n            result[ii] = \"C-\"\n        elseif grades[ii] >= 1.0\n\
    \            result[ii] = \"D+\"\n        elseif grades[ii] >= 0.7\n         \
    \   result[ii] = \"D\"\n        elseif grades[ii] >= 0.0\n            result[ii]\
    \ = \"D-\"\n        else\n            result[ii] = \"E\"\n        end\n    end\n\
    \    \n    # return the result\n    return result\nend\n</cell>\n<code language=julia-0.6>\n\
    grade_equation([4.0, 3, 1.7, 2, 3.5])\n</cell>\n<code language=julia-0.6>\n# Exercise\
    \ 7.1\n\"\"\"\nCreate a vector, grades, with the first five elements of your grades\
    \ array.\n\"\"\"\ngrades = [4.0, 3, 1.7, 2, 3.5]\nusing Test\n\n@testset begin\n\
    \ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0, 3, 1.7, 2, 3.5])\
    \ == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2]) == [\"\
    D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0]) == [\"\
    E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\"\
    , \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbhsobko3.jl:65\nin expression starting at\
    \ /tmp/tmpbhsobko3.jl:65\n"
  stdout: ''
  timestamp: 1660012031
- exit_code: 1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a vector of GPAs for some students and you have to write\
    \ \n    a function that can output a vector of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    \n    grades = sort(grades)\n    grades = grades..0.0\n    grades = grades..(grades[1]/10)\n\
    \    grades = grades..(grades[2]/10)\n    grades = grades..(grades[3]/10)\n  \
    \  grades = grades..(grades[4]/10)\n    grades = grades..(grades[5]/10)\n    grades\
    \ = grades..(grades[6]/10)\n    grades = grades..(grades[7]/10)\n    grades =\
    \ grades..(grades[8]/10)\n    grades = grades..(grades[9]/10)\n    grades = grades..(grades[10]/10)\n\
    \    \n    grades = grades..(grades[11]/10)\n    grades = grades..(grades[12]/10)\n\
    \    grades = grades..(grades[13]/10)\n    grades = grades..(grades[14]/10)\n\
    \    grades = grades..(grades[15]/10)\n    grades = grades..(grades[16]/10)\n\
    \    grades = grades..(grades[17]/10)\n    grades = grades..(grades[18]/10)\n\
    \    grades = grades..(grades[19]/10)\n    grades = grades..(grades[20]/10)\n\
    \    grades = grades..(grades[21]/10)\n    grades = grades..(grades[22]/10)\n\
    \    grades = grades..(grades[23]/10)\n    grades = grades..(grades[24]/10)\n\
    \    grades = grades..(grades[25]/10)\n    grades = grades..(grades[26]/10)\n\
    \    grades = grades..(grades[27]/10)\n    grades = grades..(grades[28]/10)\n\
    \    grades = grades..(grades[29]/10)\n    grades = grades..(grades[30]/10)\n\
    \    grades = grades..(grades[31]/10)\n    grades = grades..(grades[32]/10)\n\
    \    grades = grades..(grades[33]/10)\n    grades = grades..(grades[34]/10)\n\
    \    grades = grades..(grades[35]/10)\n    grades = grades..(grades[36]/10)\n\
    \    grades = grades..(grades[37]/10)\n    grades = grades..(grades[38]/10)\n\
    \    \nusing Test\n\n@testset begin\n\ncandidate = numerical_letter_grade;\n\t\
    @test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"\
    ])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"\
    ])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7])\
    \ == [\"E\", \"D-\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpjad1djxz.jl:26\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjad1djxz.jl:1\n\
    in expression starting at /tmp/tmpjad1djxz.jl:1\n"
  stdout: ''
  timestamp: 1660012031
- exit_code: 1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a vector of GPAs for some students and you have to write\
    \ \n    a function that can output a vector of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    # Define the function\n    \n    # Ask the user to enter the grades\n\
    \    print(\"Enter the grades (one at a time) in the order of the table:\\n\"\
    )\n    \n    grades_string = collect(1:length(grades))\n    \n    for i in grades_string\n\
    \        println(i)\n        \n    grade = readline(\"> \")\n    \n    # Convert\
    \ the user input to grades\n    grades = [grade in string.uppercase] |> String.split()\
    \ |> Vector{Float64}\n    \n    # Find the correct letter\n    \n    if grades[end]\
    \ == \"E\"\n        return [\"D\"]\n    end\n    \n    letter = grades[end] ==\
    \ \"+\" ? \">\" : \"<\" \n    \n    for i in grades[end-1:end]\n        if i ==\
    \ grades[end-1]\n            letter = \">\"\n            break\n        else\n\
    \            letter = \"<\"\n        end\n    end\n    \n    grades[end] = letter\n\
    \    \n    # Return grades\n    \n    grades[end] = grades[end] .- grades[end]\
    \ == \"+\" ? \"D\" : \"E\"\n    \n    return grades[end-1] |> String.concat [letter]\n\
    end\n</cell>\n<text>\nQuestion 3\nusing Test\n\n@testset begin\n\ncandidate =\
    \ numerical_letter_grade;\n\t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5])\
    \ == [\"D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: space before \"[\" not allowed in \"String.concat\
    \ [\" at /tmp/tmp3el6g3ec.jl:65\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp3el6g3ec.jl:65\n\
    in expression starting at /tmp/tmp3el6g3ec.jl:65\n"
  stdout: ''
  timestamp: 1660012031
- exit_code: 1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a vector of GPAs for some students and you have to write\
    \ \n    a function that can output a vector of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    \"\"\"\n    Returns a vector of letter grades using the following table:\n\
    \             GPA       |    Letter grade\n              4.0                A+\n\
    \            > 3.7                A \n            > 3.3                A- \n \
    \           > 3.0                B+\n            > 2.7                B \n   \
    \         > 2.3                B-\n            > 2.0                C+\n     \
    \       > 1.7                C\n            > 1.3                C-\n        \
    \    > 1.0                D+ \n            > 0.7                D \n         \
    \   > 0.0                D-\n              0.0                E\n    \nusing Test\n\
    \n@testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqslpehvh.jl:1\nin expression starting at /tmp/tmpqslpehvh.jl:1\n"
  stdout: ''
  timestamp: 1660012031
- exit_code: 1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a vector of GPAs for some students and you have to write\
    \ \n    a function that can output a vector of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    # Write your code here\n    return \"\"\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0, 3, 1.7, 2, 3.5])\
    \ == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2]) == [\"\
    D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0]) == [\"\
    E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\"\
    , \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 6 errored,
    0 broken.

    in expression starting at /tmp/tmphgnmyyoo.jl:32

    '
  stdout: "test set: Error During Test at /tmp/tmphgnmyyoo.jl:35\n  Test threw exception\n\
    \  Expression: candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"\
    C\", \"A-\"]\n  MethodError: Cannot `convert` an object of type String to an object\
    \ of type Vector{String}\n  Closest candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{Vector{String}}, !Matched::LibGit2.StrArrayStruct) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LibGit2/src/strarray.jl:13\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at ~/.conda/envs/polyglot/share/julia/base/array.jl:554\n\
    \    ...\n  Stacktrace:\n   [1] numerical_letter_grade(grades::Vector{Float64})\n\
    \     @ Main /tmp/tmphgnmyyoo.jl:28\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmphgnmyyoo.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmphgnmyyoo.jl:34\ntest set:\
    \ Error During Test at /tmp/tmphgnmyyoo.jl:36\n  Test threw exception\n  Expression:\
    \ candidate([1.2]) == [\"D+\"]\n  MethodError: Cannot `convert` an object of type\
    \ String to an object of type Vector{String}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::LinearAlgebra.Factorization) where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{Vector{String}}, !Matched::LibGit2.StrArrayStruct) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LibGit2/src/strarray.jl:13\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at ~/.conda/envs/polyglot/share/julia/base/array.jl:554\n\
    \    ...\n  Stacktrace:\n   [1] numerical_letter_grade(grades::Vector{Float64})\n\
    \     @ Main /tmp/tmphgnmyyoo.jl:28\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [in"
  timestamp: 1660012034
- exit_code: 1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a vector of GPAs for some students and you have to write\
    \ \n    a function that can output a vector of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    # Your code here\n    \nend\n</cell>\n<code language=julia-1.3>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpc85foorr.jl:30\nin expression starting at\
    \ /tmp/tmpc85foorr.jl:30\n"
  stdout: ''
  timestamp: 1660012032
- exit_code: 1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a vector of GPAs for some students and you have to write\
    \ \n    a function that can output a vector of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n\"\"\"Return a vector of letter grades given an input vector of GPA scores\
    \ \"\"\"\n    \nusing Test\n\n@testset begin\n\ncandidate = numerical_letter_grade;\n\
    \t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"\
    A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5]) == [\"\
    D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5,\
    \ 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp0hfgyuru.jl:26\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp0hfgyuru.jl:1\n\
    in expression starting at /tmp/tmp0hfgyuru.jl:1\n"
  stdout: ''
  timestamp: 1660012031
- exit_code: 1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a vector of GPAs for some students and you have to write\
    \ \n    a function that can output a vector of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grades = sort(grades)\n    \n    grades = grades[(grades > 0) & (grades\
    \ < 5)]\n    grades = grades[2:end]\nusing Test\n\n@testset begin\n\ncandidate\
    \ = numerical_letter_grade;\n\t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5])\
    \ == [\"D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpz6__b1sr.jl:26\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpz6__b1sr.jl:1\n\
    in expression starting at /tmp/tmpz6__b1sr.jl:1\n"
  stdout: ''
  timestamp: 1660012032
- exit_code: 1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a vector of GPAs for some students and you have to write\
    \ \n    a function that can output a vector of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grades = sort(grades)\n    \n    grades = grades[end-1:end]\n    grades\
    \ = grades[2:end]\n    grades = grades[2:end]\n    \n    grades = grades[2:end]\n\
    \    \n    if grades[end] == 0.0 \n        return [\"E\"]\n    \n    if grades[end]\
    \ > 3.0 \n        if grades[end] >= 2.3 \n            if grades[end] >= 2.0 \n\
    \                if grades[end] >= 1.7 \n                    if grades[end] >=\
    \ 1.3 \n                        if grades[end] >= 1.0 \n                     \
    \       if grades[end] >= 0.7 \n                                if grades[end]\
    \ >= 0.0 \n                                    if grades[end] >= 0.0 \n      \
    \                                  return [\"D+\"]\n                         \
    \           else \n                                        return [\"D\"]\n  \
    \                              else \n                                    return\
    \ [\"C\"]\n                            else \n                               \
    \ return [\"C-\"]\n                        else \n                           \
    \ return [\"C\"]\n                    else \n                        return [\"\
    B-\"]\n                else \n                    return [\"B\"]\n           \
    \ else \n                return [\"B-\"]\n        else \n            return [\"\
    B+\"]\n    else \n        if grades[end] >= 2.7 \n            if grades[end] >=\
    \ 2.0 \n                if grades[end] >= 1.7 \n                    if grades[end]\
    \ >= 1.3 \n                        if grades[end] >= 1.0 \n                  \
    \          if grades[end] >= 0.7 \n                                if grades[end]\
    \ >= 0.0 \n                                    if grades[end] >= 0.0 \n      \
    \                                  return [\"D+\"]\n                         \
    \           else \n                                        return [\"D\"]\n  \
    \                              else \n                                    return\
    \ [\"C\"]\n                            else \n                               \
    \ return [\"C-\"]\n                        else \n                           \
    \ return [\"C\"]\n                    else \n                        return [\"\
    B-\"]\n                else \n                    return [\"B\"]\n           \
    \ else \n                return [\"B-\"]\n        else \n            if grades[end]\
    \ >= 3.3 \n                if grades[end] >= 2.7 \n                    if grades[end]\
    \ >= 2.0 \n                        if grades[end] >= 1.7 \n                  \
    \          if grades[end] >= 1.3 \n                                if grades[end]\
    \ >= 1.0 \n                                    if grades[end] >= 0.7 \n      \
    \                                  if grades[end] >= 0.0 \n                  \
    \                          if grades[end] >= 0.0 \n                          \
    \                      return [\"D+\"]\n                                     \
    \       else \n                                                return [\"D\"]\n\
    \                                        else \n                             \
    \               return [\"C\"]\n                                    else \n  \
    \                                      return [\"C-\"]\n                     \
    \           else \n                                    return [\"C\"]\n      \
    \                      else \n                                return [\"B-\"]\n\
    \                        else \n                            return [\"B\"]\n \
    \                   else \n                        return [\"B-\"]\n         \
    \       else \n                    if grades[end] >= 3.0 \n                  \
    \      if grades[end] >= \nusing Test\n\n@testset begin\n\ncandidate = numerical_letter_grade;\n\
    \t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"\
    A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5]) == [\"\
    D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5,\
    \ 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"if\" at /tmp/tmpbsyynuxl.jl:46 expected \"\
    end\", got \"else\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpbsyynuxl.jl:50\n\
    in expression starting at /tmp/tmpbsyynuxl.jl:50\n"
  stdout: ''
  timestamp: 1660012031
- exit_code: 1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a vector of GPAs for some students and you have to write\
    \ \n    a function that can output a vector of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grades.sort!\n    grades = grades.reverse()\n    grade = grades[length(grades)]\n\
    \    if grade > 3.0\n        return \"D+\"\n    end\n    if grade > 2.0\n    \
    \    return \"D\"\n    end\n    if grade > 1.0\n        return \"D-\"\n    end\n\
    \    if grade > 0.7\n        return \"C+\"\n    end\n    if grade > 1.5\n    \
    \    return \"C\"\n    end\n    if grade > 1.0\n        return \"C-\"\n    end\n\
    \    if grade > 0.0\n        return \"B+\"\n    end\n    if grade > 2.0\n    \
    \    return \"B\"\n    end\n    if grade > 3.0\n        return \"B-\"\n    end\n\
    \    if grade > 4.0\n        return \"A+\"\n    end\n    if grade > 5.0\n    \
    \    return \"A\"\n    end\n    if grade > 6.0\n        return \"A-\"\n    end\n\
    \    if grade > 0.0\n        return \"E\"\n    end\n    if grade <= 0.0\n    \
    \    return \"E\"\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = numerical_letter_grade;\n\
    \t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"\
    A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5]) == [\"\
    D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5,\
    \ 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 6 errored,
    0 broken.

    in expression starting at /tmp/tmp9hkc09ss.jl:75

    '
  stdout: "test set: Error During Test at /tmp/tmp9hkc09ss.jl:78\n  Test threw exception\n\
    \  Expression: candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"\
    C\", \"A-\"]\n  type Array has no field sort!\n  Stacktrace:\n   [1] getproperty\n\
    \     @ ./Base.jl:42 [inlined]\n   [2] numerical_letter_grade(grades::Vector{Float64})\n\
    \     @ Main /tmp/tmp9hkc09ss.jl:27\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp9hkc09ss.jl:78 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp9hkc09ss.jl:77\ntest set:\
    \ Error During Test at /tmp/tmp9hkc09ss.jl:79\n  Test threw exception\n  Expression:\
    \ candidate([1.2]) == [\"D+\"]\n  type Array has no field sort!\n  Stacktrace:\n\
    \   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] numerical_letter_grade(grades::Vector{Float64})\n\
    \     @ Main /tmp/tmp9hkc09ss.jl:27\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp9hkc09ss.jl:79 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp9hkc09ss.jl:77\ntest set:\
    \ Error During Test at /tmp/tmp9hkc09ss.jl:80\n  Test threw exception\n  Expression:\
    \ candidate([0.5]) == [\"D-\"]\n  type Array has no field sort!\n  Stacktrace:\n\
    \   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] numerical_letter_grade(grades::Vector{Float64})\n\
    \     @ Main /tmp/tmp9hkc09ss.jl:27\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp9hkc09ss.jl:80 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp9hkc09ss.jl:77\ntest set:\
    \ Error During Test at /tmp/tmp9hkc09ss.jl:81\n  Test threw exception\n  Expression:\
    \ candidate(["
  timestamp: 1660012033
- exit_code: 1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a vector of GPAs for some students and you have to write\
    \ \n    a function that can output a vector of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    \"\"\"\n    Returns the letter grades for the given grade vector. \n \
    \   \n    The function takes the vector of grades and returns the letter grades\
    \ based \n    on that vector.\n    \n    Args:\n        grades (vector): Vector\
    \ of grades \n    \n    Returns:\n        string vector: A string vector containing\
    \ the letter grades \n    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7,\
    \ 2, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\n    gpas =\
    \ grades.^2\n    grades_sum = (sum(grades) + sum(gpas)) * 0.5\n    grades_div\
    \ = grades / grades_sum\n    grades_sub = grades - grades_sum\n    grades_pow\
    \ = grades_div .* grades_sub\n    grades_div = grades_pow .- gpas\n    grades_pow\
    \ = grades_div .* gpas\n    return map(x->grades_sum - x, grades_pow)\nend\n</cell>\n\
    <text>\nProblem 4b: Explain why your numerical grade function works for the example\
    \ grade vector from problem 4.\nusing Test\n\n@testset begin\n\ncandidate = numerical_letter_grade;\n\
    \t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"\
    A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5]) == [\"\
    D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5,\
    \ 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpj_cqzfam.jl:52\nin expression starting at\
    \ /tmp/tmpj_cqzfam.jl:52\n"
  stdout: ''
  timestamp: 1660012031
- exit_code: 1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a vector of GPAs for some students and you have to write\
    \ \n    a function that can output a vector of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n\"\"\"\nReturn the vector of a numerical letter grade in A+ ... B-\nusing\
    \ Test\n\n@testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgtmw5ckb.jl:1\nin expression starting at /tmp/tmpgtmw5ckb.jl:1\n"
  stdout: ''
  timestamp: 1660012032
- exit_code: 1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a vector of GPAs for some students and you have to write\
    \ \n    a function that can output a vector of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grades.sort() \n    grades.reverse()\n    grades = [i for i in grades\
    \ if i <> 0]\n    grades = [i for i in grades if i >0]\n    grades_sum=0\n   \
    \ for grade in grades\n        grades_sum+=grade\n    end\n    if grades_sum==0\n\
    \        return \"D\"\n    \n    grades_mean = grades_sum/length(grades)\n   \
    \ grades_variance = sum([(grade-grades_mean)^2 for grade in grades])/length(grades)\n\
    \    if grades_variance==0\n        return \"D\"\n    \n    letter_grades = [\"\
    \"]\n    sum_of_variances = 0\n    for grade in grades\n        if grade<grades_mean\n\
    \            letter_grades[1] = \"C-\"\n        elseif grade>grades_mean\n   \
    \         letter_grades[1] = \"C\"\n        elseif grade>grades_mean && grade<grades_mean+grades_variance\n\
    \            letter_grades[1] = \"B-\"\n        elseif grade>grades_mean + grades_variance\
    \ && grade<grades_mean+grades_variance+grades_variance^2\n            letter_grades[1]\
    \ = \"B\"\n        elseif grade>grades_mean + grades_variance + grades_variance^2\n\
    \            letter_grades[1] = \"A-\"\n        elseif grade>grades_mean + grades_variance\
    \ + grades_variance^2\n            letter_grades[1] = \"A\"\n        elseif grade>grades_mean\
    \ + grades_variance + grades_variance^2\n            letter_grades[1] = \"A+\"\
    \n        elseif grade>grades_mean + grades_variance + grades_variance^2\n   \
    \         letter_grades[1] = \"D+\"\n        else\n            letter_grades[1]\
    \ = \"D\"\n        end\n        sum_of_variances+=grades_variance\n    end\n \
    \   \n    if sum_of_variances==0\n        return \"E\"\n    \n    letter_grades[1]\
    \ = \"D\" if letter_grades[1] == \"D+\" || letter_grades[1] == \"D-\" \n    return\
    \ letter_grades\nend\n</cell>\n<code language=julia-1.0>\ngrade_equation([4.0,\
    \ 3, 1.7, 2, 3.5])\n</cell>\n<code language=julia-1.0>\ngrade_equation([4.0, 3,\
    \ 1.7, 2, 3.5])[1]\n</cell>\n<code language=julia-1.0>\ngrade_equation([4.0, 3,\
    \ 1.7, 2, 3.5])[2]\n</cell>\n<code language=julia-1.0>\ngrade_equation([4.0, 3,\
    \ 1.7, 2, 3.5])[3]\n</cell>\n<code language=julia-1.0>\ngrade_equation([4.0, 3,\
    \ 1.7, \nusing Test\n\n@testset begin\n\ncandidate = numerical_letter_grade;\n\
    \t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"\
    A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5]) == [\"\
    D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5,\
    \ 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \">\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpa1gbj9ub.jl:29\nin expression starting at\
    \ /tmp/tmpa1gbj9ub.jl:29\n"
  stdout: ''
  timestamp: 1660012032
- exit_code: 1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a vector of GPAs for some students and you have to write\
    \ \n    a function that can output a vector of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n  \nusing Test\n\n@testset begin\n\ncandidate = numerical_letter_grade;\n\t\
    @test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"\
    ])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"\
    ])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7])\
    \ == [\"E\", \"D-\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpia59wyll.jl:26\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpia59wyll.jl:1\n\
    in expression starting at /tmp/tmpia59wyll.jl:1\n"
  stdout: ''
  timestamp: 1660012032
- exit_code: 1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a vector of GPAs for some students and you have to write\
    \ \n    a function that can output a vector of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    letter_grades = Vector{String}(undef, 0)\n    grade = grades[1]\n    if\
    \ grade <= 4.0\n        letter_grades[1] = \"A+\"\n    elsif grade > 4.0 && grade\
    \ <= 3.7\n        letter_grades[1] = \"A\"\n    elsif grade > 3.7 && grade <=\
    \ 3.3\n        letter_grades[1] = \"A-\"\n    elsif grade > 3.3 && grade <= 3.0\n\
    \        letter_grades[1] = \"B+\"\n    elsif grade > 3.0 && grade <= 2.7\n  \
    \      letter_grades[1] = \"B\"\n    elsif grade > 2.7 && grade <= 2.3\n     \
    \   letter_grades[1] = \"B-\"\n    elsif grade > 2.3 && grade <= 2.0\n       \
    \ letter_grades[1] = \"C+\"\n    elsif grade > 2.0 && grade <= 1.7\n        letter_grades[1]\
    \ = \"C\"\n    elsif grade > 1.7 && grade <= 1.3\n        letter_grades[1] = \"\
    C-\"\n    elsif grade > 1.3 && grade <= 1.0\n        letter_grades[1] = \"D+\"\
    \n    elsif grade > 1.0 && grade <= 0.7\n        letter_grades[1] = \"D\"\n  \
    \  elsif grade > 0.7 && grade <= 0.0\n        letter_grades[1] = \"D-\"\n    else\n\
    \        letter_grades[1] = \"E\"\n    end\n    return letter_grades\nend\n</code>\n\
    <|/ a dscore=1 |>\n<| c |>\nAwesome, thank you! So basically what you have done\
    \ here is made my code more efficient. Very helpful.\n<|/ c |>\n<| c |>\nHappy\
    \ to help :)\n<|/ c |>\n<| a tags=julia,if-statement,for-loop,performance |>\n\
    The first thing that comes to mind is to use an accumulator variable to collect\
    \ the grades. You don't have to keep track of all the grades, just one at a time,\
    \ because your grade calculation function already does that. So you can do something\
    \ like this:\n<code>\ngrades = Vector{String}(undef, 0)\nusing Test\n\n@testset\
    \ begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0, 3, 1.7,\
    \ 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"grade\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpdlhg5sly.jl:31\nin expression starting at /tmp/tmpdlhg5sly.jl:31\n"
  stdout: ''
  timestamp: 1660012032
- exit_code: 1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a vector of GPAs for some students and you have to write\
    \ \n    a function that can output a vector of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    \n    for i in grades\n        \n        if i <= 3.7\n            \n \
    \           grades[i] = \"A+\"\n        \n        else if i > 3.7 and i <= 3.3\n\
    \            \n            grades[i] = \"A\"\n        \n        else if i > 3.3\
    \ and i <= 3.0\n            \n            grades[i] = \"A-\"\n        \n     \
    \   else if i > 3.0 and i <= 2.7\n            \n            grades[i] = \"B+\"\
    \n        \n        else if i > 2.7 and i <= 2.3\n            \n            grades[i]\
    \ = \"B\"\n        \n        else if i > 2.3 and i <= 2.0\n            \n    \
    \        grades[i] = \"B-\"\n        \n        else if i > 2.0 and i <= 1.7\n\
    \            \n            grades[i] = \"C+\"\n        \n        else if i > 1.7\
    \ and i <= 1.3\n            \n            grades[i] = \"C\"\n        \n      \
    \  else if i > 1.3 and i <= 1.0\n            \n            grades[i] = \"C-\"\n\
    \        \n        else if i > 1.0 and i <= 0.7\n            \n            grades[i]\
    \ = \"D+\"\n        \n        else if i > 0.7 and i <= 0.0\n            \n   \
    \         grades[i] = \"D\"\n        \n        else\n            \n          \
    \  grades[i] = \"D-\"\n        end\n    end\n    \n    return grades\nend\n  \
    \  \nend\n</cell>\n<code language=julia-0.5>\ngrade_equation([4.0, 3, 1.7, 2,\
    \ 3.5])\n</cell>\n<code language=julia-0.5>\nusing Test\n\n@testset begin\n\n\
    candidate = numerical_letter_grade;\n\t@test(candidate([4.0, 3, 1.7, 2, 3.5])\
    \ == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2]) == [\"\
    D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0]) == [\"\
    E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\"\
    , \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfbswweb6.jl:34\nin expression starting at\
    \ /tmp/tmpfbswweb6.jl:34\n"
  stdout: ''
  timestamp: 1660012032
- exit_code: 1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a vector of GPAs for some students and you have to write\
    \ \n    a function that can output a vector of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    \"\"\"Takes a vector of numeric grades and outputs a vector of letter\
    \ grades \n    using the above table\n    \n    Arguments:\n    grades {Vector}\
    \ -- vector of numeric grades\n    \n    Returns:\n    [String] -- vector of letter\
    \ grades\n    \"\"\"\n    grades_to_letter = [\"A+\", \"A\", \"A-\", \"B+\", \"\
    B\", \"B-\", \"C+\", \"C\", \"C-\", \"D+\", \"D\", \"D-\", \"E\"]\n    letter_grades\
    \ = Vector{String}(undef, 0)\n    for grade in grades\n        letter_grades[end\
    \ + 1] = grades_to_letter[grade]\n    end\n    return letter_grades\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 6 errored,
    0 broken.

    in expression starting at /tmp/tmp0n9t6zhv.jl:45

    '
  stdout: "test set: Error During Test at /tmp/tmp0n9t6zhv.jl:48\n  Test threw exception\n\
    \  Expression: candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"\
    C\", \"A-\"]\n  ArgumentError: invalid index: 4.0 of type Float64\n  Stacktrace:\n\
    \    [1] to_index(i::Float64)\n      @ Base ./indices.jl:300\n    [2] to_index(A::Vector{String},\
    \ i::Float64)\n      @ Base ./indices.jl:277\n    [3] to_indices\n      @ ./indices.jl:333\
    \ [inlined]\n    [4] to_indices\n      @ ./indices.jl:325 [inlined]\n    [5] getindex\n\
    \      @ ./abstractarray.jl:1218 [inlined]\n    [6] numerical_letter_grade(grades::Vector{Float64})\n\
    \      @ Main /tmp/tmp0n9t6zhv.jl:39\n    [7] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [8] macro expansion\n      @ /tmp/tmp0n9t6zhv.jl:48 [inlined]\n\
    \    [9] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [10] top-level scope\n      @ /tmp/tmp0n9t6zhv.jl:47\ntest set:\
    \ Error During Test at /tmp/tmp0n9t6zhv.jl:49\n  Test threw exception\n  Expression:\
    \ candidate([1.2]) == [\"D+\"]\n  ArgumentError: invalid index: 1.2 of type Float64\n\
    \  Stacktrace:\n    [1] to_index(i::Float64)\n      @ Base ./indices.jl:300\n\
    \    [2] to_index(A::Vector{String}, i::Float64)\n      @ Base ./indices.jl:277\n\
    \    [3] to_indices\n      @ ./indices.jl:333 [inlined]\n    [4] to_indices\n\
    \      @ ./indices.jl:325 [inlined]\n    [5] getindex\n      @ ./abstractarray.jl:1218\
    \ [inlined]\n    [6] numerical_letter_grade(grades::Vector{Float64})\n      @\
    \ Main /tmp/tmp0n9t6zhv.jl:39\n    [7] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [8] macro expansion\n      @ /tmp/tmp0n9t6zhv.jl:49 [inlined]\n\
    \    [9] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [10] top-level scope\n      @ /tmp/tmp0n9t6zhv.jl:47\ntest set:\
    \ Error During Test at /tmp/tmp0n9t6zhv.jl:50\n  Test threw exception\n  Expression:\
    \ candidate([0.5]) == [\"D-\"]\n  ArgumentError: invalid index: 0.5 of type Float6"
  timestamp: 1660012034
- exit_code: 1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a vector of GPAs for some students and you have to write\
    \ \n    a function that can output a vector of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grades = sort(grades)\n    result = \"\"\n    N = length(grades)\n   \
    \ for i = 1:N\n        if grades[i] != 0.0\n            grade = round(grades[i]\
    \ / 4.0)\n            result += string(\"A+\") if grade > 3.0 && grade <= 3.7\
    \ || grade > 3.3 && grade <= 3.7 || grade > 3.0 && grade <= 3.3 || grade > 2.7\
    \ && grade <= 3.0 || grade > 2.3 && grade <= 2.7 || grade > 2.0 && grade <= 2.3\
    \ || grade > 1.7 && grade <= 2.0 || grade > 1.3 && grade <= 1.7 || grade > 1.0\
    \ && grade <= 1.3 || grade > 0.7 && grade <= 1.0 || grade == 0.0\n           \
    \ result += string(\"A-\") if grade > 3.0 && grade < 3.7 || grade > 3.3 && grade\
    \ < 3.7 || grade > 3.0 && grade < 3.3 || grade > 2.7 && grade < 3.0 || grade >\
    \ 2.3 && grade < 2.7 || grade > 2.0 && grade < 2.3 || grade > 1.7 && grade < 2.0\
    \ || grade > 1.3 && grade < 1.7 || grade > 1.0 && grade < 1.3 || grade > 0.7 &&\
    \ grade < 1.0 || grade == 0.0\n            result += string(\"B+\") if grade >\
    \ 3.0 && grade > 3.7 || grade > 3.3 && grade > 3.7 || grade > 3.0 && grade > 3.3\
    \ || grade > 2.7 && grade > 3.0 || grade > 2.3 && grade > 2.7 || grade > 2.0 &&\
    \ grade > 2.3 || grade > 1.7 && grade > 2.0 || grade > 1.3 && grade > 1.7 || grade\
    \ > 1.0 && grade > 1.3 || grade > 0.7 && grade > 1.0 || grade == 0.0\n       \
    \     result += string(\"B\") if grade > 3.0 && grade > 3.7 || grade > 3.3 &&\
    \ grade > 3.7 || grade > 3.0 && grade > 3.3 || grade > 2.7 && grade > 3.0 || grade\
    \ > 2.3 && grade > 2.7 || grade > 2.0 && grade > 2.3 || grade > 1.7 && grade >\
    \ 2.0 || grade > 1.3 && grade > 1.7 || \nusing Test\n\n@testset begin\n\ncandidate\
    \ = numerical_letter_grade;\n\t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5])\
    \ == [\"D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"if\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp_qfg5abo.jl:33\nin expression starting at /tmp/tmp_qfg5abo.jl:33\n"
  stdout: ''
  timestamp: 1660012033
- exit_code: 1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a vector of GPAs for some students and you have to write\
    \ \n    a function that can output a vector of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grades = sort(grades)\n    index = 1:length(grades)\n    grade = grades[index]\n\
    \    if grade <= 3.0 \n        return \"A+\"\n    end\n    if grade >= 3.7 \n\
    \        return \"A\"\n    end\n    if grade >= 3.3 \n        return \"A-\"\n\
    \    end\n    if grade >= 3.0 \n        return \"B+\"\n    end\n    if grade >=\
    \ 2.7 \n        return \"B\"\n    end\n    if grade >= 2.3 \n        return \"\
    B-\"\n    end\n    if grade >= 2.0 \n        return \"C+\"\n    end\n    if grade\
    \ >= 1.7 \n        return \"C\"\n    end\n    if grade >= 1.3 \n        return\
    \ \"C-\"\n    end\n    if grade >= 1.0 \n        return \"D+\"\n    end\n    if\
    \ grade >= 0.7 \n        return \"D\"\n    end\n    if grade >= 0.0 \n       \
    \ return \"D-\"\n    end\nend\n</code>\n<|/ a dscore=0 |>\n<| c |>\nI made a little\
    \ edit. I also changed the variable name grades to grades.\n<|/ c |>\n<| c |>\n\
    `sort!` is not an in-place operation, it returns a new vector. You need to assign\
    \ the new vector to `grades` instead of `grade`, or just use the shorter `sort!`.\n\
    <|/ c |>\n<| c |>\nThanks for the feedback. I've made the change to `sort!`.\n\
    <|/ c |>\n<| a dscore=0 |>\nI am not allowed to comment on other answers, hence\
    \ this answer. This seems like a common question but I have not seen an answer\
    \ that matches your question requirements. I have added my own answer based on\
    \ a similar question.\n<code>\ngrades = [4.0, 3, 1.7, 2, 3.5]\ngrades = sort(grades)\n\
    grades[end]\n</code>\nThe above code returns a String. It does not print out but\
    \ returns it in a String variable. You can then convert it to a Vector. From there\
    \ you could use map\n<code>\ngrades = Vector{String}(map(grade, grades))\n</code>\n\
    which creates a Vector from the result of map. You will have to iterate over this\
    \ Vector and create a corresponding array and then convert the string array to\
    \ a Vector using the constructor.\n<code>\ngrades = Vector{String}(undef, length(grades))\n\
    for i=1:length(grades)\n    grades[i] = \"A\"\n    if grades[i] <= 3.0 \n    \
    \    grades[i] = \"A+\"\n    end\n    if grades[i] >= 3.7 \n        grades[i]\
    \ = \"A\"\n    end\n    if grades[i] >= 3.3 \n        grades[i] = \"A-\"\n   \
    \ end\n    if grades[i] >= 3.0 \n        grades[i] = \nusing Test\n\n@testset\
    \ begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0, 3, 1.7,\
    \ 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcfldeh66.jl:67\nin expression starting at\
    \ /tmp/tmpcfldeh66.jl:67\n"
  stdout: ''
  timestamp: 1660012033
- exit_code: 1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a vector of GPAs for some students and you have to write\
    \ \n    a function that can output a vector of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grade_vector = []\n    if grades == []\n        return \"D\"\n    end\n\
    using Test\n\n@testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxi8dqajz.jl:26\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxi8dqajz.jl:1\n\
    in expression starting at /tmp/tmpxi8dqajz.jl:1\n"
  stdout: ''
  timestamp: 1660012033
- exit_code: 1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a vector of GPAs for some students and you have to write\
    \ \n    a function that can output a vector of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    ngrades = length(grades)\n    grades_min = minimum(grades)\n    grades_max\
    \ = maximum(grades)\n    grades_range = grades_max - grades_min\n    grades_percentage\
    \ = 100*grades_range/4.0\n    gpas = Vector{Float64}(undef, ngrades)\n    for\
    \ i = 1:ngrades\n        gpas[i] = ((grades[i] - grades_min)/grades_percentage)*100\n\
    \    end\n    return grade_vector(gpas)\nend\n</cell>\n<code language=julia-1.3>\n\
    # Exercise\nusing Test\n\n@testset begin\n\ncandidate = numerical_letter_grade;\n\
    \t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"\
    A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5]) == [\"\
    D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5,\
    \ 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpln539fy7.jl:38\nin expression starting at\
    \ /tmp/tmpln539fy7.jl:38\n"
  stdout: ''
  timestamp: 1660012033
- exit_code: 1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a vector of GPAs for some students and you have to write\
    \ \n    a function that can output a vector of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grades.sort!()\n    grades = grades.reverse()\n    letter_grade = \"\"\
    \n    for grade in grades\n        if grade <= 3.0 \n            letter_grade\
    \ += \"A+\"\n        else if grade > 3.0 && grade <= 3.7\n            letter_grade\
    \ += \"A\"\n        else if grade > 3.7 && grade <= 3.9 \n            letter_grade\
    \ += \"A-\"\n        else if grade > 3.9 \n            letter_grade += \"B+\"\n\
    \        else if grade > 3.0 && grade <= 3.5 \n            letter_grade += \"\
    B\"\n        else if grade > 3.5 && grade <= 3.9 \n            letter_grade +=\
    \ \"B-\"\n        else if grade > 3.9 \n            letter_grade += \"C+\"\n \
    \       else if grade > 3.0 && grade <= 3.5 \n            letter_grade += \"C\"\
    \n        else if grade > 3.5 && grade <= 3.9 \n            letter_grade += \"\
    C-\"\n        else if grade > 3.9 \n            letter_grade += \"D+\"\n     \
    \   else if grade > 3.0 && grade <= 3.5 \n            letter_grade += \"D\"\n\
    \        else if grade > 3.5 && grade <= 3.9 \n            letter_grade += \"\
    D-\"\n        else if grade > 3.9 \n            letter_grade += \"E\"\n      \
    \  else\n            println(\"No grade given\")\n        end\n    end\n    return\
    \ letter_grade\nend\n</cell>\n<code language=julia-0.5>\ngrade_equation([4.0,\
    \ 3, 1.7, 2, 3.5])\n</cell>\n<code language=julia-0.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0, 3, 1.7,\
    \ 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpy3o9p343.jl:33\nin expression starting at\
    \ /tmp/tmpy3o9p343.jl:33\n"
  stdout: ''
  timestamp: 1660012033
- exit_code: 1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a vector of GPAs for some students and you have to write\
    \ \n    a function that can output a vector of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n\"\"\"It uses the vector, grades, to give each grade a letter grade.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpd_u60k8a.jl:1\nin expression starting at /tmp/tmpd_u60k8a.jl:1\n"
  stdout: ''
  timestamp: 1660012033
- exit_code: 1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a vector of GPAs for some students and you have to write\
    \ \n    a function that can output a vector of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    for grade in grades\n        if grade<0\n            throw(ArgumentError(\"\
    GPA must be positive\"))\n        end\nusing Test\n\n@testset begin\n\ncandidate\
    \ = numerical_letter_grade;\n\t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5])\
    \ == [\"D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"for\" at /tmp/tmp9hglrppw.jl:27\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp9hglrppw.jl:1\n\
    in expression starting at /tmp/tmp9hglrppw.jl:1\n"
  stdout: ''
  timestamp: 1660012033
- exit_code: 1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a vector of GPAs for some students and you have to write\
    \ \n    a function that can output a vector of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    \n    \n    if grades.size < 3 || grades.size > 5\n        raise ArgumentError(\"\
    grades must be a vector of 3 or 5 elements\")\n    end\nusing Test\n\n@testset\
    \ begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0, 3, 1.7,\
    \ 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"ArgumentError\"\nStacktrace:\n [1]\
    \ top-level scope\n   @ /tmp/tmpc7mn0l9j.jl:30\nin expression starting at /tmp/tmpc7mn0l9j.jl:30\n"
  stdout: ''
  timestamp: 1660012033
- exit_code: 1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a vector of GPAs for some students and you have to write\
    \ \n    a function that can output a vector of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grades_in_tenths = grades .* 10\n    lettergrade = \"-\"\n    grade_in_tenths\
    \ = (floor(grades_in_tenths[1] + grades_in_tenths[2] + grades_in_tenths[3]) /\
    \ 3)\n    if grade_in_tenths <= 4.0 \n        lettergrade = \"A\"\n    else if\
    \ grade_in_tenths <= 5.0 \n        lettergrade = \"A-\"\n    else if grade_in_tenths\
    \ <= 6.0 \n        lettergrade = \"B+\"\n    else if grade_in_tenths <= 7.0 \n\
    \        lettergrade = \"B\"\n    else if grade_in_tenths <= 8.0 \n        lettergrade\
    \ = \"B-\"\n    else if grade_in_tenths <= 9.0 \n        lettergrade = \"C+\"\n\
    \    else if grade_in_tenths <= 10.0 \n        lettergrade = \"C\"\n    else if\
    \ grade_in_tenths <= 11.0 \n        lettergrade = \"C-\"\n    else if grade_in_tenths\
    \ <= 12.0 \n        lettergrade = \"D+\"\n    else \n        lettergrade = \"\
    D\"\n    lettergrade = lettergrade ++ \"+\" if grade_in_tenths > 10 && grade_in_tenths\
    \ < 20 else \"-\" \n    return lettergrade\nend\n\"\"\"\n    grades::Vector{Float64}\n\
    \    \n    \n    Outputs:\n    lettergrades::Vector{String}\n    \n    Notes:\n\
    \    This function can be used to solve the above problem\n    It is the last\
    \ week of the semester and the teacher has to give the grades\n    to students.\
    \ The teacher has been making her own algorithm for grading.\n    The only problem\
    \ is, she has lost the code she used for grading.\n    She has given you a vector\
    \ of GPAs for some students and you have to write \n    a function that can output\
    \ a vector of letter grades using the following table:\n             GPA     \
    \  |    Letter grade\n              4.0                A+\n            > 3.7 \
    \               A \n            > 3.3                A- \n            > 3.0  \
    \              B+\n            > 2.7                B \n            > 2.3    \
    \            B-\n            > 2.0                C+\n            > 1.7      \
    \          C\n            > 1.3                C-\n            > 1.0         \
    \       D+ \n            > 0.7                D \n            > 0.0          \
    \      D-\n              0.0                E\n    \nusing Test\n\n@testset begin\n\
    \ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0, 3, 1.7, 2, 3.5])\
    \ == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2]) == [\"\
    D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0]) == [\"\
    E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\"\
    , \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzxjxuw_o.jl:32\nin expression starting at\
    \ /tmp/tmpzxjxuw_o.jl:32\n"
  stdout: ''
  timestamp: 1660012033
- exit_code: 1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a vector of GPAs for some students and you have to write\
    \ \n    a function that can output a vector of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    \"\"\"\n    Arguments:\n    grades: vector of GPAs to grade\nusing Test\n\
    \n@testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpw9h5itrm.jl:1\nin expression starting at /tmp/tmpw9h5itrm.jl:1\n"
  stdout: ''
  timestamp: 1660012033
- exit_code: 1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a vector of GPAs for some students and you have to write\
    \ \n    a function that can output a vector of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grades.sort()\n    letters = Vector{String}(undef, 0)\n    \n    if grades[0]\
    \ > 3.7\n        letters[1] = \"A+\"\n    elsif grades[0] > 3.3\n        letters[1]\
    \ = \"A-\"\n    elsif grades[0] > 3.0\n        letters[2] = \"B+\"\n    elsif\
    \ grades[0] > 2.7\n        letters[2] = \"B\"\n    elsif grades[0] > 2.3\n   \
    \     letters[3] = \"B-\"\n    elsif grades[0] > 2.0\n        letters[4] = \"\
    C+\"\n    elsif grades[0] > 1.7\n        letters[4] = \"C\"\n    elsif grades[0]\
    \ > 1.3\n        letters[5] = \"C-\"\n    elsif grades[0] > 1.0\n        letters[6]\
    \ = \"D+\"\n    elsif grades[0] > 0.7\n        letters[6] = \"D\"\n    elsif grades[0]\
    \ > 0.0\n        letters[7] = \"D-\"\n    elsif grades[0] == 0\n        letters[7]\
    \ = \"E\"\n    end\n    \n    return letters\nend\n</cell>\n<code language=julia-0.6>\n\
    # Now let us check our solution\ngrade_equation([4.0, 3, 1.7, 2, 3.5])\n</cell>\n\
    <text>\nExercise 2\nImplement the grading function using a for loop\nusing Test\n\
    \n@testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"grades\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpo3wad1ln.jl:32\nin expression starting at /tmp/tmpo3wad1ln.jl:32\n"
  stdout: ''
  timestamp: 1660012033
- exit_code: 1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a vector of GPAs for some students and you have to write\
    \ \n    a function that can output a vector of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    nums = Vector{Float64}()\n    i = 0\n    for grade in grades\n       \
    \ if grade > 0 && grade < 4\n            nums[i] = 4.0\n        elsif grade >\
    \ 4 && grade < 7\n            nums[i] = 3.7\n        elsif grade > 7 && grade\
    \ < 9\n            nums[i] = 3.3\n        elsif grade > 9 && grade < 12\n    \
    \        nums[i] = 3.0\n        elsif grade > 12 && grade < 14\n            nums[i]\
    \ = 2.7\n        elsif grade > 14 && grade < 16\n            nums[i] = 2.3\n \
    \       elsif grade > 16 && grade < 18\n            nums[i] = 2.0\n        elsif\
    \ grade > 18 && grade < 20\n            nums[i] = 1.7\n        elsif grade > 20\
    \ && grade < 23\n            nums[i] = 1.3\n        elsif grade > 23 && grade\
    \ < 25\n            nums[i] = 1.0\n        elsif grade > 25 && grade < 27\n  \
    \          nums[i] = 0.7\n        elsif grade > 27 && grade < 29\n           \
    \ nums[i] = 0.0\n        else\n            nums[i] = 0.0\n        end\n      \
    \  i = i + 1\n    end\n    letters = Vector{String}()\n    for num in nums\n \
    \       letters = cat(1, letters, letters[end-num])\n    end\n    return letters\n\
    end\n</cell>\n<text>\nWe now test our function\nusing Test\n\n@testset begin\n\
    \ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0, 3, 1.7, 2, 3.5])\
    \ == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2]) == [\"\
    D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0]) == [\"\
    E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\"\
    , \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"grade\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp7tj_2678.jl:32\nin expression starting at /tmp/tmp7tj_2678.jl:32\n"
  stdout: ''
  timestamp: 1660012033
- exit_code: 1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a vector of GPAs for some students and you have to write\
    \ \n    a function that can output a vector of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n  \n  grade_letter = []\n  for grade in grades\n    grade = grade / 4.0\n\
    \    if grade > 4.0\n      grade_letter = grade_letter + [\"A+\"]\n    else if\
    \ grade > 3.0\n      grade_letter = grade_letter + [\"A\"]\n    else if grade\
    \ > 2.0\n      grade_letter = grade_letter + [\"B+\"]\n    else if grade > 1.0\n\
    \      grade_letter = grade_letter + [\"B\"]\n    else if grade > 0.7\n      grade_letter\
    \ = grade_letter + [\"B-\"]\n    else if grade > 0.0\n      grade_letter = grade_letter\
    \ + [\"C+\"]\n    else if grade > 0.0\n      grade_letter = grade_letter + [\"\
    C\"]\n    else if grade > 0.0\n      grade_letter = grade_letter + [\"C-\"]\n\
    \    else if grade > 0.0\n      grade_letter = grade_letter + [\"D+\"]\n    else\
    \ if grade > 0.0\n      grade_letter = grade_letter + [\"D\"]\n    else \n   \
    \   grade_letter = grade_letter + [\"D-\"]\n    end\n  end\n  return grade_letter\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqbyopdp0.jl:33\nin expression starting at\
    \ /tmp/tmpqbyopdp0.jl:33\n"
  stdout: ''
  timestamp: 1660012033
- exit_code: 1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a vector of GPAs for some students and you have to write\
    \ \n    a function that can output a vector of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    \n    if (grades < 3.0) \n        return \"Invalid Grade!\"\n    end\n\
    using Test\n\n@testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpggijvazc.jl:26\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpggijvazc.jl:1\n\
    in expression starting at /tmp/tmpggijvazc.jl:1\n"
  stdout: ''
  timestamp: 1660012033
- exit_code: 1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a vector of GPAs for some students and you have to write\
    \ \n    a function that can output a vector of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n \n    grades.sort! \n    grades_str = grade_strings(grades) \n    grades_str\
    \ = \"\".join(grades_str)\n    return grades_str\nend\n</cell>\n<text>\nExercise\
    \ 8\nWhat do you notice about how we first defined grade_equation? Can you think\
    \ of an alternative way to write it so that it can handle more grade points? Implement\
    \ the grade_equation function so that it can also handle grades above 100.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp11579w98.jl:33\nin expression starting at\
    \ /tmp/tmp11579w98.jl:33\n"
  stdout: ''
  timestamp: 1660012033
- exit_code: 1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a vector of GPAs for some students and you have to write\
    \ \n    a function that can output a vector of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n\"\"\"\n    \n\"\"\"\n    \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\
    \n@testset begin\n\ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2])\
    \ == [\"D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0])\
    \ == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp0n5748fm.jl:26\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp0n5748fm.jl:1\n\
    in expression starting at /tmp/tmp0n5748fm.jl:1\n"
  stdout: ''
  timestamp: 1660012033
- exit_code: 1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a vector of GPAs for some students and you have to write\
    \ \n    a function that can output a vector of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n\"\"\"Write a function that can output a vector of letter grades using the\
    \ following table:\n             GPA       |    Letter grade\n              4.0\
    \                A+\n            > 3.7                A \n            > 3.3  \
    \              A- \n            > 3.0                B+\n            > 2.7   \
    \             B \n            > 2.3                B-\n            > 2.0     \
    \           C+\n            > 1.7                C\n            > 1.3        \
    \        C-\n            > 1.0                D+ \n            > 0.7         \
    \       D \n            > 0.0                D-\n              0.0           \
    \     E\n    \nusing Test\n\n@testset begin\n\ncandidate = numerical_letter_grade;\n\
    \t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"\
    A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5]) == [\"\
    D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5,\
    \ 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkhcsfpol.jl:1\nin expression starting at /tmp/tmpkhcsfpol.jl:1\n"
  stdout: ''
  timestamp: 1660012033
- exit_code: 1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a vector of GPAs for some students and you have to write\
    \ \n    a function that can output a vector of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n     \n    grades = sort(grades)\n    gpa = grades[end-1]\n    grade = grades[end]\n\
    \    \n    if gpa < 3.0 \n        letter = \"D+\"\n    elseif gpa >= 3.0 & gpa\
    \ < 3.7\n        letter = \"D\"\n    elseif gpa >= 3.7 & gpa < 4.0\n        letter\
    \ = \"C+\"\n    elseif gpa >= 4.0 & gpa < 4.3\n        letter = \"C\"\n    elseif\
    \ gpa >= 4.3 & gpa < 4.6\n        letter = \"B-\"\n    elseif gpa >= 4.6 & gpa\
    \ < 5.0\n        letter = \"B\"\n    elseif gpa >= 5.0 & gpa < 5.3\n        letter\
    \ = \"A-\"\n    elseif gpa >= 5.3 & gpa < 5.6\n        letter = \"A\"\n    elseif\
    \ gpa >= 5.6 & gpa < 6.0\n        letter = \"A+\"\n    else\n        letter =\
    \ \"E\"\n    end\n    \n    return letter\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = numerical_letter_grade;\n\t@test(candidate([4.0, 3, 1.7, 2, 3.5])\
    \ == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\n\t@test(candidate([1.2]) == [\"\
    D+\"])\n\t@test(candidate([0.5]) == [\"D-\"])\n\t@test(candidate([0.0]) == [\"\
    E\"])\n\t@test(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\"\
    , \"B\", \"B+\"])\n\t@test(candidate([0.0, 0.7]) == [\"E\", \"D-\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 6 errored,
    0 broken.

    in expression starting at /tmp/tmp558wmyqd.jl:58

    '
  stdout: "test set: Error During Test at /tmp/tmp558wmyqd.jl:61\n  Test threw exception\n\
    \  Expression: candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"\
    C\", \"A-\"]\n  MethodError: no method matching &(::Float64, ::Float64)\n  Closest\
    \ candidates are:\n    &(::Any, ::Any, !Matched::Any, !Matched::Any...) at ~/.conda/envs/polyglot/share/julia/base/operators.jl:655\n\
    \  Stacktrace:\n   [1] numerical_letter_grade(grades::Vector{Float64})\n     @\
    \ Main /tmp/tmp558wmyqd.jl:34\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp558wmyqd.jl:61 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp558wmyqd.jl:60\ntest set:\
    \ Error During Test at /tmp/tmp558wmyqd.jl:62\n  Test threw exception\n  Expression:\
    \ candidate([1.2]) == [\"D+\"]\n  BoundsError: attempt to access 1-element Vector{Float64}\
    \ at index [0]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861 [inlined]\n\
    \   [2] numerical_letter_grade(grades::Vector{Float64})\n     @ Main /tmp/tmp558wmyqd.jl:29\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp558wmyqd.jl:62 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp558wmyqd.jl:60\ntest set:\
    \ Error During Test at /tmp/tmp558wmyqd.jl:63\n  Test threw exception\n  Expression:\
    \ candidate([0.5]) == [\"D-\"]\n  BoundsError: attempt to access 1-element Vector{Float64}\
    \ at index [0]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861 [inlined]\n\
    \   [2] numerical_letter_grade(grades::Vector{Float64})\n     @ Main /tmp/tmp558wmyqd.jl:29\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp558wmyqd.jl:63 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdli"
  timestamp: 1660012036
- exit_code: 1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a vector of GPAs for some students and you have to write\
    \ \n    a function that can output a vector of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n\"\"\"\nThis function takes a vector of GPAs for some students and outputs\
    \ a vector of \nletter grades using the following table:\n             GPA   \
    \    |    Letter grade\n              4.0                A+\n            > 3.7\
    \                A \n            > 3.3                A- \n            > 3.0 \
    \               B+\n            > 2.7                B \n            > 2.3   \
    \             B-\n            > 2.0                C+\n            > 1.7     \
    \           C\n            > 1.3                C-\n            > 1.0        \
    \        D+ \n            > 0.7                D \n            > 0.0         \
    \       D-\n              0.0                E\n    \nExample: \n>>> grade_equation([4.0,\
    \ 3, 1.7, 2, 3.5])\n[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n\"\"\"\nif grades\
    \ == []\n    return \"E\" \nelse \n    \n    grades_sorted = sort(grades)\n  \
    \  \n    grades_gpa_avg = mean(grades)\n    \n    grades_gpa_std = std(grades)\n\
    \    \n    grades_gpa_min = min(grades)\n    \n    grades_gpa_max = max(grades)\n\
    \    \n    if grades_gpa_avg < grades_gpa_max\n        if grades_gpa_avg > grades_gpa_min\n\
    \            if grades_gpa_std < 1\n                if grades_gpa_avg < 3.5\n\
    \                    return \"A-\"\n                elif grades_gpa_avg < 3.75\n\
    \                    return \"B+\"\n                elif grades_gpa_avg < 4.25\n\
    \                    return \"B\"\n                elif grades_gpa_avg < 4.5\n\
    \                    return \"B-\"\n                elif grades_gpa_avg < 4.75\n\
    \                    return \"C+\"\n                elif grades_gpa_avg < 5.25\n\
    \                    return \"C\"\n                elif grades_gpa_avg < 5.5\n\
    \                    return \"C-\"\n                elif grades_gpa_avg < 5.75\n\
    \                    return \"D+\"\n                elif grades_gpa_avg < 6.25\n\
    \                    return \"D\"\n                elif grades_gpa_avg < 6.5\n\
    \                    return \"D-\"\n                elif grades_gpa_avg < 6.75\n\
    \                    return \"E\"\n                else \n                   \
    \ return \"F\"\n            else \n                return \"B+\"\n        else\
    \ \n            return \"A\"\n    else \n        return \"A+\"\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = numerical_letter_grade;\n\
    \t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"\
    A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5]) == [\"\
    D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5,\
    \ 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"grades_gpa_avg\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmph6bxzalw.jl:68\nin expression starting at\
    \ /tmp/tmph6bxzalw.jl:68\n"
  stdout: ''
  timestamp: 1660012034
- exit_code: 1
  program: "\"\"\"It is the last week of the semester and the teacher has to give\
    \ the grades\n    to students. The teacher has been making her own algorithm for\
    \ grading.\n    The only problem is, she has lost the code she used for grading.\n\
    \    She has given you a vector of GPAs for some students and you have to write\
    \ \n    a function that can output a vector of letter grades using the following\
    \ table:\n             GPA       |    Letter grade\n              4.0        \
    \        A+\n            > 3.7                A \n            > 3.3          \
    \      A- \n            > 3.0                B+\n            > 2.7           \
    \     B \n            > 2.3                B-\n            > 2.0             \
    \   C+\n            > 1.7                C\n            > 1.3                C-\n\
    \            > 1.0                D+ \n            > 0.7                D \n \
    \           > 0.0                D-\n              0.0                E\n    \n\
    \n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\n    \"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\
    \ \n    grades.sort!\n    if grades[1] == 4.0\n        return \"A+\"\n    else\
    \ if grades[1] > 3.7 && grades[1] < 3.3 \n        return \"A\"\n    else if grades[1]\
    \ > 3.3 && grades[1] < 3.0\n        return \"A-\"\n    else if grades[1] > 2.7\
    \ && grades[1] < 2.3\n        return \"B+\"\n    else if grades[1] > 2.3 && grades[1]\
    \ < 2.0\n        return \"B\"\n    else if grades[1] > 2.0 && grades[1] < 1.7\n\
    \        return \"B-\"\n    else if grades[1] > 1.7 && grades[1] < 1.0\n     \
    \   return \"C+\"\n    else if grades[1] > 1.0 && grades[1] < 0.7\n        return\
    \ \"C\"\n    else if grades[1] < 0.0\n        return \"C-\"\n    else\n      \
    \  return \"D+\"\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = numerical_letter_grade;\n\
    \t@test(candidate([4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"\
    A-\"])\n\t@test(candidate([1.2]) == [\"D+\"])\n\t@test(candidate([0.5]) == [\"\
    D-\"])\n\t@test(candidate([0.0]) == [\"E\"])\n\t@test(candidate([1.0, 0.3, 1.5,\
    \ 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\n\t@test(candidate([0.0,\
    \ 0.7]) == [\"E\", \"D-\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpx9479ypr.jl:30\nin expression starting at\
    \ /tmp/tmpx9479ypr.jl:30\n"
  stdout: ''
  timestamp: 1660012034
