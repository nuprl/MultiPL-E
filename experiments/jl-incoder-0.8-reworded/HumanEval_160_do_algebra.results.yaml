language: jl
name: HumanEval_160_do_algebra
results:
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    vectorLength = (length(operator) - 1)\n\
    \    if length(operand) < vectorLength\n        errorln(\"Operand vector too small\"\
    )\n    end\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp62jm4y5u.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp62jm4y5u.jl:1\n\
    in expression starting at /tmp/tmp62jm4y5u.jl:1\n"
  stdout: ''
  timestamp: 1659977903
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    operatorSize = length(operator)\n    operandSize\
    \ = length(operand)\n    assert(operatorSize == operandSize, 'Operator and operand\
    \ vectors must have same length.')\nusing Test\n\n@testset begin\n\ncandidate\
    \ = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\
    \t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: character literal contains multiple characters\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmpc68wvi_e.jl:28\nin expression\
    \ starting at /tmp/tmpc68wvi_e.jl:28\n"
  stdout: ''
  timestamp: 1659977903
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n        \n    ## The length of operator vector\
    \ is equal to the length of operand vector minus one.\n    if len(operator) !=\
    \ length(operand) - 1 \n        error(\"The length of operator vector is incorrect\"\
    )\n    end\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpqtgztm3x.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpqtgztm3x.jl:1\n\
    in expression starting at /tmp/tmpqtgztm3x.jl:1\n"
  stdout: ''
  timestamp: 1659977903
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    vector_length = length(operand)\n    if\
    \ vector_length < 1\n        error(\"The length of operator vector is smaller\
    \ than the length of operand vector.\")\n    end\n    vector_length += 1\n   \
    \ result = 1\n    for operator in operator\n        if operator == \"*\"\n   \
    \         result*=operand\n        elseif operator == \"/\"\n            quotient\
    \ = quotient(result, operand)\n        elseif operator == \"+\"\n            result+=operand\n\
    \        elseif operator == \"-\"\n            result-=operand\n        elseif\
    \ operator == \"**\"\n            result^=operand\n        elseif operator ==\
    \ \"//\"\n            result = quotient(result, operand)\n        else\n     \
    \       error(\"Unknown operator.\")\n        end\n    end\n    return result\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpld9srqsw.jl:53

    '
  stdout: "test set: Error During Test at /tmp/tmpld9srqsw.jl:56\n  Test threw exception\n\
    \  Expression: candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37\n  MethodError:\
    \ no method matching ^(::Int64, ::Vector{Int64})\n  Closest candidates are:\n\
    \    ^(::Number, !Matched::Missing) at ~/.conda/envs/polyglot/share/julia/base/missing.jl:124\n\
    \    ^(::Integer, !Matched::BigInt) at ~/.conda/envs/polyglot/share/julia/base/gmp.jl:607\n\
    \    ^(::Integer, !Matched::Bool) at ~/.conda/envs/polyglot/share/julia/base/bool.jl:166\n\
    \    ...\n  Stacktrace:\n   [1] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmpld9srqsw.jl:42\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpld9srqsw.jl:56 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpld9srqsw.jl:55\ntest set:\
    \ Error During Test at /tmp/tmpld9srqsw.jl:57\n  Test threw exception\n  Expression:\
    \ candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n  MethodError: no method\
    \ matching +(::Int64, ::Vector{Int64})\n  For element-wise addition, use broadcasting\
    \ with dot syntax: scalar .+ array\n  Closest candidates are:\n    +(::Any, ::Any,\
    \ !Matched::Any, !Matched::Any...) at ~/.conda/envs/polyglot/share/julia/base/operators.jl:655\n\
    \    +(::T, !Matched::T) where T<:Union{Int128, Int16, Int32, Int64, Int8, UInt128,\
    \ UInt16, UInt32, UInt64, UInt8} at ~/.conda/envs/polyglot/share/julia/base/int.jl:87\n\
    \    +(::Union{Int16, Int32, Int64, Int8}, !Matched::BigInt) at ~/.conda/envs/polyglot/share/julia/base/gmp.jl:535\n\
    \    ...\n  Stacktrace:\n   [1] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmpld9srqsw.jl:38\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpld9srqsw.jl:57 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 "
  timestamp: 1659977906
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    result = 1\n    for operador in operand\n\
    \        result = result * (operador ^ eval(operator))\n    end\n    result\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpiqxvzo21.jl:34

    '
  stdout: "test set: Error During Test at /tmp/tmpiqxvzo21.jl:37\n  Test threw exception\n\
    \  Expression: candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37\n  MethodError:\
    \ no method matching ^(::Int64, ::Vector{String})\n  Closest candidates are:\n\
    \    ^(::Number, !Matched::Missing) at ~/.conda/envs/polyglot/share/julia/base/missing.jl:124\n\
    \    ^(::Integer, !Matched::BigInt) at ~/.conda/envs/polyglot/share/julia/base/gmp.jl:607\n\
    \    ^(::Integer, !Matched::Bool) at ~/.conda/envs/polyglot/share/julia/base/bool.jl:166\n\
    \    ...\n  Stacktrace:\n   [1] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmpiqxvzo21.jl:28\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpiqxvzo21.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpiqxvzo21.jl:36\ntest set:\
    \ Error During Test at /tmp/tmpiqxvzo21.jl:38\n  Test threw exception\n  Expression:\
    \ candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n  MethodError: no method\
    \ matching ^(::Int64, ::Vector{String})\n  Closest candidates are:\n    ^(::Number,\
    \ !Matched::Missing) at ~/.conda/envs/polyglot/share/julia/base/missing.jl:124\n\
    \    ^(::Integer, !Matched::BigInt) at ~/.conda/envs/polyglot/share/julia/base/gmp.jl:607\n\
    \    ^(::Integer, !Matched::Bool) at ~/.conda/envs/polyglot/share/julia/base/bool.jl:166\n\
    \    ...\n  Stacktrace:\n   [1] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmpiqxvzo21.jl:28\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpiqxvzo21.jl:38 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpiqxvzo21.jl:36\ntest set:\
    \ Error During Test at /tmp/tmpiqxvzo21.jl:39\n  Test threw exception\n  Expression:\
    \ candidate([\"//\", \"*\"], [7, 3, 4]) == 8\n  Method"
  timestamp: 1659977906
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    return do_inner(operator, operand)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpe9wv7tdw.jl:30

    '
  stdout: "test set: Error During Test at /tmp/tmpe9wv7tdw.jl:33\n  Test threw exception\n\
    \  Expression: candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37\n  UndefVarError:\
    \ do_inner not defined\n  Stacktrace:\n   [1] do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})\n     @ Main /tmp/tmpe9wv7tdw.jl:26\n   [2] macro expansion\n\
    \     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpe9wv7tdw.jl:33 [inlined]\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpe9wv7tdw.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpe9wv7tdw.jl:34\n  Test threw exception\n  Expression:\
    \ candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n  UndefVarError: do_inner\
    \ not defined\n  Stacktrace:\n   [1] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmpe9wv7tdw.jl:26\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpe9wv7tdw.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpe9wv7tdw.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpe9wv7tdw.jl:35\n  Test threw exception\n  Expression:\
    \ candidate([\"//\", \"*\"], [7, 3, 4]) == 8\n  UndefVarError: do_inner not defined\n\
    \  Stacktrace:\n   [1] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmpe9wv7tdw.jl:26\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpe9wv7tdw.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpe9wv7tdw.jl:32\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  timestamp: 1659977904
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    \"\"\"Perform algebraic operation on operands\
    \ given the operators\"\"\"\n    operations = []\n    for op_str in operator\n\
    \        operations.push(op_str)\n    end\n    num_operations = length(operations)\n\
    \    num_operands = length(operand)\n    if num_operations != num_operands - 1\n\
    \        error(\"Operands have different length\")\n    end\n    result_val =\
    \ 0\n    for ii = 1 : num_operands\n        op_str = operations[ii]\n        op_int\
    \ = toInt(op_str)\n        op_val = op_int\n        if op_int == 0\n         \
    \   op_val = -1\n        elseif op_int == 1\n            op_val = 1\n        end\n\
    \        result_val += operand[ii] * op_val\n    end\n    return result_val\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpti6xlwvf.jl:52

    '
  stdout: "test set: Error During Test at /tmp/tmpti6xlwvf.jl:55\n  Test threw exception\n\
    \  Expression: candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37\n  type Array\
    \ has no field push\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n\
    \   [2] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n     @ Main\
    \ /tmp/tmpti6xlwvf.jl:29\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpti6xlwvf.jl:55 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpti6xlwvf.jl:54\ntest set:\
    \ Error During Test at /tmp/tmpti6xlwvf.jl:56\n  Test threw exception\n  Expression:\
    \ candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n  type Array has no field\
    \ push\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2]\
    \ do_algebra(operator::Vector{String}, operand::Vector{Int64})\n     @ Main /tmp/tmpti6xlwvf.jl:29\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpti6xlwvf.jl:56 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpti6xlwvf.jl:54\ntest set:\
    \ Error During Test at /tmp/tmpti6xlwvf.jl:57\n  Test threw exception\n  Expression:\
    \ candidate([\"//\", \"*\"], [7, 3, 4]) == 8\n  type Array has no field push\n\
    \  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})\n     @ Main /tmp/tmpti6xlwvf.jl:29\n   [3] macro expansion\n\
    \     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [4] macro expansion\n     @ /tmp/tmpti6xlwvf.jl:57 [inlined]\n   [5] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpti6xlwvf.jl:54\nTest Summary:\
    \ | Error  Total\ntest set      |     3  "
  timestamp: 1659977904
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    \"\"\" do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64\n    Given two vectors operator, and operand.\
    \ The first vector has basic algebra operations, and \n    the second vector is\
    \ a vector of integers. Use the two given vectors to build the algebric \n   \
    \ expression and return the evaluation of this expression.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"],\
    \ [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5])\
    \ == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpo70qr_i3.jl:1\nin expression starting at /tmp/tmpo70qr_i3.jl:1\n"
  stdout: ''
  timestamp: 1659977903
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n   \n    # check if there are enough operands\
    \ to build the expression\n    if length(operand) < length(operator)-1 \n    \
    \   return 0\n    end\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\
    \t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7,\
    \ 3, 4]) == 8)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp4nsjav9i.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp4nsjav9i.jl:1\n\
    in expression starting at /tmp/tmp4nsjav9i.jl:1\n"
  stdout: ''
  timestamp: 1659977903
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    result = operand[1]\n    for i = 2:length(operator)\n\
    \        result =  operator[i](result, operand[i])\n    end\n    return result\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmp90734fzo.jl:34

    '
  stdout: "test set: Error During Test at /tmp/tmp90734fzo.jl:37\n  Test threw exception\n\
    \  Expression: candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37\n  MethodError:\
    \ objects of type String are not callable\n  Stacktrace:\n   [1] do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})\n     @ Main /tmp/tmp90734fzo.jl:28\n   [2] macro expansion\n\
    \     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmp90734fzo.jl:37 [inlined]\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp90734fzo.jl:36\ntest set:\
    \ Error During Test at /tmp/tmp90734fzo.jl:38\n  Test threw exception\n  Expression:\
    \ candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n  MethodError: objects\
    \ of type String are not callable\n  Stacktrace:\n   [1] do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})\n     @ Main /tmp/tmp90734fzo.jl:28\n   [2] macro expansion\n\
    \     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmp90734fzo.jl:38 [inlined]\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp90734fzo.jl:36\ntest set:\
    \ Error During Test at /tmp/tmp90734fzo.jl:39\n  Test threw exception\n  Expression:\
    \ candidate([\"//\", \"*\"], [7, 3, 4]) == 8\n  MethodError: objects of type String\
    \ are not callable\n  Stacktrace:\n   [1] do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})\n     @ Main /tmp/tmp90734fzo.jl:28\n   [2] macro expansion\n\
    \     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmp90734fzo.jl:39 [inlined]\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp90734fzo.jl:36\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  timestamp: 1659977905
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    i = find(vector in operator,1) # find index\
    \ of the operator in operator vector\n    j=find(vector in operand,1) # find index\
    \ of the operand in operand vector\n    k=find(vector in operator,2) # find index\
    \ of the operator in operator vector\n    l=find(vector in operand,2) # find index\
    \ of the operand in operand vector\n    \n    if (k == 0 && l == 0) # if both\
    \ operator and operand vector are empty vector\n        return operand[1]*operator[1]\n\
    \    elseif k == 0 \n        return operand[1]*(operator[1]+operand[1]-operator[2]+operand[2])\n\
    \    elseif l == 0 \n        return (operand[1]*operator[1])+(operator[1]+operand[1]-operator[2]+operand[2])\n\
    \    else\n        return operand[1]*(operator[1]+operand[1]-operator[2]+operand[2])+(operator[k]+operand[l])\n\
    \    end\nend\n</code>\n<code>\n\"\"\"\n    Given two vectors operator, and operand.\
    \ The first vector has basic algebra operations, and \n    the second vector is\
    \ a vector of integers. Use the two given vectors to build the algebric \n   \
    \ expression and return the evaluation of this expression.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"],\
    \ [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5])\
    \ == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkq63luug.jl:41\nin expression starting at\
    \ /tmp/tmpkq63luug.jl:41\n"
  stdout: ''
  timestamp: 1659977903
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    length_operand_vector = length(operand)\n\
    \    length_operator_vector = length(operator)\n    \n    if length_operand_vector\
    \ != length_operator_vector - 1 || \n        length_operand_vector != length_operator_vector\
    \ \n        error(\"The length of operator vector does not match the length of\
    \ operand vector minus one.\")\n    end\nusing Test\n\n@testset begin\n\ncandidate\
    \ = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\
    \t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpwjqc2oa1.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpwjqc2oa1.jl:1\n\
    in expression starting at /tmp/tmpwjqc2oa1.jl:1\n"
  stdout: ''
  timestamp: 1659977903
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    \n    algebric_expression = \n    \"\"\"\
    \n    algebric_expression = \n    \"\"\"\n    \n    return eval(algebric_expression)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpym2ka5e_.jl:36

    '
  stdout: "test set: Error During Test at /tmp/tmpym2ka5e_.jl:39\n  Test threw exception\n\
    \  Expression: candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37\n  MethodError:\
    \ Cannot `convert` an object of type String to an object of type Int64\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::Ptr) where T<:Integer at ~/.conda/envs/polyglot/share/julia/base/pointer.jl:23\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:7\n\
    \    ...\n  Stacktrace:\n   [1] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmpym2ka5e_.jl:32\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpym2ka5e_.jl:39 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpym2ka5e_.jl:38\ntest set:\
    \ Error During Test at /tmp/tmpym2ka5e_.jl:40\n  Test threw exception\n  Expression:\
    \ candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n  MethodError: Cannot `convert`\
    \ an object of type String to an object of type Int64\n  Closest candidates are:\n\
    \    convert(::Type{T}, !Matched::Ptr) where T<:Integer at ~/.conda/envs/polyglot/share/julia/base/pointer.jl:23\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:7\n\
    \    ...\n  Stacktrace:\n   [1] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmpym2ka5e_.jl:32\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpym2ka5e_.jl:40 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n    "
  timestamp: 1659977906
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    assert(length(operand) == length(operator)\
    \ - 1)\n    \n    op_int = Int64(operator[1])\n    op_sign = Int64(operator[2])\n\
    \    \n    if op_sign == -1\n        operand = reverse(operand)\n    end\nusing\
    \ Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"**\"\
    , \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"\
    ], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp8jx1ukrb.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp8jx1ukrb.jl:1\n\
    in expression starting at /tmp/tmp8jx1ukrb.jl:1\n"
  stdout: ''
  timestamp: 1659977903
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n  \n    # Convert each element in operand from\
    \ String to Int64:\n    operand = convert(Vector{Int64}, operand)\nusing Test\n\
    \n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"**\", \"*\"\
    , \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3,\
    \ 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpp4drf1n5.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpp4drf1n5.jl:1\n\
    in expression starting at /tmp/tmpp4drf1n5.jl:1\n"
  stdout: ''
  timestamp: 1659977903
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    result = Int64(0)\n    \n    for i = 1:length(operand)\n\
    \        result = result + (eval(substitute(operator[i], Dict(:a => operand[i]),\
    \ \n                                  Dict(:a => a, :b => b)))\n    end\n    \n\
    \    return result\nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\
    \t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7,\
    \ 3, 4]) == 8)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvwgl2a_z.jl:31\nin expression starting at\
    \ /tmp/tmpvwgl2a_z.jl:31\n"
  stdout: ''
  timestamp: 1659977903
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    expr = Int64[]\n    vec_len1 = length(operator)\n\
    \    vec_len2 = length(operand)\n    if vec_len1 \u2265 1 && vec_len2 \u2265 1\
    \ \n        append!(expr, \n            op_map[operator[1]](operand[1],operand[2],operand[3],operand[4],operand[5])\n\
    \        )\n        for i = 6:vec_len1 \n            append!(expr,\n         \
    \       op_map[operator[i]](operand[i-1],operand[i-2],operand[i-3],operand[i-4],operand[i-5])\n\
    \            )\n        end\n        return expr\n    elseif vec_len1 \u2265 2\
    \ || vec_len2 \u2265 2 \n        if vec_len1 \u2265 vec_len2 \n            append!(expr,\n\
    \                op_map[operator[2]](operand[1],operand[2])\n            )\n \
    \       else\n            append!(expr,\n                op_map[operator[2]](operand[1],operand[2])\n\
    \            )\n            append!(expr,\n                op_map[operator[3]](operand[2],operand[3])\n\
    \            )\n        end\n        \n        for i = 4:vec_len1 \n         \
    \   append!(expr,\n                op_map[operator[i]](operand[i-1],operand[i-2],operand[i-3])\n\
    \            )\n        end\n        return expr\n    else\n        return \n\
    \            println(\"Error: wrong vector sizes\")\n            println(\"operator\
    \ size is $vec_len1 and operand size is $vec_len2\")\n            println(\"operator\
    \ vector is: $operator\")\n            println(\"operand vector is: $operand\"\
    )\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpb53rg2_a.jl:69

    '
  stdout: "test set: Error During Test at /tmp/tmpb53rg2_a.jl:72\n  Test threw exception\n\
    \  Expression: candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37\n  UndefVarError:\
    \ op_map not defined\n  Stacktrace:\n   [1] do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})\n     @ Main /tmp/tmpb53rg2_a.jl:30\n   [2] macro expansion\n\
    \     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpb53rg2_a.jl:72 [inlined]\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpb53rg2_a.jl:71\ntest set:\
    \ Error During Test at /tmp/tmpb53rg2_a.jl:73\n  Test threw exception\n  Expression:\
    \ candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n  UndefVarError: op_map\
    \ not defined\n  Stacktrace:\n   [1] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmpb53rg2_a.jl:30\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpb53rg2_a.jl:73 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpb53rg2_a.jl:71\ntest set:\
    \ Error During Test at /tmp/tmpb53rg2_a.jl:74\n  Test threw exception\n  Expression:\
    \ candidate([\"//\", \"*\"], [7, 3, 4]) == 8\n  UndefVarError: op_map not defined\n\
    \  Stacktrace:\n   [1] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmpb53rg2_a.jl:30\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpb53rg2_a.jl:74 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpb53rg2_a.jl:71\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  timestamp: 1659977904
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    alg = Vector{Vector{String}}(operator)\n\
    \    ans = Int64(0)\n    for i in 1:length(operand)\n        ans = ans + alg.(operand[i])\n\
    \    end\n    return ans\nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\
    \t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7,\
    \ 3, 4]) == 8)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmp8nw6sk7q.jl:35

    '
  stdout: "test set: Error During Test at /tmp/tmp8nw6sk7q.jl:38\n  Test threw exception\n\
    \  Expression: candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37\n  MethodError:\
    \ Cannot `convert` an object of type String to an object of type Vector{String}\n\
    \  Closest candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{Vector{String}}, !Matched::LibGit2.StrArrayStruct) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LibGit2/src/strarray.jl:13\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at ~/.conda/envs/polyglot/share/julia/base/array.jl:554\n\
    \    ...\n  Stacktrace:\n    [1] setindex!(A::Vector{Vector{String}}, x::String,\
    \ i1::Int64)\n      @ Base ./array.jl:903\n    [2] _unsafe_copyto!(dest::Vector{Vector{String}},\
    \ doffs::Int64, src::Vector{String}, soffs::Int64, n::Int64)\n      @ Base ./array.jl:253\n\
    \    [3] unsafe_copyto!\n      @ ./array.jl:307 [inlined]\n    [4] _copyto_impl!\n\
    \      @ ./array.jl:331 [inlined]\n    [5] copyto!\n      @ ./array.jl:317 [inlined]\n\
    \    [6] copyto!\n      @ ./array.jl:343 [inlined]\n    [7] copyto_axcheck!\n\
    \      @ ./abstractarray.jl:1104 [inlined]\n    [8] Vector{Vector{String}}(x::Vector{String})\n\
    \      @ Base ./array.jl:563\n    [9] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \      @ Main /tmp/tmp8nw6sk7q.jl:26\n   [10] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [11] macro expansion\n      @ /tmp/tmp8nw6sk7q.jl:38 [inlined]\n\
    \   [12] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [13] top-level scope\n      @ /tmp/tmp8nw6sk7q.jl:37\ntest set:\
    \ Error During Test at /tmp/tmp8nw6sk7q.jl:39\n  Test threw exception\n  Expression:\
    \ candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n  MethodError: Cannot `convert`\
    \ an object of type String to an object of type Vector{String}\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::Linea"
  timestamp: 1659977906
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    if length(operator) > length(operand) \n\
    \        throw(ArgumentError(\"Error: operator length is greater than operand\
    \ length\"))\n    elseif length(operator) == length(operand) \n        # do nothing\n\
    \    elseif length(operator) == 1 \n        # do nothing\n    elseif length(operator)\
    \ == 2 \n        # do nothing\n    elseif length(operator) == 3 \n        do_algebra_3(operator,\
    \ operand)\n    elseif length(operator) == 4 \n        do_algebra_4(operator,\
    \ operand)\n    elseif length(operator) == 5 \n        do_algebra_5(operator,\
    \ operand)\n    elseif length(operator) == 6 \n        do_algebra_6(operator,\
    \ operand)\n    elseif length(operator) == 7 \n        do_algebra_7(operator,\
    \ operand)\n    elseif length(operator) == 8 \n        do_algebra_8(operator,\
    \ operand)\n    elseif length(operator) == 9 \n        do_algebra_9(operator,\
    \ operand)\n    elseif length(operator) == 10 \n        do_algebra_10(operator,\
    \ operand)\n    elseif length(operator) == 11 \n        do_algebra_11(operator,\
    \ operand)\n    elseif length(operator) == 12 \n        do_algebra_12(operator,\
    \ operand)\n    elseif length(operator) == 13 \n        do_algebra_13(operator,\
    \ operand)\n    elseif length(operator) == 14 \n        do_algebra_14(operator,\
    \ operand)\n    elseif length(operator) == 15 \n        do_algebra_15(operator,\
    \ operand)\n    elseif length(operator) == 16 \n        do_algebra_16(operator,\
    \ operand)\n    elseif length(operator) == 17 \n        do_algebra_17(operator,\
    \ operand)\n    elseif length(operator) == 18 \n        do_algebra_18(operator,\
    \ operand)\n    elseif length(operator) == 19 \n        do_algebra_19(operator,\
    \ operand)\n    elseif length(operator) == 20 \n        do_algebra_20(operator,\
    \ operand)\n    elseif length(operator) == 21 \n        do_algebra_21(operator,\
    \ operand)\n    elseif length(operator) == 22 \n        do_algebra_22(operator,\
    \ operand)\n    elseif length(operator) == 23 \n        do_algebra_23(operator,\
    \ operand)\n    elseif length(operator) == 24 \n        do_algebra_24(operator,\
    \ operand)\n    elseif length(operator) == 25 \n        do_algebra_25(operator,\
    \ operand)\n    elseif length(operator) == 26 \n        do_algebra_26(operator,\
    \ operand)\n    elseif length(operator) == 27 \n        do_algebra_27(operator,\
    \ operand)\n    elseif length(operator) == 28 \n        do_algebra_\nusing Test\n\
    \n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"**\", \"*\"\
    , \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3,\
    \ 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzi51paz2.jl:1\nin expression starting at /tmp/tmpzi51paz2.jl:1\n"
  stdout: ''
  timestamp: 1659977903
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    total = 0 \n    for i = 1:length(operand)-1\
    \ \n        if operator[i] == operator[i+1] \n            if operand[i] > operand[i+1]\
    \ \n                total = total + operand[i] \n            elseif operand[i]\
    \ < operand[i+1] \n                total = total - operand[i] \n            elseif\
    \ operand[i] == operand[i+1] \n                total = total * operand[i] \n \
    \           elseif operand[i] == 1 \n                total = total / operand[i]\
    \ \n            end\n        else \n            total = total + operand[i] \n\
    \        end\n    end\n    total\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\
    \t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpdru2f3fe.jl:46

    '
  stdout: "test set: Error During Test at /tmp/tmpdru2f3fe.jl:49\n  Test threw exception\n\
    \  Expression: candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37\n  BoundsError:\
    \ attempt to access 3-element Vector{String} at index [4]\n  Stacktrace:\n   [1]\
    \ getindex\n     @ ./array.jl:861 [inlined]\n   [2] do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})\n     @ Main /tmp/tmpdru2f3fe.jl:28\n   [3] macro expansion\n\
    \     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [4] macro expansion\n     @ /tmp/tmpdru2f3fe.jl:49 [inlined]\n   [5] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpdru2f3fe.jl:48\ntest set:\
    \ Error During Test at /tmp/tmpdru2f3fe.jl:50\n  Test threw exception\n  Expression:\
    \ candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n  BoundsError: attempt\
    \ to access 3-element Vector{String} at index [4]\n  Stacktrace:\n   [1] getindex\n\
    \     @ ./array.jl:861 [inlined]\n   [2] do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})\n     @ Main /tmp/tmpdru2f3fe.jl:28\n   [3] macro expansion\n\
    \     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [4] macro expansion\n     @ /tmp/tmpdru2f3fe.jl:50 [inlined]\n   [5] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpdru2f3fe.jl:48\ntest set:\
    \ Error During Test at /tmp/tmpdru2f3fe.jl:51\n  Test threw exception\n  Expression:\
    \ candidate([\"//\", \"*\"], [7, 3, 4]) == 8\n  BoundsError: attempt to access\
    \ 2-element Vector{String} at index [3]\n  Stacktrace:\n   [1] getindex\n    \
    \ @ ./array.jl:861 [inlined]\n   [2] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmpdru2f3fe.jl:28\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpdru2f3fe.jl:51 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:128"
  timestamp: 1659977904
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    count = 0\n    for i = 1:size(operator)[1]\
    \ \n        for j = 1:size(operator)[2] \n            if isa(operator[i], Symbol)\
    \ && isa(operand[j], Int64) && isa(operator[i], String)\n                if symbol_value(operator[i])\
    \ == symbol_value(operand[j])\n                    count += 1\n              \
    \  end\n            end\n        end\n    end\n    return count\nend\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"**\"\
    , \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"\
    ], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"end\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpz9w9ppj2.jl:38\nin expression starting at /tmp/tmpz9w9ppj2.jl:38\n"
  stdout: ''
  timestamp: 1659977903
- exit_code: -1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    \n    \n    sum = 0\n    for i in 1:length(operator)\n\
    \        sum += operator[i] * operand[length(operand)-i]\n    end\n    return\
    \ sum\nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmppj_h7t0i.jl:39\n  Test threw
    exception\n  Expression: candidate(["**", "*", "+"], [2, 3, 4, 5]) == 37\n  MethodError:
    no method matching *(::String, ::Int64)\n  Closest candidates are:\n    *(::Any,
    ::Any, !Matched::Any, !Matched::Any...) at ~/.conda/envs/polyglot/share/julia/base/operators.jl:655\n    *(!Matched::T,
    ::T) where T<:Union{Int128, Int16, Int32, Int64, Int8, UInt128, UInt16, UInt32,
    UInt64, UInt8} at ~/.conda/envs/polyglot/share/julia/base/int.jl:88\n    *(::Union{AbstractChar,
    AbstractString}, !Matched::Union{AbstractChar, AbstractString}...) at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:260\n    ...\n  Stacktrace:\n   [1]
    do_algebra(operator::Vector{String}, operand::Vector{Int64})\n     @ Main /tmp/tmppj_h7t0i.jl:30\n   [2]
    macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmppj_h7t0i.jl:39 [inlined]\n   [4]
    macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmppj_h7t0i.jl:38\n'''
  timestamp: 1659977906
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    \n    temp_sum = Vector{Int64}(undef,length(operator)-1)\n\
    \    for i = 1:length(operator)-1\n        temp_sum[i] = operator[i] == '+' ?\
    \ operand[i+1:end] : 0\n    end\n    return temp_sum\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"],\
    \ [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5])\
    \ == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpvqpn_g95.jl:35

    '
  stdout: "test set: Error During Test at /tmp/tmpvqpn_g95.jl:38\n  Test threw exception\n\
    \  Expression: candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37\n  MethodError:\
    \ Cannot `convert` an object of type Vector{Int64} to an object of type Int64\n\
    \  Closest candidates are:\n    convert(::Type{T}, !Matched::Ptr) where T<:Integer\
    \ at ~/.conda/envs/polyglot/share/julia/base/pointer.jl:23\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:7\n\
    \    ...\n  Stacktrace:\n   [1] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmpvqpn_g95.jl:31\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpvqpn_g95.jl:38 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvqpn_g95.jl:37\ntest set:\
    \ Error During Test at /tmp/tmpvqpn_g95.jl:39\n  Test threw exception\n  Expression:\
    \ candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n  MethodError: Cannot `convert`\
    \ an object of type Vector{Int64} to an object of type Int64\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::Ptr) where T<:Integer at ~/.conda/envs/polyglot/share/julia/base/pointer.jl:23\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:7\n\
    \    ...\n  Stacktrace:\n   [1] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmpvqpn_g95.jl:31\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpvqpn_g95.jl:39 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-le"
  timestamp: 1659977906
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    \n    # Check to make sure the given arguments\
    \ have the same length\n    if length(operator) != length(operand) - 1 \n    \
    \    error(\"Operand and Operator vectors have different lengths.\")\n    end\n\
    \    \n    # Start with empty vector\n    vec =  Array{Int64}(undef, 0)\n    \n\
    \    # Go through the vectors and append the elements to the empty vector\n  \
    \  for operation, operand in product(operator, operand)\n        vec += (if operation\
    \ == \"+\" then operand else 0)\n    end\nusing Test\n\n@testset begin\n\ncandidate\
    \ = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\
    \t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid iteration specification\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmy94k00l.jl:36\nin expression starting at\
    \ /tmp/tmpmy94k00l.jl:36\n"
  stdout: ''
  timestamp: 1659977904
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    result = Int64(0)\n    lenOperator = length(operator)\n\
    \    lenOperand = length(operand)\n    \n    if (lenOperand == 0)\n        return\
    \ result\n    if (lenOperand == 1)\n        return operand[1]\n    if (lenOperand\
    \ == 2)\n        return operand[1] * operand[2]\n    if (lenOperand == 3)\n  \
    \      return operand[1] * operand[2] + operand[3]\n    \n    println(\"Invalid\
    \ number of operands\")\n    return 0\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\
    \t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5t8mn7cf.jl:1\nin expression starting at /tmp/tmp5t8mn7cf.jl:1\n"
  stdout: ''
  timestamp: 1659977904
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    sum = 0\n    for i=1:length(operator)-1\
    \ \n        sum = sum + (getvalue(operand[i]) \u22C8 getvalue(operator[i]))\n\
    \    end\n    sum = sum + getvalue(operand[length(operand)])\n    return sum\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid character \"\u22C8\" near column 43\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmp74rua_js.jl:28\nin expression\
    \ starting at /tmp/tmp74rua_js.jl:28\n"
  stdout: ''
  timestamp: 1659977904
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    \n    vectorLength = length(operator)\n\
    \    if vectorLength > length(operand)\n        println(\"Vector operator and\
    \ vector operand are too long.\", operator, operand)\n    end\n    \n    i = 0\n\
    \    sum = 0\n    while i < vectorLength\n        push!(sum, operator[i])\n  \
    \      push!(sum, operand[i])\n        i = i + 1\n    end\n    return sum[1]\n\
    end\n    \n    \n\"\"\"\n    Given an expression and two operands, return the\
    \ result of the expression using the \n    given operands as parameters. The expression\
    \ can only consist of a single operator \n    and a pair of operands. For example,\
    \ if expression = '1 + 2', then operator '+'\n    and operand '2' are used as\
    \ parameters. \nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpz0tudb9t.jl:43\nin expression starting at\
    \ /tmp/tmpz0tudb9t.jl:43\n"
  stdout: ''
  timestamp: 1659977904
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    operator = operator[1:end]\n    operand\
    \ = operand[1:end-1]\n    if length(operator) == 0 && length(operand) == 0 \n\
    \        return 0 \n    end\n    # If the operand vector length is less than the\
    \ operator vector, \n    # the first operator vector is given as the first operator\
    \ to the algebra expression.\n    if length(operator) < length(operand)\n    \
    \    operator = operator[1:end]\n        operand = operand[1:end]\n    end\nusing\
    \ Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"**\"\
    , \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"\
    ], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpfem97g_f.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpfem97g_f.jl:1\n\
    in expression starting at /tmp/tmpfem97g_f.jl:1\n"
  stdout: ''
  timestamp: 1659977905
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n  \n  # Get the length of operator vector\n\
    \  nOperators = length(operator)\n  if nOperators == length(operand) - 1 \n  \
    \  # No operator and one operand \n    return ops[operator](operand) \n  elseif\
    \ nOperators == length(operand) - 2 \n    # One operator and two operands \n \
    \   return ops[operator](operand[1], operand[2]) \n  elseif nOperators == length(operand)\
    \ - 3 \n    # One operator and three operands \n    return ops[operator](operand[1],\
    \ operand[2], operand[3]) \n  elseif nOperators == length(operand) - 4 \n    #\
    \ One operator and four operands \n    return ops[operator](operand[1], operand[2],\
    \ operand[3], operand[4]) \n  elseif nOperators == length(operand) - 5 \n    #\
    \ One operator and five operands \n    return ops[operator](operand[1], operand[2],\
    \ operand[3], operand[4], operand[5]) \n  elseif nOperators == length(operand)\
    \ - 6 \n    # One operator and six operands \n    return ops[operator](operand[1],\
    \ operand[2], operand[3], operand[4], operand[5], operand[6]) \n  end\nusing Test\n\
    \n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"**\", \"*\"\
    , \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3,\
    \ 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp9c5s0qcv.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp9c5s0qcv.jl:1\n\
    in expression starting at /tmp/tmp9c5s0qcv.jl:1\n"
  stdout: ''
  timestamp: 1659977904
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    eval = zeros(Int, length(operator))\n \
    \   for i = 1:length(operator)\n        eval[i] = eval(operator[i], operand[i])\
    \ \n    end\n    return eval\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\
    \t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmp52c_1cyd.jl:34

    '
  stdout: "test set: Error During Test at /tmp/tmp52c_1cyd.jl:37\n  Test threw exception\n\
    \  Expression: candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37\n  MethodError:\
    \ objects of type Vector{Int64} are not callable\n  Use square brackets [] for\
    \ indexing an Array.\n  Stacktrace:\n   [1] do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})\n     @ Main /tmp/tmp52c_1cyd.jl:28\n   [2] macro expansion\n\
    \     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmp52c_1cyd.jl:37 [inlined]\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp52c_1cyd.jl:36\ntest set:\
    \ Error During Test at /tmp/tmp52c_1cyd.jl:38\n  Test threw exception\n  Expression:\
    \ candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n  MethodError: objects\
    \ of type Vector{Int64} are not callable\n  Use square brackets [] for indexing\
    \ an Array.\n  Stacktrace:\n   [1] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmp52c_1cyd.jl:28\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp52c_1cyd.jl:38 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp52c_1cyd.jl:36\ntest set:\
    \ Error During Test at /tmp/tmp52c_1cyd.jl:39\n  Test threw exception\n  Expression:\
    \ candidate([\"//\", \"*\"], [7, 3, 4]) == 8\n  MethodError: objects of type Vector{Int64}\
    \ are not callable\n  Use square brackets [] for indexing an Array.\n  Stacktrace:\n\
    \   [1] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n     @ Main\
    \ /tmp/tmp52c_1cyd.jl:28\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp52c_1cyd.jl:39 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-leve"
  timestamp: 1659977907
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    \n    A = zeros(length(operator))\n   \
    \ B = zeros(length(operand) - 1)\nusing Test\n\n@testset begin\n\ncandidate =\
    \ do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\
    \t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpng6r8cyx.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpng6r8cyx.jl:1\n\
    in expression starting at /tmp/tmpng6r8cyx.jl:1\n"
  stdout: ''
  timestamp: 1659977904
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    \"\"\"\n    Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n    the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n    expression and return the evaluation of this expression.\nusing Test\n\
    \n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"**\", \"*\"\
    , \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3,\
    \ 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpru714lwg.jl:1\nin expression starting at /tmp/tmpru714lwg.jl:1\n"
  stdout: ''
  timestamp: 1659977845
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    \"\"\"\n    Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n    the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n    expression and return the evaluation of this expression.\nusing Test\n\
    \n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"**\", \"*\"\
    , \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3,\
    \ 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpru714lwg.jl:1\nin expression starting at /tmp/tmpru714lwg.jl:1\n"
  stdout: ''
  timestamp: 1659977845
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n  \n    if length(operator) < 1 || length(operand)\
    \ < 2 \n        return -1\n    elseif length(operator) == length(operand) \n \
    \       return do_algebra(operator, operand)\n    end\n    \n    \n    left_vector,\
    \ right_vector, left_operation, right_operation = unpack_vectors(operator, operand)\n\
    \    \n    left_vector = left_vector - left_operation\n    right_vector = right_vector\
    \ - right_operation\n    \n    left_length = length(left_vector)\n    right_length\
    \ = length(right_vector)\n    \n    if left_length == right_length \n        #\
    \ scalar product\n        result = left_vector * right_vector\n        return\
    \ sum(result)\n    elseif right_length == 1 \n        # scalar product (dot product)\n\
    \        result = left_vector' * right_vector\n        return sum(result)\n  \
    \  elseif left_length == 1 \n        # scalar product (dot product)\n        result\
    \ = right_vector' * left_vector\n        return sum(result)\n    else\n      \
    \  \n        if length(left_vector) < length(right_vector)\n            left_vector,\
    \ right_vector, right_vector, left_vector = right_vector, left_vector, left_vector,\
    \ right_vector\n        end\n        \n        # scalar product (dot product)\n\
    \        result = left_vector' * right_vector\n        return sum(result)\n  \
    \  end\n    \nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t\
    @test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7,\
    \ 3, 4]) == 8)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpc1710zaj.jl:68

    '
  stdout: "test set: Error During Test at /tmp/tmpc1710zaj.jl:71\n  Test threw exception\n\
    \  Expression: candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37\n  UndefVarError:\
    \ unpack_vectors not defined\n  Stacktrace:\n   [1] do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})\n     @ Main /tmp/tmpc1710zaj.jl:34\n   [2] macro expansion\n\
    \     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpc1710zaj.jl:71 [inlined]\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpc1710zaj.jl:70\ntest set:\
    \ Error During Test at /tmp/tmpc1710zaj.jl:72\n  Test threw exception\n  Expression:\
    \ candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n  UndefVarError: unpack_vectors\
    \ not defined\n  Stacktrace:\n   [1] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmpc1710zaj.jl:34\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpc1710zaj.jl:72 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpc1710zaj.jl:70\ntest set:\
    \ Error During Test at /tmp/tmpc1710zaj.jl:73\n  Test threw exception\n  Expression:\
    \ candidate([\"//\", \"*\"], [7, 3, 4]) == 8\n  UndefVarError: unpack_vectors\
    \ not defined\n  Stacktrace:\n   [1] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmpc1710zaj.jl:34\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpc1710zaj.jl:73 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpc1710zaj.jl:70\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  timestamp: 1659977906
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    # get the operation from the first vector\n\
    \    operation = operator[1]\n    # get the first element from the second vector\n\
    \    operand1 = operand[2]\n    # get the second element from the second vector\n\
    \    operand2 = operand[3]\n    # evaluate the expression\n    if operation ==\
    \ \"+\":\n        result = operand1 + operand2\n    elif operation == \"-\":\n\
    \        result = operand1 - operand2\n    elif operation == \"*\":\n        result\
    \ = operand1 * operand2\n    elif operation == \"//\":\n        result = operand1\
    \ // operand2\n    elif operation == \"**\":\n        result = operand1 ** operand2\n\
    \    end\n    return result\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\
    \t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpeia1tz7a.jl:34\nin expression starting at\
    \ /tmp/tmpeia1tz7a.jl:34\n"
  stdout: ''
  timestamp: 1659977904
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    \"\"\"\n    Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n    the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n    expression and return the evaluation of this expression.\nusing Test\n\
    \n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"**\", \"*\"\
    , \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3,\
    \ 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpru714lwg.jl:1\nin expression starting at /tmp/tmpru714lwg.jl:1\n"
  stdout: ''
  timestamp: 1659977845
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    \n    \"\"\"\n    Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n    the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n    expression and return the evaluation of this expression.\nusing Test\n\
    \n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"**\", \"*\"\
    , \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3,\
    \ 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpd_8k7ef2.jl:1\nin expression starting at /tmp/tmpd_8k7ef2.jl:1\n"
  stdout: ''
  timestamp: 1659977904
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    \"\"\"\n    Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n    the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n    expression and return the evaluation of this expression.\nusing Test\n\
    \n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"**\", \"*\"\
    , \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3,\
    \ 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpru714lwg.jl:1\nin expression starting at /tmp/tmpru714lwg.jl:1\n"
  stdout: ''
  timestamp: 1659977845
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    # If the length of operator vector is not\
    \ equal to length of operand vector minus one,\n    # raise an error.\n    length\
    \ = length(operator) - length(operand)\n    if length < 0\n        raise ArgumentError(\
    \ \"\"\"Invalid operator and operand vectors.\n                              \
    \ The length of operator vector must be less than \n                         \
    \      the length of operand vector minus one.\n                             \
    \  \"\"\")\n    end\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\
    \t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7,\
    \ 3, 4]) == 8)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"ArgumentError\"\nStacktrace:\n [1]\
    \ top-level scope\n   @ /tmp/tmp4tts3rh9.jl:30\nin expression starting at /tmp/tmp4tts3rh9.jl:30\n"
  stdout: ''
  timestamp: 1659977904
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    \n    if length(operator) == 0 || length(operand)\
    \ == 0 \n        error(\"Error: Invalid vector combination\")\n    end\n    if\
    \ length(operator) == 1 \n        return eval(operator[1], operand)\n    elseif\
    \ length(operator) == 2 \n        return eval(operator[1], operand) * eval(operator[2],\
    \ operand)\n    elseif length(operator) == 3 \n        return eval(operator[1],\
    \ operand) * eval(operator[2], operand) * eval(operator[3], operand)\n    elseif\
    \ length(operator) == 4 \n        return eval(operator[1], operand) * eval(operator[2],\
    \ operand) * eval(operator[3], operand) * eval(operator[4], operand)\n    elseif\
    \ length(operator) == 5 \n        return eval(operator[1], operand) * eval(operator[2],\
    \ operand) * eval(operator[3], operand) * eval(operator[4], operand) * eval(operator[5],\
    \ operand)\n    elseif length(operator) == 6 \n        return eval(operator[1],\
    \ operand) * eval(operator[2], operand) * eval(operator[3], operand) * eval(operator[4],\
    \ operand) * eval(operator[5], operand) * eval(operator[6], operand)\n    elseif\
    \ length(operator) == 7 \n        return eval(operator[1], operand) * eval(operator[2],\
    \ operand) * eval(operator[3], operand) * eval(operator[4], operand) * eval(operator[5],\
    \ operand) * eval(operator[6], operand) * eval(operator[7], operand)\n    elseif\
    \ length(operator) == 8 \n        return eval(operator[1], operand) * eval(operator[2],\
    \ operand) * eval(operator[3], operand) * eval(operator[4], operand) * eval(operator[5],\
    \ operand) * eval(operator[6], operand) * eval(operator[7], operand) * eval(operator[8],\
    \ operand)\n    end\nend\n    \n    return do_algebra(operator, operand)\nend\n\
    </cell>\n<code language=julia-1.5>\n# Example\nvector1 = [2,3,4,5]\nvector2 =\
    \ [10,20,30,40]\noperator = [\"+\",\"*\",\"-\"]\nres = do_algebra(operator, vector1)\n\
    </cell>\n<code language=julia-1.5>\n# Example\nvector1 = [2,3,4,5]\nvector2 =\
    \ [10,20,30,40]\noperator = [\"+\",\"*\",\"-\",\"*\"]\nres = do_algebra(operator,\
    \ vector1)\n</cell>\n<code language=julia-1.5>\n# Example\nvector1 = [2,3,4,5]\n\
    vector2 = [10,20,30,40]\noperator = [\"+\",\"*\",\"-\",\"*\",\"*\",\"*\"]\nres\
    \ = do_algebra(operator, vector1)\n</cell>\n<code language=julia-1.5>\n# Example\n\
    vector1 = [2,3,4,5]\nvector2 = [10,20,30,40]\noperator = [\"+\",\"*\",\"-\",\"\
    *\",\"*\",\"*\",\"*\",\"-\"]\nres = do_algebra(operator, vector1)\n</cell>\n<code\
    \ language=\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: UndefVarError: operator not defined\nStacktrace:\n [1]\
    \ top-level scope\n   @ /tmp/tmp_k47h9k3.jl:49\nin expression starting at /tmp/tmp_k47h9k3.jl:49\n"
  stdout: ''
  timestamp: 1659977906
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    operand = convert_int_vector(operand)\n\
    \    operator = convert_int_vector(operator)\n    operations = union(operator,\
    \ operand)\n    \n    operand_length = length(operand)\n    operation_length =\
    \ length(operator)\n    \n    if operand_length ~= operation_length \n       \
    \ error(\"Invalid input: Length of operator must be equal or greater than length\
    \ of operand.\")\n    end\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\
    \t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7,\
    \ 3, 4]) == 8)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp8d5kwyal.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp8d5kwyal.jl:1\n\
    in expression starting at /tmp/tmp8d5kwyal.jl:1\n"
  stdout: ''
  timestamp: 1659977906
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    length = len(operator)\n    \n    # if\
    \ the operator vector is of length zero, return 0\n    if length == 0\n      \
    \  return 0\n    \n    # if the operand vector is of length zero, return 0\n \
    \   if length < 2\n        return 0\n    \n    # create a vector with only operators\
    \ and one operator and one operand to evaluate\n    operators = [\"+\", \"*\"\
    , \"-\", \"//\", \"**\"]\n    operator_vector = operators[0 : length(operator)]\n\
    \    \n    # create a vector with only operators and one operator and one operand\
    \ to evaluate\n    operands = [\"+\", \"*\", \"-\", \"//\", \"**\"]\n    operand_vector\
    \ = operands[0 : length(operand)]\n    \n    # a vector of ints initialized to\
    \ zero\n    vector = zeros(Int64, 2)\nusing Test\n\n@testset begin\n\ncandidate\
    \ = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\
    \t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8kkz90c0.jl:1\nin expression starting at /tmp/tmp8kkz90c0.jl:1\n"
  stdout: ''
  timestamp: 1659977906
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    \"\"\"\n    Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n    the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n    expression and return the evaluation of this expression.\nusing Test\n\
    \n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"**\", \"*\"\
    , \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3,\
    \ 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpru714lwg.jl:1\nin expression starting at /tmp/tmpru714lwg.jl:1\n"
  stdout: ''
  timestamp: 1659977845
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    \"\"\"\n    Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n    the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n    expression and return the evaluation of this expression.\nusing Test\n\
    \n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"**\", \"*\"\
    , \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3,\
    \ 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpru714lwg.jl:1\nin expression starting at /tmp/tmpru714lwg.jl:1\n"
  stdout: ''
  timestamp: 1659977845
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    result = zeros(Int64, length(operator))\n\
    \    operator_length = length(operator)\n    operand_length = length(operand)\n\
    using Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpyt4mspnf.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpyt4mspnf.jl:1\n\
    in expression starting at /tmp/tmpyt4mspnf.jl:1\n"
  stdout: ''
  timestamp: 1659977906
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    result = zeros(Int64, length(operand)-1)\n\
    \    for i = 1:length(operator)-1 \n        if operator[i] ~= '+'\n          \
    \  if operator[i] ~= '-'\n                push!(result, operand[i+1])\n      \
    \      else\n                if operand[i] < 0\n                    error(\"Operand\
    \ vector must have non-negative integers\")\n                else\n          \
    \          push!(result, -operand[i+1])\n                end\n            end\n\
    \        else\n            push!(result, operand[i+1])\n        end\n    end\n\
    \    result\nend\n</cell>\n<text>\nWe have now implemented our algebric expression\
    \ evaluation function. We are now ready to implement our main function. Our function\
    \ will do the following:\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\
    \t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7,\
    \ 3, 4]) == 8)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpu8_mk8e6.jl:44\nin expression starting at\
    \ /tmp/tmpu8_mk8e6.jl:44\n"
  stdout: ''
  timestamp: 1659977906
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    \n    if length(operator) == length(operand)\
    \ - 1 \n        operand, operator = operator.drop(1), operator.drop(1)\n    end\n\
    \    \n    expression = \"\"\n    for e in operand\n        if e == 0\n      \
    \      expression += \"_\"\n        elseif e == 1\n            expression += \"\
    x\"\n        elseif e == -1\n            expression += \"-x\"\n        elseif\
    \ e == 2\n            expression += \"x^2\"  \n        elseif e == -2\n      \
    \      expression += \"-x^2\"  \n        elseif e == 3\n            expression\
    \ += \"x^3\"\n        elseif e == -3\n            expression += \"-x^3\"\n   \
    \     elseif e == 4\n            expression += \"x^4\"\n        elseif e == -4\n\
    \            expression += \"-x^4\"\n        elseif e == 5\n            expression\
    \ += \"x^5\"\n        elseif e == -5\n            expression += \"-x^5\"\n   \
    \     elseif e == 6\n            expression += \"x^6\"\n        elseif e == -6\n\
    \            expression += \"-x^6\"\n        elseif e == 7\n            expression\
    \ += \"x^7\"\n        elseif e == -7\n            expression += \"-x^7\"\n   \
    \     elseif e == 8\n            expression += \"x^8\"\n        elseif e == -8\n\
    \            expression += \"-x^8\"\n        elseif e == 9\n            expression\
    \ += \"x^9\"\n        elseif e == -9\n            expression += \"-x^9\"\n   \
    \     elseif e == 10\n            expression += \"x^10\"\n        elseif e ==\
    \ -10\n            expression += \"-x^10\"\n        elseif e == 11\n         \
    \   expression += \"x^11\"\n        elseif e == -11\n            expression +=\
    \ \"-x^11\"\n        elseif e == 12\n            expression += \"x^12\"\n    \
    \    elseif e == -12\n            expression += \"-x^12\"\n        elseif e ==\
    \ 13\n            expression += \"x^13\"\n        elseif e == -13\n          \
    \  expression += \"-x^13\"\n        elseif e == 14\n            expression +=\
    \ \"x^14\"\n        elseif e == -14\n            expression += \"-x^14\"\n   \
    \     elseif e == 15\n            expression += \"x^15\"\n        elseif e ==\
    \ -15\n            expression += \"-x^15\"\n        elseif e == 16\n         \
    \   expression += \"x^16\"\n        elseif e == -16\n            expression +=\
    \ \"-x^16\"\n        elseif e == 17\n            expression += \"x^17\"\n    \
    \    elseif e == -17\n            expression += \"-x^17\"\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"],\
    \ [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5])\
    \ == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8wbwbm57.jl:1\nin expression starting at /tmp/tmp8wbwbm57.jl:1\n"
  stdout: ''
  timestamp: 1659977906
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    \"\"\"\n    Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n    the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n    expression and return the evaluation of this expression.\nusing Test\n\
    \n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"**\", \"*\"\
    , \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3,\
    \ 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpru714lwg.jl:1\nin expression starting at /tmp/tmpru714lwg.jl:1\n"
  stdout: ''
  timestamp: 1659977845
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    \n    sum_operand = operand[1]\n    sum_oper\
    \ = operator[1]\n    length = length(operator)\n    result = zeros(length(operand)\
    \ - 1)\n    for i = 2:length(operand)\n        result[i - 1] = sum_operand * operand[i]\
    \ * sum_oper\n    end\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\
    \t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7,\
    \ 3, 4]) == 8)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpjlcz_w6t.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjlcz_w6t.jl:1\n\
    in expression starting at /tmp/tmpjlcz_w6t.jl:1\n"
  stdout: ''
  timestamp: 1659977906
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    result = zero(Int64)\n    for op in operator\n\
    \        value = operand[end]\n        switch op\n            case '+' \n    \
    \            value = value + value\n            case '-' \n                value\
    \ = value - value\n            case '*'\n                value = value * value\n\
    \            case '/' \n                value = value // value\n            case\
    \ '**' \n                value = value ** value\n        end\n        result +=\
    \ value\n    end\n    return result \nend\n</cell>\n<code language=julia-0.6>\n\
    do_algebra(operator::Vector{String}, operand::Vector{Int64})\n</cell>\n<code language=julia-0.6>\n\
    @test do_algebra([ '+', '*', '-' ], [ 2, 3, 4, 5 ])  == 9\n@test do_algebra([\
    \ '+', '*', '-' ], [ -2, 3, 4, 5 ])  == 9\n@test do_algebra([ '+', '*', '-' ],\
    \ [ -2, -3, 4, 5 ]) == 9\n@test do_algebra([ '+', '*', '-' ], [ -2, 3, 4, -5 ])\
    \  == 9\n@test do_algebra([ '+', '*', '-' ], [ -2, 3, 4, 5 ])  == 9\n@test do_algebra([\
    \ '+', '*', '-' ], [ -2, -3, 4, 5 ]) == 9\n@test do_algebra([ '+', '*', '-' ],\
    \ [ -2, 3, 4, -5 ])  == 9\n@test do_algebra([ '+', '*', '-' ], [ -2, 3, 4, 5 ])\
    \  == 9\n@test do_algebra([ '+', '*', '-' ], [ -2, -3, 4, -5 ]) == 9\n</cell>\n\
    <text>\nExercise 3\nThe following function solves a system of linear equations:\n\
    using Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmptuc830lg.jl:27 expected \"\
    end\", got \"op\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmptuc830lg.jl:29\n\
    in expression starting at /tmp/tmptuc830lg.jl:29\n"
  stdout: ''
  timestamp: 1659977906
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n  \n    # initialize result\n    result = 0\n\
    \    \n    # loop through operands\n    for i in operand:\n        # initialize\
    \ accumulator with i\n        accumulator = 0\nusing Test\n\n@testset begin\n\n\
    candidate = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5])\
    \ == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8wkyrfb1.jl:32\nin expression starting at\
    \ /tmp/tmp8wkyrfb1.jl:32\n"
  stdout: ''
  timestamp: 1659977906
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    length(arg) = length(operand) - 1 \n  \
    \  \n    # Create a vector for expression\n    expression = zeros(Int, length)\n\
    \    \n    # Traverse the operands and operators one by one\n    for i = 1 : length(operator)\n\
    \        \n        # Traverse operands\n        for j = 1 : length(operand)\n\
    \            \n            # If the operand is non-negative, then do the operation\n\
    \            if operand[j] >= 0\n                \n                # If the operation\
    \ is unary (no argument or parenthesis), then store it in expression\n       \
    \         if operator[i] == '-' \n                    expression[i] = expression[i]\
    \ - operand[j]\n                \n                # If the operation is a binary\
    \ (one argument and parenthesis), then store it into expression\n            \
    \    else \n                    expression[i] = expression[i] + (operator[i] *\
    \ operand[j])\n            end\n        end\n    end\n    return expression\n\
    end\n</cell>\n<text>\nTest your function\nRun the cell below to test your function.\n\
    using Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfsd8wdwb.jl:52\nin expression starting at\
    \ /tmp/tmpfsd8wdwb.jl:52\n"
  stdout: ''
  timestamp: 1659977906
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    sum = 0\n    diff = max(length(operator),\
    \ length(operand)) - 1 # Don't forget -1 because we need to subtract 1 from operand\n\
    \    # Do the computations with the two operands\n    for i=1: diff\n        sum\
    \ += operator[i-1] * operand[i-1]\n    end\n    # Return the result\n    return\
    \ sum\nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpfogslj67.jl:37

    '
  stdout: "test set: Error During Test at /tmp/tmpfogslj67.jl:40\n  Test threw exception\n\
    \  Expression: candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37\n  BoundsError:\
    \ attempt to access 3-element Vector{String} at index [0]\n  Stacktrace:\n   [1]\
    \ getindex\n     @ ./array.jl:861 [inlined]\n   [2] do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})\n     @ Main /tmp/tmpfogslj67.jl:30\n   [3] macro expansion\n\
    \     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [4] macro expansion\n     @ /tmp/tmpfogslj67.jl:40 [inlined]\n   [5] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpfogslj67.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpfogslj67.jl:41\n  Test threw exception\n  Expression:\
    \ candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n  BoundsError: attempt\
    \ to access 3-element Vector{String} at index [0]\n  Stacktrace:\n   [1] getindex\n\
    \     @ ./array.jl:861 [inlined]\n   [2] do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})\n     @ Main /tmp/tmpfogslj67.jl:30\n   [3] macro expansion\n\
    \     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [4] macro expansion\n     @ /tmp/tmpfogslj67.jl:41 [inlined]\n   [5] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpfogslj67.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpfogslj67.jl:42\n  Test threw exception\n  Expression:\
    \ candidate([\"//\", \"*\"], [7, 3, 4]) == 8\n  BoundsError: attempt to access\
    \ 2-element Vector{String} at index [0]\n  Stacktrace:\n   [1] getindex\n    \
    \ @ ./array.jl:861 [inlined]\n   [2] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmpfogslj67.jl:30\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpfogslj67.jl:42 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:128"
  timestamp: 1659977908
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    index_1, index_2 = 0, 0\n    index_3 =\
    \ 1\n    index_4 = 1\n    result = Int64(0)\n    while index_1 < length(operator)\
    \ && index_2 < length(operand)\n        if operator[index_1] == operator[index_2]\n\
    \            index_1 += 1\n            index_2 += 1\n        else\n          \
    \  if operator[index_3] == operator[index_4]\n                result += operand[index_1]\
    \ * operand[index_2]\n                index_3 += 1\n                index_4 +=\
    \ 1\n            else\n                if operator[index_3] < operator[index_4]\n\
    \                    result += operand[index_1] + operand[index_2]\n         \
    \           index_3 += 1\n                else\n                    result +=\
    \ operand[index_1] - operand[index_2]\n                    index_4 += 1\n    \
    \            end\n            end\n        end\n    end\nusing Test\n\n@testset\
    \ begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"],\
    \ [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5])\
    \ == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp1yr5m2z6.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp1yr5m2z6.jl:1\n\
    in expression starting at /tmp/tmp1yr5m2z6.jl:1\n"
  stdout: ''
  timestamp: 1659977906
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    op = operator[1]\n    for i = 2:length(operator)\n\
    \        op = \"(\" + op + operator[i] + \")\"\n    end\n    for i = 2:length(operand)\n\
    \        operand[i] = \"(\" + operand[i] + \")\"\n    end\n    eval(op)\n    return\
    \ operand\nend\n</code>\n<|/ a |>\n<| c |>\nThis code is great and it works very\
    \ well. However it is not the one I am looking for. The reason is that I would\
    \ like to use this algebric expression in a bigger function and I need to be able\
    \ to use any vector with non-negative integers as operand. Is there any way to\
    \ do this? It would be nice if I could use the code above by defining a new function\
    \ that could be used in the bigger function.\n<|/ c |>\n<| c |>\nThis code is\
    \ an example of how one can use operators as a function of the two vectors. So\
    \ if you have your operator in a string, you can also use it as a function of\
    \ the two vectors. You can then pass the two vectors to evaluate any algebra expression.\
    \ Also you can create new vectors by using the same operators. You don't need\
    \ to create a function for each operator. Just one function will do it.\n<|/ c\
    \ |>\n<| c |>\nI see what you mean. I am still having trouble doing that. My initial\
    \ problem was that I was thinking I could define a new function using ```operator\
    \ = \"+\"``` as my ```operator``` argument. However that does not work. My initial\
    \ question was poorly described. I am sorry about that. I will edit it soon. Thank\
    \ you for your help.\n<|/ c |>\n<| c |>\nI edited my answer, hope it helps. Let\
    \ me know if anything is unclear.\n<|/ c |>\n<| c |>\nThat is amazing. Thank you\
    \ so much. This really helped me out. Your explanation is much appreciated. I\
    \ will take this as my answer once I am able to implement it on my bigger function.\n\
    <|/ c |>\n<| a tags=julia dscore=2 |>\nI would recommend to use Expressions:\n\
    <code>\njulia> using Expressions\nusing Test\n\n@testset begin\n\ncandidate =\
    \ do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\
    \t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpof9ac5f7.jl:36\nin expression starting at\
    \ /tmp/tmpof9ac5f7.jl:36\n"
  stdout: ''
  timestamp: 1659977906
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    \n    op_len = len(operator)\n    \n  \
    \  # Make sure the length of operator vector is equal to the length of operand\
    \ vector minus one\n    assert((length(operator) == length(operand) - 1) && \"\
    The length of operator vector is equal to the length of operand vector minus one\"\
    )\n    \n    # Make sure the length of operand vector is greater than or equal\
    \ to two\n    assert((length(operand) >= 2) && \"The length of operand vector\
    \ is greater than or equal to two\")\n    \n    # Check if the given operator\
    \ is in operator\n    if contains(operator, '-') && !contains(operator, '/')\n\
    \        \n        # Build a list from the operand vector\n        operandlist\
    \ = copy(operand)\n        \n        # Pop two operands from the operand list\n\
    \        operandlist.pop(1)\n        operandlist.pop(1)\n        \n        # Calculate\
    \ expression\n        operandlist[1] = operandlist[1] ** operandlist[2]\n    \
    \    \n        # Append the result of list to the operand vector\n        operand\
    \ = [operandlist[1]] + copy(operandlist)\n        \n    end\n    \n    # Check\
    \ if the given operator is in operator\n    if contains(operator, '+') && !contains(operator,\
    \ '/')\n        \n        # Build a list from the operand vector\n        operandlist\
    \ = copy(operand)\n        \n        # Pop two operands from the operand list\n\
    \        operandlist.pop(1)\n        operandlist.pop(1)\n        \n        # Calculate\
    \ expression\n        operandlist[1] = operandlist[1] + operandlist[2]\n     \
    \   \n        # Append the result of list to the operand vector\n        operand\
    \ = [operandlist[1]] + copy(operandlist)\n        \n    end\n    \n    # Check\
    \ if the given operator is in operator\n    if contains(operator, '*') && !contains(operator,\
    \ '/')\n        \n        # Build a list from the operand vector\n        operandlist\
    \ = copy(operand)\n        \n        # Pop two operands from the operand list\n\
    \        operandlist.pop(1)\n        operandlist.pop(1)\n        \n        # Calculate\
    \ expression\n        operandlist[1] = operandlist[1] * operandlist[2]\n     \
    \   \n        # Append the result of list to the operand vector\n        operand\
    \ = [operandlist[1]] + copy(operandlist)\n        \n    end\n    \n    # Check\
    \ if the given operator is in operator\n    if contains(operator, '/')\n     \
    \   \n        # Build a list from the operand vector\n        operandlist = copy(operand)\n\
    \        \n        # Pop one operands from the operand list\n        operandlist.pop(1)\n\
    \        \n        # Calculate expression\n        operandlist[1] = operandlist[1]\
    \ // operandlist[2]\n        \n        # Append the result of list to the operand\
    \ vector\n        operand = [operandlist[1]] + copy(operandlist)\n        \n \
    \   end\n    \n    # Calculate the result of the given algebraic expression\n\
    \    eval(string(join(operand))) \nend\n    \n\nusing Test\n\n@testset begin\n\
    \ncandidate = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4,\
    \ 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t\
    @test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"x^y\" instead of \"x**y\" for exponentiation,\
    \ and \"x...\" instead of \"**x\" for splatting.\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp0luie4k3.jl:46\nin expression starting at /tmp/tmp0luie4k3.jl:46\n"
  stdout: ''
  timestamp: 1659977906
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    return do_vector(operator, operand)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpwmojdkkn.jl:30

    '
  stdout: "test set: Error During Test at /tmp/tmpwmojdkkn.jl:33\n  Test threw exception\n\
    \  Expression: candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37\n  UndefVarError:\
    \ do_vector not defined\n  Stacktrace:\n   [1] do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})\n     @ Main /tmp/tmpwmojdkkn.jl:26\n   [2] macro expansion\n\
    \     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpwmojdkkn.jl:33 [inlined]\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwmojdkkn.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpwmojdkkn.jl:34\n  Test threw exception\n  Expression:\
    \ candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n  UndefVarError: do_vector\
    \ not defined\n  Stacktrace:\n   [1] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmpwmojdkkn.jl:26\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwmojdkkn.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwmojdkkn.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpwmojdkkn.jl:35\n  Test threw exception\n  Expression:\
    \ candidate([\"//\", \"*\"], [7, 3, 4]) == 8\n  UndefVarError: do_vector not defined\n\
    \  Stacktrace:\n   [1] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmpwmojdkkn.jl:26\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwmojdkkn.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwmojdkkn.jl:32\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  timestamp: 1659977909
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    \"\"\"\n    Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n    the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n    expression and return the evaluation of this expression.\nusing Test\n\
    \n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"**\", \"*\"\
    , \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3,\
    \ 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpru714lwg.jl:1\nin expression starting at /tmp/tmpru714lwg.jl:1\n"
  stdout: ''
  timestamp: 1659977845
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    \n    # get the length of operands\n  \
    \  # and the length of operator\n    length = length(operand) - 1 \n    \n   \
    \ # if the vector is empty return 0\n    if length == 0\n        return 0\n  \
    \  end\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp9edk9735.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp9edk9735.jl:1\n\
    in expression starting at /tmp/tmp9edk9735.jl:1\n"
  stdout: ''
  timestamp: 1659977907
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    \n    sum = 0\n    \n    for i = 1:(length(operand)-1)\n\
    \        sum = sum + (parse(Int, operand[i]) \n                    * parse(Int,\
    \ operator[i])) \n    end\n    \n    return sum\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4,\
    \ 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t\
    @test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpqzwfai09.jl:38

    '
  stdout: "test set: Error During Test at /tmp/tmpqzwfai09.jl:41\n  Test threw exception\n\
    \  Expression: candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37\n  MethodError:\
    \ no method matching parse(::Type{Int64}, ::Int64)\n  Closest candidates are:\n\
    \    parse(::Type{T}, !Matched::AbstractChar; base) where T<:Integer at ~/.conda/envs/polyglot/share/julia/base/parse.jl:40\n\
    \    parse(::Type{T}, !Matched::AbstractString; base) where T<:Integer at ~/.conda/envs/polyglot/share/julia/base/parse.jl:240\n\
    \    parse(::Type{T}, !Matched::AbstractString; kwargs...) where T<:Real at ~/.conda/envs/polyglot/share/julia/base/parse.jl:379\n\
    \  Stacktrace:\n   [1] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmpqzwfai09.jl:30\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpqzwfai09.jl:41 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpqzwfai09.jl:40\ntest set:\
    \ Error During Test at /tmp/tmpqzwfai09.jl:42\n  Test threw exception\n  Expression:\
    \ candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n  MethodError: no method\
    \ matching parse(::Type{Int64}, ::Int64)\n  Closest candidates are:\n    parse(::Type{T},\
    \ !Matched::AbstractChar; base) where T<:Integer at ~/.conda/envs/polyglot/share/julia/base/parse.jl:40\n\
    \    parse(::Type{T}, !Matched::AbstractString; base) where T<:Integer at ~/.conda/envs/polyglot/share/julia/base/parse.jl:240\n\
    \    parse(::Type{T}, !Matched::AbstractString; kwargs...) where T<:Real at ~/.conda/envs/polyglot/share/julia/base/parse.jl:379\n\
    \  Stacktrace:\n   [1] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmpqzwfai09.jl:30\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpqzwfai09.jl:42 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ ["
  timestamp: 1659977910
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    \n    if operator.length < 1 or operand.length\
    \ < 2\n        return error(\"Invalid length of operand/operator vectors\")\n\
    \    end\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"operand\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpokngtktg.jl:27\nin expression starting at /tmp/tmpokngtktg.jl:27\n"
  stdout: ''
  timestamp: 1659977907
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    operator_length = length(operator)\n  \
    \  operand_length = length(operand)\nusing Test\n\n@testset begin\n\ncandidate\
    \ = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\
    \t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpw1t27r75.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpw1t27r75.jl:1\n\
    in expression starting at /tmp/tmpw1t27r75.jl:1\n"
  stdout: ''
  timestamp: 1659977908
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n  n = length(operand)\n  m = length(operator)\n\
    \  if n == 0\n    return 0\n  elseif m == 0\n    return 1\n  end\n  res = do_add(operator,\
    \ operand)\n  if n == 1\n    return res\n  elseif m == 1\n    return res\n  end\n\
    \  res = do_sub(operator, operand)\n  if n == 2\n    return res\n  elseif m ==\
    \ 2\n    return res\n  end\n  res = do_mul(operator, operand)\n  if n <= 4\n \
    \   return res\n  end\n  res = do_mod(operator, operand)\n  if n == 1\n    return\
    \ res\n  elseif m == 1\n    return res\n  end\n  res = do_pow(operator, operand)\n\
    \  return res\nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t\
    @test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7,\
    \ 3, 4]) == 8)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpqrfn09rq.jl:60

    '
  stdout: "test set: Error During Test at /tmp/tmpqrfn09rq.jl:63\n  Test threw exception\n\
    \  Expression: candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37\n  UndefVarError:\
    \ do_add not defined\n  Stacktrace:\n   [1] do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})\n     @ Main /tmp/tmpqrfn09rq.jl:33\n   [2] macro expansion\n\
    \     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpqrfn09rq.jl:63 [inlined]\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpqrfn09rq.jl:62\ntest set:\
    \ Error During Test at /tmp/tmpqrfn09rq.jl:64\n  Test threw exception\n  Expression:\
    \ candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n  UndefVarError: do_add\
    \ not defined\n  Stacktrace:\n   [1] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmpqrfn09rq.jl:33\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpqrfn09rq.jl:64 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpqrfn09rq.jl:62\ntest set:\
    \ Error During Test at /tmp/tmpqrfn09rq.jl:65\n  Test threw exception\n  Expression:\
    \ candidate([\"//\", \"*\"], [7, 3, 4]) == 8\n  UndefVarError: do_add not defined\n\
    \  Stacktrace:\n   [1] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmpqrfn09rq.jl:33\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpqrfn09rq.jl:65 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpqrfn09rq.jl:62\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  timestamp: 1659977910
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    vector_operation = vector(operator)\n \
    \   vector_operand = vector(operand)\n    vector_length = length(vector_operation)\n\
    \    vector_operand_length = length(vector_operand)\n    \n    if vector_length\
    \ == 0\n        error(\"length of operator vector is zero\")\n    end\n    if\
    \ vector_operand_length == 0\n        error(\"length of operand vector is zero\"\
    )\n    end\n    if length(vector_operation) != length(vector_operand)\n      \
    \  error(\"length of operator vector must equal to the length of operand vector\
    \ minus one\")\n    end\n    \n    for (i in 1:vector_length)\n        operator[i]\
    \ = string(vector_operation[i])\n    end\n    for (i in 1:vector_operand_length)\n\
    \        operand[i] = int64(vector_operand[i])\n    end\n    \n    for (i in 1:vector_length)\n\
    \        operator[i] = operator[i] + string(vector_operand[i])\n    end\nusing\
    \ Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"**\"\
    , \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"\
    ], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid iteration specification\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzyx4ctqo.jl:42\nin expression starting at\
    \ /tmp/tmpzyx4ctqo.jl:42\n"
  stdout: ''
  timestamp: 1659977908
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    length = length(operator) - 1  \n    \n\
    \    if length == 0 \n        println(\"No operator is defined. Operand must be\
    \ a vector of at least two integers.\")\n        exit(0)\n    end\nusing Test\n\
    \n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"**\", \"*\"\
    , \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3,\
    \ 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpipmn5ivc.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpipmn5ivc.jl:1\n\
    in expression starting at /tmp/tmpipmn5ivc.jl:1\n"
  stdout: ''
  timestamp: 1659977908
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    \n    # Base cases\n    if length( operator\
    \ ) == 1 && length(operand) == 2\n        return operand[1] + operand[2]\n   \
    \ end\n    if length(operator) == 1 && length(operand) == 2\n        return operand[1]\
    \ + operand[2]\n    end\n    if length(operator) == 2 && length(operand) == 2\n\
    \        return operand[1] * operand[2]\n    end\nusing Test\n\n@testset begin\n\
    \ncandidate = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4,\
    \ 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t\
    @test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp7lv6ysn1.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp7lv6ysn1.jl:1\n\
    in expression starting at /tmp/tmp7lv6ysn1.jl:1\n"
  stdout: ''
  timestamp: 1659977908
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    algebric_expression = @. 0\n    for element\
    \ in operand\n        algebric_expression = algebric_expression + element \n \
    \   end\n    for element in operator\n        algebric_expression = algebric_expression\
    \ + element \n    end\n    return algebric_expression\nend\n</cell>\n<code language=julia-1.6>\n\
    using Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpf6svf59v.jl:35\nin expression starting at\
    \ /tmp/tmpf6svf59v.jl:35\n"
  stdout: ''
  timestamp: 1659977908
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    vector = Array{String, 1}(undef, length(operator))\n\
    \    operator\n    vector\n    length = length(vector)\n    vector\n    \n   \
    \ if length < length(operand)\n        push!(vector, \"\")\n    end\nusing Test\n\
    \n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"**\", \"*\"\
    , \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3,\
    \ 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpj6c48lbx.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpj6c48lbx.jl:1\n\
    in expression starting at /tmp/tmpj6c48lbx.jl:1\n"
  stdout: ''
  timestamp: 1659977908
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    \n    op_len, op_head = operator[1], operator[2]\n\
    \    \n    if op_len == 0 \n        error(\"No operations for operator \", operator)\n\
    \    end\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp1cqc3yft.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp1cqc3yft.jl:1\n\
    in expression starting at /tmp/tmp1cqc3yft.jl:1\n"
  stdout: ''
  timestamp: 1659977908
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    index_1 = findfirst(x -> x == operator[1],\
    \ operator)\n    index_2 = findfirst(x -> x == operator[2], operator)\n    result\
    \ = operand[index_1] * operand[index_2]\n    for i = index_1+1, index_2 \n   \
    \     result = result + operand[i] * operand[i-1]\n    end\n    result\nend\n\
    using Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid iteration specification\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp21beh4vq.jl:30\nin expression starting at\
    \ /tmp/tmp21beh4vq.jl:30\n"
  stdout: ''
  timestamp: 1659977908
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    op_len = length(operator)\n    op_n = 0\n\
    \    while op_n < length(operand)\n        op_op = operator[op_n]\n        op_n\
    \ = op_n + 1\n        op_val_n = operand[op_n]\n        if op_op == '*'\n    \
    \        val = op_val_n * op_val_n\n        elseif op_op == '/'\n            val\
    \ = op_val_n / op_val_n\n        elseif op_op == '%'\n            val = op_val_n\
    \ % op_val_n\n        elseif op_op == '**'\n            val = op_val_n ** op_val_n\n\
    \        elseif op_op == '+'\n            val = op_val_n + op_val_n\n        elseif\
    \ op_op == '-'\n            val = op_val_n - op_val_n\n        elseif op_op ==\
    \ '*'\n            val = op_val_n * op_val_n\n        elseif op_op == '/'\n  \
    \          val = op_val_n / op_val_n\n        elseif op_op == '%'\n          \
    \  val = op_val_n % op_val_n\n        elseif op_op == '**'\n            val =\
    \ op_val_n ** op_val_n\n        else\n            error(\"invalid operator\")\n\
    \        end\n    end\n    return val\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\
    \t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: character literal contains multiple characters\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmpfthpg75r.jl:38\nin expression\
    \ starting at /tmp/tmpfthpg75r.jl:38\n"
  stdout: ''
  timestamp: 1659977908
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    vector1 = Vector{String}(operator)\n  \
    \  vector2 = Vector{Int64}(operand)\n    length = length(vector1)\n    result\
    \ = vector1[end-1] * vector2[end-1]\n    for i =1:(length-1)\n        result =\
    \ result + vector1[i] * vector2[i]\n    end\n    result\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"],\
    \ [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5])\
    \ == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmp9zlcfmqw.jl:37

    '
  stdout: "test set: Error During Test at /tmp/tmp9zlcfmqw.jl:40\n  Test threw exception\n\
    \  Expression: candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37\n  UndefVarError:\
    \ length not defined\n  Stacktrace:\n   [1] do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})\n     @ Main /tmp/tmp9zlcfmqw.jl:28\n   [2] macro expansion\n\
    \     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmp9zlcfmqw.jl:40 [inlined]\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp9zlcfmqw.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp9zlcfmqw.jl:41\n  Test threw exception\n  Expression:\
    \ candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n  UndefVarError: length\
    \ not defined\n  Stacktrace:\n   [1] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmp9zlcfmqw.jl:28\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp9zlcfmqw.jl:41 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp9zlcfmqw.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp9zlcfmqw.jl:42\n  Test threw exception\n  Expression:\
    \ candidate([\"//\", \"*\"], [7, 3, 4]) == 8\n  UndefVarError: length not defined\n\
    \  Stacktrace:\n   [1] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmp9zlcfmqw.jl:28\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp9zlcfmqw.jl:42 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp9zlcfmqw.jl:39\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  timestamp: 1659977910
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    \n    if length(operator) != length(operand)\
    \ \n        throw(\"The length of operator vector is equal to the length of operand\
    \ vector minus one. Operand is a vector of of non-negative integers. Operator\
    \ vector has at least one operator, and operand vector has at least two operands.\"\
    ) \n    end\n    \n    # Build the algebric expression\n    result = 1\n    for\
    \ i in 1:length(operator) \n        result = result .+ opertator[i] * operand[i]\n\
    \    end\n    \n    # Return the evaluation\n    return result\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"**\", \"*\"\
    , \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3,\
    \ 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpcwfv_n8m.jl:42

    '
  stdout: "test set: Error During Test at /tmp/tmpcwfv_n8m.jl:45\n  Test threw exception\n\
    \  Expression: candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37\n  \"The\
    \ length of operator vector is equal to the length of operand vector minus one.\
    \ Operand is a vector of of non-negative integers. Operator vector has at least\
    \ one operator, and operand vector has at least two operands.\"\n  Stacktrace:\n\
    \   [1] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n     @ Main\
    \ /tmp/tmpcwfv_n8m.jl:28\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpcwfv_n8m.jl:45 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpcwfv_n8m.jl:44\ntest set:\
    \ Error During Test at /tmp/tmpcwfv_n8m.jl:46\n  Test threw exception\n  Expression:\
    \ candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n  \"The length of operator\
    \ vector is equal to the length of operand vector minus one. Operand is a vector\
    \ of of non-negative integers. Operator vector has at least one operator, and\
    \ operand vector has at least two operands.\"\n  Stacktrace:\n   [1] do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})\n     @ Main /tmp/tmpcwfv_n8m.jl:28\n   [2] macro expansion\n\
    \     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpcwfv_n8m.jl:46 [inlined]\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpcwfv_n8m.jl:44\ntest set:\
    \ Error During Test at /tmp/tmpcwfv_n8m.jl:47\n  Test threw exception\n  Expression:\
    \ candidate([\"//\", \"*\"], [7, 3, 4]) == 8\n  \"The length of operator vector\
    \ is equal to the length of operand vector minus one. Operand is a vector of of\
    \ non-negative integers. Operator vector has at least one operator, and operand\
    \ vector has at least two operands.\"\n  Stacktrace:\n   [1] do_algebra(operator::Vector{String},\
    \ operand::Vec"
  timestamp: 1659977910
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    \n    # Return error if the length of operator\
    \ vector is not the same as the length of operand vector\n    # Minus one because\
    \ vector operator is assumed to be a vector with at least one operator\n    length,\
    \ index = length(operator) - 1, length(operand)\n    if length != index\n    \
    \    throw(ArgumentError(\"Operand must be a vector of non-negative integers.\
    \ Operator must be a vector of length at least one\"))\n    end\nusing Test\n\n\
    @testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"\
    +\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4,\
    \ 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpe0cunns5.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpe0cunns5.jl:1\n\
    in expression starting at /tmp/tmpe0cunns5.jl:1\n"
  stdout: ''
  timestamp: 1659977908
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    length = length(operator)\n    operand\
    \ = operand[end]\n    \n    if length(operator) == 0 \n        error(\"Invalid\
    \ operator\")\n    end\n    \n    if length(operand) == 0 \n        error(\"Invalid\
    \ operand\")\n    end\n    \n    if length(operator) > length(operand)\n     \
    \   error(\"Operator is longer than operand\")\n    end\n    \n    result = 1\n\
    \    for i = length(operator):-1:1\n        result = result * operand[i]\n   \
    \ end\n    \n    return result\nend\n</cell>\n<code language=julia-1.0>\ndo_algebra(operator,\
    \ vector)\n</cell>\n<text>\nExercise\nUse the following operator and operand vectors\
    \ to evaluate 1 + 2 + 3. This should give 4.\nusing Test\n\n@testset begin\n\n\
    candidate = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5])\
    \ == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0plic7hr.jl:48\nin expression starting at\
    \ /tmp/tmp0plic7hr.jl:48\n"
  stdout: ''
  timestamp: 1659977908
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    eval = do_algebra(operator, operand, Vector{String}([]))\n\
    \    return eval\nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\
    \t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7,\
    \ 3, 4]) == 8)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmploo3dwr2.jl:31

    '
  stdout: "test set: Error During Test at /tmp/tmploo3dwr2.jl:34\n  Test threw exception\n\
    \  Expression: candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37\n  MethodError:\
    \ no method matching do_algebra(::Vector{String}, ::Vector{Int64}, ::Vector{String})\n\
    \  Closest candidates are:\n    do_algebra(::Vector{String}, ::Vector{Int64})\
    \ at /tmp/tmploo3dwr2.jl:25\n  Stacktrace:\n   [1] do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})\n     @ Main /tmp/tmploo3dwr2.jl:26\n   [2] macro expansion\n\
    \     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmploo3dwr2.jl:34 [inlined]\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmploo3dwr2.jl:33\ntest set:\
    \ Error During Test at /tmp/tmploo3dwr2.jl:35\n  Test threw exception\n  Expression:\
    \ candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n  MethodError: no method\
    \ matching do_algebra(::Vector{String}, ::Vector{Int64}, ::Vector{String})\n \
    \ Closest candidates are:\n    do_algebra(::Vector{String}, ::Vector{Int64}) at\
    \ /tmp/tmploo3dwr2.jl:25\n  Stacktrace:\n   [1] do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})\n     @ Main /tmp/tmploo3dwr2.jl:26\n   [2] macro expansion\n\
    \     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmploo3dwr2.jl:35 [inlined]\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmploo3dwr2.jl:33\ntest set:\
    \ Error During Test at /tmp/tmploo3dwr2.jl:36\n  Test threw exception\n  Expression:\
    \ candidate([\"//\", \"*\"], [7, 3, 4]) == 8\n  MethodError: no method matching\
    \ do_algebra(::Vector{String}, ::Vector{Int64}, ::Vector{String})\n  Closest candidates\
    \ are:\n    do_algebra(::Vector{String}, ::Vector{Int64}) at /tmp/tmploo3dwr2.jl:25\n\
    \  Stacktrace:\n   [1] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmploo3dwr2.jl:26\n   [2] macro expansion\n  "
  timestamp: 1659977911
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    \n    length = length(operator) - 1 \n\
    \    \n    \n    \n    \n    if length < 1 \n        error(\"do_algebra: operator\
    \ has less than 1 operator, length is $length\")\n    end\n    if length(operand)\
    \ < 2 \n        error(\"do_algebra: operand has less than 2 operands, length is\
    \ $length\")\n    end\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\
    \t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7,\
    \ 3, 4]) == 8)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmplqug2xwv.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmplqug2xwv.jl:1\n\
    in expression starting at /tmp/tmplqug2xwv.jl:1\n"
  stdout: ''
  timestamp: 1659977908
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    if length(operator) ~= length(operand)\
    \ \n        error(\"Operand and operator must have the same number of elements\
    \ ($length(operator) and $length(operand)) \")\n    end\n    # check if at least\
    \ one element in operator is +\n    if any(x in operator for x in ['+']) \n  \
    \      # check if at least two elements in operand is integer\n        if length(filter(x\
    \ -> isa(x, Int64), operand) ~= length(operand))\n            error(\"Number of\
    \ elements in operand vector must be equal to or larger than operator vector\"\
    )\n        else\n            vector1 = copy(isequal(operator, ['+']), operand)\n\
    \            vector2 = copy(isequal(operator, ['-']), operand)\n            vector3\
    \ = copy(isequal(operator, ['*']), operand)\n            vector4 = copy(isequal(operator,\
    \ ['//']), operand)\n            vector5 = copy(isequal(operator, ['**']), operand)\n\
    \            result = (vector1 + vector2 + vector3 - vector4 - vector5)\n    \
    \        return result\n        end\n    else\n        # check if there is only\
    \ one element in operator\n        if length(filter(x -> x == x , operator)) ~=\
    \ length(operator)\n            error(\"Operator vector must contain at least\
    \ one element\")\n        else\n            vector = copy(operator, operand)\n\
    \            vector1 = copy(isequal(operator, ['+']), operand)\n            vector2\
    \ = copy(isequal(operator, ['-']), operand)\n            vector3 = copy(isequal(operator,\
    \ ['*']), operand)\n            vector4 = copy(isequal(operator, ['//']), operand)\n\
    \            vector5 = copy(isequal(operator, ['**']), operand)\n            result\
    \ = (vector + vector1 + vector2 - vector3 - vector4 - vector5)\n            return\
    \ result\n        end\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\
    \t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"=\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp2ud4mt0g.jl:32\nin expression starting at /tmp/tmp2ud4mt0g.jl:32\n"
  stdout: ''
  timestamp: 1659977908
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    # Write your code here\n    # Write your\
    \ code here\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpwfd1lcyi.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpwfd1lcyi.jl:1\n\
    in expression starting at /tmp/tmpwfd1lcyi.jl:1\n"
  stdout: ''
  timestamp: 1659977909
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    if length(operator) == 0 \n        return\
    \ error(\"Operator vector is empty.\")\n    elseif length(operand) < 2 \n    \
    \    return error(\"Operand vector must have two or more elements.\")\n    end\n\
    using Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpurwn7gv5.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpurwn7gv5.jl:1\n\
    in expression starting at /tmp/tmpurwn7gv5.jl:1\n"
  stdout: ''
  timestamp: 1659977909
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    \"\"\"\n    Do the algebraic operations.\
    \ \n    \"\"\"\n    if length(operator) == length(operand)\n        \n       \
    \ for i = 1:length(operator)\n            if operator[i] == '+' \n           \
    \     return operand[i] + operand[i+1] \n            elseif operator[i] == '-'\
    \ \n                return operand[i] - operand[i+1] \n            elseif operator[i]\
    \ == '*' \n                return operand[i] * operand[i+1] \n            elseif\
    \ operator[i] == '/' \n                return operand[i] / operand[i+1] \n   \
    \         elseif operator[i] == '**'\n                return operand[i] ** operand[i+1]\n\
    \            end\n        end\n        error(\"Not enough arguments\")\n    else\n\
    \        error(\"Operator and operand vectors must have same length\")\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: character literal contains multiple characters\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmpvcm51y8u.jl:40\nin expression\
    \ starting at /tmp/tmpvcm51y8u.jl:40\n"
  stdout: ''
  timestamp: 1659977909
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    return Int64((1 .- length(operator) - 1)\
    \ .* (vector(operand) - vector(operator))) \nend\n</cell>\n<code language=julia-0.6>\n\
    # Test do_algebra\ndo_algebra(['+', '*', '-'], [2, 3, 4, 5])\n</cell>\n<code language=julia-0.6>\n\
    \"\"\"\n    eval_bond_vectors(bond_operator::Vector{String}, bond_operand::Vector{Int64})\n\
    using Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp22gzcyu4.jl:28\nin expression starting at\
    \ /tmp/tmp22gzcyu4.jl:28\n"
  stdout: ''
  timestamp: 1659977909
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    \n    \n\"\"\"\n    Given one vector operator,\
    \ and operand. The first vector has basic algebra operations, and \n    the second\
    \ vector is a vector of integers. Use the one given vector to build the algebric\
    \ \n    expression and return the evaluation of this expression.\nusing Test\n\
    \n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"**\", \"*\"\
    , \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3,\
    \ 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpk1vemglr.jl:1\nin expression starting at /tmp/tmpk1vemglr.jl:1\n"
  stdout: ''
  timestamp: 1659977910
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    \n    \n    return do_algebra_vec(operator,\
    \ operand)\nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpb9lx7ue6.jl:32

    '
  stdout: "test set: Error During Test at /tmp/tmpb9lx7ue6.jl:35\n  Test threw exception\n\
    \  Expression: candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37\n  UndefVarError:\
    \ do_algebra_vec not defined\n  Stacktrace:\n   [1] do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})\n     @ Main /tmp/tmpb9lx7ue6.jl:28\n   [2] macro expansion\n\
    \     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpb9lx7ue6.jl:35 [inlined]\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpb9lx7ue6.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpb9lx7ue6.jl:36\n  Test threw exception\n  Expression:\
    \ candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n  UndefVarError: do_algebra_vec\
    \ not defined\n  Stacktrace:\n   [1] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmpb9lx7ue6.jl:28\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpb9lx7ue6.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpb9lx7ue6.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpb9lx7ue6.jl:37\n  Test threw exception\n  Expression:\
    \ candidate([\"//\", \"*\"], [7, 3, 4]) == 8\n  UndefVarError: do_algebra_vec\
    \ not defined\n  Stacktrace:\n   [1] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmpb9lx7ue6.jl:28\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpb9lx7ue6.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpb9lx7ue6.jl:34\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  timestamp: 1659977911
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n  \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpzuxrwvov.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpzuxrwvov.jl:1\n\
    in expression starting at /tmp/tmpzuxrwvov.jl:1\n"
  stdout: ''
  timestamp: 1659977909
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    # Initialize result\n    result = Int64[]\n\
    using Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpia310g27.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpia310g27.jl:1\n\
    in expression starting at /tmp/tmpia310g27.jl:1\n"
  stdout: ''
  timestamp: 1659977910
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    \n    i = length(operator) - 1\n    j =\
    \ length(operand) - 1 \n    result = operand[j] * operand[j + 1] \n    for k =\
    \ length(operator) + 1 : (i - 1)\n        result = result + operand[k] * operator[k\
    \ + 1]\n    end\n    \n    return result\nend\n</cell>\n<code language=julia-1.0>\n\
    # Test your function\ndo_algebra(operator['+', '*', '-'], vector)\n</cell>\n<text>\n\
    Exercise\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpv_7w1l6y.jl:36\nin expression starting at\
    \ /tmp/tmpv_7w1l6y.jl:36\n"
  stdout: ''
  timestamp: 1659977910
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    \"\"\"\n    Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n    the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n    expression and return the evaluation of this expression.\nusing Test\n\
    \n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"**\", \"*\"\
    , \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3,\
    \ 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpru714lwg.jl:1\nin expression starting at /tmp/tmpru714lwg.jl:1\n"
  stdout: ''
  timestamp: 1659977845
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n  \n    # initialize first operand vector as\
    \ empty vector\n    operand = Vector{Int64}()\nusing Test\n\n@testset begin\n\n\
    candidate = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5])\
    \ == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpgp8umwjs.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpgp8umwjs.jl:1\n\
    in expression starting at /tmp/tmpgp8umwjs.jl:1\n"
  stdout: ''
  timestamp: 1659977910
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    \n    if length(operator) == length(operand)\
    \ - 1 \n        \n        expression = operator.join(repeat(\"\"))\n        \n\
    \    else\n        \n        expression = operator.join(repeat(\" \"), operator,\
    \ string(operand[1:end-1]), string(operand[end]))\nusing Test\n\n@testset begin\n\
    \ncandidate = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4,\
    \ 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t\
    @test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"if\" at /tmp/tmpfoianad4.jl:27\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpfoianad4.jl:1\n\
    in expression starting at /tmp/tmpfoianad4.jl:1\n"
  stdout: ''
  timestamp: 1659977910
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    \"\"\" Given an operator vector and an\
    \ operand vector, \n    use the two given vectors to build the algebric expression\
    \ and return the evaluation of this \n    expression.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"],\
    \ [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5])\
    \ == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwdw5evc3.jl:1\nin expression starting at /tmp/tmpwdw5evc3.jl:1\n"
  stdout: ''
  timestamp: 1659977910
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    len_operator = length(operator)\n    len_operand\
    \ = length(operand) - 1 \n    if len_operator == len_operand \n        result\
    \ =  reduce(operator, operand)\n        return result \n    else \n        throw(string(\"\
    operator vector has \", len_operator, \" elements, while operand vector has \"\
    , len_operand, \" elements\"))\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5])\
    \ == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpmwmf8hkx.jl:37

    '
  stdout: "test set: Error During Test at /tmp/tmpmwmf8hkx.jl:40\n  Test threw exception\n\
    \  Expression: candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37\n  MethodError:\
    \ objects of type Vector{String} are not callable\n  Use square brackets [] for\
    \ indexing an Array.\n  Stacktrace:\n    [1] _mapreduce\n      @ ./reduce.jl:410\
    \ [inlined]\n    [2] _mapreduce_dim\n      @ ./reducedim.jl:330 [inlined]\n  \
    \  [3] #mapreduce#731\n      @ ./reducedim.jl:322 [inlined]\n    [4] mapreduce\n\
    \      @ ./reducedim.jl:322 [inlined]\n    [5] #reduce#733\n      @ ./reducedim.jl:371\
    \ [inlined]\n    [6] reduce\n      @ ./reducedim.jl:371 [inlined]\n    [7] do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})\n      @ Main /tmp/tmpmwmf8hkx.jl:29\n    [8] macro\
    \ expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [9] macro expansion\n      @ /tmp/tmpmwmf8hkx.jl:40 [inlined]\n\
    \   [10] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmpmwmf8hkx.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpmwmf8hkx.jl:41\n  Test threw exception\n  Expression:\
    \ candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n  MethodError: objects\
    \ of type Vector{String} are not callable\n  Use square brackets [] for indexing\
    \ an Array.\n  Stacktrace:\n    [1] _mapreduce\n      @ ./reduce.jl:410 [inlined]\n\
    \    [2] _mapreduce_dim\n      @ ./reducedim.jl:330 [inlined]\n    [3] #mapreduce#731\n\
    \      @ ./reducedim.jl:322 [inlined]\n    [4] mapreduce\n      @ ./reducedim.jl:322\
    \ [inlined]\n    [5] #reduce#733\n      @ ./reducedim.jl:371 [inlined]\n    [6]\
    \ reduce\n      @ ./reducedim.jl:371 [inlined]\n    [7] do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})\n      @ Main /tmp/tmpmwmf8hkx.jl:29\n    [8] macro\
    \ expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [9] macro expansion\n      @ /tmp/tmpmwmf8hkx.jl:41 [inlined]\n\
    \   [10] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [11] top"
  timestamp: 1659977912
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    result = 0\n    lengthOperator = length(operator)\n\
    \    lengthOperand = length(operand)\n    \n    if lengthOperand == lengthOperator\n\
    \        operation = operator[1]\n        operand1 = operand[1..lengthOperand-1]\n\
    \        operand2 = operand[lengthOperand..end]\n        \n        if operation\
    \ == '*'\n            result = operand1 * operand2\n        else \n          \
    \  if operation == '/'\n                result = operand1 // operand2\n      \
    \      else\n                if operation == '**'\n                    result\
    \ = operand1 ** operand2\n                else\n                    println(\"\
    Wrong operator!\")\n                end\n            end\n        end\n    else\
    \ \n        println(\"Wrong operand!\")\n    end\n    \n    return result\nend\n\
    using Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: character literal contains multiple characters\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmp479oax1l.jl:41\nin expression\
    \ starting at /tmp/tmp479oax1l.jl:41\n"
  stdout: ''
  timestamp: 1659977910
- exit_code: -1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    # Get the length of the operand vector\n\
    \    num_operand = length(operand)-1\n    num_operator = length(operator)-1\n\
    \    \n    # Get the first element from operand vector as the base expression\n\
    \    base_expression = operand[1]\n    \n    # Build a string to represent the\
    \ expression built from base_expression\n    expression = base_expression\n  \
    \  \n    # Loop through the operator vector and add operations to expression\n\
    \    for i = 2:(num_operator)\n        expression = operator .* expression\n \
    \   end\n    \n    return eval(expression)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4,\
    \ 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t\
    @test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpgv2z69b6.jl:48\n  Test threw
    exception\n  Expression: candidate(["**", "*", "+"], [2, 3, 4, 5]) == 37\n  MethodError:
    no method matching *(::String, ::Int64)\n  Closest candidates are:\n    *(::Any,
    ::Any, !Matched::Any, !Matched::Any...) at ~/.conda/envs/polyglot/share/julia/base/operators.jl:655\n    *(!Matched::T,
    ::T) where T<:Union{Int128, Int16, Int32, Int64, Int8, UInt128, UInt16, UInt32,
    UInt64, UInt8} at ~/.conda/envs/polyglot/share/julia/base/int.jl:88\n    *(::Union{AbstractChar,
    AbstractString}, !Matched::Union{AbstractChar, AbstractString}...) at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:260\n    ...\n  Stacktrace:\n    [1]
    _broadcast_getindex_evalf\n      @ ./broadcast.jl:670 [inlined]\n    [2] _broadcast_getindex\n      @
    ./broadcast.jl:643 [inlined]\n    [3] getindex\n      @ ./broadcast.jl:597 [inlined]\n    [4]
    copy\n      @ ./broadcast.jl:899 [inlined]\n    [5] materialize\n      @ ./broadcast.jl:860
    [inlined]\n    [6] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n      @
    Main /tmp/tmpgv2z69b6.jl:38\n    [7] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n    [8] macro expansion\n      @ /tmp/tmpgv2z69b6.jl:48 [inlined]\n    [9]
    macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [10] top-level scope\n      @ /tmp/tmpgv2z69b6.jl:47\n'''
  timestamp: 1659977913
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    n=0\n    for op in operator\n        n\
    \ += op in operand ? operand[operand.index(op)] : 0\n    end\n    return n\nend\n\
    using Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpcwfc8idf.jl:34

    '
  stdout: "test set: Test Failed at /tmp/tmpcwfc8idf.jl:37\n  Expression: candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37\n   Evaluated: 0 == 37\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcwfc8idf.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcwfc8idf.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpcwfc8idf.jl:38\n  Expression: candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9\n   Evaluated: 0 == 9\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpcwfc8idf.jl:38 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpcwfc8idf.jl:36\ntest set: Test Failed at /tmp/tmpcwfc8idf.jl:39\n\
    \  Expression: candidate([\"//\", \"*\"], [7, 3, 4]) == 8\n   Evaluated: 0 ==\
    \ 8\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcwfc8idf.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcwfc8idf.jl:36\nTest Summary:\
    \ | Fail  Total\ntest set      |    3      3\n"
  timestamp: 1659977911
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    \n    \"\"\"\n    Perform the algebraic\
    \ expression\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpv8eq9r0w.jl:1\nin expression starting at /tmp/tmpv8eq9r0w.jl:1\n"
  stdout: ''
  timestamp: 1659977910
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    operator_length = length(operator)\n  \
    \  operand_length = length(operand)\n    \n    if operand_length == operator_length-1\
    \ && operand_length > 1\n        push!(result, '(')\n        for i = 1:operand_length\n\
    \            push!(result, operand[i])\n            push!(result,operator[i])\n\
    \        end\n        push!(result, ')')\n        return Int64(result)\n    else\n\
    \        push!(result, '(')\n        for i = 1:operand_length\n            push!(result,\
    \ operand[i])\n            push!(result,operator[i])\n        end\n        push!(result,')')\n\
    \    end\nend\nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t\
    @test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7,\
    \ 3, 4]) == 8)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"end\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpe6j7ydmw.jl:46\nin expression starting at /tmp/tmpe6j7ydmw.jl:46\n"
  stdout: ''
  timestamp: 1659977911
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    \n    # Get the length of operator vector\
    \ and operand vector. \n    operator_size = length(operator)\n    operand1_size\
    \ = length(operand)\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\
    \t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7,\
    \ 3, 4]) == 8)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpdoua733s.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpdoua733s.jl:1\n\
    in expression starting at /tmp/tmpdoua733s.jl:1\n"
  stdout: ''
  timestamp: 1659977911
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n  \n    # Evaluate expression\n    expression\
    \ = evaluate(operator, operand)\n    \n    # Return result from expression\n \
    \   return expression\nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\
    \t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7,\
    \ 3, 4]) == 8)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmphtlyn0l4.jl:35

    '
  stdout: "test set: Error During Test at /tmp/tmphtlyn0l4.jl:38\n  Test threw exception\n\
    \  Expression: candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37\n  UndefVarError:\
    \ evaluate not defined\n  Stacktrace:\n   [1] do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})\n     @ Main /tmp/tmphtlyn0l4.jl:28\n   [2] macro expansion\n\
    \     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmphtlyn0l4.jl:38 [inlined]\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmphtlyn0l4.jl:37\ntest set:\
    \ Error During Test at /tmp/tmphtlyn0l4.jl:39\n  Test threw exception\n  Expression:\
    \ candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n  UndefVarError: evaluate\
    \ not defined\n  Stacktrace:\n   [1] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmphtlyn0l4.jl:28\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmphtlyn0l4.jl:39 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmphtlyn0l4.jl:37\ntest set:\
    \ Error During Test at /tmp/tmphtlyn0l4.jl:40\n  Test threw exception\n  Expression:\
    \ candidate([\"//\", \"*\"], [7, 3, 4]) == 8\n  UndefVarError: evaluate not defined\n\
    \  Stacktrace:\n   [1] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmphtlyn0l4.jl:28\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmphtlyn0l4.jl:40 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmphtlyn0l4.jl:37\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  timestamp: 1659977912
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    \n    # create empty vector with length\
    \ operand-operator+1\n    result = Vector{Int64}(operand.length-operator.length+1)\n\
    \    \n    # start filling the vector with basic arithmetic operations\n    for\
    \ i in 1:operand.length-1\n        if operator[i] == '+'\n            result[i]\
    \ = operand[i]+operand[i+1]\n        elseif operator[i] == '-'\n            result[i]\
    \ = operand[i]-operand[i+1]\n        elseif operator[i] == '*'\n            result[i]\
    \ = operand[i]*operand[i+1]\n        elseif operator[i] == '//'\n            result[i]\
    \ = operand[i]//operand[i+1]\n        elseif operator[i] == '**'\n           \
    \ result[i] = operand[i]**operand[i+1]\n        end\n    end\n    \n    return\
    \ result[end]\nend\n</cell>\n<text>\nLet's test our do_algebra function on two\
    \ vectors:\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: character literal contains multiple characters\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmpuvbuza2o.jl:38\nin expression\
    \ starting at /tmp/tmpuvbuza2o.jl:38\n"
  stdout: ''
  timestamp: 1659977911
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    nOperands = length(operand)\n    nOperators\
    \ = length(operator)\n    \n    operand = operand[1:nOperands]\n    operator =\
    \ operator[1:nOperators]\n    \n    exp = Vector{Int64}(undef, nOperators)\n \
    \   i = 0\n    while i < nOperators\n        if operator[i] == '+'\n         \
    \   exp[i] = operand[i] + operand[i+1]\n            i = i+2\n        elseif operator[i]\
    \ == '-'\n            exp[i] = operand[i] - operand[i+1]\n            i = i+2\n\
    \        elseif operator[i] == '*'\n            exp[i] = operand[i] * operand[i+1]\n\
    \            i = i+2\n        elseif operator[i] == '/'\n            exp[i] =\
    \ operand[i] / operand[i+1]\n            i = i+2\n        elseif operator[i] ==\
    \ '//'\n            exp[i] = operand[i] // operand[i+1]\n            i = i+2\n\
    \        elseif operator[i] == '**'\n            exp[i] = operand[i] ** operand[i+1]\n\
    \            i = i+2\n        elseif operator[i] == '%'\n            exp[i] =\
    \ operand[i] % operand[i+1]\n            i = i+2\n        else\n            println(\"\
    Invalid operator type\")\n        end\n    end\n    return exp\nend\n</cell>\n\
    <code language=julia-1.0>\n# Test\nprintln(do_algebra([ '+', '*', '-', '^', '//',\
    \ '%', '**' ], [2, 3, 4, 5]))\n</cell>\n<text>\nExercise 9\nImplement the function\
    \ do_algebra_iterative that uses the function do_algebra above. \nDoes the function\
    \ match the expected behaviour for all cases? If yes, compare it to the implementation\
    \ of do_algebra above.\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\
    \t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7,\
    \ 3, 4]) == 8)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: character literal contains multiple characters\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmpd12fmhmf.jl:47\nin expression\
    \ starting at /tmp/tmpd12fmhmf.jl:47\n"
  stdout: ''
  timestamp: 1659977911
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    \n    len_op = len(operator) - 1\n    len_opr\
    \ = len(operand) - 1\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\
    \t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7,\
    \ 3, 4]) == 8)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmplrfghjwr.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmplrfghjwr.jl:1\n\
    in expression starting at /tmp/tmplrfghjwr.jl:1\n"
  stdout: ''
  timestamp: 1659977911
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    stack = Stack()\n    total = 0\n    for\
    \ i in 1:length(operator)\n        if stack.isEmpty()\n            push!(stack,\
    \ operator[i])\n            push!(stack, operand[i])\n        else\n         \
    \   if operator[i] == stack[length(stack)]\n                push!(stack, operator[i])\n\
    \                push!(stack, operand[i])\n            elseif operator[i] == stack[length(stack)-1]\n\
    \                total = stack[length(stack)-1] + operand[i]\n               \
    \ pop!(stack)\n            else\n                throw(ArgumentError())\n    \
    \        end\n        end\n    end\n    \n    if stack.isEmpty()\n        throw(ArgumentError())\n\
    \    end\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpum1l2bco.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpum1l2bco.jl:1\n\
    in expression starting at /tmp/tmpum1l2bco.jl:1\n"
  stdout: ''
  timestamp: 1659977911
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    result = Int64(0)\n    for op in operator\
    \ \n        result += evalop(op, operand)\n    end\n    return result\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"**\"\
    , \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"\
    ], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpnx7ffbq1.jl:34

    '
  stdout: "test set: Error During Test at /tmp/tmpnx7ffbq1.jl:37\n  Test threw exception\n\
    \  Expression: candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37\n  UndefVarError:\
    \ evalop not defined\n  Stacktrace:\n   [1] do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})\n     @ Main /tmp/tmpnx7ffbq1.jl:28\n   [2] macro expansion\n\
    \     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpnx7ffbq1.jl:37 [inlined]\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpnx7ffbq1.jl:36\ntest set:\
    \ Error During Test at /tmp/tmpnx7ffbq1.jl:38\n  Test threw exception\n  Expression:\
    \ candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n  UndefVarError: evalop\
    \ not defined\n  Stacktrace:\n   [1] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmpnx7ffbq1.jl:28\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpnx7ffbq1.jl:38 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpnx7ffbq1.jl:36\ntest set:\
    \ Error During Test at /tmp/tmpnx7ffbq1.jl:39\n  Test threw exception\n  Expression:\
    \ candidate([\"//\", \"*\"], [7, 3, 4]) == 8\n  UndefVarError: evalop not defined\n\
    \  Stacktrace:\n   [1] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmpnx7ffbq1.jl:28\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpnx7ffbq1.jl:39 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpnx7ffbq1.jl:36\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  timestamp: 1659977913
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    result = Int64[]\n    for op in operator\n\
    \        push!(result, eval(\"op\" .* operand))\n    end\n    return result\n\
    end\n</cell>\n<text>\nPart 4: Test your code\nusing Test\n\n@testset begin\n\n\
    candidate = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5])\
    \ == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkw73goax.jl:32\nin expression starting at\
    \ /tmp/tmpkw73goax.jl:32\n"
  stdout: ''
  timestamp: 1659977911
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    \n    result = Int64(0)\n    for operation\
    \ in operator\n        result *= Int64(operand[length(operand)-length(operator)+1])\n\
    \        for number in operand[2:end]\n            result *= Int64(number)\n \
    \       end\n    end\n    return result\nend\n</cell>\n<code language=julia-0.6>\n\
    @time println(do_algebra(operator, vector))\n</cell>\n<text>\nExercise\nFind all\
    \ possible combinations of operators and operands with given lengths.\nusing Test\n\
    \n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"**\", \"*\"\
    , \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3,\
    \ 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplxnakfzj.jl:36\nin expression starting at\
    \ /tmp/tmplxnakfzj.jl:36\n"
  stdout: ''
  timestamp: 1659977911
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    length = len(operand) - 1 \n    operand_str\
    \ = join(operand) \n    operator_str = join(operator) \n    op_len = length(operator_str)\
    \ \n    op_strs = split(operator_str, '^') \n    # Operator and operand vector\
    \ must both be non-negative\n    assert op_len > 0\n    assert op_len == length(op_strs)\n\
    \    # Vector length must be the same (same number of elements)\n    assert length\
    \ == length(operand_str)\n    \n    if op_strs[2] == '*' \n        mul1 = mul2(operand_str)\
    \ \n        mul2 = mul1(op_strs[1]) \n    else \n        mul1 = mul2(operand_str)\
    \ \n        mul2 = mul1(op_strs[1]) \n    end\n    return eval(mul2)\nend\n</code>\n\
    <|/ a tags=julia,math |>\n<| c |>\nThanks for this! I used your `mul2` function\
    \ and built some `is` statements based on it for checking for the valid vector\
    \ input I was able to successfully get it to work correctly. I'm going to post\
    \ my code in the question. Thanks for your help!\n<|/ c |>\n<| c |>\nHappy I could\
    \ help. If you found the answer helpful, feel free to upvote and/or accept it.\
    \ Thanks!\n<|/ c |>\n<| c |>\nI accepted your answer and upvoted it. Thanks for\
    \ the help!\n<|/ c |>\n<| a dscore=1 tags=julia,math |>\nYou can use sympy package.\
    \ It has a lot of convenient functions for algebra operations. \nYou can try the\
    \ following.\n<code>\njulia> using SymPy\nusing Test\n\n@testset begin\n\ncandidate\
    \ = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\
    \t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"function\" at /tmp/tmp_0yjtb6a.jl:25 expected\
    \ \"end\", got \"op_len\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp_0yjtb6a.jl:32\n\
    in expression starting at /tmp/tmp_0yjtb6a.jl:32\n"
  stdout: ''
  timestamp: 1659977911
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    \"\"\"\n    Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n    the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n    expression and return the evaluation of this expression.\nusing Test\n\
    \n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"**\", \"*\"\
    , \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3,\
    \ 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpru714lwg.jl:1\nin expression starting at /tmp/tmpru714lwg.jl:1\n"
  stdout: ''
  timestamp: 1659977845
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    # Start of the function\n    result_vector\
    \ = Vector{Int64}(undef, length(operator) + 1)\n    # End of the function\n  \
    \  \n    for i = 1:length(operand)\n        \n        if length(operator) == 0\
    \ \n            # Handle cases where operator is an empty vector and operand is\
    \ a non-empty vector\n            result_vector[i] = operand[i]\n        else\
    \ \n            # Handle other cases, where operator is an empty vector and operand\
    \ is a non-empty vector\n            # First, find the index of the operator in\
    \ the operator vector\n            indexOfOperator = findfirst(x -> x == operator,\
    \ operator)\n            # Second, perform the operation on the operand at the\
    \ index of the operator in the operator vector\n            result_vector[i] =\
    \ operand[indexOfOperator] + operator[indexOfOperator + 1] * operand[i]\n    \
    \    end\n    end\n    \n    return result_vector\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"],\
    \ [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5])\
    \ == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpn78ba4k7.jl:48

    '
  stdout: "test set: Error During Test at /tmp/tmpn78ba4k7.jl:51\n  Test threw exception\n\
    \  Expression: candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37\n  ArgumentError:\
    \ invalid index: nothing of type Nothing\n  Stacktrace:\n    [1] to_index(i::Nothing)\n\
    \      @ Base ./indices.jl:300\n    [2] to_index(A::Vector{Int64}, i::Nothing)\n\
    \      @ Base ./indices.jl:277\n    [3] to_indices\n      @ ./indices.jl:333 [inlined]\n\
    \    [4] to_indices\n      @ ./indices.jl:325 [inlined]\n    [5] getindex\n  \
    \    @ ./abstractarray.jl:1218 [inlined]\n    [6] do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})\n      @ Main /tmp/tmpn78ba4k7.jl:40\n    [7] macro\
    \ expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [8] macro expansion\n      @ /tmp/tmpn78ba4k7.jl:51 [inlined]\n\
    \    [9] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [10] top-level scope\n      @ /tmp/tmpn78ba4k7.jl:50\ntest set:\
    \ Error During Test at /tmp/tmpn78ba4k7.jl:52\n  Test threw exception\n  Expression:\
    \ candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n  ArgumentError: invalid\
    \ index: nothing of type Nothing\n  Stacktrace:\n    [1] to_index(i::Nothing)\n\
    \      @ Base ./indices.jl:300\n    [2] to_index(A::Vector{Int64}, i::Nothing)\n\
    \      @ Base ./indices.jl:277\n    [3] to_indices\n      @ ./indices.jl:333 [inlined]\n\
    \    [4] to_indices\n      @ ./indices.jl:325 [inlined]\n    [5] getindex\n  \
    \    @ ./abstractarray.jl:1218 [inlined]\n    [6] do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})\n      @ Main /tmp/tmpn78ba4k7.jl:40\n    [7] macro\
    \ expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [8] macro expansion\n      @ /tmp/tmpn78ba4k7.jl:52 [inlined]\n\
    \    [9] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [10] top-level scope\n      @ /tmp/tmpn78ba4k7.jl:50\ntest set:\
    \ Error During Test at /tmp/tmpn78ba4k7.jl:53\n  Test threw exception\n  Expression:\
    \ candidate([\"//\", \"*\"], [7, 3, 4]) == 8\n  Ar"
  timestamp: 1659977913
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    op = Dict( x -> x+1, x -> x*2, x -> x/3,\
    \ x -> x^5 )\n    vec = Dict( x -> x, x -> x, x -> x, x -> x )\n    \n    oplen\
    \ = length(op)\n    veclen = length(vec)\nusing Test\n\n@testset begin\n\ncandidate\
    \ = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\
    \t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpl9x0atjo.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpl9x0atjo.jl:1\n\
    in expression starting at /tmp/tmpl9x0atjo.jl:1\n"
  stdout: ''
  timestamp: 1659977911
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    sum = 0\n    operators = string.split(operator,\
    \ '+')\n    operands = string.split(operand, '+')\n    for op in operators\n \
    \       sum = (sum + getOperatorValue(op))*getOperatorValue(operands.pop()) \n\
    \    end\n    \n    for op in operators\n        sum = (sum + getOperatorValue(op))*getOperatorValue(operands.pop())\
    \ \n    end\n    return sum\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\
    \t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpe25w8ghv.jl:40

    '
  stdout: "test set: Error During Test at /tmp/tmpe25w8ghv.jl:43\n  Test threw exception\n\
    \  Expression: candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37\n  type #string\
    \ has no field split\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n\
    \   [2] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n     @ Main\
    \ /tmp/tmpe25w8ghv.jl:27\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpe25w8ghv.jl:43 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpe25w8ghv.jl:42\ntest set:\
    \ Error During Test at /tmp/tmpe25w8ghv.jl:44\n  Test threw exception\n  Expression:\
    \ candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n  type #string has no field\
    \ split\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n  \
    \ [2] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n     @ Main\
    \ /tmp/tmpe25w8ghv.jl:27\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpe25w8ghv.jl:44 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpe25w8ghv.jl:42\ntest set:\
    \ Error During Test at /tmp/tmpe25w8ghv.jl:45\n  Test threw exception\n  Expression:\
    \ candidate([\"//\", \"*\"], [7, 3, 4]) == 8\n  type #string has no field split\n\
    \  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})\n     @ Main /tmp/tmpe25w8ghv.jl:27\n   [3] macro expansion\n\
    \     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [4] macro expansion\n     @ /tmp/tmpe25w8ghv.jl:45 [inlined]\n   [5] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpe25w8ghv.jl:42\nTest Summary:\
    \ | Error  Total\ntest set      "
  timestamp: 1659977913
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    if !all(length(op) == length(operand) -\
    \ 1 , length(op) == 1 , length(operand) >= 2) \n        raise ArgumentError(\"\
    Operator and operand must be of same length\")\n    end\n    #println(\"Lengths\
    \ of operator and operand: \", length(operator), \" \", length(operand))\n   \
    \ \n    op_num::Int64 = 0\n    op_num += vectorsum(operand)\n    op_num -= vectorsum(vectorproduct(operand,\
    \ operator))\n    op_num *= vectorproduct(operand, vectorproduct(operator, operand))\n\
    \    op_num //= vectorproduct(operand, operator)\n    op_num **= vectorproduct(operand,\
    \ operator)\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"ArgumentError\"\nStacktrace:\n [1]\
    \ top-level scope\n   @ /tmp/tmpaaxs4xwj.jl:27\nin expression starting at /tmp/tmpaaxs4xwj.jl:27\n"
  stdout: ''
  timestamp: 1659977911
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    \"\"\"\n    Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n    the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n    expression and return the evaluation of this expression.\nusing Test\n\
    \n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"**\", \"*\"\
    , \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3,\
    \ 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpru714lwg.jl:1\nin expression starting at /tmp/tmpru714lwg.jl:1\n"
  stdout: ''
  timestamp: 1659977845
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    \n    # Add operator in operand\n    new_operand\
    \ = operand\n    \n    # Repeat until no operators left in operator vector\n \
    \   for i = length(operator)\n        # Operator vector has at least one operator,\
    \ and operand vector has at least two operands\n        if i > 1\n           \
    \ # Get the number of operators in operand vector\n            op_count = length(new_operand)\n\
    using Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpm3uqmz_c.jl:1\nin expression starting at /tmp/tmpm3uqmz_c.jl:1\n"
  stdout: ''
  timestamp: 1659977912
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    operand_length = length(operand)\n    if\
    \ operand_length != length(operator)\n        error(\"The length of operand vector\
    \ must be equal to the length of operator vector minus one.\")\n    end\n    result\
    \ = Int64[]\n    for operand_index in 1:operand_length\n        operator_index\
    \ = find(operator == operator[1])[1]\n        operand_index = find(operand ==\
    \ operand[operator_index])[1]\n        result[operator_index] += operand[operand_index]\n\
    \    end\n    return result[1]\nend\n</cell>\n<text>\nExercise 2.10\nWrite a function\
    \ called do_algebra_add that has two parameters operator and operand, where operator\
    \ is \na vector of strings, and operand is a vector of integers. The function\
    \ returns the  sum of the \nintegers in the operand vector, given the values of\
    \ the operator vector and the operand.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\
    \t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7qboqabq.jl:38\nin expression starting at\
    \ /tmp/tmp7qboqabq.jl:38\n"
  stdout: ''
  timestamp: 1659977912
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    \n    n = size(operand)\n    assert(length(operator)\
    \ == n-2)\n    \n    A = zeros(Int, n-1)\n    \n    for i = 1:n-2\n        assert(operand[i]\
    \ > 0)\n        assert(operator[i] == '+' || operator[i] == '-' || operator[i]\
    \ == '*' || operator[i] == '/' || operator[i] == '^')\n        \n        if(operator[i]\
    \ == '+')\n            A[i] = operand[i] + operand[i+1]\n        elsif(operator[i]\
    \ == '-')\n            A[i] = operand[i] - operand[i+1]\n        elsif(operator[i]\
    \ == '*')\n            A[i] = operand[i] * operand[i+1]\n        elsif(operator[i]\
    \ == '/')\n            A[i] = operand[i] / operand[i+1]\n        elsif(operator[i]\
    \ == '^')\n            A[i] = operand[i] ** operand[i+1]\n        else\n     \
    \       error(\"operator not recognized\")\n        end\n    end\n    \n    return\
    \ A\nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"x^y\" instead of \"x**y\" for exponentiation,\
    \ and \"x...\" instead of \"**x\" for splatting.\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpz5a0m4nx.jl:45\nin expression starting at /tmp/tmpz5a0m4nx.jl:45\n"
  stdout: ''
  timestamp: 1659977912
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    \"\"\"\n    Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n    the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n    expression and return the evaluation of this expression.\nusing Test\n\
    \n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"**\", \"*\"\
    , \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3,\
    \ 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpru714lwg.jl:1\nin expression starting at /tmp/tmpru714lwg.jl:1\n"
  stdout: ''
  timestamp: 1659977845
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    # Do basic algebra operation on operand\n\
    \    expression = zeros(length(operator))\n    for i = 1:length(operator)\n  \
    \      # Case of addition\n        if operator[i] == '+'\n            expression[i]\
    \ = operand[i] + operand[i + 1]\n        # Case of subtraction\n        else if\
    \ operator[i] == '-'\n            expression[i] = operand[i] - operand[i + 1]\n\
    \        # Case of multiplication\n        else if operator[i] == '*'\n      \
    \      expression[i] = operand[i] * operand[i + 1]\n        # Case of floor division\n\
    \        else if operator[i] == '/'\n            expression[i] = operand[i] //\
    \ operand[i + 1]\n        # Case of exponentiation\n        else if operator[i]\
    \ == '**'\n            expression[i] = operand[i] ** operand[i + 1]\n        end\n\
    \    end\n    return expression\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\
    \t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp13nu8tra.jl:33\nin expression starting at\
    \ /tmp/tmp13nu8tra.jl:33\n"
  stdout: ''
  timestamp: 1659977912
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    result = 0\n    \n    # loop over operator\
    \ vector\n    for op = operator\n        # loop over operand vector\n        for\
    \ i in 1:operand.length-1\n            # if the current operator and operand match,\
    \ then perform the operation\n            if op == operator[i] && operand[i] ==\
    \ operand[i+1]\n                result += operand[i]\n            end\n      \
    \  end\n    end\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpbapdzu53.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpbapdzu53.jl:1\n\
    in expression starting at /tmp/tmpbapdzu53.jl:1\n"
  stdout: ''
  timestamp: 1659977913
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    \n    \"\"\"\n    Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n    the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n    expression and return the evaluation of this expression.\nusing Test\n\
    \n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"**\", \"*\"\
    , \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3,\
    \ 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpd_8k7ef2.jl:1\nin expression starting at /tmp/tmpd_8k7ef2.jl:1\n"
  stdout: ''
  timestamp: 1659977904
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    operator1 = operator[1]\n    operator2\
    \ = operator[2]\n    operand1 = operand[1]\n    operand2 = operand[2]\n    \n\
    \    if length(operator) == length(operand)\n    \n        if operator1 == operator2\n\
    \            \n            if operand1 == operand2\n                \n       \
    \         return operand1 * operand2\n            else\n                \n   \
    \             return 0\n            end\n        end\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"**\", \"*\"\
    , \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3,\
    \ 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpgj6jxhnr.jl:47

    '
  stdout: "test set: Error During Test at /tmp/tmpgj6jxhnr.jl:50\n  Test threw exception\n\
    \  Expression: candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type Int64\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::Ptr) where T<:Integer at ~/.conda/envs/polyglot/share/julia/base/pointer.jl:23\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:7\n\
    \    ...\n  Stacktrace:\n   [1] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmpgj6jxhnr.jl:40\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpgj6jxhnr.jl:50 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpgj6jxhnr.jl:49\ntest set:\
    \ Error During Test at /tmp/tmpgj6jxhnr.jl:51\n  Test threw exception\n  Expression:\
    \ candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\n  Closest candidates are:\n\
    \    convert(::Type{T}, !Matched::Ptr) where T<:Integer at ~/.conda/envs/polyglot/share/julia/base/pointer.jl:23\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:7\n\
    \    ...\n  Stacktrace:\n   [1] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmpgj6jxhnr.jl:40\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpgj6jxhnr.jl:51 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n  "
  timestamp: 1659977915
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    \n    len_operator = length(operator)\n\
    \    len_operand = length(operand)\n    \n    if len_operator == 0\n        error(\"\
    Operator vector must not be empty.\")\n    end\n    \n    if len_operand != len_operator\
    \ - 1\n        error(\"Operand vector must have one more element than the operator\
    \ vector.\")\n    end\n    \n    if len_operator == 1\n        result =  operand[end]\n\
    \    end\n    \n    for i = 1:len_operand - 1\n        result =  operator[i] *\
    \ operand[i + 1] + result\n    end\n    \n    return result\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"**\", \"*\"\
    , \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3,\
    \ 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpi8obgcdx.jl:50

    '
  stdout: "test set: Error During Test at /tmp/tmpi8obgcdx.jl:53\n  Test threw exception\n\
    \  Expression: candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37\n  Operand\
    \ vector must have one more element than the operator vector.\n  Stacktrace:\n\
    \   [1] error(s::String)\n     @ Base ./error.jl:33\n   [2] do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})\n     @ Main /tmp/tmpi8obgcdx.jl:35\n   [3] macro expansion\n\
    \     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [4] macro expansion\n     @ /tmp/tmpi8obgcdx.jl:53 [inlined]\n   [5] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpi8obgcdx.jl:52\ntest set:\
    \ Error During Test at /tmp/tmpi8obgcdx.jl:54\n  Test threw exception\n  Expression:\
    \ candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n  Operand vector must have\
    \ one more element than the operator vector.\n  Stacktrace:\n   [1] error(s::String)\n\
    \     @ Base ./error.jl:33\n   [2] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmpi8obgcdx.jl:35\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpi8obgcdx.jl:54 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpi8obgcdx.jl:52\ntest set:\
    \ Error During Test at /tmp/tmpi8obgcdx.jl:55\n  Test threw exception\n  Expression:\
    \ candidate([\"//\", \"*\"], [7, 3, 4]) == 8\n  Operand vector must have one more\
    \ element than the operator vector.\n  Stacktrace:\n   [1] error(s::String)\n\
    \     @ Base ./error.jl:33\n   [2] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmpi8obgcdx.jl:35\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpi8obgcdx.jl:55 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:"
  timestamp: 1659977915
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    \n    # Check to see if operator vector\
    \ has at least one operator.\n    if isnothing(operator) || isempty(operator)\n\
    \        println(\"ERROR: operator vector does not contain at least one operator!\"\
    )\n        println(\"    Operator vector is: \", operator)\n        return -1\n\
    \    end\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpiaimfk1m.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpiaimfk1m.jl:1\n\
    in expression starting at /tmp/tmpiaimfk1m.jl:1\n"
  stdout: ''
  timestamp: 1659977913
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    \"\"\"\n    Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n    the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n    expression and return the evaluation of this expression.\nusing Test\n\
    \n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"**\", \"*\"\
    , \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3,\
    \ 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpru714lwg.jl:1\nin expression starting at /tmp/tmpru714lwg.jl:1\n"
  stdout: ''
  timestamp: 1659977845
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    \n    operation_vector = operand_vector\
    \ = Vector{String}(:)\n    for op in operator\n        operation_vector = operation_vector\
    \ push!(operand, \"(\" , op , \"(\" , operand[end] , \")\" , \")\")\n    end\n\
    \    \n    operation_vector = Vector{String}(operation_vector)\n    operation_vector\
    \ = operation_vector[1:end-1]\n    \n    operation_vector = operation_vector[1:end-1]\n\
    \    \n    operation_vector = Vector{String}(operation_vector)\n    \n    operation_vector\
    \ = Vector{String}(operation_vector)\n    \n    operation_vector = Vector{String}(operation_vector)\n\
    \    \n    operation_vector = Vector{String}(operation_vector)\n    \n    operation_vector\
    \ = Vector{String}(operation_vector)\n    \n    operation_vector = Vector{String}(operation_vector)\n\
    \    \n    operation_vector = Vector{String}(operation_vector)\n    \n    operation_vector\
    \ = Vector{String}(operation_vector)\n    \n    operation_vector = Vector{String}(operation_vector)\n\
    \    \n    operation_vector = Vector{String}(operation_vector)\n    \n    operation_vector\
    \ = Vector{String}(operation_vector)\n    \n    operation_vector = Vector{String}(operation_vector)\n\
    \    \n    operation_vector = Vector{String}(operation_vector)\n    \n    operation_vector\
    \ = Vector{String}(operation_vector)\n    \n    operation_vector = Vector{String}(operation_vector)\n\
    \    \n    operation_vector = Vector{String}(operation_vector)\n    \n    operation_vector\
    \ = Vector{String}(operation_vector)\n    \n    operation_vector = Vector{String}(operation_vector)\n\
    \    \n    operation_vector = Vector{String}(operation_vector)\n    \n    operation_vector\
    \ = Vector{String}(operation_vector)\n    \n    operation_vector = Vector{String}(operation_vector)\n\
    \    \n    operation_vector = Vector{String}(operation_vector)\n    \n    operation_vector\
    \ = Vector{String}(operation_vector)\n    \n    operation_vector = Vector{String}(operation_vector)\n\
    \    \n    operation_vector = Vector{String}(operation_vector)\n    \n    operation_vector\
    \ = Vector{String}(operation_vector)\n    \n    operation_vector = Vector{String}(operation_vector)\n\
    \    \n    operation_vector = Vector{String}(operation_vector)\n    \n    operation_vector\
    \ = Vector{String}(operation_vector)\n    \n    operation_vector = Vector{String}(operation_vector)\n\
    \    \n    operation_\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\
    \t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7,\
    \ 3, 4]) == 8)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmp1l1j_svi.jl:28 expected \"\
    end\", got \"push!\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp1l1j_svi.jl:29\n\
    in expression starting at /tmp/tmp1l1j_svi.jl:29\n"
  stdout: ''
  timestamp: 1659977913
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    length = length(operator)\n    \n    #\
    \ check if length is less than 2\n    if length == 2\n        # check if the length\
    \ of operand is less than 1\n        if length(operand) < 1\n            return\
    \ 0\n        # check if operand vector has all positive values\n        if all(x\
    \ -> x > 0, operand)\n            # check if the length of operator vector is\
    \ less than 1\n            if length(operator) < 1\n                return 0\n\
    \            # check if the length of operator vector is less than 2\n       \
    \     if length(operator) < 2\n                return 0\n            # check if\
    \ the length of operator vector is greater than 3\n            if length(operator)\
    \ > 3\n                return 0\n            # check if the length of operator\
    \ vector is less than 4\n            if length(operator) < 4\n               \
    \ return 0\n            # check if the length of operator vector is greater than\
    \ 5\n            if length(operator) > 5\n                return 0\n         \
    \   # check if the length of operator vector is greater than 6\n            if\
    \ length(operator) > 6\n                return 0\n            # check if the length\
    \ of operator vector is greater than 7\n            if length(operator) > 7\n\
    \                return 0\n            # check if the length of operator vector\
    \ is greater than 8\n            if length(operator) > 8\n                return\
    \ 0\n            # check if the length of operator vector is greater than 9\n\
    \            if length(operator) > 9\n                return 0\n            #\
    \ check if the length of operator vector is greater than 10\n            if length(operator)\
    \ > 10\n                return 0\n            # check if the length of operator\
    \ vector is greater than 11\n            if length(operator) > 11\n          \
    \      return 0\n            # check if the length of operator vector is greater\
    \ than 12\n            if length(operator) > 12\n                return 0\n  \
    \          # check if the length of operator vector is greater than 13\n     \
    \       if length(operator) > 13\n                return 0\n            # check\
    \ if the length of operator vector is greater than 14\n            if length(operator)\
    \ > 14\n                return 0\n            # check if the length of operator\
    \ vector is greater than 15\n            if length(operator) > 15\n          \
    \      return 0\n            # check if the length of operator vector is greater\
    \ than 16\n            if length(operator) > 16\n                return 0\n  \
    \          # check if the length of operator vector is greater than 17\n     \
    \       if length(operator) > 17\n                return 0\n            # check\
    \ if the length of operator vector is greater than 18\n            if length(operator)\
    \ > 18\n                return 0\n            # check if the length of operator\
    \ vector is greater than 19\n            if length(operator) > 19\n          \
    \      return 0\n            # check if the length of operator vector is greater\
    \ than 20\n            if length(operator) > 20\n                return 0\n  \
    \          # check if the length of operator vector is greater than 21\n     \
    \       if length(operator) > 21\n                return 0\n            # check\
    \ if the length of operator vector is greater than 22\n            if length(operator)\
    \ > 22\n                return 0\n            # check if the length of operator\
    \ vector is greater than 23\n            if length(operator) > 23\n          \
    \      return 0\n            # check if the length of operator vector is greater\
    \ than 24\n            if length(operator) > 24\n                return 0\n  \
    \          # check if the length of operator vector is greater than 25\n     \
    \       if length(operator) > 25\n                return 0\n            # check\
    \ if the length of operator vector is greater than 26\n            if \nusing\
    \ Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"**\"\
    , \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"\
    ], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing condition in \"if\" at /tmp/tmp_8xrn7vd.jl:111\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmp_8xrn7vd.jl:112\nin expression\
    \ starting at /tmp/tmp_8xrn7vd.jl:112\n"
  stdout: ''
  timestamp: 1659977913
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    \n    if length(operator) != length(operand)\n\
    \        error(\"operator and operand must be of same size\")\n    elseif length(operator)\
    \ == 0\n        error(\"operator must contain at least one operator\")\n    elseif\
    \ length(operand) == 0\n        error(\"operand must contain at least one operand\"\
    )\n    end\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpgpef5f08.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpgpef5f08.jl:1\n\
    in expression starting at /tmp/tmpgpef5f08.jl:1\n"
  stdout: ''
  timestamp: 1659977913
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n  \n  # Make sure the lengths of operator vector\
    \ and operand vector is equal\n  if length(operator) == length(operand) - 1 \n\
    \    \n    # Make sure that the length of operator vector is non-negative\n  \
    \  if all(Operator == operator[1:end-1]) for Operator in operator[1:end-1]\n \
    \     \n      # Make sure that the length of operand vector is non-negative\n\
    \      if all(Operand == operand[1:end-1]) for Operand in operand[1:end-1]\nusing\
    \ Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"**\"\
    , \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"\
    ], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"for\" at /tmp/tmpd6g4nd80.jl:34\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpd6g4nd80.jl:1\n\
    in expression starting at /tmp/tmpd6g4nd80.jl:1\n"
  stdout: ''
  timestamp: 1659977913
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n        \n    \n    # initialize a variable\
    \ that will hold result\n    result = Int64(0)\n    \n    # iterate through the\
    \ first vector, and append each operation to result\n    for operatorString in\
    \ operator\n        result <- result + parse(Int, operatorString) * operand[1]\n\
    \    end\n    \n    # iterate through the second vector, and append each operand\
    \ to result\n    for operandInt64 in operand[2:end]\n        result <- result\
    \ + operandInt64 * parse(Int, operatorString) * operand[1]\n    end\n    \n  \
    \  # return the result\n    return result\nend\n</cell>\n<code language=julia-1.5>\n\
    do_algebra(operator, vector)\n</cell>\n<text>\n6. Evaluation of a mathematical\
    \ expression\nNow, we are ready to evaluate mathematical expressions. We will\
    \ see how to build mathematical expressions from our vectors, and how to evaluate\
    \ them with the help of the do_algebra function. We will use the same example\
    \ as above.\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpouxgrotf.jl:44\nin expression starting at\
    \ /tmp/tmpouxgrotf.jl:44\n"
  stdout: ''
  timestamp: 1659977913
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    \"\"\" A function do the algebra operations.\n\
    \    Given two vectors operator, and operand. The first vector has basic algebra\
    \ operations, and \n    the second vector is a vector of integers. Use the two\
    \ given vectors to build the algebric \n    expression and return the evaluation\
    \ of this expression.\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\
    \t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7,\
    \ 3, 4]) == 8)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpa1nltyud.jl:1\nin expression starting at /tmp/tmpa1nltyud.jl:1\n"
  stdout: ''
  timestamp: 1659977913
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    \"\"\"\n    Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n    the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n    expression and return the evaluation of this expression.\nusing Test\n\
    \n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"**\", \"*\"\
    , \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3,\
    \ 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpru714lwg.jl:1\nin expression starting at /tmp/tmpru714lwg.jl:1\n"
  stdout: ''
  timestamp: 1659977845
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    # A special case: just do addition \n \
    \   if length(operator) == 1 && length(operand) == 2\n        return operand[1]\n\
    \    # else, do algebra \n    else\n        # Initialization of result \n    \
    \    result = 0 \n        # Loop over all the operator\n        for symbol in\
    \ operator\n            # Compute the symbol's value\n            result = result\
    \ + operand[symbol]\n        end\n        # Return the result\n        return\
    \ result\n    end\nend\n</cell>\n<code language=julia-1.3>\nresult = do_algebra(operator,\
    \ vector)\nprintln(result)\n</cell>\n<text>\nQuestion 9\nWrite a function expression_evaluate(expression::String)\
    \ which takes a string expression as input and returns the result of this expression.\
    \ This is one of the functions which you have already written. \nFor example,\
    \ expression_evaluate(\"2 + 3 * 4 - 5\") should return 9.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"],\
    \ [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5])\
    \ == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4d2c42p7.jl:42\nin expression starting at\
    \ /tmp/tmp4d2c42p7.jl:42\n"
  stdout: ''
  timestamp: 1659977913
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    # Initialize an empty vector.\n    expression::Vector{Int64}\
    \ = Vector{Int64}()\n    \n    # Add the operands to expression.\n    for i =\
    \ 1:length(operand)\n        push!(expression, operand[i])\n    end\n    \n  \
    \  # Add the operators to expression.\n    for i = 1:length(operator)\n      \
    \  push!(expression, operator[i])\n    end\nusing Test\n\n@testset begin\n\ncandidate\
    \ = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\
    \t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpvmimmf91.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpvmimmf91.jl:1\n\
    in expression starting at /tmp/tmpvmimmf91.jl:1\n"
  stdout: ''
  timestamp: 1659977913
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    \"\"\"\n    Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n    the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n    expression and return the evaluation of this expression.\nusing Test\n\
    \n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"**\", \"*\"\
    , \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3,\
    \ 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpru714lwg.jl:1\nin expression starting at /tmp/tmpru714lwg.jl:1\n"
  stdout: ''
  timestamp: 1659977845
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    \n    result = 1\n    for op in operator\n\
    \        if op == null(String)\n            throw(string(\"The operator is null:\
    \ \",op))\n        end\n        if op in \"+-\"\n            result = op\n   \
    \     elseif op in \"*/\"\n            result = result * operand[1]\n        elseif\
    \ op in \"//\"\n            result = result / operand[1]\n        elseif op in\
    \ \"**\"\n            result = result ^ operand[1]\n        else\n           \
    \ throw(string(\"The operator is invalid: \",op))\n        end\n    end\n    return\
    \ result\nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpjuzfsqyd.jl:48

    '
  stdout: "test set: Error During Test at /tmp/tmpjuzfsqyd.jl:51\n  Test threw exception\n\
    \  Expression: candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37\n  UndefVarError:\
    \ null not defined\n  Stacktrace:\n   [1] do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})\n     @ Main /tmp/tmpjuzfsqyd.jl:29\n   [2] macro expansion\n\
    \     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpjuzfsqyd.jl:51 [inlined]\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpjuzfsqyd.jl:50\ntest set:\
    \ Error During Test at /tmp/tmpjuzfsqyd.jl:52\n  Test threw exception\n  Expression:\
    \ candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n  UndefVarError: null not\
    \ defined\n  Stacktrace:\n   [1] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmpjuzfsqyd.jl:29\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpjuzfsqyd.jl:52 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpjuzfsqyd.jl:50\ntest set:\
    \ Error During Test at /tmp/tmpjuzfsqyd.jl:53\n  Test threw exception\n  Expression:\
    \ candidate([\"//\", \"*\"], [7, 3, 4]) == 8\n  UndefVarError: null not defined\n\
    \  Stacktrace:\n   [1] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmpjuzfsqyd.jl:29\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpjuzfsqyd.jl:53 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpjuzfsqyd.jl:50\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  timestamp: 1659977915
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    operand_length = len(operand)\n    op_length\
    \ = len(operator)\n    \n    if op_length == 0 or operand_length == 0 \n     \
    \   return -1\n    end\n    if op_length == 1 \n        if isoperator(operator[1])\
    \ \n            # Operator is a basic algebra operation like +, -, *, / , ** \n\
    \            return eval(operator[1], operand)\n        else \n            # Operator\
    \ is just a number, like 2\n            return operand[1]\n        end\n    end\n\
    using Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"operand_length\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0x143ep6.jl:29\nin expression starting at\
    \ /tmp/tmp0x143ep6.jl:29\n"
  stdout: ''
  timestamp: 1659977913
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    \n    # convert operand vector to vector\
    \ of real numbers\n    operand = Vector{Real}(undef, length(operand) - 1) do i\n\
    \        operand[i]\n    end\n    \n    # convert operator vector to vector of\
    \ strings\n    operator = Vector{String}(undef, length(operator) - 1) do i\n \
    \       operator[i]\n    end\n    \n    # initialize sum variable\n    sum = 0\n\
    \    \n    # loop through the operand\n    for i in 1 : length(operand)\n    \
    \    \n        # loop through the operator\n        for j in 1 : length(operator)\n\
    \            \n            # check if the operator is a basic algebra operation\n\
    \            if operator[j] \u2209 [\"+\", \"-\", \"*\", \"//\", \"**\"]\n   \
    \             continue\n            end\n            \n            # check if\
    \ the operand is a vector\n            if isa(operand[i], Vector{Int64})\n   \
    \             \n                # add the corresponding element of the operand\
    \ vector to the sum variable\n                sum = sum + operand[i][j]\n    \
    \        else\n                # add the operand to the sum variable\n       \
    \         sum = sum + operand[i]\n            end\n        end\n    end\n    \n\
    \    # return the sum\n    sum\nend\n</cell>\n<code language=julia-1.6>\n# test\
    \ the do_algebra function\ndo_algebra(operator['+', '*', '-'], vector)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a vector of strings as the operator\
    \ and an operand vector, and returns the result of the algebraic operation on\
    \ the two vectors.\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t\
    @test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7,\
    \ 3, 4]) == 8)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpj45q1fwy.jl:66\nin expression starting at\
    \ /tmp/tmpj45q1fwy.jl:66\n"
  stdout: ''
  timestamp: 1659977913
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    # Initialization\n    res = 0\n    for\
    \ op in operator\n        if op == \"*\"\n            res = res * operand[length(operand)-1]\n\
    \        elseif op == \"+\"\n            res = res + operand[length(operand)-1]\n\
    \        elseif op == \"/\"\n            res = res / operand[length(operand)-1]\n\
    \        elseif op == \"//\"\n            res = res // operand[length(operand)-1]\n\
    \        elseif op == \"**\"\n            res = res ** operand[length(operand)-1]\n\
    \        elseif op == \"-\"\n            res = res - operand[length(operand)-1]\n\
    \        end\n    end\n    return res\nend\n</cell>\n<text>\nLet's check if this\
    \ works. Let's create the vector operator:\nusing Test\n\n@testset begin\n\ncandidate\
    \ = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\
    \t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"x^y\" instead of \"x**y\" for exponentiation,\
    \ and \"x...\" instead of \"**x\" for splatting.\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpdjtvxh2l.jl:38\nin expression starting at /tmp/tmpdjtvxh2l.jl:38\n"
  stdout: ''
  timestamp: 1659977914
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    \n    expr = string(operator)\n    lenOperator(length(operator))\n\
    \    lenOperand(length(operand))\nusing Test\n\n@testset begin\n\ncandidate =\
    \ do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\
    \t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmplq23u11z.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmplq23u11z.jl:1\n\
    in expression starting at /tmp/tmplq23u11z.jl:1\n"
  stdout: ''
  timestamp: 1659977914
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    result = operand[1]\n    for i in 2:length(operand)\n\
    \        result = result .* operator[i] .* operand[i-1]\n    end\n    return result\n\
    end\n</cell>\n<code language=julia-1.5>\n# Test the function do_algebra\ndo_algebra(['+',\
    \ '*', '-'], [2, 3, 4, 5]) == 9\n</cell>\n<code language=julia-1.5>\n# Test the\
    \ function do_algebra\ndo_algebra(['+', '*', '-'], [9, 2, 5, 3]) == 27\n</cell>\n\
    <code language=julia-1.5>\n# Test the function do_algebra\ndo_algebra(['+', '*',\
    \ '-'], [9, 2, 5, 3]) == 27\n</cell>\n<text>\nPart 4: Evaluate a Polynomial Expression\n\
    using Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpepuf_pfz.jl:32\nin expression starting at\
    \ /tmp/tmpepuf_pfz.jl:32\n"
  stdout: ''
  timestamp: 1659977914
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    \n    result = Int64(1)\n    length = length(operand)-1\n\
    \    \n    for i in 1:length\n        \n        #println(operator[i], operand[i])\n\
    \        \n        if operator[i] == '+'\n            result += operand[i]\n \
    \       else if operator[i] == '*'\n            result *= operand[i]\n       \
    \ else if operator[i] == '-'\n            result -= operand[i]\n        else if\
    \ operator[i] == '/'\n            result /= operand[i]\n        else if operator[i]\
    \ == '**'\n            result **= operand[i]\n        end\nusing Test\n\n@testset\
    \ begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"],\
    \ [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5])\
    \ == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwgrzemt6.jl:36\nin expression starting at\
    \ /tmp/tmpwgrzemt6.jl:36\n"
  stdout: ''
  timestamp: 1659977914
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    \"\"\"Do algebra with given operator and\
    \ operand.\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmps16i4zgs.jl:1\nin expression starting at /tmp/tmps16i4zgs.jl:1\n"
  stdout: ''
  timestamp: 1659977914
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    \n    # check input\n    assert(length(operator)\
    \ == length(operand) - 1) \n    assert(all(elem <= '^' for elem in operator))\
    \ \n    assert(all(elem <= '&' for elem in operator)) \n    assert(all(elem <=\
    \ '-' for elem in operator)) \n    assert(all(elem <= '+' for elem in operator))\
    \ \n    assert(all(elem <= '*' for elem in operator)) \n    assert(all(elem <=\
    \ '<' for elem in operator)) \n    assert(all(elem <= '>' for elem in operator))\
    \ \n    assert(all(elem <= '#' for elem in operator)) \n    assert(length(vector)\
    \ == length(operand) - 1) \nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\
    \t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7,\
    \ 3, 4]) == 8)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp3t4rn2lh.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp3t4rn2lh.jl:1\n\
    in expression starting at /tmp/tmp3t4rn2lh.jl:1\n"
  stdout: ''
  timestamp: 1659977915
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    length = length(operator)-1\n    result_vector\
    \ = fill(operand[1], length)\n    for i in 1:length\n        element1 = eval(operator[i])\n\
    \        element2 = operand[i+1]\n        result_vector[i] = eval(element1 .+\
    \ element2)\n    end\n    return result_vector[1]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"],\
    \ [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5])\
    \ == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpyzb5kxum.jl:37

    '
  stdout: "test set: Error During Test at /tmp/tmpyzb5kxum.jl:40\n  Test threw exception\n\
    \  Expression: candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37\n  UndefVarError:\
    \ length not defined\n  Stacktrace:\n   [1] do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})\n     @ Main /tmp/tmpyzb5kxum.jl:26\n   [2] macro expansion\n\
    \     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpyzb5kxum.jl:40 [inlined]\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpyzb5kxum.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpyzb5kxum.jl:41\n  Test threw exception\n  Expression:\
    \ candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n  UndefVarError: length\
    \ not defined\n  Stacktrace:\n   [1] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmpyzb5kxum.jl:26\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpyzb5kxum.jl:41 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpyzb5kxum.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpyzb5kxum.jl:42\n  Test threw exception\n  Expression:\
    \ candidate([\"//\", \"*\"], [7, 3, 4]) == 8\n  UndefVarError: length not defined\n\
    \  Stacktrace:\n   [1] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmpyzb5kxum.jl:26\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpyzb5kxum.jl:42 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpyzb5kxum.jl:39\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  timestamp: 1659977916
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    operators = Vector{String}(undef, length(operator)\
    \ - 1)\n    for i = 1:length(operator)\n        operators[i + 1] = ops[operator[i]]\n\
    \    end\n    result = 0\n    for i = 1:length(operand)\n        result += operators[operand[i]](operand[i])\n\
    \    end\n    return result\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\
    \t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpvm0w5iov.jl:38

    '
  stdout: "test set: Error During Test at /tmp/tmpvm0w5iov.jl:41\n  Test threw exception\n\
    \  Expression: candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37\n  UndefVarError:\
    \ ops not defined\n  Stacktrace:\n   [1] do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})\n     @ Main /tmp/tmpvm0w5iov.jl:28\n   [2] macro expansion\n\
    \     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpvm0w5iov.jl:41 [inlined]\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvm0w5iov.jl:40\ntest set:\
    \ Error During Test at /tmp/tmpvm0w5iov.jl:42\n  Test threw exception\n  Expression:\
    \ candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n  UndefVarError: ops not\
    \ defined\n  Stacktrace:\n   [1] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmpvm0w5iov.jl:28\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpvm0w5iov.jl:42 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvm0w5iov.jl:40\ntest set:\
    \ Error During Test at /tmp/tmpvm0w5iov.jl:43\n  Test threw exception\n  Expression:\
    \ candidate([\"//\", \"*\"], [7, 3, 4]) == 8\n  UndefVarError: ops not defined\n\
    \  Stacktrace:\n   [1] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmpvm0w5iov.jl:28\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpvm0w5iov.jl:43 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvm0w5iov.jl:40\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  timestamp: 1659977916
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    \n    operand_len = length(operand) - 1\n\
    \    \n    \n    # Check the length of the operator vector\n    if length(operator)\
    \ < 1\n        error(\"The operator vector has less than one operator\")\n   \
    \ end\n    # Check the length of the operand vector\n    if length(operand) <\
    \ 2\n        error(\"The operand vector has less than two operands\")\n    end\n\
    \    # Check the length of the operator\n    if length(operator) != length(operand)\n\
    \        error(\"The operator vector and the operand vector must have the same\
    \ length\")\n    end\n    \n    # Check the length of the operator vector\n  \
    \  if length(operator) < 1\n        error(\"The operator vector has less than\
    \ one operator\")\n    end\n    # Check the length of the operand vector\n   \
    \ if length(operand) < 2\n        error(\"The operand vector has less than two\
    \ operands\")\n    end\n    # Check the length of the operator\n    if length(operator)\
    \ != length(operand)\n        error(\"The operator vector and the operand vector\
    \ must have the same length\")\n    end\n    \n    if length(operator) == 1\n\
    \        # Check if the first operator is +\n        if operator[1] == '+'\n \
    \           return operand[1] + operand[operand_len + 1]\n        end\n      \
    \  # Check if the first operator is -\n        if operator[1] == '-'\n       \
    \     return operand[1] - operand[operand_len + 1]\n        end\n        # Check\
    \ if the first operator is *\n        if operator[1] == '*'\n            return\
    \ operand[1] * operand[operand_len + 1]\n        end\n        # Check if the first\
    \ operator is /\n        if operator[1] == '/'\n            return operand[1]\
    \ / operand[operand_len + 1]\n        end\n        # Check if the first operator\
    \ is **\n        if operator[1] == '**'\n            return operand[1] ** operand[operand_len\
    \ + 1]\n        end\n    end\n    \n    # Check if the first operator is +\n \
    \   if operator[1] == '+'\n        # Check if there is one operand in the operator\
    \ vector\n        if operand_len == 1\n            # Check if the first operand\
    \ is equal to the second operand\n            if operand[1]  == operand[2]\n \
    \               return operand[1]\n            end\n        end\n    end\n   \
    \ # Check if the first operator is -\n    if operator[1] == '-'\n        # Check\
    \ if there is one operand in the operator vector\n        if operand_len == 1\n\
    \            # Check if the first operand is equal to the second operand\n   \
    \         if operand[1]  == operand[2]\n                return -operand[1]\n \
    \           end\n        end\n    end\n    # Check if the first operator is *\n\
    \    if operator[1] == '*'\n        # Check if there is one operand in the operator\
    \ vector\n        if operand_len == 1\n            # Check if the first operand\
    \ is equal to the second operand\n            if operand[1]  == operand[2]\n \
    \               return operand[1] * operand[2]\n            end\n        end\n\
    \    end\n    # Check if the first operator is /\n    if operator[1] == '/'\n\
    \        # Check if there is one operand in the operator vector\n        if operand_len\
    \ == 1\n            # Check if \nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\
    \t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7,\
    \ 3, 4]) == 8)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: character literal contains multiple characters\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmp2zdqeb1g.jl:74\nin expression\
    \ starting at /tmp/tmp2zdqeb1g.jl:74\n"
  stdout: ''
  timestamp: 1659977915
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    \"\"\"\n    Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n    the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n    expression and return the evaluation of this expression.\nusing Test\n\
    \n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"**\", \"*\"\
    , \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3,\
    \ 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpru714lwg.jl:1\nin expression starting at /tmp/tmpru714lwg.jl:1\n"
  stdout: ''
  timestamp: 1659977845
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    op_length = length(operator)\n    arg_length\
    \ = length(operand)\n    \n    if op_length == 0 || arg_length < 2\n        throw(ArgumentError)\n\
    \    end\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpg9vyb1t0.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpg9vyb1t0.jl:1\n\
    in expression starting at /tmp/tmpg9vyb1t0.jl:1\n"
  stdout: ''
  timestamp: 1659977915
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    if length(operator) != length(operand)\
    \ \n        throw(ArgumentError(\"Operand vector has length different than operator\
    \ vector\"))\n    end\n    \n    exp = zeros(Int64, length(operator))\n    \n\
    \    for i in 1:length(operator)\n        exp[i] = eval(parse(parse(string(\"\
    $operator[$i]($operand[\" .. i - 1 .. \"])\")))) * operand[i]\n    end\n    \n\
    \    sum(exp)\nend\n</cell>\n<text>\nNow let's use our algorithm to evaluate the\
    \ expression:\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpal_qrw6_.jl:33\nin expression starting at\
    \ /tmp/tmpal_qrw6_.jl:33\n"
  stdout: ''
  timestamp: 1659977915
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    operand_length = len(operand)\n    operator_length\
    \ = len(operator)\n    if operator_length > operand_length \n        throw(ArgumentError(\"\
    Operator vector length is larger than operand vector length.\"))\n    elseif operator_length\
    \ == 1\n        throw(ArgumentError(\"Operator vector has one operator which is\
    \ invalid.\"))\n    elseif operand_length == 0\n        throw(ArgumentError(\"\
    Operand vector has zero elements.\"))\n    else\n        eval_result = eval(operator[1],\
    \ operand[1])\n        return eval_result\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"],\
    \ [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5])\
    \ == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmp82o2wv0f.jl:41

    '
  stdout: "test set: Error During Test at /tmp/tmp82o2wv0f.jl:44\n  Test threw exception\n\
    \  Expression: candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37\n  UndefVarError:\
    \ len not defined\n  Stacktrace:\n   [1] do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})\n     @ Main /tmp/tmp82o2wv0f.jl:26\n   [2] macro expansion\n\
    \     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmp82o2wv0f.jl:44 [inlined]\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp82o2wv0f.jl:43\ntest set:\
    \ Error During Test at /tmp/tmp82o2wv0f.jl:45\n  Test threw exception\n  Expression:\
    \ candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n  UndefVarError: len not\
    \ defined\n  Stacktrace:\n   [1] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmp82o2wv0f.jl:26\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp82o2wv0f.jl:45 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp82o2wv0f.jl:43\ntest set:\
    \ Error During Test at /tmp/tmp82o2wv0f.jl:46\n  Test threw exception\n  Expression:\
    \ candidate([\"//\", \"*\"], [7, 3, 4]) == 8\n  UndefVarError: len not defined\n\
    \  Stacktrace:\n   [1] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmp82o2wv0f.jl:26\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp82o2wv0f.jl:46 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp82o2wv0f.jl:43\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  timestamp: 1659977916
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    \"\"\"\n    Given a vector operator and\
    \ a vector of integers, return the evaluation of the expression \n    in string\
    \ format.\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5fvr7dij.jl:1\nin expression starting at /tmp/tmp5fvr7dij.jl:1\n"
  stdout: ''
  timestamp: 1659977915
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    \n    # Add two vectors operator, operand\
    \ and return the result of the algebraic expression\n    \n    operation_symbol::Symbol\
    \ = operator[1]\n    operation_number::Int64 = Int(operator[2])\n    \n    # Build\
    \ the algebraic expression\n    algebric_expr::Symbol\n    if length(operator)\
    \ == 1 \n        algebric_expr = operation_symbol\n    elseif operation_symbol\
    \ == '+' \n        algebric_expr = operation_symbol + operation_number\n    elseif\
    \ operation_symbol == '-' \n        algebric_expr = operation_symbol - operation_number\n\
    \    elseif operation_symbol == '*' \n        algebric_expr = operation_symbol\
    \ * operation_number\n    elseif operation_symbol == '/' \n        algebric_expr\
    \ = operation_symbol / operation_number\n    elseif operation_symbol == '//' \n\
    \        algebric_expr = operation_symbol / (operation_number::Int64)\n    elseif\
    \ operation_symbol == '**' \n        algebric_expr = operation_symbol ** operation_number\n\
    \    end\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: character literal contains multiple characters\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmpzxecgwxw.jl:44\nin expression\
    \ starting at /tmp/tmpzxecgwxw.jl:44\n"
  stdout: ''
  timestamp: 1659977915
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    \n    # Define the operator\n    operand_copy\
    \ = copy(operand)\n    operators_copy = copy(operator)\n    operator = operators_copy[end]\n\
    \    operand = operand_copy[end]\n    \n    # Initialize result \n    result =\
    \ 1\n    \n    # Loop to evaluate the expression\n    for i = 2:length(operators_copy)\n\
    \        \n        # If the operator is '+' or '-' \n        if operators_copy[i]\
    \ ~= '+'\n            \n            # Add current operand to the result\n    \
    \        result = result + operand\n            \n        # If the operator is\
    \ '-' \n        else\n            \n            # Substract the current operand\
    \ from the result\n            result = result - operand\n        \n    end\n\
    \    \n    # Return the result \n    return result\nend\n</cell>\n<text>\nExercise\n\
    Implement the do_algebra function using the function definition above.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"**\"\
    , \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"\
    ], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcqnoqk0x.jl:56\nin expression starting at\
    \ /tmp/tmpcqnoqk0x.jl:56\n"
  stdout: ''
  timestamp: 1659977915
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    \n    \"\"\"\n    Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n    the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n    expression and return the evaluation of this expression.\nusing Test\n\
    \n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"**\", \"*\"\
    , \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3,\
    \ 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpd_8k7ef2.jl:1\nin expression starting at /tmp/tmpd_8k7ef2.jl:1\n"
  stdout: ''
  timestamp: 1659977904
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    # TODO\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4,\
    \ 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t\
    @test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmp87433rnb.jl:30

    '
  stdout: "test set: Error During Test at /tmp/tmp87433rnb.jl:33\n  Test threw exception\n\
    \  Expression: candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type Int64\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::Ptr) where T<:Integer at ~/.conda/envs/polyglot/share/julia/base/pointer.jl:23\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:7\n\
    \    ...\n  Stacktrace:\n   [1] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmp87433rnb.jl:27\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp87433rnb.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp87433rnb.jl:32\ntest set:\
    \ Error During Test at /tmp/tmp87433rnb.jl:34\n  Test threw exception\n  Expression:\
    \ candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\n  Closest candidates are:\n\
    \    convert(::Type{T}, !Matched::Ptr) where T<:Integer at ~/.conda/envs/polyglot/share/julia/base/pointer.jl:23\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:7\n\
    \    ...\n  Stacktrace:\n   [1] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmp87433rnb.jl:27\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp87433rnb.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n  "
  timestamp: 1659977918
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    \n    length = length(operator)\n    \n\
    \    if length < length(operand)\n        return error(\"operator vector has less\
    \ than one operator\")\n    end\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\
    \t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7,\
    \ 3, 4]) == 8)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp9h4abgf8.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp9h4abgf8.jl:1\n\
    in expression starting at /tmp/tmp9h4abgf8.jl:1\n"
  stdout: ''
  timestamp: 1659977915
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    \n    # Get the length of operator vector\
    \ and operand vector. \n    operatorLength = length(operator)\n    operandLength\
    \ = length(operand)\n    \n    # If the length of the operator vector is less\
    \ than or equal to the length of the operand vector, \n    # then the operator\
    \ vector is a vector of basic algebra operations. \n    # If the length of the\
    \ operator vector is greater than or equal to the length of the operand vector,\
    \ \n    # then the operator vector is a vector of integers. \n    if (operatorLength\
    \ <= operandLength) \n        # Use vectors to store the algebraic expression\
    \ and the evaluation. \n        algebraExpression = zeros(Int, operandLength)\n\
    \        evaluationValue = zeros(Int, operandLength)\n        \n        # Loop\
    \ through the vectors operand and operator and evaluate the algebraic expression\
    \ \n        # and store the value in a new vector called the evaluationValue.\
    \ \n        for i = 1:operandLength \n            # Get the position of the operator\
    \ vector in the algebraic expression vector. \n            operatorIndex = find(operator\
    \ == operatorSymbols[i])\n            \n            # If the operator vector is\
    \ a vector of basic algebraic operations, \n            # then add or subtract\
    \ the operand. \n            if (operatorIndex > -1) \n                algebraExpression[i]\
    \ = operand[operatorIndex] + algebraExpression[i] \n            else\n       \
    \         # If the operator vector is a vector of integers, \n               \
    \ # then multiply or floor divide the operand. \n                if (operatorSymbols[i]\
    \ == \"/\")\n                    algebraExpression[i] = operand[operatorIndex]\
    \ / algebraExpression[i] \n                else\n                    algebraExpression[i]\
    \ = operand[operatorIndex] * algebraExpression[i] \n                end\n    \
    \        end\n        end\n        \n        # Find the index of the maximum of\
    \ the algebraic expression. \n        maxIndex = argmax(algebraExpression)\n \
    \       \n        # Return the value of the algebraic expression at the maximum\
    \ index. \n        return evaluationValue[maxIndex]\n    else\n        # If the\
    \ length of the operator vector is less than or equal to the length of the operand\
    \ vector, \n        # then the operator vector is a vector of basic algebra operations.\
    \ \n        # If the length of the operator vector is greater than or equal to\
    \ the length of the operand vector, \n        # then the operator vector is a\
    \ vector of integers. \n        if (operatorLength > operandLength) \n       \
    \     # Use vectors to store the algebraic expression and the evaluation. \n \
    \           algebraExpression = zeros(Int, operandLength)\n            evaluationValue\
    \ = zeros(Int, operandLength)\n            \n            # Loop through the vectors\
    \ operand and operator and evaluate the algebraic expression \n            # and\
    \ store the value in a new vector called the evaluationValue. \n            for\
    \ i = 1:operandLength \n                # Get the position of the operator vector\
    \ in the algebraic expression vector. \n                operatorIndex = find(operator\
    \ == operatorSymbols[i])\n                \n                # If the operator\
    \ vector is a vector of basic algebraic operations, \n                # then add\
    \ or subtract the operand. \n                if (operatorIndex > -1) \n      \
    \              algebraExpression[i] = algebraExpression[i]\nusing Test\n\n@testset\
    \ begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"],\
    \ [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5])\
    \ == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp971j69bi.jl:1\nin expression starting at /tmp/tmp971j69bi.jl:1\n"
  stdout: ''
  timestamp: 1659977915
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    \"\"\"\n    Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n    the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n    expression and return the evaluation of this expression.\nusing Test\n\
    \n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"**\", \"*\"\
    , \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3,\
    \ 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpru714lwg.jl:1\nin expression starting at /tmp/tmpru714lwg.jl:1\n"
  stdout: ''
  timestamp: 1659977845
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    non_zero_ops = findnz(operator)\n    non_zero_ops\
    \ = sort(non_zero_ops, by=!iszero)\n    non_zero_ops = filter(non_zero_ops, x\
    \ -> x > 0)\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpba7nad7o.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpba7nad7o.jl:1\n\
    in expression starting at /tmp/tmpba7nad7o.jl:1\n"
  stdout: ''
  timestamp: 1659977915
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    # If the length of operator vector is equal\
    \ to the length of operand vector minus one.\n    if length(operator) == length(operand)\
    \ - 1 then\n        \n        # Iterate through the operand vector, \n       \
    \ # and perform the basic algebra operation for each value.\n        for n in\
    \ 1:length(operand)\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\
    \t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7,\
    \ 3, 4]) == 8)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"for\" at /tmp/tmpn8422cfe.jl:31\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpn8422cfe.jl:1\n\
    in expression starting at /tmp/tmpn8422cfe.jl:1\n"
  stdout: ''
  timestamp: 1659977915
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    #TODO: \nend\nusing Test\n\n@testset begin\n\
    \ncandidate = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4,\
    \ 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t\
    @test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmp6uaem29i.jl:30

    '
  stdout: "test set: Error During Test at /tmp/tmp6uaem29i.jl:33\n  Test threw exception\n\
    \  Expression: candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type Int64\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::Ptr) where T<:Integer at ~/.conda/envs/polyglot/share/julia/base/pointer.jl:23\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:7\n\
    \    ...\n  Stacktrace:\n   [1] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmp6uaem29i.jl:27\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp6uaem29i.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp6uaem29i.jl:32\ntest set:\
    \ Error During Test at /tmp/tmp6uaem29i.jl:34\n  Test threw exception\n  Expression:\
    \ candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\n  Closest candidates are:\n\
    \    convert(::Type{T}, !Matched::Ptr) where T<:Integer at ~/.conda/envs/polyglot/share/julia/base/pointer.jl:23\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:7\n\
    \    ...\n  Stacktrace:\n   [1] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmp6uaem29i.jl:27\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp6uaem29i.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n  "
  timestamp: 1659977918
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    if length(operator) == 1 \n        do_algebra(operator[1],\
    \ operand)\n    elseif length(operator) == 2 \n        do_algebra(operator[1],\
    \ operand) + do_algebra(operator[2], operand)\n    elseif length(operator) ==\
    \ 3 \n        do_algebra(operator[1], operand) + do_algebra(operator[2], operand)\
    \ - do_algebra(operator[3], operand)\n    elseif length(operator) == 4 \n    \
    \    do_algebra(operator[1], operand) + do_algebra(operator[2], operand) - do_algebra(operator[3],\
    \ operand)\n                                            + do_algebra(operator[4],\
    \ operand)\n    elseif length(operator) == 5 \n        do_algebra(operator[1],\
    \ operand) + do_algebra(operator[2], operand) - do_algebra(operator[3], operand)\n\
    \                                            + do_algebra(operator[4], operand)\
    \ - do_algebra(operator[5], operand)\n    elseif length(operator) == 6 \n    \
    \    do_algebra(operator[1], operand) + do_algebra(operator[2], operand) - do_algebra(operator[3],\
    \ operand)\n                                            + do_algebra(operator[4],\
    \ operand) - do_algebra(operator[5], operand)\n                              \
    \              + do_algebra(operator[6], operand)\n    elseif length(operator)\
    \ == 7 \n        do_algebra(operator[1], operand) + do_algebra(operator[2], operand)\
    \ - do_algebra(operator[3], operand)\n                                       \
    \     + do_algebra(operator[4], operand) - do_algebra(operator[5], operand)\n\
    \                                            + do_algebra(operator[6], operand)\
    \ - do_algebra(operator[7], operand)\n    elseif length(operator) == 8 \n    \
    \    do_algebra(operator[1], operand) + do_algebra(operator[2], operand) - do_algebra(operator[3],\
    \ operand)\n                                            + do_algebra(operator[4],\
    \ operand) - do_algebra(operator[5], operand)\n                              \
    \              + do_algebra(operator[6], operand) - do_algebra(operator[7], operand)\n\
    \                                            + do_algebra(operator[8], operand)\n\
    \    elseif length(operator) == 9 \n        do_algebra(operator[1], operand) +\
    \ do_algebra(operator[2], operand) - do_algebra(operator[3], operand)\n      \
    \                                      + do_algebra(operator[4], operand) - do_algebra(operator[5],\
    \ operand)\n                                            + do_algebra(operator[6],\
    \ operand) - do_algebra(operator[7], operand)\n                              \
    \              + do_algebra(operator[8], operand) - do_algebra(operator[9], operand)\n\
    \    elseif length(operator) == 10 \n        do_algebra(operator[1], operand)\
    \ + do_algebra(operator[2], operand) - do_algebra(operator[3], operand)\n    \
    \                                        + do_algebra(operator[4], operand) -\
    \ do_algebra(operator[5], operand)\n                                         \
    \   + do_algebra(operator[6], operand) - do_\nusing Test\n\n@testset begin\n\n\
    candidate = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5])\
    \ == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmph3w69oa6.jl:1\nin expression starting at /tmp/tmph3w69oa6.jl:1\n"
  stdout: ''
  timestamp: 1659977916
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    operator = operator[1:length(operator)]\n\
    \    operand = operand[1:length(operand)]\n    result = zeros(length(operator))\n\
    \    for i = 1:length(operator)\n        operator[i] = replace(operator[i], \"\
    -\", \"+\")\n        operator[i] = replace(operator[i], \"+\", \"*\")\n      \
    \  operator[i] = replace(operator[i], \"*\", \"/\") \n        operator[i] = replace(operator[i],\
    \ \"//\", \"**\")\n        result[i] = eval(Symbol(operator[i]))*operand[i]\n\
    \    end\n    return result\nend\n</cell>\n<text>\nLet's try it on a few example\
    \ and see if it works.\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\
    \t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7,\
    \ 3, 4]) == 8)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmq62ydiw.jl:38\nin expression starting at\
    \ /tmp/tmpmq62ydiw.jl:38\n"
  stdout: ''
  timestamp: 1659977916
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    \"\"\"\n    Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n    the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n    expression and return the evaluation of this expression.\nusing Test\n\
    \n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"**\", \"*\"\
    , \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3,\
    \ 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpru714lwg.jl:1\nin expression starting at /tmp/tmpru714lwg.jl:1\n"
  stdout: ''
  timestamp: 1659977845
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    \"\"\" \n    Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n    the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n    expression and return the evaluation of this expression.\nusing Test\n\
    \n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"**\", \"*\"\
    , \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3,\
    \ 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2x7rtocp.jl:1\nin expression starting at /tmp/tmp2x7rtocp.jl:1\n"
  stdout: ''
  timestamp: 1659977916
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    \n    size = length(operand)\n    \n  \
    \  if size == 0\n        return NaN\n    end\nusing Test\n\n@testset begin\n\n\
    candidate = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5])\
    \ == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmptyz1zu3u.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmptyz1zu3u.jl:1\n\
    in expression starting at /tmp/tmptyz1zu3u.jl:1\n"
  stdout: ''
  timestamp: 1659977916
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    \n    # Vectorize and evaluate algebraic\
    \ expression.\n    algebric_expression = Vectorize(operator)(operand)\nusing Test\n\
    \n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"**\", \"*\"\
    , \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3,\
    \ 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp_bwgikif.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp_bwgikif.jl:1\n\
    in expression starting at /tmp/tmp_bwgikif.jl:1\n"
  stdout: ''
  timestamp: 1659977916
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    alg_exp = parse(operator, operand)\n  \
    \  result = eval_fn(alg_exp)\n    return result\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4,\
    \ 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t\
    @test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpz1h9nfyg.jl:32

    '
  stdout: "test set: Error During Test at /tmp/tmpz1h9nfyg.jl:35\n  Test threw exception\n\
    \  Expression: candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37\n  MethodError:\
    \ no method matching parse(::Vector{String}, ::Vector{Int64})\n  Stacktrace:\n\
    \   [1] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n     @ Main\
    \ /tmp/tmpz1h9nfyg.jl:26\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpz1h9nfyg.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpz1h9nfyg.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpz1h9nfyg.jl:36\n  Test threw exception\n  Expression:\
    \ candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n  MethodError: no method\
    \ matching parse(::Vector{String}, ::Vector{Int64})\n  Stacktrace:\n   [1] do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})\n     @ Main /tmp/tmpz1h9nfyg.jl:26\n   [2] macro expansion\n\
    \     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpz1h9nfyg.jl:36 [inlined]\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpz1h9nfyg.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpz1h9nfyg.jl:37\n  Test threw exception\n  Expression:\
    \ candidate([\"//\", \"*\"], [7, 3, 4]) == 8\n  MethodError: no method matching\
    \ parse(::Vector{String}, ::Vector{Int64})\n  Stacktrace:\n   [1] do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})\n     @ Main /tmp/tmpz1h9nfyg.jl:26\n   [2] macro expansion\n\
    \     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpz1h9nfyg.jl:37 [inlined]\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpz1h9nfyg.jl:34\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  timestamp: 1659977918
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    sum_result = 0\n    for i = 1:length(operator)\n\
    \        sum_result = sum_result + (eval(string(operator[i])) * eval(string(operand[i])))\
    \ \n    end\n    return sum_result\nend\n\"\"\"\n    Given a vector of strings\
    \ representing a basic algebra operator, and a vector of integers \n    representing\
    \ the corresponding operand. Using that vector of strings, call the do_algebra\
    \ \n    function, and return the evaluation of this expression.\n\"\"\"\nusing\
    \ Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"**\"\
    , \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"\
    ], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nusing Test\n\
    \nStacktrace:\n [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level\
    \ scope\n   @ /tmp/tmpmi9m225b.jl:32\nin expression starting at /tmp/tmpmi9m225b.jl:32\n"
  stdout: ''
  timestamp: 1659977917
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    local count = 0\n    for operator1 in operator\n\
    \        count = count + length(operator1)\n    end\nusing Test\n\n@testset begin\n\
    \ncandidate = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4,\
    \ 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t\
    @test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp9v9b_isu.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp9v9b_isu.jl:1\n\
    in expression starting at /tmp/tmp9v9b_isu.jl:1\n"
  stdout: ''
  timestamp: 1659977917
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    \"\"\"\n    Given a operator and a operand,\
    \ evaluate the algebric expression of two vectors \n    operator, and operand.\
    \ Use the two given vectors to build the algebric expression and \n    return\
    \ the evaluation of this expression.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\
    \t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmph531qtb3.jl:1\nin expression starting at /tmp/tmph531qtb3.jl:1\n"
  stdout: ''
  timestamp: 1659977917
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    length = length(operator)\n    if length\
    \ == length(operand)\n        vector = operand # this vector is the second operand\n\
    \        for i = 1:length(operator)-1\n            vector = operator[i](vector,\
    \ operand[i])\n        end\n        return vector[1]\n    else\n        throw(DimensionMismatch(\"\
    Invalid operator/operand length\", length(operator), length(operand)))\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmp9bk6zp_k.jl:39

    '
  stdout: "test set: Error During Test at /tmp/tmp9bk6zp_k.jl:42\n  Test threw exception\n\
    \  Expression: candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37\n  UndefVarError:\
    \ length not defined\n  Stacktrace:\n   [1] do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})\n     @ Main /tmp/tmp9bk6zp_k.jl:26\n   [2] macro expansion\n\
    \     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmp9bk6zp_k.jl:42 [inlined]\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp9bk6zp_k.jl:41\ntest set:\
    \ Error During Test at /tmp/tmp9bk6zp_k.jl:43\n  Test threw exception\n  Expression:\
    \ candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n  UndefVarError: length\
    \ not defined\n  Stacktrace:\n   [1] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmp9bk6zp_k.jl:26\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp9bk6zp_k.jl:43 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp9bk6zp_k.jl:41\ntest set:\
    \ Error During Test at /tmp/tmp9bk6zp_k.jl:44\n  Test threw exception\n  Expression:\
    \ candidate([\"//\", \"*\"], [7, 3, 4]) == 8\n  UndefVarError: length not defined\n\
    \  Stacktrace:\n   [1] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmp9bk6zp_k.jl:26\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp9bk6zp_k.jl:44 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp9bk6zp_k.jl:41\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  timestamp: 1659977918
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    # Get the number of operators and operands.\
    \ \n    n = length(operator)\n    m = length(operand)\n    # If the number of\
    \ operators is zero or one, return 0.\n    if n == 0\n        return 0\n    else\
    \ if m == 1\n        return operand[1]\n    elseif n < m\n        # If there are\
    \ fewer operators, return -1. \n        return -1\n    elseif n == m\n       \
    \ # If there are the same number of operators and operands, return the first operand.\
    \ \n        return operand[1]\n    end\nusing Test\n\n@testset begin\n\ncandidate\
    \ = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\
    \t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppmn51nrq.jl:32\nin expression starting at\
    \ /tmp/tmppmn51nrq.jl:32\n"
  stdout: ''
  timestamp: 1659977917
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    index_of_operator = findfirst(op => op\
    \ == operator)\n    index_of_operand = findfirst(op => op == operand)\n    if\
    \ index_of_operator == -1 && index_of_operand == -1\n        error(\"Could not\
    \ find an operator in vector: \\(operator)\")\n    elseif index_of_operator ==\
    \ -1 \n        error(\"Could not find an operand in vector: \\(operand)\")\n \
    \   elseif index_of_operand == -1\n        error(\"Could not find an operator\
    \ in vector: \\(operator)\")\n    else\n        vector = Vector(operator[1:end-1],\
    \ operand[1:end-2])\n        operation = operator[index_of_operator]\n       \
    \ operand = operand[index_of_operand]\n        eval(operation, vector, operand)\n\
    \    end\nend\n</cell>\n<code language=julia-1.6>\n@test do_algebra([\"+\", \"\
    *\", \"-\", \"//\", \"**\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == 9\n</cell>\n\
    <text>\nExercises\nExercise 1\nIn the following exercise we redo the previous\
    \ exercise of finding the index of a specific element in a vector.\nusing Test\n\
    \n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"**\", \"*\"\
    , \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3,\
    \ 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpnwwi2ktx.jl:29\nin expression starting at /tmp/tmpnwwi2ktx.jl:29\n"
  stdout: ''
  timestamp: 1659977917
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    if length(operator) == 0 \n        throw(ArgumentError(\"\
    Invalid operator vector\"))\n    end\nusing Test\n\n@testset begin\n\ncandidate\
    \ = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\
    \t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp6tbskup2.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp6tbskup2.jl:1\n\
    in expression starting at /tmp/tmp6tbskup2.jl:1\n"
  stdout: ''
  timestamp: 1659977917
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    result = 0.\n    for i in 1:length(operator)\n\
    \        if operator[i] != \"\"\n            result += (operand[i-1] * operand[i])\n\
    \        end\n    end\n    return result\nend\n</cell>\n<code language=julia-0.6>\n\
    do_algebra([\"+\", \"*\"], vec(2))\n</cell>\n<code language=julia-0.6>\ndo_algebra([\"\
    +\", \"-\", \"*\"], vec(2))\n</cell>\n<code language=julia-0.6>\ndo_algebra([\"\
    *\", \"+\", \"*\"], vec(2))\n</cell>\n<code language=julia-0.6>\ndo_algebra([\"\
    /\", \"*\", \"*\"], vec(2))\n</cell>\n<code language=julia-0.6>\ndo_algebra([\"\
    +\", \"+\"], vec(2))\n</cell>\n<code language=julia-0.6>\ndo_algebra([\"+\", \"\
    +\", \"+\"], vec(2))\n</cell>\n<code language=julia-0.6>\ndo_algebra([\"+\", \"\
    +\", \"+\", \"+\"], vec(2))\n</cell>\n<code language=julia-0.6>\ndo_algebra([\"\
    +\", \"+\", \"+\", \"+\", \"+\"], vec(2))\n</cell>\n<code language=julia-0.6>\n\
    do_algebra([\"+\", \"+\", \"+\", \"+\", \"+\", \"+\"], vec(2))\n</cell>\n<code\
    \ language=julia-0.6>\ndo_algebra([\"+\", \"+\", \"+\", \"+\", \"+\", \"+\", \"\
    +\"], vec(2))\n</cell>\n<code language=julia-0.6>\ndo_algebra([\"+\", \"+\", \"\
    +\", \"+\", \"+\", \"+\", \"+\", \"+\"], vec(2))\n</cell>\n<code language=julia-0.6>\n\
    do_algebra([\"+\", \"+\", \"+\", \"+\", \"+\", \"+\", \"+\", \"+\"], vec(2))\n\
    </cell>\n<code language=julia-0.6>\ndo_algebra([\"+\", \"+\", \"+\", \"+\", \"\
    +\", \"+\", \"+\", \"+\"], vec(2))\n</cell>\n<code language=julia-0.6>\ndo_algebra([\"\
    +\", \"+\", \"+\", \"+\", \"+\", \"+\", \"+\", \"+\", \"+\"], vec(2))\n</cell>\n\
    <code language=julia-0.6>\ndo_algebra([\"+\", \"+\", \"+\", \"+\", \"+\", \"+\"\
    , \"+\", \"+\", \"+\"], vec(2))\n</cell>\n<code language=julia-0.6>\ndo_algebra([\"\
    +\", \"+\", \"+\", \"+\", \"+\", \"+\", \"+\", \"+\", \"+\"], vec(2))\n</cell>\n\
    <code language=julia-0.6>\ndo_algebra([\"+\", \"+\", \"+\", \"+\", \"+\", \"+\"\
    , \"+\", \"+\", \"+\", \"\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\
    \t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7,\
    \ 3, 4]) == 8)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5zigojoo.jl:34\nin expression starting at\
    \ /tmp/tmp5zigojoo.jl:34\n"
  stdout: ''
  timestamp: 1659977917
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    #Check length of the operator vector\n\
    \    length = length(operator)\n    if length != length(operand)-1\n        throw(DimensionMismatch(\"\
    Invalid length of operator and operand, please make sure that the length of operator\
    \ vector is the same as the length of operand vector minus one\"))\n    end\n\
    using Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpgj53gm0b.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpgj53gm0b.jl:1\n\
    in expression starting at /tmp/tmpgj53gm0b.jl:1\n"
  stdout: ''
  timestamp: 1659977917
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    \n    # Initialization\n    \n    # Check\n\
    \    if length(operator) != length(operand)\n        throw(ArgumentError(\"operator,\
    \ operand vectors must have the same length\"))\n    end\nusing Test\n\n@testset\
    \ begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"],\
    \ [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5])\
    \ == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp7wugl3k7.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp7wugl3k7.jl:1\n\
    in expression starting at /tmp/tmp7wugl3k7.jl:1\n"
  stdout: ''
  timestamp: 1659977917
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    # initialize variable and result variables\n\
    \    result = zeros(size(operand)[1], 1)\n    operand_size = size(operand)[1]\n\
    \    operator_size = length(operator)\n    \n    # check if operator and operand\
    \ have same size\n    if operand_size != operator_size\n        error(\"Inconsistent\
    \ size of operands and operators\")\n    end\nusing Test\n\n@testset begin\n\n\
    candidate = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5])\
    \ == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpsrhsqwa4.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpsrhsqwa4.jl:1\n\
    in expression starting at /tmp/tmpsrhsqwa4.jl:1\n"
  stdout: ''
  timestamp: 1659977917
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    \"\"\"Perform the evaluation of the algebraic\
    \ expression.\"\"\"\n    \n    length = length(operator) - 1 \n    if length ==\
    \ 0 \n        result = operand \n    else \n        result = eval(__do__(operator,\
    \ operand))\n    end \n    return result \nend \nusing Test\n\n@testset begin\n\
    \ncandidate = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4,\
    \ 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t\
    @test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpv52erf0p.jl:38

    '
  stdout: "test set: Error During Test at /tmp/tmpv52erf0p.jl:41\n  Test threw exception\n\
    \  Expression: candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37\n  UndefVarError:\
    \ length not defined\n  Stacktrace:\n   [1] do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})\n     @ Main /tmp/tmpv52erf0p.jl:28\n   [2] macro expansion\n\
    \     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpv52erf0p.jl:41 [inlined]\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpv52erf0p.jl:40\ntest set:\
    \ Error During Test at /tmp/tmpv52erf0p.jl:42\n  Test threw exception\n  Expression:\
    \ candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n  UndefVarError: length\
    \ not defined\n  Stacktrace:\n   [1] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmpv52erf0p.jl:28\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpv52erf0p.jl:42 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpv52erf0p.jl:40\ntest set:\
    \ Error During Test at /tmp/tmpv52erf0p.jl:43\n  Test threw exception\n  Expression:\
    \ candidate([\"//\", \"*\"], [7, 3, 4]) == 8\n  UndefVarError: length not defined\n\
    \  Stacktrace:\n   [1] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmpv52erf0p.jl:28\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpv52erf0p.jl:43 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpv52erf0p.jl:40\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  timestamp: 1659977919
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    algebric_expression = zeros(Int, length(operator))\n\
    \    i = 0\n    while(i < length(operator))\n        algebric_expression[i] =\
    \ eval(string(operator[i]) ' ' string(operand[i]))\n        i = i + 1\n    end\n\
    \    return algebric_expression[1]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\
    \t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5djoji36.jl:29\nin expression starting at\
    \ /tmp/tmp5djoji36.jl:29\n"
  stdout: ''
  timestamp: 1659977917
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    \n    noperator = length(operator)\n  \
    \  noperand = length(operand)\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\
    \t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7,\
    \ 3, 4]) == 8)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp1kjc6wc8.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp1kjc6wc8.jl:1\n\
    in expression starting at /tmp/tmp1kjc6wc8.jl:1\n"
  stdout: ''
  timestamp: 1659977918
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    return dot(operand, eval(operator))\nend\n\
    using Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpt4stps56.jl:30

    '
  stdout: "test set: Error During Test at /tmp/tmpt4stps56.jl:33\n  Test threw exception\n\
    \  Expression: candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37\n  UndefVarError:\
    \ dot not defined\n  Stacktrace:\n   [1] do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})\n     @ Main /tmp/tmpt4stps56.jl:26\n   [2] macro expansion\n\
    \     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpt4stps56.jl:33 [inlined]\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpt4stps56.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpt4stps56.jl:34\n  Test threw exception\n  Expression:\
    \ candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n  UndefVarError: dot not\
    \ defined\n  Stacktrace:\n   [1] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmpt4stps56.jl:26\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpt4stps56.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpt4stps56.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpt4stps56.jl:35\n  Test threw exception\n  Expression:\
    \ candidate([\"//\", \"*\"], [7, 3, 4]) == 8\n  UndefVarError: dot not defined\n\
    \  Stacktrace:\n   [1] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmpt4stps56.jl:26\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpt4stps56.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpt4stps56.jl:32\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  timestamp: 1659977919
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    # Check that operator vector is non-empty\n\
    \    assert(length(operator) != 0)\n    # Check that operand vector is non-empty\n\
    \    assert(length(operand) >= 2)\n    # Check that operator vector has at least\
    \ one operator\n    assert(length(operator) >= 1)\n    # Check that operand vector\
    \ has at least two operands\n    assert(length(operand) == length(operator) -\
    \ 1)\n    # Check that operand vector is non-negative\n    for el in operand\n\
    \        assert(el >= 0)\n    end\n    # Check that there is one operand for the\
    \ first operator\n    if length(operator) == 1\n        assert(length(operand)\
    \ == 1)\n    else\n        assert(length(operand) == 2)\n    end\n    # Check\
    \ that first operator operator has a valid symbol\n    valid_symbols = [\"+\"\
    , \"-\", \"*\", \"//\", \"**\"]\n    assert(contains(valid_symbols, operator[1]))\n\
    \    # Check that second operator operator has a valid symbol\n    assert(contains(valid_symbols,\
    \ operator[2]))\n    # Check that first operand is non-negative\n    assert(length(operand)\
    \ == 1)\n    # Check that second operand is non-negative\n    assert(length(operand)\
    \ == 2)\n    # Check that first operator symbol has valid value\n    valid_values\
    \ = [\"-\", \"+\", \"*\", \"//\", \"**\"]\n    assert(contains(valid_values, operator[1]))\n\
    \    # Check that second operator symbol has valid value\n    assert(contains(valid_values,\
    \ operator[2]))\n    # Check that first operand is greater than 0\n    assert(operand[1]\
    \ >= 0)\n    # Check that second operand is greater than 0\n    assert(operand[2]\
    \ >= 0)\n    # Return an evaluated expression\n    return eval(string(operator[1])\
    \ + string(operator[2]) + string(operand[1]) + string(operand[2]))\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"**\"\
    , \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"\
    ], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmp83jov2yd.jl:67

    '
  stdout: "test set: Error During Test at /tmp/tmp83jov2yd.jl:70\n  Test threw exception\n\
    \  Expression: candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37\n  UndefVarError:\
    \ assert not defined\n  Stacktrace:\n   [1] do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})\n     @ Main /tmp/tmp83jov2yd.jl:27\n   [2] macro expansion\n\
    \     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmp83jov2yd.jl:70 [inlined]\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp83jov2yd.jl:69\ntest set:\
    \ Error During Test at /tmp/tmp83jov2yd.jl:71\n  Test threw exception\n  Expression:\
    \ candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n  UndefVarError: assert\
    \ not defined\n  Stacktrace:\n   [1] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmp83jov2yd.jl:27\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp83jov2yd.jl:71 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp83jov2yd.jl:69\ntest set:\
    \ Error During Test at /tmp/tmp83jov2yd.jl:72\n  Test threw exception\n  Expression:\
    \ candidate([\"//\", \"*\"], [7, 3, 4]) == 8\n  UndefVarError: assert not defined\n\
    \  Stacktrace:\n   [1] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmp83jov2yd.jl:27\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp83jov2yd.jl:72 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp83jov2yd.jl:69\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  timestamp: 1659977919
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    res = 0 \n    for operator in operator\
    \ \n        res = res + operand[operand.indexof(operator)]\n    end\n    return\
    \ res \nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpncja97g4.jl:34

    '
  stdout: "test set: Error During Test at /tmp/tmpncja97g4.jl:37\n  Test threw exception\n\
    \  Expression: candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37\n  type Array\
    \ has no field indexof\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42\
    \ [inlined]\n   [2] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmpncja97g4.jl:28\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpncja97g4.jl:37 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpncja97g4.jl:36\ntest set:\
    \ Error During Test at /tmp/tmpncja97g4.jl:38\n  Test threw exception\n  Expression:\
    \ candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n  type Array has no field\
    \ indexof\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n\
    \   [2] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n     @ Main\
    \ /tmp/tmpncja97g4.jl:28\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpncja97g4.jl:38 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpncja97g4.jl:36\ntest set:\
    \ Error During Test at /tmp/tmpncja97g4.jl:39\n  Test threw exception\n  Expression:\
    \ candidate([\"//\", \"*\"], [7, 3, 4]) == 8\n  type Array has no field indexof\n\
    \  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})\n     @ Main /tmp/tmpncja97g4.jl:28\n   [3] macro expansion\n\
    \     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [4] macro expansion\n     @ /tmp/tmpncja97g4.jl:39 [inlined]\n   [5] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpncja97g4.jl:36\nTest Summary:\
    \ | Error  Total\ntest set      "
  timestamp: 1659977920
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    if length(operator)==1 || length(operand)==0\n\
    \        # do nothing\n    elseif length(operator)==1 && length(operand)==1\n\
    \        operand = operand[1]\n    elseif length(operator)==2 && length(operand)==2\n\
    \        operand = operand[1] * operand[2]\n    elseif length(operator)==2 &&\
    \ length(operand)==1\n        operand = operand[1]\n    end\n    # get the first\
    \ operator and get the corresponding operand\n    operator = operator[1]\n   \
    \ operand = operand[1]\n    \n    # do calculations\n    if operator == '+' ||\
    \ operator == '-'\n        \n        if isa(operand, Int64)\n            result\
    \ = operand + operand\n        elseif isa(operand, Int)\n            result =\
    \ operand + operand\n        end\n        \n    elseif operator == '*'\n     \
    \   \n        if isa(operand, Int64)\n            result = operand * operand\n\
    \        elseif isa(operand, Int)\n            result = operand * operand\n  \
    \      end\n        \n    elseif operator == '/'\n        \n        if isa(operand,\
    \ Int64)\n            result = operand // operand\n        elseif isa(operand,\
    \ Int)\n            result = operand // operand\n        end\n        \n    elseif\
    \ operator == '%'\n        \n        if isa(operand, Int64)\n            result\
    \ = operand % operand\n        elseif isa(operand, Int)\n            result =\
    \ operand % operand\n        end\n        \n    elseif operator == '^'\n     \
    \   \n        if isa(operand, Int64)\n            result = operand ^ operand\n\
    \        elseif isa(operand, Int)\n            result = operand ^ operand\n  \
    \      end\n        \n    elseif operator == '&'\n        \n        if isa(operand,\
    \ Int64)\n            result = operand & operand\n        elseif isa(operand,\
    \ Int)\n            result = operand & operand\n        end\n        \n    elseif\
    \ operator == '|'\n        \n        if isa(operand, Int64)\n            result\
    \ = operand | operand\n        elseif isa(operand, Int)\n            result =\
    \ operand | operand\n        end\n        \n    elseif operator == '=='\n    \
    \    \n        if isa(operand, Int64)\n            result = operand == operand\n\
    \        elseif isa(operand, Int)\n            result = operand == operand\n \
    \       end\n        \n    elseif operator == '!'\n        \n        if isa(operand,\
    \ Int64)\n            result = operand != operand\n        elseif isa(operand,\
    \ Int)\n            result = operand != operand\n        end\n        \n    elseif\
    \ operator == '='\n        \n        if isa(operand, Int64)\n            result\
    \ = operand == operand\n        elseif isa(operand, Int)\n            result =\
    \ operand == operand\n        end\n        \n    elseif operator == '<'\n    \
    \    \n        if is\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\
    \t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7,\
    \ 3, 4]) == 8)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: character literal contains multiple characters\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmpnw76u9dm.jl:96\nin expression\
    \ starting at /tmp/tmpnw76u9dm.jl:96\n"
  stdout: ''
  timestamp: 1659977918
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    if length(operator) == length(operand)\n\
    \        return sum(operand)\n    else\n        error(\"Operand length must be\
    \ equal to operator length\")\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5])\
    \ == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpd9tazfdn.jl:34

    '
  stdout: "test set: Error During Test at /tmp/tmpd9tazfdn.jl:37\n  Test threw exception\n\
    \  Expression: candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37\n  Operand\
    \ length must be equal to operator length\n  Stacktrace:\n   [1] error(s::String)\n\
    \     @ Base ./error.jl:33\n   [2] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmpd9tazfdn.jl:29\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpd9tazfdn.jl:37 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpd9tazfdn.jl:36\ntest set:\
    \ Error During Test at /tmp/tmpd9tazfdn.jl:38\n  Test threw exception\n  Expression:\
    \ candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n  Operand length must be\
    \ equal to operator length\n  Stacktrace:\n   [1] error(s::String)\n     @ Base\
    \ ./error.jl:33\n   [2] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmpd9tazfdn.jl:29\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpd9tazfdn.jl:38 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpd9tazfdn.jl:36\ntest set:\
    \ Error During Test at /tmp/tmpd9tazfdn.jl:39\n  Test threw exception\n  Expression:\
    \ candidate([\"//\", \"*\"], [7, 3, 4]) == 8\n  Operand length must be equal to\
    \ operator length\n  Stacktrace:\n   [1] error(s::String)\n     @ Base ./error.jl:33\n\
    \   [2] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n     @ Main\
    \ /tmp/tmpd9tazfdn.jl:29\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpd9tazfdn.jl:39 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpd9tazfd"
  timestamp: 1659977920
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    #@assert length(operator) == length(operand)\
    \ - 1\n    \n    result =0\n    for i=1:length(operator)\n        operator = operators[i]\n\
    \        operand = operands[i]\n        switch operator\n            case '+'\
    \ => result = result + operand\n            case '-' => result = result - operand\n\
    \            case '*' => result = result * operand\n            case '/' => result\
    \ = result // operand\n            case '**' => result = result ** operand\n \
    \           end \n    end\n    return result\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4,\
    \ 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t\
    @test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmpzquwwc9z.jl:29 expected \"\
    end\", got \"operator\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpzquwwc9z.jl:32\n\
    in expression starting at /tmp/tmpzquwwc9z.jl:32\n"
  stdout: ''
  timestamp: 1659977918
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    \"\"\"\n    Given two vectors operator,\
    \ and operand. The first vector has basic algebra operations, and \n    the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n    expression and return the evaluation of this expression.\nusing Test\n\
    \n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"**\", \"*\"\
    , \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3,\
    \ 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpru714lwg.jl:1\nin expression starting at /tmp/tmpru714lwg.jl:1\n"
  stdout: ''
  timestamp: 1659977845
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n  \n    if length(operator) == 1 \n       \
    \ return operand[end]\n    elseif length(operator) == length(operand) - 1 \n \
    \       \n        # Build the algebra expression\n        # To add two vectors\
    \ we use the + operator\n        # To subtract two vectors we use the - operator\n\
    \        # To multiply two vectors we use the * operator\n        # To divide\
    \ two vectors we use the / operator\n        # To divide a vector by a scalar\
    \ we use the // operator\n        # To raise a number to a power, we use the ^\
    \ operator\n        # To evaluate an expression with some values we use the $()\
    \ operator\n        \n        if isa(operator[1], Symbol) && isa(operand[1], Symbol)\
    \ \n            \n            # To add vectors we use the + operator\n       \
    \     if isa(operator, Symbol) && isa(operand, Vector{Symbol}) \n            \
    \    expression = Symbol(operator + \"(\" + join(eval(Symbol(string(operand)))\
    \ for operand in operand) + \")\")\n                \n            # To subtract\
    \ vectors we use the - operator\n            elseif isa(operator, Symbol) && isa(operand,\
    \ Vector{Symbol}) \n                expression = Symbol(operator + \"(\" + join(eval(Symbol(string(operand)))\
    \ for operand in operand) + \")\")\n                \n            # To multiply\
    \ vectors we use the * operator\n            elseif isa(operator, Symbol) && isa(operand,\
    \ Vector{Symbol}) \n                expression = Symbol(operator + \"(\" + join(eval(Symbol(string(operand)))\
    \ for operand in operand) + \")\")\n                \n            # To divide\
    \ vectors we use the / operator\n            elseif isa(operator, Symbol) && isa(operand,\
    \ Vector{Symbol}) \n                expression = Symbol(operator + \"(\" + join(eval(Symbol(string(operand)))\
    \ for operand in operand) + \")\")\n                \n            # To raise a\
    \ number to a power, we use the ^ operator\n            elseif isa(operator, Symbol)\
    \ && isa(operand, Vector{Int64}) \n                expression = Symbol(operator\
    \ + \"(\" + join(eval(Symbol(string(operand))) for operand in operand) + \")\"\
    )\n                \n            # To evaluate an expression with some values\
    \ we use the $() operator\n            elseif isa(operator, Symbol) && isa(operand,\
    \ Vector{Symbol}) \n                expression = Symbol(operator + \"(\" + join(eval(Symbol(string(operand)))\
    \ for operand in operand) + \")\")\n                \n            # To evaluate\
    \ an expression with some values we use the $() operator\n            elseif isa(operator,\
    \ Symbol) && isa(operand, Vector{Symbol}) \n                expression = Symbol(operator\
    \ + \"(\" + join(eval(Symbol(\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\
    \t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7,\
    \ 3, 4]) == 8)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpu5dul2o6.jl:71\nin expression starting at\
    \ /tmp/tmpu5dul2o6.jl:71\n"
  stdout: ''
  timestamp: 1659977918
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    alg = zeros(Int, (length(operator)-1))\n\
    \    for i in 1:length(operator)-1\n        alg[i] = eval(quote(mv[eval(quote($operator[i])),\
    \ eval(quote($operand[i]))]))\n    end\n    return alg[2]\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"\
    +\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4,\
    \ 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"quote\" at /tmp/tmputah3dnt.jl:28 expected\
    \ \"end\", got \")\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmputah3dnt.jl:28\n\
    in expression starting at /tmp/tmputah3dnt.jl:28\n"
  stdout: ''
  timestamp: 1659977918
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    \n    # Vectorize: \n    # To vectorize\
    \ a vector, we use an iterator, which allows us to iterate through elements of\
    \ a vector \n    # in a non-sequential order. We use iterators to allow us to\
    \ make our code more readable. The \n    # function zip takes in iterators of\
    \ two vectors, and returns an iterator of tuples. In our case,\n    # the first\
    \ vector has operators as the first element, and the second vector has operands\
    \ as the first \n    # element. These tuples allow us to loop through both vectors\
    \ at the same time. \nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\
    \t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7,\
    \ 3, 4]) == 8)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpul8q5v68.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpul8q5v68.jl:1\n\
    in expression starting at /tmp/tmpul8q5v68.jl:1\n"
  stdout: ''
  timestamp: 1659977919
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    return do_algebra(operator, operand, Int64)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpl7ftuvp9.jl:30

    '
  stdout: "test set: Error During Test at /tmp/tmpl7ftuvp9.jl:33\n  Test threw exception\n\
    \  Expression: candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37\n  MethodError:\
    \ no method matching do_algebra(::Vector{String}, ::Vector{Int64}, ::Type{Int64})\n\
    \  Closest candidates are:\n    do_algebra(::Vector{String}, ::Vector{Int64})\
    \ at /tmp/tmpl7ftuvp9.jl:25\n  Stacktrace:\n   [1] do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})\n     @ Main /tmp/tmpl7ftuvp9.jl:26\n   [2] macro expansion\n\
    \     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpl7ftuvp9.jl:33 [inlined]\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpl7ftuvp9.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpl7ftuvp9.jl:34\n  Test threw exception\n  Expression:\
    \ candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n  MethodError: no method\
    \ matching do_algebra(::Vector{String}, ::Vector{Int64}, ::Type{Int64})\n  Closest\
    \ candidates are:\n    do_algebra(::Vector{String}, ::Vector{Int64}) at /tmp/tmpl7ftuvp9.jl:25\n\
    \  Stacktrace:\n   [1] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmpl7ftuvp9.jl:26\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpl7ftuvp9.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpl7ftuvp9.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpl7ftuvp9.jl:35\n  Test threw exception\n  Expression:\
    \ candidate([\"//\", \"*\"], [7, 3, 4]) == 8\n  MethodError: no method matching\
    \ do_algebra(::Vector{String}, ::Vector{Int64}, ::Type{Int64})\n  Closest candidates\
    \ are:\n    do_algebra(::Vector{String}, ::Vector{Int64}) at /tmp/tmpl7ftuvp9.jl:25\n\
    \  Stacktrace:\n   [1] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmpl7ftuvp9.jl:26\n   [2] macro expansion\n     @ ~/.c"
  timestamp: 1659977920
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    result = operand[1]\n    for i = 2:length(operator)\n\
    \        result = operator[i] * result + operand[i]\n    end\n    return result\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\
    \t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2ob9a_gz.jl:32\nin expression starting at\
    \ /tmp/tmp2ob9a_gz.jl:32\n"
  stdout: ''
  timestamp: 1659977918
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n  \n    if length( operator) != length(operand)\
    \ \n        raise ArgumentError(\"Operand and Operator should have same length\"\
    )\n    end\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"ArgumentError\"\nStacktrace:\n [1]\
    \ top-level scope\n   @ /tmp/tmpfds38el8.jl:28\nin expression starting at /tmp/tmpfds38el8.jl:28\n"
  stdout: ''
  timestamp: 1659977918
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    \n    # Checks the length of operator and\
    \ operand vector \n    if length(operator) != length(operand) - 1 \n        error(\"\
    Vector of basic algebra operation must have one operator and one operand.\") \n\
    \    end\n    \n    # Checks the length of operand vector \n    if length(operand)\
    \ == 0 \n        return 0 \n    end\n    \n    # Checks the length of operator\
    \ vector \n    if length(operator) == 0 \n        return 0 \n    end\n    \n \
    \   # Calculates the value of the basic algebra expression\n    \n    # Initializes\
    \ the value of the basic algebra expression\n    value = zeros(Int64, length(operator))\n\
    \    \n    # Looping through the basic algebra operation vector \n    for i =\
    \ 1:length(operator) \n        \n        # Calculates the value of the basic algebra\
    \ operation\n        value = value + (operator[i] <=> operand[i])\n        \n\
    \        # Prints a message to the user \n        @info \"The value of operator[\"\
    \ \n        show(i) \n        @info \"] is \" \n        show(value) \n       \
    \ @info \". \" \n    end\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\
    \t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7,\
    \ 3, 4]) == 8)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \">\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpby1abio8.jl:51\nin expression starting at\
    \ /tmp/tmpby1abio8.jl:51\n"
  stdout: ''
  timestamp: 1659977919
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n  \n    op_len = length(operator)\n    ov_len\
    \ = length(operand)\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\
    \t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7,\
    \ 3, 4]) == 8)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpduk92sky.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpduk92sky.jl:1\n\
    in expression starting at /tmp/tmpduk92sky.jl:1\n"
  stdout: ''
  timestamp: 1659977919
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    \"\"\" Given two vectors operator, and\
    \ operand. The first vector has basic algebra operations, and \n    the second\
    \ vector is a vector of integers. Use the two given vectors to build the algebric\
    \ \n    expression and return the evaluation of this expression.\nusing Test\n\
    \n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"**\", \"*\"\
    , \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3,\
    \ 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp92b5yd_8.jl:1\nin expression starting at /tmp/tmp92b5yd_8.jl:1\n"
  stdout: ''
  timestamp: 1659977919
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    #Initialise the result variable\n    result\
    \ = Int64(0)\n    #Check that the number of operands matches the number of operators\n\
    \    if(length(operand) != length(operator))\n        return \"Error! Operand\
    \ vector length does not match operator vector\"\n    else\n        #Loop through\
    \ the operator vector\n        for op = 1:length(operator)\n            #Check\
    \ the type of the operator and that it is in the operator list\n            if(operator\
    \ == \"+\" || operator == \"-\" || operator == \"*\" || operator == \"//\" ||\
    \ operator == \"**\")\n                #Add the operand to the result variable\n\
    \                result += operand[op]\n            else\n                #Return\
    \ the error if the operator is not valid\n                return \"Error! Invalid\
    \ operator type\"\n            end\n        end\n    end\n    return result\n\
    end\n</cell>\n<code language=julia-1.6>\n\"\"\"\n    Given an operator and an\
    \ operand, return the result of evaluating the expression \n    on the given vector.\n\
    using Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpv7ef6hb6.jl:46\nin expression starting at\
    \ /tmp/tmpv7ef6hb6.jl:46\n"
  stdout: ''
  timestamp: 1659977919
- exit_code: 1
  program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    # First check whether the length of the\
    \ two vectors are equal\n    if length(operator) != length(operand) - 1 \n   \
    \     throw(ArgumentError(\"Operand and operator vectors are not of equal length\"\
    ))\n    end\n    \n    # Initialize a variable for the result and initialize a\
    \ variable for the exponent\n    result = 0\n    exponent = 0\nusing Test\n\n\
    @testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"\
    +\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4,\
    \ 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpcfrnbm37.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpcfrnbm37.jl:1\n\
    in expression starting at /tmp/tmpcfrnbm37.jl:1\n"
  stdout: ''
  timestamp: 1659977919
