name: HumanEval_19_sort_numbers
language: jl
prompt: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
  \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
  \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to\
  \ largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\n  \
  \  \"\"\"\nfunction sort_numbers(numbers::String)::String \n"
tests: "using Test\n\n@testset begin\n\ncandidate = sort_numbers;\n\t@test(candidate(\"\
  \") == \"\")\n\t@test(candidate(\"three\") == \"three\")\n\t@test(candidate(\"three\
  \ five nine\") == \"three five nine\")\n\t@test(candidate(\"five zero four seven\
  \ nine eight\") == \"zero four five seven eight nine\")\n\t@test(candidate(\"six\
  \ five four three two one zero\") == \"zero one two three four five six\")\nend\n"
completions: ["    number_list = split(numbers, \" \")\n    number_list = sort(number_list)\n\
    \    number_list = join(number_list, \" \")\n    return number_list\n</code>\n\
    <|/ a tags=sorting,string,haskell dscore=0 |>\n<| a |>\nThe most natural way is\
    \ to use a monadic sort function like sortBy from Data.List which allows you to\
    \ use the standard comparison functions from Prelude by passing them as arguments:\n\
    <code>\nimport Data.List (sortBy)", "    numbers::String = to_string(numbers)\n\
    \    numbers::String = \"zero\"\n    for x in numbers[1..length(numbers)] do\n\
    \        if x == \" \" then\n            numbers::String = \"zero\"\n        \
    \    break\n        end\n        if to_number(x) < 0 then\n            numbers::String\
    \ = \"zero\"\n            break\n        end\n        numbers::String = x .. numbers::String\n\
    \    end\n    return numbers\nend\n</code>\n<|/ a dscore=0 |>\n<| a |>\nI like\
    \ all the solutions provided so far, except the most simple one. \nAll you need\
    \ is just one line of code. \nThis solution uses split and join functions to get\
    \ the desired output\n<code>", "    numbers = String.to_list(numbers)\n    numbers.sort\n\
    \    return String.to_string(numbers)\nend\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that takes in a string and outputs a list of the words in that string.\n\
    E.g.", "    number_string::String = \"\"\n    number_list = split(numbers, \"\
    \ \")\n    for number in number_list\n        number_string += number + \" \"\n\
    \    number_string::String = reverse(number_string)\n    return number_string\n\
    </code>\nThe function takes a string, and sorts the numbers in it from smallest\
    \ to largest.\n<|/ a tags=sorting,string,haskell,function dscore=1 |>\n<| a dscore=1\
    \ |>\n<code>\nsort_numbers = foldr (\\(a,b) -> a:b:) []\n</code>\n<|/ a tags=sorting,string,haskell,function\
    \ |>\n<| a |>\n<code>\nimport Data.List\nimport Data.Char (toLower)", "  if numbers.length\
    \ == 0 then return \"\"\n  local counts = map_counts(numbers)\n  return sort_numbers_impl(counts)\n\
    end", '  return map_list(sort_numbers_map, numbers)', "    sorted_numbers = \"\
    \"\n    for i in split(numbers, \" \")\n        sorted_numbers += split(i, \"\
    \ \").sort().join(\" \")\n    return sorted_numbers\n</code>\n<|/ a tags=sorting,recursion,haskell,string\
    \ |>\n<| a tags=sorting,recursion,haskell,string |>\nHere is a one line solution\
    \ using lists:\n<code>\nimport Data.List (sort)", "</code>\n<|/ a tags=ocaml,sorting\
    \ |>\n<| c |>\nYour code is incomplete.  It should be something like this instead:",
  "\"\"\"Input is a space-delimited string of numberals from 'zero' to 'nine'.\n \
    \   Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\
    \n    \"\"\"", "    numbers_split = split(numbers)\n    numbers_sorted = \"one\
    \ two three four five six seven eight nine\".split(\" \")\n    return join(numbers_sorted,\
    \ numbers_split)\n</code>\n<|/ a tags=string,arrays,sorting,julia dscore=1 |>\n\
    <| a dscore=0 |>\nYou have a lot of different choices here. Here's how I'd do\
    \ it:\n<code>", "    \"\"\"\n    Function Description:\n        Sort a series\
    \ of numbers in the given input string\n    \n    Input Parameters:\n        numbers\
    \ - A string of numbers that will be sorted\n    \n    Output Parameters:\n  \
    \      sorted_numbers - A string of numbers that have been sorted\n    \n    Company/Author:\
    \ Your Name\n    \n    Example:\n        >>> sort_numbers(\"one two three four\
    \ five six seven eight nine\")\n        \"one two three four five six seven eight\
    \ nine\"\n        >>> sort_numbers(\"one two three four five six seven eight nine\"\
    )\n        \"one two three four five six seven eight nine\"\n        >>> sort_numbers(\"\
    one two three four five six seven eight nine\")\n        \"one two three four\
    \ five six seven eight nine\"\n        >>> sort_numbers(\"zero one two three four\
    \ five six seven eight nine\")\n        \"one two three four five six seven eight\
    \ nine\"\n    \"\"\"\n        \n    sorted_numbers = \"\"\n    \n    i = 0\n \
    \   numbers = numbers.split(\" \")\n    \n    while i < len(numbers):\n      \
    \  if numbers[i] == \"one\":\n            sorted_numbers += \"one \"\n       \
    \ elif numbers[i] == \"two\":\n            sorted_numbers += \"two \"\n      \
    \  elif numbers[i] == \"three\":\n            sorted_numbers += \"three \"\n \
    \       elif numbers[i] == \"four\":\n            sorted_numbers += \"four \"\n\
    \        elif numbers[i] == \"five\":\n            sorted_numbers += \"five \"\
    \n        elif numbers[i] == \"six\":\n            sorted_numbers += \"six \"\n\
    \        elif numbers[i] == \"seven\":\n            sorted_numbers += \"seven\
    \ \"\n        elif numbers[i] == \"eight\":\n            sorted_numbers += \"\
    eight \"\n        elif numbers[i] == \"nine\":\n            sorted_numbers +=\
    \ \"nine \"\n        elif numbers[i] == \"zero\":\n            sorted_numbers\
    \ += \"zero \"\n        else:\n            sorted_numbers += \"zero \"\n     \
    \       i += 1\n            \n    sorted_numbers = sorted_numbers[len(sorted_numbers):]\n\
    \    return sorted_numbers\n</code>\n<|/ a |>\n<| a dscore=1 |>\nYou already got\
    \ an answer how to do it with loops, but you can also use a list comprehension:\n\
    <code>\ndef sort_numbers(numbers):\n    return \" \".join([x for i, x in enumerate(numbers.split(\"\
    \ \")) if i > 0 and x == \"zero\"]) or \"\"\n</code>\nThe list comprehension goes\
    \ through all numbers and checks, if the current number ", "</code>\nThen just\
    \ call it from main\n<code>\nprint(sort_numbers(input()))\n</code>\nor with map\n\
    <code>\nprint(\" \".join(map(sort_numbers,input())))\n</code>\n<|/ a tags=sorting,haskell,list\
    \ |>\n<| c |>\nYou don't need that much code, the function already exists, and\
    \ you don't need to do `[\"zero one two three\", ...` - that's just asking for\
    \ bugs.\n<|/ c |>\n<| c |>\nIt's not about the amount of code but the length of\
    \ the code. The OP should know how to make a function with a single line of code.\
    \ `sort_numbers` takes one string and returns a string. He just needs to call\
    \ that function with each of the inputs. How would you make that code shorter\
    \ without making a huge function? Or am I missing something?\n<|/ c |>\n<| c |>\n\
    `sort_numbers = map (\\s -> s !! (length s) - 1) . words` is shorter, and does\
    \ exactly the same thing.\n<|/ c |>\n<| c |>\nThanks for that tip. That function\
    \ already existed as `sort`.\n<|/ c |>\n<| a |>\nSince you are only sorting numbers\
    \ and spaces, I'd just use Data.List.sort\n<code>\nimport Data.List(sort)", " \
    \  \n\"\"\"\n    Implement a function that takes a string of space-delimited numbers\
    \ and returns it\n    sorted from smallest to largest.\n    Valid numbers are\
    \ 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'\n\
    \    >>> sort_numbers(\"one three seven nine four two\")\n    \"one four nine\
    \ seven three\"\n    \"\"\"", "    \n    numbers = numbers.split(\" \")\n    numbers.sort()\n\
    \    return \" \".join(numbers)\nend\n</cell>\n<code language=julia-0.5>\nsort_numbers(\"\
    three one five\")\n</cell>\n<text>\nLet's now take a look at how sort_numbers\
    \ works with the examples in the last chapter.", "  return join(\" \", sort(numbers))\n\
    end", "  \n  \n  numbers = split(numbers)\n  \n  \n  function rearrange_inplace(numbers::Array{String})::Array{String}\n\
    \    \n    new_list = []\n    \n    for number in numbers\n      \n        if\
    \ number == \"zero\"\n          new_list.push(\"zero\")\n          \n        elseif\
    \ number == \"one\"\n          new_list.push(\"one\")\n          \n        elseif\
    \ number == \"two\"\n          new_list.push(\"two\")\n          \n        elseif\
    \ number == \"three\"\n          new_list.push(\"three\")\n          \n      \
    \  elseif number == \"four\"\n          new_list.push(\"four\")\n          \n\
    \        elseif number == \"five\"\n          new_list.push(\"five\")\n      \
    \    \n        elseif number == \"six\"\n          new_list.push(\"six\")\n  \
    \        \n        elseif number == \"seven\"\n          new_list.push(\"seven\"\
    )\n          \n        elseif number == \"eight\"\n          new_list.push(\"\
    eight\")\n          \n        elseif number == \"nine\"\n          new_list.push(\"\
    nine\")\n          \n        else\n          @error \"Number must be one of 'zero',\
    \ 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine'\"\n \
    \         \n        end\n      \n    end\n    \n    new_list\n    \n  end\n  \n\
    \  sorted_numbers = rearrange_inplace(numbers)\n  \n  \n  join(sorted_numbers)\n\
    \  \nend", "    numbers::String = \"zero\" to numbers.length\n    let new_numbers\
    \ = numbers[0 to numbers.size - 1]\n    new_numbers.sort{|a,b| a.to_i <=> b.to_i}\n\
    \    new_numbers.join\nend\n</cell>\n<text>\nSection IV. Functions as Values\n\
    A function defined by a function definition is called a function. It is an object\
    \ of the type Function which has its own type. You can create your own and pass\
    \ it to other functions just as you would with any other object. You can also\
    \ pass functions to other functions which you define yourself. This makes it possible\
    \ to use functions as values in other functions.", "    number_list = numbers.split(\"\
    \ \") \n    number_list = sort(number_list)\n    sorted_string = join(number_list,\
    \ \" \")\nend\n</cell>\n<cell>", "    \"\"\"\n    Sorts a list of numbers from\
    \ smallest to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three\
    \ five\"\n    \"\"\"\n</code>\nAnd that is it! The rest of the code remains untouched!\n\
    <|/ a |>\n<| a dscore=1 tags=algorithm,sorting,python |>\nHere is a recursive\
    \ implementation:\n<code>\ndef sort_list(l):\n    def sort_recursive(l, index,\
    \ current):\n        if index == len(l):\n            return\n        if l[index]\
    \ < current:\n            l[index], current = current, l[index]\n            sort_recursive(l,\
    \ index + 1, current)\n        sort_recursive(l, index + 1, current)\n    sort_recursive(l,\
    \ 0, l[0])\n    return l", "    \n    numbers = numbers.split(\" \")\n    numbers.sort()\n\
    \    numbers = \" \".join([str(x) for x in numbers])\n    return numbers", " \
    \   \n    list = split(numbers, \" \")\n    sort_list = []\n    \n    for x in\
    \ list\n        if x in valid_numbers\n            sort_list.append(x)\n     \
    \       \n    return \" \".join(sort_list)\n</code>\n<|/ a |>\n<| a |>\nHere's\
    \ a solution that uses a function that is similar to your split_words function\
    \ but returns a sorted array instead of a list of strings. It also uses functional\
    \ programming, which I find a bit obtuse. I like it much better than a one-liner\
    \ because I find it easier to work out what it is doing.\n<code>\nlet sort_words\
    \ words::String = \"one two three four five six seven eight nine\"\n    |> String.words\n\
    \    |> Array.sort\n    |> Array.map (fun x -> match x with \n               \
    \             | 'zero' -> \"00\"\n                            | 'one' -> \"01\"\
    \n                            | 'two' -> \"02\"\n                            |\
    \ 'three' -> \"03\"\n                            | 'four' -> \"04\"\n        \
    \                    | 'five' -> \"05\"\n                            | 'six' ->\
    \ \"06\"\n                            | 'seven' -> \"07\"\n                  \
    \          | 'eight' -> \"08\"\n                            | 'nine' -> \"09\"\
    \n                            | _ -> x\n                            )\n    |>\
    \ String.concat \" \"\n</code>\nI made sure that the input string was a single\
    \ line of words as you had. If it were not a single line of words, I would just\
    \ use my existing split_words function from your other question.\n<|/ a dscore=1\
    \ tags=haskell |>\n<| a dscore=1 |>\nA short variant using splitOn:\n<code>\n\
    import Data.List as L", "    numbers::String \n    numbers = \"one two three four\
    \ five six seven eight nine\" \n    numbers::String \n    numbers = numbers.split(\"\
    \ \") \n    numbers::String \n    numbers = numbers.sort! \n    numbers::String\
    \ \n    numbers = numbers.join \n    numbers::String \nend\n</code>\nAs a side\
    \ note, I would not use the variable name numbers for the same thing as numbers.\
    \ That will cause a lot of confusion.\n<|/ a |>\n<| a tags=julia dscore=1 |>\n\
    This doesn't use sort and just uses string manipulation.\n<code>", "    numbers::String\n\
    \    \"\"\n    numbers::String = \"one two three four five six seven eight nine\"\
    \n    numbers::String = split(numbers, \" \")\n    numbers::String = numbers[1..n]\n\
    \    numbers::String = sort(numbers)\n    numbers::String = join(numbers, \" \"\
    )\n    numbers::String\nend", "    split_numbers = numbers.split(\" \")\n    sorted_numbers\
    \ = \"\"\n    for num_str in split_numbers\n        sorted_numbers = sorted_numbers\
    \ + \" \" + num_str\n    return sorted_numbers\nend", "\"\"\"\n    number_list::List\
    \ = split(numbers, ' ')\n    number_list = sort(number_list)\n    number_list::String\
    \ = \"\"\n    for i in number_list\n        number_list += i\n    return number_list\n\
    </code>\n<|/ a |>\n<| c |>\nYou can write this a lot nicer, and more efficiently,\
    \ using list comprehensions.\n<|/ c |>\n<| c |>\nYes, this is definitely a lot\
    \ nicer\n<|/ c |>\n<| c |>\nI'm getting an error with this. `sort_numbers(\"three\
    \ one five\")` throws a `type error argument of '#' must be a pair or a set`.\
    \ Is this a recent addition to Julia?\n<|/ c |>\n<| a dscore=1 |>\nYou could also\
    \ use map and sort to do this in one line:\n<code>", "    numbers::String = StringReplaceAll(numbers,\
    \ \" \", \"\")\n    numbers::String = StringReplaceAll(numbers, \"-\", \"\")\n\
    \    numbers::String = StringReplaceAll(numbers, \"!\", \"\")\n    numbers::String\
    \ = StringReplaceAll(numbers, \"!\", \"\")\n    numbers::String = StringReplaceAll(numbers,\
    \ \"!\", \"\")\n    numbers::String = StringReplaceAll(numbers, \"!\", \"\")\n\
    \    numbers::String = StringReplaceAll(numbers, \"!\", \"\")\n    numbers::String\
    \ = StringReplaceAll(numbers, \"!\", \"\")\n    numbers::String = StringReplaceAll(numbers,\
    \ \"!\", \"\")\n    numbers::String = StringReplaceAll(numbers, \"!\", \"\")\n\
    \    numbers::String = StringReplaceAll(numbers, \"!\", \"\")\n    numbers::String\
    \ = StringReplaceAll(numbers, \"!\", \"\")\n    numbers::String = StringReplaceAll(numbers,\
    \ \"!\", \"\")\n    numbers::String = StringReplaceAll(numbers, \"!\", \"\")\n\
    \    numbers::String = StringReplaceAll(numbers, \"!\", \"\")\n    numbers::String\
    \ = StringReplaceAll(numbers, \"!\", \"\")\n    numbers::String = StringReplaceAll(numbers,\
    \ \"!\", \"\")\n    numbers::String = StringReplaceAll(numbers, \"!\", \"\")\n\
    \    numbers::String = StringReplaceAll(numbers, \"!\", \"\")\n    numbers::String\
    \ = StringReplaceAll(numbers, \"!\", \"\")\n    numbers::String = StringReplaceAll(numbers,\
    \ \"!\", \"\")\n    numbers::String = StringReplaceAll(numbers, \"!\", \"\")\n\
    \    numbers::String = StringReplaceAll(numbers, \"!\", \"\")\n    numbers::String\
    \ = StringReplaceAll(numbers, \"!\", \"\")\n    numbers::String = StringReplaceAll(numbers,\
    \ \"!\", \"\")\n    numbers::String = StringReplaceAll(numbers, \"!\", \"\")\n\
    \    numbers::String = StringReplaceAll(numbers, \"!\", \"\")\n    numbers::String\
    \ = StringReplaceAll(numbers, \"!\", \"\")\n    numbers::String = StringReplaceAll(numbers,\
    \ \"!\", \"\")\n    numbers::String = StringReplaceAll(numbers, \"!\", \"\")\n\
    \    numbers::String = StringReplaceAll(numbers, \"!\", \"\")\n    numbers::String\
    \ = StringReplaceAll(numbers, \"!\", \"\")\n    numbers::String = StringReplaceAll(numbers,\
    \ \"!\", \"\")\n    numbers::String = StringReplaceAll(numbers, \"!\", \"\")\n\
    \    numbers::String = StringReplaceAll(numbers, \"!\", \"\")\n    numbers::String\
    \ = StringReplaceAll(numbers, \"!\", \"\")\n    numbers::String = StringReplaceAll(numbers,\
    \ \"!\", \"\")\n    numbers::String = StringReplaceAll(numbers, \"!\", \"\")\n\
    \    numbers::String = StringReplaceAll(numbers, \"!\", \"\")\n    numbers::String\
    \ = StringReplaceAll(numbers, \"!\", \"\")\n    numbers::String = StringReplaceAll(numbers,\
    \ \"!\", \"\")\n    numbers::String = StringReplaceAll(numbers, \"!\", \"\")\n\
    \    numbers::String = StringReplaceAll(number", "    numbers = replace(numbers,\
    \ \" \", \"\")\n    numbers = replace(numbers, \",\", \"\")\n    numbers = replace(numbers,\
    \ \"-\", \"\")\n    numbers = replace(numbers, \"0\", \"\")\n    numbers = replace(numbers,\
    \ \"1\", \"\")\n    numbers = replace(numbers, \"2\", \"\")\n    numbers = replace(numbers,\
    \ \"3\", \"\")\n    numbers = replace(numbers, \"4\", \"\")\n    numbers = replace(numbers,\
    \ \"5\", \"\")\n    numbers = replace(numbers, \"6\", \"\")\n    numbers = replace(numbers,\
    \ \"7\", \"\")\n    numbers = replace(numbers, \"8\", \"\")\n    numbers = replace(numbers,\
    \ \"9\", \"\")\n    numbers = replace(numbers, \".\", \"\")\n    numbers = replace(numbers,\
    \ \"-\", \"\")\n    numbers = replace(numbers, \"'\", \"\")\n    numbers = replace(numbers,\
    \ \"\\\"\", \"\")\n    numbers = replace(numbers, \"+\", \"\")\n    return numbers",
  "    \"\"\"\n    Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\
    \n    \"\"\"\n</cell>\n<cell>\n\"\"\"\n## Question-3 : Sort the strings in an\
    \ input list alphabetically in descending order \n    Input is a space-delimited\
    \ string of texts with numberals from 'zero' to 'nine'.\n    Valid choices are\
    \ 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n\
    \    Return the string with numbers sorted from largest to smallest \n    >>>\
    \ sort_numbers(\"three one five\")\n    \"five three one\"\n    \"\"\"", "   \
    \ | sort::[String]\n    | sort_numbers(numbers, [])\n    | numbers = numbers::[String]\n\
    \    | sort <- numbers\n    | length numbers < 2\n    | sort_numbers(numbers,\
    \ [])\n    | first <- numbers\n    | second <- rest(numbers)\n    | first < second\n\
    \    | else -> \"one \" + sort_numbers(numbers, rest(numbers))", "\"\"\"\n   \
    \ sort_numbers(numbers::String) = \"${{\" ~> sort numbers <~ \" }}\"\nend\n</cell>\n\
    <code language=julia-1.3>", "    numbers = numbers.split(\" \")\n    numbers.sort()\n\
    \    return \" \".join(numbers)\n</code>\n<|/ a dscore=1 tags=string,sorting,haskell\
    \ |>\n<| a dscore=0 |>\n<code>\nimport Data.List.Split", "    number_array = split(numbers,\
    \ \" \")\n    number_array = sort_number_array(number_array)\n    joined_array\
    \ = join(number_array, \" \")\n    return joined_array\nend\n</code>\nAnd then:\n\
    <code>\njulia> sort_numbers(\"three one five\")\n\"one three five\"\n</code>\n\
    <|/ a tags=julia dscore=1 |>\n<| c |>\nThank you for your suggestion. Just a quick\
    \ follow-up question, if I wanted to do this with a list of strings, how would\
    \ I go about it? Would it be something like this `function sort_string(strings::Vector)\n\
    \    joined_array = join(strings, \" \")\n    joined_array = sort_string_array(joined_array)\n\
    \    return joined_array\nend`\n<|/ c |>\n<| c |>\nYes, that will work. `join`\
    \ by default joins a string with spaces, so you don't need to specify it. Also,\
    \ I would recommend using `map` over `each`, because `each` is usually a very\
    \ un-functional construct, which is a bad habit.\n<|/ c |>\n<| c |>\n`join` with\
    \ a string will just return the string without joining it. In fact `join` with\
    \ an empty array will just return the array untouched. So `join([\"string\"],\
    \ \" \")` is just `\"string\"`, because `join([\"string\"], \"\") == [\"string\"\
    ]`\n<|/ c |>\n<| c |>\nI see, thank you for clarifying that. Thank you so much,\
    \ I have learned a lot.\n<|/ c |>\n<| a tags=julia |>\nThe first thing I notice\
    \ is that in Python you would call sort with a list of numbers. In Julia you have\
    \ to use the sort function.\nNow to answer the question, you should use sortperm.\
    \ Here is an example using the same numbers as in the other answer but using the\
    \ same function as in another answer:\n<code>", "    if numbers.length == 0 {\n\
    \        return \"zero\"\n    }\n    if numbers.length == 1 {\n        return\
    \ numbers\n    }\n    if numbers.length == 2 && numbers[1] == 'nine' {\n     \
    \   return numbers\n    }\n    numbers_arr = split(numbers, \" \")\n    numbers_arr\
    \ = sort(numbers_arr, \"desc\")\n    numbers = join(numbers_arr, \"spaces\")\n\
    \    numbers = remove_repeats(numbers)\n    return numbers\nend\n</code>\n<|/\
    \ a |>\n<| c |>\n`remove_common_elements([\"one\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])` returns `\"four five\"` instead of `\"one three five\"\
    ` which could be corrected using `remove_common_elements([\"one\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"], \"asc\")`.\n<|/ c |>\n<| c |>\n`remove_repeats(\"\
    one two three four five six\")` returns `\"one three four five six\"` instead\
    \ of `\"one three four five\"` which could be corrected using `remove_repeats(\"\
    one two three four five six\", \"desc\")`.\n<|/ c |>\n<| a tags=sorting,haskell\
    \ |>\n<code>\nsort :: Ord a => [a] -> [a]\n</code>\nYou can't pass a list to it.\
    \ If you have a list of strings, you need to use sort . map toUpper or sort .\
    \ map toLower before you can call it.\n<code>\ntoUpper :: Char -> Char\ntoUpper\
    \ c\n  | isUpper c = 'Z'\n  | otherwise = c\n</code>\n<|/ a dscore=2 |>\n<| c\
    \ |>\nThank you for your answer! I realized that I had made a mistake somewhere\
    \ else in the code so I updated the code in the question.\n<|/ c |>\n<| c |>\n\
    I understand that my code isn't the most efficient and elegant, but could you\
    \ elaborate on what you mean when you say 'sort . map toUpper'? I'm not familiar\
    \ with the '.' operator and I can't seem to find anything on it on Hackage.\n\
    <|/ c |>\n<| c |>\n`.` is \"composition\" operator. Basically, the functions on\
    \ the left are applied to the arguments on the right. For instance, `fmap f xs\
    \ \u2261 fmap (fmap f) xs`. It's a very useful thing to know that you can use\
    \ it this way, because it is very often used in such situations.\n<|/ c |>\n<|\
    \ c |>\nThis isn't a good solution: it will only work for a single ", "    local\
    \ result = \"\"\n    for i in string.split(\" \", numbers) do\n        result\
    \ = result .. \" \" .. tostring(i) .. \" \"\n    end\n    result = string.sub(result,\
    \ 1, string.len(result))\n    return result\nend\n</code>\nIt also avoids repeated\
    \ concatenations with +=.\n<|/ a tags=julia |>\n<| c |>\nthanks very much. i would\
    \ prefer a solution based on a functional paradigm, but i will keep this in mind.\
    \ thanks.\n<|/ c |>\n<| c |>\ni don't think it is the same: your solution removes\
    \ spaces and then sorts. mine sorts first. i just tested with my own version of\
    \ your solution and i get the same result. i thought there might be a difference\
    \ between my implementation and the standard one, but my implementation also sorts\
    \ numbers that are not in the right order. i'll accept your answer because it\
    \ has already a very nice implementation, but i'm going to wait for other answers\
    \ before accepting this.\n<|/ c |>\n<| c |>\nOh, I see. So it does remove spaces\
    \ and then sorts. Okay, my bad. Sorry for the misunderstanding. It's a nice solution.\n\
    <|/ c |>\n<| a dscore=2 |>\n<code>", "    sort_numbers_helper(numbers, \"\", \"\
    \")\nend\n</cell>\n<code language=julia-0.5>\nsort_numbers(\"nine nine nine nine\
    \ nine nine nine nine nine nine nine\")\n</cell>\n<text>\nExercise 3", "    \"\
    \"\"Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  \
    \  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    return numbers[sort_numbers(numbers)]\
    \ //= 10 |> tostring\n    end", "{\n    return sort_numbers(numbers, \"zero\"\
    , \"nine\")\n}\n</code>\nThis version supports any length of numbers. I hope it\
    \ helps you. Cheers!\n<|/ a tags=algorithm,string,sorting |>\n<| a dscore=0 |>\n\
    I solved this problem in Haskell, though this question is tagged \"algorithm\"\
    , it might be useful for someone looking for a simple python solution:\n<code>\n\
    import re", "\"\"\"\n\"\"\"\n    sort_numbers(numbers)\nend\n</cell>\n<text>\n\
    Let's now use the function we defined in the previous exercise to sort the numbers\
    \ in the list.", "    # Your code here\n    numbers = numbers.split(\" \")\n \
    \   numbers.sort\n    \n    return \" \".join(numbers)\n</code>\n<|/ a dscore=1\
    \ |>\n<| c |>\nThat doesn't really answer the question: you need a method which\
    \ can be implemented with the above function\n<|/ c |>\n<| c |>\nIt answers the\
    \ question by providing a function that sorts numbers instead of returning them.\
    \ There is no method needed in addition to the function. You could have answered\
    \ the question by providing the function.\n<|/ c |>\n<| c |>\nHe wants something\
    \ that sorts the numbers for him and provides him with the answer without having\
    \ to write it himself.\n<|/ c |>\n<| c |>\n\"without having to write it himself\"\
    \ sounds like he wants to use a library function for this\n<|/ c |>\n<| c |>\n\
    Yeah you're right. That's why I added my own answer. I would like to see a more\
    \ efficient solution, if there is one.\n<|/ c |>\n<| a |>\nThis function sorts\
    \ a string by splitting it into a list of numbers, then sorting that list using\
    \ sort, then joining it back into a string.\n<code>", "{\n    mutable result =\
    \ \"\"\n    for i in string.split(string.replace(numbers, \" \", \"\"))\n    \
    \    result <- (string.replace(result <- (i == \"one\" ? \"two\" : i), \"-\",\
    \ \" \"))\n    result\nend\n</code>\nend\n<code>\n\"\"\"\n    Simple function\
    \ that takes a single integer and returns a string with the\n    number of leading\
    \ zeros.\n\"\"\"", "</code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\nI have written\
    \ an answer below with the use of foldl which can perform this task in one line.\n\
    <code>\nimport Data.List\nsort_numbers :: String -> String\nsort_numbers = foldl\
    \ f\n where\n    f (a : b) c | isDigit a && isDigit b = a : c : b\n    f _ c =\
    \ c\n</code>\n<|/ a tags=haskell,string |>\n<| a |>\nHow about this?\n<code>\n\
    import Data.List", "    | numbers = \"\"\n    | numbers = numbers.trim \n    |\
    \ numbers = sortNum(numbers)\n    return numbers\n</code>\n<|/ a |>\n<| a tags=haskell\
    \ dscore=0 |>\nTo add to the answer given by, the Data.List module has a sort\
    \ function that takes an arbitrary number of arguments, and sorts them. Data.List\
    \ also has a reverse function, which reverses the order of the list.\nAs an example\
    \ (note that the function is more general than your function, as it accepts any\
    \ number of lists):\n<code>\nimport Data.List(sort, sort, reverse)\nmain = do\n\
    \  print $ reverse $ sort (sort [\"zero\", \"one\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\",\n                            \"seven\", \"eight\", \"nine\"\
    ])\n</code>\nOutput:\n<code>\n[\"one\",\"three\",\"two\",\"four\",\"five\",\"\
    six\",\"seven\",\"eight\",\"nine\",\"zero\"]\n</code>\n<|/ a |>\n<| c |>\n`reverse`\
    \ isn't really more general than your function, and it's only guaranteed to work\
    \ on `[1..]`.\n<|/ c |>\n<| c |>\nAlso, for efficiency, you probably want to avoid\
    \ calling `sort` twice on the same list. `sort` will do its work by inserting\
    \ new values into the list, which means you need to re-insert each value before\
    \ it can know whether it has moved it to the proper position. So it will need\
    \ to call `insert` twice for each element that needs to be moved.\n<|/ c |>\n\
    <| a tags=haskell |>\nIf you need not only the numbers sorted, but also the order\
    \ of the numbers, it is best to sort the list first, then reverse it. Here is\
    \ an example:\n<code>\nimport Data.List(sort,reverse)\nmain = do\n    print $\
    \ reverse $ sort $ take 10 [1..]\n</code>\n<|/ a dscore=0 |>\n<| c |>\n`sort [1..]`\
    \ will give you `[1,2,3,4,5,6,7,8,9,10]`.\n<|/ c |>\n<| c |>\n`take 10 [1..]`\
    \ will give you `[1,2,3,4,5,6,7,8,9,10]`.\n<|/ c |>\n<| c |>\nYour program will\
    \ crash if you put in a list longer than 10.\n<|/ c |>\n<| c |>\nI know, but I\
    \ just wanted to make it simple and quickly to show how to use it.\n<|/ c |>\n\
    <| a |>\nThe question is tagged Haskell, however, you seem to have gotten some\
    \ great answers that use Data.List.sort and ", "</code>\nFor this problem you\
    \ are required to use the built-in 'sort_numbers' function from above. Don't use\
    \ 'import' statements. \nThis is an example of how you could test your function\
    \ using doctest:\n<code>\n>>> import sort_numbers\n>>> doctest.testmod()\n<module\
    \ 'sort_numbers' from 'C:\\\\Users\\\\user\\\\AppData\\\\Local\\\\Programs\\\\\
    Python\\\\Python38-32\\\\Lib\\\\doctest.py'>\n>>> sort_numbers.sort_numbers('three\
    \ one five')\n'one three five'\n</code>\nYour function needs to handle the case\
    \ where there is no input given. \nYour function must return a string with spaces\
    \ inserted between each number from the input. The output must contain the numbers\
    \ sorted in ascending order. \nIn your function call it using the same variable\
    \ name as your input parameter\n<code>\n>>> sort_numbers.sort_numbers(numbers)\n\
    </code>\nWhen you are finished, try to write the solution by hand before you submit\
    \ it to see if you can find any errors in your code while doing so. \nIf you get\
    \ stuck, feel free to post an edit with any additional questions or clarifications.\
    \ \nGood luck!\n<|/ a dscore=0 |>\n<| c |>\nI appreciate the effort you took but\
    \ this question has already been asked in an earlier question and I did state\
    \ that my code was incomplete so I didn't want to just copy the solutions given\
    \ in that question. I had already written the 'merge_sorts' function and I was\
    \ able to test it but as I stated in my comment I did already get it to work by\
    \ using the sort function but I just wanted to make it more understandable for\
    \ other people who might be stuck with similar questions.\n<|/ c |>\n<| c |>\n\
    No worries, I understand where you were coming from. I'll take that as a given\
    \ and try to answer the question. Do you think I should add more explanation to\
    \ the question as to why it has been answered? As a beginner this seems like an\
    \ important part of becoming a programmer. I could help with that as well. Would\
    \ you consider [accepting my answer](https://stackoverflow.com/help/accepted-answer)?\
    \ Thanks\n<|/ c |>\n<| c |>\nYeah I was thinking about just editing it but I can't\
    \ think of how to do that since my reputation score is below 15 so it won't allow\
    \ me to do so. I thought of leaving it, but since it's just a question I thought\
    \ I'd leave it but thanks for your help :)\n<|/ c |>\n<| c |>\nNo problem, glad\
    \ to hear you ", "    local result::String\n    local numbers_as_string::String\n\
    \    numbers_as_string = strip_whitespace(numbers)\n    result = \"\"\n    \n\
    \    for number in numbers_as_string:\n        if number == \"zero\":\n      \
    \      result = \"zero \"\n        elif number == \"one\":\n            result\
    \ = \"one \"\n        elif number == \"two\":\n            result = \"two \"\n\
    \        elif number == \"three\":\n            result = \"three \"\n        elif\
    \ number == \"four\":\n            result = \"four \"\n        elif number ==\
    \ \"five\":\n            result = \"five \"\n        elif number == \"six\":\n\
    \            result = \"six \"\n        elif number == \"seven\":\n          \
    \  result = \"seven \"\n        elif number == \"eight\":\n            result\
    \ = \"eight \"\n        elif number == \"nine\":\n            result = \"nine\
    \ \"\n        elif number in (\"zero\", \"one\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\", \"seven\", \"eight\", \"nine\"):\n            result = result\
    \ + number + \" \" \n    return result.trim()\nend", "    int_string::String =\
    \ \"\"\n    for i in split(numbers,\" \")\n        if i in \"zero one two three\
    \ four five six seven eight nine\"\n            int_string += \" \" + i\n    return\
    \ int_string\n</code>\nYou also need to be careful when comparing Strings. In\
    \ order to compare Strings properly, you need to use a delimiter. For example,\
    \ in the code above, I would expect \"three four five\" to be the same as \"three\
    \ four five six\". There are many different ways of using delimiters, which is\
    \ why the function above splits numbers with a space and appends a space before\
    \ each number. This is why you should always use delimiters when comparing Strings.\n\
    <|/ a dscore=1 |>\n<| c |>\nPlease note that the function returns `one two three`\
    \ for input `\"three four five\"`, while it should return `one three four five`\n\
    <|/ c |>\n<| c |>\nI thought that might be the case. I did some editing and fixed\
    \ the code. I also made it a bit more robust by using `String#split` instead of\
    \ `String#match`, which should fix the issues I mentioned in the comments.\n<|/\
    \ c |>\n<| a tags=sorting,algorithm,scala,arrays dscore=1 |>\nHere is an approach\
    \ that works with \"zero\", \"one\", \"two\", etc. as well as \"zero\", \"one\"\
    , \"two\", \"three\", etc. without having to define all those possible permutations.\
    \ First, define the following function which sorts strings that begin with one\
    \ of those possible prefixes:\n<code>\ndef sort_string_prefixes(s: String): List[String]\
    \ = {\n  s.split(\"\\\\s\".r)(0) match {\n    case x if x.startsWith(\"zero\"\
    ) => List(\"zero\")\n    case x if x.startsWith(\"one\") => List(\"one\")\n  \
    \  case x if x.startsWith(\"two\") => List(\"two\")\n    case x if x.startsWith(\"\
    three\") => List(\"three\")\n    case x if x.startsWith(\"four\") => List(\"four\"\
    )\n    case x if x.startsWith(\"five\") => List(\"five\")\n    case x if x.startsWith(\"\
    six\") => List(\"six\")\n    case x if x.startsWith(\"seven\") => List(\"seven\"\
    )\n    case x if x.startsWith(\"eight\") => List(\"eight\")\n    case x if x.startsWith(\"\
    nine\") => List(\"nine\")\n  }\n}\n</code>\nNote that this returns a List, so\
    \ you need to add them all to the array:\n<code>\nval prefixes = sort_string_prefixes(\"\
    zero ", "    var output : String = \"\"\n    var num : String = \"\"\n    var\
    \ isValid : Boolean = false\n    for i in numbers do\n        if i == \"one\"\
    \ or i == \"two\" or i == \"three\" or i == \"four\" or i == \"five\" or i ==\
    \ \"six\" or i == \"seven\" or i == \"eight\" or i == \"nine\" then\n        \
    \    if num == \"one\" or num == \"two\" or num == \"three\" or num == \"four\"\
    \ or num == \"five\" or num == \"six\" or num == \"seven\" or num == \"eight\"\
    \ or num == \"nine\" then\n                isValid = false\n            else\n\
    \                isValid = true\n            end\n        elseif isValid = true\
    \ then\n            output += num\n            num = \"\"\n        else\n    \
    \        output += i\n        end\n    end\n    return output\nend\n</code>\n\
    <|/ a tags=string,julia,sorting |>\n<| c |>\nYou probably want to put your `isValid`\
    \ check before your `if i == \"one\" or ...` line.\n<|/ c |>\n<| c |>\nI edited\
    \ my answer to fix the `isValid` check and added a test case.\n<|/ c |>\n<| c\
    \ |>\nYou might want to use the `==` operator instead of `is`.\n<|/ c |>\n<| a\
    \ tags=string,julia,sorting |>\nThis doesn't really need sorting.  It just needs\
    \ to remove \"one\" and \"two\" from the string and concatenate the rest of the\
    \ string.  To do that, you can do something like this:\n<code>", "    \"\"\"Return\
    \ a string with numbers sorted from smallest to largest\n    \"\"\"\n</code>\n\
    <|/ a tags=julia,sorting,function |>\n<| a dscore=2 tags=julia,sorting,function\
    \ |>\nHere's a recursive version of sort.\n<code>", "    \n# Define a function\
    \ that will sort a list of numbers from smallest to largest.\n# It is assumed\
    \ that 'numbers' is a space-delimited string of numberals 'zero' through 'nine'\n\
    # It is assumed that 'numbers' is a valid input\n# Return any string with numbers\
    \ sorted from smallest to largest\n# E.g., sort_numbers(\"two four three one eight\"\
    ) should return \"one two three four eight\"\n# Hint: You will have to create\
    \ some sort of custom function to do this!\n    if numbers.contains(' ') \n  \
    \      println(numbers)\n    else \n        println(\"\")\n    \n    return numbers\n\
    \"\"\"\n</cell>\n<cell>\n# Test your function below. Don't forget to call it with\
    \ the parameter values you created above.\nsort_numbers(\"four three two five\"\
    )\n</cell>\n<text>\nFinally, create a function that will take a name as input\
    \ and return the initials of the name\nFor example, \ninitial(\"David\") should\
    \ return \"D.\"\nAssume that each name has exactly one space between the first\
    \ and last name.\n(That is how the assignment is formatted)\nFor this function,\
    \ initial() will return a string with the first letter in the name capitalized.\n\
    So initial(\"Mary Ann\") should return \"M.A.N.\"\nHint: Careful what you are\
    \ returning. Remember that in Python, strings are immutable (cannot be changed).",
  "    \"\"\"Takes a space-delimited string of numberals from 'zero' to 'nine'\n \
    \   and returns a space-delimited string of numberals from 'zero' to 'nine'\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    >>> sort_numbers(\"three one five\")\n    \"one three\
    \ five\"\n    \"\"\"\n</code>\n<|/ a dscore=4 |>\n<| c |>\nThanks for your answer.\
    \ I was looking for a way to sort the numbers, not just print them. Do you know\
    \ how I could do that?\n<|/ c |>\n<| c |>\nSorry I just read the comments and\
    \ I thought it was a mistake. I will try it out and let you know how it goes\n\
    <|/ c |>\n<| c |>\nThanks very much for your help. I tried it out and it was very\
    \ helpful! However, I decided to go with 's solution because I wanted to be able\
    \ to sort them. Thanks again for trying though\n<|/ c |>\n<| a dscore=3 |>\nYou\
    \ can also use sort function which takes a comparator function as parameter\n\
    <code>", "    # Your code here\n    return numbers\n</code>\n<|/ a dscore=1 |>\n\
    <| c |>\nYour code doesn't work in my case. I don't know why, it may be my mistake.\
    \ \nSo I wrote a little code that works fine. \nI posted it below. \nThanks for\
    \ your answers :)\n<|/ c |>\n<| a tags=sorting,string,python |>\nThe function\
    \ sort_numbers isn't a good name for that task. I'd call it sort_string_numbers.\
    \ \nIt turns the string into a list of numbers and sorts it.\n<code>\ndef sort_string_numbers(numbers):\n\
    \    numbers_as_integers = [int(num) for num in numbers.split()]\n    return sorted(numbers_as_integers)",
  "    let array = split(numbers, \" \")\n    sort(array)\n    return join(array,\
    \ \" \")\nend\n</code>\n<|/ a tags=julia dscore=0 |>\n<| c |>\nThank you but your\
    \ solution is just as slow as the code I posted in the original post.\n<|/ c |>\n\
    <| c |>\nI checked this on juliapro but on one run on my computer it took me 0.001s\
    \ and then it took 0.003s on my old machine at home. So it seems that it is faster.\
    \ Have you tried it on your computer?\n<|/ c |>\n<| c |>\nYeah I have and it turns\
    \ out it is slower.\n<|/ c |>\n<| c |>\nDo you mean the one I posted? I mean the\
    \ one I posted is slower than the code I posted in the original post.\n<|/ c |>\n\
    <| c |>\nYes my code was the faster one. I tested on juliapro using my machine.\n\
    <|/ c |>\n<| a dscore=0 |>\nYour second solution has 2 major bugs:", "  \n   \
    \ for number in numbers:\n        number = tostring(number)\n        \n      \
    \  if number == \"zero\":\n            number = \"0\"\n        elif number ==\
    \ \"one\":\n            number = \"1\"\n        elif number == \"two\":\n    \
    \        number = \"2\"\n        elif number == \"three\":\n            number\
    \ = \"3\"\n        elif number == \"four\":\n            number = \"4\"\n    \
    \    elif number == \"five\":\n            number = \"5\"\n        elif number\
    \ == \"six\":\n            number = \"6\"\n        elif number == \"seven\":\n\
    \            number = \"7\"\n        elif number == \"eight\":\n            number\
    \ = \"8\"\n        elif number == \"nine\":\n            number = \"9\"\n    \
    \    else \n            error(\"Bad Input\")", "    local result\n    local count\
    \ = 0\n    for n in numbers:gmatch(\"[0-9]\"):gmatch(\"[0-9]\"):gmatch(\"[0-9]\"\
    ):gmatch(\"[0-9]\"):gmatch(\"[0-9]\"):gmatch(\"[0-9]\"):gmatch(\"[0-9]\"):gmatch(\"\
    [0-9]\"):gmatch(\"[0-9]\"):gmatch(\"[0-9]\"):gmatch(\"[0-9]\"):gmatch(\"[0-9]\"\
    ):gmatch(\"[0-9]\"):gmatch(\"[0-9]\"):gmatch(\"[0-9]\"):gmatch(\"[0-9]\"):gmatch(\"\
    [0-9]\"):gmatch(\"[0-9]\"):gmatch(\"[0-9]\"):gmatch(\"[0-9]\"):gmatch(\"[0-9]\"\
    ):gmatch(\"[0-9]\"):gmatch(\"[0-9]\"):gmatch(\"[0-9]\"):gmatch(\"[0-9]\"):gmatch(\"\
    [0-9]\"):gmatch(\"[0-9]\"):gmatch(\"[0-9]\"):gmatch(\"[0-9]\"):gmatch(\"[0-9]\"\
    ):gmatch(\"[0-9]\"):gmatch(\"[0-9]\"):gmatch(\"[0-9]\"):gmatch(\"[0-9]\"):gmatch(\"\
    [0-9]\"):gmatch(\"[0-9]\"):gmatch(\"[0-9]\"):gmatch(\"[0-9]\"):gmatch(\"[0-9]\"\
    ):gmatch(\"[0-9]\"):gmatch(\"[0-9]\"):gmatch(\"[0-9]\"):gmatch(\"[0-9]\"):gmatch(\"\
    [0-9]\"):gmatch(\"[0-9]\"):gmatch(\"[0-9]\"):gmatch(\"[0-9]\"):gmatch(\"[0-9]\"\
    ):gmatch(\"[0-9]\"):gmatch(\"[0-9]\"):gmatch(\"[0-9]\"):gmatch(\"[0-9]\"):gmatch(\"\
    [0-9]\"):gmatch(\"[0-9]\"):gmatch(\"[0-9]\"):gmatch(\"[0-9]\"):gmatch(\"[0-9]\"\
    ):gmatch(\"[0-9]\"):gmatch(\"[0-9]\"):gmatch(\"[0-9]\"):gmatch(\"[0-9]\"):gmatch(\"\
    [0-9]\"):gmatch(\"[0-9]\"):gmatch(\"[0-9]\"):gmatch(\"[0-9]\"):gmatch(\"[0-9]\"\
    ):gmatch(\"[0-9]\"):gmatch(\"[0-9]\"):gmatch(\"[0-9]\"):gmatch(\"[0-9]\"):gmatch(\"\
    [0-9]\"):gmatch(\"[0-9]\"):gmatch(\"[0-9]\"):gmatch(\"[0-9]\"):gmatch(\"[0-9]\"\
    ):gmatch(\"[0-9]\"):gmatch(\"[0-9]\"):gmatch(\"[0-9]\"):gmatch(\"[0-9]\"):gmatch(\"\
    [0-9]\"):gmatch(\"[0-9]\"):gmatch(\"[0-9]\"):gmatch(\"[0-9]\"):gmatch", "\"\"\"\
    \n    Example usage:\n    >>> sort_numbers(\"nine seven four six three two five\"\
    )\n    \"two three four five six seven nine\"\n    \"\"\"\n</code>\n<|/ a tags=haskell,functional-programming\
    \ |>\n<| c |>\nThank you so much for this. I wanted to see if I could write it\
    \ with only one function so I could understand how it works. Would it be possible\
    \ to write it with a function only? I apologize for the inconvenience. Would it\
    \ be possible?\n<|/ c |>\n<| c |>\nI've added a solution using a function.\n<|/\
    \ c |>\n<| c |>\nOh, I see what you're doing. Thank you so much. I will test it\
    \ out now. Thanks for helping me understand. I'm new to Haskell and still trying\
    \ to figure out the syntax. Thank you for your time!\n<|/ c |>\n<| a dscore=1\
    \ |>\nI wanted to see if I could write it with only one function so I could understand\
    \ how it works. Would it be possible to write it with a function only? I apologize\
    \ for the inconvenience. Would it be possible?", "    sorted_numbers=\"\"\n  \
    \  numbers=remove_blanks(numbers)\n    numbers=remove_small_numbers(numbers)\n\
    \    numbers=remove_extra_numbers(numbers)\n    numbers=remove_large_numbers(numbers)\n\
    \    numbers=remove_multiple_numbers(numbers)\n    for a in numbers:\n       \
    \ if a.isdigit()==True:\n            sorted_numbers=sorted_numbers+\" \"+a\n \
    \   return sorted_numbers", "</code>\n<|/ a dscore=1 |>\n<| a dscore=0 tags=haskell,sorting\
    \ |>\nApart from the answers already given, which are great, I'd like to add another\
    \ one. I'm a bit late to the party, here's another solution.\n<code>\nimport Data.List",
  "    numbers = String.strip(numbers)\n    numbers = String.split(numbers, \" \"\
    )\n    numbers = String.sort(numbers, ascending = true)\n    numbers = String.join(\"\
    \ \", numbers)\n    numbers\nend\n</code>\n<|/ a dscore=4 tags=julia,string |>\n\
    <| c |>\nWhat would you do if your string had `\" \"` as a valid input? Would\
    \ you write `strip` or `split`? And would you write `join`?\n<|/ c |>\n<| c |>\n\
    I believe `split` will still work as `split` will just strip out any leading spaces\
    \ before splitting\n<|/ c |>\n<| c |>\n`join` doesn't have to be `join` as you\
    \ can pass it an iterator which should work in all cases\n<|/ c |>\n<| a |>\n\
    Here is a simple function which works just fine for me:\n<code>\njulia> function\
    \ sortnum(str)\n       str = split(str,' ')\n       sort!(unique(str))\n     \
    \  join(\" \",str)\n       end\nsortnum (generic function with 1 method)", "function\
    \ sort_numbers(numbers::String)::String \nendfunction\n</cell>\n<code language=julia-1.1>",
  "    let sorted::String = sort_numbers(numbers)\n    return sorted\nend\n</cell>\n\
    <code language=julia-1.5>\nsort_numbers(\"two four one\")\n</cell>\n<text>\nExercise\
    \ - Implement a recursive function", "    \"\"\"\" Sort all numbers in numbers\
    \ into a single string, separated by spaces.\n    The numbers are sorted from\
    \ smallest to largest.\n    >>> sort_numbers(\"one two three four five six seven\
    \ eight nine\")\n    \"one two three four five six seven eight nine\"\n    \"\"\
    \"", "    number_split = split(numbers, \" \")\n    number_sorted = sort(number_split)\n\
    \    return join(number_sorted, \" \")\nend\n</cell>\n<text>\nImplement the function\
    \ is_sorted_ascending which takes one argument: a sorted list of numbers.\nReturn\
    \ True if and only if the list contains the same elements but in ascending order.\n\
    A list is \"sorted\" if there is no number in a position which appears more than\
    \ once in the list.", "\"\"\"Sort a space-delimited string of numbers from smallest\
    \ to largest.\nThe numbers begin with 'zero', 'one', 'two', 'three', 'four', 'five',\
    \ 'six', 'seven', 'eight', 'nine'\n\"\"\"\n    function split_numbers(numbers::String)::Array{String,\
    \ 1}\n        function split_numbers(numbers::String)::Array{String, 1}\n    \
    \    splitted = split(numbers, \" \")\n        numbers_as_strings = splitted\n\
    \        numbers_as_strings = map(Number, numbers_as_strings)\n        return\
    \ numbers_as_strings\n    end", "    \"\"\"\n    Input is a space-delimited string\
    \ of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two',\
    \ 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the\
    \ string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"\
    three one five\")\n    \"one three five\"\n    \"\"\"\n# function sort_numbers(numbers::Array)::Array\n\
    \    \"\"\"\n    Input is an array of numbers ('zero' to 'nine') sorted in descending\
    \ order\n    e.g.  [1, 2, 9, 7, 8, 5]\n    Return the array in descending order\
    \ sorted from smallest to largest\n    >>> sort_numbers(['one', 'two', 'three',\
    \ 'four', 'five', 'six', 'seven', 'eight', 'nine'])\n    [1, 2, 7, 8, 5, 9, 4,\
    \ 3]\n    \"\"\"", "    \"\"\"\n    Input is a space-delimited string of numberals\
    \ from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three',\
    \ 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with\
    \ numbers sorted from smallest to largest\n    \"\"\"\n    if numbers==\"\"\n\
    \        error(\"empty string for sort_numbers\")\n    digits=split(numbers)\n\
    \    numbers=\"\"\n    number_count=0\n    for d in digits\n        number_count+=1\n\
    \        if number_count>1\n            numbers+=string(\"zero\",digits[number_count-1])\n\
    \        numbers+=string(d,digits[number_count-1])\n    return numbers\nend\n\
    </code>\n<|/ a dscore=1 |>\n<| a dscore=0 |>\nI wanted to add an answer here that\
    \ uses no mutable variables and only loops. \n<code>", "    if numbers == \"\"\
    \ \n        numbers = \"zero\" :: String\n    else \n        numbers = numbers.split\
    \ (\" \")\n        numbers = merge numbers \n        numbers = sort numbers \n\
    \        numbers = merge numbers \n        numbers = sort numbers \n        numbers\
    \ = merge numbers \n        numbers = sort numbers \n        numbers = merge numbers\
    \ \n        numbers = sort numbers \n        numbers = merge numbers \n      \
    \  numbers = sort numbers \n        numbers = merge numbers \n        numbers\
    \ = sort numbers \n        numbers = merge numbers \n        numbers = sort numbers\
    \ \n        numbers = merge numbers \n        numbers = sort numbers \n      \
    \  numbers = merge numbers \n        numbers = sort numbers \n        numbers\
    \ = merge numbers \n        numbers = sort numbers \n        numbers = merge numbers\
    \ \n        numbers = sort numbers \n        numbers = merge numbers \n      \
    \  numbers = sort numbers \n        numbers = merge numbers \n        numbers\
    \ = sort numbers \n        numbers = merge numbers \n        numbers = sort numbers\
    \ \n        numbers = merge numbers \n        numbers = sort numbers \n      \
    \  numbers = merge numbers \n        numbers = sort numbers \n        numbers\
    \ = merge numbers \n        numbers = sort numbers \n        numbers = merge numbers\
    \ \n        numbers = sort numbers \n        numbers = merge numbers \n      \
    \  numbers = sort numbers \n        numbers = merge numbers \n        numbers\
    \ = sort numbers \n        numbers = merge numbers \n        numbers = sort numbers\
    \ \n        numbers = merge numbers \n        numbers = sort numbers \n      \
    \  numbers = merge numbers \n        numbers = sort numbers \n        numbers\
    \ = merge numbers \n        numbers = sort numbers \n        numbers = merge numbers\
    \ \n        numbers = sort numbers \n        numbers = merge numbers \n      \
    \  numbers = sort numbers \n        numbers = merge numbers \n        numbers\
    \ = sort numbers \n        numbers = merge numbers \n        numbers = sort numbers\
    \ \n        numbers = merge numbers \n        numbers = sort numbers \n      \
    \  numbers = merge numbers \n        numbers = sort numbers \n        numbers\
    \ = merge numbers \n        numbers = sort numbers \n        numbers = merge numbers\
    \ \n        numbers = sort numbers \n        numbers = merge numbers \n      \
    \  numbers = sort numbers \n        numbers = merge numbers \n        numbers\
    \ = sort numbers \n        numbers = merge numbers \n        numbers = sort numbers\
    \ \n        numbers = merge numbers \n        numbers = sort numbers \n      \
    \  numbers = merge numbers \n        numbers = sort numbers \n        numbers\
    \ = merge numbers \n        numbers = sort numbers \n        numbers = merge numbers\
    \ \n        numbers = sort numbers \n        numbers = merge numbers \n      \
    \  numbers = sort numbers \n        numbers = merge numbers \n        number",
  "    list = numbers.split(\" \")\n    for n in list\n        if n == \"zero\"\n\
    \            list.remove(n)\n            if n == 0\n                list.remove(\"\
    zero\")\n            end\n        end\n    end\n    string = join(list, \" \"\
    )\nend\n</cell>\n<text>\nLet's try it out!", "    local n = #numbers\n    if n\
    \ == 0 then\n        error(\"You didn't enter any numbers\")\n    end", "    numbers=split(numbers)\
    \ #Split numbers into a list\n    numbers=sort(numbers) #Sort numbers alphabetically\n\
    \    numbers=join(numbers) #Join sorted numbers back into a string\n    return\
    \ numbers\nend\n</cell>\n<text>\nQuestion: What is the output from the following\
    \ cell?", "    numbers_array = split(numbers, \" \")\n    numbers.sort()\n   \
    \ return join(numbers_array,\" \")\nend\n</code>\nIt can be called in the following\
    \ ways:\n<code>\nsort_numbers(\"four six two\") # => four six two\nsort_numbers(\"\
    six one three\") # => one six three\nsort_numbers(\"one six three\") # => one\
    \ six three\nsort_numbers(\"three one six seven\") # => three one six seven\n\
    sort_numbers(\"three seven two four\") # => three two four seven\nsort_numbers(\"\
    seven nine one three\") # => one three seven nine\nsort_numbers(\"nine seven three\
    \ four\") # => three four nine seven\n</code>\n<|/ a |>\n<| a dscore=2 |>\nThe\
    \ shortest one-liner is\n<code>\nsort_numbers(x -> split(x, \" \")[end - 1]; join(reverse(reverse(split(x,\
    \ \" \"))), \" \"))\n</code>\nThe reason why this works is explained in the documentation\
    \ for reverse:", "    \"\"\"\n    Input: string of numbers from 0 to 9\n    Output:\
    \ string with the numbers sorted in ascending order\n    \"\"\"\n    return \n\
    \    return \n</cell>\n<text>\nQ9. Write a function that sorts words in alphabetical\
    \ order\nInput: A string with any amount of words\nOutput: A string with the words\
    \ in alphabetical order\nThe words are separated by a single space. \nFor example,\
    \ if the input string is \"three two one\", the output string should be \"one\
    \ two three\".", "    str = numbers\n    for char in str:\n        if char ==\
    \ \"0\" or char == \"1\":\n            str = str.replace(char,\" \")\n    return\
    \ str\n</code>\n<|/ a dscore=0 |>\n<| c |>\nOkay, I see what you mean by putting\
    \ it into a list and sorting it. I didn't think of that, thank you.\n<|/ c |>\n\
    <| c |>\nYou don't have to put it into a list first. You can do everything with\
    \ one line of code. Just put the numbers into a string instead of splitting them\
    \ into multiple lines of code. Then, just call the `sort()` method and pass the\
    \ result into your `string` variable.\n<|/ c |>\n<| a dscore=0 |>\nYou don't need\
    \ to sort the strings. You can use the map() function in Haskell. Here is a simple\
    \ example:\n<code>\nmap show [1,2,3,4,5,6,7,8,9,10]\n</code>\nWhich outputs:\n\
    <code>\n\"11111111111\"\n</code>\nmap() takes a function and a list, and returns\
    \ another list with the function applied to each element in the list.\n<|/ a tags=python\
    \ |>\n<| a tags=python dscore=0 |>\nHere is one solution that uses a dict and\
    \ a list comprehension.\nThis solution does not use regular expressions:\n<code>\n\
    my_string = 'one two three four five six seven eight nine'", "    \n    numbers_arr\
    \ = split(numbers, \" \")\n    numbers_sorted = []\n    for num_str in numbers_arr\
    \ do\n        numbers_sorted.push(*num_str)\n    end\n    \n    \n    return join(numbers_sorted,\
    \ \" \")\nend", "    if numbers.isEmpty() || numbers == \"zero\"\n        return\
    \ \"\"\n    else if numbers == \"one\"\n        return \"zero\"\n    else if numbers\
    \ == \"two\"\n        return \"one\"\n    else if numbers == \"three\"\n     \
    \   return \"two\"\n    else if numbers == \"four\"\n        return \"three\"\n\
    \    else if numbers == \"five\"\n        return \"four\"\n    else if numbers\
    \ == \"six\"\n        return \"five\"\n    else if numbers == \"seven\"\n    \
    \    return \"six\"\n    else if numbers == \"eight\"\n        return \"seven\"\
    \n    else if numbers == \"nine\"\n        return \"eight\"\n    else if numbers\
    \ == \"ten\"\n        return \"nine\"\n    else if numbers == \"eleven\"\n   \
    \     return \"ten\"\n    else if numbers == \"twelve\"\n        return \"eleven\"\
    \n    else if numbers == \"thirteen\"\n        return \"twelve\"\n    else if\
    \ numbers == \"fourteen\"\n        return \"thirteen\"\n    else if numbers ==\
    \ \"fifteen\"\n        return \"fourteen\"\n    else if numbers == \"sixteen\"\
    \n        return \"fifteen\"\n    else if numbers == \"seventeen\"\n        return\
    \ \"sixteen\"\n    else if numbers == \"eighteen\"\n        return \"seventeen\"\
    \n    else if numbers == \"nineteen\"\n        return \"eighteen\"\n    else if\
    \ numbers == \"twenty\"\n        return \"nineteen\"\n    else\n        return\
    \ \"no match\"\nend\n</code>\n<|/ a tags=string,lua,sorting,pattern-matching |>\n\
    <| c |>\nIf anyone is interested, I ported this to javascript here: https://gist.github.com/jweyrich/8334878\n\
    <|/ c |>\n<| a |>\nI wrote a quick lua script to solve this problem.  It's a fairly\
    \ straightforward problem if you understand the pattern of sorting.\n<code>",
  "    # Your code here\n    return numbers\n</cell>\n<cell>\n\"\"\"\n    Problem\
    \ #3 - Write a function that takes an array of numbers and returns an array in\
    \ which each element\n                   is incremented by one.\n    e.g. [1,2,3]\n\
    \    >>> increment_array(arr = [1,2,3])\n    \n    Result should be [2,3,4]\n\
    \    \n    When incrementing an array by 1, the new array should contain the elements\
    \ of the original array plus one\n    e.g. [1,2,3] + 1 = [2,3,4]\n    \n    When\
    \ the new array has more than one element the function should return the entire\
    \ array\n    >>> increment_array(arr = [1,2,3])\n    [2,3,4]\n    >>> increment_array(arr\
    \ = [1,2])\n    [1,3]\n    >>> increment_array(arr = [1,2,3,4])\n    [1,2,3,5]\n\
    \    \"\"\"", "    \"\"\"\n    Input is a space-delimited string of numberals\
    \ from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three',\
    \ 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with\
    \ numbers sorted from smallest to largest\n    >>> sort_numbers(\"three one five\"\
    )\n    \"one three five\"\n    \"\"\"", "    numbers = numbers.split(\" \")\n\
    \    numbers = [x for x in numbers if x in \"zero one two three four five six\
    \ seven eight nine\"]\n    numbers.sort\n    return \" \".join(numbers)\nend",
  "     numbers = numbers::String \n     numbers = numbers[1:end-1] \n     return\
    \ numbers \nend\n</code>\n<|/ a tags=julia dscore=1 |>\n<| a dscore=0 |>\nIf you're\
    \ happy to use the regex package:\n<code>\nusing Pkg; Pkg.add(\"Regex\")\nusing\
    \ Regex\ns = \"three one five\"\nm = Regex(\"\\d+\")\nmatch(rg\"\\d+\", s)\n</code>\n\
    <|/ a tags=julia |>\n<| c |>\nI think the OP is looking for `split` but I can't\
    \ see how your solution would be better than `split` with `space`\n<|/ c |>\n\
    <| c |>\nI suppose I didn't read the question carefully enough... and I suppose\
    \ that my solution is more general.\n<|/ c |>\n<| a |>\nThis is a different take\
    \ on it.  I agree with that split is a better choice in this case.  I'm leaving\
    \ my answer here since it has a good use of split, though it would be worth adding\
    \ a benchmark to see if it performs any better.  It also does a linear search\
    \ for each number instead of an optimized search with binary search.\n<code>",
  "    local new_numbers::String\n    local n::String\n    new_numbers::String = \"\
    \"\n    for n in numbers do\n        if n ~= \"zero\" and n ~= \"one\" and n ~=\
    \ \"two\" and n ~= \"three\" and n ~= \"four\" and n ~= \"five\" and n ~= \"six\"\
    \ and n ~= \"seven\" and n ~= \"eight\" and n ~= \"nine\" then\n            new_numbers\
    \ = new_numbers + \" \" + n\n        end\n    end\n    new_numbers = new_numbers.Trim()\n\
    \    new_numbers = new_numbers.Replace(\" \", \"\")\n    new_numbers = new_numbers.Replace(\"\
    \\n\", \"\")\n    new_numbers = new_numbers.Replace(\"\\r\", \"\")\n    return\
    \ new_numbers\nend\n</code>\n<|/ a |>\n<| c |>\nThe problem is when given numbers\
    \ \"fourteen\" and \"four\", this solution will return \"four fourteen\" which\
    \ is not the result the OP wants.\n<|/ c |>\n<| c |>\nYes, that's right, I edited\
    \ the answer. Thanks for the catch.\n<|/ c |>\n<| a tags=string,lua,sorting dscore=1\
    \ |>\nI assume by \"space\" you mean \"digits\", since \"eight\" is greater than\
    \ \"four\".\n<code>", "\"\"\"\n    Input is a space-delimited string of numberals\
    \ from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three',\
    \ 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with\
    \ numbers sorted from smallest to largest\n    \"\"\"\n    \n    return \"\"\n\
    \    \n\"\"\"\n    Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',\
    \ 'six', 'seven', 'eight' and 'nine'.\n    Return a string with a number repeated\
    \ a set number of times (a list)\n    >>> sort_numbers(\"two seven zero four\"\
    )\n    \"two seven zero four\"\n    \"\"\"", "    if numbers == \"zero\"\n   \
    \     return \"zero\"\n    else if numbers == \"one\"\n        return \"one\"\n\
    \    else if numbers == \"two\"\n        return \"two\"\n    else if numbers ==\
    \ \"three\"\n        return \"three\"\n    else if numbers == \"four\"\n     \
    \   return \"four\"\n    else if numbers == \"five\"\n        return \"five\"\n\
    \    else if numbers == \"six\"\n        return \"six\"\n    else if numbers ==\
    \ \"seven\"\n        return \"seven\"\n    else if numbers == \"eight\"\n    \
    \    return \"eight\"\n    else if numbers == \"nine\"\n        return \"nine\"\
    \n    else if numbers == \"ten\"\n        return \"ten\"\n    else if numbers\
    \ == \"eleven\"\n        return \"eleven\"\n    else if numbers == \"twelve\"\n\
    \        return \"twelve\"\n    else if numbers == \"thirteen\"\n        return\
    \ \"thirteen\"\n    else if numbers == \"fourteen\"\n        return \"fourteen\"\
    \n    else if numbers == \"fifteen\"\n        return \"fifteen\"\n    else if\
    \ numbers == \"sixteen\"\n        return \"sixteen\"\n    else if numbers == \"\
    seventeen\"\n        return \"seventeen\"\n    else if numbers == \"eighteen\"\
    \n        return \"eighteen\"\n    else if numbers == \"nineteen\"\n        return\
    \ \"nineteen\"\n    else if numbers == \"twenty\"\n        return \"twenty\"\n\
    \    else if numbers == \"thirty\"\n        return \"thirty\"\n    else if numbers\
    \ == \"forty\"\n        return \"forty\"\n    else if numbers == \"fifty\"\n \
    \       return \"fifty\"\n    else if numbers == \"sixty\"\n        return \"\
    sixty\"\n    else if numbers == \"seventy\"\n        return \"seventy\"\n    else\
    \ if numbers == \"eighty\"\n        return \"eighty\"\n    else if numbers ==\
    \ \"ninety\"\n        return \"ninety\"\n    else if numbers == \"hundred\"\n\
    \        return \"hundred\"\n    else if numbers == \"thousand\"\n        return\
    \ \"thousand\"\n    else if numbers == \"million\"\n        return \"million\"\
    \n    else if numbers == \"billion\"\n        return \"billion\"\n    else if\
    \ numbers == \"trillion\"\n        return \"trillion\"\n    else if numbers ==\
    \ \"quadrillion\"\n        return \"quadrillion\"\n    else if numbers == \"quintillion\"\
    \n        return \"quintillion\"\n    else if numbers == \"sextillion\"\n    \
    \    return \"", "  numbers = numbers.split(\" \")\n  result = \"\"\n  for n in\
    \ numbers\n    if n > 9\n      result += str(9 - n) + \" \"\n    else\n      result\
    \ += n + \" \"\n  return result\n</code>\n<|/ a dscore=3 |>\n<| a |>\nHere is\
    \ a simple code which returns an array with the digits in reverse order:\n<code>",
  "    numberlist = String.split(numbers, \" \")\n    sorted_numbers = List.sort[numberlist]\n\
    \    numberstring = List.join(\" \", sorted_numbers)\n    return numberstring\n\
    end", "</code>\nYou should be able to adapt this for your use.\n<|/ a dscore=1\
    \ |>\n<| c |>\nThanks but that doesn't explain how I would go about implementing\
    \ it in Julia.\n<|/ c |>\n<| c |>\nIf you don't understand the code, then you\
    \ should ask another question.  StackOverflow works best when we can see that\
    \ code you're not understanding.  We can't really answer how to use this particular\
    \ function.\n<|/ c |>\n<| c |>\nOkay, I'll ask another question, I'm also going\
    \ to try and implement it in another language. Thanks.\n<|/ c |>\n<| a dscore=1\
    \ tags=sorting,julia |>\nMy implementation:\n<code>", "  local sortedNums = \"\
    \"\n  for num in numbers:\n    if num == \"nine\":\n      sortedNums = sortedNums\
    \ + \"nine \"\n    elif num == \"eight\":\n      sortedNums = sortedNums + \"\
    eight \"\n    elif num == \"seven\":\n      sortedNums = sortedNums + \"seven\
    \ \"\n    elif num == \"six\":\n      sortedNums = sortedNums + \"six \"\n   \
    \ elif num == \"five\":\n      sortedNums = sortedNums + \"five \"\n    elif num\
    \ == \"four\":\n      sortedNums = sortedNums + \"four \"\n    elif num == \"\
    three\":\n      sortedNums = sortedNums + \"three \"\n    elif num == \"two\"\
    :\n      sortedNums = sortedNums + \"two \"\n    elif num == \"one\":\n      sortedNums\
    \ = sortedNums + \"one \"\n    elif num == \"zero\":\n      sortedNums = sortedNums\
    \ + \"zero \"\n  return sortedNums\nend\n</cell>\n<code language=julia-0.4>\n\
    # Testing sort_numbers\ntest_sort_numbers()\n</cell>\n<text>\nPart 4: Creating\
    \ and using the LISP code snippets that you wrote earlier\nThe next two sections\
    \ are going to be using the LISP code snippets that you wrote earlier to solve\
    \ the problems we looked at in class. First we are going to create a set of functions\
    \ that will make use of our previous functions. In this first exercise we will\
    \ focus on how to write code that uses a LISP style of coding. We will write our\
    \ functions so that they take an input string of numbers and output a sorted string\
    \ of numbers. The output will look exactly like the LISP style output.", "   \
    \ if numbers isa String then\n        if numbers.size == 0 then error(\"expected\
    \ string of numbers\", 1)\n        else if numbers.size < 1 then error(\"expected\
    \ string of numbers\", 1)\n        else if sort_numbers(numbers[1:]).isa String\
    \ then \n            numbers ++ sort_numbers(numbers)\n        else\n        \
    \    numbers\n        end\n    elseif numbers == nil then error(\"expected string\
    \ of numbers\", 1)\n    else\n        error(\"expected string of numbers\", 1)\n\
    \    end\nend\n</cell>\n<code language=julia-1.0>", "    numbers = numbers.split(\"\
    \ \")\n    numbers.sort\n    return numbers.join(\" \")\n</code>\n<|/ a dscore=2\
    \ |>\n<| a |>\nYou can try something like\n<code>", "    \"\"\"Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    \"\"\"\n</code>\n\
    <|/ a tags=julia |>\n<| a tags=julia |>\nHere's a solution that uses map and reduce:\n\
    <code>", "    numbers\nend", "  numbers_as_strings = numbers.split(\" \")\n  result\
    \ = \"\"\n  for number in numbers_as_strings\n    result += number + \" \";\n\
    \  end\n  return result\nend\n</code>\n<|/ a tags=julia,string |>\n<| a dscore=1\
    \ |>\nJulia 1.0 solution:\n<code>", "  if  numbers == \"\" then return numbers\
    \ \n  numbers = numbers.split(\" \")\n  numbers = filter(is_number, numbers)\n\
    \  numbers = sort(numbers)\n  return join(numbers, \" \")\nend", "  str = numbers::String\n\
    \  for i in str.split(\" \")\n    str::String = i::String\n  end\n  return str\n\
    end", "    numbers_arr = split(numbers, \" \")\n    numbers_arr = sort(numbers_arr)\n\
    \    numbers = join(numbers_arr, \" \")\n    return numbers\n</code>\nI hope this\
    \ helps.\n<|/ a tags=sorting,haskell,list dscore=1 |>\n<| c |>\nI tried to implement\
    \ this, using the `sort` function, but I didn't know where to put it. I edited\
    \ my question with the code I tried, can you help me understand what I'm doing\
    \ wrong?\n<|/ c |>\n<| c |>\nI have edited my answer with your code. Hope it helps\
    \ you. Let me know if you need further help.\n<|/ c |>\n<| a |>\nIn addition to\
    \ the excellent answers posted so far, I find it useful to first explain what\
    \ the function sort does. sort is one of the core functions in the standard library.\
    \ It takes a list and returns a sorted version of it. The list can be made of\
    \ a lot of different types of elements, including tuples, lists, strings, and\
    \ numbers. The sort function can take one of several types as an argument:", " \
    \   \nend\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThank you for your response. This\
    \ helps a lot although I'm going to have to look into it some more.\n<|/ c |>\n\
    <| a |>\nThere are many ways to do this. One is to use regular expressions --\
    \ which can get quite confusing if you don't know what you're doing. I'm going\
    \ to use regex to isolate all digits in the string and sort them. You can use\
    \ other methods to identify where the numbers are (i.e. using regex).\n<code>\n\
    str = \"one two three four five six seven eight nine\"\nmatches = re.findall(r'\\\
    d+', str)\nmatches.sort()\nstr2 = ' '.join(matches)\nprint(str2)\n</code>\nThe\
    \ regex r'\\d+' identifies any digits that are found between spaces -- so \"123\
    \ 456 789\" would yield ['123', '456', '789']. re.findall() returns a list of\
    \ matches -- so matches is ['123', '456', '789']. sort() then sorts those list\
    \ numbers from smallest to largest.\n<|/ a dscore=2 tags=string,lua,sorting |>\n\
    <| a |>\nThis should work:\n<code>", "    \"Sort numbers from smallest to largest\"\
    \n    for a in split(numbers,\" \")\n        sort_numbers(a)\n    return numbers\n\
    end\n</code>\nNow it works as follows:\n<code>\njulia> sort_numbers(\"one two\
    \ three four five\")\n\"one two three four five\"\n</code>\nAnd now for the second\
    \ question:\n<code>\njulia> sort_numbers(\"one three seven eight\")\n\"one three\
    \ seven eight\"\n</code>\nAnd it works as well:\n<code>\njulia> sort_numbers(\"\
    three six seven eight\")\n\"three six seven eight\"\n</code>\nAnd it works as\
    \ well:\n<code>\njulia> sort_numbers(\"three six six seven eight\")\n\"three six\
    \ six seven eight\"\n</code>\nAnd it works as well:\n<code>\njulia> sort_numbers(\"\
    three six six three seven eight\")\n\"three six six three seven eight\"\n</code>\n\
    And it works as well:\n<code>\njulia> sort_numbers(\"three six six three seven\
    \ three eight\")\n\"three six six three seven three eight\"\n</code>\nAnd it works\
    \ as well:\n<code>\njulia> sort_numbers(\"three six six three three seven eight\"\
    )\n\"three six six three three seven eight\"\n</code>\nAnd it works as well:\n\
    <code>\njulia> sort_numbers(\"three six six three three three seven eight\")\n\
    \"three six six three three three seven eight\"\n</code>\nAnd it works as well:\n\
    <code>\njulia> sort_numbers(\"three six six three three three three three seven\
    \ eight\")\n\"three six six three three three three seven eight\"\n</code>\n<|/\
    \ a tags=julia,sorting |>\n<| a |>\n<code>\nsort_numbers(s) = sort!(split(s, \"\
    \\\\s+\"))", "    l = lengths(split(numbers))\n    l = sort(l)\n    l = join(l,\
    \ \" \")\nend", "</code>\n<|/ q tags=list,sorting,tuples,haskell,string |>\n<|\
    \ a dscore=2 tags=list,sorting,tuples,haskell,string |>\nI think your problem\
    \ is that you're trying to call a method on a String, not a list. You could fix\
    \ it by changing the first line of your function definition to\n<code>\nsort_numbers\
    \ :: String -> String\n</code>\nand calling it with sort_numbers \"three one five\"\
    .\nHowever, that's still not going to do what you want. Here's one possible solution:\n\
    <code>\nimport Data.Char (toUpper)\nimport Data.List (sortBy)\nimport Data.Maybe\
    \ (fromJust)", "    \n    numbers = string.split(numbers, \" \")\n    numbers.sort",
  "    \"\"\"\n    Input: A string with numbers from \"zero\" to \"nine\" separated\
    \ by spaces.\n    Output: A string with numbers from smallest to largest.\n  \
    \  >>> sort_numbers(\"three one five\")\n    \"one three five\"\n    \"\"\"\n\
    </code>\n<|/ q dscore=1 |>\n<| a dscore=0 |>\nThe function sort_numbers only sorts\
    \ a single string with multiple numbers in it. It needs to take a sequence of\
    \ strings and sort those.\n<code>\nsort_numbers(*numbers::String)::String =\n\
    \  Numbers <- numbers\n  Result <- String\n  while Number <- (readline(\"> \"\
    ))\n    Result <- Result ++ (Number ++ \" \")\n  putStrLn (Result ++ (sort (split\
    \ (Numbers, \" \"))))\n</code>\n<code>\n$ sort_numbers \"three one five\" \"two\
    \ seven\" \"nine two\" \"nine nine\"\none three five nine seven two\n</code>\n\
    <|/ a tags=smlnj,sml |>\n<| c |>\nWhat if the input is very large? Will that be\
    \ an issue? Is there any other way to approach this problem other than using strings?\n\
    <|/ c |>\n<| c |>\nThe above solution also works with very large numbers. Strings\
    \ are more space-efficient, unless you are looking for efficiency at very low\
    \ levels.\n<|/ c |>\n<| c |>\nThe above solution doesn't work for me as it doesn't\
    \ take strings as an input. Is there any other way to do it using other datatypes?\n\
    <|/ c |>\n<| c |>\nI edited the example to show how it works with a list of strings.\
    \ `sort` only works on strings so I changed it to a list of strings, split them\
    \ and use `sort` on that to sort.\n<|/ c |>\n<| c |>\nIf you're using strings,\
    \ how are you going to enter them in a prompt, if you're using a prompt to get\
    \ the input?\n<|/ c |>\n<| a tags=smlnj,sml |>\nHere is a simple function that\
    \ accepts a space delimited list of integers and returns them sorted from smallest\
    \ to largest.\n<code>\nfun sortNumbers(numbers::string)=\n  let val lst=String.explode\
    \ numbers end\n  in\n    String.concat (String.sort (String.split (String.join\
    \ \" \",lst)))\n  end\n</code>\nTo use:\n<code>\n- sortNumbers \"1 2 3 4\" ;\n\
    val it = \"1 2 3 4\" : string\n</code>\n<|/ a dscore=0 |>\n<| c |>\n", "    numbers\
    \ = numbers.split(\" \")\n    numbers = map(String.toLower, numbers)\n    numbers\
    \ = sort(numbers)\n    numbers = map(String.toNumber, numbers)\n    return join(\"\
    \ \", numbers)\nend\n</cell>\n<code language=julia-1.5>", "    numbers = split_into_numbers(numbers)\n\
    \    numbers = sort_numbers_from_zero(numbers)\n    numbers = sort_numbers_from_one(numbers)\n\
    \    numbers = sort_numbers_from_two(numbers)\n    numbers = sort_numbers_from_three(numbers)\n\
    \    numbers = sort_numbers_from_four(numbers)\n    numbers = sort_numbers_from_five(numbers)\n\
    \    numbers = sort_numbers_from_six(numbers)\n    numbers = sort_numbers_from_seven(numbers)\n\
    \    numbers = sort_numbers_from_eight(numbers)\n    numbers = sort_numbers_from_nine(numbers)\n\
    \    return join_numbers(numbers)", "    let num_list = numbers.split(\" \")\n\
    \    let result: String = \"\"\n    let numbers = List.map extract_num(numlist)\
    \ num_list\n    let numbers = List.sort compare\n    List.iter (fun n -> result\
    \ += \" \" + n) numbers\n    result\nend\n</code>\n<|/ a dscore=0 |>\n<| c |>\n\
    Thanks for pointing out that mistake!\n<|/ c |>\n<| a tags=sorting,string,julia,arrays\
    \ |>\nApart from using sort to sort the array of numbers, you can also use sort!\
    \ to sort the array in place.  \n<code>\njulia> sort!(\"zero two four\", rev=true)\n\
    \"four two zero\"", "    \n    sort_numbers = \"\"\n    numbers = numbers.split(\"\
    \ \")\n    for i in numbers:\n        if i == \"zero\":\n            sort_numbers\
    \ = \"zero \"\n        elif i == \"one\":\n            sort_numbers = \"one \"\
    \n        elif i == \"two\":\n            sort_numbers = \"two \"\n        elif\
    \ i == \"three\":\n            sort_numbers = \"three \"\n        elif i == \"\
    four\":\n            sort_numbers = \"four \"\n        elif i == \"five\":\n \
    \           sort_numbers = \"five \"\n        elif i == \"six\":\n           \
    \ sort_numbers = \"six \"\n        elif i == \"seven\":\n            sort_numbers\
    \ = \"seven \"\n        elif i == \"eight\":\n            sort_numbers = \"eight\
    \ \"\n        elif i == \"nine\":\n            sort_numbers = \"nine \"\n    \
    \    else:\n            sort_numbers = sort_numbers + i\n            \n    return\
    \ sort_numbers", "</code>\nThe only thing I did not write was the main function\
    \ and how to use the function. I wrote the function and then used the main function.\n\
    <code>\n\"\"\"\nmain function\n\"\"\"\nif isinteractive()\n    main\nelse\n  \
    \  main\n</code>\nNow the program runs and returns exactly what I want. I am not\
    \ sure if this is the most efficient way to do it, but it works and it works on\
    \ my macbook air and my phone.\n<|/ a |>\n<| c |>\nNice solution. I've used this\
    \ one myself. Although, I wrote a function using sort! But your solution is way\
    \ shorter.\n<|/ c |>\n<| a |>\nYou can use sort:\n<code>\nsort -n -u my_list \n\
    </code>\nIt will give output as:\n<code>\none three five\n</code>\n<|/ a tags=bash,shell,sorting,macos,unix\
    \ dscore=4 |>\n<| c |>\nThank you for this suggestion, but this doesn't solve\
    \ the problem. The output has to be exactly \"one three five\". Yours outputs\
    \ the words \"one\" then \"three\" then \"five\".\n<|/ c |>\n<| c |>\nI didn't\
    \ know this one before. Thank you for this!\n<|/ c |>\n<| a tags=bash,shell,sorting,macos,unix\
    \ |>\nThe sort utility can do this. If your file is in test.txt, try:\n<code>\n\
    sort -n test.txt\n</code>\nThis sorts the file numerically by field (first field)\
    \ and outputs to standard output.\n<|/ a dscore=4 |>\n<| c |>\nThanks for this.\
    \ I did try it and it does work, but is there a way to do this without having\
    \ to type the name of an actual file? For example, say I have a list of 100 random\
    \ names, can I do the same thing, without actually typing \"test.txt\" and still\
    \ get the same result?\n<|/ c |>\n<| c |>\nYou can't have \"a list of 100 random\
    \ names\" without having a file that has them... you need a file to sort.\n<|/\
    \ c |>\n<| c |>\nYou can use a pipe, `sort -n|sort` and have this work with any\
    \ number of lines in the file.\n<|/ c |>\n<| a tags=bash,shell,sorting,macos,unix\
    \ |>\nYou could also use awk to print the desired output:\n<code>\necho \"one\
    \ three five\" | awk '{print $1 \" \" $2 \" \" $3 \" \" $4}'\n</code>\n<|/ a dscore=2\
    \ |>\n<| c |>\n", "    \"\"\"\n    Implement the SORT_NUMBERS function below.",
  "    sort_list = string_split(numbers, \" \")\n    sorted_numbers = \"\"\n    for\
    \ n in sort_list:\n        if n == \"zero\": sorted_numbers += \"0\"\n       \
    \ elif n == \"one\": sorted_numbers += \"1\"\n        elif n == \"two\": sorted_numbers\
    \ += \"2\"\n        elif n == \"three\": sorted_numbers += \"3\"\n        elif\
    \ n == \"four\": sorted_numbers += \"4\"\n        elif n == \"five\": sorted_numbers\
    \ += \"5\"\n        elif n == \"six\": sorted_numbers += \"6\"\n        elif n\
    \ == \"seven\": sorted_numbers += \"7\"\n        elif n == \"eight\": sorted_numbers\
    \ += \"8\"\n        elif n == \"nine\": sorted_numbers += \"9\"\n        else:\
    \ sorted_numbers += str(int(n))\n    return sorted_numbers\n</code>\n<|/ a |>\n\
    <| c |>\nThank you! That definitely makes things a lot cleaner :)\n<|/ c |>\n\
    <| c |>\nI used this approach but with a twist: I used \"sorted_numbers += str(int(n))\"\
    .  Just to clarify, str(int(n)) is converting n to a string, and it is being appended\
    \ to sorted_numbers, right?\n<|/ c |>\n<| c |>\nYes, that is correct. You are\
    \ building a string as you go along, so the conversion is being done in place.\n\
    <|/ c |>\n<| a |>\nI modified the approach above to make the output a little more\
    \ readable (less repeated words). This version will allow the user to input any\
    \ number 1-9, and it will sort the numbers from smallest to largest. It uses recursion\
    \ to keep track of the sorted number list. It will also print the numbers once\
    \ sorted.\n<code>\n# Given a number, return the number in sorted order\n# Assume\
    \ only positive integers exist in the input", "    \n    words = split(numbers,\
    \ \" \")\n    \n    numbers = \"\"\n    for word in words do\n        numbers\
    \ = numbers + tostring(word) + \" \"\n        \n    return numbers", "    numbers\
    \ = String[numbers]\n    numbers = sort(numbers, ascending = true)\n    return\
    \ numbers\n</code>\n<|/ a tags=wolfram-mathematica,sorting |>\n<| a dscore=2 tags=wolfram-mathematica,sorting\
    \ |>\n<code>\nClearAll[sort_nums, sort_nums_rev, sort];\nsort_nums[val_] := Block[{i,\
    \ n},\n i := 0;\n While[i < Length[val], i++, n := Integer[val[i]]];\n Sort[Range[n,\
    \ -1, -1] /. #2 -> #] &]\n</code>", "    # Return an error if there are no numbers,\
    \ or if the input is not a string\n    if length(numbers) == 0 then return \"\
    error: input is not a string\" \n    # Otherwise, return the string with numbers\
    \ sorted from smallest to largest\n    else return join(split(numbers, ' '), '\
    \ ', sortAscending=true)\nend \n</cell>\n<text>\nProblem 6 (50 points)\nA function\
    \ 'sort_words' that sorts words in alphabetical order from smallest to largest.\n\
    This works only on words of length > 1, and only uses lowercase letters.  Return\
    \ an error if the string is not a string.", "    \"\"\"Sort a space delimited\
    \ string of numbers from 'zero' to 'nine'\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"\
    three one five\")\n    \"one three five\"\n    \"\"\"\nend", "\"\"\"\n    \n\"\
    \"\"\n    sort_numbers! \n    Input is a space-delimited string of numberals from\
    \ 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers\
    \ sorted from smallest to largest\n    but with exclamation points on every number\n\
    \    >>> sort_numbers!(\"three one five\")\n    \"three !one !five\"\n    \"\"\
    \"", "    if numbers == \"\" \n        return \"zero\"\n    numbers :: String\n\
    \    numbers = numbers[:]\n    numbers = numbers.replace(\",\",\".\")\n    numbers\
    \ = numbers.replace(\".\",\",\")\n    numbers = numbers.replace(\"e\",\"e\")\n\
    \    numbers = numbers.replace(\"e\",\"\")\n    numbers = numbers.replace(\"-\"\
    ,\"\")\n    numbers = numbers.replace(\"0\",\"\")\n    numbers = numbers.replace(\"\
    1\",\"\")\n    numbers = numbers.replace(\"2\",\"\")\n    numbers = numbers.replace(\"\
    3\",\"\")\n    numbers = numbers.replace(\"4\",\"\")\n    numbers = numbers.replace(\"\
    5\",\"\")\n    numbers = numbers.replace(\"6\",\"\")\n    numbers = numbers.replace(\"\
    7\",\"\")\n    numbers = numbers.replace(\"8\",\"\")\n    numbers = numbers.replace(\"\
    9\",\"\")\n    numbers = numbers.replace(\"e\",\"\")\n    numbers = numbers.replace(\"\
    ,\",\"\")\n    numbers = numbers.replace(\".\",\"\")\n    numbers = strings.split(numbers)\n\
    \    numbers = sort_string_list(numbers)\n    numbers = join_string_list(numbers)\n\
    \    return numbers\n\"\"\"\n    Input is a space-delimited string of numberals\
    \ from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three',\
    \ 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with\
    \ numbers sorted from smallest to largest\n    >>> sort_numbers(\"three one five\"\
    )\n    \"one three five\"\n    \"\"\"", "</code>\n<|/ q dscore=0 |>\n<| c |>\n\
    The problem is here `myString.split().map {|x| x.to_i}`, your numbers are strings,\
    \ not integers. Please provide sample data which shows what you need and what\
    \ you get.\n<|/ c |>\n<| c |>\nWhat is the problem with that code?\n<|/ c |>\n\
    <| c |>\nI assume that you are getting `to_int` not `to_string` error.\n<|/ c\
    \ |>\n<| c |>\nWhat is the problem with my code? What error do you get?\n<|/ c\
    \ |>\n<| c |>\nThe problem is that the code compiles but does not work as expected.\
    \ Try calling `sort_numbers(\"one two three four five\")`, for example.\n<|/ c\
    \ |>\n<| a tags=sorting,string,ruby |>\nThere are two bugs in your code:", "</code>\n\
    <|/ a tags=ocaml,recursion |>\n<| c |>\nIt should be noted that this does no error\
    \ checking. The `if ... else ...` could be replaced with a `match ... with` construct.\n\
    <|/ c |>\n<| c |>\nHow did you know that? I looked it up. Thanks.\n<|/ c |>\n\
    <| c |>\nI learned it from SO many years ago.\n<|/ c |>\n<| a |>\nThis solution\
    \ also uses recursion. I added comments on the code to explain what happens.\n\
    <code>\nlet rec sort_numbers xs = \n    match xs with \n    | [] -> []\n    |\
    \ h::t -> match h with \n        | \"zero\" -> sort_numbers t \n        | \"one\"\
    \ -> sort_numbers t \n        | \"two\" -> sort_numbers t \n        | \"three\"\
    \ -> sort_numbers t \n        | \"four\" -> sort_numbers t \n        | \"five\"\
    \ -> sort_numbers t \n        | \"six\" -> sort_numbers t \n        | \"seven\"\
    \ -> sort_numbers t \n        | \"eight\" -> sort_numbers t \n        | \"nine\"\
    \ -> sort_numbers t \n        | _ -> [(h)::sort_numbers t]\n</code>\n<|/ a dscore=2\
    \ tags=ocaml,recursion |>\n<| a tags=ocaml,recursion dscore=2 |>\n<code>\nlet\
    \ rec sort_numbers = function\n  | [] -> []\n  | h::t -> if h = \"zero\" then\
    \ sort_numbers (t) \n             else if h = \"one\" then sort_numbers (t) \n\
    \             else if h = \"two\" then sort_numbers (t) \n             else if\
    \ h = \"three\" then sort_numbers (t) \n             else if h = \"four\" then\
    \ sort_numbers (t) \n             else if h = \"five\" then sort_numbers (t) \n\
    \             else if h = \"six\" then sort_numbers (t) \n             else if\
    \ h = \"seven\" then sort_numbers (t) \n             else if h = \"eight\" then\
    \ sort_numbers (t) \n             else if h = \"nine\" then sort_numbers (t) \n\
    \             else [h] :: sort_numbers (t)\n</code>\n<|/ a |>\n<| c |>\n`else\
    \ [h] :: sort_numbers (t)` is the same thing as `[(h)::sort_numbers t]` though\n\
    <|/ c |>\n<| a |>\n<code>\nlet sort_numbers = \n  let rec au", "</code>\n<code>",
  "function sort_numbers(numbers::Array)::String\n\"\"\"", "    \"\"\"\n    Input:\
    \ string\n    Output: string (space-delimited)\n    Explanation: this function\
    \ sorts strings where the input has three or more numbers.\n    Valid choices\
    \ are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight',\
    \ 'nine'\n    Each number is separated by spaces and is sorted in ascending order.\n\
    \    \"\"\"", "    if numbers == \"\" \n        return \"\"\n    \n    numbers\
    \ = numbers.split(\" \")\n    \n    numbers.sort::(String)\n    return join(numbers,\
    \ \" \")\nend", "    \"\"\"Input is a space-delimited string of numberals from\
    \ 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers\
    \ sorted from smallest to largest\n    >>> sort_numbers(\"three one five\")\n\
    \    \"one three five\"\n    \"\"\"", "</code>\nSo to call this function, just\
    \ do this:\n<code>\nsort_numbers(\"three one five\")\n</code>\nYou can read more\
    \ about map/filter/reduce functions here.\n<|/ a |>\n<| c |>\nThank you for helping,\
    \ my prof wants us to write code without using any predefined functions.\n<|/\
    \ c |>\n<| c |>\nHow do you know what kind of data type the numbers are? Is it\
    \ a string? An array? A vector? A map? A tuple? It seems you need to learn the\
    \ fundamentals of programming to be successful.\n<|/ c |>\n<| c |>\nI'm really\
    \ sorry to bother you with this but how would I go about learning this? I am really\
    \ new to programming.\n<|/ c |>\n<| c |>\nI didn't mean to say that you should\
    \ learn this in advance, I meant that you should read the entire book about programming\
    \ fundamentals, maybe look at other tutorials, and read about the concepts such\
    \ as vectors, maps, and tuples. If you have a specific question about specific\
    \ topics like the subject of your homework, that's a much better way to get help\
    \ than asking random people on the internet. That's how we all learn, and that's\
    \ how you learn.\n<|/ c |>\n<| c |>\nI understand what you're saying and I apologize\
    \ for my ignorance on the topic but I am new to programming and this is my first\
    \ semester with programming. I think I understand what you're saying though so\
    \ thank you.\n<|/ c |>\n<| a dscore=0 tags=haskell |>\nFor a start you could make\
    \ two helper functions\n<code>\nfilterOne :: [Int] -> [Int] -> [Int]\nfilterOne\
    \ (x:xs) (y:ys) = if x < y then x:ys else xs", "    numbers = string.split(string.lower(numbers))\n\
    \    numbers.sort()\n    return \" \".join(numbers)", "    \"\"\"\n    Input is\
    \ a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices\
    \ are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and\
    \ 'nine'.\n    Return the string with numbers sorted from smallest to largest\n\
    \    \"\"\"\n    numbers = numbers \n    numbers = numbers.replace(\" \", \"\"\
    )\n    numbers = numbers.replace(\",\", \"\")\n    numbers = numbers.replace(\"\
    '\", \"\")\n    numbers = numbers.replace(\"-\", \"\")\n    numbers = numbers.replace(\"\
    (\", \"\")\n    numbers = numbers.replace(\")\", \"\")\n    numbers = numbers.replace(\"\
    +\", \"\")\n    numbers = numbers.replace(\"/\", \"\")\n    numbers = numbers.replace(\"\
    ;\", \"\")\n    numbers = numbers.replace(\"?\", \"\")\n    numbers = numbers.replace(\"\
    !\", \"\")\n    numbers = numbers.replace(\",\", \"\")\n    numbers = numbers.replace(\"\
    \ \", \"\")\n    numbers = numbers.replace(\"'\", \"\")\n    numbers = numbers.replace(\"\
    -\", \"\")\n    numbers = numbers.replace(\"(\", \"\")\n    numbers = numbers.replace(\"\
    )\", \"\")\n    numbers = numbers.replace(\"+\", \"\")\n    numbers = numbers.replace(\"\
    /\", \"\")\n    numbers = numbers.replace(\";\", \"\")\n    numbers = numbers.replace(\"\
    ?\", \"\")\n    numbers = numbers.replace(\"!\", \"\")\n    numbers = numbers.replace(\"\
    ,\", \"\")\n    numbers = numbers.replace(\"'\", \"\")\n    numbers = numbers.replace(\"\
    -\", \"\")\n    numbers = numbers.replace(\"(\", \"\")\n    numbers = numbers.replace(\"\
    )\", \"\")\n    numbers = numbers.replace(\"+\", \"\")\n    numbers = numbers.replace(\"\
    /\", \"\")\n    numbers = numbers.replace(\";\", \"\")\n    numbers = numbers.replace(\"\
    ?\", \"\")\n    numbers = numbers.replace(\"!\", \"\")\n    numbers = numbers.replace(\"\
    ,\", \"\")\n    numbers = numbers.replace(\"'\", \"\")\n    numbers = numbers.replace(\"\
    -\", \"\")\n    numbers = numbers.replace(\"(\", \"\")\n    numbers = numbers.replace(\"\
    )\", \"\")\n    numbers = numbers.replace(\"+\", \"\")\n    numbers = numbers.replace(\"\
    /\", \"\")\n    numbers = numbers.replace(\";\", \"\")\n    numbers = numbers.replace(\"\
    ?\", \"\")\n    numbers = numbers.replace(\"!\", \"\")\n    numbers = numbers.replace(\"\
    ,\", \"\")\n    numbers = numbers.replace(\"'\", \"\")\n    numbers = numbers.replace(\"\
    -\", \"\")\n    numbers = numbers.replace(\"(\", \"\")\n    numbers = numbers.replace(\"\
    )\", \"\")\n    numbers = numbers.replace(\"+\", \"\")\n    numbers = numbers.replace(\"\
    /\", \"\")\n    numbers = numbers.replace(\";\", \"\")\n    numbers = numbers.replace(\"\
    ?\", \"\")\n    numbers = numbers.replace(\"!\", \"\")\n    numbers = numbers.replace(\"\
    ,\", \"\")\n    numbers = numbers.replace(\"'\", \"\")\n    numbers = numbers.replace(\"\
    -\", \"\")", "    # Write your code here.\n    return numbers", "    sorted_numbers\
    \ = String[String]()\n    for number in numbers:\n        sorted_numbers = sorted_numbers\
    \ + \" \" + number\n    sorted_numbers = sorted_numbers[1..]\n    return sorted_numbers\n\
    end \"\"\"\n</cell>\n<cell>\nimport Jedi\n</cell>\n<cell>\n# %load ./solutions/python/sort_numbers.py\n\
    \"\"\"\nDescription\nGiven a string, sort it lexicographically with each number\
    \ separated by a space.\nThe numbers need to be in order from smallest to largest.\n\
    \    >>> sort_numbers(\"three one two\")\n    \"one two three\"\n\"\"\"", "  \
    \  let numbers_split::Array = numbers.split \" \"\n    let numbers_sorted_split::Array\
    \ = numbers_split.sort sortNumbers\n    Strings.join numbers_sorted_split\nend ",
  "    \"\"\"\n    Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\
    \n    \"\"\"\n</cell>\n<text>\nExercise: Re-run the sorting algorithm on our modified\
    \ version of print_numbers(). Remember to keep both the original print_number()\
    \ function and its modified version. Make sure the two versions produce the same\
    \ output.", "        numbers \u2190 numbers.split(\" \")\n        numbers2 \u2190\
    \ []\n        for (number in numbers)\n            do\n                if number\
    \ in [\"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\"\
    , \"eight\", \"nine\"]\n                    numbers2 \u2190 numbers + [number]\n\
    \        numbers2 \u2190 numbers2 drop 1\n        numbers \u2190 numbers2 join\
    \ \" \"\n        return numbers\n</code>\n<|/ a dscore=0 tags=sorting,arrays,julia\
    \ |>\n<| a tags=sorting,arrays,julia |>\nI wanted to add that I have found that\
    \ for very large arrays, using DataFrames yields better performance than looping:\n\
    <code>", "    return \n\"\"\"", "\"\"\"\n    sorts strings alphabetically\n\"\"\
    \"\n</code>\n<|/ a dscore=0 tags=string,function,algorithm,sorting,haskell |>\n\
    <| c |>\nThanks, this was a very helpful and educational post.\n<|/ c |>\n<| a\
    \ dscore=0 tags=string,function,algorithm,sorting,haskell |>\nI find it convenient\
    \ to use the Prelude's sortBy function for this sort of thing. It has the advantage\
    \ that it will only sort the part of the string that matches, and that it will\
    \ work for numeric strings such as \"four\" and \"fourteen\". It also has the\
    \ advantage of not being quite as expensive as a sort by using a custom comparison\
    \ function, although this is usually not an issue.\n<code>\nimport Data.List",
  "    valid_numbers = \"zero one two three four five six seven eight nine\"\n   \
    \ numbers = numbers.split(\" \")\n    numbers.sort()\n    return join(\" \", numbers)\n\
    end\n</cell>\n<text>\nProblem 4\nWrite a function to check whether an integer\
    \ is palindrome. An integer is a palindrome when reversed has the same digits\
    \ as the original. For example, the 12321 is a palindrome. The function should\
    \ return true if the integer is a palindrome and false if it is not.\n>>> is_palindrome(12321)\n\
    true\n>>> is_palindrome(123210)\nfalse\n\"\"\"", "    if numbers == \"zero\"\n\
    \        return \"one\"\n    elif numbers == \"one\"\n        return \"two\"\n\
    \    elif numbers == \"two\"\n        return \"three\"\n    elif numbers == \"\
    three\"\n        return \"four\"\n    elif numbers == \"four\"\n        return\
    \ \"five\"\n    elif numbers == \"five\"\n        return \"six\"\n    elif numbers\
    \ == \"six\"\n        return \"seven\"\n    elif numbers == \"seven\"\n      \
    \  return \"eight\"\n    elif numbers == \"eight\"\n        return \"nine\"\n\
    \    else\n        return \"zero\"\nend\n</code>\n<|/ a |>\n<| a dscore=1 |>\n\
    The other solutions are good, but this is how I solved it for my homework assignment\
    \ in F#:\n<code>\nlet rec sortNumbers n =\n  match n with\n  | 0 -> \"zero\"\n\
    \  | 1 -> \"one\"\n  | 2 -> \"two\"\n  | 3 -> \"three\"\n  | 4 -> \"four\"\n \
    \ | 5 -> \"five\"\n  | 6 -> \"six\"\n  | 7 -> \"seven\"\n  | 8 -> \"eight\"\n\
    \  | 9 -> \"nine\"\n  | n -> sortNumbers (n-1) + \"-\" + sortNumbers n", "   \
    \ \n    let numberArray = split_numbers(numbers)\n    \n    let sorted = array_sort(numberArray,\
    \ 1)\n    \n    let sortedString = join_numbers(sorted)", "    numbers=lowercase(numbers)\n\
    \    numbers=remove_spaces(numbers)\n    numbers=remove_punctuations(numbers)\n\
    \    numbers=remove_numbers(numbers)\n    numbers=remove_specials(numbers)\n \
    \   numbers=remove_blanks(numbers)\n    numbers=sort_numbers_list(numbers)\nend\n\
    </code>\n<|/ q dscore=0 |>\n<| c |>\nYour `sort_numbers` implementation makes\
    \ no sense. The `numbers=lowercase(numbers)` line is wrong and should be `numbers=lowercase(numbers::String)`.\
    \ You also have a `sort_numbers_list` function but you never call it. So you should\
    \ fix that first. And why do you have a `remove_numbers` function but you never\
    \ call it? And why do you have a `remove_punctuations` function but you never\
    \ call it? And why do you have a `remove_spaces` function but you never call it?\
    \ And why do you have a `remove_specials` function but you never call it? And\
    \ why do you have a `remove_blanks` function but you never call it? And why do\
    \ you have a `sort_numbers_list` function but you never call it? And why do you\
    \ have a `remove_numbers` (with an `s` at the end) function but you never call\
    \ it? Why are you repeating that same line of code over and over again? Plus you're\
    \ not even using it, so you should remove that line also. Lastly why are you calling\
    \ `lowercase` on `numbers` and then converting it to `String`? That should be\
    \ `lowercase(numbers::String)`\n<|/ c |>\n<| c |>\nI'm a complete newbie when\
    \ it comes to Julia and I made lots of mistakes. I did try to call sort_numbers_list(),\
    \ remove_punctuations(), remove_spaces(), remove_numbers(), remove_specials()\
    \ and remove_blanks() inside the function sort_numbers but I get an error saying\
    \ that sort_numbers_list() is a private function. I'm stuck and I've been trying\
    \ to solve this problem for more than 2 hours now. I also tried the suggested\
    \ solution in the comment below but I still get an error.\n<|/ c |>\n<| c |>\n\
    And as I said, your `sort_numbers` makes no sense. It's a method that sorts a\
    \ string and returns a string, yet it doesn't do anything with its arguments.\
    \ So if you call `sort_numbers(\"one three five\")` it should return `\"five one\
    \ three\"`, but your implementation does nothing. That's why you're getting that\
    \ error about `sort_numbers_list`. And if you call `sort_numbers` then `sort_numbers_list`\
    \ will never be called and you'll get an error. You're also ", "</code>\nWhich\
    \ would then be called as sort_numbers(\"three one five\")\nIt may or may not\
    \ be the most elegant solution, but it's a good starting point for solving your\
    \ problem.\n<|/ a tags=sorting,haskell,string |>\n<| c |>\n`concatMap` makes a\
    \ lot of sense, I was so focused on the other stuff that I completely forgot about\
    \ the `concat` function\n<|/ c |>\n<| c |>\n`concatMap` is more similar to `map`\
    \ than to `concat`.  In particular, `concatMap` is strict and `concat` is lazy.\n\
    <|/ c |>\n<| a |>\nI wouldn't use recursion in such case, just use simple foldr\
    \ function:\n<code>\nimport Data.List\nimport Data.Char\nimport Control.Monad",
  "    \"\"\"\n    Input: a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers(\"nine eight four\")\n    \"eight nine four\"\
    \n    \"\"\"", "    sort_number = sort\n    return sort_number(numbers)\nend\n\
    </cell>\n<code language=julia-1.6>\nsort_numbers(\"three one five\")\n</cell>\n\
    <text>\nThe first thing we will do is define a function that sorts lists.\nLet's\
    \ say we have a list of numbers, like so:", "    numbers = split(numbers, \" \"\
    )\n    numbers = sort(numbers)\n    return join(numbers, \" \")\nend\n</cell>\n\
    <text>\nAs an example of the use of the function, here are a few examples:", " \
    \   numbers = split(numbers, \" \")\n    numbers = sort(numbers)\n    return join(numbers,\
    \ \" \")\nend", "    if numbers == \"zero\"\n        return \"one\"\n    else\
    \ if numbers == \"one\"\n        return \"two\"\n    else if numbers == \"two\"\
    \n        return \"three\"\n    else if numbers == \"three\"\n        return \"\
    four\"\n    else if numbers == \"four\"\n        return \"five\"\n    else if\
    \ numbers == \"five\"\n        return \"six\"\n    else if numbers == \"six\"\n\
    \        return \"seven\"\n    else if numbers == \"seven\"\n        return \"\
    eight\"\n    else if numbers == \"eight\"\n        return \"nine\"\n    else if\
    \ numbers == \"nine\"\n        return \"one\"\n    else if numbers == \"two\"\n\
    \        return \"five\"\n    else if numbers == \"four\"\n        return \"three\"\
    \n    else if numbers == \"six\"\n        return \"seven\"\n    else if numbers\
    \ == \"eight\"\n        return \"nine\"\n    else if numbers == \"nine\"\n   \
    \     return \"one\"\n    else if numbers == \"three\"\n        return \"four\"\
    \n    else if numbers == \"five\"\n        return \"two\"\n    else if numbers\
    \ == \"one\"\n        return \"three\"\n    else if numbers == \"seven\"\n   \
    \     return \"six\"\n    else if numbers == \"eight\"\n        return \"five\"\
    \n    else if numbers == \"nine\"\n        return \"four\"\n    else if numbers\
    \ == \"zero\"\n        return \"one\"\n    else if numbers == \"four\"\n     \
    \   return \"two\"\n    else if numbers == \"three\"\n        return \"five\"\n\
    \    else if numbers == \"five\"\n        return \"three\"\n    else if numbers\
    \ == \"six\"\n        return \"four\"\n    else if numbers == \"one\"\n      \
    \  return \"two\"\n    else if numbers == \"three\"\n        return \"six\"\n\
    \    else if numbers == \"seven\"\n        return \"one\"\n    else if numbers\
    \ == \"eight\"\n        return \"five\"\n    else if numbers == \"two\"\n    \
    \    return \"three\"\n    else if numbers == \"nine\"\n        return \"two\"\
    \n    else if numbers == \"zero\"\n        return \"one\"\n    else if numbers\
    \ == \"five\"\n        return \"two\"\n    else if numbers == \"one\"\n      \
    \  return \"three\"\n    else if numbers == \"seven\"\n        return \"five\"\
    \n    else if numbers == \"eight\"\n        return \"six\"\n    else if numbers\
    \ == \"three\"\n        return \"nine\"\n    else if numbers == \"two\"\n    \
    \    return \"four\"\n    else if numbers == \"four\"\n        return \"five\"\
    \n    else if numbers ", "    \"\"\"\n    Input is a space-delimited string of\
    \ numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two',\
    \ 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the\
    \ string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"\
    three one five\")\n    \"one three five\"\n    \"\"\"\n    array = numbers.split(\"\
    \ \")\n    array.sort()\n    numbers = \" \".join(array)\n    return numbers",
  "    \"\"\"\n    Arg numbers is expected to be a space-delimited string of numberals\
    \ from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three',\
    \ 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with\
    \ numbers sorted from smallest to largest\n    >>> sort_numbers(\"three one five\"\
    )\n    \"one three five\"\n    \"\"\"\n    \n    numbers = numbers.split(\" \"\
    )\n    numbers = [int(n) for n in numbers]\n    numbers.sort()\n    return \"\
    \ \".join(str(n) for n in numbers)\n</code>\n<|/ a tags=python dscore=0 |>\n<|\
    \ a tags=python |>\nYou can just use the Python built-in sorted function for this.\
    \ It will sort a list numerically as you need.\n<code>\nnumbers = ['three', 'one',\
    \ 'five', 'two']\nnumbers = sorted('numbers')\n</code>\nThe numbers variable will\
    \ be ['one', 'three', 'five', 'two'].\n<|/ a dscore=0 |>\n<| c |>\nYes, I know\
    \ this, but I'm looking for a function which sorts strings alphabetically and\
    \ numbers from smallest to largest.\n<|/ c |>\n<| c |>\n`sorted(['three', 'one',\
    \ 'five', 'two'])` will work perfectly fine for that because `sorted` will do\
    \ the work for you.\n<|/ c |>\n<| c |>\n`sorted('numbers')` will just sort the\
    \ characters inside the string. You'd have to split the string first in order\
    \ to sort each word.\n<|/ c |>\n<| a dscore=0 tags=python |>\n<code>\ndef sort_numbers(numbers):\n\
    \    return \" \".join(sorted(numbers))", "\"\"\"\n    Implements our sort algorithm\n\
    \    function sort_numbers(numbers::String)\n        numbers = numbers::String\n\
    \    \"\"\"\n        numbers_as_string = numbers::String\n        numbers_as_string.replace(\"\
    ,\", \"\", -1)\n        numbers_as_string.replace(\"-\", \"\", -1)\n        numbers_as_string.replace(\"\
    .\", \"\", -1)\n        numbers_as_string.replace(\"+\", \"\", -1)\n        numbers_as_string.replace(\"\
    (\", \"\", -1)\n        numbers_as_string.replace(\")\", \"\", -1)\n        numbers_as_string.replace(\"\
    '\", \"\", -1)\n        numbers_as_string.replace(\",\", \"\", -1)\n        numbers_as_string.replace(\"\
    -\", \"\", -1)\n        numbers_as_string.replace(\".\", \"\", -1)\n        numbers_as_string.replace(\"\
    +\", \"\", -1)\n        numbers_as_string.replace(\"(\", \"\", -1)\n        numbers_as_string.replace(\"\
    )\", \"\", -1)\n        numbers_as_string.replace(\"'\", \"\", -1)\n        numbers_as_string.replace(\"\
    ,\", \"\", -1)\n        numbers_as_string.replace(\"-\", \"\", -1)\n        numbers_as_string.replace(\"\
    .\", \"\", -1)\n        numbers_as_string.replace(\"+\", \"\", -1)\n        numbers_as_string.replace(\"\
    (\", \"\", -1)\n        numbers_as_string.replace(\")\", \"\", -1)\n        numbers_as_string.replace(\"\
    '\", \"\", -1)\n        numbers_as_string\n    \"\"\"\n\"\"\"\n    Code to test\
    \ our program\n\"\"\"\nif True:\n    numbers_as_string = \"one three four five\
    \ six seven eight nine zero one\"\n    assert sort_numbers(numbers_as_string)\
    \ == \"\"\"zero one two three four five six seven eight nine\"\"\"\n    print(\"\
    All tests passed!\")\nelse:\n    print(\"You failed the test!\")\n\"\"\"\n   \
    \ Code to test our program\n\"\"\"\nif True:\n    numbers_as_string = \"four three\
    \ six seven five nine six four one\"\n    assert sort_numbers(numbers_as_string)\
    \ == \"\"\"zero one two three four five six seven eight nine\"\"\"\n    print(\"\
    All tests passed!\")\nelse:\n    print(\"You failed the test!\")\n\"\"\"\n   \
    \ Code to test our program\n\"\"\"\nif True:\n    numbers_as_string = \"one two\
    \ three four five six seven eight nine zero one\"\n    assert sort_numbers(numbers_as_string)\
    \ == \"\"\"zero one two three four five six seven eight nine\"\"\"\n    print(\"\
    All tests passed!\")\nelse:\n    print(\"You failed the test!\")\n\"\"\"", " \
    \   \"\"\"\n    In: a list of numbers\n    Out: the numbers in sorted order\n\
    \    \"\"\"", "    if numbers == \"\"\n        numbers = \"nine\"\n        \n\
    \    sorted_numbers = \"\"\n    \n    for number in numbers\n        if number\
    \ == \"zero\"\n            sorted_numbers = \"one\"\n        \n        elif number\
    \ == \"one\"\n            sorted_numbers = \"two\"\n        \n        elif number\
    \ == \"two\"\n            sorted_numbers = \"three\"\n        \n        elif number\
    \ == \"three\"\n            sorted_numbers = \"four\"\n        \n        elif\
    \ number == \"four\"\n            sorted_numbers = \"five\"\n        \n      \
    \  elif number == \"five\"\n            sorted_numbers = \"six\"\n        \n \
    \       elif number == \"six\"\n            sorted_numbers = \"seven\"\n     \
    \   \n        elif number == \"seven\"\n            sorted_numbers = \"eight\"\
    \n        \n        elif number == \"eight\"\n            sorted_numbers = \"\
    nine\"\n        \n        elif number == \"nine\"\n            sorted_numbers\
    \ = \"zero\"\n        \n    return sorted_numbers\n    \nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function named count_letters that:", '"""', "    return sort(numbers)\
    \ |> join(\" \")\n</code>\n<|/ a |>\n<| c |>\nThis doesn't solve the problem as\
    \ I see it. As far as I can tell, this is just a function that returns the input\
    \ in sorted order. While it's true that it's hard to understand the problem from\
    \ the code as posted, it seems to me that this solution doesn't take into account\
    \ the fact that the input may contain other characters (e.g. a line break).\n\
    <|/ c |>\n<| c |>\nThis is pretty much how `sort` works (which also uses `split`)\
    \ - it uses the splitter to separate the string into \"words\" (in this case numbers),\
    \ and each of those words are then sorted.\n<|/ c |>\n<| c |>\nYes, you're right,\
    \ I missed the fact that `sort` uses splitter - that's why I thought it's a partial\
    \ answer, and I didn't downvote it.\n<|/ c |>\n<| c |>\nThis solution is wrong\
    \ and was posted before the edit to the question that introduced an example that\
    \ made it clear that it is supposed to handle a line break and other whitespace\
    \ characters.\n<|/ c |>\n<| c |>\nYes, the original code doesn't handle whitespace,\
    \ which would mean the problem was incorrectly stated. However, it also didn't\
    \ handle the case where there were multiple numbers on a line, so `sort` didn't\
    \ work and `sort!` would have needed a slight tweak.\n<|/ c |>\n<| a dscore=3\
    \ tags=ocaml,sorting |>\nThe best answer so far is a variant on sort:\n<code>\n\
    let rec sort_numbers =\n  function\n  | [] -> []\n  | h::t -> \n    if h = \"\
    one\" then\n      h::sort_numbers t\n    else \n      h::sort_numbers (sort t)\n\
    </code>\nIt is possible to solve the problem more efficiently in O(n), but that\
    \ would require a more complex implementation than is really necessary.\nHere\
    \ is a simple one that uses sort in the obvious cases:\n<code>\nlet sort_numbers\
    \ s =\n  let s = String.concat \" \" (sort s) in\n  let parts = String.split (\"\
    \ \") s in\n  List.fold_right (fun acc x -> \n    if x = \"one\" then acc else\
    \ acc @ [x]) parts [\"\"]\n</code>\nHere is a more efficient version:\n<code>\n\
    let sort_numbers s =\n  let s = String.concat \" \" (sort s) in\n  let parts =\
    \ String.split (\" \") s in\n  List.fold_left (fun acc x -> \n    if x = \"one\"\
    \ then acc else acc @ ", "    if numbers == ''\n        numbers = 'zero'\n   \
    \ numbers = tostring(numbers)\n    return sort_numbers_helper(numbers)\nend",
  "    numbers = numbers.trim()\n    numbers = split(numbers, \" \")\n    let sorted\
    \ = sort(numbers)\n    joined = join(sorted, \" \")\n    return joined\n</code>\n\
    <|/ a tags=haskell |>\n<| a dscore=0 |>\nUsing list comprehensions:\n<code>\n\
    import Data.List (sort)", "    numbers = numbers.trim()\n    function sort_numbers(numbers::String)::String\n\
    \        function sort_numbers(numbers::String)::String\n            function\
    \ sort_numbers(numbers::String)::String\n                function sort_numbers(numbers::String)::String\n\
    \                    function sort_numbers(numbers::String)::String\n        \
    \                function sort_numbers(numbers::String)::String\n            \
    \                function sort_numbers(numbers::String)::String\n            \
    \                    function sort_numbers(numbers::String)::String\n        \
    \                            numbers = numbers.split(\" \")\n                \
    \                    numbers = numbers[1..end]\n                             \
    \       for number in numbers\n                                        if number\
    \ != \"zero\"\n                                            numbers = numbers +\
    \ \" \" + number\n                                    end\n                  \
    \                  return numbers\n                                end\n     \
    \                       end\n                        end\n                   \
    \ end\n                end\n            end\n        end\n    end\n    return\
    \ sort_numbers(numbers)\nend\n</code>\n<|/ a tags=sorting,function,lua |>\n<|\
    \ a |>\n<code>", "    \"\"\"\n    Input is a space-delimited string of numberals\
    \ from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three',\
    \ 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with\
    \ numbers sorted from smallest to largest\n    \"\"\"\n    if numbers == '' or\
    \ numbers == []:\n        return numbers\n    numbers = numbers.split(\" \")\n\
    \    numbers.sort()\n    sorted_numbers = \" \".join(numbers)\n    return sorted_numbers\n\
    </code>\nThe result is:\n<code>", "    return sort(numbers, by = length) \nend\n\
    </cell>\n<code language=julia-0.6>", "\"\"\"\n\"\"\"\n    \"\"\"\n    Input is\
    \ a space-delimited string of digitals from 'zero' to 'nine'.\n    Valid choices\
    \ are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and\
    \ 'nine'.\n    Return the string with numbers sorted from smallest to largest\n\
    \    >>> sort_numbers(\"three one five\")\n    \"one three five\"\n    \"\"\"",
  "    #Your code here\n    numbers = numbers.replace(\" \", \"\")\n    numbers =\
    \ numbers.replace(\",\", \"\")\n    numbers = numbers.replace(\"'\", \"\") \n\
    \    numbers = numbers.replace(\".\", \"\")\n    numbers = numbers.replace(\"\
    (\", \"\")\n    numbers = numbers.replace(\")\", \"\")\n    numbers = numbers.replace(\"\
    !\", \"\")\n    numbers = numbers.replace(\"?\", \"\")\n    numbers = numbers.replace(\"\
    /\", \"\")\n    numbers = numbers.replace(\"\\\\\", \"\")\n    numbers = numbers.replace(\"\
    $\", \"\")\n    numbers = numbers.replace(\"'\", \"\")\n    numbers = numbers.replace(\"\
    [\", \"\")\n    numbers = numbers.replace(\"]\", \"\")\n    numbers = numbers.replace(\"\
    {\", \"\")\n    numbers = numbers.replace(\"}\", \"\")\n    numbers = numbers.replace(\"\
    ,\", \"\")\n    numbers = numbers.replace(\"+\", \"\")\n    numbers = numbers.replace(\"\
    *\", \"\")\n    numbers = numbers.replace(\"-\", \"\")\n    numbers = numbers.replace(\"\
    .\", \"\")\n    numbers = numbers.replace(\"(\", \"\")\n    numbers = numbers.replace(\"\
    )\", \"\")\n    numbers = numbers.replace(\"!\", \"\")\n    numbers = numbers.replace(\"\
    ?\", \"\")\n    numbers = numbers.replace(\"/\", \"\")\n    numbers = numbers.replace(\"\
    \\\\\", \"\")\n    numbers = numbers.replace(\"$\", \"\")\n    numbers = numbers.replace(\"\
    '\", \"\")\n    numbers = numbers.replace(\"[\", \"\")\n    numbers = numbers.replace(\"\
    ]\", \"\")\n    numbers = numbers.replace(\"{\", \"\")\n    numbers = numbers.replace(\"\
    }\", \"\")\n    numbers = numbers.replace(\",\", \"\")\n    numbers = numbers.replace(\"\
    +\", \"\")\n    numbers = numbers.replace(\"*\", \"\")\n    numbers = numbers.replace(\"\
    -\", \"\")\n    numbers = numbers.replace(\".\", \"\")\n    numbers = numbers.replace(\"\
    (\", \"\")\n    numbers = numbers.replace(\")\", \"\")\n    numbers = numbers.replace(\"\
    !\", \"\")\n    numbers = numbers.replace(\"?\", \"\")\n    numbers = numbers.replace(\"\
    /\", \"\")\n    numbers = numbers.replace(\"\\\\\", \"\")\n    numbers = numbers.replace(\"\
    $\", \"\")\n    numbers = numbers.replace(\"'\", \"\")\n    numbers = numbers.replace(\"\
    [\", \"\")\n    numbers = numbers.replace(\"]\", \"\")\n    numbers = numbers.replace(\"\
    {\", \"\")\n    numbers = numbers.replace(\"}\", \"\")\n    numbers = numbers.replace(\"\
    ,\", \"\")\n    numbers = numbers.replace(\"+\", \"\")\n    numbers = numbers.replace(\"\
    *\", \"\")\n    numbers = numbers.replace(\"-\", \"\")\n    numbers = numbers.replace(\"\
    .\", \"\")\n    numbers = numbers.replace(\"(\", \"\")\n    numbers = numbers.replace(\"\
    )\", \"\")\n    numbers = numbers.replace(\"!\", \"\")\n    numbers = numbers.replace(\"\
    ?\", \"\")\n    numbers = numbers.replace(\"/\", \"\")\n    numbers = numbers.replace(\"\
    \\\\\", \"\")\n    numbers = numbers.replace(\"$\", \"\")\n    numbers = numbers.replace(\"\
    '\", ", "    numbers_arr = numbers.split(\" \")\n    numbers_arr.sort()\n    return\
    \ \" \".join(numbers_arr)\n</code>\n<|/ a dscore=5 |>\n<| a tags=string,sorting,haskell,string\
    \ |>\n<code>\n> import Data.List\n> sortBy (compare `on` toUpper . snd) $ map\
    \ toUpper \"Three One Four Five\"\n\"One Three Four Five\"\n</code>\n<|/ a dscore=4\
    \ |>\n<| a dscore=4 tags=string,sorting,haskell,string |>\nHere's an efficient\
    \ way to do it in O(n) time (i.e. without sorting the entire string in memory),\
    \ in Python because I had some time on my hands to figure it out:\n<code>\ndef\
    \ sort_string(string):\n    newchar = ''\n    lastchar = ''\n    chars = list(string)",
  "  \"\"\"\n  Given a String of numbers as input, return a string where each\n  number\
    \ is sorted smallest to largest.", "    numbers::String =\n        strings.split(numbers,\
    \ \" \")\n        |> List.sort\n        |> String.concat \" \"\n    return numbers::String\n\
    end\n</code>\n<|/ a tags=sorting,string,julia,arrays |>\n<| c |>\nHow would one\
    \ do this with lists instead?\n<|/ c |>\n<| c |>\n`sort(numbers, rev=true)` to\
    \ sort by descending order\n<|/ c |>\n<| a |>\nFor completeness, here are a couple\
    \ of approaches using regular expressions to extract numbers from a string and\
    \ sorting the numbers in Julia:\n<code>\njulia> s = \"The first number is  100\"\
    \n\"The first number is  100\"", "    numbers = sort_string_list(numbers)\n  \
    \  numbers.sort(compare)\n    return numbers.to_string(\" \")", "    valid_numbers\
    \ = EnumValues[String](\"zero\", \"one\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\", \"seven\", \"eight\", \"nine\")\n    numbers = lowercase(numbers)\n\
    \    sorted_numbers = \"\"\n    for number in numbers\n        if valid_numbers[number]\n\
    \            sorted_numbers = sorted_numbers + number + \" \" \n        end\n\
    \    end\n    sorted_numbers = sorted_numbers[2:end-2]\n    return sorted_numbers\n\
    end", "    # Write your code here\nreturn numbers[1..-2]\n</code>\n<|/ a dscore=0\
    \ tags=haskell,string |>\n<| a tags=haskell,string |>\nYou can sort a list of\
    \ numbers using map and sortBy, like so\n<code>\nimport Data.List (sortBy)", "</code>\n\
    And then I call it like this:\n<code>\nsort_numbers(\"three one five\")\n</code>\n\
    And it works. But I now want to try it with a variable number of numbers, but\
    \ it keeps saying \"Error: Non-exhaustive patterns in function sort_numbers\"\
    . I know that it is because I haven't provided a case for anything other than\
    \ zero, but how do I handle that if I only want to sort the integers 0-9? If I\
    \ just put a default case, it gives me an error. \n<code>\nsort_numbers(\"three\"\
    )\n</code>\n<|/ q dscore=1 |>\n<| c |>\nMaybe use an `Enum`? http://hackage.haskell.org/package/base-4.10.0.0/docs/Data-Enum.html\n\
    <|/ c |>\n<| c |>\nOr just [`sortOn`](http://hackage.haskell.org/package/base-4.10.0.0/docs/Data-List.html#v:sortOn)?\n\
    <|/ c |>\n<| c |>\nYou want a case for `\"zero\"` too. `sortOn` only accepts a\
    \ list.\n<|/ c |>\n<| a |>\nA cleaner version of what you're trying to do would\
    \ be:\n<code>\nsortNumbers = map read . words `on` [minBound .. maxBound]\n</code>\n\
    <|/ a tags=haskell,sorting dscore=3 |>\n<| a dscore=2 tags=haskell,sorting |>\n\
    To sort a list with any number of elements, you can use sortBy from Data.List.\
    \ sortBy compares two elements, in your case numbers, and then returns a function\
    \ that compares the next element with the first one. \nTo sort from min to max,\
    \ you need a function that compares two elements and returns a negative number\
    \ if first argument is smaller than second argument, or 0 if they are equal, and\
    \ a positive number if second argument is smaller than the first argument. \n\
    Since you have only a limited number of elements, you can just create a list of\
    \ integers, like this:\n<code>\nmap read . words $ \"three one five\"\n</code>\n\
    To compare two strings, we need the lexicographical order. For lexicographical\
    \ ordering, we need to convert each string into a list of characters, and then\
    \ compare them. \nTo convert a string to a list, we use the function words\n<code>\n\
    words $ \"three one five\"\n</code>\nwhich returns [ \"three\", \"one\", \"five\"\
    \ ]. \nTo convert each string to a list of characters, we can use the function\
    \ words\n<code>\nmap read . words $ \"three one five\"\n</code>\nwhich returns\
    \ [ \"3\",\"o\",\"n\",\"e\",\"1\",\"f\",\"", "    digits = split(numbers, \" \"\
    )\n    numbers = map(int, digits)\n    return join(map(str, numbers[2::]), \"\
    \ \")", "</code>\n<|/ a |>\n<| a tags=haskell |>\nA couple solutions, one using\
    \ pattern matching, and the other using list comprehension:\n<code>\nimport Data.Char",
  "    numbers = sort(numbers, by=length)\n    return join(numbers, \" \")", "   \
    \ \n    numbers \nend", "    numbers = [int(s) for s in numbers.split(\" \")]\n\
    \    numbers.sort()\n    return \" \".join(str(n) for n in numbers)\nend", " \
    \ -- The largest number is larger than the smallest number\n  local largest =\
    \ \n    if numbers.size > 0 then\n      tonumber(numbers[#numbers])\n    else\
    \ \n      0\n    end\n  local smallest = \n    if numbers.size > 0 then\n    \
    \  tonumber(numbers[1])\n    else \n      0\n    end\n  -- Iterate through the\
    \ list of numbers in order\n  local n = 0\n  local sortedNumbers = \"\"\n  while\
    \ n < numbers.size do\n    -- If the current number has a larger number than \n\
    \    -- smallest number, swap smallest and largest\n    if tonumber(numbers[n])\
    \ > smallest then\n      smallest = tonumber(numbers[n])\n    end\n    if tonumber(numbers[n])\
    \ < largest then\n      largest = tonumber(numbers[n])\n    end\n    \n    sortedNumbers\
    \ = sortedNumbers..numbers[n]\n    n = n + 1\n  end\n  \n  return sortedNumbers\n\
    end\n</cell>\n<code language=julia-1.2>\n\"\"\"\nsort_numbers(numbers::String)::String\n\
    \    Input is a space-delimited string of numberals from 'zero' to 'nine'.\n \
    \   Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\
    \n    \"\"\"", "    local string=\" \"\n    local spaces=split(numbers,\" \")\n\
    \    local array={}\n    local count=0\n    local largest=0\n    local smallest=1",
  "    numbers_array = splitlines(numbers)\n    sorted_array = sort!(numbers_array)\n\
    \    numbers_string = \"\\n\".join(sorted_array)\nend\n</cell>\n<code language=julia-1.0>",
  "    numbers::String = \"$numbers\"\n    numbers::String = \"$numbers\" | regex_replace($numbers,\
    \ \"[^0-9]\", \"\")\n    numbers::String = \"$numbers\" | regex_replace($numbers,\
    \ \" \", \"\")\n    numbers::String = \"$numbers\" | regex_replace($numbers, \"\
    ([a-z])\", \"$1 \")\n    numbers::String = \"$numbers\" | regex_replace($numbers,\
    \ \"([a-z])\", \"$1 \") | regex_replace($numbers, \" \", \"\")\n    numbers::String\
    \ = \"$numbers\" | regex_replace($numbers, \"([0-9])\", \"$1 \")\n    numbers::String\
    \ = \"$numbers\" | regex_replace($numbers, \"([0-9])\", \"$1 \") | regex_replace($numbers,\
    \ \" \", \"\")\n    numbers::String = \"$numbers\" | regex_replace($numbers, \"\
    ([A-Z])\", \"$1 \")\n    numbers::String = \"$numbers\" | regex_replace($numbers,\
    \ \"([A-Z])\", \"$1 \") | regex_replace($numbers, \" \", \"\")\n    numbers::String\
    \ = \"$numbers\" | regex_replace($numbers, \"([0-9])\", \"$1 \") | regex_replace($numbers,\
    \ \"([A-Z])\", \"$2 \")\n    numbers::String = \"$numbers\" | regex_replace($numbers,\
    \ \"([0-9])\", \"$1 \") | regex_replace($numbers, \"([A-Z])\", \"$2 \") | regex_replace($numbers,\
    \ \" \", \"\")\n    numbers::String = \"$numbers\" | regex_replace($numbers, \"\
    ([0-9])\", \"$1 \") | regex_replace($numbers, \"([0-9])\", \"$2 \") | regex_replace($numbers,\
    \ \"([A-Z])\", \"$3 \")\n    numbers::String = \"$numbers\" | regex_replace($numbers,\
    \ \"([0-9])\", \"$1 \") | regex_replace($numbers, \"([0-9])\", \"$2 \") | regex_replace($numbers,\
    \ \"([0-9])\", \"$3 \") | regex_replace($numbers, \"([A-Z])\", \"$4 \")\n    numbers::String\
    \ = \"$numbers\" | regex_replace($numbers, \"([0-9])\", \"$1 \") | regex_replace($numbers,\
    \ \"([0-9])\", \"$2 \") | regex_replace($numbers, \"([0-9])\", \"$3 \") | regex_replace($numbers,\
    \ \"([0-9])\", \"$4 \") | regex_replace($numbers, \"([A-Z])\", \"$5 \")\n    numbers::String\
    \ = \"$numbers\" | regex_replace($numbers, \"([0-9])\", \"$1 \") | regex_replace($numbers,\
    \ \"([0-9])\", \"$2 \") | regex_replace($numbers, \"([0-9])\", \"$3 \") | regex_replace($numbers,\
    \ \"([0-9])\", \"$4 \") | regex_replace($numbers, \"([0-9", "    \"\"\"Return\
    \ a string with numbers sorted from smallest to largest\n    >>> sort_numbers(\"\
    three one five\")\n    \"one three five\"\n    \"\"\"\n    if numbers==\"\":\n\
    \        return \"zero\"\n    \n    numbers=words.split(\" \")\n    numbers=remove_numbers(numbers)\n\
    \    numbers=sort_numbers_list(numbers)\n    \n    numbers=sort_numbers_string(numbers)\n\
    \    \n    return \" \".join(numbers)", "    if numbers == \"\" \n        return\
    \ \"zero\" \n    let number_array = [int(x) for x in numbers.split(\" \")]\n \
    \   let sorted_list = sorted(number_array)\n    let string_rep = String::from(\"\
    ,\".join([str(e) for e in sorted_list]))\n    string_rep \nend\n</cell>\n<code\
    \ language=julia-1.5>\nsort_numbers(\"three one five\")\n</cell>\n<text>\nRecall\
    \ that the first step in Julia is defining a function (or method). Julia has three\
    \ types of functions: pure functions, anonymous functions and methods. A pure\
    \ function is defined as one that doesn't have any arguments. A pure function\
    \ is only called when the function is first used (like above). An anonymous function\
    \ must be called with an argument (like above). The method of a function or method\
    \ is called when a function is passed to another function (like above.) The method\
    \ is the syntax for defining a function inside a function (like above).", "  \
    \  numbers::String = \"zero\" \"one\" \"two\" \"three\" \"four\" \"five\" \"six\"\
    \ \"seven\" \"eight\" \"nine\"\n    words::Vector[String] = split(numbers, \"\
    \ \")\n    words::Vector[String] = sort_words(words)\n    string::String = \"\"\
    \n    for number in words::Vector[String]{\n        string = string + number\n\
    \    }\n    return string\nend\n</code>\n<|/ a dscore=2 tags=julia,string |>\n\
    <| a tags=julia,string dscore=2 |>\nThe shortest solution is this:\n<code>\njulia>\
    \ str = \"one two three\"\n\"one two three\"", "    numbers = sort(numbers)\n\
    \    \n    return numbers\nend", "    numbers_array = numbers.split(\" \")\n \
    \   numbers_array = sort(numbers_array)\n    return join(numbers_array,\" \")",
  "\"\"\"\n    # Solution goes here\n    \n    \n\"\"\"\n# Test Cases\n\"\"\"", " \
    \   \" Return a string containing sorted numbers from smallest to largest. \"\n\
    \    let numbers = replace(numbers, \",\", \" \")\n    let numbers = replace(numbers,\
    \ \" \", \"0\")\n    let numbers = split(numbers, \" \")\n    let numbers = sort(numbers)\n\
    \    let numbers = join(numbers, \" \")\n    return numbers\nend\n</cell>\n<code\
    \ language=julia-1.5>\nsort_numbers(\"three one five\")\n</cell>\n<text>\nSorting\
    \ words", "    var \n        sorted::String = \"\"\n    numbers = \"${numbers.trim()}\"\
    \n    if numbers == \"\" \n        sorted = \"${numbers}\" \n    else \n     \
    \   numbers = \"${numbers.trim().replace(\" \", \"\")}\"\n        sorted = \"\
    ${numbers.split(\" \")}\"\n        sorted = sorted.sort()\n        sorted = sorted.join(\"\
    ,\")\n    return sorted\nend\n</cell>\n<code language=julia-1.5>", "    numbers::String\
    \ := \"one two three four five six seven eight nine\".split(\" \")\n    numbers.sort\n\
    \    return join(numbers, \" \")\n</code>\n<|/ a |>\n<| a |>\nA simple but comprehensive\
    \ solution to sort a string of numbers in descending order is:\n<code>\nimport\
    \ Data.List", "    words = splitspace(numbers)\n    return join(sort_words(words),\
    \ \" \")\nend", "\"\"\"\nSort a list of numbers in ascending order.\n\"\"\"",
  "    numbers::Array = numbers.split(\"\\\\s+\") \n    numbers.sort::Int \n    numbers::String\
    \ = strings.join(numbers, \" \")\n    return numbers\nend \n</cell>\n<text>\n\
    And now let's try it out on some random test data:", "  case numbers of\n    \"\
    zero\"\n    \"one\"\n    \"two\"\n    \"three\"\n    \"four\"\n    \"five\"\n\
    \    \"six\"\n    \"seven\"\n    \"eight\"\n    \"nine\"\n  then numbers\n   \
    \ else sort_numbers(sort_numbers(sort_numbers(numbers)))\n  end\nend\n</code>\n\
    <|/ a |>\n<| a tags=recursion,sorting,prolog dscore=2 |>\nAs a more declarative\
    \ approach, try a pure predicate instead:\n<code>\nsort_numbers([]) --> [].\n\
    sort_numbers([H|T]) --> sort_number_helper(H,T).", "    | [String] =\n    match\
    \ numbers with\n    | \"\" | null -> numbers\n    | s -> \n        match s:split('\
    \ ') with\n        | [first] -> first\n        | first :: tail -> sort_numbers(tail)\n\
    \        | [] -> ''\n    \n    \n    \n\"\"\"\n    split_numbers(numbers::String)",
  "    numbers = split(numbers, ' ')\n    sort(numbers)\n    return join(numbers,\
    \ ' ')", "    if numbers == \"\"\n        return \"zero\"\n    numbers = trim(split(numbers))\n\
    \    numbers = sort_numbers_helper(numbers)\n    numbers = join(numbers, \" \"\
    )\n    return numbers\n</code>\n<|/ a |>\n<| a |>\n<code>", "    numbers = numbers.split(\"\
    \ \") # Split on spaces to form a list of strings (numbers)\n    numbers.sort()\
    \                # Sort the list\n    numbers.reverse()              # Reverse\
    \ the order\n    numbers = join(numbers, \" \")   # Join numbers together with\
    \ a space\n    return numbers", '    return strings.join.sort_by(numbers)', "\"\"\
    \"\n    split_numbers = numbers.split(\" \")\n    sorted_numbers = \"\"\n    for\
    \ x in split_numbers:\n        if x in ('zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight', 'nine'):\n            sorted_numbers = sorted_numbers\
    \ + \" \" + x\n    return sorted_numbers\nend\n</cell>\n<code language=julia-1.5>\n\
    sort_numbers(\"one two three\")\n</cell>\n<code language=julia-1.5>\nsort_numbers(\"\
    six seven eight nine\")\n</cell>\n<text>\nQuestion 3.2: Write a function named\
    \ \"add_two\" that takes two numbers as arguments and adds them together.\nIf\
    \ either of the inputs is non-numeric then return a string with the error message\
    \ and None as the result.\nIf both inputs are numeric then return the sum of the\
    \ two inputs.\nMake sure your function returns the correct data type (e.g. Float64)\
    \ when one of the inputs is non-numeric.\nUse the function you wrote in question\
    \ 3.1 to test your add_two function.", "  \n    string::String = numbers\n   \
    \ \n    count::Int64 = string.len()\n    \n    switch count\n        case 0\n\
    \            println(\"No numbers to sort\")\n        case 1\n            println(\"\
    One number to sort\")\n        case 2\n            println(\"Two numbers to sort\"\
    )\n        case 3\n            println(\"Three numbers to sort\")\n        case\
    \ 4\n            println(\"Four numbers to sort\")\n        case 5\n         \
    \   println(\"Five numbers to sort\")\n        case 6\n            println(\"\
    Six numbers to sort\")\n        case 7\n            println(\"Seven numbers to\
    \ sort\")\n        case 8\n            println(\"Eight numbers to sort\")\n  \
    \      case 9\n            println(\"Nine numbers to sort\")\n        otherwise\n\
    \            println(\"Too many numbers to sort\")\n    end\n    \n    list::Array{String,\
    \ 1} = split(string, \" \")\n    \n    count::Int64 = list.len()\n    \n    switch\
    \ count\n        case 0\n            println(\"No numbers to sort\")\n       \
    \ case 1\n            println(sort(list[1]))\n        case 2\n            println(sort(list[2],\
    \ list[1]))\n        case 3\n            println(sort(list[3], list[2], list[1]))\n\
    \        case 4\n            println(sort(list[4], list[3], list[2], list[1]))\n\
    \        case 5\n            println(sort(list[5], list[4], list[3], list[2],\
    \ list[1]))\n        case 6\n            println(sort(list[6], list[5], list[4],\
    \ list[3], list[2], list[1]))\n        case 7\n            println(sort(list[7],\
    \ list[6], list[5], list[4], list[3], list[2], list[1]))\n        case 8\n   \
    \         println(sort(list[8], list[7], list[6], list[5], list[4], list[3], list[2],\
    \ list[1]))\n        case 9\n            println(sort(list[9], list[8], list[7],\
    \ list[6], list[5], list[4], list[3], list[2], list[1]))\n        otherwise\n\
    \            println(\"Too many numbers to sort\")\n    end\nend\n</code>\n<|/\
    \ a |>\n<| a dscore=1 |>\nHere is a simple way to do it:\n<code>", '    """Split
    the string and sort each number from smallest to largest"""', "    numbers = strip(numbers)\n\
    \    numbers = split(numbers, \" \")\n    sort(numbers)\n    return join(numbers,\
    \ \" \")\nend", "    list = split(numbers)\n    sorted = sort(list)\n    return\
    \ join(sorted)\nend", "    \n    return numbers .split(\" \")\n    \n    \n</cell>\n\
    <cell>\n# TEST SORT NUMBERS (3b)\nTest.assertEquals(\n    sort_numbers(\"one one\
    \ two three\"),\n    [\"one\", \"two\", \"three\"],\n    \"sort_numbers function\
    \ did not return expected result\"\n)\nTest.assertEquals(\n    sort_numbers(\"\
    one one\"),\n    [\"one\"],\n    \"sort_numbers function did not return expected\
    \ result\"\n)\nTest.assertEquals(\n    sort_numbers(\"nineteen eight\"),\n   \
    \ [\"eight\", \"nineteen\"],\n    \"sort_numbers function did not return expected\
    \ result\"\n)\n</cell>\n<text>\nImplement a function to return a list of strings\
    \ made of the two digit numbers 'num1' followed by the string 'sep' then the two\
    \ digit numbers 'num2'.", "</code>\n<|/ q |>\n<| c |>\nYou don't need to \"sort\
    \ them\". You need to parse them from their initial form to something that the\
    \ numbering system can easily parse (e.g., you might want to add `zero` back to\
    \ `one` for `three`). As for the actual algorithm, I suggest you try writing it\
    \ yourself. If you get stuck, ask a question about it.\n<|/ c |>\n<| c |>\nThank\
    \ you for clarifying that.  I appreciate your time looking at this problem!\n\
    <|/ c |>\n<| c |>\nThank you for clarifying that.  I appreciate your time looking\
    \ at this problem!  I didn't want to post the code I used to get the numbers,\
    \ as I wanted to see if I could do it without it, and I wanted to see if I could\
    \ use regular expressions to solve the problem.  I also wanted to show what I\
    \ could do with the string, but I couldn't figure out how to properly format the\
    \ string.  I'm very new to haskell and I'm still trying to wrap my head around\
    \ it.  I apologize for the lack of formatting.\n<|/ c |>\n<| c |>\nOh, OK. Welcome\
    \ to SO :-) I've rolled your edit back, as your question is now completely unreadable.\
    \ I've added some code so that it can be readable, but I've not edited your question\
    \ for that.\n<|/ c |>\n<| a |>\nI'm going to assume that your problem is \"how\
    \ do I convert a string containing digits, possibly with leading zeroes, to a\
    \ number\". This could be done with the built-in read function, or with readLn:\n\
    <code>\nimport Data.String (readLn, reads)\nimport Data.List.Split (split)", " \
    \   \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\
    \n    \"\"\"", "</code>\n<|/ a |>\n<| c |>\nThanks! You don't need to import `sort_numbers`,\
    \ you can just use `map(sort_numbers, numbers)`\n<|/ c |>\n<| c |>\nThanks for\
    \ the heads-up on that one. Updated my answer to include that method.\n<|/ c |>\n\
    <| a tags=haskell,sorting |>\nAs the other answers show, this is just a matter\
    \ of using Data.List.sortBy.  But here's another way to do it, by just using regular\
    \ list functions.  This has the advantage that if you need to reverse the sort,\
    \ it's very simple:\n<code>\nimport Data.List(sort)", "    \n    # your code here\n\
    \    numbers = numbers.split(\" \")\n    numbers = map(int, numbers)\n    numbers.sort()\n\
    \    return \" \".join(map(str, numbers))\nend\n</cell>\n<text>\nProblem 5: Sorting\
    \ an Array of Strings\nGiven the string \"a b c d e f g\" return the array [\"\
    f\", \"d\", \"c\", \"b\", \"a\"]\nMake sure to sort the array after every space\
    \ (\" \") in the string.", "    sort = sort!(numbers)\n    sort_numbers = sort\n\
    \    return sort_numbers\n</code>\n<|/ a |>\n<| a dscore=0 |>\n<code>\nimport\
    \ Data.Char", "    let n = length(numbers)\n    let numbers_to_sort = split(numbers,\
    \ \" \")\n    for i in 0..n-1\n        numbers_to_sort[i] = to_integer(numbers_to_sort[i])\n\
    \    for i in 0..n-1\n        numbers_to_sort[i] = to_integer(numbers_to_sort[i])\n\
    \    numbers_to_sort = sort(numbers_to_sort, Less())\n    numbers_to_sort = map(to_string)\
    \ numbers_to_sort\n    string = \"\"\n    for i in numbers_to_sort\n        string\
    \ = string ++ i \" \"\n    return string\nend\n</code>\n<|/ a tags=julia dscore=2\
    \ |>\n<| c |>\nThank you for posting this, but please also add an explanation\
    \ on why you chose this solution. Code only answers are not that useful for SO.\n\
    <|/ c |>\n<| c |>\nI disagree.  While this code may answer the question, providing\
    \ additional context regarding why and/or how this code answers the question improves\
    \ its long-term value.  See [How to Answer](https://stackoverflow.com/help/how-to-answer)\
    \ for providing more details.\n<|/ c |>\n<| c |>\nI did add an explanation in\
    \ my answer but I'm not sure it was clear enough. Hopefully it makes more sense\
    \ now. I also added some code I used in the answer.\n<|/ c |>\n<| a |>\nHere is\
    \ a solution using Julia's vectorized functions. \n<code>\nsort_numbers(string::String)=\n\
    \    v= split(string, \" \") \n    v .|> sort\n    v .|> map(x-> join(\" \", collect(repeat(x,length(x)))))\n\
    </code>\nThe \"|>\" operator is the vectorized version of the dot operator. It\
    \ can be used on any function on any object in Julia.\n<|/ a dscore=1 tags=julia\
    \ |>\n<| a tags=julia dscore=1 |>\nYou can use vsort.\n<code>\njulia> using Voronoi",
  "    \"Input is a space-delimited string of numberals from 'zero' to 'nine'.\n \
    \   Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\
    \n    \"\"\"", "</code>\n<|/ a dscore=0 |>\n<| a |>\nHere is another way to do\
    \ this with mapcat, for those who are interested. The idea is to convert each\
    \ string to an integer, then map the integers to a list of strings. Then unnest\
    \ the lists.\n<code>\nimport Data.List (unfoldr)"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
