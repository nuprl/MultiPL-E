name: HumanEval_96_count_up_to
language: jl
prompt: "\"\"\"Implement a function that takes an non-negative integer and returns\
  \ a vector of the first n\n    integers that are prime numbers and less than n.\n\
  \    for example:\n    >>> count_up_to(5)\n    [2, 3]\n    >>> count_up_to(11)\n\
  \    [2, 3, 5, 7]\n    >>> count_up_to(0)\n    []\n    >>> count_up_to(20)\n   \
  \ [2, 3, 5, 7, 11, 13, 17, 19]\n    >>> count_up_to(1)\n    []\n    >>> count_up_to(18)\n\
  \    [2, 3, 5, 7, 11, 13, 17]\n    \"\"\"\nfunction count_up_to(n::Int64)::Vector{Int64}\
  \ \n"
tests: "using Test\n\n@testset begin\n\ncandidate = count_up_to;\n\t@test(candidate(5)\
  \ == [2, 3])\n\t@test(candidate(6) == [2, 3, 5])\n\t@test(candidate(7) == [2, 3,\
  \ 5])\n\t@test(candidate(10) == [2, 3, 5, 7])\n\t@test(candidate(0) == Vector{Int64}([]))\n\
  \t@test(candidate(22) == [2, 3, 5, 7, 11, 13, 17, 19])\n\t@test(candidate(1) ==\
  \ Vector{Int64}([]))\n\t@test(candidate(18) == [2, 3, 5, 7, 11, 13, 17])\n\t@test(candidate(47)\
  \ == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n\t@test(candidate(101)\
  \ == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
  \ 73, 79, 83, 89, 97])\nend\n"
completions: ["    if n < 2 \n        return [] \n    local counter = 1\n    local\
    \ result = Vector{Int64}(counter) \n    while counter <= n \n        counter +=\
    \ 1 \n        result += [counter] \n    end\n    result\nend", "    vec = Vector{Int64}()\n\
    \    vec = vec + 2\n    if n > 0\n        for j in 3..ceil(sqrt(n))\n        \
    \    if n%j == 0\n                vec = vec + (j - 2)\n                n = n /\
    \ j\n                break\n        end\n    end\n    vec\nend\n</code>\n<|/ a\
    \ tags=julia dscore=1 |>\n<| a |>\n<code>", "    if n==0\n        return Vector{}\n\
    \    elseif n==1\n        return Vector{1}\n    else\n        n2 = n / 2\n   \
    \     primes = []\n        i = 2\n        while i <= n2\n            if primes.includes(i)\n\
    \                i = i + 2\n            else\n                if isprime(i)\n\
    \                    primes.push(i)\n                i = i + 1\n        end\n\
    \        result = []\n        for i in primes\n            if i <= n \n      \
    \          push!(result, i)\n            end\n        end\n        return result\n\
    \    end\nend\n</cell>\n<code language=julia-1.3>\ncount_up_to(5)\n</cell>\n<text>\n\
    6. Write a function that takes two vectors x and y and returns a matrix z\nwhere\
    \ each row of z contains the sum of the elements of the vector x multiplied by\
    \ the elements of the vector y\nFor example, the call", "    vector=Vector{Int64}()\n\
    \    for i=1:n\n        factors=primes(i)\n        push!(factors,0)\n        push!(vector,1)\n\
    \        for f in factors\n            if f <= n\n                push!(vector,f*(i-1)+1)\n\
    \            end\n        end\n    end\n    return vector\nend", "    vec = Vector{Int64}()\n\
    \    \n    if n <= 0\n        return vec\n    \n    if n == 1\n        vec[1]\
    \ = 1\n        return vec\n    \n    if n < 2 || n % 2 == 0\n        vec[1] =\
    \ n\n        return vec\n    \n    count = 2\n    \n    loop_count = n\n    \n\
    \    while(loop_count > 1)\n        if loop_count % 2 == 1\n            loop_count\
    \ /= 2\n            vec[count] = loop_count\n            count +=1\n        else\
    \ \n            loop_count = 3*loop_count + 1\n            vec[count] = loop_count\n\
    \            count +=1\n    end\n    return vec\nend\n</cell>\n<code language=julia-1.6>\n\
    # using Pkg; Pkg.add(\"BenchmarkTools\")\n</cell>\n<code language=julia-1.6>\n\
    @time count_up_to(20000000)\n</cell>\n<code language=julia-1.6>\n@time count_up_to(20000000)\n\
    </cell>\n<text>\nExercise: Counting Spirals\nThe goal is to count the number of\
    \ spirals in an n-dimensional spiral such that\nthe i-th spiral has the center\
    \ point (0, i), has n points, and the spiral is oriented in\nthe i-th quadrant.\
    \ For example, the spiral with n=3 and center point\n(0, 0) has 5 spirals.", " \
    \   if n <= 0\n        error(\"negative number\")\n    end\n    if n == 1\n  \
    \      []\n    end\n    \n    primes = Set{Int64}()\n    for i in 2:(n-1)\n  \
    \      if primes.contains(i)\n            continue # skip\n        end\n     \
    \   primes.add(i)\n        \n        if i % 2 == 0 && primes.contains(i/2)\n \
    \           primes.delete(i/2) # remove duplicates\n            primes.add(i/2)\
    \ # add the even number back\n        end\n        \n    end\n    \n    primes\n\
    end", "    if n==0 || iszero(n) || isone(n) || istriangluar(n)\n        return\
    \ Vector{Int64}()\n    else\n        if isinf(n) || isnan(n)\n            error(\"\
    n must be positive\")\n        end\n        \n        vector=Vector{Int64}()\n\
    \        for i=2; i<=n\n            if isprime(i) && isprime(i-1)\n          \
    \      push!(vector,i)\n            end\n        end\n        return vector\n\
    \    end\nend\n</cell>\n<code language=julia-1.2>\n# count_up_to(1)\n</cell>\n\
    <code language=julia-1.2>\n\"\"\"\n    count_down_to_n(n::Int64)::Vector{Int64}",
  "    if n < 0 \n        return Int64[]\n    \n    \n    count = 0\n    if n % 2\
    \ == 0 \n        push!(count,2)\n    end\n    while n > 3 \n        push!(count,2)\n\
    \        n >>= 1\n    end\n    while n > 1 \n        push!(count,2)\n        n\
    \ >>= 1\n    end\n    \n    \n    \n    return count\nend", "        if n == 1\
    \ \n            [1]\n        else if n == 2\n            [2, 3]\n        else\
    \ \n            count_up_to(n-1) + [n-2]::Vector{Int64}\nend\n</cell>\n<text>\n\
    We can now test our implementation by running the following code", "    if is_prime(n)\n\
    \        Vector{Int64}([1])\n    else\n        vector = prime_numbers(n)\n   \
    \     vector[length(vector):end]\n    end\nend\n</code>\nAs you see, I've made\
    \ a function to count up numbers to some limit. \nThe idea is to make a Vector\
    \ with the prime numbers in the interval, plus one more element for the number\
    \ we are counting from. The vector is a subrange of the vector, starting from\
    \ position 1 until the last element of the vector. Then it just substracts the\
    \ length of the vector from that position. \nIf you do not understand some expression,\
    \ just ask me.\n<|/ a tags=performance,primes,julia |>\n<| a tags=performance,primes,julia\
    \ |>\nA very simple implementation is below (though its probably more efficient\
    \ to find a better sieve). \n<code>", "    if n == 0 return []\n    \n    primes\
    \ = prime_factorization(n)\n    \n    i = length(primes)-1\n    \n    count =\
    \ 0\n    while i >= 0 do \n        if primes[i] == 1 count = count + 1 end\n \
    \       i = i - 1\n    end\n    \n    if count > n return primes end\n    \n \
    \   count = 0\n    i = length(primes)\n    while i < n do \n        if primes[i]\
    \ == 1 count = count + 1 end\n        i = i + 1\n    end\n    \n    return primes[count+1:end]\n\
    end", "    primes = get_primes(n)\n    primes = primes[primes != 1:end]\n    primes\
    \ = primes[primes != 1:end]\n    primes = primes[primes != 1:end]\n    primes\
    \ = primes[primes != 1:end]\n    primes = primes[primes != 1:end]\n    primes\
    \ = primes[primes != 1:end]\n    primes = primes[primes != 1:end]\n    primes\
    \ = primes[primes != 1:end]\n    primes = primes[primes != 1:end]\n    primes\
    \ = primes[primes != 1:end]\n    return primes\nend", "    if n == 0 \n      \
    \  Vector{Int64}() \n    else \n        count_up_to(n-1)\n    end\nend", "   \
    \ if n < 0 \n        error(\"count up to: must be non-negative\")\n    end", " \
    \   count = 0 \n    for i in 1:n\n        if gcd(i,n) == 1 \n            push!(count,i)\
    \ \n        end\n    end\n    return count\nend\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(5)\n</cell>\n<code language=julia-1.5>\ncount_up_to(11)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(0)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(20)\n</cell>\n<code language=julia-1.5>\ncount_up_to(1)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(18)\n</cell>\n<text>\nTask 2: Implement\
    \ a function that takes an non-negative integer and returns a vector of the second\
    \ n\n    integers that are prime numbers and less than n.\n    for example:\n\
    \    >>> count_up_to(5)\n    [3, 5]\n    >>> count_up_to(11)\n    [3, 5, 7, 11]\n\
    \    >>> count_up_to(0)\n    []\n    >>> count_up_to(20)\n    [3, 5, 7, 11, 13,\
    \ 17]\n    >>> count_up_to(1)\n    []\n    >>> count_up_to(18)\n    [3, 5, 7,\
    \ 11, 13]\n    \"\"\"", "    if n == 0 return Vector{}\n    if n == 1 return [1]\n\
    \    primes = prime_list_gen(n)\n    vecs = Vector{Int64}(prime_list_gen(n))\n\
    \    primes::Vector{Int64}\n    for p in primes \n        primes -= p\n      \
    \  if p <= n\n            for q in primes\n                primes -= q\n     \
    \           if p % q == 0\n                    vecs[Int(p/q)] -= 1\n         \
    \           if vecs[Int(p/q)] < 0\n                        vecs[Int(p/q)] = 0\n\
    \                    end\n                end\n            end\n        end\n\
    \    end\n    return vecs\nend\n</code>\n<|/ a tags=optimization,julia |>\n<|\
    \ a tags=optimization,julia |>\nFor a general function you can use the filter\
    \ function, but only works on a boolean array as input.\n<code>\njulia> filter(x\
    \ -> x % 2 == 0, collect(2:10000))\n10-element Array{Int64,1}:\n  2\n  4\n  6\n\
    \  8\n 10\n 12\n 14\n 16\n 18\n 20\n 22\n 24\n 26\n 28\n 30\n 32\n 34\n 36\n 38\n\
    \ 40\n 42\n 44\n 46\n 48\n 50\n 52\n 54\n 56\n 58\n 60\n 62\n 64\n 66\n 68\n 70\n\
    \ 72\n 74\n 76\n 78\n 80\n 82\n 84\n 86\n 88\n 90\n 92\n 94\n 96\n 98\n100\n</code>\n\
    <|/ a dscore=3 |>\n<| a tags=optimization,julia |>\nThis may be slightly faster\
    \ than the other answers, since it avoids the need for allocation, but I think\
    \ it's a bit less readable.\n<code>", "    if n < 2 \n        n \n    else\n \
    \       if is_prime(n)\n            n \n        else\n            count_up_to(n-1)\
    \ + [n | 1]\n        end\n    end\nend", "    \n    count_up_to = Vector{Int64}()\n\
    \    if n <= 0\n        return count_up_to\n    if isPrime(n)\n        count_up_to\
    \ = [n]\n        return count_up_to\n    else:\n        count_up_to = []\n   \
    \     \n        for i \u2208 2:n\n            if isPrime(i) && i <= n\n      \
    \          count_up_to += i\n            end\n        end\n        return count_up_to\n\
    end\n</cell>\n<code language=julia-0.4>\ncount_up_to(0)\n</cell>\n<code language=julia-0.4>\n\
    count_up_to(20)\n</cell>\n<code language=julia-0.4>\ncount_up_to(1)\n</cell>\n\
    <code language=julia-0.4>\ncount_up_to(11)\n</cell>\n<code language=julia-0.4>\n\
    count_up_to(18)\n</cell>\n<code language=julia-0.4>\ncount_up_to(19)\n</cell>\n\
    <code language=julia-0.4>\ncount_up_to(20)\n</cell>\n<code language=julia-0.4>\n\
    count_up_to(21)\n</cell>\n<code language=julia-0.4>\ncount_up_to(42)\n</cell>\n\
    <code language=julia-0.4>\ncount_up_to(43)\n</cell>\n<code language=julia-0.4>\n\
    count_up_to(100)\n</cell>\n<code language=julia-0.4>\ncount_up_to(100)\n</cell>\n\
    <code language=julia-0.4>\ncount_up_to(2000000000)\n</cell>\n<code language=julia-0.4>\n\
    count_up_to(2000000000)\n</cell>\n<code language=julia-0.4>\ncount_up_to(3000000000)\n\
    </cell>\n<code language=julia-0.4>\ncount_up_to(3000000000)\n</cell>\n<code language=julia-0.4>\n\
    count_up_to(4000000000)\n</cell>\n<code language=julia-0.4>\ncount_up_to(4000000000)\n\
    </cell>\n<code language=julia-0.4>\ncount_up_to(5000000000)\n</cell>\n<code language=julia-0.4>\n\
    count_up_to(5000000000)\n</cell>\n<code language=julia-0.4>\ncount_up_to(6000000000)\n\
    </cell>\n<code language=julia-0.4>\ncount_up_to(6000000000)\n</cell>\n<code language=julia-0.4>\n\
    count_up_to(7000000000)\n</cell>\n<code language=julia-0.4>\ncount_up_to(7000000000)\n\
    </cell>\n<code language=julia-0.4>\ncount_up_to(8000000000)\n</cell>\n<code language=julia-0.4>\n\
    count_up_to(8000000000)\n</cell>\n<code language=", "    if n == 0 \n        Vector{}\n\
    \    else\n        if n==1 \n            Vector{1}\n        else\n           \
    \ \n            primes=prime_number(n)\n            \n            prime_list_less_than=primes[end]",
  "    if n < 2\n        return Vector{Int64}()\n    \n    primes = prime_numbers(n)\n\
    \    numbers = Vector{Int64}(primes[1])\n    for p in primes[2:end]\n        if\
    \ numbers[end]<=p\n            numbers[end+1] += 1\n            numbers[end] =\
    \ p\n        end\n    numbers[end+1] = 1\n    numbers\nend", "    if n == 0\n\
    \        Vector{Int64}()\n    else if n < 2\n        Vector{Int64}()\n    elseif\
    \ isPrime(n)\n        Vector{Int64}(n)\n    else\n        Vector{Int64}(n-1)+count_up_to(n-1)\n\
    \    end\nend\n</cell>\n<code language=julia-1.6>\nusing Plots\n</cell>\n<code\
    \ language=julia-1.6>\nx = count_up_to(50)\nplot!(x; label=\"\")\n</cell>\n<text>\n\
    Let's have a closer look at count_up_to:", "    primes = primes_gen(ceil(n))\n\
    \    count_up_to = Vector{Int64}()\n    for p in primes\n        if p<=n\n   \
    \         count_up_to!(p)\n        else\n            count_up_to!(n-p)\n     \
    \   end\n    end\n    count_up_to\nend", "    if n <= 0 \n        Vector{Int64}()\
    \ \n    else \n        count_up_to(n-1)[1:end-1]\n    end\nend", "if n < 0\n \
    \   return Vector{}\nelse\n    primes = Primes()\n    count = 1\n    while primes[count]\
    \ < n\n        count+=1\n    end\n    return Vector{Int64}[primes[count]]\nend\n\
    end", "    \n    if n < 0\n        throw(ArgumentError(\"n must be non-negative\"\
    ))\n    elseif n > 15\n        throw(ArgumentError(\"n must be less than or equal\
    \ to 15\"))\n    else\n        primes = Vector{Int64}[]\n        while primes\
    \ != [2,3,5,7,11,13,17]\n            for x in primes\n                if x > n\n\
    \                    break\n                else\n                    if isPrime(x)\n\
    \                        push!(primes, x)\n                    else\n        \
    \                primes = primes[2:end]\n                        push!(primes,\
    \ x)\n                        n = n - x\n                    end\n           \
    \ end\n        end\n        primes = primes[2:end]\n    end\n    return primes\n\
    end\ncount_up_to(n)\n</cell>\n<text>\nQuestion 2.3 The function prime_division\
    \ takes an integer x and returns a vector that contains x and all of the numbers\
    \ divisible by x. \nIt should throw an error if the input is less than or equal\
    \ to 0.", "    if n <= 1\n        Vector{}\n    elseif n < 2\n        Vector{Int64}()\n\
    \    else\n        Vector{Int64}[Int64]()\n        for d in prime_factors(n)\n\
    \            if d > 2\n                break\n            if n % d == 0\n    \
    \            push!(count_up_to(n / d), d)\n            end\n        end\n    end\n\
    end\n</cell>\n<code language=julia-1.4>", "    primes = []\n    prime_vec = []\n\
    \    \n    for num in 1:n\n        if is_prime(num)\n            push!(primes,\
    \ num)\n        else\n            push!(prime_vec, num)\n        end\n    end\n\
    \    \n    return primes\nend", "    Vector{Int64}(Nil, n)\nend", "    primes\
    \ = get_primes(n)\n    primes_less = get_prime_less_than(n)\n    \n    for prime\
    \ in primes\n        if primes <= n\n            break\n        else\n       \
    \     primes_less += primes\n            primes = []\n        end\n    end", "\"\"\
    \"\ncount_up_to(n) = count_up_to(n,[])\n\"\"\"\ncount_up_to(n) = count_up_to(n,[])\
    \ \n\"\"\"\ncount_up_to(n) = count_up_to(n,[]) \n\"\"\"\ncount_up_to(n,acc)\n\"\
    \"\"\ncount_up_to(n,acc) = count_up_to(n,[],acc)\n\"\"\"\ncount_up_to(n,acc) =\
    \ count_up_to(n,[],acc) \n\"\"\"\ncount_up_to(n,acc) = count_up_to(n,[],acc) \n\
    \"\"\"\ncount_up_to(n,acc)\n\"\"\"\ncount_up_to(n,acc) = count_up_to(n,[],acc)\
    \ \n\"\"\"\ncount_up_to(n,acc) = count_up_to(n,[],acc) \n\"\"\"\ncount_up_to(n,acc)\n\
    \"\"\"\ncount_up_to(n,acc) = count_up_to(n,[],acc) \n\"\"\"\ncount_up_to(n,acc)\
    \ = count_up_to(n,[],acc) \n\"\"\"\ncount_up_to(n,acc) = count_up_to(n,[],acc)\
    \ \n\"\"\"\ncount_up_to(n,acc)\n\"\"\"\ncount_up_to(n,acc) = count_up_to(n,[],acc)\
    \ \n\"\"\"\ncount_up_to(n,acc) = count_up_to(n,[],acc) \n\"\"\"\ncount_up_to(n,acc)\
    \ = count_up_to(n,[],acc) \n\"\"\"\ncount_up_to(n,acc) = count_up_to(n,[],acc)\
    \ \n\"\"\"\ncount_up_to(n,acc) = count_up_to(n,[],acc) \n\"\"\"\ncount_up_to(n,acc)\
    \ = count_up_to(n,[],acc) \n\"\"\"\ncount_up_to(n,acc) = count_up_to(n,[],acc)\
    \ \n\"\"\"\ncount_up_to(n,acc) = count_up_to(n,[],acc) \n\"\"\"\ncount_up_to(n,acc)\
    \ = count_up_to(n,[],acc) \n\"\"\"\ncount_up_to(n,acc) = count_up_to(n,[],acc)\
    \ \n\"\"\"\ncount_up_to(n,acc) = count_up_to(n,[],acc) \n\"\"\"\ncount_up_to(n,acc)\
    \ = count_up_to(n,[],acc) \n\"\"\"\ncount_up_to(n,acc) = count_up_to(n,[],acc)\
    \ \n\"\"\"\ncount_up_to(n,acc) = count_up_to(n,[],acc) \n\"\"\"\ncount_up_to(n,acc)\
    \ = count_up_to(n,[],acc) \n\"\"\"\ncount_up_to(n,acc) = count_up_to(n,", "  \
    \  if n == 0 || n > 1e7 \n        []\n    else\n        candidates = sieve(n)\n\
    \        [candidates[i] | i in candidates]\n    end\nend\n</code>\nI then wrote\
    \ a function for finding the primes below the number I entered:\n<code>", "  \
    \  if n <= 1\n        return []\n    \n    \n    @assert n >= 0\n    \n    primes\
    \ = prime_sieve(n)\n    \n    counts = Vector{Int64}(length(primes))\n    \n \
    \   for (i, p) in enumerate(primes)\n        counts[i] = 0\n    end\n    \n  \
    \  for n in 1:n\n        @assert n <= n\n        for (i, p) in enumerate(primes)\n\
    \            if n <= p\n                counts[i] += 1\n                break\n\
    \            end\n        end\n    end\n    \n    return counts\nend\n</cell>\n\
    <text>\nWe now want to run our count_up_to function on some examples.", "    if\
    \ n <= 0 \n        return Vector{Int64}()\n    end", "    vec = []\n    \n   \
    \ for i in 1..n\n        push!(vec, i)\n        if isprime(i) && i<n\n       \
    \     push!(vec, n-i)\n        end\n    end\n    \n    return vec\nend\n</cell>\n\
    <text>\n2.3 Implementing a function that sums all the even integers between 1\
    \ and n", "    count_up_to = Vector{Int64}()\n    count_up_to[1] = 1\n    for\
    \ i in 2:n\n        if primes(i) == true\n            count_up_to[i] = count_up_to[i-1]\
    \ + 1\n        end\n    end\n    count_up_to\nend\n</cell>\n<text>\nTask 2\nImplement\
    \ a function that takes as an input a two-dimensional array that represents the\
    \ coordinates of some\npoint and that returns a two-dimensional array of the coordinates\
    \ of all the points within some given\ndistance to the origin.\nFor instance:\n\
    [[1,2], [2,4], [3,5], [0,1]]\nwould return the coordinates of all the points in\
    \ 3 units in the x axis and 2 units in the y axis.\nIn our example, it would return:\n\
    [[0,0], [1,2], [2,4]]\nWe are not going to use any library other than Base that\
    \ can perform this computation.", "    \n    if n == 0\n        return Vector{}\n\
    \    \n    if n % 2 == 1\n        return Vector{Int64}[Int64(n)]\n    \n    count\
    \ = 1\n    \n    for m in 2..n\n        if n % m == 0\n            count += 1\n\
    \            \n            if count == 3\n                return Vector{Int64}[Int64(n),\
    \ Int64(3 * m), Int64(3 * m * m)]\n            end\n        end\n    end\n   \
    \ \n    return Vector{}\nend", "    primes     = PrimeGenerator()\n    vec_primes\
    \ = Vector{Int64}()\n    for prime in primes\n        if prime < n\n         \
    \   if isPrime(prime)\n                vec_primes += prime\n            end\n\
    \        end\n    end\n    return vec_primes\nend", "    if n == 0\n        return\
    \ Vector{}\n    if n == 1\n        return Vector{1}\n    if n % 2 == 0\n     \
    \   return count_up_to(n / 2)\n    else\n        count = 0\n        limit = sqrt(Int64)\n\
    \        while count < limit\n            count += 1\n            if n % count\
    \ == 0\n                return count_up_to(n / count)\n        end\n        return\
    \ count_up_to(n)\n    end\nend", "    l = Vector{Int64}()\n    if n<2\n      \
    \  push!(l, 2)\n        return l\n    else\n        for m in 2:n\n           \
    \ if m > sqrt(n)\n                push!(l, m)\n                if m*m+n*n < n\
    \ \n                    push!(l, n-m*m)\n                else\n              \
    \      push!(l, 0)\n                end\n            else\n                push!(l,\
    \ m)\n            end\n        end\n        return l\n    end\nend\n</cell>\n\
    <text>\nCount the number of prime numbers less than a limit", "    count_up_to\
    \ = 1\n    while n >= count_up_to\n        count_up_to += 1\n    end\n    n\n\
    end", "    if n == 0 \n        Vector{Int64}() \n    else if n == 1 \n       \
    \ [1] \n    else \n        count_up_to(n-1) + [n for n in prime_gen(n)..n if n\
    \ % n == 0] \n    end\nend", "    if n <= 0 \n        Vector{Int64}([])\n    else\n\
    \        Vector{Int64}[2, 3, 5, 7, 11, 13, 17]\n    end\nend\n</cell>\n<code language=julia-0.6>\n\
    count_up_to(5)\n</cell>\n<code language=julia-0.6>\ncount_up_to(11)\n</cell>\n\
    <code language=julia-0.6>\ncount_up_to(0)\n</cell>\n<code language=julia-0.6>\n\
    count_up_to(20)\n</cell>\n<code language=julia-0.6>\ncount_up_to(1)\n</cell>\n\
    <code language=julia-0.6>\ncount_up_to(18)\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that takes an integer $n$ and returns a vector with all the numbers\
    \ from 1 to $n$. for instance:\n>>> primes(100)\n    [2, 3, 5, 7, 11, 13, 17,\
    \ 19]\n>>> primes(0)\n    []\n>>> primes(5)\n    [2, 3]\nExercise:\nImplement\
    \ a function that counts the number of prime numbers between 1 and $n$. \n>>>\
    \ count_primes(100) \n    [2, 3, 5, 7, 11, 13, 17, 19]\n>>> count_primes(0) \n\
    \    []\n>>> count_primes(5)\n    [2, 3]\nExercise:\nImplement a function that\
    \ takes a natural number and returns the nth prime number\n>>> prime(10)\n   \
    \ 11\n>>> prime(20)\n    17\n>>> prime(35)\n    31", "    \"\"\"Implementation\
    \ of a function that takes an non-negative integer and returns a vector of the\
    \ first n\n    integers that are prime numbers and less than n.\n    \"\"\"\n\
    \    ", "    if n == 0 \n        Vector{}\n    else \n        if n % 2 == 0 \n\
    \            push!(count_up_to(n - 1), 2) \n        else \n            push!(count_up_to(n\
    \ - 1), 3)\n        end\n    end\nend", "    if n < 1 \n        []\n    elseif\
    \ n == 0 \n        []\n    elseif primes(n) \n        [n]\n    else\n        count_up_to(n\
    \ - 2) + [n]\nend\n</code>\nThe count_up_to function will return a vector that\
    \ contains all prime numbers less than or equal to n, except if n is 1 then that\
    \ element will be an empty vector.  The function primes will return the prime\
    \ factors of n.\n<code>\n\"\"\"\nprimes(n::Int64)::Bool", "\tif n<0 \n\t\treturn\
    \ []\n\tend\n\tresult=Vector{Int64}(n)\n\ti=1\n\twhile i<n\n\t\tisprime=false\n\
    \t\tj=i\n\t\twhile j>1\n\t\t\tjdiv=j%2\n\t\t\tif jdiv==0\n\t\t\t\tisprime=true\n\
    \t\t\t\tbreak\n\t\t\tend\n\t\t\tif jdiv==1 && j!=isprime\n\t\t\t\tbreak\n\t\t\t\
    end\n\t\t\tj=j/2\n\t\tend\n\t\tif isprime\n\t\t\tpush!(result, i)\n\t\tend\n\t\
    \ti=i+1\n\tend\n\treturn result\nend", "    prime_arr = [x for x in range(2, n)\
    \ if all(x % p != 0 for p in prime_arr)]\n    prime_arr\nend\ncount_up_to(x) =\
    \ Vector{Int64}(undef,0)", "    if n < 0\n        error(\"count_up_to() argument\
    \ cannot be negative\")\n    end\n    @assert n >= 0\n    return vec(n)\nend",
  "  if n < 2\n    []\n  else\n    count_up_to(n - 1) + [n - 2]\nend\ncount_up_to(0)\n\
    count_up_to(20)\ncount_up_to(1)\ncount_up_to(18)\ncount_up_to(10)\ncount_up_to(3)\n\
    count_up_to(10)\ncount_up_to(2)\ncount_up_to(5)\ncount_up_to(3)\ncount_up_to(4)\n\
    count_up_to(7)\ncount_up_to(5)\ncount_up_to(9)\ncount_up_to(5)\ncount_up_to(6)\n\
    count_up_to(10)\ncount_up_to(3)\ncount_up_to(8)\ncount_up_to(6)\ncount_up_to(12)\n\
    count_up_to(6)\ncount_up_to(10)\ncount_up_to(10)\ncount_up_to(10)\ncount_up_to(20)\n\
    count_up_to(20)\ncount_up_to(20)\ncount_up_to(20)\ncount_up_to(20)\ncount_up_to(20)\n\
    count_up_to(20)\ncount_up_to(20)\ncount_up_to(20)\ncount_up_to(20)\ncount_up_to(20)\n\
    count_up_to(20)\ncount_up_to(20)\ncount_up_to(20)\ncount_up_to(20)\ncount_up_to(20)\n\
    count_up_to(20)\ncount_up_to(20)\ncount_up_to(20)\ncount_up_to(20)\ncount_up_to(20)\n\
    count_up_to(20)\ncount_up_to(20)\ncount_up_to(20)\ncount_up_to(20)\ncount_up_to(20)\n\
    count_up_to(20)\ncount_up_to(20)\ncount_up_to(20)\ncount_up_to(20)\ncount_up_to(20)\n\
    count_up_to(20)\ncount_up_to(20)\ncount_up_to(20)\ncount_up_to(20)\ncount_up_to(20)\n\
    count_up_to(20)\ncount_up_to(20)\ncount_up_to(20)\ncount_up_to(20)\ncount_up_to(20)\n\
    count_up_to(20)\ncount_up_to(20)\ncount_up_to(20)\ncount_up_to(20)\ncount_up_to(20)\n\
    count_up_to(20)\ncount_up_to(20)\ncount_up_to(20)\ncount_up_to(20)\ncount_up_to(20)\n\
    count_up_to(20)\ncount_up_to(20)\ncount_up_to(20)\ncount_up_to(20)\ncount_up_to(20)\n\
    count_up_to(20)\ncount_up_to(20)\ncount_up_to(20)\ncount_up_to(20)\ncount_up_to(20)\n\
    count_up_to(20)\ncount_up_to(20)\ncount_up_to(20)\ncount_up_to(20)\ncount_up_to(20)\n\
    count_up_to(20)\ncount_up_to(20)\ncount_up_to(20)\ncount_up_to(20)\ncount_up_to(20)\n\
    count_up_to(20)\ncount_up_to(20)\n", "    if n==0 \n        [] \n    else \n \
    \       if all(x % n == 0 for x <- 2..Int(sqrt(n)))\n            count_up_to(n-1)\
    \ + [n] \n        else\n            count_up_to(n-1) + [n]\n        end\n    end\n\
    end\n</cell>\n<code language=julia-1.4>\ncount_up_to(13)\n</cell>\n<text>\n4.4\
    \ Exercise\nImplement a function which takes a non-negative integer and returns\
    \ the number of steps to reach the nth prime number.", "    if n==0 \n       \
    \ Vector{} \n    else \n        count_up_to(n-1)..n \n    end\nend\ncount_up_to(n)=count_up_to(n)\n\
    </cell>\n<cell>\n\"\"\"Implement a function that takes an non-negative integer\
    \ and returns a vector of the first n\n    integers that are prime numbers and\
    \ less than n.\n    for example:\n    >>> count_down_to(5)\n    [1, 2]\n    >>>\
    \ count_down_to(11)\n    [1, 3, 5]\n    >>> count_down_to(0)\n    []\n    >>>\
    \ count_down_to(20)\n    [1, 3, 5, 7, 9, 11]\n    >>> count_down_to(1)\n    []\n\
    \    >>> count_down_to(18)\n    [1, 3, 5, 7, 9]\n    \"\"\"", "    if n < 1\n\
    \        return Vector{}\n    end\n    \n    primes = Vector{Int64}(Int64[])\n\
    \    for i in 2:n \n        if primes[i] >= i\n            break\n        else\n\
    \            primes[i] = i\n    end\n    return primes\nend\n</cell>\n<code language=julia-1.1>\n\
    count_up_to(5)\n</cell>\n<text>\nImplement count_down\nImplement a function that\
    \ takes an non-negative integer and returns a vector of the last n integers that\
    \ are prime numbers and greater than n.\n    for example:\n    >>> count_down_to_5(10)\n\
    \    [9, 7, 5, 3]\n    >>> count_down_to_5(8)\n    [9, 8, 7, 6, 5]\n    >>> count_down_to_5(0)\n\
    \    []\n    >>> count_down_to_5(7)\n    [9, 8, 7, 6, 5]\n    >>> count_down_to_5(2)\n\
    \    []\n    >>> count_down_to_5(17)\n    [9, 8, 7, 6, 5]\n    \"\"\"", "    \
    \    if n < 2\n            return Vector{Int64}()\n        \n        factors =\
    \ prime_factors(n)\n        \n        return filter!(x -> x < n, factors) ++ count_up_to(n-factors[-1])\n\
    end", "    primes = Vector{Int64}(2..n)\n    counts = Vector{Int64}()\n    for\
    \ i in 2..n\n        if primes[i] == true\n            for j in 2..i\n       \
    \         if i == j*i\n                    push!(counts, j)\n                \
    \    break\n                end\n            end\n        end\n    end\n    push!(counts,\
    \ n+1)\n    return counts\nend\n</cell>\n<text>\nNext, we will implement an algorithm\
    \ to determine if a number is prime or not and return the number of primes\nthat\
    \ lie between 2 and n. It may help to think of the input as a vector with the\
    \ numbers we want to count. We will use the prime number theorem (aka trial division)\
    \ to determine that our input numbers are prime numbers. We will implement a helper\
    \ function count_up_to to help us find the prime numbers between 2 and n.", " \
    \   if n == 1 \n        return Vector{}\n    else\n        vec =  Vector{}\n \
    \       for n in 2..n do\n            if n <= 1 \n                continue\n \
    \           if n mod 2 == 0 || n mod(3) == 0\n                push!(vec, n) \n\
    \            end\n        end\n        return vec \n    end\nend", "    if n <\
    \ 2\n        return []\n    if n == 2\n        return [1]\n    \n    primes =\
    \ primes_below(n)\n    \n    count_up_to = []\n    for p in primes\n        count_up_to.append(p+1)\n\
    \    end\n    return count_up_to\nend\n</cell>\n<text>\nExercise 4\nImplement\
    \ a function that will take an input vector and return the sum of the values in\
    \ it. The input vector is a vector of Float64s. For example:", "        \n   \
    \     # Write your code here.\n        # Note that your implementation is very\
    \ inefficient.\n        # Use vectors instead.", "    \n    # your code goes here\n\
    \    vector=[]\n    \n    vector= [2 for i=1:n]\n    \n    while n != 0 \n   \
    \     if n%2 == 0\n            vector=[vector, 3]\n        else\n            vector=[vector,\
    \ 2]\n        end\n        n=n/2\n    end\n    \n    return vector\nend\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(5)\n</cell>\n<text>\n@inbounds @simd for\
    \ simd vectorization", "    vec = Vector{Int64}()\n    for i=2 to n\n        if\
    \ isPrime(i)\n            if primeCheck(i)\n                push!(vec,i)\n   \
    \         end\n        end\n    end\n    return vec\nend\n</cell>\n<text>\nQuestion:\
    \ What do you notice about this code? Why?", "    if n <= 0\n        []\n    else\n\
    \        for i=2; i<=n; i=i+1 \n            if primes(i)[i] != i\n           \
    \     push!(flat(primes(i)[i]), i)\n            else\n                push!(flat(n-i),\
    \ i)\n            end\n        end\n    end\nend\n</cell>\n<code language=julia-1.0>",
  "    if n == 0 \n        Vector{Int64}() \n    else \n        for i = 2 to n \n\
    \            if gcd(i,n) == 1\n                push!(rest, i)\n            else\n\
    \                break\n        end\n    end\nend\n</cell>\n<text>\nNow let us\
    \ try out the function on a few numbers.", "    if n == 0 \n        return Vector{Int64}()\n\
    \    \n    if isa(n, Vector)\n        return n\n    \n    primes = prime_numbers(n)\n\
    \    \n    count = 0\n    for i in 1:length(n)\n        for p in primes\n    \
    \        if p == n[i]\n                count += 1\n                \n    end\n\
    \    return count\nend\n</cell>\n<code language=julia-1.5>\ncount_up_to(5)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(11)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(0)\n</cell>\n<code language=julia-1.5>\ncount_up_to(20)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(1)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(18)\n</cell>\n<text>\nExercise 4: Find the first prime number that\
    \ is > 100\nImplement a function that returns the first prime number that is >\
    \ 100.\nFor instance:", "    for i in 2..n \n        if gcd(i, n) == 1 \n    \
    \        count_up_to(n) = count_up_to(n-1) + [i]\n        end\n    end\n    count_up_to(n)\n\
    end\n</cell>\n<code language=julia-0.5>\ncount_up_to(1)\n</cell>\n<code language=julia-0.5>\n\
    count_up_to(0)\n</cell>\n<code language=julia-0.5>\ncount_up_to(20)\n</cell>\n\
    <code language=julia-0.5>\ncount_up_to(5)\n</cell>\n<code language=julia-0.5>\n\
    count_up_to(11)\n</cell>\n<code language=julia-0.5>\ncount_up_to(18)\n</cell>\n\
    <text>\nTask 4\nWrite a function that takes an integer $k$ and computes the following\
    \ sum", "    \"\"\"Implement a function that takes an non-negative integer and\
    \ returns a vector of the first n\n    integers that are prime numbers and less\
    \ than n.\n    for example:\n    >>> count_up_to(5)\n    [2, 3]\n    >>> count_up_to(11)\n\
    \    [2, 3, 5, 7]\n    >>> count_up_to(0)\n    []\n    >>> count_up_to(20)\n \
    \   [2, 3, 5, 7, 11, 13, 17, 19]\n    >>> count_up_to(1)\n    []\n    >>> count_up_to(18)\n\
    \    [2, 3, 5, 7, 11, 13, 17]\n    \"\"\"", "    if n == 0 \n        return Vector{}\n\
    \    count::Int64 = 0\n    prime_list::Vector{Int64} = Vector{Int64}(count(2..n))\n\
    \    for i in prime_list\n        prime_list[i] = 0\n    end\n    for i in prime_list\n\
    \        if prime_list[i] < 2\n            count += 1\n        end\n    end\n\
    \    count\n    return prime_list\nend", "    if n < 2 \n        return [] \n\
    \    \n    vec::Vector{Int64} = []\n    \n    for k in 1:n \n        if isPrime(k)\n\
    \            push!(vec, k)\n        end\n    end", "    if n < 0\n        error(\"\
    Input number must be non-negative.\")\n    end", "if n <= 0\n    Vector{Int64}()\n\
    else\n    prime_numbers = prime_numbers(n+1) # get all prime numbers less than\
    \ n\n    count = 0\n    for prime in prime_numbers\n        if prime <= n\n  \
    \          push!(count,prime)\n        end\n    end\n    count\nend", "    if\
    \ n < 2\n        return Vector{Int64}[]\n    end\n    vec = [2]\n    for i in\
    \ 3:(n-1)\n        if primes[i] <= n && n % primes[i] == 0\n            push!(vec,\
    \ n)\n            break\n        end\n    end\n    vec\nend\n</cell>\n<text>\n\
    Q. Write a function prime_number that takes an integer $n$ and returns the number\
    \ of primes that are less than or equal to $n$:", "    prime::Array{Int64,1} =\
    \ primes(n)\n    primes_lessThan(n) = prime[prime[] < n]\n    \n    result::Array{Int64,1}\
    \ = []\n    for i in primes_lessThan(n)\n        if i > 0\n            result.push(i)\n\
    \        end\n    end\n    return result\nend\n</cell>\n<code language=julia-1.3>\n\
    count_up_to(0)\n</cell>\n<code language=julia-1.3>\ncount_up_to(20)\n</cell>\n\
    <code language=julia-1.3>\ncount_up_to(20)\n</cell>\n<code language=julia-1.3>\n\
    count_up_to(1)\n</cell>\n<code language=julia-1.3>\ncount_up_to(18)\n</cell>\n\
    <text>\nProblem 3.3: Create the following function\nx^2 + x + 1 \nand solve it\
    \ for a range of x. Then, solve the equation for a large number of values of x\
    \ to compare the results.", "    if n < 2\n        Vector{}\n    else\n      \
    \  count_up_to(n-1)\n        for m in (2..floor(sqrt(n))) \n            push!(out,\
    \ n)\n            if m == floor(sqrt(n))\n                if n mod m == 0\n  \
    \                  push!(out, m)\n                end\n            end\n     \
    \   end\n    end\n    return out\nend\ncount_up_to(n)\n</code>\n<|/ a dscore=0\
    \ |>\n<| c |>\nThank you, but you forgot the condition: when n is a prime number.\
    \ Do you know why? I can't seem to find it myself. Thanks again though!\n<|/ c\
    \ |>\n<| c |>\nThis is not what your post says. Your post says \"the function\
    \ should return the vector of the integers between 1 and n\" while this answer\
    \ returns vectors of primes up to n. Your post's example was n=2, so I was confused.\
    \ I apologize for being confused.\n<|/ c |>\n<| c |>\nOh, I misunderstood what\
    \ you were asking, then. Do you know how I should edit the code to make it return\
    \ only prime numbers and not numbers between 1 and n? Again, thank you for your\
    \ help.\n<|/ c |>\n<| c |>\nYou didn't answer my question. Your original post\
    \ said \"the function should return the vector of the integers between 1 and n\"\
    , but my answer doesn't do that, it returns the prime numbers up to n. So you\
    \ need to edit your post to clarify the question instead of changing it after\
    \ it's been answered.\n<|/ c |>\n<| c |>\nThank you, sorry about that. I edited\
    \ it again now to make the question more clear.\n<|/ c |>\n<| a dscore=0 tags=primes,julia,for-loop,function,while-loop\
    \ |>\n<code>", "    if n < 0\n        error(\"count_up_to: n should be >= 0\"\
    )\n    end", "    return vec(\n        ifelse(\n            n < 0, \n        \
    \    [], \n            ifelse(\n                n < length(Vec(prime_vec())) \n\
    \                && prime_vec()[n] == 1,\n                Vec([n]),\n        \
    \        ifelse(\n                    prime_vec()[n] < length(Vec(prime_vec()))\
    \ \n                    && prime_vec()[n] >= 2 \n                    && all(x\
    \ -> n % x == 0, prime_vec()[1:n+1]),\n                    Vec(prime_vec()[1:n+1]),\n\
    \                    count_up_to(n - length(Vec(prime_vec())) + 1)\n         \
    \       )\n            )\n        )\n    )\nend", "    if n <= 0 \n        Vector{Int64}()\
    \ \n    else \n        append!(count_up_to(n-1), [Int64(floor(n/2))]) \n     \
    \   append!(count_up_to(n-1), [Int64(ceil(n/2))]) \n    end\nend \n</cell>\n<code\
    \ language=julia-0.5>\n# Exercise\n# Implement count_up_to() using recursion\n\
    </cell>\n<text>\nExercise 10\nWrite a function called count_down_to() that takes\
    \ an integer and returns the vector\n[integer] that counts down to the number\
    \ n from the number 1.\nFor example:\ncount_down_to(5) == [1, 4, 3]\ncount_down_to(6)\
    \ == [5, 4, 3, 2, 1]", "    if n < 2\n        []\n    elseif n % 2 == 1\n    \
    \    []\n    else\n        primes = prime_list(100)\n        p =  primes[Int(n)]\n\
    \        push!(primes, p)\n        push!(primes, 2*p)\n        push!(primes, 3*p\
    \ + 1)\n        push!(primes, 4*p + 2)\n        push!(primes, 5*p + 3)\n     \
    \   push!(primes, 6*p + 4)\n        push!(primes, 7*p + 5)\n        push!(primes,\
    \ 8*p + 6)\n        push!(primes, 9*p + 7)\n        push!(primes, 10*p + 8)\n\
    \        push!(primes, 11*p + 9)\n        push!(primes, 12*p + 10)\n        push!(primes,\
    \ 13*p + 11)\n        push!(primes, 14*p + 12)\n        push!(primes, 15*p + 13)\n\
    \        push!(primes, 16*p + 14)\n        push!(primes, 17*p + 15)\n        push!(primes,\
    \ 18*p + 16)\n        push!(primes, 19*p + 17)\n        push!(primes, 20*p + 18)\n\
    \        push!(primes, 21*p + 19)\n        push!(primes, 22*p + 20)\n        push!(primes,\
    \ 23*p + 21)\n        push!(primes, 24*p + 22)\n        push!(primes, 25*p + 23)\n\
    \        push!(primes, 26*p + 24)\n        push!(primes, 27*p + 25)\n        push!(primes,\
    \ 28*p + 26)\n        push!(primes, 29*p + 27)\n        push!(primes, 30*p + 28)\n\
    \        push!(primes, 31*p + 29)\n        push!(primes, 32*p + 30)\n        push!(primes,\
    \ 33*p + 31)\n        push!(primes, 34*p + 32)\n        push!(primes, 35*p + 33)\n\
    \        push!(primes, 36*p + 34)\n        push!(primes, 37*p + 35)\n        push!(primes,\
    \ 38*p + 36)\n        push!(primes, 39*p + 37)\n        push!(primes, 40*p + 38)\n\
    \        push!(primes, 41*p + 39)\n        push!(primes, 42*p + 40)\n        push!(primes,\
    \ 43*p + 41)\n        push", "    if n == 0 \n        []\n    else \n        count_up_to(n\
    \ - 1) + [x | x <- [2..n], primes?(x)]\nend", "    if n < 0 \n        return []\n\
    \    end\n    return take_while( (x) -> x%n != 0, primes(n))\nend\n</cell>\n<text>\n\
    Test your Code", "    if n<1\n        return Vector{Int64}()\n    count_up_to(n-1)\n\
    \    return if isPrime(n)\n            Vector{Int64}(n-1)\n        else\n    \
    \        count_up_to(n-1)+n\n    end\nend\n\"\"\"\nImplement a function that takes\
    \ an non-negative integer and returns a vector of the first n\n    integers that\
    \ are prime numbers and less than n.\n    for example:\n    >>> count_up_to(5)\n\
    \    [2, 3]\n    >>> count_up_to(11)\n    [2, 3, 5, 7]\n    >>> count_up_to(0)\n\
    \    []\n    >>> count_up_to(20)\n    [2, 3, 5, 7, 11, 13, 17, 19]\n    >>> count_up_to(1)\n\
    \    []\n    >>> count_up_to(18)\n    [2, 3, 5, 7, 11, 13, 17]\n    \"\"\"", " \
    \       vec = Vector{Int64}()\n        for i = 1:n \n           if isprime(i)\
    \ && isprime(n-i) \n              push!(vec,i+n-i)\n           end\n        end\n\
    \        return vec\n    end\n    \n\"\"\"\n    count_up_to\n    \n    >>> count_up_to(0)\n\
    \    []\n    >>> count_up_to(1)\n    [1]\n    >>> count_up_to(20)\n    [2, 3,\
    \ 5, 7, 11, 13, 17, 19]\n    >>> count_up_to(20)\n    [2, 3, 5, 7, 11, 13, 17,\
    \ 19]\n    \"\"\"", "    if n < 2\n        Vector{}\n    elseif n % 2 == 1\n \
    \       count_up_to(n/2)\n    else\n        count_up_to(3*n+1)\n    end\nend\n\
    </cell>\n<code language=julia-0.5>\ncount_up_to(100000)\n</cell>\n<code language=julia-0.5>\n\
    count_up_to(100001)\n</cell>\n<code language=julia-0.5>\ncount_up_to
  "    if n == 0\n        Vector{Int64}()\n    else\n        div = divmod((n-1), 2)[1]\n\
    \        div == 0 || count_up_to(div) + [div]\n    end\nend", "    if n < 1 \n\
    \        return [] \n    else if n==1 \n        return [Int64(1)] \n    elseif\
    \ isPrime(n) \n        return primes(n) \n    else \n        count_up_to(n-1)\n\
    \    end\nend\ncount_up_to(5)\n</cell>\n<code language=julia-1.6>", "    count_up_to\
    \ = []\n    \n    # Write your code in Ruby here\n    if n == 0\n        count_up_to\n\
    \    else\n        count_up_to + [2 for _ in 2:n-1] + [1 for i in 2:n if i%2 ==\
    \ 0]\n    end\n    \nend\n</cell>\n<text>\nTask", "    for i in 2..n\n       \
    \ if primes(i)>1\n            push!(res, i)\n        else\n            break\n\
    \        end\n    end\n    return res\nend\n</code>\nNow let us call count_up_to\
    \ on the original vector\n<code>\ncount_up_to(3)\ncount_up_to(2)\ncount_up_to(1)\n\
    count_up_to(0)\ncount_up_to(10)\ncount_up_to(8)\ncount_up_to(9)\ncount_up_to(7)\n\
    count_up_to(6)\ncount_up_to(5)\ncount_up_to(4)\ncount_up_to(3)\ncount_up_to(2)\n\
    count_up_to(1)\ncount_up_to(0)\ncount_up_to(10)\ncount_up_to(8)\ncount_up_to(9)\n\
    count_up_to(7)\ncount_up_to(6)\ncount_up_to(5)\ncount_up_to(4)\ncount_up_to(3)\n\
    count_up_to(2)\ncount_up_to(1)\ncount_up_to(0)\ncount_up_to(10)\ncount_up_to(8)\n\
    count_up_to(9)\ncount_up_to(7)\ncount_up_to(6)\ncount_up_to(5)\ncount_up_to(4)\n\
    count_up_to(3)\ncount_up_to(2)\ncount_up_to(1)\ncount_up_to(0)\ncount_up_to(10)\n\
    count_up_to(8)\ncount_up_to(9)\ncount_up_to(7)\ncount_up_to(6)\ncount_up_to(5)\n\
    count_up_to(4)\ncount_up_to(3)\ncount_up_to(2)\ncount_up_to(1)\ncount_up_to(0)\n\
    count_up_to(10)\ncount_up_to(8)\ncount_up_to(9)\ncount_up_to(7)\ncount_up_to(6)\n\
    count_up_to(5)\ncount_up_to(4)\ncount_up_to(3)\ncount_up_to(2)\ncount_up_to(1)\n\
    count_up_to(0)\ncount_up_to(10)\ncount_up_to(8)\ncount_up_to(9)\ncount_up_to(7)\n\
    count_up_to(6)\ncount_up_to(5)\ncount_up_to(4)\ncount_up_to(3)\ncount_up_to(2)\n\
    count_up_to(1)\ncount_up_to(0)\ncount_up_to(10)\ncount_up_to(8)\ncount_up_to(9)\n\
    count_up_to(7)\ncount_up_to(6)\ncount_up_to(5)\ncount_up_to(4)\ncount_up_to(3)\n\
    count_up_to(2)\ncount_up_to(1)\ncount_up_to(0)\ncount_up_to(10)\ncount_up_to(8)\n\
    count_up_to(9)\ncount_up_to(7)\ncount_up_to(6)\ncount_up_to(5)\ncount_up_to(4)\n\
    count_up_to(3)\ncount_up_to(2)\ncount_up_to(1)\ncount_up_to(0)\ncount_up_to(10)\n\
    count_", "    \n    # Base case\n    if n < 2\n        return Vector{Int64}()\n\
    \    end", "    vec = []\n    for i in 1:n\n        if isPrime(i)\n          \
    \  push!(vec, i)\n        else\n            break\n        end\n    end\n    vec\n\
    end\n</cell>\n<cell>\n@test count_up_to(10) == [2, 3, 5, 7, 11, 13, 17]\n@test\
    \ count_up_to(12) == [2, 3, 5, 7, 11, 13]\n@test count_up_to(0) == []\n@test count_up_to(5)\
    \ == [2, 3]\n@test count_up_to(17) == [2, 3, 5, 7, 11, 13, 17]\n</cell>\n<text>\n\
    Exercise 6\nImplement the function factorial(n) that takes an integer and returns\
    \ the factorial of n (1!, 2!, 3!, etc.)", "    if n < 2\n        return []\n \
    \   primes = primes_up_to_n(n)\n    primes.retain { |x| x <= n }\n    primes.take\
    \ n \nend\n</cell>\n<code language=julia-1.6>\ncount_up_to(5)\n</cell>\n<code\
    \ language=julia-1.6>\ncount_up_to(15)\n</cell>\n<code language=julia-1.6>\ncount_up_to(200)\n\
    </cell>\n<code language=julia-1.6>\ncount_up_to(-1)\n</cell>\n<code language=julia-1.6>\n\
    @time count_up_to($n::Int64); \n</cell>\n<code language=julia-1.6>\n@time count_up_to($n::Int64);\
    \ \n</cell>\n<code language=julia-1.6>", "    if n <= 1 \n        return Array{Int64,1}()\n\
    \    end\n    count::Int64 = 1\n    current = 2\n    while current <= n \n   \
    \     if isPrime(current) \n            count += 1\n        else \n          \
    \  current = current + 2\n        end\n    end\n    return count::Int64 + 2\n\
    end", "  if n==0 \n    return Vector{Int64}()\n  else \n    count_up_to=count_up_to(n-1)\
    \ + [Int64(n)]\n  end\nend\n</cell>\n<code language=julia-1.0>\n@time count_up_to(10)\n\
    </cell>\n<text>\nLet's use our count_up_to function to do some vector math!",
  "    if n <= 0\n    else count_up_to(n - 1) + [n for n in 1:n if prime(n)<=n]\n\
    end", "    if n < 2 || n == 0 \n        vec = []\n        return vec \n    else\
    \ \n        vec = [2 .+ n for n in 1:(n-1)]\n        for _ in 1:(n-1) \n     \
    \       if sieve[n] == true \n                for p in [2..n] \n             \
    \       sieve[p] = false \n            end \n            vec = [p for p in vec\
    \ if !sieve[p]] \n        end \n        return vec \n    end \nend ", "    if\
    \ n < 2\n        return Vector{Int64}[]\n    vec = [Int64(n)]\n    if n == 0\n\
    \        return Vector{Int64}[]\n    while n != 0\n        count_up_to_next =\
    \ count_up_to(n-1)\n        for element in count_up_to_next\n            if element\
    \ == 0\n                vec.pop()\n                break\n            else\n \
    \               push!(vec, element)\n        end\n        n -= 1\n    end\n  \
    \  return vec\nend\n</cell>\n<code language=julia-0.5>\ncount_up_to(7)\n</cell>\n\
    <text>\nThe Sieve of Eratosthenes", "    for n in 2..n do\n        p <- primes(n)\n\
    \        if p <= n && n <= length(p) \n            push!(p, 2)\n            push!(p,\
    \ 3)\n            push!(p, 5)\n            push!(p, 7)\n            push!(p, 11)\n\
    \            push!(p, 13)\n            push!(p, 17)\n            push!(p, 19)\n\
    \        else\n            push!(p, 2)\n            push!(p, 3)\n            push!(p,\
    \ 5)\n            push!(p, 7)\n            push!(p, 11)\n            push!(p,\
    \ 13)\n            push!(p, 17)\n        end\n    end\n    p\nend\n</cell>\n<text>\n\
    Next, we define a function which will take the n values, and output the sum of\
    \ their factorials.", "  if n==0 \n    Vector{}\n  elseif n==1 \n    Vector{1}\n\
    \  else\n    count_up_to(floor(n/2)) + [n mod 2 | i <- count_up_to(floor(n/2)-1)\
    \ ; n >= i*i]\nend", "    counts = Vector{Int64}()\n    if n == 0\n        counts\n\
    \    else\n        for i in 2:n-1\n            if isprime(i) && i > 1\n      \
    \          counts = counts + i\n                break\n            end\n     \
    \   end\n    end\n    return counts\nend", "    #n = 0 \n    # your code here\n\
    \    if n == 0 \n        Vector{Int64}() \n    else \n        count_up_to(n -\
    \ 1) + primes(n)  \nend\n</cell>\n<code language=julia-1.6>\ncount_up_to(10)\n\
    </cell>\n<code language=julia-1.6>\ncount_up_to(1)\n</cell>\n<code language=julia-1.6>\n\
    count_up_to(10)\n</cell>\n<text>\nProblem 7\nImplement the function prime_sum(N),\
    \ which returns the sum of all prime numbers less than or equal to N.", "    \"\
    \"\"Implement a function that takes an non-negative integer and returns a vector\
    \ of the first n\n    integers that are prime numbers and less than n.\n    \"\
    \"\"\nif n < 0\n    return []\nelseif n == 0\n    return []\nelseif n == 1\n \
    \   return [1]\nelseif n % 2 == 0\n    return [2]\nelse\n    l = count_up_to(n/2)\
    \ # Vector{Int64}\n    push!(l, 2)\n    for i in l\n        if n % i == 0\n  \
    \          push!(l, n / i)\n        end\n    end\nend", "    primes = primeFactors(n)\n\
    \    count = 0\n    for p in primes\n        if p <= n \n            push!(count,\
    \ p)\n        end\n    end\n    return count\nend\n</cell>\n<code language=julia-1.6>\n\
    @test count_up_to(100) == [2, 3]\n@test count_up_to(15) == [2, 3, 5, 7]\n@test\
    \ count_up_to(0) == []\n@test count_up_to(20) == [2, 3, 5, 7, 11, 13, 17, 19]\n\
    @test count_up_to(1) == []\n@test count_up_to(18) == [2, 3, 5, 7, 11, 13, 17]\n\
    </cell>\n<text>\n5. Repeat exercise: Write a function that takes a non-negative\
    \ integer and returns the nth fibonacci number \n    that is less than or equal\
    \ to n.\n    for example:\n    >>> fibonacci(0)\n    0\n    >>> fibonacci(1)\n\
    \    1\n    >>> fibonacci(2)\n    1\n    >>> fibonacci(3)\n    2\n    >>> fibonacci(4)\n\
    \    3\n    >>> fibonacci(100)\n    2331689983\n    >>> fibonacci(101)\n    2331689982\n\
    \    >>> fibonacci(102)\n    2331689984\n    >>> fibonacci(103)\n    2331689987\n\
    \    \"\"\"", "    v = Vector{Int64}()\n    if n <= 0\n        v\n    elseif n\
    \ < 2\n        n\n    else\n        push!(v, 1)\n        n = n-1\n        while\
    \ n <= length(unique(v))\n            push!(v, 1)\n            n = n + 1\n   \
    \     end\n        v\n    end\nend\ncount_up_to(_) = error(\"count_up_to got invalid\
    \ arg: $(typeof(arg))\")", "    if n < 1 \n        return []\n    elseif n < 2\
    \ \n        return [1]\n    elseif prime_table[n] == true \n        return [1]\n\
    \    elseif prime_table[n] == false \n        return [2]\n    end\n    prime_count\
    \ = prime_table[n]\n    if prime_count >= 3 \n        prime_count = 1\n    end\n\
    \    for i = 2 to n \n        for p in prime_table[i*i]\n            if p > prime_count\
    \ \n                prime_count = p\n            end\n        end\n    end\n \
    \   for i = 2 to n \n        for p in prime_table[i*i]\n            if p > prime_count\
    \ \n                prime_count = p\n            end\n        end\n    end\n \
    \   return prime_table[prime_count*prime_count+n] \nend", "    if n<0\n      \
    \  return Vector{}\n    \n    \n    \n    \"\"\"\n    # Your code here\n    \"\
    \"\"\n    \n    return Vector{Int64}(2,3)\nend\n</cell>\n<text>\nSolution", " \
    \   if n < 2\n        return [1]\n    else if n < 4\n        return [2]\n    else\n\
    \        primes = [2,3,5,7,11,13,17,19]\n        count = 0\n        for p in primes\n\
    \            while n >= p\n                n -= p\n                count += 1\n\
    \        end\n        return primes[2:end] + primes[1:count-1]\n    end\nend\n\
    </cell>\n<code language=julia-1.4>\ncount_up_to(6)\n</cell>\n<code language=julia-1.4>\n\
    count_up_to(10)\n</cell>\n<code language=julia-1.4>\ncount_up_to(0)\n</cell>\n\
    <text>\nWrite a function that takes an array of integers and returns an array\
    \ of integers that repeats the elements of the input array 'n' times", "    if\
    \ n < 2\n        return Vector{Int64}()\n    if n == 0\n        return Vector{Int64}()\n\
    \    count_up_to(n-1)\n    for x in prime_numbers(n)\n        if x < n\n     \
    \       return push!(count_up_to(x), n-1)\n    return Vector{Int64}()\nend", " \
    \   first = []\n    last = 0\n    for i in 1:n-1\n        for j in primes(i)\n\
    \            if i <= j\n                push!(first, i)\n                break\n\
    \            else\n                last = j\n        end\n    end\n    first\n\
    end\n</cell>\n<text>\nExercise: implement a function that takes an integer $n$\
    \ and returns a vector $a$ of the first $n$ prime numbers less than $n$.", " \
    \   if n == 0\n        Vector{}\n    elseif n == 1\n        Vector{1}\n    else\n\
    \        [2, 3, 5, 7, 11, 13, 17]\n    end\nend\n</code>\n<|/ a |>\n<| a tags=performance,algorithm,primes,julia\
    \ dscore=1 |>\nHere is a short implementation of the sieve of Eratosthenes in\
    \ Julia:\n<code>", "    if n < 2 \n    then Vector{Int64}() \n    else if n ==\
    \ 2 \n    then Vector{Int64}(1, n) \n    else if isPrime(n) \n    then Vector{Int64}(n,\
    \ n) \n    else count_up_to(n - 1) + (isPrime(n) ? n : [])\nend\n\"\"\"\n    count_up_to(n::Int64)\
    \ = (n < 2 ? [] : Vector{Int64}(n, count_up_to(n-1)))\nend\n\"\"\"\n    function\
    \ count_down_to(n::Int64)::Vector{Int64} \n        if n < 2 \n        then Vector{Int64}()\
    \ \n        else if n == 2 \n        then Vector{Int64}(1, n) \n        else if\
    \ isPrime(n) \n        then Vector{Int64}(n, n) \n        else count_down_to(n\
    \ - 1) + (isPrime(n) ? n : [])\n        end\n    end\n\"\"\"\n    function count_down_to(n::Int64)::Vector{Int64}\
    \ \n        if n < 2 \n        then Vector{Int64}() \n        else if n == 2 \n\
    \        then Vector{Int64}(1, n) \n        else if isPrime(n) \n        then\
    \ Vector{Int64}(n, n) \n        else count_down_to(n - 1) + (isPrime(n) ? n :\
    \ [])\n        end\n    end\n\"\"\"\n    function count_up_to(n::Int64)::Vector{Int64}\
    \ \n        if n < 2 \n        then Vector{Int64}() \n        else if n == 2 \n\
    \        then Vector{Int64}(1, n) \n        else if isPrime(n) \n        then\
    \ Vector{Int64}(n, n) \n        else count_up_to(n - 1) + (isPrime(n) ? n : [])\n\
    \        end\n    end\n\"\"\"\n    function count_down_to(n::Int64)::Vector{Int64}\
    \ \n        if n < 2 \n        then Vector{Int64}() \n        else if n == 2 \n\
    \        then Vector{Int64}(1, n) \n        else if isPrime(n) \n        then\
    \ Vector{Int64}(n, n) \n        else count_down_to(n - 1) + (isPrime(n) ? n :\
    \ [])\n        end\n    end\n\"\"\"\n    function count_up_to(n::Int64)::Vector{Int64}\
    \ \n        if n < 2 \n        then Vector{Int64}() \n        else if n == 2 \n\
    \        then Vector{Int64}(1, n) \n        else if isPrime(n) \n        then\
    \ Vector{Int64}(n, n) \n        else count_", "    if n <= 0\n        []\n   \
    \ else\n        count_up_to(n-1)[n - 1]\n    end\nend\n</cell>\n<code language=julia-1.3>",
  "    if n < 1\n        return Vector{}\n    if n == 1\n        return Vector{n}\n\
    \    return filter(x->(x!=1), count_up_to(n-1))\nend\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(19)\n</cell>\n<code language=julia-1.5>\ncount_up_to(20)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(5)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(10)\n</cell>\n<code language=julia-1.5>\ncount_up_to(9)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(10)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(11)\n</cell>\n<code language=julia-1.5>\ncount_up_to(-1)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(0)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(10)\n</cell>\n<code language=julia-1.5>\ncount_up_to(100)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(10000000000000)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(10000000000001)\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ computes the factorial of a given number. Factorial is the number multiplied\
    \ once by itself multiplied by the number of times it appears.", "    primes =\
    \ 2::Int64\n    vector = Vector{Int64}[]\n    while primes <= n \n        primes\
    \ += 2\n        for p in primes, primes+primes\n            if n%p == 0\n    \
    \            vector = vector...\n                break\n        end\n    end\n\
    \    return vector\nend", "    if n < 1 return [] \n    primes = prime_numbers(n)\
    \ \n    return primes[2:end]+primes[1:end]\nend\n</cell>\n<code language=julia-1.0>\n\
    count_up_to(5)\n</cell>\n<text>\nProblem 9. Write a function to generate all permutations\
    \ of a set of elements, including duplicates\n(ordering does matter). Do not include\
    \ repeated elements in the output if they do not appear multiple times in the\
    \ input. Order does not matter. For example,", "    if n < 0 return []\n    primes\
    \ = primes_list()\n    for p in primes\n        if p > n return []\n    end\n\
    \    return [v for v in primes if v < n]\nend\n</cell>\n<code language=julia-1.3>\n\
    @time count_up_to(2000000000);\n</cell>\n<text>\nExercise 8\nWrite a function\
    \ that takes an integer vector and returns a vector where the values in the\n\
    vector are all unique. For example,\n>>> [1, 1, 3, 2, 4]\n>>> [1, 2, 3, 4]\n>>>\
    \ [1, 2, 3, 4, 5]\n>>> [1, 2, 3]\n>>> [1, 2]\n>>> [1]\n>>> []\n>>> [4, 3, 2, 1]\n\
    The solution should be in Julia.", "    \"\"\"Implement a function that takes\
    \ an non-negative integer and returns a vector of the first n\n    integers that\
    \ are prime numbers and less than n.\n    for example:\n    >>> count_up_to(5)\n\
    \    [2, 3]\n    >>> count_up_to(11)\n    [2, 3, 5, 7]\n    >>> count_up_to(0)\n\
    \    []\n    >>> count_up_to(20)\n    [2, 3, 5, 7, 11, 13, 17, 19]\n    >>> count_up_to(1)\n\
    \    []\n    >>> count_up_to(18)\n    [2, 3, 5, 7, 11, 13, 17]\n    \"\"\"", " \
    \   if n == 0 \n        Vector{Int64}([]) \n    else \n        # first n integers\
    \ that are prime numbers and less than n\n        for i in 2..n\n            if\
    \ is_prime(i) == true && i > n \n                push!(count_up_to(n), i) \n \
    \           else \n                break\n        end\n        return count_up_to(n)\
    \ \n    end\nend\n</code>\n<|/ a tags=julia |>\n<| a dscore=0 |>\nI guess this\
    \ would be a better implementation, which I think I saw in a lecture.\n<code>\n\
    # https://discuss.codechef.com/t/count-numbers-between-two-n-numbers/1524\n# https://stackoverflow.com/a/44534441/1059398",
  "    if n == 0 \n        Vector{Int64}()\n    else if n == 1\n        Vector{Int64}[1]\n\
    \    else\n        primes = isPrime(n)\n        vecs = Vector{Int64}[]\n     \
    \   for p in primes\n            if p > n \n                push!(vecs, n-1)\n\
    \            else\n                push!(vecs, p) \n            end\n        end\n\
    \        vecs\n    end\nend\n</cell>\n<code language=julia-1.3>", "    if n <\
    \ 2 \n        return vec() \n    \n    if n == 2 \n        vec = Vector{Int64}([n])\
    \ \n    else \n        vec = Vector{Int64}[]\n        if isPrime(n) \n       \
    \     push!(vec, n) \n        else \n            push!(vec, 2) \n            for\
    \ i in 3:3n \n                if !isPrime(i) \n                    break \n  \
    \              push!(vec, i) \n            end \n        end \n    end \n    return\
    \ vec \nend \n</cell>\n<code language=julia-0.6>\ncount_up_to(5)\n</cell>\n<code\
    \ language=julia-0.6>\ncount_up_to(11)\n</cell>\n<code language=julia-0.6>\ncount_up_to(0)\n\
    </cell>\n<code language=julia-0.6>\ncount_up_to(20)\n</cell>\n<code language=julia-0.6>\n\
    count_up_to(1)\n</cell>\n<code language=julia-0.6>\ncount_up_to(18)\n</cell>\n\
    <code language=julia-0.6>\ncount_up_to(19)\n</cell>\n<code language=julia-0.6>\n\
    @which count_up_to(19)\n</cell>\n<text>\n@which - Displays the function definition\
    \ instead of running the code.", "    if is_integer(n) \n        return ones(Int,\
    \ n) + 2\n    \n    elseif n < 1 \n        return []\n    \n    elseif n % 2 ==\
    \ 0 \n        primes = [2, 3, 5, 7, 11, 13, 17]\n    \n    else\n        primes\
    \ = [i | i <- filter(i -> i % n == 0, 2:sqrt(n))], primes\n    end\n    \n   \
    \ n >= 4 ? (return [primes[floor(Int, sqrt(n))], primes[ceil(Int, sqrt(n))]])\n\
    \    \n    else \n        primes[2] <= n ? (return []) : primes[2] <= n / 2 ?\
    \ (return primes) : count_up_to(n + 2)\n    end\nend\n</cell>\n<text>\nQuestion\
    \ 2", "    if n == 0 || n == 1 \n        return []\n    count_up_to(n-1)\n   \
    \ for i in 2..n do \n        if n%i == 0 \n            push!(count_up_to(n-i),\
    \ i)\n    return count_up_to(n)\nend\n</cell>\n<cell>\ncount_up_to(100)\n</cell>\n\
    <text>\nExercise 2.2\nWrite a function that returns the factorial of a given number.\
    \ Recall that the factorial is defined as the product\nof a number and the number\
    \ $n$. For example:", "    if n == 0\n        Vector[]\n    else\n        primes\
    \ = prime_list(Int64, sqrt(n))\n        Vector[i for i in primes if i <= n] \n\
    \    end\nend\n</cell>\n<text>\nExercise", "    count = Vector{Int64}(length =\
    \ n)\n    primes = Vector{Int64}(length = n + 1)\n    for i in 1..n\n        if\
    \ primes[i] == 1\n            continue\n        else\n            count[i] = 0\n\
    \        end\n        for i in 1..n\n            if primes[i] == i\n         \
    \       continue\n            else\n                count[i] += i\n          \
    \  end\n        end\n    end\n    return count\nend", "    if n < 1\n        return\
    \ []\n    ends = Vector{Int64}()\n    if n == 1\n        return [1]\n    ends.push(2)\n\
    \    divs = 3\n    while divs <= n\n        if n % divs == 0\n            ends.push(divs)\n\
    \        ends.push(n/divs)\n        divs += divs\n    ends.push(n)\n    return\
    \ ends\nend", "    if n < 2\n        return Vector{}\n    \n    counts = Vector{Int64}()\n\
    \    i = 2\n    while i <= n\n        counts += i\n        if i % i == 0\n   \
    \         while i % i == 0:\n                counts += 1\n                i +=\
    \ 1\n        end\n        i += 1\n    return counts\nend\n</cell>\n<code language=julia-0.6>\n\
    count_up_to(4)\n</cell>\n<text>\nExercise 3\nImplement a function that counts\
    \ how many numbers from 0 to N are evenly divisible by 2.", "    if n <= 0 \n\
    \        Vector{Int64}() \n    else if n % 2 == 0 \n        Vector{Int64}([n])\
    \ #\n    else \n        count_up_to(n / 2)\n    end\nend", "    prime_array =\
    \ [Int64]()\n    prime_array.append(2)\n    prime_array.append(3)\n    prime_array[1]\
    \ = false\n    prime_array[3] = false\n    for i in prime_array\n        if i\
    \ <= n\n            if isPrime(i)\n                prime_array.append(i)\n   \
    \             prime_array[1] = true\n            else\n                prime_array[1]\
    \ = false\n                prime_array[2] = true\n        end\n    end\n    return\
    \ prime_array\nend", "    if n < 0 \n        return Vector{}\n    \n    sieve\
    \ = primes(n+1) |> Array.filter(x->x<n) |> Array.filter(x->isPrime(x)) |> Array.filter(x->x<n)\
    \ |> Array.filter(x->isPrime(x)) |> Array.map(x->x-1)\n    primes = [i for i=1:(n-1)]\n\
    \    i = 0\n    while true\n        if sieve[i] == 0\n            primes.push(i)\n\
    \            i += 1\n        else\n            i +=1\n            break\n    end\n\
    \    return primes\nend", "    count_up = Vector{Int64}()\n    if n<=0\n     \
    \   count_up = Vector{Int64}()\n    elseif n == 1\n        count_up = Vector{Int64}(n)\n\
    \    else\n        primes = Primes(n+1)\n        for pat in primes\n         \
    \   if n >= pat\n                if n % pat == 0\n                    count_up\
    \ = append(count_up, n)\n                    break\n            end\n        end\n\
    \    end\n    return count_up\nend\n</cell>\n<text>\nTests\nLet's make sure it\
    \ works on small numbers and check that the output makes sense.", "    count_up_to\
    \ = []\n    \n    # write your code here", "    if n<0 then return []\n    if\
    \ n==0 then return [0]\n    \n    primes = primes(n)\n    \n    vector = []\n\
    \    for i in primes\n        if i <= n and i^(n-1) <= n\n            push!(vector,i)\n\
    \        end\n    end\n    \n    return vector\nend\n</cell>\n<code language=julia-0.5>\n\
    count_up_to(5)\n</cell>\n<code language=julia-0.5>\n@time count_up_to(10)\n</cell>\n\
    <code language=julia-0.5>\ncount_up_to(10000)\n</cell>\n<code language=julia-0.5>\n\
    @time count_up_to(100000)\n</cell>\n<text>\nThe next step is to write a function\
    \ that can generate all the prime numbers up to a number. It can be done by using\
    \ the function count_up_to", "    \"\"\"\n    Count the integers up to and including\
    \ n that are prime numbers and are less than n.\n    \"\"\"\n    return count_up_to(n)\n\
    end", "    if n <= 0\n        []\n    else\n        factors = factor(n)\n    \
    \    primes = prime_number(n)\n        prime_numbers = Set()\n        for prime\
    \ in primes\n            prime_numbers.add(prime)\n            factors_primes\
    \ = factors(prime)\n            product = 1\n            for factor in factors_primes\n\
    \                product *= factor\n            prime_numbers.add(product)\n \
    \           prime_numbers_less_than = Set(prime_numbers)\n            prime_numbers_less_than.delete(n)\n\
    \            prime_numbers_less_than.add(n)\n            count_up_to_vec = prime_numbers_less_than\
    \ + count_up_to(n-1)\n        end\n    end\n    return count_up_to_vec\nend\n\
    </cell>\n<code language=julia-1.1>\n@time count_up_to(30000)\n</cell>\n<text>\n\
    Exercise 1: Implement the count_down_to function so that given a non-negative\
    \ integer n, it returns the first n integers that are prime numbers and less than\
    \ n and in descending order. For example count_down_to(5) returns:", "    if n\
    \ <= 0\n    []\n    else\n        count_up_to(n - 1) |> x -> if is_prime(x) ==\
    \ true\n            x :: x\n        else\n            x :: x\n        end\n  \
    \  end\nend\n</cell>\n<code language=julia-0.6>", "    vector=Vector{Int64}()\n\
    \    vector=vector+(2:3:n-1)\n    return vector\nend\n</cell>\n<code language=julia-1.0>\n\
    count_up_to(3)\n</cell>\n<code language=julia-1.0>\ncount_up_to(5)\n</cell>\n\
    <code language=julia-1.0>\ncount_up_to(8)\n</cell>\n<code language=julia-1.0>\n\
    count_up_to(10)\n</cell>\n<code language=julia-1.0>\ncount_up_to(100)\n</cell>\n\
    <code language=julia-1.0>\ncount_up_to(200)\n</cell>\n<code language=julia-1.0>\n\
    count_up_to(1000)\n</cell>\n<code language=julia-1.0>\ncount_up_to(1000000)\n\
    </cell>\n<code language=julia-1.0>\ncount_up_to(20000000)\n</cell>\n<code language=julia-1.0>\n\
    count_up_to(1000000000)\n</cell>\n<code language=julia-1.0>\ncount_up_to(2000000000)\n\
    </cell>\n<text>\nExercise 1", "    if n < 2\n        return []\n    \n    primes\
    \ = prime_numbers(n)\n    count = 0\n    for p in primes\n        if count < n\n\
    \            push!(primes, p)\n        end\n        if p <= n\n            push!(primes,\
    \ p)\n        end\n    end\n    return primes\nend\n</cell>\n<code language=julia-0.6>\n\
    primes = count_up_to(5)\n</cell>\n<code language=julia-0.6>\nprimes == [2, 3,\
    \ 5, 7, 11, 13, 17, 19]\n</cell>\n<code language=julia-0.6>", "    if n == 0 \n\
    \        return [] \n    if n == 1 \n        return [1] \n    if n % 2 == 0 \n\
    \        return [n for n in count_up_to(n-1)]\n    \n    primes = primes2(3) \n\
    \    \n    count = Vector{Int64}() \n    for prime in primes \n        if n <=\
    \ prime\n            push!(count,n)\n            return count \n        end \n\
    \    end \n    \n    for prime in primes \n        if n <= prime\n           \
    \ push!(count,prime)\n            if n % prime == 0\n                return count\
    \ \n            end \n        end \n    end \n    \n    return count \nend \n\
    \    \n\"\"\" Return a vector of all the prime numbers less than or equal to n.\
    \ \"\"\"", "    candidates = collect(2:2:n)\n    candidates = filter(isPrime,candidates)\n\
    \    candidates = filter(n >= candidates, candidates)\n    return candidates\n\
    end", "    count_up = Vector{Int64}[]\n    for num in prime_numbers\n        if\
    \ n < num\n            count_up = count_up ++ [num]\n        else\n          \
    \  break\n        end\n    end\n    return count_up\nend\n</cell>\n<code language=julia-1.4>\n\
    count_up_to(5) #=> [2, 3]\ncount_up_to(11) #=> [2, 3, 5, 7]\ncount_up_to(0)  #=>\
    \ []\ncount_up_to(20) #=> [2, 3, 5, 7, 11, 13, 17, 19]\ncount_up_to(1) #=> []\n\
    count_up_to(18) #=> [2, 3, 5, 7, 11, 13, 17]\n</cell>\n<text>\nTo compute cumulative\
    \ sums:", "        primes = primes(n)\n        prime_numbers = prime_numbers(n)\n\
    \        for prime in primes\n            if prime in prime_numbers\n        \
    \        prime_numbers.remove!(prime)\n                return prime_numbers +\
    \ primes\n            end\n        end\n        return prime_numbers + primes\n\
    \    end\n</code>\n<|/ a tags=julia,primes |>\n<| c |>\nI agree with you, your\
    \ code is a nice start however it is not an optimal approach. There are some improvements\
    \ you can make to your code. First you are using a list to store a number that\
    \ is already in a list. Second you are using \"in\" instead of looping through\
    \ the list with loop. Also since julia lists are immutable you are copying the\
    \ prime_numbers list at each iteration. The final improvement can be achieved\
    \ with a single list comprehension and a little bit of optimization.\n<|/ c |>\n\
    <| c |>\nGood comments. I updated the code. I guess there are many ways to improve\
    \ the code and your comments helped me to find a good one. Thanks!\n<|/ c |>\n\
    <| c |>\nThanks! I appreciate it.\n<|/ c |>\n<| a tags=julia,primes |>\nA lot\
    \ of improvements have been made to the previous answers.\nTo optimize your code\
    \ you can use the following improvements:", "    if n == 0\n        return Vector{}\n\
    \    \n    candidates = [2, 3, 5, 7, 11, 13, 17]\n    \n    if n <= length(candidates)\n\
    \        candidates\n    else\n        candidates\n    end\nend", "    \n    #\
    \ your code here\n    return Vector{Int64}()\nend\n</cell>\n<text>\n4.2 Sum all\
    \ the numbers in the vector from 0 to 19\nPrint the sum of the numbers from 0\
    \ to 19.\nFor your convenience the code in the cell below implements this task.",
  "    primes := Set{Int64}(2..n)\n    count := 0\n    for i::Int64 in primes\n  \
    \      count += 1\n        if count > n\n            count -= 1\n            primes.remove(i)\n\
    \            continue\n        elseif count == n\n            return primes\n\
    \        end\n    end\n    return primes\nend\n</code>\n<|/ a |>\n<| c |>\nA very\
    \ good answer. However this will not work for all cases, as you only count up\
    \ to the first prime that is > n. Consider for instance `count_up_to(3)` it returns\
    \ `[3]` instead of `[2, 3]`.\n<|/ c |>\n<| c |>\nYes, that's a good point. I will\
    \ edit the answer to account for this.\n<|/ c |>\n<| a dscore=2 |>\nThe fastest\
    \ way I have found (to my knowledge) is to create a Sieve of Eratosthenes and\
    \ find all primes between 1 and n.\nI wrote this in Julia, so it can be easily\
    \ converted to Julia. However I did not profile the implementation. If you have\
    \ not done so, you can use the following code:\n<code>", "    # @assert n >= 0\
    \ && n <= 100\n    vec = Vector{Int64}[]\n    if n == 0\n        vec\n    else\n\
    \        push!(vec, 1)\n        while n > 0\n            push!(vec, n)\n     \
    \       n -= 1\n        end\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(5)\n</cell>\n<code language=julia-1.5>\ncount_up_to(11)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(0)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(20)\n</cell>\n<code language=julia-1.5>\ncount_up_to(1)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(18)\n</cell>\n<text>\nExercise 2", "  \
    \  if n == 0\n        Vector{}\n    else\n        primes = factor(div(n,2))\n\
    \        \n        count_up_to(n-1)\n        \n        primes.union!(count_up_to(n-1))\n\
    \        primes\n    end\nend\n</cell>\n<text>\nLet's check it out:", "    prime_numbers::Vector{Int64}\
    \ = []\n    for num in 2:n\n        if prime_numbers(num) == true\n          \
    \  prime_numbers = [num]\n        else if prime_numbers(num) == false\n      \
    \      if num % 2 == 0 && num > 2\n                prime_numbers = [num]\n   \
    \         else\n                prime_numbers = []\n            end\n        end\n\
    \    end\n    return prime_numbers\nend\n</cell>\n<text>\nExercise 8", "    list\
    \ = []\n    if n == 0 \n        list = [1]\n    else \n        for i in 2...n\
    \ \n            if isPrime(i) && i <= n \n                push!(list, i) \n  \
    \          end\n        end\n    end\n    return list\nend\n</code>\n<|/ a dscore=0\
    \ tags=julia,primes |>\n<| a dscore=0 |>\n<code>", "\tif n == 0\n\t\tVector{}\n\
    \telse\n\t\tcount_up_to(n - 1) == [Int(sqrt(n))] ++ count_up_to(n - 2) end\nend",
  "  \n  # Your code goes here\n  \nend\n</cell>\n<text>\nQuestion 15\nImplement a\
    \ function that takes a vector with integers and a positive integer as input and\
    \ returns the unique integers in the vector that do not appear in the vector.\n\
    \    for example:\n    >>> count_down_to([2,3,3,5,6,7,8], 11)\n    [2, 3, 5, 6,\
    \ 8, 11]\n    >>> count_down_to([2,3,3,5,6,7,8], 0)\n    []\n    >>> count_down_to([2,3,3,5,6,7,8],\
    \ 10)\n    []\n    >>> count_down_to([2,3,3,5,6,7,8], 10)\n    [8, 11]\n    >>>\
    \ count_down_to([2,3,3,5,6,7,8], 13)\n    [8, 11]\n    >>> count_down_to([2,3,3,5,6,7,8],\
    \ 14)\n    [8, 11]\n    \"\"\"", "    if n == 0\n        Vector{Int64}()\n   \
    \ elseif n < 2\n        Vector{Int64}([2])\n    else\n        primes = primes_list(primes_count_up_to(n))\n\
    \        push!(primes,n)\n        primes\n    end\nend\n</cell>\n<code language=julia-1.2>",
  "    if n == 0 \n        return Vector{Int64}() \n    \n    if n <= 1 \n       \
    \ return Vector{Int64}() \n    \n    \n    vector <- Vector{Int64}() \n    \n\
    \    for j <- 2 to n \n        if j mod 2 != 0 \n        then \n            vector[j]\
    \ <- j \n        else \n            continue \n    \n    \n    return vector\n\
    end\n</cell>\n<code language=julia-1.5>\ncount_up_to(10)\n</cell>\n<text>\nExercise\
    \ 3.21", "    return Vector{Int64}()\nend", "    Vector{Int64} = []\n    if n\
    \ == 0\n        Vector{}\n    elseif n <= 0\n        Vector{Int64}([])\n    else\n\
    \        for i in 2:(n - 1)\n            if isPrime(i)\n                push!(Vector{Int64},\
    \ [i])\n            else if i > sqrt(n)\n                push!(Vector{Int64},\
    \ [n])\n            else\n                push!(Vector{Int64}, [i, count_up_to(i+1)])\n\
    \            end\n        end\n    end\nend\ncount_up_to(0)", "    \n    if n\
    \ < 2\n        \n        return Int64[]\n        \n    primes = [Int64[] for i\
    \ in 0:n-1]\n    primes[1] = Int64[1]\n    primes[n] = Int64[n]\n    \n    # Prime\
    \ the primes \n    for i in 2:n-1\n        primes[i] = Int64[]\n        for j\
    \ in 2:i-1\n            if i%j == 0\n                break\n            else\n\
    \                primes[i] = append(primes[i], j)\n            end\n        end\n\
    \    end\n    \n    if primes[n] == Int64[n]\n        return Int64[]\n    end\n\
    \    \n    primes[end] = Int64[]\n    \n    # Fill the vector with prime numbers\
    \ less than n\n    prime_numbers = primes[2..n]\n    \n    for i in 1:length(prime_numbers)\n\
    \        if prime_numbers[i] <= n\n            prime_numbers[i] -= 1\n       \
    \ end\n    end\n    \n    return prime_numbers\nend", "    if n < 1 \n       \
    \ return []\n    \n    \n    primes = [i for i in  2:n if isprime(i)]\n    \n\
    \    primes =  primes[2:end]\n    \n    \n    primes = primes[primes <= n]\n \
    \   \n    return primes\nend\n</cell>\n<text>\nQuestion 5\nImplement the function\
    \ prime_count, which returns a dictionary that maps a non-negative integer to\
    \ a list of all the prime numbers up to that integer. For example:", "    if n\
    \ < 0\n        error(\"n must be non-negative\")\n    end", "    primes = PrimeFactors(n)\n\
    \    result = []\n    for i in primes\n        if i > n\n            break\n \
    \       if i==n\n            result = []\n        else\n            result = [i\
    \ | result]\n    return result\nend", "    vector = Vector{Int64}()\n    primes\
    \ = primes(n)\n    for p in primes\n        if p < n\n            push!(vector,\
    \ p)\n        end\n    end\n    return vector\nend\n</code>\n<|/ a tags=primes,julia\
    \ dscore=2 |>\n<| a tags=primes,julia |>\nThe answers here are good but unfortunately\
    \ they don't work for long numbers.\nThe following code will work for any natural\
    \ number less than 10^18, but will be slow for large numbers. Here are some timing\
    \ tests over several versions of Julia:\n<code>", "    if n < 0\n        error(\"\
    n must be non-negative\")\n    end\n    \n    if n % 2 == 0\n        error(\"\
    n must be even to count up\")\n    end\n    \n    primes = Vector{Int64}([2, 3])\n\
    \    for p in primes\n        if p > n\n            push!(primes, n + p - 2)\n\
    \        end\n    end\n    \n    result = []\n    for i in primes\n        if\
    \ i <= n\n            push!(result, i)\n        end\n    end\n    return result\n\
    end\n</cell>\n<code language=julia-1.5>\ncount_up_to(5)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(3)\n</cell>\n<code language=julia-1.5>\ncount_up_to(7)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(11)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(0)\n</cell>\n<code language=julia-1.5>\ncount_up_to(20)\n</cell>\n\
    <code language=julia-1.5>\ncount_up_to(1)\n</cell>\n<code language=julia-1.5>\n\
    count_up_to(18)\n</cell>\n<code language=julia-1.5>\ncount_up_to(99)\n</cell>\n\
    <text>\nExercises\nA prime is a number that has no positive divisors other than\
    \ 1 and itself. A prime is called \"prime\" if there exists a positive integer\
    \ N such that N > 1 and N is prime.", "    if n<=0\n        Vector{}\n    elseif\
    \ isa(n,Int)\n        if n==0\n            Vector{}\n        else\n          \
    \  Vector{Int64}(n)\n    end\nend\ncount_up_to(n) = count_up_to(n+1)\nend\n</cell>\n\
    <code language=julia-1.4>", "    if n < 0 || n >= Int, error(\"input must be non-negative\
    \ integer\"), \n        count_up_to = []\n    elseif n == 0, count_up_to = [1]\n\
    \    elseif isa(n, Int) \n        for i in [i | i <- [n]]\n            if isa(i,\
    \ Int) && isprime(i) && i <= n\n                count_up_to += [i]\n         \
    \   elseif i < n\n                count_up_to += [i]\n            end\n      \
    \  end\n    elseif isa(n, Array{Int,1}) || isa(n, Vector{Int})\n        count_up_to\
    \ = count_up_to(first(n))\n        for n in last(first(n))\n            count_up_to\
    \ += count_up_to(n)\n        end\n    elseif isa(n, AbstractVector) || isa(n,\
    \ AbstractMatrix)\n        count_up_to = count_up_to(first(n))\n        for n\
    \ in last(first(n))\n            count_up_to += count_up_to(n)\n        end\n\
    \    elseif isa(n, UnitRange) || isa(n, Nothing)\n        count_up_to = []\n \
    \   else\n        error(\"input must be non-negative integer\")\n    end\nend\n\
    </cell>\n<code language=julia-1.0>\n\"\"\"Implement a function that takes an integer\
    \ vector\nand returns a vector containing the sum of each element in each vector.\
    \ \nfor example:\n>>> vector = [1,2,3]\n>>> count_up(vector)\n[1, 2, 3, 6]\n>>>\
    \ vector = [1,2,3,4,5]\n>>> count_up(vector)\n[1, 3, 6, 10, 15]\n>>> vector =\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n>>> count_up(vector)\n[2, 4, 6, 8, 10, 12,\
    \ 14, 16, 18]\n>>> vector = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]\n\
    >>> count_up(vector)\n[2, 5, 8, 11, 14, 17, 20, 22, 25, 28, 31]\n>>> vector =\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21,\
    \ 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,\
    \ 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59,\
    \ 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78,\
    \ 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97,\
    \ 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113,\
    \ 114, 115, 116, 117, 118, ", "    if n == 0 \n        Vector{} \n    else \n\
    \        Vector{Int64}(count_up_to(n-1)) \n    end\nend", "    if n < 0 \n   \
    \     return []\n    \n    primes = primes_under(n)\n    result = Vector{Int64}()\n\
    \    for p in primes \n        if p < n \n            result = (result ++ primes)\n\
    \        end \n    end\n    \n    if n <= length(result)\n        return result\
    \ \n    else\n        return result\n    end\nend # count_up_to\n</cell>\n<code\
    \ language=julia-1.6>\ncount_up_to(1)\n</cell>\n<code language=julia-1.6>\ncount_up_to(0)\n\
    </cell>\n<code language=julia-1.6>\ncount_up_to(20)\n</cell>\n<code language=julia-1.6>\n\
    count_up_to(21)\n</cell>\n<code language=julia-1.6>\ncount_up_to(25)\n</cell>\n\
    <code language=julia-1.6>\ncount_up_to(100)\n</cell>\n<text>\nExercise: Write\
    \ a function that takes as input a list of integers and returns a vector that\
    \ contains\nthe count of the numbers in that vector, up to and including the number\
    \ passed in. \nFor example, if the input vector contains [2, 2, 3, 5, 9], the\
    \ returned vector should contain\n[2, 4, 8, 10, 18]. \nThis function is very similar\
    \ to count_up_to (but instead of returning a vector the function \nreturns a count).",
  "\"\"\"\ncount_up_to(n::Int64)::Vector{Int64} = \n    # Write your solution here\n\
    \    \n    \ncount_up_to(0)\ncount_up_to(1)\ncount_up_to(20)\ncount_up_to(20)\n\
    count_up_to(100)\ncount_up_to(200)\ncount_up_to(10000)\ncount_up_to(20000)\ncount_up_to(4000000)\n\
    count_up_to(60000)\ncount_up_to(1000000)\ncount_up_to(30000000)\ncount_up_to(500000000)\n\
    count_up_to(7000000000)\ncount_up_to(90000000000)\ncount_up_to(120000000000)\n\
    count_up_to(150000000000)\ncount_up_to(180000000000)\ncount_up_to(2000000000000)\n\
    count_up_to(25000000000000)\ncount_up_to(300000000000000)\ncount_up_to(400000000000000)\n\
    count_up_to(5000000000000000)\ncount_up_to(7000000000000000)\ncount_up_to(8000000000000000)\n\
    count_up_to(9000000000000000)\ncount_up_to(12000000000000000)\ncount_up_to(15000000000000000)\n\
    count_up_to(18000000000000000)\ncount_up_to(2000000000000000)\ncount_up_to(25000000000000000)\n\
    count_up_to(3000000000000000)\ncount_up_to(4000000000000000)\ncount_up_to(5000000000000000)\n\
    count_up_to(7000000000000000)\ncount_up_to(8000000000000000)\ncount_up_to(9000000000000000)\n\
    count_up_to(12000000000000000)\ncount_up_to(15000000000000000)\ncount_up_to(18000000000000000)\n\
    count_up_to(2000000000000000)\ncount_up_to(25000000000000000)\ncount_up_to(3000000000000000)\n\
    count_up_to(4000000000000000)\ncount_up_to(5000000000000000)\ncount_up_to(7000000000000000)\n\
    count_up_to(8000000000000000)\ncount_up_to(9000000000000000)\ncount_up_to(12000000000000000)\n\
    count_up_to(15000000000000000)\ncount_up_to(18000000000000000)\ncount_up_to(2000000000000000)\n\
    count_up_to(25000000000000000)\ncount_up_to(3000000000000000)\ncount_up_to(4000000000000000)\n\
    count_up_to(5000000000000000)\ncount_up_to(7000000000000000)\ncount_up_to(8000000000000000)\n\
    count_up_to(9000000000000000)\ncount_up_to(12000000000000000)\ncount_up_to(15000000000000000)\n\
    count_up_to(18000000000000000)\ncount_up_to(2000000000000000)\ncount_up_to(25000000000000000)\n\
    count_up_to(3000000000000000)\ncount_", "    if n == 0 || iszero(n) || n < 0 \n\
    \        [] \n    else \n        if prime_check(n)\n            count_up_to(n+1)\n\
    \        else\n            count_up_to(2*n+1)\nend\n</code>\n<|/ a |>\n<| a |>\n\
    I wanted to write an efficient solution to count prime numbers from 0 to n. So,\
    \ here it is:\n<code>", "if n < 2 || n == 0 \n    return Vector{Int64}() \nelse\
    \ \n    return count_up_to(n - 1) + [n : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2\
    \ : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2\
    \ : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2\
    \ : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2\
    \ : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2\
    \ : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2\
    \ : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2\
    \ : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2\
    \ : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2\
    \ : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2\
    \ : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2\
    \ : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2\
    \ : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2\
    \ : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2\
    \ : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2\
    \ : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2\
    \ : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2\
    \ : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2\
    \ : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2\
    \ : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2\
    \ : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2\
    \ : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2\
    \ : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2\
    \ : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2\
    \ : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2\
    \ : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2 : 2\
    \ : 2 : ", "    if is_prime_number(n)\n        primes = []\n        for p in prime_numbers(n)\n\
    \            if is_prime(p)\n                push!(primes, p)\n            else\n\
    \                break\n        end\n        return primes\n    else\n       \
    \ return prime_numbers(n)\n    end\nend\n</code>\n<|/ q tags=julia dscore=2 |>\n\
    <| c |>\nCould you please add the code you tried and how that failed?\n<|/ c |>\n\
    <| c |>\nAt the risk of seeming rude, you should go ahead and use another language\
    \ that has a higher learning curve: python, C or R. That language is way much\
    \ easier to program in, particularly for mathematical applications.\n<|/ c |>\n\
    <| a dscore=3 |>\nHere's a solution that doesn't require explicit recursion. Essentially\
    \ this just finds all the prime numbers between two arbitrary limits (including\
    \ the upper limit) and then filters them from the vector that you already have.\n\
    <code>", "    if n == 0 \n        return Vector{Int64}()\n    else \n        vector\
    \ = Vector{Int64}()\n        for i = 2 to n do \n            if (isprime(i) &&\
    \ (isprime(i - 1)) \n                && (gcd(i, i - 1) == 1)\n               \
    \ && (gcd(i, n) == 1)\n                ) \n                vector.append(i) \n\
    \            end\n        end\n        return vector\n    end\nend ", "    if\
    \ n == 0\n        Vector{Int64}()\n    else\n        count_up_to(n-1) + prime_sieve[:n-1]\n\
    \    end\nend\n</cell>\n<code language=julia-1.3>\ncount_up_to(5)\n</cell>\n<code\
    \ language=julia-1.3>\n@assert count_up_to(5) == [2,3]\n</cell>\n<text>\nRecursion\n\
    A recursive function is one that calls itself (recursive definition)", "    \n\
    \    \n    local l=[1]\n    for num in 2..n do \n        if primes[num] or num\
    \ > sqrt(n) then\n            push!(l,num)\n        end\n    end\n    return l\n\
    end\n</cell>\n<code language=julia-1.5>\ncount_up_to(5)\n</cell>\n<text>\nExercise\
    \ 9. Find the prime factors of a given integer", "    if n <= 0 \n        Vector{}\n\
    \    else \n        div = 2\n        factors = Vector{}\n        while div <=\
    \ n \n            if n % div == 0 \n                push!(factors, div)\n    \
    \        end\n            div += div + 1\n        end\n        return factors\n\
    \    end\nend\n</cell>\n<text>\nImplement a function that takes an integer n and\
    \ returns the number of factors of n.", "    if n == 0\n        Vector{Int64}[]\n\
    \    else if n % 2 == 0 || n < 2\n        Vector{Int64}[]\n    else\n        return\
    \ count_up_to(n-1) + [n div 2 | n in 2 .. n]\n    end\nend\n</cell>\n<code language=julia-1.0>\n\
    @assert count_up_to(0) == []\n@assert count_up_to(1) == []\n@assert count_up_to(2)\
    \ == [2]\n@assert count_up_to(3) == [2, 3]\n@assert count_up_to(4) == [2, 3]\n\
    @assert count_up_to(5) == [2, 3]\n@assert count_up_to(10) == [2, 3, 5, 7]\n@assert\
    \ count_up_to(11) == [2, 3, 5, 7]\n@assert count_up_to(12) == [2, 3, 5, 7, 11]\n\
    @assert count_up_to(13) == [2, 3, 5, 7, 11, 13]\n@assert count_up_to(18) == [2,\
    \ 3, 5, 7, 11, 13, 17]\n@assert count_up_to(19) == [2, 3, 5, 7, 11, 13, 17, 19]\n\
    @assert count_up_to(20) == [2, 3, 5, 7, 11, 13, 17, 19]\n</cell>\n<code language=julia-1.0>\n\
    \"\"\"Implement a function that takes a non-negative integer and returns the number\
    \ of prime numbers less than or equal to it.\nfor example:\n>>> count_primes_less_than(5)\n\
    2\n>>> count_primes_less_than(7)\n2\n>>> count_primes_less_than(8)\n3\n>>> count_primes_less_than(0)\n\
    0\n>>> count_primes_less_than(20)\n2\n>>> count_primes_less_than(1)\n1\n>>> count_primes_less_than(100)\n\
    7\n>>> count_primes_less_than(101)\n1\n>>> count_primes_less_than(102)\n2\n>>>\
    \ count_primes_less_than(1000)\n9\n>>> count_primes_less_than(10000)\n12\n>>>\
    \ count_primes_less_than(1000000000)\n11\n>>> count_primes_less_than(1000000000000)\n\
    12\n>>> count_primes_less_than(100000000000000)\n12\n>>> count_primes_less_than(1000000000000000000)\n\
    12\n>>> count_primes_less_than(10000000000000000000)\n12\n>>> count_primes_less_than(1000000000000000000000)\n\
    12\n>>> count_primes_less_than(100000000000000000000000)\n12\n\"\"\"", "    \n\
    \    for i in 2..n\n        if isPrime(i)\n           push!(retVal,i)\n      \
    \  end\n    end\n    \n    return retVal\nend\n</cell>\n<text>\nTest your solution",
  "    if n < 2 \n        return [] \n    else \n        primes = prime_arrays(n)\
    \ \n        return primes[2:end]\n    end\nend\n\"\"\"\n\"\"\"\ncount_prime_numbers\n\
    This function returns the count of all prime numbers in a given range from 1 to\
    \ n.\nfor instance:\ncount_prime_numbers(10)\n5\ncount_prime_numbers(12)\n9\n\
    count_prime_numbers(30)\n4\ncount_prime_numbers(0)\n0\ncount_prime_numbers(1)\n\
    0\ncount_prime_numbers(100)\n142913821023\n\"\"\"", "    if n == 0 \n        return\
    \ Vector{Int64}() \n    if n > 0 \n        for n in 1:n do \n            if isPrime(n)\
    \ == true && n <= n \n                push!(count, n) \n            end \n   \
    \     end \n        return count \n    else \n        return count \n    end \n\
    end\n\"\"\"\nImplement a function that takes an integer and returns a vector of\
    \ the first n\n    integers that are coprime to n.\n    for example:\n    >>>\
    \ coprime_up_to(5)\n    [2, 3]\n    >>> coprime_up_to(11)\n    [2, 3, 5, 7, 11]\n\
    \    >>> coprime_up_to(0)\n    []\n    >>> coprime_up_to(20)\n    [2, 3, 5, 7,\
    \ 11, 13]\n    >>> coprime_up_to(1)\n    []\n    >>> coprime_up_to(18)\n    [2,\
    \ 3, 5, 7, 11, 13]\n    \"\"\"", "    n,i = 1,2\n    while i <= n\n        if\
    \ isprime(i)\n            while i <= n\n                push!(i, i)\n        \
    \        i += 1\n            end\n        else\n            push!(i, i)\n    \
    \    end\n        i += 1\n    end\n    return popfirst(n)\nend", "    \"\"\"Implement\
    \ a function that takes an non-negative integer and returns a vector of the first\
    \ n\n    integers that are prime numbers and less than n.\n    for example:\n\
    \    >>> count_up_to(5)\n    [2, 3]\n    >>> count_up_to(11)\n    [2, 3, 5, 7]\n\
    \    >>> count_up_to(0)\n    []\n    >>> count_up_to(20)\n    [2, 3, 5, 7, 11,\
    \ 13, 17, 19]\n    >>> count_up_to(1)\n    []\n    >>> count_up_to(18)\n    [2,\
    \ 3, 5, 7, 11, 13, 17]\n    \"\"\"", "    if n < 2 \n        return [] \n    primes\
    \ = Vector{Int64}(2) \n    candidate = 2\n    primes[1] = 1\n    \n    while primes\
    \ <= n \n        while candidate < n \n            if primes[candidate] \n   \
    \             candidate = primes[candidate] * candidate \n            else \n\
    \                candidate += 1 \n            end\n            if candidate <\
    \ n \n                primes = primes + [candidate]\n                break\n \
    \           end\n        end\n    end\n    primes\nend\n</cell>\n<text>\nThe function\
    \ count_up_to() will return a list of all prime numbers between 1 and n. This\
    \ function was defined in a previous exercise. You are also welcome to define\
    \ your own if you prefer.", "    vector=[]\n    vector.append(0)\n    vector.append(1)\n\
    \    for i in 2:(n-1)\n        for j in 2:(i-1)\n            if isprime(j) &&\
    \ (j>1 && j<=n)\n                vector.append(j)\n    return vector\nend\n</code>\n\
    <|/ a tags=julia |>\n<| c |>\nThis is an excellent solution. How would you go\
    \ about creating a function from this where the input to the function is an integer\
    \ and output is the vector containing all the prime numbers from 2 to that integer?\n\
    <|/ c |>\n<| c |>\nI edited the answer to include a function\n<|/ c |>\n<| a dscore=0\
    \ |>\n<code>\nusing Distributions\nusing Random", "    count_up = Vector{Int64}(undef,\
    \ 3)\n    # base case\n    if n<2 \n        count_up = [1]\n        return count_up\n\
    \    \n    # recurrence\n    i = 2\n    while i <= n\n        if isPrime(i)\n\
    \            count_up[i-3] = i\n            i += 2\n        else\n           \
    \ i += 2\n    end\n    return count_up\nend\n\"\"\"\n### 3.\nImplement a function\
    \ that takes an array of positive integers and returns a vector of the first n\n\
    \    integers that are palindromes.\n    for example:\n    >>> is_palindromes([1,\
    \ 2, 3, 1, 2, 3])\n    [1, 3, 2]\n    >>> is_palindromes([10, 2, 1, 10, -2])\n\
    \    [10, -2]\n    >>> is_palindromes([])\n    []\n    \"\"\"", "    if n <= 0\n\
    \        Vector{}\n    else\n        primes = primes(n)\n        Vector{Int64}(i\
    \ for (i, p) in enumerate(primes) if (p==1 || p==n) && primes[p]<=n)\n    end\n\
    end\n</cell>\n<text>\nExercise:", "    if is_positive(n) then return Vector{Int64}(0)\
    \ else \n        primes = [Prime(i) for i in 2:(n+1)]\n        primes = filter(prime->prime[1]<=n,\
    \ primes)\n        primes = filter(prime->prime[1]>n, primes)\n        primes\
    \ = Vector{Int64}(primes)\n        primes = filter(prime->prime[1]>n, primes)\n\
    \        return primes\n    end\nend\n</code>\n<|/ a tags=julia,performance,primes\
    \ |>\n<| c |>\nIf one uses `filter!` instead of `filter` the function will run\
    \ significantly faster, which might be a good idea if one tries to vectorize a\
    \ larger loop.\n<|/ c |>\n<| c |>\nThat is a good point. Using `filter` will actually\
    \ make it more difficult to vectorize. Using `filter!` will make it more simple\
    \ to vectorize, and will probably even be faster. I'll update my answer. Thanks.\n\
    <|/ c |>\n<| c |>\nOne quick question: Why do you write `primes = Vector{Int64}`\
    \ and then `Vector{Int64}(primes)`?\n<|/ c |>\n<| c |>\nThe first is just for\
    \ convenience. You can write just `Vector{Int64}`.\n<|/ c |>\n<| a dscore=4 tags=julia,performance,primes\
    \ |>\nI wrote a function to do this:\n<code>", "    if n < 2\n        []\n   \
    \ else\n        a=[]\n        for v in 0:n-1\n            push!(a, v)\n      \
    \  end\n        a\n    end\nend\n</cell>\n<text>\nExercise", "        if n <=\
    \ 0 \n        then \n            Vector{Int64}()\n        else \n            begin\n\
    \                factors = primefactors(n)\n                factors\n        \
    \    end\n        end\n    end\nend #end count_up_to()\n</code>\nThis program\
    \ is based on the fact that primefactors returns a list of prime factors for a\
    \ given number. In the program above I first checked if a number was <= 0, which\
    \ means it was not a number that could be factorised (which would be obviously\
    \ wrong). After that check, I defined a new function count_up_to which takes a\
    \ non-negative integer and returns all the numbers from 1 up to that number. primefactors\
    \ returns a list of prime factors for a given number and returns all the numbers\
    \ up to the given number. \nThe main function is fairly simple: I called count_up_to\
    \ to return the vector that is the desired output.\n<code>", "    if n < 2 \n\
    \        return Vector{Int64}[]\n    \n    primes = primes_up(n)\n    \n    start\
    \ = 2\n    count = Vector{Int64}[]\n    \n    for i in primes \n        if i <=\
    \ n \n            push!(count, i)\n        else\n            if count != Vector{Int64}[]\
    \ \n                push!(count, i - start + 1)\n            end\n           \
    \ start = i\n            push!(count, i)\n        end\n    end\n    \n    return\
    \ count\nend\n</cell>\n<code language=julia-1.5>\ncount_up_to(3)\n</cell>\n<text>\n\
    Consecutive prime factors\nLet's define a function that returns all consecutive\
    \ prime factors of a positive integer:", "    if n <= 0 \n        Vector{Int64}()\
    \ \n    else \n        primes(n).-!.collect() .<= n\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@assert count_up_to(3) == [2, 3, 5]\n@assert count_up_to(4)\
    \ == [2, 3, 5, 7]\n@assert count_up_to(5) == [2, 3, 5, 7, 11]\n@assert count_up_to(7)\
    \ == [2, 3, 5, 7, 11, 13]\n@assert count_up_to(10) == [2, 3, 5, 7, 11, 13, 17]\n\
    @assert count_up_to(11) == [2, 3, 5, 7, 11, 13, 17, 19]\n@assert count_up_to(12)\
    \ == [2, 3, 5, 7, 11, 13, 17, 19, 23]\n@assert count_up_to(13) == [2, 3, 5, 7,\
    \ 11, 13, 17, 19, 23, 29]\n@assert count_up_to(14) == [2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31]\n@assert count_up_to(15) == [2, 3, 5, 7, 11, 13, 17, 19, 23,\
    \ 29, 31, 37]\n@assert count_up_to(16) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29,\
    \ 31, 37, 41]\n@assert count_up_to(17) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29,\
    \ 31, 37, 41, 43, 47]\n@assert count_up_to(18) == [2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 51]\n@assert count_up_to(19) == [2, 3, 5, 7, 11,\
    \ 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 51, 59]\n@assert count_up_to(20) ==\
    \ [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 51, 59, 61]\n@assert\
    \ count_up_to(21) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 51, 59, 61, 67]\n@assert count_up_to(22) == [2, 3, 5, 7, 11, 13, 17, 19, 23,\
    \ 29, 31, 37, 41, 43, 47, 51, 59, 61, 67, 71]\n@assert count_up_to(23) == [2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 51, 59, 61, 67, 71, 73]\n\
    @assert count_up_to(24) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43,\
    \ 47, 51, 59, 61, 67, 71, 73, 79]\n@assert count_up_to(25) == [2, 3, 5, 7, 11,\
    \ 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 51, 59, 61, 67, 71, 73, 79, 83]\n@assert\
    \ count_up_", "    if n == 0 \n    then \n        Vector{Int64}([])\n    elseif\
    \ n < 1 \n    then \n        Vector{Int64}([n])\n    elseif n % 2 == 0 \n    then\
    \ \n        Vector{Int64}([n])\n    else\n        count_up_to(n - 1)\n    end\n\
    end\n</code>\n<|/ a dscore=3 |>\n<| c |>\nthank you for your answer, the problem\
    \ is when I put this function in the function declaration I get an error like\
    \ \"UndefRefError: no definition for count_up_to at (eval 18:40)\" I tried to\
    \ fix this but no success, any suggestions ?\n<|/ c |>\n<| c |>\nDid you put this\
    \ in your local scope and did you call your function?\n<|/ c |>\n<| c |>\nYes\
    \ I did it, but when I call the function it shows me this error \"UndefRefError:\
    \ no definition for count_up_to at (eval 18:40)\"\n<|/ c |>\n<| c |>\nThat's not\
    \ an error I get.  That's an informative error message you get.  Did you define\
    \ the function before you called it?\n<|/ c |>\n<| c |>\nNo I did not define it\
    \ before I called. I have defined the function outside like you said and this\
    \ is my first time trying to call it inside another function.\n<|/ c |>\n<| a\
    \ dscore=2 |>\nJust for fun I wrote a version that is only slightly different\
    \ than what you have already:\n<code>", "    if n < 1\n        []\n    else\n\
    \        count_up_to(n-1) + [n for n in 1:n] if isPrime(n) && n < n\n    end\n\
    end\n</code>\n<|/ a |>\n<| c |>\nYou need `isPrime` instead of `isprime` which\
    \ would be the correct function.\n<|/ c |>\n<| c |>\nThis looks like a good solution,\
    \ but I'm having trouble figuring out how I would get this into a function like\
    \ `count_up_to`.\n<|/ c |>\n<| c |>\nI think what you are looking for is [`map`](https://docs.julialang.org/en/stable/base/collections/#Base.map).\n\
    <|/ c |>\n<| c |>\n- I have updated my answer with an example of using `map`.\n\
    <|/ c |>\n<| a tags=primes,julia,iteration dscore=3 |>\nHere's a more general\
    \ solution that will count up to a specified limit using recursion:\n<code>",
  "    if n <= 0\n        []\n    else\n        Vector{Int64}(count_up_to(floor(n/2)))\n\
    \    end\nend\n</code>\n<|/ a dscore=3 tags=julia,primes |>\n<| c |>\nThis would\
    \ yield incorrect results for large `n` because you are computing `count_up_to(floor(n/2))`\
    \ many times.\n<|/ c |>\n<| c |>\nYou are correct. However, the `count_up_to`\
    \ function only returns the `n`th prime, right? The idea is that the function\
    \ is supposed to return a vector where each element is less than `n` and the elements\
    \ themselves are primes.\n<|/ c |>\n<| c |>\nOh yes I misread the function as\
    \ returning the nth prime. Sorry.\n<|/ c |>\n<| c |>\nThe question asks for \"\
    the first n\" prime numbers, and your function doesn't do that.\n<|/ c |>\n<|\
    \ a dscore=1 |>\nAn interesting option:\n<code>", "    if n == 0 \n        return\
    \ Vector{Int64}()\n    primes = Vector{Int64}()\n    for prime in prime_range(n)\
    \ do \n        push!(primes, prime)\n    end\n    prime_count = Int64(length(primes))\n\
    \    prime_sum = 0\n    for i in primes[2:prime_count] do \n        prime_sum\
    \ = prime_sum + i\n    end\n    prime_sum = prime_sum * prime_sum\n    for i in\
    \ primes[prime_count:n] do \n        if i%prime_sum == 0 \n            return\
    \ Vector{Int64}(i)\n        end\n    end\n    return Vector{Int64}[]\nend\ncount_up_to",
  "    if n <= 0\n        Vector{Int64}()\n    else\n        primes = get_primes(n+1)\n\
    \        [i for i in primes if i <= n]\n    end\nend", "    if n < 0\n       \
    \ error(\"count_up_to requires a non-negative number\")\n    \n    lst = []\n\
    \    if n == 0\n        return lst\n    \n    for i in 2 .. n\n        if prime_test(i)\n\
    \            lst += [i]\n            if i == n\n                push!(lst, i)\n\
    \                break\n        end\n    end\n    \n    return lst\nend\n</cell>\n\
    <text>\nProblem 6\nImplement the function palindrome(s), which takes in a string\
    \ s which is represented as a list of characters.\nA palindrome is a word or phrase\
    \ that is the same forwards and backwards.\npalindrome(s) should return true if\
    \ the given string is a palindrome and false otherwise.", "    count::Vector{Int64}\
    \ = Vector{Int64}()\n    for n in count\n        push!(count, 1)\n        push!(count,\
    \ 2)\n        push!(count, 3)\n        push!(count, 5)\n        push!(count, 7)\n\
    \        push!(count, 11)\n        push!(count, 13)\n        push!(count, 17)\n\
    \        push!(count, 19)\n        push!(count, 29)\n        push!(count, 31)\n\
    \        push!(count, 37)\n        push!(count, 41)\n        push!(count, 67)\n\
    \        push!(count, 89)\n        push!(count, 101)\n        push!(count, 121)\n\
    \        push!(count, 143)\n        push!(count, 167)\n        push!(count, 191)\n\
    \        push!(count, 225)\n        push!(count, 241)\n        push!(count, 257)\n\
    \        push!(count, 289)\n        push!(count, 321)\n        push!(count, 343)\n\
    \        push!(count, 377)\n        push!(count, 401)\n        push!(count, 419)\n\
    \        push!(count, 433)\n        push!(count, 455)\n        push!(count, 481)\n\
    \        push!(count, 497)\n        push!(count, 511)\n        push!(count, 521)\n\
    \        push!(count, 543)\n        push!(count, 557)\n        push!(count, 571)\n\
    \        push!(count, 587)\n        push!(count, 601)\n        push!(count, 613)\n\
    \        push!(count, 617)\n        push!(count, 629)\n        push!(count, 641)\n\
    \        push!(count, 653)\n        push!(count, 657)\n        push!(count, 671)\n\
    \        push!(count, 677)\n        push!(count, 683)\n        push!(count, 691)\n\
    \        push!(count, 709)\n        push!(count, 719)\n        push!(count, 729)\n\
    \        push!(count, 737)\n        push!(count, 747)\n        push!(count, 761)\n\
    \        push!(count, 769)\n        push!(count, 773)\n        push!(count, 787)\n\
    \        push!(count, 797)\n        push!(count, 801)\n        push!(count, 803)\n\
    \        push!(count, 805)\n        push!(count, 811)\n        push!(count, 813)\n\
    \        push!(count, 817)\n        push!(count, 819)\n        push!(count, 821)\n\
    \        push!(count, 823)\n        push!(count, 827)\n        push!(", "    if\
    \ n <= 0\n        Vector{}\n    else\n        primes = prime_vec()\n        prime_vec\
    \ = Vector{Int64}(prime_vec())\n        prime_vec += 2\n        while prime_vec[n]\n\
    \            for i = 2 to n\n                if prime_vec[i] == 0\n          \
    \          prime_vec += i\n                end\n            end\n        end\n\
    \        prime_vec\n    end\nend\n\"\"\"\nFind the number of times the function\
    \ f is called in t seconds.\n\"\"\"", "    if n <= 0 return []\n    \n    \n \
    \   \n    #@assert n>0\n    p::Int64 = 0\n    res::Vector{Int64} = zeros(Int64,n)\n\
    \    for x in 2:n\n        isPrime = true\n        for y in 2:(x-1)\n        \
    \    if ((x % y)==0)\n                isPrime = false\n                break\n\
    \        end\n        if isPrime\n            for y in 2:(x-1)\n             \
    \   if ((x % y)==0)\n                    p = p + 1\n                    break\n\
    \            end\n            push!(res, x)\n            if n>1 \n           \
    \     if p == n\n                    append!(res, x)\n                else\n \
    \                   append!(res, x-p)\n                end\n            end\n\
    \        end\n    end\n    return res\nend", "    if n < 1 \n        []\n    elseif\
    \ n < 3 \n        [1]\n    elseif n > 3 \n        count_up_to(n-2) + [2,3,5,7,11,13,17]\n\
    \    else \n        count_up_to(n-2) + [2,3,5,7,11,13,17]\n    end\nend\n</cell>\n\
    <cell>\n\"\"\"Implement a function that takes an non-negative integer and returns\
    \ a vector of the integers\n    from 1 to n that are prime numbers and less than\
    \ n.\n    for example:\n    >>> count_down_to(5)\n    [2, 3, 4]\n    >>> count_down_to(11)\n\
    \    [2, 3, 5, 7]\n    >>> count_down_to(0)\n    []\n    >>> count_down_to(20)\n\
    \    [2, 3, 5, 7, 11, 13, 17, 19]\n    >>> count_down_to(1)\n    []\n    >>> count_down_to(18)\n\
    \    [2, 3, 5, 7, 11, 13, 17]\n    \"\"\"", "    n == 0 || return []\n    first,\
    \ rest = divrem(n, n)\n    if rest == 0 && first == 0 \n        return Vector{}\n\
    \    else\n        return first :: count_up_to(first)\n    end\nend", "    if\
    \ n == 0 \n        Vector{}\n    else \n        fives = count_up_to(n/2)\n   \
    \     if mod(n, 2) == 1 \n            fives += [n/2]\n        else \n        \
    \    fives += [n/2]\n        end\n    end\n    return fives\nend\n</cell>\n<text>\n\
    Solution 1: Using filter\nThe first solution is to use filter to apply a function\
    \ over a collection. We can use the function is_prime which takes an integer and\
    \ returns a boolean indicating whether the integer is a prime number. filter is\
    \ used to get the first n prime numbers, in increasing order (the function will\
    \ stop early if the nth prime number does not have a factor less than n).", " \
    \   if n>1\n        count_up_to(floor((sqrt(Float64(n))+1))/2)\n    else\n   \
    \     []\n    end\nend", "    if n <= 0\n        Vector{}\n    else if n == 1\n\
    \        Vector{1}\n    else\n        count_up_to(n-1) + is_prime(n)\n    end\n\
    end\n</code>\n<|/ a dscore=1 tags=math,julia,primes |>\n<| c |>\nThis code is\
    \ incomplete or even wrong, please correct it. Thanks!\n<|/ c |>\n<| c |>\nThis\
    \ code is not incorrect and will give you the expected output. I just don't understand\
    \ what it is missing?\n<|/ c |>\n<| a |>\n<code>\nis_prime(n::Int64)=false", " \
    \   if n < 2 \n        return Vector{Int64}() \n    count_up_to(n-1) \n    i =\
    \ 2\n    while i*i <= n \n        push!(count_up_to(i*i-1), i) \n        i +=\
    \ 1\n    end\n    return count_up_to(n)\nend\n</cell>\n<text>\n6.4 Vectorize Function\n\
    5.1 Vectorize Function\nA vectorized function is one that takes a vector as input\
    \ and returns a vector as output. The vectorized function is often more efficient\
    \ than the non-vectorized version. The vector must have the same dimension as\
    \ the input.", "    for n in 1:n\n        if is_prime(n)\n            push!(ret,\
    \ n)\n        else\n            break\n        end\n    end\n    return ret\n\
    end", "    numbers = Vector{Int64}[]\n    if n == 0\n        numbers\n    else\n\
    \        for i = 2; i <= n/2\n            if (n % i) == 0\n                push!(numbers,\
    \ i)\n            end\n        end\n    end\nend\n</cell>\n<code language=julia-0.6>\n\
    @time count_up_to(100_000_000);\n</cell>\n<text>\nExercise 2\nThe Fibonacci sequence\
    \ is defined by the mathematical formula:", "    if n == 0 \n        Vector{Int64}()\
    \ \n    else if n==1 \n        Vector{Int64}(1) \n    else if n == 2 \n      \
    \  Vector{Int64}(2, 3)\n    else if n == 3 \n        Vector{Int64}(2, 3, 5)\n\
    \    else if n == 4 \n        Vector{Int64}(2, 3, 5, 7)\n    else if n == 5 \n\
    \        Vector{Int64}(2, 3, 5, 7, 11)\n    else if n == 6 \n        Vector{Int64}(2,\
    \ 3, 5, 7, 11, 13)\n    else if n == 7 \n        Vector{Int64}(2, 3, 5, 7, 11,\
    \ 13, 17)\n    else if n == 8\n        Vector{Int64}(2, 3, 5, 7, 11, 13, 17, 19)\n\
    \    else if n == 9\n        Vector{Int64}(2, 3, 5, 7, 11, 13, 17, 19, 23)\n \
    \   else if n == 10\n        Vector{Int64}(2, 3, 5, 7, 11, 13, 17, 19, 23, 29)\n\
    \    else if n == 11\n        Vector{Int64}(2, 3, 5, 7, 11, 13, 17, 19, 23, 29,\
    \ 31)\n    else if n == 12\n        Vector{Int64}(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37)\n    else if n == 13\n        Vector{Int64}(2, 3, 5, 7, 11,\
    \ 13, 17, 19, 23, 29, 31, 37, 41)\n    else if n == 14\n        Vector{Int64}(2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43)\n    else if n == 15\n    \
    \    Vector{Int64}(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47)\n \
    \   else if n == 16\n        Vector{Int64}(2, 3, 5, 7, 11, 13, 17, 19, 23, 29,\
    \ 31, 37, 41, 43, 47, 53)\n    else if n == 17\n        Vector{Int64}(2, 3, 5,\
    \ 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59)\n    else if n == 18\n\
    \        Vector{Int64}(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61)\n    else if n == 19\n        Vector{Int64}(2, 3, 5, 7, 11, 13,\
    \ 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67)\n    else if n == 20\n \
    \       Vector{Int64}(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71)\n    else if n == 21\n        Vector{Int64}(2, 3, 5, 7,\
    \ 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, "]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
