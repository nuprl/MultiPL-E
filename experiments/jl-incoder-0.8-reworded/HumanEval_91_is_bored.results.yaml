language: jl
name: HumanEval_91_is_bored
results:
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    if is_bored_1(S) == 0\n    then 1\n    else 0\n    end\nend\nis_bored_1(S::String)::Int64\n\
    \    S = split(S) \n    if S[1][1] in (\"!\",\"?\")\n    then 0\n    else if S[length(S)-1][1]\
    \ in (\".\", \"?\")\n    then 0\n    else 1\n    end\nend\n\"\"\"\n    You'll\
    \ be given a list of words, and your task is to count the number of boredoms.\n\
    \    A boredom is a sentence that starts with the word \"I\".\n    \n    For example:\n\
    \    >>> is_bored([\"Hello\", \"world\"])\n    0\n    >>> is_bored([\"The\", \"\
    sky\", \"is\", \"blue\", \".\", \"The\", \"sun\", \"is\", \"shining\", \".\",\n\
    \    ...           \"I\", \"love\", \"this\", \"weather\"])\n    1\n    \"\"\"\
    \nusing Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"\
    Hello world\") == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"\
    I love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"1\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp8e0qdill.jl:14\nin expression starting at /tmp/tmp8e0qdill.jl:14\n"
  stdout: ''
  timestamp: 1659978084
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    boredom = 0\n    for word in words(S) do\n        if word[1]==\"I\" then\n\
    \            boredom = boredom + 1 \n        end\n    end\n    return boredom\n\
    end\n</code>\nNow, let's take a look at your solution:\n<code>\nis_bored(\"Hello\
    \ world\")\nis_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n</code>\nYou can see that if you compare the two results from your function\
    \ calls, they match up. That is because they both have \"I\" in the first word\
    \ of the sentence and the second word's first letter matches. But that is not\
    \ what you want. That's because your solution is doing something different. Your\
    \ solution is only looking at the first word in the sentence.\n<code>\nis_bored(\"\
    Hello world\")\nis_bored(\"The sky is blue\")\n</code>\nHere are two solutions\
    \ that would give the same result:\n<code>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"\
    Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"\
    bIt\") == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will\
    \ kill It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmph_nr1cxu.jl:21\nin expression starting at\
    \ /tmp/tmph_nr1cxu.jl:21\n"
  stdout: ''
  timestamp: 1659978084
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    \n    # Your code here\nusing Test\n\n@testset begin\n\ncandidate = is_bored;\n\
    \t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"Is the sky blue?\"\
    ) == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"bIt\")\
    \ == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will kill\
    \ It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpowo5mjj1.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpowo5mjj1.jl:1\n\
    in expression starting at /tmp/tmpowo5mjj1.jl:1\n"
  stdout: ''
  timestamp: 1659978084
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n\"\"\"\nis_bored(S::String)\nusing Test\n\n@testset begin\n\ncandidate = is_bored;\n\
    \t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"Is the sky blue?\"\
    ) == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"bIt\")\
    \ == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will kill\
    \ It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpt_ostqpm.jl:1\nin expression starting at /tmp/tmpt_ostqpm.jl:1\n"
  stdout: ''
  timestamp: 1659978084
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    \"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\n    return sum(map((lambda\
    \ x::Bool(starts_with(x))),S)) \nusing Test\n\n@testset begin\n\ncandidate = is_bored;\n\
    \t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"Is the sky blue?\"\
    ) == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"bIt\")\
    \ == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will kill\
    \ It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcy2cu89q.jl:24\nin expression starting at\
    \ /tmp/tmpcy2cu89q.jl:24\n"
  stdout: ''
  timestamp: 1659978084
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    \"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nusing Test\n\n\
    @testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") ==\
    \ 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love\
    \ It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel\
    \ good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpbiibg08y.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpbiibg08y.jl:1\n\
    in expression starting at /tmp/tmpbiibg08y.jl:1\n"
  stdout: ''
  timestamp: 1659978084
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    \"\"\"\n    Your function should return a number: the number of boredoms\
    \ that occur\n    in the given sentence.\n    \n    Your function should start\
    \ with an expression that evaluates to an integer\n    value, and you should return\
    \ this value at the end of the function.\n    \n    Do not use any Python built-in\
    \ functions (except for math functions)\n    in your code.\n    \"\"\"\nend\n\
    </cell>\n<code language=julia-1.0>\n# Run this cell to test your solution\nusing\
    \ Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\"\
    ) == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I\
    \ love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpazs_s4_3.jl:24\nin expression starting at\
    \ /tmp/tmpazs_s4_3.jl:24\n"
  stdout: ''
  timestamp: 1659978084
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    # Your code here\n    return sum(S[i] <> \"I\" for i in  range(1,size(S)-1))\n\
    end\n</cell>\n<text>\nCongratulations! You've just implemented a vanilla logistic\
    \ regression model that classifies sentences into spam-ish and ham-ish.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\"\
    ) == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I\
    \ love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \">\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8rnvlfgo.jl:14\nin expression starting at\
    \ /tmp/tmp8rnvlfgo.jl:14\n"
  stdout: ''
  timestamp: 1659978084
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    \n    \"\"\"\n    # YOUR CODE HERE\n    \"\"\"\n    boredoms = 0\n   \
    \ for word in split(S):\n        if word == \"I\":\n            boredoms += 1\n\
    \    return boredoms\nend\n</cell>\n<text>\nC) Emotion Classification\nYou are\
    \ given three sets of emotions ('Happy', 'Sad', and 'Angry'), each with about\
    \ 1000 positive and negative tweets. You are required to use these to train a\
    \ classifier.\nusing Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"\
    Hello world\") == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"\
    I love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpatlh2n8s.jl:19\nin expression starting at\
    \ /tmp/tmpatlh2n8s.jl:19\n"
  stdout: ''
  timestamp: 1659978084
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    return sum(map(is_bored, split_bored(S)))\nend\n</cell>\n<code language=julia-1.5>\n\
    @test is_bored(\"Hello world\") == 0\n@test is_bored(\"The sky is blue. The sun\
    \ is shining. I love this weather.\") ==1\n</cell>\n<text>\nPart 3: Preprocessing\
    \ Your Data\nusing Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"\
    Hello world\") == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"\
    I love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpf_gsa7lx.jl:15\nin expression starting at\
    \ /tmp/tmpf_gsa7lx.jl:15\n"
  stdout: ''
  timestamp: 1659978084
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    # Your code here\n    if S.startswith((\"I\")) == True \n        return\
    \ 1 \n    else \n        return 0 \nend \n</code>\nA better solution could be:\n\
    <code>\n\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nusing Test\n\n\
    @testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") ==\
    \ 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love\
    \ It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel\
    \ good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplfmej58d.jl:19\nin expression starting at\
    \ /tmp/tmplfmej58d.jl:19\n"
  stdout: ''
  timestamp: 1659978084
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    \"\"\"\n    \"\"\"\n    if is_bored(\"Hello world\") return 0\n    if\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\") return\
    \ 1\nend\nusing Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"\
    Hello world\") == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"\
    I love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9td073t5.jl:1\nin expression starting at /tmp/tmp9td073t5.jl:1\n"
  stdout: ''
  timestamp: 1659978084
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    S = S.split('.') \n    return sum(map(is_bored, S[1:])) \nend \n</cell>\n\
    <text>\nThe function is_bored has now been defined. Write a function get_boredoms(S)\
    \ that returns the number of boredoms in sentence S as a list [Int64].\nusing\
    \ Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\"\
    ) == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I\
    \ love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"1:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpao9ukapt.jl:14\nin expression\
    \ starting at /tmp/tmpao9ukapt.jl:14\n"
  stdout: ''
  timestamp: 1659978084
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    return length(findall(S |> is_bored_p, is_bored_p(S)))\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\")\
    \ == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I\
    \ love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 6 errored,
    0 broken.

    in expression starting at /tmp/tmpx361ydb7.jl:17

    '
  stdout: "test set: Error During Test at /tmp/tmpx361ydb7.jl:20\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world\") == 0\n  UndefVarError: is_bored_p not\
    \ defined\n  Stacktrace:\n   [1] is_bored(S::String)\n     @ Main /tmp/tmpx361ydb7.jl:13\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpx361ydb7.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpx361ydb7.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpx361ydb7.jl:21\n  Test threw exception\n  Expression:\
    \ candidate(\"Is the sky blue?\") == 0\n  UndefVarError: is_bored_p not defined\n\
    \  Stacktrace:\n   [1] is_bored(S::String)\n     @ Main /tmp/tmpx361ydb7.jl:13\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpx361ydb7.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpx361ydb7.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpx361ydb7.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(\"I love It !\") == 1\n  UndefVarError: is_bored_p not defined\n \
    \ Stacktrace:\n   [1] is_bored(S::String)\n     @ Main /tmp/tmpx361ydb7.jl:13\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpx361ydb7.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpx361ydb7.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpx361ydb7.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(\"bIt\") == 0\n  UndefVarError: is_bored_p not defined\n  Stacktrace:\n\
    \   [1] is_bored(S::String)\n     @ Main /tmp/tmpx361ydb7.jl:13\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlin"
  timestamp: 1659978086
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    \"\"\"\n    \n    Implement the function is_bored() in the cell below.\n\
    \    \"\"\"\n    return length(findall(S, '.I')) == 0\n</cell>\n<text>\nTest cell\n\
    using Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello\
    \ world\") == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"\
    I love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: character literal contains multiple characters\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmpk2g6eqeu.jl:17\nin expression\
    \ starting at /tmp/tmpk2g6eqeu.jl:17\n"
  stdout: ''
  timestamp: 1659978084
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    if is_bored_str(S) == 0\n        if is_bored_str(S.substring(1)) == 1\n\
    \            if is_bored_str(S.substring(2)) == 1\n                return 1\n\
    \            else \n                return 0\n        else \n            return\
    \ 0\n    else\n        return 0\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"\
    Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"\
    bIt\") == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will\
    \ kill It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"if\" at /tmp/tmp38mlej2u.jl:15 expected \"\
    end\", got \"else\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp38mlej2u.jl:19\n\
    in expression starting at /tmp/tmp38mlej2u.jl:19\n"
  stdout: ''
  timestamp: 1659978084
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    return count(boredom(S)) \nend \nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"\
    Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"\
    bIt\") == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will\
    \ kill It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 6 errored,
    0 broken.

    in expression starting at /tmp/tmpasugxe94.jl:17

    '
  stdout: "test set: Error During Test at /tmp/tmpasugxe94.jl:20\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world\") == 0\n  UndefVarError: boredom not defined\n\
    \  Stacktrace:\n   [1] is_bored(S::String)\n     @ Main /tmp/tmpasugxe94.jl:13\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpasugxe94.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpasugxe94.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpasugxe94.jl:21\n  Test threw exception\n  Expression:\
    \ candidate(\"Is the sky blue?\") == 0\n  UndefVarError: boredom not defined\n\
    \  Stacktrace:\n   [1] is_bored(S::String)\n     @ Main /tmp/tmpasugxe94.jl:13\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpasugxe94.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpasugxe94.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpasugxe94.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(\"I love It !\") == 1\n  UndefVarError: boredom not defined\n  Stacktrace:\n\
    \   [1] is_bored(S::String)\n     @ Main /tmp/tmpasugxe94.jl:13\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpasugxe94.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpasugxe94.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpasugxe94.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(\"bIt\") == 0\n  UndefVarError: boredom not defined\n  Stacktrace:\n\
    \   [1] is_bored(S::String)\n     @ Main /tmp/tmpasugxe94.jl:13\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] m"
  timestamp: 1659978086
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n</code>\nusing Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"\
    Hello world\") == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"\
    I love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpftmm99ct.jl:13\nin expression starting at\
    \ /tmp/tmpftmm99ct.jl:13\n"
  stdout: ''
  timestamp: 1659978084
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    boredom::Int64 = 0\n    char::String = split(S,\".\")\n    for i in char\n\
    \        if i == \"I\"\n            boredom += 1\n        end\n    end\n    return\
    \ boredom\nend\n</cell>\n<code language=julia-1.5>\nis_bored(\"Hello world\")\n\
    </cell>\n<code language=julia-1.5>\nis_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n</cell>\n<text>\nExercise: Write a function named is_bored\
    \ which counts the number of boredoms for a given string. \nThe function should\
    \ also give a boolean value as output to indicate whether the given string contains\
    \ any boredom, or not.\nusing Test\n\n@testset begin\n\ncandidate = is_bored;\n\
    \t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"Is the sky blue?\"\
    ) == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"bIt\")\
    \ == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will kill\
    \ It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnhd4s75s.jl:22\nin expression starting at\
    \ /tmp/tmpnhd4s75s.jl:22\n"
  stdout: ''
  timestamp: 1659978084
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n  \n  \"\"\"\n  Write a function that takes a sentence and returns true if\
    \ the sentence starts with \"I\" otherwise it returns false. \n  \n  Inputs:\n\
    \    S: String containing a sentence.\n  \n  Outputs:\n    Int64: 1 if S is bored,\
    \ else 0.\n  \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = is_bored;\n\t\
    @test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"Is the sky blue?\"\
    ) == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"bIt\")\
    \ == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will kill\
    \ It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpt8p2kzko.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpt8p2kzko.jl:1\n\
    in expression starting at /tmp/tmpt8p2kzko.jl:1\n"
  stdout: ''
  timestamp: 1659978084
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    if is_bored(S, 0)==0 then 1 else 0\nend\n\"\"\"\n    You'll be given a\
    \ string of words, and your task is to count the number\n    of boredoms. A boredom\
    \ is a sentence that starts with the word \"I\".\n    Sentences are delimited\
    \ by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\"\
    )\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this\
    \ weather\")\n    1\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = is_bored;\n\
    \t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"Is the sky blue?\"\
    ) == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"bIt\")\
    \ == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will kill\
    \ It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"1\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpqc4rhrek.jl:13\nin expression starting at /tmp/tmpqc4rhrek.jl:13\n"
  stdout: ''
  timestamp: 1659978084
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    if S == \"I\" or S == \"i\" or S == \"i\" or S == \"I\" or S == \"i\"\
    \ or S == \"I\" or S == \"i\" \n        then 1 else 0\n    else 0\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\"\
    ) == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I\
    \ love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"S\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpfewh2_et.jl:13\nin expression starting at /tmp/tmpfewh2_et.jl:13\n"
  stdout: ''
  timestamp: 1659978084
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    if S == \"\"\n    else \n        is_bored(S[1..end]) + \n        is_bored(S[1..end])\
    \ \n    end\nend\n</code>\n<|/ a dscore=1 |>\n<| a dscore=0 |>\nTry this please:\n\
    <code>\njulia> s = \"I love this weather. I love this weather.\"\n\"I love this\
    \ weather. I love this weather.\"\nusing Test\n\n@testset begin\n\ncandidate =\
    \ is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"Is\
    \ the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"\
    bIt\") == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will\
    \ kill It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzoss9_58.jl:19\nin expression starting at\
    \ /tmp/tmpzoss9_58.jl:19\n"
  stdout: ''
  timestamp: 1659978084
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    \n    # Your code here\n    \n    return 0\nusing Test\n\n@testset begin\n\
    \ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"\
    Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"\
    bIt\") == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will\
    \ kill It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp962ipses.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp962ipses.jl:1\n\
    in expression starting at /tmp/tmp962ipses.jl:1\n"
  stdout: ''
  timestamp: 1659978086
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n\"\"\"\n    is_bored(S::String)::Int64\n    \nReturns number of boredom sentences\
    \ in S\n\"\"\"\nusing Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"\
    Hello world\") == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"\
    I love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpdz3e0enu.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpdz3e0enu.jl:1\n\
    in expression starting at /tmp/tmpdz3e0enu.jl:1\n"
  stdout: ''
  timestamp: 1659978086
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    local I=1\n    for w in S.split(\" \") do \n        if w == \"I\" then\
    \ \n            return I \n        I = I+1\n    end\n    return 0\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\"\
    ) == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I\
    \ love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"for\" at /tmp/tmpq16qwx0u.jl:14\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpq16qwx0u.jl:1\n\
    in expression starting at /tmp/tmpq16qwx0u.jl:1\n"
  stdout: ''
  timestamp: 1659978086
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    # Replace this block with your own code\n    # ...\n    return ...\nend\n\
    using Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello\
    \ world\") == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"\
    I love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid identifier name \"...\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7z_qg_w1.jl:15\nin expression starting at\
    \ /tmp/tmp7z_qg_w1.jl:15\n"
  stdout: ''
  timestamp: 1659978086
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    \n    boredoms=0\n    \n    # Your code here\n    boredoms=0\n    for\
    \ i,word in enumerate(S)\n        if S[0]=I\n        \n    return boredoms\nend\n\
    </cell>\n<text>\nQuestion 4\nWrite a function that takes a string and returns\
    \ the number of words in that string.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"\
    Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"\
    bIt\") == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will\
    \ kill It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid iteration specification\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxsmxaq13.jl:18\nin expression starting at\
    \ /tmp/tmpxsmxaq13.jl:18\n"
  stdout: ''
  timestamp: 1659978086
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n\"\"\"\n    You'll be given a string of words, and your task is to count the\
    \ number\n    of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nusing Test\n\n\
    @testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") ==\
    \ 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love\
    \ It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel\
    \ good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp95t427f9.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp95t427f9.jl:1\n\
    in expression starting at /tmp/tmp95t427f9.jl:1\n"
  stdout: ''
  timestamp: 1659978086
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    if is_bored(S,0)==0 then \n        return 0\n    end\n    s=0\n    count=0\n\
    \    for c in S\n        if c==\"I\" then \n            count+=1\n        elseif\
    \ c==\".\" then \n            if count>1 then \n                count=0\n    \
    \            s=1\n            else \n                count+=1\n            end\n\
    \        elseif c==\"!\" then \n            if count>1 then \n               \
    \ count=0\n                s=1\n            else \n                count-=1\n\
    \            end\n        elseif c==\"?\" then \n            if count>1 then \n\
    \                count=0\n                s=1\n            else \n           \
    \     count+=1\n            end\n        else \n            if count>0 then \n\
    \                count=0\n            end\n        end\n    end\n    if s==0 then\
    \ \n        return 1\n    elseif s==1 then \n        return 0\n    end\nend\n\
    </cell>\n<code language=julia-1.0>\nis_bored(\"Hello world\")\n</cell>\n<code\
    \ language=julia-1.0>\nis_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n</cell>\n<text>\n2.5.1 Explain\nRecall that the boredoms()\
    \ function takes one string argument and computes\nthe number of boredoms in that\
    \ string. We'll start by trying some simple\nexamples, such as:\nusing Test\n\n\
    @testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") ==\
    \ 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love\
    \ It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel\
    \ good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwdefud93.jl:54\nin expression starting at\
    \ /tmp/tmpwdefud93.jl:54\n"
  stdout: ''
  timestamp: 1659978086
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    # Write your solution here\n    S.split(\" \").map(x -> if x==\"I\" then\
    \ 1 else 0).sum\nend\n</cell>\n<code language=julia-0.6>\nis_bored(S::String)\
    \ = is_bored(S)\n</cell>\n<code language=julia-0.6>\n@time is_bored(S);\n</cell>\n\
    <text>\n5.7 Exercises\nWrite a function that takes a String as a parameter and\
    \ returns a \nDict where the keys are all the words in the string, with the corresponding\n\
    values being how many times each word appears in the string.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t\
    @test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\"\
    ) == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2)\n\t@test(candidate(\"You and I are\
    \ going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"1\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpb79f0qmr.jl:14\nin expression starting at /tmp/tmpb79f0qmr.jl:14\n"
  stdout: ''
  timestamp: 1659978086
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    \"\"\"\n    Your task is to implement the function is_bored(S::String)::Int64.\n\
    \    \"\"\"\n    return is_bored(S, [])\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"\
    Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"\
    bIt\") == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will\
    \ kill It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpkuxk7h0w.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpkuxk7h0w.jl:1\n\
    in expression starting at /tmp/tmpkuxk7h0w.jl:1\n"
  stdout: ''
  timestamp: 1659978086
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    S = replace(S,\".\",\"\")\n    S = replace(S,\".\",\"\")\n    S = replace(S,\"\
    .\",\"\")\n    S = replace(S,\".\",\"\")\n    S = replace(S,\".\",\"\")\n    S\
    \ = replace(S,\".\",\"\")\n    S = replace(S,\".\",\"\")\n    S = replace(S,\"\
    .\",\"\")\n    S = replace(S,\".\",\"\")\n    S = replace(S,\".\",\"\")\n    S\
    \ = replace(S,\".\",\"\")\n    S = replace(S,\".\",\"\")\n    S = replace(S,\"\
    .\",\"\")\n    S = replace(S,\".\",\"\")\n    S = replace(S,\".\",\"\")\n    S\
    \ = replace(S,\".\",\"\")\n    S = replace(S,\".\",\"\")\n    S = replace(S,\"\
    .\",\"\")\n    S = replace(S,\".\",\"\")\n    S = replace(S,\".\",\"\")\n    S\
    \ = replace(S,\".\",\"\")\n    S = replace(S,\".\",\"\")\n    S = replace(S,\"\
    .\",\"\")\n    S = replace(S,\".\",\"\")\n    S = replace(S,\".\",\"\")\n    S\
    \ = replace(S,\".\",\"\")\n    S = replace(S,\".\",\"\")\n    S = replace(S,\"\
    .\",\"\")\n    S = replace(S,\".\",\"\")\n    S = replace(S,\".\",\"\")\n    S\
    \ = replace(S,\".\",\"\")\n    S = replace(S,\".\",\"\")\n    S = replace(S,\"\
    .\",\"\")\n    S = replace(S,\".\",\"\")\n    S = replace(S,\".\",\"\")\n    S\
    \ = replace(S,\".\",\"\")\n    S = replace(S,\".\",\"\")\n    S = replace(S,\"\
    .\",\"\")\n    S = replace(S,\".\",\"\")\n    S = replace(S,\".\",\"\")\n    S\
    \ = replace(S,\".\",\"\")\n    S = replace(S,\".\",\"\")\n    S = replace(S,\"\
    .\",\"\")\n    S = replace(S,\".\",\"\")\n    S = replace(S,\".\",\"\")\n    S\
    \ = replace(S,\".\",\"\")\n    S = replace(S,\".\",\"\")\n    S = replace(S,\"\
    .\",\"\")\n    S = replace(S,\".\",\"\")\n    S = replace(S,\".\",\"\")\n    S\
    \ = replace(S,\".\",\"\")\n    S = replace(S,\".\",\"\")\n    S = replace(S,\"\
    .\",\"\")\n    S = replace(S,\".\",\"\")\n    S = replace(S,\".\",\"\")\n    S\
    \ = replace(S,\".\",\"\")\n    S = replace(S,\".\",\"\")\n    S = replace(S,\"\
    .\",\"\")\n    S = replace(S,\".\",\"\")\n    S = replace(S,\".\",\"\")\n    S\
    \ = replace(S,\".\",\"\")\n    S = replace(S,\".\",\"\")\n    S = replace(S,\"\
    .\",\"\")\n    S = replace(S,\".\",\"\")\n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"\
    Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"\
    bIt\") == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will\
    \ kill It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp7tmx77ft.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp7tmx77ft.jl:1\n\
    in expression starting at /tmp/tmp7tmx77ft.jl:1\n"
  stdout: ''
  timestamp: 1659978086
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    if is_bored(S,0,0)==0 \n        then 0 else 1\n    end \nend \n\"\"\"\n\
    \    Your task is to implement a recursive function called is_bored.\n    The\
    \ function takes as input a string, a starting index and a counter \n    which\
    \ counts how many sentences we encounter up to now.\n    \n    You will need a\
    \ base case. Your base case should return 1 if we encounter a \n    boredom.\n\
    \    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"\
    Hello world\") == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"\
    I love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"0\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp1ohmecs7.jl:14\nin expression starting at /tmp/tmp1ohmecs7.jl:14\n"
  stdout: ''
  timestamp: 1659978086
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    if is_bored(S,0)==1 \n        return 1 else 0 \nend \n</cell>\n<code language=julia-0.6>\n\
    @testset \"is_bored() tests\" begin\n    @test is_bored(\"Hello world\") == 0\
    \ \n    @test is_bored(\"The sky is blue.\") == 1 \n    @test is_bored(\"The sun\
    \ is shining.\") == 1 \n    @test is_bored(\"I love this weather\") == 1 \n  \
    \  @test is_bored(\"I love this weather.\") == 1 \n    @test is_bored(\"I love\
    \ this weather, it is sunny.\") == 1 \n    @test is_bored(\"I love this weather,\
    \ it is sunny, it is rainy.\") == 0 \nend \n</cell>\n<text>\nTask 2.2: Write a\
    \ function that reads a file line by line and returns the number of boredoms read\
    \ from the file.\nusing Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"\
    Hello world\") == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"\
    I love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7vcleru0.jl:16\nin expression starting at\
    \ /tmp/tmp7vcleru0.jl:16\n"
  stdout: ''
  timestamp: 1659978086
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n</code>\n2. Defining the boredom_count function\nThis function, boredom_count,\
    \ counts the number of boredoms that appear in a given sentence.\n<code>\nboredom_count(S::String)::Int64\n\
    </code>\n3. Testing the boredom_count function\nRun the boredom_count function\
    \ to check it against the expected results,\nthen use @code_native to see how\
    \ this function is translated to machine code.\n<code>\nboredom_count(\"Hello\
    \ world\")\nboredom_count(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n</code>\n\"\"\"\nThe boredom_count function\nThe boredom_count function should\
    \ return the number of boredoms that appear in S.\n<code>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t\
    @test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\"\
    ) == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2)\n\t@test(candidate(\"You and I are\
    \ going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvgc65joa.jl:13\nin expression starting at\
    \ /tmp/tmpvgc65joa.jl:13\n"
  stdout: ''
  timestamp: 1659978086
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    if is_empty(S)\n        return 0\n    \n    if is_bored(S[1..end])\n \
    \       return 1 + is_bored(S[end..end-1])\n    else\n        return is_bored(S[1..end-1])\n\
    end\n</cell>\n<text>\nExercise: Write a function that prints the boredoms of a\
    \ string.\nusing Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"\
    Hello world\") == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"\
    I love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpx730c6l2.jl:21\nin expression starting at\
    \ /tmp/tmpx730c6l2.jl:21\n"
  stdout: ''
  timestamp: 1659978086
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    \n    S = strip_punct(S)\n    S = strip_spaces(S)\n    S = strip_exclamation_marks(S)\n\
    \    S = strip_questions(S)\n    S = strip_periods(S)\n    return length(S .==\
    \ \"I\")\nend\nusing Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"\
    Hello world\") == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"\
    I love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 6 errored,
    0 broken.

    in expression starting at /tmp/tmplat1jsi1.jl:23

    '
  stdout: "test set: Error During Test at /tmp/tmplat1jsi1.jl:26\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world\") == 0\n  UndefVarError: strip_punct not\
    \ defined\n  Stacktrace:\n   [1] is_bored(S::String)\n     @ Main /tmp/tmplat1jsi1.jl:14\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmplat1jsi1.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmplat1jsi1.jl:25\ntest set:\
    \ Error During Test at /tmp/tmplat1jsi1.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"Is the sky blue?\") == 0\n  UndefVarError: strip_punct not defined\n\
    \  Stacktrace:\n   [1] is_bored(S::String)\n     @ Main /tmp/tmplat1jsi1.jl:14\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmplat1jsi1.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmplat1jsi1.jl:25\ntest set:\
    \ Error During Test at /tmp/tmplat1jsi1.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"I love It !\") == 1\n  UndefVarError: strip_punct not defined\n\
    \  Stacktrace:\n   [1] is_bored(S::String)\n     @ Main /tmp/tmplat1jsi1.jl:14\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmplat1jsi1.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmplat1jsi1.jl:25\ntest set:\
    \ Error During Test at /tmp/tmplat1jsi1.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"bIt\") == 0\n  UndefVarError: strip_punct not defined\n  Stacktrace:\n\
    \   [1] is_bored(S::String)\n     @ Main /tmp/tmplat1jsi1.jl:14\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [i"
  timestamp: 1659978088
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    if is_bored(S,0) =! 0 then 1\n    else 0\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") ==\
    \ 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love\
    \ It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel\
    \ good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"=\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpy5u4vq3n.jl:13\nin expression starting at /tmp/tmpy5u4vq3n.jl:13\n"
  stdout: ''
  timestamp: 1659978086
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    if S == \"\"\n        return 0 \n    \n    if S[S.length-1] == '.'\n \
    \       return 1 \n    \n    if S[S.length-1] == '?'\n        return 1 \n    \n\
    \    if S[S.length-1] == '!'\n        return 1 \n    \n    return 0 \nend\n</cell>\n\
    <code language=julia-1.4>\nis_bored(boredoms)\n</cell>\n<text>\nQuestion 2.2:\
    \ How many times do we need to put an exclamation point before each sentence?\n\
    using Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello\
    \ world\") == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"\
    I love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4i3osysh.jl:27\nin expression starting at\
    \ /tmp/tmp4i3osysh.jl:27\n"
  stdout: ''
  timestamp: 1659978086
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    S = S.split(\". \")\n    count = length(S) - length(filter(is_bored, S))\n\
    \    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = is_bored;\n\
    \t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"Is the sky blue?\"\
    ) == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"bIt\")\
    \ == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will kill\
    \ It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 6 errored,
    0 broken.

    in expression starting at /tmp/tmpkfpefosg.jl:19

    '
  stdout: "test set: Error During Test at /tmp/tmpkfpefosg.jl:22\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world\") == 0\n  type String has no field split\n\
    \  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] is_bored(S::String)\n\
    \     @ Main /tmp/tmpkfpefosg.jl:13\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpkfpefosg.jl:22 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpkfpefosg.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpkfpefosg.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(\"Is the sky blue?\") == 0\n  type String has no field split\n  Stacktrace:\n\
    \   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] is_bored(S::String)\n\
    \     @ Main /tmp/tmpkfpefosg.jl:13\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpkfpefosg.jl:23 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpkfpefosg.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpkfpefosg.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(\"I love It !\") == 1\n  type String has no field split\n  Stacktrace:\n\
    \   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] is_bored(S::String)\n\
    \     @ Main /tmp/tmpkfpefosg.jl:13\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpkfpefosg.jl:24 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpkfpefosg.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpkfpefosg.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(\"bIt\") == 0\n  type String has no field split\n  Stacktrace:\n \
    \  [1] getproperty\n     @ ./Base.jl:42 [inlined"
  timestamp: 1659978087
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n     \"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nusing Test\n\n\
    @testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") ==\
    \ 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love\
    \ It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel\
    \ good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpwmymi98z.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpwmymi98z.jl:1\n\
    in expression starting at /tmp/tmpwmymi98z.jl:1\n"
  stdout: ''
  timestamp: 1659978086
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    if S == \"Hello world\"\n        return 0 \n    end\n    bored_count =\
    \ is_bored(S[3:end])\n    word_count = count_words(S)\n    if bored_count == word_count\n\
    \        return bored_count\n    else\n        return -1\n    end\nend\n</cell>\n\
    <code language=julia-1.0>\n\"\"\"\ncount_words (S)\n \nCount how many times the\
    \ string S appears in the given text.\n \nExample:\ncount_words(\"Hello world\"\
    )\n> 2\n\"\"\"\nusing Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"\
    Hello world\") == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"\
    I love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp89m8sht9.jl:24\nin expression starting at\
    \ /tmp/tmp89m8sht9.jl:24\n"
  stdout: ''
  timestamp: 1659978086
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    S = S.lower()\n    if S contains \"i\"\n        return 1 # first char\
    \ is i\n    elseif S contains \"you\"\n        return 2 # second char is i\n \
    \   elseif S contains \"he\"\n        return 3 # third char is e\n    else\n \
    \       return 0 # else 0\nend\n</cell>\n<text>\nWrite a function that counts\
    \ the number of boredoms within a string.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"\
    Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"\
    bIt\") == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will\
    \ kill It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"\"\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpb6r92gja.jl:14\nin expression starting at /tmp/tmpb6r92gja.jl:14\n"
  stdout: ''
  timestamp: 1659978086
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n\"\"\"\n    You'll be given a string of words, and your task is to count the\
    \ number\n    of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\n# Exercise: Define\
    \ a function that receives text and returns the number of \n# sentences.\n\"\"\
    \"\n    You'll be given a string of words, and your task is to count the number\n\
    \    of sentences. Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> count_sentences(\"Hello world\")\n    1\n    >>> count_sentences(\"The\
    \ sky is blue. The sun is shining. I love this weather\")\n    3\n    \"\"\"\n\
    using Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello\
    \ world\") == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"\
    I love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp29qm3rib.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp29qm3rib.jl:1\n\
    in expression starting at /tmp/tmp29qm3rib.jl:1\n"
  stdout: ''
  timestamp: 1659978087
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    count::Int64 = 0\n    bored_start::Bool = True\n    for word in split(S,\
    \ \".!?\")\n        word_bored::Bool = startswith(word, \"I\")\n        \n   \
    \     if bored_start and word_bored\n            count += 1\n        end\nusing\
    \ Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\"\
    ) == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I\
    \ love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"word_bored\"\nStacktrace:\n [1]\
    \ top-level scope\n   @ /tmp/tmph6vgxfun.jl:18\nin expression starting at /tmp/tmph6vgxfun.jl:18\n"
  stdout: ''
  timestamp: 1659978087
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    \"\"\"\n    \n    Input:\n    S: String containing sequence of words delimited\
    \ by '.', '?', '!'\n    \n    Output:\n    number of boredoms in the input string\
    \ S\n    \"\"\"\n    if is_empty(S) == True\n        return 0\n    bored = 0\n\
    \    for w in S.split(\" \")\n        if w == \"I\"\n            bored = bored\
    \ + 1\n    return bored\nend\n</cell>\n<text>\nTo check your code, run the cell\
    \ below. If there are no bugs, please run the cell to test your code. There should\
    \ two messages for you:\nusing Test\n\n@testset begin\n\ncandidate = is_bored;\n\
    \t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"Is the sky blue?\"\
    ) == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"bIt\")\
    \ == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will kill\
    \ It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgfv4lkww.jl:29\nin expression starting at\
    \ /tmp/tmpgfv4lkww.jl:29\n"
  stdout: ''
  timestamp: 1659978087
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    if is_bored(S,0)==0\n    then 1\n    else is_bored(S,1)\n    end\nend\n\
    </cell>\n<code language=julia-0.6>\nis_bored(\"Hello world\")\n</cell>\n<code\
    \ language=julia-0.6>\nis_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n</cell>\n<text>\nExercise: Counting words in Chinese\nThe objective\
    \ of this exercise is to complete the function count_chinese, which counts the\
    \ words in Chinese text. The text is given in UTF-8. \nThis function will be called\
    \ as follows:\nusing Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"\
    Hello world\") == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"\
    I love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"1\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpeypumr9u.jl:14\nin expression starting at /tmp/tmpeypumr9u.jl:14\n"
  stdout: ''
  timestamp: 1659978087
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n\"\"\"\n    Your code here\n\"\"\"\n</code>\nI hope this was helpful, please\
    \ ask if you need more clarification.\n<|/ a dscore=1 tags=functional-programming,haskell\
    \ |>\n<| a tags=functional-programming,haskell |>\nIt's not very clear what you\
    \ mean by \"a lot of if-then-else\". I assume that you are talking about something\
    \ like\n<code>\nif x then y\nelse if x then y\nelse if x then y\nelse if x then\
    \ y\nelse if x then y\nelse if x then y\nelse if x then y\n...\nelse if x then\
    \ y\nelse if x then y\nelse if x then y\nelse if x then y\nelse if x then y\n\
    ...\nelse if x then y\nelse if x then y\nelse if x then y\nelse if x then y\n\
    else if x then y\nelse if x then y\n...\nelse if x then y\nelse if x then y\n\
    else if x then y\nelse if x then y\nelse if x then y\nelse if x then y\nelse if\
    \ x then y\nelse if x then y\nelse if x then y\nelse if x then y\nelse if x then\
    \ y\nelse if x then y\nelse if x then y\nelse if x then y\nelse if x then y\n\
    else if x then y\nelse if x then y\nelse if x then y\nelse if x then y\nelse if\
    \ x then y\nelse if x then y\nelse if x then y\nelse if x then y\nelse if x then\
    \ y\nelse if x then y\nelse if x then y\nelse if x then y\nelse if x then y\n\
    else if x then y\nelse if x then y\nelse if x then y\nelse if x then y\nelse if\
    \ x then y\nelse if x then y\nelse if x then y\nelse if x then y\nelse if x then\
    \ y\nelse if x then y\nelse if x then y\nelse if x then y\nelse if x then y\n\
    else if x then y\nelse if x then y\nelse if x then y\nelse if x then y\nelse if\
    \ x then y\nelse if x then y\nelse if x then y\nelse if x then y\nelse if x then\
    \ y\nelse if x then y\nelse if x then y\n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"\
    Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"\
    bIt\") == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will\
    \ kill It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpo6lsm889.jl:16\nin expression starting at\
    \ /tmp/tmpo6lsm889.jl:16\n"
  stdout: ''
  timestamp: 1659978087
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    boredoms_count = 0\n    for word in split_sentences(S)\n        if is_boredom_word(word)\n\
    \            boredoms_count += 1\n    return boredoms_count\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t\
    @test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\"\
    ) == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2)\n\t@test(candidate(\"You and I are\
    \ going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqeak4o3h.jl:1\nin expression starting at /tmp/tmpqeak4o3h.jl:1\n"
  stdout: ''
  timestamp: 1659978087
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    if is_bored::String{String}(S) == \"\" \n        return 0 \n    else \n\
    \        if S == \"I\" \n            return 1 \n        else \n            return\
    \ is_bored(S[end-2:end]) + is_bored(S[end-1:end-2]) \n    end \nend \n</cell>\n\
    <code language=julia-1.5>\n@assert is_bored(\"Hello world\") == 0\n@assert is_bored(\"\
    The sky is blue.\") == 1\n@assert is_bored(\"The sun is shining\") == 1\n@assert\
    \ is_bored(\"I love this weather.\") == 2\n</cell>\n<text>\nQuestion 2:\nWrite\
    \ a function bored_string(S::String) where S is a string describing boredoms.\
    \ Your function should return a string that is the same as S, but with the last\
    \ letter of every sentence capitalized.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"\
    Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"\
    bIt\") == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will\
    \ kill It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfkyzvmm3.jl:22\nin expression starting at\
    \ /tmp/tmpfkyzvmm3.jl:22\n"
  stdout: ''
  timestamp: 1659978087
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    S #> \"I\" #> length S #> 1\nend\n</cell>\n<code language=julia-1.5>\n\
    is_bored(\"Hello world\")\n</cell>\n<code language=julia-1.5>\nis_bored(\"The\
    \ sky is blue. The sun is shining. I love this weather\")\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello\
    \ world\") == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"\
    I love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpekw78xlo.jl:15\nin expression starting at\
    \ /tmp/tmpekw78xlo.jl:15\n"
  stdout: ''
  timestamp: 1659978087
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    if S==\".\" or S==\"?\" or S==\"!\" then 0\n    else 1\nend\n</cell>\n\
    <text>\nNotice that is_bored returns the result as a 64 bit integer, not a boolean.\
    \ This is because Python does not have a boolean data type.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t\
    @test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\"\
    ) == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2)\n\t@test(candidate(\"You and I are\
    \ going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"S\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpyp6hwtwz.jl:13\nin expression starting at /tmp/tmpyp6hwtwz.jl:13\n"
  stdout: ''
  timestamp: 1659978087
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    if is_bored2(S) == 0 \n        return 0 \n    else \n        return 1\
    \ \nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\n\
    candidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"\
    Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"\
    bIt\") == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will\
    \ kill It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjxlnml8y.jl:18\nin expression starting at\
    \ /tmp/tmpjxlnml8y.jl:18\n"
  stdout: ''
  timestamp: 1659978087
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    \"Return the number of boredoms in S\"\n    count = 0\n    for (i, word)\
    \ in enumerate(split(S)) \n        if word == \"I\" \n            count += 1\n\
    \    return count\n</cell>\n<code language=julia-1.0>\nis_bored(\"Hello world\"\
    )\n</cell>\n<code language=julia-1.0>\nis_bored(\"The sky is blue. The sun is\
    \ shining. I love this weather\")\n</cell>\n<text>\nWe can also use split and\
    \ join, which is more flexible.\nusing Test\n\n@testset begin\n\ncandidate = is_bored;\n\
    \t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"Is the sky blue?\"\
    ) == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"bIt\")\
    \ == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will kill\
    \ It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8nbs83jy.jl:19\nin expression starting at\
    \ /tmp/tmp8nbs83jy.jl:19\n"
  stdout: ''
  timestamp: 1659978087
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n     #Your code here\n     return # your answer here\nend\n</cell>\n<code\
    \ language=julia-1.0>\n@assert is_bored(\"Hello world\") == 0\n@assert is_bored(\"\
    The sky is blue. The sun is shining. I love this weather.\") == 1 \n</cell>\n\
    <text>\nTask 6: Write a function that accepts a string and returns true if all\
    \ words are bored or false otherwise. \nThe function should apply the boredness\
    \ check as described in the original boredom() function, so that e.g. the boredness\
    \ check is not necessary for the string \"The sun is shining!\".\nusing Test\n\
    \n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\")\
    \ == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I\
    \ love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvhrrmqru.jl:16\nin expression starting at\
    \ /tmp/tmpvhrrmqru.jl:16\n"
  stdout: ''
  timestamp: 1659978087
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    \"Count number of boredoms in S and print it\"\n    count = 0\n    S.split\n\
    \    forall x in S, x.startswith(boredoms)\n    return count\n    \nusing Test\n\
    \n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\")\
    \ == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I\
    \ love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"function\" at /tmp/tmputm13kj7.jl:12 expected\
    \ \"end\", got \"x\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmputm13kj7.jl:16\n\
    in expression starting at /tmp/tmputm13kj7.jl:16\n"
  stdout: ''
  timestamp: 1659978088
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \nis_bored(S,0)\nend\n</cell>\n<code language=julia-0.3>\nis_bored(\"Hello world\"\
    )\n</cell>\n<text>\nPart 2: String Manipulation\nInstructions\nWrite a function\
    \ that takes a string and returns the string with all lowercase letters replaced\
    \ by uppercase. No other characters should be changed.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t\
    @test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\"\
    ) == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2)\n\t@test(candidate(\"You and I are\
    \ going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdwtrzuro.jl:15\nin expression starting at\
    \ /tmp/tmpdwtrzuro.jl:15\n"
  stdout: ''
  timestamp: 1659978087
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    if is_empty(S) == true \n    else \n        first(S, char(\".\")) == true\
    \ || \n        first(S, char(\"?\")) == true || \n        first(S, char(\"!\"\
    )) == true || \n        first(S, char(\"I\")) == true\n    end \nend \n</cell>\n\
    <code language=julia-1.4>\nis_bored(\"Hello world\")\n</cell>\n<code language=julia-1.4>\n\
    is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n</cell>\n\
    <text>\nExercise\nWrite a function count_boredoms(S::String)::Int64 that takes\
    \ in a string,\nand returns the number of boredoms.\nTest it on a few examples.\n\
    using Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello\
    \ world\") == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"\
    I love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphc03wo20.jl:21\nin expression starting at\
    \ /tmp/tmphc03wo20.jl:21\n"
  stdout: ''
  timestamp: 1659978087
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    if is_empty(S) == False \n    else \n    boredom = length(findall(S, \"\
    I \")) # this searches for all the cases of the word 'I' \n    return boredom\
    \ \nend\n</cell>\n<code language=julia-1.3>\nis_bored(\"Hello world\")\n</cell>\n\
    <code language=julia-1.3>\nis_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n</cell>\n<code language=julia-1.3>\n\"\"\"\n    You'll be given\
    \ a string of words, and your task is to count the number\n    of boredoms. A\
    \ boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited\
    \ by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\"\
    )\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this\
    \ weather\")\n    1\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = is_bored;\n\
    \t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"Is the sky blue?\"\
    ) == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"bIt\")\
    \ == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will kill\
    \ It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9pe_vj1e.jl:18\nin expression starting at\
    \ /tmp/tmp9pe_vj1e.jl:18\n"
  stdout: ''
  timestamp: 1659978088
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    return sum(map(S==\"I\",splitstring(S)))\nend\n</cell>\n<code language=julia-0.6>\n\
    \"\"\"\n    You'll be given a list of words, and your task is to count the number\n\
    \    of boredoms. A boredom is a sentence that starts with the word \"I\".\n \
    \   Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>>\
    \ is_bored([\"Hello\", \"world\"])\n    0\n    >>> is_bored([\"The\", \"sky\"\
    , \"is\", \"blue\", \".\", \"The\", \"sun\", \"is\", \"shining\", \".\",\n   \
    \ ...            \"I\", \"love\", \"this\", \"weather\"])\n    1\n    \"\"\"\n\
    using Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello\
    \ world\") == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"\
    I love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpom5iogmm.jl:15\nin expression starting at\
    \ /tmp/tmpom5iogmm.jl:15\n"
  stdout: ''
  timestamp: 1659978087
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n     \n    word_counts::Vector{Vector{Int}} = split.(split(S, \" \"), \" \"\
    ) |> count\n    \n    for w in word_counts\n        if w == \"I\"\n          \
    \  return 1\n        end\n    end\nusing Test\n\n@testset begin\n\ncandidate =\
    \ is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"Is\
    \ the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"\
    bIt\") == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will\
    \ kill It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp7tnw4gmw.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp7tnw4gmw.jl:1\n\
    in expression starting at /tmp/tmp7tnw4gmw.jl:1\n"
  stdout: ''
  timestamp: 1659978087
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    \n# Complete the bored? function below.\nusing Test\n\n@testset begin\n\
    \ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"\
    Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"\
    bIt\") == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will\
    \ kill It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp8jxl8hwa.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp8jxl8hwa.jl:1\n\
    in expression starting at /tmp/tmp8jxl8hwa.jl:1\n"
  stdout: ''
  timestamp: 1659978088
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    word_boredom=0\n    \n    for w in words:\n        word_boredom+=1 if\
    \ w==\"I\" else 0\nusing Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"\
    Hello world\") == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"\
    I love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpg9n5gc9m.jl:16\nin expression starting at\
    \ /tmp/tmpg9n5gc9m.jl:16\n"
  stdout: ''
  timestamp: 1659978088
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n     \n    # Your code here\n    \n    return sum(map(is_bored(S), S.split('.'))\
    \ & map(is_bored(S), S.split('?')) & map(is_bored(S), S.split('!')))\nend\n</cell>\n\
    <text>\nWrite a function that takes a string and counts the number of \"I\" words.\n\
    using Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello\
    \ world\") == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"\
    I love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqor5zbzo.jl:18\nin expression starting at\
    \ /tmp/tmpqor5zbzo.jl:18\n"
  stdout: ''
  timestamp: 1659978088
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    S = S.strip()\n    boredoms = 0\n    for s in S:\n        if s == \"I\"\
    :\n            boredoms += 1\n    return boredoms\nusing Test\n\n@testset begin\n\
    \ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"\
    Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"\
    bIt\") == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will\
    \ kill It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyh8j_401.jl:16\nin expression starting at\
    \ /tmp/tmpyh8j_401.jl:16\n"
  stdout: ''
  timestamp: 1659978089
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    S = tolower(S)\n    S = replace(S, \" \", \"\");\n    S = replace(S, \"\
    \ \", \"\");\n    S = replace(S, \".\", \"\");\n    S = replace(S, \",\", \"\"\
    );\n    S = replace(S, \"!\", \"\");\n    S = replace(S, \"?\", \"\");\n    S\
    \ = replace(S, \"I\", \"\");\n    S = tolower(S);\n    S = replace(S, \"boredom\"\
    , \"\");\n    S = replace(S, \"bored\", \"\");\n    S = replace(S, \"bore\", \"\
    \");\n    S = replace(S, \"bred\", \"\");\n    S = replace(S, \"b\", \"\");\n\
    \    S = replace(S, \"ored\", \"\");\n    S = replace(S, \"o\", \"\");\n    S\
    \ = replace(S, \"red\", \"\");\n    S = replace(S, \"red\", \"\");\n    S = replace(S,\
    \ \"d\", \"\");\n    S = replace(S, \"ing\", \"\");\n    S = replace(S, \"ing\"\
    , \"\");\n    S = replace(S, \"e\", \"\");\n    S = replace(S, \"e\", \"\");\n\
    \    S = replace(S, \"a\", \"\");\n    S = replace(S, \"the\", \"\");\n    S =\
    \ replace(S, \"the\", \"\");\n    S = replace(S, \"a\", \"\");\n    S = replace(S,\
    \ \"an\", \"\");\n    S = replace(S, \"a\", \"\");\n    S = replace(S, \"and\"\
    , \"\");\n    S = replace(S, \"&\", \"\");\n    S = replace(S, \"-\", \"\");\n\
    \    S = replace(S, \"-\", \"\");\n    S = replace(S, \"-\", \"\");\n    S = replace(S,\
    \ \"-\", \"\");\n    S = replace(S, \"-\", \"\");\n    S = replace(S, \"-\", \"\
    \");\n    S = replace(S, \"-\", \"\");\n    S = replace(S, \"-\", \"\");\n   \
    \ S = replace(S, \"-\", \"\");\n    S = replace(S, \"-\", \"\");\n    S = replace(S,\
    \ \"-\", \"\");\n    S = replace(S, \"-\", \"\");\n    S = replace(S, \"-\", \"\
    \");\n    S = replace(S, \"-\", \"\");\n    S = replace(S, \"-\", \"\");\n   \
    \ S = replace(S, \"-\", \"\");\n    S = replace(S, \"-\", \"\");\n    S = replace(S,\
    \ \"-\", \"\");\n    S = replace(S, \"-\", \"\");\n    S = replace(S, \"-\", \"\
    \");\n    S = replace(S, \"-\", \"\");\n    S = replace(S, \"-\", \"\");\n   \
    \ S = replace(S, \"-\", \"\");\n    S = replace(S, \"-\", \"\");\n    S = replace(S,\
    \ \"-\", \"\");\n    S = replace(S, \"-\", \"\");\n    \nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t\
    @test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\"\
    ) == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2)\n\t@test(candidate(\"You and I are\
    \ going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp6fh75r6f.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp6fh75r6f.jl:1\n\
    in expression starting at /tmp/tmp6fh75r6f.jl:1\n"
  stdout: ''
  timestamp: 1659978089
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    # Write your code here\n    return sum(isbored(x) for x \u2208 split(S))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"\
    Hello world\") == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"\
    I love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 6 errored,
    0 broken.

    in expression starting at /tmp/tmpf1wibx18.jl:18

    '
  stdout: "test set: Error During Test at /tmp/tmpf1wibx18.jl:21\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world\") == 0\n  UndefVarError: isbored not defined\n\
    \  Stacktrace:\n    [1] (::var\"#1#2\")(x::SubString{String})\n      @ Main ./none:0\n\
    \    [2] MappingRF\n      @ ./reduce.jl:95 [inlined]\n    [3] _foldl_impl(op::Base.MappingRF{var\"\
    #1#2\", Base.BottomRF{typeof(Base.add_sum)}}, init::Base._InitialValue, itr::Vector{SubString{String}})\n\
    \      @ Base ./reduce.jl:58\n    [4] foldl_impl\n      @ ./reduce.jl:48 [inlined]\n\
    \    [5] mapfoldl_impl\n      @ ./reduce.jl:44 [inlined]\n    [6] #mapfoldl#244\n\
    \      @ ./reduce.jl:162 [inlined]\n    [7] mapfoldl\n      @ ./reduce.jl:162\
    \ [inlined]\n    [8] #mapreduce#248\n      @ ./reduce.jl:289 [inlined]\n    [9]\
    \ mapreduce\n      @ ./reduce.jl:289 [inlined]\n   [10] #sum#251\n      @ ./reduce.jl:503\
    \ [inlined]\n   [11] sum\n      @ ./reduce.jl:503 [inlined]\n   [12] #sum#252\n\
    \      @ ./reduce.jl:532 [inlined]\n   [13] sum\n      @ ./reduce.jl:532 [inlined]\n\
    \   [14] is_bored(S::String)\n      @ Main /tmp/tmpf1wibx18.jl:14\n   [15] macro\
    \ expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [16] macro expansion\n      @ /tmp/tmpf1wibx18.jl:21 [inlined]\n\
    \   [17] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [18] top-level scope\n      @ /tmp/tmpf1wibx18.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpf1wibx18.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(\"Is the sky blue?\") == 0\n  UndefVarError: isbored not defined\n\
    \  Stacktrace:\n    [1] (::var\"#1#2\")(x::SubString{String})\n      @ Main ./none:0\n\
    \    [2] MappingRF\n      @ ./reduce.jl:95 [inlined]\n    [3] _foldl_impl(op::Base.MappingRF{var\"\
    #1#2\", Base.BottomRF{typeof(Base.add_sum)}}, init::Base._InitialValue, itr::Vector{SubString{String}})\n\
    \      @ Base ./reduce.jl:58\n    [4] foldl_impl\n      @ ./reduce.jl:48 [inlined]\n\
    \    [5] mapfoldl_impl\n      @ ./reduce.jl:44 [inlined]\n    [6] #mapfoldl#244\n\
    \      @ ./reduce.jl:162 [inlined]\n    [7] mapfoldl\n      @ ./reduc"
  timestamp: 1659978091
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n\"\"\"\n    You'll be given a string of words, and your task is to count the\
    \ number\n    of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nusing Test\n\n\
    @testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") ==\
    \ 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love\
    \ It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel\
    \ good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp95t427f9.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp95t427f9.jl:1\n\
    in expression starting at /tmp/tmp95t427f9.jl:1\n"
  stdout: ''
  timestamp: 1659978086
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \nis_bored(S) when is_string(S) \n    = count(S,boredom)\n    is_bored(S)  ==\
    \ 0  \nend\nusing Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"\
    Hello world\") == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"\
    I love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"function\" at /tmp/tmp13aehjsm.jl:12 expected\
    \ \"end\", got \"when\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp13aehjsm.jl:13\n\
    in expression starting at /tmp/tmp13aehjsm.jl:13\n"
  stdout: ''
  timestamp: 1659978089
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    if is_bored(S,0)==true\n        return true\n    end\n    return is_bored(S,1)\
    \ # we found a '.' or '?' or '!' \nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"\
    Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"\
    bIt\") == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will\
    \ kill It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 6 errored,
    0 broken.

    in expression starting at /tmp/tmpf4gchuv_.jl:20

    '
  stdout: "test set: Error During Test at /tmp/tmpf4gchuv_.jl:23\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world\") == 0\n  MethodError: no method matching\
    \ is_bored(::String, ::Int64)\n  Closest candidates are:\n    is_bored(::String)\
    \ at /tmp/tmpf4gchuv_.jl:12\n  Stacktrace:\n   [1] is_bored(S::String)\n     @\
    \ Main /tmp/tmpf4gchuv_.jl:13\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpf4gchuv_.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpf4gchuv_.jl:22\ntest set:\
    \ Error During Test at /tmp/tmpf4gchuv_.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(\"Is the sky blue?\") == 0\n  MethodError: no method matching is_bored(::String,\
    \ ::Int64)\n  Closest candidates are:\n    is_bored(::String) at /tmp/tmpf4gchuv_.jl:12\n\
    \  Stacktrace:\n   [1] is_bored(S::String)\n     @ Main /tmp/tmpf4gchuv_.jl:13\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpf4gchuv_.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpf4gchuv_.jl:22\ntest set:\
    \ Error During Test at /tmp/tmpf4gchuv_.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(\"I love It !\") == 1\n  MethodError: no method matching is_bored(::String,\
    \ ::Int64)\n  Closest candidates are:\n    is_bored(::String) at /tmp/tmpf4gchuv_.jl:12\n\
    \  Stacktrace:\n   [1] is_bored(S::String)\n     @ Main /tmp/tmpf4gchuv_.jl:13\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpf4gchuv_.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpf4gchuv_.jl:22\ntest set:\
    \ Error During Test at /tmp/tmpf4g"
  timestamp: 1659978092
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    count=0\n    count_boredom(S, count, 0)\n    return count\n    \nend\n\
    </cell>\n<code language=julia-0.4>\nis_bored(S)\n</cell>\n<text>\nExercise: Write\
    \ a recursive function to count the number of boredoms in a sentence by calling\
    \ is_bored on the first two words in the sentence. You may need to use ! to get\
    \ the last word in the sentence.\nusing Test\n\n@testset begin\n\ncandidate =\
    \ is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"Is\
    \ the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"\
    bIt\") == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will\
    \ kill It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmputmc5kbp.jl:18\nin expression starting at\
    \ /tmp/tmputmc5kbp.jl:18\n"
  stdout: ''
  timestamp: 1659978089
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    return count((starts(S, \"I\")), (S, \".\", \"?\", \"!\"))\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\"\
    ) == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I\
    \ love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 6 errored,
    0 broken.

    in expression starting at /tmp/tmpl0wd8xel.jl:17

    '
  stdout: "test set: Error During Test at /tmp/tmpl0wd8xel.jl:20\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world\") == 0\n  UndefVarError: starts not defined\n\
    \  Stacktrace:\n   [1] is_bored(S::String)\n     @ Main /tmp/tmpl0wd8xel.jl:13\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpl0wd8xel.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpl0wd8xel.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpl0wd8xel.jl:21\n  Test threw exception\n  Expression:\
    \ candidate(\"Is the sky blue?\") == 0\n  UndefVarError: starts not defined\n\
    \  Stacktrace:\n   [1] is_bored(S::String)\n     @ Main /tmp/tmpl0wd8xel.jl:13\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpl0wd8xel.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpl0wd8xel.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpl0wd8xel.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(\"I love It !\") == 1\n  UndefVarError: starts not defined\n  Stacktrace:\n\
    \   [1] is_bored(S::String)\n     @ Main /tmp/tmpl0wd8xel.jl:13\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpl0wd8xel.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpl0wd8xel.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpl0wd8xel.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(\"bIt\") == 0\n  UndefVarError: starts not defined\n  Stacktrace:\n\
    \   [1] is_bored(S::String)\n     @ Main /tmp/tmpl0wd8xel.jl:13\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro"
  timestamp: 1659978091
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n\"\"\"\n    A boredom is a sentence that starts with the word \"I\".\n   \
    \ Sentences are delimited by '.', '?' or '!'.\n    \"\"\"\n    if is_bored = 0\n\
    \    if S[0] != (\"I\")\n        is_bored = 1\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t\
    @test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\"\
    ) == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2)\n\t@test(candidate(\"You and I are\
    \ going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"=\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp5xv48hu_.jl:17\nin expression starting at /tmp/tmp5xv48hu_.jl:17\n"
  stdout: ''
  timestamp: 1659978089
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    S.each_index {|i| if S[i]=='I'} \nend\n</cell>\n<code language=julia-1.5>\n\
    # Test your code\n@test is_bored(\"Hello world\") == 0\n@test is_bored(\"The sky\
    \ is blue.\") == 1\n@test is_bored(\"The sun is shining\") == 1\n@test is_bored(\"\
    I love this weather.\") == 2\n</cell>\n<text>\nWrite a function to compute statistics\
    \ from an input string. Your function should return a tuple containing an ordered\
    \ list of word counts, the number of non-alphanumeric characters, and the number\
    \ of words that start with an uppercase letter.\nusing Test\n\n@testset begin\n\
    \ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"\
    Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"\
    bIt\") == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will\
    \ kill It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: space before \"{\" not allowed in \"S.each_index\
    \ {\" at /tmp/tmp3s20nflg.jl:13\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp3s20nflg.jl:13\n\
    in expression starting at /tmp/tmp3s20nflg.jl:13\n"
  stdout: ''
  timestamp: 1659978089
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    \n    boredoms = [\"I\",\"you\",\"he\"]\n    count = 0\n    for word in\
    \ split(S,\".\")\n        if boredoms.contains(word)\n            count += 1\n\
    \    return count\nend\n</cell>\n<cell>\n# Test your function\ntest(is_bored)\n\
    </cell>\n<text>\nFinally, write a bored_count function that takes in a DataFrame\
    \ column name and a DataFrame, and returns that DataFrame's column name and the\
    \ number of boredoms that word appears in. For example, if the column is \"weather\"\
    , the function should return a tuple of (\"weather\", 2).\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t\
    @test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\"\
    ) == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2)\n\t@test(candidate(\"You and I are\
    \ going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpy_ekrkg4.jl:21\nin expression starting at\
    \ /tmp/tmpy_ekrkg4.jl:21\n"
  stdout: ''
  timestamp: 1659978089
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n</code>\nThe next step is to write a function that determines if a given sentence\
    \ contains a boredom or not. This will use your is_bored function:\n<code>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\"\
    ) == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I\
    \ love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpm2y4w6ug.jl:13\nin expression starting at\
    \ /tmp/tmpm2y4w6ug.jl:13\n"
  stdout: ''
  timestamp: 1659978089
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n\"\"\"\n\"\"\"\n### Part B: Boredoms ###\n\"\"\"\nusing Test\n\n@testset begin\n\
    \ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"\
    Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"\
    bIt\") == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will\
    \ kill It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnyizqiju.jl:1\nin expression starting at /tmp/tmpnyizqiju.jl:1\n"
  stdout: ''
  timestamp: 1659978089
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n\"\"\"\n    Your code should implement the solution outlined in the book.\
    \ It\n    should return a count. Note that your boredoms are only defined up to\
    \ a\n    certain length of text. Make sure your solution works for longer boredoms.\n\
    \    \n    You may assume the string contains no leading or trailing spaces.\n\
    \    You may assume that the text starts with the word \"I\".\n    Sentences are\
    \ delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello\
    \ world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n    1\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"\
    Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"\
    bIt\") == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will\
    \ kill It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpn9ybe_go.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpn9ybe_go.jl:1\n\
    in expression starting at /tmp/tmpn9ybe_go.jl:1\n"
  stdout: ''
  timestamp: 1659978089
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n</code>\nNext, you'll write a function that returns a list of boredoms,\n\
    \    given a string. You can assume that the string is valid and has at\n    least\
    \ one boredom.\nFor example:\n<code>\nboredoms(\"The sky is blue. The sun is shining.\
    \ I love this weather.\")\n</code>\nreturns:\n<code>\n[\"The sun is shining\"\
    ]\n</code>\nHINT: The boredoms function should return a list of Strings.\n\"\"\
    \"\nusing Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"\
    Hello world\") == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"\
    I love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9vv_k449.jl:13\nin expression starting at\
    \ /tmp/tmp9vv_k449.jl:13\n"
  stdout: ''
  timestamp: 1659978089
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    if is_bored(S,1,1)\n        0\n    else \n        is_bored(S,1,0)\n  \
    \  end \nend \nusing Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"\
    Hello world\") == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"\
    I love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 6 errored,
    0 broken.

    in expression starting at /tmp/tmpm1az710m.jl:21

    '
  stdout: "test set: Error During Test at /tmp/tmpm1az710m.jl:24\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world\") == 0\n  MethodError: no method matching\
    \ is_bored(::String, ::Int64, ::Int64)\n  Closest candidates are:\n    is_bored(::String)\
    \ at /tmp/tmpm1az710m.jl:12\n  Stacktrace:\n   [1] is_bored(S::String)\n     @\
    \ Main /tmp/tmpm1az710m.jl:13\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpm1az710m.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpm1az710m.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpm1az710m.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(\"Is the sky blue?\") == 0\n  MethodError: no method matching is_bored(::String,\
    \ ::Int64, ::Int64)\n  Closest candidates are:\n    is_bored(::String) at /tmp/tmpm1az710m.jl:12\n\
    \  Stacktrace:\n   [1] is_bored(S::String)\n     @ Main /tmp/tmpm1az710m.jl:13\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpm1az710m.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpm1az710m.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpm1az710m.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(\"I love It !\") == 1\n  MethodError: no method matching is_bored(::String,\
    \ ::Int64, ::Int64)\n  Closest candidates are:\n    is_bored(::String) at /tmp/tmpm1az710m.jl:12\n\
    \  Stacktrace:\n   [1] is_bored(S::String)\n     @ Main /tmp/tmpm1az710m.jl:13\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpm1az710m.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpm1az710m.jl:23\ntest set:\
    \ Error"
  timestamp: 1659978092
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    if is_bored(S, 1)==1 then 1 else 0 end\nend\n</cell>\n<code language=julia-1.5>\n\
    is_bored(boredoms) # test your code!\n</cell>\n<text>\nLet's also ask the same\
    \ question using our is_bored function.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"\
    Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"\
    bIt\") == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will\
    \ kill It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"1\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpwo333dyi.jl:13\nin expression starting at /tmp/tmpwo333dyi.jl:13\n"
  stdout: ''
  timestamp: 1659978089
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    \n    if S==\".\" return 0\n    if S==\"!\" return 0\n    if S==\"?\"\
    \ return 0\n    if S[0]==\"I\" then return 1\n    else return 0\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\")\
    \ == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I\
    \ love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpmwz97dhp.jl:17\nin expression starting at /tmp/tmpmwz97dhp.jl:17\n"
  stdout: ''
  timestamp: 1659978089
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    if is_bored(S.[0..end-1]) == true && S[1] == 'I' \n        then return\
    \ 1 else return 0\nend\n</code>\nThis is our first function. The second function\
    \ is our recursive function\n<code>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"\
    Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"\
    bIt\") == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will\
    \ kill It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"end\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpmkm23x37.jl:13\nin expression starting at /tmp/tmpmkm23x37.jl:13\n"
  stdout: ''
  timestamp: 1659978089
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    if is_bored(S, 0, 0) != 1\n        fail(\"Not bored\")\n    end\nusing\
    \ Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\"\
    ) == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I\
    \ love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxo1mdnm5.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxo1mdnm5.jl:1\n\
    in expression starting at /tmp/tmpxo1mdnm5.jl:1\n"
  stdout: ''
  timestamp: 1659978089
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    S .startsWith ('i') :: Int64\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"\
    Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"\
    bIt\") == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will\
    \ kill It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: space before \".\" not allowed in \"S .\" at\
    \ /tmp/tmp034zjlbe.jl:13\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp034zjlbe.jl:13\n\
    in expression starting at /tmp/tmp034zjlbe.jl:13\n"
  stdout: ''
  timestamp: 1659978089
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    \n    return sum([S[i]==\"I\" for i in 1:length(S)]==1)\nend\n</cell>\n\
    <code language=julia-1.0>\nis_bored(\"Hello world\")\n</cell>\n<code language=julia-1.0>\n\
    is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n</cell>\n\
    <code language=julia-1.0>\n# %load count_boredoms.jl\n\"\"\"\nYou'll be given\
    \ a list of words, and the task is to count the number\nof boredoms.\n\"\"\"\n\
    using Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello\
    \ world\") == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"\
    I love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmyi6x1_k.jl:16\nin expression starting at\
    \ /tmp/tmpmyi6x1_k.jl:16\n"
  stdout: ''
  timestamp: 1659978089
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n\"\"\"\n    You'll be given a string of words, and your task is to count the\
    \ number\n    of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nusing Test\n\n\
    @testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") ==\
    \ 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love\
    \ It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel\
    \ good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp95t427f9.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp95t427f9.jl:1\n\
    in expression starting at /tmp/tmp95t427f9.jl:1\n"
  stdout: ''
  timestamp: 1659978086
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    \n    \"\"\"\n    Complete the function body to define is_bored. \n  \
    \  \"\"\"\n    \n    I=0\n    for w in S.split(\" \"):\n        \n    \"\"\"\n\
    \    Here are some helpful hints. \n    \"\"\"\nusing Test\n\n@testset begin\n\
    \ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"\
    Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"\
    bIt\") == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will\
    \ kill It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnyfkdu1l.jl:20\nin expression starting at\
    \ /tmp/tmpnyfkdu1l.jl:20\n"
  stdout: ''
  timestamp: 1659978090
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    if is_bored(S) == 0 \n        return 1 \n    end\n    if is_bored(S) ==\
    \ 1 \n        return 0 \n    end\n    if is_bored(S) == 2 \n        return 1 \n\
    \    end\n    return 2 \nend\n    \"\"\"\n</cell>\n<text>\nExercise 10: Counting\
    \ the number of boredoms in a string\nIn the previous exercises, we used the word\
    \ \"boredom\" to denote an event that occurs as a result of natural language.\n\
    using Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello\
    \ world\") == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"\
    I love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3c_1gg5l.jl:24\nin expression starting at\
    \ /tmp/tmp3c_1gg5l.jl:24\n"
  stdout: ''
  timestamp: 1659978089
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    \"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nusing Test\n\n\
    @testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") ==\
    \ 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love\
    \ It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel\
    \ good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpbiibg08y.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpbiibg08y.jl:1\n\
    in expression starting at /tmp/tmpbiibg08y.jl:1\n"
  stdout: ''
  timestamp: 1659978084
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n  S = S.trim()\n  len = length(S)\n  \n  boredoms = 0\n  for w in split(S,\
    \ '.', '?'):\n    if w == \"I\" # if w starts with \"I\"\n      boredoms += 1\n\
    \      \n  return boredoms\n\"\"\"\n    \nThe functions split() and length() have\
    \ been imported from module Strings.\nThey will raise an error if called outside\
    \ of a function definition.\n\"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"\
    Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"\
    bIt\") == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will\
    \ kill It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpg_wjno_r.jl:18\nin expression starting at\
    \ /tmp/tmpg_wjno_r.jl:18\n"
  stdout: ''
  timestamp: 1659978091
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n\"\"\"\n    You'll be given a string of words, and your task is to count the\
    \ number\n    of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\n</code>\n<|/\
    \ a tags=julia,string-matching dscore=1 |>\n<| a tags=julia,string-matching dscore=1\
    \ |>\nA solution that uses a regular expression, i.e. not using startswith(),\
    \ that can use lazy matching, i.e. match as many characters as possible in the\
    \ beginning of the string:\n<code>\njulia> boredoms = Regex(r\"^I.*\")\njulia>\
    \ boredoms.match(\"I love this weather\")\nMatch 0\nusing Test\n\n@testset begin\n\
    \ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"\
    Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"\
    bIt\") == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will\
    \ kill It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpz45iz6xr.jl:24\nin expression starting at\
    \ /tmp/tmpz45iz6xr.jl:24\n"
  stdout: ''
  timestamp: 1659978091
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    count = 0\n    word = S.split('.')\n    for wd in word:\n        if wd[0]\
    \ == \"I\":\n            count += 1\n    return count\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t\
    @test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\"\
    ) == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2)\n\t@test(candidate(\"You and I are\
    \ going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5j40hjit.jl:16\nin expression starting at\
    \ /tmp/tmp5j40hjit.jl:16\n"
  stdout: ''
  timestamp: 1659978091
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n\"\"\"\n    You'll be given a string of words, and your task is to count the\
    \ number\n    of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\n# YOUR CODE HERE\n\
    \    return S.find('I')\nusing Test\n\n@testset begin\n\ncandidate = is_bored;\n\
    \t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"Is the sky blue?\"\
    ) == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"bIt\")\
    \ == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will kill\
    \ It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp8n3lgqe2.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp8n3lgqe2.jl:1\n\
    in expression starting at /tmp/tmp8n3lgqe2.jl:1\n"
  stdout: ''
  timestamp: 1659978091
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    if !isequal(S,strcat(S,\".\"))\n        if !isequal(S,strcat(S,\".?\"\
    ))\n            if !isequal(S,strcat(S,\".!\"))\n                return 0\n  \
    \          end\n        end\n    end\n    return 1\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t\
    @test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\"\
    ) == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2)\n\t@test(candidate(\"You and I are\
    \ going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 6 errored,
    0 broken.

    in expression starting at /tmp/tmpf33s26c1.jl:24

    '
  stdout: "test set: Error During Test at /tmp/tmpf33s26c1.jl:27\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world\") == 0\n  UndefVarError: strcat not defined\n\
    \  Stacktrace:\n   [1] is_bored(S::String)\n     @ Main /tmp/tmpf33s26c1.jl:13\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpf33s26c1.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpf33s26c1.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpf33s26c1.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"Is the sky blue?\") == 0\n  UndefVarError: strcat not defined\n\
    \  Stacktrace:\n   [1] is_bored(S::String)\n     @ Main /tmp/tmpf33s26c1.jl:13\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpf33s26c1.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpf33s26c1.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpf33s26c1.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"I love It !\") == 1\n  UndefVarError: strcat not defined\n  Stacktrace:\n\
    \   [1] is_bored(S::String)\n     @ Main /tmp/tmpf33s26c1.jl:13\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpf33s26c1.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpf33s26c1.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpf33s26c1.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(\"bIt\") == 0\n  UndefVarError: strcat not defined\n  Stacktrace:\n\
    \   [1] is_bored(S::String)\n     @ Main /tmp/tmpf33s26c1.jl:13\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro"
  timestamp: 1659978093
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    S = S(\"\")\n    if S.starts_with(\"I\") \n        bored = 0\n       \
    \ for word in S.split(\" \") \n            if word == \"I\" \n               \
    \ bored += 1 \n    return bored \nend\n</cell>\n<code language=julia-1.0>\n# Run\
    \ this cell to check your is_bored function above. \n# Note that \"Hello world\"\
    \ and \"The sun is shining\" count as boredom!\n# Because the second one starts\
    \ with a '!'.\nis_bored(\"Hello world\")\nis_bored(\"The sun is shining\") \n\
    </cell>\n<text>\nPart Two\nNow that you have defined a function to tell us whether\
    \ a sentence is bored or not,\nyou'll write a second function that takes in a\
    \ boredom sentence\nand returns the sentence with 'I's replaced by 'was'!\nYou\
    \ can see examples of what your function should return in the tests below:\nusing\
    \ Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\"\
    ) == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I\
    \ love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppys3f_aw.jl:21\nin expression starting at\
    \ /tmp/tmppys3f_aw.jl:21\n"
  stdout: ''
  timestamp: 1659978091
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    \"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nusing Test\n\n\
    @testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") ==\
    \ 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love\
    \ It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel\
    \ good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpbiibg08y.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpbiibg08y.jl:1\n\
    in expression starting at /tmp/tmpbiibg08y.jl:1\n"
  stdout: ''
  timestamp: 1659978084
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n     \n    if S == \"I\" || S == \"i\" || S == \"bored\"\n        return 1\n\
    \    else\n        return 0\nend\n</cell>\n<text>\nExercise 3\nusing Test\n\n\
    @testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") ==\
    \ 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love\
    \ It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel\
    \ good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfbc859xq.jl:19\nin expression starting at\
    \ /tmp/tmpfbc859xq.jl:19\n"
  stdout: ''
  timestamp: 1659978091
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    if is_bored(S, 0)==0\n        return 0 \n    else \n        if is_bored(S[1:],\
    \ 1)\n            return 1 + is_bored(S[1:], 0)\n        else\n            return\
    \ is_bored(S[1:], 0)\nend\nusing Test\n\n@testset begin\n\ncandidate = is_bored;\n\
    \t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"Is the sky blue?\"\
    ) == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"bIt\")\
    \ == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will kill\
    \ It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"1:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp0cp61lsd.jl:16\nin expression\
    \ starting at /tmp/tmp0cp61lsd.jl:16\n"
  stdout: ''
  timestamp: 1659978091
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    if is_bored(S) != None\n    else return None\nend\n</cell>\n<code language=julia-1.6>\n\
    using Test\n</cell>\n<code language=julia-1.6>\n@test is_bored(\"Hello world\"\
    )==0\n@test is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )==1\n</cell>\n<code language=julia-1.6>\n@test is_bored(\"I\")==0\n@test is_bored(\"\
    I.\")==0\n@test is_bored(\"I?\")==0\n@test is_bored(\"!\")==0\n@test is_bored(\"\
    !\")==0\n@test is_bored(\"!\")==0\n@test is_bored(\"!\")==0\n@test is_bored(\"\
    !\")==0\n@test is_bored(\"!\")==0\n@test is_bored(\"!\")==0\n@test is_bored(\"\
    ! !\")==0\n@test is_bored(\"! ! !\")==0\n@test is_bored(\"! ! ! ! ! ! ! !\")==0\n\
    @test is_bored(\"! ! ! ! ! ! ! ! ! ! ! ! !\")==0\n@test is_bored(\"! ! ! ! ! !\
    \ ! ! ! ! ! ! ! ! ! ! !\")==0\n@test is_bored(\"! ! ! ! ! ! ! ! ! ! ! ! ! ! !\
    \ ! ! ! ! !\")==0\n@test is_bored(\"! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! !\
    \ ! ! ! ! ! ! ! ! ! ! ! !\")==0\n@test is_bored(\"! ! ! ! ! ! ! ! ! ! ! ! ! !\
    \ ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! !\")==0\n@test\
    \ is_bored(\"! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! !\
    \ ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! !\")==0\n@test is_bored(\"\
    ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! \nusing\
    \ Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\"\
    ) == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I\
    \ love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpb5tcyscz.jl:16\nin expression starting at\
    \ /tmp/tmpb5tcyscz.jl:16\n"
  stdout: ''
  timestamp: 1659978091
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n\"\"\"\n    You'll be given a string of words, and your task is to count the\
    \ number\n    of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nusing Test\n\n\
    @testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") ==\
    \ 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love\
    \ It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel\
    \ good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp95t427f9.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp95t427f9.jl:1\n\
    in expression starting at /tmp/tmp95t427f9.jl:1\n"
  stdout: ''
  timestamp: 1659978086
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    # implement your solution here\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"\
    Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"\
    bIt\") == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will\
    \ kill It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpi8kdzuti.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpi8kdzuti.jl:1\n\
    in expression starting at /tmp/tmpi8kdzuti.jl:1\n"
  stdout: ''
  timestamp: 1659978091
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    \"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\n    I::Int64\
    \ = 0\n    for word in split(S,\".\")\n        if starts_with?(word,\"I\")\n \
    \           I += 1\n    return I\n</code>\n<|/ a tags=julia |>\n<| a dscore=2\
    \ tags=julia |>\nThe answer to this question is more complex than one might expect:\n\
    The solution is to use the package Word2Vec, which allows you to calculate the\
    \ vector embedding of words (i.e. embeddings in word2vec lingo). Word2Vec is capable\
    \ of calculating the word embedding of any text (corpus).\nYou can download the\
    \ Word2Vec package from github and install it from the package manager using Pkg.add(\"\
    Word2Vec\"). The following code calculates the word embeddings for text corpus\
    \ (corpus = \"The quick brown fox jumps over the lazy dog\"):\n<code>\n# download\
    \ Word2Vec package from github using Pkg.add(\"Word2Vec\")\nusing Word2Vec\nusing\
    \ Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\"\
    ) == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I\
    \ love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: space required before \"?\" operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpiipzhqac.jl:26\nin expression starting at\
    \ /tmp/tmpiipzhqac.jl:26\n"
  stdout: ''
  timestamp: 1659978091
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n\"\"\"\n\"\"\"\n    if is_bored(S,0,0) != 0 then return 0 else return 1\n\"\
    \"\"\n    if is_bored(S,0,0)== 0 then return 1 \n    else\n        if is_bored(S,1,0)==\
    \ 0 then return 1 \n        else return 0 \n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t\
    @test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\"\
    ) == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2)\n\t@test(candidate(\"You and I are\
    \ going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpqhygkp8j.jl:15\nin expression starting at /tmp/tmpqhygkp8j.jl:15\n"
  stdout: ''
  timestamp: 1659978091
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n\"\"\"\n    You'll be given a string of words, and your task is to count the\
    \ number\n    of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\n</cell>\n<code\
    \ language=julia-1.3>\nis_bored(\"Hello world\")\n</cell>\n<code language=julia-1.3>\n\
    is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n</cell>\n\
    <code language=julia-1.3>\nis_bored(\"II love this weather\")\n</cell>\n<code\
    \ language=julia-1.3>\nis_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather. III love this weather. II love this weather. \")\n</cell>\n<code\
    \ language=julia-1.3>\nis_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather. II love this weather. III love this weather. II love this weather.\
    \ II love this weather. II love this weather. II love this weather. II love this\
    \ weather. II love this weather. II love this weather. II love this weather. II\
    \ love this weather. II love this weather. II love this weather. II love this\
    \ weather. II love this weather. II love this weather. II love this weather. II\
    \ love this weather. II love this weather. II love this weather. II love this\
    \ weather. II love this weather. II love this weather. II love this weather. II\
    \ love this weather. II love this weather. II love this weather. II love this\
    \ weather. II love this weather. II love this weather. II love this weather. II\
    \ love this weather. II love this weather. II love this weather. II love this\
    \ weather. II love this weather. II love this weather. II love this weather. II\
    \ love this weather. II lo\nusing Test\n\n@testset begin\n\ncandidate = is_bored;\n\
    \t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"Is the sky blue?\"\
    ) == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"bIt\")\
    \ == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will kill\
    \ It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbp4lh0d3.jl:24\nin expression starting at\
    \ /tmp/tmpbp4lh0d3.jl:24\n"
  stdout: ''
  timestamp: 1659978091
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    \n    boredom_count = 0\n    for word in split(S){\n        if (word ==\
    \ \"I\"){\n            boredom_count = boredom_count + 1\n        }\n    }\n \
    \   return boredom_count\nend\n</cell>\n<code language=julia-1.5>\nis_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n</cell>\n<text>\n\
    Part 3\nInstructions:\nCreate a dictionary to map each word in the sentence to\
    \ its corresponding count. \nLoop through the words in the sentence and increment\
    \ the count if the word is in the dictionary (you can check this with 'in'). \n\
    Then add the word and its count to your output array.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t\
    @test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\"\
    ) == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2)\n\t@test(candidate(\"You and I are\
    \ going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"}\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp9r4v7ohk.jl:19\nin expression starting at /tmp/tmp9r4v7ohk.jl:19\n"
  stdout: ''
  timestamp: 1659978091
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    if is_bored(S) == 1 then\n        return 0\n    \n    borem_count = 0\n\
    \    \n    for word_start in S.words\n    \n        if word_start == \"I\" then\n\
    \            borem_count += 1\n        end\n    end\n    \n    return borem_count\n\
    end\n</cell>\n<code language=julia-1.5>\nis_bored(s)\n</cell>\n<text>\nExercise\
    \ 3\nUsing is_bored, implement a function that will count the number of positive\n\
    \    boredoms within a given string. Positive boredoms are sentences that start\n\
    \    with \"I\".\n   \n    For example:\n    >>> count_bored_positive(\"Hello\
    \ world\")\n    0\n    >>> count_bored_positive(\"The sky is blue. The sun is\
    \ shining. I love this weather\")\n    3\n    \"\"\"\nusing Test\n\n@testset begin\n\
    \ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"\
    Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"\
    bIt\") == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will\
    \ kill It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsymiglvb.jl:27\nin expression starting at\
    \ /tmp/tmpsymiglvb.jl:27\n"
  stdout: ''
  timestamp: 1659978091
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n  \n\"\"\"\n    You'll be given two strings, a word and a boredom. The function\
    \ will \n    determine if that word appears within a boredom, and if so, will\
    \ return \n    the count for that word. For example, \n  \n    >>> is_bored(Word(\"\
    is\"), Boredom(\".\"))\n    3\n    >>> is_bored(Word(\"a\"), Boredom(\".\"))\n\
    \    0\n    >>> is_bored(Word(\"a\"), Boredom(\"!\"))\n    1\n    \"\"\"\nusing\
    \ Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\"\
    ) == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I\
    \ love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpkvpmvrl2.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpkvpmvrl2.jl:1\n\
    in expression starting at /tmp/tmpkvpmvrl2.jl:1\n"
  stdout: ''
  timestamp: 1659978091
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    BoredomCounter = 0\n    for (i, word) in enumerate(split(S)) \n      \
    \  if word == \"I\" \n            BoredomCounter = 1 + BoredomCounter\n    end\n\
    \    return BoredomCounter\nend\n</cell>\n<code language=julia-1.5>\n# Test your\
    \ function using the tests below.\n@testset \"is_bored\" begin\n    # Some examples:\n\
    \    examples = [\n        (\"Hello world\", 0),\n        (\"The sky is blue.\
    \ The sun is shining. I love this weather\", 1),\n    ]\n    for ex in examples\n\
    \        @test is_bored(ex[1]) == ex[2]\n    end\nend\n</cell>\n<text>\nBy the\
    \ way, notice that \"I\" has a special meaning inside strings: it means \"I want\
    \ to say\nsomething\". So to test if a string starts with \"I\", you can do\n\
    using Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello\
    \ world\") == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"\
    I love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpi9poawhe.jl:20\nin expression starting at\
    \ /tmp/tmpi9poawhe.jl:20\n"
  stdout: ''
  timestamp: 1659978091
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n\"\"\"\n    Your task is to implement a function that will compute the boredom\
    \ probability\n    of a text (a sentence, for instance). You will be given a string\
    \ of words.\n    Your function will return the probability that the text is bored.\
    \ \n    The probability of a bored text is defined as the probability that the\
    \ text\n    begins with the letter 'I', and is followed by zero or more letters\
    \ that\n    are not 'I', and are followed by any number of letters that is not\
    \ 'I'\n    (including the last letter)\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"\
    Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"\
    bIt\") == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will\
    \ kill It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmph6f8jy4b.jl:1\nin expression starting at /tmp/tmph6f8jy4b.jl:1\n"
  stdout: ''
  timestamp: 1659978091
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    if is_empty(S) \n        0\n    else\n        let \n            lenght\
    \ = length(S) \n            bored = all(S[i] == 'I' || S[i] == '.' || S[i] ==\
    \ '?' || S[i] == '!' | i in 1..lenght - 1) \n        in \n            if is_empty(bored)\
    \ \n                0 \n            else \n                length(bored) - 1 \n\
    \        end\nend\n</cell>\n<cell>\n@test is_bored(\"Hello world\")==0\n@test\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")==1\n\
    </cell>\n<text>\nExercise 5: Find the number of characters in a string\nWrite\
    \ a function that counts the number of characters in a string.\nusing Test\n\n\
    @testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") ==\
    \ 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love\
    \ It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel\
    \ good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmps9jiifyf.jl:26\nin expression starting at\
    \ /tmp/tmps9jiifyf.jl:26\n"
  stdout: ''
  timestamp: 1659978091
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    if is_bored(S, 0) = 1 \n    else \n        true\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\")\
    \ == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I\
    \ love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"=\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpulgl9ryk.jl:13\nin expression starting at /tmp/tmpulgl9ryk.jl:13\n"
  stdout: ''
  timestamp: 1659978092
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    \"\"\"\n    You will write code here that checks if a string is a boredom\
    \ or not. The \n    function is_bored should take a string S and return a Int64\
    \ \n    indicating whether the input string is a boredom or not.\n    \"\"\"\n\
    using Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello\
    \ world\") == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"\
    I love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpzkpkzzt0.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpzkpkzzt0.jl:1\n\
    in expression starting at /tmp/tmpzkpkzzt0.jl:1\n"
  stdout: ''
  timestamp: 1659978093
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    if is_bored_impl(S) == 0\n        error(\"This isn't a boredness problem\"\
    )\n    end\n    return 1\nend\nis_bored!(s::String)::Int64 = is_bored(s)\nusing\
    \ Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\"\
    ) == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I\
    \ love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 6 errored,
    0 broken.

    in expression starting at /tmp/tmp6x4ritp9.jl:21

    '
  stdout: "test set: Error During Test at /tmp/tmp6x4ritp9.jl:24\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world\") == 0\n  UndefVarError: is_bored_impl\
    \ not defined\n  Stacktrace:\n   [1] is_bored(S::String)\n     @ Main /tmp/tmp6x4ritp9.jl:13\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp6x4ritp9.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp6x4ritp9.jl:23\ntest set:\
    \ Error During Test at /tmp/tmp6x4ritp9.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(\"Is the sky blue?\") == 0\n  UndefVarError: is_bored_impl not defined\n\
    \  Stacktrace:\n   [1] is_bored(S::String)\n     @ Main /tmp/tmp6x4ritp9.jl:13\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp6x4ritp9.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp6x4ritp9.jl:23\ntest set:\
    \ Error During Test at /tmp/tmp6x4ritp9.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(\"I love It !\") == 1\n  UndefVarError: is_bored_impl not defined\n\
    \  Stacktrace:\n   [1] is_bored(S::String)\n     @ Main /tmp/tmp6x4ritp9.jl:13\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp6x4ritp9.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp6x4ritp9.jl:23\ntest set:\
    \ Error During Test at /tmp/tmp6x4ritp9.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"bIt\") == 0\n  UndefVarError: is_bored_impl not defined\n  Stacktrace:\n\
    \   [1] is_bored(S::String)\n     @ Main /tmp/tmp6x4ritp9.jl:13\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.j"
  timestamp: 1659978095
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    \nend\n</cell>\n<code language=julia-0.6>\n# Run this cell to test your\
    \ code\n\"\"\"\nDON'T MODIFY ANYTHING IN THIS CELL THAT IS BELOW THIS LINE\n\"\
    \"\"\n# test # 1: works\nassert is_bored(\"Hello world\") == 0, \"1st Example\"\
    \n# test # 2: works\nassert is_bored(\"The sky is blue.\") == 1, \"2nd Example\"\
    \n# test # 3: doesn't work\nassert is_bored(\"The sun is shining. I love this\
    \ weather.\") == 0, \"3rd Example\"\n</cell>\n<code language=julia-0.6>\n# Lines\
    \ 12-15 initialize parameters\n# Lines 17-20 initialize variables\n# Lines 21-22\
    \ create a bored sentence\n# Lines 23-26 increment bored count\n# Lines 27-29\
    \ return the bored count\n</cell>\n<text>\nNow we are ready to get started with\
    \ programming challenges!\nusing Test\n\n@testset begin\n\ncandidate = is_bored;\n\
    \t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"Is the sky blue?\"\
    ) == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"bIt\")\
    \ == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will kill\
    \ It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwi8so6zb.jl:15\nin expression starting at\
    \ /tmp/tmpwi8so6zb.jl:15\n"
  stdout: ''
  timestamp: 1659978093
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n\"\"\"\n    You'll be given a string of words, and your task is to count the\
    \ number\n    of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nusing Test\n\n\
    @testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") ==\
    \ 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love\
    \ It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel\
    \ good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp95t427f9.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp95t427f9.jl:1\n\
    in expression starting at /tmp/tmp95t427f9.jl:1\n"
  stdout: ''
  timestamp: 1659978086
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    length(split(S, \" \")) > 0 \n    && all(elem == \"I\" || elem == \".\"\
    \ || elem == \"?\" || elem == \"!\" for elem in split(S, \" \"))\nend\n</code>\n\
    <|/ a tags=count,string,julia,arrays |>\n<| c |>\nThe `String` should be `String`\
    \ but otherwise this is correct. Just FYI, there are other ways of doing this,\
    \ the `count` method in the answer, or the `find` method suggested by\n<|/ c |>\n\
    <| c |>\nthanks. I have edited my answer. Now the code should be correct.\n<|/\
    \ c |>\n<| a tags=count,string,julia,arrays dscore=3 |>\nThe simplest way is to\
    \ use the count function with anonymous functions like so:\n<code>\njulia> count(word\
    \ -> word == \"I\" || word == \".\" || word == \"?\" || word == \"!\", string.split(s))\n\
    1\n</code>\n<|/ a |>\n<| c |>\nI think this is most idiomatic for Julia\n<|/ c\
    \ |>\n<| a tags=count,string,julia,arrays |>\nThis answer can be simplified if\
    \ you have an array of strings and want to count words with specific characters\
    \ in them:\n<code>\njulia> s = \"The sky is blue. The sun is shining. I love this\
    \ weather.\"\n\"The sky is blue. The sun is shining. I love this weather.\"\n\
    using Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello\
    \ world\") == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"\
    I love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid identifier name \"&&\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpag3viuyh.jl:14\nin expression starting at\
    \ /tmp/tmpag3viuyh.jl:14\n"
  stdout: ''
  timestamp: 1659978093
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    split1 = split(S,\".\")\n    \n    for word in split1 \n        if startswith(word,\"\
    I\") \n            return 1\n    end\n    return 0\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t\
    @test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\"\
    ) == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2)\n\t@test(candidate(\"You and I are\
    \ going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpa9_exly7.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpa9_exly7.jl:1\n\
    in expression starting at /tmp/tmpa9_exly7.jl:1\n"
  stdout: ''
  timestamp: 1659978093
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    if S has length 0 \n        return 0 \n    else \n        if S[1] == \"\
    i\" \n            return 1 \n        else\n            for char in \"!.?\" \n\
    \                let count = get_boredom_count(S, char)\n                if count\
    \ > 0 \n                    return count\n                end\n            end\n\
    \        end\n    end\nend\n</cell>\n<cell>\n# Test your function\n@test is_bored(\"\
    Hello world\") == 0\n@test is_bored(\"The sky is blue.\") == 1\n@test is_bored(\"\
    The sky is blue. Hello world\") == 1\n@test is_bored(\"The sun is shining\") ==\
    \ 0\n@test is_bored(\"The sun is shining! Hello world\") == 0\n@test is_bored(\"\
    I\") == 0\n@test is_bored(\"He is good\") == 0\n</cell>\n<text>\nQuestion 3: Write\
    \ a function that counts the number of times the letter 'w' occurs in a given\
    \ string.\nusing Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"\
    Hello world\") == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"\
    I love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"length\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpwajajxkq.jl:13\nin expression starting at /tmp/tmpwajajxkq.jl:13\n"
  stdout: ''
  timestamp: 1659978093
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    S = S.replace('.','')\n    S = S.replace('?','')\n    S = S.replace('!','')\n\
    \    S = S.split(' ')\n    return sum(S.map(str==\"I\"))\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") ==\
    \ 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love\
    \ It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel\
    \ good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid empty character literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4_fk9gz4.jl:13\nin expression starting at\
    \ /tmp/tmp4_fk9gz4.jl:13\n"
  stdout: ''
  timestamp: 1659978093
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    \"\"\"\n    A boredom is a sentence that starts with the word \"I\".\n\
    \    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>>\
    \ is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun\
    \ is shining. I love this weather\")\n    1\n    \"\"\"\n</cell>\n<code language=julia-0.6>\n\
    # %load solutions/count-boredom.jl\n\"\"\"\nA boredom is a sentence that starts\
    \ with the word \"I\".\nSentences are delimited by '.', '?' or '!'.\n\"\"\"\n\
    using Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello\
    \ world\") == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"\
    I love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmporjpph9w.jl:23\nin expression starting at\
    \ /tmp/tmporjpph9w.jl:23\n"
  stdout: ''
  timestamp: 1659978093
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n\"\"\"\n is_bored(S::String)\n is_bored(S::AbstractString)::Int64\n \n Checks\
    \ whether a string is bored or not.\n\"\"\"\n    if is_bored(S) == 0\n    else\
    \ \n        if is_bored(S::AbstractString) == 0\n        else \n            if\
    \ is_bored(S::Vector{String}) == 0\n            else \n                if is_bored(S::Vector{Bool})\
    \ == 0\n                else\n                    if is_bored(S::AbstractVector)\
    \ == 0\n                    else\n                        if is_bored(S::AbstractRange)\
    \ == 0\n                        else\n                            if is_bored(S::AbstractList)\
    \ == 0\n                            else\n                                if is_bored(S::AbstractDict)\
    \ == 0\n                                else \n                              \
    \      return 0\n                                end\n                       \
    \     end\n                        end\n                    end\n            \
    \    end\n            end\n        end\n    end\nend\n</cell>\n<text>\nExercise\
    \ 2\nNow create a function that counts the number of palindromes in a string,\
    \ using is_palindrome as your test function. The string S should be passed into\
    \ the function. Make sure your function works even if your string S is an empty\
    \ string.\nusing Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"\
    Hello world\") == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"\
    I love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1_lkx0da.jl:45\nin expression starting at\
    \ /tmp/tmp1_lkx0da.jl:45\n"
  stdout: ''
  timestamp: 1659978093
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n\"\"\"\n    You'll be given a string of words, and your task is to count the\
    \ number\n    of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nusing Test\n\n\
    @testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") ==\
    \ 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love\
    \ It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel\
    \ good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp95t427f9.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp95t427f9.jl:1\n\
    in expression starting at /tmp/tmp95t427f9.jl:1\n"
  stdout: ''
  timestamp: 1659978086
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    \"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\n    count::Int64\
    \ = 0 \n    for word in split(S, \".\"):\n        if word == \"I\":\n        \
    \    count += 1\n    return count\n</cell>\n<text>\nWrite a function that splits\
    \ a string into words by splitting on whitespace.\nFor example,\nusing Test\n\n\
    @testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") ==\
    \ 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love\
    \ It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel\
    \ good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgubz14e4.jl:26\nin expression starting at\
    \ /tmp/tmpgubz14e4.jl:26\n"
  stdout: ''
  timestamp: 1659978093
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    boredoms = 0\n    for s in S.split(\". \")\n        boredoms += (boredoms_boredoms(s))\n\
    \    return boredoms\n    end\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n\
    <code>\ndef is_bored(s):\n    boredoms = 0\n    for sentence in s.split('. '):\n\
    \        boredoms += sum(1 for bored in sentence.split() if bored.startswith('i'))\n\
    \    return boredoms\n</code>\n<|/ a tags=ocaml,string,counting,count |>\n<| c\
    \ |>\nCould you please add some explanation to your code ?\n<|/ c |>\n<| a tags=ocaml,string,counting,count\
    \ |>\n<code>\n# let is_bored s = \n    if s = \"\" then 0\n    else if s.[0] <>\
    \ \"i\" then is_bored (s.[1..])\n    else 1 + is_bored (String.sub s 2 s.end);;\n\
    </code>\n<|/ a dscore=0 |>\n<| c |>\nCode-only answers are not particularly helpful.\
    \ You should explain what your code does and how it solves the problem.\n<|/ c\
    \ |>\n<| c |>\nThis answer is incomplete. Could you edit your answer to include\
    \ a description of your code ?\n<|/ c |>\n<| c |>\nThis code does not work for\
    \ sentences beginning with `i.`\n<|/ c |>\n<| c |>\nThe description is not really\
    \ necessary. Just the code should do the trick.\n<|/ c |>\n<| c |>\nI already\
    \ did, but since you didn't, this answer can be deleted.\n<|/ c |>\n<| a tags=ocaml,string,counting,count\
    \ |>\nI agree with others that code readability is important here. This solution\
    \ is pretty concise and probably quite efficient, but I'd like to suggest some\
    \ minor improvements:\n<code>\nlet is_bored s = \n    let rec loop s acc = function\n\
    \        | \"\" -> acc\n        | _ -> loop (String.sub s 2 s.end) (acc + if String.mem\
    \ \"i\" s then 1 else 0) in\n    loop s 0\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"\
    Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"\
    bIt\") == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will\
    \ kill It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpoukkf_l6.jl:18\nin expression starting at\
    \ /tmp/tmpoukkf_l6.jl:18\n"
  stdout: ''
  timestamp: 1659978093
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    if is_bored1(S)\n    else \n    if is_bored2(S)\n    else \n    if is_bored3(S)\n\
    \    else \n    if is_bored4(S)\n    else \n    if is_bored5(S)\n    else \n \
    \   if is_bored6(S)\n    else \n    if is_bored7(S)\n    else \n    if is_bored8(S)\n\
    \    else \n    if is_bored9(S)\n    else \n    if is_bored10(S)\n    else \n\
    \    if is_bored11(S)\n    else \n    if is_bored12(S)\n    else \n    if is_bored13(S)\n\
    \    else \n    if is_bored14(S)\n    else \n    if is_bored15(S)\n    else \n\
    \    if is_bored16(S)\n    else \n    if is_bored17(S)\n    else \n    if is_bored18(S)\n\
    \    else \n    if is_bored19(S)\n    else \n    if is_bored20(S)\n    else \n\
    \    if is_bored21(S)\n    else \n    if is_bored22(S)\n    else \n    if is_bored23(S)\n\
    \    else \n    if is_bored24(S)\n    else \n    if is_bored25(S)\n    else \n\
    \    if is_bored26(S)\n    else \n    if is_bored27(S)\n    else \n    if is_bored28(S)\n\
    \    else \n    if is_bored29(S)\n    else \n    if is_bored30(S)\n    else \n\
    \    if is_bored31(S)\n    else \n    if is_bored32(S)\n    else \n    if is_bored33(S)\n\
    \    else \n    if is_bored34(S)\n    else \n    if is_bored35(S)\n    else \n\
    \    if is_bored36(S)\n    else \n    if is_bored37(S)\n    else \n    if is_bored38(S)\n\
    \    else \n    if is_bored39(S)\n    else \n    if is_bored40(S)\n    else \n\
    \    if is_bored41(S)\n    else \n    if is_bored42(S)\n    else \n    if is_bored43(S)\n\
    \    else \n    if is_bored44(S)\n    else \n    if is_bored45(S)\n    else \n\
    \    if is_bored46(S)\n    else \n    if is_bored47(S)\n    else \n    if is_bored48(S)\n\
    \    else \n    if is_bored49(S)\n    else \n    if is_bored50(S)\n    else \n\
    \    if is_bored51(S)\n    else \n    if is_bored52(S)\n    else \n\nusing Test\n\
    \n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\")\
    \ == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I\
    \ love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"if\" at /tmp/tmprqoojjio.jl:115\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmprqoojjio.jl:1\n\
    in expression starting at /tmp/tmprqoojjio.jl:1\n"
  stdout: ''
  timestamp: 1659978093
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n</code>\nusing Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"\
    Hello world\") == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"\
    I love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpftmm99ct.jl:13\nin expression starting at\
    \ /tmp/tmpftmm99ct.jl:13\n"
  stdout: ''
  timestamp: 1659978084
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    if S == \"Hello world\" then 0 \n    else if S == \"The sky is blue. The\
    \ sun is shining. I love this weather\" then 1\n    else S\nend\n</cell>\n<code\
    \ language=julia-0.5>\n\"\"\"\n    You'll be given a list of strings and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored([\"Hello world\", \"The sky is blue. The sun\
    \ is shining. I love this weather\"])\n    2\n    \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t\
    @test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\"\
    ) == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2)\n\t@test(candidate(\"You and I are\
    \ going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"0\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpvzovstmb.jl:13\nin expression starting at /tmp/tmpvzovstmb.jl:13\n"
  stdout: ''
  timestamp: 1659978093
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    if is_bored_impl(S)\n        1\n    else\n        0\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\"\
    ) == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I\
    \ love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 6 errored,
    0 broken.

    in expression starting at /tmp/tmpl7wu5x3h.jl:21

    '
  stdout: "test set: Error During Test at /tmp/tmpl7wu5x3h.jl:24\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world\") == 0\n  UndefVarError: is_bored_impl\
    \ not defined\n  Stacktrace:\n   [1] is_bored(S::String)\n     @ Main /tmp/tmpl7wu5x3h.jl:13\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpl7wu5x3h.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpl7wu5x3h.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpl7wu5x3h.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(\"Is the sky blue?\") == 0\n  UndefVarError: is_bored_impl not defined\n\
    \  Stacktrace:\n   [1] is_bored(S::String)\n     @ Main /tmp/tmpl7wu5x3h.jl:13\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpl7wu5x3h.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpl7wu5x3h.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpl7wu5x3h.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(\"I love It !\") == 1\n  UndefVarError: is_bored_impl not defined\n\
    \  Stacktrace:\n   [1] is_bored(S::String)\n     @ Main /tmp/tmpl7wu5x3h.jl:13\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpl7wu5x3h.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpl7wu5x3h.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpl7wu5x3h.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"bIt\") == 0\n  UndefVarError: is_bored_impl not defined\n  Stacktrace:\n\
    \   [1] is_bored(S::String)\n     @ Main /tmp/tmpl7wu5x3h.jl:13\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.j"
  timestamp: 1659978095
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    if is_bored(S) == false\n        error(\"The input is malformed; please\
    \ try again\")\n    end\nend\n</cell>\n<code language=julia-1.0>\nis_bored(\"\
    Hello world\")\n</cell>\n<code language=julia-1.0>\nis_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n</cell>\n<text>\nExercise: Write\
    \ a function to check whether a line is a question or not.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t\
    @test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\"\
    ) == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2)\n\t@test(candidate(\"You and I are\
    \ going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpui27fjvd.jl:17\nin expression starting at\
    \ /tmp/tmpui27fjvd.jl:17\n"
  stdout: ''
  timestamp: 1659978093
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    S = S.lower()\n    count_boredoms = 0 # number of boredoms\n    \n   \
    \ for word in S.split(\" \"):\n        if word == \"i\":\n            count_boredoms\
    \ += 1\n    return count_boredoms\n\"\"\"\n    \n    \n    \n    \"\"\"\nusing\
    \ Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\"\
    ) == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I\
    \ love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphv9rf_ww.jl:17\nin expression starting at\
    \ /tmp/tmphv9rf_ww.jl:17\n"
  stdout: ''
  timestamp: 1659978093
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n\"\"\"\nis_bored(S::String)::Int64: Int64\n\"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n    \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = is_bored;\n\t\
    @test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"Is the sky blue?\"\
    ) == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"bIt\")\
    \ == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will kill\
    \ It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"function\" at /tmp/tmpjmtnczkp.jl:12 expected\
    \ \"end\", got \"be\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjmtnczkp.jl:16\n\
    in expression starting at /tmp/tmpjmtnczkp.jl:16\n"
  stdout: ''
  timestamp: 1659978093
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    S = lowercase(S)\n    return sum(1 for w in S if w == \"i\")\nend\n</cell>\n\
    <text>\n3. Your first model\nusing Test\n\n@testset begin\n\ncandidate = is_bored;\n\
    \t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"Is the sky blue?\"\
    ) == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"bIt\")\
    \ == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will kill\
    \ It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9n0djh5q.jl:16\nin expression starting at\
    \ /tmp/tmp9n0djh5q.jl:16\n"
  stdout: ''
  timestamp: 1659978093
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    S = S(0) \n    boredom = 0\n    for w in split(S) \n        if w == \"\
    I\" \n            boredom = 1 \n        else \n            boredom = 0 \n    end\n\
    \    return boredom\nend\n</code>\n<|/ a |>\n<| c |>\nThis solution assumes a\
    \ capital I, which the OP does not state. Also, there must be an `end` after the\
    \ `for`.\n<|/ c |>\n<| c |>\n, yes, you are right, there must be an end at the\
    \ end. I just forgot to put it in my example. Thanks for the note.\n<|/ c |>\n\
    <| c |>\n, no, it doesn't assume a capital I. It doesn't assume anything about\
    \ capitalization, or about punctuation. It only looks for an upper-case I, which\
    \ happens to be the first letter in the string. Think of it as a simple \"match\"\
    \ to the boredoms sentence. I hope it helps.\n<|/ c |>\n<| c |>\n, I've updated\
    \ the answer with some explanation, hopefully it helps. Let me know if something\
    \ is still unclear.\n<|/ c |>\n<| a |>\n<code>\nusing Test\n\n@testset begin\n\
    \ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"\
    Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"\
    bIt\") == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will\
    \ kill It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpla6mey1y.jl:23\nin expression starting at\
    \ /tmp/tmpla6mey1y.jl:23\n"
  stdout: ''
  timestamp: 1659978093
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    \"\"\"count the number of boredoms in a string\"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t\
    @test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\"\
    ) == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2)\n\t@test(candidate(\"You and I are\
    \ going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp2eg1pcad.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp2eg1pcad.jl:1\n\
    in expression starting at /tmp/tmp2eg1pcad.jl:1\n"
  stdout: ''
  timestamp: 1659978094
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    \"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\n    \n# Write\
    \ your code here\nis_bored(\"\")\nis_bored(\"a\")\nis_bored(\"I\")\nis_bored(\"\
    I.\")\nis_bored(\"I.\")\nis_bored(\"I.\")\nis_bored(\".\")\nis_bored(\"?\")\n\
    is_bored(\"!\")\nis_bored(\"I\")\nis_bored(\"I.\")\nis_bored(\"I.\")\nis_bored(\"\
    I.\")\nis_bored(\".\")\nis_bored(\"?\")\nis_bored(\"!\")\nis_bored(\"I\")\nis_bored(\"\
    I.\")\nis_bored(\"I.\")\nis_bored(\"I.\")\nis_bored(\".\")\nis_bored(\"?\")\n\
    is_bored(\"!\")\nis_bored(\"I\")\nis_bored(\"I.\")\nis_bored(\"I.\")\nis_bored(\"\
    I.\")\nis_bored(\".\")\nis_bored(\"?\")\nis_bored(\"!\")\nis_bored(\"I\")\nis_bored(\"\
    I.\")\nis_bored(\"I.\")\nis_bored(\"I.\")\nis_bored(\".\")\nis_bored(\"?\")\n\
    is_bored(\"!\")\nis_bored(\"I\")\nis_bored(\"I.\")\nis_bored(\"I.\")\nis_bored(\"\
    I.\")\nis_bored(\".\")\nis_bored(\"?\")\nis_bored(\"!\")\nis_bored(\"I\")\nis_bored(\"\
    I.\")\nis_bored(\"I.\")\nis_bored(\"I.\")\nis_bored(\".\")\nis_bored(\"?\")\n\
    is_bored(\"!\")\nis_bored(\"I\")\nis_bored(\"I.\")\nis_bored(\"I.\")\nis_bored(\"\
    I.\")\nis_bored(\".\")\nis_bored(\"?\")\nis_bored(\"!\")\nis_bored(\"I\")\nis_bored(\"\
    I.\")\nis_bored(\"I.\")\nis_bored(\"I.\")\nis_bored(\".\")\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t\
    @test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\"\
    ) == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2)\n\t@test(candidate(\"You and I are\
    \ going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp0j7wm8w2.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp0j7wm8w2.jl:1\n\
    in expression starting at /tmp/tmp0j7wm8w2.jl:1\n"
  stdout: ''
  timestamp: 1659978094
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    #let boredom_count = boredom_count\n    #boredom_count += count_boredoms(S)\n\
    using Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello\
    \ world\") == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"\
    I love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpmab47_04.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpmab47_04.jl:1\n\
    in expression starting at /tmp/tmpmab47_04.jl:1\n"
  stdout: ''
  timestamp: 1659978094
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    # write your solution here\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"\
    Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"\
    bIt\") == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will\
    \ kill It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpguqro4q1.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpguqro4q1.jl:1\n\
    in expression starting at /tmp/tmpguqro4q1.jl:1\n"
  stdout: ''
  timestamp: 1659978094
- exit_code: -1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    #\n    # BEGIN PROBLEM 4\n    #\n    # Write your code below.\n    # In\
    \ this function, we have a string S, return a boolean.\n    # Return 0 if S is\
    \ not a boredom sentence\n    # Return 1 if S is a boredom sentence\n    #\n \
    \   # HINT: Use pattern matching for string matching. Look up pattern matching\n\
    \    # in Julia.\n    #\n    return nothing\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"\
    Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"\
    bIt\") == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will\
    \ kill It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\n\
    end\n"
  status: Timeout
  stderr: 'b''ERROR: '''
  stdout: 'b''test set: Error During Test at /tmp/tmp7u1sn5af.jl:31\n  Test threw
    exception\n  Expression: candidate("Hello world") == 0\n  MethodError: Cannot
    `convert` an object of type Nothing to an object of type Int64\n  Closest candidates
    are:\n    convert(::Type{T}, !Matched::Ptr) where T<:Integer at ~/.conda/envs/polyglot/share/julia/base/pointer.jl:23\n    convert(::Type{T},
    !Matched::T) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T},
    !Matched::Number) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:7\n    ...\n  Stacktrace:\n   [1]
    is_bored(S::String)\n     @ Main /tmp/tmp7u1sn5af.jl:24\n   [2] macro expansion\n     @
    ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmp7u1sn5af.jl:31 [inlined]\n   [4] macro expansion\n     @
    ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmp7u1sn5af.jl:30\ntest set: Error During Test at
    /tmp/tmp7u1sn5af.jl:32\n  Test threw exception\n  Expression: candidate("Is the
    sky blue?") == 0\n  MethodError: Cannot `convert` an object of type Nothing to
    an object of type Int64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::Ptr)
    where T<:Integer at ~/.conda/envs/polyglot/share/julia/base/pointer.jl:23\n    convert(::Type{T},
    !Matched::T) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T},
    !Matched::Number) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:7\n    ...\n  Stacktrace:\n   [1]
    is_bored(S::String)\n     @ Main /tmp/tmp7u1sn5af.jl:24\n   [2] macro expansion\n     @
    ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmp7u1sn5af.jl:32 [inlined]\n   [4] macro expansion\n     @
    ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmp7u1sn5af.jl:30\ntest set: Error During Test at
    /tmp/tmp7u'
  timestamp: 1659978098
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    # Write your function code here.\n    \n    # Your code here\n    \nend\n\
    </cell>\n<text>\nThe is_bored function should return a Int64 number. The return\
    \ value will be either 0 or 1, depending on whether a boredom sentence was found\
    \ or not.\nIn case your code is correct, make sure to run the cell below to test\
    \ your function.\nusing Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"\
    Hello world\") == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"\
    I love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmti8t592.jl:18\nin expression starting at\
    \ /tmp/tmpmti8t592.jl:18\n"
  stdout: ''
  timestamp: 1659978095
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    if is_bored(S)==0\n    else \n        for w in word(S) do \n         \
    \   if S[1]==\"I\" && w==\"I\" return 1\n            else if S[1]==\"?\" || S[1]==\"\
    !\" && w==\"?\" || w==\"!\" return 1\n            else return 0\n    endif\nendfunction\n\
    </code>\n<|/ a dscore=1 |>\n<| a |>\nThe solution is straightforward and elegant\
    \ with regular expressions.\nThe key is to get the number of all words beginning\
    \ with \"I\", then all words beginning with \"!\" or \"?\".\n<code>\nusing Test\n\
    \n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\")\
    \ == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I\
    \ love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbkxtxkwo.jl:17\nin expression starting at\
    \ /tmp/tmpbkxtxkwo.jl:17\n"
  stdout: ''
  timestamp: 1659978095
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    return sum(is_bored_word(w) for w in S.split('.'))\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t\
    @test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\"\
    ) == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2)\n\t@test(candidate(\"You and I are\
    \ going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpcaqzlpc6.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpcaqzlpc6.jl:1\n\
    in expression starting at /tmp/tmpcaqzlpc6.jl:1\n"
  stdout: ''
  timestamp: 1659978095
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n\"\"\"\n    You'll be given a string of words, and your task is to count the\
    \ number\n    of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\n# Solution\n\
    # 1. count the occurences of \"I\" and return the value\n    \n# 2. count the\
    \ occurences of \".\" and return the value\n    \n# 3. count the occurences of\
    \ \"?\" and return the value\n    \n# 4. count the occurences of \"!\" and return\
    \ the value\nusing Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"\
    Hello world\") == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"\
    I love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpoikyyx0r.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpoikyyx0r.jl:1\n\
    in expression starting at /tmp/tmpoikyyx0r.jl:1\n"
  stdout: ''
  timestamp: 1659978094
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n  \n  case S of \n      S::String{S<-unlist(strsplit(S,\".?!\"))} && S[1]\
    \ == \"I\" => 1\n      S::String{S<-unlist(strsplit(S,\".?!\"))} && S[1] != \"\
    I\" => 0 \n      S::String{S<-unlist(strsplit(S,\".?!\"))} && S[1] == \"I\" &&\
    \ S[2] == \"I\" => 1\n      S::String{S<-unlist(strsplit(S,\".?!\"))} && S[1]\
    \ != \"I\" && S[2] == \"I\" => 0 \n      S::String{S<-unlist(strsplit(S,\".?!\"\
    ))} && S[1] != \"I\" && S[2] != \"I\" => 0 \n      S::String{S<-unlist(strsplit(S,\"\
    .?!\"))} && S[1] == \"I\" && S[2] == \"I\" && S[3] == \"I\" => 1\n      S::String{S<-unlist(strsplit(S,\"\
    .?!\"))} && S[1] != \"I\" && S[2] == \"I\" && S[3] == \"I\" => 0 \n      S::String{S<-unlist(strsplit(S,\"\
    .?!\"))} && S[1] != \"I\" && S[2] != \"I\" && S[3] == \"I\" => 0 \n      S::String{S<-unlist(strsplit(S,\"\
    .?!\"))} && S[1] != \"I\" && S[2] == \"I\" && S[3] != \".\" && S[3] != \".\" =>\
    \ 0 \n      S::String{S<-unlist(strsplit(S,\".?!\"))} && S[1] != \"I\" && S[2]\
    \ == \"I\" && S[3] != \".\" && S[3] != \"!\" => 0 \n      S::String{S<-unlist(strsplit(S,\"\
    .?!\"))} && S[1] != \"I\" && S[2] != \"I\" && S[3] != \".\" && S[3] != \"!\" =>\
    \ 0 \n      S::String{S<-unlist(strsplit(S,\".?!\"))} && S[1] != \"I\" && S[2]\
    \ != \"I\" && S[3] != \".\" && S[3] != \"?\" => 0 \n      S::String{S<-unlist(strsplit(S,\"\
    .?!\"))} && S[1] != \"I\" && S[2] != \"I\" && S[3] != \".\" && S[3] != \"?\" &&\
    \ S[3] != \"!\" => 0 \n      S::String{S<-unlist(strsplit(S,\".?!\"))} && S[1]\
    \ != \"I\" && S[2] != \"I\" && \nusing Test\n\n@testset begin\n\ncandidate = is_bored;\n\
    \t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"Is the sky blue?\"\
    ) == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"bIt\")\
    \ == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will kill\
    \ It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"function\" at /tmp/tmpd0mlyr5q.jl:12 expected\
    \ \"end\", got \"S\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpd0mlyr5q.jl:14\n\
    in expression starting at /tmp/tmpd0mlyr5q.jl:14\n"
  stdout: ''
  timestamp: 1659978094
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    if is_bored(S) == -1 then\n        error(\"Sentence does not start with\
    \ a boredom\")\n    end\nusing Test\n\n@testset begin\n\ncandidate = is_bored;\n\
    \t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"Is the sky blue?\"\
    ) == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"bIt\")\
    \ == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will kill\
    \ It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpgztdkkae.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpgztdkkae.jl:1\n\
    in expression starting at /tmp/tmpgztdkkae.jl:1\n"
  stdout: ''
  timestamp: 1659978095
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    \n\"\"\"\n    You'll be given a list of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n    \n    For example:\n\
    \    >>> is_bored([\"Hello\", \"world\"])\n    0\n    >>> is_bored([\"Hello\"\
    , \"world\", \"!\"])\n    1\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"\
    Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"\
    bIt\") == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will\
    \ kill It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmph13_ic4_.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmph13_ic4_.jl:1\n\
    in expression starting at /tmp/tmph13_ic4_.jl:1\n"
  stdout: ''
  timestamp: 1659978095
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n\"\"\"\n    You'll be given a string of words, and your task is to count the\
    \ number\n    of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\n    if S.starts_with(\"\
    I\"):\n        return 0\n    else:\n        return 1\n    \nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t\
    @test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\"\
    ) == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2)\n\t@test(candidate(\"You and I are\
    \ going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmps10k5bri.jl:25\nin expression starting at\
    \ /tmp/tmps10k5bri.jl:25\n"
  stdout: ''
  timestamp: 1659978095
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    if is_bored_(S)==1\n        return 1\n    else\n        return 0\n   \
    \ end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"\
    Hello world\") == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"\
    I love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 6 errored,
    0 broken.

    in expression starting at /tmp/tmptb86rtvo.jl:21

    '
  stdout: "test set: Error During Test at /tmp/tmptb86rtvo.jl:24\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world\") == 0\n  UndefVarError: is_bored_ not\
    \ defined\n  Stacktrace:\n   [1] is_bored(S::String)\n     @ Main /tmp/tmptb86rtvo.jl:13\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmptb86rtvo.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmptb86rtvo.jl:23\ntest set:\
    \ Error During Test at /tmp/tmptb86rtvo.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(\"Is the sky blue?\") == 0\n  UndefVarError: is_bored_ not defined\n\
    \  Stacktrace:\n   [1] is_bored(S::String)\n     @ Main /tmp/tmptb86rtvo.jl:13\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmptb86rtvo.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmptb86rtvo.jl:23\ntest set:\
    \ Error During Test at /tmp/tmptb86rtvo.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(\"I love It !\") == 1\n  UndefVarError: is_bored_ not defined\n  Stacktrace:\n\
    \   [1] is_bored(S::String)\n     @ Main /tmp/tmptb86rtvo.jl:13\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmptb86rtvo.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmptb86rtvo.jl:23\ntest set:\
    \ Error During Test at /tmp/tmptb86rtvo.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"bIt\") == 0\n  UndefVarError: is_bored_ not defined\n  Stacktrace:\n\
    \   [1] is_bored(S::String)\n     @ Main /tmp/tmptb86rtvo.jl:13\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n"
  timestamp: 1659978097
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    return sum((S[i] == '.' or S[i] == '?' or S[i] == '!')\n        for i\
    \ in 1:length(S))\nend\nusing Test\n\n@testset begin\n\ncandidate = is_bored;\n\
    \t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"Is the sky blue?\"\
    ) == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"bIt\")\
    \ == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will kill\
    \ It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpe4f2tttk.jl:13\nin expression starting at\
    \ /tmp/tmpe4f2tttk.jl:13\n"
  stdout: ''
  timestamp: 1659978095
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    if is_bored(S) == 1 then 1 else 0 end\nend\n</cell>\n<text>\nExercises:\n\
    Exercise: Write a function that counts the number of times each word appears in\
    \ a text.\nExercise: Write a function that counts the number of times each word\
    \ appears in a text.\nExercise: Write a function that counts the number of times\
    \ each word appears in a text.\nExercise: Write a function that counts the number\
    \ of times each word appears in a text.\nExercise: Write a function that counts\
    \ the number of times each word appears in a text.\nusing Test\n\n@testset begin\n\
    \ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"\
    Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"\
    bIt\") == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will\
    \ kill It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"1\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp3czvwnr5.jl:13\nin expression starting at /tmp/tmp3czvwnr5.jl:13\n"
  stdout: ''
  timestamp: 1659978095
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    if is_bored(S,0)==0\n    else \n        println(\"It is not possible to\
    \ bore this string.\")\n    end\nend\n</code>\nThe other function - is_bored(S,N)\n\
    <code>\nusing Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"\
    Hello world\") == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"\
    I love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnr4ghf_q.jl:18\nin expression starting at\
    \ /tmp/tmpnr4ghf_q.jl:18\n"
  stdout: ''
  timestamp: 1659978095
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    if is_bored(S)=1 then 1 else 0\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"\
    Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"\
    bIt\") == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will\
    \ kill It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"=\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp9h_br7d3.jl:13\nin expression starting at /tmp/tmp9h_br7d3.jl:13\n"
  stdout: ''
  timestamp: 1659978095
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    if S ~= '' && (S ~= 'I' or S ~= '!') && S ~= '?'\n    then 1 else 0\n\
    \    end\n    \"\"\"\n    This cell should run in about 20 seconds. \n    Feel\
    \ free to write additional tests about what counts as a boredom.\n    \"\"\"\n\
    end\n</cell>\n<code language=julia-1.5>\n@time @test is_bored(\"Hello world\"\
    ) == 0;\n@time @test is_bored(\"The sky is blue. The sun is shining. I love this\
    \ weather\") == 1;\n</cell>\n<text>\nExercise 1\nThe BoredomCounter() function\
    \ is written in the cell below.  If you have not written this function yourself,\
    \ you can look at the solutions notebook for a hint.\nusing Test\n\n@testset begin\n\
    \ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"\
    Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"\
    bIt\") == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will\
    \ kill It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid empty character literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpy7gb23nk.jl:13\nin expression starting at\
    \ /tmp/tmpy7gb23nk.jl:13\n"
  stdout: ''
  timestamp: 1659978095
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    \"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\n    \n    let\
    \ count = 0\n    \n    for word in S.split():\n        if word.startswith(\"I\"\
    ):\n            count = count + 1\n            \n    return count\n</cell>\n<code\
    \ language=julia-0.6>\n# %load ex5.jl\n\"\"\"\nExercise 5\nWrite a function count_boredoms(S::String)::Int64\
    \ where S is a list of words.\nA boredom is a sentence that starts with the word\
    \ \"I\".\nSentences are delimited by '.', '?' or '!'.\n   \nFor example:\n   \
    \ >>> count_boredoms(\"Hello world\")\n    0\n    >>> count_boredoms(\"The sky\
    \ is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\nusing\
    \ Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\"\
    ) == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I\
    \ love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfn_rgg3n.jl:28\nin expression starting at\
    \ /tmp/tmpfn_rgg3n.jl:28\n"
  stdout: ''
  timestamp: 1659978095
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    if is_bored(\"I\",S) == 0\n    else is_bored(\"I\",S) + 1\nend\nis_bored(\"\
    I\",\"\")\nis_bored(\"I\",\"I\")\nis_bored(\"I\",\".\")\nis_bored(\"I\",\"I.\"\
    )\nis_bored(\"I\",\"I?.\")\nis_bored(\"I\",\"I!\")\nis_bored(\"I\",\"I.\")\nis_bored(\"\
    I\",\"I love this weather\")\nis_bored(\"I\",\"I.\")\nis_bored(\"I\",\"I. weather\"\
    )\nis_bored(\"I\",\"I..weather\")\nis_bored(\"I\",\"I!!!weather\")\nis_bored(\"\
    I\",\"I??weather\")\nis_bored(\"I\",\"I!!.weather\")\nis_bored(\"I\",\"I!!?weather\"\
    )\nis_bored(\"I\",\"I!!??weather\")\nis_bored(\"I\",\"I!!??.weather\")\nis_bored(\"\
    I\",\"I!!???weather\")\nis_bored(\"I\",\"I!!????weather\")\nis_bored(\"I\",\"\
    I!!????.weather\")\nis_bored(\"I\",\"I!!?????weather\")\nis_bored(\"I\",\"I!!??????weather\"\
    )\nis_bored(\"I\",\"I!!??????.weather\")\nis_bored(\"I\",\"I!!???????weather\"\
    )\nis_bored(\"I\",\"I!!????????weather\")\nis_bored(\"I\",\"I!!????????.weather\"\
    )\nis_bored(\"I\",\"I!!?????????weather\")\nis_bored(\"I\",\"I!!??????????weather\"\
    )\nis_bored(\"I\",\"I!!??????????.weather\")\nis_bored(\"I\",\"I!!???????????weather\"\
    )\nis_bored(\"I\",\"I!!????????????weather\")\nis_bored(\"I\",\"I!!????????????.weather\"\
    )\nis_bored(\"I\",\"I!!?????????????weather\")\nis_bored(\"I\",\"I!!??????????????weather\"\
    )\nis_bored(\"I\",\"I!!??????????????.weather\")\nis_bored(\"I\",\"I!!???????????????weather\"\
    )\nis_bored(\"I\",\"I!!\nusing Test\n\n@testset begin\n\ncandidate = is_bored;\n\
    \t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"Is the sky blue?\"\
    ) == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"bIt\")\
    \ == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will kill\
    \ It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6s_ciqk7.jl:58\nin expression starting at\
    \ /tmp/tmp6s_ciqk7.jl:58\n"
  stdout: ''
  timestamp: 1659978095
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    \"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\n    function\
    \ is_bored(S::String)::Int64 \n    \"\"\"\n    You'll be given a string of words,\
    \ and your task is to count the number\n    of boredoms. A boredom is a sentence\
    \ that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or\
    \ '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n   \
    \ 1\n    \"\"\"\n    function is_bored(S::String)::Int64 \n    \"\"\"\n    You'll\
    \ be given a string of words, and your task is to count the number\n    of boredoms.\
    \ A boredom is a sentence that starts with the word \"I\".\n    Sentences are\
    \ delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello\
    \ world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n    1\n    \"\"\"\n        function is_bored(S::String)::Int64\
    \ \n        \"\"\"\n        You'll be given a string of words, and your task is\
    \ to count the number\n        of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n        Sentences are delimited by '.', '?' or '!'.\n\
    \       \n        For example:\n        >>> is_bored(\"Hello world\")\n      \
    \  0\n        >>> is_bored(\"The sky is blue. The sun is shining. I love this\
    \ weather\")\n        1\n        \"\"\"\n        \tfunction is_bored(S::String)::Int64\
    \ \n        \"\"\"\n        You'll be given a string of words, and your task is\
    \ to count the number\n        of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n        Sentences are delimited by '.', '?' or '!'.\n\
    \       \n        For example:\n        >>> is_bored(\"Hello world\")\n      \
    \  0\n        >>> is_bored(\"The sky is blue. The sun is shining. I love this\
    \ weather\")\n\nusing Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"\
    Hello world\") == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"\
    I love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpq7dvnled.jl:1\nin expression starting at /tmp/tmpq7dvnled.jl:1\n"
  stdout: ''
  timestamp: 1659978096
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    \n    \"\"\"\n    Implement a function that counts the number of boredoms\
    \ in S.\nusing Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"\
    Hello world\") == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"\
    I love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_q3m016l.jl:1\nin expression starting at /tmp/tmp_q3m016l.jl:1\n"
  stdout: ''
  timestamp: 1659978096
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    S = lower(S)\n    S = \". ? ! \".(S)\n    return length(S.split(\"I\"\
    ))-1\nend \n</cell>\n<text>\nTest\nRun the cell below to test your code.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\"\
    ) == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I\
    \ love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphqn3xab0.jl:17\nin expression starting at\
    \ /tmp/tmphqn3xab0.jl:17\n"
  stdout: ''
  timestamp: 1659978096
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n\"\"\"\n    You'll be given a string of words, and your task is to count the\
    \ number\n    of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nusing Test\n\n\
    @testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") ==\
    \ 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love\
    \ It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel\
    \ good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp95t427f9.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp95t427f9.jl:1\n\
    in expression starting at /tmp/tmp95t427f9.jl:1\n"
  stdout: ''
  timestamp: 1659978086
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    \n    return sum([word in S for word in [\"I\",\"!\",\"?\"]])\n    \n\
    end\n</cell>\n<code language=julia-0.4>\nis_bored(\"Hello world\")\n</cell>\n\
    <text>\nPractice Problems\nThe is_bored function above is pretty straightforward,\
    \ but the more difficult the problem is, the more challenging it becomes!\nusing\
    \ Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\"\
    ) == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I\
    \ love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7m6y0nf7.jl:17\nin expression starting at\
    \ /tmp/tmp7m6y0nf7.jl:17\n"
  stdout: ''
  timestamp: 1659978096
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n\"\"\"\n    You'll be given a string of words, and your task is to count the\
    \ number\n    of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nusing Test\n\n\
    @testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") ==\
    \ 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love\
    \ It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel\
    \ good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp95t427f9.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp95t427f9.jl:1\n\
    in expression starting at /tmp/tmp95t427f9.jl:1\n"
  stdout: ''
  timestamp: 1659978086
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    if is_bored(S, 1) ==1 then return 1\n    if S[1]==\"?\" or S[1]==\"!\"\
    \ or S[2]==\"?\" or S[2]==\"!\" then \n        return is_bored(S[1:end-1], 1)\n\
    \    else return 0\nend\nusing Test\n\n@testset begin\n\ncandidate = is_bored;\n\
    \t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"Is the sky blue?\"\
    ) == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"bIt\")\
    \ == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will kill\
    \ It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpgowuwcn8.jl:13\nin expression starting at /tmp/tmpgowuwcn8.jl:13\n"
  stdout: ''
  timestamp: 1659978096
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    S = string(S)\n    boredoms = count_boredoms(S) == 3\n    return boredoms\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"\
    Hello world\") == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"\
    I love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 6 errored,
    0 broken.

    in expression starting at /tmp/tmpbszyn5ob.jl:19

    '
  stdout: "test set: Error During Test at /tmp/tmpbszyn5ob.jl:22\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world\") == 0\n  UndefVarError: count_boredoms\
    \ not defined\n  Stacktrace:\n   [1] is_bored(S::String)\n     @ Main /tmp/tmpbszyn5ob.jl:14\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpbszyn5ob.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpbszyn5ob.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpbszyn5ob.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(\"Is the sky blue?\") == 0\n  UndefVarError: count_boredoms not defined\n\
    \  Stacktrace:\n   [1] is_bored(S::String)\n     @ Main /tmp/tmpbszyn5ob.jl:14\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpbszyn5ob.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpbszyn5ob.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpbszyn5ob.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(\"I love It !\") == 1\n  UndefVarError: count_boredoms not defined\n\
    \  Stacktrace:\n   [1] is_bored(S::String)\n     @ Main /tmp/tmpbszyn5ob.jl:14\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpbszyn5ob.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpbszyn5ob.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpbszyn5ob.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(\"bIt\") == 0\n  UndefVarError: count_boredoms not defined\n  Stacktrace:\n\
    \   [1] is_bored(S::String)\n     @ Main /tmp/tmpbszyn5ob.jl:14\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Te"
  timestamp: 1659978098
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    if is_bored_1(S) == true\n        return 1\n    else\n        return -1\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"\
    Hello world\") == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"\
    I love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 6 errored,
    0 broken.

    in expression starting at /tmp/tmpr12yhdct.jl:21

    '
  stdout: "test set: Error During Test at /tmp/tmpr12yhdct.jl:24\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world\") == 0\n  UndefVarError: is_bored_1 not\
    \ defined\n  Stacktrace:\n   [1] is_bored(S::String)\n     @ Main /tmp/tmpr12yhdct.jl:13\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpr12yhdct.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpr12yhdct.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpr12yhdct.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(\"Is the sky blue?\") == 0\n  UndefVarError: is_bored_1 not defined\n\
    \  Stacktrace:\n   [1] is_bored(S::String)\n     @ Main /tmp/tmpr12yhdct.jl:13\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpr12yhdct.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpr12yhdct.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpr12yhdct.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(\"I love It !\") == 1\n  UndefVarError: is_bored_1 not defined\n \
    \ Stacktrace:\n   [1] is_bored(S::String)\n     @ Main /tmp/tmpr12yhdct.jl:13\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpr12yhdct.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpr12yhdct.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpr12yhdct.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"bIt\") == 0\n  UndefVarError: is_bored_1 not defined\n  Stacktrace:\n\
    \   [1] is_bored(S::String)\n     @ Main /tmp/tmpr12yhdct.jl:13\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlin"
  timestamp: 1659978098
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    if is_bored(S,0)==0\n    else return 1\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"\
    Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"\
    bIt\") == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will\
    \ kill It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmprmptvps1.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmprmptvps1.jl:1\n\
    in expression starting at /tmp/tmprmptvps1.jl:1\n"
  stdout: ''
  timestamp: 1659978096
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    if is_bored(S, 0) == length(S) \n    then 0 \n    else 1 \nend\n\"\"\"\
    \n    The second function is_bored(S, j) takes in two arguments,\n    a string,\
    \ S and an index. If S is bored (by 'I'), then we should\n    return 1, otherwise\
    \ 0.\n \n    We need to go through every word in the string S and check if it's\
    \ bored.\n    If it's bored, then we return 1. If it's not bored and it's not\n\
    \    a word (i.e. '.', '?' or '!'), then we return 0.\n    \n    For example:\n\
    \    >>> is_bored(\"Hello world\", 0)\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\", 0)\n    1\n    >>> is_bored(\"Hello\
    \ world\", 1)\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\", 2)\n    0\n    \"\"\"\nusing Test\n\n@testset begin\n\
    \ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"\
    Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"\
    bIt\") == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will\
    \ kill It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"0\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp5swh_llj.jl:14\nin expression starting at /tmp/tmp5swh_llj.jl:14\n"
  stdout: ''
  timestamp: 1659978096
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    if S.startsWith(\"I\") then return 0 else 1\n    return 1\n\"\"\"\nusing\
    \ Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\"\
    ) == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I\
    \ love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp916x6d12.jl:13\nin expression starting at /tmp/tmp916x6d12.jl:13\n"
  stdout: ''
  timestamp: 1659978096
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n   \n    \"\"\"\n    \n    \n    \"\"\"\n# YOUR CODE HERE\n    return S[1]\
    \ == '.'\nend\n</cell>\n<cell>\n# Run this cell to test your code\n\"\"\"\nDON'T\
    \ MODIFY ANYTHING IN THIS CELL THAT IS BELOW THIS LINE\n\"\"\"\n# test # 2\ns\
    \ = \"Hello world\"\nassert is_bored(s) == False\nassert is_bored(\"It's such\
    \ a wonderful sunshine in Washington!\") is True\ns = \"The sky is blue.\"\nassert\
    \ is_bored(s) == False\nassert is_bored(\"The sun is shining!\") == True\ns =\
    \ \"The weather is sweet!\"\nassert is_bored(s) == True\nassert is_bored(\"This\
    \ is fun!\") == False\n</cell>\n<text>\nQuestion 3: How would you write a function\
    \ that returns a list of all the bored words in a string?\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t\
    @test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\"\
    ) == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2)\n\t@test(candidate(\"You and I are\
    \ going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzs5fnari.jl:21\nin expression starting at\
    \ /tmp/tmpzs5fnari.jl:21\n"
  stdout: ''
  timestamp: 1659978096
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n</code>\n<|/ a tags=julia,string dscore=0 |>\n<| a tags=julia,string |>\n\
    <code>\nusing Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"\
    Hello world\") == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"\
    I love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpaxqa3197.jl:13\nin expression starting at\
    \ /tmp/tmpaxqa3197.jl:13\n"
  stdout: ''
  timestamp: 1659978097
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    if is_bored(S, 0, []) == 1 then 1 else 0 end \nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t\
    @test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\"\
    ) == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2)\n\t@test(candidate(\"You and I are\
    \ going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"1\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpckmh3m3o.jl:13\nin expression starting at /tmp/tmpckmh3m3o.jl:13\n"
  stdout: ''
  timestamp: 1659978096
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n\"\"\"\n    You'll be given a string of words, and your task is to count the\
    \ number\n    of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nusing Test\n\n\
    @testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") ==\
    \ 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love\
    \ It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel\
    \ good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp95t427f9.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp95t427f9.jl:1\n\
    in expression starting at /tmp/tmp95t427f9.jl:1\n"
  stdout: ''
  timestamp: 1659978086
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n\"\"\"\nis_bored(S::String)\nusing Test\n\n@testset begin\n\ncandidate = is_bored;\n\
    \t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"Is the sky blue?\"\
    ) == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"bIt\")\
    \ == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will kill\
    \ It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpt_ostqpm.jl:1\nin expression starting at /tmp/tmpt_ostqpm.jl:1\n"
  stdout: ''
  timestamp: 1659978084
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    if S \u2208 [\".\", \"?\", \"!\"]:\n        return length(S) == 0\n  \
    \  return sum(1 for c in S if c \u2209 [\".\", \"?\", \"!\"]) == 0 \nend \n</cell>\n\
    <code language=julia-0.5>\nis_bored(\"Hello world\")\n</cell>\n<code language=julia-0.5>\n\
    is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n</cell>\n\
    <text>\nExercise 9: Counting Greek Words\nLet's count the number of Greek words\
    \ in a string!\nusing Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"\
    Hello world\") == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"\
    I love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcez7l8bv.jl:14\nin expression starting at\
    \ /tmp/tmpcez7l8bv.jl:14\n"
  stdout: ''
  timestamp: 1659978096
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    if is_bored(S,1) \n    else return -1\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"\
    Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"\
    bIt\") == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will\
    \ kill It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpp7xgq98c.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpp7xgq98c.jl:1\n\
    in expression starting at /tmp/tmpp7xgq98c.jl:1\n"
  stdout: ''
  timestamp: 1659978096
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    S = S |> String.toUpper |> String.split |> Array.map String.toLower\n\
    \    boredom = Array.filter(x -> x == \"i\", S)\n    boredom = Array.sum(boredom)\n\
    end\n</cell>\n<code language=julia-1.0>\nis_bored(\"Hello world\")\n</cell>\n\
    <code language=julia-1.0>\nis_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n</cell>\n<text>\nWe can use is_bored to count the sentences\
    \ that have the word 'I' in them:\nusing Test\n\n@testset begin\n\ncandidate =\
    \ is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"Is\
    \ the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"\
    bIt\") == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will\
    \ kill It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"function\" at /tmp/tmppwoo4py3.jl:12 expected\
    \ \"end\", got \"String\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmppwoo4py3.jl:13\n\
    in expression starting at /tmp/tmppwoo4py3.jl:13\n"
  stdout: ''
  timestamp: 1659978096
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    S = S.lower()\n    S = S.translate(L('?. !.'))\n    S = splitlines(S)\n\
    \    S = join(S, \".\")\n    S = \"(\" + S + \")\"\n    S = \"(I.*.)\"\n    S\
    \ = parse(S)\n    S = S.findall(S)\n    return length(S)\nend\n</cell>\n<code\
    \ language=julia-1.4>\nis_bored(\"Hello world\")\n</cell>\n<code language=julia-1.4>\n\
    is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n</cell>\n\
    <text>\nExercise 3.3: Count number of boredoms using a regex\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t\
    @test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\"\
    ) == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2)\n\t@test(candidate(\"You and I are\
    \ going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: character literal contains multiple characters\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmpzkpcde7_.jl:14\nin expression\
    \ starting at /tmp/tmpzkpcde7_.jl:14\n"
  stdout: ''
  timestamp: 1659978096
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    S = S(:).\n    l = length(S);\n    if (l==0) return 0;\n    S = S[1:end-1];\n\
    \    len = length(S);\n    if isequal(S, \".\") || isequal(S, \"?\") || isequal(S,\
    \ \"!\") || len==0\n        return 0;\n    if isequal(S, \"I\") && 1==len\n  \
    \      return 1;\n    return is_bored(S);\nend\n</cell>\n<text>\nThe function\
    \ is_bored takes an argument S and returns the number of boredoms of S as a Int64.\
    \ Its implementation is straightforward.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"\
    Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"\
    bIt\") == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will\
    \ kill It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwp421438.jl:24\nin expression starting at\
    \ /tmp/tmpwp421438.jl:24\n"
  stdout: ''
  timestamp: 1659978096
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    count::Int64 = 0\n    \n    for word in S\n        if word == \"I\"\n\
    \            count += 1\n    \n    return count\n    \"\"\"\n    \n    \n    \n\
    \    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"\
    Hello world\") == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"\
    I love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpy2s1kaqi.jl:1\nin expression starting at /tmp/tmpy2s1kaqi.jl:1\n"
  stdout: ''
  timestamp: 1659978097
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    \n    \"\"\"\n    Purpose:\n    -------\n    The is_bored function is\
    \ intended to take in a string and return the number of times \n    the string\
    \ starts with the word \"I\", the beginning of a boredom.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t\
    @test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\"\
    ) == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2)\n\t@test(candidate(\"You and I are\
    \ going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmlrfu_up.jl:1\nin expression starting at /tmp/tmpmlrfu_up.jl:1\n"
  stdout: ''
  timestamp: 1659978097
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    if is_empty(S) || S == '.' || S == '?' || S == '!' \n    then return 0\
    \ \n    else \n        boredom_list = findall(S, \"I\"); \n        return length(boredom_list)\
    \ \n    end\nend\n</code>\nNote that I have replaced find with findall.\n<|/ a\
    \ dscore=0 |>\n<| c |>\nThank you for your response. Unfortunately, I have to\
    \ use this exact code as my teacher's code. He asked me to implement a function,\
    \ and I couldn't find a solution.\n<|/ c |>\n<| c |>\nI do not have much experience\
    \ with Julia. Can you please tell me what's wrong with my code? And thank you\
    \ for your help.\n<|/ c |>\n<| c |>\nYour code does not work if `S` is empty or\
    \ has any character other than `.`, `?`, and `!`.\n<|/ c |>\n<| c |>\nThe problem\
    \ is that the argument `S` is not being passed to the function.\n<|/ c |>\n<|\
    \ c |>\nI guess you're trying to pass the variable S to the function, when that\
    \ variable does not exist yet. What does `?` do here? You can find out by running\
    \ `?S`. But anyway you should pass S in the function call like `is_bored(S)`.\n\
    <|/ c |>\n<| a |>\nYou need to pass S into your is_bored(S::String) function.\
    \  I created a sample function that will print the number of boredom sentences\
    \ within the string S.\n<code>\nusing Test\n\n@testset begin\n\ncandidate = is_bored;\n\
    \t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"Is the sky blue?\"\
    ) == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"bIt\")\
    \ == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will kill\
    \ It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpg4mr11w7.jl:14\nin expression starting at /tmp/tmpg4mr11w7.jl:14\n"
  stdout: ''
  timestamp: 1659978097
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    \n    #your code here\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"\
    Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"\
    bIt\") == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will\
    \ kill It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 6 errored,
    0 broken.

    in expression starting at /tmp/tmp3lix76fo.jl:18

    '
  stdout: "test set: Error During Test at /tmp/tmp3lix76fo.jl:21\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world\") == 0\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\n  Closest candidates are:\n\
    \    convert(::Type{T}, !Matched::Ptr) where T<:Integer at ~/.conda/envs/polyglot/share/julia/base/pointer.jl:23\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:7\n\
    \    ...\n  Stacktrace:\n   [1] is_bored(S::String)\n     @ Main /tmp/tmp3lix76fo.jl:15\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp3lix76fo.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp3lix76fo.jl:20\ntest set:\
    \ Error During Test at /tmp/tmp3lix76fo.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(\"Is the sky blue?\") == 0\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::Ptr) where T<:Integer at ~/.conda/envs/polyglot/share/julia/base/pointer.jl:23\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:7\n\
    \    ...\n  Stacktrace:\n   [1] is_bored(S::String)\n     @ Main /tmp/tmp3lix76fo.jl:15\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp3lix76fo.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp3lix76fo.jl:20\ntest set:\
    \ Error During Test at /tmp/tmp3lix76fo.jl:23\n  Test threw exception\n  Expr"
  timestamp: 1659978100
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n\"\"\"\nis_bored\n\"\"\"\n    boredoms = findall(S, startswith(\"I\"))\n \
    \   count(boredoms)\nend\n</cell>\n<code language=julia-1.5>\nis_bored(\"Hello\
    \ world\")\n</cell>\n<code language=julia-1.5>\nis_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n</cell>\n<text>\nExercise\nWrite a function\
    \ that returns the number of boredoms given a list of boredoms.\nWrite a function\
    \ to count the number of boredoms in a sentence.\nWrite a function that returns\
    \ a list of unique words in a sentence.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"\
    Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"\
    bIt\") == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will\
    \ kill It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2bdbchnh.jl:19\nin expression starting at\
    \ /tmp/tmp2bdbchnh.jl:19\n"
  stdout: ''
  timestamp: 1659978098
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    \n    \"\"\"\n    You'll be given a string of words, and your task is\
    \ to count the number\n    of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For\
    \ example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky\
    \ is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\nusing\
    \ Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\"\
    ) == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I\
    \ love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpeipqd_m9.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpeipqd_m9.jl:1\n\
    in expression starting at /tmp/tmpeipqd_m9.jl:1\n"
  stdout: ''
  timestamp: 1659978098
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n     return length(filter(is_boredom_word, S))\nusing Test\n\n@testset begin\n\
    \ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"\
    Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"\
    bIt\") == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will\
    \ kill It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpeuvtllsp.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpeuvtllsp.jl:1\n\
    in expression starting at /tmp/tmpeuvtllsp.jl:1\n"
  stdout: ''
  timestamp: 1659978098
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    if is_empty(S)\n        return 0;\n    \n    let S = S[0..-1];\n    \n\
    \    S = S.trim();\n    if S == \"I\"\n        return 1;\n    else if S == \"\
    !\"\n        return 1;\n    else if S == \"?\" \n        return 1;\n    else if\
    \ S == \".\"\n        return 1;\n    else\n        return 0;\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\")\
    \ == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I\
    \ love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid operator \"..-\" near column 17\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgbdq0n6f.jl:16\nin expression starting at\
    \ /tmp/tmpgbdq0n6f.jl:16\n"
  stdout: ''
  timestamp: 1659978098
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    if is_bored(S) == 0 \n    then \n        length(S) \n    else \n     \
    \   0 \n    end \nend \n\"\"\"\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\
    \nusing Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"\
    Hello world\") == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"\
    I love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nusing Test\n\
    \nStacktrace:\n [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level\
    \ scope\n   @ /tmp/tmpi5lgl08g.jl:20\nin expression starting at /tmp/tmpi5lgl08g.jl:20\n"
  stdout: ''
  timestamp: 1659978098
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    if S.startswith(\"I\") && S[1]==\".\" && S[2]==\".\" && S[3]==\".\" \n\
    \        && S[4]==\".\" && S[5]==\".\" && S[6]==\".\" \n        && S[7]==\".\"\
    \ && S[8]==\".\" && S[9]==\".\" \n        && S[10]==\".\" && S[11]==\".\" && S[12]==\"\
    .\" \n        && S[13]==\".\" && S[14]==\".\" && S[15]==\".\" \n        && S[16]==\"\
    .\" && S[17]==\".\" && S[18]==\".\"\n        && S[19]==\".\" && S[20]==\".\" &&\
    \ S[21]==\".\"\n        && S[22]==\".\" && S[23]==\".\" && S[24]==\".\"\n    \
    \    && S[25]==\".\" && S[26]==\".\" && S[27]==\".\"\n        && S[28]==\".\"\
    \ && S[29]==\".\" && S[30]==\".\"\n        && S[31]==\".\" && S[32]==\".\" &&\
    \ S[33]==\".\"\n        && S[34]==\".\" && S[35]==\".\" && S[36]==\".\"\n    \
    \    && S[37]==\".\" && S[38]==\".\" && S[39]==\".\"\n        && S[40]==\".\"\
    \ && S[41]==\".\" && S[42]==\".\"\n        && S[43]==\".\" && S[44]==\".\" &&\
    \ S[45]==\".\"\n        && S[46]==\".\" && S[47]==\".\" && S[48]==\".\"\n    \
    \    && S[49]==\".\" && S[50]==\".\" && S[51]==\".\"\n        && S[52]==\".\"\
    \ && S[53]==\".\" && S[54]==\".\"\n        && S[55]==\".\" && S[56]==\".\" &&\
    \ S[57]==\".\"\n        && S[58]==\".\" && S[59]==\".\" && S[60]==\".\"\n    \
    \    && S[61]==\".\" && S[62]==\".\" && S[63]==\".\"\n        && S[64]==\".\"\
    \ && S[65]==\".\" && S[66]==\".\"\n        && S[67]==\".\" && S[68]==\".\" &&\
    \ S[69]==\".\"\n        && S[70]==\".\" && S[71]==\".\" && S[72]==\".\"\n    \
    \    && S[73]==\".\" && S[74]==\".\" && S[75]==\".\"\n        && S[76]==\".\n\
    using Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello\
    \ world\") == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"\
    I love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid identifier name \"&&\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjtjmckip.jl:14\nin expression starting at\
    \ /tmp/tmpjtjmckip.jl:14\n"
  stdout: ''
  timestamp: 1659978098
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n\"\"\"\n    You'll be given a string of words, and your task is to count the\
    \ number\n    of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nusing Test\n\n\
    @testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") ==\
    \ 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love\
    \ It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel\
    \ good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp95t427f9.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp95t427f9.jl:1\n\
    in expression starting at /tmp/tmp95t427f9.jl:1\n"
  stdout: ''
  timestamp: 1659978086
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \nis_bored(\"\") = 0\nis_bored(\" I\") = 1\nis_bored(\" ?\") = 1\nis_bored(\"\
    \ !\") = 1\nis_bored(\" .\") = 0\nis_bored(\" ?\") = 1\nis_bored(\" !\") = 1\n\
    is_bored(\" .\") = 0\nis_bored(\" I\") = 1\nis_bored(\" ?\") = 1\nis_bored(\"\
    \ !\") = 1\nis_bored(\" .\") = 0\nis_bored(\" I\") = 1\nis_bored(\" ?\") = 1\n\
    is_bored(\" !\") = 1\nis_bored(\" .\") = 0\nis_bored(\" I\") = 1\nis_bored(\"\
    \ ?\") = 1\nis_bored(\" !\") = 1\nis_bored(\" .\") = 0\nis_bored(\" I\") = 1\n\
    is_bored(\" ?\") = 1\nis_bored(\" !\") = 1\nis_bored(\" .\") = 0\nis_bored(\"\
    \ I\") = 1\nis_bored(\" ?\") = 1\nis_bored(\" !\") = 1\nis_bored(\" .\") = 0\n\
    is_bored(\" I\") = 1\nis_bored(\" ?\") = 1\nis_bored(\" !\") = 1\nis_bored(\"\
    \ .\") = 0\nis_bored(\" I\") = 1\nis_bored(\" ?\") = 1\nis_bored(\" !\") = 1\n\
    is_bored(\" .\") = 0\nis_bored(\" I\") = 1\nis_bored(\" ?\") = 1\nis_bored(\"\
    \ !\") = 1\nis_bored(\" .\") = 0\nis_bored(\" I\") = 1\nis_bored(\" ?\") = 1\n\
    is_bored(\" !\") = 1\nis_bored(\" .\") = 0\nis_bored(\" I\") = 1\nis_bored(\"\
    \ ?\") = 1\nis_bored(\" !\") = 1\nis_bored(\" .\") = 0\nis_bored(\" I\") = 1\n\
    is_bored(\" ?\") = 1\nis_bored(\" !\") = 1\nis_bored(\" .\") = 0\nis_bored(\"\
    \ I\") = 1\nis_bored(\" ?\") = 1\nis_bored(\" !\") = 1\nis_bored(\" .\") = 0\n\
    is_bored(\" I\") = 1\nis_bored(\" ?\") = 1\nis_bored(\" !\") = 1\nis_bored(\"\
    \ .\") = 0\nis_bored(\" I\") = 1\nis_bored(\" ?\") = 1\nis_bo\nusing Test\n\n\
    @testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") ==\
    \ 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love\
    \ It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel\
    \ good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxzv5hxs6.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxzv5hxs6.jl:1\n\
    in expression starting at /tmp/tmpxzv5hxs6.jl:1\n"
  stdout: ''
  timestamp: 1659978098
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    \"\"\"\n    TODO: You will need to count the number of times a string\
    \ starts with a specific character\n    \n    Arguments:\n    - `S::String`:\n\
    \        String to count boredoms from\n    \n    Returns:\n    - `Int64`:\n \
    \       number of boredoms\n    \n    Complexity:\n    - `O(n)`\n    - `where\
    \ n is the length of the string`\n    \"\"\"\nusing Test\n\n@testset begin\n\n\
    candidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"\
    Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"\
    bIt\") == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will\
    \ kill It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmprdc20ht1.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmprdc20ht1.jl:1\n\
    in expression starting at /tmp/tmprdc20ht1.jl:1\n"
  stdout: ''
  timestamp: 1659978098
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    \"\"\"\n    Input:\n      S::String -- A sentence (string)\n    \n   \
    \ Output:\n      Int64 -- the number of boredoms in the string S\n    \"\"\"\n\
    \    if S.starts_with(\"I\") && S.length > 1 && S.ends_with(\".\") && S.ends_with(\"\
    !\") && S.ends_with(\"?\") \n        return 1 else 0\n    end\n    \nusing Test\n\
    \n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\")\
    \ == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I\
    \ love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpenvn_znz.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpenvn_znz.jl:1\n\
    in expression starting at /tmp/tmpenvn_znz.jl:1\n"
  stdout: ''
  timestamp: 1659978098
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    if is_bored(S,0):\n        return 1;\n    return 0\nend \n\"\"\"\n###\
    \ 3. Task 4 (15 points)\n\"\"\"\n    You'll be given a list of words, and your\
    \ task is to count the number\n    of 'a' in the words. \n   \n    For example:\n\
    \    >>> count_a([\"Hello\",\"world\",\"!\"])\n    2\n    \"\"\"\nusing Test\n\
    \n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\")\
    \ == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I\
    \ love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfrfl37y_.jl:14\nin expression starting at\
    \ /tmp/tmpfrfl37y_.jl:14\n"
  stdout: ''
  timestamp: 1659978098
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    if is_empty(S)\n        error(\"The string is empty.\")\n    end\nusing\
    \ Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\"\
    ) == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I\
    \ love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpa0_4cyd1.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpa0_4cyd1.jl:1\n\
    in expression starting at /tmp/tmpa0_4cyd1.jl:1\n"
  stdout: ''
  timestamp: 1659978098
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    is_bored=0\n    for word in split(S) do\n        if is_bored==0 and\n\
    \            word.starts_with(\"I\") then \n            is_bored=1\n        end\n\
    \    end\n    is_bored\nend\n</code>\n<|/ a dscore=3 |>\n<| a tags=string,julia,function\
    \ |>\nI think you can do something like this in Julia:\n<code>\nusing Test\n\n\
    @testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") ==\
    \ 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love\
    \ It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel\
    \ good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"then\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpgsgnxvgw.jl:16\nin expression starting at /tmp/tmpgsgnxvgw.jl:16\n"
  stdout: ''
  timestamp: 1659978098
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    if is_bored(S,\"\") == 0\n    else is_bored(S,\".\") + is_bored(S,\"?\"\
    ) + is_bored(S,\"!\")\nend \n\"\"\"\n    Define is_worked_on which takes in a\
    \ string S and a delimiter, and\n    determines whether or not the string S has\
    \ been worked on before. \n    A worked_on string is a string that has been split\
    \ into a list of words\n    by the delimiter (\".\",\"?\" or \"!\"). \n    \n\
    \    For example, \n    >>> is_worked_on(\"Hello world\",\".\")\n    1\n    >>>\
    \ is_worked_on(\"Hello world\",\"?\")\n    0\n    \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t\
    @test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\"\
    ) == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2)\n\t@test(candidate(\"You and I are\
    \ going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp_dmbrwlz.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp_dmbrwlz.jl:1\n\
    in expression starting at /tmp/tmp_dmbrwlz.jl:1\n"
  stdout: ''
  timestamp: 1659978098
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    count = 0\n    for word in S\n        if word[0] == 'I'\n            count\
    \ += 1\n    end\n    return count\nusing Test\n\n@testset begin\n\ncandidate =\
    \ is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"Is\
    \ the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"\
    bIt\") == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will\
    \ kill It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"for\" at /tmp/tmpksfvx3b_.jl:14\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpksfvx3b_.jl:1\n\
    in expression starting at /tmp/tmpksfvx3b_.jl:1\n"
  stdout: ''
  timestamp: 1659978098
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    \n    boredoms::Dict{String, Int64} = Dict{String, Int64}()\n    \n  \
    \  for word in split_words(S) do \n        if is_boredom(word) then \n       \
    \     boredoms[word] +=1\n        end\n    end\n    \n    return sum(collect(boredoms.values))\n\
    end\n</cell>\n<code language=julia-1.6>\n@time is_bored(\"Hello world\") \n</cell>\n\
    <code language=julia-1.6>\n@time is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n</cell>\n<text>\nExercise 1\nWrite a function that takes\
    \ in a string of words and returns the number of times a word starts with the\
    \ letter \"I\".\nusing Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"\
    Hello world\") == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"\
    I love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmput_ojuu4.jl:24\nin expression starting at\
    \ /tmp/tmput_ojuu4.jl:24\n"
  stdout: ''
  timestamp: 1659978098
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n  \n  # BEGIN Question 2\n  return sum(map(is_bored, S.split(\".\")))\n  #\
    \ END Question 2\nend\n</cell>\n<code language=julia-0.5>\n# BEGIN Question 3\n\
    is_bored(\"Hello world\")\n# END Question 3\n</cell>\n<code language=julia-0.5>\n\
    # BEGIN Question 4\nis_bored(\"The sky is blue. The sun is shining. I love this\
    \ weather\")\n# END Question 4\n</cell>\n<text>\nPart 4: Vectorized String Manipulation\n\
    String manipulation is often more efficient than using loops in Julia.\nIn this\
    \ part of the notebook, you'll be learning about string vector\nmanipulation.\n\
    using Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello\
    \ world\") == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"\
    I love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpaxc79mcw.jl:18\nin expression starting at\
    \ /tmp/tmpaxc79mcw.jl:18\n"
  stdout: ''
  timestamp: 1659978098
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    \n    \"\"\"\n    Your task is to count the number \n    of boredoms.\
    \ A boredom is a sentence that starts with the word \"I\".\n    Sentences are\
    \ delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello\
    \ world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n    1\n    \"\"\"\ndef is_bored(S::String)::Int64\n    \n \
    \   \"\"\"\n    Your task is to count the number \n    of boredoms. A boredom\
    \ is a sentence that starts with the word \"I\".\n    Sentences are delimited\
    \ by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\"\
    )\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this\
    \ weather\")\n    1\n    \"\"\"\ndef is_bored(S::String)::Int64\n    \"\"\"\n\
    \    Your task is to count the number \n    of boredoms. A boredom is a sentence\
    \ that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or\
    \ '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n   \
    \ 1\n    \"\"\"\ndef is_bored(S::String)::Int64\n    \n    \"\"\"\n    Your task\
    \ is to count the number \n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\
    \ndef is_bored(S::String)::Int64\n    \"\"\"\n    Your task is to count the number\
    \ \n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
    \    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>>\
    \ is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun\
    \ is shining. I love this weather\")\n    1\n    \"\"\"\ndef is_bored(S::String)::Int64\n\
    \    \"\"\"\n    Your task is to count the number \n    of boredoms. A boredom\
    \ is a sentence that starts with the word \"\nusing Test\n\n@testset begin\n\n\
    candidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"\
    Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"\
    bIt\") == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will\
    \ kill It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"function\" at /tmp/tmpad2lvgqh.jl:12 expected\
    \ \"end\", got \"is_bored\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpad2lvgqh.jl:25\n\
    in expression starting at /tmp/tmpad2lvgqh.jl:25\n"
  stdout: ''
  timestamp: 1659978098
