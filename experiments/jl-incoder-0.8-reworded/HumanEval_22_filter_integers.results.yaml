language: jl
name: HumanEval_22_filter_integers
results:
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    # filter out non integers\n    filtered_values = filter(x -> isa(x, Int),\
    \ values) \n    # remove any values that are not integers\n    filtered_values\
    \ = filter(x -> x != false, filtered_values) \n    # convert non-integers to integer\n\
    \    filtered_values = map(x -> Int64, filtered_values) \n    return filtered_values\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 2 errored,
    0 broken.

    in expression starting at /tmp/tmpm974r53c.jl:18

    '
  stdout: "test set: Error During Test at /tmp/tmpm974r53c.jl:22\n  Test threw exception\n\
    \  Expression: candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9]\n  MethodError:\
    \ Cannot `convert` an object of type Type{Int64} to an object of type Int64\n\
    \  Closest candidates are:\n    convert(::Type{T}, !Matched::Ptr) where T<:Integer\
    \ at ~/.conda/envs/polyglot/share/julia/base/pointer.jl:23\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:7\n\
    \    ...\n  Stacktrace:\n    [1] setindex!(A::Vector{Int64}, x::Type, i1::Int64)\n\
    \      @ Base ./array.jl:903\n    [2] _unsafe_copyto!(dest::Vector{Int64}, doffs::Int64,\
    \ src::Vector{DataType}, soffs::Int64, n::Int64)\n      @ Base ./array.jl:253\n\
    \    [3] unsafe_copyto!\n      @ ./array.jl:307 [inlined]\n    [4] _copyto_impl!\n\
    \      @ ./array.jl:331 [inlined]\n    [5] copyto!\n      @ ./array.jl:317 [inlined]\n\
    \    [6] copyto!\n      @ ./array.jl:343 [inlined]\n    [7] copyto_axcheck!\n\
    \      @ ./abstractarray.jl:1104 [inlined]\n    [8] Vector{Int64}(x::Vector{DataType})\n\
    \      @ Base ./array.jl:563\n    [9] convert\n      @ ./array.jl:554 [inlined]\n\
    \   [10] filter_integers(values::Vector{Any})\n      @ Main /tmp/tmpm974r53c.jl:14\n\
    \   [11] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [12] macro expansion\n      @ /tmp/tmpm974r53c.jl:22 [inlined]\n\
    \   [13] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [14] top-level scope\n      @ /tmp/tmpm974r53c.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpm974r53c.jl:23\n  Test threw exception\n  Expression:\
    \ candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3]\n  MethodError: Cannot\
    \ `convert` an object of type Type{Int64} to an object of type Int64\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::Ptr) where T<:Integer at ~/.conda/envs/polyglot/share/julia/base/pointer.jl:23\n\
    \    convert(::Type{T}, !Matched:"
  timestamp: 1660013351
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n  res = Int64[]\n  for element in values\n    if isa(element, Int)\n     \
    \ push!(res, element)\n    end\n  end\n  return res\nend\n</cell>\n<text>\n5.3.\
    \ Map/Apply\nMap applies a function to each element of a vector. In Julia terminology\
    \ this is called a transform or map. Here is an example showing how to apply a\
    \ function to every element in an array.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4nc59tf2.jl:16\nin expression starting at\
    \ /tmp/tmp4nc59tf2.jl:16\n"
  stdout: ''
  timestamp: 1660013347
- exit_code: -1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    if length(values) > 0\n        try\n            if isa(values[1], Int64)\n\
    \                values = Int64[values]\n            elseif isa(values[1], JLLTensor)\n\
    \                values = Int64[values(:)]\n            elseif isa(values[1],\
    \ NDArray{T,N}) || isa(values[1], JLArray{T,N})\n                values = Int64[values(:)]\n\
    \            else\n                values = Int64[values(:)]\n            end\n\
    \        catch e\n        end\n    end\n    return values\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  status: Timeout
  stderr: 'ERROR: LoadError: '
  stdout: "test set: Error During Test at /tmp/tmp3aa4bgly.jl:30\n  Test threw exception\n\
    \  Expression: candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9]\n  MethodError:\
    \ Cannot `convert` an object of type Dict{Any, Any} to an object of type Int64\n\
    \  Closest candidates are:\n    convert(::Type{T}, !Matched::Ptr) where T<:Integer\
    \ at ~/.conda/envs/polyglot/share/julia/base/pointer.jl:23\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:7\n\
    \    ...\n  Stacktrace:\n    [1] setindex!(A::Vector{Int64}, x::Dict{Any, Any},\
    \ i1::Int64)\n      @ Base ./array.jl:903\n    [2] _unsafe_copyto!(dest::Vector{Int64},\
    \ doffs::Int64, src::Vector{Any}, soffs::Int64, n::Int64)\n      @ Base ./array.jl:253\n\
    \    [3] unsafe_copyto!\n      @ ./array.jl:307 [inlined]\n    [4] _copyto_impl!\n\
    \      @ ./array.jl:331 [inlined]\n    [5] copyto!\n      @ ./array.jl:317 [inlined]\n\
    \    [6] copyto!\n      @ ./array.jl:343 [inlined]\n    [7] copyto_axcheck!\n\
    \      @ ./abstractarray.jl:1104 [inlined]\n    [8] Vector{Int64}(x::Vector{Any})\n\
    \      @ Base ./array.jl:563\n    [9] convert\n      @ ./array.jl:554 [inlined]\n\
    \   [10] filter_integers(values::Vector{Any})\n      @ Main /tmp/tmp3aa4bgly.jl:22\n\
    \   [11] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [12] macro expansion\n      @ /tmp/tmp3aa4bgly.jl:30 [inlined]\n\
    \   [13] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [14] top-level scope\n      @ /tmp/tmp3aa4bgly.jl:28\ntest set:\
    \ Error During Test at /tmp/tmp3aa4bgly.jl:31\n  Test threw exception\n  Expression:\
    \ candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3]\n  MethodError: Cannot\
    \ `convert` an object of type String to an object of type Int64\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::Ptr) where T<:Integer at ~/.conda/envs/polyglot/share/julia/base/pointer.jl:23\n\
    \    convert(::Type{T}, !Matched::T"
  timestamp: 1660013351
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    local result = Set()\n    for x in values\n        if isa(x, Int64)\n\
    \            insert(result, x)\n        end\n    end\n    return collect{x->typeof(x)<:Number}(result)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpggxj0k5i.jl:18

    '
  stdout: "test set: Error During Test at /tmp/tmpggxj0k5i.jl:21\n  Test threw exception\n\
    \  Expression: candidate(Vector{Any}([])) == Vector{Int64}([])\n  TypeError: in\
    \ Type{...} expression, expected UnionAll, got a value of type typeof(collect)\n\
    \  Stacktrace:\n   [1] filter_integers(values::Vector{Any})\n     @ Main /tmp/tmpggxj0k5i.jl:14\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpggxj0k5i.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpggxj0k5i.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpggxj0k5i.jl:22\n  Test threw exception\n  Expression:\
    \ candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9]\n  UndefVarError: insert\
    \ not defined\n  Stacktrace:\n   [1] filter_integers(values::Vector{Any})\n  \
    \   @ Main /tmp/tmpggxj0k5i.jl:11\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpggxj0k5i.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpggxj0k5i.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpggxj0k5i.jl:23\n  Test threw exception\n  Expression:\
    \ candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3]\n  UndefVarError: insert\
    \ not defined\n  Stacktrace:\n   [1] filter_integers(values::Vector{Any})\n  \
    \   @ Main /tmp/tmpggxj0k5i.jl:11\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpggxj0k5i.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpggxj0k5i.jl:20\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  timestamp: 1660013350
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    for v in values\n        if isinstance(v, Int64)\n            yield v\n\
    \        end\n    end\nend\n</cell>\n<text>\nfilter takes a function which returns\
    \ a boolean, and an input, and applies the function to the input, and keeps everything\
    \ else the same\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\
    \t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4,\
    \ Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3,\
    \ 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"v\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpuvaws7iy.jl:10\nin expression starting at /tmp/tmpuvaws7iy.jl:10\n"
  stdout: ''
  timestamp: 1660013347
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n  local l=length(values)\n  local result=zeros(Int64,l)\n  for i=1,l do \n\
    \      result[i]=isa(values[i],Int64) ? values[i] : \n                       \
    \  cast(Array{Int64},collect(values(i))) \n  end\n  result\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid iteration specification\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpavihd3_2.jl:10\nin expression starting at\
    \ /tmp/tmpavihd3_2.jl:10\n"
  stdout: ''
  timestamp: 1660013347
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    if length(unique(values)) <= 1 \n        return values \n    else \n \
    \       integer = Int64[] \n        for i in values \n            if not isa(i,\
    \ Int64) \n                raise ArgumentError(\"Cannot filter values that aren't\
    \ integers\") \n            if i >= Int64(1) \n                push!(integer,\
    \ i) \n            end \n        end \n        filter!((x) -> isa(Int64, x), integer)\
    \ \n        return integer \n    end \nend \n</code>\n<|/ a |>\n<| a dscore=2\
    \ |>\nIf you want to filter only integers, you could use the map function with\
    \ isa:\n<code>\nmap(x -> isa(x, Int), values)\n</code>\n<|/ a tags=julia,filtering,vector,types\
    \ |>\n<| a dscore=1 |>\nTo remove all Int64 except for the first one, you can\
    \ use first and filter!:\n<code>\njulia> filter(x -> x isa Int64, map(x -> x .+\
    \ 1, [1,1,1]))\n3-element Array{Int64,1}:\n 1\n 2\n 3\n</code>\nHowever, it seems\
    \ that filter! does not work with tuples, so we could do the following:\n<code>\n\
    julia> filter!(x -> isa(x, Tuple{Int64}), map(x -> x .+ 1, [1,1,1]))\n3-element\
    \ Array{Int64,1}:\n 1\n 2\n 3\n</code>\n<|/ a tags=julia,filtering,vector,types\
    \ |>\n<| a |>\nThis was my first time looking at Stackoverflow to ask a question.\
    \ My first question was answered perfectly by Benjamin O'Callas so I went ahead\
    \ and tried an alternate solution.\nI wanted to find out if there are any integers\
    \ other than Int64 in an array without using any for loops. After a lot of searching\
    \ I came across a post that was similar to my question. \nI looked at all of the\
    \ options and compared the performance. \nHere are the benchmarks I did:\n<code>\n\
    julia> function mapfilter()\n           map(x -> x isa Int, [1,2,3])\n       \
    \    filter!(x -> x isa Int64, [1,2,3])\n       end\nusing Test\n\n@testset begin\n\
    \ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"ArgumentError\"\nStacktrace:\n [1]\
    \ top-level scope\n   @ /tmp/tmp0eb882wc.jl:14\nin expression starting at /tmp/tmp0eb882wc.jl:14\n"
  stdout: ''
  timestamp: 1660013347
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    integers = Set{Int64}()\n    for value in values\n        if isa(value,Int64)\n\
    \            integers.add(value)\n        end\n    end\n    return collect(integers)\n\
    end\n</code>\n<|/ a tags=julia dscore=3 |>\n<| c |>\nThanks so much! That's really\
    \ helpful! I'll use it.\n<|/ c |>\n<| a dscore=2 tags=julia |>\nSince Julia v0.8,\
    \ this can be done much more easily:\n<code>\njulia> isa.(x::Vector{Any}, Integer)\
    \ |> collect\n10-element Vector{Int64}:\n 5\n 3\n 1\n 2\n 9\n 7\n 8\n 10\n 6\n\
    \ 11\n 9\n</code>\n<|/ a |>\n<| a tags=julia |>\nThis can be done using isa\n\
    <code>\njulia> isa(x, Integer) || isa(x, Int64) || isa(x, Int)\n10-element BitArray{1}:\n\
    \  true\n  true\n  true\n  true\n  true\n  true\n  true\n  true\n  true\nusing\
    \ Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplqye_p7f.jl:16\nin expression starting at\
    \ /tmp/tmplqye_p7f.jl:16\n"
  stdout: ''
  timestamp: 1660013347
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    filter(values, x -> isa(x, Int64))\nend\n</code>\n<|/ a dscore=2 |>\n\
    <| c |>\nThis is a good answer, but a couple things worth pointing out:  \nusing\
    \ Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvrz82lpo.jl:10\nin expression starting at\
    \ /tmp/tmpvrz82lpo.jl:10\n"
  stdout: ''
  timestamp: 1660013347
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    if !isa(values, Vector{Int64})\n        throw(ArgumentError(\"$values\
    \ must be vector of integers\"))\n    end\n    \n    result = Int64[]\n    for\
    \ i in values\n        if isa(i, Int64)\n            push!(result, i)\n      \
    \  else\n            throw(ArgumentError(\"$i must be an integer value\"))\n \
    \       end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmp63e5hfxh.jl:24

    '
  stdout: "test set: Error During Test at /tmp/tmp63e5hfxh.jl:27\n  Test threw exception\n\
    \  Expression: candidate(Vector{Any}([])) == Vector{Int64}([])\n  ArgumentError:\
    \ Any[] must be vector of integers\n  Stacktrace:\n   [1] filter_integers(values::Vector{Any})\n\
    \     @ Main /tmp/tmp63e5hfxh.jl:9\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp63e5hfxh.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp63e5hfxh.jl:26\ntest set:\
    \ Error During Test at /tmp/tmp63e5hfxh.jl:28\n  Test threw exception\n  Expression:\
    \ candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9]\n  ArgumentError: Any[4,\
    \ Dict{Any, Any}(), Any[], 23.2, 9, \"adasd\"] must be vector of integers\n  Stacktrace:\n\
    \   [1] filter_integers(values::Vector{Any})\n     @ Main /tmp/tmp63e5hfxh.jl:9\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp63e5hfxh.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp63e5hfxh.jl:26\ntest set:\
    \ Error During Test at /tmp/tmp63e5hfxh.jl:29\n  Test threw exception\n  Expression:\
    \ candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3]\n  ArgumentError: Any[3,\
    \ \"c\", 3, 3, \"a\", \"b\"] must be vector of integers\n  Stacktrace:\n   [1]\
    \ filter_integers(values::Vector{Any})\n     @ Main /tmp/tmp63e5hfxh.jl:9\n  \
    \ [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp63e5hfxh.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp63e5hfxh.jl:26\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  timestamp: 1660013350
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    filter(values, isinteger, \"Integers are not allowed\")\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpaw2p6bib.jl:12

    '
  stdout: "test set: Error During Test at /tmp/tmpaw2p6bib.jl:15\n  Test threw exception\n\
    \  Expression: candidate(Vector{Any}([])) == Vector{Int64}([])\n  MethodError:\
    \ no method matching filter(::Vector{Any}, ::typeof(isinteger), ::String)\n  Closest\
    \ candidates are:\n    filter(::Any, !Matched::Tuple) at ~/.conda/envs/polyglot/share/julia/base/tuple.jl:363\n\
    \    filter(::Any, !Matched::Array{T, N}) where {T, N} at ~/.conda/envs/polyglot/share/julia/base/array.jl:2479\n\
    \    filter(::Any, !Matched::AbstractDict) at ~/.conda/envs/polyglot/share/julia/base/abstractdict.jl:434\n\
    \    ...\n  Stacktrace:\n   [1] filter_integers(values::Vector{Any})\n     @ Main\
    \ /tmp/tmpaw2p6bib.jl:8\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpaw2p6bib.jl:15 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpaw2p6bib.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpaw2p6bib.jl:16\n  Test threw exception\n  Expression:\
    \ candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9]\n  MethodError: no\
    \ method matching filter(::Vector{Any}, ::typeof(isinteger), ::String)\n  Closest\
    \ candidates are:\n    filter(::Any, !Matched::Tuple) at ~/.conda/envs/polyglot/share/julia/base/tuple.jl:363\n\
    \    filter(::Any, !Matched::Array{T, N}) where {T, N} at ~/.conda/envs/polyglot/share/julia/base/array.jl:2479\n\
    \    filter(::Any, !Matched::AbstractDict) at ~/.conda/envs/polyglot/share/julia/base/abstractdict.jl:434\n\
    \    ...\n  Stacktrace:\n   [1] filter_integers(values::Vector{Any})\n     @ Main\
    \ /tmp/tmpaw2p6bib.jl:8\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpaw2p6bib.jl:16 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpaw2p6bib.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpaw2p6bib.jl:17\n  T"
  timestamp: 1660013350
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    values = map(x -> tryparse(x, Int64), values)\n    values = filter(values->isa(x,\
    \ Int64), values)\n    values = filter(values->!isa(x, Dict), values)\n    values\
    \ = filter(values->!isa(x, Vector), values)\n    return values\nend\n</cell>\n\
    <code language=julia-0.6>\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\
    \t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4,\
    \ Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3,\
    \ 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpuk9ss_ok.jl:14\nin expression starting at\
    \ /tmp/tmpuk9ss_ok.jl:14\n"
  stdout: ''
  timestamp: 1660013347
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    if values isa AbstractVector{Any} || values isa AbstractMatrix{Any} \n\
    \        error(\"vector type not supported\")\n    end\n    integers = Set.(each(values))\n\
    \    return filter(x -> x isa Int || x isa Int64, integers)\nend\n</cell>\n<code\
    \ language=julia-1.1>\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\
    \t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4,\
    \ Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3,\
    \ 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpo6ffkfh2.jl:14\nin expression starting at\
    \ /tmp/tmpo6ffkfh2.jl:14\n"
  stdout: ''
  timestamp: 1660013347
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    vec = Vector{Int64}()\n    for value in values\n        push!(vec, Int64(value))\n\
    \    end\n    vec\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\
    \t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4,\
    \ Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3,\
    \ 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 2 errored,
    0 broken.

    in expression starting at /tmp/tmp14rrlhnv.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmp14rrlhnv.jl:20\n  Test threw exception\n\
    \  Expression: candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9]\n  MethodError:\
    \ no method matching Int64(::Dict{Any, Any})\n  Closest candidates are:\n    (::Type{T})(!Matched::AbstractChar)\
    \ where T<:Union{Int32, Int64} at ~/.conda/envs/polyglot/share/julia/base/char.jl:51\n\
    \    (::Type{T})(!Matched::AbstractChar) where T<:Union{AbstractChar, Number}\
    \ at ~/.conda/envs/polyglot/share/julia/base/char.jl:50\n    (::Type{T})(!Matched::BigInt)\
    \ where T<:Union{Int128, Int16, Int32, Int64, Int8} at ~/.conda/envs/polyglot/share/julia/base/gmp.jl:357\n\
    \    ...\n  Stacktrace:\n   [1] filter_integers(values::Vector{Any})\n     @ Main\
    \ /tmp/tmp14rrlhnv.jl:10\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp14rrlhnv.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp14rrlhnv.jl:18\ntest set:\
    \ Error During Test at /tmp/tmp14rrlhnv.jl:21\n  Test threw exception\n  Expression:\
    \ candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3]\n  MethodError: no method\
    \ matching Int64(::String)\n  Closest candidates are:\n    (::Type{T})(!Matched::AbstractChar)\
    \ where T<:Union{Int32, Int64} at ~/.conda/envs/polyglot/share/julia/base/char.jl:51\n\
    \    (::Type{T})(!Matched::AbstractChar) where T<:Union{AbstractChar, Number}\
    \ at ~/.conda/envs/polyglot/share/julia/base/char.jl:50\n    (::Type{T})(!Matched::BigInt)\
    \ where T<:Union{Int128, Int16, Int32, Int64, Int8} at ~/.conda/envs/polyglot/share/julia/base/gmp.jl:357\n\
    \    ...\n  Stacktrace:\n   [1] filter_integers(values::Vector{Any})\n     @ Main\
    \ /tmp/tmp14rrlhnv.jl:10\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp14rrlhnv.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   "
  timestamp: 1660013350
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    if isa(values, Vector{Int64}):\n        return values\n    else:\n   \
    \     return [i for i in values if isa(i, Int64)]\n    end\nend\n</cell>\n<code\
    \ language=julia-1.4>\nfilter_integers([\"a\", 3.14, 5])\n</cell>\n<text>\nfilter_list\n\
    using Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpl1gbsi4f.jl:9\nin expression starting at /tmp/tmpl1gbsi4f.jl:9\n"
  stdout: ''
  timestamp: 1660013348
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    filter(isinteger)(values) \nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmp34gf42q7.jl:12

    '
  stdout: "test set: Error During Test at /tmp/tmp34gf42q7.jl:15\n  Test threw exception\n\
    \  Expression: candidate(Vector{Any}([])) == Vector{Int64}([])\n  MethodError:\
    \ no method matching filter(::typeof(isinteger))\n  Closest candidates are:\n\
    \    filter(::Any, !Matched::Tuple) at ~/.conda/envs/polyglot/share/julia/base/tuple.jl:363\n\
    \    filter(::Any, !Matched::Array{T, N}) where {T, N} at ~/.conda/envs/polyglot/share/julia/base/array.jl:2479\n\
    \    filter(::Any, !Matched::AbstractDict) at ~/.conda/envs/polyglot/share/julia/base/abstractdict.jl:434\n\
    \    ...\n  Stacktrace:\n   [1] filter_integers(values::Vector{Any})\n     @ Main\
    \ /tmp/tmp34gf42q7.jl:8\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp34gf42q7.jl:15 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp34gf42q7.jl:14\ntest set:\
    \ Error During Test at /tmp/tmp34gf42q7.jl:16\n  Test threw exception\n  Expression:\
    \ candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9]\n  MethodError: no\
    \ method matching filter(::typeof(isinteger))\n  Closest candidates are:\n   \
    \ filter(::Any, !Matched::Tuple) at ~/.conda/envs/polyglot/share/julia/base/tuple.jl:363\n\
    \    filter(::Any, !Matched::Array{T, N}) where {T, N} at ~/.conda/envs/polyglot/share/julia/base/array.jl:2479\n\
    \    filter(::Any, !Matched::AbstractDict) at ~/.conda/envs/polyglot/share/julia/base/abstractdict.jl:434\n\
    \    ...\n  Stacktrace:\n   [1] filter_integers(values::Vector{Any})\n     @ Main\
    \ /tmp/tmp34gf42q7.jl:8\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp34gf42q7.jl:16 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp34gf42q7.jl:14\ntest set:\
    \ Error During Test at /tmp/tmp34gf42q7.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([3, \"c"
  timestamp: 1660013350
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    if any(isa(value,Int) for value in values) \n        filter(x -> x >=\
    \ 0, values)\n    else \n        values\n    end\nend\n</code>\n<|/ a dscore=2\
    \ tags=julia |>\n<| a tags=julia |>\nIf you don't mind adding dependencies (IJulia\
    \ seems to be the most popular one)\n<code>\nusing IJulia\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsorryjum.jl:14\nin expression starting at\
    \ /tmp/tmpsorryjum.jl:14\n"
  stdout: ''
  timestamp: 1660013347
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    if length(values) < 1\n        return values\n    end\n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t\
    @test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4,\
    \ Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3,\
    \ 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpfsjr1xrj.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpfsjr1xrj.jl:1\n\
    in expression starting at /tmp/tmpfsjr1xrj.jl:1\n"
  stdout: ''
  timestamp: 1660013347
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return filter(values, x -> typeof(x) == Int64)\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_integers([\"a\", 3.14, 5])\n</cell>\n<text>\n3. Define a function for filtering\
    \ a list of strings\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\
    \t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4,\
    \ Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3,\
    \ 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdmwhfyoe.jl:10\nin expression starting at\
    \ /tmp/tmpdmwhfyoe.jl:10\n"
  stdout: ''
  timestamp: 1660013347
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    values = filter(values, x -> isa(x, Int))\n    return map(x -> Int64(x),\
    \ values)\nend\n</cell>\n<code language=julia-1.5>\njulia_filter(1:10)\n</cell>\n\
    <code language=julia-1.5>\nfilter_integers(1:10)\n</cell>\n<text>\n@filter_vector\n\
    using Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwk6zngc3.jl:11\nin expression starting at\
    \ /tmp/tmpwk6zngc3.jl:11\n"
  stdout: ''
  timestamp: 1660013347
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return filter(values, x -> isa(x, Int64))\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmp7s_bb4lu.jl:12

    '
  stdout: "test set: Error During Test at /tmp/tmp7s_bb4lu.jl:15\n  Test threw exception\n\
    \  Expression: candidate(Vector{Any}([])) == Vector{Int64}([])\n  MethodError:\
    \ no method matching filter(::Vector{Any}, ::var\"#1#2\")\n  Closest candidates\
    \ are:\n    filter(::Any, !Matched::Tuple) at ~/.conda/envs/polyglot/share/julia/base/tuple.jl:363\n\
    \    filter(::Any, !Matched::Array{T, N}) where {T, N} at ~/.conda/envs/polyglot/share/julia/base/array.jl:2479\n\
    \    filter(::Any, !Matched::AbstractDict) at ~/.conda/envs/polyglot/share/julia/base/abstractdict.jl:434\n\
    \    ...\n  Stacktrace:\n   [1] filter_integers(values::Vector{Any})\n     @ Main\
    \ /tmp/tmp7s_bb4lu.jl:8\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp7s_bb4lu.jl:15 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp7s_bb4lu.jl:14\ntest set:\
    \ Error During Test at /tmp/tmp7s_bb4lu.jl:16\n  Test threw exception\n  Expression:\
    \ candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9]\n  MethodError: no\
    \ method matching filter(::Vector{Any}, ::var\"#1#2\")\n  Closest candidates are:\n\
    \    filter(::Any, !Matched::Tuple) at ~/.conda/envs/polyglot/share/julia/base/tuple.jl:363\n\
    \    filter(::Any, !Matched::Array{T, N}) where {T, N} at ~/.conda/envs/polyglot/share/julia/base/array.jl:2479\n\
    \    filter(::Any, !Matched::AbstractDict) at ~/.conda/envs/polyglot/share/julia/base/abstractdict.jl:434\n\
    \    ...\n  Stacktrace:\n   [1] filter_integers(values::Vector{Any})\n     @ Main\
    \ /tmp/tmp7s_bb4lu.jl:8\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp7s_bb4lu.jl:16 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp7s_bb4lu.jl:14\ntest set:\
    \ Error During Test at /tmp/tmp7s_bb4lu.jl:17\n  Test threw exception\n  Expression:\
    \ ca"
  timestamp: 1660013350
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    \"\"\"Filter given vector of any jlthon values only for integers\n   \
    \ >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpck0t9sky.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpck0t9sky.jl:1\n\
    in expression starting at /tmp/tmpck0t9sky.jl:1\n"
  stdout: ''
  timestamp: 1660013347
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    if length(values)==1 || any(isinteger(x) for x in values) \n    then return\
    \ values\n    else return filter_integers(map(x->isinteger?x:x[1], values)) \n\
    \    end\nend\n</code>\nThis also handles any kind of object in the values vector\n\
    <|/ a |>\n<| a tags=julia |>\nI came up with the following solution for Julia\
    \ 0.5:\n<code>\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\
    \t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4,\
    \ Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3,\
    \ 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpmgmzf1j7.jl:9\nin expression starting at /tmp/tmpmgmzf1j7.jl:9\n"
  stdout: ''
  timestamp: 1660013348
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    if length(values) <= 0\n        throw(ArgumentError(\"Invalid input\"\
    ))\n    end\n    # If the values is empty return an empty vector\n    if length(values)\
    \ == 0\n        Vector{Int64}()\n    end\n    # If the values is one element return\
    \ that element\n    if length(values) == 1\n        push!(values, 1)\n       \
    \ return values[1]\n    end\n    \n    filter!(values, x -> x isa Int64)\n   \
    \ \nend\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpf3ounoa6.jl:26

    '
  stdout: "test set: Error During Test at /tmp/tmpf3ounoa6.jl:29\n  Test threw exception\n\
    \  Expression: candidate(Vector{Any}([])) == Vector{Int64}([])\n  ArgumentError:\
    \ Invalid input\n  Stacktrace:\n   [1] filter_integers(values::Vector{Any})\n\
    \     @ Main /tmp/tmpf3ounoa6.jl:9\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpf3ounoa6.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpf3ounoa6.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpf3ounoa6.jl:30\n  Test threw exception\n  Expression:\
    \ candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9]\n  MethodError: no\
    \ method matching filter!(::Vector{Any}, ::var\"#1#2\")\n  Closest candidates\
    \ are:\n    filter!(::Any, !Matched::AbstractVector) at ~/.conda/envs/polyglot/share/julia/base/array.jl:2525\n\
    \    filter!(::Any, !Matched::IdDict) at ~/.conda/envs/polyglot/share/julia/base/iddict.jl:193\n\
    \    filter!(::Any, !Matched::Base.IdSet) at ~/.conda/envs/polyglot/share/julia/base/idset.jl:28\n\
    \    ...\n  Stacktrace:\n   [1] filter_integers(values::Vector{Any})\n     @ Main\
    \ /tmp/tmpf3ounoa6.jl:21\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpf3ounoa6.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpf3ounoa6.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpf3ounoa6.jl:31\n  Test threw exception\n  Expression:\
    \ candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3]\n  MethodError: no method\
    \ matching filter!(::Vector{Any}, ::var\"#1#2\")\n  Closest candidates are:\n\
    \    filter!(::Any, !Matched::AbstractVector) at ~/.conda/envs/polyglot/share/julia/base/array.jl:2525\n\
    \    filter!(::Any, !Matched::IdDict) at ~/.conda/envs/polyglot/share/julia/base/iddict.jl:193\n\
    \    filter!(::Any, !Matched::Base.IdSet) at ~/.conda/"
  timestamp: 1660013352
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    values = [filter(x->isa(x, Int), values) for _ in 1:length(values)]\n\
    \    return values\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\
    \t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4,\
    \ Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3,\
    \ 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 2 errored,
    0 broken.

    in expression starting at /tmp/tmpehi0rxtf.jl:13

    '
  stdout: "test set: Error During Test at /tmp/tmpehi0rxtf.jl:17\n  Test threw exception\n\
    \  Expression: candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9]\n  MethodError:\
    \ Cannot `convert` an object of type Vector{Any} to an object of type Int64\n\
    \  Closest candidates are:\n    convert(::Type{T}, !Matched::Ptr) where T<:Integer\
    \ at ~/.conda/envs/polyglot/share/julia/base/pointer.jl:23\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:7\n\
    \    ...\n  Stacktrace:\n    [1] setindex!(A::Vector{Int64}, x::Vector{Any}, i1::Int64)\n\
    \      @ Base ./array.jl:903\n    [2] _unsafe_copyto!(dest::Vector{Int64}, doffs::Int64,\
    \ src::Vector{Vector{Any}}, soffs::Int64, n::Int64)\n      @ Base ./array.jl:253\n\
    \    [3] unsafe_copyto!\n      @ ./array.jl:307 [inlined]\n    [4] _copyto_impl!\n\
    \      @ ./array.jl:331 [inlined]\n    [5] copyto!\n      @ ./array.jl:317 [inlined]\n\
    \    [6] copyto!\n      @ ./array.jl:343 [inlined]\n    [7] copyto_axcheck!\n\
    \      @ ./abstractarray.jl:1104 [inlined]\n    [8] Vector{Int64}(x::Vector{Vector{Any}})\n\
    \      @ Base ./array.jl:563\n    [9] convert(#unused#::Type{Vector{Int64}}, a::Vector{Vector{Any}})\n\
    \      @ Base ./array.jl:554\n   [10] filter_integers(values::Vector{Any})\n \
    \     @ Main /tmp/tmpehi0rxtf.jl:9\n   [11] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [12] macro expansion\n      @ /tmp/tmpehi0rxtf.jl:17 [inlined]\n\
    \   [13] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [14] top-level scope\n      @ /tmp/tmpehi0rxtf.jl:15\ntest set:\
    \ Error During Test at /tmp/tmpehi0rxtf.jl:18\n  Test threw exception\n  Expression:\
    \ candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3]\n  MethodError: Cannot\
    \ `convert` an object of type Vector{Any} to an object of type Int64\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::Ptr) where T<:Integer at ~/.conda/envs/polyglot/s"
  timestamp: 1660013352
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return collect(values(isa(x, Int64) ? x : throw(ArgumentError(\"only integers\
    \ are accepted\"))))\nend\n</cell>\n<code language=julia-0.3>\n#export\nusing\
    \ Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpeeruhm1l.jl:10\nin expression starting at\
    \ /tmp/tmpeeruhm1l.jl:10\n"
  stdout: ''
  timestamp: 1660013349
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    vec = filter(values, isinteger)\n    if length(vec)==0\n        return\
    \ vec\n    end\n    return vec - Int64(first(vec))\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmprdzdtspm.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmprdzdtspm.jl:19\n  Test threw exception\n\
    \  Expression: candidate(Vector{Any}([])) == Vector{Int64}([])\n  MethodError:\
    \ no method matching filter(::Vector{Any}, ::typeof(isinteger))\n  Closest candidates\
    \ are:\n    filter(::Any, !Matched::Tuple) at ~/.conda/envs/polyglot/share/julia/base/tuple.jl:363\n\
    \    filter(::Any, !Matched::Array{T, N}) where {T, N} at ~/.conda/envs/polyglot/share/julia/base/array.jl:2479\n\
    \    filter(::Any, !Matched::AbstractDict) at ~/.conda/envs/polyglot/share/julia/base/abstractdict.jl:434\n\
    \    ...\n  Stacktrace:\n   [1] filter_integers(values::Vector{Any})\n     @ Main\
    \ /tmp/tmprdzdtspm.jl:8\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmprdzdtspm.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmprdzdtspm.jl:18\ntest set:\
    \ Error During Test at /tmp/tmprdzdtspm.jl:20\n  Test threw exception\n  Expression:\
    \ candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9]\n  MethodError: no\
    \ method matching filter(::Vector{Any}, ::typeof(isinteger))\n  Closest candidates\
    \ are:\n    filter(::Any, !Matched::Tuple) at ~/.conda/envs/polyglot/share/julia/base/tuple.jl:363\n\
    \    filter(::Any, !Matched::Array{T, N}) where {T, N} at ~/.conda/envs/polyglot/share/julia/base/array.jl:2479\n\
    \    filter(::Any, !Matched::AbstractDict) at ~/.conda/envs/polyglot/share/julia/base/abstractdict.jl:434\n\
    \    ...\n  Stacktrace:\n   [1] filter_integers(values::Vector{Any})\n     @ Main\
    \ /tmp/tmprdzdtspm.jl:8\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmprdzdtspm.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmprdzdtspm.jl:18\ntest set:\
    \ Error During Test at /tmp/tmprdzdtspm.jl:21\n  Test threw exception\n"
  timestamp: 1660013352
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    filtered = Int64[i for (i, value) in enumerate(values) if isinteger(value)]\n\
    \    return filtered\nend\n</cell>\n<text>\nA more concise implementation:\nusing\
    \ Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpo_un4yjx.jl:11\nin expression starting at\
    \ /tmp/tmpo_un4yjx.jl:11\n"
  stdout: ''
  timestamp: 1660013349
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    \n    \n    @assert length(values) > 0 \"There must be some values to\
    \ be filtered\"\n    @assert all(type(x) == Int64 for x in values) \"all values\
    \ must be of type Int64\"\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\
    \t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4,\
    \ Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3,\
    \ 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpqwa9cmnp.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpqwa9cmnp.jl:1\n\
    in expression starting at /tmp/tmpqwa9cmnp.jl:1\n"
  stdout: ''
  timestamp: 1660013349
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    l = length(values)\n    filter = filter(x->isint(x),values)\n    return\
    \ filter == true? \n        Vector{Int64}(undef, l)\n        :\n        filter(x\
    \ -> isint(x), values)\nend\n</code>\n<|/ a tags=julia |>\n<| a |>\nI believe\
    \ you're looking for isnat. \n<code>\njulia> isnat(-0)\ntrue\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: space required before \"?\" operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2tq2_mi7.jl:10\nin expression starting at\
    \ /tmp/tmp2tq2_mi7.jl:10\n"
  stdout: ''
  timestamp: 1660013349
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    for value in values\n        match(value) do \n            true -> return\
    \ value\n            false -> return nothing\n        end\n    end\nend\n</code>\n\
    The most important part of this is that the compiler sees that you are always\
    \ returning a single element and thus can optimize it out.\n<|/ a dscore=2 |>\n\
    <| c |>\nThis code works, but it might run slower than the accepted answer.  Try\
    \ `filter_integers([1, 2.0, 3])` and you'll see that the accepted answer gets\
    \ it right (it filters out `2.0`, while your version skips `3`).  Also, please\
    \ don't use `Vector{Any}` unless you really need the performance gains of `Any`.\
    \  `Any` is just an alias for `AnyRef` anyway, and `AnyRef` is basically the same\
    \ as `Any`, but with some additional overhead for type checking.  If you don't\
    \ need type checking, just use a `Vector` (or whatever type you need).\n<|/ c\
    \ |>\n<| c |>\n, true, I did some benchmarking and it seems that your answer is\
    \ indeed faster. However the accepted answer might be easier to read. I'll update\
    \ the answer accordingly.\n<|/ c |>\n<| a tags=julia,arrays |>\nThis might be\
    \ a bit late, but here's a simple solution that will work with arbitrary collections,\
    \ not just arrays:\n<code>\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\
    \t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4,\
    \ Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3,\
    \ 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"true\" is not a valid function argument name\
    \ around /tmp/tmpehc6nkr7.jl:10\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpehc6nkr7.jl:1\n\
    in expression starting at /tmp/tmpehc6nkr7.jl:1\n"
  stdout: ''
  timestamp: 1660013349
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    filter(values, is_integer)\nend\n</code>\n<|/ a tags=julia,performance,arrays,numpy,list\
    \ |>\n<| a dscore=3 tags=julia,performance,arrays,numpy,list |>\nI liked some\
    \ of the suggestions here and wanted to contribute a solution that doesn't require\
    \ any packages and avoids creating an intermediate array if possible.\n<code>\n\
    using Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp14xc7w9y.jl:10\nin expression starting at\
    \ /tmp/tmp14xc7w9y.jl:10\n"
  stdout: ''
  timestamp: 1660013349
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    for i in values\n        if is_integer(i)\n            return [i]\n  \
    \  end\n    return []\nend\n</code>\n<|/ a dscore=1 |>\n<| a dscore=0 |>\nTo filter\
    \ any type from array, you can apply filter in comprehension\n<code>\njulia> [i\
    \ for i in filter(typeof(i)<:Integer, [1,2,3,4,5]) if (typeof(i)<:Type{String})]\n\
    5-element Array{Int64,1}:\n 1\n 2\n 3\n</code>\n<|/ a tags=julia,types |>\n<|\
    \ a tags=julia,types |>\nHere's another way to do it (also assuming you want only\
    \ integers, since you're checking for a type).\n<code>\njulia> function filter_integers(x)\n\
    \           for i in eachindex(x)\n               if typeof(x[i]) == Int\n   \
    \                return x[i]\n               end\n           end\n       end\n\
    using Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpm_vdnb87.jl:14\nin expression starting at\
    \ /tmp/tmpm_vdnb87.jl:14\n"
  stdout: ''
  timestamp: 1660013349
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    filter_values(values, x -> x == x == x % 1)\nend\n</cell>\n<code language=julia-1.5>\n\
    @doc filter_integers\n</cell>\n<text>\nExercise 15\nusing Test\n\n@testset begin\n\
    \ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpo2esvt9r.jl:10\nin expression starting at\
    \ /tmp/tmpo2esvt9r.jl:10\n"
  stdout: ''
  timestamp: 1660013349
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    if !(values isa Vector{Int64}) && length(values) > 0 && typeof(values[1])\
    \ <: Integer\n        @warn(\"Type of given values was not an Integer. Filtering\
    \ skipped\")\n        return values\n    else\n        return filter(x -> isa(x,\
    \ Int64), values)\n    end\nend\n</cell>\n<text>\nWe can now use filter_integers\
    \ to filter our values before running our prediction pipeline\nusing Test\n\n\
    @testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdnph3krc.jl:15\nin expression starting at\
    \ /tmp/tmpdnph3krc.jl:15\n"
  stdout: ''
  timestamp: 1660013349
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    filter(x -> isa(x) == Int64, values)\nend\n</cell>\n<code language=julia-1.0>\n\
    filter_integers([1, 2, 3, \"abc\", Dict(), []])\n</cell>\n<text>\n\u2296 Filtering\
    \ functions\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t\
    @test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4,\
    \ Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3,\
    \ 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkh06m7xw.jl:10\nin expression starting at\
    \ /tmp/tmpkh06m7xw.jl:10\n"
  stdout: ''
  timestamp: 1660013349
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    filter(values, typeof(Int64) -> (x -> isa(x, Int64))\nend\n</code>\nThis\
    \ solution can easily be modified to allow for other types than Int64.\nThe second\
    \ method uses filter function with a predefined function f that checks if a given\
    \ value is an integer and is true only if x is Integer and x is of the type Int64\n\
    <code>\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpln1vdab6.jl:9\nin expression starting at /tmp/tmpln1vdab6.jl:9\n"
  stdout: ''
  timestamp: 1660013349
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    if length(values)==0 return Nil\n    if length(values)==1 return values[0]==number2integer(values[0])\
    \ ? [] : [values[0]]\n    for i in values\n        if is_number(i) \n        \
    \    if isinteger(i) \n                return i :: filter_integers(rest(values))\n\
    \            else \n                push!(IntegerVector,i)\n        end\n    end\n\
    \    return values\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\
    \t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4,\
    \ Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3,\
    \ 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0x_x4nas.jl:1\nin expression starting at /tmp/tmp0x_x4nas.jl:1\n"
  stdout: ''
  timestamp: 1660013349
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    filter(x -> typeof(x) <: Int64, values)\nend\n</cell>\n<text>\nfilter!\n\
    using Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxjqqu3eo.jl:10\nin expression starting at\
    \ /tmp/tmpxjqqu3eo.jl:10\n"
  stdout: ''
  timestamp: 1660013351
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n\"\"\"\n    Filter given vector of any jlthon values only for integers\n \
    \   >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n\"\"\"\nusing Test\n\n@testset begin\n\
    \ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp5x2l2y_o.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp5x2l2y_o.jl:1\n\
    in expression starting at /tmp/tmp5x2l2y_o.jl:1\n"
  stdout: ''
  timestamp: 1660013351
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return vec(filter(x -> is_integer(x), values))\nend\n</cell>\n<code language=julia-1.3>\n\
    @test filter_integers([1, 2, 3, 2.3, 4.4, 5.5, 6.6]). == vec(collect(1:10))\n\
    @test filter_integers([1, 2, 3, \"abc\", Dict(), []]). == vec(collect(1:10))\n\
    </cell>\n<text>\n3.1.5 Vectors vs Arrays\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfa1ged_0.jl:10\nin expression starting at\
    \ /tmp/tmpfa1ged_0.jl:10\n"
  stdout: ''
  timestamp: 1660013351
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    int_values = filter(x->isintegerx(x),values)\n    integers = filter(x->isintegerx(x),int_values)\n\
    \    return map(toint64,integers)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmppsn_c90e.jl:14

    '
  stdout: "test set: Error During Test at /tmp/tmppsn_c90e.jl:17\n  Test threw exception\n\
    \  Expression: candidate(Vector{Any}([])) == Vector{Int64}([])\n  UndefVarError:\
    \ toint64 not defined\n  Stacktrace:\n   [1] filter_integers(values::Vector{Any})\n\
    \     @ Main /tmp/tmppsn_c90e.jl:10\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmppsn_c90e.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmppsn_c90e.jl:16\ntest set:\
    \ Error During Test at /tmp/tmppsn_c90e.jl:18\n  Test threw exception\n  Expression:\
    \ candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9]\n  UndefVarError: isintegerx\
    \ not defined\n  Stacktrace:\n   [1] (::var\"#1#3\")(x::Int64)\n     @ Main /tmp/tmppsn_c90e.jl:8\n\
    \   [2] filter(f::var\"#1#3\", a::Vector{Any})\n     @ Base ./array.jl:2484\n\
    \   [3] filter_integers(values::Vector{Any})\n     @ Main /tmp/tmppsn_c90e.jl:8\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmppsn_c90e.jl:18 [inlined]\n\
    \   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmppsn_c90e.jl:16\ntest set:\
    \ Error During Test at /tmp/tmppsn_c90e.jl:19\n  Test threw exception\n  Expression:\
    \ candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3]\n  UndefVarError: isintegerx\
    \ not defined\n  Stacktrace:\n   [1] (::var\"#1#3\")(x::Int64)\n     @ Main /tmp/tmppsn_c90e.jl:8\n\
    \   [2] filter(f::var\"#1#3\", a::Vector{Any})\n     @ Base ./array.jl:2484\n\
    \   [3] filter_integers(values::Vector{Any})\n     @ Main /tmp/tmppsn_c90e.jl:8\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmppsn_c90e.jl:19 [inlined]\n\
    \   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] to"
  timestamp: 1660013353
- exit_code: 0
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return map(x -> Int(x), filter(x->isa(x, Int64), values))\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660013350
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    \n    \n    # Find only integers in values\n    indices_to_filter = findall(x\
    \ -> isa(x::Int, Int64), values)\n    # Remove from values those values not belong\
    \ to {Int64}\n    filtered_values = values[indices_to_filter]\n    # Return new\
    \ set of filtered values\n    return filtered_values\nusing Test\n\n@testset begin\n\
    \ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp14tatx9x.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp14tatx9x.jl:1\n\
    in expression starting at /tmp/tmp14tatx9x.jl:1\n"
  stdout: ''
  timestamp: 1660013351
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    if isa(values[1], Vector)\n        filter_jl_integers(values)\n    else\n\
    \        filter_integers(values[1])\n    end\nend\n</code>\n<|/ a dscore=2 |>\n\
    <| c |>\nThis does not work for me, I'm still getting the error, could you please\
    \ help me to fix it?\n<|/ c |>\n<| c |>\n: it works for me just fine. Can you\
    \ explain what's wrong?\n<|/ c |>\n<| a dscore=1 |>\nA little late, but I came\
    \ across this question when searching for a way to filter the elements of an array,\
    \ based on the values of the elements in another array. Here's what I came up\
    \ with:\n<code>\nfilter_values(xs, ys) = filter((x, y) -> xs[end] == y || ys[end]\
    \ == x, xs, ys)\n</code>\nThis takes two arrays (which are vectors in the example\
    \ above), and returns a new array. \nThe first argument is the array you want\
    \ to filter (the xs array). In the second argument, the array you want to check\
    \ against (the ys array). \nThe third argument is optional and specifies the condition\
    \ to check for each element in the xs array. If the xs array element and the ys\
    \ array element match exactly, then that element of the xs array is kept. Otherwise,\
    \ the ys array element is kept. \nThe xs and ys arrays are assumed to be the same\
    \ length\n<|/ a tags=julia,arrays |>\n<| a tags=julia,arrays dscore=0 |>\nYou\
    \ could also use filter for this, as described in the docs:\n<code>\njulia> filter((x,y)\
    \ -> x == y ? true : false, 1:3, 1:3)\n3-element Array{Int64,1}:\n 1\n 2\n 3\n\
    using Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1ris8z8v.jl:14\nin expression starting at\
    \ /tmp/tmp1ris8z8v.jl:14\n"
  stdout: ''
  timestamp: 1660013351
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    # return integer values by casting to Int64\n    return Int64.values(values)\n\
    end\n</cell>\n<code language=julia-1.0>\n@test_throws ErrorException filter_integers(1.0)\n\
    </cell>\n<text>\nFilter given vector of any jlthon values only for integers\n\
    \    >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\nusing Test\n\n@testset begin\n\n\
    candidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqcx3uu5n.jl:11\nin expression starting at\
    \ /tmp/tmpqcx3uu5n.jl:11\n"
  stdout: ''
  timestamp: 1660013351
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    \n    values = values(:).filter(x -> isa(x, Int64))\n    \n    if length(values)\
    \ == 0\n        return values\n    \n    \n    return values[:min(Int(ceil(Int,\
    \ length(values) / 2)), 1)]\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpt01io5u7.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpt01io5u7.jl:1\n\
    in expression starting at /tmp/tmpt01io5u7.jl:1\n"
  stdout: ''
  timestamp: 1660013351
- exit_code: -1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    if length(values) < 1 \n        return values\n    end\n    \n    filtered\
    \ = vec(collect(values))\n    for i in filtered\n        if typeof(i) == Int64\
    \ \n            push!(filtered, i)\n        end\n    end\n    return filtered\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660013354
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    v = copy(values)\n    for i in v\n        if typeof(i) <: Int64\n    \
    \        delete!(v,i)\n        end\n    end\n    return v\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 2 errored,
    0 broken.

    in expression starting at /tmp/tmpdyx2x3gj.jl:18

    '
  stdout: "test set: Error During Test at /tmp/tmpdyx2x3gj.jl:22\n  Test threw exception\n\
    \  Expression: candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9]\n  MethodError:\
    \ no method matching delete!(::Vector{Any}, ::Int64)\n  Closest candidates are:\n\
    \    delete!(!Matched::IdDict{K}, ::Any) where K at ~/.conda/envs/polyglot/share/julia/base/iddict.jl:130\n\
    \    delete!(!Matched::Base.IdSet, ::Any) at ~/.conda/envs/polyglot/share/julia/base/idset.jl:23\n\
    \    delete!(!Matched::Dict, ::Any) at ~/.conda/envs/polyglot/share/julia/base/dict.jl:661\n\
    \    ...\n  Stacktrace:\n   [1] filter_integers(values::Vector{Any})\n     @ Main\
    \ /tmp/tmpdyx2x3gj.jl:11\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpdyx2x3gj.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpdyx2x3gj.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpdyx2x3gj.jl:23\n  Test threw exception\n  Expression:\
    \ candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3]\n  MethodError: no method\
    \ matching delete!(::Vector{Any}, ::Int64)\n  Closest candidates are:\n    delete!(!Matched::IdDict{K},\
    \ ::Any) where K at ~/.conda/envs/polyglot/share/julia/base/iddict.jl:130\n  \
    \  delete!(!Matched::Base.IdSet, ::Any) at ~/.conda/envs/polyglot/share/julia/base/idset.jl:23\n\
    \    delete!(!Matched::Dict, ::Any) at ~/.conda/envs/polyglot/share/julia/base/dict.jl:661\n\
    \    ...\n  Stacktrace:\n   [1] filter_integers(values::Vector{Any})\n     @ Main\
    \ /tmp/tmpdyx2x3gj.jl:11\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpdyx2x3gj.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpdyx2x3gj.jl:20\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    1      2      3\n"
  timestamp: 1660013354
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    \n    indices = []\n    integers = []\n    for value in values\n     \
    \   if is_integer(value)\n            integers push(value)\n        else\n   \
    \         indices push(value) \n        end\n    end\n    return indices filter\
    \ (x -> x in integers)\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\
    \t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4,\
    \ Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3,\
    \ 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"push\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpi1ip_8b6.jl:13\nin expression starting at /tmp/tmpi1ip_8b6.jl:13\n"
  stdout: ''
  timestamp: 1660013351
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    values = filter(values, x -> isa(x::Vector{Any}, Int))\n    values = filter(values,\
    \ x -> isa(x::Vector{Any}, Number))\n    values = filter(values, x -> isa(x::Vector{Any},\
    \ Union{Int,Number}))\n    return values\nend\n</code>\n<|/ a tags=julia,type-conversion\
    \ |>\n<| c |>\nNice trick with the `Union{Int,Number}` but I believe the problem\
    \ with the `Float` version is that it will also include `Float64` which could\
    \ be considered an integer.\n<|/ c |>\n<| a tags=julia,type-conversion dscore=0\
    \ |>\nI like using isinstance for these kinds of things, because it's more flexible.\
    \ You can create a wrapper for your isa call:\n<code>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0e8enghc.jl:13\nin expression starting at\
    \ /tmp/tmp0e8enghc.jl:13\n"
  stdout: ''
  timestamp: 1660013351
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    filter!(is_integer(values), values)\n    return values\nend\n</code>\n\
    <|/ a tags=julia |>\n<| c |>\nWhile this may answer the question, it would be\
    \ better to include some explanation of the code you provided in your answer.\n\
    <|/ c |>\n<| c |>\nThanks for the edit. I tried to give an explanation as to why\
    \ I was posting but realised the comment system is very limited in terms of formatting.\
    \ I've now added an explanation.\n<|/ c |>\n<| c |>\nIt works great to filter\
    \ the integers, is there a way I can convert those filtered values to an Int64?\n\
    <|/ c |>\n<| a |>\nIt should be noted that if your vector contains numbers that\
    \ are not of integer type, Julia will automatically wrap the numbers in integers\
    \ so you do not have to do this. For example:\n<code>\njulia> x = rand(0:10, 10);\n\
    using Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpknitxdbs.jl:11\nin expression starting at\
    \ /tmp/tmpknitxdbs.jl:11\n"
  stdout: ''
  timestamp: 1660013351
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    values = Int64[values]\n    return values\nend\n</cell>\n<code language=julia-1.4>\n\
    filter_integers([\"a\", 3.14, 5])\n</cell>\n<text>\nFunctions filter and map\n\
    The filter function returns a vector containing the elements that meet a predicate,\
    \ while map applies a given function to every element in a collection. Here is\
    \ an example:\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t\
    @test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4,\
    \ Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3,\
    \ 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgrbbxm7m.jl:11\nin expression starting at\
    \ /tmp/tmpgrbbxm7m.jl:11\n"
  stdout: ''
  timestamp: 1660013352
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    filter(values, isinteger) => filter(Int, values) \nend \n</cell>\n<text>\n\
    Exercise\nRewrite filter_integers using filter and isintger.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3u6hn8ib.jl:10\nin expression starting at\
    \ /tmp/tmp3u6hn8ib.jl:10\n"
  stdout: ''
  timestamp: 1660013352
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    v = copy(values)\n    for i in v \n        if is_integer(i)\n        \
    \    delete!(v, i)\n        end\n    end\n    v\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 2 errored,
    0 broken.

    in expression starting at /tmp/tmpjcj2_su8.jl:18

    '
  stdout: "test set: Error During Test at /tmp/tmpjcj2_su8.jl:22\n  Test threw exception\n\
    \  Expression: candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9]\n  UndefVarError:\
    \ is_integer not defined\n  Stacktrace:\n   [1] filter_integers(values::Vector{Any})\n\
    \     @ Main /tmp/tmpjcj2_su8.jl:10\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpjcj2_su8.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpjcj2_su8.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpjcj2_su8.jl:23\n  Test threw exception\n  Expression:\
    \ candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3]\n  UndefVarError: is_integer\
    \ not defined\n  Stacktrace:\n   [1] filter_integers(values::Vector{Any})\n  \
    \   @ Main /tmp/tmpjcj2_su8.jl:10\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpjcj2_su8.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpjcj2_su8.jl:20\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    1      2      3\n"
  timestamp: 1660013354
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    if isa(values, Vector{Any}) && all(isa(_, Integer) || isa(_, Number) for\
    \ _ in values)\n        # just return the ints\n        return map(x -> x, filter(values,\
    \ x -> isa(x, Integer) || isa(x, Number)))\n    else\n        return values\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t\
    @test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4,\
    \ Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3,\
    \ 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: all-underscore identifier used as rvalue\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjn1b3r6d.jl:1\nin expression starting at /tmp/tmpjn1b3r6d.jl:1\n"
  stdout: ''
  timestamp: 1660013352
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n  \n    if isa(values,Int64)\n        return values\n    \n    values = map(values,filter(x->isa(x,Int64),values))\n\
    \    \n    if length(values)==0\n        return values\n    \n    return collect(values(:)+1)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpghywcjxr.jl:1\nin expression starting at /tmp/tmpghywcjxr.jl:1\n"
  stdout: ''
  timestamp: 1660013352
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    \n    filter = Vector{Int64}()\n    for val in values\n        if isa(val,\
    \ Int64) && val isa Real\n            push!(filter, val)\n        end\n    end\n\
    \    return filter\nend\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThanks, this helped\
    \ a lot and I understand now the issue. I've decided to use Jedi now. :)\n<|/\
    \ c |>\n<| c |>\n`Vector{Int}` is redundant since `Vector{Int64}` is just as fine.\n\
    <|/ c |>\n<| c |>\n- thanks, i see now that they were different things, will update\
    \ my answer\n<|/ c |>\n<| a dscore=2 |>\nThe Jedi module has a very comprehensive\
    \ set of utilities for working with JLD data. In the case of jld data containing\
    \ integers, a method exists that performs filtering for you (i.e., filter_integers).\n\
    <code>\nusing Jedi\nusing DataStructures\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsvr4gaiy.jl:17\nin expression starting at\
    \ /tmp/tmpsvr4gaiy.jl:17\n"
  stdout: ''
  timestamp: 1660013353
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    \n    values = filter(values, x -> isa(x, Int64))\n    if length(values)\
    \ < 1 \n        values \n    else\n        Int64[ x for value in values for x\
    \ in value] \n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\
    \t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4,\
    \ Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3,\
    \ 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpax78u4hf.jl:18

    '
  stdout: "test set: Error During Test at /tmp/tmpax78u4hf.jl:21\n  Test threw exception\n\
    \  Expression: candidate(Vector{Any}([])) == Vector{Int64}([])\n  MethodError:\
    \ no method matching filter(::Vector{Any}, ::var\"#1#3\")\n  Closest candidates\
    \ are:\n    filter(::Any, !Matched::Tuple) at ~/.conda/envs/polyglot/share/julia/base/tuple.jl:363\n\
    \    filter(::Any, !Matched::Array{T, N}) where {T, N} at ~/.conda/envs/polyglot/share/julia/base/array.jl:2479\n\
    \    filter(::Any, !Matched::AbstractDict) at ~/.conda/envs/polyglot/share/julia/base/abstractdict.jl:434\n\
    \    ...\n  Stacktrace:\n   [1] filter_integers(values::Vector{Any})\n     @ Main\
    \ /tmp/tmpax78u4hf.jl:9\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpax78u4hf.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpax78u4hf.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpax78u4hf.jl:22\n  Test threw exception\n  Expression:\
    \ candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9]\n  MethodError: no\
    \ method matching filter(::Vector{Any}, ::var\"#1#3\")\n  Closest candidates are:\n\
    \    filter(::Any, !Matched::Tuple) at ~/.conda/envs/polyglot/share/julia/base/tuple.jl:363\n\
    \    filter(::Any, !Matched::Array{T, N}) where {T, N} at ~/.conda/envs/polyglot/share/julia/base/array.jl:2479\n\
    \    filter(::Any, !Matched::AbstractDict) at ~/.conda/envs/polyglot/share/julia/base/abstractdict.jl:434\n\
    \    ...\n  Stacktrace:\n   [1] filter_integers(values::Vector{Any})\n     @ Main\
    \ /tmp/tmpax78u4hf.jl:9\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpax78u4hf.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpax78u4hf.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpax78u4hf.jl:23\n  Test threw exception\n  Expression:\
    \ ca"
  timestamp: 1660013356
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    v = filter((x -> isa(x, Int64)), values)\n    v = filter((x -> isa(x,\
    \ Vector{Any})), v)\n    return v\nend\n</cell>\n<code language=julia-0.5>\nfilter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n</cell>\n<code language=julia-0.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpuhw7meos.jl:12\nin expression starting at\
    \ /tmp/tmpuhw7meos.jl:12\n"
  stdout: ''
  timestamp: 1660013353
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    \n    indices = findall((x -> isa(x, Int64)) => values) \n    \n    return\
    \ values[indices]\nend\n</cell>\n<code language=julia-1.0>\n# test the function\n\
    filter_integers([\"a\", 3.14, 5])\n</cell>\n<text>\nFilter out jlthon values that\
    \ aren't integers\nIn the previous section, we looked at filtering out values\
    \ of a given type from vectors, but now we can also filter out values that are\
    \ not of a given type! In this section, we will implement a function that does\
    \ just that!\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t\
    @test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4,\
    \ Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3,\
    \ 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4dmkul2l.jl:13\nin expression starting at\
    \ /tmp/tmp4dmkul2l.jl:13\n"
  stdout: ''
  timestamp: 1660013352
- exit_code: 0
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    values = [v for v in values if isa(v,Int64)]\n    return values\nend\n\
    using Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660013352
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    filter!(values, is_integer)\nend\n</code>\n<|/ a tags=julia,arrays dscore=1\
    \ |>\n<| c |>\nThanks this is great but is there a way to get it to work if `values`\
    \ has different types?\n<|/ c |>\n<| c |>\nyou can also wrap the filtering in\
    \ a type function if necessary\n<|/ c |>\n<| c |>\n: yes you can, but you will\
    \ have to be more explicit in your requirements. What do you mean by \"different\
    \ types\"? What would be the desired behavior in that case? Do you only want to\
    \ keep elements of types that are subtypes of `Int`?\n<|/ c |>\n<| c |>\n: I updated\
    \ my answer to show you how to wrap the filtering in a type function.\n<|/ c |>\n\
    <| a |>\nAnother way to do it is to use a comprehension inside iselement\n<code>\n\
    julia> a = [1,3.14,5]\n3-element Array{Any,1}:\n 1\n 3.14\n 5\nusing Test\n\n\
    @testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgh6_2rv5.jl:10\nin expression starting at\
    \ /tmp/tmpgh6_2rv5.jl:10\n"
  stdout: ''
  timestamp: 1660013353
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n  result = Vector{Int64}()\n  for i in values\n    if type(i) == Int64\n \
    \     push!(result,i)\n    else\n      push!(result, i)\n    end\n  end\n  return\
    \ result\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t\
    @test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4,\
    \ Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3,\
    \ 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 2 errored,
    0 broken.

    in expression starting at /tmp/tmpwy2x0wib.jl:20

    '
  stdout: "test set: Error During Test at /tmp/tmpwy2x0wib.jl:24\n  Test threw exception\n\
    \  Expression: candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9]\n  UndefVarError:\
    \ type not defined\n  Stacktrace:\n   [1] filter_integers(values::Vector{Any})\n\
    \     @ Main /tmp/tmpwy2x0wib.jl:10\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwy2x0wib.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwy2x0wib.jl:22\ntest set:\
    \ Error During Test at /tmp/tmpwy2x0wib.jl:25\n  Test threw exception\n  Expression:\
    \ candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3]\n  UndefVarError: type\
    \ not defined\n  Stacktrace:\n   [1] filter_integers(values::Vector{Any})\n  \
    \   @ Main /tmp/tmpwy2x0wib.jl:10\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwy2x0wib.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwy2x0wib.jl:22\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    1      2      3\n"
  timestamp: 1660013354
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    vec = collect(values)\n    vec .= filter(x -> isa(x, Int64), vec)\n  \
    \  return vec .= collect(vec)\nend\n</cell>\n<code language=julia-0.5>\nfilter_integers([\"\
    a\", 3.14, 5])\n</cell>\n<text>\nFilter out non-integers from vector\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8yk5bt_h.jl:12\nin expression starting at\
    \ /tmp/tmp8yk5bt_h.jl:12\n"
  stdout: ''
  timestamp: 1660013353
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    if typeof(values)==Vector{Int64} \n        return values \n    else \n\
    \        error(\"filter_integers: argument should be vector of integers\")\n \
    \   end\nend\n</cell>\n<text>\n3. Sort Values\nusing Test\n\n@testset begin\n\n\
    candidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpp6qjedd5.jl:14\nin expression starting at\
    \ /tmp/tmpp6qjedd5.jl:14\n"
  stdout: ''
  timestamp: 1660013353
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    \n    filter_value = filter(values, is_integer)\n    \n    if filter_value.first\
    \ == nothing \n        throw(Exception(\"invalid type for filtering\"))\n    \n\
    \    return filter_value.second\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp_ccb5m17.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp_ccb5m17.jl:1\n\
    in expression starting at /tmp/tmp_ccb5m17.jl:1\n"
  stdout: ''
  timestamp: 1660013353
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    result = []\n    for x in values\n        if isa(x::Integer) \n      \
    \      result = [x] \n        else\n            result = [Int64(ceil(Int, x))]\n\
    \        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 2 errored,
    0 broken.

    in expression starting at /tmp/tmpp5giz3yj.jl:20

    '
  stdout: "test set: Error During Test at /tmp/tmpp5giz3yj.jl:24\n  Test threw exception\n\
    \  Expression: candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9]\n  ArgumentError:\
    \ isa: too few arguments (expected 2)\n  Stacktrace:\n   [1] filter_integers(values::Vector{Any})\n\
    \     @ Main /tmp/tmpp5giz3yj.jl:10\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpp5giz3yj.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpp5giz3yj.jl:22\ntest set:\
    \ Error During Test at /tmp/tmpp5giz3yj.jl:25\n  Test threw exception\n  Expression:\
    \ candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3]\n  ArgumentError: isa:\
    \ too few arguments (expected 2)\n  Stacktrace:\n   [1] filter_integers(values::Vector{Any})\n\
    \     @ Main /tmp/tmpp5giz3yj.jl:10\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpp5giz3yj.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpp5giz3yj.jl:22\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    1      2      3\n"
  timestamp: 1660013355
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    for value in values\n        if isa(value,Int64)\n            push!(integers,value)\n\
    \        end\n    end\n    integers\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_integers([1, 2, 3, \"abc\", Dict(), []])\n</cell>\n<text>\nFilter values\
    \ by given condition (i.e. keep only those integers greater than 3)\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprbud901t.jl:15\nin expression starting at\
    \ /tmp/tmprbud901t.jl:15\n"
  stdout: ''
  timestamp: 1660013353
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    result = copy(Int64[])\n    for value in values\n        if isa(value,Int64)\n\
    \            push!(result,value)\n        else\n            push!(result,0)\n\
    \        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmphbm_7i01.jl:20

    '
  stdout: "test set: Test Failed at /tmp/tmphbm_7i01.jl:24\n  Expression: candidate([4,\
    \ Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9]\n   Evaluated: [4, 0, 0, 0, 9, 0]\
    \ == [4, 9]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphbm_7i01.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphbm_7i01.jl:22\ntest set: Test\
    \ Failed at /tmp/tmphbm_7i01.jl:25\n  Expression: candidate([3, \"c\", 3, 3, \"\
    a\", \"b\"]) == [3, 3, 3]\n   Evaluated: [3, 0, 3, 3, 0, 0] == [3, 3, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphbm_7i01.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphbm_7i01.jl:22\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     2      3\n"
  timestamp: 1660013355
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    integer_values = filter(x->isa(x, Int64), values) \n    integer_values\
    \ = filter(x->!isa(x, Int64), integer_values) \n    return integer_values\nend\n\
    using Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp3hqt78h4.jl:14

    '
  stdout: "test set: Test Failed at /tmp/tmp3hqt78h4.jl:18\n  Expression: candidate([4,\
    \ Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9]\n   Evaluated: Int64[] == [4, 9]\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3hqt78h4.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3hqt78h4.jl:16\ntest set: Test\
    \ Failed at /tmp/tmp3hqt78h4.jl:19\n  Expression: candidate([3, \"c\", 3, 3, \"\
    a\", \"b\"]) == [3, 3, 3]\n   Evaluated: Int64[] == [3, 3, 3]\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3hqt78h4.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3hqt78h4.jl:16\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     2      3\n"
  timestamp: 1660013355
- exit_code: 0
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    length(values)\n    values = filter(x->isa(x, Int64), values)\n    length(values)\n\
    \    values\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\
    \t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4,\
    \ Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3,\
    \ 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660013353
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    values = values(Int64[])\n    \n    return values\nend\n</cell>\n<code\
    \ language=julia-1.3>\nusing DataStructures\nusing Test\n\n@testset begin\n\n\
    candidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp84rujhjx.jl:12\nin expression starting at\
    \ /tmp/tmp84rujhjx.jl:12\n"
  stdout: ''
  timestamp: 1660013354
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n   \n    filtered = Vector{Int64}()\n    \n    for el in values\n        el\
    \ = try\n            Int64(el)\n        catch ex\n            push!(filtered,\
    \ 0)\n        end\n    end\n    \n    return filtered\nend\n</cell>\n<code language=julia-1.5>\n\
    @time filter_integers(a)\n</cell>\n<text>\nThe filter function can filter a DataFrame\
    \ in a number of different ways.\nusing Test\n\n@testset begin\n\ncandidate =\
    \ filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpehz3lnwx.jl:21\nin expression starting at\
    \ /tmp/tmpehz3lnwx.jl:21\n"
  stdout: ''
  timestamp: 1660013354
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    values = [parse(Int, i) for i in values]\n    return filter(x -> x >=\
    \ 0, values)\nend\n</cell>\n<code language=julia-1.6>\n# Example filtering for\
    \ strings (see above)\nfilter_strings([\"a\", 3.14, 5])\n</cell>\n<code language=julia-1.6>\n\
    filter_strings([\"a\", 3.14, 5, \"abc\", Dict(), []])\n</cell>\n<code language=julia-1.6>\n\
    # filter from julia docs\n\"\"\"\nfilter(; p) applies p to all elements of xs.\n\
    if p is not a function, p should return a boolean.\n\"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpv_bml9gx.jl:11\nin expression starting at\
    \ /tmp/tmpv_bml9gx.jl:11\n"
  stdout: ''
  timestamp: 1660013354
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    if isa(values, Vector)\n        filtered_values = []\n        for v in\
    \ values\n            if isa(values, Vector)\n                filtered_values\
    \ += filter_integers(v)\n            elseif isa(values, Int64)\n             \
    \   filtered_values += [v]\n            end\n        end\n        return filtered_values\n\
    \    end\n    return values\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 2 errored,
    0 broken.

    in expression starting at /tmp/tmp2u2w2gfz.jl:23

    '
  stdout: "test set: Error During Test at /tmp/tmp2u2w2gfz.jl:27\n  Test threw exception\n\
    \  Expression: candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9]\n  MethodError:\
    \ no method matching filter_integers(::Int64)\n  Closest candidates are:\n   \
    \ filter_integers(!Matched::Vector{Any}) at /tmp/tmp2u2w2gfz.jl:7\n  Stacktrace:\n\
    \   [1] filter_integers(values::Vector{Any})\n     @ Main /tmp/tmp2u2w2gfz.jl:12\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp2u2w2gfz.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp2u2w2gfz.jl:25\ntest set:\
    \ Error During Test at /tmp/tmp2u2w2gfz.jl:28\n  Test threw exception\n  Expression:\
    \ candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3]\n  MethodError: no method\
    \ matching filter_integers(::Int64)\n  Closest candidates are:\n    filter_integers(!Matched::Vector{Any})\
    \ at /tmp/tmp2u2w2gfz.jl:7\n  Stacktrace:\n   [1] filter_integers(values::Vector{Any})\n\
    \     @ Main /tmp/tmp2u2w2gfz.jl:12\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp2u2w2gfz.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp2u2w2gfz.jl:25\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    1      2      3\n"
  timestamp: 1660013357
- exit_code: 0
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    filter!(x -> isa(x, Int64), values);\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660013353
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    if isa(values, Int64) \n        values \n    else\n        [x for x in\
    \ values if isa(x, Int64)]\n    end\nend\n</code>\nThe function filter_integers\
    \ will return a vector of the same type as your input vector but containing only\
    \ the values of the type Int64.\n<|/ a dscore=0 tags=julia,type-conversion |>\n\
    <| a dscore=0 tags=julia,type-conversion |>\nUsing \"isa\" is the way to go.\n\
    But I feel like there is another way in Julia to achieve the same.\nThe approach\
    \ that I would try is convert the string to a number and check if the number is\
    \ an integer.\n<code>\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\
    \t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4,\
    \ Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3,\
    \ 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpp9tla96f.jl:14\nin expression starting at\
    \ /tmp/tmpp9tla96f.jl:14\n"
  stdout: ''
  timestamp: 1660013354
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    if !isa(values, Vector{Any}) || length(values) < 1\n        return values\n\
    \    end\n    vals = filter_values(values, typeof(Int64))\n    if length(vals)\
    \ !=1\n        return values\n    end\n    Int64(vals[1])\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 2 errored,
    0 broken.

    in expression starting at /tmp/tmpamiqqr0f.jl:19

    '
  stdout: "test set: Error During Test at /tmp/tmpamiqqr0f.jl:23\n  Test threw exception\n\
    \  Expression: candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9]\n  UndefVarError:\
    \ filter_values not defined\n  Stacktrace:\n   [1] filter_integers(values::Vector{Any})\n\
    \     @ Main /tmp/tmpamiqqr0f.jl:11\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpamiqqr0f.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpamiqqr0f.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpamiqqr0f.jl:24\n  Test threw exception\n  Expression:\
    \ candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3]\n  UndefVarError: filter_values\
    \ not defined\n  Stacktrace:\n   [1] filter_integers(values::Vector{Any})\n  \
    \   @ Main /tmp/tmpamiqqr0f.jl:11\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpamiqqr0f.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpamiqqr0f.jl:21\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    1      2      3\n"
  timestamp: 1660013356
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    local result = Vector{Int64}()\n    for value in values\n        if type(value)\
    \ == Int64 \n            result.push(value)\n        elseif isa(value,dict)\n\
    \            result=union(result, filter_integers(value.keys))\n            result=union(result,\
    \ filter_integers(value.values))\n        elseif isa(value,Vector)\n         \
    \   result=union(result, filter_integers(value))\n        end\n    end\n    return\
    \ result\nend\n</cell>\n<code language=julia-1.5>\nfilter_integers([\"a\", 3.14,\
    \ 5])\n</cell>\n<text>\n3.4 Filter by function\nusing Test\n\n@testset begin\n\
    \ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgruk8ghg.jl:21\nin expression starting at\
    \ /tmp/tmpgruk8ghg.jl:21\n"
  stdout: ''
  timestamp: 1660013354
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    \n    if length(values)==1 && isa(values, Int64)\n        push!(values,\
    \ 0)\n    end\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t\
    @test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4,\
    \ Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3,\
    \ 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpjkrosllw.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjkrosllw.jl:1\n\
    in expression starting at /tmp/tmpjkrosllw.jl:1\n"
  stdout: ''
  timestamp: 1660013354
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return filter(values, isinteger)\nend\n</code>\n<|/ a dscore=2 |>\n<|\
    \ a |>\nYou can use the isint function from Julia.\n<code>\njulia> filter(x ->\
    \ isint(x), [1,2,3,4,\"x\"])\n3-element Vector{Int64}:\n 1\n 2\n 3\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfhoqkedr.jl:10\nin expression starting at\
    \ /tmp/tmpfhoqkedr.jl:10\n"
  stdout: ''
  timestamp: 1660013354
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    for v in values \n        if isa(v, Int64) \n        else \n         \
    \   throw(ArgumentError(\"Only integer types can be filtered for integers\"))\n\
    \    end\n    return values\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpm0djedd4.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpm0djedd4.jl:1\n\
    in expression starting at /tmp/tmpm0djedd4.jl:1\n"
  stdout: ''
  timestamp: 1660013354
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    local filteredValues::Vector{Int64}\n    filteredValues = []\n    for\
    \ element in values\n        if is_integer(element)\n            push!(filteredValues,\
    \ element)\n        end\n    end\n    return filteredValues\nend\n</cell>\n<text>\n\
    Filtering vectors of any jlthon values only for integers\nIn Julia, you can do\
    \ that easily by using the filter function. In the following example, we take\
    \ the same vector of integers as above and apply the function filter_integers\
    \ to it:\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4l9xnom3.jl:17\nin expression starting at\
    \ /tmp/tmp4l9xnom3.jl:17\n"
  stdout: ''
  timestamp: 1660013354
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    for value in values \n        if isa(value,Int64) \n            push!(values,value)\n\
    \        else \n            throw(ArgumentError(\"Only Integers allowed\"))\n\
    \    return values\nend\n</cell>\n<code language=julia-1.5>\n# Test for function\
    \ filter_integers\nfilter_integers([1, 2, 3, \"abc\", Dict(), []])\n</cell>\n\
    <text>\n@filter_integers is a macro that filters vector for only integers\nusing\
    \ Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzvslc8o5.jl:15\nin expression starting at\
    \ /tmp/tmpzvslc8o5.jl:15\n"
  stdout: ''
  timestamp: 1660013355
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    for v in values\n        if typeof(v) == Int \n        else v \n    end\n\
    end\n</code>\nThe nice thing about using type checking is that it saves the need\
    \ to use a try/catch block:\n<code>\n# filter vector of strings\nusing Test\n\n\
    @testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpc3554ip4.jl:13\nin expression starting at\
    \ /tmp/tmpc3554ip4.jl:13\n"
  stdout: ''
  timestamp: 1660013355
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    \n    int_value::Int64 = 1\n    \n    for value in values\n        if\
    \ value isa Int\n            int_value += 1\n        else\n            push!(result,\
    \ int_value)\n            int_value = int64(value)\n        end\n    end\n   \
    \ \n    push!(result, int_value)\n    \n    return result\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmp73jwu7yy.jl:26

    '
  stdout: "test set: Error During Test at /tmp/tmp73jwu7yy.jl:29\n  Test threw exception\n\
    \  Expression: candidate(Vector{Any}([])) == Vector{Int64}([])\n  UndefVarError:\
    \ result not defined\n  Stacktrace:\n   [1] filter_integers(values::Vector{Any})\n\
    \     @ Main /tmp/tmp73jwu7yy.jl:20\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp73jwu7yy.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp73jwu7yy.jl:28\ntest set:\
    \ Error During Test at /tmp/tmp73jwu7yy.jl:30\n  Test threw exception\n  Expression:\
    \ candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9]\n  UndefVarError: result\
    \ not defined\n  Stacktrace:\n   [1] filter_integers(values::Vector{Any})\n  \
    \   @ Main /tmp/tmp73jwu7yy.jl:15\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp73jwu7yy.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp73jwu7yy.jl:28\ntest set:\
    \ Error During Test at /tmp/tmp73jwu7yy.jl:31\n  Test threw exception\n  Expression:\
    \ candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3]\n  UndefVarError: result\
    \ not defined\n  Stacktrace:\n   [1] filter_integers(values::Vector{Any})\n  \
    \   @ Main /tmp/tmp73jwu7yy.jl:15\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp73jwu7yy.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp73jwu7yy.jl:28\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  timestamp: 1660013357
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return Int64[map(Int64, values) |> collect(filter(x->isa(x, Int64), values))]\n\
    end\n</cell>\n<text>\n3. Filter out anything that's not a string\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpc0pdbnns.jl:10\nin expression starting at\
    \ /tmp/tmpc0pdbnns.jl:10\n"
  stdout: ''
  timestamp: 1660013355
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    v = values::Vector{Any}\n    filter!(x -> isa(x::Int, Integer), v)\n \
    \   v\nend\n</cell>\n<code language=julia-0.4>\nfilter_integers([1, 2, 3, \"abc\"\
    , Dict(), []])\n</cell>\n<code language=julia-0.4>\nfilter_integers([\"a\", 3.14,\
    \ 5])\n</cell>\n<text>\nFiltering Arrays\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxr665ulw.jl:12\nin expression starting at\
    \ /tmp/tmpxr665ulw.jl:12\n"
  stdout: ''
  timestamp: 1660013355
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    filter(is_int8, values)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpmw9xeonr.jl:12

    '
  stdout: "test set: Error During Test at /tmp/tmpmw9xeonr.jl:15\n  Test threw exception\n\
    \  Expression: candidate(Vector{Any}([])) == Vector{Int64}([])\n  UndefVarError:\
    \ is_int8 not defined\n  Stacktrace:\n   [1] filter_integers(values::Vector{Any})\n\
    \     @ Main /tmp/tmpmw9xeonr.jl:8\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpmw9xeonr.jl:15 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpmw9xeonr.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpmw9xeonr.jl:16\n  Test threw exception\n  Expression:\
    \ candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9]\n  UndefVarError: is_int8\
    \ not defined\n  Stacktrace:\n   [1] filter_integers(values::Vector{Any})\n  \
    \   @ Main /tmp/tmpmw9xeonr.jl:8\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpmw9xeonr.jl:16 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpmw9xeonr.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpmw9xeonr.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3]\n  UndefVarError: is_int8\
    \ not defined\n  Stacktrace:\n   [1] filter_integers(values::Vector{Any})\n  \
    \   @ Main /tmp/tmpmw9xeonr.jl:8\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpmw9xeonr.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpmw9xeonr.jl:14\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  timestamp: 1660013357
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    filtered_values = []\n    for value in values\n        if is_number(value)\n\
    \            push!(filtered_values, value.round())\n        else\n           \
    \ push!(filtered_values, value)\n        end\n    end\n    return filtered_values\n\
    end\n</code>\n<|/ a tags=julia |>\n<| a tags=julia |>\nAs the question asked for\
    \ a function that returns a vector of integer values, I thought I'd throw in my\
    \ two cents.\n<code>\nusing Dates\nusing Test\n\n@testset begin\n\ncandidate =\
    \ filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfxkt83bj.jl:18\nin expression starting at\
    \ /tmp/tmpfxkt83bj.jl:18\n"
  stdout: ''
  timestamp: 1660013356
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    ret = Int64[]\n    for value in values\n       if isa(value,Int64)\n \
    \          push!(ret,value)\n       elseif isa(value,Int)\n           push!(ret,Int64(value))\n\
    \       else\n           push!(ret,value)\n       end\n    end\n    return ret\n\
    end\n</cell>\n<text>\nFilter out invalid arguments\nFilter out invalid arguments,\
    \ for example strings and other invalid types. A good example is an empty list\
    \ []\nFilter out invalid types, for example strings, numbers, and booleans \n\
    You can use the isa function to filter out invalid types\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcex2ms59.jl:20\nin expression starting at\
    \ /tmp/tmpcex2ms59.jl:20\n"
  stdout: ''
  timestamp: 1660013356
- exit_code: 0
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    filter((x -> isa(x, Int64)), values)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660013355
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    integer = Int64.@cast(values)\n    \n    indices = findall(integer .>\
    \ 0) # returns indices\n    \n    integer[indices] .= 0 # return only integer\
    \ values\n    return integer\nend\n</cell>\n<text>\n@find\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: type DataType has no field @cast\nStacktrace:\n [1] getproperty(x::Type,\
    \ f::Symbol)\n   @ Base ./Base.jl:37\n [2] #macroexpand#51\n   @ ./expr.jl:115\
    \ [inlined]\n [3] macroexpand\n   @ ./expr.jl:114 [inlined]\n [4] docm(source::LineNumberNode,\
    \ mod::Module, meta::Any, ex::Any, define::Bool) (repeats 2 times)\n   @ Base.Docs\
    \ ./docs/Docs.jl:537\n [5] var\"@doc\"(::LineNumberNode, ::Module, ::String, ::Vararg{Any})\n\
    \   @ Core ./boot.jl:517\nin expression starting at /tmp/tmp7tv73vbg.jl:1\nin\
    \ expression starting at /tmp/tmp7tv73vbg.jl:1\n"
  stdout: ''
  timestamp: 1660013357
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    integer = Vector{Int64}()\n    for x in values\n        isinteger(x) ?\
    \ (integer += x):nothing\n    end\n    return integer\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: space required before colon in \"?\" expression\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmpvlojrxsu.jl:10\nin expression\
    \ starting at /tmp/tmpvlojrxsu.jl:10\n"
  stdout: ''
  timestamp: 1660013356
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    if isa(values, JLJSONValue) \n    values = getall(values)\n    \n    values\
    \ = filter(values, x -> isa(x, Int64))\n    \n    values = filter(values, x ->\
    \ isa(x, Number))\n    \n    return values\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpspg57pxx.jl:20

    '
  stdout: "test set: Error During Test at /tmp/tmpspg57pxx.jl:23\n  Test threw exception\n\
    \  Expression: candidate(Vector{Any}([])) == Vector{Int64}([])\n  UndefVarError:\
    \ JLJSONValue not defined\n  Stacktrace:\n   [1] filter_integers(values::Vector{Any})\n\
    \     @ Main /tmp/tmpspg57pxx.jl:8\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpspg57pxx.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpspg57pxx.jl:22\ntest set:\
    \ Error During Test at /tmp/tmpspg57pxx.jl:24\n  Test threw exception\n  Expression:\
    \ candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9]\n  UndefVarError: JLJSONValue\
    \ not defined\n  Stacktrace:\n   [1] filter_integers(values::Vector{Any})\n  \
    \   @ Main /tmp/tmpspg57pxx.jl:8\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpspg57pxx.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpspg57pxx.jl:22\ntest set:\
    \ Error During Test at /tmp/tmpspg57pxx.jl:25\n  Test threw exception\n  Expression:\
    \ candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3]\n  UndefVarError: JLJSONValue\
    \ not defined\n  Stacktrace:\n   [1] filter_integers(values::Vector{Any})\n  \
    \   @ Main /tmp/tmpspg57pxx.jl:8\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpspg57pxx.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpspg57pxx.jl:22\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  timestamp: 1660013358
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    integers = Int64[]\n    values = map(i->isinteger(i), values)\n    for\
    \ value in values\n        push!(integers, value) \n    end\n    return integers\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 2 errored,
    0 broken.

    in expression starting at /tmp/tmpywaqupmh.jl:17

    '
  stdout: "test set: Error During Test at /tmp/tmpywaqupmh.jl:21\n  Test threw exception\n\
    \  Expression: candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9]\n  MethodError:\
    \ no method matching isinteger(::Dict{Any, Any})\n  Closest candidates are:\n\
    \    isinteger(!Matched::Integer) at ~/.conda/envs/polyglot/share/julia/base/number.jl:20\n\
    \    isinteger(!Matched::Complex) at ~/.conda/envs/polyglot/share/julia/base/complex.jl:145\n\
    \    isinteger(!Matched::Rational) at ~/.conda/envs/polyglot/share/julia/base/rational.jl:265\n\
    \    ...\n  Stacktrace:\n    [1] (::var\"#1#2\")(i::Dict{Any, Any})\n      @ Main\
    \ /tmp/tmpywaqupmh.jl:9\n    [2] iterate\n      @ ./generator.jl:47 [inlined]\n\
    \    [3] collect_to!(dest::Vector{Bool}, itr::Base.Generator{Vector{Any}, var\"\
    #1#2\"}, offs::Int64, st::Int64)\n      @ Base ./array.jl:782\n    [4] collect_to_with_first!(dest::Vector{Bool},\
    \ v1::Bool, itr::Base.Generator{Vector{Any}, var\"#1#2\"}, st::Int64)\n      @\
    \ Base ./array.jl:760\n    [5] _collect(c::Vector{Any}, itr::Base.Generator{Vector{Any},\
    \ var\"#1#2\"}, #unused#::Base.EltypeUnknown, isz::Base.HasShape{1})\n      @\
    \ Base ./array.jl:754\n    [6] collect_similar\n      @ ./array.jl:653 [inlined]\n\
    \    [7] map\n      @ ./abstractarray.jl:2867 [inlined]\n    [8] filter_integers(values::Vector{Any})\n\
    \      @ Main /tmp/tmpywaqupmh.jl:9\n    [9] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmpywaqupmh.jl:21 [inlined]\n\
    \   [11] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [12] top-level scope\n      @ /tmp/tmpywaqupmh.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpywaqupmh.jl:22\n  Test threw exception\n  Expression:\
    \ candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3]\n  MethodError: no method\
    \ matching isinteger(::String)\n  Closest candidates are:\n    isinteger(!Matched::Integer)\
    \ at ~/.conda/envs/polyglot/share/julia/base/number.jl:20\n    isinteger(!Matched::Complex)\
    \ at ~/.conda/envs/polyglot/share/julia/base/complex.jl:145\n    isinteger(!Mat"
  timestamp: 1660013359
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    \n    return collect(values...).filter(x -> isa(typeof(x), Int64))\nend\
    \ filter_integers\n</code>\n<|/ a tags=julia,filter |>\n<| c |>\nPlease consider\
    \ marking your answer as accepted if it helped you out. :)\n<|/ c |>\n<| c |>\n\
    For your example code I would recommend the `findfirst` function: `findfirst(x->isa(typeof(x),\
    \ Int64), [\"a\", 3.14, 5])`.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nfilter( x ->\
    \ isa(typeof(x), Int64), collect([\"a\", 3.14, 5])\n</code>\n<|/ a tags=julia,filter\
    \ |>\n<| a |>\nFor your example code I would recommend the findfirst function\n\
    <code>\nfindfirst(x->isa(typeof(x), Int64), [\"a\", 3.14, 5])\n</code>\nas suggested\
    \ by-k\xF6nig, or\n<code>\nfindfirst(x->isa(typeof(x), Int64), [1, 2, 3, \"abc\"\
    , Dict(), []])\n</code>\nas suggested by-tang because it allows to specify which\
    \ vector is searched for. Also note that you can use isa for finding type of objects\
    \ (see Julia manual).\nFor example we can take your code and modify it a little\
    \ bit:\n<code>\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\
    \t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4,\
    \ Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3,\
    \ 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: extra token \"filter_integers\" after end of\
    \ expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp7lh37hwd.jl:10\n\
    in expression starting at /tmp/tmp7lh37hwd.jl:10\n"
  stdout: ''
  timestamp: 1660013356
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    values = [i for i in values if isa(i, Int64)]\n    return values\nend\n\
    </cell>\n<code language=julia-1.5>\n# TEST Filter given vector of any jlthon values\
    \ only for integers (5pts)\n@test filter_integers([\"a\", 3.14, 5]) == [5]\n@test\
    \ filter_integers([1, 2, 3, \"abc\", Dict(), []]) == [1, 2, 3]\n</cell>\n<text>\n\
    Exercise: Filter given vector of integers except integers 3 and 4\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjjm7ylj9.jl:11\nin expression starting at\
    \ /tmp/tmpjjm7ylj9.jl:11\n"
  stdout: ''
  timestamp: 1660013356
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    if length(values) == 0 \n        return values\n    elseif length(values)\
    \ == 1\n        try \n            Int(values[1])\n            push!(values, values[1])\n\
    \        catch \n            push!(values, 1)\n        end\n        return values\n\
    \    else\n        push!(values, 1)\n        return values\n    end\nend\n</cell>\n\
    <text>\nFilter out values from the given vector\nusing Test\n\n@testset begin\n\
    \ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_r315rqi.jl:23\nin expression starting at\
    \ /tmp/tmp_r315rqi.jl:23\n"
  stdout: ''
  timestamp: 1660013356
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    values = values.filter(isinteger)\n    values = values.filter(x -> isa(x,\
    \ Int64))\n    return values\nend\n</cell>\n<code language=julia-1.5>\n@time filter_integers(rand(1:10_000))\n\
    </cell>\n<text>\nTo find unique values\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7n7fi6tq.jl:12\nin expression starting at\
    \ /tmp/tmp7n7fi6tq.jl:12\n"
  stdout: ''
  timestamp: 1660013356
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    for value in values\n        if isa(value, Int64)\n            return\
    \ value \n    end\n    return []\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpg77cixuf.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpg77cixuf.jl:1\n\
    in expression starting at /tmp/tmpg77cixuf.jl:1\n"
  stdout: ''
  timestamp: 1660013356
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    for value in values \n        try\n            Int64(value)\n        \
    \    push!(values, Int64(value))\n        catch e\n        end\n    end\n    return\
    \ values\nend\n</code>\n<|/ a tags=julia |>\n<| c |>\nFor Julia v1.6.2 it needs\
    \ to be `push!(Int64(values), Int64(value))` instead of `push!(values, Int64(value))`\
    \ as `push!` expects a type to push into as a second parameter.\n<|/ c |>\n<|\
    \ a tags=julia |>\nJust to add to this: I've been doing some more digging into\
    \ this, and here's my two cents:\nThis issue is related to this issue on github:\
    \ https://github.com/JuliaLang/julia/issues/29693\nThe issue is basically that\
    \ for loops don't handle types in the same way as for and while loops do, namely\
    \ the loop doesn't know the type of values inside the loop, but rather what the\
    \ type of an iterator is. In other words, if we try something like\n<code>\na\
    \ = 1\nfor i in 1:5\n    a * 2\nend\n</code>\nThis won't work, because the iterator\
    \ will be Int64, so the loop will never execute because a is Int64, not Int64.\
    \ There are two possible workarounds for this issue:\n<code>\na = 1\nfor i in\
    \ 1:5\n    push!(i, a * 2)\nend\n</code>\nOr\n<code>\na = 1\nfor i in 1:5\n  \
    \  a += i*2\nend\n</code>\nNow that issue has already been mentioned, I thought\
    \ I'd add my answer to this. I couldn't find a good solution anywhere else. My\
    \ solution was to create a helper function for push! and an operator for comprehensions:\n\
    <code>\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp45tb96z9.jl:17\nin expression starting at\
    \ /tmp/tmp45tb96z9.jl:17\n"
  stdout: ''
  timestamp: 1660013356
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return filter(values(x -> typeof(x) == Int64), values)\nend\n</cell>\n\
    <code language=julia-0.6>\nfilter_integers([1, 2, 3, \"abc\", Dict(), []])\n</cell>\n\
    <text>\nRemoving non integers from a vector\nusing Test\n\n@testset begin\n\n\
    candidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpht1m0alu.jl:10\nin expression starting at\
    \ /tmp/tmpht1m0alu.jl:10\n"
  stdout: ''
  timestamp: 1660013356
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    v = vcat(values)\n    v = filter(v -> isinteger(v), v)\n    return v\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 2 errored,
    0 broken.

    in expression starting at /tmp/tmpdzf25ew6.jl:14

    '
  stdout: "test set: Error During Test at /tmp/tmpdzf25ew6.jl:18\n  Test threw exception\n\
    \  Expression: candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9]\n  MethodError:\
    \ no method matching isinteger(::Dict{Any, Any})\n  Closest candidates are:\n\
    \    isinteger(!Matched::Integer) at ~/.conda/envs/polyglot/share/julia/base/number.jl:20\n\
    \    isinteger(!Matched::Complex) at ~/.conda/envs/polyglot/share/julia/base/complex.jl:145\n\
    \    isinteger(!Matched::Rational) at ~/.conda/envs/polyglot/share/julia/base/rational.jl:265\n\
    \    ...\n  Stacktrace:\n   [1] (::var\"#1#2\")(v::Dict{Any, Any})\n     @ Main\
    \ /tmp/tmpdzf25ew6.jl:9\n   [2] filter(f::var\"#1#2\", a::Vector{Any})\n     @\
    \ Base ./array.jl:2484\n   [3] filter_integers(values::Vector{Any})\n     @ Main\
    \ /tmp/tmpdzf25ew6.jl:9\n   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpdzf25ew6.jl:18 [inlined]\n\
    \   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpdzf25ew6.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpdzf25ew6.jl:19\n  Test threw exception\n  Expression:\
    \ candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3]\n  MethodError: no method\
    \ matching isinteger(::String)\n  Closest candidates are:\n    isinteger(!Matched::Integer)\
    \ at ~/.conda/envs/polyglot/share/julia/base/number.jl:20\n    isinteger(!Matched::Complex)\
    \ at ~/.conda/envs/polyglot/share/julia/base/complex.jl:145\n    isinteger(!Matched::Rational)\
    \ at ~/.conda/envs/polyglot/share/julia/base/rational.jl:265\n    ...\n  Stacktrace:\n\
    \   [1] (::var\"#1#2\")(v::String)\n     @ Main /tmp/tmpdzf25ew6.jl:9\n   [2]\
    \ filter(f::var\"#1#2\", a::Vector{Any})\n     @ Base ./array.jl:2484\n   [3]\
    \ filter_integers(values::Vector{Any})\n     @ Main /tmp/tmpdzf25ew6.jl:9\n  \
    \ [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpdzf25ew6.jl:19 [inlined]\n\
    \   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/j"
  timestamp: 1660013359
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    filter(is_int, values)\nend\n</cell>\n<text>\nNow let's try to filter\
    \ our matrix of integers:\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\
    \t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4,\
    \ Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3,\
    \ 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp13neob5t.jl:10\nin expression starting at\
    \ /tmp/tmp13neob5t.jl:10\n"
  stdout: ''
  timestamp: 1660013357
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    \n    # convert all values to integer\n    values = filter(values, typeof(Int64))\n\
    using Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp86vroc1x.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp86vroc1x.jl:1\n\
    in expression starting at /tmp/tmp86vroc1x.jl:1\n"
  stdout: ''
  timestamp: 1660013357
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    if length(elements(values)) == 0  \n        return values\n    else\n\
    \        return filter(values, x -> typeof(x) <: Int64)\n    end\nend\n</cell>\n\
    <cell>\n#export\n\"\"\"\nFilter given vector of any jlthon values only for floats\n\
    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp029mzwb4.jl:14\nin expression starting at\
    \ /tmp/tmp029mzwb4.jl:14\n"
  stdout: ''
  timestamp: 1660013357
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    if isa(values, Int64)\n        values\n    elseif isa(values, String)\n\
    \        if isa(values[1], Number)\n            [Int64.(x) for x in numbers(values[1])]\n\
    \        else\n            Int64.(0)\n        end\n    elseif isa(values, Array)\n\
    \        Int64.(0)\n    end\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4vu921pd.jl:20\nin expression starting at\
    \ /tmp/tmp4vu921pd.jl:20\n"
  stdout: ''
  timestamp: 1660013357
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    integer = Int64[]\n    noninteger = Int64[false, true]\n    for value\
    \ in values\n        if isa(value,Int64)\n            push!(integer, value)\n\
    \        elseif isa(value,String)\n            push!(noninteger, value)\n    \
    \    else\n            push!(noninteger, false)\n        end\n    end\n    integer\n\
    end\n</code>\n<|/ a tags=julia,performance,for-loop,filter |>\n<| c |>\nThis is\
    \ more efficient than's `mapslice`, thanks!\n<|/ c |>\n<| c |>\nFor a vector of\
    \ length `2^n`? The time complexity of `mapslice` is `O(n)` whereas `filter` is\
    \ `O(n)`. So, for vectors of length `2^n` the difference is negligible.\n<|/ c\
    \ |>\n<| c |>\nI don't get your comment about \"complexity of mapslice\". `mapslice`\
    \ is faster for vectors of length `2^n` because you avoid the allocations for\
    \ intermediate results. E.g. if you have `n` elements and you apply `filter` to\
    \ them then `mapslice` will produce an array of size `n`. If you apply `filter`\
    \ then `mapslice` will produce an array whose size is `2n`.\n<|/ c |>\n<| c |>\n\
    I mean a vector of length 2^n, i.e. a vector with a power of two in the number\
    \ of elements. `mapslice` will produce an array of length 2^n, whereas `filter`\
    \ will produce an array whose size is 2n. So, for vectors of length 2^n the difference\
    \ is negligible.\n<|/ c |>\n<| c |>\nOK, yes, it makes sense. Thanks.\n<|/ c |>\n\
    <| a |>\n<code>\njulia> a = [\"a\", \"b\", \"c\"]\n3-element Array{String,1}:\n\
    \ \"a\"\n \"b\"\n \"c\"\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\
    \t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4,\
    \ Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3,\
    \ 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplnkvhhva.jl:21\nin expression starting at\
    \ /tmp/tmplnkvhhva.jl:21\n"
  stdout: ''
  timestamp: 1660013357
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    if values == [] \n        returns [] \n    else \n        \n        for\
    \ value in values\n            if isinteger(value) \n                push!(result,\
    \ value)\n            end\n        end\n        \n        return result \n   \
    \ end\nend \n</cell>\n<code language=julia-1.5>\nfilter_integers([\"a\", 3.14,\
    \ 5])\n</cell>\n<text>\nFilter given vector of any jlthon values only for floats\n\
    using Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: space before \"[\" not allowed in \"returns [\"\
    \ at /tmp/tmps87tw813.jl:9\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmps87tw813.jl:9\n\
    in expression starting at /tmp/tmps87tw813.jl:9\n"
  stdout: ''
  timestamp: 1660013357
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    filter!(isinteger, values)\n    return values \nend\n</code>\n<|/ a tags=julia\
    \ |>\n<| c |>\nI really don't like that the filter itself is so complex, though\
    \ I guess it is also very flexible.\n<|/ c |>\n<| a |>\nA short solution using\
    \ eachindex and isin from the Base package:\n<code>\njulia> function filter_integers(values::Vector{Any})::Vector{Int64}\n\
    \             filter!(x -> isin(x, 0:9) || isin(x, 100:999), eachindex(values))\n\
    \           end\nfilter_integers (generic function with 1 method)\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpx4yu50yb.jl:11\nin expression starting at\
    \ /tmp/tmpx4yu50yb.jl:11\n"
  stdout: ''
  timestamp: 1660013357
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    # this does a linear search through all elements - this is slow for large\
    \ datasets, \n    # maybe it could be improved by using binary search\n    return\
    \ filter((v::Int64) -> isa(v,Int64), values)\nend\n</cell>\n<code language=julia-1.0>\n\
    # test the function with some random numbers (the function has to be applied only\
    \ to numbers)\nfilter_integers(rand(1:100000,10))\n</cell>\n<text>\nFilter elements\
    \ for which the function returns false (only integers)\nThe function above is\
    \ pretty fast but we still have to call it on all elements. \nIt is also slow\
    \ on large datasets - we can make it faster by applying the function element-wise\
    \ to the whole dataset (vector).\nusing Test\n\n@testset begin\n\ncandidate =\
    \ filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvooqrr_0.jl:12\nin expression starting at\
    \ /tmp/tmpvooqrr_0.jl:12\n"
  stdout: ''
  timestamp: 1660013358
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    if length(values) < 1\n        return values::Vector{Int64}\n    elseif\
    \ isa(values, AbstractString)\n        return [x for x in values if x >= 0]\n\
    \    elseif isa(values, AbstractVector)\n        return filter_integers(values.values)\n\
    \    elseif isa(values, AbstractDict)\n        keys = [x for x in values if x\
    \ >= 0]\n        values.remove(keys)\n        return values\n    elseif isa(values,\
    \ AbstractArray)\n        values.remove_values(0)\n        return values\n   \
    \ else\n        return values\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpiqcr_l89.jl:27

    '
  stdout: "test set: Error During Test at /tmp/tmpiqcr_l89.jl:30\n  Test threw exception\n\
    \  Expression: candidate(Vector{Any}([])) == Vector{Int64}([])\n  TypeError: in\
    \ typeassert, expected Vector{Int64}, got a value of type Vector{Any}\n  Stacktrace:\n\
    \   [1] filter_integers(values::Vector{Any})\n     @ Main /tmp/tmpiqcr_l89.jl:9\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpiqcr_l89.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpiqcr_l89.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpiqcr_l89.jl:31\n  Test threw exception\n  Expression:\
    \ candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9]\n  type Array has no\
    \ field values\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n\
    \   [2] filter_integers(values::Vector{Any})\n     @ Main /tmp/tmpiqcr_l89.jl:13\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpiqcr_l89.jl:31 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpiqcr_l89.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpiqcr_l89.jl:32\n  Test threw exception\n  Expression:\
    \ candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3]\n  type Array has no\
    \ field values\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n\
    \   [2] filter_integers(values::Vector{Any})\n     @ Main /tmp/tmpiqcr_l89.jl:13\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpiqcr_l89.jl:32 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpiqcr_l89.jl:29\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  timestamp: 1660013360
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    idx = findfirst(values.(Integer))\n    if idx != nothing\n        values.(Integer)\
    \ = values.(Integer)[idx]\n    end\n    return values\nend\n</cell>\n<text>\n\
    Let's try it out. Make sure to compare to the julia version to ensure we aren't\
    \ doing anything silly:\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\
    \t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4,\
    \ Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3,\
    \ 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid syntax \"values.(Integer) = ...\" around\
    \ /tmp/tmpz09wam1f.jl:10\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpz09wam1f.jl:1\n\
    in expression starting at /tmp/tmpz09wam1f.jl:1\n"
  stdout: ''
  timestamp: 1660013358
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n  filter(values, x -> isa(Int64, x) )\nend\n</code>\n<|/ a dscore=2 |>\n<|\
    \ a dscore=2 |>\nA little bit of metaprogramming can do it for you. I'm using\
    \ Julia v0.6.1, but it should work the same for v0.5.0+.\n<code>\n# Meta-function\n\
    using Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplcfbl_nj.jl:10\nin expression starting at\
    \ /tmp/tmplcfbl_nj.jl:10\n"
  stdout: ''
  timestamp: 1660013358
- exit_code: 0
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    filter!(x -> isa(x, Int64), values)\n    return values\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660013357
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    if values == Int64[]\n        Int64[]\n    elseif values == Int64\n  \
    \      values\n    elseif length(filter(x -> isinteger(x), values))\n        filter_integers(values)\n\
    \    elseif length(filter(x -> isa(x, Dict), values))\n        filter_integers(values(values(values(values))))\n\
    \    else\n        Vector{Int64}(values)\n    end\nend\n</cell>\n<code language=julia-0.5>\n\
    using Printf\nprintln(\"\\nExample filter integers\")\nfilter_integers([\"a\"\
    , 3.14, 5])\n</cell>\n<text>\nFunction filter returns a vector of booleans, one\
    \ for each element of values. In Julia we find it more convenient to work with\
    \ vectors rather than single values.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkrxlzyvl.jl:20\nin expression starting at\
    \ /tmp/tmpkrxlzyvl.jl:20\n"
  stdout: ''
  timestamp: 1660013358
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    if length(isa(values,Vector{Int64})) == 1\n        return values\n   \
    \ end\n    indices = findall(x -> isa(x, Int64), values)\n    values = setdiff(Vector{Int64}(values[indices]),\
    \ values)\n    values\nend\n</cell>\n<code language=julia-1.6>\nusing Plots\n\
    gr()\n</cell>\n<code language=julia-1.6>\nx = [1, 2, 3, 4, 5, 6, 7, 8]\ny = [4,\
    \ 3, 8, 2, 5, 6, 7, 8]\nplot(x, y)\n</cell>\n<code language=julia-1.6>\nx = [1,\
    \ 2, 3, 4, 5, 6, 7, 8]\ny = [4, 3, 8, 2, 5, 6, 7, 8]\nplot(x, y)\n</cell>\n<code\
    \ language=julia-1.6>\nx = [1, 2, 3, 4, 5, 6, 7, 8]\ny = [4, 3, 8, 2, 5, 6, 7,\
    \ 8]\nplot(x, y)\n</cell>\n<text>\n3.4 Filter out all the integers from vector\
    \ of any value\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\
    \t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4,\
    \ Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3,\
    \ 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpv7j9ujm4.jl:15\nin expression starting at\
    \ /tmp/tmpv7j9ujm4.jl:15\n"
  stdout: ''
  timestamp: 1660013358
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    if length(filter(x -> isa(x, Int64), values))==0\n        error(\"values\
    \ not integer or vector of integers\")\n    else\n        return filter(x -> isa(x,\
    \ Int64), values)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\
    \t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4,\
    \ Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3,\
    \ 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 0 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmp5ii9xvr1.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmp5ii9xvr1.jl:19\n  Test threw exception\n\
    \  Expression: candidate(Vector{Any}([])) == Vector{Int64}([])\n  values not integer\
    \ or vector of integers\n  Stacktrace:\n   [1] error(s::String)\n     @ Base ./error.jl:33\n\
    \   [2] filter_integers(values::Vector{Any})\n     @ Main /tmp/tmp5ii9xvr1.jl:9\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp5ii9xvr1.jl:19 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp5ii9xvr1.jl:18\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    2      1      3\n"
  timestamp: 1660013360
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    # Filter out any jlthon values\n    if values.isa<Array>()\n        int_array\
    \ = filter_integers(values(:))\n        return int_array\n    values = filter(values,\
    \ is_integer)\nend\n</code>\n<|/ a tags=julia,vector,arrays |>\n<| a tags=julia,vector,arrays\
    \ dscore=2 |>\nThis would be simpler if you don't mind having your integers as\
    \ strings:\n<code>\njulia> arr = [1, 2, \"3\", \"4\", 5]\n5-element Vector{Any}:\n\
    \  1\n  2\n  \"3\"\n  \"4\"\n  5\nusing Test\n\n@testset begin\n\ncandidate =\
    \ filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmph_tq97s6.jl:14\nin expression starting at\
    \ /tmp/tmph_tq97s6.jl:14\n"
  stdout: ''
  timestamp: 1660013358
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    for i in values\n        isa(i, Int64) || isa(i, Float64) || isa(i, BigInt)\n\
    \            push!(result, i)\n        end\n    end\n    result\nend\n</cell>\n\
    <text>\nExercise: Implement the function which filters the given vector of any\
    \ jlthon values only for booleans\n    >>> filter_booleans([\"a\", 3.14, 5])\n\
    \    [false, true]\n    >>> filter_booleans([true, false, true, false, false])\n\
    \    [true, false, false, false, false]\n    \"\"\"\nusing Test\n\n@testset begin\n\
    \ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: UndefVarError: result not defined

    in expression starting at /tmp/tmpgbbjd7of.jl:13

    '
  stdout: ''
  timestamp: 1660013358
- exit_code: -1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    for i in values \n        if isa(i, Int64)\n            push!(values,i)\n\
    \        end\n    end\n    return values\nend\nusing Test\n\n@testset begin\n\n\
    candidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660013362
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return filter(isinteger,values) \nend\nusing Test\n\n@testset begin\n\n\
    candidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 2 errored,
    0 broken.

    in expression starting at /tmp/tmpxh0k4b9i.jl:12

    '
  stdout: "test set: Error During Test at /tmp/tmpxh0k4b9i.jl:16\n  Test threw exception\n\
    \  Expression: candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9]\n  MethodError:\
    \ no method matching isinteger(::Dict{Any, Any})\n  Closest candidates are:\n\
    \    isinteger(!Matched::Integer) at ~/.conda/envs/polyglot/share/julia/base/number.jl:20\n\
    \    isinteger(!Matched::Complex) at ~/.conda/envs/polyglot/share/julia/base/complex.jl:145\n\
    \    isinteger(!Matched::Rational) at ~/.conda/envs/polyglot/share/julia/base/rational.jl:265\n\
    \    ...\n  Stacktrace:\n   [1] filter(f::typeof(isinteger), a::Vector{Any})\n\
    \     @ Base ./array.jl:2484\n   [2] filter_integers(values::Vector{Any})\n  \
    \   @ Main /tmp/tmpxh0k4b9i.jl:8\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpxh0k4b9i.jl:16 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpxh0k4b9i.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpxh0k4b9i.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3]\n  MethodError: no method\
    \ matching isinteger(::String)\n  Closest candidates are:\n    isinteger(!Matched::Integer)\
    \ at ~/.conda/envs/polyglot/share/julia/base/number.jl:20\n    isinteger(!Matched::Complex)\
    \ at ~/.conda/envs/polyglot/share/julia/base/complex.jl:145\n    isinteger(!Matched::Rational)\
    \ at ~/.conda/envs/polyglot/share/julia/base/rational.jl:265\n    ...\n  Stacktrace:\n\
    \   [1] filter(f::typeof(isinteger), a::Vector{Any})\n     @ Base ./array.jl:2484\n\
    \   [2] filter_integers(values::Vector{Any})\n     @ Main /tmp/tmpxh0k4b9i.jl:8\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpxh0k4b9i.jl:17 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpxh0k4b9i.jl:14\nTest Summary:\
    \ | Pass  "
  timestamp: 1660013361
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    integers = Vector{Int64}(undef, 0)\n    map!(x -> if x isa Integer then\
    \ push!(integers, x) else println(x); println(x); end,\n        values)\n    integers\n\
    end\n</cell>\n<code language=julia-1.5>\n@doc filter_integers\n</cell>\n<text>\n\
    In Julia we have vectors too and we can apply a function to all the elements of\
    \ a vector, i.e. apply a function to all the elements of a vector. We can also\
    \ apply a function to all the elements of a vector and get the corresponding output.\
    \ Let us understand this with an example.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"push!\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp70plo9qa.jl:9\nin expression starting at /tmp/tmp70plo9qa.jl:9\n"
  stdout: ''
  timestamp: 1660013359
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    if is_integer(values) \n        i <- find(values .== values)\n       \
    \ values[i] \n    elseif is_string(values) \n        i <- find(values .== values)\n\
    \        values[i]\n    elseif is_list(values) \n        i <- find(values .==\
    \ values)\n        values[i]\n    elseif is_struct(values) \n        i <- find(values\
    \ .== values)\n        values[i]\n    elseif is_float(values) \n        i <- find(values\
    \ .== values)\n        values[i]\n    elseif is_cell(values) \n        i <- find(values\
    \ .== values)\n        values[i]\n    elseif is_typeof(values) \n        i <-\
    \ find(values .== values)\n        values[i]\n    else\n        throw(ArgumentError(\"\
    unsupported type in filter_integers:\", values))\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmp5imrmp7a.jl:35

    '
  stdout: "test set: Error During Test at /tmp/tmp5imrmp7a.jl:38\n  Test threw exception\n\
    \  Expression: candidate(Vector{Any}([])) == Vector{Int64}([])\n  UndefVarError:\
    \ is_integer not defined\n  Stacktrace:\n   [1] filter_integers(values::Vector{Any})\n\
    \     @ Main /tmp/tmp5imrmp7a.jl:8\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp5imrmp7a.jl:38 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp5imrmp7a.jl:37\ntest set:\
    \ Error During Test at /tmp/tmp5imrmp7a.jl:39\n  Test threw exception\n  Expression:\
    \ candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9]\n  UndefVarError: is_integer\
    \ not defined\n  Stacktrace:\n   [1] filter_integers(values::Vector{Any})\n  \
    \   @ Main /tmp/tmp5imrmp7a.jl:8\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp5imrmp7a.jl:39 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp5imrmp7a.jl:37\ntest set:\
    \ Error During Test at /tmp/tmp5imrmp7a.jl:40\n  Test threw exception\n  Expression:\
    \ candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3]\n  UndefVarError: is_integer\
    \ not defined\n  Stacktrace:\n   [1] filter_integers(values::Vector{Any})\n  \
    \   @ Main /tmp/tmp5imrmp7a.jl:8\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp5imrmp7a.jl:40 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp5imrmp7a.jl:37\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  timestamp: 1660013361
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    if all(isinteger),\n        return values,\n    else\n        return filter(values,\
    \ x -> isinteger(x)),\n    end\nend\n</code>\nAnd finally, the filter function\
    \ on lists, that filters given list for those elements that satisfy a given predicate\
    \ test:\n<code>\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\
    \t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4,\
    \ Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3,\
    \ 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \",\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpjbmjr8jg.jl:8\nin expression starting at /tmp/tmpjbmjr8jg.jl:8\n"
  stdout: ''
  timestamp: 1660013359
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    for i in values\n        if isa(i, Int64)\n            return i\n    end\n\
    \    return nothing\nend\n</cell>\n<code language=julia-1.5>\nfilter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n</cell>\n<text>\n\u26A0\uFE0F Warning!\nIn Julia\
    \ 1.5 or higher, it is recommended to use Array{Int64, 1} instead of Vector{Int64}.\n\
    using Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfadg48ke.jl:14\nin expression starting at\
    \ /tmp/tmpfadg48ke.jl:14\n"
  stdout: ''
  timestamp: 1660013359
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return filter(values, x -> isa(x, Int64)) |> Vector{Int64}\nend\n</code>\n\
    <|/ a tags=julia,arrays dscore=3 |>\n<| a dscore=3 |>\nThis is one way to check\
    \ if an element is an element in a vector:\n<code>\njulia> using Base: ==\nusing\
    \ Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8xgcthvj.jl:10\nin expression starting at\
    \ /tmp/tmp8xgcthvj.jl:10\n"
  stdout: ''
  timestamp: 1660013359
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n  if isa(values, Int64)\n    return values\n  else \n    return filter(x ->\
    \ isa(x, Int64), values)\nend\n</code>\nThe other solution that has given has\
    \ been tested as working so far :)\n<|/ a |>\n<| a tags=julia dscore=2 |>\nFor\
    \ your particular case, you can do it this way:\n<code>\njulia> import Base.filter\n\
    using Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsb1svp7l.jl:13\nin expression starting at\
    \ /tmp/tmpsb1svp7l.jl:13\n"
  stdout: ''
  timestamp: 1660013359
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    if length(values) == 0\n        values\n    else\n        filter(values,\
    \ x -> isa(x, Int64)) \n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 2 errored,
    0 broken.

    in expression starting at /tmp/tmp5ff6pk3y.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmp5ff6pk3y.jl:20\n  Test threw exception\n\
    \  Expression: candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9]\n  MethodError:\
    \ no method matching filter(::Vector{Any}, ::var\"#1#2\")\n  Closest candidates\
    \ are:\n    filter(::Any, !Matched::Tuple) at ~/.conda/envs/polyglot/share/julia/base/tuple.jl:363\n\
    \    filter(::Any, !Matched::Array{T, N}) where {T, N} at ~/.conda/envs/polyglot/share/julia/base/array.jl:2479\n\
    \    filter(::Any, !Matched::AbstractDict) at ~/.conda/envs/polyglot/share/julia/base/abstractdict.jl:434\n\
    \    ...\n  Stacktrace:\n   [1] filter_integers(values::Vector{Any})\n     @ Main\
    \ /tmp/tmp5ff6pk3y.jl:11\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp5ff6pk3y.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp5ff6pk3y.jl:18\ntest set:\
    \ Error During Test at /tmp/tmp5ff6pk3y.jl:21\n  Test threw exception\n  Expression:\
    \ candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3]\n  MethodError: no method\
    \ matching filter(::Vector{Any}, ::var\"#1#2\")\n  Closest candidates are:\n \
    \   filter(::Any, !Matched::Tuple) at ~/.conda/envs/polyglot/share/julia/base/tuple.jl:363\n\
    \    filter(::Any, !Matched::Array{T, N}) where {T, N} at ~/.conda/envs/polyglot/share/julia/base/array.jl:2479\n\
    \    filter(::Any, !Matched::AbstractDict) at ~/.conda/envs/polyglot/share/julia/base/abstractdict.jl:434\n\
    \    ...\n  Stacktrace:\n   [1] filter_integers(values::Vector{Any})\n     @ Main\
    \ /tmp/tmp5ff6pk3y.jl:11\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp5ff6pk3y.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp5ff6pk3y.jl:18\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    1      2      3\n"
  timestamp: 1660013362
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    # check if input is a vector and that all elements are Int64\n    # otherwise\
    \ raise exception\n    assert(all(x-> x == typeof(x) == Int64, values))\n    \n\
    \    # filter the integer elements\n    return values.filter(x -> x isa Int64)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpl45nj9y4.jl:17

    '
  stdout: "test set: Error During Test at /tmp/tmpl45nj9y4.jl:20\n  Test threw exception\n\
    \  Expression: candidate(Vector{Any}([])) == Vector{Int64}([])\n  UndefVarError:\
    \ assert not defined\n  Stacktrace:\n   [1] filter_integers(values::Vector{Any})\n\
    \     @ Main /tmp/tmpl45nj9y4.jl:10\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpl45nj9y4.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpl45nj9y4.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpl45nj9y4.jl:21\n  Test threw exception\n  Expression:\
    \ candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9]\n  UndefVarError: assert\
    \ not defined\n  Stacktrace:\n   [1] filter_integers(values::Vector{Any})\n  \
    \   @ Main /tmp/tmpl45nj9y4.jl:10\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpl45nj9y4.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpl45nj9y4.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpl45nj9y4.jl:22\n  Test threw exception\n  Expression:\
    \ candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3]\n  UndefVarError: assert\
    \ not defined\n  Stacktrace:\n   [1] filter_integers(values::Vector{Any})\n  \
    \   @ Main /tmp/tmpl45nj9y4.jl:10\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpl45nj9y4.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpl45nj9y4.jl:19\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  timestamp: 1660013361
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    Int64.(filter(x -> isa(x, Int64), values))\nend\n</cell>\n<text>\nFor\
    \ integers only\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\
    \t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4,\
    \ Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3,\
    \ 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0lrea1_i.jl:10\nin expression starting at\
    \ /tmp/tmp0lrea1_i.jl:10\n"
  stdout: ''
  timestamp: 1660013359
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    \n    local result = Int64[]\n    local idx\n    for i = 1:length(values)\n\
    \        value = values[i]\n        if isa(value, 'Vector')\n            idx =\
    \ 1\n            for e in value\n                if isa(e, 'Int64')\n        \
    \            push!(result, e)\n                else\n                    idx =\
    \ 0\n                end\n            end\n        else\n            if isa(value,\
    \ 'Int64')\n                push!(result, value)\n            end\n        end\n\
    \    end\n    return result\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: character literal contains multiple characters\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmpmxjm65vs.jl:13\nin expression\
    \ starting at /tmp/tmpmxjm65vs.jl:13\n"
  stdout: ''
  timestamp: 1660013360
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return filter(x -> isa(x, Int64), values)\nend\n</cell>\n<code language=julia-1.4>\n\
    filter_integers(rand(3))\n</cell>\n<text>\nFilter by type\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0rw9u7x3.jl:10\nin expression starting at\
    \ /tmp/tmp0rw9u7x3.jl:10\n"
  stdout: ''
  timestamp: 1660013360
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    ints = Int64[]\n    for i in values\n        if isinteger(i)\n       \
    \     push!(ints, i)\n        end\n    end\n    unique!(ints)\n    ints\nend\n\
    </cell>\n<code language=julia-1.6>\nfilter_integers([\"a\", 3.14, 5])\n</cell>\n\
    <code language=julia-1.6>\nfilter_integers([1, 2, 3, \"abc\", Dict(), []])\n</cell>\n\
    <code language=julia-1.6>\nfilter_integers([false, true, \"abc\", Dict(), []])\n\
    </cell>\n<code language=julia-1.6>\nfilter_integers([true, false, false, true,\
    \ true, false])\n</cell>\n<code language=julia-1.6>\nfilter_integers([true, false,\
    \ false, true, true, false, false, true])\n</cell>\n<text>\nIn Julia 1.6, a Vector{Bool}\
    \ is converted to a Vector{Int8}, so for efficiency one might use:\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdvb162fg.jl:17\nin expression starting at\
    \ /tmp/tmpdvb162fg.jl:17\n"
  stdout: ''
  timestamp: 1660013360
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    # only keep integers\n    filtered_values = filter(x -> is_integer(x),\
    \ values)\n    return filtered_values\nend\n</cell>\n<text>\nExercise: Filter\
    \ Integers From Vectors of Different Data Types For Any Other Type Of Data\nusing\
    \ Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwd8062g6.jl:12\nin expression starting at\
    \ /tmp/tmpwd8062g6.jl:12\n"
  stdout: ''
  timestamp: 1660013360
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    values = filter(values, x -> isa(x, Int))\n    values = filter(values,\
    \ x -> x != NaN)\n    return collect(values) \nend\nusing Test\n\n@testset begin\n\
    \ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpc5j23rqh.jl:14

    '
  stdout: "test set: Error During Test at /tmp/tmpc5j23rqh.jl:17\n  Test threw exception\n\
    \  Expression: candidate(Vector{Any}([])) == Vector{Int64}([])\n  MethodError:\
    \ no method matching filter(::Vector{Any}, ::var\"#1#3\")\n  Closest candidates\
    \ are:\n    filter(::Any, !Matched::Tuple) at ~/.conda/envs/polyglot/share/julia/base/tuple.jl:363\n\
    \    filter(::Any, !Matched::Array{T, N}) where {T, N} at ~/.conda/envs/polyglot/share/julia/base/array.jl:2479\n\
    \    filter(::Any, !Matched::AbstractDict) at ~/.conda/envs/polyglot/share/julia/base/abstractdict.jl:434\n\
    \    ...\n  Stacktrace:\n   [1] filter_integers(values::Vector{Any})\n     @ Main\
    \ /tmp/tmpc5j23rqh.jl:8\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpc5j23rqh.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpc5j23rqh.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpc5j23rqh.jl:18\n  Test threw exception\n  Expression:\
    \ candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9]\n  MethodError: no\
    \ method matching filter(::Vector{Any}, ::var\"#1#3\")\n  Closest candidates are:\n\
    \    filter(::Any, !Matched::Tuple) at ~/.conda/envs/polyglot/share/julia/base/tuple.jl:363\n\
    \    filter(::Any, !Matched::Array{T, N}) where {T, N} at ~/.conda/envs/polyglot/share/julia/base/array.jl:2479\n\
    \    filter(::Any, !Matched::AbstractDict) at ~/.conda/envs/polyglot/share/julia/base/abstractdict.jl:434\n\
    \    ...\n  Stacktrace:\n   [1] filter_integers(values::Vector{Any})\n     @ Main\
    \ /tmp/tmpc5j23rqh.jl:8\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpc5j23rqh.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpc5j23rqh.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpc5j23rqh.jl:19\n  Test threw exception\n  Expression:\
    \ ca"
  timestamp: 1660013363
- exit_code: 0
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    filtered = filter(values -> (typeof(values) <: Int64),values)\n    filter(x\
    \ -> x != Int64(0.0), filtered)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660013359
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    for value in values\n        @assert typeof(value) == Int64 \n    end\n\
    \    return values\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\
    \t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4,\
    \ Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3,\
    \ 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 2 errored,
    0 broken.

    in expression starting at /tmp/tmpinb6qx_o.jl:15

    '
  stdout: "test set: Error During Test at /tmp/tmpinb6qx_o.jl:19\n  Test threw exception\n\
    \  Expression: candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9]\n  AssertionError:\
    \ typeof(value) == Int64\n  Stacktrace:\n   [1] filter_integers(values::Vector{Any})\n\
    \     @ Main /tmp/tmpinb6qx_o.jl:9\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpinb6qx_o.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpinb6qx_o.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpinb6qx_o.jl:20\n  Test threw exception\n  Expression:\
    \ candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3]\n  AssertionError: typeof(value)\
    \ == Int64\n  Stacktrace:\n   [1] filter_integers(values::Vector{Any})\n     @\
    \ Main /tmp/tmpinb6qx_o.jl:9\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpinb6qx_o.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpinb6qx_o.jl:17\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    1      2      3\n"
  timestamp: 1660013362
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n  return values[map(typed, values)]\nend\nusing Test\n\n@testset begin\n\n\
    candidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpi0ye7_d_.jl:12

    '
  stdout: "test set: Error During Test at /tmp/tmpi0ye7_d_.jl:15\n  Test threw exception\n\
    \  Expression: candidate(Vector{Any}([])) == Vector{Int64}([])\n  UndefVarError:\
    \ typed not defined\n  Stacktrace:\n   [1] filter_integers(values::Vector{Any})\n\
    \     @ Main /tmp/tmpi0ye7_d_.jl:8\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpi0ye7_d_.jl:15 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpi0ye7_d_.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpi0ye7_d_.jl:16\n  Test threw exception\n  Expression:\
    \ candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9]\n  UndefVarError: typed\
    \ not defined\n  Stacktrace:\n   [1] filter_integers(values::Vector{Any})\n  \
    \   @ Main /tmp/tmpi0ye7_d_.jl:8\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpi0ye7_d_.jl:16 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpi0ye7_d_.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpi0ye7_d_.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3]\n  UndefVarError: typed\
    \ not defined\n  Stacktrace:\n   [1] filter_integers(values::Vector{Any})\n  \
    \   @ Main /tmp/tmpi0ye7_d_.jl:8\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpi0ye7_d_.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpi0ye7_d_.jl:14\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  timestamp: 1660013362
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    filter(values, isinteger, Int64)\nend\n</code>\nThis is not as fast as\
    \ I would like, but at least it works for my use case.\n<|/ a tags=julia dscore=1\
    \ |>\n<| c |>\nYou can avoid the `eltype` check by changing the argument order\
    \ in the `filter` call: ```filter(values, isinteger, Int64)```\n<|/ c |>\n<| c\
    \ |>\nThanks for the pointer! I didn't know that arguments can be re-ordered in\
    \ Julia!\n<|/ c |>\n<| c |>\nI think this answer could be improved by mentioning\
    \ that this solution is O(n) time complexity and not O(n^2) time complexity. On\
    \ a small amount of numbers, there may not be a difference between O(n) and O(n^2).\
    \ For example if the numbers take 100 times the time to process a number then\
    \ your solution would be a lot slower for small numbers and therefore I would\
    \ think its faster for larger numbers.\n<|/ c |>\n<| c |>\nYou are right about\
    \ big-O, I will try to add an explanation. For smaller numbers, I agree that it\
    \ is not faster and it can be avoided. In fact, I found that using it I got much\
    \ better performance for small numbers and it actually makes sense.\n<|/ c |>\n\
    <| c |>\nThanks for the comments, I updated the answer. I am not sure it is clear\
    \ enough for others, maybe I should add some links.\n<|/ c |>\n<| a tags=julia\
    \ |>\nHere's another way. First, a function to get the type of an object:\n<code>\n\
    julia> function typeof(x::Any) \n           if x === nothing\n              return\
    \ Float64\n           end\n           if x isa Type\n              return x\n\
    \           end\n           if x isa Int\n              return Int\n         \
    \  end\n           if x isa Bool\n              return Bool\n           end\n\
    \           return typeof(typeof(x));\n       end\ntypeof\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmph6wfkxon.jl:10\nin expression starting at\
    \ /tmp/tmph6wfkxon.jl:10\n"
  stdout: ''
  timestamp: 1660013361
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    if typeof(Int64) == typeof(values)\n        filter(values, x -> isa(x,\
    \ Int64))\n    else\n        values\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 2 errored,
    0 broken.

    in expression starting at /tmp/tmpbnjdzk2v.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmpbnjdzk2v.jl:20\n  Test threw exception\n\
    \  Expression: candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9]\n  MethodError:\
    \ Cannot `convert` an object of type Dict{Any, Any} to an object of type Int64\n\
    \  Closest candidates are:\n    convert(::Type{T}, !Matched::Ptr) where T<:Integer\
    \ at ~/.conda/envs/polyglot/share/julia/base/pointer.jl:23\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:7\n\
    \    ...\n  Stacktrace:\n    [1] setindex!(A::Vector{Int64}, x::Dict{Any, Any},\
    \ i1::Int64)\n      @ Base ./array.jl:903\n    [2] _unsafe_copyto!(dest::Vector{Int64},\
    \ doffs::Int64, src::Vector{Any}, soffs::Int64, n::Int64)\n      @ Base ./array.jl:253\n\
    \    [3] unsafe_copyto!\n      @ ./array.jl:307 [inlined]\n    [4] _copyto_impl!\n\
    \      @ ./array.jl:331 [inlined]\n    [5] copyto!\n      @ ./array.jl:317 [inlined]\n\
    \    [6] copyto!\n      @ ./array.jl:343 [inlined]\n    [7] copyto_axcheck!\n\
    \      @ ./abstractarray.jl:1104 [inlined]\n    [8] Vector{Int64}(x::Vector{Any})\n\
    \      @ Base ./array.jl:563\n    [9] convert\n      @ ./array.jl:554 [inlined]\n\
    \   [10] filter_integers(values::Vector{Any})\n      @ Main /tmp/tmpbnjdzk2v.jl:11\n\
    \   [11] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [12] macro expansion\n      @ /tmp/tmpbnjdzk2v.jl:20 [inlined]\n\
    \   [13] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [14] top-level scope\n      @ /tmp/tmpbnjdzk2v.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpbnjdzk2v.jl:21\n  Test threw exception\n  Expression:\
    \ candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3]\n  MethodError: Cannot\
    \ `convert` an object of type String to an object of type Int64\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::Ptr) where T<:Integer at ~/.conda/envs/polyglot/share/julia/base/pointer.jl:23\n\
    \    convert(::Type{T}, !Matched::T"
  timestamp: 1660013364
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    values = filter((x) -> isinteger(x), values)\n    return values\nend\n\
    </cell>\n<code language=julia-1.5>\n\"\"\"\n    filter_booleans(values)\nusing\
    \ Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpealpopa1.jl:11\nin expression starting at\
    \ /tmp/tmpealpopa1.jl:11\n"
  stdout: ''
  timestamp: 1660013361
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    integer_values = setdiff(1:length(values), filter(values, x -> is_integer(x)))\n\
    \    integer_values\nend\n</cell>\n<code language=julia-1.2>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpa08k9hbj.jl:11\nin expression starting at\
    \ /tmp/tmpa08k9hbj.jl:11\n"
  stdout: ''
  timestamp: 1660013361
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n\"\"\"Filter given vector of any jlthon values only for integers\n    >>>\
    \ filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
    \ \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nusing Test\n\n@testset begin\n\
    \ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp6jp52_zk.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp6jp52_zk.jl:1\n\
    in expression starting at /tmp/tmp6jp52_zk.jl:1\n"
  stdout: ''
  timestamp: 1660013361
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    values = filter(isInteger, values)\n    return values\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpvwggmj8f.jl:13

    '
  stdout: "test set: Error During Test at /tmp/tmpvwggmj8f.jl:16\n  Test threw exception\n\
    \  Expression: candidate(Vector{Any}([])) == Vector{Int64}([])\n  UndefVarError:\
    \ isInteger not defined\n  Stacktrace:\n   [1] filter_integers(values::Vector{Any})\n\
    \     @ Main /tmp/tmpvwggmj8f.jl:8\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpvwggmj8f.jl:16 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvwggmj8f.jl:15\ntest set:\
    \ Error During Test at /tmp/tmpvwggmj8f.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9]\n  UndefVarError: isInteger\
    \ not defined\n  Stacktrace:\n   [1] filter_integers(values::Vector{Any})\n  \
    \   @ Main /tmp/tmpvwggmj8f.jl:8\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpvwggmj8f.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvwggmj8f.jl:15\ntest set:\
    \ Error During Test at /tmp/tmpvwggmj8f.jl:18\n  Test threw exception\n  Expression:\
    \ candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3]\n  UndefVarError: isInteger\
    \ not defined\n  Stacktrace:\n   [1] filter_integers(values::Vector{Any})\n  \
    \   @ Main /tmp/tmpvwggmj8f.jl:8\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpvwggmj8f.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvwggmj8f.jl:15\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  timestamp: 1660013363
- exit_code: 0
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    integer = filter(x -> isa(x, Int64), values)\n    return integer\nend\n\
    using Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660013360
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n  if all(isinteger(x) || x == x for (x :: values) in values)\n    return values\n\
    \  end\n  error(\"Cannot filter all values of type $values\")\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 2 errored,
    0 broken.

    in expression starting at /tmp/tmpaeoukydp.jl:15

    '
  stdout: "test set: Error During Test at /tmp/tmpaeoukydp.jl:19\n  Test threw exception\n\
    \  Expression: candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9]\n  MethodError:\
    \ First argument to `convert` must be a Type, got Any[4, Dict{Any, Any}(), Any[],\
    \ 23.2, 9, \"adasd\"]\n  Stacktrace:\n    [1] (::var\"#1#2\"{Vector{Any}})(::Int64)\n\
    \      @ Main ./none:0\n    [2] iterate\n      @ ./generator.jl:47 [inlined]\n\
    \    [3] _all\n      @ ./reduce.jl:1156 [inlined]\n    [4] all\n      @ ./reduce.jl:1152\
    \ [inlined]\n    [5] all\n      @ ./reduce.jl:1070 [inlined]\n    [6] filter_integers(values::Vector{Any})\n\
    \      @ Main /tmp/tmpaeoukydp.jl:8\n    [7] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [8] macro expansion\n      @ /tmp/tmpaeoukydp.jl:19 [inlined]\n\
    \    [9] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [10] top-level scope\n      @ /tmp/tmpaeoukydp.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpaeoukydp.jl:20\n  Test threw exception\n  Expression:\
    \ candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3]\n  MethodError: First\
    \ argument to `convert` must be a Type, got Any[3, \"c\", 3, 3, \"a\", \"b\"]\n\
    \  Stacktrace:\n    [1] (::var\"#1#2\"{Vector{Any}})(::Int64)\n      @ Main ./none:0\n\
    \    [2] iterate\n      @ ./generator.jl:47 [inlined]\n    [3] _all\n      @ ./reduce.jl:1156\
    \ [inlined]\n    [4] all\n      @ ./reduce.jl:1152 [inlined]\n    [5] all\n  \
    \    @ ./reduce.jl:1070 [inlined]\n    [6] filter_integers(values::Vector{Any})\n\
    \      @ Main /tmp/tmpaeoukydp.jl:8\n    [7] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [8] macro expansion\n      @ /tmp/tmpaeoukydp.jl:20 [inlined]\n\
    \    [9] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [10] top-level scope\n      @ /tmp/tmpaeoukydp.jl:17\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    1      2      3\n"
  timestamp: 1660013364
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    for i in values\n        if isa(i, Int64)\n            return i\n    \
    \    end\n    end\n    return []\nend\n</cell>\n<cell>\n# export\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpch7uhz6k.jl:15\nin expression starting at\
    \ /tmp/tmpch7uhz6k.jl:15\n"
  stdout: ''
  timestamp: 1660013361
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    filter(values, v -> is_integer(v), Int64[])\nend\n</code>\n<|/ a dscore=2\
    \ |>\n<| a |>\nAnother solution:\n<code>\njulia> filter((x) -> x \u2209 [:true,\
    \ :false], [:false, :false, :true])\n2-element Array{Symbol,1}:\n :true\n :false\n\
    </code>\n<|/ a dscore=1 tags=julia |>\n<| a tags=julia |>\nThe question seems\
    \ to be more about how to filter out all non-integer values than how to filter\
    \ out all integers. The function filter_integers above is good for that, but I\
    \ wanted to point out that you can also use filter to filter for non-numeric values.\
    \ If you just want to filter out non-numeric values, this would work:\n<code>\n\
    julia> filter(x -> isdigit(x), 1:10)\n10-element Array{Int64,1}:\n 1\n 2\n 3\n\
    \ 4\n 5\n 6\n 7\n 8\n 9\n 10\n</code>\nIf you want to return those non-numeric\
    \ values as well, you can use this:\n<code>\njulia> filter(x -> x isa Float64,\
    \ 1:10)\n10-element Array{Float64,1}:\n 1.0\n 2.0\n 3.0\n 4.0\n 5.0\n 6.0\n 7.0\n\
    \ 8.0\n 9.0\n 10.0\n</code>\nThe difference between the two is that the former\
    \ returns numeric values, whereas the latter returns a list of Float64. This is\
    \ a useful difference.\n<|/ a dscore=1 |>\n<| c |>\nYes, I specifically wanted\
    \ to know how to filter out non-numeric values. I edited the question to make\
    \ that clearer.\n<|/ c |>\n<| a dscore=0 tags=julia |>\nTo filter only integers\
    \ in Julia you can use Int:\n<code>\njulia> filter(x->typeof(x)==Int, 1:10)\n\
    10-element Array{Int64,1}:\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n 10\n</code>\n\
    <|/ a |>\n<| c |>\nThis will only work for positive integers, e.g. `filter(x->typeof(x)==Int,\
    \ 1:10)` returns `1` instead of `1,2`.\n<|/ c |>\n<| c |>\nYeah you are right,\
    \ I missed that part.\n<|/ c |>\n<| a dscore=0 tags=julia |>\nYou could use the\
    \ filter function in combination with is_integer, as in filter\nusing Test\n\n\
    @testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpe931xcvn.jl:10\nin expression starting at\
    \ /tmp/tmpe931xcvn.jl:10\n"
  stdout: ''
  timestamp: 1660013361
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return Int64[ v for v in values if v>=0  ]\nend filter_integers\nusing\
    \ Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: extra token \"filter_integers\" after end of\
    \ expression\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp3fo2a4t7.jl:9\n\
    in expression starting at /tmp/tmp3fo2a4t7.jl:9\n"
  stdout: ''
  timestamp: 1660013361
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    values = filter(values, x -> isa(x, Int64))\n    return values \nend\n\
    using Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpnaqcmeom.jl:13

    '
  stdout: "test set: Error During Test at /tmp/tmpnaqcmeom.jl:16\n  Test threw exception\n\
    \  Expression: candidate(Vector{Any}([])) == Vector{Int64}([])\n  MethodError:\
    \ no method matching filter(::Vector{Any}, ::var\"#1#2\")\n  Closest candidates\
    \ are:\n    filter(::Any, !Matched::Tuple) at ~/.conda/envs/polyglot/share/julia/base/tuple.jl:363\n\
    \    filter(::Any, !Matched::Array{T, N}) where {T, N} at ~/.conda/envs/polyglot/share/julia/base/array.jl:2479\n\
    \    filter(::Any, !Matched::AbstractDict) at ~/.conda/envs/polyglot/share/julia/base/abstractdict.jl:434\n\
    \    ...\n  Stacktrace:\n   [1] filter_integers(values::Vector{Any})\n     @ Main\
    \ /tmp/tmpnaqcmeom.jl:8\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpnaqcmeom.jl:16 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpnaqcmeom.jl:15\ntest set:\
    \ Error During Test at /tmp/tmpnaqcmeom.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9]\n  MethodError: no\
    \ method matching filter(::Vector{Any}, ::var\"#1#2\")\n  Closest candidates are:\n\
    \    filter(::Any, !Matched::Tuple) at ~/.conda/envs/polyglot/share/julia/base/tuple.jl:363\n\
    \    filter(::Any, !Matched::Array{T, N}) where {T, N} at ~/.conda/envs/polyglot/share/julia/base/array.jl:2479\n\
    \    filter(::Any, !Matched::AbstractDict) at ~/.conda/envs/polyglot/share/julia/base/abstractdict.jl:434\n\
    \    ...\n  Stacktrace:\n   [1] filter_integers(values::Vector{Any})\n     @ Main\
    \ /tmp/tmpnaqcmeom.jl:8\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpnaqcmeom.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpnaqcmeom.jl:15\ntest set:\
    \ Error During Test at /tmp/tmpnaqcmeom.jl:18\n  Test threw exception\n  Expression:\
    \ ca"
  timestamp: 1660013365
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    integer = Int64(0)\n    for i in values\n        if typeof(i) <: Integer\n\
    \            integer += i\n        elseif typeof(i) <: Dict\n            integer\
    \ += length(filter_integers(keys(i)))\n        elseif typeof(i) <: Vector{Any}\n\
    \            integer += length(filter_integers(i))\n        end\n    end\n   \
    \ return integer\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\
    \t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4,\
    \ Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3,\
    \ 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmp89i0pdfz.jl:22

    '
  stdout: "test set: Error During Test at /tmp/tmp89i0pdfz.jl:25\n  Test threw exception\n\
    \  Expression: candidate(Vector{Any}([])) == Vector{Int64}([])\n  MethodError:\
    \ Cannot `convert` an object of type Int64 to an object of type Vector{Int64}\n\
    \  Closest candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at ~/.conda/envs/polyglot/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] filter_integers(values::Vector{Any})\n     @ Main\
    \ /tmp/tmp89i0pdfz.jl:18\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp89i0pdfz.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp89i0pdfz.jl:24\ntest set:\
    \ Error During Test at /tmp/tmp89i0pdfz.jl:26\n  Test threw exception\n  Expression:\
    \ candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9]\n  MethodError: no\
    \ method matching filter_integers(::Base.KeySet{Any, Dict{Any, Any}})\n  Closest\
    \ candidates are:\n    filter_integers(!Matched::Vector{Any}) at /tmp/tmp89i0pdfz.jl:7\n\
    \  Stacktrace:\n   [1] filter_integers(values::Vector{Any})\n     @ Main /tmp/tmp89i0pdfz.jl:13\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp89i0pdfz.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp89i0pdfz.jl:24\ntest set:\
    \ Error During Test at /tmp/tmp89i0pdfz.jl:27\n  Test threw exception\n  Expression:\
    \ candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3]\n  MethodError: Cannot\
    \ `convert` an object of type In"
  timestamp: 1660013365
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    filter (x -> isa(Float64, x)) values\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: space before \"(\" not allowed in \"filter (\"\
    \ at /tmp/tmpcf47zx8m.jl:8\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpcf47zx8m.jl:8\n\
    in expression starting at /tmp/tmpcf47zx8m.jl:8\n"
  stdout: ''
  timestamp: 1660013362
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    filtered = filter(values, isinteger)\n    filter_integers = Vector{Int64}(undef,\
    \ length(filtered))\n    for i in 1:length(filter_integers)\n        filter_integers[i]\
    \ = filter_integers[i] & filter(i)\n    end\n    return filter_integers\nend\n\
    using Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmp_faazccm.jl:17

    '
  stdout: "test set: Error During Test at /tmp/tmp_faazccm.jl:20\n  Test threw exception\n\
    \  Expression: candidate(Vector{Any}([])) == Vector{Int64}([])\n  MethodError:\
    \ no method matching filter(::Vector{Any}, ::typeof(isinteger))\n  Closest candidates\
    \ are:\n    filter(::Any, !Matched::Tuple) at ~/.conda/envs/polyglot/share/julia/base/tuple.jl:363\n\
    \    filter(::Any, !Matched::Array{T, N}) where {T, N} at ~/.conda/envs/polyglot/share/julia/base/array.jl:2479\n\
    \    filter(::Any, !Matched::AbstractDict) at ~/.conda/envs/polyglot/share/julia/base/abstractdict.jl:434\n\
    \    ...\n  Stacktrace:\n   [1] filter_integers(values::Vector{Any})\n     @ Main\
    \ /tmp/tmp_faazccm.jl:8\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp_faazccm.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp_faazccm.jl:19\ntest set:\
    \ Error During Test at /tmp/tmp_faazccm.jl:21\n  Test threw exception\n  Expression:\
    \ candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9]\n  MethodError: no\
    \ method matching filter(::Vector{Any}, ::typeof(isinteger))\n  Closest candidates\
    \ are:\n    filter(::Any, !Matched::Tuple) at ~/.conda/envs/polyglot/share/julia/base/tuple.jl:363\n\
    \    filter(::Any, !Matched::Array{T, N}) where {T, N} at ~/.conda/envs/polyglot/share/julia/base/array.jl:2479\n\
    \    filter(::Any, !Matched::AbstractDict) at ~/.conda/envs/polyglot/share/julia/base/abstractdict.jl:434\n\
    \    ...\n  Stacktrace:\n   [1] filter_integers(values::Vector{Any})\n     @ Main\
    \ /tmp/tmp_faazccm.jl:8\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp_faazccm.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp_faazccm.jl:19\ntest set:\
    \ Error During Test at /tmp/tmp_faazccm.jl:22\n  Test threw exception\n"
  timestamp: 1660013365
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    integers = Int64[]\n    for x in values\n        @assert x == Int64(filter_integers(String(x)))\n\
    \        if x isa Vector{Any}\n            integers = union(integers, filter_integers(x))\n\
    \        elseif x isa Number\n            push!(integers, Int(x))\n        end\n\
    \    end\n    integers\nend\n</code>\n<|/ a tags=julia |>\n<| a tags=julia |>\n\
    <code>\njulia> filter(x->(x==Int64(x)),[1,2,3,\"abc\",Dict(),[]])\n4-element Array{Any,1}:\n\
    \ 1\n 2\n 3\n \"abc\"\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis won't work for\
    \ nested types.\n<|/ c |>\n<| a dscore=2 tags=julia |>\nSince Julia 1.1.1 you\
    \ can use the isa() function. It also returns true for types in nested vectors.\n\
    <code>\njulia> isa([1,Int64(1)])\ntrue\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpozxelrbl.jl:19\nin expression starting at\
    \ /tmp/tmpozxelrbl.jl:19\n"
  stdout: ''
  timestamp: 1660013362
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return filter(x -> isa(x, Int64), values)\nend\n</code>\nThis works because\
    \ a Vector{Any} can be converted to Vector{Int64} and vice versa\n<|/ a dscore=1\
    \ tags=julia,type-conversion,arrays |>\n<| a dscore=0 |>\nI usually do this with\
    \ the convertarray function from the DataArrays.jl package:\n<code>\nusing DataArrays\n\
    using Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjkdxkhn_.jl:10\nin expression starting at\
    \ /tmp/tmpjkdxkhn_.jl:10\n"
  stdout: ''
  timestamp: 1660013362
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    if length(values)==1 && isa(values[1], Int64)\n        values\n    else\n\
    \        filter(values, x -> isa(x, Int64))\n    end\nend\n</code>\n<|/ a tags=julia\
    \ |>\n<| a |>\nTo get rid of strings and other non-numbers, you can use the isa()\
    \ function:\n<code>\njulia> typeof(isa(1, String))\nBool\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp10jrzz5q.jl:14\nin expression starting at\
    \ /tmp/tmp10jrzz5q.jl:14\n"
  stdout: ''
  timestamp: 1660013362
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    filter_integers_aux(values, Int64[])\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmp2zjny4d1.jl:12

    '
  stdout: "test set: Error During Test at /tmp/tmp2zjny4d1.jl:15\n  Test threw exception\n\
    \  Expression: candidate(Vector{Any}([])) == Vector{Int64}([])\n  UndefVarError:\
    \ filter_integers_aux not defined\n  Stacktrace:\n   [1] filter_integers(values::Vector{Any})\n\
    \     @ Main /tmp/tmp2zjny4d1.jl:8\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp2zjny4d1.jl:15 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp2zjny4d1.jl:14\ntest set:\
    \ Error During Test at /tmp/tmp2zjny4d1.jl:16\n  Test threw exception\n  Expression:\
    \ candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9]\n  UndefVarError: filter_integers_aux\
    \ not defined\n  Stacktrace:\n   [1] filter_integers(values::Vector{Any})\n  \
    \   @ Main /tmp/tmp2zjny4d1.jl:8\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp2zjny4d1.jl:16 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp2zjny4d1.jl:14\ntest set:\
    \ Error During Test at /tmp/tmp2zjny4d1.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3]\n  UndefVarError: filter_integers_aux\
    \ not defined\n  Stacktrace:\n   [1] filter_integers(values::Vector{Any})\n  \
    \   @ Main /tmp/tmp2zjny4d1.jl:8\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp2zjny4d1.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp2zjny4d1.jl:14\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  timestamp: 1660013364
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    for i in values \n        if typeof(i) == \"Int64\" \n            return\
    \ i \n        end\n    end\n    return [] \nend\nusing Test\n\n@testset begin\n\
    \ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpj2xazsvk.jl:17

    '
  stdout: "test set: Test Failed at /tmp/tmpj2xazsvk.jl:21\n  Expression: candidate([4,\
    \ Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9]\n   Evaluated: Int64[] == [4, 9]\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj2xazsvk.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj2xazsvk.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpj2xazsvk.jl:22\n  Expression: candidate([3, \"c\", 3, 3, \"\
    a\", \"b\"]) == [3, 3, 3]\n   Evaluated: Int64[] == [3, 3, 3]\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj2xazsvk.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj2xazsvk.jl:19\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     2      3\n"
  timestamp: 1660013364
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    \n    for i in values\n        if is_integer(i)\n            push!(values,\
    \ i)\n        else\n            push!(values, i-1)\n        end\n    end\n   \
    \ \n    return values\nend\n</cell>\n<text>\n3.2.2. Map - Map a function over\
    \ given values\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\
    \t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4,\
    \ Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3,\
    \ 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpuckl5skz.jl:19\nin expression starting at\
    \ /tmp/tmpuckl5skz.jl:19\n"
  stdout: ''
  timestamp: 1660013363
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    int_vec = Vector{Int64}()\n    \n    for value in values\n        if is_integer(value)\n\
    \            push!(int_vec, value)\n        end\n    end\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpe6ry0oje.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpe6ry0oje.jl:1\n\
    in expression starting at /tmp/tmpe6ry0oje.jl:1\n"
  stdout: ''
  timestamp: 1660013363
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    vec = Vector{Int64}()\n    for el in values\n        if isa(el,Int64)\n\
    \            push!(vec,el)\n        else\n            push!(vec,0)\n        end\n\
    \    end\n    vec\nend\n</code>\n<|/ a tags=julia,vector dscore=1 |>\n<| a |>\n\
    The answer provided by Matthew O'Rourke is perfectly fine.\nBut if you have some\
    \ reasons to do it using built-in functions, then you may try the following code.\n\
    <code>\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpctt58kny.jl:18\nin expression starting at\
    \ /tmp/tmpctt58kny.jl:18\n"
  stdout: ''
  timestamp: 1660013363
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    if is_jl(values)\n        throw(ArgumentError(\"values should be vector\
    \ of ints or int\"))\n    end\n    result = Vector{Int64}()\n    for v in values\n\
    \        if is_jl(v)\n            if isinteger(v)\n                push!(result,\
    \ v)\n            else\n                throw(ArgumentError(\"values should be\
    \ vector of ints or int\"))\n            end\n        else\n            throw(ArgumentError(\"\
    values should be vector of ints or int\"))\n        end\n    end\n    result\n\
    end\n</cell>\n<text>\nTest filter_integers\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwx1bch_g.jl:25\nin expression starting at\
    \ /tmp/tmpwx1bch_g.jl:25\n"
  stdout: ''
  timestamp: 1660013363
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n  map(x->x isa Int ? x : throw(IllegalArgumentError(\"not an integer\")),\
    \ values)\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\
    \t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4,\
    \ Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3,\
    \ 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 2 errored,
    0 broken.

    in expression starting at /tmp/tmp95wtf7ac.jl:12

    '
  stdout: "test set: Error During Test at /tmp/tmp95wtf7ac.jl:16\n  Test threw exception\n\
    \  Expression: candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9]\n  UndefVarError:\
    \ IllegalArgumentError not defined\n  Stacktrace:\n    [1] #1\n      @ /tmp/tmp95wtf7ac.jl:8\
    \ [inlined]\n    [2] iterate\n      @ ./generator.jl:47 [inlined]\n    [3] collect_to!\n\
    \      @ ./array.jl:782 [inlined]\n    [4] collect_to_with_first!\n      @ ./array.jl:760\
    \ [inlined]\n    [5] _collect(c::Vector{Any}, itr::Base.Generator{Vector{Any},\
    \ var\"#1#2\"}, #unused#::Base.EltypeUnknown, isz::Base.HasShape{1})\n      @\
    \ Base ./array.jl:754\n    [6] collect_similar\n      @ ./array.jl:653 [inlined]\n\
    \    [7] map\n      @ ./abstractarray.jl:2867 [inlined]\n    [8] filter_integers(values::Vector{Any})\n\
    \      @ Main /tmp/tmp95wtf7ac.jl:8\n    [9] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmp95wtf7ac.jl:16 [inlined]\n\
    \   [11] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [12] top-level scope\n      @ /tmp/tmp95wtf7ac.jl:14\ntest set:\
    \ Error During Test at /tmp/tmp95wtf7ac.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3]\n  UndefVarError: IllegalArgumentError\
    \ not defined\n  Stacktrace:\n    [1] #1\n      @ /tmp/tmp95wtf7ac.jl:8 [inlined]\n\
    \    [2] iterate\n      @ ./generator.jl:47 [inlined]\n    [3] collect_to!\n \
    \     @ ./array.jl:782 [inlined]\n    [4] collect_to_with_first!\n      @ ./array.jl:760\
    \ [inlined]\n    [5] _collect(c::Vector{Any}, itr::Base.Generator{Vector{Any},\
    \ var\"#1#2\"}, #unused#::Base.EltypeUnknown, isz::Base.HasShape{1})\n      @\
    \ Base ./array.jl:754\n    [6] collect_similar\n      @ ./array.jl:653 [inlined]\n\
    \    [7] map\n      @ ./abstractarray.jl:2867 [inlined]\n    [8] filter_integers(values::Vector{Any})\n\
    \      @ Main /tmp/tmp95wtf7ac.jl:8\n    [9] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmp95w"
  timestamp: 1660013365
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    \n    values = values |> Vector{Any}\n    \n    filter(i -> typeof(i)\
    \ == Int64, values)\nend\n</cell>\n<text>\nExercise\nFilter the vectors of integers\
    \ and real numbers\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\
    \t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4,\
    \ Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3,\
    \ 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbj2b4oy8.jl:13\nin expression starting at\
    \ /tmp/tmpbj2b4oy8.jl:13\n"
  stdout: ''
  timestamp: 1660013363
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    filter(values, x -> isa(x::Int, Int64))\nend\n</cell>\n<text>\nFilter\
    \ integers from list\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\
    \t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4,\
    \ Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3,\
    \ 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpygmcpdpr.jl:10\nin expression starting at\
    \ /tmp/tmpygmcpdpr.jl:10\n"
  stdout: ''
  timestamp: 1660013363
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    filter(x -> isa(x, Int64), values)\nend\n</cell>\n<text>\nFilter given\
    \ vector of any jlthon values only for integers\nusing Test\n\n@testset begin\n\
    \ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp16rqq02e.jl:10\nin expression starting at\
    \ /tmp/tmp16rqq02e.jl:10\n"
  stdout: ''
  timestamp: 1660013364
- exit_code: 0
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n  vec = Vector{Int64}()\n  index = 1\n  for val in values\n    if isa(val,\
    \ Int)\n      push!(vec, val)\n    end\n    index += 1;\n  end\n  return vec\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660013363
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return filter( x -> isintegerx(x),values)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 2 errored,
    0 broken.

    in expression starting at /tmp/tmpdh3taw5s.jl:12

    '
  stdout: "test set: Error During Test at /tmp/tmpdh3taw5s.jl:16\n  Test threw exception\n\
    \  Expression: candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9]\n  UndefVarError:\
    \ isintegerx not defined\n  Stacktrace:\n   [1] (::var\"#1#2\")(x::Int64)\n  \
    \   @ Main /tmp/tmpdh3taw5s.jl:8\n   [2] filter(f::var\"#1#2\", a::Vector{Any})\n\
    \     @ Base ./array.jl:2484\n   [3] filter_integers(values::Vector{Any})\n  \
    \   @ Main /tmp/tmpdh3taw5s.jl:8\n   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpdh3taw5s.jl:16 [inlined]\n\
    \   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpdh3taw5s.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpdh3taw5s.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3]\n  UndefVarError: isintegerx\
    \ not defined\n  Stacktrace:\n   [1] (::var\"#1#2\")(x::Int64)\n     @ Main /tmp/tmpdh3taw5s.jl:8\n\
    \   [2] filter(f::var\"#1#2\", a::Vector{Any})\n     @ Base ./array.jl:2484\n\
    \   [3] filter_integers(values::Vector{Any})\n     @ Main /tmp/tmpdh3taw5s.jl:8\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpdh3taw5s.jl:17 [inlined]\n\
    \   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpdh3taw5s.jl:14\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    1      2      3\n"
  timestamp: 1660013365
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    if !isempty(values)\n        collect(values(filter(x -> isa(x, Int64),\
    \ values)))\n    else\n        values\n    end\nend\n</cell>\n<cell>\nfilter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n</cell>\n<text>\nisscalar\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyk6eilkx.jl:14\nin expression starting at\
    \ /tmp/tmpyk6eilkx.jl:14\n"
  stdout: ''
  timestamp: 1660013364
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    \n    filter_integers(values) = filter(values, isinteger)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmp4j2x50zo.jl:13

    '
  stdout: "test set: Error During Test at /tmp/tmp4j2x50zo.jl:16\n  Test threw exception\n\
    \  Expression: candidate(Vector{Any}([])) == Vector{Int64}([])\n  MethodError:\
    \ Cannot `convert` an object of type var\"#filter_integers#1\" to an object of\
    \ type Vector{Int64}\n  Closest candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at ~/.conda/envs/polyglot/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] filter_integers(values::Vector{Any})\n     @ Main\
    \ /tmp/tmp4j2x50zo.jl:9\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp4j2x50zo.jl:16 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp4j2x50zo.jl:15\ntest set:\
    \ Error During Test at /tmp/tmp4j2x50zo.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9]\n  MethodError: Cannot\
    \ `convert` an object of type var\"#filter_integers#1\" to an object of type Vector{Int64}\n\
    \  Closest candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at ~/.conda/envs/polyglot/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] filter_integers(values::Vector{Any})\n     @ Main\
    \ /tmp/tmp4j2x50zo.jl:9\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n "
  timestamp: 1660013366
- exit_code: -1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    ret = Set()\n    for v in values\n        if typeof(v) == \"string\"\n\
    \            push!(ret,v)\n        else\n            if typeof(v) == \"dict\"\n\
    \                push!(ret, filter_integers(values(v)))\n            elseif typeof(v)\
    \ == \"Array\"\n                push!(ret, filter_integers(values(v)))\n     \
    \       else\n                if typeof(v) == \"JL\"\n                    push!(ret,\
    \ filter_integers(values(v)))\n                else\n                    push!(ret,v)\n\
    \                end\n            end\n        end\n    end\n    return ret\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  status: Timeout
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmp2kytw_6i.jl:30

    '
  stdout: "test set: Error During Test at /tmp/tmp2kytw_6i.jl:33\n  Test threw exception\n\
    \  Expression: candidate(Vector{Any}([])) == Vector{Int64}([])\n  MethodError:\
    \ Cannot `convert` an object of type Set{Any} to an object of type Vector{Int64}\n\
    \  Closest candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at ~/.conda/envs/polyglot/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] filter_integers(values::Vector{Any})\n     @ Main\
    \ /tmp/tmp2kytw_6i.jl:26\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp2kytw_6i.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp2kytw_6i.jl:32\ntest set:\
    \ Error During Test at /tmp/tmp2kytw_6i.jl:34\n  Test threw exception\n  Expression:\
    \ candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9]\n  MethodError: Cannot\
    \ `convert` an object of type Set{Any} to an object of type Vector{Int64}\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at ~/.conda/envs/polyglot/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] filter_integers(values::Vector{Any})\n     @ Main\
    \ /tmp/tmp2kytw_6i.jl:26\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp2kytw_6i.jl:34"
  timestamp: 1660013368
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    \n    for i in values\n        if (typeof(i) == Int64)\n            i\
    \ = i\n        else \n            append!(i, 0)\n    end\n    \n    return values\n\
    end\n</cell>\n<cell>\nfilter_integers([1, 2, 3, \"abc\", Dict(), []])\n</cell>\n\
    <text>\nFilter out all jlthon values from a Julia array that are of type Dict\n\
    The function returns a new Julia array\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp54ihfmdp.jl:18\nin expression starting at\
    \ /tmp/tmp54ihfmdp.jl:18\n"
  stdout: ''
  timestamp: 1660013364
- exit_code: 0
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n        \n    \"\"\"\n    Filter given vector of any jlthon values only for\
    \ integers\n    >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\n    \n    return filter(x\
    \ -> isa(x, Int64), values)\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1660013363
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n  assert(all(isa(value, Int64) for value in values))\n  filter(x -> isa(x,\
    \ Int64), values)\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\
    \t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4,\
    \ Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3,\
    \ 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpivxhoxu5.jl:13

    '
  stdout: "test set: Error During Test at /tmp/tmpivxhoxu5.jl:16\n  Test threw exception\n\
    \  Expression: candidate(Vector{Any}([])) == Vector{Int64}([])\n  UndefVarError:\
    \ assert not defined\n  Stacktrace:\n   [1] filter_integers(values::Vector{Any})\n\
    \     @ Main /tmp/tmpivxhoxu5.jl:8\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpivxhoxu5.jl:16 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpivxhoxu5.jl:15\ntest set:\
    \ Error During Test at /tmp/tmpivxhoxu5.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9]\n  UndefVarError: assert\
    \ not defined\n  Stacktrace:\n   [1] filter_integers(values::Vector{Any})\n  \
    \   @ Main /tmp/tmpivxhoxu5.jl:8\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpivxhoxu5.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpivxhoxu5.jl:15\ntest set:\
    \ Error During Test at /tmp/tmpivxhoxu5.jl:18\n  Test threw exception\n  Expression:\
    \ candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3]\n  UndefVarError: assert\
    \ not defined\n  Stacktrace:\n   [1] filter_integers(values::Vector{Any})\n  \
    \   @ Main /tmp/tmpivxhoxu5.jl:8\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpivxhoxu5.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpivxhoxu5.jl:15\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  timestamp: 1660013366
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    filter!(isnothing,map(x->tointeger,values))\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 2 errored,
    0 broken.

    in expression starting at /tmp/tmpa8n8sjsu.jl:12

    '
  stdout: "test set: Error During Test at /tmp/tmpa8n8sjsu.jl:16\n  Test threw exception\n\
    \  Expression: candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9]\n  UndefVarError:\
    \ tointeger not defined\n  Stacktrace:\n    [1] #1\n      @ /tmp/tmpa8n8sjsu.jl:8\
    \ [inlined]\n    [2] iterate\n      @ ./generator.jl:47 [inlined]\n    [3] _collect(c::Vector{Any},\
    \ itr::Base.Generator{Vector{Any}, var\"#1#2\"}, #unused#::Base.EltypeUnknown,\
    \ isz::Base.HasShape{1})\n      @ Base ./array.jl:744\n    [4] collect_similar\n\
    \      @ ./array.jl:653 [inlined]\n    [5] map\n      @ ./abstractarray.jl:2867\
    \ [inlined]\n    [6] filter_integers(values::Vector{Any})\n      @ Main /tmp/tmpa8n8sjsu.jl:8\n\
    \    [7] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [8] macro expansion\n      @ /tmp/tmpa8n8sjsu.jl:16 [inlined]\n\
    \    [9] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [10] top-level scope\n      @ /tmp/tmpa8n8sjsu.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpa8n8sjsu.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3]\n  UndefVarError: tointeger\
    \ not defined\n  Stacktrace:\n    [1] #1\n      @ /tmp/tmpa8n8sjsu.jl:8 [inlined]\n\
    \    [2] iterate\n      @ ./generator.jl:47 [inlined]\n    [3] _collect(c::Vector{Any},\
    \ itr::Base.Generator{Vector{Any}, var\"#1#2\"}, #unused#::Base.EltypeUnknown,\
    \ isz::Base.HasShape{1})\n      @ Base ./array.jl:744\n    [4] collect_similar\n\
    \      @ ./array.jl:653 [inlined]\n    [5] map\n      @ ./abstractarray.jl:2867\
    \ [inlined]\n    [6] filter_integers(values::Vector{Any})\n      @ Main /tmp/tmpa8n8sjsu.jl:8\n\
    \    [7] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [8] macro expansion\n      @ /tmp/tmpa8n8sjsu.jl:17 [inlined]\n\
    \    [9] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [10] top-level scope\n      @ /tmp/tmpa8n8sjsu.jl:14\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    1      2      "
  timestamp: 1660013366
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n  if isa(values, Int64)\n    return values\n  elseif isa(values, String)\n\
    \    return filter_integers(to_vector(values))\n  elseif isa(values, Dict)\n \
    \   return filter_integers(values(values))\n  elseif isa(values, Vector{Any})\n\
    \    return filter_integers(values(values))\n  elseif isa(values, Array)\n   \
    \ return filter_integers(values(values))\n  else\n    error(\"Unsupported type\
    \ for filter_integers()\")\n  end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmp7tq22k76.jl:24

    '
  stdout: "test set: Error During Test at /tmp/tmp7tq22k76.jl:27\n  Test threw exception\n\
    \  Expression: candidate(Vector{Any}([])) == Vector{Int64}([])\n  MethodError:\
    \ objects of type Vector{Any} are not callable\n  Use square brackets [] for indexing\
    \ an Array.\n  Stacktrace:\n   [1] filter_integers(values::Vector{Any})\n    \
    \ @ Main /tmp/tmp7tq22k76.jl:15\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp7tq22k76.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp7tq22k76.jl:26\ntest set:\
    \ Error During Test at /tmp/tmp7tq22k76.jl:28\n  Test threw exception\n  Expression:\
    \ candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9]\n  MethodError: objects\
    \ of type Vector{Any} are not callable\n  Use square brackets [] for indexing\
    \ an Array.\n  Stacktrace:\n   [1] filter_integers(values::Vector{Any})\n    \
    \ @ Main /tmp/tmp7tq22k76.jl:15\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp7tq22k76.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp7tq22k76.jl:26\ntest set:\
    \ Error During Test at /tmp/tmp7tq22k76.jl:29\n  Test threw exception\n  Expression:\
    \ candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3]\n  MethodError: objects\
    \ of type Vector{Any} are not callable\n  Use square brackets [] for indexing\
    \ an Array.\n  Stacktrace:\n   [1] filter_integers(values::Vector{Any})\n    \
    \ @ Main /tmp/tmp7tq22k76.jl:15\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp7tq22k76.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp7tq22k76.jl:26\nTest Summary:\
    \ | Error"
  timestamp: 1660013367
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    idxs = Int64[ v isa Int || v isa Integer for v in values ]\n    return\
    \ values[ idxs ]\nend\n</cell>\n<code language=julia-1.0>\nfilter_integers([\"\
    a\", 3.14, 5])\n</cell>\n<code language=julia-1.0>\nfilter_integers([1, 2, 3,\
    \ \"abc\", Dict(), []])\n</cell>\n<text>\n@which filters given vector for function\
    \ calls and returns the function name\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp88o_48it.jl:11\nin expression starting at\
    \ /tmp/tmp88o_48it.jl:11\n"
  stdout: ''
  timestamp: 1660013364
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    \"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpnuauz6jo.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpnuauz6jo.jl:1\n\
    in expression starting at /tmp/tmpnuauz6jo.jl:1\n"
  stdout: ''
  timestamp: 1660013365
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    values = sort(values)\n    return filter(values, x -> isinteger(x), Inf)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmp2g3tk_f7.jl:13

    '
  stdout: "test set: Error During Test at /tmp/tmp2g3tk_f7.jl:16\n  Test threw exception\n\
    \  Expression: candidate(Vector{Any}([])) == Vector{Int64}([])\n  MethodError:\
    \ no method matching filter(::Vector{Any}, ::var\"#1#2\", ::Float64)\n  Closest\
    \ candidates are:\n    filter(::Any, !Matched::Tuple) at ~/.conda/envs/polyglot/share/julia/base/tuple.jl:363\n\
    \    filter(::Any, !Matched::Array{T, N}) where {T, N} at ~/.conda/envs/polyglot/share/julia/base/array.jl:2479\n\
    \    filter(::Any, !Matched::AbstractDict) at ~/.conda/envs/polyglot/share/julia/base/abstractdict.jl:434\n\
    \    ...\n  Stacktrace:\n   [1] filter_integers(values::Vector{Any})\n     @ Main\
    \ /tmp/tmp2g3tk_f7.jl:9\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp2g3tk_f7.jl:16 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp2g3tk_f7.jl:15\ntest set:\
    \ Error During Test at /tmp/tmp2g3tk_f7.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9]\n  MethodError: no\
    \ method matching isless(::Dict{Any, Any}, ::Int64)\n  Closest candidates are:\n\
    \    isless(!Matched::AbstractFloat, ::Real) at ~/.conda/envs/polyglot/share/julia/base/operators.jl:186\n\
    \    isless(!Matched::Real, ::Real) at ~/.conda/envs/polyglot/share/julia/base/operators.jl:430\n\
    \    isless(::Any, !Matched::Missing) at ~/.conda/envs/polyglot/share/julia/base/missing.jl:88\n\
    \    ...\n  Stacktrace:\n    [1] lt(o::Base.Order.ForwardOrdering, a::Dict{Any,\
    \ Any}, b::Int64)\n      @ Base.Order ./ordering.jl:109\n    [2] sort!(v::Vector{Any},\
    \ lo::Int64, hi::Int64, #unused#::Base.Sort.InsertionSortAlg, o::Base.Order.ForwardOrdering)\n\
    \      @ Base.Sort ./sort.jl:507\n    [3] sort!(v::Vector{Any}, lo::Int64, hi::Int64,\
    \ a::Base.Sort.MergeSortAlg, o::Base.Order.ForwardOrdering, t::Vector{Any})\n\
    \      @ Base.Sort ./sort.jl:592\n    [4] sort!\n      @ ./sort.jl:591 [inlined]\n\
    \    [5] sort!\n      @ ./sort.jl:664 [inline"
  timestamp: 1660013368
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    return filter(values, x -> isa(x, Int))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpdbbbf29r.jl:12

    '
  stdout: "test set: Error During Test at /tmp/tmpdbbbf29r.jl:15\n  Test threw exception\n\
    \  Expression: candidate(Vector{Any}([])) == Vector{Int64}([])\n  MethodError:\
    \ no method matching filter(::Vector{Any}, ::var\"#1#2\")\n  Closest candidates\
    \ are:\n    filter(::Any, !Matched::Tuple) at ~/.conda/envs/polyglot/share/julia/base/tuple.jl:363\n\
    \    filter(::Any, !Matched::Array{T, N}) where {T, N} at ~/.conda/envs/polyglot/share/julia/base/array.jl:2479\n\
    \    filter(::Any, !Matched::AbstractDict) at ~/.conda/envs/polyglot/share/julia/base/abstractdict.jl:434\n\
    \    ...\n  Stacktrace:\n   [1] filter_integers(values::Vector{Any})\n     @ Main\
    \ /tmp/tmpdbbbf29r.jl:8\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpdbbbf29r.jl:15 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpdbbbf29r.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpdbbbf29r.jl:16\n  Test threw exception\n  Expression:\
    \ candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9]\n  MethodError: no\
    \ method matching filter(::Vector{Any}, ::var\"#1#2\")\n  Closest candidates are:\n\
    \    filter(::Any, !Matched::Tuple) at ~/.conda/envs/polyglot/share/julia/base/tuple.jl:363\n\
    \    filter(::Any, !Matched::Array{T, N}) where {T, N} at ~/.conda/envs/polyglot/share/julia/base/array.jl:2479\n\
    \    filter(::Any, !Matched::AbstractDict) at ~/.conda/envs/polyglot/share/julia/base/abstractdict.jl:434\n\
    \    ...\n  Stacktrace:\n   [1] filter_integers(values::Vector{Any})\n     @ Main\
    \ /tmp/tmpdbbbf29r.jl:8\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpdbbbf29r.jl:16 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpdbbbf29r.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpdbbbf29r.jl:17\n  Test threw exception\n  Expression:\
    \ ca"
  timestamp: 1660013367
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    filter(values, x -> isa(x, Int64))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpibab2djw.jl:12

    '
  stdout: "test set: Error During Test at /tmp/tmpibab2djw.jl:15\n  Test threw exception\n\
    \  Expression: candidate(Vector{Any}([])) == Vector{Int64}([])\n  MethodError:\
    \ no method matching filter(::Vector{Any}, ::var\"#1#2\")\n  Closest candidates\
    \ are:\n    filter(::Any, !Matched::Tuple) at ~/.conda/envs/polyglot/share/julia/base/tuple.jl:363\n\
    \    filter(::Any, !Matched::Array{T, N}) where {T, N} at ~/.conda/envs/polyglot/share/julia/base/array.jl:2479\n\
    \    filter(::Any, !Matched::AbstractDict) at ~/.conda/envs/polyglot/share/julia/base/abstractdict.jl:434\n\
    \    ...\n  Stacktrace:\n   [1] filter_integers(values::Vector{Any})\n     @ Main\
    \ /tmp/tmpibab2djw.jl:8\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpibab2djw.jl:15 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpibab2djw.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpibab2djw.jl:16\n  Test threw exception\n  Expression:\
    \ candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9]\n  MethodError: no\
    \ method matching filter(::Vector{Any}, ::var\"#1#2\")\n  Closest candidates are:\n\
    \    filter(::Any, !Matched::Tuple) at ~/.conda/envs/polyglot/share/julia/base/tuple.jl:363\n\
    \    filter(::Any, !Matched::Array{T, N}) where {T, N} at ~/.conda/envs/polyglot/share/julia/base/array.jl:2479\n\
    \    filter(::Any, !Matched::AbstractDict) at ~/.conda/envs/polyglot/share/julia/base/abstractdict.jl:434\n\
    \    ...\n  Stacktrace:\n   [1] filter_integers(values::Vector{Any})\n     @ Main\
    \ /tmp/tmpibab2djw.jl:8\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpibab2djw.jl:16 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpibab2djw.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpibab2djw.jl:17\n  Test threw exception\n  Expression:\
    \ ca"
  timestamp: 1660013368
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    values = filter(values->typeof(values) in (Int64), values)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 2 errored,
    0 broken.

    in expression starting at /tmp/tmp2fwr27xu.jl:12

    '
  stdout: "test set: Error During Test at /tmp/tmp2fwr27xu.jl:16\n  Test threw exception\n\
    \  Expression: candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9]\n  MethodError:\
    \ no method matching iterate(::Type{Int64})\n  Closest candidates are:\n    iterate(!Matched::Union{LinRange,\
    \ StepRangeLen}) at ~/.conda/envs/polyglot/share/julia/base/range.jl:826\n   \
    \ iterate(!Matched::Union{LinRange, StepRangeLen}, !Matched::Integer) at ~/.conda/envs/polyglot/share/julia/base/range.jl:826\n\
    \    iterate(!Matched::T) where T<:Union{Base.KeySet{<:Any, <:Dict}, Base.ValueIterator{<:Dict}}\
    \ at ~/.conda/envs/polyglot/share/julia/base/dict.jl:695\n    ...\n  Stacktrace:\n\
    \   [1] in(x::Type, itr::Type)\n     @ Base ./operators.jl:1282\n   [2] (::var\"\
    #1#2\")(values::Int64)\n     @ Main /tmp/tmp2fwr27xu.jl:8\n   [3] filter(f::var\"\
    #1#2\", a::Vector{Any})\n     @ Base ./array.jl:2484\n   [4] filter_integers(values::Vector{Any})\n\
    \     @ Main /tmp/tmp2fwr27xu.jl:8\n   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmp2fwr27xu.jl:16 [inlined]\n\
    \   [7] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmp2fwr27xu.jl:14\ntest set:\
    \ Error During Test at /tmp/tmp2fwr27xu.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3]\n  MethodError: no method\
    \ matching iterate(::Type{Int64})\n  Closest candidates are:\n    iterate(!Matched::Union{LinRange,\
    \ StepRangeLen}) at ~/.conda/envs/polyglot/share/julia/base/range.jl:826\n   \
    \ iterate(!Matched::Union{LinRange, StepRangeLen}, !Matched::Integer) at ~/.conda/envs/polyglot/share/julia/base/range.jl:826\n\
    \    iterate(!Matched::T) where T<:Union{Base.KeySet{<:Any, <:Dict}, Base.ValueIterator{<:Dict}}\
    \ at ~/.conda/envs/polyglot/share/julia/base/dict.jl:695\n    ...\n  Stacktrace:\n\
    \   [1] in(x::Type, itr::Type)\n     @ Base ./operators.jl:1282\n   [2] (::var\"\
    #1#2\")(values::Int64)\n     @ Main /tmp/tmp2fwr27xu.jl:8\n   [3] filter(f::var\"\
    #1#2\", a"
  timestamp: 1660013368
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    for v in values\n        if isinteger(v) \n            push!(values, v)\n\
    \        end\n    end\n    return values\nend\nusing Test\n\n@testset begin\n\n\
    candidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 2 errored,
    0 broken.

    in expression starting at /tmp/tmppp3sn5kl.jl:17

    '
  stdout: "test set: Error During Test at /tmp/tmppp3sn5kl.jl:21\n  Test threw exception\n\
    \  Expression: candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9]\n  MethodError:\
    \ no method matching isinteger(::Dict{Any, Any})\n  Closest candidates are:\n\
    \    isinteger(!Matched::Integer) at ~/.conda/envs/polyglot/share/julia/base/number.jl:20\n\
    \    isinteger(!Matched::Complex) at ~/.conda/envs/polyglot/share/julia/base/complex.jl:145\n\
    \    isinteger(!Matched::Rational) at ~/.conda/envs/polyglot/share/julia/base/rational.jl:265\n\
    \    ...\n  Stacktrace:\n   [1] filter_integers(values::Vector{Any})\n     @ Main\
    \ /tmp/tmppp3sn5kl.jl:9\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmppp3sn5kl.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmppp3sn5kl.jl:19\ntest set:\
    \ Error During Test at /tmp/tmppp3sn5kl.jl:22\n  Test threw exception\n  Expression:\
    \ candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3]\n  MethodError: no method\
    \ matching isinteger(::String)\n  Closest candidates are:\n    isinteger(!Matched::Integer)\
    \ at ~/.conda/envs/polyglot/share/julia/base/number.jl:20\n    isinteger(!Matched::Complex)\
    \ at ~/.conda/envs/polyglot/share/julia/base/complex.jl:145\n    isinteger(!Matched::Rational)\
    \ at ~/.conda/envs/polyglot/share/julia/base/rational.jl:265\n    ...\n  Stacktrace:\n\
    \   [1] filter_integers(values::Vector{Any})\n     @ Main /tmp/tmppp3sn5kl.jl:9\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmppp3sn5kl.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmppp3sn5kl.jl:19\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    1      2      3\n"
  timestamp: 1660013368
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    \n    local vs = values\n    local result = Int64[]\n    local i = 1\n\
    using Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp7_ut2nrg.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp7_ut2nrg.jl:1\n\
    in expression starting at /tmp/tmp7_ut2nrg.jl:1\n"
  stdout: ''
  timestamp: 1660013365
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    for x in values\n        if isa(x, Int64)\n            push!(values, x)\n\
    \        end\n    end\n    return values\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpn9303yqq.jl:15\nin expression starting at\
    \ /tmp/tmpn9303yqq.jl:15\n"
  stdout: ''
  timestamp: 1660013366
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n  new_values = []\n  for value in values\n    push!(new_values, Int64(value))\n\
    \  end\n  return new_values\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 2 errored,
    0 broken.

    in expression starting at /tmp/tmpbkd_l3f9.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmpbkd_l3f9.jl:20\n  Test threw exception\n\
    \  Expression: candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9]\n  MethodError:\
    \ no method matching Int64(::Dict{Any, Any})\n  Closest candidates are:\n    (::Type{T})(!Matched::AbstractChar)\
    \ where T<:Union{Int32, Int64} at ~/.conda/envs/polyglot/share/julia/base/char.jl:51\n\
    \    (::Type{T})(!Matched::AbstractChar) where T<:Union{AbstractChar, Number}\
    \ at ~/.conda/envs/polyglot/share/julia/base/char.jl:50\n    (::Type{T})(!Matched::BigInt)\
    \ where T<:Union{Int128, Int16, Int32, Int64, Int8} at ~/.conda/envs/polyglot/share/julia/base/gmp.jl:357\n\
    \    ...\n  Stacktrace:\n   [1] filter_integers(values::Vector{Any})\n     @ Main\
    \ /tmp/tmpbkd_l3f9.jl:10\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpbkd_l3f9.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpbkd_l3f9.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpbkd_l3f9.jl:21\n  Test threw exception\n  Expression:\
    \ candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3]\n  MethodError: no method\
    \ matching Int64(::String)\n  Closest candidates are:\n    (::Type{T})(!Matched::AbstractChar)\
    \ where T<:Union{Int32, Int64} at ~/.conda/envs/polyglot/share/julia/base/char.jl:51\n\
    \    (::Type{T})(!Matched::AbstractChar) where T<:Union{AbstractChar, Number}\
    \ at ~/.conda/envs/polyglot/share/julia/base/char.jl:50\n    (::Type{T})(!Matched::BigInt)\
    \ where T<:Union{Int128, Int16, Int32, Int64, Int8} at ~/.conda/envs/polyglot/share/julia/base/gmp.jl:357\n\
    \    ...\n  Stacktrace:\n   [1] filter_integers(values::Vector{Any})\n     @ Main\
    \ /tmp/tmpbkd_l3f9.jl:10\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpbkd_l3f9.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   "
  timestamp: 1660013368
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    values = filter(values, is_integer)\n    return values\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmp7wgl7toy.jl:13

    '
  stdout: "test set: Error During Test at /tmp/tmp7wgl7toy.jl:16\n  Test threw exception\n\
    \  Expression: candidate(Vector{Any}([])) == Vector{Int64}([])\n  UndefVarError:\
    \ is_integer not defined\n  Stacktrace:\n   [1] filter_integers(values::Vector{Any})\n\
    \     @ Main /tmp/tmp7wgl7toy.jl:8\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp7wgl7toy.jl:16 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp7wgl7toy.jl:15\ntest set:\
    \ Error During Test at /tmp/tmp7wgl7toy.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9]\n  UndefVarError: is_integer\
    \ not defined\n  Stacktrace:\n   [1] filter_integers(values::Vector{Any})\n  \
    \   @ Main /tmp/tmp7wgl7toy.jl:8\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp7wgl7toy.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp7wgl7toy.jl:15\ntest set:\
    \ Error During Test at /tmp/tmp7wgl7toy.jl:18\n  Test threw exception\n  Expression:\
    \ candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3]\n  UndefVarError: is_integer\
    \ not defined\n  Stacktrace:\n   [1] filter_integers(values::Vector{Any})\n  \
    \   @ Main /tmp/tmp7wgl7toy.jl:8\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp7wgl7toy.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp7wgl7toy.jl:15\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  timestamp: 1660013367
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    filter(values, x -> isa(x, Int64))\nend\n</code>\n<|/ a tags=julia,type-conversion\
    \ |>\n<| c |>\nIt's a good answer. Maybe it would be also useful to show how to\
    \ make a more generic version, that doesn't require the type to be `Any`.\n<|/\
    \ c |>\n<| a |>\nThis may be overkill, but here's a version that doesn't require\
    \ the type to be Any at all:\n<code>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyc_ly7h1.jl:10\nin expression starting at\
    \ /tmp/tmpyc_ly7h1.jl:10\n"
  stdout: ''
  timestamp: 1660013366
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    for i in values \n        @assert typeof(i) == Int64 \n        push!(values,\
    \ i) \n    end\n    return values \nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 2 errored,
    0 broken.

    in expression starting at /tmp/tmp583fgrr3.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmp583fgrr3.jl:20\n  Test threw exception\n\
    \  Expression: candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9]\n  AssertionError:\
    \ typeof(i) == Int64\n  Stacktrace:\n   [1] filter_integers(values::Vector{Any})\n\
    \     @ Main /tmp/tmp583fgrr3.jl:9\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp583fgrr3.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp583fgrr3.jl:18\ntest set:\
    \ Error During Test at /tmp/tmp583fgrr3.jl:21\n  Test threw exception\n  Expression:\
    \ candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3]\n  AssertionError: typeof(i)\
    \ == Int64\n  Stacktrace:\n   [1] filter_integers(values::Vector{Any})\n     @\
    \ Main /tmp/tmp583fgrr3.jl:9\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp583fgrr3.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp583fgrr3.jl:18\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    1      2      3\n"
  timestamp: 1660013368
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    integer = Int64\n    for i in values\n        if typeof(i)==Int64\n  \
    \          push!(integer, i)\n        end\n    end\n    integer\nend\n</cell>\n\
    <code language=julia-1.5>\nfilter_integers([\"a\", 3.14, 5])\n</cell>\n<code language=julia-1.5>\n\
    filter_integers([1, 2, 3, \"abc\", Dict(), []])\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpb169sxlp.jl:16\nin expression starting at\
    \ /tmp/tmpb169sxlp.jl:16\n"
  stdout: ''
  timestamp: 1660013366
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    integer = Int64\n    \n    integer_vector = Vector{integer}()\n    for\
    \ v in values\n        if isinteger(v)\n            push!(integer_vector, v)\n\
    \        end\n    end\n    return integer_vector\nend\n</cell>\n<code language=julia-1.3>\n\
    using Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprnau3l9r.jl:18\nin expression starting at\
    \ /tmp/tmprnau3l9r.jl:18\n"
  stdout: ''
  timestamp: 1660013366
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    if isa(values, Vector{Int64}) && all(isinteger(x) || isa(x, Dict) for\
    \ x \u2208 values)\n        values\n    else\n        collect{x->ifelse(isinteger(x),\
    \ x, x)}(values)\n    end\nend\n</cell>\n<text>\nTo filter our vector of integers\
    \ only we use the function filter_integers().\nusing Test\n\n@testset begin\n\n\
    candidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmph8_95jqb.jl:14\nin expression starting at\
    \ /tmp/tmph8_95jqb.jl:14\n"
  stdout: ''
  timestamp: 1660013366
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n  result = Vector{Int64}()\n  for v in values\n    if isa(v,Int64) || isa(v,Float64)\n\
    \      push!(result, v)\n    end\n  end\n  result\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 0 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmpyqgicttz.jl:18

    '
  stdout: "test set: Error During Test at /tmp/tmpyqgicttz.jl:22\n  Test threw exception\n\
    \  Expression: candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9]\n  InexactError:\
    \ Int64(23.2)\n  Stacktrace:\n   [1] Int64\n     @ ./float.jl:812 [inlined]\n\
    \   [2] convert\n     @ ./number.jl:7 [inlined]\n   [3] push!\n     @ ./array.jl:994\
    \ [inlined]\n   [4] filter_integers(values::Vector{Any})\n     @ Main /tmp/tmpyqgicttz.jl:11\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpyqgicttz.jl:22 [inlined]\n\
    \   [7] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpyqgicttz.jl:20\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    2      1      3\n"
  timestamp: 1660013368
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    if isa(values, AbstractVector{Integer}) == true\n        values\n    elseif\
    \ isa(values, AbstractVector{Number}) == true\n        filter(x -> typeof(x) <:\
    \ Integer,values)\n    elseif isa(values, AbstractVector{<:Integer}) == true\n\
    \        filter(x -> typeof(x) <: Integer,values)\n    elseif isa(values, AbstractVector{String})\
    \ == true\n        filter(x -> typeof(x) <: String{Integer},values)\n    elseif\
    \ isa(values, AbstractVector{Dict}) == true\n        filter(x -> typeof(x) <:\
    \ Dict,values)\n    elseif isa(values, AbstractVector{List}) == true\n       \
    \ filter(x -> typeof(x) <: List,values)\n    elseif isa(values, AbstractVector{Any})\
    \ == true\n        filter(x -> typeof(x) <: Number,values)\n    elseif isa(values,\
    \ AbstractVector{Union{String, Int64}}) == true\n        filter(x -> typeof(x)\
    \ <: Integer,values)\n    elseif isa(values, AbstractVector{Union{Integer, Float64}})\
    \ == true\n        filter(x -> typeof(x) <: Integer,values)\n    else\n      \
    \  throw(ArgumentError(\"filter only support integers, strings, and floats\"))\n\
    \    end\nend\n</cell>\n<text>\nisa\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpomua9eg5.jl:30\nin expression starting at\
    \ /tmp/tmpomua9eg5.jl:30\n"
  stdout: ''
  timestamp: 1660013366
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    Vector{Int64} = Int64[]\n    \n    for value in values\n        if isa(value,Int)\n\
    \            push!(Vector{Int64}, value)\n        else\n            push!(Vector{Int64},\
    \ 1)\n        end\n    end\n    \n    return Vector{Int64}\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmp7c5oj_eb.jl:22

    '
  stdout: "test set: Error During Test at /tmp/tmp7c5oj_eb.jl:25\n  Test threw exception\n\
    \  Expression: candidate(Vector{Any}([])) == Vector{Int64}([])\n  UndefVarError:\
    \ Vector not defined\n  Stacktrace:\n   [1] filter_integers(values::Vector{Any})\n\
    \     @ Main /tmp/tmp7c5oj_eb.jl:8\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp7c5oj_eb.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp7c5oj_eb.jl:24\ntest set:\
    \ Error During Test at /tmp/tmp7c5oj_eb.jl:26\n  Test threw exception\n  Expression:\
    \ candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9]\n  UndefVarError: Vector\
    \ not defined\n  Stacktrace:\n   [1] filter_integers(values::Vector{Any})\n  \
    \   @ Main /tmp/tmp7c5oj_eb.jl:8\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp7c5oj_eb.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp7c5oj_eb.jl:24\ntest set:\
    \ Error During Test at /tmp/tmp7c5oj_eb.jl:27\n  Test threw exception\n  Expression:\
    \ candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3]\n  UndefVarError: Vector\
    \ not defined\n  Stacktrace:\n   [1] filter_integers(values::Vector{Any})\n  \
    \   @ Main /tmp/tmp7c5oj_eb.jl:8\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp7c5oj_eb.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp7c5oj_eb.jl:24\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  timestamp: 1660013368
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    filter(x -> isa(x, Int64), values)\nend\n</code>\nThe above is more efficient\
    \ that converting values to Int64 in filter_integers.\n<|/ a dscore=5 |>\n<| c\
    \ |>\nJust wanted to add that if you want the function to be type stable in the\
    \ return type, use `filter(x -> isa(x, Int64), values)`, or alternatively use\
    \ the `any` function: `any(x -> isa(x, Int64), values)`.\n<|/ c |>\n<| a |>\n\
    <code>\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnt4dac88.jl:10\nin expression starting at\
    \ /tmp/tmpnt4dac88.jl:10\n"
  stdout: ''
  timestamp: 1660013366
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    if values.isa<Vector>()\n        return values.filter(x -> isa(x, Int64))\n\
    \    end\n    return values.filter(x -> isa(x, Int64) || isa(x, Dict))\nend\n\
    </code>\n<|/ a tags=julia |>\n<| a |>\nA different (more general) approach is\
    \ to define a predicate function f that returns true if the variable is \"integer-like\"\
    :\n<code>\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppfzpdywb.jl:13\nin expression starting at\
    \ /tmp/tmppfzpdywb.jl:13\n"
  stdout: ''
  timestamp: 1660013367
