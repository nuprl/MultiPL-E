language: jl
name: HumanEval_146_specialFilter
results:
- exit_code: -1
  program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    \n    return (length(nums)-1)/(length(nums)-1)*specialFilter(nums[1:(length(nums)-1)])\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = specialFilter;\n\t@test(candidate([5,\
    \ -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109])\
    \ == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate(Vector{Int64}([])) == 0)\nend\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660008984
- exit_code: 1
  program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0\n    for num in nums\n        if num > 10\n            if mod(num,\
    \ 2) != 1\n                if mod(num, 5) == 0 && mod(num, 3) == 0 && mod(num,\
    \ 7) == 0\n                    count += 1\n                end\n            end\n\
    \        end\n    end\n    return count\nend\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a vector of numbers as input and returns the first element\n\
    of the vector that is the smallest multiple of $2$ that is bigger than $9$. For\
    \ example:\n>>> specialFilter(vecOfInts)\n2\nusing Test\n\n@testset begin\n\n\
    candidate = specialFilter;\n\t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15,\
    \ -73, 14, -15]) == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t\
    @test(candidate([43, -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2,\
    \ -33, 75, 21, 19]) == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvmz3_ele.jl:23\nin expression starting at\
    \ /tmp/tmpvmz3_ele.jl:23\n"
  stdout: ''
  timestamp: 1660008981
- exit_code: 1
  program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    #Write your code!\n    for n in nums\n        if n > 10\n            l\
    \ = floor(log10(n))\n            if l % 2 == 1\n                #if first digit\
    \ of an odd number\n                if n == floor(n / 10) * 10\n             \
    \       #if last digit of an odd number\n                    if n == floor(n /\
    \ 10) * 10 + 9\n                        return 1\n                    end\n  \
    \              else\n                    #if last digit of an even number\n  \
    \                  if n - (floor(n / 10) * 10 + 9) % 2 == 0\n                \
    \        return 1\n                    end\n                end\n            else\n\
    \                #if first digit of an even number\n                if n == floor(n\
    \ / 10) * 10 - 1\n                    #if last digit of an even number\n     \
    \               if n == floor(n / 10) * 10 + 9\n                        return\
    \ 1\n                    end\n                else\n                    #if last\
    \ digit of an odd number\n                    if n - (floor(n / 10) * 10 + 9)\
    \ % 2 == 0\n                        return 1\n                    end\n      \
    \          end\n            end\n        end\n    end\n    return 0\nend\n</cell>\n\
    <cell>\nusing Plots\n</cell>\n<cell>\n\"\"\"\nSolution for question 2\n\"\"\"\n\
    using Test\n\n@testset begin\n\ncandidate = specialFilter;\n\t@test(candidate([5,\
    \ -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109])\
    \ == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate(Vector{Int64}([])) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpd02233gh.jl:46\nin expression starting at\
    \ /tmp/tmpd02233gh.jl:46\n"
  stdout: ''
  timestamp: 1660008980
- exit_code: 1
  program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    return sum(nums .> 10) & (nums .%2) == 0 & (nums .%2) == 1 \nend\n</cell>\n\
    <code language=julia-0.5>\n@assert specialFilter([-3, 4, -5, 10, 1]) == 4\n@assert\
    \ specialFilter([20, 10, -10, 20, 1]) == 2\n@assert specialFilter([2, -2]) ==\
    \ 0\n@assert specialFilter([-9, -2, -7, 12]) == 0\n</cell>\n<text>\n4.4 Filter\
    \ Exercise 1\nWrite a function that filters a given vector of numbers and returns\
    \ a \n    new vector that contains the elements that satisfy a given condition.\
    \ \n    Your function should take as inputs the following vectors:\nusing Test\n\
    \n@testset begin\n\ncandidate = specialFilter;\n\t@test(candidate([5, -2, 1, -5])\
    \ == 0)\n\t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33, -2,\
    \ -3, 45, 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109]) ==\
    \ 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate(Vector{Int64}([])) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpo0fu99ky.jl:13\nin expression starting at\
    \ /tmp/tmpo0fu99ky.jl:13\n"
  stdout: ''
  timestamp: 1660008980
- exit_code: 1
  program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    filteredNums = Vector{Int64}(undef, 0)\n    for num in nums\n        if\
    \ num > 10 && num % 2 == 1 && num % 3 != 1 && num % 5 != 1 && num % 7 != 1 \n\
    \            && num % 9 != 1\n            push!(filteredNums, num)\n        end\n\
    \    end\n    return length(filteredNums)\nend\n</code>\n<|/ a tags=julia dscore=0\
    \ |>\n<| c |>\nYou should use the `&&` operator instead of  the logical `&&`.\n\
    <|/ c |>\n<| a dscore=0 |>\nHere's a version that uses a list comprehension and\
    \ filter, which I think has better performance.  (It also avoids duplicating the\
    \ condition checks.)  I believe this version is more readable and easier to maintain,\
    \ so if you think this one is more readable and easy to understand then go with\
    \ it!\n<code>\nusing Test\n\n@testset begin\n\ncandidate = specialFilter;\n\t\
    @test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15]) ==\
    \ 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43,\
    \ -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19])\
    \ == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid identifier name \"&&\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9dct33fs.jl:14\nin expression starting at\
    \ /tmp/tmp9dct33fs.jl:14\n"
  stdout: ''
  timestamp: 1660008981
- exit_code: 1
  program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0\n    for i in nums\n        if i > 10 && nums.index(i / 2, 1)\
    \ != nums.index(i / 2, -1)\n            count += 1\n        end\n    end\n   \
    \ return count\nend\n</cell>\n<code language=julia-1.2>\n# TEST Write a function\
    \ that takes a vector of numbers as input and returns \n# the number of elements\
    \ in the vector that are greater than 10 and both \n# first and last digits of\
    \ a number are odd (1, 3, 5, 7, 9).\n# For example:\n@test specialFilter([15,\
    \ -73, 14, -15]) == 1;\n@test specialFilter([33, -2, -3, 45, 21, 109]) == 2;\n\
    </cell>\n<code language=julia-1.2>\n\"\"\"Write a function that takes a vector\
    \ of numbers as input and returns \nthe sum of the even numbers between 100 and\
    \ 500 (100, 120, 140, 150). \nFor example:\n>>> specialFilter([23, 22, 34, 22,\
    \ 11])\n45\n\"\"\"\nusing Test\n\n@testset begin\n\ncandidate = specialFilter;\n\
    \t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15])\
    \ == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43,\
    \ -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19])\
    \ == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbmuufntn.jl:19\nin expression starting at\
    \ /tmp/tmpbmuufntn.jl:19\n"
  stdout: ''
  timestamp: 1660008980
- exit_code: 1
  program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    if length(nums)<2 return 0\n    sum=0\n    for x in nums\n        if x<10\
    \ || x%2==1 \n            sum+=1\n        elseif x<10 && x%2==0 \n           \
    \ sum+=2\n        end\n    end\n    return sum\nend\n</cell>\n<text>\nExercise\
    \ 1\nWrite a function that takes two vectors as input and:\nusing Test\n\n@testset\
    \ begin\n\ncandidate = specialFilter;\n\t@test(candidate([5, -2, 1, -5]) == 0)\n\
    \t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33, -2, -3, 45,\
    \ 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71,\
    \ -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpy4tb8yvt.jl:22\nin expression starting at\
    \ /tmp/tmpy4tb8yvt.jl:22\n"
  stdout: ''
  timestamp: 1660008980
- exit_code: 1
  program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    len = length(nums)\n    count = 0\n    for i in 1:len\n        odd = isOdd(nums[i])\n\
    \        if odd && odd == (nums[i]%2==0)\n            count += 1\n        end\n\
    \    end\n    return count\nend \n</cell>\n<code language=julia-1.3>\n# Test our\
    \ function\n@test specialFilter(v) == 4\n</cell>\n<text>\nPart 3: Recursion\n\
    using Test\n\n@testset begin\n\ncandidate = specialFilter;\n\t@test(candidate([5,\
    \ -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109])\
    \ == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate(Vector{Int64}([])) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxbrs693x.jl:21\nin expression starting at\
    \ /tmp/tmpxbrs693x.jl:21\n"
  stdout: ''
  timestamp: 1660008980
- exit_code: 1
  program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    \"\"\"\n    Write a function that takes a vector of numbers as input and\
    \ returns \n    the number of elements in the vector that are greater than 10\
    \ and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n\
    \    For example:\n    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\n    for num in nums\n        if num\
    \ > 10\n            if num % 10 == 1 || num % 10 == 3\n                return\
    \ 1\n            else\n                if num % 10 == 5 || num % 10 == 7\n   \
    \                 return 1\n                else\n                    if num %\
    \ 10 == 9\n                        return 1\n                    else\n      \
    \                  if num % 10 == 0\n                            return 1\n  \
    \                      else\n                            return 0\nend\n</cell>\n\
    <code language=julia-1.0>\n#=\nBEGIN ANSWER\n=#\nusing Test\n\n@testset begin\n\
    \ncandidate = specialFilter;\n\t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15,\
    \ -73, 14, -15]) == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t\
    @test(candidate([43, -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2,\
    \ -33, 75, 21, 19]) == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpr0ic5lc9.jl:37\nin expression starting at\
    \ /tmp/tmpr0ic5lc9.jl:37\n"
  stdout: ''
  timestamp: 1660008981
- exit_code: 1
  program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    if any(nums==0)\n        return 0\n    end\n    for n in nums\n      \
    \  first, last= split(n) # split the number to two numbers: first and last digit\n\
    \        \n        if first%2==0 && last%2==1\n            count=count+1\n   \
    \     end\n    end\n    return count\nend\n</cell>\n<text>\nExercise: Write a\
    \ function that takes a vector of numbers as input and returns \n    the number\
    \ of elements in the vector that are greater than 10 and both \n    first and\
    \ last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>>\
    \ specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33, -2, -3,\
    \ 45, 21, 109])\n    2\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = specialFilter;\n\t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15,\
    \ -73, 14, -15]) == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t\
    @test(candidate([43, -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2,\
    \ -33, 75, 21, 19]) == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprmhxamkl.jl:23\nin expression starting at\
    \ /tmp/tmprmhxamkl.jl:23\n"
  stdout: ''
  timestamp: 1660008981
- exit_code: 1
  program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    nums.sort()\n    idx = 0\n    while idx < nums.length\n        if nums[idx]\
    \ > 10\n            idx += 1\n        else\n            sum = 0\n            while\
    \ idx < nums.length && nums[idx] > 10\n                sum += nums[idx]\n    \
    \            idx += 1\n            if nums[idx] == sum % 10\n                if\
    \ ((nums[idx] < 4) && (nums[idx] % 2 ==1))\n                    return 1\n   \
    \             else\n                    return 0\n            end\n        end\n\
    \    end\n    return 0\nend\nusing Test\n\n@testset begin\n\ncandidate = specialFilter;\n\
    \t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15])\
    \ == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43,\
    \ -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19])\
    \ == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"while\" at /tmp/tmp230tvhir.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp230tvhir.jl:1\n\
    in expression starting at /tmp/tmp230tvhir.jl:1\n"
  stdout: ''
  timestamp: 1660008981
- exit_code: 1
  program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    \n    return length(nums[nums > 10 and (nums[2] % 2 == 1) && (nums[3]\
    \ % 2 == 1)])\nend\n</cell>\n<text>\nTask: What are the 10 first numbers in the\
    \ vector below? (Write a function that takes a vector as input and returns 10\
    \ numbers).\nusing Test\n\n@testset begin\n\ncandidate = specialFilter;\n\t@test(candidate([5,\
    \ -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109])\
    \ == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate(Vector{Int64}([])) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp59x_i4uz.jl:14\nin expression starting at\
    \ /tmp/tmp59x_i4uz.jl:14\n"
  stdout: ''
  timestamp: 1660008981
- exit_code: 1
  program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    if nums[1] % 2 != 0 ||\n        nums[end(nums)] % 2 != 0 ||\n        nums[1]\
    \ == 0 ||\n        nums[end(nums)] == 0 ||\n        nums[1] < 10 ||\n        nums[end(nums)]\
    \ < 10\n    then return 0\n    else if nums[1] > 10 && nums[end(nums)] > 10 &&\n\
    \          nums[1] % 2 == nums[end(nums)] % 2 &&\n          nums[1] % 2 != 0 &&\
    \ nums[end(nums)] % 2 != 0\n    then return 1\n    else return 0\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = specialFilter;\n\t@test(candidate([5,\
    \ -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109])\
    \ == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate(Vector{Int64}([])) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpn967oqft.jl:17\nin expression starting at /tmp/tmpn967oqft.jl:17\n"
  stdout: ''
  timestamp: 1660008980
- exit_code: 1
  program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    if nums == Nil \n        return 0 \n    else \n        even = first(nums)\
    \ > 10 && last(nums)%2 > 0\n        return sum(x -> x > 10 && isOdd(x), nums[even])\
    \ + sum(x -> x > 10, nums[not even])\nend\n</cell>\n<code language=julia-0.5>\n\
    # TEST specialFilter (14.0ms)\n@assert specialFilter([15, -73, 14, -15]) == 1\
    \ \n@assert specialFilter([33, -2, -3, 45, 21, 109]) == 2 \n</cell>\n<text>\n\
    12.4 How to use the map() function\nmap() can be thought of as a way to apply\
    \ a function to each element of a collection. map() can take either a function\
    \ or an anonymous function (in which case the function is applied to the elements\
    \ of the collection as the argument is demanded). For example,\nusing Test\n\n\
    @testset begin\n\ncandidate = specialFilter;\n\t@test(candidate([5, -2, 1, -5])\
    \ == 0)\n\t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33, -2,\
    \ -3, 45, 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109]) ==\
    \ 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate(Vector{Int64}([])) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1pir9cs_.jl:17\nin expression starting at\
    \ /tmp/tmp1pir9cs_.jl:17\n"
  stdout: ''
  timestamp: 1660008981
- exit_code: 1
  program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0\n    for n in nums\n        if n < 10\n            count +=\
    \ 1\n        elseif n < 100\n            if n % 2 == 0\n                count\
    \ += 1\n            else\n                if n % 3 == 0\n                    count\
    \ += 1\n                else\n                    if n % 5 == 0\n            \
    \            count += 1\n                    else\n                        if\
    \ n % 7 == 0\n                            count += 1\n                       \
    \ else\n                            if n % 9 == 0\n                          \
    \      count += 1\n                            end\n                        end\n\
    \                    end\n                end\n            end\n        end\n\
    \    end\n    count\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ a vector of numbers as input and returns \n    the number of elements in the\
    \ vector that are greater than 10 and both \n    first and last digits of a number\
    \ are even (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15, -73,\
    \ 14, -15])\n    1\n    >>> specialFilter([33, -2, -3, 45, 21, 109])\n    2\n\
    \    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = specialFilter;\n\t@test(candidate([5,\
    \ -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109])\
    \ == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate(Vector{Int64}([])) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqwhirim4.jl:39\nin expression starting at\
    \ /tmp/tmpqwhirim4.jl:39\n"
  stdout: ''
  timestamp: 1660008981
- exit_code: 1
  program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    if nums.length == 1 \n        return nums[0] % 2 == 0 && nums[0] % 2 ==\
    \ 1 && nums[1] % 2 == 1 && nums[1] % 2 == 0 \n    else \n        return nums[1]\
    \ % 2 == 1 && nums[1] % 2 == 0 && nums[0] % 2 == 0 && nums[0] % 2 == 1\n    end\n\
    \    end\n</code>\nThis is my final code for the problem. \n<code>\n\"\"\"Write\
    \ a function that takes a vector of numbers as input and returns \n    the number\
    \ of elements in the vector that are greater than 10 and both \n    first and\
    \ last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>>\
    \ specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33, -2, -3,\
    \ 45, 21, 109])\n    2\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = specialFilter;\n\t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15,\
    \ -73, 14, -15]) == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t\
    @test(candidate([43, -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2,\
    \ -33, 75, 21, 19]) == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3dxlxt02.jl:17\nin expression starting at\
    \ /tmp/tmp3dxlxt02.jl:17\n"
  stdout: ''
  timestamp: 1660008981
- exit_code: 1
  program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    evens = filter(x -> x % 2 == 0, nums)\n    odds = filter(x -> x % 2 ==\
    \ 1, nums)\n    bigger = filter(x -> x > 10, nums)\n    firstOdds = filter(x ->\
    \ first x % 2 != 0, nums)\n    lastOdds = filter(x -> last x % 2 != 0, nums)\n\
    \    return sum(bigger .== 10 and firstOdds .== 1 and lastOdds .== 1)\nend\n</cell>\n\
    <text>\nPractice Problem\nusing Test\n\n@testset begin\n\ncandidate = specialFilter;\n\
    \t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15])\
    \ == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43,\
    \ -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19])\
    \ == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpu2vt04tw.jl:14\nin expression starting at\
    \ /tmp/tmpu2vt04tw.jl:14\n"
  stdout: ''
  timestamp: 1660008981
- exit_code: 1
  program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    nums2 = [x for x in nums if x > 10 and x[0] % 2 != 0 \n            and\
    \ x[-1] % 2 != 0 ]\n    return length(nums2)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = specialFilter;\n\t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15,\
    \ -73, 14, -15]) == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t\
    @test(candidate([43, -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2,\
    \ -33, 75, 21, 19]) == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: expected \"]\"\nStacktrace:\n [1] top-level scope\n\
    \   @ /tmp/tmpdo7m_gin.jl:11\nin expression starting at /tmp/tmpdo7m_gin.jl:11\n"
  stdout: ''
  timestamp: 1660008981
- exit_code: 1
  program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    for i in nums\n        if i > 10\n            if mod(mod(i, 10), 2) ==\
    \ 1 && mod(mod(i, 10), 3) == 1 \n                counter += 1\n            end\n\
    \        end\n    end\n    counter\nend\n</code>\nThe first part of the condition\
    \ makes sure that every number is greater than 10. This could be written out longer\
    \ and more efficiently but I felt this way is more readable and understandable\
    \ so I'm sticking with it.\nNext, we are going to loop through every number in\
    \ the vector and apply the condition to it. If the condition is satisfied the\
    \ counter gets incremented by 1. After the loop finishes, counter will contain\
    \ the number of numbers greater than 10.\n<|/ a |>\n<| a dscore=0 |>\n<code>\n\
    using Test\n\n@testset begin\n\ncandidate = specialFilter;\n\t@test(candidate([5,\
    \ -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109])\
    \ == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate(Vector{Int64}([])) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpccex48n_.jl:20\nin expression starting at\
    \ /tmp/tmpccex48n_.jl:20\n"
  stdout: ''
  timestamp: 1660008980
- exit_code: 1
  program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    \n    for i in nums\n        if i > 10\n            if mod(i, 2) == 1\
    \ && mod(floor(i/10), 2) == 1 && mod(i, 10) == 1 && mod(floor(i/10), 10) == 1\n\
    \                return 1\n            end\n        end\n    end\n    return 0\n\
    end\n</cell>\n<text>\nProblem 3\nWrite a function that takes a vector of numbers\
    \ as input and returns \n    the sum of the numbers in the vector that are odd.\n\
    \    For example:\n    >>> specialSum([15, -73, 14, -15])\n    15\n    >>> specialSum([33,\
    \ -2, -3, 45, 21, 109])\n    109\n    \"\"\"\nusing Test\n\n@testset begin\n\n\
    candidate = specialFilter;\n\t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15,\
    \ -73, 14, -15]) == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t\
    @test(candidate([43, -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2,\
    \ -33, 75, 21, 19]) == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmkh8kp1o.jl:21\nin expression starting at\
    \ /tmp/tmpmkh8kp1o.jl:21\n"
  stdout: ''
  timestamp: 1660008980
- exit_code: 1
  program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0\n    for num in nums\n        if num > 10 && num % 2 == 1 &&\
    \ num % 3 == 1 && num % 5 == 1\n            count += 1\n        end\n    end\n\
    \    \n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = specialFilter;\n\
    \t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15])\
    \ == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43,\
    \ -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19])\
    \ == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpckdyob5w.jl:22

    '
  stdout: "test set: Test Failed at /tmp/tmpckdyob5w.jl:26\n  Expression: candidate([15,\
    \ -73, 14, -15]) == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpckdyob5w.jl:26 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpckdyob5w.jl:24\ntest set: Test Failed at /tmp/tmpckdyob5w.jl:27\n\
    \  Expression: candidate([33, -2, -3, 45, 21, 109]) == 2\n   Evaluated: 0 == 2\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpckdyob5w.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpckdyob5w.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpckdyob5w.jl:28\n  Expression: candidate([43, -12, 93, 125,\
    \ 121, 109]) == 4\n   Evaluated: 1 == 4\nStacktrace:\n [1] macro expansion\n \
    \  @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpckdyob5w.jl:28 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpckdyob5w.jl:24\ntest set: Test Failed at /tmp/tmpckdyob5w.jl:29\n\
    \  Expression: candidate([71, -2, -33, 75, 21, 19]) == 3\n   Evaluated: 0 == 3\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpckdyob5w.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpckdyob5w.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     4      7\n"
  timestamp: 1660008982
- exit_code: 1
  program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0\n    for n in nums\n        if ((n >= 10) && (n % 2 == 1) &&\
    \ \n            (n % 12 == 1) && \n            (n % 100 != 11))\n            count\
    \ += 1\n        end\n    end\n    return count\nend\n</cell>\n<text>\nSolution\n\
    As mentioned, this problem is easy enough to solve using filter. Here's an implementation:\n\
    using Test\n\n@testset begin\n\ncandidate = specialFilter;\n\t@test(candidate([5,\
    \ -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109])\
    \ == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate(Vector{Int64}([])) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpne54ody0.jl:21\nin expression starting at\
    \ /tmp/tmpne54ody0.jl:21\n"
  stdout: ''
  timestamp: 1660008981
- exit_code: 1
  program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    \n    for n in nums \n        if n>10 and n%2==1 and n%5==1 \n       \
    \     sum=1\n            for m in nums\n                sum=sum+1\n          \
    \      if m>10 and m%2==1 and m%5==1 \n                    return sum\n      \
    \          end\n            end\n        end \n    end \n    return 0 \nend \n\
    \    \n    \"\"\"Write a function that takes a vector of numbers as input and\
    \ returns \n    the number of elements in the vector that are greater than 10\
    \ and both \n    first and last digits of a number are even (2, 4, 6, 8, 10, 12,\
    \ 14).\n    For example:\n    >>> specialFilter([15, -73, 14, -15])\n    1\n \
    \   >>> specialFilter([33, -2, -3, 45, 21, 109])\n    1\n    \"\"\"\nusing Test\n\
    \n@testset begin\n\ncandidate = specialFilter;\n\t@test(candidate([5, -2, 1, -5])\
    \ == 0)\n\t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33, -2,\
    \ -3, 45, 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109]) ==\
    \ 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate(Vector{Int64}([])) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"n\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmppo_pjasu.jl:13\nin expression starting at /tmp/tmppo_pjasu.jl:13\n"
  stdout: ''
  timestamp: 1660008980
- exit_code: 1
  program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    filterd = filter(i -> i > 10, nums)\n    firstOdds = filter(i -> mod(i,\
    \ 2) == 1, nums)\n    lastOdds = filter(i -> mod(i, 2) == 0, nums)\n    return\
    \ length(filterd + firstOdds + lastOdds)\nend\n</cell>\n<text>\nExercise\nWrite\
    \ a function called specialFilter which takes a vector of numbers as input and\
    \ returns the number of elements in the vector that are greater than 10 and both\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\nusing Test\n\n@testset\
    \ begin\n\ncandidate = specialFilter;\n\t@test(candidate([5, -2, 1, -5]) == 0)\n\
    \t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33, -2, -3, 45,\
    \ 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71,\
    \ -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppew76xhb.jl:16\nin expression starting at\
    \ /tmp/tmppew76xhb.jl:16\n"
  stdout: ''
  timestamp: 1660008982
- exit_code: 1
  program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    n=length(nums)\n    res=0\n    for n in nums\n        if n>10 && n%2==1\
    \ && n>9 && n%3==1\n            res+=1\n        end\n    end\n    return res\n\
    end\n</cell>\n<text>\nProblem 7\nWrite a function that takes a vector of numbers\
    \ as input and returns \n    the number of elements in the vector that are greater\
    \ than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    For example:\n    >>> specialFilter([15, -73, 14, -15])\n    1\n  \
    \  >>> specialFilter([33, -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nusing Test\n\
    \n@testset begin\n\ncandidate = specialFilter;\n\t@test(candidate([5, -2, 1, -5])\
    \ == 0)\n\t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33, -2,\
    \ -3, 45, 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109]) ==\
    \ 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate(Vector{Int64}([])) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1aetr12h.jl:20\nin expression starting at\
    \ /tmp/tmp1aetr12h.jl:20\n"
  stdout: ''
  timestamp: 1660008982
- exit_code: 1
  program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    cnt=0\n    for n in nums\n        if isodd(n) && isodd(floor(n/10))&&\
    \ isodd(floor(n/10)) && n>10\n            cnt+=1\n        end\n    end\n    return\
    \ cnt\nend\n</cell>\n<text>\n6. Problem 02\nusing Test\n\n@testset begin\n\ncandidate\
    \ = specialFilter;\n\t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15,\
    \ -73, 14, -15]) == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t\
    @test(candidate([43, -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2,\
    \ -33, 75, 21, 19]) == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfk6rjq3v.jl:19\nin expression starting at\
    \ /tmp/tmpfk6rjq3v.jl:19\n"
  stdout: ''
  timestamp: 1660008982
- exit_code: 1
  program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    cnt=0\n    for n in nums\n        if n-abs<10&&(n-abs%2==1)&&(n-abs%2==0)\n\
    \            cnt+=1\n        end\n    end\n    return cnt\nend\n</cell>\n<code\
    \ language=julia-0.5>\n@assert specialFilter([15, -73, 14, -15]) == 1 # OK\n@assert\
    \ specialFilter([33, -2, -3, 45, 21, 109]) == 2 # OK\n</cell>\n<text>\nExercise\
    \ 18: Implement a special filter that returns 0 if the vector is empty, \n   \
    \ 1 if the vector contains at least 2 even numbers and \n    2 if the vector contains\
    \ at least 3 even numbers. For example:\n    >>> specialFilter([15, -73, 14, -15])\n\
    \    1\n    >>> specialFilter([33, -2, -3, 45, 21, 109])\n    1\n    >>> specialFilter([12,\
    \ 12, 12])\n    0\n    >>> specialFilter([])\n    0\n    \"\"\"\nusing Test\n\n\
    @testset begin\n\ncandidate = specialFilter;\n\t@test(candidate([5, -2, 1, -5])\
    \ == 0)\n\t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33, -2,\
    \ -3, 45, 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109]) ==\
    \ 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate(Vector{Int64}([])) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpp2phqdy8.jl:19\nin expression starting at\
    \ /tmp/tmpp2phqdy8.jl:19\n"
  stdout: ''
  timestamp: 1660008982
- exit_code: 1
  program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0\n    for i in nums\n        if (i>10) && ((i-nums[1]) & 1) &&\
    \ \n        ((i-nums[end-1]) & 1)\n            count = count+1\n        end\n\
    \    end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = specialFilter;\n\
    \t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15])\
    \ == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43,\
    \ -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19])\
    \ == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpkv0iyegp.jl:22

    '
  stdout: "test set: Error During Test at /tmp/tmpkv0iyegp.jl:26\n  Test threw exception\n\
    \  Expression: candidate([15, -73, 14, -15]) == 1\n  TypeError: non-boolean (Int64)\
    \ used in boolean context\n  Stacktrace:\n   [1] specialFilter(nums::Vector{Int64})\n\
    \     @ Main /tmp/tmpkv0iyegp.jl:13\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpkv0iyegp.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpkv0iyegp.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpkv0iyegp.jl:27\n  Test threw exception\n  Expression:\
    \ candidate([33, -2, -3, 45, 21, 109]) == 2\n  TypeError: non-boolean (Int64)\
    \ used in boolean context\n  Stacktrace:\n   [1] specialFilter(nums::Vector{Int64})\n\
    \     @ Main /tmp/tmpkv0iyegp.jl:13\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpkv0iyegp.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpkv0iyegp.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpkv0iyegp.jl:28\n  Test threw exception\n  Expression:\
    \ candidate([43, -12, 93, 125, 121, 109]) == 4\n  TypeError: non-boolean (Int64)\
    \ used in boolean context\n  Stacktrace:\n   [1] specialFilter(nums::Vector{Int64})\n\
    \     @ Main /tmp/tmpkv0iyegp.jl:13\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpkv0iyegp.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpkv0iyegp.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpkv0iyegp.jl:29\n  Test threw exception\n  Expression:\
    \ candidate([71, -2, -33, 75, 21, 19]) == 3\n  TypeError: non-boolean (Int64)\
    \ used in boolean context\n  Stacktrace:\n   [1]"
  timestamp: 1660008984
- exit_code: 1
  program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    \n    count = 0\n    for i in nums\n        if i < 10 && i % (2 * i) ==\
    \ 1 && (i - 1) % 2 == 1\n            count = count + 1\n        end\n    end\n\
    \    \n    return count\nend\n</cell>\n<code language=julia-0.4>\n@test specialFilter([15,\
    \ -73, 14, -15]) == 1;\n</cell>\n<code language=julia-0.4>\n@test specialFilter([33,\
    \ -2, -3, 45, 21, 109]) == 2;\n</cell>\n<text>\nExercise:\nWrite a function that\
    \ returns true if the sum of two integers is greater or equal to 4 and \nfalse\
    \ if the sum is less than or equal to 4\nFor example:\n- 10 + 8 < 4\n- 15 + 11\
    \ > 4\n- 10 + 9 < 4\n- 15 + 8 > 4\n- 10 + 8 == 4\n- 15 + 11 == 4\n- 10 + 9 ==\
    \ 4\n- 15 + 8 == 4\nusing Test\n\n@testset begin\n\ncandidate = specialFilter;\n\
    \t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15])\
    \ == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43,\
    \ -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19])\
    \ == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp22djnuon.jl:21\nin expression starting at\
    \ /tmp/tmp22djnuon.jl:21\n"
  stdout: ''
  timestamp: 1660008982
- exit_code: 1
  program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n  length = 0\n  for n in nums\n    if (n>=10 && n%2==1 && n>floor(Int, n))\
    \ || (n>=10 && n%2==1 && n<=floor(Int, n)) || (n>=10 && n%2==0)\n      length\
    \ += 1\n    end\n  end\n  return length\nend\n</cell>\n<text>\nSection 2: Writing\
    \ a Benchmark Suite\nusing Test\n\n@testset begin\n\ncandidate = specialFilter;\n\
    \t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15])\
    \ == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43,\
    \ -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19])\
    \ == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpoiuh68qc.jl:19\nin expression starting at\
    \ /tmp/tmpoiuh68qc.jl:19\n"
  stdout: ''
  timestamp: 1660008982
- exit_code: 1
  program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    for n in nums \n        if n>=10 && n%2==1 && n%9==1 \n            n \n\
    \        else \n            n \n        end\n    end\nend\n</cell>\n<cell>\n@time\
    \ for k in 1:10000 \n    n=specialFilter(nums)\n    n \nend\n</cell>\n<cell>\n\
    @time for k in 1:10000 \n    specialFilter(nums)\nend\n</cell>\n<cell>\n@time\
    \ for k in 1:10000 \n    sum(nums .> 10) == 2 && nums[end-3:end] .% 2 == 1\nend\n\
    </cell>\n<cell>\n@time for k in 1:10000 \n    sum(nums .> 10) == 2 && nums[end-3:end]\
    \ .% 2 == 1 && nums[2:3] .% 2 == 1\nend\n</cell>\n<text>\nTask 7.1\nWrite a function\
    \ that takes a vector of numbers as input and returns the sum of the squares of\
    \ the elements in the vector.\nFor example:\n>>> sum([1, 1, 2, 3, 5, 8, 13])\n\
    34\nusing Test\n\n@testset begin\n\ncandidate = specialFilter;\n\t@test(candidate([5,\
    \ -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109])\
    \ == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate(Vector{Int64}([])) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcq6dvrei.jl:19\nin expression starting at\
    \ /tmp/tmpcq6dvrei.jl:19\n"
  stdout: ''
  timestamp: 1660008982
- exit_code: 1
  program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    sum = 0\n    for n in nums\n        if n > 10 && n mod 2 ==0 && n % 2\
    \ == 1\n            sum += 1 \n        end\n    end\n    return sum\nend\n</code>\n\
    <|/ a tags=julia,vector dscore=0 |>\n<| a tags=julia,vector dscore=0 |>\nI am\
    \ using the following code for this purpose:\n<code>\nusing Test\n\n@testset begin\n\
    \ncandidate = specialFilter;\n\t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15,\
    \ -73, 14, -15]) == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t\
    @test(candidate([43, -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2,\
    \ -33, 75, 21, 19]) == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"2\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpa4qp9_ro.jl:13\nin expression starting at /tmp/tmpa4qp9_ro.jl:13\n"
  stdout: ''
  timestamp: 1660008982
- exit_code: 1
  program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    return sum(nums .> 10 & nums .>= 9 & nums .%2 == 1)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = specialFilter;\n\t@test(candidate([5, -2, 1, -5])\
    \ == 0)\n\t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33, -2,\
    \ -3, 45, 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109]) ==\
    \ 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate(Vector{Int64}([])) == 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmp73hnm107.jl:15

    '
  stdout: "test set: Error During Test at /tmp/tmp73hnm107.jl:18\n  Test threw exception\n\
    \  Expression: candidate([5, -2, 1, -5]) == 0\n  MethodError: no method matching\
    \ &(::Int64, ::Vector{Int64})\n  Closest candidates are:\n    &(::Any, ::Any,\
    \ !Matched::Any, !Matched::Any...) at ~/.conda/envs/polyglot/share/julia/base/operators.jl:655\n\
    \    &(::T, !Matched::T) where T<:Union{Int128, Int16, Int32, Int64, Int8, UInt128,\
    \ UInt16, UInt32, UInt64, UInt8} at ~/.conda/envs/polyglot/share/julia/base/int.jl:336\n\
    \    &(::Integer) at ~/.conda/envs/polyglot/share/julia/base/operators.jl:594\n\
    \    ...\n  Stacktrace:\n   [1] specialFilter(nums::Vector{Int64})\n     @ Main\
    \ /tmp/tmp73hnm107.jl:11\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp73hnm107.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp73hnm107.jl:17\ntest set:\
    \ Error During Test at /tmp/tmp73hnm107.jl:19\n  Test threw exception\n  Expression:\
    \ candidate([15, -73, 14, -15]) == 1\n  MethodError: no method matching &(::Int64,\
    \ ::Vector{Int64})\n  Closest candidates are:\n    &(::Any, ::Any, !Matched::Any,\
    \ !Matched::Any...) at ~/.conda/envs/polyglot/share/julia/base/operators.jl:655\n\
    \    &(::T, !Matched::T) where T<:Union{Int128, Int16, Int32, Int64, Int8, UInt128,\
    \ UInt16, UInt32, UInt64, UInt8} at ~/.conda/envs/polyglot/share/julia/base/int.jl:336\n\
    \    &(::Integer) at ~/.conda/envs/polyglot/share/julia/base/operators.jl:594\n\
    \    ...\n  Stacktrace:\n   [1] specialFilter(nums::Vector{Int64})\n     @ Main\
    \ /tmp/tmp73hnm107.jl:11\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp73hnm107.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp73hnm107.jl:17\ntest set:\
    \ Error During Test at /tmp/tmp73hnm"
  timestamp: 1660008985
- exit_code: 1
  program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    \"\"\"\n    Write a function that takes a vector of numbers as input and\
    \ returns \n    the number of elements in the vector that are greater than 10\
    \ and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n\
    \    For example:\n    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\n    return length(filter(x -> x >\
    \ 10, nums)) == 1 && oddDigits(first(nums)) && \n        oddDigits(last(nums))\
    \ \nend\n</cell>\n<code language=julia-1.5>\n# Run this cell to test your solution\n\
    using Test\n\n@testset begin\n\ncandidate = specialFilter;\n\t@test(candidate([5,\
    \ -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109])\
    \ == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate(Vector{Int64}([])) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpd4g_ex8y.jl:24\nin expression starting at\
    \ /tmp/tmpd4g_ex8y.jl:24\n"
  stdout: ''
  timestamp: 1660008982
- exit_code: 1
  program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    num = 0\n    for i in nums\n        if i > 10 and i % 2 != 0 \n      \
    \      if i % 2 == 1 \n                num += 1\n            else\n          \
    \      num +=2\n        else \n            num += 0\n        end\n    end\n  \
    \  return num\nend\n</cell>\n<code language=julia-1.0>\n\"\"\"\n    specialFilter2(nums::Vector{Int64})::Int64\
    \ \n    num = 0\n    for i in nums\n        if i > 10 and i % 2 != 0 \n      \
    \      if i % 2 == 1 \n                num += 1\n            else\n          \
    \      num +=2\n            end\n        else \n            num += 0\n       \
    \ end\n    end\n    return num\nend\n\"\"\"\n</cell>\n<code language=julia-1.0>\n\
    \"\"\"\n    specialFilter2(nums::Vector{Int64})::Int64 \n    num = 0\n    for\
    \ i in nums\n        if i > 10 and i % 2 != 0 \n            if i % 2 == 1 \n \
    \               num += 1\n            else\n                num +=2\n        \
    \    end\n        else \n            num += 0\n        end\n    end\n    return\
    \ num\nend\n\"\"\"\n</cell>\n<code language=julia-1.0>\n\"\"\"\n    specialFilter3(nums::Vector{Int64})::Int64\
    \ \n    num = 0\n    for i in nums\n        if i > 10 and i % 2 != 0 \n      \
    \      if i % 2 == 1 \n                num += 1\n            elseif i % 2 == 0\n\
    \                num += 2\n            else\n                num +=3\n       \
    \     end\n        else \n            num += 0\n        end\n    end\n    return\
    \ num\nend\n\"\"\"\n</cell>\n<code language=julia-1.0>\n\"\"\"\n    specialFilter3(nums::Vector{Int64})::Int64\
    \ \n    num = 0\n    for i in nums\n        if i > 10 and i % 2 != 0 \n      \
    \      if i % 2 == 1 \n                num += 1\n            elseif i % 2 == 0\n\
    \                num += 2\n            else\n                num +=3\n       \
    \     end\n        else \n            num += 0\n        end\n    end\n    return\
    \ num\nend\n\"\"\"\n</cell>\n<code language=julia-1.0>\n\"\"\"\n    specialFilter4(nums::Vector{Int64})::Int64\
    \ \n    num = 0\n    for i in nums\n        if i > 10 and i % 2 != 0 \n      \
    \      if i % 2 == 1 \n                num += 1\n            elseif i % 2 == 0\n\
    \                num += 2\n            elseif i % 2 == 1\n                num\
    \ += 3\n            elseif i % 2 == 0\n                num += 4\n            else\n\
    \                num +=5\n            end\n        else \n            num += 0\n\
    \        end\n    end\n    return num\nend\n\"\"\"\nusing Test\n\n@testset begin\n\
    \ncandidate = specialFilter;\n\t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15,\
    \ -73, 14, -15]) == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t\
    @test(candidate([43, -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2,\
    \ -33, 75, 21, 19]) == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"i\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpfe6vhkye.jl:13\nin expression starting at /tmp/tmpfe6vhkye.jl:13\n"
  stdout: ''
  timestamp: 1660008982
- exit_code: 1
  program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    for n in nums \n        if n > 10 and n % 2 != 0 && n % 2 != 1 && n %\
    \ 2 != 3 && n % 2 != 5 && n % 2 != 7 and n % 2 != 9 \n        \n    return length(nums)\
    \ \nend\n</cell>\n<code language=julia-1.6>\nprintln(specialFilter(nums))\n</cell>\n\
    <code language=julia-1.6>\n# write your function here\n</cell>\n<code language=julia-1.6>\n\
    # test your code here\n</cell>\n<text>\nWrite a function that takes a vector of\
    \ numbers as input and returns \n    the number of elements in the vector that\
    \ are greater than 10 and both \n    first and last digits of a number are even\
    \ (0, 2, 4, 6, 8).\n    For example:\n    >>> specialFilter([15, -73, 14, -15])\n\
    \    1\n    >>> specialFilter([33, -2, -3, 45, 21, 109])\n    0\n    \"\"\"\n\
    using Test\n\n@testset begin\n\ncandidate = specialFilter;\n\t@test(candidate([5,\
    \ -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109])\
    \ == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate(Vector{Int64}([])) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"n\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpdaurov9v.jl:12\nin expression starting at /tmp/tmpdaurov9v.jl:12\n"
  stdout: ''
  timestamp: 1660008982
- exit_code: 1
  program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    length=0\n    for num in nums\n        if num>10\n            length+=1\n\
    \            if ((num/10)%2)==1\n                if length>1\n               \
    \     length+=1\n                end\n            end\n        end\n    end\n\
    \    return length\nend\n</cell>\n<code language=julia-0.6>\nspecialFilter([15,\
    \ -73, 14, -15])\n</cell>\n<text>\nWrite a function that accepts a vector of numbers\
    \ and returns the sum of all the numbers in the vector.\nFor example, the input\
    \ vector [13, -4, 0, -10, 12] should return 45, since 13 + -4 + 0 + -10 + 12 =\
    \ 45.\nThis function should only accept input vectors of numbers, not vectors\
    \ of other types (e.g. strings or structures). \nWrite your function inside the\
    \ cell below.\nusing Test\n\n@testset begin\n\ncandidate = specialFilter;\n\t\
    @test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15]) ==\
    \ 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43,\
    \ -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19])\
    \ == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5piirbyr.jl:24\nin expression starting at\
    \ /tmp/tmp5piirbyr.jl:24\n"
  stdout: ''
  timestamp: 1660008982
- exit_code: 1
  program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n        count = 0\n        for x in nums\n            if x > 10\n        \
    \        if x%2 == 0 && x%3 == 0 && x%5 == 0\n                    count += 1\n\
    \                end\n            end\n        end\n        count\n    end\n</cell>\n\
    <cell>\n# %load solutions/03_07_specialFilter.jl\nusing Test\n\n@testset begin\n\
    \ncandidate = specialFilter;\n\t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15,\
    \ -73, 14, -15]) == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t\
    @test(candidate([43, -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2,\
    \ -33, 75, 21, 19]) == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwq19hwkk.jl:21\nin expression starting at\
    \ /tmp/tmpwq19hwkk.jl:21\n"
  stdout: ''
  timestamp: 1660008982
- exit_code: 1
  program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    \n    for x in nums \n        if x > 10 && x[1] % 2 != 0 && x[3] % 2 !=\
    \ 0\n            x \n        end\n    end\nend\n</cell>\n<code language=julia-1.0>\n\
    println(\"The number of numbers in the list that are greater than 10 and both\
    \ first and last digits are odd: \", specialFilter([15, -73, 14, -15]))\nprintln(\"\
    The number of numbers in the list that are greater than 10 and both first and\
    \ last digits are odd: \", specialFilter([33, -2, -3, 45, 21, 109]))\n</cell>\n\
    <text>\nExercise 3.2\nWrite a function that takes a vector of numbers as input\
    \ and returns \n    the number of elements in the vector that are divisible by\
    \ 7 except for \n    the first and last elements that should be divisible by 7.\n\
    \    For example:\n    >>> specialFilter([15, -73, 14, -15])\n    2\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = specialFilter;\n\t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15,\
    \ -73, 14, -15]) == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t\
    @test(candidate([43, -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2,\
    \ -33, 75, 21, 19]) == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5x897gxo.jl:18\nin expression starting at\
    \ /tmp/tmp5x897gxo.jl:18\n"
  stdout: ''
  timestamp: 1660008982
- exit_code: 1
  program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    sum = 0\n    for i in nums\n        sum += i\n    end\n    return sum\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = specialFilter;\n\t@test(candidate([5,\
    \ -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109])\
    \ == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate(Vector{Int64}([])) == 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpmzq1_x88.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmpmzq1_x88.jl:22\n  Expression: candidate([5,\
    \ -2, 1, -5]) == 0\n   Evaluated: -1 == 0\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpmzq1_x88.jl:22 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpmzq1_x88.jl:21\ntest set: Test Failed at /tmp/tmpmzq1_x88.jl:23\n\
    \  Expression: candidate([15, -73, 14, -15]) == 1\n   Evaluated: -59 == 1\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmzq1_x88.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmzq1_x88.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpmzq1_x88.jl:24\n  Expression: candidate([33, -2, -3, 45, 21,\
    \ 109]) == 2\n   Evaluated: 203 == 2\nStacktrace:\n [1] macro expansion\n   @\
    \ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpmzq1_x88.jl:24 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpmzq1_x88.jl:21\ntest set: Test Failed at /tmp/tmpmzq1_x88.jl:25\n\
    \  Expression: candidate([43, -12, 93, 125, 121, 109]) == 4\n   Evaluated: 479\
    \ == 4\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmzq1_x88.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmzq1_x88.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpmzq1_x88.jl:26\n  Expression: candidate([71, -2, -33, 75,\
    \ 21, 19]) == 3\n   Evaluated: 151 == 3\nStacktrace:\n [1] macro expansion\n \
    \  @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inline"
  timestamp: 1660008983
- exit_code: 1
  program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0\n    for x in nums\n        if x > 10\n            if isOdd(x)\n\
    \                if isOdd(x)\n                    count += 1\n            end\n\
    \        end\n    end\n    return count\nend\n\"\"\"\nWrite a function that takes\
    \ a vector of numbers as input and returns \n    the sum of numbers in the vector\
    \ that are less than 20. \n    For example:\n    >>> specialSum([15, -73, 14,\
    \ -15])\n    35\n    >>> specialSum([33, 21, -3, 45, 21, 109])\n    67\n    \"\
    \"\"\nusing Test\n\n@testset begin\n\ncandidate = specialFilter;\n\t@test(candidate([5,\
    \ -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109])\
    \ == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate(Vector{Int64}([])) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpc1a4cj_r.jl:10\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpc1a4cj_r.jl:1\n\
    in expression starting at /tmp/tmpc1a4cj_r.jl:1\n"
  stdout: ''
  timestamp: 1660008982
- exit_code: 1
  program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    \n    count = 0\n    for i in nums do \n        count += 1\n        if\
    \ i > 10 && nums[1] % 2 == 1 && nums[end-1] % 2 == 1 \n            count += 1\n\
    \        end \n    end\n    return count\n    \nend\nusing Test\n\n@testset begin\n\
    \ncandidate = specialFilter;\n\t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15,\
    \ -73, 14, -15]) == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t\
    @test(candidate([43, -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2,\
    \ -33, 75, 21, 19]) == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid \"do\" syntax\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpo7odcqry.jl:13\nin expression starting at /tmp/tmpo7odcqry.jl:13\n"
  stdout: ''
  timestamp: 1660008982
- exit_code: 1
  program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    \n    for i in nums\n        if i>=10 && i%2==1 && i%3==1 && i%5==1\n\
    \            return length(nums)\n        end\n    end\n    return length(nums)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = specialFilter;\n\t@test(candidate([5,\
    \ -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109])\
    \ == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate(Vector{Int64}([])) == 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpzbaltilo.jl:21

    '
  stdout: "test set: Test Failed at /tmp/tmpzbaltilo.jl:24\n  Expression: candidate([5,\
    \ -2, 1, -5]) == 0\n   Evaluated: 4 == 0\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpzbaltilo.jl:24 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpzbaltilo.jl:23\ntest set: Test Failed at /tmp/tmpzbaltilo.jl:25\n\
    \  Expression: candidate([15, -73, 14, -15]) == 1\n   Evaluated: 4 == 1\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzbaltilo.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzbaltilo.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpzbaltilo.jl:26\n  Expression: candidate([33, -2, -3, 45, 21,\
    \ 109]) == 2\n   Evaluated: 6 == 2\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzbaltilo.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzbaltilo.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpzbaltilo.jl:27\n  Expression: candidate([43, -12, 93, 125,\
    \ 121, 109]) == 4\n   Evaluated: 6 == 4\nStacktrace:\n [1] macro expansion\n \
    \  @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpzbaltilo.jl:27 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpzbaltilo.jl:23\ntest set: Test Failed at /tmp/tmpzbaltilo.jl:28\n\
    \  Expression: candidate([71, -2, -33, 75, 21, 19]) == 3\n   Evaluated: 6 == 3\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] m"
  timestamp: 1660008984
- exit_code: 1
  program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    for i in nums\n        if i%10 > 0 and i%10%2 > 0 and i%10%3 == 0\n  \
    \          return i\n    end\nend\n</code>\n<|/ a dscore=0 |>\n<| a |>\nThis question\
    \ is probably too old but I ran into a similar problem and I thought I share my\
    \ solution. \n<code>\nusing Test\n\n@testset begin\n\ncandidate = specialFilter;\n\
    \t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15])\
    \ == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43,\
    \ -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19])\
    \ == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"i\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpo48hpl0j.jl:12\nin expression starting at /tmp/tmpo48hpl0j.jl:12\n"
  stdout: ''
  timestamp: 1660008983
- exit_code: 1
  program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    for n in nums \n        if n > 10 and n%2==1 \n            return 1+specialFilter(n:-1:nums)\n\
    \        else \n            return specialFilter(n:-1:nums)\n    return 0\nend\n\
    using Test\n\n@testset begin\n\ncandidate = specialFilter;\n\t@test(candidate([5,\
    \ -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109])\
    \ == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate(Vector{Int64}([])) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"n\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp54u4p8bo.jl:12\nin expression starting at /tmp/tmp54u4p8bo.jl:12\n"
  stdout: ''
  timestamp: 1660008983
- exit_code: 1
  program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0\n    for i in nums \n        if i>=10 && i<=11 && (i%2==0 ||\
    \ i%2==1)\n            count += 1\n        end\n    end\n    return count\nend\n\
    </cell>\n<code language=julia-1.0>\n#tests\nspecialFilter([15, -73, 14, -15])\n\
    </cell>\n<code language=julia-1.0>\n# Now with vectorized filter\nusing Test\n\
    \n@testset begin\n\ncandidate = specialFilter;\n\t@test(candidate([5, -2, 1, -5])\
    \ == 0)\n\t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33, -2,\
    \ -3, 45, 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109]) ==\
    \ 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate(Vector{Int64}([])) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp20adgq4f.jl:19\nin expression starting at\
    \ /tmp/tmp20adgq4f.jl:19\n"
  stdout: ''
  timestamp: 1660008984
- exit_code: 1
  program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    for x in nums\n        if (x > 10) \n            and (x % 2 != 0) \n \
    \           and (x % 2 != (nums[end-1] % 2)) \n            and (x % 2 != (nums[end-1]\
    \ % 2))\n            and (x % 2 != (nums[end-1] % 2))\n            return 1\n\
    \    end\n    return 0\nend\n</cell>\n<code language=julia-1.5>\nspecialFilter([15,\
    \ -73, 14, -15])\n</cell>\n<code language=julia-1.5>\nspecialFilter([33, -2, -3,\
    \ 45, 21, 109])\n</cell>\n<text>\nA common operation in Julia is called map (also\
    \ called map! in other languages). It applies a function to every element of a\
    \ collection and returns the new collection. This function is called f(x). A map\
    \ function can be defined as f(x) which works similarly to a lambda-expression\
    \ in other languages. It is often useful to give map a name other than f, which\
    \ is especially useful when chaining map functions together.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = specialFilter;\n\t@test(candidate([5, -2, 1, -5]) == 0)\n\
    \t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33, -2, -3, 45,\
    \ 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71,\
    \ -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: space before \"(\" not allowed in \"and (\" at\
    \ /tmp/tmpum8a635d.jl:13\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpum8a635d.jl:13\n\
    in expression starting at /tmp/tmpum8a635d.jl:13\n"
  stdout: ''
  timestamp: 1660008984
- exit_code: 1
  program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    for n in nums\n        if n >10 && \n            n % 2 ==1 && \n     \
    \       n % 5 ==1 && \n            n % 7 ==1 && \n            n % 9 ==1\n    \
    \        return 1 + specialFilter(n-10)\n        end\n    end\n    return 0\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = specialFilter;\n\t@test(candidate([5,\
    \ -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109])\
    \ == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate(Vector{Int64}([])) == 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp946rhj33.jl:24

    '
  stdout: "test set: Test Failed at /tmp/tmp946rhj33.jl:28\n  Expression: candidate([15,\
    \ -73, 14, -15]) == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp946rhj33.jl:28 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp946rhj33.jl:26\ntest set: Test Failed at /tmp/tmp946rhj33.jl:29\n\
    \  Expression: candidate([33, -2, -3, 45, 21, 109]) == 2\n   Evaluated: 0 == 2\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp946rhj33.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp946rhj33.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp946rhj33.jl:30\n  Expression: candidate([43, -12, 93, 125,\
    \ 121, 109]) == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n \
    \  @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp946rhj33.jl:30 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp946rhj33.jl:26\ntest set: Test Failed at /tmp/tmp946rhj33.jl:31\n\
    \  Expression: candidate([71, -2, -33, 75, 21, 19]) == 3\n   Evaluated: 0 == 3\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp946rhj33.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp946rhj33.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     4      7\n"
  timestamp: 1660008985
- exit_code: 1
  program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    lenNums = length(nums)\n    count = 0\n    \n    for i in 1:lenNums\n\
    \        \n        digits = nums[i]\n        \n        if ((digits >= 10) & (digits\
    \ % 2 == 1)) | ((digits <= -10) & (digits % 2 == 1))\n            count = count\
    \ + 1\n        end\n    end\n    return count\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = specialFilter;\n\t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15,\
    \ -73, 14, -15]) == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t\
    @test(candidate([43, -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2,\
    \ -33, 75, 21, 19]) == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp4ozeucfp.jl:26

    '
  stdout: "test set: Test Failed at /tmp/tmp4ozeucfp.jl:31\n  Expression: candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2\n   Evaluated: 4 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp4ozeucfp.jl:31 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp4ozeucfp.jl:28\ntest set: Test Failed at /tmp/tmp4ozeucfp.jl:32\n\
    \  Expression: candidate([43, -12, 93, 125, 121, 109]) == 4\n   Evaluated: 5 ==\
    \ 4\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4ozeucfp.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4ozeucfp.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp4ozeucfp.jl:33\n  Expression: candidate([71, -2, -33, 75,\
    \ 21, 19]) == 3\n   Evaluated: 4 == 3\nStacktrace:\n [1] macro expansion\n   @\
    \ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp4ozeucfp.jl:33 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp4ozeucfp.jl:28\nTest Summary: | Pass  Fail\
    \  Total\ntest set      |    4     3      7\n"
  timestamp: 1660008985
- exit_code: 1
  program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    \n    for i in nums \n        if i > 10 && i > nums[end-1] \n        \
    \    if nums[end-1] % 2 != 0 \n                return 1 \n            else \n\
    \                return 0 \n        else \n            return 0 \n    return 0\
    \ \nend\n</cell>\n<code language=julia-0.5>\n@time filterSpecialSpecial([-10,\
    \ -3, -7, 3, -31, 23, 23, -52, 14, -15])\n</cell>\n<text>\n6. Write a function\
    \ that takes a vector of numbers as input and returns the number of \nelements\
    \ greater than 10 and the first digit of every element is even.\nFor example:\n\
    >>> specialFilter([15, -7, 14, -15, -23, 33])\n2\nWrite a function using the filter\
    \ function, and use @code_native to test your function.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = specialFilter;\n\t@test(candidate([5, -2, 1, -5]) == 0)\n\
    \t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33, -2, -3, 45,\
    \ 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71,\
    \ -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"if\" at /tmp/tmp42sjwgig.jl:14 expected \"\
    end\", got \"else\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp42sjwgig.jl:18\n\
    in expression starting at /tmp/tmp42sjwgig.jl:18\n"
  stdout: ''
  timestamp: 1660008984
- exit_code: 1
  program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n  length=0\n  for n in nums \n    if n >10 && n.digits[2]==1 && n.digits[3]==1\
    \ && n.digits[1]==1\n    length=length+1\n    end\n  end\n  return length\nend\n\
    </cell>\n<text>\nAt the top of the cell above, we've written a function that takes\
    \ a vector of numbers as input and returns the number of elements in the vector\
    \ that are greater than 10 and both first and last digits of a number are odd\
    \ (1, 3, 5, 7, 9).\nusing Test\n\n@testset begin\n\ncandidate = specialFilter;\n\
    \t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15])\
    \ == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43,\
    \ -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19])\
    \ == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9lnu7g83.jl:19\nin expression starting at\
    \ /tmp/tmp9lnu7g83.jl:19\n"
  stdout: ''
  timestamp: 1660008984
- exit_code: 1
  program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    if nums == [] \n        0\n    else if nums == [9]\n        1\n    else\
    \ \n        length(nums[3:end-1]) & nums[2:end-1] & nums[1] % 2 \n    end\nend\n\
    </cell>\n<text>\nProblem 3\nWrite a function that takes any two numbers as input\
    \ and prints the sum of the first and second numbers. For example:\n    >>> add(5,\
    \ 6)\n    11\n    >>> add(12, -4)\n    -5\n    >>> add(16, -2)\n    6\n    \"\"\
    \"\nusing Test\n\n@testset begin\n\ncandidate = specialFilter;\n\t@test(candidate([5,\
    \ -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109])\
    \ == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate(Vector{Int64}([])) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8z0tm79v.jl:13\nin expression starting at\
    \ /tmp/tmp8z0tm79v.jl:13\n"
  stdout: ''
  timestamp: 1660008984
- exit_code: 1
  program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0\n    for n in nums\n        if n > 10 && first % 2 != 0 && last\
    \ % 2 != 0\n            count += 1\n        end\n    end\n    return count\nend\n\
    using Test\n\n@testset begin\n\ncandidate = specialFilter;\n\t@test(candidate([5,\
    \ -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109])\
    \ == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate(Vector{Int64}([])) == 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmp0huit05i.jl:21

    '
  stdout: "test set: Error During Test at /tmp/tmp0huit05i.jl:25\n  Test threw exception\n\
    \  Expression: candidate([15, -73, 14, -15]) == 1\n  MethodError: no method matching\
    \ rem(::typeof(first), ::Int64)\n  Closest candidates are:\n    rem(::Any, ::Any,\
    \ !Matched::RoundingMode{:ToZero}) at ~/.conda/envs/polyglot/share/julia/base/div.jl:80\n\
    \    rem(::Any, ::Any, !Matched::RoundingMode{:Down}) at ~/.conda/envs/polyglot/share/julia/base/div.jl:81\n\
    \    rem(::Any, ::Any, !Matched::RoundingMode{:Up}) at ~/.conda/envs/polyglot/share/julia/base/div.jl:82\n\
    \    ...\n  Stacktrace:\n   [1] specialFilter(nums::Vector{Int64})\n     @ Main\
    \ /tmp/tmp0huit05i.jl:13\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp0huit05i.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp0huit05i.jl:23\ntest set:\
    \ Error During Test at /tmp/tmp0huit05i.jl:26\n  Test threw exception\n  Expression:\
    \ candidate([33, -2, -3, 45, 21, 109]) == 2\n  MethodError: no method matching\
    \ rem(::typeof(first), ::Int64)\n  Closest candidates are:\n    rem(::Any, ::Any,\
    \ !Matched::RoundingMode{:ToZero}) at ~/.conda/envs/polyglot/share/julia/base/div.jl:80\n\
    \    rem(::Any, ::Any, !Matched::RoundingMode{:Down}) at ~/.conda/envs/polyglot/share/julia/base/div.jl:81\n\
    \    rem(::Any, ::Any, !Matched::RoundingMode{:Up}) at ~/.conda/envs/polyglot/share/julia/base/div.jl:82\n\
    \    ...\n  Stacktrace:\n   [1] specialFilter(nums::Vector{Int64})\n     @ Main\
    \ /tmp/tmp0huit05i.jl:13\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp0huit05i.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp0huit05i.jl:23\ntest set:\
    \ Error During Test at /tmp/tmp0huit05i.jl:27\n  Test threw exception\n  Expression:\
    \ candidate([43, -12"
  timestamp: 1660008987
- exit_code: 1
  program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    \"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = specialFilter;\n\t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15,\
    \ -73, 14, -15]) == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t\
    @test(candidate([43, -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2,\
    \ -33, 75, 21, 19]) == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp32gcxk6a.jl:10\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp32gcxk6a.jl:1\n\
    in expression starting at /tmp/tmp32gcxk6a.jl:1\n"
  stdout: ''
  timestamp: 1660008984
- exit_code: 1
  program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    n = 0\n    for n in nums\n        if n > 10\n            if n % 2 == 0\n\
    \                if n % 10 == 0\n                    if n%11 == 1\n          \
    \              n\n                    end\n                end\n            end\n\
    \        end\n    end\nend\n</cell>\n<text>\nProblem 9: Write a function that\
    \ takes a vector of numbers as input and returns the number of elements in the\
    \ vector that are between 1 and 50.\n    For example:\n    >>> specialFilter([-7,\
    \ -4, 0, 33, 22, 13, -4, -7, -8, -9, -4])\n    3\n    >>> specialFilter([20, 10,\
    \ 30, 40, 45, 50, 50, 50])\n    6\n    \"\"\"\nusing Test\n\n@testset begin\n\n\
    candidate = specialFilter;\n\t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15,\
    \ -73, 14, -15]) == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t\
    @test(candidate([43, -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2,\
    \ -33, 75, 21, 19]) == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzek5cil3.jl:24\nin expression starting at\
    \ /tmp/tmpzek5cil3.jl:24\n"
  stdout: ''
  timestamp: 1660008984
- exit_code: 1
  program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0\n    for num in nums\n        if num > 10\n            if num\
    \ % 2 == 1 && num % 2 == 0 && num%2 != 0\n                count += 1\n       \
    \     end\n        end\n    end\n    return count\nend\n</cell>\n<code language=julia-1.4>\n\
    @assert specialFilter([33, -22, -3, 45, 21, 109]) == 3\n</cell>\n<text>\nProblem\
    \ 5\nusing Test\n\n@testset begin\n\ncandidate = specialFilter;\n\t@test(candidate([5,\
    \ -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109])\
    \ == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate(Vector{Int64}([])) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpywuveuoi.jl:21\nin expression starting at\
    \ /tmp/tmpywuveuoi.jl:21\n"
  stdout: ''
  timestamp: 1660008984
- exit_code: 1
  program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    flag = 0\n    for num in nums\n        if num > 10 && num % 2 == 0 &&\
    \ num % 2 == 1 && num % 2 == -1\n            flag += 1\n        end\n    end\n\
    \    return flag\nend\n</cell>\n<text>\nTask 2.2\nWrite a function that takes\
    \ a vector of numbers as input and returns \n    the number of elements in the\
    \ vector that have their last digits even.\n    For example:\n    >>> specialFilter([-7,\
    \ 3, 11, 45, -10, 1, -23, 32])\n    4\n    \"\"\"\nusing Test\n\n@testset begin\n\
    \ncandidate = specialFilter;\n\t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15,\
    \ -73, 14, -15]) == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t\
    @test(candidate([43, -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2,\
    \ -33, 75, 21, 19]) == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptu1008ga.jl:19\nin expression starting at\
    \ /tmp/tmptu1008ga.jl:19\n"
  stdout: ''
  timestamp: 1660008984
- exit_code: 1
  program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    n = length(nums)\n    odd = zeros(Int, n)\n    first_odd = zeros(Int,\
    \ n)\n    last_odd = zeros(Int, n)\n    i = -1\n    for x in nums\n        i +=\
    \ 1\n        if x > 10\n            odd[i] = 1\n            if x>10\n        \
    \        first_odd[i] = 1\n            else \n                last_odd[i] = 1\n\
    \        end\n    end\n    return count(x->(x>10) &&   (x[1]&1)==1 &&  (x[2]&1)==1,\
    \ nums) + count(x->(x>10) &&   (x[3]&1)==1, nums)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = specialFilter;\n\t@test(candidate([5, -2, 1, -5]) == 0)\n\
    \t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33, -2, -3, 45,\
    \ 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71,\
    \ -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp1biaxm5i.jl:10\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp1biaxm5i.jl:1\n\
    in expression starting at /tmp/tmp1biaxm5i.jl:1\n"
  stdout: ''
  timestamp: 1660008984
- exit_code: 1
  program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0\n    for n in nums do\n        if n>10 && digitSum(n)%2 == 1\
    \ && digitSum(n+1)%2 == 1 then\n            count = count + 1\n        end\n \
    \   end\n    return count\nend\n</cell>\n<text>\nWrite a function specialSum that\
    \ takes a vector of numbers as input \n    and returns the sum of the elements\
    \ in the vector that are greater than 10 and both \n    first and last digits\
    \ of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialSum([15,\
    \ -73, 14, -15])\n    27\n    >>> specialSum([33, -2, -3, 45, 21, 109])\n    62\n\
    \    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = specialFilter;\n\t@test(candidate([5,\
    \ -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109])\
    \ == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate(Vector{Int64}([])) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid \"do\" syntax\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpfeedg5s7.jl:12\nin expression starting at /tmp/tmpfeedg5s7.jl:12\n"
  stdout: ''
  timestamp: 1660008984
- exit_code: 1
  program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    nums = sort(nums)\n    return sum((nums[2:end].+nums[1]) == nums[1])\n\
    end\n</cell>\n<code language=julia-1.3>\n# TEST specialFilter (6 points)\n@test\
    \ specialFilter([15, -73, 14, -15]) \u2248 1\n@test specialFilter([33, -2, -3,\
    \ 45, 21, 109]) \u2248 2\n</cell>\n<text>\n3.4.3 Using filter to solve exercise\
    \ 2\nWrite a function that takes a vector of numbers as input and returns \n \
    \   the number of elements in the vector that are greater than 10 and both \n\
    \    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = specialFilter;\n\t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15,\
    \ -73, 14, -15]) == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t\
    @test(candidate([43, -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2,\
    \ -33, 75, 21, 19]) == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4gfk5rke.jl:14\nin expression starting at\
    \ /tmp/tmp4gfk5rke.jl:14\n"
  stdout: ''
  timestamp: 1660008984
- exit_code: 1
  program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count=0\n    lastNum=nums[end]\n    for i in nums\n        if i<10\n \
    \           count+=1\n            if lastNum%2!=1 \n                count+=1\n\
    \        end\n        if i>10 && lastNum%2!=1\n            count+=1\n        end\n\
    \        lastNum=i\n    end\n    return count\nend\n</cell>\n<code language=julia-1.5>\n\
    # Test our function\nprintln(specialFilter([15, -73, 14, -15]))\nprintln(specialFilter([33,\
    \ -2, -3, 45, 21, 109]))\n</cell>\n<text>\nProblem 4.6 (Solution)\nWe can solve\
    \ this problem by defining our functions as we did in the previous problems. We've\
    \ solved problem 4.5 and 4.6!\nusing Test\n\n@testset begin\n\ncandidate = specialFilter;\n\
    \t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15])\
    \ == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43,\
    \ -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19])\
    \ == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3x7m9twh.jl:26\nin expression starting at\
    \ /tmp/tmp3x7m9twh.jl:26\n"
  stdout: ''
  timestamp: 1660008984
- exit_code: 1
  program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    # Your code here\n    number = 0 \n    for i in nums do \n        number\
    \ = number + 1 \n        if ((i%3 == 0 and (i%5 == 0 or i%7 == 0))) or ((i%10\
    \ == 0 and (i%3 == 0 or i%5 == 0))) \n            number = number - 1 \n     \
    \   end\n    end \n    return number\nend \n</cell>\n<code language=julia-1.0>\n\
    @assert specialFilter([15, -73, 14, -15]) == 1\n@assert specialFilter([33, -2,\
    \ -3, 45, 21, 109]) == 2\n</cell>\n<text>\n(Extra) Task: Try using map\nTask:\n\
    The map function applies a function to all the elements of a collection and \n\
    \    returns them as a new collection (without modifying the input collection).\
    \ \nFor instance, map( x -> x + 1, [10, 20, 30, 40, 50] ) would yield [11, 22,\
    \ 33, 44, 55].\nusing Test\n\n@testset begin\n\ncandidate = specialFilter;\n\t\
    @test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15]) ==\
    \ 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43,\
    \ -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19])\
    \ == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid \"do\" syntax\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp9ly1hrr8.jl:13\nin expression starting at /tmp/tmp9ly1hrr8.jl:13\n"
  stdout: ''
  timestamp: 1660008985
- exit_code: 1
  program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n\"\"\"\n Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and \n \
    \   the first and last digits of a number are even (2, 4, 6, 8, 10, 12).\n   \
    \ For example:\n    >>> specialFilter([15, -73, 14, -15])\n    2\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = specialFilter;\n\t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15,\
    \ -73, 14, -15]) == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t\
    @test(candidate([43, -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2,\
    \ -33, 75, 21, 19]) == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp70e1tct8.jl:10\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp70e1tct8.jl:1\n\
    in expression starting at /tmp/tmp70e1tct8.jl:1\n"
  stdout: ''
  timestamp: 1660008985
- exit_code: 1
  program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n  count = 0\n  for num in nums\n    if num > 10 && (num % 2 == 1) \n     \
    \ count += 1\n    end\n  end\n  count\nend\n</cell>\n<code language=julia-1.1>\n\
    \"\"\"Write a function that takes a vector of numbers as input and returns \n\
    \    the number of elements in the vector that are greater than 10 and both \n\
    \    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = specialFilter;\n\t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15,\
    \ -73, 14, -15]) == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t\
    @test(candidate([43, -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2,\
    \ -33, 75, 21, 19]) == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8diekl78.jl:19\nin expression starting at\
    \ /tmp/tmp8diekl78.jl:19\n"
  stdout: ''
  timestamp: 1660008985
- exit_code: 1
  program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0\n    for x in nums do\n        count = count + 1\n        if\
    \ x > 10\n            if x mod 2 == 1\n                count = count + 1\n   \
    \         end\n        end\n    end\n    return count\nend\n</cell>\n<code language=julia-1.0>\n\
    @assert specialFilter([15, -73, 14, -15]) == 1;\n@assert specialFilter([33, -2,\
    \ -3, 45, 21, 109]) == 2;\n</cell>\n<text>\nTask 5\nusing Test\n\n@testset begin\n\
    \ncandidate = specialFilter;\n\t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15,\
    \ -73, 14, -15]) == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t\
    @test(candidate([43, -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2,\
    \ -33, 75, 21, 19]) == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid \"do\" syntax\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp628k8r1a.jl:12\nin expression starting at /tmp/tmp628k8r1a.jl:12\n"
  stdout: ''
  timestamp: 1660008986
- exit_code: 1
  program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0\n    for num in nums\n        if num > 10 and num % 2 == 0 \n\
    \            and (num .> 10 && num .% 2 == 0) \n            && (num .< 100 &&\
    \ num .%% 2 == 1)\n            count = count + 1\n        end\n    end\n    return\
    \ count\nend\nusing Test\n\n@testset begin\n\ncandidate = specialFilter;\n\t@test(candidate([5,\
    \ -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109])\
    \ == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate(Vector{Int64}([])) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"num\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp1foqeqrs.jl:13\nin expression starting at /tmp/tmp1foqeqrs.jl:13\n"
  stdout: ''
  timestamp: 1660008986
- exit_code: 1
  program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    n = 0\n    for n in nums\n        if n >= 10\n            if isOdd(n)\
    \ && isOdd(floor(n/10)) && isOdd(n%10)\n                n /= 10\n            end\n\
    \        end\n    end\n    return n\nend\n</cell>\n<text>\nQuestion: Which is\
    \ the most efficient function to use for the task? Why?\nusing Test\n\n@testset\
    \ begin\n\ncandidate = specialFilter;\n\t@test(candidate([5, -2, 1, -5]) == 0)\n\
    \t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33, -2, -3, 45,\
    \ 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71,\
    \ -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfl_45d23.jl:21\nin expression starting at\
    \ /tmp/tmpfl_45d23.jl:21\n"
  stdout: ''
  timestamp: 1660008986
- exit_code: 1
  program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0\n    for x in nums\n        if x > 10 && x%2 == 0 && x%2 !=\
    \ 0 && x%2 != 1\n            count += 1\n        end\n    end\n    return count\n\
    end\n</cell>\n<code language=julia-1.2>\n#TEST TEST TEST\n@test specialFilter([15,\
    \ -73, 14, -15]) == 1;\n@test specialFilter([33, -2, -3, 45, 21, 109]) == 2;\n\
    </cell>\n<text>\nProblem 2. Write a function that takes a vector of numbers as\
    \ input and returns \n    the number of elements in the vector that are greater\
    \ than 10 and both \n    first and last digits of a number are even (1, 3, 5,\
    \ 7, 9).\n    For example:\n    >>> specialFilter2([15, -73, 14, -15])\n    1\n\
    \    >>> specialFilter2([33, -2, -3, 45, 21, 109])\n    3\n    \"\"\"\nusing Test\n\
    \n@testset begin\n\ncandidate = specialFilter;\n\t@test(candidate([5, -2, 1, -5])\
    \ == 0)\n\t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33, -2,\
    \ -3, 45, 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109]) ==\
    \ 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate(Vector{Int64}([])) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpti9zdxt7.jl:19\nin expression starting at\
    \ /tmp/tmpti9zdxt7.jl:19\n"
  stdout: ''
  timestamp: 1660008986
- exit_code: 1
  program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    for i in nums\n        if i > 10 and i mod 2 == 1\n            if i mod\
    \ 3 != 1\n                return i\n            else\n                continue\
    \ \n            end\n        end\n    end\n    return -1\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = specialFilter;\n\t@test(candidate([5, -2, 1, -5])\
    \ == 0)\n\t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33, -2,\
    \ -3, 45, 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109]) ==\
    \ 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate(Vector{Int64}([])) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"i\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp_ptel3vd.jl:12\nin expression starting at /tmp/tmp_ptel3vd.jl:12\n"
  stdout: ''
  timestamp: 1660008986
- exit_code: -1
  program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    return length(nums[nums .>= 10] & \n        nums[nums .<= 9] & \n    \
    \    (nums .== nums[1] | nums .== nums[end])) \nend\nusing Test\n\n@testset begin\n\
    \ncandidate = specialFilter;\n\t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15,\
    \ -73, 14, -15]) == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t\
    @test(candidate([43, -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2,\
    \ -33, 75, 21, 19]) == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\nend\n"
  status: Timeout
  stderr: ''
  stdout: "test set: Error During Test at /tmp/tmpbu993xlq.jl:20\n  Test threw exception\n\
    \  Expression: candidate([5, -2, 1, -5]) == 0\n  MethodError: no method matching\
    \ &(::Vector{Int64}, ::Vector{Int64})\n  Closest candidates are:\n    &(::Any,\
    \ ::Any, !Matched::Any, !Matched::Any...) at ~/.conda/envs/polyglot/share/julia/base/operators.jl:655\n\
    \  Stacktrace:\n   [1] specialFilter(nums::Vector{Int64})\n     @ Main /tmp/tmpbu993xlq.jl:11\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpbu993xlq.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpbu993xlq.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpbu993xlq.jl:21\n  Test threw exception\n  Expression:\
    \ candidate([15, -73, 14, -15]) == 1\n  MethodError: no method matching &(::Vector{Int64},\
    \ ::Vector{Int64})\n  Closest candidates are:\n    &(::Any, ::Any, !Matched::Any,\
    \ !Matched::Any...) at ~/.conda/envs/polyglot/share/julia/base/operators.jl:655\n\
    \  Stacktrace:\n   [1] specialFilter(nums::Vector{Int64})\n     @ Main /tmp/tmpbu993xlq.jl:11\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpbu993xlq.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpbu993xlq.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpbu993xlq.jl:22\n  Test threw exception\n  Expression:\
    \ candidate([33, -2, -3, 45, 21, 109]) == 2\n  MethodError: no method matching\
    \ &(::Vector{Int64}, ::Vector{Int64})\n  Closest candidates are:\n    &(::Any,\
    \ ::Any, !Matched::Any, !Matched::Any...) at ~/.conda/envs/polyglot/share/julia/base/operators.jl:655\n\
    \  Stacktrace:\n   [1] specialFilter(nums::Vector{Int64})\n     @ Main /tmp/tmpbu993xlq.jl:11\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [in"
  timestamp: 1660008989
- exit_code: 1
  program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    nums = nums[:]\n    for n in nums\n        if n < 10\n            continue\
    \ \n        if n % 2 == 0 \n            continue\n        if n % 4 == 1 \n   \
    \         continue\n        if n % 8 == 1 \n            continue\n        if n\
    \ % 16 == 1 \n            continue\n        if n % 32 == 1 \n            continue\n\
    \        if n % 64 == 1 \n            continue\n        if n % 128 == 1 \n   \
    \         continue\n        nums.remove(n)\n    end\n    return length(nums)\n\
    end\n</code>\n<|/ a tags=functional-programming,python,julia |>\n<| a tags=functional-programming,python,julia\
    \ |>\nHere is my take on it:\n<code>\njulia> function odd_or_even(number::Int64)\n\
    \           number = number % 2 == 0 ? 2 : number % 2 != 0 ? number : 0\n    \
    \       return number\n       end\nodd_or_even (generic function with 1 method)\n\
    using Test\n\n@testset begin\n\ncandidate = specialFilter;\n\t@test(candidate([5,\
    \ -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109])\
    \ == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate(Vector{Int64}([])) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfbfd84u0.jl:33\nin expression starting at\
    \ /tmp/tmpfbfd84u0.jl:33\n"
  stdout: ''
  timestamp: 1660008986
- exit_code: 1
  program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n  count=0\n  for num in nums \n    if num>10\n      break\n  else\n    count=count+1\n\
    \  end\n  for num in nums\n    if num%2!=0 && num%2!=1\n      break\n    else\n\
    \      count=count+1\n    end\n  end\n  count\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = specialFilter;\n\t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15,\
    \ -73, 14, -15]) == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t\
    @test(candidate([43, -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2,\
    \ -33, 75, 21, 19]) == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpfgp0ll7g.jl:10\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpfgp0ll7g.jl:1\n\
    in expression starting at /tmp/tmpfgp0ll7g.jl:1\n"
  stdout: ''
  timestamp: 1660008986
- exit_code: 1
  program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0\n    for x in nums\n        if x > 10\n            count +=\
    \ ((x % 10) % 2) == 1\n        else\n            count += 1\n    end\n    return\
    \ count\nend\n</cell>\n<text>\nExercise: Write a function that returns the number\
    \ of elements in a vector that are \n    positive. For example, [-1, 7, 5, -2]\
    \ would return 2.\nusing Test\n\n@testset begin\n\ncandidate = specialFilter;\n\
    \t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15])\
    \ == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43,\
    \ -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19])\
    \ == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp86tgy1jn.jl:20\nin expression starting at\
    \ /tmp/tmp86tgy1jn.jl:20\n"
  stdout: ''
  timestamp: 1660008986
- exit_code: 1
  program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    \n    count = 0\n    for i in nums\n        if i > 10 and nums[end] ==\
    \ 0 \n            count += 1\n        end\n    end\n    return count\nend\n</code>\n\
    <|/ a dscore=1 tags=julia,arrays |>\n<| a dscore=1 |>\n<code>\nusing Test\n\n\
    @testset begin\n\ncandidate = specialFilter;\n\t@test(candidate([5, -2, 1, -5])\
    \ == 0)\n\t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33, -2,\
    \ -3, 45, 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109]) ==\
    \ 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate(Vector{Int64}([])) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"nums\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpqgi0hr9t.jl:14\nin expression starting at /tmp/tmpqgi0hr9t.jl:14\n"
  stdout: ''
  timestamp: 1660008986
- exit_code: 1
  program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    if length(nums) < 1 \n        return 0 \n    end\n    if nums[0] > 10\
    \ || nums[length(nums) - 1] > 10 \n        return 0 \n    end\n    if nums[2]\
    \ % 2 != 0 && nums[1] % 2 != 0 \n        return 0 \n    end\n    total = 0 \n\
    \    for num in nums \n        if num > 10 \n            total = total + 1 \n\
    \        end\n    end\n    return total \nend\n</cell>\n<cell>\nusing Test\n\n\
    @testset begin\n\ncandidate = specialFilter;\n\t@test(candidate([5, -2, 1, -5])\
    \ == 0)\n\t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33, -2,\
    \ -3, 45, 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109]) ==\
    \ 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate(Vector{Int64}([])) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpuwykr9_o.jl:28\nin expression starting at\
    \ /tmp/tmpuwykr9_o.jl:28\n"
  stdout: ''
  timestamp: 1660008986
- exit_code: 1
  program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n  counter = 0\n  for n in nums\n    if n > 10 and n % 2 == 1 and n % 7 ==\
    \ 1\n      counter += 1\n    end\n  end\n  return counter\nend\n</cell>\n<code\
    \ language=julia-0.6>\n\"\"\"Write a function that takes a vector of numbers as\
    \ input and returns \n    the number of elements in the vector that are greater\
    \ than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    For example:\n    >>> specialFilter([15, -73, 14, -15])\n    1\n  \
    \  >>> specialFilter([33, -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nusing Test\n\
    \n@testset begin\n\ncandidate = specialFilter;\n\t@test(candidate([5, -2, 1, -5])\
    \ == 0)\n\t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33, -2,\
    \ -3, 45, 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109]) ==\
    \ 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate(Vector{Int64}([])) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"n\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpmdg5ilaa.jl:13\nin expression starting at /tmp/tmpmdg5ilaa.jl:13\n"
  stdout: ''
  timestamp: 1660008986
- exit_code: 1
  program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0\n    for n in nums\n        if n > 10 && n % 2 == 1 && n % 1\
    \ == 1\n            count += 1\n        end\n    end\n    return count\nend\n\
    </cell>\n<code language=julia-1.0>\nspecialFilter([15, -73, 14, -15])\n</cell>\n\
    <code language=julia-1.0>\nusing Test\n\n@testset begin\n\ncandidate = specialFilter;\n\
    \t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15])\
    \ == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43,\
    \ -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19])\
    \ == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmzejn53a.jl:19\nin expression starting at\
    \ /tmp/tmpmzejn53a.jl:19\n"
  stdout: ''
  timestamp: 1660008986
- exit_code: 1
  program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    let n = length(nums)\n    if n == 0 \n        0\n    else if n == 1 \n\
    \        if nums[1]%2 != 1 \n            1\n        else \n            0\n   \
    \ else if n == 2\n        if nums[1]%2 == 1 && nums[2]%2 != 1 \n            1\n\
    \        else if nums[1]%2 != 1 && nums[2]%2 == 1 \n            0\n        else\
    \ \n            1\n    else \n        if nums[1]%2 != 1 && nums[n-1]%2 == 1 \n\
    \            0\n        else \n            1\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = specialFilter;\n\t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15,\
    \ -73, 14, -15]) == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t\
    @test(candidate([43, -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2,\
    \ -33, 75, 21, 19]) == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpds_718c7.jl:14\nin expression starting at\
    \ /tmp/tmpds_718c7.jl:14\n"
  stdout: ''
  timestamp: 1660008986
- exit_code: 1
  program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    nums = nums[sort!(nums)]\n    n = length(nums)\n    count = 0\n    for\
    \ i in nums\n        if i > 10\n            count += 1\n            if mod(i,\
    \ 2) == 0\n                if mod(i, 1) == 1 && mod(i - 1, 1) == 1\n         \
    \           count += 1\n                end\n            end\n        end\n  \
    \  end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = specialFilter;\n\
    \t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15])\
    \ == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43,\
    \ -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19])\
    \ == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpz0_9stzf.jl:28

    '
  stdout: "test set: Error During Test at /tmp/tmpz0_9stzf.jl:31\n  Test threw exception\n\
    \  Expression: candidate([5, -2, 1, -5]) == 0\n  BoundsError: attempt to access\
    \ 4-element Vector{Int64} at index [[-5, -2, 1, 5]]\n  Stacktrace:\n   [1] throw_boundserror(A::Vector{Int64},\
    \ I::Tuple{Vector{Int64}})\n     @ Base ./abstractarray.jl:691\n   [2] checkbounds\n\
    \     @ ./abstractarray.jl:656 [inlined]\n   [3] _getindex\n     @ ./multidimensional.jl:838\
    \ [inlined]\n   [4] getindex\n     @ ./abstractarray.jl:1218 [inlined]\n   [5]\
    \ specialFilter(nums::Vector{Int64})\n     @ Main /tmp/tmpz0_9stzf.jl:11\n   [6]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [7] macro expansion\n     @ /tmp/tmpz0_9stzf.jl:31 [inlined]\n\
    \   [8] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [9] top-level scope\n     @ /tmp/tmpz0_9stzf.jl:30\ntest set:\
    \ Error During Test at /tmp/tmpz0_9stzf.jl:32\n  Test threw exception\n  Expression:\
    \ candidate([15, -73, 14, -15]) == 1\n  BoundsError: attempt to access 4-element\
    \ Vector{Int64} at index [[-73, -15, 14, 15]]\n  Stacktrace:\n   [1] throw_boundserror(A::Vector{Int64},\
    \ I::Tuple{Vector{Int64}})\n     @ Base ./abstractarray.jl:691\n   [2] checkbounds\n\
    \     @ ./abstractarray.jl:656 [inlined]\n   [3] _getindex\n     @ ./multidimensional.jl:838\
    \ [inlined]\n   [4] getindex\n     @ ./abstractarray.jl:1218 [inlined]\n   [5]\
    \ specialFilter(nums::Vector{Int64})\n     @ Main /tmp/tmpz0_9stzf.jl:11\n   [6]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [7] macro expansion\n     @ /tmp/tmpz0_9stzf.jl:32 [inlined]\n\
    \   [8] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [9] top-level scope\n     @ /tmp/tmpz0_9stzf.jl:30\ntest set:\
    \ Error During Test at /tmp/tmpz0_9stzf.jl:33\n  Test threw exception\n  Expression:\
    \ candidate([33, -2, -3, 45, 21, 109]) == 2\n  BoundsError: attempt to access\
    \ 6-element Vector{Int64} at index [[-3, -2, 21, 33, 45, 109"
  timestamp: 1660008989
- exit_code: 1
  program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0\n    for n in nums\n        if isodd(n) && isodd(floor(n/10)*10)\
    \ && isodd(floor(n/10)*10 + n%10) && n>10\n            count += 1\n        end\n\
    \    end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = specialFilter;\n\
    \t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15])\
    \ == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43,\
    \ -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19])\
    \ == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpq3d_8w7w.jl:21

    '
  stdout: "test set: Test Failed at /tmp/tmpq3d_8w7w.jl:25\n  Expression: candidate([15,\
    \ -73, 14, -15]) == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpq3d_8w7w.jl:25 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpq3d_8w7w.jl:23\ntest set: Test Failed at /tmp/tmpq3d_8w7w.jl:26\n\
    \  Expression: candidate([33, -2, -3, 45, 21, 109]) == 2\n   Evaluated: 0 == 2\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpq3d_8w7w.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpq3d_8w7w.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpq3d_8w7w.jl:27\n  Expression: candidate([43, -12, 93, 125,\
    \ 121, 109]) == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n \
    \  @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpq3d_8w7w.jl:27 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpq3d_8w7w.jl:23\ntest set: Test Failed at /tmp/tmpq3d_8w7w.jl:28\n\
    \  Expression: candidate([71, -2, -33, 75, 21, 19]) == 3\n   Evaluated: 0 == 3\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpq3d_8w7w.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpq3d_8w7w.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     4      7\n"
  timestamp: 1660008987
- exit_code: 1
  program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    for n in nums\n        if n > 10\n            if n%2 == 0\n          \
    \      if n%10 == 0\n                    if n%3 == 0\n                       \
    \ return(1)\n                    else\n                        return(0)\n   \
    \             else\n                    return(0)\n            else\n        \
    \        return(0)\n        else\n            return(0)\n    end\n    return(0)\n\
    end\n</cell>\n<code language=julia-1.4>\nspecialFilter(15)\n</cell>\n<text>\n\
    Problem 3\nWrite a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = specialFilter;\n\t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15,\
    \ -73, 14, -15]) == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t\
    @test(candidate([43, -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2,\
    \ -33, 75, 21, 19]) == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"if\" at /tmp/tmpu60rrfhq.jl:15 expected \"\
    end\", got \"else\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpu60rrfhq.jl:19\n\
    in expression starting at /tmp/tmpu60rrfhq.jl:19\n"
  stdout: ''
  timestamp: 1660008986
- exit_code: 1
  program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    if length(nums)>0 \n        num = nums[end]\n        if num > 10 && all(isodd(nums[2:end-1]))\
    \ \n            nums[end] = 1\n            \n            return length(nums)\n\
    \        end\n    end\n    return 0\nend\n</cell>\n<cell>\nspecialFilter(nums)\n\
    </cell>\n<text>\nWrite a function that takes a vector of numbers as input and\
    \ returns \n    1 if all numbers in the vector are odd and are consecutive \n\
    \    (e.g [1,2,3,4,5,6,7,8,9,10]), or 0 otherwise.\n    For example:\n    >>>\
    \ specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33, -2, -3,\
    \ 45, 21, 109])\n    0\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = specialFilter;\n\t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15,\
    \ -73, 14, -15]) == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t\
    @test(candidate([43, -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2,\
    \ -33, 75, 21, 19]) == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7pema5e1.jl:21\nin expression starting at\
    \ /tmp/tmp7pema5e1.jl:21\n"
  stdout: ''
  timestamp: 1660008987
- exit_code: 1
  program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    for num in nums\n        if num > 10\n            oddDigits = floor(log10(num))\n\
    \            if num % 1 == 0 && ((oddDigits % 1) == 0)\n                return\
    \ 1\n            end\n        end\n    end\n    return 0\nend\n\"\"\"Write a function\
    \ that takes a vector of numbers as input and returns \n    the number of elements\
    \ in the vector that are greater than 10 and both \n    first and last digits\
    \ of a number are even (2, 4, 6, 8).\n    For example:\n    >>> specialFilter([15,\
    \ -73, 14, -15])\n    1\n    >>> specialFilter([33, -2, -3, 45, 21, 109])\n  \
    \  2\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = specialFilter;\n\
    \t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15])\
    \ == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43,\
    \ -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19])\
    \ == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nusing Test\n\
    \nStacktrace:\n [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level\
    \ scope\n   @ /tmp/tmpwa4v9g5v.jl:21\nin expression starting at /tmp/tmpwa4v9g5v.jl:21\n"
  stdout: ''
  timestamp: 1660008988
- exit_code: 1
  program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    return count(nums, x -> x > 10 && mod(x, 2) == 1) \nend\n</cell>\n<code\
    \ language=julia-0.6>\nspecialFilter([15, -73, 14, -15])\n</cell>\n<text>\n(2)\
    \ Write a function that computes the product of all the numbers in a vector.\n\
    For example:\n>>> computeProduct([10, 15, -5, -3, 2, 12])\n70\n>>> computeProduct([4,\
    \ -1, 0, 3, -1])\n0\nusing Test\n\n@testset begin\n\ncandidate = specialFilter;\n\
    \t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15])\
    \ == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43,\
    \ -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19])\
    \ == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1vta18hv.jl:13\nin expression starting at\
    \ /tmp/tmp1vta18hv.jl:13\n"
  stdout: ''
  timestamp: 1660008987
- exit_code: 1
  program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    numLen::Int64 = length(nums)\n    odds::Vector{Int64} = [1 .. 2]\n   \
    \ evens::Vector{Int64} = [3 .. 8]\n    \n    if numLen == 1\n        return 1\n\
    \    elseif numLen % 2 == 0\n        return numLen / 2\n    else\n        numRem::Int64\
    \ = (numLen % 2 != 0) ? numLen / 2 : numLen - 1\n        for i in evens\n    \
    \        if numRem % i == 0\n                return 1\n            end\n     \
    \   end\n        for i in odds\n            if numRem % i == 0\n             \
    \   return 0\n            end\n        end\n        return 0\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n# TEST Write a function that takes a vector of numbers\
    \ as input and returns \n# the number of elements in the vector that are greater\
    \ than 10 and both \n# first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n# For example:\njulia> specialFilter([15, -73, 14, -15])\n1\njulia> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n2\n</cell>\n<text>\nCongratulations! Your first Julia\
    \ function is now written!\nusing Test\n\n@testset begin\n\ncandidate = specialFilter;\n\
    \t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15])\
    \ == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43,\
    \ -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19])\
    \ == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcwzs0da4.jl:34\nin expression starting at\
    \ /tmp/tmpcwzs0da4.jl:34\n"
  stdout: ''
  timestamp: 1660008987
- exit_code: 1
  program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    i = 0\n    while i < length(nums)\n        if nums[i] > 10\n         \
    \   if i-1 > 0 && nums[i-1] % 2 != 0 && nums[i] % 2 != 0\n                i -=\
    \ 1\n            elseif i+1 < length(nums) && nums[i+1] % 2 != 0 && nums[i] %\
    \ 2 != 0\n                i += 1\n            else\n                return nums[i]\n\
    \            end\n        else\n            i += 1\n        end\n    end\n   \
    \ return 0\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes a vector\
    \ of numbers as input and returns the sum of the elements of the vector that are\
    \ less than 20 and are divisible by 5 (and are not prime).\nFor example, sum([17,\
    \ 8, -12, 6, -10, -5, -10, 17, 20, -4, -2]) = 26\nHint: use if-else if structure\
    \ and check the division of two numbers\nusing Test\n\n@testset begin\n\ncandidate\
    \ = specialFilter;\n\t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15,\
    \ -73, 14, -15]) == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t\
    @test(candidate([43, -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2,\
    \ -33, 75, 21, 19]) == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkemh4zyr.jl:27\nin expression starting at\
    \ /tmp/tmpkemh4zyr.jl:27\n"
  stdout: ''
  timestamp: 1660008988
- exit_code: 1
  program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    i=0\n    evens = 0\n    odds = 0\n    \n    while i <length(nums)\n  \
    \      \n        if nums[i]%2 == 0\n            evens += 1\n        else\n   \
    \         odds += 1\n        \n        i+=1\n    end\n    \n    return evens +\
    \ odds\nend\n</cell>\n<text>\nExercise\nusing Test\n\n@testset begin\n\ncandidate\
    \ = specialFilter;\n\t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15,\
    \ -73, 14, -15]) == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t\
    @test(candidate([43, -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2,\
    \ -33, 75, 21, 19]) == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpz0_iqp3s.jl:27\nin expression starting at\
    \ /tmp/tmpz0_iqp3s.jl:27\n"
  stdout: ''
  timestamp: 1660008988
- exit_code: 1
  program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0\n    for n in nums\n        if n <= 10 && n % 2 ==1 && n % 4\
    \ ==1 \n            count+=1\n        end\n    end\n    return count\nend\n</cell>\n\
    <code language=julia-1.0>\n# Test your function\n@assert specialFilter([15, -73,\
    \ 14, -15]) == 1 \n@assert specialFilter([33, -2, -3, 45, 21, 109]) == 2 \n</cell>\n\
    <text>\n4.3  Digit cancellation\nusing Test\n\n@testset begin\n\ncandidate = specialFilter;\n\
    \t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15])\
    \ == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43,\
    \ -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19])\
    \ == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpe4sqbio2.jl:19\nin expression starting at\
    \ /tmp/tmpe4sqbio2.jl:19\n"
  stdout: ''
  timestamp: 1660008988
- exit_code: 1
  program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    \n    count = 0\n    for n in nums\n        if n >= 10 && n % 2 == 1 &&\
    \ n % 4 ==0\n            count += 1\n        end\n    end\n    return count\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = specialFilter;\n\t@test(candidate([5,\
    \ -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109])\
    \ == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate(Vector{Int64}([])) == 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpxibbpfoq.jl:22

    '
  stdout: "test set: Test Failed at /tmp/tmpxibbpfoq.jl:26\n  Expression: candidate([15,\
    \ -73, 14, -15]) == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpxibbpfoq.jl:26 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpxibbpfoq.jl:24\ntest set: Test Failed at /tmp/tmpxibbpfoq.jl:27\n\
    \  Expression: candidate([33, -2, -3, 45, 21, 109]) == 2\n   Evaluated: 0 == 2\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxibbpfoq.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxibbpfoq.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpxibbpfoq.jl:28\n  Expression: candidate([43, -12, 93, 125,\
    \ 121, 109]) == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n \
    \  @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpxibbpfoq.jl:28 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpxibbpfoq.jl:24\ntest set: Test Failed at /tmp/tmpxibbpfoq.jl:29\n\
    \  Expression: candidate([71, -2, -33, 75, 21, 19]) == 3\n   Evaluated: 0 == 3\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxibbpfoq.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxibbpfoq.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     4      7\n"
  timestamp: 1660008989
- exit_code: 1
  program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n  count = 0\n    for x in nums \n      if x > 10 && x % 2 != 0 && x % 5 !=\
    \ 0 \n        count += 1\n      end\n    end\n    return count\nend\n</cell>\n\
    <text>\nAs a final step, you can write a function that checks whether a number\
    \ is prime or not. There are several ways to do this:\nusing Test\n\n@testset\
    \ begin\n\ncandidate = specialFilter;\n\t@test(candidate([5, -2, 1, -5]) == 0)\n\
    \t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33, -2, -3, 45,\
    \ 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71,\
    \ -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptiwze9qf.jl:19\nin expression starting at\
    \ /tmp/tmptiwze9qf.jl:19\n"
  stdout: ''
  timestamp: 1660008988
- exit_code: 1
  program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    for i in nums\n        if i>=10 and (nums[end]%2)==1 and (nums[end-1]%2)==1\n\
    \            return 1\n        end\n    end\n    return 0\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = specialFilter;\n\t@test(candidate([5, -2, 1, -5])\
    \ == 0)\n\t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33, -2,\
    \ -3, 45, 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109]) ==\
    \ 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate(Vector{Int64}([])) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: space before \"(\" not allowed in \"and (\" at\
    \ /tmp/tmpxzizmzof.jl:12\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxzizmzof.jl:12\n\
    in expression starting at /tmp/tmpxzizmzof.jl:12\n"
  stdout: ''
  timestamp: 1660008988
- exit_code: 1
  program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    n = 0\n    for x in nums\n        if x > 10 && x mod 2 != 0 && x mod 3\
    \ == 0\n            n = n + 1\n        end\n    end\n    return n\nend\n</code>\n\
    <|/ a tags=julia,function,function |>\n<| c |>\nThank you, very useful!\n<|/ c\
    \ |>\n<| a dscore=1 |>\nThere are a variety of ways to write this function.\n\
    I prefer a version that doesn't use for-loops at all:\n<code>\nusing Test\n\n\
    @testset begin\n\ncandidate = specialFilter;\n\t@test(candidate([5, -2, 1, -5])\
    \ == 0)\n\t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33, -2,\
    \ -3, 45, 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109]) ==\
    \ 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate(Vector{Int64}([])) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"2\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpfjhbs66m.jl:13\nin expression starting at /tmp/tmpfjhbs66m.jl:13\n"
  stdout: ''
  timestamp: 1660008988
- exit_code: 1
  program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    n = length(nums)\n    if (n < 1) return 0\n    \n    function f(i, num)\
    \ = \n        if (nums[i] > 10 or nums[i] > 100 or nums[i] > 1000)\n         \
    \   return 1\n        else \n            while (i > 1 and nums[i] > 10 and nums[i-1]\
    \ % 2 == 0)\n                return 1\n            while (i < n-1 and nums[i]\
    \ < 10 and nums[i+1] % 2 == 0)\n                return 1\n            return 0\n\
    \        end\n    res = foldl(f, 1, nums)\n    return res\nend\n</cell>\n<code\
    \ language=julia-1.6>\n# Now let's test our function\nspecialFilter([15, -73,\
    \ 14, -15])\n</cell>\n<text>\nQuestion 3: Write a function that takes a vector\
    \ of numbers as input and returns \n    the number of elements in the vector that\
    \ are greater than 10 and both \n    first and last digits of a number are even\
    \ or both first and last digits are odd (1, 3, 5, 7, 9).\n    For example:\n \
    \   >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33, -2,\
    \ -3, 45, 21, 109])\n    2\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = specialFilter;\n\t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15,\
    \ -73, 14, -15]) == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t\
    @test(candidate([43, -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2,\
    \ -33, 75, 21, 19]) == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"=\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpwyj_f9ep.jl:14\nin expression starting at /tmp/tmpwyj_f9ep.jl:14\n"
  stdout: ''
  timestamp: 1660008988
- exit_code: 1
  program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n  \n    for i in nums\n        if i>10 && mod(i, 2)==1 && mod(i, 3)==1 \n\
    \            return 1\n        end\n    end\n    return 0\nend\n</cell>\n<text>\n\
    Call the function on two numbers to get a third one\nusing Test\n\n@testset begin\n\
    \ncandidate = specialFilter;\n\t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15,\
    \ -73, 14, -15]) == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t\
    @test(candidate([43, -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2,\
    \ -33, 75, 21, 19]) == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpy78196zr.jl:19\nin expression starting at\
    \ /tmp/tmpy78196zr.jl:19\n"
  stdout: ''
  timestamp: 1660008988
- exit_code: 1
  program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    for n in nums \n        if n % 10 == 1 && n % 100 != 11 \n        && n\
    \ mod 100 != 10 \n        && n % 10 == 1 && n % 100 != 11 \n        && n mod 100\
    \ != 10 \n        && n % 10 == 3 && n % 100 != 13\n        && n mod 100 != 10\
    \ \n        && n % 10 == 7 && n % 100 != 13\n        && n mod 100 != 10 \n   \
    \     && n % 10 == 9 && n % 100 != 11 \n        && n mod 100 != 10 \n        &&\
    \ n % 10 == 15 && n % 100 != 13\n        && n mod 100 != 10 \n        && n % 10\
    \ == 19 && n % 100 != 11 \n        && n mod 100 != 10 \n        && n % 10 == 23\
    \ && n % 100 != 13\n        && n mod 100 != 10 \n        && n % 10 == 29 && n\
    \ % 100 != 13\n        && n mod 100 != 10 \n        && n % 10 == 31 && n % 100\
    \ != 13\n        && n mod 100 != 10 \n        && n % 10 == 37 && n % 100 != 13\n\
    \        && n mod 100 != 10 \n        && n % 10 == 43 && n % 100 != 13\n     \
    \   && n mod 100 != 10 \n        && n % 10 == 49 && n % 100 != 13\n        &&\
    \ n mod 100 != 10 \n        && n % 10 == 53 && n % 100 != 13\n        && n mod\
    \ 100 != 10 \n        && n % 10 == 71 && n % 100 != 13\n        && n mod 100 !=\
    \ 10 \n        && n % 10 == 91 && n % 100 != 13\n        && n mod 100 != 10 \n\
    \        && n % 10 == 99 && n % 100 != 13\n        && n mod 100 != 10 \n     \
    \   && n % 10 == 107 && n % 100 != 13\n        && n mod 100 != 10 \n        &&\
    \ n % 10 == 117 && n % 100 != 13\n        && n mod 100 != 10 \n        && n %\
    \ 10 == 123 && n % 100 != 13\n        && n mod 100 != 10 \n        && n % 10 ==\
    \ 135 && n % 100 != 13\n        && n mod 100 != 10 \n        && n % 10 == 137\
    \ && n % 100 != 13\n        && n mod 100 != 10 \n        && n % 10 == 139 \n \
    \       then\n            n = n + 1\n        end \n        n \n    end \nend \n\
    </code>\nThe output is 7. \nIf it is not giving desired output then you may check\
    \ below function in julia documentation.\n<code>\nusing Test\n\n@testset begin\n\
    \ncandidate = specialFilter;\n\t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15,\
    \ -73, 14, -15]) == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t\
    @test(candidate([43, -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2,\
    \ -33, 75, 21, 19]) == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid identifier name \"&&\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmps995scnn.jl:13\nin expression starting at\
    \ /tmp/tmps995scnn.jl:13\n"
  stdout: ''
  timestamp: 1660008988
- exit_code: 1
  program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    \"\"\"count number greater than 10 and first and last digit are odd \"\
    \"\"\n    for n in nums\n        \n            if n > 10 && n % 2 == 0 && n %\
    \ 10 == 0 && n % 100 != 0\n                \n            else\n              \
    \  \n                return n\n                \n    end\n    \n    return -1\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = specialFilter;\n\t@test(candidate([5,\
    \ -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109])\
    \ == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate(Vector{Int64}([])) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpj4flaj0a.jl:10\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpj4flaj0a.jl:1\n\
    in expression starting at /tmp/tmpj4flaj0a.jl:1\n"
  stdout: ''
  timestamp: 1660008988
- exit_code: 1
  program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n        \n    endOfNumber=0\n    for number in nums\n        if number%10==1\
    \ && number%10%2==0\n            return 1\n        endOfNumber=endOfNumber+1\n\
    \    end\nusing Test\n\n@testset begin\n\ncandidate = specialFilter;\n\t@test(candidate([5,\
    \ -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109])\
    \ == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate(Vector{Int64}([])) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"for\" at /tmp/tmpcmshq3gv.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpcmshq3gv.jl:1\n\
    in expression starting at /tmp/tmpcmshq3gv.jl:1\n"
  stdout: ''
  timestamp: 1660008988
- exit_code: 1
  program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    for i in nums\n        if i > 10\n            true = True\n          \
    \  while true \n                true = false\n                for j in nums\n\
    \                    if j > 10 and (j % 2 == 1) and ((j - i) % 2 == 0)\n     \
    \                   true = false\n            end\n        end\n    end\n    return\
    \ length(nums)\nend\n</cell>\n<code language=julia-1.0>\nprintln(\"Number of positive\
    \ even numbers in [15, -73, 14, -15] is $(specialFilter([15, -73, 14, -15]))\"\
    )\nprintln(\"Number of positive odd numbers in [33, -2, -3, 45, 21, 109] is $(specialFilter([33,\
    \ -2, -3, 45, 21, 109]))\")\n</cell>\n<text>\nWrite a function that takes a vector\
    \ of numbers as input and returns \nthe product of the elements in the vector.\
    \ \nFor example, \nif nums = [3, -2, 45, 2, -9], your function should return \n\
    90.\nWrite your function so that it works with both arrays and vectors.\nFor example,\
    \ \nif nums = [3, -2, 45, 2, -9], your function should return \n90.\nAlso try\
    \ different functions with different inputs to get used to \nJulia broadcasting!\n\
    For example, \nif nums = [3, -2, 45, 2, -9], your function should return \n90.\n\
    using Test\n\n@testset begin\n\ncandidate = specialFilter;\n\t@test(candidate([5,\
    \ -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109])\
    \ == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate(Vector{Int64}([])) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: space before \"(\" not allowed in \"and (\" at\
    \ /tmp/tmpult1b3ah.jl:17\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpult1b3ah.jl:17\n\
    in expression starting at /tmp/tmpult1b3ah.jl:17\n"
  stdout: ''
  timestamp: 1660008988
- exit_code: 1
  program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    \n    return length( nums[nums > 10] & (nums[div(nums, 10, 2) .== 1] .|\
    \ nums[div(nums, 10, 2) .== 0] .) ) \nend\n</cell>\n<text>\nNow that we have our\
    \ first function, let's test it against a few different inputs:\nusing Test\n\n\
    @testset begin\n\ncandidate = specialFilter;\n\t@test(candidate([5, -2, 1, -5])\
    \ == 0)\n\t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33, -2,\
    \ -3, 45, 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109]) ==\
    \ 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate(Vector{Int64}([])) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: space before \".\" not allowed in \"nums[(div(nums,\
    \ 10, 2) .== 0)] .\" at /tmp/tmpmv0w8780.jl:12\nStacktrace:\n [1] top-level scope\n\
    \   @ /tmp/tmpmv0w8780.jl:12\nin expression starting at /tmp/tmpmv0w8780.jl:12\n"
  stdout: ''
  timestamp: 1660008988
- exit_code: 1
  program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0\n    for n in nums\n        if n > 10\n            count +=\
    \ 1 \n            if mod(floor(n), 2) != 0\n                if mod(floor(n), 1)\
    \ != 0\n                    count += 1\n        end\n    end\n    return count\n\
    end\n</cell>\n<text>\nTask 7. Write a function that takes a vector of numbers\
    \ as input and returns \n    the number of elements in the vector that are greater\
    \ than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    For example:\n    >>> specialFilter([15, -73, 14, -15])\n    1\n  \
    \  >>> specialFilter([33, -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nusing Test\n\
    \n@testset begin\n\ncandidate = specialFilter;\n\t@test(candidate([5, -2, 1, -5])\
    \ == 0)\n\t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33, -2,\
    \ -3, 45, 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109]) ==\
    \ 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate(Vector{Int64}([])) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvt2rmeu4.jl:22\nin expression starting at\
    \ /tmp/tmpvt2rmeu4.jl:22\n"
  stdout: ''
  timestamp: 1660008988
- exit_code: 1
  program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    len = length(nums)\n    if len > 0\n        if all(nums[1] & nums[len]\
    \ == 1)\n            return 1\n        end\n        if all(nums[len] & nums[len\
    \ - 1] == 1)\n            return 1\n        end\n    end\n    return 0\nend\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a vector of numbers and\
    \ returns the sum of the\nabsolute values of a given vector element-wise. For\
    \ example:\n>>> specialAbs([15, -73, 14, -15])\n21\n>>> specialAbs([33, -2, -3,\
    \ 45, 21, 109])\n109.\nHere are some more examples:\n>>> specialAbs([-2, -3, 45,\
    \ 21, -14, -9])\n11\n>>> specialAbs([-2, -3, 45, 21, -14, -9, -21])\n10\n>>> specialAbs([1,\
    \ 2, 5, 2])\n5\n>>> specialAbs([-1, 0, -10, -2, -35, -9])\n5\nusing Test\n\n@testset\
    \ begin\n\ncandidate = specialFilter;\n\t@test(candidate([5, -2, 1, -5]) == 0)\n\
    \t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33, -2, -3, 45,\
    \ 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71,\
    \ -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp94256tzg.jl:22\nin expression starting at\
    \ /tmp/tmp94256tzg.jl:22\n"
  stdout: ''
  timestamp: 1660008989
- exit_code: 1
  program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    return sum(nums .> 10 and all(isOdd(digit) for digit in nums[2:end]))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = specialFilter;\n\t@test(candidate([5,\
    \ -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109])\
    \ == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate(Vector{Int64}([])) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyulv64bw.jl:11\nin expression starting at\
    \ /tmp/tmpyulv64bw.jl:11\n"
  stdout: ''
  timestamp: 1660008989
- exit_code: 1
  program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    for n in nums \n        if n mod 2 != 0 then \n            i =  floor(n/10)\n\
    \            if i % 2 != 0 and i == floor(i / 2) \n                return 1\n\
    \            end\n        end\n    end\n    return 0\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = specialFilter;\n\t@test(candidate([5,\
    \ -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109])\
    \ == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate(Vector{Int64}([])) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"2\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpu9lq_uvq.jl:12\nin expression starting at /tmp/tmpu9lq_uvq.jl:12\n"
  stdout: ''
  timestamp: 1660008989
- exit_code: 1
  program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0\n    for num in nums \n        if num > 10 and mod(round(num),\
    \ 2) != 0 \n            count += 1\n        end\n    end\n    return count\nend\n\
    using Test\n\n@testset begin\n\ncandidate = specialFilter;\n\t@test(candidate([5,\
    \ -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109])\
    \ == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate(Vector{Int64}([])) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"mod\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpouhxp5_q.jl:13\nin expression starting at /tmp/tmpouhxp5_q.jl:13\n"
  stdout: ''
  timestamp: 1660008989
- exit_code: 1
  program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    # write your code in here\n    return sum((nums |> filter(x->isOdd(x)\
    \ && x[1] > 10 && x[2] > 10 && x[2] % 2 == 1 )) )\nend\n</cell>\n<text>\nTask\
    \ 2\nusing Test\n\n@testset begin\n\ncandidate = specialFilter;\n\t@test(candidate([5,\
    \ -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109])\
    \ == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate(Vector{Int64}([])) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_rdi3a_i.jl:14\nin expression starting at\
    \ /tmp/tmp_rdi3a_i.jl:14\n"
  stdout: ''
  timestamp: 1660008989
- exit_code: 1
  program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    filtered = 0\n    for number in nums\n        if number > 10\n       \
    \     filtered += 1\n            if number % 2 == 1\n                if number\
    \ % 3 == 1\n                    filtered += 1\n                    if number %\
    \ 5 == 1\n                        filtered += 1\n                        if number\
    \ % 7 == 1\n                            filtered += 1\n                      \
    \      if number % 9 == 1\n                                filtered += 1\n   \
    \                     end\n                    end\n                end\n    \
    \        end\n        end\n    end\n    return filtered\nend\n</cell>\n<code language=julia-1.0>\n\
    using BenchmarkTools\n@btime specialFilter([15, -73, 14, -15])\n</cell>\n<text>\n\
    We could also write a function that does that filtering:\nusing Test\n\n@testset\
    \ begin\n\ncandidate = specialFilter;\n\t@test(candidate([5, -2, 1, -5]) == 0)\n\
    \t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33, -2, -3, 45,\
    \ 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71,\
    \ -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpv3voneyb.jl:32\nin expression starting at\
    \ /tmp/tmpv3voneyb.jl:32\n"
  stdout: ''
  timestamp: 1660008989
- exit_code: 1
  program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    for i in nums\n        if(i>10) \n            if(isOdd(i) && isOdd(i)\
    \ == 1)\n                ret+=1\n            end\n        end\n    end\n    ret\n\
    end\n</code>\n<|/ a dscore=1 |>\n<| a dscore=0 |>\nHere's a Scala solution that\
    \ uses tail-recursion:\n<code>\ndef oddAndFirstLastDigits(n: Int) : Int = {\n\
    \  def go(n: Int, n: Int, x: Int): Int = {\n    if (n == 0) {\n      x\n    }\
    \ else {\n      if (n % 2 == 1)\n        x\n      else\n        go(n, n-1, x)\n\
    \    }\n  }\nusing Test\n\n@testset begin\n\ncandidate = specialFilter;\n\t@test(candidate([5,\
    \ -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109])\
    \ == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate(Vector{Int64}([])) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpe537a1ew.jl:20\nin expression starting at\
    \ /tmp/tmpe537a1ew.jl:20\n"
  stdout: ''
  timestamp: 1660008990
- exit_code: 1
  program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0\n    for n in nums do\n        if n >= 10 && (n mod 2)==1==(n\
    \ % 2) then\n            count +=1\n        end\n    end\n    return count\nend\n\
    using Test\n\n@testset begin\n\ncandidate = specialFilter;\n\t@test(candidate([5,\
    \ -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109])\
    \ == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate(Vector{Int64}([])) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid \"do\" syntax\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpf04_cpg1.jl:12\nin expression starting at /tmp/tmpf04_cpg1.jl:12\n"
  stdout: ''
  timestamp: 1660008989
- exit_code: 1
  program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    nums == nums[end]\n    nums == nums[end]\n    nums == nums[end]\n    even\
    \ = nums[end]\n    odd = nums[end]\n    even == odd\n    odd%2 == 1\n    even%2\
    \ != 1\n    even%2 != 1\n    even%2 != 1\n    odd%2 == 1\n    even%2 != 1\n  \
    \  even%2 != 1\n    even%2 != 1\n    odd%2 == 1\n    even%2 != 1\n    even%2 !=\
    \ 1\n    even%2 != 1\n    odd%2 == 1\n    even%2 != 1\n    even%2 != 1\n    even%2\
    \ != 1\n    odd%2 == 1\n    even%2 != 1\n    even%2 != 1\n    even%2 != 1\n  \
    \  even%2 != 1\n    odd%2 == 1\n    even%2 != 1\n    even%2 != 1\n    even%2 !=\
    \ 1\n    even%2 != 1\n    odd%2 == 1\n    even%2 != 1\n    even%2 != 1\n    even%2\
    \ != 1\n    even%2 != 1\n    odd%2 == 1\n    even%2 != 1\n    even%2 != 1\n  \
    \  even%2 != 1\n    even%2 != 1\n    odd%2 == 1\n    even%2 != 1\n    even%2 !=\
    \ 1\n    even%2 != 1\n    even%2 != 1\n    odd%2 == 1\n    even%2 != 1\n    even%2\
    \ != 1\n    even%2 != 1\n    even%2 != 1\n    odd%2 == 1\n    even%2 != 1\n  \
    \  even%2 != 1\n    even%2 != 1\n    even%2 != 1\n    odd%2 == 1\n    even%2 !=\
    \ 1\n    even%2 != 1\n    even%2 != 1\n    even%2 != 1\n    odd%2 == 1\n    even%2\
    \ != 1\n    even%2 != 1\n    even%2 != 1\n    even%2 != 1\n    odd%2 == 1\n  \
    \  even%2 != 1\n    even%2 != 1\n    even%2 != 1\n    even%2 != 1\n    odd%2 ==\
    \ 1\n    even%2 != 1\n    even%2 != 1\n    even%2 != 1\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = specialFilter;\n\t@test(candidate([5, -2, 1, -5]) == 0)\n\
    \t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33, -2, -3, 45,\
    \ 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71,\
    \ -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmptukkhe6f.jl:10\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmptukkhe6f.jl:1\n\
    in expression starting at /tmp/tmptukkhe6f.jl:1\n"
  stdout: ''
  timestamp: 1660008989
- exit_code: 1
  program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0\n    for num in nums\n        if num > 10\n            if num\
    \ % 10 == 1 || num % 10 == 5 || num % 10 == 7\n                count += 1\n  \
    \          end\n            if num % 10 == 3 || num % 10 == 9\n              \
    \  count += 1\n            end\n        end\n    end\n    return count\nend\n\
    </cell>\n<code language=julia-1.4>\n\"\"\"Write a function that takes a vector\
    \ of numbers as input and returns \n    the number of elements in the vector that\
    \ are greater than 10 and both \n    first and last digits of a number are even\
    \ (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15, -73, 14, -15])\n\
    \    1\n    >>> specialFilter([33, -2, -3, 45, 21, 109])\n    2\n    \"\"\"\n\
    using Test\n\n@testset begin\n\ncandidate = specialFilter;\n\t@test(candidate([5,\
    \ -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109])\
    \ == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate(Vector{Int64}([])) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjs1zpxe8.jl:24\nin expression starting at\
    \ /tmp/tmpjs1zpxe8.jl:24\n"
  stdout: ''
  timestamp: 1660008990
- exit_code: 1
  program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0\n    for n in nums\n        if n < 10 and n % 2 == 1 and n !=\
    \ 2\n            count = count + 1\n        end\n    end\n    return count\nend\n\
    using Test\n\n@testset begin\n\ncandidate = specialFilter;\n\t@test(candidate([5,\
    \ -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109])\
    \ == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate(Vector{Int64}([])) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"n\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpqo15q7xe.jl:13\nin expression starting at /tmp/tmpqo15q7xe.jl:13\n"
  stdout: ''
  timestamp: 1660008989
- exit_code: 1
  program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0\n    for num in nums \n        if num > 10\n            count\
    \ += 1\n            if num > 10 && num % 2 == 1 && num % 2 == 0\n            \
    \    count += 1\n        end\n    end\n    \n    return count\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = specialFilter;\n\t@test(candidate([5, -2, 1, -5])\
    \ == 0)\n\t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33, -2,\
    \ -3, 45, 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109]) ==\
    \ 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate(Vector{Int64}([])) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp_xt1szr7.jl:10\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp_xt1szr7.jl:1\n\
    in expression starting at /tmp/tmp_xt1szr7.jl:1\n"
  stdout: ''
  timestamp: 1660008990
- exit_code: 1
  program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    filter1 = [i for i in nums if i > 10]\n    filter2 = filter1[end-1]\n\
    \    filter3 = filter1[end-1]\n    filter4 = filter2[end-1]\n    filter5 = filter3[end-1]\n\
    \    filter6 = filter4[end-1]\n    filter7 = filter5[end-1]\n    filter8 = filter6[end-1]\n\
    \    filter9 = filter7[end-1]\n    filter10 = filter8[end-1]\n    filter11 = filter9[end-1]\n\
    \    filter12 = filter10[end-1]\n    filter13 = filter11[end-1]\n    filter14\
    \ = filter12[end-1]\n    filter15 = filter13[end-1]\n    filter16 = filter14[end-1]\n\
    \    filter17 = filter15[end-1]\n    filter18 = filter16[end-1]\n    filter19\
    \ = filter17[end-1]\n    filter20 = filter18[end-1]\n    filter21 = filter19[end-1]\n\
    \    filter22 = filter20[end-1]\n    filter23 = filter21[end-1]\n    filter24\
    \ = filter22[end-1]\n    filter25 = filter23[end-1]\n    filter26 = filter24[end-1]\n\
    \    filter27 = filter25[end-1]\n    filter28 = filter26[end-1]\n    filter29\
    \ = filter27[end-1]\n    filter30 = filter28[end-1]\n    filter31 = filter29[end-1]\n\
    \    filter32 = filter30[end-1]\n    filter33 = filter31[end-1]\n    filter34\
    \ = filter32[end-1]\n    filter35 = filter33[end-1]\n    filter36 = filter34[end-1]\n\
    \    filter37 = filter35[end-1]\n    filter38 = filter36[end-1]\n    filter39\
    \ = filter37[end-1]\n    filter40 = filter38[end-1]\n    filter41 = filter39[end-1]\n\
    \    filter42 = filter40[end-1]\n    filter43 = filter41[end-1]\n    filter44\
    \ = filter42[end-1]\n    filter45 = filter43[end-1]\n    filter46 = filter44[end-1]\n\
    \    filter47 = filter45[end-1]\n    filter48 = filter46[end-1]\n    filter49\
    \ = filter47[end-1]\n    filter50 = filter48[end-1]\n    filter51 = filter49[end-1]\n\
    \    filter52 = filter50[end-1]\n    filter53 = filter5\nusing Test\n\n@testset\
    \ begin\n\ncandidate = specialFilter;\n\t@test(candidate([5, -2, 1, -5]) == 0)\n\
    \t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33, -2, -3, 45,\
    \ 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71,\
    \ -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpiiaovrms.jl:10\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpiiaovrms.jl:1\n\
    in expression starting at /tmp/tmpiiaovrms.jl:1\n"
  stdout: ''
  timestamp: 1660008990
- exit_code: -1
  program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    nums == 0 | nums == 1\n    nums == 2 | nums == 4\n    nums == 3 | nums\
    \ == 6\n    nums == 5 | nums == 8\n    nums == 7 | nums == 10\n    nums == 9\n\
    \    return nums..(nums).length\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = specialFilter;\n\t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15,\
    \ -73, 14, -15]) == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t\
    @test(candidate([43, -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2,\
    \ -33, 75, 21, 19]) == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\nend\n"
  status: Timeout
  stderr: 'ERROR: LoadError: '
  stdout: "test set: Error During Test at /tmp/tmpjz9aez9_.jl:24\n  Test threw exception\n\
    \  Expression: candidate([5, -2, 1, -5]) == 0\n  MethodError: no method matching\
    \ |(::Int64, ::Vector{Int64})\n  Closest candidates are:\n    |(::Any, ::Any,\
    \ !Matched::Any, !Matched::Any...) at ~/.conda/envs/polyglot/share/julia/base/operators.jl:655\n\
    \    |(::T, !Matched::T) where T<:Union{Int128, Int16, Int32, Int64, Int8, UInt128,\
    \ UInt16, UInt32, UInt64, UInt8} at ~/.conda/envs/polyglot/share/julia/base/int.jl:361\n\
    \    |(::Integer) at ~/.conda/envs/polyglot/share/julia/base/operators.jl:595\n\
    \    ...\n  Stacktrace:\n   [1] specialFilter(nums::Vector{Int64})\n     @ Main\
    \ /tmp/tmpjz9aez9_.jl:11\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpjz9aez9_.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpjz9aez9_.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpjz9aez9_.jl:25\n  Test threw exception\n  Expression:\
    \ candidate([15, -73, 14, -15]) == 1\n  MethodError: no method matching |(::Int64,\
    \ ::Vector{Int64})\n  Closest candidates are:\n    |(::Any, ::Any, !Matched::Any,\
    \ !Matched::Any...) at ~/.conda/envs/polyglot/share/julia/base/operators.jl:655\n\
    \    |(::T, !Matched::T) where T<:Union{Int128, Int16, Int32, Int64, Int8, UInt128,\
    \ UInt16, UInt32, UInt64, UInt8} at ~/.conda/envs/polyglot/share/julia/base/int.jl:361\n\
    \    |(::Integer) at ~/.conda/envs/polyglot/share/julia/base/operators.jl:595\n\
    \    ...\n  Stacktrace:\n   [1] specialFilter(nums::Vector{Int64})\n     @ Main\
    \ /tmp/tmpjz9aez9_.jl:11\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpjz9aez9_.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpjz9aez9_.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpjz9ae"
  timestamp: 1660008993
- exit_code: 1
  program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0\n    for n in nums\n        if n > 10 && n % 2 != 0 && n % 1\
    \ != 0\n            count += 1 \n        end\n    end\n    return count\nend\n\
    </cell>\n<text>\nLet's check that our function works as expected:\nusing Test\n\
    \n@testset begin\n\ncandidate = specialFilter;\n\t@test(candidate([5, -2, 1, -5])\
    \ == 0)\n\t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33, -2,\
    \ -3, 45, 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109]) ==\
    \ 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate(Vector{Int64}([])) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxf_209ft.jl:19\nin expression starting at\
    \ /tmp/tmpxf_209ft.jl:19\n"
  stdout: ''
  timestamp: 1660008990
- exit_code: 1
  program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    n = 0\n    for i in nums\n        if i>10 && i>10 && nums[i]%2 ==1\n \
    \           n += 1\n        end\n    end\n    return n\nend\n</cell>\n<code language=julia-0.4>\n\
    specialFilter([15, -73, 14, -15])\n</cell>\n<text>\nQuestion 4\nWrite a function\
    \ that takes a vector of numbers as input and returns \n    the number of elements\
    \ in the vector that are greater than 10 and both \n    first and last digits\
    \ of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15,\
    \ -73, 14, -15])\n    1\n    >>> specialFilter([33, -2, -3, 45, 21, 109])\n  \
    \  2\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = specialFilter;\n\
    \t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15])\
    \ == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43,\
    \ -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19])\
    \ == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpw5th_5l9.jl:19\nin expression starting at\
    \ /tmp/tmpw5th_5l9.jl:19\n"
  stdout: ''
  timestamp: 1660008990
- exit_code: 1
  program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    i = 0\n    while i < length(nums) \n        if isOdd(nums[i]) and isOdd(nums[i-1])\
    \ and isOdd(nums[i-2]) then \n            i += 3 \n        else \n           \
    \ i += 1 \n        end \n    end \n    return i \nend \n</cell>\n<text>\nQ3. Write\
    \ a function that takes a vector of numbers as input and returns \n    the number\
    \ of elements in the vector that are greater than 10 and both \n    first and\
    \ last digits of a number are even (2, 4, 6, 8, 10).\n    For example:\n    >>>\
    \ specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33, -2, -3,\
    \ 45, 21, 109])\n    2\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = specialFilter;\n\t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15,\
    \ -73, 14, -15]) == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t\
    @test(candidate([43, -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2,\
    \ -33, 75, 21, 19]) == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"isOdd\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpoq8l1s96.jl:13\nin expression starting at /tmp/tmpoq8l1s96.jl:13\n"
  stdout: ''
  timestamp: 1660008990
- exit_code: 1
  program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    sz = length(nums)\n    for i in 1:sz\n        if nums[i] > 10 && \n  \
    \             (nums[i] mod 2 == 1) && (nums[i] mod 3==0) && (nums[i] mod 5==0)\n\
    \        then\n            return sz\n        end\n    end\n    return sz\nend\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a vector of numbers as\
    \ input and returns \n    the number of elements in the vector that are greater\
    \ than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    For example:\n    >>> specialFilter([15, -73, 14, -15])\n    1\n  \
    \  >>> specialFilter([33, -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nusing Test\n\
    \n@testset begin\n\ncandidate = specialFilter;\n\t@test(candidate([5, -2, 1, -5])\
    \ == 0)\n\t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33, -2,\
    \ -3, 45, 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109]) ==\
    \ 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate(Vector{Int64}([])) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyfcf93xp.jl:14\nin expression starting at\
    \ /tmp/tmpyfcf93xp.jl:14\n"
  stdout: ''
  timestamp: 1660008990
- exit_code: 1
  program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0\n    for n in nums\n        if isodd(n)\n            if n>10\
    \ and isodd(n-1)\n                count+=1\n        end\n    end\n    return count\n\
    end\n\"\"\"\nWrite a function that takes a vector of numbers as input and returns\
    \ \n    the sum of all numbers in the vector that are less than or equal to 50.\
    \ \n    For example:\n    >>> specialFilter([15, -73, 14, -15])\n    30\n    >>>\
    \ specialFilter([33, -2, -3, 45, 21, 109])\n    44\n    \"\"\"\nusing Test\n\n\
    @testset begin\n\ncandidate = specialFilter;\n\t@test(candidate([5, -2, 1, -5])\
    \ == 0)\n\t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33, -2,\
    \ -3, 45, 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109]) ==\
    \ 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate(Vector{Int64}([])) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"isodd\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp3akkebwa.jl:14\nin expression starting at /tmp/tmp3akkebwa.jl:14\n"
  stdout: ''
  timestamp: 1660008990
- exit_code: 1
  program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n\"\"\"\nusing Test\n\n@testset begin\n\ncandidate = specialFilter;\n\t@test(candidate([5,\
    \ -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109])\
    \ == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate(Vector{Int64}([])) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp76yuldns.jl:1\nin expression starting at /tmp/tmp76yuldns.jl:1\n"
  stdout: ''
  timestamp: 1660008990
- exit_code: 1
  program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0\n    for i in nums\n        if isOdd(i) \n            if i %\
    \ 2 == 0 \n                if mod(i, 2) == 1\n                    count += 1\n\
    \            end\n        end\n    end\n    return count\nend\n</cell>\n<code\
    \ language=julia-1.3>\n\"\"\"\nWrite a function that takes a vector of numbers\
    \ as input and returns \nthe number that is the sum of its elements that do not\
    \ exceed 10\n(100, -100, 102, -99, -105, -109).\nFor example:\n    >>> specialSum([15,\
    \ -73, 14, -15])\n    -109\n    >>> specialSum([33, -2, -3, 45, 21, 109])\n  \
    \  99\n\"\"\"\nusing Test\n\n@testset begin\n\ncandidate = specialFilter;\n\t\
    @test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15]) ==\
    \ 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43,\
    \ -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19])\
    \ == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpj2goyvfy.jl:22\nin expression starting at\
    \ /tmp/tmpj2goyvfy.jl:22\n"
  stdout: ''
  timestamp: 1660008991
- exit_code: 1
  program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    \n    count = 0\n    for n in nums\n        if n > 10 && n % 2 == 1 &&\
    \ n % 3 == 0 && n % 5 == 0 \n            count += 1\n        end\n    end\n  \
    \  return count\nend\nusing Test\n\n@testset begin\n\ncandidate = specialFilter;\n\
    \t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15])\
    \ == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43,\
    \ -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19])\
    \ == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpocdhyr06.jl:22

    '
  stdout: "test set: Test Failed at /tmp/tmpocdhyr06.jl:27\n  Expression: candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2\n   Evaluated: 1 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpocdhyr06.jl:27 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpocdhyr06.jl:24\ntest set: Test Failed at /tmp/tmpocdhyr06.jl:28\n\
    \  Expression: candidate([43, -12, 93, 125, 121, 109]) == 4\n   Evaluated: 0 ==\
    \ 4\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpocdhyr06.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpocdhyr06.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpocdhyr06.jl:29\n  Expression: candidate([71, -2, -33, 75,\
    \ 21, 19]) == 3\n   Evaluated: 1 == 3\nStacktrace:\n [1] macro expansion\n   @\
    \ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpocdhyr06.jl:29 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpocdhyr06.jl:24\nTest Summary: | Pass  Fail\
    \  Total\ntest set      |    4     3      7\n"
  timestamp: 1660008992
- exit_code: 1
  program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    for i in nums \n        if i > 10 and (i%2==1 and i%10!=1) \n        \
    \    then return 1\n        else return 0\n    end \nend \n</cell>\n<cell>\n#\
    \ Test your specialFilter function before submission\narr = [15, -73, 14, -15]\n\
    specialFilter(arr)\n</cell>\n<text>\nPart Two\nUse mapPartitionsWithIndex and\
    \ specialFilter to partition a vector into four equal-sized partitions using a\
    \ local counter starting at 0. Each partition should contain the numbers 0, 1,\
    \ 2 and 3 with exactly one number in each partition.\nusing Test\n\n@testset begin\n\
    \ncandidate = specialFilter;\n\t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15,\
    \ -73, 14, -15]) == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t\
    @test(candidate([43, -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2,\
    \ -33, 75, 21, 19]) == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: space before \"(\" not allowed in \"and (\" at\
    \ /tmp/tmpvbwdxb9f.jl:12\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpvbwdxb9f.jl:12\n\
    in expression starting at /tmp/tmpvbwdxb9f.jl:12\n"
  stdout: ''
  timestamp: 1660008991
- exit_code: 1
  program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    for i in nums\n        if i > 10 && i%2==1 && i%10==1 && i%5==1\n    \
    \        return 1\n        end\n    end\n    return 0\nend\n</cell>\n<cell>\n\
    @testset \"Problem 6\" begin\n    \n    vectors = [[-2,-1,1,10], [1,10,3,5,9],\
    \ [-15,6,1,-3,-9]]\n    \n    @test specialFilter(vectors) == 1\n    @test specialFilter(vectors)\
    \ == 2\n    @test specialFilter(vectors) == 3\n    @test specialFilter(vectors)\
    \ == 4\n    @test specialFilter(vectors) == 0\nend\n</cell>\n<text>\nProblem 7:\
    \ Write a function that takes a vector of numbers as input and returns \n    the\
    \ number of elements in the vector that are divisible by 7 and that don't \n \
    \   contain any 0s. For example:\n    >>> specialFilter([15, -85, 14, -15, 2,\
    \ 0])\n    2\n    >>> specialFilter([-4, 1, 0, 0, -3, -9, 0])\n    1\n    >>>\
    \ specialFilter([33, -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nusing Test\n\n\
    @testset begin\n\ncandidate = specialFilter;\n\t@test(candidate([5, -2, 1, -5])\
    \ == 0)\n\t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33, -2,\
    \ -3, 45, 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109]) ==\
    \ 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate(Vector{Int64}([])) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6o7prp3k.jl:18\nin expression starting at\
    \ /tmp/tmp6o7prp3k.jl:18\n"
  stdout: ''
  timestamp: 1660008991
- exit_code: 1
  program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    sum=0\n    for n in nums\n        if n>10 && n%2 == 1 && n%5==1\n    \
    \        sum+=1\n        end\n    end\n    return sum\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = specialFilter;\n\t@test(candidate([5, -2, 1, -5]) == 0)\n\
    \t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33, -2, -3, 45,\
    \ 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71,\
    \ -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp3_5ue0ls.jl:21

    '
  stdout: "test set: Test Failed at /tmp/tmp3_5ue0ls.jl:25\n  Expression: candidate([15,\
    \ -73, 14, -15]) == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp3_5ue0ls.jl:25 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp3_5ue0ls.jl:23\ntest set: Test Failed at /tmp/tmp3_5ue0ls.jl:26\n\
    \  Expression: candidate([33, -2, -3, 45, 21, 109]) == 2\n   Evaluated: 1 == 2\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3_5ue0ls.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3_5ue0ls.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp3_5ue0ls.jl:27\n  Expression: candidate([43, -12, 93, 125,\
    \ 121, 109]) == 4\n   Evaluated: 1 == 4\nStacktrace:\n [1] macro expansion\n \
    \  @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp3_5ue0ls.jl:27 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp3_5ue0ls.jl:23\ntest set: Test Failed at /tmp/tmp3_5ue0ls.jl:28\n\
    \  Expression: candidate([71, -2, -33, 75, 21, 19]) == 3\n   Evaluated: 2 == 3\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3_5ue0ls.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3_5ue0ls.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     4      7\n"
  timestamp: 1660008992
- exit_code: 1
  program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    # Write your function here\n    return 0 \nend\n</cell>\n<code language=julia-1.0>\n\
    # Run this cell to check your output. If something is wrong, please jump \n# to\
    \ the last cell and fix the output.\nassert(specialFilter([15, -73, 14, -15])\
    \ == 1)\nassert(specialFilter([33, -2, -3, 45, 21, 109]) == 2)\n</cell>\n<text>\n\
    Write a function that takes a vector of numbers as input and returns true if the\
    \ element of the vector is odd.\nusing Test\n\n@testset begin\n\ncandidate = specialFilter;\n\
    \t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15])\
    \ == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43,\
    \ -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19])\
    \ == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1ot53nkz.jl:14\nin expression starting at\
    \ /tmp/tmp1ot53nkz.jl:14\n"
  stdout: ''
  timestamp: 1660008991
- exit_code: 1
  program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0\n    for n in nums \n        if n >= 10 && n mod 2 == 0 && n-1/2\
    \ mod 2 == 1\n            count += 1\n        end\n    end\n    return count\n\
    end\n</cell>\n<code language=julia-1.5>\n# Check your function implementation\n\
    @assert specialFilter([15, -73, 14, -15]) == 1 \"Oops!  The count should be 1!\"\
    \n@assert specialFilter([33, -2, -3, 45, 21, 109]) == 2 \"Oops!  The count should\
    \ be 2!\"\n</cell>\n<text>\nExtra Credit\nIf you have extra time, try to solve\
    \ this problem recursively.  You should try to get as much practice with Julia's\
    \ syntax, and tail-recursion elimination.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = specialFilter;\n\t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15,\
    \ -73, 14, -15]) == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t\
    @test(candidate([43, -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2,\
    \ -33, 75, 21, 19]) == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"2\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmph5r61gsu.jl:13\nin expression starting at /tmp/tmph5r61gsu.jl:13\n"
  stdout: ''
  timestamp: 1660008991
- exit_code: 1
  program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    \"\"\"\n    Find the number of numbers in a vector that are greater than\
    \ 10 and \n    both first and last digits of a number are odd (1, 3, 5, 7, 9).\n\
    \    \"\"\"\n    count = 0\n    for num in nums\n        if num > 10 && num %\
    \ 2 == 1 && num % 2 == 1 && num % 2 != 0\n            count += 1\n        end\n\
    \    end\n    return count\nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a vector of strings as input and returns the\nnumber of strings that\
    \ are longer than 10 and that do not contain only \nletters (no numbers and no\
    \ punctuation).\nFor example, if the input vector is [\"hi\", \"how\", \"are\"\
    , \"you\", \"okay\"], the \nusing Test\n\n@testset begin\n\ncandidate = specialFilter;\n\
    \t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15])\
    \ == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43,\
    \ -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19])\
    \ == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyg0g3l7w.jl:23\nin expression starting at\
    \ /tmp/tmpyg0g3l7w.jl:23\n"
  stdout: ''
  timestamp: 1660008991
- exit_code: 1
  program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    for i in nums\n        if i > 10 && i % 2 == 1 && i % 2 == 0\n       \
    \     return 1\n        end\n    end\n    return 0\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = specialFilter;\n\t@test(candidate([5, -2, 1, -5]) == 0)\n\
    \t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33, -2, -3, 45,\
    \ 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71,\
    \ -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpolb8klyl.jl:20

    '
  stdout: "test set: Test Failed at /tmp/tmpolb8klyl.jl:24\n  Expression: candidate([15,\
    \ -73, 14, -15]) == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpolb8klyl.jl:24 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpolb8klyl.jl:22\ntest set: Test Failed at /tmp/tmpolb8klyl.jl:25\n\
    \  Expression: candidate([33, -2, -3, 45, 21, 109]) == 2\n   Evaluated: 0 == 2\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpolb8klyl.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpolb8klyl.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpolb8klyl.jl:26\n  Expression: candidate([43, -12, 93, 125,\
    \ 121, 109]) == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n \
    \  @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpolb8klyl.jl:26 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpolb8klyl.jl:22\ntest set: Test Failed at /tmp/tmpolb8klyl.jl:27\n\
    \  Expression: candidate([71, -2, -33, 75, 21, 19]) == 3\n   Evaluated: 0 == 3\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpolb8klyl.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpolb8klyl.jl:22\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     4      7\n"
  timestamp: 1660008992
- exit_code: 1
  program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    for x in nums\n        if x > 10\n            oddDigits = x % 10\n   \
    \         evenDigits = (x % 10 - evenDigits) / 2\n            if oddDigits > 0\
    \ && evenDigits % 2 != 0\n                return length(nums)\n            end\n\
    \        end\n    end\n    return length(nums)\nend\n</cell>\n<cell>\nusing Test\n\
    \n@testset begin\n\ncandidate = specialFilter;\n\t@test(candidate([5, -2, 1, -5])\
    \ == 0)\n\t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33, -2,\
    \ -3, 45, 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109]) ==\
    \ 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate(Vector{Int64}([])) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxi96qsix.jl:22\nin expression starting at\
    \ /tmp/tmpxi96qsix.jl:22\n"
  stdout: ''
  timestamp: 1660008991
- exit_code: 1
  program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0\n    for n in nums\n        if n > 10\n            if n mod\
    \ 2 == 1 && n % 3 ==1\n                count += 1\n            end\n        end\n\
    \    end\n    return count\nend\n</cell>\n<text>\nExercise: Write a function that\
    \ takes a vector of numbers as input and returns \n    the number of elements\
    \ in the vector that are greater than 10 and all \n    elements are odd.\n   \
    \ For example:\n    >>> specialFilter([15, -73, 14, -15])\n    1\n    \"\"\"\n\
    using Test\n\n@testset begin\n\ncandidate = specialFilter;\n\t@test(candidate([5,\
    \ -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109])\
    \ == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate(Vector{Int64}([])) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"2\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpv6p30wp6.jl:14\nin expression starting at /tmp/tmpv6p30wp6.jl:14\n"
  stdout: ''
  timestamp: 1660008991
- exit_code: 1
  program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    lengthOfNums := length(nums)\n    i = 0\n    sumOfElements = 0\n    \n\
    \    while (i < lengthOfNums) do\n        if nums[i] > 10 && nums[i]%2 == 1 &&\
    \ nums[i]%2 == 1 && nums[i]%2 == 1 then\n            sumOfElements = sumOfElements\
    \ + 1\n        end\n        i = i + 1\n    end\n    \n    return sumOfElements\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = specialFilter;\n\t@test(candidate([5,\
    \ -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109])\
    \ == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate(Vector{Int64}([])) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid \"do\" syntax\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpeu4valql.jl:15\nin expression starting at /tmp/tmpeu4valql.jl:15\n"
  stdout: ''
  timestamp: 1660008991
- exit_code: 1
  program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    for num in nums \n        if num > 10 and num % 2 == 0 && num % 5 != 0\
    \ \n        then \n            return 1 \n        else \n            return 0\
    \ \n    end\nend \n</code>\n<|/ a dscore=0 tags=julia,function,if-statement |>\n\
    <| c |>\nThanks guys. I'll give it a try this evening. I'm working on getting\
    \ my head around Julia a bit more. I have a couple of questions though. Why is\
    \ there a semicolon after \"function specialFilter\" ?\n<|/ c |>\n<| c |>\nBecause\
    \ the function statement should end with a colon.\n<|/ c |>\n<| a |>\nHere is\
    \ a different approach that avoids loops and avoids the if statement altogether,\
    \ using comprehensions.\n<code>\nusing Test\n\n@testset begin\n\ncandidate = specialFilter;\n\
    \t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15])\
    \ == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43,\
    \ -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19])\
    \ == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"num\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpz7fzryvx.jl:12\nin expression starting at /tmp/tmpz7fzryvx.jl:12\n"
  stdout: ''
  timestamp: 1660008991
- exit_code: 1
  program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    for i in nums \n        if (i>10) \n            if (i%2==1) \n       \
    \         if (i%3==1) \n                    return i\n    end\n    return -1\n\
    end\n</cell>\n<text>\nExercise 5\nWrite a function that takes a vector of numbers\
    \ as input and returns \n    the number of elements in the vector that are greater\
    \ than 10 and both \n    first and last digits of a number are even \n    (1,\
    \ 3, 5, 7, 9, 11, 13).\n    For example:\n    >>> specialFilter([15, -73, 14,\
    \ -15])\n    1\n    >>> specialFilter([33, -2, -3, 45, 21, 109])\n    4\n    \"\
    \"\"\nusing Test\n\n@testset begin\n\ncandidate = specialFilter;\n\t@test(candidate([5,\
    \ -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109])\
    \ == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate(Vector{Int64}([])) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdw4c7qyi.jl:19\nin expression starting at\
    \ /tmp/tmpdw4c7qyi.jl:19\n"
  stdout: ''
  timestamp: 1660008991
- exit_code: 1
  program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    if nums == []\n        return 0;\n    numsNew = nums\n    for num in nums\n\
    \        if num > 10 && num % 2 == 0 && numsNew[end-1] % 2 == 0 && numsNew[end-2]\
    \ % 2 == 0\n            push!(numsNew, num)\n        end\n    end\n    return\
    \ length(numsNew)\nend\n</code>\n<|/ a tags=optimization,julia,function,performance\
    \ dscore=2 |>\n<| c |>\nThanks, I thought of that myself but my vectors are huge\
    \ so I wanted to see if there was a better way.\n<|/ c |>\n<| c |>\nHow about\
    \ this: first make all numbers positive, remove everything that isn't a multiple\
    \ of 10, then remove everything that isn't the 1st and last digit, then use that?\n\
    <|/ c |>\n<| c |>\nThe code above works with small vectors but I get \"MemoryError:\
    \ cannot allocate vector of size 2097152 KiB\" when trying to run it with large\
    \ vectors. I read somewhere that vectors in julia are allocated on the stack.\
    \ So I thought the problem was that I could have many vectors floating around\
    \ in memory. Still not too sure how to solve it though\n<|/ c |>\n<| c |>\nActually\
    \ you can declare numsNew to be a global variable and avoid the allocation of\
    \ a new vector every time. Also you can replace length with size, and you can\
    \ also remove the need for numsNew if you simply do `numsNew = nums[end-1] % 10\
    \ == 0 && nums[end-2] % 10 == 0 && nums[end-1] % 2 == 0 && nums[end-2] % 2 ==\
    \ 0`\n<|/ c |>\n<| c |>\nYes, I didn't think of that. Thanks again\n<|/ c |>\n\
    <| a dscore=1 |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = specialFilter;\n\
    \t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15])\
    \ == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43,\
    \ -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19])\
    \ == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbyvegy37.jl:21\nin expression starting at\
    \ /tmp/tmpbyvegy37.jl:21\n"
  stdout: ''
  timestamp: 1660008991
- exit_code: 1
  program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    if nums.length==0 \n        throw(ArgumentError(\"Vector cannot be empty\"\
    ))\n    end\n    res=Int64(0)\n    for n in nums\n        if n>10 && n%2==1 &&\
    \ n%2==0\n            res+=1 \n        end\n    end\n    return res\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = specialFilter;\n\t@test(candidate([5,\
    \ -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109])\
    \ == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate(Vector{Int64}([])) == 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmp8b3t1b6f.jl:24

    '
  stdout: "test set: Error During Test at /tmp/tmp8b3t1b6f.jl:27\n  Test threw exception\n\
    \  Expression: candidate([5, -2, 1, -5]) == 0\n  type Array has no field length\n\
    \  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] specialFilter(nums::Vector{Int64})\n\
    \     @ Main /tmp/tmp8b3t1b6f.jl:11\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp8b3t1b6f.jl:27 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp8b3t1b6f.jl:26\ntest set:\
    \ Error During Test at /tmp/tmp8b3t1b6f.jl:28\n  Test threw exception\n  Expression:\
    \ candidate([15, -73, 14, -15]) == 1\n  type Array has no field length\n  Stacktrace:\n\
    \   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] specialFilter(nums::Vector{Int64})\n\
    \     @ Main /tmp/tmp8b3t1b6f.jl:11\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp8b3t1b6f.jl:28 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp8b3t1b6f.jl:26\ntest set:\
    \ Error During Test at /tmp/tmp8b3t1b6f.jl:29\n  Test threw exception\n  Expression:\
    \ candidate([33, -2, -3, 45, 21, 109]) == 2\n  type Array has no field length\n\
    \  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] specialFilter(nums::Vector{Int64})\n\
    \     @ Main /tmp/tmp8b3t1b6f.jl:11\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp8b3t1b6f.jl:29 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp8b3t1b6f.jl:26\ntest set:\
    \ Error During Test at /tmp/tmp8b3t1b6f.jl:30\n  Test threw exception\n  Expression:\
    \ candidate([43, -12, 93, 125, 121, 109]) == 4\n  type Array "
  timestamp: 1660008993
- exit_code: 1
  program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0\n    for n in nums\n        if n > 10 && n % 2 != 0 && n % 2\
    \ != 1\n            count = count + 1\n        end\n    end\n    \n    return\
    \ count\nend\n</cell>\n<cell>\n\"\"\"Write a function that takes a vector of numbers\
    \ as input and returns \n    the number of elements in the vector that are greater\
    \ than 10 and both \n    first and last digits of a number are even (2, 4, 6,\
    \ 8).\n    For example:\n    >>> specialFilter([15, -73, 14, -15])\n    1\n  \
    \  >>> specialFilter([33, -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nusing Test\n\
    \n@testset begin\n\ncandidate = specialFilter;\n\t@test(candidate([5, -2, 1, -5])\
    \ == 0)\n\t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33, -2,\
    \ -3, 45, 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109]) ==\
    \ 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate(Vector{Int64}([])) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpoehpd4kq.jl:20\nin expression starting at\
    \ /tmp/tmpoehpd4kq.jl:20\n"
  stdout: ''
  timestamp: 1660008992
- exit_code: 1
  program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    for i in nums \n        if (i > 10 and i mod 2 == 1 and i mod 3==1) \n\
    \            return 1 \n    return 0\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = specialFilter;\n\t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15,\
    \ -73, 14, -15]) == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t\
    @test(candidate([43, -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2,\
    \ -33, 75, 21, 19]) == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpi4ayp5bg.jl:12\nin expression starting at\
    \ /tmp/tmpi4ayp5bg.jl:12\n"
  stdout: ''
  timestamp: 1660008992
- exit_code: 1
  program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    \n\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are even (2, 4, 6, 8, 10).\n    For\
    \ example:\n    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = specialFilter;\n\t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15,\
    \ -73, 14, -15]) == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t\
    @test(candidate([43, -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2,\
    \ -33, 75, 21, 19]) == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp8h81ly80.jl:10\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp8h81ly80.jl:1\n\
    in expression starting at /tmp/tmp8h81ly80.jl:1\n"
  stdout: ''
  timestamp: 1660008992
- exit_code: 1
  program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    return sum(nums[2:end-1] == 0 && nums[end]%2 == 1)\nend\n</cell>\n<text>\n\
    Exercise 10\nWrite a function that takes a vector of numbers as input and returns\
    \ True if the vector has an even number of elements and False otherwise.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = specialFilter;\n\t@test(candidate([5,\
    \ -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109])\
    \ == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate(Vector{Int64}([])) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp97u0niky.jl:13\nin expression starting at\
    \ /tmp/tmp97u0niky.jl:13\n"
  stdout: ''
  timestamp: 1660008992
- exit_code: 1
  program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    return sum(nums..>10) & (nums..&even) & (nums..&odd[1,end-1])\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert @code_warntype specialFilter([33, -2, -3, 45,\
    \ 21, 109]) == 1 \n@assert @code_warntype specialFilter([15, -73, 14, -15]) ==\
    \ 2 \n</cell>\n<text>\nExercise 3\nWhat does this error mean? What have we done\
    \ wrong?\nusing Test\n\n@testset begin\n\ncandidate = specialFilter;\n\t@test(candidate([5,\
    \ -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109])\
    \ == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate(Vector{Int64}([])) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid operator \"..>\" near column 21\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkm0gawqy.jl:11\nin expression starting at\
    \ /tmp/tmpkm0gawqy.jl:11\n"
  stdout: ''
  timestamp: 1660008992
- exit_code: 1
  program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0\n    for x in nums\n        if x > 10 && x%2 != 0 && x%2 !=\
    \ 1\n            count = count + 1\n        end\n    end\n    return count\nend\n\
    </code>\n<|/ a dscore=1 |>\n<| a dscore=0 |>\n<code>\nusing Test\n\n@testset begin\n\
    \ncandidate = specialFilter;\n\t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15,\
    \ -73, 14, -15]) == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t\
    @test(candidate([43, -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2,\
    \ -33, 75, 21, 19]) == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1zg5jgd6.jl:19\nin expression starting at\
    \ /tmp/tmp1zg5jgd6.jl:19\n"
  stdout: ''
  timestamp: 1660008992
- exit_code: 1
  program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    n = 0\n    for i in nums\n        if i > 10\n            if i%2 ==1 &&\
    \ i%3 ==1 && i%5 ==1\n                n = n + 1\n            end\n        end\n\
    \    end\n    return n\nend\n</cell>\n<code language=julia-1.5>\n#Pkg.add(\"DataFrames\"\
    )\n#Pkg.add(\"CSV\")\n</cell>\n<code language=julia-1.5>\n# Load in data\ncsv\
    \ = CSV.read(\"data/Ames_Housing_Data.csv\")\n</cell>\n<code language=julia-1.5>\n\
    # Drop a column\nusing Test\n\n@testset begin\n\ncandidate = specialFilter;\n\t\
    @test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15]) ==\
    \ 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43,\
    \ -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19])\
    \ == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp03aingnp.jl:21\nin expression starting at\
    \ /tmp/tmp03aingnp.jl:21\n"
  stdout: ''
  timestamp: 1660008992
- exit_code: 1
  program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    result <- 0\n    for n in nums\n        if n>=10 && n<100 && isOdd(floor(n))\
    \ && isOdd(floor(n+1))\n            result += n\n        end\n    end\n    return\
    \ result\nend\n</cell>\n<text>\nExercise: Write a function that takes a vector\
    \ of numbers as input and returns \n    the number of elements in the vector that\
    \ are greater than 10 and both \n    first and last digits of a number are even\
    \ or both first and last digits of a number are odd.\n    For example:\n    >>>\
    \ specialFilter([16, -3, -4, -6, 18, -8])\n    3\n    \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = specialFilter;\n\t@test(candidate([5, -2, 1, -5]) == 0)\n\
    \t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33, -2, -3, 45,\
    \ 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71,\
    \ -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpx6xz_7yn.jl:19\nin expression starting at\
    \ /tmp/tmpx6xz_7yn.jl:19\n"
  stdout: ''
  timestamp: 1660008993
- exit_code: 1
  program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0 \n    for x in nums do \n        if x > 10 \n            if\
    \ mod(x,2) == 1 && mod(x,10) == 1 \n                count = count + 1\n      \
    \      end\n        end\n    end\n    return count\nend\n</cell>\n<code language=julia-1.4>\n\
    # Test your function on a few examples:\n@test specialFilter([15, -73, 14, -15])\
    \ == 1 \n@test specialFilter([33, -2, -3, 45, 21, 109]) == 2 \n</cell>\n<text>\n\
    Step 3: Write a function that takes a vector of numbers as input and returns the\
    \ number of elements in the vector that are divisible by 7\n    \n    You can\
    \ use filter or write your own code for this.\n    \n    Example:\n    >>> specialDivisors([2,\
    \ 4, 5, 7, 8, 11])\n    4\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = specialFilter;\n\t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15,\
    \ -73, 14, -15]) == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t\
    @test(candidate([43, -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2,\
    \ -33, 75, 21, 19]) == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid \"do\" syntax\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp734z0q55.jl:12\nin expression starting at /tmp/tmp734z0q55.jl:12\n"
  stdout: ''
  timestamp: 1660008993
- exit_code: 1
  program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    if length(nums)==0 then 0 else nums[nums> 10 && nums[end]%2 != 0 && nums[end-1]%2\
    \ != 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = specialFilter;\n\t@test(candidate([5,\
    \ -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109])\
    \ == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate(Vector{Int64}([])) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"0\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpif2ecjvw.jl:11\nin expression starting at /tmp/tmpif2ecjvw.jl:11\n"
  stdout: ''
  timestamp: 1660008993
- exit_code: 1
  program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count=0\n    for i in nums\n        if i%2 != 0\n            count+=1\n\
    \        end\n    end\n    return count\nend\n</cell>\n<cell>\nusing Test\n\n\
    @testset begin\n\ncandidate = specialFilter;\n\t@test(candidate([5, -2, 1, -5])\
    \ == 0)\n\t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33, -2,\
    \ -3, 45, 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109]) ==\
    \ 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate(Vector{Int64}([])) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmps5pfd74p.jl:19\nin expression starting at\
    \ /tmp/tmps5pfd74p.jl:19\n"
  stdout: ''
  timestamp: 1660008993
- exit_code: 1
  program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    n = 0\n    for n in nums \n        if nums[n] > 10 and (odd(nums[n]),\
    \ odd(nums[n-1])) \n            then\n                return n\n        end\n\
    \    end\n    return n\nend\n</cell>\n<text>\nFinally, write a function that takes\
    \ a vector of numbers as input and returns \nthe number that occurs the most frequently.\
    \ The input vector contains both integers \nand floating-point numbers. The function\
    \ should count how many times each \ninteger or floating-point number occurs in\
    \ the input vector and return the \nnumber with the highest count. The input vector\
    \ can contain numbers of any \ntype. For example:\nusing Test\n\n@testset begin\n\
    \ncandidate = specialFilter;\n\t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15,\
    \ -73, 14, -15]) == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t\
    @test(candidate([43, -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2,\
    \ -33, 75, 21, 19]) == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: space before \"(\" not allowed in \"and (\" at\
    \ /tmp/tmpjqgjhx2c.jl:13\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjqgjhx2c.jl:13\n\
    in expression starting at /tmp/tmpjqgjhx2c.jl:13\n"
  stdout: ''
  timestamp: 1660008993
- exit_code: 1
  program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0\n    for num in nums \n        if num > 10 && num == floor(num)\
    \ && num == ceil(num) && mod(num, 2) != 0 \n            count += 1\n        end\n\
    \    end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = specialFilter;\n\
    \t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15])\
    \ == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43,\
    \ -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19])\
    \ == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmprbslyro8.jl:21

    '
  stdout: "test set: Test Failed at /tmp/tmprbslyro8.jl:26\n  Expression: candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2\n   Evaluated: 4 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmprbslyro8.jl:26 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmprbslyro8.jl:23\ntest set: Test Failed at /tmp/tmprbslyro8.jl:27\n\
    \  Expression: candidate([43, -12, 93, 125, 121, 109]) == 4\n   Evaluated: 5 ==\
    \ 4\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprbslyro8.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprbslyro8.jl:23\ntest set: Test\
    \ Failed at /tmp/tmprbslyro8.jl:28\n  Expression: candidate([71, -2, -33, 75,\
    \ 21, 19]) == 3\n   Evaluated: 4 == 3\nStacktrace:\n [1] macro expansion\n   @\
    \ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmprbslyro8.jl:28 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmprbslyro8.jl:23\nTest Summary: | Pass  Fail\
    \  Total\ntest set      |    4     3      7\n"
  timestamp: 1660008994
- exit_code: 1
  program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    \"\"\"Calculate the number of elements in a vector that are greater than\
    \ 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\
    \ \"\"\"\n    return sum(x > 0\n           and isodd(digit(x)) and isodd(digit(last(x)))\n\
    \           for x in nums)\nusing Test\n\n@testset begin\n\ncandidate = specialFilter;\n\
    \t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15])\
    \ == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43,\
    \ -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19])\
    \ == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpr2mho6g_.jl:14\nin expression starting at\
    \ /tmp/tmpr2mho6g_.jl:14\n"
  stdout: ''
  timestamp: 1660008993
- exit_code: 1
  program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    if length(nums) < 1 \n        throw(ArgumentError(\"nums is empty\"))\n\
    \    elseif length(nums) == 1 \n        return 1\n    else \n        sum = 0\n\
    \        for n in nums \n            if n % 2 == 0 and (n>=10 && n<=20) \n   \
    \             sum += 1\n            else \n                sum\n        end\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = specialFilter;\n\t\
    @test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15]) ==\
    \ 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43,\
    \ -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19])\
    \ == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: space before \"(\" not allowed in \"and (\" at\
    \ /tmp/tmpatz487bg.jl:18\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpatz487bg.jl:18\n\
    in expression starting at /tmp/tmpatz487bg.jl:18\n"
  stdout: ''
  timestamp: 1660008993
- exit_code: 1
  program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    for n in nums \n        if n < 10 && n % 2 != 0 && n % 5 != 0 \n     \
    \       return n + 1 \n        end\n    end\n    return 0\nend\n</cell>\n<code\
    \ language=julia-1.5>\nprintln(\"Number of odd first and last digits of odd numbers:\
    \ $(specialFilter([15, -73, 14, -15]))\")\nprintln(\"Number of even first and\
    \ last digits of even numbers: $(specialFilter([33, -2, -3, 45, 21, 109]))\")\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes two input parameters\
    \ (a vector, a scalar), and returns a new vector where all elements that are less\
    \ than the scalar are replaced by the scalar, and all elements that are greater\
    \ than the scalar are replaced by zero. For example:\n>>> myFilter(v, 10)\n[10,\
    \ 10, 10, 10]\n>>> myFilter(v, 0)\n[10, 10, 10, 10]\n>>> myFilter([4, 5, 7, 0,\
    \ -9], 10)\n[10, 10, 10, 10, 10]\n>>> myFilter([4, 5, 7, 0, -9], 0)\n[10, 10,\
    \ 10, 10, 10]\n\"\"\"\nusing Test\n\n@testset begin\n\ncandidate = specialFilter;\n\
    \t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15])\
    \ == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43,\
    \ -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19])\
    \ == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpajajkfqn.jl:18\nin expression starting at\
    \ /tmp/tmpajajkfqn.jl:18\n"
  stdout: ''
  timestamp: 1660008993
- exit_code: -1
  program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    for i in nums\n        if i > 10 && i > lastdigit(digits(i)) && firstdigit(digits(i))\
    \ % 2 == 1\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = specialFilter;\n\t@test(candidate([5,\
    \ -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109])\
    \ == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate(Vector{Int64}([])) == 0)\nend\n"
  status: Timeout
  stderr: 'ERROR: '
  stdout: "test set: Error During Test at /tmp/tmp5_3uhhto.jl:23\n  Test threw exception\n\
    \  Expression: candidate([5, -2, 1, -5]) == 0\n  MethodError: Cannot `convert`\
    \ an object of type typeof(count) to an object of type Int64\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::Ptr) where T<:Integer at ~/.conda/envs/polyglot/share/julia/base/pointer.jl:23\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at ~/.conda/envs/polyglot/share/julia/base/number.jl:7\n\
    \    ...\n  Stacktrace:\n   [1] specialFilter(nums::Vector{Int64})\n     @ Main\
    \ /tmp/tmp5_3uhhto.jl:16\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp5_3uhhto.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp5_3uhhto.jl:22\ntest set:\
    \ Error During Test at /tmp/tmp5_3uhhto.jl:24\n  Test threw exception\n  Expression:\
    \ candidate([15, -73, 14, -15]) == 1\n  UndefVarError: lastdigit not defined\n\
    \  Stacktrace:\n   [1] specialFilter(nums::Vector{Int64})\n     @ Main /tmp/tmp5_3uhhto.jl:12\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp5_3uhhto.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp5_3uhhto.jl:22\ntest set:\
    \ Error During Test at /tmp/tmp5_3uhhto.jl:25\n  Test threw exception\n  Expression:\
    \ candidate([33, -2, -3, 45, 21, 109]) == 2\n  UndefVarError: lastdigit not defined\n\
    \  Stacktrace:\n   [1] specialFilter(nums::Vector{Int64})\n     @ Main /tmp/tmp5_3uhhto.jl:12\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp5_3uhhto.jl:25 [inlined]\n\
    \   [4] macro expansion\n"
  timestamp: 1660008997
- exit_code: 1
  program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0\n    for num in nums\n        if num > 10 && num % 2 == 0 &&\
    \ num % 2 == 1\n            count += 1\n        end\n    end\n    return count\n\
    end\n</cell>\n<cell>\n#@test {\"test_numbers\" = () -> true }\nusing Test\n\n\
    @testset begin\n\ncandidate = specialFilter;\n\t@test(candidate([5, -2, 1, -5])\
    \ == 0)\n\t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33, -2,\
    \ -3, 45, 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109]) ==\
    \ 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate(Vector{Int64}([])) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgor9iraa.jl:19\nin expression starting at\
    \ /tmp/tmpgor9iraa.jl:19\n"
  stdout: ''
  timestamp: 1660008993
- exit_code: 1
  program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0.0\n    for n in nums\n        if n > 10\n            count +=\
    \ true\n            if true\n                if mod(n, 2) == 1\n             \
    \       count += 1\n            end\n        end\n    end\n    return count\n\
    end\n</cell>\n<cell>\n@test specialFilter([15, -73, 14, -15]) == 1.0\n@test specialFilter([33,\
    \ -2, -3, 45, 21, 109]) == 2.0\n</cell>\n<text>\nProblem 4\nUse @test (or similar)\
    \ to test that your function returns 42 when given 42.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = specialFilter;\n\t@test(candidate([5, -2, 1, -5]) == 0)\n\
    \t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33, -2, -3, 45,\
    \ 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71,\
    \ -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpofl9pw54.jl:23\nin expression starting at\
    \ /tmp/tmpofl9pw54.jl:23\n"
  stdout: ''
  timestamp: 1660008993
- exit_code: 1
  program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    if length(nums) == 0 \n        return 0\n    \n    if nums[0] > 10 \n\
    \        return 0 \n    \n    if nums[end] > 10 \n        return 0 \n    \n  \
    \  middle = ceil(length(nums)/2)\n    first = nums[middle]\n    last = nums[middle-1]\n\
    \    \n    if first % 2 != 0 && last % 2 != 0 \n        return 0 \n    end\n \
    \   \n    return 1 \nend\n\"\"\"\nWrite a function that takes a vector of numbers\
    \ as input and returns \nthe sum of the elements in the vector, excluding elements\
    \ that are even or \nnegative. For example:\n>>> specialSum([15, -73, 14, -15])\n\
    -20\n\"\"\"\nusing Test\n\n@testset begin\n\ncandidate = specialFilter;\n\t@test(candidate([5,\
    \ -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109])\
    \ == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate(Vector{Int64}([])) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfq_wq233.jl:1\nin expression starting at /tmp/tmpfq_wq233.jl:1\n"
  stdout: ''
  timestamp: 1660008994
- exit_code: 1
  program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0\n    for i in nums do\n        if i > 10 && i >= odd(i) \n \
    \           count = count + 1\n        end\n    end\n    return count\nend\n</cell>\n\
    <code language=julia-0.5>\n# Run this cell to test your function \n</cell>\n<code\
    \ language=julia-0.5>\ntest = [15, -73, 14, -15]\n</cell>\n<code language=julia-0.5>\n\
    # Run this cell to test your function \n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that computes the sum of the absolute difference between each element in a given\
    \ array and each element in the array with the same element from the array.\n\
    For example:\n    arr = [10, 15, -5, 15, -7, 21, 15]\n    abs(arr - arr[2])\n\
    should give the output\n    abs(arr[2] - arr[2]) + abs(arr[2] - arr[3]) + abs(arr[2]\
    \ - arr[4]) + abs(arr[2] - arr[5]) + abs(arr[2] - arr[6])\nThe output should be\
    \ a vector of numbers.\nHINT: You can either use a for loop or the map function.\n\
    \    \nusing Test\n\n@testset begin\n\ncandidate = specialFilter;\n\t@test(candidate([5,\
    \ -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109])\
    \ == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate(Vector{Int64}([])) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid \"do\" syntax\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpm2okt_or.jl:12\nin expression starting at /tmp/tmpm2okt_or.jl:12\n"
  stdout: ''
  timestamp: 1660008994
- exit_code: 1
  program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0\n    for num in nums\n        if num > 10\n            count\
    \ += 1\n            if num > 12\n                count += 1\n                if\
    \ num % 2 == 1\n                    count += 1\n                    if num % 4\
    \ != 0\n                        count += 1\n                if num % 2 != 0\n\
    \                    count += 1\n        if num > 10\n            count += 1\n\
    \            if num % 2 != 0\n                count += 1\n                if num\
    \ % 4 != 0\n                    count += 1\n            if num % 2 != 0\n    \
    \            count += 1\n                if num % 4 != 0\n                   \
    \ count += 1\n        end\n    end\n    return count\nend\n</cell>\n<code language=julia-1.0>\n\
    ## Test\nspecialFilter(1:10)\n</cell>\n<text>\nProblem 6: Define a function that\
    \ takes a vector of numbers as input and returns \n    the number of elements\
    \ in the vector that are divisible by 10 and both \n    first and last digits\
    \ are even numbers greater than 50. For example:\n    >>> specialFilter([15, -73,\
    \ 14, -15])\n    1\n    >>> specialFilter([33, -2, -3, 45, 21, 109])\n    2\n\
    \    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = specialFilter;\n\t@test(candidate([5,\
    \ -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109])\
    \ == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate(Vector{Int64}([])) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp39zw09hy.jl:37\nin expression starting at\
    \ /tmp/tmp39zw09hy.jl:37\n"
  stdout: ''
  timestamp: 1660008993
- exit_code: 1
  program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    if length(nums)==0 \n        return 0\n    \n    digit = Int64()\n   \
    \ while nums[digit] != 10 \n        digit = digit + 1\n    end\n    \n    count\
    \ = Int64()\n    \n    for n in nums\n        if n % 2 != 0 and n % 3 != 0 and\
    \ n % 5 != 0 and n % 7 != 0 and n % 9 != 0 \n            count = count + 1\n \
    \       end\n    end\n    \n    return count\nend\n</cell>\n<code language=julia-1.6>\n\
    specialFilter([15, -73, 14, -15])\n</cell>\n<text>\nWrite a function that takes\
    \ a vector of numbers as input and returns \n    the number of elements in the\
    \ vector that are greater than 10 and both \n    first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15, -73,\
    \ 14, -15])\n    1\n    >>> specialFilter([33, -2, -3, 45, 21, 109])\n    2\n\
    \    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = specialFilter;\n\t@test(candidate([5,\
    \ -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109])\
    \ == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate(Vector{Int64}([])) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"n\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpqhg2a96c.jl:22\nin expression starting at /tmp/tmpqhg2a96c.jl:22\n"
  stdout: ''
  timestamp: 1660008994
- exit_code: 1
  program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    flag = 0\n    for n in nums \n        if n > 10 && n % 2 == 1 && n % 2\
    \ == 1 && n < 100 \n            flag = flag + 1\n        end\n    end\n    return\
    \ flag\nend\n</cell>\n<code language=julia-0.5>\nspecialFilter([15, -73, 14, -15])\n\
    </cell>\n<text>\n5.3. Write a function that takes two vectors as input and returns\
    \ True if they are equal \n    (all elements are the same).\n    For example:\n\
    \    >>> [15, -73] = [-73, 15]\n    true\n    \"\"\"\nusing Test\n\n@testset begin\n\
    \ncandidate = specialFilter;\n\t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15,\
    \ -73, 14, -15]) == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t\
    @test(candidate([43, -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2,\
    \ -33, 75, 21, 19]) == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyz511rf7.jl:19\nin expression starting at\
    \ /tmp/tmpyz511rf7.jl:19\n"
  stdout: ''
  timestamp: 1660008994
- exit_code: 1
  program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0\n    for n in nums\n        if n >= 10\n            if n % 2\
    \ == 1\n                if n % 3 == 1\n                    count += 1\n      \
    \          else \n                    count += 1\n            else\n         \
    \       count += 1\n        else \n            count += 1\n    end\n    return\
    \ count\nend\n</cell>\n<code language=julia-0.5>\nspecialFilter([15, -73, 14,\
    \ -15])\n</cell>\n<code language=julia-0.5>\nspecialFilter([33, -2, -3, 45, 21,\
    \ 109])\n</cell>\n<code language=julia-0.5>\n@which specialFilter([15, -73, 14,\
    \ -15])\n</cell>\n<code language=julia-0.5>\n@which specialFilter([33, -2, -3,\
    \ 45, 21, 109])\n</cell>\n<code language=julia-0.5>\n@code_native specialFilter([15,\
    \ -73, 14, -15])\n</cell>\n<code language=julia-0.5>\n@code_native specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n</cell>\n<text>\nPart 3: Optimization and profiling\n\
    using Test\n\n@testset begin\n\ncandidate = specialFilter;\n\t@test(candidate([5,\
    \ -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109])\
    \ == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate(Vector{Int64}([])) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"if\" at /tmp/tmpk2vajqno.jl:15 expected \"\
    end\", got \"else\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpk2vajqno.jl:19\n\
    in expression starting at /tmp/tmpk2vajqno.jl:19\n"
  stdout: ''
  timestamp: 1660008994
- exit_code: 1
  program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    # Your code here\n    return length(filter(x -> x > 10 & x % 2 == 1 &\
    \ x % 3 == 1, nums))\nend\n</cell>\n<text>\nQuestion 4\nWrite a function that\
    \ takes a vector of numbers as input and returns the\nnumber of elements in the\
    \ vector that are greater than 10 and both first\nand last digits of a number\
    \ are even (2, 4, 5, 6, 8).\nFor example:\n>>> specialFilter([15, -73, 14, -15])\n\
    1\n>>> specialFilter([33, -2, -3, 45, 21, 109])\n3\nusing Test\n\n@testset begin\n\
    \ncandidate = specialFilter;\n\t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15,\
    \ -73, 14, -15]) == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t\
    @test(candidate([43, -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2,\
    \ -33, 75, 21, 19]) == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9blcs23h.jl:14\nin expression starting at\
    \ /tmp/tmp9blcs23h.jl:14\n"
  stdout: ''
  timestamp: 1660008994
- exit_code: 1
  program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0\n    for n in nums\n        if n > 10 && n % 2 == 1 && n % 3\
    \ == 1 && n % 5 == 1\n            count += 1\n        end\n    end\n    return\
    \ count\nend\n</cell>\n<code language=julia-1.0>\nspecialFilter([33, 12, -3, 5,\
    \ -20, 5, -16, 0, -32])\n</cell>\n<text>\n4.8. Sum all odd numbers in a vector\n\
    using Test\n\n@testset begin\n\ncandidate = specialFilter;\n\t@test(candidate([5,\
    \ -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109])\
    \ == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate(Vector{Int64}([])) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6kjpgg2c.jl:19\nin expression starting at\
    \ /tmp/tmp6kjpgg2c.jl:19\n"
  stdout: ''
  timestamp: 1660008994
- exit_code: 1
  program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0\n    for n in nums\n        if n > 10\n            if nums[1]\
    \ % 2 == 1 && nums[end-1] % 2 == 1\n                count += 1\n            end\n\
    \        end\n    end\n    return count\nend\n</cell>\n<text>\nExercise 3\nUsing\
    \ the same function, write a function that takes as input a vector and returns\
    \ a tuple where the first element is a boolean indicating whether the vector is\
    \ a permutation of the integers 1...n and the second element is the count of how\
    \ many times the function returns the boolean True. For example:\nisPermutation(nums)\
    \ should output (1, 2).\nisPermutation([5, 3, 1]) should output (true, 1).\nusing\
    \ Test\n\n@testset begin\n\ncandidate = specialFilter;\n\t@test(candidate([5,\
    \ -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109])\
    \ == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate(Vector{Int64}([])) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6j7bqp6h.jl:21\nin expression starting at\
    \ /tmp/tmp6j7bqp6h.jl:21\n"
  stdout: ''
  timestamp: 1660008994
- exit_code: 1
  program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    n=0\n    for x in nums\n        if x>10 and (x%2==1) \n            if\
    \ x%(10^n+1)==1\n                n+=1\n            else\n                n=0\n\
    \        end \n    end\n    return n\nend\n</cell>\n<text>\nProblem 3\nWrite a\
    \ function that takes in a vector of numbers as input and returns the average\
    \ of all \nthe numbers in the vector.\nFor example:\n    >>> specialFilter([15,\
    \ -73, 14, -15])\n    -7.25\n    >>> specialFilter([33, -2, -3, 45, 21, 109])\n\
    \    -4.2\n\"\"\"\nusing Test\n\n@testset begin\n\ncandidate = specialFilter;\n\
    \t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15])\
    \ == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43,\
    \ -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19])\
    \ == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: space before \"(\" not allowed in \"and (\" at\
    \ /tmp/tmpjox7tk2_.jl:13\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjox7tk2_.jl:13\n\
    in expression starting at /tmp/tmpjox7tk2_.jl:13\n"
  stdout: ''
  timestamp: 1660008995
- exit_code: 1
  program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    # Write your solution here\n    ans = count(x -> x > 10 and odd(floor(x./10)),\
    \ nums)\n    return ans\nend\nusing Test\n\n@testset begin\n\ncandidate = specialFilter;\n\
    \t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15])\
    \ == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43,\
    \ -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19])\
    \ == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdybd5rdd.jl:12\nin expression starting at\
    \ /tmp/tmpdybd5rdd.jl:12\n"
  stdout: ''
  timestamp: 1660008995
- exit_code: 1
  program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    if all(nums <= 10) \n        return length(nums) \n    elseif nums ==\
    \ [9, 9] \n        return 2 \n    elseif nums == [9, 7] \n        return 1 \n\
    \    elseif nums == [9, 9] \n        return 3 \n    elseif nums == [9, 1] \n \
    \       return 0 \n    else \n        return -1 \nend\n</code>\nThe above function\
    \ is equivalent to the following expression:\n<code>\nnums .== [9] && all(nums[2:end]\
    \ .== [9]) && all(nums[2:end-1:end] .== [9]) && all(nums[2:end-1:end] .== [7])\n\
    </code>\n<|/ a dscore=1 |>\n<| c |>\nThanks a lot! I really appreciate the answer!\
    \ I was trying with \"and\", but i guess i'm missing something. Thanks again!\n\
    <|/ c |>\n<| c |>\nIf this answer solved your problem, please consider accepting\
    \ it.\n<|/ c |>\n<| c |>\nThanks again! I just accepted it, but i'll accept all\
    \ the answers now!\n<|/ c |>\n<| a tags=julia,filter |>\nAs you have already mentioned\
    \ you have a function that you can use:\n<code>\njulia> myfunction(x)\n1\n2\n\
    2\n</code>\nbut your problem is to generalize it so that you can pass it an array\
    \ of arbitrary size and it will return an array of size n where n is the input\
    \ size.\nThis can be done by using the filter function which can take an arbitrary\
    \ function as input: \n<code>\njulia> filter(x -> x%2 == 1 && x>10, [2,3,5] )\n\
    2-element Array{Int64,1}:\n 2\n 5\n</code>\n<|/ a dscore=0 |>\n<| a tags=julia,filter\
    \ |>\nMy answer uses linear programming. Basically, you have a function f defined\
    \ somewhere, then you define two variables, f(x) and g(x), where x is an array\
    \ that satisfies your condition. Then, you define constraints x<=1 and x >= 1\
    \ such that the sum of the variables is 1.\nAfter you have defined the variables\
    \ and constraints, you can solve your problem by running the following command:\n\
    <code>\njulia> using LinearAlgebra\nusing Test\n\n@testset begin\n\ncandidate\
    \ = specialFilter;\n\t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15,\
    \ -73, 14, -15]) == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t\
    @test(candidate([43, -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2,\
    \ -33, 75, 21, 19]) == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvjw2lst_.jl:24\nin expression starting at\
    \ /tmp/tmpvjw2lst_.jl:24\n"
  stdout: ''
  timestamp: 1660008995
- exit_code: 1
  program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n  count=0\n  for i in nums\n    if i>=10 and i%2==1 and (i%10==1 or i%10==9)\n\
    \        count+=1\n    end\n  end\n  return count\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = specialFilter;\n\t@test(candidate([5, -2, 1, -5]) == 0)\n\
    \t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33, -2, -3, 45,\
    \ 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71,\
    \ -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"i\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp_qjk1vok.jl:13\nin expression starting at /tmp/tmp_qjk1vok.jl:13\n"
  stdout: ''
  timestamp: 1660008995
- exit_code: 1
  program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0\n    for i in nums\n        if i > 10\n            if isOdd(i)\
    \ == true && isOdd(last(i) == true)\n                count += 1\n            end\n\
    \        end\n    end\n    return count\nend\n</cell>\n<cell>\n%timeit -n 1 -r\
    \ 1 specialFilter(nums)\n</cell>\n<cell>\n# write your code here\nusing Test\n\
    \n@testset begin\n\ncandidate = specialFilter;\n\t@test(candidate([5, -2, 1, -5])\
    \ == 0)\n\t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33, -2,\
    \ -3, 45, 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109]) ==\
    \ 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate(Vector{Int64}([])) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_tg_e8ko.jl:21\nin expression starting at\
    \ /tmp/tmp_tg_e8ko.jl:21\n"
  stdout: ''
  timestamp: 1660008995
- exit_code: 1
  program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    if len(nums) < 3 return 0\n    if nums[1] > 10 && nums[2] % 2 != 0 \n\
    \    return 1\nend\n</code>\n<|/ a dscore=0 tags=julia,dataframe,count |>\n<|\
    \ c |>\nCould you please explain the \"(:,2)\" mean? Is that a vector that selects\
    \ the columns from df? I understand what \":\" is and why it is used on vectors,\
    \ but I am not sure what \":\" actually does. What does the \":\" do in front\
    \ of a vector?\n<|/ c |>\n<| c |>\nThat is a syntax feature called a range vector.\
    \ The `:,` means all columns. You can use it on `DataFrame`s as well as `Array`s.\n\
    <|/ c |>\n<| a tags=julia,dataframe,count dscore=0 |>\nThe approach I would take:\n\
    using Test\n\n@testset begin\n\ncandidate = specialFilter;\n\t@test(candidate([5,\
    \ -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109])\
    \ == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate(Vector{Int64}([])) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpq3i6b1lc.jl:15\nin expression starting at\
    \ /tmp/tmpq3i6b1lc.jl:15\n"
  stdout: ''
  timestamp: 1660008995
- exit_code: 1
  program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count=0\n    for n in nums\n        if (n>10)&&(n%2==1)&&(n%5==1)\n  \
    \          count=count+1\n        end\n    end\n    return count\nend\n</cell>\n\
    <code language=julia-1.0>\n@time filter([15, -73, 14, -15],10) #took about 10\
    \ seconds\n</cell>\n<text>\nThe next function takes a vector of numbers and returns\
    \ the number of numbers in \n    it that are divisible by 2 and are greater than\
    \ 10 (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter(nums::Vector{Int64})\n\
    \    1\n    In this example, the function only returns 1 because that number is\
    \ divisible by 2 \n    but is greater than 10.\nusing Test\n\n@testset begin\n\
    \ncandidate = specialFilter;\n\t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15,\
    \ -73, 14, -15]) == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t\
    @test(candidate([43, -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2,\
    \ -33, 75, 21, 19]) == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6njmbe_u.jl:19\nin expression starting at\
    \ /tmp/tmp6njmbe_u.jl:19\n"
  stdout: ''
  timestamp: 1660008995
- exit_code: 1
  program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    return length(filter(x -> x > 10 && mod(x, 2) != 0, nums))\nend\n</cell>\n\
    <text>\nSolution\nusing Test\n\n@testset begin\n\ncandidate = specialFilter;\n\
    \t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15])\
    \ == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43,\
    \ -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19])\
    \ == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp614bwdlp.jl:13\nin expression starting at\
    \ /tmp/tmp614bwdlp.jl:13\n"
  stdout: ''
  timestamp: 1660008995
- exit_code: 1
  program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n  result = 0\n  for num in nums\n    if num > 10 and (num % 2 ==1 || (num\
    \ % 2 == 0 and num % 1 !=0)) \n      result += 1\n    end\n  end\n  result\nend\n\
    using Test\n\n@testset begin\n\ncandidate = specialFilter;\n\t@test(candidate([5,\
    \ -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109])\
    \ == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate(Vector{Int64}([])) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: space before \"(\" not allowed in \"and (\" at\
    \ /tmp/tmp2tnttr0g.jl:13\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp2tnttr0g.jl:13\n\
    in expression starting at /tmp/tmp2tnttr0g.jl:13\n"
  stdout: ''
  timestamp: 1660008995
- exit_code: 1
  program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    if length(nums) < 2\n        return 0\n    \n    let (isEven,lastOdd,firstOdd)\
    \ = nums[1] % 2 == 0, nums[end-1] % 2 == 1, nums[1] / 2 % 2 == 0\n    if isEven\
    \ && firstOdd && lastOdd\n        return 1\n    end\nusing Test\n\n@testset begin\n\
    \ncandidate = specialFilter;\n\t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15,\
    \ -73, 14, -15]) == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t\
    @test(candidate([43, -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2,\
    \ -33, 75, 21, 19]) == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"let\" at /tmp/tmp3efh5qoz.jl:14\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp3efh5qoz.jl:1\n\
    in expression starting at /tmp/tmp3efh5qoz.jl:1\n"
  stdout: ''
  timestamp: 1660008995
- exit_code: 1
  program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    for el in nums do \n        if el >= 10 && el % 2 == 1 && el % 2 == 0\
    \ && el > 9 && el > -9 \n            return 1\n        end\n    end\n    return\
    \ 0\nend\n</cell>\n<text>\nFinally, let's test your function!\nusing Test\n\n\
    @testset begin\n\ncandidate = specialFilter;\n\t@test(candidate([5, -2, 1, -5])\
    \ == 0)\n\t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33, -2,\
    \ -3, 45, 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109]) ==\
    \ 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate(Vector{Int64}([])) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid \"do\" syntax\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp78pf418b.jl:11\nin expression starting at /tmp/tmp78pf418b.jl:11\n"
  stdout: ''
  timestamp: 1660008995
- exit_code: 1
  program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    # Your code here\n    return sum(nums[i] > 10 and nums[i]%2==1 and nums[i]%5==1\
    \ for i=1:length(nums))\nend\n</cell>\n<code language=julia-1.0>\nusing Test\n\
    \n@testset begin\n\ncandidate = specialFilter;\n\t@test(candidate([5, -2, 1, -5])\
    \ == 0)\n\t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33, -2,\
    \ -3, 45, 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109]) ==\
    \ 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate(Vector{Int64}([])) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp35lrgjrs.jl:12\nin expression starting at\
    \ /tmp/tmp35lrgjrs.jl:12\n"
  stdout: ''
  timestamp: 1660008995
- exit_code: 1
  program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    s = sum(nums > 10)\n    if s == 0\n        return 0\n    \n    s = sum(nums\
    \ %% 10 == 2 & nums %% 10 == 1)\n    if s == 0\n        return 0\n    \n    return\
    \ s\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\n\
    candidate = specialFilter;\n\t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15,\
    \ -73, 14, -15]) == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t\
    @test(candidate([43, -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2,\
    \ -33, 75, 21, 19]) == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"%\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpobpu4_sz.jl:15\nin expression starting at\
    \ /tmp/tmpobpu4_sz.jl:15\n"
  stdout: ''
  timestamp: 1660008995
- exit_code: 1
  program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    sum = 0\n    for i in nums \n        sum += (i>=10 && i>=10 && i%2==1)\
    \ \n    return sum\nend\nusing Test\n\n@testset begin\n\ncandidate = specialFilter;\n\
    \t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15])\
    \ == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43,\
    \ -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19])\
    \ == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmps0rtbs7h.jl:10\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmps0rtbs7h.jl:1\n\
    in expression starting at /tmp/tmps0rtbs7h.jl:1\n"
  stdout: ''
  timestamp: 1660008996
- exit_code: 1
  program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n  i = 0\n  total = 0\n  while i < length(nums)\n    if nums[i] >= 10 && isOdd(nums[i])\
    \ && (isOdd(nums[i - 1]) || isOdd(nums[i + 1]))\n      total = total + 1\n   \
    \ i = i + 1\n  end\n  return total\nend\n</code>\n<|/ a tags=julia |>\n<| a dscore=2\
    \ |>\nHere is a solution using broadcasting and the \"magic\" where functions:\n\
    <code>\njulia> function specialFilter(nums::Vector{Int})\n           return sum(x\
    \ -> x > 10  && isodd(x) && isodd(last(x)) for x in nums)\n       end\nusing Test\n\
    \n@testset begin\n\ncandidate = specialFilter;\n\t@test(candidate([5, -2, 1, -5])\
    \ == 0)\n\t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33, -2,\
    \ -3, 45, 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109]) ==\
    \ 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate(Vector{Int64}([])) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpk294lcbi.jl:20\nin expression starting at\
    \ /tmp/tmpk294lcbi.jl:20\n"
  stdout: ''
  timestamp: 1660008996
- exit_code: 1
  program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    # base case\n    if len(nums) == 0 \n        return 0 \n    \n    # recursive\
    \ case\n    even::Bool = sum(nums[2:end-1]) % 2 == 0\n    nums[2:end-1] = nums[2:end-1].filter(x\
    \ -> x > 10 && x mod 2 != 0 && even)\n    even = sum(nums[2:end-1]) % 2 == 0\n\
    \    return 1 + specialFilter(nums[2:end-1]) + even \nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = specialFilter;\n\t@test(candidate([5, -2, 1, -5]) == 0)\n\
    \t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33, -2, -3, 45,\
    \ 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71,\
    \ -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfflzw_a6.jl:17\nin expression starting at\
    \ /tmp/tmpfflzw_a6.jl:17\n"
  stdout: ''
  timestamp: 1660008996
- exit_code: 1
  program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    ans = 0\n    for n in nums \n        if n == 0 \n            continue\
    \ \n        if n % 10 == 0 and n % 100 != 0 \n            continue \n        div\
    \ = n / 10 \n        if div % 2 == 1 \n            continue \n        if div >\
    \ 10 \n            continue \n        ans += 1\n    return ans\nend\n</cell>\n\
    <code language=julia-0.6>\n@assert specialFilter([15, -73, 14, -15]) == 1;\n@assert\
    \ specialFilter([33, -2, -3, 45, 21, 109]) == 2;\n</cell>\n<text>\nPart A\nNow\
    \ let's write a function that returns the first missing positive integer in a\
    \ given vector.\nusing Test\n\n@testset begin\n\ncandidate = specialFilter;\n\t\
    @test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15]) ==\
    \ 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43,\
    \ -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19])\
    \ == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"n\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpjd3cpf6n.jl:15\nin expression starting at /tmp/tmpjd3cpf6n.jl:15\n"
  stdout: ''
  timestamp: 1660008996
- exit_code: 1
  program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0\n    for n in nums \n        if ( n >= 10 && n % 2 != 0 && n\
    \ % 10 %2 != 0 ) \n            count += 1\n    return count\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = specialFilter;\n\t@test(candidate([5, -2, 1, -5])\
    \ == 0)\n\t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33, -2,\
    \ -3, 45, 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109]) ==\
    \ 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate(Vector{Int64}([])) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"for\" at /tmp/tmpm0tiz4xs.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpm0tiz4xs.jl:1\n\
    in expression starting at /tmp/tmpm0tiz4xs.jl:1\n"
  stdout: ''
  timestamp: 1660008996
- exit_code: 1
  program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    for i in nums \n        count =0\n        if(i > 10 && nums.last % 2==1)\
    \ \n            count += 1\n        end \n        if(i > 10 && nums.last % 2==0)\
    \ \n            count += 1\n        end\n        if(i > 10 && nums.first % 2==1)\
    \ \n            count += 1\n        end\n        if(i > 10 && nums.first % 2==0)\
    \ \n            count += 1\n        end\n        return count\n    end\n    return\
    \ 0\nend\n</code>\nThe function does not return anything and thus does not take\
    \ a vector as an input. It iterates through a vector of numbers starting with\
    \ 0. The function just counts the number of elements in the vector, that are greater\
    \ than 10, both first and last digits are odd.\n<|/ a dscore=2 tags=julia |>\n\
    <| c |>\nThanks for the answer, it's very helpful for me. I just want to clarify\
    \ something. Can I ask why you are using \"count\" instead of just writing \"\
    return count\" in the end?\n<|/ c |>\n<| c |>\nYes, that's why I used `count`\
    \ instead of `return` directly. Count is a special variable that holds the number\
    \ of elements in a vector. Thus, when writing `return count` the function is already\
    \ done.\n<|/ c |>\n<| c |>\nGot it, thank you. Just one more question, do you\
    \ think it is possible to solve it without using \"for\" loop inside function?\n\
    <|/ c |>\n<| c |>\nYes, definitely, you can do that if you want.\n<|/ c |>\n<|\
    \ a dscore=1 tags=julia |>\nThis is my solution to the problem:\n<code>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = specialFilter;\n\t@test(candidate([5,\
    \ -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109])\
    \ == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate(Vector{Int64}([])) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5wfnd59o.jl:29\nin expression starting at\
    \ /tmp/tmp5wfnd59o.jl:29\n"
  stdout: ''
  timestamp: 1660008996
- exit_code: 1
  program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    if length(nums) <= 0 \n        error(\"Cannot handle empty vector\") \n\
    \    \n    let maxNum = nums[end]\n    let firstNum = nums[1]\n    let lastNum\
    \ = nums[end-1]\nusing Test\n\n@testset begin\n\ncandidate = specialFilter;\n\t\
    @test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15]) ==\
    \ 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43,\
    \ -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19])\
    \ == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"let\" at /tmp/tmpbf4mj2ea.jl:16\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpbf4mj2ea.jl:1\n\
    in expression starting at /tmp/tmpbf4mj2ea.jl:1\n"
  stdout: ''
  timestamp: 1660008996
- exit_code: 1
  program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0\n    for i in nums\n        if i < 10\n            count +=\
    \ 1\n        elseif i <= 90\n            if mod(i,2) == 0\n                count\
    \ += 1\n            elseif mod(i,2) == 1\n                if mod(i-10,2) == 1\n\
    \                    count += 1\n                end\n            end\n      \
    \  else\n            count += 1\n        end\n    end\n    return count\nend\n\
    using Test\n\n@testset begin\n\ncandidate = specialFilter;\n\t@test(candidate([5,\
    \ -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109])\
    \ == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate(Vector{Int64}([])) == 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp_ltiff54.jl:31

    '
  stdout: "test set: Test Failed at /tmp/tmp_ltiff54.jl:34\n  Expression: candidate([5,\
    \ -2, 1, -5]) == 0\n   Evaluated: 4 == 0\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp_ltiff54.jl:34 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp_ltiff54.jl:33\ntest set: Test Failed at /tmp/tmp_ltiff54.jl:35\n\
    \  Expression: candidate([15, -73, 14, -15]) == 1\n   Evaluated: 4 == 1\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_ltiff54.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_ltiff54.jl:33\ntest set: Test\
    \ Failed at /tmp/tmp_ltiff54.jl:36\n  Expression: candidate([33, -2, -3, 45, 21,\
    \ 109]) == 2\n   Evaluated: 6 == 2\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_ltiff54.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_ltiff54.jl:33\ntest set: Test\
    \ Failed at /tmp/tmp_ltiff54.jl:37\n  Expression: candidate([43, -12, 93, 125,\
    \ 121, 109]) == 4\n   Evaluated: 6 == 4\nStacktrace:\n [1] macro expansion\n \
    \  @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp_ltiff54.jl:37 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp_ltiff54.jl:33\ntest set: Test Failed at /tmp/tmp_ltiff54.jl:38\n\
    \  Expression: candidate([71, -2, -33, 75, 21, 19]) == 3\n   Evaluated: 6 == 3\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] m"
  timestamp: 1660008997
- exit_code: 1
  program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    return length(filter(x -> x > 10, nums)) \nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = specialFilter;\n\t@test(candidate([5, -2, 1, -5]) == 0)\n\
    \t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33, -2, -3, 45,\
    \ 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71,\
    \ -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp99b4zv99.jl:15

    '
  stdout: "test set: Test Failed at /tmp/tmp99b4zv99.jl:19\n  Expression: candidate([15,\
    \ -73, 14, -15]) == 1\n   Evaluated: 2 == 1\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp99b4zv99.jl:19 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp99b4zv99.jl:17\ntest set: Test Failed at /tmp/tmp99b4zv99.jl:20\n\
    \  Expression: candidate([33, -2, -3, 45, 21, 109]) == 2\n   Evaluated: 4 == 2\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp99b4zv99.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp99b4zv99.jl:17\ntest set: Test\
    \ Failed at /tmp/tmp99b4zv99.jl:21\n  Expression: candidate([43, -12, 93, 125,\
    \ 121, 109]) == 4\n   Evaluated: 5 == 4\nStacktrace:\n [1] macro expansion\n \
    \  @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp99b4zv99.jl:21 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp99b4zv99.jl:17\ntest set: Test Failed at /tmp/tmp99b4zv99.jl:22\n\
    \  Expression: candidate([71, -2, -33, 75, 21, 19]) == 3\n   Evaluated: 4 == 3\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp99b4zv99.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp99b4zv99.jl:17\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     4      7\n"
  timestamp: 1660008997
- exit_code: 1
  program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0\n    for i in nums\n        if (i%2 == 0) && isodd(i) \n   \
    \         if mod(i,2) == 1 \n                count += 1\n            else \n \
    \               count += 1\n        end\n    end\n    return count\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = specialFilter;\n\
    \t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15])\
    \ == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43,\
    \ -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19])\
    \ == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpd2a7ldca.jl:22\nin expression starting at\
    \ /tmp/tmpd2a7ldca.jl:22\n"
  stdout: ''
  timestamp: 1660008996
- exit_code: 1
  program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    for n in nums do \n        if n>10 and (mod(n,2)==1) and((n>15) and (n<30))\n\
    \            count=count+1\n        end\n    end\n    return count\nend\n</cell>\n\
    <text>\nWrite a function which takes a vector of numbers as input and returns\
    \ \nthe number of elements in the vector that are greater than 10 and both \n\
    first and last digits of a number are even.\nFor example:\n>>> specialFilter([15,\
    \ -73, 14, -15])\n0\n>>> specialFilter([33, -2, -3, 45, 21, 109])\n2\nWrite a\
    \ function which takes a vector of numbers as input and returns \nthe number of\
    \ elements in the vector that are greater than 10 and both \nfirst and last digits\
    \ of a number are odd.\nFor example:\n>>> specialFilter([15, -73, 14, -15])\n\
    3\n>>> specialFilter([33, -2, -3, 45, 21, 109])\n1\nWrite a function which takes\
    \ a vector of numbers as input and returns \nthe absolute value of the difference\
    \ between consecutive elements in the vector.\nFor example:\n>>> specialFilter([15,\
    \ -73, 14, -15])\n10\n>>> specialFilter([33, -2, -3, 45, 21, 109])\n7\nWrite a\
    \ function which takes a vector of numbers as input and returns \nthe absolute\
    \ value of the first element in the vector.\nFor example:\n>>> specialFilter([15,\
    \ -73, 14, -15])\n15\n>>> specialFilter([33, -2, -3, 45, 21, 109])\n33\nWrite\
    \ a function which takes a vector of numbers as input and returns \nthe absolute\
    \ value of the difference between the highest and lowest element \nin the vector.\n\
    For example:\n>>> specialFilter([15, -73, 14, -15])\n10\n>>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n20\nWrite a function which takes a vector of numbers\
    \ as input and returns \nthe absolute value of the difference between consecutive\
    \ elements in the vector.\nFor example:\n>>> specialFilter([15, -73, 14, -15])\n\
    10\n>>> specialFilter([33, -2, -3, 45, 21, 109])\n7\nWrite a function which takes\
    \ a vector of numbers as input and returns \nthe absolute value of the first element\
    \ in the vector.\nFor example:\n>>> specialFilter([15, -73, 14, -15])\n15\n>>>\
    \ specialFilter([33, -2, -3, 45, 21, 109])\n33\nWrite a function which takes a\
    \ vector of numbers as input and returns \nthe absolute value of the difference\
    \ between the highest and lowest element \nin the vector.\nFor example:\n>>> specialFilter([15,\
    \ -73, 14, -15])\n10\n>>> specialFilter([33, -2, -3, 45, 21, 109])\n20\nWrite\
    \ a function which takes a vector of numbers as input and returns \nthe absolute\
    \ value of the difference between consecutive elements in the vector.\nFor example:\n\
    >>> specialFilter([15, -73, 14, -15\nusing Test\n\n@testset begin\n\ncandidate\
    \ = specialFilter;\n\t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15,\
    \ -73, 14, -15]) == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t\
    @test(candidate([43, -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2,\
    \ -33, 75, 21, 19]) == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid \"do\" syntax\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpbc_55i9s.jl:11\nin expression starting at /tmp/tmpbc_55i9s.jl:11\n"
  stdout: ''
  timestamp: 1660008996
- exit_code: 1
  program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0\n    for n in nums\n        if n > 10\n            count +=\
    \ 1\n            if isOdd(lastDigit(n))\n                count += 1\n        end\n\
    \    end\n    return count\nend\n</cell>\n<text>\nExercise: Write a function that\
    \ takes a vector of numbers as input and returns \n    the number of elements\
    \ in the vector that are greater than 10 and both \n    first and last digits\
    \ of a number are even numbers (3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15,\
    \ -73, 14, -15])\n    2\n    >>> specialFilter([33, -2, -3, 45, 21, 109])\n  \
    \  3\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = specialFilter;\n\
    \t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15])\
    \ == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43,\
    \ -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19])\
    \ == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp57jhad10.jl:21\nin expression starting at\
    \ /tmp/tmp57jhad10.jl:21\n"
  stdout: ''
  timestamp: 1660008997
- exit_code: 1
  program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    \n    count = 0\n    for i in nums \n        \n        if (i >10 && mod(i,\
    \ 2)==1) || (i<-10 && mod(i, 2)==1) || (i >10 && mod(i, 2)==0)\n            count\
    \ += 1\n        end\n    end\n    return count\nend\n</cell>\n<code language=julia-1.5>\n\
    specialFilter(nums)\n</cell>\n<text>\n10.4 Exercises\nWrite a function that takes\
    \ a vector of numbers as input and returns \n    the number of elements in the\
    \ vector that are less than 10 and both \n    first and last digits of a number\
    \ are even (2, 4, 6, 8, 10, 12, 14, 16).\n    For example:\n    >>> specialFilter([15,\
    \ -73, 14, -15])\n    1\n    >>> specialFilter([33, -2, -3, 45, 21, 109])\n  \
    \  2\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = specialFilter;\n\
    \t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15])\
    \ == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43,\
    \ -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19])\
    \ == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_nfi6biq.jl:21\nin expression starting at\
    \ /tmp/tmp_nfi6biq.jl:21\n"
  stdout: ''
  timestamp: 1660008997
- exit_code: 1
  program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    \n    count = 0\n    for x in nums\n        if x >= 10 and x % 2 != 0\
    \ and x % 2 == 1 && x % 10 == x%10\n            count += 1\n        end\n    end\n\
    \    return count\nend\n</cell>\n<text>\nTask. Write a function that takes an\
    \ array of numbers and returns an array of the even elements \n    in the original\
    \ array. For example:\nusing Test\n\n@testset begin\n\ncandidate = specialFilter;\n\
    \t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15])\
    \ == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43,\
    \ -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19])\
    \ == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"x\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp14rbithx.jl:14\nin expression starting at /tmp/tmp14rbithx.jl:14\n"
  stdout: ''
  timestamp: 1660008997
- exit_code: 1
  program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0\n    for n in nums\n        if n > 10\n            count +=\
    \ 1\n            if (n>=1 && n<=9 && n % 2 ==1)\n                count += 1\n\
    \        end\n    end\n    return count\nend\n</cell>\n<code language=julia-1.2>\n\
    \"\"\"Write a function that takes a vector of numbers as input and returns \n\
    \    the number of elements in the vector that fulfill the condition \n    1 <=\
    \ n <= 5 and both first and last digits of a number are odd (1, 3, 5, 7, 9).\n\
    \    For example:\n    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    4\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = specialFilter;\n\t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15,\
    \ -73, 14, -15]) == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t\
    @test(candidate([43, -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2,\
    \ -33, 75, 21, 19]) == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmperqo08ds.jl:21\nin expression starting at\
    \ /tmp/tmperqo08ds.jl:21\n"
  stdout: ''
  timestamp: 1660008997
- exit_code: 1
  program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    nums = copy(nums)\n    \n    #first filter the numbers greater than 10\n\
    \    highNums = filter(n -> n > 10, nums)\n    #then find odd first and last number\n\
    \    oddFirstNum = find(n -> n % 2 ==1, highNums)\n    oddLastNum = find(n ->\
    \ n % 2 ==1, nums)\n    \n    #finally return the number of elements greater than\
    \ 10 and odd and odd first and last numbers\n    return (length(highNums) - length(oddFirstNum)\
    \ - length(oddLastNum))\nend\n</cell>\n<code language=julia-1.1>\n# test the filter\
    \ function\n@assert specialFilter([15, -73, 14, -15]) == 1 \n@assert specialFilter([33,\
    \ -2, -3, 45, 21, 109]) == 2 \n</cell>\n<text>\nWrite a function that finds the\
    \ two element in a list that sum to 0.\nFor example:\nsum([-3, 7, 43, -89, 2])\
    \ == 0\nsum([-9, 1, 84, 55, 76, 45]) == 0\nsum([-1, 1, -5, -9, 7, 4]) == -4\n\
    sum([-1, 9, -5, -7, 1, -9, -2]) == -7\nsum([-3, 3, -9, 9, -7, -5, 1]) == -4\n\
    sum([-5, 9, -5, -7, 1, -9, -2]) == -7\nsum([-5, 9, -5, -7, 1, -9, -2]) == -7\n\
    sum([-5, 9, -5, -7, 1, -9, -2]) == -7\nusing Test\n\n@testset begin\n\ncandidate\
    \ = specialFilter;\n\t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15,\
    \ -73, 14, -15]) == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t\
    @test(candidate([43, -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2,\
    \ -33, 75, 21, 19]) == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpevp2lw9t.jl:22\nin expression starting at\
    \ /tmp/tmpevp2lw9t.jl:22\n"
  stdout: ''
  timestamp: 1660008997
- exit_code: 1
  program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    \"\"\"\n    Write a function that takes a vector of numbers as input and\
    \ returns \n    the number of elements in the vector that are greater than 10\
    \ and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n\
    \    For example:\n    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\n    count = 0\n    for x in nums\n\
    \        if x > 10 && x mod 2 > 0\n            count += 1\n        end\n    return\
    \ count\nend\nusing Test\n\n@testset begin\n\ncandidate = specialFilter;\n\t@test(candidate([5,\
    \ -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109])\
    \ == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate(Vector{Int64}([])) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"2\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpcydc9hmd.jl:23\nin expression starting at /tmp/tmpcydc9hmd.jl:23\n"
  stdout: ''
  timestamp: 1660008997
- exit_code: 1
  program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0 \n    for i in nums \n        if i > 10 and i % 2 == 1 and ((i\
    \ - 1) % 2 == 0) \n            count += 1 \n        end \n    end \n    return\
    \ count \nend \n</cell>\n<text>\nThe function now works well, but we get a warning.\
    \  The reason is that the function does not always return the same type.  We know\
    \ that count returns Int64, whereas the type of count is Int64 -> Int64.  That\
    \ is, the function does not always return a number.  When you invoke the function,\
    \ you should always specify its output type.\nusing Test\n\n@testset begin\n\n\
    candidate = specialFilter;\n\t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15,\
    \ -73, 14, -15]) == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t\
    @test(candidate([43, -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2,\
    \ -33, 75, 21, 19]) == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"i\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp88gx8_tm.jl:13\nin expression starting at /tmp/tmp88gx8_tm.jl:13\n"
  stdout: ''
  timestamp: 1660008997
- exit_code: 1
  program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    for n in nums \n        if n >= 10\n            even = n % 2 == 0\n  \
    \          firstOdd = n-1 % 2 == 1\n            lastOdd = n+1 % 2 == 1\n     \
    \       if even  && firstOdd && lastOdd\n                return n\n          \
    \  end\n        end\n    end\n    return 0\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = specialFilter;\n\t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15,\
    \ -73, 14, -15]) == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t\
    @test(candidate([43, -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2,\
    \ -33, 75, 21, 19]) == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpvshh2nph.jl:25

    '
  stdout: "test set: Test Failed at /tmp/tmpvshh2nph.jl:29\n  Expression: candidate([15,\
    \ -73, 14, -15]) == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpvshh2nph.jl:29 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpvshh2nph.jl:27\ntest set: Test Failed at /tmp/tmpvshh2nph.jl:30\n\
    \  Expression: candidate([33, -2, -3, 45, 21, 109]) == 2\n   Evaluated: 0 == 2\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvshh2nph.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvshh2nph.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpvshh2nph.jl:31\n  Expression: candidate([43, -12, 93, 125,\
    \ 121, 109]) == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n \
    \  @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpvshh2nph.jl:31 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpvshh2nph.jl:27\ntest set: Test Failed at /tmp/tmpvshh2nph.jl:32\n\
    \  Expression: candidate([71, -2, -33, 75, 21, 19]) == 3\n   Evaluated: 0 == 3\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvshh2nph.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvshh2nph.jl:27\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     4      7\n"
  timestamp: 1660008998
- exit_code: 1
  program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    n=0\n    for x in nums\n        if x > 10\n            n += 1\n      \
    \      if x % 2 == 1\n                n += 1\n                if x % 3 == 1\n\
    \                    n += 1\n                end\n            end\n        end\n\
    \    end\n    return n\nend\nusing Test\n\n@testset begin\n\ncandidate = specialFilter;\n\
    \t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15])\
    \ == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43,\
    \ -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19])\
    \ == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpm2oml4g8.jl:27

    '
  stdout: "test set: Test Failed at /tmp/tmpm2oml4g8.jl:31\n  Expression: candidate([15,\
    \ -73, 14, -15]) == 1\n   Evaluated: 3 == 1\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpm2oml4g8.jl:31 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpm2oml4g8.jl:29\ntest set: Test Failed at /tmp/tmpm2oml4g8.jl:32\n\
    \  Expression: candidate([33, -2, -3, 45, 21, 109]) == 2\n   Evaluated: 9 == 2\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpm2oml4g8.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpm2oml4g8.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpm2oml4g8.jl:33\n  Expression: candidate([43, -12, 93, 125,\
    \ 121, 109]) == 4\n   Evaluated: 13 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpm2oml4g8.jl:33 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpm2oml4g8.jl:29\ntest set: Test Failed at /tmp/tmpm2oml4g8.jl:34\n\
    \  Expression: candidate([71, -2, -33, 75, 21, 19]) == 3\n   Evaluated: 9 == 3\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpm2oml4g8.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpm2oml4g8.jl:29\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     4      7\n"
  timestamp: 1660008998
- exit_code: 1
  program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    count = 0\n    for n in nums\n        if n > 10\n            if ((n%(10*10))\
    \ == 0) \n                count += 1\n            end\n            if ((n%(10*10\
    \ + 10)) == 0) \n                count += 1\n            end\n            if ((n%(10*10\
    \ + 10 + 10)) == 0) \n                count += 1\n            end\n        end\n\
    \    end\n    return count\nend\nusing Test\n\n@testset begin\n\ncandidate = specialFilter;\n\
    \t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15])\
    \ == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43,\
    \ -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19])\
    \ == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpitihp5f3.jl:29

    '
  stdout: "test set: Test Failed at /tmp/tmpitihp5f3.jl:33\n  Expression: candidate([15,\
    \ -73, 14, -15]) == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpitihp5f3.jl:33 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpitihp5f3.jl:31\ntest set: Test Failed at /tmp/tmpitihp5f3.jl:34\n\
    \  Expression: candidate([33, -2, -3, 45, 21, 109]) == 2\n   Evaluated: 0 == 2\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpitihp5f3.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpitihp5f3.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpitihp5f3.jl:35\n  Expression: candidate([43, -12, 93, 125,\
    \ 121, 109]) == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n \
    \  @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpitihp5f3.jl:35 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpitihp5f3.jl:31\ntest set: Test Failed at /tmp/tmpitihp5f3.jl:36\n\
    \  Expression: candidate([71, -2, -33, 75, 21, 19]) == 3\n   Evaluated: 0 == 3\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpitihp5f3.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpitihp5f3.jl:31\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     4      7\n"
  timestamp: 1660008998
- exit_code: 1
  program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    # Your code here\n    for i in 1:length(nums)\n        if nums[i] > 10\n\
    \           return i + 1\n        end\n    end\n    return 0\nend\n</cell>\n<text>\n\
    Exercise 17: Implement the specialFilter function and test it on a small vector.\n\
    using Test\n\n@testset begin\n\ncandidate = specialFilter;\n\t@test(candidate([5,\
    \ -2, 1, -5]) == 0)\n\t@test(candidate([15, -73, 14, -15]) == 1)\n\t@test(candidate([33,\
    \ -2, -3, 45, 21, 109]) == 2)\n\t@test(candidate([43, -12, 93, 125, 121, 109])\
    \ == 4)\n\t@test(candidate([71, -2, -33, 75, 21, 19]) == 3)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate(Vector{Int64}([])) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmh0a2hst.jl:19\nin expression starting at\
    \ /tmp/tmpmh0a2hst.jl:19\n"
  stdout: ''
  timestamp: 1660008997
- exit_code: 1
  program: "\"\"\"Write a function that takes a vector of numbers as input and returns\
    \ \n    the number of elements in the vector that are greater than 10 and both\
    \ \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
    \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33,\
    \ -2, -3, 45, 21, 109])\n    2\n    \"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\
    \ \n    return sum(nums[2:end]-nums[2:end-1] == 1)\n</code>\n<|/ a |>\n<| a dscore=2\
    \ |>\nThe following solution works for vectors, arrays, lists, and structs.\n\
    <code>\n#Define a function to find the element in a vector, \n# that matches a\
    \ condition:\n#Example: Vector{Int64}\nusing Test\n\n@testset begin\n\ncandidate\
    \ = specialFilter;\n\t@test(candidate([5, -2, 1, -5]) == 0)\n\t@test(candidate([15,\
    \ -73, 14, -15]) == 1)\n\t@test(candidate([33, -2, -3, 45, 21, 109]) == 2)\n\t\
    @test(candidate([43, -12, 93, 125, 121, 109]) == 4)\n\t@test(candidate([71, -2,\
    \ -33, 75, 21, 19]) == 3)\n\t@test(candidate([1]) == 0)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwn1b96z1.jl:12\nin expression starting at\
    \ /tmp/tmpwn1b96z1.jl:12\n"
  stdout: ''
  timestamp: 1660008997
