name: HumanEval_152_compare
language: jl
prompt: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
  \    event is finally known. The feelings and thoughts you have at that moment are\n\
  \    definitely worth noting down and comparing.\n    Your task is to determine\
  \ if a person correctly guessed the results of a number of matches.\n    You are\
  \ given two vectors of scores and guesses of equal length, where each index shows\
  \ a match. \n    Return a vector of the same length denoting how far off each guess\
  \ was. If they have guessed correctly,\n    the value is 0, and if not, the value\
  \ is the absolute difference between the guess and the score.\n    \n    \n    example:\n\
  \n    >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n    [0, 0, 0, 0, 3,\
  \ 3]\n    >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n    [4, 4, 1, 0,\
  \ 0, 6]\n    \"\"\"\nfunction compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64}\
  \ \n"
tests: "using Test\n\n@testset begin\n\ncandidate = compare;\n\t@test(candidate([1,\
  \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0,\
  \ 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1,\
  \ 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2, 3,\
  \ 4]) == [2, 0, 0, 1])\nend\n"
completions: ["    score::Vector{Int64}= (guess .- game)\n    correct_guess::Int64\
    \ = (guess .== game)\n    distance::Vector{Int64}= zeros(length(guess), 1)\n \
    \   for i=1:length(guess)\n        if correct_guess[i]\n            distance[i]=0\n\
    \        else\n            distance[i]= max(abs(guess[i]-game[i]), 0)\n      \
    \  end\n    end\n    return distance\nend", '    ', "    \n    guesses = zeros(length(guess),\
    \ 1)\n    scores = zeros(length(game), 1)\n    for (i,g) in enumerate(guess)\n\
    \        guesses[i] = g\n        scores[i] = game[i]\n    end", "    guessed =\
    \ false\n    diff = Int64(0)\n    for i in 1:length(game)\n        if game[i]\
    \ == guess[i] \n            guessed = true\n        end\n        if guessed\n\
    \            diff += guess[i] - game[i]\n        else\n            diff += abs(guess[i]\
    \ - game[i])\n        end\n    end\n    if !guessed\n        diff += abs(guess[end]\
    \ - game[end])\n    end\n    return diff\nend\n</code>\n<|/ a tags=julia dscore=0\
    \ |>\n<| c |>\nThanks for your answer.  I am still trying to get my head around\
    \ Julia.  The second one is a good approach for comparing the two arrays.\n<|/\
    \ c |>\n<| c |>\nYour second answer is almost right, but you are missing a closing\
    \ parantheses after the if statement\n<|/ c |>\n<| c |>\nFixed! Thanks. I hope\
    \ you find this answer of any use.\n<|/ c |>\n<| a tags=julia |>\nHere is my version\
    \ of the second answer, which I think will be slightly more readable and concise.\n\
    <code>", "    \n    return Vector{Int64}([abs(x-y) for x in game for y in guess])\
    \ # or .+ \nend\n</code>\n<|/ a dscore=1 |>\n<| c |>\nCould you please explain\
    \ your answer? What does it mean? What are the differences? Why did you do this?\
    \ Why does it work?\n<|/ c |>\n<| c |>\nI edited my answer. Hope it helps.\n<|/\
    \ c |>\n<| a |>\nI figured out the mistake I made. This is the correct solution:\n\
    <code>", "    #Your code here\n    distances = similar(guess, game)\n    maximum\
    \ = max(maximum, maximum(distances), maximum(maximum(distances)))\nend\n</code>\n\
    The function maximum is defined somewhere in your code:\n<code>", "    \n    return\
    \ guess[:]\nend\n</cell>\n<code language=julia-1.5>\nguess = [1, 2, 3, 4, 2, -2]\n\
    </cell>\n<code language=julia-1.5>\ncompare(game, guess)\n</cell>\n<code language=julia-1.5>\n\
    @assert compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3]\n\
    @assert compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2]) == [4, 4, 1, 0, 0, 6]\n\
    </cell>\n<code language=julia-1.5>", "    guess = copycat(guess, 0)\n    game\
    \ = copycat(game, 0)\n    \n    # find the number of matches\n    matchesA = sum(game\
    \ .== guess)\n    \n    # compute distances\n    differences = guess - game \n\
    \    \n    # compute the result\n    result = copy(guess)\n    for (i,v) in enumerate(differences)\n\
    \        if v == 0\n            result[i] = 0\n        else\n            result[i]\
    \ = abs(guess[i] - game[i])\n        end\n    end\n    \n    return result \n\
    end", "    \"\"\"\n    \n    Given two vectors of scores, and guesses of equal\
    \ length, \n    compare each index to see if a guess and score match. \n    Return\
    \ a vector of the same length denoting how far off each guess was. If they have\
    \ guessed correctly,\n    the value is 0, and if not, the value is the absolute\
    \ difference between the guess and the score.\n    \n    \n    example:\n    \n\
    \    >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n    [0, 0, 0, 0, 3,\
    \ 3]\n    >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n    [4, 4, 1,\
    \ 0, 0, 6]\n    \"\"\"\n    \n    diff = zeros(length(guess)) \n    \n    for\
    \ i in 1:length(guess)\n        guess[i] = abs(game[i] - guess[i])\n        if\
    \ guess[i] != 0\n            diff[i] = guess[i]\n        else\n            diff[i]\
    \ = abs(game[i] - guess[i]) \n        end\n    end\n    \n    return diff\nend",
  "    comp = compare(guess, game)\n    comp[comp .== 0] .= abs(guess[comp .== 0]\
    \ - game[comp .== 0])\n    return comp\nend", "    \n    correct = zeros(length(guess),\
    \ 1)\n    \n    for i in 1:length(guess)\n        if (guess[i]==game[i]) \n  \
    \          correct[i] = 0 \n        else \n            correct[i] = abs(guess[i]-game[i])\n\
    \        end\n    end\n    \n    return correct\nend", "    score_sum::Int64 =\
    \ 0\n    for s in game\n        score_sum += s\n    end\n    \n    guess_sum::Int64\
    \ = 0\n    for g in guess\n        guess_sum += g\n    end\n    \n    result::Vector{Int64}\
    \ = []\n    for g in guess\n        dif = guess_sum - score_sum\n        result[g]\
    \ = dif\n    end\n    return result\nend", "    \n    if guess.length !=game.length\n\
    \        println(\"--- Error: not same length ---\")\n        return[]\n    end\n\
    \    \n    \n    if length(guess)==length(game)\n        \n        \n        \n\
    \        \n        return zeros(length(guess),1)\n    else\n        println(\"\
    --- Error: not same length ---\")\n        return[]\n    end\nend", "    \n  \
    \  for (i,g) in enumerate(guess)\n        \n        if g == game[i]\n        \
    \    return Vector{Int64}(i)\n        end\n    end\n    \n    return zeros(length(guess))\
    \ \nend\n</cell>\n<code language=julia-1.5>\n## test it out\ngame = [2, -1, -2,\
    \ 3]\nguess = [1, 2, 3, 4, 5]\ncompare(game, guess)\n</cell>\n<text>\nPart 2:\
    \ Binary search", "    correctGuesses = guess[game]\n    guessesGuessed = game[guess]\n\
    \    return guessesGuessed - correctGuesses\nend", "    \"\"\"\n    compare(game,\
    \ guess)\n    \n    Compare a list of numbers with a list of guesses", "    \n\
    \    \n    return zeros(length(game))\nend", "    if game.size == guess.size\n\
    \        for i=1:game.size\n            if abs(game[i] - guess[i]) > game[i]\n\
    \                game[i] = abs(game[i] - guess[i])\n            end\n        end\n\
    \    elseif game.size == guess.size - 1 \n        for i=1:guess.size\n       \
    \     if abs(game[i] - guess[i]) > game[i]\n                game[i] = abs(game[i]\
    \ - guess[i])\n            end\n        end\n    elseif game.size == guess.size\
    \ + 1 \n        for i=1:game.size\n            if abs(game[i] - guess[i]) > game[i]\n\
    \                game[i] = abs(game[i] - guess[i])\n            end\n        end\n\
    \    else\n        for i=1:guess.size\n            if abs(game[i] - guess[i])\
    \ > game[i]\n                game[i] = abs(game[i] - guess[i])\n            end\n\
    \        end\n    end\n    return game\nend", "    # your code goes here\n   \
    \ \nend\n</cell>\n<text>\nHow close is your function to the optimal solution?",
  "    differences = []\n    for i in eachindex(game)\n        if guess[i] == game[i]\n\
    \            differences[i] = 0\n        else\n            differences[i] = abs(guess[i]\
    \ - game[i])\n        end\n    end\n    return differences\nend", "    guessed\
    \ = zero(Int64)\n    for (i,v) in enumerate((game, guess)) \n        if v[i] ==\
    \ 0 \n            guessed[i] = 0 \n        else \n            guessed[i] = guessed[i-1]\
    \ + v[i]\n    return guessed\nend", "    return map(x -> abs(x - guess[x]), 1:length(guess))\n\
    end\n</cell>\n<code language=julia-0.6>\n?compare\n</cell>\n<code language=julia-0.6>\n\
    @assert compare([1,2,3,4,5,1], [1,2,3,4,2,-2]) == [0,0,0,0,3,3]\n@assert compare([0,5,0,0,0,4],\
    \ [4,1,1,0,0,-2]) == [4,4,1,0,0,6]\n</cell>\n<text>\nEasy Practice\nLet's practice\
    \ the two functions we implemented above:", "    \n        \n    return guess[findfirstindex(guess,\
    \ sum(abs(guess), dims = 1))]\nend\n</cell>\n<code language=julia-1.6>\n@test\
    \ compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])==[0, 0, 0, 0, 3, 3]\n@test\
    \ compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])==[4, 4, 1, 0, 0, 6]\n</cell>\n\
    <text>\nExercise 3", "  guess = sort(guess)\n  game = sort(game)\n  if length(game)\
    \ != length(guess)\n    throw(ErrorException(\"game/guess lengths differ.\"))\n\
    \  end\n  result = []\n  for ii in 1:length(guess)\n    if game[ii] == guess[ii]\n\
    \      push!(result, 0)\n    else\n      push!(result, abs(game[ii] - guess[ii]))\n\
    \    end\n  end\n  return result\nend\n</code>\n<|/ a |>\n<| c |>\nThe test case\
    \ fails for me, I guess you forgot to post the test case...\n<|/ c |>\n<| c |>\n\
    I'm working on some test cases. I don't think this one will fail though. I'll\
    \ post the output when its successful.\n<|/ c |>\n<| c |>\nThanks for the test\
    \ case feedback, hopefully this will help someone else.\n<|/ c |>\n<| c |>\nI've\
    \ added the test cases, sorry if they're not formatted properly. Hope it helps\
    \ someone. Thanks again!\n<|/ c |>\n<| c |>\nThe test cases are now posted and\
    \ working. Thanks for your help!\n<|/ c |>\n<| a tags=matching,mathematical-optimization,math,algorithm\
    \ |>\nI made a few more tests and they seem to pass all the tests. \nThe code\
    \ I used is:\n<code>", "    guess = copy(guess)\n    \n    guess[guess == 1] =\
    \ 0\n    guess[guess == 2] = 1\n    guess[guess == 3] = 2\n    guess[guess ==\
    \ 4] = 4\n    guess[guess == 5] = 4\n    guess[guess == 6] = 4\n    guess[guess\
    \ == 7] = 4\n    guess[guess == 8] = 4\n    guess[guess == 9] = 4\n    guess[guess\
    \ == 10] = 4\n    guess[guess == 11] = 4\n    guess[guess == 12] = 4\n    guess[guess\
    \ == 13] = 4\n    guess[guess == 14] = 4\n    guess[guess == 15] = 4\n    guess[guess\
    \ == 16] = 4\n    guess[guess == 17] = 4\n    guess[guess == 18] = 4\n    guess[guess\
    \ == 19] = 4\n    guess[guess == 20] = 4\n    guess[guess == 21] = 4\n    guess[guess\
    \ == 22] = 4\n    guess[guess == 23] = 4\n    guess[guess == 24] = 4\n    guess[guess\
    \ == 25] = 4\n    guess[guess == 26] = 4\n    guess[guess == 27] = 4\n    guess[guess\
    \ == 28] = 4\n    guess[guess == 29] = 4\n    guess[guess == 30] = 4\n    guess[guess\
    \ == 31] = 4\n    guess[guess == 32] = 4\n    guess[guess == 33] = 4\n    guess[guess\
    \ == 34] = 4\n    guess[guess == 35] = 4\n    guess[guess == 36] = 4\n    guess[guess\
    \ == 37] = 4\n    guess[guess == 38] = 4\n    guess[guess == 39] = 4\n    guess[guess\
    \ == 40] = 4\n    guess[guess == 41] = 4\n    guess[guess == 42] = 4\n    guess[guess\
    \ == 43] = 4\n    guess[guess == 44] = 4\n    guess[guess == 45] = 4\n    guess[guess\
    \ == 46] = 4\n    guess[guess == 47] = 4\n    guess[guess == 48] = 4\n    guess[guess\
    \ == 49] = 4\n    guess[guess == 50] = 4\n    guess[guess == 51] = 4\n    guess[guess\
    \ == 52] = 4\n    guess[guess == 53] = 4\n    guess[guess == 54] = 4\n    guess[guess\
    \ == 55] = 4\n    guess[guess == 56] = 4\n    gues", "    n = length(guess)\n\
    \    result = zeros(Int, n)\n    \n    # compute expected score\n    expected\
    \ = sum(guess)\n    for i in 1:n\n        result += game[i]-guess[i]\n    end\n\
    \    \n    # compute actual score\n    actual = sum(game)\n    \n    # if the\
    \ actual score is higher, it is wrong\n    if actual > expected\n        result[:n]\
    \ = actual-expected\n    else\n        result[:n] = abs(actual - expected)\n \
    \   end\n    \n    return result\nend\n</cell>\n<cell>\nguess = [4, 3, 2, 1, 0]\n\
    scores = [1, 5, 6, 3, 0]\nguess, scores = guess[end-1:end], scores[end-1:end]\n\
    compare(guess, scores)\n</cell>\n<text>\nProblem 5\nWrite a function called guess3\
    \ that takes in an initial guess and a sequence of matches (in any order) and\
    \ determines if that guess is too high or too low. After it guesses the answer,\
    \ it returns a percentage of the way through by how much each guess was too high\
    \ or too low. Test it on the following input:", "    # initialize the result\n\
    \    guessed::Vector{Int64} = zeros(length(guess)) \n    # iterate through the\
    \ guesses\n    for ix in 1:length(guess)\n        # if the guessed value is equal\
    \ to the game value\n        if guessed[ix] == game[ix]\n            # then the\
    \ guessed value is correct\n            guessed[ix] = 0\n        else\n      \
    \      # then subtract that value from the game value\n            guessed[ix]\
    \ = game[ix] - guessed[ix]\n        end\n    end\n    # return the result\n  \
    \  return guessed\nend\n</cell>\n<text>\nAnd now let's test the code!", "    return\
    \ zeros(length(guess), 1)\nend", "    \n    if length(game) == length(guess)\n\
    \        \n        diff = 0\n        for idx = 1:length(game)\n            if\
    \ game[idx] != guess[idx]\n                diff = abs(game[idx] - guess[idx])\n\
    \            end\n        end\n        return diff\n    end\n    return zeros(length(guess),\
    \ 1)\nend\n</cell>\n<text>\nQuestion 3", "    return Vector{Int64}(guess, game).-game\
    \ \nend\n</cell>\n<text>\nAnd now we can test the function:", "\"\"\"\n    O(N)\
    \ solution \n\"\"\"\n    guesses = guess[game]\n    correct = guess[game==0]\n\
    \    if length(correct) == 0\n        return guesses\n    else\n        diff =\
    \ guesses - correct\n        guesses[guess==0] = -guess\n        guesses[guesses\
    \ == 0] = guesses[guesses == 0] + guesses[guesses != 0]\n    end\n    return guesses\n\
    end", "    # Write your comparison function here\n    compare = zeros(length(guess))\n\
    \    \n    diff = 0\n    for i = 1:length(guess)\n        diff = diff + (guess[i]\
    \ - game[i])\n    end\n    \n    return diff\nend\n</cell>\n<code language=julia-1.6>\n\
    guesses = [1, 2, 3, 4, 5, 1]\nscores = [1, 2, 3, 4, 2, -2]\ncompare(guesses, scores)\n\
    </cell>\n<text>\nProblem 5\nThe function compare_guess will compare the given\
    \ guesses and scores and return a vector containing the results of\ncomparing\
    \ each guess and score pair. If the guess and score match a value in the game,\
    \ that position in the returned vector will be 1. If they do not match a value\
    \ in the game, that position in the returned vector will be 0. The game will be\
    \ represented by the variable game, a list of integers.", "    if guess.length\
    \ != game.length\n        error(\"guess and game must have the same length\")\n\
    \    end", "    # Your code here\n    \n    return guess\nend", "    # write your\
    \ solution here\n    \n    diff = zeros(length(guess))\n    for i=1:length(guess)\n\
    \        if guess[i] == game[i]\n            diff[i] = 0\n        else\n     \
    \       diff[i] = guess[i] - game[i]\n        end\n    end\n    return diff\n\
    end\n</cell>\n<text>\nAs a reminder, the result of the game is given as [0 1 2\
    \ 0 2] and [0 0 4 0 2].", "    if length(guess) != length(game)\n        raise\
    \ ArgumentError(\"Vectors of different length given.\")\n    \n    # initialize\
    \ variables\n    matches::Vector{Int64} = fill(Int64(-1), length(guess))\n   \
    \ \n    # loop through guesses\n    for  guess in  guess\n        for  i  in eachindex(game)\n\
    \            \n            # check if guess is on same index as game\n       \
    \     if guess[i] == game[i]\n                matches[i] = guess[i]\n        \
    \    else\n                if guess[i] != game[i]\n                    matches[i]\
    \ = abs(guess[i]-game[i])\n                end\n            end\n        end\n\
    \    end\n    \n    # return results\n    return matches\nend", "    \n    \"\"\
    \"\n    I used this to figure out how far off each guess was. I ended up using\
    \ PyCall.\n    \"\"\"\n    \n    \"\"\"\n    I used this to figure out how far\
    \ off each guess was. I ended up using PyCall.\n    \"\"\"\n    \n    \"\"\"\n\
    \    I used this to figure out how far off each guess was. I ended up using PyCall.\n\
    \    \"\"\"\n    \n    \"\"\"\n    I used this to figure out how far off each\
    \ guess was. I ended up using PyCall.\n    \"\"\"\n    \n    \"\"\"\n    I used\
    \ this to figure out how far off each guess was. I ended up using PyCall.\n  \
    \  \"\"\"\n    \n    \"\"\"\n    I used this to figure out how far off each guess\
    \ was. I ended up using PyCall.\n    \"\"\"\n    \n    \"\"\"\n    I used this\
    \ to figure out how far off each guess was. I ended up using PyCall.\n    \"\"\
    \"\n    \n    \"\"\"\n    I used this to figure out how far off each guess was.\
    \ I ended up using PyCall.\n    \"\"\"\n    \n    \"\"\"\n    I used this to figure\
    \ out how far off each guess was. I ended up using PyCall.\n    \"\"\"\n    \n\
    \    \"\"\"\n    I used this to figure out how far off each guess was. I ended\
    \ up using PyCall.\n    \"\"\"\n    \n    \"\"\"\n    I used this to figure out\
    \ how far off each guess was. I ended up using PyCall.\n    \"\"\"\n    \n   \
    \ \"\"\"\n    I used this to figure out how far off each guess was. I ended up\
    \ using PyCall.\n    \"\"\"\n    \n    \"\"\"\n    I used this to figure out how\
    \ far off each guess was. I ended up using PyCall.\n    \"\"\"\n    \n    \"\"\
    \"\n    I used this to figure out how far off each guess was. I ended up using\
    \ PyCall.\n    \"\"\"\n    \n    \"\"\"\n    I used this to figure out how far\
    \ off each guess was. I ended up using PyCall.\n    \"\"\"\n    \n    \"\"\"\n\
    \    I used this to figure out how far off each guess was. I ended up using PyCall.\n\
    \    \"\"\"\n    \n    \"\"\"\n    I used this to figure out how far off each\
    \ guess was. I ended up using PyCall.\n    \"\"\"\n    \n    \"\"\"\n    I used\
    \ this to figure out how far off each guess was. I ended up using PyCall.\n  \
    \  \"\"\"\n    \n    \"\"\"\n    I used this to figure out how far off each guess\
    \ was. I ended up using PyCall.\n    \"\"\"\n    \n    \"\"\"\n    I used this\
    \ to figure out how far off each guess was. I ended up using PyCall.\n    \"\"\
    \"\n    \n    \"\"\"\n    I used this to figure out how far off ", "    return\
    \ game.-guess\nend", "    if size(game) == size(guess) \n        zeros = zeros(length(guess),\
    \ 1)\n        \n        for i in 1:length(game)\n            if guess[i] == game[i]\n\
    \                zeros[i] = 0\n            elseif guess[i] != game[i]\n      \
    \          zeros[i] = abs(guess[i] - game[i])\n            end\n        end\n\
    \        return zeros\n    else\n        return zeros(length(guess), 1)\n    end\n\
    end", "  m = 0\n  n = 0\n  for j in 1:length(guess)\n    if guess[j] < game[j]\n\
    \      m += 1\n    else\n      n += 1\n    end\n  end\n  compare = zeros(length(guess),\
    \ 1)\n  for j in 1:length(guess)\n    if guess[j] == game[j]\n      compare[j]\
    \ = 0\n    elseif guess[j] > game[j]\n      compare[j] = 1\n    elseif guess[j]\
    \ < game[j]\n      compare[j] = abs(guess[j] - game[j])\n    end\n  end\n  compare\n\
    end", "    \n    if length(game) != length(guess)\n        throw(\"Incompatible\
    \ game/guess lengths\")\n    \n    guess_diffs = [abs(game[i] - guess[i]) for\
    \ i in 1:length(guess)]\n    return guess_diffs\nend\n    \n</cell>\n<code language=julia-1.5>\n\
    ## Problem 3\n\"\"\"The function compare should compare the elements of two arrays\
    \ (of integers) to see \nif they are equal. If the arrays are equal, the function\
    \ should return an array with zeros\nand ones, respectively, where the 1s denote\
    \ that the arrays are equal. The function should \nthrow an error if the two arrays\
    \ have different lengths.\"\"\"", "    \n    \n    # Your code goes here\n   \
    \ \nend\n</cell>\n<text>\nProblem 2: Subset Sum\nYou are given a $N \\times N$\
    \ matrix $A \\in \\mathbb{R}^{N \\times N}$ and a vector $b$, each entry of $b$\
    \ is a non-negative integer such that the entry $b_i$ denotes the sum of two entries\
    \ in the $i$th column of $A$:", "    if length(game) == length(guess)\n      \
    \  zero = zeros(length(guess)) - guess(:)\n        result = zero\n        for\
    \ i = 1:length(guess)\n            if guess[i] != game[i]\n                result[i]\
    \ = abs(guess[i] - game[i])\n            end\n        end\n        result\n  \
    \  else\n        error(\"Game and guess lengths don't match\")\n    end\nend\n\
    </cell>\n<code language=julia-1.0>\ntest1 = compare([1,2,3],[1,2,3])\ntest2 =\
    \ compare([1,2],[1,2])\n</cell>\n<code language=julia-1.0>\nusing Plots\n</cell>\n\
    <code language=julia-1.0>\nplot(test1,test2)\n</cell>\n<code language=julia-1.0>\n\
    \"\"\"\n    compare(guess, guess)", "    guess = Vector{Int64}(guess)\n    score\
    \ = Vector{Int64}(game)\n    answer = Vector{Int64}()\n    \n    for i = 1:length(guess)\n\
    \        if guess[i] == score[i]\n            answer[i] = 0\n        else\n  \
    \          answer[i] = abs(guess[i] - score[i])\n        end\n    end\n    return\
    \ answer\nend\n</code>\n<|/ a dscore=1 |>\n<| c |>\nI believe that your code is\
    \ correct, but the function \"compare\" doesn't return an array, it returns a\
    \ vector. If you call the function with one parameter, you get a vector. If you\
    \ call the function with two parameters (game, guess), you get a scalar. What\
    \ am I missing? I see that you have used two arrays \"game\" and \"answer\" but\
    \ I don't understand where are they coming from and what they contain. I would\
    \ appreciate if you could explain how you got to the answer vector. Thanks a lot.\n\
    <|/ c |>\n<| c |>\nI added an explanation for the code. Hope it helps you. Happy\
    \ to help further\n<|/ c |>\n<| a tags=julia,arrays,algorithm,vector |>\n<code>",
  "    \"\"\"\n    \n    game\n    guess\n    \n    Returns how far off each guess\
    \ was. \n    \n    \n    example: \n    \n    >>> compare([1, 2, 3, 4, 5, 1],\
    \ [1, 2, 3, 4, 2, -2])\n    [0, 0, 0, 0, 3, 3]\n    >>> compare([0, 5, 0, 0, 0,\
    \ 4], [4, 1, 1, 0, 0, -2])\n    [4, 4, 1, 0, 0, 6]\n    \"\"\"\n    \n    guesses_difference\
    \ = guess .- game\n    correctly_guessed = guesses_difference .< 0\n    \n   \
    \ if guesses_difference .~= 0\n    \n        guesses_difference = guesses_difference\
    \ .+ correctly_guessed \n        \n    else guesses_difference .= guesses .- correctly_guessed\
    \ \n    \n    return guesses_difference \nend", "    if length(guess)==length(game)\n\
    \        \n        res=Vector{Int64}(guess)\n        res[1:end-1] .= guess[1:end-1]\
    \ - game[1:end-1]\n        res[end]=guess[end]-game[end]\n        return res\n\
    \    end\n    return guess[end] - game[end]", "    guess = guess[:]\n    score\
    \ = game[:]\n    guesses = 0\n    \n    for g in guesses\n        guesses += 1\n\
    \        if guess == score\n            return zeros(guesses)\n        end\n \
    \   end\n    \n    for g in guesses\n        if abs(g-score) < abs(g-guess)\n\
    \            return zeros(guesses)\n        end\n    end\n    \n    for g in guesses\n\
    \        guesses += 1\n        if guess == score\n            return zeros(guesses)\n\
    \        end\n    end\n    return zeros(guesses)\nend\n\"\"\"\n    guess_guess(game::Vector{Int64},\
    \ guess::Vector{Int64})::Vector{Int64}\n    guess = guess[:]\n    score = game[:]\n\
    \    guesses = 0\n    \n    for g in guesses\n        guesses += 1\n        if\
    \ guess == score\n            return zeros(guesses)\n        end\n    end\n  \
    \  \n    for g in guesses\n        if abs(g-score) < abs(g-guess)\n          \
    \  return zeros(guesses)\n        end\n    end\n    \n    for g in guesses\n \
    \       guesses += 1\n        if guess == score\n            return zeros(guesses)\n\
    \        end\n    end\n    return zeros(guesses)\nend\n\"\"\"\n    guess_game(game::Vector{Int64},\
    \ guess::Int64)::Vector{Int64}\n    guess = guess[:]\n    score = game[:]\n  \
    \  guesses = 0\n    \n    for g in guesses\n        guesses += 1\n        if guess\
    \ == score\n            return zeros(guesses)\n        end\n    end\n    \n  \
    \  for g in guesses\n        if abs(g-score) < abs(g-guess)\n            return\
    \ zeros(guesses)\n        end\n    end\n    \n    for g in guesses\n        guesses\
    \ += 1\n        if guess == score\n            return zeros(guesses)\n       \
    \ end\n    end\n    return zeros(guesses)\nend\n\"\"\"\n    guess_game(game::Vector{Int64},\
    \ guess::Vector{Int64})::Vector{Int64}\n    guess = guess[:]\n    score = game[:]\n\
    \    guesses = 0\n    \n    for g in guesses\n        guesses += 1\n        if\
    \ guess == score\n            return zeros(guesses)\n        end\n    end\n  \
    \  \n    for g in guesses\n        if abs(g-score) < abs(g-guess)\n          \
    \  return zeros(guesses)\n        end\n    end\n    \n    for g in guesses\n \
    \       guesses += 1\n        if guess == score\n            return zeros(guesses)\n\
    \        end\n    end\n    return zeros(guesses)\nend", "    # your code goes\
    \ here\nend\n</cell>\n<code language=julia-1.5>\n# === Part 3: Question 2 ===",
  '    # FILL IN HERE', "    \n    guesses = Vector{Int64}(guess)\n    scores = Vector{Int64}(game)\n\
    \    \n    scores -= guesses\n    guesses -= scores\n    \n    if guess == scores\
    \ \n        diff = 0\n    else\n        diff = abs.(guess - scores)\n    end\n\
    \    return diff\nend\n</cell>\n<text>\nExercise 3: Write a function that compares\
    \ scores and guesses using the function you created above", "    \n    # Your\
    \ code here!\n    return \nend", "    \n    total = 0\n    for (i,j) in zip(guess,\
    \ game)\n        total += (j-i)^2\n    end\n    \n    \n    for (i,j) in zip(guess,\
    \ game)\n        if i==j\n            total-=1\n        else\n            total+=abs(i-j)\n\
    \        end\n    end\n    \n    return total\nend\n</cell>\n<text>\nProblem 3.2\n\
    Write a function that takes a vector of scores and a vector of guesses and returns\
    \ an array of the same length\ndenoting how far off each guess was. If they have\
    \ guessed correctly, the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\nFor example, a guess of [4, 0, 0, 3, -2] and\
    \ game [4, 1, 1, 0, -1] would result in an output of\n[4, 4, 1, 0, 0]", "    guess_index\
    \ = 0\n    game_index = 0\n    \n    while game_index < length(game) && guess_index\
    \ < length(guess)\n        \n        if game[game_index] != guess[guess_index]\n\
    \            \n            if game[game_index] < guess[guess_index]\n        \
    \        \n                game_index += 1\n                guess_index = 0\n\
    \                \n            else\n                \n                guess_index\
    \ += 1\n                game_index += 1\n                \n            end\n \
    \           \n        else\n            \n            game_index += 1\n      \
    \      guess_index += 1\n            \n        end\n        \n    end\n    \n\
    \    if guess_index == length(guess)\n        \n        return [abs(game[i] -\
    \ guess[i]) for i = 1:length(game)]\n        \n    end\n    \n    return [0 for\
    \ i = 1:length(guess)]\n    \nend\n</cell>\n<code language=julia-0.5>\nguesses\
    \ = [1, 2, 3, 4, 5, 1]\nscores = [1, 2, 3, 4, 2, -2]\n</cell>\n<code language=julia-0.5>\n\
    [abs(guesses[i] - scores[i]) for i = 1:length(guesses)]\n</cell>\n<code language=julia-0.5>\n\
    @assert [abs(guesses[i] - scores[i]) for i = 1:length(guesses)] == [0, 3, 0, 0,\
    \ 0, 0, 6]\n</cell>\n<text>\n4.2 - Game of life\nThe game of life consists of\
    \ two distinct generations, each involving a random number of new cells being\
    \ born. Generation one consists of a grid of cells where each cell has a probability\
    \ of being alive equal to its surrounding cells' probabilities. Each cell has\
    \ a life state associated with it, which is given by the number of live neighbouring\
    \ cells within the grid. More precisely, the cell with index $(i,j)$ has a life\
    \ state of $S{i,j}$ if there are more than two live neighbouring cells around\
    \ it, and 0 otherwise.", "    # Your code here\n    guesses = length(guess)\n\
    \    score = length(game)\n    guesses_correct = zeros(guesses)\n    for i in\
    \ 1:guesses\n        for j in 1:score\n            if guess[i] == game[j]\n  \
    \              guesses_correct[i] += 1\n            end\n        end\n    end\n\
    \    if guesses_correct == guesses\n        guess_score = 0\n    else\n      \
    \  guess_score = sum(guesses_correct) - guesses\n    end\n    return guess_score\n\
    end\n</cell>\n<text>\nNow let's have a look at our results.", "    lengt = length(game)\n\
    \    if length(guess) != lengt\n        throw(ArgumentError(\"guess and game vectors\
    \ must have equal lengths\"))\n    end", "    diff = Vector{Int64}(guess); \n\
    \    for index in guess:\n        if(game[index] == 0)\n            diff[index]\
    \ = 0\n        else\n            diff[index] = abs(game[index] - guess[index])\n\
    \    end\n    return diff\nend\n</code>\n<|/ a dscore=2 |>\n<| c |>\n`@professor_noah`\
    \ This does not work, though.  When I try to use your example `compare([1,3,0,0,2,0],\
    \ [1,3,4,2,0,2])`, I get `[1, 3, 2, 1, 3, 3]`.\n<|/ c |>\n<| c |>\n`@professor_noah`\
    \ Your code does not work, though.  When I try to use your example `compare([1,3,0,0,2,0],\
    \ [1,3,4,2,0,2])`, I get `[4, 3, 4, 1, 4, 6]`.\n<|/ c |>\n<| c |>\nSorry, it was\
    \ a typo. `diff =[abs(game[index]-guess[index]) for index in guess]` should work.\n\
    <|/ c |>\n<| c |>\n`@professor_noah` It works, thank you for the help.  Unfortunately,\
    \ it does not give the correct answer.  When I use `compare([1,3,0,0,2,0], [1,3,4,2,0,2])`\
    \ I should get `[4,3,2,1,4,6]`, but instead I get `[4, 3, 4, 1, 4, 6]`.\n<|/ c\
    \ |>\n<| c |>\nI have no idea why that is the case. I tried it out on a different\
    \ computer and it works perfectly. Could you explain what you mean by \"does not\
    \ give the correct answer\"?\n<|/ c |>\n<| a tags=julia,arrays dscore=2 |>\nI\
    \ am not sure about efficiency of this algorithm, but it works.\n<code>", "  score1\
    \ = sum(game.==guess)\n  score2 = sum(guess .== game)\n  \n  for i in (1 :length(guess))\
    \ do \n    diff = guess[i] - game[i]\n    if diff != 0 \n      diff = abs(diff)\n\
    \    end\n    score1 += diff\n    score2 += diff\n  end\n  \n  if score1 != score2\n\
    \    score1 += abs(score1 - score2)\n  end\n  \n  return [score1, score2]\nend\n\
    \"\"\"\n    compare(game::Vector{Int64}, guess::Vector{Int64}, verbose::Bool=false)::Int64\n\
    \  Compares the game with the given guess and returns the difference between guess\
    \ and game\n  as a single number.\n  \n  Parameters: \n  \n  game:the vector with\
    \ the scores of the game\n  guess: the vector with the guesses. \n  verbose: whether\
    \ to print verbose information.", "    score::Vector{Int64} = getScore(game)\n\
    \    guess = copy(guess)\n    length::Int64 = length(guess)\n    guess_sum::Int64\
    \ = sum(guess)\n    score_sum::Int64 = sum(score)\n    off::Int64 = 0\n    for\
    \ index in 1:length(guess)\n        if guess[index] == 0\n            off = off\
    \ + 1\n        elseif guess[index] == score[index]\n            off = off + 1\n\
    \        end\n    end\n    return off\nend", "\"\"\"\n## SOLUTION ##\n\"\"\"",
  "    correct = 0\n    for i = 1:length(guess)\n        if game[i]==guess[i]\n  \
    \          correct += 1\n        else\n            if abs(game[i]-guess[i])>0\n\
    \                correct += 1\n            else\n                correct += abs(game[i]-guess[i])\n\
    \            end\n        end\n    end\n    return correct\nend\n</cell>\n<text>\n\
    Let's see what it does!", "    guess_score = copy(guess)\n    score = copy(game)\n\
    \    for j in 1:length(guess_score)\n        guess_score[j] = guess_score[j] +\
    \ guess_score[j] - score[j]\n    end\n    return guess_score\nend\n</cell>\n<text>\n\
    Exercise\nNow try to write code for the function score() which is just like the\
    \ one in the previous exercise except that it will return scores instead of scores.\
    \ You don't need to modify anything in the code below.", "    game = copy(game)\n\
    \    guess = copy(guess)\n    guessedCorrectly = falses(length(guess))\n    for\
    \ i in 1:length(guess)\n        if guess[i] == game[i]\n            guessedCorrectly[i]\
    \ = true\n        end\n    end\n    guessedCorrectly\nend\n</cell>\n<code language=julia-1.5>\n\
    ## Test cell\n@test compare([1,2,3,4], [1,2,4,3])\n@test compare([-1,-2,-3,-4],\
    \ [-1,2,-3,4])\n@test compare([0,5,0,0,4], [4,1,1,0,0])\n</cell>\n<text>\nExercise:\
    \ What if you only wanted to compare the second element of each vector? Write\
    \ a function compare2!. Recall that ! is to append an element to an existing array,\
    \ not to overwrite it. This time, your function should return a new vector, where\
    \ the first element of each input vector has been replaced with the second element\
    \ of the input vector. The function should return nothing if no such replacement\
    \ is possible, or if multiple replacements are possible. \n    \n    \n    example:",
  "    # return zeros(length(guess), 1)\n    result = 0\n    for i = 1:length(game)\n\
    \        guess = guess[i]\n        guess = min(guess, game[i]) # find smallest\
    \ value in a new list\n        guess = guess[i] - guess # find difference between\
    \ guess and score\n        if guess == 0\n            result[i] = 0\n        else\n\
    \            result[i] = abs(guess - game[i])\n        end\n    end\n    return\
    \ result\nend", "  guess=sort(guess)\n  game=sort(game)\n  diff=guess-game\n \
    \ if length(guess)==length(game)\n    return zeros(length(guess))\n  end\n  correct_guess=(guess[diff==0]==0)\n\
    \  correct_score=(diff[diff==0]==0)\n  if correct_guess & correct_score\n    return\
    \ 0\n  end\n  correct=diff\n  for i in range(length(guess))\n    diff[i]=abs(correct[i])\n\
    \  end\n  return diff\nend\n</cell>\n<code language=julia-0.5>", " \n    score::Vector{Int64}\
    \ = []\n    for g in guess \n        push!(score, maximum(game) - g)\n    end\n\
    \    # this part is from https://math.stackexchange.com/a/255088/129085\n    correct::Bool\
    \ = sum(score) == length(game)\n    return score\nend\n \n \n# Your function here\n\
    guess::Vector{Int64} = [-1, 1, 3, 1]\ngame::Vector{Int64} = [0, 1, 0, 0]\ncompare(guess,\
    \ game)\n</cell>\n<text>\nYour turn\nGiven a vector of scores scores, a vector\
    \ of guesses guess, and a threshold t, return a vector of scores where the scores\
    \ have at least\n    t points\n    scores are positive and can be negative\n \
    \   guesses are integers between 1 and length(scores)\n    scores are in the order\
    \ they appear in scores\n    guesses are in the order they appear in guesses\n\
    \    For each index i in guesses, set guess[i] to the maximum score over all indices\
    \ in scores except i\n    \n    Your code should run in the current version since\
    \ it uses @parallel", "    s = diff(guess, game)\n    \n    if all(s == 0)\n \
    \       return 0\n    else\n        return s\n    end\nend\n</cell>\n<code language=julia-0.5>\n\
    ?diff\n</cell>\n<text>\nProblem 1\nWrite a function find_pairs(game::Vector{Int64},\
    \ guess::Vector{Int64}) that returns the best guess for your pairs game. For example,\
    \ given the game [1, 2, 3, 4], and guesses [1, 2], you should return [1, 2].",
  "    \n    diff = zeros(length(guess), length(game))\n    for i in 1:length(guess)\n\
    \        for j in 1:length(game)\n            diff[i, j] = abs(guess[i] - game[j])\n\
    \        end\n    end\n    return diff\nend", "    # Your code here\nend\n</cell>\n\
    <code language=julia-1.6>\n@time compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n\
    @time compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n</cell>\n<text>\nApart\
    \ from its run time efficiency, the code also makes for a very readable and elegant\
    \ solution.", "    l = length(game)\n    guesses = guess\n    scores = game\n\
    \    \n    guesses[guesses == 0] = guess\n    scores[scores == 0] = scores", " \
    \   guess = convert(Int64, guess)\n    game = convert(Int64, game)\n    guesses\
    \ = Int64[]\n    score = 0\n    guesses.append(guess)\n    push!(guesses, 0)\n\
    \    push!(guesses, 0)\n    while length(guesses) > 1\n        (i, j) = (length(guesses)\
    \ .- 2) \xF7 2\n        guesses[i], guesses[j] = guesses[j], guesses[i]\n    \
    \    score += min(guesses[i + 1], guesses[j + 1])\n        guesses[j + 1] = 0\n\
    \        guesses[i + 1] = 0\n    end\n    \n    if guesses[1] == 0\n        guesses[1]\
    \ = abs(guesses[1] - score)\n    end\n    \n    return guesses\nend\n</cell>\n\
    <code language=julia-0.6>\n# Example\ncompare([1,2,3,4,5,1], [2,4,6,8,10,12])\n\
    </cell>\n<code language=julia-0.6>\ncompare([1,2,3,4,5,1], [1,2,3,4,2,-2])\n</cell>\n\
    <code language=julia-0.6>\ncompare([1,2,3,4,5,1], [1,1,3,3,2,2])\n</cell>\n<code\
    \ language=julia-0.6>\ncompare([1,2,3,4,5,1], [1,2,3,3,2,2])\n</cell>\n<code language=julia-0.6>\n\
    compare([1,2,3,4,5,1], [1,2,3,2,1,2])\n</cell>\n<code language=julia-0.6>\ncompare([1,2,3,4,5,1],\
    \ [1,2,3,1,2,3])\n</cell>\n<code language=julia-0.6>\ncompare([1,2,3,4,5,1], [1,2,3,1,2,4])\n\
    </cell>\n<text>\nExcercise 2\nWrite a function that can convert a given number\
    \ from decimal to binary, and vice versa.", "    len = length(game)\n    zeros\
    \ = zeros(Int64, len)\n    for i=1:len\n        if game[i] < guess[i]\n      \
    \      zeros[i] = 0\n        elseif game[i] > guess[i]\n            zeros[i] =\
    \ abs(guess[i] - game[i])\n        end\n    end\n    return zeros\nend\n</cell>\n\
    <code language=julia-1.5>", "    result = []\n    for g in guess\n        difference\
    \ = abs(g - game[g...1])\n        \n        if difference == 0\n            result\
    \ = [result] \n        else\n            push!(result, difference)\n        end\n\
    \    end\n    return result \nend\n</cell>\n<code language=julia-1.5>\n# Example\n\
    compare([1,2,3,4,5], [1,2,3,2,3])\n</cell>\n<text>\nProblem 2\nYour goal is to\
    \ write a function that takes two vectors, one containing the correct outputs\
    \ and one with the wrong outputs, and returns a vector containing the distances\
    \ between them. \nFor example, [1,2,3] would be closer to [3,2,1] than to [3,3,2].\
    \ \nYou will need to write a for loop for this function, and you should use push!\
    \ to add elements to the result vector. \nThe distance between [1,2] and [2,3]\
    \ would be 1. If you used push! to add the distance to the result vector, you\
    \ would get: \n[1, 1, 1, 1, 1] \nYou can not add one element to the result vector\
    \ and replace all the elements with it. \nThe function should return the result\
    \ vector.\nThe function should also work for vectors of any size, with any number\
    \ of elements. \nYou do not need to store the result of the for loop in a variable.\
    \ \nYou can not use any other built in functions, such as sum or max, to solve\
    \ this. \nThe distance between [1,2,3] and [1,2,1,2,3] would be 5. \nThe distance\
    \ between [1,2,3,4,5,6,7] and [1,2,1,2,3,4,5,6,7] would be 3.", "    \n    game\
    \ = sort(game)\n    guess = sort(guess)\n    \n    diff = guess - game\n    \n\
    \    diff_abs = abs(diff)\n    \n    if length(diff_abs) == length(guess)\n  \
    \      return zeros(length(guess))\n    end\n    \n    return diff\nend", "  \n\
    \  \n    if length(guess) == length(game)\n        result = zero(eltype(guess))\n\
    \        for (i,j) in zip(guess,game)\n            if i == j\n               \
    \ result[i] = 0\n            else\n                result[i] = abs(i-j)\n    \
    \        end\n        end\n        return result\n    else\n        throw(ArgumentError(\"\
    Number of vectors mismatched\"))\n    end\nend\n\"\"\"\n    CompareVectors", " \
    \   \n    guess = sort(guess)\n    game = sort(game)\n    \n    result = 0\n \
    \   \n    for g in guess\n        result += g - game[g]\n    end\n    \n    result\n\
    end\n</cell>\n<code language=julia-1.5>\n@time compare([10, 1, 6, 3, 7, 2, 5],\
    \ [6, 8, 1, 2, 3, 9, 5])\n</cell>\n<text>\nWhat is going on?\nYou can't believe\
    \ how many times you see this error! What happened in the first place?", "   \
    \ best = 0\n    bestscore = game[1] \n    for g in guess \n        score = game[g-1]\
    \ + guessg - guess\n        if score > bestscore \n            bestscore = score\n\
    \            best = g \n        else \n            best = score\n    end\n   \
    \ \n    \n    \n    return best\nend\n</cell>\n<code language=julia-1.3>", " \
    \   correct = true\n    guess = copy(guess)\n    score = copy(game)\n    guessed_wrong\
    \ = false\n    wrong_guess = 0\n    for gs in guess\n        if scores[gs] < 0\n\
    \            guessed_wrong = true\n            wrong_guess = gs\n        end\n\
    \    end\n    if guessed_wrong\n        guessed_wrong = false\n        for gs\
    \ in guess\n            if scores[gs] > 0\n                guessed_wrong = true\n\
    \                wrong_guess = gs\n            end\n        end\n    end\n   \
    \ if guessed_wrong\n        wrong_guess = 0\n    end\n    for gs in guess\n  \
    \      if scores[gs] > 0\n            if guess[gs] != scores[gs]\n           \
    \     guess[gs] = scores[gs]\n            else\n                guess[gs] = 0\n\
    \            end\n        end\n    end\n    if guessed_wrong\n        guess =\
    \ 0\n        guessed_wrong = false\n        for gs in guess\n            if scores[gs]\
    \ > 0\n                guessed_wrong = true\n                wrong_guess = gs\n\
    \            end\n        end\n    end\n    if guessed_wrong\n        guessed_wrong\
    \ = false\n        for gs in guess\n            if scores[gs] > 0\n          \
    \      guessed_wrong = true\n                wrong_guess = gs\n            end\n\
    \        end\n    end\n    if guessed_wrong\n        guessed_wrong = false\n \
    \       for gs in guess\n            if scores[gs] < 0\n                guessed_wrong\
    \ = true\n                wrong_guess = gs\n            end\n        end\n   \
    \ end\n    if guessed_wrong\n        guessed_wrong = false\n        for gs in\
    \ guess\n            if scores[gs] > 0\n                guessed_wrong = true\n\
    \                wrong_guess = gs\n            end\n        end\n    end\n   \
    \ if guessed_wrong\n        guessed_wrong = false\n        for gs in guess\n \
    \           if scores[gs] < 0\n                guessed_wrong = true\n        \
    \        wrong_guess = gs\n            end\n        end\n    end\n    if guessed_wrong\n\
    \        guessed_wrong = false\n        for gs in guess\n            if scores[gs]\
    \ > 0\n                guessed_wrong = true\n                wrong_guess = gs\n\
    \            end\n        end\n    end\n    if guessed_wrong\n        guessed_wrong\
    \ = false\n        for gs in guess\n            if scores[gs] < 0\n          \
    \      guessed_wrong = true\n                wrong_guess = gs\n            end\n\
    \        end\n    end\n    if guessed_wrong\n        guessed_wrong = false\n \
    \       for gs in guess\n            if scores[gs] > 0\n                guessed_wrong\
    \ = true\n                wrong_guess = gs\n            end\n        end\n   \
    \ end\n    if guessed_wrong\n        guessed_wrong = false\n        for gs in\
    \ guess\n            if scores[gs] < 0\n                guessed_wrong", "    score_guess\
    \ = Array(game)\n    score_score = Array(guess)\n    score_guess[guess[1]] +=\
    \ 1\n    score_score[game[1]] += 1\n    score_guess[1] = score_guess[1] + score_score[1]\n\
    \    score_guess = zeros(length(guess)-1)\n    score_guess[guess[end]+1:end] =\
    \ score_guess[guess[end]+1:end] + score_score[guess[end]:end]\n    score_guess[1]\
    \ = score_guess[1] + score_score[1]\n    \n    if score_guess[1] != 0\n      \
    \  score_guess[1] = score_guess[1] - score_score[1]\n    else\n        score_guess[1]\
    \ = score_score[1]\n    end\n    \n    return score_guess\nend", "    return guess\
    \ |> sort() |> map(abs(guess .- game)) |> collect() \nend \n</cell>\n<code language=julia-1.6>",
  "    \n    guesses = length(guess)\n    scores = length(game)\n    \n    if guesses\
    \ ==  scores\n        return zeros(guesses)\n    end\n    \n    diff = zeros(guesses)\n\
    \    for i = 1:guesses\n        if game[i] != guess[i]\n            diff[i] =\
    \ abs(game[i] - guess[i])\n        else\n            diff[i] = 0\n        end\n\
    \    end\n    return diff\nend\n</cell>\n<code language=julia-1.4>", "    \n \
    \   game = sort(game)\n    guess = sort(guess)\n    \n    \n    if length(game)==length(guess)\n\
    \        zeros = zeros(length(game))\n        \n    else\n        zeros = zeros(length(guess),length(game))\n\
    \    end\n    \n    for (i,game) in enumerate(game)\n        \n        for j in\
    \ (length(guess),length(game))\n            \n            if guess==sort(guess[(i+1):j])\n\
    \                zeros[i,j] = 0\n            else\n                zeros[i,j]\
    \ = abs(guess-game)\n            end\n            \n        end\n        \n  \
    \  end\n    \n    return zeros\nend\n</code>\n<|/ a tags=julia |>\n<| a dscore=0\
    \ |>\nBased on the answer given above. \n<code>", "    n = length(guess)\n   \
    \ m = length(game)\n    \n    guess = sort(guess)\n    game = sort(game)\n   \
    \ \n    score = copy(guess)\n    for j in 1:m\n        guess[j] = guess[j] - game[j]\n\
    \    end\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ", "  \
    \  guessor = Vector{Int64}(guess)\n    guessorsor = sort(guessor)\n    sc = Vector{Int64}(game)\n\
    \    scsor = sort(sc)\n    \n    return guessorsor .- scsor\nend", "    result\
    \ = zeros(length(guess))\n    for (i,x) in enumerate(guess)\n        if(game[i]\
    \ == x)\n            result[i] = 0\n        else\n            result[i] = abs(x\
    \ - game[i])\n        end\n    end\n    return result\nend\n</cell>\n<code language=julia-1.6>\n\
    compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n</cell>\n<code language=julia-1.6>\n\
    compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n</cell>\n<text>\nProblem 4\n\
    Given the function below which generates the next generation of matches for a\
    \ given number of rounds,\nand each match has a score and a list of the players\
    \ who guessed the score,\nwrite a function that generates the next generation\
    \ of matches for a given number of rounds.\nThe next generation will be returned\
    \ as a 2-dimensional array of matches, where each row \ncorresponds to the next\
    \ generation of matches for a given number of rounds.", "  guess, score = guess,\
    \ game\n  result = []\n  sumScore = zeros(length(guess))\n  sumGuess = zeros(length(guess))\n\
    \  for i = 1:length(guess)\n    sumScore[i] = 0\n    sumGuess[i] = 0\n  end\n\
    \  for i = 1:length(score)\n    sumScore[i] = sumScore[i] + score[i]\n    sumGuess[i]\
    \ = sumGuess[i] + guess[i]\n  end\n  for i = 1:length(guess)\n    if sumGuess[i]\
    \ == 0 && sumScore[i] > -sumScore[i]\n      push!(result, 0)\n    else\n     \
    \ push!(result, (sumScore[i] - sumGuess[i]) / sumGuess[i])\n    end\n  end\nend\n\
    compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n  guess, score\
    \ = guess, game\n  result = []\n  sumScore = zeros(length(guess))\n  sumGuess\
    \ = zeros(length(guess))\n  for i = 1:length(guess)\n    sumScore[i] = 0\n   \
    \ sumGuess[i] = 0\n  end\n  for i = 1:length(score)\n    sumScore[i] = sumScore[i]\
    \ + score[i]\n    sumGuess[i] = sumGuess[i] + guess[i]\n  end\n  for i = 1:length(guess)\n\
    \    if sumGuess[i] == 0 && sumScore[i] > -sumScore[i]\n      push!(result, 0)\n\
    \    else\n      push!(result, (sumScore[i] - sumGuess[i]) / sumGuess[i])\n  \
    \  end\n  end\nend\n</cell>\n<code language=julia-0.5>\ncompare([1, 2, 3, 4, 5,\
    \ 1], [1, 2, 3, 4, 2, -2])\n</cell>\n<code language=julia-0.5>\ncompare([0, 5,\
    \ 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n</cell>\n<text>\nExercise", "    \n    \n\
    end", "    \n    return guess\n    \nend", "    total = 0\n    for i = 1:length(guess)\n\
    \        diff = guess[i]-game[i]\n        if diff < 0\n            total += abs(diff)\n\
    \        else\n            total += diff\n        end\n    end\n    return total\n\
    end\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis only checks if the game matches\
    \ the guess, not if they have gotten it correctly. The task also states that the\
    \ score is 0 if they have gotten it correctly, and that is the exact problem.\n\
    <|/ c |>\n<| c |>\nI did not read the task carefully, as I am very aware of my\
    \ own mistakes. I will edit my answer to include the solution with your comments\
    \ in mind.\n<|/ c |>\n<| a dscore=1 |>\n<code>", "    \"\"\"\n    think we all\
    \ remember that feeling when the result of some long-awaited event is finally\
    \ known.\n    The feelings and thoughts you have at that moment are definitely\
    \ worth noting down and comparing.\n    Your task is to determine if a person\
    \ correctly guessed the results of a number of matches.\n    You are given two\
    \ vectors of scores and guesses of equal length, where each index shows a match.\n\
    \    Return a vector of the same length denoting how far off each guess was. If\
    \ they have guessed correctly,\n    the value is 0, and if not, the value is the\
    \ absolute difference between the guess and the score.\n    \n    \n    example:\n\
    \    \n    >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n    [0, 0, 0,\
    \ 0, 3, 3]\n    >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n    [4,\
    \ 4, 1, 0, 0, 6]\n    \"\"\"\n    guess = fill(guess, length(game))\n    diff\
    \ = zeros(length(guess))\n    for j in 1:length(guess)\n        diff[j] = abs(game[j]\
    \ - guess[j])\n    end\n    diff\nend", "    guesses, scores, correct = Array(guess),\
    \ Array(game), 0\n    guesses = sort(guesses)\n    scores = sort(scores)\n   \
    \ for (i, guess) in enumerate(guesses)\n        if guess == game[i]\n        \
    \    correct += 1\n        elseif guess > game[i]\n            scores[i] = scores[i]\
    \ - guess # subracts guessed value from score\n        elseif guess < game[i]\n\
    \            scores[i] = scores + guess # adds guessed value to score\n      \
    \  else\n            scores[i] = game[i]\n        end\n    end\n    return scores\n\
    end\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\nThis is my code for finding\
    \ the minimum number of tries before a game ends:\n<code>", "    if length( guess\
    \ ) != length(game)\n        error(\"The length of both vectors must match\")\n\
    \    end\n    \n    guess, game\n    \n    # initialize a vector of zeros\n  \
    \  score::Vector{Int64} = zeros(length(game))", "    \n    return Vector{Int64}(undef,\
    \ length(guess))\n    for i = 1:length(guess)\n        game[i] = abs(guess[i]\
    \ - game[i])\n    end\n    return game\nend\n</cell>\n<code language=julia-0.4>\n\
    guesses = rand(0:10); scores = rand(0:10)\ngame = compare(guesses, scores)\n</cell>\n\
    <code language=julia-0.4>\nsum(game)\n</cell>\n<text>\nExercise\nLet's use our\
    \ compare function to compare the guesses for the same game. How much does the\
    \ difference of each guess from the correct answer matter? What about if we compared\
    \ the guesses with different random scores? What if we used a larger vector for\
    \ the correct answer?", "    \n    for i=1:length(game)\n        for j=1:length(guess)\n\
    \            if((guess[j]-game[i])!=0)\n                return guess[j]-game[i]\n\
    \            end\n        end\n    end\n    return 0\nend", "    \n    guesses\
    \ = zeros(length(guess)) \n    \n    # Step 1: For each guess compare to the scores.\
    \ \n    # Create a counter that keeps track of the number of correct guesses\n\
    \    counter = 0\n    for g in guess \n        if game == g\n            guesses[counter]\
    \ = 1\n        else\n            guesses[counter] = abs(game - g)\n        end\n\
    \        counter += 1\n    end\n    \n    # Step 2: If all guesses are zero, then\
    \ the answer\n    # is 0. If one guess is less than zero, then the answer\n  \
    \  # is abs(guess). \n    # Otherwise, return the sum of the number of correct\
    \ guesses\n    if all(guesses == 0) || sum(guesses) == 0 \n        return zeros(length(guess))\
    \ \n    elseif sum(guesses) == 1\n        return guesses \n    else\n        return\
    \ guesses + guesses\n    end\nend\n</cell>\n<code language=julia-0.5>", "    guess,\
    \ score = _normalize_scores(guess, game)\n    guess = guess[sort(guess)]\n   \
    \ score = score(sort(game))\n    diff = guess[find(game .== guess, 1)]-score\n\
    \    return diff\nend\n</cell>\n<code language=julia-1.5>\n?compare\n</cell>\n\
    <code language=julia-1.5>\n@assert compare([1, 2, 3], [3, 2, 1]) == [0, 0, 0]\n\
    @assert compare([1, 2, 3], [4, 2, 3]) == [0, -2, 0]\n@assert compare([1, 2, 3],\
    \ [3, 2, 1]) == [0, 0, 0]\n@assert compare([1, 0, 0], [1, 0, 0]) == [0, 0]\n@assert\
    \ compare([1, 10, 0], [0, 9, 0]) == [10, 0]\n@assert compare([3, 2, 1], [4, 2,\
    \ 3]) == [0, -2, 0]\n@assert compare([0, 10, 3], [0, 9, 3]) == [10, 0]\n@assert\
    \ compare([0, 10, 3], [0, 9, 1]) == [10, 0]\n@assert compare([10, 0, 3], [0, 9,\
    \ 3]) == [10, 0]\n@assert compare([-5, 7, 10], [-6, 9, 10]) == [5, 5]\n@assert\
    \ compare([10, 3, 1], [9, 1, 5]) == [5, 2]\n</cell>\n<code language=julia-1.5>\n\
    @assert compare([-1, 0, 1], [0, 1, 2]) == [-2, -1, 1]\n@assert compare([1, 10,\
    \ 1], [9, 1, 2]) == [5, 2, 0]\n</cell>\n<text>\nEx 2.3: Comparing Two Arrays",
  "    if length(game) != length(guess) \n        print(\"Error: game and guess vectors\
    \ have different lengths\") \n        throw(ArgumentError(\"Game and guess vectors\
    \ have different lengths\")) \n    end\n    \n    return map(x -> abs(x - guess),\
    \ game)\nend\n</cell>\n<code language=julia-1.0>\nx = zeros(10)\nx[4] = 4\n</cell>\n\
    <code language=julia-1.0>\nx\n</cell>\n<code language=julia-1.0>\n@test compare([1,2,3,4,5,6],\
    \ [7,2,8,2,9,0]) == [0, 0, 0, 1, 1, 1]\n@test compare([4,2,4,3,4,2], [5,6,3,2,1,1])\
    \ == [0, 0, 1, 1, 2, 0]\n@test compare([4,5,6,7,8], [4,5,6,7,8]) == [0, 1, 1,\
    \ 1, 0, 0]\n</cell>\n<code language=julia-1.0>", "    guess_size = length(guess)\n\
    \    score_size = length(game)\n    diff_vec = [0 for _ in 1:guess_size]\n   \
    \ \n    for i in 1:guess_size\n        if guess[i] == game[i]\n            diff_vec[i]\
    \ = 0\n        elseif guess[i] != game[i]\n            diff_vec[i] = abs(guess[i]\
    \ - game[i])\n        else\n            diff_vec[i] = 0\n        end\n    end\n\
    \    return diff_vec\nend", "    guesses = length(guess)\n    scores = length(game)\n\
    \    \n    if guesses == 0 \n        error(\"guesses must be a non-zero number\"\
    )\n    end\n    \n    if scores == 0 \n        error(\"scores must be a non-zero\
    \ number\")\n    end\n    \n    \n    \n    guesses_scores = {} \n    for i =\
    \ 1:guesses\n        key = game[i]\n        value = guess[i]\n        if haskey(guesses_scores,\
    \ key)\n            guesses_scores[key] = value\n        else\n            guesses_scores[key]\
    \ = value\n        end\n    end\n    \n    \n    scores_to_guesses = {}\n    \n\
    \    for i = 1:scores\n        key = guess[i]\n        value = game[i]\n     \
    \   if haskey(scores_to_guesses, key)\n            scores_to_guesses[key] = value\n\
    \        else\n            scores_to_guesses[key] = value\n        end\n    end\n\
    \    \n    \n    \n    guesses_scores = sort(guesses_scores)\n    scores_to_guesses\
    \ = sort(scores_to_guesses)\n    \n    \n    guesses_guesses = {}\n    for i =\
    \ 1:guesses\n        key = guesses_scores[i]\n        value = scores_to_guesses[i]\n\
    \        if haskey(guesses_guesses, key)\n            guesses_guesses[key] = value\n\
    \        else\n            guesses_guesses[key] = value\n        end\n    end\n\
    \    \n    guesses_guesses = sort(guesses_guesses)\n    \n    \n    guesses_guesses_final\
    \ = zeros(guesses)\n    \n    for i = 1:guesses\n        key = guesses_guesses[i]\n\
    \        value = guesses_guesses_final[i]\n        guesses_guesses_final[i] =\
    \ abs(value - game[i])\n    end\n    \n    return guesses_guesses_final\nend",
  "    game = sort(game)\n    guess = sort(guess)\n    \n    l = length(guess)\n \
    \   if l != length(game)\n        error(\"Length mismatch on compare\")\n    end\n\
    \    res = zeros(Int64, l)\n    \n    if l == 1\n        res[0] = guess[0] - game[0]\n\
    \        return res\n    end\n    \n    for i=1:l\n        if guess[i] != game[i]\n\
    \            res[i] = guess[i] - game[i]\n        else\n            res[i] = 0\n\
    \        end\n    end\n    return res\nend\n</cell>\n<code language=julia-1.3>\n\
    compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n</cell>\n<text>\nPutting it\
    \ all together\nSo far we have been playing the game against the computer.  A\
    \ human player has some intuition as to how to play the game, but a computer has\
    \ to figure it out.  We will do that by writing some code that will play the game\
    \ against the computer.  Recall that we are trying to find how many matches are\
    \ in the game as we go along.", "    l = length(guess)\n    p = length(game)\n\
    \    \n    if p == 0 or l == 0\n        return guess\n    end\n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    return guess\nend", "    \n\"\"\"\n   \
    \ Your task is to determine if the number of correct guesses is a perfect square.\n\
    \    You will get several guesses, and you have to guess which number you think\
    \ belongs to a square. \n    You have to write a function which checks if the\
    \ number of correct guesses is equal to the number of perfect squares.\n    The\
    \ function should return a Boolean value.\n    \n    example:\n    \n    >>> perfectsquare([0,\
    \ 5, 0, 0, 0, 4])\n    True\n    >>> perfectsquare([4, 4, 1, 0, 0, 6])\n    False\n\
    \    \"\"\"", "    \n    leng = length(game)\n    leng = length(guess)\n    \n\
    \    if leng != length(guess)\n        error(\"guess and game sizes differ\")\n\
    \    end\n    \n    vec::Vector{Int64} = zeros(leng)\n    for (ii) in 1:leng\n\
    \        if (guess[ii] == game[ii])\n            vec[ii] = 0\n        elseif guess[ii]\
    \ > game[ii]\n            vec[ii] = guess[ii] - game[ii]\n        else\n     \
    \       vec[ii] = abs(guess[ii] - game[ii])\n        end\n    end\n    \n    return\
    \ vec\nend\n</code>\n<|/ a tags=julia |>\n<| a |>\n<code>", "    \n    guesses\
    \ = zeros(guess.length)\n    scores = zeros(game.length)", "    local result=copy(guess)\n\
    \    result=zero(guess)\n    for (i,j)=eachindex(result) \n    if game[i]==guess[i]\
    \ then result[j]=0 else result[j]=abs(game[i]-guess[i])\n    end\n    return result\n\
    end\n</code>\n<|/ a |>\n<| a tags=julia dscore=0 |>\nFor small arrays, Julia's\
    \ broadcasting is very fast.  But for larger arrays, the Julia compiler has to\
    \ go through more steps and is slower.\n<code>", "    lenght=length(game)\n  \
    \  lenght2=length(guess)\n    \n    for i=1:lenght\n        \n        if abs(game[i]-guess[i])<=0\n\
    \            \n            game[i]=0\n            guess[i]=0\n            \n \
    \       else\n            \n            game[i]=abs(game[i]-guess[i])\n      \
    \  end\n    end\n    \n    return game\nend\n</code>\n<|/ a dscore=2 |>\n<| a\
    \ dscore=0 tags=julia,arrays |>\nThe answer from Vladimir Putin is actually correct,\
    \ but I think there is a more elegant way to solve this problem. In particular,\
    \ the first loop that sets every element of the game array equal to zero can just\
    \ be replaced with two lines setting the first and second array elements to 0:\n\
    <code>", "    \n    \"\"\"\n    \n    \n    ", "    correct = zeros(eltype(guess),\
    \ length(game))\n    for j in eachindex(guess)\n        correct[j] = game[j] ==\
    \ guess[j] # this is pretty inefficient, but whatever\n    end\n    return correct\n\
    end\n</cell>\n<code language=julia-1.1>\n@time compare([1,2,3,4,5,1], [1,2,3,4,2,-2])\n\
    </cell>\n<code language=julia-1.1>\n@time compare([0,5,0,0,0,4], [4,1,1,0,0,-2])\n\
    </cell>\n<text>\nAvoiding loops\nJulia has various constructs to help make your\
    \ code more concise.  One of these is using broadcasting.  Broadcasting allows\
    \ you to perform element-wise operations between arrays of different dimensions.\
    \  It also allows you to manipulate arrays via their index and slices.  For example,\
    \ if we want to increment each element in a vector by one, we could do so without\
    \ looping over the elements individually:", "    compare = zeros(length(guess),\
    \ 1) \n    for i = 1:length(guess)\n        if guess[i] < 0 || guess[i] > length(game)\n\
    \            compare[i] = guess[i]\n        else\n            compare[i] = abs(guess[i]\
    \ - game[guess[i]])\n        end\n    end\n    return compare\nend\n</cell>\n\
    <code language=julia-1.1>\ncompare([1,2,3,4,5], [1,2,3,4,5])\n</cell>\n<code language=julia-1.1>\n\
    compare([1,2,3,4,5], [1,2,3,4])\n</cell>\n<code language=julia-1.1>\ncompare([1,2,3,4,5],\
    \ [1,2])\n</cell>\n<code language=julia-1.1>\ncompare([1,2,3,4,5], [1,3,5])\n\
    </cell>\n<code language=julia-1.1>\ncompare([1,2,3,4,5], [1,2,4,5])\n</cell>\n\
    <code language=julia-1.1>\ncompare([1,2,3,4,5], [1,2,5,4])\n</cell>\n<code language=julia-1.1>\n\
    compare([1,2,3,4,5], [1,2,3,4,5])\n</cell>\n<code language=julia-1.1>\ncompare([1,2,3,4,5],\
    \ [1,2,3,6])\n</cell>\n<code language=julia-1.1>\ncompare([1,2,3,4,5], [1,2,3])\n\
    </cell>\n<code language=julia-1.1>\ncompare([1,2,3,4,5], [1,2,4,5])\n</cell>\n\
    <code language=julia-1.1>\ncompare([1,2,3,4,5], [1,2,3,4,5])\n</cell>\n<code language=julia-1.1>\n\
    compare([1,2,3,4,5], [1,2,3,4,5,6])\n</cell>\n<code language=julia-1.1>\ncompare([1,2,3,4,5,6],\
    \ [1,2,3,4,5])\n</cell>\n<code language=julia-1.1>\ncompare([1,2,3,4,5,6], [1,2,3,4,5])\n\
    </cell>\n<code language=julia-1.1>\ncompare([1,2,3,4,5,6], [1,2,3,4,6])\n</cell>\n\
    <code language=julia-1.1>\ncompare([1,2,3,4,5,6], [1,2,3,4,5,6])\n</cell>\n<code\
    \ language=julia-1.1>\ncompare([1,2,3,4,5,6], [1,2,3,4,5,6,7])\n</cell>\n<code\
    \ language=julia-1.1>\ncompare([1,2,3,4,5,6], [1,2,3,4,5,6,7])\n</cell>\n<code\
    \ language=julia-1.1>\ncompare([1,2,3,4,5,6], [1,2,3,4,5,6,8])\n</cell>\n<code\
    \ language=julia-1.1>\ncompare([1,2,3,4,5,6,8], [1,2,3,4,5,6])\n</cell>\n<code\
    \ language=julia-1.1>\ncompare([1,2,3,4,5,6,8], [1,2,3,4,5,6,8])\n</cell>\n<code\
    \ language=julia-1.1>\ncompare([1,2,3,4,", "    len1 = length(guess)\n    len2\
    \ = length(game)\n    \n    if len1 !=len2\n        error(\"the length of game\
    \ and guess must be the same\")\n    end\n    \n    match_scores = [0; len1]\n\
    \    \n    for i=1:len1\n        if guess[i] == game[i]\n            match_scores[i]\
    \ = 0\n        else\n            match_scores[i] = abs(guess[i] - game[i])\n \
    \       end\n    end\n    \n    return match_scores\nend", "    result = Vector{Int64}(guess.length)\n\
    \    for i in 1:length(guess)\n        result[i] = guess[i] - game[i]\n    end\n\
    \    result\nend", "    diff::Vector{Int64} = []\n    for i in game\n        if\
    \ guess == game\n            push!(diff, 0)\n        else\n            push!(diff,\
    \ abs(guess - game))\n        end\n    end\n    return diff\nend\n</cell>\n<text>\n\
    Write a function, is_valid_guess(guess, guesses, game) that returns true or false\
    \ depending on if the guesses vector contains an element that is in the games\
    \ vector. Hint: use isin().", "    \n    n = length(game)\n    m = length(guess)\n\
    \    score = 0\n    for idx = 1:n\n        if game[idx] == guess[idx] \n     \
    \       score += 1 \n        end\n    end\n    for idx = 1:m\n        if game[idx]\
    \ != guess[idx] \n            score += abs(game[idx] - guess[idx])\n        end\n\
    \    end\n    \n    return score.==n? Vector{Int64}(0) : score.==m? Vector{Int64}(abs(game-guess))\
    \ : score.==n+m? Vector{Int64}[abs(game-guess)] : score\nend\n</code>\nAnd this\
    \ is the result I got:\n<code>\njulia> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4,\
    \ 2, -2])\n1\xD75 Vector{Int64}:\n 0 0 0 0 3 3\n 0 0 0 1 4 3\n 0 0 0 5 2 1\n 0\
    \ 0 0 4 1 0\n 0 0 3 4 2 0\n 0 0 3 4 2 0\n 0 0 3 4 2 0", "    guesses = zeros(length(guess))\n\
    \    scores = zeros(length(game))\n    guesses[:]=0\n    scores[:]=0\n    \n \
    \   for i = 1:length(guess)\n        scores[i] = abs(guess[i]-game[i])\n    end\n\
    \    \n    for i = 1:length(guess)\n        guesses[i] = abs(guess[i]-scores[i])\n\
    \    end\n    \n    return guesses\nend\n</cell>\n<code language=julia-1.5>\n\
    @test compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n@test compare([0, 5, 0,\
    \ 0, 0, 4], [4, 1, 1, 0, 0, -2])\n</cell>\n<code language=julia-1.5>\n# Let's\
    \ try this again, using the function we created before for our test\n@time guesses\
    \ = compare(game, guess)\n</cell>\n<code language=julia-1.5>\n@test guesses[1]==1\n\
    @test guesses[2]==3\n@test guesses[3]==0\n@test guesses[4]==2\n@test guesses[5]==3\n\
    </cell>\n<text>\nExercise: Write a function called compare_all that does the same\
    \ thing as our compare function but takes a vector with all the games and guesses,\
    \ and returns the same vector of guesses.", '    # your code goes here', "   \
    \ \n    end = 0\n    correct = 0\n    guesses = 0\n    \n    while end < length(game)\n\
    \        guesses+=1\n        diff = abs(guess[end]-game[end])\n        if diff\
    \ == 0 \n            correct+=1\n        end+=1\n    end\n    return guess\nend",
  "    if length(guess) != length(game)\n        error(\"length of game and guess\
    \ do not agree\")\n    end\n    \n    best = 0\n    for idx = 1:length(game)\n\
    \        if abs(game[idx] - guess[idx]) > abs(best - guess[idx])\n           \
    \ best = guess[idx]\n        end\n    end\n    \n    best = abs(best)\n    return\
    \ [best for i in 1:length(guess)]\nend", "    guesses = zeros(length(guess), 1)\
    \ \n    scores = zeros(length(game), 1) \n    \n    for i in 1:length(guess)\n\
    \        guesses[i] = guess[i]\n    end\n    for i in 1:length(game)\n       \
    \ scores[i] = game[i]\n    end\n    \n    correct = similar(guesses)\n    for\
    \ j in 1:length(guesses)\n        if guesses[j] == scores[j]\n            correct[j]\
    \ = 1 # if guess correct, mark correct\n        elseif guesses[j] > scores[j]\n\
    \            correct[j] = guesses[j] - scores[j] # if guess wrong, calculate new\
    \ score, add to correct\n        end\n    end\n    return correct\nend \n</cell>\n\
    <code language=julia-1.0>\n## Let's test the compare function with example values\
    \ we already have in our test cell - \n## we'll use these in our exercise as well.\n\
    compare([1,2,3,4,5,6], [1,2,3,4,5,6])\n</cell>\n<code language=julia-1.0>\n##\
    \ Our compare function is working as expected in our test cell.\n## Let's now\
    \ try it with our example games.", "    guess = copy(guess)\n    \n    matchsum\
    \ = 0\n    for i = 1:length(guess)\n        if guess[i] != game[i]\n         \
    \   guess[i] = 0\n        end\n        matchsum += guess[i]\n    end\n    return\
    \ guess\nend", "    \"\"\"\n    Compare two vectors of scores and guesses.\n \
    \   \"\"\"\n    # initialize a counter for number of correct\n    # guesses to\
    \ 0\n    num_correct = 0\n    # iterate through the guesses\n    for guess_index\
    \ in guess:\n        # iterate through the game\n        for game_index in game:\n\
    \            # if current guess is wrong\n            if guess_index != game_index:\n\
    \                # increment counter\n                num_correct += 1\n    #\
    \ if counter has guessed correctly return 0\n    # otherwise return abs(num_correct\
    \ - len(guess)) \n    return num_correct if len(guess) == num_correct else abs(num_correct\
    \ - len(guess))\nend\n</cell>\n<code language=julia-1.5>\n# Run this cell to test\
    \ your code\ntest_vectors = [\n    [1, 2, 3, 4, 5, 1],\n    [1, 2, 3, 4, 2, -2],\n\
    \    [0, 5, 0, 0, 0, 4],\n    [4, 1, 1, 0, 0, -2],\n]\nfor test_vector in test_vectors:\n\
    \    print(compare(test_vector, [1, 2, 3, 4, 2, -2]))\n</cell>\n<text>\nPart 4:\
    \ Perfect Pair\nNow let's run our algorithm and see how it does. You will need\
    \ to think about the vectors and arrays a bit and how they relate.", "    \n \
    \   for i in eachindex(guess)\n        if abs(game[i] - guess[i]) < abs(game[i]\
    \ - guess[i + 1]) \n            return guess[i] / game[i]\n        else \n   \
    \         return guess[i] / game[i]\n    end\n    return guess[end] / game[end]\n\
    end\n</cell>\n<code language=julia-0.5>", "        guess = sort(guess)\n     \
    \   diff = guess - game\n        diff2 = guess - sort(game)\n        if all(diff2\
    \ == 0) == false\n            diff = sort(diff)\n        end\n        return diff\n\
    \    end\n</code>\n<|/ a tags=performance,function,julia |>\n<| a |>\nHere is\
    \ a solution that avoids sorting and avoids copying the original data. It does\
    \ this by iterating over the data twice and comparing the two values at each point\
    \ in the iteration until both values are equal. The comparison is done by checking\
    \ if the difference between the two values is zero.\n<code>", "    \n    return\
    \ guess[findall(guess .== game)]\nend", "        \n    answer = 0\n    \n    for\
    \ g in guess[ : length(game)] \n        \n        if guess == game\n         \
    \   answer = 0\n        elsif g > 0\n            answer = answer + abs(g - game[find(game\
    \ .> 0)])\n        else\n            answer = answer + abs(g - game[find(game\
    \ .< 0)])\n        end\n    end\n    \n    return answer\nend\n</cell>\n<code\
    \ language=julia-1.5>\n?compare\n</cell>\n<text>\n6. Confidence Intervals\nWhen\
    \ a sample is drawn from a population, how confident are we that the sample is\
    \ actually drawn? \nThis is often called a confidence interval.", "    \"\"\"\n\
    \    Function to compare two games. \n    \"\"\"\n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", " \
    \   guess = [sum(guess)]\n    return \nend\n</cell>\n<code language=julia-0.4>\n\
    ?compare\n</cell>\n<text>\nProblem 3\nWrite a function that takes two vectors\
    \ as arguments and returns a vector, where each element is the cumulative sum\
    \ of the elements of the first vector after the first element of the second vector.",
  "    correct = 0\n    for i in 1:length(game)\n        correct += abs(game[i] -\
    \ guess[i])\n    end\n    correct\nend\n\"\"\"\n    findMatcher(guesses, scores)\n\
    \    \n    Return the Matcher object used to find the best possible match. \n\
    \    \n    guesses is a vector of guesses. \n    scores is a vector of scores,\
    \ where each index corresponds to one guess. \n    \n    Matcher is an abstract\
    \ type that defines functions to find the best possible match between guesses\
    \ and scores, and return the\n    guess and score vectors. \n    \n    It is expected\
    \ that each guess corresponds to a score, and that each score corresponds to a\
    \ guess. \n    \n    When a new Matcher is created, it initializes itself with\
    \ the best possible match between guesses and scores. \n    The best match is\
    \ determined by the Matcher function findMatcher(guesses, scores). \n    \n  \
    \  \n    example:", "    \n    #first we find if each element of the guess is\
    \ in the game\n    guesses = Vector{Int64}(guess)\n    matches = (guesses .==\
    \ game)\n    \n    # now we iterate through the game and find the max difference\
    \ from the guess\n    #for each element in the game\n    for game in games\n \
    \       \n        #if the match is true (True = match from guess) the game is\
    \ correct\n        guess = guess .== game\n        \n        #get the absolute\
    \ difference between guess and the scores\n        max_difference = abs((guess[matches]\
    \ - game[matches]) ./ guess[matches])\n        \n        \n        #return the\
    \ max_difference and the index of that match\n        if max_difference == 0\n\
    \            return(0)\n        else\n            return(max_difference, indexes[matches])\n\
    \        end\n    end\nend\n</cell>\n<code language=julia-1.6>\ncompare([1, 2,\
    \ 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n</cell>\n<code language=julia-1.6>\ncompare([0,\
    \ 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n</cell>\n<code language=julia-1.6>", " \
    \   if length(game)!=length(guess)\n        throw(ArgumentError(\"Vectors must\
    \ have the same length\"))\n    end", "    guesses = 0\n    scores = 0\n    while\
    \ guesses < length(guess)\n        if guess[guesses] != game[guesses]\n      \
    \      scores += abs(guess[guesses] - game[guesses])\n        else\n         \
    \   scores += abs(guess[guesses] - game[guesses])\n            guesses +=1\n \
    \       end\n    end\n    return scores\nend\n</code>\nand here's a short example\
    \ of how you can use the compare function above:\n<code>\ngame = [1, 2, 3, 4,\
    \ 5, 1]\nguess = [1, 2, 3, 4, 2, -2]\ncompare_result = compare(game, guess)\n\
    </code>\nwhich produces the following output:\n<code>\ncompare_result = [0, 0,\
    \ 0, 0, 3, 3]\n</code>\nso I hope that helps.\n<|/ a tags=math,algorithm,language-agnostic\
    \ dscore=0 |>\n<| c |>\nI appreciate the answer, but I asked specifically for\
    \ a non-brute-force solution. I do appreciate the fact that the problem is a bit\
    \ more complicated than I originally asked.\n<|/ c |>\n<| c |>\nI realize that\
    \ this is not what you asked for, but this solution has two obvious benefits:\
    \ one is that the code is short and readable, and the other is that it is the\
    \ most efficient solution possible.\n<|/ c |>\n<| c |>\n, yes, I realize that\
    \ too. Thank you for actually answering the question. I was really looking for\
    \ an efficient way of doing this, though (I'm sure that there are many ways, especially\
    \ on how you solve it).\n<|/ c |>\n<| c |>\n, thank you for taking the time to\
    \ answer this. I appreciate it!\n<|/ c |>\n<| c |>\n, thank you for taking the\
    \ time to answer this. I appreciate it!\n<|/ c |>\n<| a dscore=0 |>\nI don't think\
    \ the two arrays are of equal length, so you won't be able to do any comparisons\
    \ at all (unless you only care to compare the first element of each array).  \n\
    To compare the arrays, I would suggest converting them to strings.  Then you can\
    \ sort them, and compare the first character of each.\n<|/ a tags=math,algorithm,language-agnostic\
    \ |>\n<| c |>\nI suppose you mean that I will have to compare every element of\
    \ both arrays, just like I compared each element of one array to the corresponding\
    \ element of another array. Because the arrays themselves are of unequal length,\
    \ I can't compare them in that manner, right?\n<|/ c |>\n<| c |>\nNo, it's not\
    \ true. If you just compared the first element of both array", "    if length(guess)\
    \ != length(game)\n        error(\"guess and game must have same length\")\n \
    \   end", "    n = length(guess)\n    scores = zeros(n)\n    for i = 1:n\n   \
    \     scores[i] = game[i] - guess[i]\n    end\n    return scores\nend\n</cell>\n\
    <code language=julia-0.5>\ncompare([10, 0, 0, 100, 0], [10, 0, 0, 100, 0])\n</cell>\n\
    <code language=julia-0.5>\ncompare([10, 0, 0, 100, 0], [10, 0, 0, 10, 0])\n</cell>\n\
    <code language=julia-0.5>\ncompare([10, 0, 0, 100, 0], [10, 0, 0, 10, 1])\n</cell>\n\
    <code language=julia-0.5>\ncompare([10, 0, 0, 100, 0], [10, 0, 0, 100, 1])\n</cell>\n\
    <code language=julia-0.5>\ncompare([10, 0, 0, 100, 0], [10, 0, 0, 100, 2])\n</cell>\n\
    <code language=julia-0.5>\ncompare([10, 0, 0, 100, 0], [10, 0, 0, 100, 3])\n</cell>\n\
    <code language=julia-0.5>\ncompare([10, 0, 0, 100, 0], [10, 0, 0, 100, 4])\n</cell>\n\
    <code language=julia-0.5>\ncompare([10, 0, 0, 100, 0], [10, 0, 0, 100, 5])\n</cell>\n\
    <code language=julia-0.5>\ncompare([10, 0, 0, 100, 0], [10, 0, 0, 100, 6])\n</cell>\n\
    <code language=julia-0.5>\ncompare([10, 0, 0, 100, 0], [10, 0, 0, 100, 7])\n</cell>\n\
    <code language=julia-0.5>\ncompare([10, 0, 0, 100, 0], [10, 0, 0, 100, 8])\n</cell>\n\
    <code language=julia-0.5>\ncompare([10, 0, 0, 100, 0], [10, 0, 0, 100, 9])\n</cell>\n\
    <code language=julia-0.5>\ncompare([10, 0, 0, 100, 0], [10, 0, 0, 100, 10])\n\
    </cell>\n<code language=julia-0.5>\ncompare([10, 0, 0, 100, 0], [10, 0, 0, 100,\
    \ 11])\n</cell>\n<code language=julia-0.5>\ncompare([10, 0, 0, 100, 0], [10, 0,\
    \ 0, 100, 12])\n</cell>\n<code language=julia-0.5>\ncompare([10, 0, 0, 100, 0],\
    \ [10, 0, 0, 100, 13])\n</cell>\n<code language=julia-0.5>\ncompare([10, 0, 0,\
    \ 100, 0], [10, 0, 0, 100, 14])\n</cell>\n<code language=julia-0.5>\ncompare([10,\
    \ 0, 0, 100, 0], [10, 0, 0, 100, 15])\n</cell>\n<code language=julia-0.5>\ncompare([10,\
    \ 0, 0, 100, 0], [10, 0, 0, 100, 16])\n</cell>\n<code language=julia-0.5>\ncompare([10,\
    \ 0, 0, 100, 0], [10, 0, 0, 100, 17])\n</cell>\n<code language=julia-0.5>\ncompare([10,\
    \ 0, 0, 100, 0], [10, 0, 0, 100, 18])\n</cell>\n<code language=julia-0.5>\ncompare([10,\
    \ 0, 0, 100, 0], [10, 0, 0, 100, 19])\n</cell>\n<code language=julia-0.5", " \
    \   \n    guesses=guess(guesses)\n    scores=game(game)\n    \n    correct=guesses.==scores\n\
    \    \n    return [sum(correct)-abs(sum(guesses)-sum(scores))+1]\nend\n</cell>\n\
    <code language=julia-0.4>\n\"\"\"\n    compare(guesses::Vector{Int64}, scores::Vector{Int64})::Vector{Int64}\n\
    \    \n    Calculate the absolute difference of each guess from the score\n  \
    \  \n    \n    example:", "    difference = 0\n    for i=1:length(game)\n    \
    \    difference = abs(game[i]-guess[i]) + difference\n    end\n    return difference\n\
    end\n</cell>\n<cell>\nx = collect(1:25)\ny = collect(1:25)\n</cell>\n<cell>\n\
    @time compare(x, y)\n</cell>\n<text>\nUsing @timeit decorator to time a function\
    \ as a whole", "    \n    length1 = length(game)\n    length2 = length(guess)\n\
    \    \n    difference = zeros(Int64, length1)\n    \n    for i = 1:length1\n \
    \       if game[i] == guess[i]\n            difference[i] = 0\n        else\n\
    \            difference[i] = abs(game[i] - guess[i])\n        end\n    end\n \
    \   \n    return difference\nend\n</cell>\n<cell>\n# test the compare function\n\
    @test compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n@test compare([0, 5, 0,\
    \ 0, 0, 4], [4, 1, 1, 0, 0, -2])\n</cell>\n<text>\nAwesome! We've now implemented\
    \ our compare function which calculates the absolute difference between each guess\
    \ and the game score and returns a vector of these differences.", "    guesses_distance::Vector{Int64}\
    \ = Vector{Int64}()\n    guesses_distance[] = guess-game\n    guesses_distance\n\
    end\n\"\"\"\n    Vector{Int64} guesses_distance = compare(game, guess)", "  guess\
    \ = sort(guess)\n  game = sort(game)\n  \n  diff = zeros(length(guess), 1)\n \
    \ for i = 1:length(guess)\n    diff[i] = guess[i] - game[i]\n  end\n  return diff\n\
    end\n  \n# === === === === === === === === === === === === === === === === ===\
    \ === === === === === === === === === === === === === === === === === === ===\
    \ === === === === === === === === === === === === === === === === === === ===\
    \ === === === === === === === === === === === === === === === === === === ===\
    \ === === === === === === === === === === === === === === === === === === ===\
    \ === === === === === === === === === === === === === === === === === === ===\
    \ === === === === === === === === === === === === === === === === === === ===\
    \ === === === === === === === === === === === === === === === === === === ===\
    \ === === === === === === === === === === === === === === === === === === ===\
    \ === === === === === === === === === === === === === === === === === === ===\
    \ === === === === === === === === === === === === === === === === === === ===\
    \ === === === === === === === === === === === === === === === === === === ===\
    \ === === === === === === === === === === === === === === === === === === ===\
    \ === === === === === === === === === === === === === === === === === === ===\
    \ === === === === === === === === === === === === === === === === === === ===\
    \ === === === === === === === === === === === === === === === === === === ===\
    \ === === === === === === === === === === === === === === === === === === ===\
    \ === === === === === === === === === === === === === === === === === === ===\
    \ === === === === === === === === === === === === === === === === === === ===\
    \ === === === === === === === === === === === === === === === === === === ===\
    \ === === === === === === === === === === === === === === === === === === ===\
    \ === === === === === === === === === === === === === === === === === === ===\
    \ === === === === === === === === === === === === === === === === === === ===\
    \ === === === === === === === === === === === === === === === === === === ===\
    \ === === === === === === === === ", "    guess_is_correct = (guess==game)\n \
    \   guess_is_correct = sort(guess_is_correct) ## sort the guess vector\n    guess_is_correct\
    \ = fliplr(guess_is_correct) ## flip the result of the sort\n    guess_is_correct\
    \ = flipud(guess_is_correct) ## flip the result of the sort\n    guess_is_correct\
    \ = fliplr(guess_is_correct) ## flip the result of the sort\n    return guess_is_correct\n\
    end\n\"\"\"\n    guess(game::Vector{Int64}, scores::Vector{Int64}, num_guesses::Int64)::Vector{Int64}\n\
    \    guess the correct guesses\n    \n    \n    example:", "    \n    return zeros(length(guess))\
    \ \nend", "    if game==guess \n        return zeros(length(guess))\n    end\n\
    \    \n    result=0\n    \n    for ii=1:length(game)\n        if game[ii]==guess[ii]\n\
    \            result+=1\n        else\n            if guess[ii]>game[ii]\n    \
    \            result+=guess[ii]-game[ii]\n            else\n                result+=game[ii]-guess[ii]\n\
    \            end\n        end\n    end\n    \n    if result>0\n        return\
    \ zeros(length(guess))\n    else\n        return result\n    end\nend", "    guess\
    \ = Vector{Int64}(guess)\n    game = Vector{Int64}(game)\n    \n    len1 = length(guess)\n\
    \    len2 = length(game)\n    \n    if len1 != len2\n        error(\"Game and\
    \ guess vectors should be equal length.\")\n    end\n    \n    correct = zeros(len1)\n\
    \    for i = 1:len1\n        if guess[i] == game[i]\n            correct[i] =\
    \ 1\n        end\n    end\n    \n    # Calculate sum of difference between guess\
    \ and correct for each guess\n    sum = 0\n    for i = 1:len1\n        sum +=\
    \ abs(guess[i] - game[i])\n    end\n    \n    return correct, sum\nend\n</cell>\n\
    <code language=julia-1.1>", "    \"\"\"\n    Compare two guesses against game\
    \ scores to determine how far off each one was\n    \"\"\"\n    \n    ", "   \
    \ a=length(guess)\n    b=length(game)\n    guess=convert(Array{Int64}, guess)\n\
    \    game=convert(Array{Int64}, game)\n    c=zeros(a)\n    i=0\n    while i <=\
    \ a-1\n        c[i]=abs(guess[i]-game[i])\n        i=i+1\n    end\n    return\
    \ c\nend\n</cell>\n<code language=julia-1.5>\nguess=ones(1,10)\ngame=ones(10,1)\n\
    </cell>\n<code language=julia-1.5>\n# your code here\n</cell>\n<code language=julia-1.5>\n\
    guess=ones(1,10)\ngame=ones(10,10)\n</cell>\n<code language=julia-1.5>\n# your\
    \ code here\n</cell>\n<text>\nWrite a function to determine if a team is better\
    \ than another team", "    \"\"\"\n    I think we all remember that feeling when\
    \ the result of some long-awaited\n    event is finally known. The feelings and\
    \ thoughts you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two vectors of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return a vector of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:", "    match = 0 \n    for (i,j) in\
    \ zip(game,guess)\n        match += abs(i-j)\n    end\n    return match\nend\n\
    </cell>\n<code language=julia-1.0>\n@assert compare([1, 3, 5, 7, 9], [2, 3, 6,\
    \ 4, 8]) == 5\n@assert compare([1, 4, 3, 7, 9], [2, 3, 4, 5, 8]) == 1\n@assert\
    \ compare([1, 4, 3, 7, 9], [2, 3, 4, 6, 8]) == 1\n@assert compare([1, 4, 3, 7,\
    \ 9], [2, 3, 4, 7, 8]) == 0\n@assert compare([1, 4, 3, 7, 9], [2, 3, 4, 8, 8])\
    \ == 0\n@assert compare([1, 4, 3, 7, 9], [2, 3, 4, 9, 8]) == 0\n@assert compare([1,\
    \ 4, 3, 7, 9], [2, 3, 4, 8, 9]) == 0\n@assert compare([1, 4, 3, 7, 9], [2, 3,\
    \ 4, 9, 9]) == 0\n@assert compare([1, 4, 3, 7, 9], [2, 3, 5, 8, 9]) == 1\n@assert\
    \ compare([1, 4, 3, 7, 9], [2, 3, 5, 9, 9]) == 0\n@assert compare([1, 4, 3, 7,\
    \ 9], [2, 3, 5, 8, 9]) == 1\n@assert compare([1, 4, 3, 7, 9], [2, 3, 5, 9, 9])\
    \ == 0\n@assert compare([1, 4, 3, 7, 9], [2, 3, 6, 8, 9]) == 1\n@assert compare([1,\
    \ 4, 3, 7, 9], [2, 3, 6, 9, 9]) == 0\n@assert compare([1, 4, 3, 7, 9], [2, 3,\
    \ 6, 8, 9]) == 1\n@assert compare([1, 4, 3, 7, 9], [2, 3, 6, 9, 9]) == 0\n@assert\
    \ compare([1, 4, 3, 7, 9], [2, 3, 4, 8, 10]) == 1\n@assert compare([1, 4, 3, 7,\
    \ 9], [2, 3, 4, 9, 10]) == 0\n@assert compare([1, 4, 3, 7, 9], [2, 3, 5, 8, 10])\
    \ == 1\n@assert compare([1, 4, 3, 7, 9], [2, 3, 5, 9, 10]) == 0\n@assert compare([1,\
    \ 4, 3, 7, 9], [2, 3, 5, 8, 10]) == 1\n@assert compare([1, 4, 3, 7, 9], [2, 3,\
    \ 5, 9, 10]) == 0\n@assert compare([1, 4, 3, 7, 9], [2, 3, 6, 8, 10]) == 1\n@assert\
    \ compare([1, 4, 3, 7, 9], [2, 3, 6, 9, 10]) == 0\n@assert compare([1, 4, 3, 7,\
    \ 9], [2, 3, 6, 8, 10]) == 1\n@assert compare([1, 4, 3, 7, 9], [2, 3, 6, 9, 10])\
    \ == 0\n@assert compare([1, 4, 3, 7, 9], [2, 3, 4, 8, 11]) == 1\n@assert compare([1,\
    \ 4, 3, 7, 9], [2, 3, 4, 9, 11]) == 0\n@assert compare([1, 4, 3, 7, 9], [2, 3,\
    \ 5, 8, 11]) == 1\n@assert compare([1, 4, 3, 7, 9], [2, 3, 5, 9, 11]) == 0\n@assert\
    \ compare([1, 4, 3, 7, 9], [2, 3, 5, 8, 11]) == 1\n@assert compare([1, ", "  \
    \      \n    \n    return guess[game] - game\n    \nend\n</cell>\n<code language=julia-1.5>\n\
    # Test it out\ngame = [1, 4, 9, 2, 5, 6]\nguess = [5, 3, 1, 2, 6, 4]\n</cell>\n\
    <code language=julia-1.5>\n@time compare(game, guess)\n</cell>\n<text>\nExercises\n\
    The above code has some issues\nThe above code only compared a single number against\
    \ the entire guess\nIt only compared against a single guess\nIt only compared\
    \ against the entire game\nIt only compared against the original guess", "   \
    \ guesses_corrected=zeros(length(guess),1)\n    for i=1:length(guess)\n      \
    \  if(guess[i] == game[i])\n            guesses_corrected[i]=0\n        else\n\
    \            guesses_corrected[i]=abs(guess[i]-game[i])\n        end\n    end\n\
    \    return guesses_corrected\nend", "    if length(game) != length(guess)\n \
    \       return zeros(length(guess), length(game))\n    end\n    for i in eachindex(game)\n\
    \        if game[i] < guess[i]\n            return -guess[i] + game[i]\n     \
    \   elseif game[i] > guess[i]\n            return game[i] - guess[i]\n       \
    \ else\n            return 0\n        end\n    end\n    return game\nend\n</cell>\n\
    <text>\nExercise\nWrite a function compare(guess::Vector{Int64}, score::Vector{Int64})::Vector{Int64}\
    \ that takes in two vectors and returns one vector (the result of the game) with\
    \ the correct guesses as compared to the given scores.", "    if length(guess)\
    \ != length(game)\n        error(\"guess vector must have same length as game\
    \ vector\")\n    end\n    guess = copy(guess)\n    for ((i, v1), (i, v2)) in zip(game,\
    \ guess)\n        if v1 != v2\n            guess[i] = v1 - v2\n        end\n \
    \   end\n    return guess\nend", "  guess = guess[end]\n  diff = zeros(size(guess))\n\
    \  for i = 1:size(guess)\n    diff[i] = guess[i]-game[i]\n  end\n  return diff\n\
    end\n</cell>\n<text>\nExercise: How bad is this? Why do you think this is?", " \
    \   return guesses_to_score(guess, game)\nend", "    \n    \n    score = 0\n \
    \   for (ix,i) in enumerate(game)\n        if i != guess[ix]\n            score\
    \ += abs(guess[ix]-game[ix])\n        end\n    end\n    \n    return score \n\
    end ", "    \n    # Initializing\n    true = 0\n    false = 0\n    \n    # Checking\
    \ if the length of the vectors are equal\n    if length(game) == length(guess)\n\
    \    \n        # Traversing through both arrays and calculating the difference\
    \ \n        for i in 1:length(game)\n            if game[i] == guess[i]\n    \
    \            true+=1\n            elseif game[i] != guess[i]\n               \
    \ false+=1\n            else\n                false += 1\n            end\n  \
    \      end\n    end\n    \n    return false < true\nend\n</cell>\n<text>\nSolution",
  "    guess, score = game, guess \n    correct_guess = guess[findall(guess)] \n \
    \   \n    diff = abs(guess - score)\n    \n    correct_guess = sort(correct_guess)\n\
    \    diff = sort(diff)\n    \n    answer = fill(Inf, length(guess)) \n    \n \
    \   correct = findall(diff .== 0) \n    \n    for i in 1:length(correct)\n   \
    \     answer[correct[i]] = diff[correct[i]]\n    end\n    return answer\nend\n\
    </cell>\n<code language=julia-1.2>\ncompare([1,2,3,4,5,1], [1,2,3,4,2,-2])\n</cell>\n\
    <code language=julia-1.2>\ncompare([0,5,0,0,4,0], [4,1,1,0,0,-2])\n</cell>\n<code\
    \ language=julia-1.2>\ncompare([1,2,3,4,5,1], [1,2,3,4,2,-2])\n</cell>\n<code\
    \ language=julia-1.2>\ncompare([0,5,0,0,4,0], [4,1,1,0,0,-2])\n</cell>\n<code\
    \ language=julia-1.2>\ncompare([0,5,0,0,4,0], [4,1,1,0,0,-2])\n</cell>\n<code\
    \ language=julia-1.2>\ncompare([1,2,3,4,5,1], [1,2,3,4,2,-2])\n</cell>\n<code\
    \ language=julia-1.2>\ncompare([0,5,0,0,4,0], [4,1,1,0,0,-2])\n</cell>\n<code\
    \ language=julia-1.2>\ncompare([0,5,0,0,4,0], [4,1,1,0,0,-2])\n</cell>\n<code\
    \ language=julia-1.2>\ncompare([1,2,3,4,5,1], [1,2,3,4,2,-2])\n</cell>\n<code\
    \ language=julia-1.2>\ncompare([0,5,0,0,4,0], [4,1,1,0,0,-2])\n</cell>\n<code\
    \ language=julia-1.2>\ncompare([0,5,0,0,4,0], [4,1,1,0,0,-2])\n</cell>\n<code\
    \ language=julia-1.2>\ncompare([0,5,0,0,4,0], [4,1,1,0,0,-2])\n</cell>\n<code\
    \ language=julia-1.2>\ncompare([0,5,0,0,4,0], [4,1,1,0,0,-2])\n</cell>\n<code\
    \ language=julia-1.2>\ncompare([0,5,0,0,4,0], [4,1,1,0,0,-2])\n</cell>\n<code\
    \ language=julia-1.2>\ncompare([0,5,0,0,4,0], [4,1,1,0,0,-2])\n</cell>\n<code\
    \ language=julia-1.2>\ncompare([0,5,0,0,4,0], [4,1,1,0,0,-2])\n</cell>\n<code\
    \ language=julia-1.2>\ncompare([0,5,0,0,4,0], [4,1,1,0,0,-2])\n</cell>\n<code\
    \ language=julia-1.2>\ncompare([0,5,0,0,4,0], [4,1,1,0,0,-2])\n</cell>\n<code\
    \ language=julia-", "    return zero(length(guess)) == 0 ? game : ((game - guess)./game)\n\
    end\n</cell>\n<code language=julia-1.5>\ncompare([0, 0, 0, 0, 3, 3], [4, 1, 1,\
    \ 0, 0, -2])\n</cell>\n<code language=julia-1.5>\ncompare([0, 0, 0, 0, 3, 3],\
    \ [4, 4, 1, 0, 0, 6])\n</cell>\n<text>\nExercise: Write a function named calculate_error\
    \ that takes two vectors of guesses and scores, and returns the error from those\
    \ guesses and scores:", "    \n\"\"\"\n    compare(game::Vector{Int64}, guess::Vector{Int64},\
    \ max::Int64)::Vector{Int64} \n    \n\"\"\"\n    Compare game against a guess.\
    \ Return an indication of how far away guess was from game.", "    answer = zeros(length(guess))\n\
    \    \n    # fill answer vector with zeros\n    for i=1:length(answer)\n     \
    \   answer[i] = 0\n    end\n    \n    # loop over all guesses\n    for i=1:length(guess)\n\
    \        \n        # check if the guess was correct\n        if guess[i] == game[i]\n\
    \            # increment correct guesses\n            answer[i] += 1\n       \
    \ else\n            # increment incorrect guesses\n            answer[i] += guess[i]\
    \ - game[i]\n        end\n    end\n    \n    # return the answer\n    return answer\n\
    end\n</cell>\n<code language=julia-1.5>\n@time compare([1,2,3,4,5,6], [1,2,3,4,2,-2])\n\
    </cell>\n<text>\nProblem 4b", "    \n\"\"\"\n    compare\n    \n    \n    Compare\
    \ two lists of numbers, where each element is an integer and a number that is\
    \ a \n    guess. The elements indicate how far off each guess was, as well as\
    \ the correct answer. \n    Return a vector of the same length denoting how far\
    \ off each guess was. If they have guessed correctly,\n    the value is 0, and\
    \ if not, the value is the absolute difference between the guess and the score.\n\
    \    \n    \n    example:", "    \n    endguess = zero(Int64)\n    for g in guesses\n\
    \        if game == g\n            return zeros(Int64)\n        endguess += 1\n\
    \    end\n    \n    guesses_correct = (guess[2:end] == game[2:end])\n    \n  \
    \  if guesses_correct\n        return zeros(Int64)\n    else\n        return (guess[2:end]\
    \ - game[2:end])\n    end\nend\n</code>\n<|/ a |>\n<| c |>\nThe variable names\
    \ `guess` and `game` suggest that they are both vectors of integers, but the description\
    \ suggests they are vectors of floating-point numbers.  I would suggest using\
    \ `Float64` in your answer (and in the code), and then using `==` to check for\
    \ equality.\n<|/ c |>\n<| c |>\ngood point, i updated the code with Float64, which\
    \ works now in both python 2 and 3.\n<|/ c |>\n<| c |>\nI like this answer. I\
    \ added the [link to the original source](https://github.com/jankahoda/research-questions-from-the-past-days/blob/master/solutions/solution_1_sol_1.jl)\
    \ in the description of the problem and I added your version of the code in this\
    \ answer.\n<|/ c |>\n<| c |>\nI thought to include a link to my version of the\
    \ code, which now includes the test cases I used.\n<|/ c |>\n<| a dscore=2 tags=julia\
    \ |>\nI wrote a short function to compare two lists of numbers and return the\
    \ number of mismatches. This is basically what your code did, but instead of returning\
    \ the value 0 you return an Int64 and then add 1 to that to get the correct number\
    \ of mismatches.\n<code>", "    guess = sort(guess)\n    game = sort(game)\n \
    \   \n    score::Vector{Int64} = zeros(length(guess))\n    for (g,s) in zip(guess,game)\n\
    \        if s == 0\n            score[g] = 0\n        else\n            score[g]\
    \ = abs(g-s)\n        end\n    end\n    return score\nend\n</code>\n<|/ a |>\n\
    <| a dscore=0 tags=sorting,arrays,julia |>\nHere's a solution in pure Julia code:\n\
    <code>", "    # Complete the body\n    scores = [0, 0, 0]\n    guesses = [0, 0,\
    \ 0]\n    for idx in 1:length(game)\n        scores[game[idx]] += abs(guess[idx]\
    \ - game[idx])\n        guesses[guess[idx]] += 1\n    end\n    return scores\n\
    end", "    ans = zeros(guess.length)\n    correct = 0\n    for i in eachindex(guess)\n\
    \        diff = abs(game[i] - guess[i])\n        ans[i] = diff\n        if diff\
    \ == 0\n            correct += 1\n        end\n    end\n    ans\nend", '    """',
  "    \n    \"\"\"\n    O(N^2)\n    \"\"\"\n    guess = sort!(guess)\n    \n    diff\
    \ = zeros(length(guess), 1)\n    \n    for i = 1:length(guess)\n        \n   \
    \     best = Inf\n        besti = 0\n        \n        for j = 1:length(game)\n\
    \            if game[j] == guess[i]\n                if best > abs(guess[i] -\
    \ game[j])\n                    best = abs(guess[i] - game[j])\n             \
    \       besti = j\n                end\n            end\n        end\n       \
    \ diff[i] = best\n    end\n    \n    return diff\nend\n</cell>\n<code language=julia-1.6>\n\
    \"\"\"\n    compare(game::Vector{Int64}, guess::Vector{Int64})\n    compare(guess::Vector{Int64},\
    \ game::Vector{Int64})\n    compare(game::Vector{Int}, guess::Vector{Int})\n \
    \   compare(guess::Vector{Int}, game::Vector{Int})\n    compare(game::Vector{Int8},\
    \ guess::Vector{Int8})\n    compare(guess::Vector{Int8}, game::Vector{Int8})\n\
    \    compare(game::Vector{Int16}, guess::Vector{Int16})\n    compare(guess::Vector{Int16},\
    \ game::Vector{Int16})\n    compare(game::Vector{Int32}, guess::Vector{Int32})\n\
    \    compare(guess::Vector{Int32}, game::Vector{Int32})\n    compare(game::Vector{Int64},\
    \ guess::Vector{Int64})\n    compare(guess::Vector{Int64}, game::Vector{Int64})\n\
    \    compare(game::Vector{Int}, guess::Vector{Int})\n    compare(guess::Vector{Int},\
    \ game::Vector{Int})\n    compare(game::Vector{Int8}, guess::Vector{Int8})\n \
    \   compare(guess::Vector{Int8}, game::Vector{Int8})\n    compare(game::Vector{Int16},\
    \ guess::Vector{Int16})\n    compare(guess::Vector{Int16}, game::Vector{Int16})\n\
    \    compare(game::Vector{Int32}, guess::Vector{Int32})\n    compare(guess::Vector{Int32},\
    \ game::Vector{Int32})\n    compare(game::Vector{Int64}, guess::Vector{Int64})\n\
    \    compare(guess::Vector{Int64}, game::Vector{Int64})\n    compare(game::Vector{Int}, ",
  "  \n  \n    ", "\"\"\"\n    Compare a pair of games and guesses. Return the result.\
    \ \n    \n    \n    example:", "    match = trues(length(game))\n    match = trues(length(guess),\
    \ match)\n    for i=1:length(game)\n        if guess == game\n            match[i]\
    \ = 0\n        else \n            diff = (guess[i] - game[i])\n            if\
    \ diff < 0\n                diff = -diff\n            end\n            match[i]\
    \ = diff\n        end\n    end\n    return match\nend", "    length1 = length(game)\n\
    \    length2 = length(guess)\n    res = zeros(length1)\n    for j=1:length1\n\
    \        if game[j] == guess[j]\n            res[j] = 0\n        else\n      \
    \      res[j] = abs(guess[j] - game[j])\n        end\n    end\n    \n    return\
    \ res\nend", "    \n    score = zeros(length(guess), length(game))\n    \n   \
    \ \n    for i = 1:length(guess)\n        \n        for j = 1:length(game)\n  \
    \          \n            if game[j] == guess[i]\n                score[i, j] =\
    \ 1\n            else\n                score[i, j] = abs(guess[i] - game[j])\n\
    \            end\n            \n        end\n        \n    end\n    \n    return\
    \ score\nend\n</cell>\n<code language=julia-1.5>\ncompare([2, 3, 1], [1, 2, 3])\n\
    </cell>\n<code language=julia-1.5>\ncompare([10, 20, 30], [50, 10, 20])\n</cell>\n\
    <code language=julia-1.5>\ncompare([10, 20, 30], [50, 100, 20])\n</cell>\n<text>\n\
    Exercise 1", "    # Your code here\nend\n</cell>\n<text>\nExercise 7\nCreate a\
    \ function called compare_pairs(game::Vector{Int64}, guesses::Vector{Int64})\n\
    \    that returns an array of the same length as guesses, where each entry is\
    \ how much of the guess was\n    correctly guessed.\n    \n    Your function should\
    \ return an array of the same length as guesses, where each entry is how much\
    \ of\n    the guess was correctly guessed.\n    \n    Your function should NOT\
    \ modify game, guesses, or guesses_sum.\n    \n    Your function should allow\
    \ for cases in which the guesses are not the same.\n    \n    Your function should\
    \ allow for cases in which the guesses are larger than the scores or the scores\
    \ \n    are less than 0.\n    \n    For example:", "    guess = copy(guess)\n\
    \    game = copy(game)\n    results = zeros(length(guess), length(game))\n   \
    \ for i=1:length(guess)\n        for j=1:length(game)\n            if game[j]\
    \ == guess[i]\n                results[i][j] = 0\n            else\n         \
    \       results[i][j] = abs(game[j] - guess[i])\n            end\n        end\n\
    \    end\n    results\nend", "    guesses = guess[2:end]\n    scores = game[2:end]\n\
    \    diff = zeros(length(guess), length(scores))\n    for i = 1:length(scores)\n\
    \        if scores[i] == guess[i]\n            diff[i] = 0\n        else\n   \
    \         diff[i] = abs(guess[i]-scores[i])\n        end\n    end\n    return\
    \ diff\nend\n    ", "    guesses = copy(guess)\n    scores= copy(game)\n    i\
    \ = length(guesses)\n    while i >= 1\n        j = i-1\n        while j >= 1\n\
    \            if guesses[j] > guesses[i]\n                scores[j] = scores[i]\
    \ + abs(guesses[i]-guesses[j])\n                guesses[j] = 0\n            elseif\
    \ guesses[j] < guesses[i]\n                scores[j] = scores[i] + abs(guesses[i]-guesses[j])\n\
    \                guesses[j] = 0\n            else\n                scores[j] =\
    \ scores[i]\n            end\n            j -= 1\n        end\n        i--\n \
    \   end\n    return scores\nend", "    if length(game) != length(guess)\n    \
    \    @error \"Vectors must have equal length\"\n    end\n    \n    score::Vector{Int64}\
    \ = [min(game[i]) for i=1:length(game)]\n    diff::Vector{Int64} = [guess[i]-score[i]\
    \ for i in 1:length(guess)]\n    \n    return [diff[i] if diff[i] != 0 else 0\
    \ for i in 1:length(diff)]\nend", "    \n    guesses = 0\n    correct = 0\n  \
    \  \n    gameLength = length(game)\n    guessesLength = length(guess)", "   guessedCorrectly\
    \ = false\n   guessedCorrectly = guess[game[1]] == game[2]\n   guessedCorrectly\
    \ = guessedCorrectly || guess[game[1]] < game[2]\n   guessedCorrectly = guessedCorrectly\
    \ || guess[game[1]] > game[2]\n   guessedCorrectly = guessedCorrectly || guess[1]\
    \ < guess[2]\n   guessedCorrectly = guessedCorrectly || guess[1] > guess[2]\n\
    \   guessedCorrectly = guessedCorrectly || guess[2] < guess[1]\n   guessedCorrectly\
    \ = guessedCorrectly || guess[2] > guess[1]\n   guessedCorrectly = guessedCorrectly\
    \ || guess[3] < guess[2]\n   guessedCorrectly = guessedCorrectly || guess[3] >\
    \ guess[2]\n   guessedCorrectly = guessedCorrectly || guess[4] < guess[3]\n  \
    \ guessedCorrectly = guessedCorrectly || guess[4] > guess[3]\n   guessedCorrectly\
    \ = guessedCorrectly || guess[5] < guess[4]\n   guessedCorrectly = guessedCorrectly\
    \ || guess[5] > guess[4]\n   guessedCorrectly = guessedCorrectly || guess[6] <\
    \ guess[5]\n   guessedCorrectly = guessedCorrectly || guess[6] > guess[5]\n  \
    \ guessedCorrectly = guessedCorrectly || guess[1] == guess[2]\n   guessedCorrectly\
    \ = guessedCorrectly || guess[1] > guess[2]\n   guessedCorrectly = guessedCorrectly\
    \ || guess[2] < guess[1]\n   guessedCorrectly = guessedCorrectly || guess[2] >\
    \ guess[1]\n   guessedCorrectly = guessedCorrectly || guess[3] < guess[2]\n  \
    \ guessedCorrectly = guessedCorrectly || guess[3] > guess[2]\n   guessedCorrectly\
    \ = guessedCorrectly || guess[4] < guess[3]\n   guessedCorrectly = guessedCorrectly\
    \ || guess[4] > guess[3]\n   guessedCorrectly = guessedCorrectly || guess[5] <\
    \ guess[4]\n   guessedCorrectly = guessedCorrectly || guess[5] > guess[4]\n  \
    \ guessedCorrectly = guessedCorrectly || guess[6] < guess[5]\n   guessedCorrectly\
    \ = guessedCorrectly || guess[6] > guess[5]\n   return guessedCorrectly ? zeros(length(guess))\
    \ : abs(guess[game[1]] - guess[game[2]", "    \"\"\"Compare and compare and return\
    \ a new vector of differences with guesses\"\"\"\n    \n    game = [abs(game[i]-guess[i])\
    \ for i in 1:length(guess)]\n    return game\n</code>\n<|/ a tags=sorting,arrays,julia\
    \ |>\n<| c |>\nThank you! This was helpful. I had already done something similar\
    \ to this using the sort-function, but this seems like a better way of doing it!\
    \ Thank you!\n<|/ c |>\n<| c |>\nAwesome solution. I'm getting errors with it\
    \ - can you check my edit? Thanks!\n<|/ c |>\n<| c |>\n- I have checked your edit,\
    \ and it seems to work with Julia v0.4.2\n<|/ c |>\n<| a dscore=2 |>\n<code>",
  "    \n    result = 0\n    for i=1:length(game)\n        if game[i] < guess[i]\n\
    \            result += 1\n        else\n            result += abs(game[i] - guess[i])\n\
    \        end\n    end\n    return result\nend\n</cell>\n<code language=julia-1.6>\n\
    @time compare(rand_game, rand_guess)\n</cell>\n<text>\nSolution", "    \n    game\
    \ = sort(game)\n    guess = sort(guess)\n    \n    total = 0\n    for j in 1:length(guess)\n\
    \        for m in 1:length(game)\n            if game[m] == guess[j] \n      \
    \          total += 1\n                guess[j] = 0\n            else\n      \
    \          guess[j] = abs(guess[j] - game[m])\n            end\n        end\n\
    \    end\n    return guess .- game\nend\n</cell>\n<cell>\nresult = compare([1,2,3,4,5,6],[1,3,6,4,2,1])\n\
    </cell>\n<cell>\nprintln(result)\n</cell>\n<text>\nPart 3\nWrite a function named\
    \ find_match that takes two vectors of ints, one from above\nand another from\
    \ above, and finds the match that gives the smallest difference\nbetween them.",
  "    guesses = guess\n    scores = game\n    guesses_len = length(guesses)\n   \
    \ scores_len = length(scores)\n    off = fill(Int64, guesses_len)\n    for i =\
    \ 1:guesses_len\n        off[i] = abs(scores[i] - guesses[i])\n    end\n    return\
    \ off\nend\n</cell>\n<cell>\n# %load solutions/compare.jl", '"""Return the result
    of a number of matches based on the two given vectors of guesses and scores.',
  "    guess, score = game\n    n = length(guess)\n    if n != length(score)\n   \
    \     throw(ArgumentError(\"Vectors must have equal lengths\"))\n    end\n   \
    \ \n    off = zeros(n)\n    for i=1:n\n        if guess[i] == score[i]\n     \
    \       off[i] = 0\n        else\n            off[i] = abs(guess[i] - score[i])\n\
    \        end\n    end\n    return off\nend\n</cell>\n<text>\nNow test your function:",
  "    guesses, scores = transpose(guess, game), transpose(game, guess)\n    guesses,\
    \ scores = guesses[guesses != 0], scores[guesses != 0]\n    guesses, scores =\
    \ sort(guesses, scores), sort(scores, guesses)\n    diff = zeros(length(guesses),\
    \ 1)\n    for j = 1, length(guesses) do\n        if guesses[j] == 0 \n       \
    \ diff[j] = scores[j] - guesses[j]\n        else\n        diff[j] = abs(scores[j]\
    \ - guesses[j])\n        end\n    end\n    return diff \nend\n</cell>\n<code language=julia-1.0>\n\
    # test it out!\ncompare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n</cell>\n<text>\n\
    Part B: Part B Solutions\nNow that we know what our functions look like, we can\
    \ use them to solve the challenge!", "    if length(game) != length(guess)\n \
    \       error(\"wrong length of game and guess\")\n    end\n    \n    matches\
    \ = 0\n    i = 0\n    while i < length(game)\n        if game[i] != guess[i]\n\
    \            matches += 1\n        end\n        i += 1\n    end", "    if length(guess)\
    \ == length(game)\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n", "    return zero(length(guess))\
    \ * guess[1] - game[1]\nend", "    \"\"\"I guess we can't use length because we\
    \ use Int64\"\"\"\n    guesses = guess[:]\n    scores = game[:]\n    guesses.sort!()\n\
    \    scores.sort!()\n    # if we have an equal length, then they must have guessed\
    \ the exact same set of numbers (i.e. they guessed the same sequence)\n    if\
    \ len(guesses) == length(scores)\n        correct_guesses = guesses[:]\n     \
    \   correct_scores = scores[:]\n        return correct_guesses - correct_scores\n\
    \    end\n    # we assume that they guessed a different sequence than they have\
    \ (this assumes that they guessed the same length)\n    correct_guesses = guesses[:]\n\
    \    correct_scores = scores[:]\n    guesses.sort!()\n    scores.sort!()\n   \
    \ # go through the guesses and find out how far away the correct guesses are from\
    \ each guesses (i.e. the difference)\n    correct_guesses.sort!()\n    correct_scores.sort!()\n\
    \    \n    # we start with the minimum length, and go through the entire length\
    \ (the max of the length of guesses and scores)\n    diff_guesses_len = min(length(guesses),\
    \ length(scores))\n    diff_scores_len = min(length(guesses), length(scores))\n\
    \    # while there are still guesses to check\n    while diff_guesses_len > 0\
    \ | diff_scores_len > 0\n        # if the current guesses were longer than the\
    \ scores, we will take the guess with the highest score\n        if diff_guesses_len\
    \ > diff_scores_len\n            guesse = guesses[diff_guesses_len]\n        \
    \    scores = scores[diff_guesses_len]\n            guesses.drop!(diff_guesses_len)\n\
    \            scores.drop!(diff_guesses_len)\n        else\n            # if the\
    \ current scores are longer than the guesses, we will take the guess with the\
    \ highest score\n            if diff_guesses_len > diff_scores_len\n         \
    \       guesse = guesses[diff_guesses_len]\n                scores = scores[diff_guesses_len]\n\
    \                guesses.drop!(diff_guesses_len)\n                scores.drop!(diff_guesses_len)\n\
    \            else\n                # if we are here, the guesses aren't longer\
    \ then the scores, so we take the guess with the lowest length\n             \
    \   guesse = guesses[diff_guesses_len]\n                scores = scores[diff_guesses_len]\n\
    \                guesses.drop!(diff_guesses_len)\n                scores.drop!(diff_guesses_len)\n\
    \            end\n        end\n        # we check if that guess is correct\n \
    \       if guesses[guesse] == scores[scores]\n            correct_gues", "   \
    \ \n    score = zeros(length(game))\n    for i=1:length(guess)\n        \n   \
    \     if guess[i] == game[i]\n            score[i] = 0\n        end\n    end\n\
    \    \n    return score\nend\n</cell>\n<text>\nAnd let's try it out on the example\
    \ below:", "    \n    for j in 1:length(game)\n        if guess[j]==game[j]\n\
    \            return zeros(length(guess), 1);\n        end\n    end\n    \n   \
    \ for i in 1:length(guess)\n        if abs(guess[i]-game[i])>abs(guess[i]-game[i])\n\
    \            return guess[i] - game[i];\n        end\n    end\n    \n    return\
    \ 0\nend\n</cell>\n<text>\nExercise (15 points)", "    for i=1:length(guess)\n\
    \        if guess[i] != game[i]\n            error <- abs(guess[i]-game[i])\n\
    \            game[i] = guess[i]\n        else\n            error <- 0\n      \
    \  end\n    end\n    return error\nend\n</cell>\n<text>\nExercise 4\nIn the lecture\
    \ on working with vectors, you were given an exercise to work through an example\
    \ in a slightly different way. Here are the instructions:", "    m = length(guess)\n\
    \    \n    # Your code here\n    res = 0\n    for j in 1:m\n        res = res\
    \ + abs(game[j] - guess[j])\n    end", "    \n    guesses   = 0\n    scores =\
    \ copy(game)\n    matches = []\n    for index in 1:length(guess)\n        guess\
    \ = guess[index]\n        if guess == game[index]\n            guesses = guesses\
    \ + 1\n            scores = copy(scores)\n            scores[index] = 0\n    \
    \        push!(matches, guess)\n        end\n    end\n    if guesses == length(guess)\n\
    \        return copy(scores)\n    end\n    return guesses\nend", "    \n    guess\
    \ = copy(guess)\n    for index = 1:length(guess)\n        guess[index] = guess[index]\
    \ - game[index]\n    end\n    guess = sort(guess)\n    score = sum(game) - sum(guess)\n\
    \    return [guess[index+1] - game[index+1] for index = (length(guess) - 2):-1:1]\n\
    end\n</cell>\n<code language=julia-0.6>\n# testing function\ncompare([1,2,3,4,5,1],\
    \ [1,4,3,2,5,0]) == [0,0,0,1,1,0]\n</cell>\n<text>\nPart 3: Guess the number\n\
    In this last part, you'll implement the computer to play the game. Instead of\
    \ playing the game by itself, it'll be better for you to\nplay it as a learning\
    \ exercise.", "    \n    \n    \n    \n    if length(guess) != length(game)\n\
    \        raise ArgumentError(\"guess vector and game vector must have same length\"\
    )\n    end\n    \n    \n    \n    if length(guess) == 0\n        \n        return\
    \ zeros(length(guess))\n    end\n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n", "    \n    \n    \n    \"\"\"\n    Oh hey, you might have thought\
    \ of this. What you have is an array and another array. \n    Your task is to\
    \ determine which element in the first array is closest to the element in the\
    \ second array. \n    The elements in the two arrays are given as indexes, and\
    \ you return a list with the differences between them.\n    \n    \n    example:",
  "    correct = 0\n    for i in 1:length(game)\n        if game[i]==guess[i]\n  \
    \          correct += 1\n        else\n            correct += abs(guess[i]-game[i])\n\
    \        end\n    end\n    return correct\nend", "    guess::Vector{Int64} = copy(guess)\n\
    \    \n    score::Vector{Int64} = copy(game)\n    \n    guess::Vector{Int64} =\
    \ copy(guess)\n    \n    score::Vector{Int64} = copy(game)\n    \n    guess::Vector{Int64}\
    \ = copy(guess)\n    \n    score::Vector{Int64} = copy(game)\n    \n    guess::Vector{Int64}\
    \ = copy(guess)\n    \n    score::Vector{Int64} = copy(game)\n    \n    guess::Vector{Int64}\
    \ = copy(guess)\n    \n    score::Vector{Int64} = copy(game)\n    \n    guess::Vector{Int64}\
    \ = copy(guess)\n    \n    score::Vector{Int64} = copy(game)\n    \n    guess::Vector{Int64}\
    \ = copy(guess)\n    \n    score::Vector{Int64} = copy(game)\n    \n    guess::Vector{Int64}\
    \ = copy(guess)\n    \n    score::Vector{Int64} = copy(game)\n    \n    guess::Vector{Int64}\
    \ = copy(guess)\n    \n    score::Vector{Int64} = copy(game)\n    \n    guess::Vector{Int64}\
    \ = copy(guess)\n    \n    score::Vector{Int64} = copy(game)\n    \n    guess::Vector{Int64}\
    \ = copy(guess)\n    \n    score::Vector{Int64} = copy(game)\n    \n    guess::Vector{Int64}\
    \ = copy(guess)\n    \n    score::Vector{Int64} = copy(game)\n    \n    guess::Vector{Int64}\
    \ = copy(guess)\n    \n    score::Vector{Int64} = copy(game)\n    \n    guess::Vector{Int64}\
    \ = copy(guess)\n    \n    score::Vector{Int64} = copy(game)\n    \n    guess::Vector{Int64}\
    \ = copy(guess)\n    \n    score::Vector{Int64} = copy(game)\n    \n    guess::Vector{Int64}\
    \ = copy(guess)\n    \n    score::Vector{Int64} = copy(game)\n    \n    guess::Vector{Int64}\
    \ = copy(guess)\n    \n    score::Vector{Int64} = copy(game)\n    \n    guess::Vector{Int64}\
    \ = copy(guess)\n    \n    score::Vector{Int64} = copy(game)\n    \n    guess::Vector{Int64}\
    \ = ", "    \n    diff = copy(guess)\n    for i=1:length(guess)\n        diff[i]\
    \ = abs(guess[i]-game[i])\n    end\n    \n    return diff\nend\n</cell>\n<cell>\n\
    # Test your function with the above examples", "    \"\"\"\n    Compare two vectors\
    \ of scores\n    \"\"\"\n    \n    length = length(guess)\n    result = zeros(length)\n\
    \    for i in 1:length\n        if game[i] == guess[i]\n            result[i]\
    \ = 0\n        else\n            result[i] = abs(game[i] - guess[i])\n       \
    \ end\n    end\n    return result\nend", "    if length(game)!=length(guess)\n\
    \        error(\"Two vectors with different lengths\")\n    end\n    result=similar(guess,\
    \ 1)\n    for i in eachindex(result)\n        result[i]=0\n    end\n    for (i,j)\
    \ in zip(game, guess)\n        if i!=j\n            result[i]=abs(i-j)\n     \
    \   end\n    end\n    return result \nend\n</code>\n<|/ a tags=julia,type-mismatch,arrays\
    \ |>\n<| c |>\nThanks so much for this answer! I never would have figured out\
    \ how to do this.\n<|/ c |>\n<| a dscore=1 tags=julia,type-mismatch,arrays |>\n\
    A more Julian way of doing this is to use mapslices:\n<code>\njulia> a = [rand(1)\
    \ for i in 1:10]\n10-element Array{Int64,1}:\n 2\n 2\n 2\n 3\n 1\n 1\n 1\n 1\n\
    \ 1\n 2\n 2", "    a = 0\n    b = 0\n    c = 0\n    d = 1\n    \n    for g in\
    \ guess\n        a += (g-game[b])**2\n        b += g-game[b]\n        c += abs(g-game[b])\n\
    \        d += 1\n    end\n    \n    \n    for g in guess\n        a += (g-game[c])**2\n\
    \        c += g-game[c]\n        d += 1\n    end\n    \n    \n    for g in guess\n\
    \        a += (g-game[d])**2\n        d += g-game[d]\n        d += 1\n    end\n\
    \    \n    \n    for g in guess\n        a += (g-game[a])**2\n        c += g-game[c]\n\
    \        d += 1\n    end\n    \n    return (a+b+c+d)\nend\n</cell>\n<text>\nExercise\n\
    Write a function named test_compare which tests the function compare for various\
    \ inputs. You might want to use the function from the previous exercise as a first\
    \ approach."]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
