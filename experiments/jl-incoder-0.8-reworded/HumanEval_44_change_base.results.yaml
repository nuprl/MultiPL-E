language: jl
name: HumanEval_44_change_base
results:
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base == 1\n        return x\n    elif base > 10\n\
    \        return sprintf(\"%d\", (x / base) * (base**-1))\n    else\n        return\
    \ sprintf(\"%d\", (x/base)*base)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = change_base;\n\t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3)\
    \ == \"100\")\n\t@test(candidate(234, 2) == \"11101010\")\n\t@test(candidate(16,\
    \ 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\")\n\t@test(candidate(7,\
    \ 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t@test(candidate(3, 4) ==\
    \ \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5, 6) == \"5\"\
    )\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"base\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpcfqqh7no.jl:14\nin expression starting at /tmp/tmpcfqqh7no.jl:14\n"
  stdout: ''
  timestamp: 1660008723
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 2 || base > 10\n        error(x)\n    else\n\
    \        if x == 0\n            \"0\"\n        else\n            if base == 10\n\
    \                string(x)\n            else\n                string(x * base)\n\
    \        end\n    end\nend\n</cell>\n<text>\n6.2 Functions\nusing Test\n\n@testset\
    \ begin\n\ncandidate = change_base;\n\t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9,\
    \ 3) == \"100\")\n\t@test(candidate(234, 2) == \"11101010\")\n\t@test(candidate(16,\
    \ 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\")\n\t@test(candidate(7,\
    \ 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t@test(candidate(3, 4) ==\
    \ \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5, 6) == \"5\"\
    )\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppt_9jnha.jl:25\nin expression starting at\
    \ /tmp/tmppt_9jnha.jl:25\n"
  stdout: ''
  timestamp: 1660008723
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    \"\"\"Change numerical base of input number x to\
    \ base.\n    return string representation after the conversion.\n    base numbers\
    \ are less than 10.\n    >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8,\
    \ 2)\n    \"1000\"\n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nusing\
    \ Test\n\n@testset begin\n\ncandidate = change_base;\n\t@test(candidate(8, 3)\
    \ == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2) ==\
    \ \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpf37_9cbo.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpf37_9cbo.jl:1\n\
    in expression starting at /tmp/tmpf37_9cbo.jl:1\n"
  stdout: ''
  timestamp: 1660008722
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if x<0\n        return String(\"\")\n    else\n \
    \       chars = string_chars(x)\n        if chars[1]==\"1\"\n            return\
    \ \"0\"\n        if base < 10\n            return change_base(floor(x/base)*base,\
    \ base)\n        else\n            digits = chars[1]\n            for i in 2:length(chars)-1\n\
    \                digits *= base\n            digits *= base\n            return\
    \ string(digits, chars[2:end-1])\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = change_base;\n\t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3)\
    \ == \"100\")\n\t@test(candidate(234, 2) == \"11101010\")\n\t@test(candidate(16,\
    \ 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\")\n\t@test(candidate(7,\
    \ 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t@test(candidate(3, 4) ==\
    \ \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5, 6) == \"5\"\
    )\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"if\" at /tmp/tmpln063pr1.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpln063pr1.jl:1\n\
    in expression starting at /tmp/tmpln063pr1.jl:1\n"
  stdout: ''
  timestamp: 1660008722
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    digits = (10^base)::Int64\n    res = (x / digits)::Int64\n\
    \    return (format(res, \"0\" + format((digits * base), base)))::String\nend\n\
    </cell>\n<code language=julia-1.3>\n# run this cell to see if your function works!\n\
    change_base(4,2)\n</cell>\n<text>\nTask 8: Problem set 2.2. Write a Julia function\
    \ that computes the nth number of the Fibonacci sequence. The Fibonacci sequence\
    \ starts with 0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55.\nThe Fibonacci sequence is\
    \ commonly written as F(n) = F(n-1) + F(n-2), where F(0) = 0, F(1) = 1, and F(n)\
    \ = F(n - 1) + F(n - 2). For example, F(3) = F(1) + F(2) = F(2) + F(1) + F(2)\
    \ = F(4) + F(1) + F(2) = F(7) + F(3) + F(2).\nThe Fibonacci sequence is one of\
    \ the most important mathematical sequences in combinatorics. It generalizes very\
    \ well to sequences of variable length. It can be considered the special case\
    \ of Binomial Coefficients.\nThe Fibonacci sequence is the sequence of numbers\
    \ $0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, ...$ where each number is the\
    \ sum of the preceding two numbers. The first two numbers in the Fibonacci sequence\
    \ are 0, 1, 1, so they can be ignored when computing the nth number of the sequence.\n\
    The nth number of the Fibonacci sequence is found by starting with 0, 1, 1, 2,\
    \ 3, 5, 8, 13, 21, 34, 55, 89, 144, ..., and then repeatedly adding the previous\
    \ two numbers.\nThe Fibonacci sequence starts with 0, 1, 1, 2, 3, 5, 8, 13, 21,\
    \ 34, 55, 89, 144, ...\nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\
    \t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234,\
    \ 2) == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpg82oqsf3.jl:16\nin expression starting at\
    \ /tmp/tmpg82oqsf3.jl:16\n"
  stdout: ''
  timestamp: 1660008723
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if x<base\n        return (\"0\"+to_base(x,base))\n\
    \    return to_base(x,base)\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ change_base;\n\t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3) ==\
    \ \"100\")\n\t@test(candidate(234, 2) == \"11101010\")\n\t@test(candidate(16,\
    \ 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\")\n\t@test(candidate(7,\
    \ 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t@test(candidate(3, 4) ==\
    \ \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5, 6) == \"5\"\
    )\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp2n21p__1.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp2n21p__1.jl:1\n\
    in expression starting at /tmp/tmp2n21p__1.jl:1\n"
  stdout: ''
  timestamp: 1660008722
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    \"Change numerical base of input number x to base.\"\
    \n    if x <= 0\n        error(\"Input cannot be negative.\")\n    if base < 2\
    \ || base > 10\n        error(\"Input base must be between 2 and 10.\")\n    let\
    \ str = base.toString.split(\"\")\n    let l = str.length\n    if l == 0\n   \
    \     error(\"Input number must have at least one digit.\")\n    if x < 0\n  \
    \      error(\"Input number must be non-negative.\")\n    if x % base == 0\n \
    \       error(\"Input number must be divisible by base.\")\n    if base == 2\n\
    \        return \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\"[x]\n    let digits =\
    \ x/base\n    let num = [0..l-1].map(|i| digits*base+str[i]).sum\n    convert(num,\
    \ base)\nend\n</cell>\n<code language=julia-1.6>\n#=\nChange base and verify results\n\
    =#\nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\t@test(candidate(8,\
    \ 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2)\
    \ == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"|\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp49pri7vv.jl:28\nin expression starting at\
    \ /tmp/tmp49pri7vv.jl:28\n"
  stdout: ''
  timestamp: 1660008722
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    digits = digits(x, base)\n    return join(digits,\
    \ base)\nend\nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\t@test(candidate(8,\
    \ 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2)\
    \ == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 12 errored,
    0 broken.

    in expression starting at /tmp/tmp_1a4neva.jl:17

    '
  stdout: "test set: Error During Test at /tmp/tmp_1a4neva.jl:20\n  Test threw exception\n\
    \  Expression: candidate(8, 3) == \"22\"\n  UndefVarError: digits not defined\n\
    \  Stacktrace:\n   [1] change_base(x::Int64, base::Int64)\n     @ Main /tmp/tmp_1a4neva.jl:12\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp_1a4neva.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp_1a4neva.jl:19\ntest set:\
    \ Error During Test at /tmp/tmp_1a4neva.jl:21\n  Test threw exception\n  Expression:\
    \ candidate(9, 3) == \"100\"\n  UndefVarError: digits not defined\n  Stacktrace:\n\
    \   [1] change_base(x::Int64, base::Int64)\n     @ Main /tmp/tmp_1a4neva.jl:12\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp_1a4neva.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp_1a4neva.jl:19\ntest set:\
    \ Error During Test at /tmp/tmp_1a4neva.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(234, 2) == \"11101010\"\n  UndefVarError: digits not defined\n  Stacktrace:\n\
    \   [1] change_base(x::Int64, base::Int64)\n     @ Main /tmp/tmp_1a4neva.jl:12\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp_1a4neva.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp_1a4neva.jl:19\ntest set:\
    \ Error During Test at /tmp/tmp_1a4neva.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(16, 2) == \"10000\"\n  UndefVarError: digits not defined\n  Stacktrace:\n\
    \   [1] change_base(x::Int64, base::Int64)\n     @ Main /tmp/tmp_1a4neva.jl:12\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/std"
  timestamp: 1660008725
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 2 || base > 36 {\n        \"invalid base\"\
    \n    }\n    if x < 0 {\n        \"negative number\"\n    }\n    \n    if base\
    \ == 10 {\n        x::Int64\n    }\n    if base == 8 {\n        x::Int64 / 2::Int64\
    \ * 2::Int64\n    }\n    if base == 7 {\n        x::Int64 / 10::Int64 * 10::Int64\n\
    \    }\n    if base == 6 {\n        x::Int64 / 100::Int64 * 100::Int64\n    }\n\
    \    if base == 5 {\n        x::Int64 / 1000::Int64 * 1000::Int64\n    }\n   \
    \ if base == 4 {\n        x::Int64 / 10000::Int64 * 10000::Int64\n    }\n    if\
    \ base == 3 {\n        x::Int64 / 100000::Int64 * 100000::Int64\n    }\n    if\
    \ base == 2 {\n        x::Int64 / 1000000::Int64 * 1000000::Int64\n    }\n   \
    \ if base == 1 {\n        x::Int64 / 10000000::Int64 * 10000000::Int64\n    }\n\
    \    if base == 0 {\n        x::Int64 / 100000000::Int64 * 100000000::Int64\n\
    \    }\n}\nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\t@test(candidate(8,\
    \ 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2)\
    \ == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: space before \"{\" not allowed in \"36 {\" at\
    \ /tmp/tmphy3elkli.jl:12\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmphy3elkli.jl:12\n\
    in expression starting at /tmp/tmphy3elkli.jl:12\n"
  stdout: ''
  timestamp: 1660008722
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    convert_base = if base > 10 then base else 10\n \
    \   rem = x%convert_base\n    x = x/convert_base\n    x+=(rem rem rem rem rem\
    \ rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem\
    \ rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem\
    \ rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem\
    \ rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem\
    \ rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem\
    \ rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem\
    \ rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem\
    \ rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem\
    \ rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem\
    \ rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem\
    \ rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem\
    \ rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem\
    \ rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem\
    \ rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem\
    \ rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem\
    \ rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem\
    \ rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem\
    \ rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem\
    \ rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem\
    \ rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem\
    \ rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem\
    \ rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem\
    \ rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem\
    \ rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem\
    \ rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem rem\
    \ rem rem rem rem rem \nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\
    \t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234,\
    \ 2) == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"base\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpe5xebzwg.jl:12\nin expression starting at /tmp/tmpe5xebzwg.jl:12\n"
  stdout: ''
  timestamp: 1660008722
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    \"\"\"change base of input number x to base.\n  \
    \  return string representation after the conversion.\n    base numbers are less\
    \ than 10.\n    >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n\
    \    \"1000\"\n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nusing Test\n\
    \n@testset begin\n\ncandidate = change_base;\n\t@test(candidate(8, 3) == \"22\"\
    )\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2) == \"11101010\"\
    )\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\"\
    )\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t\
    @test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5,\
    \ 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) ==\
    \ \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp1nrfs_0f.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp1nrfs_0f.jl:1\n\
    in expression starting at /tmp/tmp1nrfs_0f.jl:1\n"
  stdout: ''
  timestamp: 1660008722
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if x < base * 10 + 9 || base * 10 + 9 < x \n    \
    \    error(\"Value out of range\")\n    end\n    if x < 0\n        return \"-\"\
    \ .+ change_base(abs(x), base)\n    end\nusing Test\n\n@testset begin\n\ncandidate\
    \ = change_base;\n\t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3)\
    \ == \"100\")\n\t@test(candidate(234, 2) == \"11101010\")\n\t@test(candidate(16,\
    \ 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\")\n\t@test(candidate(7,\
    \ 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t@test(candidate(3, 4) ==\
    \ \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5, 6) == \"5\"\
    )\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp3sz13l65.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp3sz13l65.jl:1\n\
    in expression starting at /tmp/tmp3sz13l65.jl:1\n"
  stdout: ''
  timestamp: 1660008722
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 2\n    then return x\n    elseif base ==\
    \ 10\n    then return \"0\"\n    elseif base == 11\n    then return \"1\"\n  \
    \  else\n        repeat (base - 2) in (x:gsub(\"^0\", \"\"))\n        else \"\
    0\"\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\t\
    @test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234,\
    \ 2) == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpqt4nuij3.jl:13\nin expression starting at /tmp/tmpqt4nuij3.jl:13\n"
  stdout: ''
  timestamp: 1660008722
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if (base < 1 || base > 10) || x % base != 0\n   \
    \     return \"Invalid Argument\"\n    else\n        return div(x, base)::Int64\n\
    \    end\nend\n</cell>\n<text>\nExercise 7\nWrite a function to generate random\
    \ numbers between 0 and a given integer (including both). Write a function to\
    \ display the histogram of the random numbers.\nWrite a function that receives\
    \ a vector and returns a vector of means of the random values.\nusing Test\n\n\
    @testset begin\n\ncandidate = change_base;\n\t@test(candidate(8, 3) == \"22\"\
    )\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2) == \"11101010\"\
    )\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\"\
    )\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t\
    @test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5,\
    \ 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) ==\
    \ \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpz5gtaccz.jl:18\nin expression starting at\
    \ /tmp/tmpz5gtaccz.jl:18\n"
  stdout: ''
  timestamp: 1660008722
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    \n    if base < 10\n        error(\"Base must be\
    \ less than 10.\")\n    else\n        change_base2 = x // base\n        change_base3\
    \ = x % base\n        \n    if change_base2 == 0\n        return str(change_base3)\n\
    \    else\n        return (change_base2 * base) + change_base3\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\n\"\"\"\nWrite a function to calculate Fibonacci\
    \ series.\nReturn an array of Fibonacci series values.\n\"\"\"\nusing Test\n\n\
    @testset begin\n\ncandidate = change_base;\n\t@test(candidate(8, 3) == \"22\"\
    )\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2) == \"11101010\"\
    )\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\"\
    )\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t\
    @test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5,\
    \ 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) ==\
    \ \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpup7xcopq.jl:25\nin expression starting at\
    \ /tmp/tmpup7xcopq.jl:25\n"
  stdout: ''
  timestamp: 1660008723
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    \"\"\"Convert an integer x from base 10 to base 10.\n\
    \    x is a number.\n    base is an integer.\n    Returns a string. The string\
    \ contains the digits of x after the\n    conversion (most significant digit first).\n\
    \    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\t@test(candidate(8,\
    \ 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2)\
    \ == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpiowmznvz.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpiowmznvz.jl:1\n\
    in expression starting at /tmp/tmpiowmznvz.jl:1\n"
  stdout: ''
  timestamp: 1660008722
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 2\n        \"\"\n    else\n        if (x\
    \ % base) == 0\n            x /= base\n            return x * string(base) + string(base)\n\
    \        else\n            return change_base(x, base)\nend \n\"\"\"\n    end\
    \ \nend \nend \n\"\"\"\n    end \nend \nend \n\"\"\"\n    end \nend \nend \nend\
    \ \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend\
    \ \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend\
    \ \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend\
    \ \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend\
    \ \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend\
    \ \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend\
    \ \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend\
    \ \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend\
    \ \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend\
    \ \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend\
    \ \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend\
    \ \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend\
    \ \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend\
    \ \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend\
    \ \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend\
    \ \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend\
    \ \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend\
    \ \nend \n\nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\t@test(candidate(8,\
    \ 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2)\
    \ == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"end\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpo_0ebjh1.jl:28\nin expression starting at /tmp/tmpo_0ebjh1.jl:28\n"
  stdout: ''
  timestamp: 1660008722
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if x mod base == 0\n    then return(x mod base::String)\n\
    \    else\n        temp = change_base((x div base::Int64), base)\n        return(temp::String\
    \ + base + temp::String)\nend\n\"\"\"\nReturn the string representation of decimal\
    \ number x in the given base\nusing the default conversion.\nThis function is\
    \ equivalent to decimal_string(x, decimal_default)\nbut does not rely on any custom\
    \ conversion.\n\"\"\"\nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\
    \t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234,\
    \ 2) == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"base\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp87fwafhj.jl:12\nin expression starting at /tmp/tmp87fwafhj.jl:12\n"
  stdout: ''
  timestamp: 1660008722
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    digits::Array{Int64, 1} = digits(x)\n    digits[digits-1]\
    \ == base ? digits[digits-1] = base : digits[digits-1] = 1\n    digit_string::String\
    \ = \"\"\n    for digit in digits\n        digit_string += digits_to_string(digit)\n\
    \    end\n    return digit_string\nend\n</cell>\n<cell>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = change_base;\n\t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9,\
    \ 3) == \"100\")\n\t@test(candidate(234, 2) == \"11101010\")\n\t@test(candidate(16,\
    \ 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\")\n\t@test(candidate(7,\
    \ 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t@test(candidate(3, 4) ==\
    \ \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5, 6) == \"5\"\
    )\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7njz52w8.jl:20\nin expression starting at\
    \ /tmp/tmp7njz52w8.jl:20\n"
  stdout: ''
  timestamp: 1660008722
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 10\n        base = 10 :: Int64\n    x ::\
    \ Int64 = String(x) :: Int64\n    if x <= base\n        return String(x :: Int64\
    \ / base :: Int64 * base :: Int64 + base) :: String \n    else if base < x ::\
    \ Int64\n        return String(x - base) :: String \n    else\n        Exception(\"\
    Invalid input\") :: String\nend\n</code>\nThe code above is for converting numbers\
    \ (integers or floats) and changing bases. The output can be converted to Int64\
    \ or Float64 by Int64 function and Float64 function.\n<|/ a dscore=1 tags=julia\
    \ |>\n<| c |>\nThis question was about how to convert the number to a different\
    \ base in Julia. Your answer is more about how to implement the algorithm itself.\n\
    <|/ c |>\n<| a dscore=0 |>\nI have made a function for the same.\n<code>\nusing\
    \ Revise\nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\t@test(candidate(8,\
    \ 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2)\
    \ == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpo4aa23t3.jl:17\nin expression starting at\
    \ /tmp/tmpo4aa23t3.jl:17\n"
  stdout: ''
  timestamp: 1660008722
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    convert x = x mod base\n    return base * x // base\n\
    end\n</cell>\n<code language=julia-1.5>\nchange_base(8, 3)\n</cell>\n<code language=julia-1.5>\n\
    change_base(8, 2)\n</cell>\n<code language=julia-1.5>\nchange_base(7, 2)\n</cell>\n\
    <text>\nExercise 5\nDefine function is_prime(n::Int64)\n    return true if the\
    \ given number n is prime otherwise false\nend\nDefine function next_prime(n::Int64)\n\
    \    return the next prime number greater than n\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = change_base;\n\t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9,\
    \ 3) == \"100\")\n\t@test(candidate(234, 2) == \"11101010\")\n\t@test(candidate(16,\
    \ 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\")\n\t@test(candidate(7,\
    \ 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t@test(candidate(3, 4) ==\
    \ \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5, 6) == \"5\"\
    )\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"function\" at /tmp/tmp_ptc6vvx.jl:11 expected\
    \ \"end\", got \"x\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp_ptc6vvx.jl:12\n\
    in expression starting at /tmp/tmp_ptc6vvx.jl:12\n"
  stdout: ''
  timestamp: 1660008723
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 2 || base > 10\n        throw(ArgumentError(\"\
    Invalid base\"))\n    elseif base == 2\n        return string(x, digits = 1)\n\
    \    else\n        return string(x * div(digits(x), base), digits = base)\n  \
    \  end\nend\n</code>\n<|/ a dscore=3 |>\n<| a tags=julia,string |>\nI added a\
    \ solution that avoids redefining function div. \n<code>\n\"\"\"Change numerical\
    \ base of input number x to base.\nreturn string representation after the conversion.\n\
    base numbers are less than 10.\n\"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = change_base;\n\t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3)\
    \ == \"100\")\n\t@test(candidate(234, 2) == \"11101010\")\n\t@test(candidate(16,\
    \ 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\")\n\t@test(candidate(7,\
    \ 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t@test(candidate(3, 4) ==\
    \ \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5, 6) == \"5\"\
    )\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprlpanzhw.jl:20\nin expression starting at\
    \ /tmp/tmprlpanzhw.jl:20\n"
  stdout: ''
  timestamp: 1660008722
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 10\n        x = 10^base * x\n        return\
    \ to_string(x)\n    elseif base == 0\n        return to_string(x)\n    else\n\
    \        return to_string(x)\nend\n</cell>\n<text>\nQuestion 3.2: Convert a number\
    \ to binary\nWrite a function that takes a number as input and returns a string\
    \ with the binary representation of that number. Your function should allow one\
    \ parameter and return a string.\nusing Test\n\n@testset begin\n\ncandidate =\
    \ change_base;\n\t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3) ==\
    \ \"100\")\n\t@test(candidate(234, 2) == \"11101010\")\n\t@test(candidate(16,\
    \ 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\")\n\t@test(candidate(7,\
    \ 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t@test(candidate(3, 4) ==\
    \ \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5, 6) == \"5\"\
    )\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpel6bj6y7.jl:20\nin expression starting at\
    \ /tmp/tmpel6bj6y7.jl:20\n"
  stdout: ''
  timestamp: 1660008723
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base==0 \n        then \"0\" \n    else if x is\
    \ Inf \n        then \"Inf\"\n    else if x is -Inf \n        then \"-Inf\"\n\
    \    else if base<=0 \n        then \"NaN\"\n    elseif base<=16\n        then\
    \ strcat(change_base(div(x, base), base-1),div(mod(x, base), base-1))\n    else\
    \ if base<=10 \n        then \"0\" + change_base(div(x, base), base)\n    else\
    \ if base<=2 \n        then \"10\" + change_base(div(x, base), base)\n    else\
    \ if base<=10 \n        then change_base(mod(x, base),base)\n    else if base<=2\
    \ \n        then \"100\" + change_base(mod(x, base), base)\n    else if base<=10\
    \ \n        then change_base(div(x, base), base)\n    else if base<=2 \n     \
    \   then \"1000\" + change_base(mod(x, base), base)\n    else if base<=10 \n \
    \       then change_base(div(x, base), base)\n    else if base<=2 \n        then\
    \ \"10000\" + change_base(mod(x, base), base)\n    else if base<=10 \n       \
    \ then change_base(div(x, base), base)\n    else if base<=2 \n        then \"\
    100000\" + change_base(mod(x, base), base)\n    else if base<=10 \n        then\
    \ change_base(div(x, base), base)\n    else if base<=2 \n        then \"1000000\"\
    \ + change_base(mod(x, base), base)\n    else if base<=10 \n        then change_base(div(x,\
    \ base), base)\n    else if base<=2 \n        then \"10000000\" + change_base(mod(x,\
    \ base), base)\n    else if base<=10 \n        then change_base(div(x, base),\
    \ base)\n    else if base<=2 \n        then \"100000000\" + change_base(mod(x,\
    \ base), base)\n    else if base<=10 \n        then change_base(div(x, base),\
    \ base)\n    else if base<=2 \n        then \"1000000000\" + change_base(mod(x,\
    \ base), base)\n    else if base<=10 \n        then change_base(div(x, base),\
    \ base)\n    else if base<=2 \n        then \"10000000000\" + change_base(mod(x,\
    \ base), base)\n    else if base<=10 \n        then change_base(div(x, base),\
    \ base)\n    else if base<=2 \n        then \"100000000000\" + change_base(mod(x,\
    \ base), base)\n    else if base<=10 \n        then change_base(div(x, base),\
    \ base)\nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\t@test(candidate(8,\
    \ 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2)\
    \ == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"\"\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpz0ju1wjl.jl:13\nin expression starting at /tmp/tmpz0ju1wjl.jl:13\n"
  stdout: ''
  timestamp: 1660008724
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if x > 10\n        error(\"x must be < 10\")\n  \
    \  else\n        if base > 36\n            error(\"base must be < 36\")\n    \
    \    else\n            return str(base * int(x/base))\n    end\nend\n</cell>\n\
    <code language=julia-1.6>\n\"\"\"Convert the number to its string representation.\n\
    \    base numbers are less than 10.\n    \n    >>> change_base(8, 3)\n    \"22\"\
    \n    >>> change_base(8, 2)\n    \"1000\"\n    >>> change_base(7, 2)\n    \"111\"\
    \n\"\"\"\nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\t@test(candidate(8,\
    \ 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2)\
    \ == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbg7nilv2.jl:21\nin expression starting at\
    \ /tmp/tmpbg7nilv2.jl:21\n"
  stdout: ''
  timestamp: 1660008724
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 10 || base > 36 || base > base\n      \
    \  throw(string(\"'base' must be in range 10..36 and less than \" * string(base)\
    \ + \"\\n\") * 100)\n    return to_string(x%base) \nend\n</cell>\n<code language=julia-1.6>\n\
    \"\"\"\nReturn sum of 2 numbers.\n@function sum_of_two_numbers\n    @input numbers\
    \ (Int64)\n    @input base (Int64)\n    @output number (Int64)\n    @return sum\
    \ of 2 numbers.\n\"\"\"\nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\
    \t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234,\
    \ 2) == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7188_mzs.jl:16\nin expression starting at\
    \ /tmp/tmp7188_mzs.jl:16\n"
  stdout: ''
  timestamp: 1660008724
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    \"\"\"Convert number x to base.\"\"\"\n    return\
    \ base_string(x/base)*base\nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\
    \t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234,\
    \ 2) == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpvt6_vxsd.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpvt6_vxsd.jl:1\n\
    in expression starting at /tmp/tmpvt6_vxsd.jl:1\n"
  stdout: ''
  timestamp: 1660008724
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \nif base > 0 && (x >= 10 || x < 0)\n    return \"base\
    \ must be positive\"\n    if base > 0 && x > (base**10)\n        return \"too\
    \ big for base\"\n    if base < 0 && x < (-base**10)\n        return \"too small\
    \ for base\"\n    \n    return String(((x//base)**10)*base)\nend\n</cell>\n<text>\n\
    3.2 Print a number in the given base\nThe function print converts the number to\
    \ a string representation in the given base.\nA base is represented by a number\
    \ and must be an integer.\nIf the base is less than 0 the function will throw\
    \ an error\nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\t@test(candidate(8,\
    \ 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2)\
    \ == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"x^y\" instead of \"x**y\" for exponentiation,\
    \ and \"x...\" instead of \"**x\" for splatting.\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp0wvnyeml.jl:14\nin expression starting at /tmp/tmp0wvnyeml.jl:14\n"
  stdout: ''
  timestamp: 1660008724
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if x < base\n        error(\"base must be less than\
    \ 10\")\n    else\n        base <= 10 && x > 0 && x mod base == 0 && string(x,\
    \ base)\n    end\nend\n</code>\n<|/ a |>\n<| c |>\nThis answer would be more useful\
    \ if you could explain how it works.\n<|/ c |>\n<| c |>\nThanks, I did it for\
    \ you.\n<|/ c |>\n<| a dscore=4 |>\nMy guess is that you only want a single character\
    \ output, i.e. '7' rather than '77'.\n<code>\nusing Test\n\n@testset begin\n\n\
    candidate = change_base;\n\t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9,\
    \ 3) == \"100\")\n\t@test(candidate(234, 2) == \"11101010\")\n\t@test(candidate(16,\
    \ 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\")\n\t@test(candidate(7,\
    \ 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t@test(candidate(3, 4) ==\
    \ \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5, 6) == \"5\"\
    )\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"if\" at /tmp/tmpcevqjzun.jl:12 expected \"\
    end\", got \"mod\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpcevqjzun.jl:15\n\
    in expression starting at /tmp/tmpcevqjzun.jl:15\n"
  stdout: ''
  timestamp: 1660008724
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base > 10 || base < 1 \n        return \"Invalid\
    \ base\"\n    var digits = [String]()\n    var remainder = x % base\n    \n  \
    \  for digit in digits:\n        digits.append(rem(digit, remainder))\n    rem\
    \ = x // base\n    digits.append(rem)\n    \n    return join(digits, \"\")\nend\n\
    using Test\n\n@testset begin\n\ncandidate = change_base;\n\t@test(candidate(8,\
    \ 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2)\
    \ == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"digits\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpcug2nlcs.jl:14\nin expression starting at /tmp/tmpcug2nlcs.jl:14\n"
  stdout: ''
  timestamp: 1660008724
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n  if base < 10\n    \n    return str((x % base) / base)\
    \ * base\n  else\n    return \"Error\"\nend\nusing Test\n\n@testset begin\n\n\
    candidate = change_base;\n\t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9,\
    \ 3) == \"100\")\n\t@test(candidate(234, 2) == \"11101010\")\n\t@test(candidate(16,\
    \ 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\")\n\t@test(candidate(7,\
    \ 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t@test(candidate(3, 4) ==\
    \ \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5, 6) == \"5\"\
    )\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpb6jott7d.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpb6jott7d.jl:1\n\
    in expression starting at /tmp/tmpb6jott7d.jl:1\n"
  stdout: ''
  timestamp: 1660008724
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n        if base < 10 \n            error(\"base numbers\
    \ are less than 10\")\n        else if base == 10 \n            return \"0\"\n\
    \        else \n            str = \"\"\n            acc = 1\n            digits\
    \ = digits(x)\n            len = digits.length\n            for (i <- 0 until\
    \ len)\n                str += digits[i] * (base ** i)\n            return str\n\
    end\n</code>\n<|/ a dscore=0 |>\n<| c |>\nPlease explain your solution. Code only\
    \ answers are usually discouraged, especially when they use code outside of the\
    \ language you are using.\n<|/ c |>\n<| a tags=algorithm,math,numbers,base,haskell\
    \ |>\nI used this code because I want to find primes numbers of any base!\n<code>\n\
    primes :: Int -> [Int]\nprimes n = [ x | x <- [2..n], n `mod` x == 0]\n</code>\n\
    The code above takes numbers from 0 to n and returns the list of prime numbers\
    \ from 0 to n\nNow I want to find numbers from 0 to n in different bases\n<code>\n\
    number :: Int -> Int -> Int\nnumber base n\n    | n > base = error \"n must be\
    \ greater than base\"\n    | n `mod` base == 0 = n `div` base\n    | otherwise\
    \ = error \"n must be divisible by base\"\n</code>\nThis code returns the number\
    \ from base to base (for example base 10 from 0 to 15)\n<code>\nnumberIn :: Int\
    \ -> [Int] -> [Int]\nnumberIn base n\n    | n > base = error \"n must be greater\
    \ than base\"\n    | n == 0 = [1]\n    | otherwise = if (n==1)\n             \
    \       then (base==1)\n                    else map (n*x) number base (n-1)\n\
    \    where x = base\n</code>\nThis code returns the number from base to base (for\
    \ example base 10 from 0 to 15) in a list of numbers from base to base\n<code>\n\
    listIn :: Int -> [Int] -> [Int]\nlistIn base n\n    | n > base = error \"n must\
    \ be greater than base\"\n    | n == 0 = [1]\n    | otherwise = if (n==1)\n  \
    \                  then (base==1)\n                    else map (n*x) listIn base\
    \ (n-1)\n    where x = base\n</code>\nNow the main code\n<code>\nbase :: Int ->\
    \ Int -> [Int]\nbase base n\n    | n < base = error \"n must be greater than base\"\
    \n    | n == 0 = [1]\n    | otherwise = primes n\n    where\n        x :: Int\n\
    \        x =\n            numberIn base (listIn base n)\n        x :: Int\n  \
    \      x =\n            number\nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\
    \t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234,\
    \ 2) == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxspl8hn_.jl:14\nin expression starting at\
    \ /tmp/tmpxspl8hn_.jl:14\n"
  stdout: ''
  timestamp: 1660008724
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 2 || base > 64 || x == 0\n        throw(Exception,\
    \ \"base must be in [1,64]\")\n    end\n    if x == 0\n        return \"0\"\n\
    \    end\n    base = convert(Int64, base)\n    x = convert(Int64, x)\n    if base\
    \ == 10\n        if x < 10\n            return x\n        else\n            return\
    \ \"A\"\n        end\n    end\n    if base == 16\n        if x < 10\n        \
    \    return x\n        else\n            if x mod 16 == 0\n                return\
    \ \"A\"\n            else\n                return \"a\"\n            end\n   \
    \     end\n    end\n    if base == 8\n        if x < 10\n            return x\n\
    \        else\n            if x mod 8 == 0\n                return \"0\"\n   \
    \         else\n                return \"8\"\n            end\n        end\n \
    \   end\n    if base == 2\n        if x < 10\n            return x\n        else\n\
    \            if x mod 2 == 0\n                return \"0\"\n            else\n\
    \                return \"2\"\n            end\n        end\n    end\n    if base\
    \ == 1\n        if x < 10\n            return x\n        else\n            if\
    \ x mod 1 == 0\n                return \"0\"\n            else\n             \
    \   return \"1\"\n            end\n        end\n    end\n    if base == 8\n  \
    \      if x < 10\n            return x\n        else\n            if x mod 8 ==\
    \ 0\n                return \"0\"\n            else\n                return \"\
    8\"\n            end\n        end\n    end\n    if base == 16\n        if x <\
    \ 10\n            return x\n        else\n            if x mod 16 == 0\n     \
    \           return \"0\"\n            else\n                return \"A\"\n   \
    \         end\n        end\n    end\n    return \"\"\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    convert(::Type{Int64}, x::String) -> (Int64)\nusing Test\n\n@testset\
    \ begin\n\ncandidate = change_base;\n\t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9,\
    \ 3) == \"100\")\n\t@test(candidate(234, 2) == \"11101010\")\n\t@test(candidate(16,\
    \ 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\")\n\t@test(candidate(7,\
    \ 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t@test(candidate(3, 4) ==\
    \ \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5, 6) == \"5\"\
    )\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"16\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpwrngjmem.jl:31\nin expression starting at /tmp/tmpwrngjmem.jl:31\n"
  stdout: ''
  timestamp: 1660008724
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base == 10\n        return string(x)\n    elseif\
    \ base == 2\n        return string(x*10^floor(log10(abs(x)))) % 10^ceil(log10(abs(x)))\n\
    \    else\n        if base < 2 || base > 10\n            error(\"Invalid base.\
    \ Must be 2...10\")\n        else\n            return string(x*base^floor(log10(abs(x))))\
    \ % base^ceil(log10(abs(x)))\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ change_base;\n\t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3) ==\
    \ \"100\")\n\t@test(candidate(234, 2) == \"11101010\")\n\t@test(candidate(16,\
    \ 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\")\n\t@test(candidate(7,\
    \ 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t@test(candidate(3, 4) ==\
    \ \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5, 6) == \"5\"\
    )\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"if\" at /tmp/tmpqqt3z2kb.jl:14\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpqqt3z2kb.jl:1\n\
    in expression starting at /tmp/tmpqqt3z2kb.jl:1\n"
  stdout: ''
  timestamp: 1660008724
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if x > 10\n    then \n        return change_base((x\
    \ / base)*base, base) + to_string(x)\n    else\n        return to_string(x)\n\
    </code>\n<|/ a dscore=1 |>\n<| a tags=haskell,type-conversion |>\nUsing divMod\
    \ for integer division avoids type conversions, which is usually good practice\
    \ and also saves you from having to type all those parentheses:\n<code>\nchangeBase\
    \ :: Int -> Int -> String\nchangeBase x y = concat $ map show (map divMod [base..(y+1)])\n\
    </code>\n<|/ a dscore=0 |>\n<| c |>\nThanks, I did not know about `divMod`.\n\
    <|/ c |>\n<| a |>\nHere is a variant which doesn't use divMod, uses remainders\
    \ and some pattern matching, which I think might be slightly faster.\n<code>\n\
    changeBase :: Int -> Int -> String\nchangeBase x y = concat $ map show ([base..(y+1)]\
    \ !! (divMod x base - 1))\n</code>\n<|/ a dscore=0 tags=haskell,type-conversion\
    \ |>\n<| c |>\n`!!` can be done in linear time as well, so this is not faster,\
    \ is it? And I see no reason why it would be slower than using `divMod`.\n<|/\
    \ c |>\n<| c |>\nYes, that's true, but I like my version for readability, because\
    \ it uses `divMod`.\n<|/ c |>\n<| c |>\n`!!` can be done in constant time, so\
    \ I don't think it matters that much. Although it's probably worth mentioning\
    \ that `divMod` is probably implemented as something like `divMod x base `div`\
    \ base^2 + 1`, which means it'll be an approximation rather than a strict integer\
    \ division.\n<|/ c |>\n<| c |>\nThanks, I did not know about `divMod`.\n<|/ c\
    \ |>\n<| a |>\nHere is a solution using Data.Int\n<code>\nimport Data.Int\nusing\
    \ Test\n\n@testset begin\n\ncandidate = change_base;\n\t@test(candidate(8, 3)\
    \ == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2) ==\
    \ \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpq4z7buo2.jl:17\nin expression starting at\
    \ /tmp/tmpq4z7buo2.jl:17\n"
  stdout: ''
  timestamp: 1660008724
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base > 10 || base < 1\n        throw Exception(\"\
    Invalid base: expected 1 <= base <= 10\")\n    \n    if base == 1\n        if\
    \ x == 0\n            return toString(0, base)\n        \n        toString(x,\
    \ base)\n    else \n        if x == 0\n            return toString(0, base)\n\
    \        \n        toString(x, base)\n            \n            \n           \
    \ \nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\t@test(candidate(8,\
    \ 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2)\
    \ == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"Exception\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp28lz0yof.jl:13\nin expression starting at /tmp/tmp28lz0yof.jl:13\n"
  stdout: ''
  timestamp: 1660008724
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base<=10\n        \n        return \"\\(x * base^0)\"\
    \n    \n    \n    elif base>10\n        \n        return \"\\(x * base^1)\"\n\
    \    else\n        \n        return \"\\(x * base^2)\"\n        \nend # end change_base\n\
    </cell>\n<code language=julia-1.3>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = change_base;\n\t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3)\
    \ == \"100\")\n\t@test(candidate(234, 2) == \"11101010\")\n\t@test(candidate(16,\
    \ 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\")\n\t@test(candidate(7,\
    \ 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t@test(candidate(3, 4) ==\
    \ \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5, 6) == \"5\"\
    )\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpwydv9ubx.jl:14\nin expression starting at /tmp/tmpwydv9ubx.jl:14\n"
  stdout: ''
  timestamp: 1660008724
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n\"\"\"Change numerical base of input number x to base.\n\
    \    return string representation after the conversion.\n    base numbers are\
    \ less than 10.\n    >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8,\
    \ 2)\n    \"1000\"\n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nusing\
    \ Test\n\n@testset begin\n\ncandidate = change_base;\n\t@test(candidate(8, 3)\
    \ == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2) ==\
    \ \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpkstchsvz.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpkstchsvz.jl:1\n\
    in expression starting at /tmp/tmpkstchsvz.jl:1\n"
  stdout: ''
  timestamp: 1660008724
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if x < base \n        then base::String\n       \
    \ else\n            \"\"\nend function change_base\n</code>\n<|/ a dscore=1 |>\n\
    <| c |>\nThis answer uses string concatenation, which is inefficient and should\
    \ be avoided.\n<|/ c |>\n<| a tags=julia,numbers,string,type-conversion,base10\
    \ |>\nA more idiomatic approach is to use string formatting like this:\n<code>\n\
    using Test\n\n@testset begin\n\ncandidate = change_base;\n\t@test(candidate(8,\
    \ 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2)\
    \ == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"base\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp8tuyyu13.jl:13\nin expression starting at /tmp/tmp8tuyyu13.jl:13\n"
  stdout: ''
  timestamp: 1660008724
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base<10\n        return str(x)\n    elseif base==10\n\
    \        return f'0{x}'\n    else\n        return str((base-10)*(x/base)+(x%base))\n\
    end\n\"\"\"\nGiven two strings and a position p where p <= len(str1), the strings\
    \ \nare swapped. \nReturn a new string with the swapped characters. \n\"\"\"\n\
    using Test\n\n@testset begin\n\ncandidate = change_base;\n\t@test(candidate(8,\
    \ 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2)\
    \ == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"0\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpaj4b1igk.jl:15\nin expression starting at /tmp/tmpaj4b1igk.jl:15\n"
  stdout: ''
  timestamp: 1660008724
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 2\n        error(\"base number must be\
    \ more than 2\")\n    else\n        if base == 10\n            return toString(x)\n\
    \        else\n            digits = [toString(digit(x, base)) for x in digits(x)]\
    \ \n            digits[end+1] = \"\"\n            return join(\"\", digits[0..end-1],\
    \ digits[end])\nend\n</cell>\n<code language=julia-1.5>\nchange_base(8, 2)\n</cell>\n\
    <code language=julia-1.5>\nchange_base(8, 3)\n</cell>\n<text>\nExercise: Find\
    \ the first occurence of any digit in a number in Julia\nusing Test\n\n@testset\
    \ begin\n\ncandidate = change_base;\n\t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9,\
    \ 3) == \"100\")\n\t@test(candidate(234, 2) == \"11101010\")\n\t@test(candidate(16,\
    \ 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\")\n\t@test(candidate(7,\
    \ 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t@test(candidate(3, 4) ==\
    \ \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5, 6) == \"5\"\
    )\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwn26onz9.jl:22\nin expression starting at\
    \ /tmp/tmpwn26onz9.jl:22\n"
  stdout: ''
  timestamp: 1660008724
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if x < base && base <= 36\n        return show(show(x\
    \ % base) + base^(x/base), base)\n    else error(\"Invalid base\")\nend\n</code>\n\
    <|/ a dscore=2 |>\n<| a |>\nOne line solution:\n<code>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = change_base;\n\t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9,\
    \ 3) == \"100\")\n\t@test(candidate(234, 2) == \"11101010\")\n\t@test(candidate(16,\
    \ 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\")\n\t@test(candidate(7,\
    \ 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t@test(candidate(3, 4) ==\
    \ \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5, 6) == \"5\"\
    )\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmph59d0ghu.jl:16\nin expression starting at\
    \ /tmp/tmph59d0ghu.jl:16\n"
  stdout: ''
  timestamp: 1660008724
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base<10\n        return x\n    digits = string.split(tostring(x),\
    \ '')\n    return join(map(change_base, digits[base-1:base]), digits[1])\nusing\
    \ Test\n\n@testset begin\n\ncandidate = change_base;\n\t@test(candidate(8, 3)\
    \ == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2) ==\
    \ \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid empty character literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpixtjbpom.jl:14\nin expression starting at\
    \ /tmp/tmpixtjbpom.jl:14\n"
  stdout: ''
  timestamp: 1660008724
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if x <= base\n        return (10*base) + x\n    if\
    \ x > base\n        return (change_base(x / base, base) * base) + x\n    return\
    \ x\nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\t@test(candidate(8,\
    \ 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2)\
    \ == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2k67mvfv.jl:1\nin expression starting at /tmp/tmp2k67mvfv.jl:1\n"
  stdout: ''
  timestamp: 1660008724
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if x <= base \n    then x mod base + base else x\
    \ mod base end\nend\n</code>\n<|/ a dscore=2 |>\n<| a dscore=1 tags=functional-programming,julia\
    \ |>\nThis approach works as well and is more elegant, but doesn't use mutable\
    \ variables:\n<code>\nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\
    \t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234,\
    \ 2) == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"x\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpfwf9ygz7.jl:13\nin expression starting at /tmp/tmpfwf9ygz7.jl:13\n"
  stdout: ''
  timestamp: 1660008725
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n        if base > 10 || base < 1\n            throw(ArgumentError(\"\
    Base must be between 0 and 10\"))\n        if x==0\n            throw(ArgumentError(\"\
    Cannot convert 0 to an octal\"))\n        if base==8\n            return tostring(x)\n\
    \        if base==10\n            return tostring(x:Int64:8)\n        if base==16\n\
    \            return tostring(x:Int64:16)\n        \n        x = mod(x, base)\n\
    \        base = Int(base)\n        rest = Int(base) - Int(x)\n        \n     \
    \   function convert(x::Int64)\n            if x>base\n                return\
    \ tostring(x:Int64:base)\n            else\n                convert(rem)\n   \
    \     end\n        return convert(x)\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = change_base;\n\t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9,\
    \ 3) == \"100\")\n\t@test(candidate(234, 2) == \"11101010\")\n\t@test(candidate(16,\
    \ 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\")\n\t@test(candidate(7,\
    \ 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t@test(candidate(3, 4) ==\
    \ \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5, 6) == \"5\"\
    )\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpksl3ryeb.jl:1\nin expression starting at /tmp/tmpksl3ryeb.jl:1\n"
  stdout: ''
  timestamp: 1660008726
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    \n    if base == 10 && x < 10 \n        then \"0\"\
    \ \n    else if base == 10 && x == 0 \n        then \"0\" \n    else if base ==\
    \ 10 && x > 0 \n        then \"0\" + base\n    else if base == 10 && x < 10 \n\
    \        then \"0\" + base\n    else if base == 10 && x == 0 \n        then \"\
    0\" + base\n    else if base == 10 && x > 0 \n        then \"0\" + base\n    else\
    \ if base == 8 && x < 10 \n        then \"0\" + base\n    else if base == 8 &&\
    \ x == 0 \n        then \"0\" \n    else if base == 8 && x > 0 \n        then\
    \ \"0\" + base\n    else if base == 8 && x < 10 \n        then \"0\" \n    else\
    \ if base == 8 && x == 0 \n        then \"0\" \n    else if base == 8 && x > 0\
    \ \n        then \"0\" + base\n    else if base == 7 && x < 10 \n        then\
    \ \"0\" + base\n    else if base == 7 && x == 0 \n        then \"0\" \n    else\
    \ if base == 7 && x > 0 \n        then \"0\" + base\n    else if base == 7 &&\
    \ x < 10 \n        then \"0\" \n    else if base == 7 && x == 0 \n        then\
    \ \"0\" \n    else if base == 7 && x > 0 \n        then \"0\" + base\n    else\
    \ if base == 6 && x < 10 \n        then \"0\" + base\n    else if base == 6 &&\
    \ x == 0 \n        then \"0\" \n    else if base == 6 && x > 0 \n        then\
    \ \"0\" + base\n    else if base == 6 && x < 10 \n        then \"0\" \n    else\
    \ if base == 6 && x == 0 \n        then \"0\" \n    else if base == 6 && x > 0\
    \ \n        then \"0\" + base\n    else if base == 5 && x < 10 \n        then\
    \ \"0\" + base\n    else if base == 5 && x == 0 \n        then \"0\" \n    else\
    \ if base == 5 && x > 0 \n        then \"0\" + base\n    else if base == 5 &&\
    \ x < 10 \n        then \"0\" \n    else if base == 5 && x == 0 \n        then\
    \ \"0\" \n    else if base == 5 && x > 0 \n        then \"0\" + base\n    else\
    \ if base == 4 && x < 10 \n        then \"0\" + base\n    else if base == 4 &&\
    \ x == 0 \n        then \"\nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\
    \t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234,\
    \ 2) == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"\"\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpozzlsgeo.jl:14\nin expression starting at /tmp/tmpozzlsgeo.jl:14\n"
  stdout: ''
  timestamp: 1660008726
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n\"\"\"\n    \n    \n    \"\"\"\n    # Change base of\
    \ a number x to base b\n    # change digits in x without converting the number\n\
    \    Change base of a number x to base b\n    change digits in x without converting\
    \ the number\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\
    \t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234,\
    \ 2) == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"function\" at /tmp/tmpg5hi_7oi.jl:11 expected\
    \ \"end\", got \"base\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpg5hi_7oi.jl:18\n\
    in expression starting at /tmp/tmpg5hi_7oi.jl:18\n"
  stdout: ''
  timestamp: 1660008726
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if x <= base \n        then base * x + to_string(x)\
    \ - to_string(1)\n        else x\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = change_base;\n\t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9,\
    \ 3) == \"100\")\n\t@test(candidate(234, 2) == \"11101010\")\n\t@test(candidate(16,\
    \ 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\")\n\t@test(candidate(7,\
    \ 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t@test(candidate(3, 4) ==\
    \ \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5, 6) == \"5\"\
    )\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"base\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp7e0yiuve.jl:13\nin expression starting at /tmp/tmp7e0yiuve.jl:13\n"
  stdout: ''
  timestamp: 1660008726
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if x < 10 then \n        return string(x) # return\
    \ string representation of x\n    else \n        digits = str(base) \n       \
    \ while x >= base \n            digits = base * digits \n            x /= base\n\
    \        return digits\n    end\nend\n</code>\n<|/ a dscore=1 tags=julia |>\n\
    <| c |>\nThis code is quite different from what was posted in question and does\
    \ not include base conversion.\n<|/ c |>\n<| a dscore=1 |>\nSince you mentioned\
    \ \"string conversion\", here you go:\n<code>\nusing Test\n\n@testset begin\n\n\
    candidate = change_base;\n\t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9,\
    \ 3) == \"100\")\n\t@test(candidate(234, 2) == \"11101010\")\n\t@test(candidate(16,\
    \ 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\")\n\t@test(candidate(7,\
    \ 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t@test(candidate(3, 4) ==\
    \ \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5, 6) == \"5\"\
    )\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsuyzy8n0.jl:22\nin expression starting at\
    \ /tmp/tmpsuyzy8n0.jl:22\n"
  stdout: ''
  timestamp: 1660008726
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base > 10\n        throw new ArgumentError(\"\
    base number must be less than 10\")\n    elseif base < 2\n        throw new ArgumentError(\"\
    base number must be greater than 2\")\n    else\n        if base == 2 \n     \
    \       string = sprintf(\"%0${digits}d\", x)\n        elseif base == 10 \n  \
    \          string = sprintf(\"%0${digits}d\", x)\n        elseif base == 16\n\
    \            string = sprintf(\"%0${digits}x\", x)\n        else\n           \
    \ if base == 8\n                string = sprintf(\"%0${digits}b\", x)\n      \
    \      else\n                throw new ArgumentError(\"base number must be 8 or\
    \ 16\")\n        end\n    end\n    return string\nend\n</cell>\n<text>\nNow we\
    \ define function which converts the binary representation of a number to decimal\
    \ number\nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\t@test(candidate(8,\
    \ 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2)\
    \ == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"new\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpck0t6x0w.jl:13\nin expression starting at /tmp/tmpck0t6x0w.jl:13\n"
  stdout: ''
  timestamp: 1660008726
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 10\n    return \"0\" * (base - 1) + x \n\
    else\n    return string(x)\nend\nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\
    \t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234,\
    \ 2) == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp8c311a6c.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp8c311a6c.jl:1\n\
    in expression starting at /tmp/tmp8c311a6c.jl:1\n"
  stdout: ''
  timestamp: 1660008726
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base<=10\n        return String[(x+base)%base]\n\
    \    else\n        return change_base(x, base)\nend\n</cell>\n<text>\nPart 6 -\
    \ String Trimming\nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\t\
    @test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234,\
    \ 2) == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_ql7juol.jl:17\nin expression starting at\
    \ /tmp/tmp_ql7juol.jl:17\n"
  stdout: ''
  timestamp: 1660008726
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base==1 \n        return x\n    if base==2 \n\
    \        return string(base*x)\n    if base==3 \n        return string(base*x)\n\
    \    if base==4 \n        return string(base*x)\n    if base==5 \n        return\
    \ string(base*x)\n    if base==6 \n        return string(base*x)\n    if base==7\
    \ \n        return string(base*x)\n    if base==8 \n        return string(base*x)\n\
    \    if base==9 \n        return string(base*x)\n    if base==10\n        return\
    \ string(base*x)\n    if base==11\n        return string(base*x)\n    if base==12\n\
    \        return string(base*x)\n    if base==13\n        return string(base*x)\n\
    \    if base==14\n        return string(base*x)\n    if base==15\n        return\
    \ string(base*x)\n    if base==16\n        return string(base*x)\n    if base==17\n\
    \        return string(base*x)\n    if base==18\n        return string(base*x)\n\
    \    if base==19\n        return string(base*x)\n    if base==20\n        return\
    \ string(base*x)\n    if base==21\n        return string(base*x)\n    if base==22\n\
    \        return string(base*x)\n    if base==23\n        return string(base*x)\n\
    \    if base==24\n        return string(base*x)\n    if base==25\n        return\
    \ string(base*x)\n    if base==26\n        return string(base*x)\n    if base==27\n\
    \        return string(base*x)\n    if base==28\n        return string(base*x)\n\
    \    if base==29\n        return string(base*x)\n    if base==30\n        return\
    \ string(base*x)\n    if base==31\n        return string(base*x)\n    if base==32\n\
    \        return string(base*x)\n    if base==33\n        return string(base*x)\n\
    \    if base==34\n        return string(base*x)\n    if base==35\n        return\
    \ string(base*x)\n    if base==36\n        return string(base*x)\n    if base==37\n\
    \        return string(base*x)\n    if base==38\n        return string(base*x)\n\
    \    if base==39\n        return string(base*x)\n    if base==40\n        return\
    \ string(base*x)\n    if base==41\n        return string(base*x)\n    if base==42\n\
    \        return string(base*x)\n    if base==43\n        return string(base*x)\n\
    \    if base==44\n        return string(base*x)\n    if base==45\n        return\
    \ string(base*x)\n    if base==46\n        return string(base*x)\n    if base==47\n\
    \        return string(base*x)\nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\
    \t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234,\
    \ 2) == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5kktjm0o.jl:1\nin expression starting at /tmp/tmp5kktjm0o.jl:1\n"
  stdout: ''
  timestamp: 1660008726
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base == 2\n        return '{:b}'.format(x)\n \
    \   else if base > 2\n        return change_base(x / base, base)*base\n    else\n\
    \        return change_base(x/base, base)*base\nend\n</cell>\n<text>\nThis time\
    \ we write a function that converts binary numbers to decimals:\nusing Test\n\n\
    @testset begin\n\ncandidate = change_base;\n\t@test(candidate(8, 3) == \"22\"\
    )\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2) == \"11101010\"\
    )\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\"\
    )\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t\
    @test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5,\
    \ 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) ==\
    \ \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: character literal contains multiple characters\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmp75butd9q.jl:13\nin expression\
    \ starting at /tmp/tmp75butd9q.jl:13\n"
  stdout: ''
  timestamp: 1660008726
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if x == 0\n        return str(base)\n    \n    x\
    \ % base == 0 ? x : x + (base - x % base) + base\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = change_base;\n\t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9,\
    \ 3) == \"100\")\n\t@test(candidate(234, 2) == \"11101010\")\n\t@test(candidate(16,\
    \ 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\")\n\t@test(candidate(7,\
    \ 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t@test(candidate(3, 4) ==\
    \ \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5, 6) == \"5\"\
    )\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpev3r1t6d.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpev3r1t6d.jl:1\n\
    in expression starting at /tmp/tmpev3r1t6d.jl:1\n"
  stdout: ''
  timestamp: 1660008726
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n  \n  \"\"\"\n    Define a function that change base\
    \ of a number to another base\n    \n    \n    >>> change_base(2, 4)\n    \"10\"\
    \n    >>> change_base(11, 7)\n    \"17\"\n    >>> change_base(10, 10)\n    \"\
    100\"\n    >>> change_base(13, 7)\n    \"18\"\n    \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = change_base;\n\t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9,\
    \ 3) == \"100\")\n\t@test(candidate(234, 2) == \"11101010\")\n\t@test(candidate(16,\
    \ 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\")\n\t@test(candidate(7,\
    \ 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t@test(candidate(3, 4) ==\
    \ \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5, 6) == \"5\"\
    )\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp7ru6gbil.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp7ru6gbil.jl:1\n\
    in expression starting at /tmp/tmp7ru6gbil.jl:1\n"
  stdout: ''
  timestamp: 1660008726
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base > 10\n        error(\"base is greater than\
    \ 10.\")\n    else if base < 1\n        error(\"base is less than 1.\")\n    else\n\
    \        str(x, base)\nend\n</code>\nIt might be nice to use \"try\" function\
    \ here but I am not sure how to use it yet.\n<|/ q |>\n<| a dscore=1 tags=julia,types,error-handling\
    \ |>\nYou can do this by wrapping your function call in a try/catch block:\n<code>\n\
    try\n    change_base(8, 3)\ncatch ex\n    if ex isa ArgumentError\n        error(\"\
    base is greater than 10.\")\n    else\n        error(\"Something went wrong\"\
    )\n    end\nend\n</code>\nThis way, if your function is successful, the result\
    \ of the function call is returned and if no exception is thrown the error is\
    \ returned.\n<|/ a |>\n<| a tags=julia,types,error-handling |>\nThe way you are\
    \ doing it now will not work because if x is negative or if base is greater than\
    \ 10, the else branch will not be executed.\nWhat you can do is wrap the function\
    \ call in a try catch block, and have it check if the base is greater than 10,\
    \ if it is, return a \"base is greater than 10\" error, and if it isn't, return\
    \ the converted value.\nSomething like:\n<code>\ntry\n    convert(typeof(x), base::Int64)\n\
    catch ex\n    if ex isa ArgumentError\n        error(\"base is greater than 10.\"\
    )\n    else\n        error(\"Something went wrong.\")\n    end\nend\n</code>\n\
    <|/ a dscore=1 |>\n<| c |>\nThank you for the quick answer. Unfortunately when\
    \ I try to run your solution it shows error message \"ERROR: ArgumentError: MethodError:\
    \ no method matching convert(::Int64, ::Int64)\nClosest candidates are:\n  convert(::Type{Int64},\
    \ ::String) at ./int.jl:45\n  convert(::Type{Int64}, ::Symbol) at ./int.jl:44\n\
    \  convert(::Type{Int64}, ::Type{Int64}) at ./convert.jl:278\n  convert(::Type{Int64},\
    \ ::Type{Int64}, ::Int64) at ./convert.jl:270\n  ...\nStacktrace:\n [1] top-level\
    \ scope at none:0\" . I am not sure what I am doing wrong. Thank you in advance\
    \ for your help.\n<|/ c |>\n<| c |>\nYou still need to wrap your function call\
    \ in a try catch block, so that it returns the correct type.\n<|/ c |>\n<| c |>\n\
    Thank you for the answer, it worked perfectly for me. Can you please explain me\
    \ \nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\t@test(candidate(8,\
    \ 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2)\
    \ == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpozpjazdj.jl:14\nin expression starting at\
    \ /tmp/tmpozpjazdj.jl:14\n"
  stdout: ''
  timestamp: 1660008726
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    digit = digit(x, base)\n    digit0 = digit(0, base)\n\
    \    digit1 = digit(1, base)\n    if digit == 0\n        return digit0\n    if\
    \ digit == 1\n        return digit1\n    if digit == 2\n        return \"1\" +\
    \ digit0\n    if digit == 3\n        return \"1\" + digit1\n    if digit == 4\n\
    \        return \"10\" + digit0\n    if digit == 5\n        return \"10\" + digit1\n\
    \    if digit == 6\n        return \"100\" + digit0\n    if digit == 7\n     \
    \   return \"100\" + digit1\n    if digit == 8\n        return \"1000\" + digit0\n\
    \    if digit == 9\n        return \"1000\" + digit1\nend\n</code>\n<|/ a tags=julia\
    \ |>\n<| a |>\nYou can make your own digits to base 10 function like this:\n<code>\n\
    using Test\n\n@testset begin\n\ncandidate = change_base;\n\t@test(candidate(8,\
    \ 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2)\
    \ == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmple7cbp6g.jl:36\nin expression starting at\
    \ /tmp/tmple7cbp6g.jl:36\n"
  stdout: ''
  timestamp: 1660008726
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base == 10\n        digits = string(to_integer(x),\
    \ base = base)\n    else\n        digits = string(to_integer(x), base = base^1)\n\
    \    \n    return digits\nend\n</cell>\n<code language=julia-1.4>\nchange_base(2,\
    \ 10)\n</cell>\n<code language=julia-1.4>\nchange_base(8, 3)\n</cell>\n<code language=julia-1.4>\n\
    change_base(8, 2)\n</cell>\n<code language=julia-1.4>\nchange_base(8, 4)\n</cell>\n\
    <text>\nExercise 6\nNow write a function replace_base(num::String, base::Int64)\
    \ that takes the string representation of the number num and the base base as\
    \ inputs and returns the string representation of the number num in base base.\
    \ Make sure you use the replace function to replace a base with another base.\
    \ For example, if the string representation has \"10\" in base 10 and you input\
    \ base=3, then your function should return \"11\".\nusing Test\n\n@testset begin\n\
    \ncandidate = change_base;\n\t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9,\
    \ 3) == \"100\")\n\t@test(candidate(234, 2) == \"11101010\")\n\t@test(candidate(16,\
    \ 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\")\n\t@test(candidate(7,\
    \ 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t@test(candidate(3, 4) ==\
    \ \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5, 6) == \"5\"\
    )\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjcqs17wc.jl:19\nin expression starting at\
    \ /tmp/tmpjcqs17wc.jl:19\n"
  stdout: ''
  timestamp: 1660008726
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    \n    if x == 0 \n        return \"0\"\n    elseif\
    \ base < 2 \n        return \"base too small\"\n    elseif base > 10 \n      \
    \  return \"base too large\"\n    elseif base == 2 \n        return \"0\"\n  \
    \  elseif x == 1 \n        return \"1\"\n    else \n        if x > base \n   \
    \         return change_base(floor(x/base), base) + to_string(x%base)\n      \
    \  elseif x < base \n            return change_base(floor(x/base), base) + to_string(x%base)\n\
    \        else\n            return to_string(x)\n        end\n    end\nend\n</code>\n\
    <|/ a tags=function,julia |>\n<| c |>\nWhile I do appreciate the detailed answer,\
    \ the answer from is a better fit for my specific use case.\n<|/ c |>\n<| c |>\n\
    No problem! I suppose if you would like to upvote this answer you might consider\
    \ upvoting mine. :) I'm just trying to be helpful to people who are looking for\
    \ a solution to a similar problem, but I think this does a better job of it than\
    \ my other answer.\n<|/ c |>\n<| c |>\nI would have given credit too, but I can't\
    \ upvote it because I haven't enough reputation.\n<|/ c |>\n<| a dscore=1 |>\n\
    As explained in the comments, there are many ways to do the same thing. Here are\
    \ some examples.\n<code>\njulia> function change_base(x::Int64, base::Int64)::String\n\
    \           if x == 0 \n               return \"0\"\n           elseif base <\
    \ 2 \n               return \"base too small\"\n           elseif base > 10 \n\
    \               return \"base too large\"\n           elseif base == 2 \n    \
    \           return \"0\"\n           elseif x == 1 \n               return \"\
    1\"\n           else \n               if x > base \n                   return\
    \ change_base(floor(x/base), base) + to_string(x%base)\n               elseif\
    \ x < base \n                   return change_base(floor(x/base), base) + to_string(x%base)\n\
    \               else\n                   return to_string(x)\n               end\n\
    \           end\n       end\nchange_base (generic function with 1 method)\nusing\
    \ Test\n\n@testset begin\n\ncandidate = change_base;\n\t@test(candidate(8, 3)\
    \ == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2) ==\
    \ \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpo7y430px.jl:33\nin expression starting at\
    \ /tmp/tmpo7y430px.jl:33\n"
  stdout: ''
  timestamp: 1660008726
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 0\n        return error(\"Base must be\
    \ positive\")\n    let mut res = String::new()\n    let mut m = x\n    if base\
    \ < 10\n        && base > 0\n        && x % base == 0\n    {\n        while x\
    \ != 0\n        {\n            res.push_str(&((x / base).to_string()).to_string());\n\
    \            x %= base;\n        }\n        res.push_str(&m.to_string());\n  \
    \  }\n    else if base < 36\n        && base > 0\n        && x % base == 0\n \
    \   {\n        while x != 0\n        {\n            res.push_str(&((x / base).to_string()).to_string());\n\
    \            x %= base;\n        }\n        res.push_str(&m.to_string());\n  \
    \  }\n    else\n        res.push_str(&m.to_string());\n    return res\nend\n</code>\n\
    <|/ a tags=int,julia,string dscore=0 |>\n<| c |>\nThis question is about Julia,\
    \ not Python.\n<|/ c |>\n<| c |>\nI am sorry. My bad for not noting that\n<|/\
    \ c |>\n<| c |>\nThe questioner states they were looking for an answer using julia\
    \ syntax.\n<|/ c |>\n<| c |>\nThis is only a partial answer, as it relies on having\
    \ an `Int` variable called `base`.\n<|/ c |>\n<| c |>\nNo, it doesn't, because\
    \ the author already knows he wants to convert from base 10 to base 3, and it's\
    \ in his code already. This answer doesn't really add anything useful to that,\
    \ but maybe that's what the OP was after. Also, this doesn't even work if you\
    \ try to convert from base 10 directly to base 36.\n<|/ c |>\n<| a tags=int,julia,string\
    \ dscore=0 |>\nHere's my answer with some comments. This is in Julia 1.1, but\
    \ it should be fairly backwards compatible.\n<code>\nusing Test\n\n@testset begin\n\
    \ncandidate = change_base;\n\t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9,\
    \ 3) == \"100\")\n\t@test(candidate(234, 2) == \"11101010\")\n\t@test(candidate(16,\
    \ 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\")\n\t@test(candidate(7,\
    \ 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t@test(candidate(3, 4) ==\
    \ \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5, 6) == \"5\"\
    )\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: let variables should end in \";\" or newline\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmpugdy338n.jl:14\nin expression\
    \ starting at /tmp/tmpugdy338n.jl:14\n"
  stdout: ''
  timestamp: 1660008726
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if x < (base-1)\n        str = base*((x-1)/base)\n\
    \        return str\n    return base*((x/base)+1)\nend\n</cell>\n<text>\nWe define\
    \ a simple function called get_digits::\nusing Test\n\n@testset begin\n\ncandidate\
    \ = change_base;\n\t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3)\
    \ == \"100\")\n\t@test(candidate(234, 2) == \"11101010\")\n\t@test(candidate(16,\
    \ 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\")\n\t@test(candidate(7,\
    \ 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t@test(candidate(3, 4) ==\
    \ \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5, 6) == \"5\"\
    )\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkmvry3oi.jl:17\nin expression starting at\
    \ /tmp/tmpkmvry3oi.jl:17\n"
  stdout: ''
  timestamp: 1660008726
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    \n    if base == 10 \n        \n        # Convert\
    \ x to string and remove all '0' at the begining and the end of string\n     \
    \   str = toString(x)\n        str = substr(str, 2, length(str)-3)\n        \n\
    \        # Return converted string\n        return str\n    \n    \n    elseif\
    \ base < 0 \n        \n        # Return error if base is not negative \n     \
    \   return \"ERROR: base number should be greater than zero\"\n    \n    elseif\
    \ base > 2 \n        \n        # Return error if base is not less than 10\n  \
    \      return \"ERROR: base number should be less than 10\"\n    \n    elseif\
    \ base == 2 \n        \n        # Convert x to string and remove all '0' at the\
    \ begining and the end of string\n        str = toString(x)\n        str = substr(str,\
    \ 2, length(str)-3)\n        \n        # Return converted string\n        return\
    \ str\n    \n    elseif base == 1 \n        \n        # Convert x to string and\
    \ remove all '0' at the begining and the end of string\n        str = toString(x)\n\
    \        str = substr(str, 2, length(str)-3)\n        \n        # Return converted\
    \ string\n        return str\n    \n    elseif base == 0 \n        \n        #\
    \ Convert x to string and remove all '0' at the begining and the end of string\n\
    \        str = toString(x)\n        str = substr(str, 2, length(str)-3)\n    \
    \    \n        # Return converted string\n        return str\n    \n    elseif\
    \ base < 0 \n        \n        # Return error if base is not negative \n     \
    \   return \"ERROR: base number should be greater than zero\"\n    \n    elseif\
    \ base > 2 \n        \n        # Return error if base is not less than 10\n  \
    \      return \"ERROR: base number should be less than 10\"\n    \n    elseif\
    \ base == 2 \n        \n        # Convert x to string and remove all '0' at the\
    \ begining and the end of string\n        str = toString(x)\n        str = substr(str,\
    \ 2, length(str)-3)\n        \n        # Return converted string\n        return\
    \ str\n    \n    elseif base == 1 \n        \n        # Convert x to string and\
    \ remove all '0' at the begining and the end of string\n        str = toString(x)\n\
    \        str = substr(str, 2, length(str)-3)\n        \n        # Return converted\
    \ string\n        return str\n    \n    elseif base == 0 \n        \n        #\
    \ Convert x to string and remove all '0' at the begining and the end of string\n\
    \        str = toString(x)\n        str = substr(str, 2, length(str)-3)\n    \
    \    \n        # Return converted string\n        return str\n    \n    else\n\
    \        \n        # Return error if base is not less than 10\n        return\
    \ \"ERROR: base number should be less than 10\"\n    \nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = change_base;\n\t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9,\
    \ 3) == \"100\")\n\t@test(candidate(234, 2) == \"11101010\")\n\t@test(candidate(16,\
    \ 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\")\n\t@test(candidate(7,\
    \ 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t@test(candidate(3, 4) ==\
    \ \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5, 6) == \"5\"\
    )\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpovxpuxn7.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpovxpuxn7.jl:1\n\
    in expression starting at /tmp/tmpovxpuxn7.jl:1\n"
  stdout: ''
  timestamp: 1660008726
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base == 10 \n        return show(x::Int64)\n \
    \   else\n        mult :: Int64 = base\n        res :: String = show(x::Int64);\n\
    \        for i in 1:length(res) \n            if res[i] == \"0\" \n          \
    \      mult -= 1\n            else \n                break\n        res = res.substring(0,i)*mult\
    \ + res.substring(i+1)\n        return res.substring(0,base+1)\n    end\nend\n\
    \"\"\"\n    Function to convert a decimal number to binary, where each position\
    \ \n    contains \"1\" if the number is in the given range, else it contains \"\
    0\"\n    >>> convert(3)\n    00000011\n    >>> convert(8)\n    00000111\n    >>>\
    \ convert(10)\n    00001111\n    >>> convert(13)\n    00011110\n    >>> convert(16)\n\
    \    00100111\n    >>> convert(15)\n    00111110\n    >>> convert(18)\n    01101100\n\
    \    >>> convert(21)\n    01100001\n    >>> convert(24)\n    10000010\n    >>>\
    \ convert(28)\n    10000111\n    >>> convert(31)\n    1100000\n    >>> convert(33)\n\
    \    1110000\n    >>> convert(35)\n    1110001\n    >>> convert(36)\n    1110100\n\
    \    >>> convert(37)\n    1110101\n    >>> convert(38)\n    1110102\n    >>> convert(39)\n\
    \    1110103\n    >>> convert(40)\n    1110104\n    >>> convert(41)\n    1110105\n\
    \    >>> convert(42)\n    1110106\n    >>> convert(43)\n    1110107\n    >>> convert(44)\n\
    \    1110108\n    >>> convert(45)\n    1110109\n    >>> convert(46)\n    1110110\n\
    \    >>> convert(47)\n    1110111\n    >>> convert(48)\n    1111000\n    >>> convert(49)\n\
    \    1111001\n    >>> convert(50)\n    1111002\n    >>> convert(51)\n    1111003\n\
    \    >>> convert(52)\n    1111004\n    >>> convert(53)\n    1111005\n    >>> convert(54)\n\
    \    1111006\n    >>> convert(55)\n    1111007\n    >>> convert(56)\n    1111008\n\
    \    >>> convert(57)\n    1111009\n    >>> convert(58)\n    1111001\n    >>> convert(59)\n\
    \    1111002\n    >>> convert(60)\n    1111003\n    >>> convert(61)\n    1111004\n\
    \    >>> convert(62)\n    1111005\n    >>> convert(63)\n    1111006\n    >>> convert(64)\n\
    \    1111007\n    >>> convert(65)\n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = change_base;\n\t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3)\
    \ == \"100\")\n\t@test(candidate(234, 2) == \"11101010\")\n\t@test(candidate(16,\
    \ 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\")\n\t@test(candidate(7,\
    \ 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t@test(candidate(3, 4) ==\
    \ \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5, 6) == \"5\"\
    )\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxakz1nao.jl:1\nin expression starting at /tmp/tmpxakz1nao.jl:1\n"
  stdout: ''
  timestamp: 1660008726
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if x < 10 && base >= 10\n        return tostring(base\
    \ * x)\n    else\n        return tostring(x / base)\n    end\nend\n</cell>\n<text>\n\
    Task 2\nWrite a Julia function to get all the prime numbers within a range.\n\
    using Test\n\n@testset begin\n\ncandidate = change_base;\n\t@test(candidate(8,\
    \ 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2)\
    \ == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppvgiqkd4.jl:18\nin expression starting at\
    \ /tmp/tmppvgiqkd4.jl:18\n"
  stdout: ''
  timestamp: 1660008726
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n  \n    if base == 10 || base == 16\n        str = to_string(x)\n\
    \    else\n        str = base_to_string(x, base)\nusing Test\n\n@testset begin\n\
    \ncandidate = change_base;\n\t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9,\
    \ 3) == \"100\")\n\t@test(candidate(234, 2) == \"11101010\")\n\t@test(candidate(16,\
    \ 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\")\n\t@test(candidate(7,\
    \ 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t@test(candidate(3, 4) ==\
    \ \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5, 6) == \"5\"\
    )\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"if\" at /tmp/tmpbsuaaxz8.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpbsuaaxz8.jl:1\n\
    in expression starting at /tmp/tmpbsuaaxz8.jl:1\n"
  stdout: ''
  timestamp: 1660008726
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base <= 10 && x >= base\n        str = toString(x)\n\
    \        str = str[str.find('^'):str.find('$')]\n        str = str[1:str.find('.')]\n\
    \        return str * base\n    else\n        return toString(x)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = change_base;\n\t@test(candidate(8,\
    \ 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2)\
    \ == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 12 errored,
    0 broken.

    in expression starting at /tmp/tmph5vxplxt.jl:23

    '
  stdout: "test set: Error During Test at /tmp/tmph5vxplxt.jl:26\n  Test threw exception\n\
    \  Expression: candidate(8, 3) == \"22\"\n  UndefVarError: toString not defined\n\
    \  Stacktrace:\n   [1] change_base(x::Int64, base::Int64)\n     @ Main /tmp/tmph5vxplxt.jl:13\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmph5vxplxt.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmph5vxplxt.jl:25\ntest set:\
    \ Error During Test at /tmp/tmph5vxplxt.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(9, 3) == \"100\"\n  UndefVarError: toString not defined\n  Stacktrace:\n\
    \   [1] change_base(x::Int64, base::Int64)\n     @ Main /tmp/tmph5vxplxt.jl:13\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmph5vxplxt.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmph5vxplxt.jl:25\ntest set:\
    \ Error During Test at /tmp/tmph5vxplxt.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(234, 2) == \"11101010\"\n  UndefVarError: toString not defined\n \
    \ Stacktrace:\n   [1] change_base(x::Int64, base::Int64)\n     @ Main /tmp/tmph5vxplxt.jl:13\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmph5vxplxt.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmph5vxplxt.jl:25\ntest set:\
    \ Error During Test at /tmp/tmph5vxplxt.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(16, 2) == \"10000\"\n  UndefVarError: toString not defined\n  Stacktrace:\n\
    \   [1] change_base(x::Int64, base::Int64)\n     @ Main /tmp/tmph5vxplxt.jl:13\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/j"
  timestamp: 1660008730
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base == 10 \n    then show x::String\n    else\
    \ \n        show(change_base(x, base - 1)) * string(base) + show(change_base(x,\
    \ base + 1))\n    end \nend\n</cell>\n<code language=julia-1.0>\nchange_base(8,\
    \ 2)\n</cell>\n<code language=julia-1.0>\n@assert change_base(8, 2) == \"1000\"\
    \n</cell>\n<code language=julia-1.0>\n@assert change_base(8, 3) == \"22\"\n</cell>\n\
    <code language=julia-1.0>\n@assert change_base(7, 2) == \"111\"\n</cell>\n<text>\n\
    Changing radices\nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\t\
    @test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234,\
    \ 2) == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"show\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp5eprlgl3.jl:13\nin expression starting at /tmp/tmp5eprlgl3.jl:13\n"
  stdout: ''
  timestamp: 1660008728
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base == 10 \n        return x\n    if x < base\n\
    \        error(\"base error\") \n    elseif base<=0 \n        error(\"base error\"\
    ) \n    else \n        return String(x, base) \nend\nusing Test\n\n@testset begin\n\
    \ncandidate = change_base;\n\t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9,\
    \ 3) == \"100\")\n\t@test(candidate(234, 2) == \"11101010\")\n\t@test(candidate(16,\
    \ 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\")\n\t@test(candidate(7,\
    \ 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t@test(candidate(3, 4) ==\
    \ \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5, 6) == \"5\"\
    )\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgeduvx3w.jl:1\nin expression starting at /tmp/tmpgeduvx3w.jl:1\n"
  stdout: ''
  timestamp: 1660008728
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base<10\n        return to_string(x)\n    else\n\
    \        digits:Array{Int64,1}=[]\n        while x>0\n            digits=[x%base]+digits\n\
    \            x=floor(x/base)\n        end\n        return join(digits, \"\")\n\
    \    end\nend\n</code>\n<|/ a |>\n<| c |>\nThis is a good answer but I believe\
    \ that the `digits` variable is unnecessary and can be replaced with the `digits::Int64[]`\
    \ constructor since `join()` accepts an array.\n<|/ c |>\n<| c |>\n, thanks for\
    \ your comment. Indeed, `digits` variable is unnecessary and can be replaced by\
    \ the constructor of `Int64[]`. However, I do not think that `join()` accepts\
    \ an array and can not work with the constructor of `Int64[]`. Please correct\
    \ me if I am wrong.\n<|/ c |>\n<| c |>\nThe `digits::Int64[]` is necessary because\
    \ the `digits` variable was created as `Int64[]` rather than `Int64`. `join()`\
    \ only accepts a string as its argument, which means that the `digits` variable\
    \ must be converted to a string in order to pass it to `join()`.\n<|/ c |>\n<|\
    \ a dscore=1 |>\nTo get an integer as a string, with base b, you can use\n<code>\n\
    bnum::Int64 = (b*(10^digits))+digit\n</code>\nFor example,\n<code>\njulia> digits\
    \ = 2\ndigits = 2\nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\t\
    @test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234,\
    \ 2) == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"Array{Int64, 1}\" is not a valid function argument\
    \ name around /tmp/tmpw523zeoy.jl:15\nStacktrace:\n [1] top-level scope\n   @\
    \ /tmp/tmpw523zeoy.jl:1\nin expression starting at /tmp/tmpw523zeoy.jl:1\n"
  stdout: ''
  timestamp: 1660008728
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n\"\"\"Change numerical base of input number x to base.\n\
    \    return string representation after the conversion.\n    base numbers are\
    \ less than 10.\n    >>> change_base(\"9\", 3)\n    \"33\"\n    >>> change_base(\"\
    9\", 2)\n    \"100\"\n    >>> change_base(\"9\", 1)\n    \"9\"\n    \"\"\"\nusing\
    \ Test\n\n@testset begin\n\ncandidate = change_base;\n\t@test(candidate(8, 3)\
    \ == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2) ==\
    \ \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpiqbm0fre.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpiqbm0fre.jl:1\n\
    in expression starting at /tmp/tmpiqbm0fre.jl:1\n"
  stdout: ''
  timestamp: 1660008728
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base == 2\n        return str(x * 2^(ceil(x/2)))\n\
    \    elseif base == 3\n        return str(x * 3^(ceil(x/2)))\n    else\n     \
    \   throw(DomainError(base, \"Only 2 or 3 is supported\"))\nend\n\"\"\"\n    Calculate\
    \ the binomial coefficient\n    \n    Input parameters should be positive integers.\
    \ \n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\t@test(candidate(8,\
    \ 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2)\
    \ == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmporayp05u.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmporayp05u.jl:1\n\
    in expression starting at /tmp/tmporayp05u.jl:1\n"
  stdout: ''
  timestamp: 1660008728
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    \"\"\"\n    Change numerical base of input number\
    \ x to base.\n    return string representation after the conversion.\n    base\
    \ numbers are less than 10.\n    >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8,\
    \ 2)\n    \"1000\"\n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\n    if\
    \ base == 10\n        return str(x)\n    if base < 10\n        return \"\"\n \
    \   return change_base(x*base, base//10) + (x % base)\n    \n\"\"\"\n    \n  \
    \  Change numeric base of input number x to base.\n    return string representation\
    \ after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8,\
    \ 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\n    >>> change_base(7,\
    \ 2)\n    \"111\"\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\
    \t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234,\
    \ 2) == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprbri4flu.jl:1\nin expression starting at /tmp/tmprbri4flu.jl:1\n"
  stdout: ''
  timestamp: 1660008728
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if x > base || x < 0 || base < 0 \n        throw(DomainError(\n\
    \            \"Invalid base: \" ~ base ~\n            \". Valid bases are in range\
    \ [1..10] or -1\"\n            ))\n    end\n    \n    function num2str(x::Int64)::String\
    \ \n        digits = \"0123456789\"\n        digits_len = len(digits)\n      \
    \  if x > digits\n            throw(DomainError(\"Base exceeds number of digits:\
    \ \" ~ x))\n        elseif x < 0\n            rem = (digits^1) - (digits^0)\n\
    \            rem /= digits\n            while rem >= 0\n                x = x\
    \ / digits - 1\n                rem -= 1\n            end\n        end\n     \
    \   rem = x\n        digit_repr = Array(digits, digits_len)\n        digit_repr[digits_len\
    \ + digits_len + digits_len] = \".\"\n        while rem > 0\n            rem =\
    \ rem / digits - 1\n            digit_repr[digits_len] = digits[rem]\n       \
    \ end\n        str = join(digit_repr, \"\")\n        str.reverse()\n        return\
    \ str\n    end\n    \n    function str2num(str::String)::Int64 \n        digits\
    \ = \"0123456789\"\n        digits_len = len(digits)\n        if str == \"0\"\n\
    \            return 0\n        elseif str == \"\"\n            return -1\n   \
    \     elseif str == \"-1\"\n            return -1\n        end\n        \n   \
    \     num_repr = Array(digits, digits_len)\n        num_repr[digits_len + 1] =\
    \ \".\"\n        i = 0\n        rem = 1\n        while i < digits_len\n      \
    \      num_repr[i] = digits[rem]\n            rem = rem % digits_len\n       \
    \     i += 1\n        end\n        i = digits_len\n        carry = 0\n       \
    \ while i >= 0\n            num_repr[i] = digits[(rem * digits_len + carry) %\
    \ (digits_len + 1)]\n            carry = rem % digits_len\n            rem = rem\
    \ / digits_len\n            i -= 1\n        end\n        if carry > 0\n      \
    \      num_repr[i] = digits[carry]\n        end\n        \n        return sum(num_repr,\
    \ digits_len)\n    end\n    \n    if base == -1\n        base = digits(10)\n \
    \   end\n    \n    if x < 0\n        return num2str(x + base * digits(10))\n \
    \   elseif base == 10\n        return num2str(x)\n    end\n    \n    str = \"\"\
    \n    for i = digits(10) to -1 by -1\n        str = str * base\n        str =\
    \ num2str(x + str) + str\n    end\n    return str\nend\n</cell>\n<code language=julia-0.5>\n\
    change_base(8, 3)\n</cell>\n<code language=julia-\nusing Test\n\n@testset begin\n\
    \ncandidate = change_base;\n\t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9,\
    \ 3) == \"100\")\n\t@test(candidate(234, 2) == \"11101010\")\n\t@test(candidate(16,\
    \ 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\")\n\t@test(candidate(7,\
    \ 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t@test(candidate(3, 4) ==\
    \ \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5, 6) == \"5\"\
    )\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmpjjuk9vzn.jl:90 expected \"\
    end\", got \"by\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjjuk9vzn.jl:90\n\
    in expression starting at /tmp/tmpjjuk9vzn.jl:90\n"
  stdout: ''
  timestamp: 1660008728
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    \n    if x < base\n        error(\"invalid base number\"\
    )\n    elseif base < 2\n        error(\"invalid base number\")\n    else\n   \
    \     return (x*base^2)/base\n    end\nend\n</cell>\n<cell>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = change_base;\n\t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9,\
    \ 3) == \"100\")\n\t@test(candidate(234, 2) == \"11101010\")\n\t@test(candidate(16,\
    \ 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\")\n\t@test(candidate(7,\
    \ 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t@test(candidate(3, 4) ==\
    \ \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5, 6) == \"5\"\
    )\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp43l_8sc5.jl:21\nin expression starting at\
    \ /tmp/tmp43l_8sc5.jl:21\n"
  stdout: ''
  timestamp: 1660008728
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base <= 0 \n        error(\"Base is too small\"\
    )\n    end\n    \n    if x % base == 0 \n        return str(x)\n    elseif base\
    \ % x == 0 \n        return change_base(x % base, base) \n    else \n        return\
    \ change_base(x % base, base) .* string(base, string(x))\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = change_base;\n\t@test(candidate(8, 3) == \"22\"\
    )\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2) == \"11101010\"\
    )\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\"\
    )\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t\
    @test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5,\
    \ 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) ==\
    \ \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpcu_v5k1s.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpcu_v5k1s.jl:1\n\
    in expression starting at /tmp/tmpcu_v5k1s.jl:1\n"
  stdout: ''
  timestamp: 1660008728
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n  if base == 10 return x::String\n  return change_base(x%base,\
    \ base::Int64) + 1\nend\nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\
    \t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234,\
    \ 2) == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp8b02rc3c.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp8b02rc3c.jl:1\n\
    in expression starting at /tmp/tmp8b02rc3c.jl:1\n"
  stdout: ''
  timestamp: 1660008728
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base == 2 || base == 8\n        digits = toString(x*base)\n\
    \    else\n        digits = toString(x*base) \n    return digits\nend\n</cell>\n\
    <text>\nChange a number to an octal number\nThis function converts a decimal number\
    \ to a octal number.\nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\
    \t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234,\
    \ 2) == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpn5x7zhuy.jl:18\nin expression starting at\
    \ /tmp/tmpn5x7zhuy.jl:18\n"
  stdout: ''
  timestamp: 1660008728
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 2 or base > 36\n        error(\"Base-10\
    \ numbers only (no zero allowed)!\")\n    end\n    \n    # Convert input number\
    \ to string\n    str = toString(x)\n    # Change base and convert to string\n\
    \    return join(reverse(split(str, base)))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = change_base;\n\t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9,\
    \ 3) == \"100\")\n\t@test(candidate(234, 2) == \"11101010\")\n\t@test(candidate(16,\
    \ 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\")\n\t@test(candidate(7,\
    \ 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t@test(candidate(3, 4) ==\
    \ \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5, 6) == \"5\"\
    )\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"base\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmppgj6ckzg.jl:12\nin expression starting at /tmp/tmppgj6ckzg.jl:12\n"
  stdout: ''
  timestamp: 1660008728
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if x > base\n        throw \"the base is out of range\"\
    \n    elseif base > 10\n        throw \"the base is out of range\"\n    elseif\
    \ x == 0\n        return \"\"\n    elseif base < 0\n        throw \"the base is\
    \ out of range\"\n    elseif base == 1\n        return x\n    else\n        rest\
    \ = x % base\n        return change_base(rest, base*10) + to_string(x)\nend\n\
    \    \nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\t@test(candidate(8,\
    \ 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2)\
    \ == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"\"\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpi0s5364k.jl:13\nin expression starting at /tmp/tmpi0s5364k.jl:13\n"
  stdout: ''
  timestamp: 1660008728
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    # convert string to number\n    num = parse(Int64,\
    \ x)\n    # convert number to string\n    strng = show(base, num)\n    # remove\
    \ non-significant 0s\n    strng = strng[strng !~ '^0*']\n    # remove leading\
    \ zeros\n    strng = strng[strng ~= '^0*']\n    # convert to string\n    strng\
    \ = toString(strng)\n    # remove leading zeros\n    strng = strng[strng ~= '^0*']\n\
    \    # remove unnecessary leading zeros\n    strng = strng[strng !~ '^0*0*']\n\
    \    # remove trailing zeros\n    strng = strng[strng ~= '^0*']\n    # remove\
    \ leading zeros\n    strng = strng[strng ~= '^0*']\n    return strng\nend\n</cell>\n\
    <code language=julia-1.0>\nchange_base(12, 2)\n</cell>\n<code language=julia-1.0>\n\
    change_base(101, 2)\n</cell>\n<text>\nStrings to Float64\nusing Test\n\n@testset\
    \ begin\n\ncandidate = change_base;\n\t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9,\
    \ 3) == \"100\")\n\t@test(candidate(234, 2) == \"11101010\")\n\t@test(candidate(16,\
    \ 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\")\n\t@test(candidate(7,\
    \ 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t@test(candidate(3, 4) ==\
    \ \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5, 6) == \"5\"\
    )\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: character literal contains multiple characters\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmpzlh1hs9b.jl:17\nin expression\
    \ starting at /tmp/tmpzlh1hs9b.jl:17\n"
  stdout: ''
  timestamp: 1660008728
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    \"Change numerical base of input number x to base.\"\
    \n    if base < 1 or base > 64\n        return error(\"The base should be between\
    \ 1 and 64.\")\n    \n    chars0 = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i',\
    \ 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y',\
    \ 'z', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O',\
    \ 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z']\n    chars1 = ['!', '#',\
    \ '$', '%', '&', '(', ')', '*', '+']\n    chars2 = ['-', '.', '/', ':', ';', '<',\
    \ '>', '?', '@', '^', '~']\n    chars3 = ['0', '1', '2', '3', '4', '5', '6', '7',\
    \ '8', '9']\n    chars4 = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K',\
    \ 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'a',\
    \ 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q',\
    \ 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n    chars5 = ['!', '#', '$', '%',\
    \ '&', '(', ')', '*', '+']\n    chars6 = ['-', '.', '/', ':', ';', '<', '>', '?',\
    \ '@', '^', '~', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9']\n    chars7\
    \ = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O',\
    \ 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', '!', '#', '$', '%', '&',\
    \ '(', ')', '*', '+', '-', '.', '/', ':', ';', '<', '>', '?', '@', '^', '~', '0',\
    \ '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F', 'G',\
    \ 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W',\
    \ 'X', 'Y', 'Z']\n    chars8 = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j',\
    \ 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z',\
    \ 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P',\
    \ 'Q', 'R\nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\t@test(candidate(8,\
    \ 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2)\
    \ == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"base\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpahjx7o_t.jl:13\nin expression starting at /tmp/tmpahjx7o_t.jl:13\n"
  stdout: ''
  timestamp: 1660008728
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if x == 0\n        return str(0)\n    if base < 2\
    \ || base > 10\n        error(\"wrong base\")\n    return change_base(x//base,\
    \ base)\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    count_base(number::Int64,\
    \ base::Int64)::Int64\n\"\"\"\nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\
    \t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234,\
    \ 2) == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptve6atp4.jl:18\nin expression starting at\
    \ /tmp/tmptve6atp4.jl:18\n"
  stdout: ''
  timestamp: 1660008728
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 2 \n        error(\"base must be bigger\
    \ than 1\")\n    end\n    str = x\n    base = base-1\n    \n    sign = ifelse(x>0,\
    \ \"-\", \"\")\n    str = reverse(str,base) # Reverse the base 10 string to convert\
    \ it to base \n    \n    repeat((base-1) .* (size(str)-base+2)) do i\n       \
    \ str = replace(str,str[i],str[i+base]) # Replace the base to desired number\n\
    \    end\n    \n    if sign == \"-\" \n        str = str[1:end-1] # Remove the\
    \ negative sign\n    end\n    return str\nend\n</cell>\n<text>\nQuestion 2\nWrite\
    \ a function to compute $\\log_{n}$ using base $2$ and a number $n$. The function\
    \ should return a string representation of $n$ in base $2$ with leading zeroes.\
    \ The base is assumed to be greater than or equal to 2.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = change_base;\n\t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9,\
    \ 3) == \"100\")\n\t@test(candidate(234, 2) == \"11101010\")\n\t@test(candidate(16,\
    \ 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\")\n\t@test(candidate(7,\
    \ 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t@test(candidate(3, 4) ==\
    \ \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5, 6) == \"5\"\
    )\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqesal_ia.jl:30\nin expression starting at\
    \ /tmp/tmpqesal_ia.jl:30\n"
  stdout: ''
  timestamp: 1660008728
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 2 || base > 36 \n        throw(RangeError(\"\
    base should be from 2 to 36\"))\n    elseif base == 36 \n        return show(x)\n\
    \    elseif base == 2 \n        return show(Int(div(x, base)))\n    elseif base\
    \ == 10 \n        return show(Int(div(x, base))) \n    else \n        return show(Int(div(x,\
    \ base))) ++ change_base(Int(div(x, base)), base - Int(div(x, base))) \nend\n\
    </cell>\n<code language=julia-1.5>\n@assert change_base(32, 2) == \"100\" \n@assert\
    \ change_base(16, 10) == \"16\" \n@assert change_base(2, 36) == \"8\" \n@assert\
    \ change_base(2, 2) == \"2\" \n@assert change_base(2, 10) == \"2\" \n@assert change_base(7,\
    \ 10) == \"7\" \n@assert change_base(8, 10) == \"22\" \n@assert change_base(32,\
    \ 10) == \"100\" \n@assert change_base(16, 2) == \"2\" \n@assert change_base(16,\
    \ 36) == \"10\" \n@assert change_base(36) == show(36) \n@assert change_base(100,\
    \ 10) == \"100\" \n@assert change_base(10, 2) == \"10\" \n@assert change_base(10,\
    \ 10) == \"10\" \n@assert change_base(36) == show(36) \n@assert change_base(100,\
    \ 2) == \"100\" \n@assert change_base(100, 10) == \"100\" \n@assert change_base(10,\
    \ 36) == \"100\" \n@assert change_base(16, 36) == \"16\" \n@assert change_base(22,\
    \ 2) == \"22\" \n</cell>\n<text>\nExercise 2.2 Write a function that converts\
    \ a string to a number.\nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\
    \t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234,\
    \ 2) == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzaf0bv8n.jl:23\nin expression starting at\
    \ /tmp/tmpzaf0bv8n.jl:23\n"
  stdout: ''
  timestamp: 1660008728
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base == 10 then \n        (x::Int64).to_string()\n\
    \    else \n        base * change_base(x % base, base) + \n        digits(x, base)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\t@test(candidate(8,\
    \ 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2)\
    \ == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpp_2iiv6j.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpp_2iiv6j.jl:1\n\
    in expression starting at /tmp/tmpp_2iiv6j.jl:1\n"
  stdout: ''
  timestamp: 1660008728
- exit_code: -1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base <= 10\n        return x * base\n    else\n\
    \        return change_base(x/base, base) * (base-1)\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = change_base;\n\t@test(candidate(8, 3) == \"22\"\
    )\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2) == \"11101010\"\
    )\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\"\
    )\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t\
    @test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5,\
    \ 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) ==\
    \ \"7\")\nend\n"
  status: Timeout
  stderr: ''
  stdout: "test set: Error During Test at /tmp/tmpq3djjams.jl:23\n  Test threw exception\n\
    \  Expression: candidate(8, 3) == \"22\"\n  MethodError: Cannot `convert` an object\
    \ of type Int64 to an object of type String\n  Closest candidates are:\n    convert(::Type{String},\
    \ !Matched::String) at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] change_base(x::Int64, base::Int64)\n     @ Main\
    \ /tmp/tmpq3djjams.jl:13\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpq3djjams.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpq3djjams.jl:22\ntest set:\
    \ Error During Test at /tmp/tmpq3djjams.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(9, 3) == \"100\"\n  MethodError: Cannot `convert` an object of type\
    \ Int64 to an object of type String\n  Closest candidates are:\n    convert(::Type{String},\
    \ !Matched::String) at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] change_base(x::Int64, base::Int64)\n     @ Main\
    \ /tmp/tmpq3djjams.jl:13\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpq3djjams.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpq3djjams.jl:"
  timestamp: 1660008731
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    digits = string(x)\n    for i in string.digits[base:end]\n\
    \        digits = digits[-1 * (base - 1)] * (digits[-1 * (base - 1)] == 0 || digits[-1\
    \ * (base - 1)] == 1) && digits[-1 * (base - 1)] = i\n    digits\nend\n</code>\n\
    <|/ a |>\n<| c |>\nThis does not provide an answer to the question. To critique\
    \ or request clarification from an author, leave a comment below their post. -\
    \ [From Review](/review/low-quality-posts/26283069)\n<|/ c |>\n<| c |>\nI did\
    \ not criticize or request clarification from the author. I just answered the\
    \ question. Can you explain how this does not answer the question?\n<|/ c |>\n\
    <| c |>\nI cannot see how this answers the question at all.  Why would the question\
    \ be \"How would I convert from base 10 to base 2?\"\n<|/ c |>\n<| c |>\nI thought\
    \ I answered the question. OP wanted to convert from base 10 to base 2. That is\
    \ what this function is doing. And this function is written in Julia. It converts\
    \ to base 10.\n<|/ c |>\n<| c |>\nThe question is about Julia's base conversion,\
    \ not about Julia's `digits` function.\n<|/ c |>\n<| a tags=julia,string dscore=0\
    \ |>\n<code>\nconvert(Int64,\"\")\n</code>\nThis function will convert your Base\
    \ 10 string to Base 10 Int.\n<|/ a |>\n<| a tags=julia,string dscore=0 |>\n<code>\n\
    using Test\n\n@testset begin\n\ncandidate = change_base;\n\t@test(candidate(8,\
    \ 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2)\
    \ == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjaatf6hy.jl:17\nin expression starting at\
    \ /tmp/tmpjaatf6hy.jl:17\n"
  stdout: ''
  timestamp: 1660008728
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n        if base == 10\n            return str(x)\n  \
    \      else if base == 2\n            return string(x%base)\n        else\n  \
    \          return string(x%base) + change_base(x/base, base)\nusing Test\n\n@testset\
    \ begin\n\ncandidate = change_base;\n\t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9,\
    \ 3) == \"100\")\n\t@test(candidate(234, 2) == \"11101010\")\n\t@test(candidate(16,\
    \ 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\")\n\t@test(candidate(7,\
    \ 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t@test(candidate(3, 4) ==\
    \ \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5, 6) == \"5\"\
    )\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyv6jv7hm.jl:14\nin expression starting at\
    \ /tmp/tmpyv6jv7hm.jl:14\n"
  stdout: ''
  timestamp: 1660008728
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if x <= base \n        return tostring(base^x) \n\
    \    else \n        tostring(base^(x//base))*base+tostring(x%base)\nend\n</cell>\n\
    <text>\nProblem 8\nWrite a function that converts digits of an octal number from\
    \ base 10 to\nthe equivalent in base 8.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = change_base;\n\t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3)\
    \ == \"100\")\n\t@test(candidate(234, 2) == \"11101010\")\n\t@test(candidate(16,\
    \ 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\")\n\t@test(candidate(7,\
    \ 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t@test(candidate(3, 4) ==\
    \ \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5, 6) == \"5\"\
    )\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnb933sg0.jl:17\nin expression starting at\
    \ /tmp/tmpnb933sg0.jl:17\n"
  stdout: ''
  timestamp: 1660008729
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if (base < 2) || (base > 10)\n        error(\"Base\
    \ must be between 2 and 10\")\n    else\n        val digits = floor(log10(x))\
    \ + 1\n        val = div(x, base^digits)\n        base = base^digits\n    return\
    \ tostring(val).reverse\nend\n</code>\n<|/ a |>\n<| a dscore=0 tags=julia,precision\
    \ |>\nI did this for you and wrote a short Julia program\n<code>\nusing Test\n\
    \n@testset begin\n\ncandidate = change_base;\n\t@test(candidate(8, 3) == \"22\"\
    )\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2) == \"11101010\"\
    )\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\"\
    )\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t\
    @test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5,\
    \ 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) ==\
    \ \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"if\" at /tmp/tmpo79wz17x.jl:12 expected \"\
    end\", got \"digits\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpo79wz17x.jl:15\n\
    in expression starting at /tmp/tmpo79wz17x.jl:15\n"
  stdout: ''
  timestamp: 1660008730
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    \n    \n    # check if x is negative number\n   \
    \ if x < 0\n        return x\n        \n    # check if base is negative number\n\
    \    if base < 0\n        return \"Error: Base cannot be negative\"\n        \n\
    \    # check base range\n    if base > 10\n        return \"Error: Base is too\
    \ big\"\n    \n    # base case\n    if base == 1\n        if x == 0\n        \
    \    return \"0\"\n        if x == 1\n            return \"1\"\n        if x ==\
    \ 2\n            return \"2\"\n        if x == 3\n            return \"3\"\n \
    \       if x == 4\n            return \"4\"\n        if x == 5\n            return\
    \ \"5\"\n        if x == 6\n            return \"6\"\n        if x == 7\n    \
    \        return \"7\"\n        if x == 8\n            return \"8\"\n        if\
    \ x == 9\n            return \"9\"\n        \n    # regular base case\n    if\
    \ x <= 0\n        return \"Error: x is negative\"\n    \n    # convert to string\
    \ \n    strx = to_string(x)\n    \n    # create string array\n    listbase = listtostring(base)\n\
    \    \n    # remove last character\n    listbase[length(listbase)-1] = \"\"\n\
    \    \n    # join listbase to string\n    strbase = join(listbase)\n    \n   \
    \ # replace all number in strx with strbase\n    strx = strgsub(strx, strbase,\
    \ \"\")\n    \n    # remove trailing zero\n    strx = strip(strx, \"0\")\n   \
    \ \n    # check if negative number\n    if strx < \"0\"\n        return \"Error:\
    \ x is negative\"\n    \n    # check if x is 0\n    if strx == \"0\"\n       \
    \ return \"0\"\n    \n    # convert string to Int64\n    x = str2int64(strx)\n\
    \    \n    # change base x to base\n    x = change_base(x, base)\n    \n    #\
    \ convert x to Int64\n    x = int64(x)\n    \n    # return x converted from Int64\n\
    \    return x\nend\nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\
    \t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234,\
    \ 2) == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptrbeul3c.jl:1\nin expression starting at /tmp/tmptrbeul3c.jl:1\n"
  stdout: ''
  timestamp: 1660008729
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base==2\n    then \n        str_representation\
    \ = sprintf(\"%d\", x)\n    else\n        str_representation = sprintf(\"%d\"\
    , x)\n        for j in [0..base-1]\n            str_representation = str_representation\
    \ \n                *\"0\"^(base-1-j) \n                +str_representation\n\
    \    end \n    return str_representation\nend\nusing Test\n\n@testset begin\n\n\
    candidate = change_base;\n\t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9,\
    \ 3) == \"100\")\n\t@test(candidate(234, 2) == \"11101010\")\n\t@test(candidate(16,\
    \ 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\")\n\t@test(candidate(7,\
    \ 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t@test(candidate(3, 4) ==\
    \ \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5, 6) == \"5\"\
    )\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"*\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmps3r1nh5t.jl:19\nin expression starting at\
    \ /tmp/tmps3r1nh5t.jl:19\n"
  stdout: ''
  timestamp: 1660008730
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    switch base\n    case 10\n        str = base_10_to_10(x)\n\
    \    case 7\n        str = base_7_to_10(x)\n    case 3\n        str = base_3_to_10(x)\n\
    \    otherwise\n        throw(ArgumentError(\"Invalid base.\"))\n    return str\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = change_base;\n\t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3)\
    \ == \"100\")\n\t@test(candidate(234, 2) == \"11101010\")\n\t@test(candidate(16,\
    \ 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\")\n\t@test(candidate(7,\
    \ 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t@test(candidate(3, 4) ==\
    \ \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5, 6) == \"5\"\
    )\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"function\" at /tmp/tmppsnr59si.jl:11 expected\
    \ \"end\", got \"base\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmppsnr59si.jl:12\n\
    in expression starting at /tmp/tmppsnr59si.jl:12\n"
  stdout: ''
  timestamp: 1660008730
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base == 10 then return \"10\"\n    if base ==\
    \ 8 then return \"0\"\n    \n    digits = floor(log10(base))\n    digits = digits>0\
    \ ? digits : -1\n    \n    digits+=1\n    digits = digits<base ? digits:-1\n \
    \   \n    digits_string = String.replicate(digits, base^digits)\n    \n    digits_string\
    \ = digits_string<10 ? \"0\":\"\"\n    \n    digits_string = (digits_string/base)*base\n\
    \    \n    if digits_string == x then return \"0\"\n    \n    return digits_string<x\
    \ ? digits_string:x\nend\n    \n\"\"\"\n    Convert string to integer with error\
    \ checking.\n    >>> int2str(\"1\")\n    1\n    >>> int2str(0)\n    0\n    >>>\
    \ int2str(\"\")\n    \"\"\n    >>> int2str(\"a\")\n    ERROR: input string cannot\
    \ be converted to Int64\n    >>> int2str(1.1)\n    ERROR: input string cannot\
    \ be converted to Int64\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = change_base;\n\t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3)\
    \ == \"100\")\n\t@test(candidate(234, 2) == \"11101010\")\n\t@test(candidate(16,\
    \ 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\")\n\t@test(candidate(7,\
    \ 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t@test(candidate(3, 4) ==\
    \ \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5, 6) == \"5\"\
    )\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp3iwt7eci.jl:12\nin expression starting at /tmp/tmp3iwt7eci.jl:12\n"
  stdout: ''
  timestamp: 1660008730
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base<=10\n        digits = base_to_digits(base)\n\
    \        digits = digits[digits[1]::digits[2]::digits[3]::digits[4]]\n       \
    \ digits = digits[digits[1]::digits[2]::digits[3]]\n        digits = digits[digits[1]::digits[2]]\n\
    \        digits = digits[digits[1]::digits]\n        digits = digits[digits[1]]\n\
    \        \n        digit = digits[digits[1]]\n        \n        if x == digit\n\
    \            return digit\n        \n        digits[digits[1]] = x\n        digits[digits[2]]\
    \ = digit\n        digits[digits[3]] = digit\n        digits[digits[4]] = digit\n\
    \        \n        digit = digits[digits[digits[1]]]\n        \n        if x ==\
    \ digit\n            return digit\n        else\n            return digits[digits[1]]\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\t@test(candidate(8,\
    \ 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2)\
    \ == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4x2h28qh.jl:1\nin expression starting at /tmp/tmp4x2h28qh.jl:1\n"
  stdout: ''
  timestamp: 1660008730
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n\"\"\"Change numerical base of input number x to base.\n\
    \    return string representation after the conversion.\n    base numbers are\
    \ less than 10.\n    >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8,\
    \ 2)\n    \"1000\"\n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nusing\
    \ Test\n\n@testset begin\n\ncandidate = change_base;\n\t@test(candidate(8, 3)\
    \ == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2) ==\
    \ \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpkstchsvz.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpkstchsvz.jl:1\n\
    in expression starting at /tmp/tmpkstchsvz.jl:1\n"
  stdout: ''
  timestamp: 1660008724
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base == 10 \n        return \"0\" \n    else \n\
    \        return (x * base) // math.pow(base, base) \n    end\nend\n</cell>\n<text>\n\
    Change the string representation of decimal number x to base 10.\n    x is a decimal\
    \ number\n    base 10\n    return string representation after the conversion.\n\
    \    >>> change_base(\"3.14\", 10)\n    \"314\"\n    >>> change_base(\"3.14\"\
    , 2)\n    \"3.1\"\n    >>> change_base(\"3.14\", 16)\n    \"3.14\"\n    >>> change_base(\"\
    3.14\", 36)\n    \"3.14\"\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = change_base;\n\t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3)\
    \ == \"100\")\n\t@test(candidate(234, 2) == \"11101010\")\n\t@test(candidate(16,\
    \ 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\")\n\t@test(candidate(7,\
    \ 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t@test(candidate(3, 4) ==\
    \ \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5, 6) == \"5\"\
    )\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9n1yf1dn.jl:18\nin expression starting at\
    \ /tmp/tmp9n1yf1dn.jl:18\n"
  stdout: ''
  timestamp: 1660008730
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n  if base == 0\n  elseif base == 1\n  elseif base ==\
    \ 2\n  elseif base == 3\n  elseif base == 4\n  elseif base == 5\n  elseif base\
    \ == 6\n  elseif base == 7\n  elseif base == 8\n  elseif base == 9\n  else\n \
    \   \"Error: invalid base\"\n  \n  return (Int(x).*base).toString(base)\nend\n\
    </cell>\n<cell>\n#export\nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\
    \t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234,\
    \ 2) == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkx7ddq1b.jl:27\nin expression starting at\
    \ /tmp/tmpkx7ddq1b.jl:27\n"
  stdout: ''
  timestamp: 1660008730
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if (base < 10) == false \n    else \n        return\
    \ \"0\" * (base - 1) + x\n    end\nend \n</cell>\n<cell>\nchange_base(8, 2)\n\
    </cell>\n<text>\nQuestion 2.7\nWrite a function convert which takes as input a\
    \ double x and a base b, and returns the double x converted into base b. The function\
    \ should return NaN if the input cannot be converted. Your function must not use\
    \ String or list data structures.\nTest your function with the cases:\nusing Test\n\
    \n@testset begin\n\ncandidate = change_base;\n\t@test(candidate(8, 3) == \"22\"\
    )\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2) == \"11101010\"\
    )\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\"\
    )\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t\
    @test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5,\
    \ 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) ==\
    \ \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpeftwa5e3.jl:17\nin expression starting at\
    \ /tmp/tmpeftwa5e3.jl:17\n"
  stdout: ''
  timestamp: 1660008730
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n        if base <= 0 || x % base == 0\n            return\
    \ \"\"\n        else if base < 10\n            return show(digits(x), base)\n\
    \        else if base == 10\n            return show(digits(x), base)\n      \
    \  else if x%base == 0\n            return show(digits(x), base)\n        else\n\
    \            tmp = digits(x)\n            tmp[1] = show(digits(tmp[1]/base, base),\
    \ base)\n            tmp = show(tmp, base)\n            digits(x) = tmp\n    \
    \        return x\n        end\nend\n</cell>\n<code language=julia-1.4>\nchange_base(1234,\
    \ 10)\n</cell>\n<code language=julia-1.4>\nchange_base(1234, 2)\n</cell>\n<code\
    \ language=julia-1.4>\nchange_base(1234, 3)\n</cell>\n<code language=julia-1.4>\n\
    change_base(1234, 4)\n</cell>\n<code language=julia-1.4>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = change_base;\n\t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9,\
    \ 3) == \"100\")\n\t@test(candidate(234, 2) == \"11101010\")\n\t@test(candidate(16,\
    \ 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\")\n\t@test(candidate(7,\
    \ 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t@test(candidate(3, 4) ==\
    \ \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5, 6) == \"5\"\
    )\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqm46_w7g.jl:14\nin expression starting at\
    \ /tmp/tmpqm46_w7g.jl:14\n"
  stdout: ''
  timestamp: 1660008730
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n  \n    if x==0 \n    then return string \"0\"\n    else\
    \ if base==10 \n    then return string x\n    else \n    \n      \n       x =\
    \ x % base;\n       return change_base(x, base-1)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = change_base;\n\t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9,\
    \ 3) == \"100\")\n\t@test(candidate(234, 2) == \"11101010\")\n\t@test(candidate(16,\
    \ 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\")\n\t@test(candidate(7,\
    \ 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t@test(candidate(3, 4) ==\
    \ \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5, 6) == \"5\"\
    )\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmptb8md2ih.jl:14\nin expression starting at /tmp/tmptb8md2ih.jl:14\n"
  stdout: ''
  timestamp: 1660008730
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if x>base then\n        (x/base)*base\n    else\n\
    \        x\nend\n</code>\n<|/ a dscore=0 |>\n<| a |>\nYou can use this package\
    \ to convert a number into different bases:\nhttps://github.com/sabrinasb/digital_base\n\
    <code>\nusing Digital_Base\nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\
    \t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234,\
    \ 2) == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5qhpjc8x.jl:17\nin expression starting at\
    \ /tmp/tmp5qhpjc8x.jl:17\n"
  stdout: ''
  timestamp: 1660008730
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    \"\"\"Change numerical base of input number x to\
    \ base.\n    return string representation after the conversion.\n    base numbers\
    \ are less than 10.\n    >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8,\
    \ 2)\n    \"1000\"\n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\n    if\
    \ base<10:\n        return str(x)\n    \n    if x==0:\n        return 0\n    \n\
    \    if x<base:\n        return str(x)\n    \n    temp=x\n    \n    while temp>=base:\n\
    \        temp%=base\n        \n    if temp==0:\n        temp+=1\n        \n  \
    \  return str(temp)\n</cell>\n<code language=julia-1.5>\nchange_base(3,10)\n</cell>\n\
    <code language=julia-1.5>\nchange_base(10,10)\n</cell>\n<code language=julia-1.5>\n\
    change_base(11,10)\n</cell>\n<code language=julia-1.5>\nchange_base(100,10)\n\
    </cell>\n<code language=julia-1.5>\nchange_base(101,10)\n</cell>\n<code language=julia-1.5>\n\
    change_base(5,2)\n</cell>\n<code language=julia-1.5>\nchange_base(102,10)\n</cell>\n\
    <code language=julia-1.5>\nchange_base(102,102)\n</cell>\n<code language=julia-1.5>\n\
    change_base(102,103)\n</cell>\n<code language=julia-1.5>\nchange_base(102,104)\n\
    </cell>\n<code language=julia-1.5>\nchange_base(102,105)\n</cell>\n<code language=julia-1.5>\n\
    change_base(102,106)\n</cell>\n<code language=julia-1.5>\nchange_base(102,107)\n\
    </cell>\n<code language=julia-1.5>\nchange_base(102,108)\n</cell>\n<code language=julia-1.5>\n\
    change_base(102,109)\n</cell>\n<code language=julia-1.5>\nchange_base(102,110)\n\
    </cell>\n<code language=julia-1.5>\nchange_base(102,111)\n</cell>\n<code language=julia-1.5>\n\
    change_base(102,112)\n</cell>\n<code language=julia-1.5>\nchange_base(102,113)\n\
    </cell>\n<code language=julia-1.5>\nchange_base(102,114)\n</cell>\n<code language=julia-1.5>\n\
    change_base(102,115)\n</cell>\n<code language=julia-1.5>\nchange_base(102,116)\n\
    </cell>\n<code language=julia-1.5>\nchange_base(102,117)\n</cell>\n<code language=julia-1.5>\n\
    change_base(10\nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\t@test(candidate(8,\
    \ 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2)\
    \ == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpuk66pgay.jl:23\nin expression starting at\
    \ /tmp/tmpuk66pgay.jl:23\n"
  stdout: ''
  timestamp: 1660008730
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    \"Change numerical base of input number x to base.\"\
    \n    if base == 10\n        beginning_of_string(\"\")\n        return \"0\"\n\
    \    if base == 2 || base == 7\n        if x == 0\n            beginning_of_string(\"\
    \")\n            return \"0\"\n        elseif x < 0\n            beginning_of_string(\"\
    \")\n            return \"-\" + change_base(abs(x), base)\n        else\n    \
    \        beginning_of_string(\"\")\n            return \"-\" + change_base(x %\
    \ base, base)\n    elseif base == 8\n        if x < 0\n            beginning_of_string(\"\
    \")\n            return \"-\" + change_base(abs(x), base)\n        else\n    \
    \        beginning_of_string(\"\")\n            return \"-\" + change_base(x %\
    \ base, base)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\
    \t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234,\
    \ 2) == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"if\" at /tmp/tmpow2414o8.jl:20 expected \"\
    end\", got \"elseif\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpow2414o8.jl:26\n\
    in expression starting at /tmp/tmpow2414o8.jl:26\n"
  stdout: ''
  timestamp: 1660008730
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 10 \n        return show(x)\n    else\n\
    \        str = toString(x)\n        newStr = \"\"\n        for (i=1, n=str.length;\
    \ i < n; ++i)\n            newStr = newStr + digit(base.abs, str[i])\n       \
    \ newStr = newStr.substring(0, newStr.length-digit(base.abs, str[i]))\n      \
    \  return newStr\nend \nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\
    \t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234,\
    \ 2) == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"++\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppb8s02sh.jl:17\nin expression starting at\
    \ /tmp/tmppb8s02sh.jl:17\n"
  stdout: ''
  timestamp: 1660008730
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 10\n        return str((x % base) + base)\n\
    \    return str((x % base) / base)\nend\n</cell>\n<code language=julia-0.5>\n\
    using Test\n\n@testset begin\n\ncandidate = change_base;\n\t@test(candidate(8,\
    \ 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2)\
    \ == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1qzpv1fm.jl:16\nin expression starting at\
    \ /tmp/tmp1qzpv1fm.jl:16\n"
  stdout: ''
  timestamp: 1660008730
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if x > base || x < 0\n        throw(DomainError(message\
    \ = \"invalid input\",\n                          description = \"the x cannot\
    \ be greater than \" +\n                                          str(base) +\n\
    \                                          \" and less than 0\"))\n    \n    function\
    \ change_base(x::Int64)::Int64\n        function change_base(x::Int64)::Int64\n\
    \            if x > base\n                throw(DomainError(message = \"invalid\
    \ input\",\n                                  description = \"the x cannot be\
    \ greater than \" +\n                                  str(base) +\n         \
    \                         \" and less than 0\"))\n            if x == 0\n    \
    \            return 0\n            ans = x - base\n            if ans > 9\n  \
    \              ans = x + 9 - base\n            end\n            return ans\n \
    \       end \n        return change_base(x)\n    end \n    return change_base(x)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\t@test(candidate(8,\
    \ 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2)\
    \ == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpq4dhh8d0.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpq4dhh8d0.jl:1\n\
    in expression starting at /tmp/tmpq4dhh8d0.jl:1\n"
  stdout: ''
  timestamp: 1660008730
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if x < base * 10\n        then return \"0\"\n   \
    \     else \"0\" * (base - x) + show x\n</code>\n<|/ a tags=math,numbers,julia,string\
    \ dscore=2 |>\n<| c |>\nThis solution uses `show` which is not very efficient,\
    \ especially for larger numbers. You should rather use something like: `Base.trunc(Int64,\
    \ base::Int64)`. See this blog post for details: http://blog.rust-lang.org/2014/12/31/integer-base-conversion-for-faster-decimal-math.html\n\
    <|/ c |>\n<| a tags=math,numbers,julia,string |>\nMy implementation with two base\
    \ converters implemented as functional operators:\n<code>\njulia> using Base.show\n\
    using Test\n\n@testset begin\n\ncandidate = change_base;\n\t@test(candidate(8,\
    \ 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2)\
    \ == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpifyrtjsd.jl:13\nin expression starting at /tmp/tmpifyrtjsd.jl:13\n"
  stdout: ''
  timestamp: 1660008730
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n</code>\nBut this function is not defined for numbers\
    \ that are less than 10, so I have written a function that allows me to change\
    \ these numbers, by adding zeros to make them be of length 10. \nI have used a\
    \ function to create a string which allows me to append the number with zeroes,\
    \ and the use that string as the final result string. \nI have also written a\
    \ function which returns true if the input number is equal to the final result\
    \ string. \n<code>\n\"\"\"add zeroes function to make integer length 10\"\"\"\n\
    using Test\n\n@testset begin\n\ncandidate = change_base;\n\t@test(candidate(8,\
    \ 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2)\
    \ == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpq2rjthk8.jl:12\nin expression starting at\
    \ /tmp/tmpq2rjthk8.jl:12\n"
  stdout: ''
  timestamp: 1660008730
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if x < base\n        convert(x, base)\n    else\n\
    \        println(error_message)\nend\n</cell>\n<cell>\nchange_base(15, 2)\n</cell>\n\
    <text>\nExercise 3\nImplement the function convert(x::Int64, base::Int64)::String\
    \ that converts x\nto the decimal representation of x with the specified base.\
    \ For example,\nconvert(733, 2) == 1101 because 733 is in binary and it takes\
    \ 2 bits to express 1101. Your function should throw an error if x cannot be represented\
    \ in base base. \nUse the test function Base.Test to test your function.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = change_base;\n\t@test(candidate(8, 3)\
    \ == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2) ==\
    \ \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6lx43tji.jl:17\nin expression starting at\
    \ /tmp/tmp6lx43tji.jl:17\n"
  stdout: ''
  timestamp: 1660008730
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base > 10\n        throw(ArgumentError(\"base\
    \ must be less than 10\"))\n    elseif base == 0\n        throw(ArgumentError(\"\
    base must be greater than 0\"))\n    elseif base < 0\n        throw(ArgumentError(\"\
    base must be less than 0\"))\n    else\n        Base.show(io::IOContext{\n   \
    \         Base.remove_padding(io.stdout(), Base.default_precision)\n        })\
    \ Base.show(io::IOContext{\n            Base.remove_padding(io.stderr(), Base.default_precision)\n\
    \        }, x, base)\nend\n</code>\n<|/ a tags=julia |>\n<| c |>\nFor me, the\
    \ solution above did not work and resulted in an error.\n<|/ c |>\n<| a dscore=4\
    \ tags=julia |>\nI took some of the other solutions above and made my own, perhaps\
    \ a bit more idiomatic.\nI chose to do this as an \"inline function\" to avoid\
    \ polluting the namespace with a whole bunch of functions to do this.\n<code>\n\
    using Test\n\n@testset begin\n\ncandidate = change_base;\n\t@test(candidate(8,\
    \ 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2)\
    \ == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"if\" at /tmp/tmpc6886txp.jl:16 expected \"\
    end\", got \"Base\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpc6886txp.jl:21\n\
    in expression starting at /tmp/tmpc6886txp.jl:21\n"
  stdout: ''
  timestamp: 1660008731
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if x > base || x < 10\n        return \"\"\n    elseif\
    \ base == 2\n        return \"0123456789ABCDEF\"[x]\n    else\n        s = \"\"\
    \n        while x > 0\n            s = s + String.fromChar(x % base) + String.fromChar(base\
    \ * (x // base))\n            x = x / base\n        return s\nend\n</cell>\n<code\
    \ language=julia-1.5>\nBase.eval(parse(UInt32, change_base(8, 3)))\n</cell>\n\
    <code language=julia-1.5>\nBase.eval(parse(UInt64, change_base(8, 3)))\n</cell>\n\
    <code language=julia-1.5>\nBase.eval(parse(Int32, change_base(8, 3)))\n</cell>\n\
    <code language=julia-1.5>\nBase.eval(parse(Int64, change_base(8, 3)))\n</cell>\n\
    <code language=julia-1.5>\nparse(UInt32, change_base(8, 2))\n</cell>\n<code language=julia-1.5>\n\
    parse(UInt64, change_base(8, 2))\n</cell>\n<code language=julia-1.5>\nparse(Int32,\
    \ change_base(8, 2))\n</cell>\n<code language=julia-1.5>\nparse(Int64, change_base(8,\
    \ 2))\n</cell>\n<code language=julia-1.5>\ndump(dump(parse(UInt32, change_base(8,\
    \ 2))))\n</cell>\n<code language=julia-1.5>\ndump(dump(parse(UInt64, change_base(8,\
    \ 2))))\n</cell>\n<code language=julia-1.5>\ndump(dump(parse(Int32, change_base(8,\
    \ 2))))\n</cell>\n<code language=julia-1.5>\ndump(dump(parse(Int64, change_base(8,\
    \ 2))))\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\n\
    candidate = change_base;\n\t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9,\
    \ 3) == \"100\")\n\t@test(candidate(234, 2) == \"11101010\")\n\t@test(candidate(16,\
    \ 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\")\n\t@test(candidate(7,\
    \ 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t@test(candidate(3, 4) ==\
    \ \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5, 6) == \"5\"\
    )\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxh_wodee.jl:23\nin expression starting at\
    \ /tmp/tmpxh_wodee.jl:23\n"
  stdout: ''
  timestamp: 1660008731
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    \"\"\"\n    Change numerical base of input number\
    \ x to base.\n    return string representation after the conversion.\n    base\
    \ numbers are less than 10.\n    >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8,\
    \ 2)\n    \"1000\"\n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nusing\
    \ Test\n\n@testset begin\n\ncandidate = change_base;\n\t@test(candidate(8, 3)\
    \ == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2) ==\
    \ \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpmdex5bc3.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpmdex5bc3.jl:1\n\
    in expression starting at /tmp/tmpmdex5bc3.jl:1\n"
  stdout: ''
  timestamp: 1660008731
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 10\n        return show(Int(x), base)\n\
    \    else if base == 10\n        return \"0\"\n    else\n        digits = digits(x)\n\
    \        return reverse(digits)*base\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = change_base;\n\t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9,\
    \ 3) == \"100\")\n\t@test(candidate(234, 2) == \"11101010\")\n\t@test(candidate(16,\
    \ 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\")\n\t@test(candidate(7,\
    \ 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t@test(candidate(3, 4) ==\
    \ \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5, 6) == \"5\"\
    )\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpc531l_nk.jl:14\nin expression starting at\
    \ /tmp/tmpc531l_nk.jl:14\n"
  stdout: ''
  timestamp: 1660008731
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if x < base || base < 1 \n        error(\"Base must\
    \ be between 1 and 10\")\n    else\n        s = convert(convert(x), base)\n  \
    \  end\n    return s\nend\n</code>\n<|/ a tags=converter,julia dscore=2 |>\n<|\
    \ a |>\nI find that Julia is more helpful for converting numbers into strings\
    \ than MATLAB does and I find that the following works to change a number base\
    \ from 10 to 3:\n<code>\nconvert(Int64,convert(Float64,x)/pow(10,Int(log10(x))+2))\
    \ \n</code>\nThis gives you the number in base 3, but will give you the original\
    \ number if it was in base 10. \nThis does not require any packages and is very\
    \ fast (although I haven't tested it extensively).\n<|/ a dscore=2 tags=converter,julia\
    \ |>\n<| a tags=converter,julia |>\nFor me the solution from works well on Julia\
    \ 1.0.0 but in Julia 1.0.1 there is a syntax error on \n<code>\nconvert(Int64,convert(Float64,x)/pow(10,Int(log10(x))+2))\n\
    </code>\nso I changed it to\n<code>\nconvert(Int64,convert(Float64,x)/pow(10,Int(log10(x))+2))\
    \ \n</code>\nAnd it works.\n<|/ a dscore=2 |>\n<| a dscore=0 |>\nHere's a solution\
    \ using only Base functions:\n<code>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = change_base;\n\t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3)\
    \ == \"100\")\n\t@test(candidate(234, 2) == \"11101010\")\n\t@test(candidate(16,\
    \ 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\")\n\t@test(candidate(7,\
    \ 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t@test(candidate(3, 4) ==\
    \ \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5, 6) == \"5\"\
    )\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpif_sa0nq.jl:19\nin expression starting at\
    \ /tmp/tmpif_sa0nq.jl:19\n"
  stdout: ''
  timestamp: 1660008732
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    \"\"\"Change numerical base of input number x to\
    \ base.\n    return string representation after the conversion.\n    base numbers\
    \ are less than 10.\n    >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8,\
    \ 2)\n    \"1000\"\n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nusing\
    \ Test\n\n@testset begin\n\ncandidate = change_base;\n\t@test(candidate(8, 3)\
    \ == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2) ==\
    \ \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpf37_9cbo.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpf37_9cbo.jl:1\n\
    in expression starting at /tmp/tmpf37_9cbo.jl:1\n"
  stdout: ''
  timestamp: 1660008722
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 2 or base > 10 \n        error \"base must\
    \ be in range 2 to 10\"\n    end\n    if x % base == 0 \n        change = divrem(x,\
    \ base)\n        return String(change[1], base)\n    else\n        change = divrem(x,\
    \ base)\n        return String(change[1], base)\n    end\nend\nchange_base(x::Int64,\
    \ base::Int64) = change_base(x, base)\nend\n</cell>\n<text>\nThe function divrem\
    \ (div and rem) returns the division and remainder of x by base.\nIt can be used\
    \ as follows:\nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\t@test(candidate(8,\
    \ 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2)\
    \ == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"base\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp3lt3b02d.jl:12\nin expression starting at /tmp/tmp3lt3b02d.jl:12\n"
  stdout: ''
  timestamp: 1660008731
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n        if base < 2 || base > 64\n            error(\"\
    Invalid base number\")\n        elseif base == 2\n            if x < 10\n    \
    \            return \"0\" * x + \"0\"\n            else\n                return\
    \ \"0\" * x + \"1\"\n        else\n            if x < 10\n                return\
    \ \"0\" * base + \"0\"\n            else\n                return \"0\" * base\
    \ + \"1\"\nend\n\"\"\"\n\"\"\"\n\"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = change_base;\n\t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3)\
    \ == \"100\")\n\t@test(candidate(234, 2) == \"11101010\")\n\t@test(candidate(16,\
    \ 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\")\n\t@test(candidate(7,\
    \ 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t@test(candidate(3, 4) ==\
    \ \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5, 6) == \"5\"\
    )\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"if\" at /tmp/tmpq32wvmlr.jl:15 expected \"\
    end\", got \"else\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpq32wvmlr.jl:19\n\
    in expression starting at /tmp/tmpq32wvmlr.jl:19\n"
  stdout: ''
  timestamp: 1660008732
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    # your code here\n    # Hint: use if statement\n\
    \    if base==2\n        if x<10\n            return to_string(x)\n        else\n\
    \            return to_string(x./10)\n    else\n        if x<10\n            return\
    \ to_string(base)\n        else\n            return to_string(base./10)\n    end\n\
    end\n</code>\n<|/ a |>\n<| a |>\nIt was very hard to solve your problem without\
    \ using packages. My code below solves your problem: \n<code>\nusing Test\n\n\
    @testset begin\n\ncandidate = change_base;\n\t@test(candidate(8, 3) == \"22\"\
    )\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2) == \"11101010\"\
    )\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\"\
    )\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t\
    @test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5,\
    \ 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) ==\
    \ \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"if\" at /tmp/tmpclyzo_6x.jl:15 expected \"\
    end\", got \"else\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpclyzo_6x.jl:19\n\
    in expression starting at /tmp/tmpclyzo_6x.jl:19\n"
  stdout: ''
  timestamp: 1660008732
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base<10\n    then \"0\" + change_base(x, base)\n\
    \    else x % base == 0\n    then x//base\n    else change_base(x//base, base)\
    \ + x % base\nend\n</cell>\n<text>\nThe function above is recursive, but the base\
    \ case is simple to read: if the base is less than 10, then the number is already\
    \ in the desired base; otherwise, divide the number by the base and add the remainder\
    \ to the beginning of the number.\nusing Test\n\n@testset begin\n\ncandidate =\
    \ change_base;\n\t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3) ==\
    \ \"100\")\n\t@test(candidate(234, 2) == \"11101010\")\n\t@test(candidate(16,\
    \ 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\")\n\t@test(candidate(7,\
    \ 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t@test(candidate(3, 4) ==\
    \ \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5, 6) == \"5\"\
    )\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"\"\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpn43m5mxe.jl:13\nin expression starting at /tmp/tmpn43m5mxe.jl:13\n"
  stdout: ''
  timestamp: 1660008732
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if x < 10\n    then base^x\n    else base^(10 * change_base(x/10,\
    \ base))\nend\nchange_base(9, 2)\n</cell>\n<text>\nExercise 5\nModify the function\
    \ above to accept a string, containing a number in base 10, and return the string\
    \ representation in base 10.\nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\
    \t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234,\
    \ 2) == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"base\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpkf9c7btf.jl:13\nin expression starting at /tmp/tmpkf9c7btf.jl:13\n"
  stdout: ''
  timestamp: 1660008732
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base == 10\n        return to_string(x)\n    elseif\
    \ base < 10\n        return change_base(x / base * base, base)\n    else\n   \
    \     return to_string(x) / base * base\nend\n</cell>\n<code language=julia-1.4>\n\
    change_base(123, 5)\n</cell>\n<text>\nThe same function can convert any number\
    \ to a base of any base.\nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\
    \t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234,\
    \ 2) == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwwhe2y2_.jl:19\nin expression starting at\
    \ /tmp/tmpwwhe2y2_.jl:19\n"
  stdout: ''
  timestamp: 1660008732
- exit_code: -1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    local res = \"\"\n    local n = x\n    while n >\
    \ 0 \n        res, n = divrem(n % base, base), n//base\n    end \n    \n    return\
    \ res\nend\nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\t@test(candidate(8,\
    \ 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2)\
    \ == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  status: Timeout
  stderr: 'ERROR: LoadError: '
  stdout: "test set: Error During Test at /tmp/tmppg7xs3af.jl:25\n  Test threw exception\n\
    \  Expression: candidate(8, 3) == \"22\"\n  OverflowError: 4052555153018976267\
    \ * 3 overflowed for type Int64\n  Stacktrace:\n   [1] throw_overflowerr_binaryop(op::Symbol,\
    \ x::Int64, y::Int64)\n     @ Base.Checked ./checked.jl:154\n   [2] checked_mul\n\
    \     @ ./checked.jl:288 [inlined]\n   [3] rem\n     @ ./rational.jl:312 [inlined]\n\
    \   [4] change_base(x::Int64, base::Int64)\n     @ Main /tmp/tmppg7xs3af.jl:15\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmppg7xs3af.jl:25 [inlined]\n\
    \   [7] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmppg7xs3af.jl:24\ntest set:\
    \ Error During Test at /tmp/tmppg7xs3af.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(9, 3) == \"100\"\n  OverflowError: 4052555153018976267 * 3 overflowed\
    \ for type Int64\n  Stacktrace:\n   [1] throw_overflowerr_binaryop(op::Symbol,\
    \ x::Int64, y::Int64)\n     @ Base.Checked ./checked.jl:154\n   [2] checked_mul\n\
    \     @ ./checked.jl:288 [inlined]\n   [3] rem\n     @ ./rational.jl:312 [inlined]\n\
    \   [4] change_base(x::Int64, base::Int64)\n     @ Main /tmp/tmppg7xs3af.jl:15\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmppg7xs3af.jl:26 [inlined]\n\
    \   [7] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmppg7xs3af.jl:24\ntest set:\
    \ Error During Test at /tmp/tmppg7xs3af.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(234, 2) == \"11101010\"\n  OverflowError: 4611686018427387904 * 2\
    \ overflowed for type Int64\n  Stacktrace:\n   [1] throw_overflowerr_binaryop(op::Symbol,\
    \ x::Int64, y::Int64)\n     @ Base.Checked ./checked.jl:154\n   [2] checked_mul\n\
    \     @ ./checked.jl:288 [inlined]\n   [3] rem\n     @ ./rational.jl:312 [inlined]\n\
    \   [4] change_base(x::Int"
  timestamp: 1660008735
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n        if x<=base \n            then (string(x, base))\n\
    \            else error(\"Not a number in the base\") % base\nend\n</cell>\n<code\
    \ language=julia-0.6>\nchange_base(8, 3)\n</cell>\n<text>\nA function to get the\
    \ nth digit of an integer\nget_digit(number, n)\nusing Test\n\n@testset begin\n\
    \ncandidate = change_base;\n\t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9,\
    \ 3) == \"100\")\n\t@test(candidate(234, 2) == \"11101010\")\n\t@test(candidate(16,\
    \ 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\")\n\t@test(candidate(7,\
    \ 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t@test(candidate(3, 4) ==\
    \ \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5, 6) == \"5\"\
    )\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: space before \"(\" not allowed in \"then (\"\
    \ at /tmp/tmp_0fsf1pu.jl:13\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp_0fsf1pu.jl:13\n\
    in expression starting at /tmp/tmp_0fsf1pu.jl:13\n"
  stdout: ''
  timestamp: 1660008732
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 10\n        throw \"base must be lower\
    \ than 10\"\n    switch base\n        case 2: return sprintf(\"%05d\", x)\n  \
    \      case 3: return sprintf(\"%05d\", x)\n        case 8: return sprintf(\"\
    %010d\", x)\n        case 10: return sprintf(\"%010d\", x)\n        case 16: return\
    \ sprintf(\"%016d\", x)\n        case 20: return sprintf(\"%020d\", x)\n     \
    \   case 25: return sprintf(\"%025d\", x)\n        case 30: return sprintf(\"\
    %030d\", x)\n        case 35: return sprintf(\"%035d\", x)\n        case 40: return\
    \ sprintf(\"%040d\", x)\n        case 45: return sprintf(\"%045d\", x)\n     \
    \   case 50: return sprintf(\"%050d\", x)\n        case 55: return sprintf(\"\
    %055d\", x)\n        case 60: return sprintf(\"%060d\", x)\n        case 65: return\
    \ sprintf(\"%065d\", x)\n        case 70: return sprintf(\"%070d\", x)\n     \
    \   case 75: return sprintf(\"%075d\", x)\n        case 80: return sprintf(\"\
    %080d\", x)\n        case 85: return sprintf(\"%085d\", x)\n        case 90: return\
    \ sprintf(\"%090d\", x)\n        case 95: return sprintf(\"%095d\", x)\n     \
    \   case 100: return sprintf(\"%100d\", x)\n        case 105: return sprintf(\"\
    %105d\", x)\n        case 110: return sprintf(\"%110d\", x)\n        case 115:\
    \ return sprintf(\"%115d\", x)\n        case 120: return sprintf(\"%120d\", x)\n\
    \        case 125: return sprintf(\"%125d\", x)\n        case 130: return sprintf(\"\
    %130d\", x)\n        case 135: return sprintf(\"%135d\", x)\n        case 140:\
    \ return sprintf(\"%140d\", x)\n        case 145: return sprintf(\"%145d\", x)\n\
    \        case 150: return sprintf(\"%150d\", x)\n        case 155: return sprintf(\"\
    %155d\", x)\n        case 160: return sprintf(\"%160d\", x)\n        case 165:\
    \ return sprintf(\"%165d\", x)\n        case 170: return sprintf(\"%170d\", x)\n\
    \        case 175: return sprintf(\"%175d\", x)\n        case 180: return sprintf(\"\
    %180d\", x)\n        case 185: return sprintf(\"%185d\", x)\n        case 190:\
    \ return sprintf(\"%190d\", x)\n        case 195: return sprintf(\"%195d\", x)\n\
    \        case 200: return sprintf(\"%200d\", x)\n        case 205: return sprintf(\"\
    %205d\", x)\n        case 210: return sprintf(\"%210d\", x)\n        case 215:\
    \ return sprintf(\"%215d\", x)\n        case 220: return sprintf(\"%220d\", x)\n\
    \        case 225: return sprintf(\"%225d\", x)\n        case 230: return sprintf(\"\
    \nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\t@test(candidate(8,\
    \ 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2)\
    \ == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"\"\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpi9_on263.jl:13\nin expression starting at /tmp/tmpi9_on263.jl:13\n"
  stdout: ''
  timestamp: 1660008732
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    \n    \"\"\"\n    if base > 10\n        return \n\
    \    else\n        return\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = change_base;\n\t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3)\
    \ == \"100\")\n\t@test(candidate(234, 2) == \"11101010\")\n\t@test(candidate(16,\
    \ 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\")\n\t@test(candidate(7,\
    \ 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t@test(candidate(3, 4) ==\
    \ \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5, 6) == \"5\"\
    )\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpka53vi90.jl:1\nin expression starting at /tmp/tmpka53vi90.jl:1\n"
  stdout: ''
  timestamp: 1660008732
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if x <= base \n        then return \"0\" * ((base\
    \ - x) + 1)\n        else \"0\" * x\n    else return x\n</code>\n<|/ a |>\n<|\
    \ c |>\nI believe this answer is missing its educational explanation.\n<|/ c |>\n\
    <| a dscore=0 |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\
    \t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234,\
    \ 2) == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpwswgxz6i.jl:13\nin expression starting at /tmp/tmpwswgxz6i.jl:13\n"
  stdout: ''
  timestamp: 1660008732
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if x <= base \n        then \n        \"\"\n    else\n\
    \        show(base - x)\n        \n        function change_base(x::Int64, base::Int64)::String\n\
    \        if base > 1 \n            then \n            show(base)\n           \
    \ change_base(x, base - 1)\n            else\n            show(x)\n        \n\
    \        end\n    end\nend\n</cell>\n<code language=julia-1.6>\nchange_base(12,\
    \ 2)\n</cell>\n<text>\nExercise 1\nWrite a function that calculates the number\
    \ of digits in the factorial of a given number. HINT: use the factorial function\
    \ (see above).\nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\t@test(candidate(8,\
    \ 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2)\
    \ == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4zwh7fbc.jl:29\nin expression starting at\
    \ /tmp/tmp4zwh7fbc.jl:29\n"
  stdout: ''
  timestamp: 1660008732
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if x == 0 return \"0\"\n    digits = div_rem(x, base,\
    \ 10)\n    \n    res = (change_base(digits[2], base)\n        +digits[1]*base^digits[3]\n\
    \        +digits[0]*base^digits[2])\n    \n    return res\nend\n</cell>\n<code\
    \ language=julia-0.6>\n# Your code here\n</cell>\n<text>\nThe function div_rem\
    \ returns the following values :\nusing Test\n\n@testset begin\n\ncandidate =\
    \ change_base;\n\t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3) ==\
    \ \"100\")\n\t@test(candidate(234, 2) == \"11101010\")\n\t@test(candidate(16,\
    \ 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\")\n\t@test(candidate(7,\
    \ 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t@test(candidate(3, 4) ==\
    \ \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5, 6) == \"5\"\
    )\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_ehnuwpl.jl:21\nin expression starting at\
    \ /tmp/tmp_ehnuwpl.jl:21\n"
  stdout: ''
  timestamp: 1660008732
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base == 10 then return string(x)\n    else if\
    \ base == 2 then return \"0\"^x\n    else if base == 8 then return \"0\"^(x *\
    \ x)\n    else if base == 7 then return \"0\"^(x * x^1)\n    else if base == 5\
    \ then return \"0\"^(x * x^2)\n    else if base == 3 then return \"0\"^(x * x^3)\n\
    \    else return \"0\"^(x * x^4)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = change_base;\n\t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3)\
    \ == \"100\")\n\t@test(candidate(234, 2) == \"11101010\")\n\t@test(candidate(16,\
    \ 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\")\n\t@test(candidate(7,\
    \ 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t@test(candidate(3, 4) ==\
    \ \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5, 6) == \"5\"\
    )\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpnso_6wv5.jl:12\nin expression starting at /tmp/tmpnso_6wv5.jl:12\n"
  stdout: ''
  timestamp: 1660008732
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base<10\n        return to_string(x)\n    \n \
    \   digits::Vector{Int64} = digits(to_base(x, base))\n    if digits==0\n     \
    \   return \"\"\n    else\n        digits1 = digits[1:]\n        digits1[1] =\
    \ digits1[digits1] - base\n        digits1[2] = digits1[2] - base\n        digits1[3]\
    \ = digits1[3] - base\n        digits1[4] = digits1[4] - base\n        digits1[5]\
    \ = digits1[5] - base\n        digits1[6] = digits1[6] - base\n        digits1[7]\
    \ = digits1[7] - base\n        digits1[0] = digits1[0] + base\n        return\
    \ digits_to_string(digits1)\n    \nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = change_base;\n\t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3)\
    \ == \"100\")\n\t@test(candidate(234, 2) == \"11101010\")\n\t@test(candidate(16,\
    \ 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\")\n\t@test(candidate(7,\
    \ 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t@test(candidate(3, 4) ==\
    \ \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5, 6) == \"5\"\
    )\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"1:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpgkqs36d9.jl:19\nin expression\
    \ starting at /tmp/tmpgkqs36d9.jl:19\n"
  stdout: ''
  timestamp: 1660008732
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base<10\n        return str((x*base)+base)\n \
    \   \n    else\n        return change_base(x/base, base-1) + str((x%base)*base)\n\
    end\n</cell>\n<text>\n5. Write a function  that will take an array  of string\
    \  representing a fraction  and return  the decimal value of the fraction.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = change_base;\n\t@test(candidate(8, 3)\
    \ == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2) ==\
    \ \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpy5xoneh3.jl:18\nin expression starting at\
    \ /tmp/tmpy5xoneh3.jl:18\n"
  stdout: ''
  timestamp: 1660008732
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if x <= base\n        convert(x, base)\n    else\
    \ if x > base\n        reverse(x, base)\n    else\n        reverse(x, base) +\
    \ convert(x - base, base) \nend \nchange_base(x, base)\nusing Test\n\n@testset\
    \ begin\n\ncandidate = change_base;\n\t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9,\
    \ 3) == \"100\")\n\t@test(candidate(234, 2) == \"11101010\")\n\t@test(candidate(16,\
    \ 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\")\n\t@test(candidate(7,\
    \ 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t@test(candidate(3, 4) ==\
    \ \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5, 6) == \"5\"\
    )\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmgmyry93.jl:14\nin expression starting at\
    \ /tmp/tmpmgmyry93.jl:14\n"
  stdout: ''
  timestamp: 1660008732
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if x == 0\n        return \"0\"\n    digits::Set\
    \ = digits(x)\n    digits = digits .- base\n    if digits == set0(digits)\n  \
    \      return \"\"\n    if digits == set1(digits)\n        return \"\"\n    digits\
    \ = digits .+ base\n    if digits == set0(digits)\n        return \"\"\n    if\
    \ digits == set1(digits)\n        return \"\"\n    digits = digits .+ base\n \
    \   if digits == set0(digits)\n        return \"\"\n    if digits == set1(digits)\n\
    \        return \"\"\n    digits = digits .+ base\n    if digits == set0(digits)\n\
    \        return \"\"\n    if digits == set1(digits)\n        return \"\"\n   \
    \ digits = digits .+ base\n    if digits == set0(digits)\n        return \"\"\n\
    \    if digits == set1(digits)\n        return \"\"\n    digits = digits .+ base\n\
    \    if digits == set0(digits)\n        return \"\"\n    if digits == set1(digits)\n\
    \        return \"\"\n    digits = digits .+ base\n    if digits == set0(digits)\n\
    \        return \"\"\n    if digits == set1(digits)\n        return \"\"\n   \
    \ digits = digits .+ base\n    if digits == set0(digits)\n        return \"\"\n\
    \    if digits == set1(digits)\n        return \"\"\n    digits = digits .+ base\n\
    \    if digits == set0(digits)\n        return \"\"\n    if digits == set1(digits)\n\
    \        return \"\"\n    digits = digits .+ base\n    if digits == set0(digits)\n\
    \        return \"\"\n    if digits == set1(digits)\n        return \"\"\n   \
    \ digits = digits .+ base\n    if digits == set0(digits)\n        return \"\"\n\
    \    if digits == set1(digits)\n        return \"\"\n    digits = digits .+ base\n\
    \    if digits == set0(digits)\n        return \"\"\n    if digits == set1(digits)\n\
    \        return \"\"\n    digits = digits .+ base\n    if digits == set0(digits)\n\
    \        return \"\"\n    if digits == set1(digits)\n        return \"\"\n   \
    \ digits = digits .+ base\n    if digits == set0(digits)\n        return \"\"\n\
    \    if digits == set1(digits)\n        return \"\"\n    digits = digits .+ base\n\
    \    if digits == set0(digits)\n        return \"\"\n    if digits == set1(digits)\n\
    \        return \"\"\n    digits = digits .+ base\n    if digits == set0(digits)\n\
    \        return \"\"\n    if digits == set1(digits)\n        return \"\"\n\nusing\
    \ Test\n\n@testset begin\n\ncandidate = change_base;\n\t@test(candidate(8, 3)\
    \ == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2) ==\
    \ \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvlmk7tup.jl:1\nin expression starting at /tmp/tmpvlmk7tup.jl:1\n"
  stdout: ''
  timestamp: 1660008733
- exit_code: -1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 10\n        return convert(x, base)\n \
    \   else \n        return convert(x, 10) * convert(10, base) - convert(x, base)\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\t@test(candidate(8,\
    \ 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2)\
    \ == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  status: Timeout
  stderr: ''
  stdout: "test set: Error During Test at /tmp/tmp01afms3i.jl:23\n  Test threw exception\n\
    \  Expression: candidate(8, 3) == \"22\"\n  MethodError: First argument to `convert`\
    \ must be a Type, got 8\n  Stacktrace:\n   [1] change_base(x::Int64, base::Int64)\n\
    \     @ Main /tmp/tmp01afms3i.jl:13\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp01afms3i.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp01afms3i.jl:22\ntest set:\
    \ Error During Test at /tmp/tmp01afms3i.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(9, 3) == \"100\"\n  MethodError: First argument to `convert` must\
    \ be a Type, got 9\n  Stacktrace:\n   [1] change_base(x::Int64, base::Int64)\n\
    \     @ Main /tmp/tmp01afms3i.jl:13\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp01afms3i.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp01afms3i.jl:22\ntest set:\
    \ Error During Test at /tmp/tmp01afms3i.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(234, 2) == \"11101010\"\n  MethodError: First argument to `convert`\
    \ must be a Type, got 234\n  Stacktrace:\n   [1] change_base(x::Int64, base::Int64)\n\
    \     @ Main /tmp/tmp01afms3i.jl:13\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp01afms3i.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp01afms3i.jl:22\ntest set:\
    \ Error During Test at /tmp/tmp01afms3i.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(16, 2) == \"10000\"\n  MethodError: First argument to `convert` must\
    \ be a Type, got 16\n  Stacktrace:\n   [1] change_base(x::Int6"
  timestamp: 1660008736
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if x < 10 && base >= 10\n        return strcat(\"\
    0\", x)\n    else\n        return strcat(string(x, base), change_base(x, base-1))\n\
    end\n</code>\n<|/ a |>\n<| a |>\nThe first example works fine\n<code>\nconvert(1,10)\n\
    </code>\nBut when I try to do this\n<code>\nconvert(1,3)\n</code>\nI get the following\
    \ error:\nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\t@test(candidate(8,\
    \ 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2)\
    \ == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmps_jjvbg0.jl:17\nin expression starting at\
    \ /tmp/tmps_jjvbg0.jl:17\n"
  stdout: ''
  timestamp: 1660008733
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 10\n        digits = digits(base, x)\n\
    \        return paste(digits, collapse = \"\") \n    elseif base < 36\n      \
    \  digits = digits(base, x)\n        return paste(digits, collapse = \"\") \n\
    \    else\n        digits = digits(base, x)\n        return paste(digits, collapse\
    \ = \"\") \n    end\nend\n</cell>\n<code language=julia-0.6>\n\"\"\"\nChange a\
    \ number to base \n\"\"\"\nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\
    \t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234,\
    \ 2) == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp71kidqdh.jl:23\nin expression starting at\
    \ /tmp/tmp71kidqdh.jl:23\n"
  stdout: ''
  timestamp: 1660008733
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 2 || base > 36\n        error(\"Invalid\
    \ base\")\n    else if base == 10\n        return string(x)\n    elif base ==\
    \ 2\n        if x == 0\n            return \"0\"\n        else if x == 1 || x\
    \ == -1\n            return string(x)\n        else if x == 2 || x == 4\n    \
    \        return \"2\"\n        else if x == 3 || x == 6\n            return \"\
    3\"\n        else if x == 5\n            return \"5\"\n        else if x == 7\n\
    \            return \"7\"\n        else if x == 8\n            return \"8\"\n\
    \        else if x == 9\n            return \"9\"\n        else\n            error(\"\
    Base can only be in 2, 10\")\n    else\n        error(\"Invalid base\")\nend\n\
    </code>\n<|/ a |>\n<| c |>\nThis doesn't work when base is 10. It returns \"1\"\
    \ for 0, and \"10\" for 1, and so on...\n<|/ c |>\n<| c |>\nAh, yeah, good point.\
    \ I didn't think of that. Thanks!\n<|/ c |>\n<| c |>\nI've edited the answer,\
    \ to fix this issue that mentioned above\n<|/ c |>\n<| c |>\n`function change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 2 || base > 36\n        error(\"Invalid\
    \ base\")\n    else if base == 10\n        return string(x)\n    else if base\
    \ == 2\n        if x == 0\n            return \"0\"\n        else if x == 1 ||\
    \ x == -1\n            return string(x)\n        else if x == 2 || x == 4\n  \
    \          return \"2\"\n        else if x == 3 || x == 6\n            return\
    \ \"3\"\n        else if x == 5\n            return \"5\"\n        else if x ==\
    \ 7\n            return \"7\"\n        else if x == 8\n            return \"8\"\
    \n        else if x == 9\n            return \"9\"\n        else\n           \
    \ error(\"Base can only be in 2, 10\")\n    else\n        error(\"Invalid base\"\
    )\nend`\n<|/ c |>\n<| a tags=julia |>\nFor a solution without a recursive function,\
    \ here's a shorter solution using only division and remainder operations:\n<code>\n\
    using Test\n\n@testset begin\n\ncandidate = change_base;\n\t@test(candidate(8,\
    \ 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2)\
    \ == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqcnhp_mq.jl:14\nin expression starting at\
    \ /tmp/tmpqcnhp_mq.jl:14\n"
  stdout: ''
  timestamp: 1660008733
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 2\n        error(\"base must be a positive\
    \ integer\")\n    end\n    if base < 10\n        return to_string(x)\n    end\n\
    \    \n    \n    function change_base(x::Int64, base::Int64)::String\n       \
    \ if base < 2\n            error(\"base must be a positive integer\")\n      \
    \  end\n        if base < 10\n            return to_string(x)\n        end\n \
    \       \n        function change_base(x::Int64, base::Int64)::String\n      \
    \      digits = split(to_string(trunc(x/base)), \".\")\n            digits[1]\
    \ = digits[1] * base\n            x = (x*base) + digits[1]\n            digits[1]\
    \ = digits[1]/base\n            return join(digits)\n        end\n        \n \
    \       function change_base(x::Int64, base::Int64)::String\n            digits\
    \ = split(to_string(trunc(x/base)), \".\")\n            digits[1] = digits[1]\
    \ * base\n            x = (x*base) + digits[1]\n            digits[1] = digits[1]/base\n\
    \            return join(digits)\n        end\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = change_base;\n\t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9,\
    \ 3) == \"100\")\n\t@test(candidate(234, 2) == \"11101010\")\n\t@test(candidate(16,\
    \ 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\")\n\t@test(candidate(7,\
    \ 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t@test(candidate(3, 4) ==\
    \ \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5, 6) == \"5\"\
    )\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: 'WARNING: Method definition change_base(Int64, Int64) in module Main at
    /tmp/tmpmg9xp4vs.jl:28 overwritten at /tmp/tmpmg9xp4vs.jl:36.

    ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 12 errored, 0 broken.

    in expression starting at /tmp/tmpmg9xp4vs.jl:47

    '
  stdout: "test set: Error During Test at /tmp/tmpmg9xp4vs.jl:50\n  Test threw exception\n\
    \  Expression: candidate(8, 3) == \"22\"\n  UndefVarError: to_string not defined\n\
    \  Stacktrace:\n   [1] change_base(x::Int64, base::Int64)\n     @ Main /tmp/tmpmg9xp4vs.jl:16\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpmg9xp4vs.jl:50 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpmg9xp4vs.jl:49\ntest set:\
    \ Error During Test at /tmp/tmpmg9xp4vs.jl:51\n  Test threw exception\n  Expression:\
    \ candidate(9, 3) == \"100\"\n  UndefVarError: to_string not defined\n  Stacktrace:\n\
    \   [1] change_base(x::Int64, base::Int64)\n     @ Main /tmp/tmpmg9xp4vs.jl:16\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpmg9xp4vs.jl:51 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpmg9xp4vs.jl:49\ntest set:\
    \ Error During Test at /tmp/tmpmg9xp4vs.jl:52\n  Test threw exception\n  Expression:\
    \ candidate(234, 2) == \"11101010\"\n  UndefVarError: to_string not defined\n\
    \  Stacktrace:\n   [1] change_base(x::Int64, base::Int64)\n     @ Main /tmp/tmpmg9xp4vs.jl:16\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpmg9xp4vs.jl:52 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpmg9xp4vs.jl:49\ntest set:\
    \ Error During Test at /tmp/tmpmg9xp4vs.jl:53\n  Test threw exception\n  Expression:\
    \ candidate(16, 2) == \"10000\"\n  UndefVarError: to_string not defined\n  Stacktrace:\n\
    \   [1] change_base(x::Int64, base::Int64)\n     @ Main /tmp/tmpmg9xp4vs.jl:16\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/sha"
  timestamp: 1660008736
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if x < 10 || base < 0\n    error(\"bad input\")\n\
    \    if base == 0\n    return str(x)\n    else if base == 1\n    return str(x)\n\
    \    else if base == 2\n    return sprintf(\"%0\" + str(int(log10(x))) + \"d\"\
    , x)\n    else if base == 3\n    return sprintf(\"%0\" + str(int(log10(x))) +\
    \ \"d\", x)\n    else if base == 4\n    return sprintf(\"%0\" + str(int(log10(x)))\
    \ + \"d\", x)\n    else if base == 5\n    return sprintf(\"%0\" + str(int(log10(x)))\
    \ + \"d\", x)\n    else if base == 6\n    return sprintf(\"%0\" + str(int(log10(x)))\
    \ + \"d\", x)\n    else if base == 7\n    return sprintf(\"%0\" + str(int(log10(x)))\
    \ + \"d\", x)\n    else if base == 8\n    return sprintf(\"%0\" + str(int(log10(x)))\
    \ + \"d\", x)\n    else if base == 9\n    return sprintf(\"%0\" + str(int(log10(x)))\
    \ + \"d\", x)\n    else if base == 10\n    return sprintf(\"%0\" + str(int(log10(x)))\
    \ + \"d\", x)\n    else\n    error(\"base must be >= 0 and <= 10\")\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = change_base;\n\t@test(candidate(8, 3)\
    \ == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2) ==\
    \ \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbffzwkq2.jl:16\nin expression starting at\
    \ /tmp/tmpbffzwkq2.jl:16\n"
  stdout: ''
  timestamp: 1660008733
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if x > base\n        error(\"Base must be greater\
    \ than or equal to input number.\") \n    if x <= 0\n        error(\"Base must\
    \ be greater than zero.\") \n    digits = [0; 10] # digits is number of digits\
    \ of input number\n    # loop through all digits in input number\n    for i in\
    \ digits\n        # convert each digit to desired base and add it to the list\n\
    \        # at the corresponding index in digits list\n        digits[i] = (x%base)\
    \ + digits[i]\n        # divide x by base and repeat loop until x is 0\n     \
    \   x = x/base\n    # convert the digits list to string\n    return digits.reverse().map(string).reverse().join(\"\
    \") \nend\nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\t@test(candidate(8,\
    \ 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2)\
    \ == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6p4gk1ku.jl:1\nin expression starting at /tmp/tmp6p4gk1ku.jl:1\n"
  stdout: ''
  timestamp: 1660008733
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 10 && base > 0\n    then \n        str\
    \ = string(x:base)\n        return str\n    else\n        error (\"The base can\
    \ only be either 10 or 21 or greater.\")\n    end \nend \n</cell>\n<code language=julia-0.6>\n\
    # TEST Change base\n@test change_base(8, 3) == \"22\"\n@test change_base(8, 2)\
    \ == \"1000\"\n@test change_base(7, 2) == \"111\"\n</cell>\n<text>\nExercise 3\n\
    Write a Julia function called string_with_commas, which converts an array of numbers\
    \ to strings with commas. \nThe function should take an argument x and convert\
    \ it to strings with commas. \nThe function should return the strings. The function\
    \ should handle all possible values of x, so don't pass a Float64 object into\
    \ it.\nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\t@test(candidate(8,\
    \ 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2)\
    \ == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: space before \"(\" not allowed in \"error (\"\
    \ at /tmp/tmpqwjsf7um.jl:17\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpqwjsf7um.jl:17\n\
    in expression starting at /tmp/tmpqwjsf7um.jl:17\n"
  stdout: ''
  timestamp: 1660008733
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 10 || base > 36 \n        throw(ArgumentError(\"\
    Invalid base: $(base))\")) \n    else \n        if x < base \n            throw(ArgumentError(\"\
    Invalid number: $(Int64(x)) cannot be less than base $(Int64(base))\")) \n   \
    \     else \n            x = Int64(x) % base \n            digits = []\n     \
    \       for i in 1:Int(floor(log10(base)))\n                digits[i] = String((x\
    \ % base) / base) \n                x = x / base \n            digits.reverse\n\
    \            str = digits.mkString\n            return str\nend\n</code>\n<|/\
    \ a tags=julia dscore=1 |>\n<| a dscore=0 |>\nAs I mentioned in the comments,\
    \ Julia has a very good support for string formatting. I'd recommend you take\
    \ a look at it instead of rolling your own implementation. \nIn your particular\
    \ case, you could do\n<code>\nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\
    \t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234,\
    \ 2) == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp36wess5a.jl:27\nin expression starting at\
    \ /tmp/tmp36wess5a.jl:27\n"
  stdout: ''
  timestamp: 1660008733
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 2 || base > 36\n        throw(ArgumentError(\"\
    Base must be between 2 and 36\"))\n    if x == 0\n        return \"\"\n    elif\
    \ x < 10\n        return String(to_base(x, base, digits=digits))\n    else \n\
    \        return change_base(to_base(x, base, digits=digits), base-1)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = change_base;\n\t@test(candidate(8, 3)\
    \ == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2) ==\
    \ \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"x\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpqmxf2cr9.jl:16\nin expression starting at /tmp/tmpqmxf2cr9.jl:16\n"
  stdout: ''
  timestamp: 1660008733
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if x < base then\n        return tostring(change_base(floor(x/base),\
    \ base)*base+x%base)\n    else \n        return x\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = change_base;\n\t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9,\
    \ 3) == \"100\")\n\t@test(candidate(234, 2) == \"11101010\")\n\t@test(candidate(16,\
    \ 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\")\n\t@test(candidate(7,\
    \ 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t@test(candidate(3, 4) ==\
    \ \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5, 6) == \"5\"\
    )\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpp_hs_vp4.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpp_hs_vp4.jl:1\n\
    in expression starting at /tmp/tmpp_hs_vp4.jl:1\n"
  stdout: ''
  timestamp: 1660008733
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n        if base > 10 \n            error(\"Error: Base\
    \ must be less than 10\") \n        else if base < 1 \n            error(\"Error:\
    \ Base must be greater than 1\") \n        else if base == 1\n            return\
    \ show(x::Int64) \n        else \n            convert(x, base)\n        end\n\
    \    end \n</code>\n<|/ a |>\n<| a |>\nHere is the code of the above solutions\
    \ in Julia:\n<code>\nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\
    \t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234,\
    \ 2) == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwlfko8c3.jl:14\nin expression starting at\
    \ /tmp/tmpwlfko8c3.jl:14\n"
  stdout: ''
  timestamp: 1660008733
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 10\n        return toString(base * x)\n\
    \    else\n        return toString(change_base(x, base-1))\nend function\n</code>\n\
    And you can also use the built-in function Base.show(io::IO, a::AbstractString)::String\
    \ or Base.show(io::IO, a::Int64)::String and print them in different ways.\n<|/\
    \ a |>\n<| c |>\nThanks for your reply.  I appreciate you taking the time to write\
    \ this out.  I went ahead and tried it out, and it doesn't do anything to the\
    \ number.  It just prints out the original number, as shown in the original question.\
    \  I'm running Julia 1.1.0.\n<|/ c |>\n<| c |>\nI fixed the problem. I forgot\
    \ that you also need to change the base of the number to convert it. I did this\
    \ in the code. Now it works as expected. Also, I updated the answer because I\
    \ made a mistake in that part.\n<|/ c |>\n<| c |>\nThank you so much for your\
    \ continued help.  Now I understand why you used the function inside the function.\
    \  It makes complete sense, and I really appreciate it.  I didn't know you could\
    \ do that.  However, it seems that it doesn't solve the original problem.  I tried\
    \ running the script and it doesn't do anything.  I'm running Julia 1.1.0.\n<|/\
    \ c |>\n<| c |>\nYou're welcome. Could you please tell me what didn't work and\
    \ what error you got? And if possible, please include the exact code you tried.\
    \ And also tell me if you ran the function inside a notebook (i.e. using the `@`\
    \ symbol) or in a regular Julia script.\n<|/ c |>\n<| c |>\nI did use the @ symbol.\
    \  Here's the code I'm running.  The problem is it just prints out all of the\
    \ numbers as originally shown.  Nothing gets modified.\n<|/ c |>\n<| a dscore=0\
    \ tags=julia,function,if-statement,loops |>\nBased on what has been told you,\
    \ here is my answer:\n<code>\nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\
    \t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234,\
    \ 2) == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"function\" at /tmp/tmpc7zwchnf.jl:11 expected\
    \ \"end\", got \"function\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpc7zwchnf.jl:16\n\
    in expression starting at /tmp/tmpc7zwchnf.jl:16\n"
  stdout: ''
  timestamp: 1660008733
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n</code>\n<|/ a tags=julia,bigint |>\n<| c |>\nI like\
    \ the \"no base change\" part of the answer.\n<|/ c |>\n<| c |>\nYes, this could\
    \ be further improved by defining `change_base(number::Integer, base::Integer)`\
    \ that wraps the code above. Is that preferable, or is there something that could\
    \ go more efficient than this?\n<|/ c |>\n<| a |>\nThis solution doesn't require\
    \ a separate function. The result is simply the string representation of the number\
    \ in base base:\n<code>\nconvert(Base,number::Int64)\nusing Test\n\n@testset begin\n\
    \ncandidate = change_base;\n\t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9,\
    \ 3) == \"100\")\n\t@test(candidate(234, 2) == \"11101010\")\n\t@test(candidate(16,\
    \ 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\")\n\t@test(candidate(7,\
    \ 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t@test(candidate(3, 4) ==\
    \ \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5, 6) == \"5\"\
    )\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpp8ysky0q.jl:12\nin expression starting at\
    \ /tmp/tmpp8ysky0q.jl:12\n"
  stdout: ''
  timestamp: 1660008733
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n        if base < 2 \n            error(\"Base must be\
    \ >= 2\")\n        elif base == 2 \n            return format(x::Int64, \"b\"\
    )\n        else \n            digits = str((x::Int64)%base)\n            digits\
    \ = digits[2:end]\n            return digits * change_base(x/base, base)\n   \
    \     end\nend\n</cell>\n<code language=julia-1.0>\n\"\"\"\n    find_substring(x::String,\
    \ y::String):: Int64\n    Given two strings x and y, find how many times the substring\
    \ y appears in string x.\n    >>> find_substring(\"hakuna matata\", \"matata\"\
    )\n    2\n    >>> find_substring(\"hakuna matata\", \"matatai\")\n    3\n    >>>\
    \ find_substring(\"hakuna matata\", \"matat\")\n    3\n    >>> find_substring(\"\
    hakuna matata\", \"mat\")\n    4\n    >>> find_substring(\"hakuna matata\", \"\
    ma\")\n    5\n    >>> find_substring(\"hakuna matata\", \"mato\")\n    4\n   \
    \ >>> find_substring(\"hakuna matata\", \"maa\")\n    0\n    \"\"\"\nusing Test\n\
    \n@testset begin\n\ncandidate = change_base;\n\t@test(candidate(8, 3) == \"22\"\
    )\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2) == \"11101010\"\
    )\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\"\
    )\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t\
    @test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5,\
    \ 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) ==\
    \ \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"base\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp_zaja6y4.jl:14\nin expression starting at /tmp/tmp_zaja6y4.jl:14\n"
  stdout: ''
  timestamp: 1660008733
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n        \n    if base == 10 \n        return toString(x)\n\
    \    \n    base = toBase(base)\n    \n    if x%base != 0\n        return x\n \
    \   else\n        return (x / base) * base\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = change_base;\n\t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9,\
    \ 3) == \"100\")\n\t@test(candidate(234, 2) == \"11101010\")\n\t@test(candidate(16,\
    \ 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\")\n\t@test(candidate(7,\
    \ 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t@test(candidate(3, 4) ==\
    \ \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5, 6) == \"5\"\
    )\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpazvi_rbl.jl:1\nin expression starting at /tmp/tmpazvi_rbl.jl:1\n"
  stdout: ''
  timestamp: 1660008734
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if x<10 && base < 10 \n        return str((x:*base))\n\
    \    if x<10 \n        return \"\"\n    if base < 10 \n        error(\"Base must\
    \ be >= 10\")\n    if x>base \n        error(\"Base must be <= base + x\")\n \
    \   let x = x % base\n    x = x - x\n    return change_base(x, base) + base *\
    \ str((x:*base))\n</code>\n<|/ a |>\n<| c |>\nThis doesn't work for all bases\
    \ beyond 10. e.g. `change_base(100, 10)` gives `\"100\"` instead of `\"1100\"\
    `\n<|/ c |>\n<| c |>\nThe original answer had a bug. `change_base(100, 10)` gives\
    \ `\"100\"` instead of `\"1100\"`\n<|/ c |>\n<| a dscore=0 |>\nAn iterative solution\
    \ using recursion:\n<code>\nconvert(x, base) =\n    if x < base then\n       \
    \ x\n    else\n        x * convert(x / base, base)\nusing Test\n\n@testset begin\n\
    \ncandidate = change_base;\n\t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9,\
    \ 3) == \"100\")\n\t@test(candidate(234, 2) == \"11101010\")\n\t@test(candidate(16,\
    \ 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\")\n\t@test(candidate(7,\
    \ 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t@test(candidate(3, 4) ==\
    \ \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5, 6) == \"5\"\
    )\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"*\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpv24946ve.jl:13\nin expression starting at\
    \ /tmp/tmpv24946ve.jl:13\n"
  stdout: ''
  timestamp: 1660008733
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base==2 then \n        y=to_string(x%pow10(base),\
    \ base)\n        return y[length(y)-1] \n    elseif base==10 then \n        y=to_string(x%pow10(base),\
    \ base)\n        return y[length(y)-1] \n    end\n    return \"\"\nend\n</code>\n\
    <|/ a |>\n<| c |>\nThanks David. The code you wrote works well but I am looking\
    \ for something much more simple. My problem is with the function pow10. I need\
    \ to multiply the value by 10 but I don't know how to do this.\n<|/ c |>\n<| c\
    \ |>\nI see. I have edited my answer to reflect that. Hope it helps you.\n<|/\
    \ c |>\n<| c |>\nThanks David. I edited my question (I added a new function) because\
    \ I realized that I was looking for a way to multiply a string by 10. Do you know\
    \ how I can do this?\n<|/ c |>\n<| a dscore=2 tags=julia |>\nI like the answers\
    \ above, especially David's answer, and I encourage you to learn how to do this,\
    \ because I think it will help you learn the basics of Julia.\nTo multiply a string\
    \ by 10 in Julia, you can use strings(x) * 10. An example:\n<code>\njulia> \"\
    10\" * 10\n\"100\"\n</code>\n<|/ a |>\n<| c |>\nThanks David. I edited my question\
    \ (I added a new function) because I realized that I was looking for a way to\
    \ multiply a string by 10. Do you know how I can do this?\n<|/ c |>\n<| a dscore=0\
    \ |>\nIf you want to multiply a string by 10 and then convert it back to an integer\
    \ then you can use Base.string_to_int.\n<code>\njulia> string_to_int(\"10\"*10)\n\
    100\n</code>\n<|/ a tags=julia |>\n<| a |>\nIn Julia v1.7 you can use string(x)*10\
    \ for multiplying the string by 10.\nThe function can be use to multiply the digits\
    \ of the number:\n<code>\njulia> string(x::Int64)::Int64\nConvert its argument\
    \ to a string. The argument is automatically converted if it\nis numeric.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = change_base;\n\t@test(candidate(8, 3)\
    \ == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2) ==\
    \ \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4j_im57d.jl:21\nin expression starting at\
    \ /tmp/tmp4j_im57d.jl:21\n"
  stdout: ''
  timestamp: 1660008734
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 2 || base > 10 \n        raise Exception\n\
    \    else \n        if base == 2 \n            return toString( Int(x) %base)\n\
    \        else \n            return toString( Int(x) %base) + change_base( Int(x)\
    \ %base, base)\nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\t@test(candidate(8,\
    \ 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2)\
    \ == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"Exception\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmplho91c56.jl:13\nin expression starting at /tmp/tmplho91c56.jl:13\n"
  stdout: ''
  timestamp: 1660008734
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 2\n        error(\"base cannot be less\
    \ than 2\")\n    elseif base > 10 \n        error(\"base cannot be greater than\
    \ 10\")\n    elseif base == 2\n        return (x::Int64).to_s\n    else\n    \
    \    div = (base::Int64).to_s\n        remainder = x % base\n        quotient\
    \ = x / base\n        answer = quotient.to_s + div\n        answer += remainder.to_s\n\
    \        answer\n    end\nend\n</code>\n<|/ a tags=julia |>\n<| c |>\nThe `else`\
    \ statement in this function is not needed at all, as it only executes when the\
    \ `base` isn't 2 or 10. Hence `function change_base(x::Int64, base::Int64)::String\
    \ \n    if base == 2 || base == 10\n        return (x::Int64).to_s\n    else\n\
    \        div = (base::Int64).to_s\n        remainder = x % base\n        quotient\
    \ = x / base\n        answer = quotient.to_s + div\n        answer += remainder.to_s\n\
    \        answer\n    end\nend`.\n<|/ c |>\n<| a |>\nUsing a base that is less\
    \ than 10 (but greater than 0) is a bit strange. Also, what do you want to happen?\
    \ Does it matter? \nI guess you would like to have the number as decimal number.\
    \ If so, this should work:\n<code>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = change_base;\n\t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3)\
    \ == \"100\")\n\t@test(candidate(234, 2) == \"11101010\")\n\t@test(candidate(16,\
    \ 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\")\n\t@test(candidate(7,\
    \ 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t@test(candidate(3, 4) ==\
    \ \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5, 6) == \"5\"\
    )\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_nqz9lei.jl:27\nin expression starting at\
    \ /tmp/tmp_nqz9lei.jl:27\n"
  stdout: ''
  timestamp: 1660008734
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    # convert x to string\n    x :: String\n    # convert\
    \ x to int and divide by base\n    x :: Int64\n    # convert x to string\n   \
    \ x :: String\n    # convert x to int and multiply by base\n    x :: Int64\n \
    \   # convert x to string\n    x :: String\n    # return converted number\n  \
    \  return x :: String\n    \"\"\"\n# function change_base(x::Int64, base::Int64)::String\n\
    \    \"\"\"\n    Write a function that takes two parameters: \n    the first is\
    \ a real number x and the second is a base between 2 and 36.\n    The function\
    \ should convert the number to string representation after the conversion.\n \
    \   base numbers are less than 10.\n    \"\"\"\n# function change_base(x::Int64,\
    \ base::Int64)::String\n    \"\"\"\n    Write a function that takes two parameters:\
    \ \n    the first is a real number x and the second is a base between 2 and 36.\n\
    \    The function should convert the number to string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    \"\"\"\n# function change_base(x::Int64,\
    \ base::Int64)::String\n    \"\"\"\n    Write a function that takes two parameters:\
    \ \n    the first is a real number x and the second is a base between 2 and 36.\n\
    \    The function should convert the number to string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    \"\"\"\n# function change_base(x::Int64,\
    \ base::Int64)::String\n    \"\"\"\n    Write a function that takes two parameters:\
    \ \n    the first is a real number x and the second is a base between 2 and 36.\n\
    \    The function should convert the number to string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    \"\"\"\n# function change_base(x::Int64,\
    \ base::Int64)::String\n    \"\"\"\n    Write a function that takes two parameters:\
    \ \n    the first is a real number x and the second is a base between 2 and 36.\n\
    \    The function should convert the number to string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    \"\"\"\n# function change_base(x::Int64,\
    \ base::Int64)::String\n    \"\"\"\n    Write a function that takes two parameters:\
    \ \n    the first is a real number x and the second is a base between 2 and 36.\n\
    \    The function should convert the number to string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    \"\"\"\n# function change_base(x::Int64,\
    \ base::Int64)::String\n    \"\"\"\n    Write a function that takes two parameters:\
    \ \n    the first is a real number x and the second is a base between 2 and 36.\n\
    \    The function should convert the number to string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    \"\"\"\n# function change_base(x::Int\n\
    using Test\n\n@testset begin\n\ncandidate = change_base;\n\t@test(candidate(8,\
    \ 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2)\
    \ == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"function\" at /tmp/tmph4dhnn2r.jl:11 expected\
    \ \"end\", got \"a\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmph4dhnn2r.jl:27\n\
    in expression starting at /tmp/tmph4dhnn2r.jl:27\n"
  stdout: ''
  timestamp: 1660008734
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base<10\n        throw(RangeException(\"Invalid\
    \ base. Must be >= 10.\"))\n    elseif base==10 \n        return to_string(x)\n\
    \    else\n        digits = digits(x, base)\n        base = digits[1]\n      \
    \  rest = digits[2:end]\n        digits[1] = base\n        digits[2:end] = digits2(rest,\
    \ base)\n        return string(reverse(digits))\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = change_base;\n\t@test(candidate(8, 3) == \"22\"\
    )\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2) == \"11101010\"\
    )\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\"\
    )\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t\
    @test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5,\
    \ 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) ==\
    \ \"7\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 12 errored,
    0 broken.

    in expression starting at /tmp/tmpykzmh319.jl:27

    '
  stdout: "test set: Error During Test at /tmp/tmpykzmh319.jl:30\n  Test threw exception\n\
    \  Expression: candidate(8, 3) == \"22\"\n  UndefVarError: RangeException not\
    \ defined\n  Stacktrace:\n   [1] change_base(x::Int64, base::Int64)\n     @ Main\
    \ /tmp/tmpykzmh319.jl:13\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpykzmh319.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpykzmh319.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpykzmh319.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(9, 3) == \"100\"\n  UndefVarError: RangeException not defined\n  Stacktrace:\n\
    \   [1] change_base(x::Int64, base::Int64)\n     @ Main /tmp/tmpykzmh319.jl:13\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpykzmh319.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpykzmh319.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpykzmh319.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(234, 2) == \"11101010\"\n  UndefVarError: RangeException not defined\n\
    \  Stacktrace:\n   [1] change_base(x::Int64, base::Int64)\n     @ Main /tmp/tmpykzmh319.jl:13\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpykzmh319.jl:32 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpykzmh319.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpykzmh319.jl:33\n  Test threw exception\n  Expression:\
    \ candidate(16, 2) == \"10000\"\n  UndefVarError: RangeException not defined\n\
    \  Stacktrace:\n   [1] change_base(x::Int64, base::Int64)\n     @ Main /tmp/tmpykzmh319.jl:13\n\
    \   [2] macro expansion\n     @ ~/.con"
  timestamp: 1660008737
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base == 0\n        throw(ArgumentError(\"Base\
    \ must be non-zero\"))\n    \n    elseif base < 0\n        throw(ArgumentError(\"\
    Base must be non-negative integer\"))\n    \n    elseif base > 10\n        throw(ArgumentError(\"\
    Base must be less than ten\"))\n    \n    elseif base == 0\n        return \"\
    0\"\n    \n    else\n        string = \"\"\n        \n        for i = base-1,\
    \ 0, -1\n            x = x * base^i\n            string = string + digit(x)\n\
    \        end\n        \n        return string\n    end\nend\n</cell>\n<code language=julia-1.4>\n\
    \"\"\"Convert a number to a binary string\n    Convert number x to a binary string\
    \ string representation of x.\n    x must be a non-negative integer (the function\
    \ will fail if x < 0).\n    return string representation\n    >>> binary(15)\n\
    \    \"1111\"\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\
    \t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234,\
    \ 2) == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid iteration specification\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvqxyfpzf.jl:27\nin expression starting at\
    \ /tmp/tmpvqxyfpzf.jl:27\n"
  stdout: ''
  timestamp: 1660008735
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n        if base<10 && base>1 return \"Error\"\n     \
    \   if base==1\n            x=x/base\n            if x==0 return \"0\"\n     \
    \       elseif x==1 return \"1\"\n            else return \"10\"+change_base(x,base-1)\n\
    \        else \n            y=x/base\n            if y==0 return \"0\"\n     \
    \       else return \"10\"+change_base(y,base-1)\n        end\nend\n</cell>\n\
    <code language=julia-0.6>\nchange_base(8, 3)\n</cell>\n<text>\nExercise:\nWrite\
    \ a function that converts an integer number to a string representation\nof the\
    \ number (leading zeros are used if the number is less than 10).\nusing Test\n\
    \n@testset begin\n\ncandidate = change_base;\n\t@test(candidate(8, 3) == \"22\"\
    )\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2) == \"11101010\"\
    )\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\"\
    )\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t\
    @test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5,\
    \ 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) ==\
    \ \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"if\" at /tmp/tmpm63_7t96.jl:16 expected \"\
    end\", got \"else\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpm63_7t96.jl:18\n\
    in expression starting at /tmp/tmpm63_7t96.jl:18\n"
  stdout: ''
  timestamp: 1660008735
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if x <10\n        then return x\n    else\n     \
    \   return (tostring(x%base)+tostring(base)) \n    end\nend\n\"\"\"\n## Converting\
    \ from String and back to Int\nConverting from String to Int can be done using\
    \ atoi function as follows:\n\"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = change_base;\n\t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3)\
    \ == \"100\")\n\t@test(candidate(234, 2) == \"11101010\")\n\t@test(candidate(16,\
    \ 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\")\n\t@test(candidate(7,\
    \ 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t@test(candidate(3, 4) ==\
    \ \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5, 6) == \"5\"\
    )\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpdg9p17ci.jl:13\nin expression starting at /tmp/tmpdg9p17ci.jl:13\n"
  stdout: ''
  timestamp: 1660008735
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    str = toString(x)\n    str2 = str\n    int2base2\
    \ = 1\n    for i in reverse(split(str, \".\"))\n        int2base2 *= i\n     \
    \   int2base2 %= base\n        str2 = insert(str2, int2base2, \"0\")\n    str\
    \ = reverse(split(str2, \"\"))\n    str = \"0\" * (base - length(str)) ++ str\n\
    \    str\nend\n</cell>\n<code language=julia-1.3>\nchange_base(8, 2)\n</cell>\n\
    <text>\nSlicing\nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\t\
    @test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234,\
    \ 2) == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpu1fi52v3.jl:23\nin expression starting at\
    \ /tmp/tmpu1fi52v3.jl:23\n"
  stdout: ''
  timestamp: 1660008735
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    bigdigits = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    \n    if base > len(bigdigits) || base < 0 \n        error(\"base out of range\"\
    )\n    elseif base == 0\n        bigdigits = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    \n    elseif base == 1\n        bigdigits = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    \n    else\n        bigdigits = bigdigits[base:base+length(digits(x))]\n    bigint\
    \ = \"\"\n    for digit in split(digits(x), bigdigits)\n        bigint = bigint\
    \ * base + digit\n    return bigint\n</code>\nThe output of this code is\n<code>\n\
    \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n\"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    \n\"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n\"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    \n\"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n\"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    \n\"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n\"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    \n\"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n\"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    \n\"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n\"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    \n\"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n\"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    \n\"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n\"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    \n\"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n\"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    \n\"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n\"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    \n\"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n\"0123456789ABCDEFGH\nusing Test\n\
    \n@testset begin\n\ncandidate = change_base;\n\t@test(candidate(8, 3) == \"22\"\
    )\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2) == \"11101010\"\
    )\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\"\
    )\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t\
    @test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5,\
    \ 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) ==\
    \ \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpi_tasqft.jl:25\nin expression starting at\
    \ /tmp/tmpi_tasqft.jl:25\n"
  stdout: ''
  timestamp: 1660008735
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n  if base < 2\n  then return \"0\" + to_string(x)\n \
    \ else if base < 36\n  then return to_string(Int(x))\n  else return to_string(x\
    \ * base^2)\nend\nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\t\
    @test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234,\
    \ 2) == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpe0sr0mm8.jl:13\nin expression starting at /tmp/tmpe0sr0mm8.jl:13\n"
  stdout: ''
  timestamp: 1660008735
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n        \n        if base == 2 || base == 3 || base ==\
    \ 4 || base == 5\n            string = \"\"\n        elif base == 6 || base ==\
    \ 7\n            string = \"\"\n        elseif base == 8 || base == 9\n      \
    \      string = \"\"\n        else \n            string = to_string(x::Int64)\n\
    \        end\n        \n        digits = split(string, \".\")\n        # loop\
    \ over digits\n        for (i<-length(digits))\n            # loop over base\n\
    \            for (j<-length(bases))\n                # add digit to result\n \
    \               result += digits[i] * bases[j]\n            end\n        end\n\
    \        \n        return string\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = change_base;\n\t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9,\
    \ 3) == \"100\")\n\t@test(candidate(234, 2) == \"11101010\")\n\t@test(candidate(16,\
    \ 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\")\n\t@test(candidate(7,\
    \ 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t@test(candidate(3, 4) ==\
    \ \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5, 6) == \"5\"\
    )\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"base\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpr4_t_l8l.jl:15\nin expression starting at /tmp/tmpr4_t_l8l.jl:15\n"
  stdout: ''
  timestamp: 1660008735
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if x > (base-1)::Int64 \n        return \"Number\
    \ too big\"\n    else if x == 0\n        return \"Number too small\"\n    return\
    \ to_string(x*base::Int64)\nend\n</cell>\n<code language=julia-1.1>\n# Test\n\
    println(change_base(22, 3))\nprintln(change_base(1000, 2))\nprintln(change_base(111,\
    \ 2))\n</cell>\n<text>\nExercise: Converting numbers\nConvert every number to\
    \ a string, which you can do using the Base.to_string function as below:\nusing\
    \ Test\n\n@testset begin\n\ncandidate = change_base;\n\t@test(candidate(8, 3)\
    \ == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2) ==\
    \ \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptbpkskyx.jl:14\nin expression starting at\
    \ /tmp/tmptbpkskyx.jl:14\n"
  stdout: ''
  timestamp: 1660008735
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    \n    convert :: Int64 -> Int64\n    convert x =\
    \ convert(x, base)\n    \n    convert :: Int64\n    convert x | base == 10 = (x\
    \ * base % 10 + 10) % 10\n              | otherwise = x * base % 10\n    \n  \
    \  return convert(x)\n</code>\n<|/ a |>\n<| c |>\nThanks for this, I wasn't too\
    \ far off but I think the `%` is the key bit. I got it working with `%` in my\
    \ head. I'll post a working answer shortly.\n<|/ c |>\n<| a dscore=2 |>\nHere's\
    \ a Julia implementation, including a test suite:\n<code>\nusing Base.Test\nusing\
    \ Test\n\n@testset begin\n\ncandidate = change_base;\n\t@test(candidate(8, 3)\
    \ == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2) ==\
    \ \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"function\" at /tmp/tmpxmq2t92z.jl:11 expected\
    \ \"end\", got \"x\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxmq2t92z.jl:14\n\
    in expression starting at /tmp/tmpxmq2t92z.jl:14\n"
  stdout: ''
  timestamp: 1660008735
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 0 || base > 10\n        throw(\"Base must\
    \ be between 0 and 10\")\n    end\nusing Test\n\n@testset begin\n\ncandidate =\
    \ change_base;\n\t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3) ==\
    \ \"100\")\n\t@test(candidate(234, 2) == \"11101010\")\n\t@test(candidate(16,\
    \ 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\")\n\t@test(candidate(7,\
    \ 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t@test(candidate(3, 4) ==\
    \ \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5, 6) == \"5\"\
    )\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpf9ejj7wc.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpf9ejj7wc.jl:1\n\
    in expression starting at /tmp/tmpf9ejj7wc.jl:1\n"
  stdout: ''
  timestamp: 1660008735
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    \"\"\"Convert base x to base y.\n    \"\"\"\nusing\
    \ Test\n\n@testset begin\n\ncandidate = change_base;\n\t@test(candidate(8, 3)\
    \ == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2) ==\
    \ \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpceu1i4p3.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpceu1i4p3.jl:1\n\
    in expression starting at /tmp/tmpceu1i4p3.jl:1\n"
  stdout: ''
  timestamp: 1660008735
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 2\n        return str(x)\n    elseif base\
    \ < 10\n        return str((x * base))\n    else\n        return change_base((x\
    \ // base), base) * base + str((x % base))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = change_base;\n\t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9,\
    \ 3) == \"100\")\n\t@test(candidate(234, 2) == \"11101010\")\n\t@test(candidate(16,\
    \ 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\")\n\t@test(candidate(7,\
    \ 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t@test(candidate(3, 4) ==\
    \ \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5, 6) == \"5\"\
    )\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmplg0uxfw9.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmplg0uxfw9.jl:1\n\
    in expression starting at /tmp/tmplg0uxfw9.jl:1\n"
  stdout: ''
  timestamp: 1660008735
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n  case x > base \n    then return x \n    else return\
    \ x * base^(x mod base) \n  end\nend\n</cell>\n<code language=julia-1.0>\n# test\
    \ case\nchange_base(8, 3)\n</cell>\n<text>\nString Formatting\nusing Test\n\n\
    @testset begin\n\ncandidate = change_base;\n\t@test(candidate(8, 3) == \"22\"\
    )\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2) == \"11101010\"\
    )\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\"\
    )\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t\
    @test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5,\
    \ 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) ==\
    \ \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"function\" at /tmp/tmp3nmmebth.jl:11 expected\
    \ \"end\", got \"x\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp3nmmebth.jl:12\n\
    in expression starting at /tmp/tmp3nmmebth.jl:12\n"
  stdout: ''
  timestamp: 1660008735
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if (base < 2)\n        error(\"base number is greater\
    \ than 2.\")\n    else if (base == 10)\n        return string(x)\n    else if\
    \ (base == 16)\n        return tohex(x)\n    else\n        return tobin(x)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = change_base;\n\t@test(candidate(8,\
    \ 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2)\
    \ == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_ukou0o6.jl:14\nin expression starting at\
    \ /tmp/tmp_ukou0o6.jl:14\n"
  stdout: ''
  timestamp: 1660008735
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n  if base < 2 \n    error(\"Invalid base number\")\n\
    \  elseif base > 36 \n    error(\"Invalid base number\")\n  else \n  str = string(fromInt(x))\n\
    \  str = str[end-base+1:end]\n  return str\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = change_base;\n\t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9,\
    \ 3) == \"100\")\n\t@test(candidate(234, 2) == \"11101010\")\n\t@test(candidate(16,\
    \ 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\")\n\t@test(candidate(7,\
    \ 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t@test(candidate(3, 4) ==\
    \ \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5, 6) == \"5\"\
    )\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpqsr7ncvu.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpqsr7ncvu.jl:1\n\
    in expression starting at /tmp/tmpqsr7ncvu.jl:1\n"
  stdout: ''
  timestamp: 1660008735
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    \"change base of x\"\n    if base == 10 \n      \
    \  return to_base_string(x)\n    \n    else \n        digits = digits(x)\n   \
    \     digits = digits[end-1::end]\n        return join(reverse(digits[base-1::base]),\
    \ to_base_string(x))\nend\nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\
    \t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234,\
    \ 2) == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpy18ldpfv.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpy18ldpfv.jl:1\n\
    in expression starting at /tmp/tmpy18ldpfv.jl:1\n"
  stdout: ''
  timestamp: 1660008736
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 2\n        return str(x)\n    \n    digits\
    \ = String(\"\")\n    for c in str(x)\n        if base^0 == ord(c)\n         \
    \   digits <- digits * String(\"\") + (base^0) + c\n        else\n           \
    \ digits <- digits * String(\"\") + c\n    end\n    \n    return digits\nend\n\
    </cell>\n<text>\nNext we have the definition of the function check. There are\
    \ two cases:\nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\t@test(candidate(8,\
    \ 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2)\
    \ == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfwr82b1n.jl:25\nin expression starting at\
    \ /tmp/tmpfwr82b1n.jl:25\n"
  stdout: ''
  timestamp: 1660008735
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    \"\"\"Change numerical base of input number x to\
    \ base.\n    return string representation after the conversion.\n    base numbers\
    \ are less than 10.\n    >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8,\
    \ 2)\n    \"1000\"\n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nusing\
    \ Test\n\n@testset begin\n\ncandidate = change_base;\n\t@test(candidate(8, 3)\
    \ == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2) ==\
    \ \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpf37_9cbo.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpf37_9cbo.jl:1\n\
    in expression starting at /tmp/tmpf37_9cbo.jl:1\n"
  stdout: ''
  timestamp: 1660008722
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    # convert number to string and remove all 0s in front\
    \ of base\n    number = to_base(x, base)\n    # remove all 0s in front of base\n\
    \    number = number.substr(0, length(number) - base)\n    return number\nend\n\
    </cell>\n<text>\nNow we will apply our functions to our dataset!\nusing Test\n\
    \n@testset begin\n\ncandidate = change_base;\n\t@test(candidate(8, 3) == \"22\"\
    )\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2) == \"11101010\"\
    )\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\"\
    )\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t\
    @test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5,\
    \ 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) ==\
    \ \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpu5gyxd8q.jl:18\nin expression starting at\
    \ /tmp/tmpu5gyxd8q.jl:18\n"
  stdout: ''
  timestamp: 1660008735
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if x==0\n        then return \"0\"\n        else\
    \ if base == 2\n            then return show(div(x, base))\n            else if\
    \ base == 10\n                then return show(mod(x, base))\n               \
    \ else error(\"wrong base\")\nend\n</cell>\n<code language=julia-0.5>\nchange_base(108,\
    \ 2)\n</cell>\n<text>\nThe above is functionally equivalent to:\nusing Test\n\n\
    @testset begin\n\ncandidate = change_base;\n\t@test(candidate(8, 3) == \"22\"\
    )\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2) == \"11101010\"\
    )\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\"\
    )\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t\
    @test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5,\
    \ 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) ==\
    \ \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmphem6ux8j.jl:13\nin expression starting at /tmp/tmphem6ux8j.jl:13\n"
  stdout: ''
  timestamp: 1660008736
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base == 2 || base == 10\n        return digit(x)\n\
    \    \n    function convert(x::Int64, base::Int64)\n        if x == 0 \n     \
    \       return x\n        \n        if base == 2 \n            return digit(x\
    \ * base ** ceil(log(x, base))) \n        \n        if base == 10\n          \
    \  digits = digit(x * base ** floor(log(x, base)))\n            if digits == 10\n\
    \                return convert(digits * base ** floor(log(x, base)), base)\n\
    \            else \n                return digits\n    end\n    \n    return convert(x,\
    \ base)\nend\nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\t@test(candidate(8,\
    \ 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2)\
    \ == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"x^y\" instead of \"x**y\" for exponentiation,\
    \ and \"x...\" instead of \"**x\" for splatting.\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp02q_337g.jl:20\nin expression starting at /tmp/tmp02q_337g.jl:20\n"
  stdout: ''
  timestamp: 1660008737
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    \n    \"\"\"\n    Convert the string representation\
    \ of number x to base base\n    \n    >>> change_base('3', 3)\n    '33'\n    >>>\
    \ change_base('3', 2)\n    '10'\n    >>> change_base('4', 2)\n    '100'\n    >>>\
    \ change_base('8', 2)\n    '100'\n    \"\"\"\nusing Test\n\n@testset begin\n\n\
    candidate = change_base;\n\t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9,\
    \ 3) == \"100\")\n\t@test(candidate(234, 2) == \"11101010\")\n\t@test(candidate(16,\
    \ 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\")\n\t@test(candidate(7,\
    \ 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t@test(candidate(3, 4) ==\
    \ \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5, 6) == \"5\"\
    )\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmppwbroe95.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmppwbroe95.jl:1\n\
    in expression starting at /tmp/tmppwbroe95.jl:1\n"
  stdout: ''
  timestamp: 1660008737
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base > 10 || base < 1 \n        return x \n  \
    \  elseif base == 10\n        return toString(x)\n    elseif base == 1\n     \
    \   return toString(x * 10)\n    else\n        return toString(x * change_base(x,\
    \ base - 1)) \n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\
    \t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234,\
    \ 2) == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 12 errored,
    0 broken.

    in expression starting at /tmp/tmps1gbl507.jl:24

    '
  stdout: "test set: Error During Test at /tmp/tmps1gbl507.jl:27\n  Test threw exception\n\
    \  Expression: candidate(8, 3) == \"22\"\n  UndefVarError: toString not defined\n\
    \  Stacktrace:\n   [1] change_base(x::Int64, base::Int64)\n     @ Main /tmp/tmps1gbl507.jl:17\n\
    \   [2] change_base(x::Int64, base::Int64) (repeats 2 times)\n     @ Main /tmp/tmps1gbl507.jl:19\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmps1gbl507.jl:27 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmps1gbl507.jl:26\ntest set:\
    \ Error During Test at /tmp/tmps1gbl507.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(9, 3) == \"100\"\n  UndefVarError: toString not defined\n  Stacktrace:\n\
    \   [1] change_base(x::Int64, base::Int64)\n     @ Main /tmp/tmps1gbl507.jl:17\n\
    \   [2] change_base(x::Int64, base::Int64) (repeats 2 times)\n     @ Main /tmp/tmps1gbl507.jl:19\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmps1gbl507.jl:28 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmps1gbl507.jl:26\ntest set:\
    \ Error During Test at /tmp/tmps1gbl507.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(234, 2) == \"11101010\"\n  UndefVarError: toString not defined\n \
    \ Stacktrace:\n   [1] change_base(x::Int64, base::Int64)\n     @ Main /tmp/tmps1gbl507.jl:17\n\
    \   [2] change_base(x::Int64, base::Int64)\n     @ Main /tmp/tmps1gbl507.jl:19\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmps1gbl507.jl:29 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmps1gbl507.jl:26\ntest set:\
    \ Error During Test at /tmp/tmps1"
  timestamp: 1660008739
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    \"\"\"change a number from base to another\"\"\"\n\
    \    if base<=10\n        return tostring(base*x)\n    if base > 10\n        digits\
    \ = convert(x, base)\n        return tostring(base^digits)\nend\n</cell>\n<code\
    \ language=julia-1.0>\nusing BenchmarkTools\n</cell>\n<code language=julia-1.0>\n\
    @benchmark change_base(convert(8,2), 3)\n</cell>\n<code language=julia-1.0>\n\
    @benchmark change_base(8, 3)\n</cell>\n<code language=julia-1.0>\n@benchmark change_base(8,\
    \ 2)\n</cell>\n<code language=julia-1.0>\n@benchmark change_base(convert(8, 8),\
    \ 2)\n</cell>\n<code language=julia-1.0>\n@benchmark change_base(8, 8)\n</cell>\n\
    <text>\n4.10 Vectors\nA vector is a one dimensional array of numbers. \nA vector\
    \ is defined by:\nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\t\
    @test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234,\
    \ 2) == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprw3_bif5.jl:19\nin expression starting at\
    \ /tmp/tmprw3_bif5.jl:19\n"
  stdout: ''
  timestamp: 1660008737
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    \n    if base < 1 || base > 2\n        return \"\
    Error: Invalid base number\"\n    \n    else if x == 10\n        return String(x)\n\
    \    \n    else if base == 2\n        return String(10*x + 1)\n    \n    else\n\
    \        return x*base_convert(x, base)\nend\n</code>\n<|/ a tags=julia |>\n<|\
    \ c |>\nThis does not provide a solution to the question that was asked.\n<|/\
    \ c |>\n<| c |>\nSorry, I thought he just wanted to know how you do this. I thought\
    \ he wanted to know how to write `base_convert()`, as in the title he said \"\
    change numerical base of input\". That is what I showed him by writing the `base_convert()`\
    \ function.\n<|/ c |>\n<| c |>\nYou answered the question by explaining how to\
    \ create a base conversion function. You did not answer or explain how to fix\
    \ the code so the function would convert integers.\n<|/ c |>\n<| c |>\nI provided\
    \ an example with `base_convert()`. How does it not answer the question?\n<|/\
    \ c |>\n<| c |>\nHe asked \"what is the solution to the problem?\" This does not\
    \ show that. Your answer shows the solution to the problem, but does not explain\
    \ how that solution was derived.\n<|/ c |>\n<| a tags=julia |>\nThe solution is\
    \ to use BigInt. Your example becomes:\n<code>\nusing Test\n\n@testset begin\n\
    \ncandidate = change_base;\n\t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9,\
    \ 3) == \"100\")\n\t@test(candidate(234, 2) == \"11101010\")\n\t@test(candidate(16,\
    \ 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\")\n\t@test(candidate(7,\
    \ 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t@test(candidate(3, 4) ==\
    \ \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5, 6) == \"5\"\
    )\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpz256ps41.jl:16\nin expression starting at\
    \ /tmp/tmpz256ps41.jl:16\n"
  stdout: ''
  timestamp: 1660008737
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if x < 10 && base < 10\n        return to_string(base*x)\n\
    \    else\n        return \"\"\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = change_base;\n\t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3)\
    \ == \"100\")\n\t@test(candidate(234, 2) == \"11101010\")\n\t@test(candidate(16,\
    \ 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\")\n\t@test(candidate(7,\
    \ 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t@test(candidate(3, 4) ==\
    \ \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5, 6) == \"5\"\
    )\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp77rla1cb.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp77rla1cb.jl:1\n\
    in expression starting at /tmp/tmp77rla1cb.jl:1\n"
  stdout: ''
  timestamp: 1660008737
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base<=0 or base>64\n        error(\"base should\
    \ be in range 0-64\")\n    endl = \"\\n\"\n    \n    if base==10\n        return\
    \ x.to_s()\n    end\nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\
    \t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234,\
    \ 2) == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"base\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpmxc_x22_.jl:12\nin expression starting at /tmp/tmpmxc_x22_.jl:12\n"
  stdout: ''
  timestamp: 1660008737
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base == 10 \n        return \"${x}\"\n    return\
    \ change_base((x % base), base).to_string()\nend \nusing Test\n\n@testset begin\n\
    \ncandidate = change_base;\n\t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9,\
    \ 3) == \"100\")\n\t@test(candidate(234, 2) == \"11101010\")\n\t@test(candidate(16,\
    \ 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\")\n\t@test(candidate(7,\
    \ 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t@test(candidate(3, 4) ==\
    \ \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5, 6) == \"5\"\
    )\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid interpolation syntax: \"${\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp01902wiu.jl:13\nin expression starting at\
    \ /tmp/tmp01902wiu.jl:13\n"
  stdout: ''
  timestamp: 1660008737
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    \"\"\"Change numerical base of input number x to\
    \ base.\n    return string representation after the conversion.\n    base numbers\
    \ are less than 10.\n    >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8,\
    \ 2)\n    \"1000\"\n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\n\"\"\"\
    \n    # your code here\n    #\n    digit = digits\n    return x.to_string(base)\
    \ % digit\nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\t@test(candidate(8,\
    \ 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2)\
    \ == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqetw20mm.jl:1\nin expression starting at /tmp/tmpqetw20mm.jl:1\n"
  stdout: ''
  timestamp: 1660008737
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if (base < 10) \n        \"0\" * base + x::String\n\
    \    else \n        x::String\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert change_base(8, 3) == \"22\"\n@assert change_base(8, 2) == \"1000\"\n@assert\
    \ change_base(7, 2) == \"111\"\n</cell>\n<text>\nExercises\n7.1\nWrite a function\
    \ which finds the minimal value of a list using a recursive algorithm.\nThe algorithm\
    \ should work this way:\nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\
    \t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234,\
    \ 2) == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7zvpg30s.jl:18\nin expression starting at\
    \ /tmp/tmp7zvpg30s.jl:18\n"
  stdout: ''
  timestamp: 1660008737
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 2 || base > 10 \n        \"Base must be\
    \ between 2 and 10\"\n    else if base == 2 \n        digit_list = [8, 2, 1]\n\
    \    else \n        digit_list = generate_digit_list(base)\n    \n    for digit\
    \ in digit_list \n        if digit % 2 == 1 \n            x /= digit\n       \
    \ else \n            x %= digit\n            \n    if x < 0\n        x += 1\n\
    using Test\n\n@testset begin\n\ncandidate = change_base;\n\t@test(candidate(8,\
    \ 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2)\
    \ == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp39n6nwrb.jl:14\nin expression starting at\
    \ /tmp/tmp39n6nwrb.jl:14\n"
  stdout: ''
  timestamp: 1660008737
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    \"\"\"Change numerical base of input number x to\
    \ base.\n    return string representation after the conversion.\n    base numbers\
    \ are less than 10.\n    >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8,\
    \ 2)\n    \"1000\"\n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nusing\
    \ Test\n\n@testset begin\n\ncandidate = change_base;\n\t@test(candidate(8, 3)\
    \ == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2) ==\
    \ \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpf37_9cbo.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpf37_9cbo.jl:1\n\
    in expression starting at /tmp/tmpf37_9cbo.jl:1\n"
  stdout: ''
  timestamp: 1660008722
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    # base is less than 10\n    if base < 10\n    then\
    \ return string_of_int(x)\n    else \n        base = convert(base, x)\n      \
    \  digits = string_of_int(digits_of_int(x))\n        if digits == \"0\"\n    \
    \    then return \"0\"\n        else\n            digits = digits[2:]\n      \
    \      digits = reverse(digits)\n            digits = reverse(digits)\n      \
    \      digits = reverse(digits)\n            digits = reverse(digits)\n      \
    \      digits = reverse(digits)\n            digits = reverse(digits)\n      \
    \      digits = reverse(digits)\n            digits = reverse(digits)\n      \
    \      digits = reverse(digits)\n            digits = reverse(digits)\n      \
    \      digits = reverse(digits)\n            digits = reverse(digits)\n      \
    \      digits = reverse(digits)\n            digits = reverse(digits)\n      \
    \      digits = reverse(digits)\n            digits = reverse(digits)\n      \
    \      digits = reverse(digits)\n            digits = reverse(digits)\n      \
    \      digits = reverse(digits)\n            digits = reverse(digits)\n      \
    \      digits = reverse(digits)\n            digits = reverse(digits)\n      \
    \      digits = reverse(digits)\n            digits = reverse(digits)\n      \
    \      digits = reverse(digits)\n            digits = reverse(digits)\n      \
    \      digits = reverse(digits)\n            digits = reverse(digits)\n      \
    \      digits = reverse(digits)\n            digits = reverse(digits)\n      \
    \      digits = reverse(digits)\n            digits = reverse(digits)\n      \
    \      digits = reverse(digits)\n            digits = reverse(digits)\n      \
    \      digits = reverse(digits)\n            digits = reverse(digits)\n      \
    \      digits = reverse(digits)\n            digits = reverse(digits)\n      \
    \      digits = reverse(digits)\n            digits = reverse(digits)\n      \
    \      digits = reverse(digits)\n            digits = reverse(digits)\n      \
    \      digits = reverse(digits)\n            digits = reverse(digits)\n      \
    \      digits = reverse(digits)\n            digits = reverse(digits)\n      \
    \      digits = reverse(digits)\n            digits = reverse(digits)\n      \
    \      digits = reverse(digits)\n            digits = reverse(digits)\n      \
    \      digits = reverse(digits)\n            digits = reverse(digits)\n      \
    \      digits = reverse(digits)\n            digits = reverse(digits)\n      \
    \      digits = reverse(digits)\n            digits = reverse(digits)\n      \
    \      digits = reverse(digits)\n            digits = reverse(digits)\n      \
    \      digits = reverse(digits)\n            digits = reverse(digits)\n      \
    \      digits = reverse(digits)\n            digits = reverse(digits)\n      \
    \      digits = reverse(digits)\n            digits = reverse(digits)\n      \
    \      digits = reverse(\nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\
    \t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234,\
    \ 2) == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmphyrc9bpl.jl:14\nin expression starting at /tmp/tmphyrc9bpl.jl:14\n"
  stdout: ''
  timestamp: 1660008737
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    quotient, remainder = div(x % base, base)\n    if\
    \ remainder == 0\n        return str(quotient)\n    elseif remainder < 0\n   \
    \     return \"0\" + change_base(quotient, base)\n    else\n        return change_base(quotient,\
    \ base) + str(remainder)\nend\n</cell>\n<code language=julia-0.5>\nchange_base(8,3)\n\
    </cell>\n<text>\nWe have now implemented a function, change_base, that converts\
    \ numerals from one base to another. This function does so by dividing the number\
    \ by the base and taking the quotient and remainder of that. The remainder is\
    \ then checked to be 0, to determine whether the quotient was whole or not. If\
    \ so, the number is returned as the string representation of the quotient. If\
    \ not, the remainder is added to the string \"0\". This is repeated until a whole\
    \ number is found, and then the string representation of the number in the base\
    \ is returned.\nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\t@test(candidate(8,\
    \ 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2)\
    \ == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpm3la_1yl.jl:20\nin expression starting at\
    \ /tmp/tmpm3la_1yl.jl:20\n"
  stdout: ''
  timestamp: 1660008737
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base == 10\n        return toString(x)\n    elseif\
    \ base > 10\n        return toString_base(x.abs(), base)\n    elseif base < 0\n\
    \        return toString_base(-x, -base)\n    else\n        return toString_base(x,\
    \ base)\n    end\nend\n</cell>\n<code language=julia-1.4>\n# change base to base\
    \ of x\nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\t@test(candidate(8,\
    \ 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2)\
    \ == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppqhvgbmw.jl:22\nin expression starting at\
    \ /tmp/tmppqhvgbmw.jl:22\n"
  stdout: ''
  timestamp: 1660008737
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if x mod base == 0 then return x else \n        return\
    \ change_base(x div base, base) \nend \nchange_base(1,2)\nchange_base(10,2)\n\
    change_base(10,3)\nchange_base(10,4)\nchange_base(10,5)\nchange_base(10,6)\nchange_base(10,7)\n\
    change_base(10,8)\nchange_base(10,9)\nchange_base(10,10)\nchange_base(10,11)\n\
    change_base(10,12)\nchange_base(10,13)\nchange_base(10,14)\nchange_base(10,15)\n\
    change_base(10,16)\nchange_base(10,17)\nchange_base(10,18)\nchange_base(10,19)\n\
    change_base(10,20)\nchange_base(10,21)\nchange_base(10,22)\nchange_base(10,23)\n\
    change_base(10,24)\nchange_base(10,25)\nchange_base(10,26)\nchange_base(10,27)\n\
    change_base(10,28)\nchange_base(10,29)\nchange_base(10,30)\nchange_base(10,31)\n\
    change_base(10,32)\nchange_base(10,33)\nchange_base(10,34)\nchange_base(10,35)\n\
    change_base(10,36)\nchange_base(10,37)\nchange_base(10,38)\nchange_base(10,39)\n\
    change_base(10,40)\nchange_base(10,41)\nchange_base(10,42)\nchange_base(10,43)\n\
    change_base(10,44)\nchange_base(10,45)\nchange_base(10,46)\nchange_base(10,47)\n\
    change_base(10,48)\nchange_base(10,49)\nchange_base(10,50)\nchange_base(10,51)\n\
    change_base(10,52)\nchange_base(10,53)\nchange_base(10,54)\nchange_base(10,55)\n\
    change_base(10,56)\nchange_base(10,57)\nchange_base(10,58)\nchange_base(10,59)\n\
    change_base(10,60)\nchange_base(10,61)\nchange_base(10,62)\nchange_base(10,63)\n\
    change_base(10,64)\nchange_base(10,65)\nchange_base(10,66)\nchange_base(10,67)\n\
    change_base(10,68)\nchange_base(10,69)\nchange_base(10,70)\nchange_base(10,71)\n\
    change_base(10,72)\nchange_base(10,73)\nchange_base(10,74)\nchange_base(10,75)\n\
    change_base(10,76)\nchange_base(10,77)\nchange_base(10,78)\nchange_base(10,79)\n\
    change_base(10,80)\nchange_base(10,81)\nchange_base(10,82)\nchange_base(10,83)\n\
    change_base(10,84)\nchange_base(10,85)\nchange_base(10,86)\nchange_base(10,87)\n\
    \nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\t@test(candidate(8,\
    \ 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2)\
    \ == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"base\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpcwhr04in.jl:12\nin expression starting at /tmp/tmpcwhr04in.jl:12\n"
  stdout: ''
  timestamp: 1660008737
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base == 10\n        return str((x.toInt/10).floor())\n\
    \    elseif base == 8\n        return str((x.toInt/8).floor())\n    elseif base\
    \ == 6\n        return str((x.toInt/6).floor())\n    elseif base == 5\n      \
    \  return str((x.toInt/5).floor())\n    elseif base == 4\n        return str((x.toInt/4).floor())\n\
    \    elseif base == 3\n        return str((x.toInt/3).floor())\n    elseif base\
    \ == 2\n        return str((x.toInt/2).floor())\n    else\n        error(\"base\
    \ must be between 2 and 16\")\nend\n</code>\n<|/ a dscore=3 |>\n<| a dscore=3\
    \ tags=julia,decimal |>\nIn addition to the other answers.\nThe decimal package\
    \ is a core package in Julia that is probably the most comprehensive and well\
    \ maintained package to deal with floating point numbers (even if you need to\
    \ work with floating point numbers in general).\nTo get this packages installed,\
    \ run the following command in the terminal:\n<code>\nPkg.add(\"Decimal\")\n</code>\n\
    To use the Decimal, import it using\n<code>\nusing Decimal\n</code>\nThen you\
    \ can use the decimal_float method to perform any operation on the floating decimal\
    \ numbers. For example:\n<code>\njulia> x = Decimal.decimal_float(1.22)\nDecimal(\"\
    1.22\")\nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\t@test(candidate(8,\
    \ 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2)\
    \ == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9jmgzz3r.jl:29\nin expression starting at\
    \ /tmp/tmp9jmgzz3r.jl:29\n"
  stdout: ''
  timestamp: 1660008737
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if x < base\n        convert(x, base)\n    elseif\
    \ base < 10\n        base = 10\n        convert(x, base)\n    end\n    return\
    \ convert(x, base)\nend\nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\
    \t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234,\
    \ 2) == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 12 errored,
    0 broken.

    in expression starting at /tmp/tmp4gnpur2d.jl:22

    '
  stdout: "test set: Error During Test at /tmp/tmp4gnpur2d.jl:25\n  Test threw exception\n\
    \  Expression: candidate(8, 3) == \"22\"\n  MethodError: First argument to `convert`\
    \ must be a Type, got 8\n  Stacktrace:\n   [1] change_base(x::Int64, base::Int64)\n\
    \     @ Main /tmp/tmp4gnpur2d.jl:16\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp4gnpur2d.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp4gnpur2d.jl:24\ntest set:\
    \ Error During Test at /tmp/tmp4gnpur2d.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(9, 3) == \"100\"\n  MethodError: First argument to `convert` must\
    \ be a Type, got 9\n  Stacktrace:\n   [1] change_base(x::Int64, base::Int64)\n\
    \     @ Main /tmp/tmp4gnpur2d.jl:16\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp4gnpur2d.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp4gnpur2d.jl:24\ntest set:\
    \ Error During Test at /tmp/tmp4gnpur2d.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(234, 2) == \"11101010\"\n  MethodError: First argument to `convert`\
    \ must be a Type, got 234\n  Stacktrace:\n   [1] change_base(x::Int64, base::Int64)\n\
    \     @ Main /tmp/tmp4gnpur2d.jl:16\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp4gnpur2d.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp4gnpur2d.jl:24\ntest set:\
    \ Error During Test at /tmp/tmp4gnpur2d.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(16, 2) == \"10000\"\n  MethodError: First argument to `convert` must\
    \ be a Type, got 16\n  Stacktrace:\n   [1] change_base(x::Int6"
  timestamp: 1660008740
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 2 \n        error \"base must be less than\
    \ 10\"\n    end\n    str = toString(x)\n    if base == 10 \n        return str\n\
    \    end\n    digits = split(str, \"\")\n    rest = digits[end-1]\n    rest2 =\
    \ digits[end-2]\n    if rest == \"\"\n        digits[end-1] = \"0\"\n    end\n\
    \    if rest2 != \"\" \n        digits[end-2] = rest2\n    end\n    digits[end]\
    \ = getDigit(base, digits[end]) - 1\n    str = join(digits, \"\")\n    return\
    \ str\nend\n</code>\n<|/ a tags=julia |>\n<| c |>\nThanks this is pretty awesome\
    \ but now I'm getting \"MethodError: no method matching setindex!(::Array{Int64,1},\
    \ ::Int64, ::Int64)\nClosest candidates are:\n  setindex!(::Array{Int64,1}, ::Int64,\
    \ ::Array{Int64,1}) at /Users/dawiddy/.julia/v0.6/Arrays/src/index.jl:80\"\n<|/\
    \ c |>\n<| c |>\nAh yes, I forgot to convert the string to Int64 again. Give me\
    \ a minute.\n<|/ c |>\n<| c |>\nOkay, I edited my answer, I added a function that\
    \ returns an array with just the digits of a given number\n<|/ c |>\n<| c |>\n\
    Thanks again dawiddy, the method seems to be working but now I'm getting the error:\
    \ \"UndefVarError: x not defined\" for the first line of the function. Any ideas\
    \ what I'm doing wrong?\n<|/ c |>\n<| c |>\nI edited my post and added a version\
    \ of the function that I used to extract the digits of a given number\n<|/ c |>\n\
    <| a |>\nOne of the ways to approach the problem is to split the string into an\
    \ array and then construct a new string.\nIn Julia we can use split function,\
    \ which splits a string into an array on the character passed as argument. \n\
    In general the split function can be called with the following arguments:\nusing\
    \ Test\n\n@testset begin\n\ncandidate = change_base;\n\t@test(candidate(8, 3)\
    \ == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2) ==\
    \ \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"\"\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpv6i6wtnk.jl:13\nin expression starting at /tmp/tmpv6i6wtnk.jl:13\n"
  stdout: ''
  timestamp: 1660008737
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base == 10 \n        then return (tostring(x::Int64))\n\
    \    elif base < 10 \n        then return (tostring(x::Int64)::change_base(base-1))\n\
    \    elif base == 8 \n        then return (tostring(x::Int64)::change_base(base-1)::digits(4))\n\
    \    else \n        then return (tostring(x::Int64)::change_base(base-1)::digits(2))\n\
    end\n</code>\nThe function above has some problems though, for one, it does not\
    \ work for negative numbers and for two, it does not work for numbers larger than\
    \ 64bits, as I said before, I'm still looking for a way around this, but hopefully\
    \ this can help.\n<|/ a tags=julia,type-conversion,string |>\n<| a tags=julia,type-conversion,string\
    \ |>\nA bit late to the party, but I wanted to offer an answer that uses StringUtils.digits.\
    \ I found it to be a little more succinct and more readable than the one provided\
    \ by-harris.\n<code>\nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\
    \t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234,\
    \ 2) == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpvz9t6ide.jl:13\nin expression starting at /tmp/tmpvz9t6ide.jl:13\n"
  stdout: ''
  timestamp: 1660008737
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base<2 or base>36 \n        return \"\"\n    ending\
    \ = digits(x::Int64) \n    digits = digits(base::Int64) \n    digits = digits[ending-3:end]\n\
    \    digits = digits[digits-1] + digits[end-1]\n    digits = digits[digits-(digits-1)+1]\n\
    \    digits = digits[digits-1] + digits[end-1]\n    digits = digits[digits-(digits-1)+1]\n\
    \    digits = digits[digits-(digits-1)+1]\n    digits = digits[digits-1] + digits[end-1]\n\
    \    digits = digits[digits-(digits-1)+1]\n    digits = digits[digits-(digits-1)+1]\n\
    \    digits = digits[digits-(digits-1)+1]\n    digits = digits[digits-(digits-1)+1]\n\
    \    return digits\nend\n</cell>\n<code language=julia-1.1>\n\"\"\"Return remainder\
    \ of x / y.\"\"\"\nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\t\
    @test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234,\
    \ 2) == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"base\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp6vvhhbmz.jl:12\nin expression starting at /tmp/tmp6vvhhbmz.jl:12\n"
  stdout: ''
  timestamp: 1660008737
- exit_code: 1
  program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 2\n        base = 10\n    else if base\
    \ > 6\n        base = 6\n    else if base < 10\n        base = 10\n    else if\
    \ base > 10\n        base = 10\n    if base == 10\n        return string(x)\n\
    \    \n    string_rep = ''\n    while x != 0\n        x, r = divrem(x, base)\n\
    \        string_rep = string_rep + string(r)\n    end\n    return string_rep\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\t@test(candidate(8,\
    \ 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2)\
    \ == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpr8_8tksy.jl:14\nin expression starting at\
    \ /tmp/tmpr8_8tksy.jl:14\n"
  stdout: ''
  timestamp: 1660008738
