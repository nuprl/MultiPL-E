language: jl
name: HumanEval_29_filter_by_prefix
results:
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n\"\"\"\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t\
    @test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp821jq4vq.jl:1\nin expression starting at /tmp/tmp821jq4vq.jl:1\n"
  stdout: ''
  timestamp: 1659978299
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \n    for s in strings \n        if startswith(prefix, s) \n         \
    \   yield s \nend \n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"s\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpcs0d53kb.jl:11\nin expression starting at /tmp/tmpcs0d53kb.jl:11\n"
  stdout: ''
  timestamp: 1659978299
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \"\"\"Filter a vector of strings keeping only those that start with the\
    \ prefix.\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp270q_z68.jl:1\nin expression starting at /tmp/tmp270q_z68.jl:1\n"
  stdout: ''
  timestamp: 1659978299
- exit_code: -1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    strings = strings[2 .. end(strings)]\n    strings = strings[string.starts_with(prefix,\
    \ 1)]\n    return strings\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmp6u5cyaza.jl:17\n  Test threw
    exception\n  Expression: candidate(Vector{String}([]), "john") == Vector{String}([])\n  MethodError:
    objects of type Int64 are not callable\n  Maybe you forgot to use an operator
    such as *, ^, %, / etc. ?\n  Stacktrace:\n   [1] filter_by_prefix(strings::Vector{String},
    prefix::String)\n     @ Main /tmp/tmp6u5cyaza.jl:8\n   [2] macro expansion\n     @
    ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmp6u5cyaza.jl:17 [inlined]\n   [4] macro expansion\n     @
    ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmp6u5cyaza.jl:16\ntest set: Error During Test at
    /tmp/tmp6u5cyaza.jl:18\n  Test threw exception\n  Expression: candidate(["xxx",
    "asd", "xxy", "john doe", "xxxAAA", "xxx"], "xxx") == ["xxx", "xxxAAA", "xxx"]\n  MethodError:
    objects of type Int64 are not callable\n  Maybe you forgot to use an operator
    such as *, ^, %, / etc. ?\n  Stacktrace:\n   [1] filter_by_prefix(strings::Vector{String},
    prefix::String)\n     @ Main /tmp/tmp6u5cyaza.jl:8\n   [2] macro expansion\n     @
    ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmp6u5cyaza.jl:18 [inlined]\n   [4] macro expansion\n     @
    ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmp6u5cyaza.jl:16\n'''
  timestamp: 1659978301
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n  res = []\n  for str in strings\n    if startswith(str, prefix)\n      push!(res,\
    \ str)\n    end\n  end\n  return res\nend\n</cell>\n<cell>\nfilter_by_prefix([\"\
    array\", \"abc\", \"bcd\", \"cde\"], \"a\")\n</cell>\n<text>\nExercise\nWrite\
    \ a function that removes all the elements of a given vector that do not start\
    \ with a given prefix.\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_jmiw2v8.jl:16\nin expression starting at\
    \ /tmp/tmp_jmiw2v8.jl:16\n"
  stdout: ''
  timestamp: 1659978299
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \n    if strings == []\n        return strings\n    \n    pos = findfirst(prefix\
    \ in strings, 0)\n    if pos < 0\n        return strings\n    \n    begin = pos\n\
    \    end = pos + length(prefix)\n    strings = strings[begin..end]\n    \nend\n\
    </cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"=\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp__h3fv9z.jl:16\nin expression starting at /tmp/tmp__h3fv9z.jl:16\n"
  stdout: ''
  timestamp: 1659978299
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \n    for string in strings\n        if string.starts_with(prefix)\n \
    \           return string\n    end\n    return strings\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp_2d22yjl.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp_2d22yjl.jl:1\n\
    in expression starting at /tmp/tmp_2d22yjl.jl:1\n"
  stdout: ''
  timestamp: 1659978299
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    if length(prefix) == 0\n        return strings\n    end\n    \n    prefix_idx\
    \ = string.find(prefix, 1)\n    \n    if prefix_idx == 0 # only partial prefix\n\
    \        strings_with_prefix = filter_by_prefix(strings, prefix[prefix_idx+length(string):end])\n\
    \    else\n        strings_with_prefix = filter_by_prefix(strings[prefix_idx+1:end],\
    \ prefix)\n    end\n    \n    return strings_with_prefix\nend\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\"\
    , \"cde\", \"array\"], \"ab\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abcd\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"ab\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"abc\", \"\
    bcd\", \"cde\", \"array\"], \"abcd\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"acde\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"adc\")\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"acde\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"abc\", \"\
    bcd\", \"cde\", \"array\"], \"abde\")\n</cell>\n<code language=julia-1.5>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvq1p5a2w.jl:22\nin expression starting at\
    \ /tmp/tmpvq1p5a2w.jl:22\n"
  stdout: ''
  timestamp: 1659978299
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    if strings == []\n        error(\"Input is empty!\")\n    end\n    \n\
    \    prefix === strings[1] && return [] \n    prefix === strings[end] && return\
    \ strings \n    \n    idx = 0\n    while idx < length(strings)\n        if idx\
    \ != 1 && prefix == strings[1]\n            idx == 1 && return []\n        elseif\
    \ idx != length(strings) && prefix == strings[idx]\n            idx == length(strings)\
    \ && return []\n        end\n        idx += 1\n    end\n    \n    return strings\n\
    end\n</cell>\n<code language=julia-1.5>\n# test filter_by_prefix\nfilter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nPart 2 - The filter\
    \ and map functions\nIn this section, we will show how to use the functions filter\
    \ and map. They are very useful in Julia. First, we will see the examples for\
    \ filter, which takes a predicate function and returns a new vector, while map\
    \ applies a function to all the elements of a vector. In Julia, filter will return\
    \ a new vector, while map will alter the original vector.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpniooo32b.jl:27\nin expression starting at\
    \ /tmp/tmpniooo32b.jl:27\n"
  stdout: ''
  timestamp: 1659978299
- exit_code: -1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    prefix_filter = startswith(strings, prefix)\n    return filter(prefix_filter,\
    \ strings)\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmp2zszbulc.jl:16\n'''
  timestamp: 1659978301
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    map(x -> startswith(x, prefix), strings)\nend\n</cell>\n<text>\nThe filter_by_suffix\
    \ function allows you to filter an input vector of strings only for ones that\
    \ end with a given suffix.\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpl11hhn83.jl:10\nin expression starting at\
    \ /tmp/tmpl11hhn83.jl:10\n"
  stdout: ''
  timestamp: 1659978299
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    if starts_with(prefix, strings[1])\n        return strings\n    else\n\
    \        return filter_by_prefix(strings, prefix)\nend\n</cell>\n<text>\nAnd now\
    \ we can write our own function and apply it to our array of strings. In a previous\
    \ exercise we had a pretty short array, so we were doing something more iterative\
    \ than we should. We could do this, but what if we had a long array of strings\
    \ and we wanted to find the longest prefix? In that case, we should probably use\
    \ the iterative version!\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpha6kd6m8.jl:13\nin expression starting at\
    \ /tmp/tmpha6kd6m8.jl:13\n"
  stdout: ''
  timestamp: 1659978299
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    if length(strings) == 0\n        return strings\n    \n    idx = 1\n \
    \   while idx <= length(strings)\n        if strings[idx-1] == prefix\n      \
    \      idx += 1\n        else\n            idx += 2\n        end\n    end\nusing\
    \ Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpx992i76u.jl:1\nin expression starting at /tmp/tmpx992i76u.jl:1\n"
  stdout: ''
  timestamp: 1659978299
- exit_code: -1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \"\"\"\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\"\n    strings = map(i->prefix+i,\
    \ strings)\n    return filter(x -> starts_with(x, prefix), strings)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: '''
  timestamp: 1659978301
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    if length(strings) < 1 || length(strings) > 1\n        error(\"Strings\
    \ must have length at least 2\")\n    end\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpak2qm2cg.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpak2qm2cg.jl:1\n\
    in expression starting at /tmp/tmpak2qm2cg.jl:1\n"
  stdout: ''
  timestamp: 1659978299
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    matches = filter(x -> startswith(x, prefix), strings)\n    if length(strings)==length(matches)\
    \ \n        return matches\n    else \n        return filter(x -> !startswith(x,\
    \ prefix), strings)\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp_k98s1ed.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp_k98s1ed.jl:1\n\
    in expression starting at /tmp/tmp_k98s1ed.jl:1\n"
  stdout: ''
  timestamp: 1659978299
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \n    answer = []\n    for s in strings \n        if startswith(prefix,\
    \ s) \n            push!(answer, s)\n        end\n    end\n    \n    return answer\n\
    end\n</cell>\n<text>\nExercise\nWrite a version of the filter_by_prefix function\
    \ that takes a keyword argument for the prefix and removes strings that don't\
    \ start with the prefix. For example, calling filter_by_prefix([\"a\", \"b\",\
    \ \"c\", \"d\"], \"a\") would return [\"b\", \"c\"].\nusing Test\n\n@testset begin\n\
    \ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\"\
    ) == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpy6gc6uci.jl:18\nin expression starting at\
    \ /tmp/tmpy6gc6uci.jl:18\n"
  stdout: ''
  timestamp: 1659978299
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    string_len = length(prefix)\n    vec_of_strings = strings[:]\n    for\
    \ string in vec_of_strings:\n        if startswith(string, prefix)\n         \
    \   vec_of_strings = remove(vec_of_strings, string)\n        else\n          \
    \  continue\n        end\n    end\n    return vec_of_strings\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphd0kkirw.jl:11\nin expression starting at\
    \ /tmp/tmphd0kkirw.jl:11\n"
  stdout: ''
  timestamp: 1659978299
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    filtered = filter(x -> startswith(prefix, x), strings)\n    if isempty(filtered)\n\
    \        return strings\n    else\n        return filtered\n    end\nend\n</cell>\n\
    <code language=julia-1.4>\n#export\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpi79rhsp4.jl:15\nin expression starting at\
    \ /tmp/tmpi79rhsp4.jl:15\n"
  stdout: ''
  timestamp: 1659978299
- exit_code: -1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    strings = map(x -> startswith(prefix, x) ? x : [], strings)\n    return\
    \ strings\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659978301
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    prefix match {\n        case Prefix(prefix, rest) -> filter(startswith(rest,\
    \ prefix), strings)\n        case prefix -> filter(startswith(strings, prefix),\
    \ strings)\n    }\nend\n</cell>\n<text>\n6. String search\n6.1 String search\n\
    There are several built-in functions in Julia for searching strings. Some of these\
    \ are more efficient than others, and we will explore each of these in more detail\
    \ in the next section.\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"function\" at /tmp/tmp0yalf6fi.jl:7 expected\
    \ \"end\", got \"match\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp0yalf6fi.jl:8\n\
    in expression starting at /tmp/tmp0yalf6fi.jl:8\n"
  stdout: ''
  timestamp: 1659978299
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    if strings.length <= 0\n        return []\n    if prefix == \"\"\n   \
    \     return strings\n    \n    prefix_idx = 0\n    for idx in 1:length(strings)\n\
    \        if strings[idx][0] == prefix\n            return strings[prefix_idx:idx]\n\
    \        prefix_idx = idx\n    end\n    return strings\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"for\" at /tmp/tmp0x2gygo1.jl:14\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp0x2gygo1.jl:1\n\
    in expression starting at /tmp/tmp0x2gygo1.jl:1\n"
  stdout: ''
  timestamp: 1659978299
- exit_code: -1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    return filter_by_prefix_helper(strings, prefix, \"\")\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: Timeout
  stderr: 'b''ERROR: LoadError: '''
  stdout: 'b''test set: Error During Test at /tmp/tmpxm7rk4nz.jl:15\n  Test threw
    exception\n  Expression: candidate(Vector{String}([]), "john") == Vector{String}([])\n  UndefVarError:
    filter_by_prefix_helper not defined\n  Stacktrace:\n   [1] filter_by_prefix(strings::Vector{String},
    prefix::String)\n     @ Main /tmp/tmpxm7rk4nz.jl:8\n   [2] macro expansion\n     @
    ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmpxm7rk4nz.jl:15 [inlined]\n   [4] macro expansion\n     @
    ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmpxm7rk4nz.jl:14\ntest set: Error During Test at
    /tmp/tmpxm7rk4nz.jl:16\n  Test threw exception\n  Expression: candidate(["xxx",
    "asd", "xxy", "john doe", "xxxAAA", "xxx"], "xxx") == ["xxx", "xxxAAA", "xxx"]\n  UndefVarError:
    filter_by_prefix_helper not defined\n  Stacktrace:\n   [1] filter_by_prefix(strings::Vector{String},
    prefix::String)\n     @ Main /tmp/tmpxm7rk4nz.jl:8\n   [2] macro expansion\n     @
    ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmpxm7rk4nz.jl:16 [inlined]\n   [4] macro expansion\n     @
    ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmpxm7rk4nz.jl:14\nTest Summary: | Error  Total\ntest
    set      |     2      2\n'''
  timestamp: 1659978301
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    if length(prefix) == 0\n        return strings\n    \n    result = []\n\
    \    for s in strings\n        if startswith(s,prefix)\n            push!(result,s)\n\
    \        end\n    end\n    return result\nend\n</cell>\n<code language=julia-1.2>\n\
    filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<code\
    \ language=julia-1.2>\n\"\"\"\n    Return a list of all strings that start with\
    \ the given prefix.\n    \n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\"\
    , \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \n    >>> filter_by_prefix([\"\
    a\",\"a\",\"b\"], \"a\")\n    []\n    \n    >>> filter_by_prefix([\"array\", \"\
    bcd\", \"cde\", \"array\"], \"a\")\n    [\"array\"]\n    \n    >>> filter_by_prefix([\"\
    cde\", \"bcd\", \"array\"], \"a\")\n    []\n    \n    Only the first occurrence\
    \ is kept.\n    \n    If you have duplicate entries, the first one encountered\
    \ is kept.\n    \n    >>> filter_by_prefix([\"bcd\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n    [\"bcd\"]\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_5nrh2xl.jl:19\nin expression starting at\
    \ /tmp/tmp_5nrh2xl.jl:19\n"
  stdout: ''
  timestamp: 1659978302
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    if length(prefix) == 0\n        return strings\n    else\n        \n \
    \       index = find(startswith(strings, prefix), 1) # find first substring that\
    \ starts with prefix\n        if index == 1\n            return strings\n    \
    \    else\n            prefix = prefix[1:] # remove prefix from substring \n \
    \           strings = strings[index+1:end] # remove prefix from rest\n       \
    \     return filter_by_prefix(strings, prefix) # continue iteratively applying\
    \ recursively\n        end\n    end\nend\n</cell>\n<code language=julia-1.0>\n\
    # filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\") # ERROR!\nfilter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"ab\")\n</cell>\n<text>\nFilter out strings\
    \ that end with a given suffix\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"1:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpnxc32r0u.jl:16\nin expression\
    \ starting at /tmp/tmpnxc32r0u.jl:16\n"
  stdout: ''
  timestamp: 1659978301
- exit_code: -1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \"\"\"Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\n    prefixes = map(str_to_prefix, strings)\n    prefixes = prefixes |> Set()\n\
    \    return filter(x->startswith(prefix, x), prefixes)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: Timeout
  stderr: 'b''ERROR: LoadError: '''
  stdout: 'b''test set: Error During Test at /tmp/tmpa5qsdri4.jl:23\n  Test threw
    exception\n  Expression: candidate(Vector{String}([]), "john") == Vector{String}([])\n  UndefVarError:
    str_to_prefix not defined\n  Stacktrace:\n   [1] filter_by_prefix(strings::Vector{String},
    prefix::String)\n     @ Main /tmp/tmpa5qsdri4.jl:14\n   [2] macro expansion\n     @
    ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmpa5qsdri4.jl:23 [inlined]\n   [4] macro expansion\n     @
    ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmpa5qsdri4.jl:22\ntest set: Error During Test at
    /tmp/tmpa5qsdri4.jl:24\n  Test threw exception\n  Expression: candidate(["xxx",
    "asd", "xxy", "john doe", "xxxAAA", "xxx"], "xxx") == ["xxx", "xxxAAA", "xxx"]\n  UndefVarError:
    str_to_prefix not defined\n  Stacktrace:\n   [1] filter_by_prefix(strings::Vector{String},
    prefix::String)\n     @ Main /tmp/tmpa5qsdri4.jl:14\n   [2] macro expansion\n     @
    ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmpa5qsdri4.jl:24 [inlined]\n   [4] macro expansion\n     @
    ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmpa5qsdri4.jl:22\nTest Summary: | Error  Total\ntest
    set      |     2      2\n'''
  timestamp: 1659978304
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \n    if length(strings) == 0 || prefix == \"\"\n        return strings\n\
    \    ends_with_prefix = ends_with(prefix, strings)\n    if ends_with_prefix\n\
    \        return filter_by_prefix(drop(ends_with_prefix, 1), prefix, strings)\n\
    \    ends_with_prefix_in_first_string = ends_with_prefix in strings[1 : length(ends_with_prefix)]\n\
    \    if ends_with_prefix_in_first_string\n        return filter_by_prefix(drop(strings[1\
    \ : ends_with_prefix_in_first_string + 1], 1), prefix, strings)\n    ends_with_prefix_in_all_strings\
    \ = ends_with_prefix in strings\n    if ends_with_prefix_in_all_strings\n    \
    \    return filter_by_prefix(drop(strings, 1), prefix, strings)\n    ends_with_prefix_in_any_string\
    \ = any(ends_with_prefix in string for string in strings)\n    if ends_with_prefix_in_any_string\n\
    \        return filter_by_prefix(drop(strings, 1), prefix, strings)\n    ends_with_prefix_in_all_strings_or_empty\
    \ = ends_with_prefix_in_all_strings or length(drop(strings, 1)) == 0\n    if ends_with_prefix_in_all_strings_or_empty\n\
    \        return strings\n    ends_with_prefix_in_any_string_or_empty = any(ends_with_prefix\
    \ in string for string in drop(strings, 1))\n    if ends_with_prefix_in_any_string_or_empty\n\
    \        return strings\n    else\n        return strings\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"or\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpixwv1d2z.jl:23\nin expression starting at /tmp/tmpixwv1d2z.jl:23\n"
  stdout: ''
  timestamp: 1659978301
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    filtered = filter((x) -> startswith(x, prefix), strings)\n    if length(filtered)\
    \ == 0 \n        throw(ArgumentError(\"String does not start with prefix: $prefix\"\
    ))\n    end\n    return filtered\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmpwb15w7_x.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmpwb15w7_x.jl:19\n  Test threw exception\n\
    \  Expression: candidate(Vector{String}([]), \"john\") == Vector{String}([])\n\
    \  ArgumentError: String does not start with prefix: john\n  Stacktrace:\n   [1]\
    \ filter_by_prefix(strings::Vector{String}, prefix::String)\n     @ Main /tmp/tmpwb15w7_x.jl:10\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwb15w7_x.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwb15w7_x.jl:18\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    1      1      2\n"
  timestamp: 1659978304
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    if length(prefix) == 0 || length(prefix) > length(prefix[2:end]) || prefix[2:end]\
    \ ~= prefix\n        throw(ArgumentError(\"invalid prefix: $prefix\"))\n    end\n\
    \    filter!(strings, x -> startswith(prefix, x))\nend\n</cell>\n<text>\nfilter_by_prefix!\
    \ accepts an input vector of strings, an optional prefix string and a function\
    \ as the last argument. In the function body we call filter! and then return all\
    \ the strings that match the prefix.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprtrtjeja.jl:13\nin expression starting at\
    \ /tmp/tmprtrtjeja.jl:13\n"
  stdout: ''
  timestamp: 1659978302
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    filtered_strings = filter(x->startswith(x,prefix), strings)\n    if isempty(filtered_strings)\n\
    \        return strings\n    else\n        return filtered_strings\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjp5qmc8p.jl:15\nin expression starting at\
    \ /tmp/tmpjp5qmc8p.jl:15\n"
  stdout: ''
  timestamp: 1659978302
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    strings = [\n        i for i in strings if \n        startswithprefix(i,\
    \ prefix)\n    ]\n    return strings\nend\n</cell>\n<code language=julia-0.4>\n\
    filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<code\
    \ language=julia-0.4>\nfilter_by_prefix(collect(strings), \"a\")\n</cell>\n<code\
    \ language=julia-0.4>\nfilter_by_prefix(collect(strings), \"A\")\n</cell>\n<text>\n\
    The prefix function will accept a prefix as a String or as a vector of Strings.\
    \ If the prefix is a vector, all strings contained in it will be returned.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp72lw4uek.jl:14\nin expression starting at\
    \ /tmp/tmp72lw4uek.jl:14\n"
  stdout: ''
  timestamp: 1659978302
- exit_code: -1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    if prefix != \"\" && prefix in strings\n        indices_to_keep = findall(str\
    \ -> str == prefix, strings)\n        new_strings = filter!(str -> !indices_to_keep.contains(contains(str,\
    \ prefix)), strings)\n        return new_strings\n    end\n    strings\nend\n\
    using Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: Timeout
  stderr: 'b''ERROR: LoadError: '''
  stdout: 'b''test set: Error During Test at /tmp/tmp3n8whxsr.jl:21\n  Test threw
    exception\n  Expression: candidate(["xxx", "asd", "xxy", "john doe", "xxxAAA",
    "xxx"], "xxx") == ["xxx", "xxxAAA", "xxx"]\n  type Array has no field contains\n  Stacktrace:\n   [1]
    getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] (::var"#2#4"{String, Vector{Int64}})(str::String)\n     @
    Main /tmp/tmp3n8whxsr.jl:10\n   [3] filter!(f::var"#2#4"{String, Vector{Int64}},
    a::Vector{String})\n     @ Base ./array.jl:2529\n   [4] filter_by_prefix(strings::Vector{String},
    prefix::String)\n     @ Main /tmp/tmp3n8whxsr.jl:10\n   [5] macro expansion\n     @
    ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [6]
    macro expansion\n     @ /tmp/tmp3n8whxsr.jl:21 [inlined]\n   [7] macro expansion\n     @
    ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [8]
    top-level scope\n     @ /tmp/tmp3n8whxsr.jl:19\nTest Summary: | Pass  Error  Total\ntest
    set      |    1      1      2\n'''
  timestamp: 1659978304
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n        \n    for string in strings \n        if string.starts_with!(prefix)\
    \ \n            return string \n    end\nend\n</code>\n<|/ a |>\n<| a dscore=0\
    \ |>\n<code>\n# Filtering out the array elements starting with the character passed\
    \ as a parameter to the function.\n# If the character passed as a parameter is\
    \ not present in the string then the function will return an empty array. \nusing\
    \ Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpafuazaia.jl:14\nin expression starting at\
    \ /tmp/tmpafuazaia.jl:14\n"
  stdout: ''
  timestamp: 1659978302
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    filter!(x -> startswith(prefix, x), strings)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpa2eryoef.jl:12

    '
  stdout: "test set: Test Failed at /tmp/tmpa2eryoef.jl:16\n  Expression: candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]\n   Evaluated: [\"xxx\", \"xxx\"] == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpa2eryoef.jl:16 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpa2eryoef.jl:14\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     1      2\n"
  timestamp: 1659978303
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    matches = map(string -> startswith(string, prefix), strings)\n    strings\
    \ = filter(matches -> length(matches) >= 1, strings)\n    return strings\nend\n\
    using Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp4o6wi_se.jl:14

    '
  stdout: "test set: Test Failed at /tmp/tmp4o6wi_se.jl:18\n  Expression: candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]\n   Evaluated: [\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"] == [\"xxx\", \"xxxAAA\", \"xxx\"]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4o6wi_se.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4o6wi_se.jl:16\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     1      2\n"
  timestamp: 1659978303
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    if prefix not in map(str, strings)\n        return strings\n    else\n\
    \        start = filter(x -> startswith(x, prefix), strings)\n        return start\n\
    \    end\nend\n</cell>\n<code language=julia-0.5>\nfilter_by_prefix([\"abc\",\
    \ \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpv44woclb.jl:15\nin expression starting at\
    \ /tmp/tmpv44woclb.jl:15\n"
  stdout: ''
  timestamp: 1659978302
- exit_code: -1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    # Make sure that the prefix is prepended to each string in the list \n\
    \    new_strings = map(prepend!(prefix, string), strings)\n    # Return an vector\
    \ with the filtered strings\n    return new_strings\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmp721atlwt.jl:18\n  Test threw
    exception\n  Expression: candidate(Vector{String}([]), "john") == Vector{String}([])\n  MethodError:
    no method matching prepend!(::String, ::typeof(string))\n  Closest candidates
    are:\n    prepend!(!Matched::BitVector, ::Any) at ~/.conda/envs/polyglot/share/julia/base/bitarray.jl:802\n    prepend!(!Matched::Vector,
    ::Any) at ~/.conda/envs/polyglot/share/julia/base/array.jl:1115\n    prepend!(!Matched::AbstractVector,
    ::Any...) at ~/.conda/envs/polyglot/share/julia/base/array.jl:1118\n  Stacktrace:\n   [1]
    filter_by_prefix(strings::Vector{String}, prefix::String)\n     @ Main /tmp/tmp721atlwt.jl:9\n   [2]
    macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmp721atlwt.jl:18 [inlined]\n   [4]
    macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmp721atlwt.jl:17\n'''
  timestamp: 1659978304
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n        prefix = prefix[1:end-1]\n        filtered_strings = filter(elem ->\
    \ elem == prefix, strings)\n        return filtered_strings\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpz28nlgt5.jl:14

    '
  stdout: "test set: Test Failed at /tmp/tmpz28nlgt5.jl:18\n  Expression: candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]\n   Evaluated: String[] == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpz28nlgt5.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpz28nlgt5.jl:16\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     1      2\n"
  timestamp: 1659978303
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    for i in (1:length(strings))\n        if strings[i] == prefix || strings[i]\
    \ == '*'\n            delete!(strings, i)\n        else\n        end\n    end\n\
    \    return strings\nend\n</cell>\n<code language=julia-1.0>\nfilter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nWe can also add\
    \ wildcards ('*') to our filters. We will add this functionality to a function\
    \ we will call filter_by_wildcard later.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptv08dd5d.jl:16\nin expression starting at\
    \ /tmp/tmptv08dd5d.jl:16\n"
  stdout: ''
  timestamp: 1659978302
- exit_code: 0
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    if prefix == \"\"\n        strings\n    else\n        filter(x -> startswith(x,\
    \ prefix), strings)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    2      2

    '
  stdout: ''
  timestamp: 1659978300
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \n    for x in strings \n        if x.startsWith(prefix)\n           \
    \ push!(strings, x)\n        end\n    end\n    strings\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_prefix([\"a1\", \"bcd\", \"cde\"], \"a\")\n</cell>\n\
    <text>\nExercise 3\nDefine a function filter_substrings(strings::Vector{String},\
    \ substring::String)::Vector{String} that filters strings by whether they contain\
    \ all of the substring. For example, filter_substrings([\"abc\", \"bcd\", \"cde\"\
    , \"array\"], \"a\") should return [\"abc\", \"array\"]. Note that \"bcd\" is\
    \ not part of the result because \"bcd\" does not contain \"a\".\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpb_cb7v3o.jl:16\nin expression starting at\
    \ /tmp/tmpb_cb7v3o.jl:16\n"
  stdout: ''
  timestamp: 1659978302
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \n    if length(strings)<=1\n        return strings\n    end\n    \n \
    \   prefix_length = length(prefix)\n    \n    filtered = copy(strings)\n    for\
    \ string in strings \n        if string[1:prefix_length] == prefix \n        \
    \    push!(filtered, string)\n        end\n    end\n    \n    return filtered\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp_bycda7v.jl:26

    '
  stdout: "test set: Test Failed at /tmp/tmp_bycda7v.jl:30\n  Expression: candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]\n   Evaluated: [\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\", \"xxx\", \"xxxAAA\", \"xxx\"] == [\"xxx\", \"xxxAAA\",\
    \ \"xxx\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_bycda7v.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_bycda7v.jl:28\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     1      2\n"
  timestamp: 1659978304
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    matches = filter((x -> starts_with(x, prefix)), strings)\n    lengths\
    \ = map(length, matches)\n    max_index = get_max_index(lengths)\n    substrings\
    \ = map(x->strings[max_index], matches)\n    return substrings\nend\n</cell>\n\
    <text>\n6. Optional Filters\nThe optional filter is useful for filtering out unwanted\
    \ elements. For example, we can filter the optional list to exclude any strings\
    \ that are longer than 7 characters. We can use the length() function to get the\
    \ length of the strings, and then filter by selecting only those strings that\
    \ are longer than 7 characters.\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp468nyamk.jl:14\nin expression starting at\
    \ /tmp/tmp468nyamk.jl:14\n"
  stdout: ''
  timestamp: 1659978304
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    if prefix == \"\"\n        strings; return strings\n    endpos = size(strings)\n\
    \    i = 1;\n    while i <= endpos\n        if strings[i-1] == prefix\n      \
    \      endpos = i\n        else\n            i += 1\n        end\n    end\n  \
    \  strings[end-2 : end]\nend\n</cell>\n<code language=julia-0.4>\nfilter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nChallenge 12 (Optional)\n\
    Given two lists of strings, A and B, write a function that produces the string\
    \ that is the concatenation of A concatenated with B, separated by spaces. Use\
    \ a space character instead of a comma.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphi2kqbgo.jl:21\nin expression starting at\
    \ /tmp/tmphi2kqbgo.jl:21\n"
  stdout: ''
  timestamp: 1659978304
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \n    if isempty(strings) || isempty(prefix)\n        return strings\n\
    \    end\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp9wqagu7p.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp9wqagu7p.jl:1\n\
    in expression starting at /tmp/tmp9wqagu7p.jl:1\n"
  stdout: ''
  timestamp: 1659978304
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    if length(strings) == 0\n        return strings\n    if prefix != \"\"\
    \n        string = strings[1]\n        if string.startswith(prefix)\n        \
    \    string = strings[end-1]\n        else\n            string = strings[1]\n\
    \        end\n        strings[1] = string\n    end\n    return strings\nend\n\
    </cell>\n<text>\nFilter a vector for strings that end with a given suffix.\nThe\
    \ last element of the vector is assumed to be an empty string.\nusing Test\n\n\
    @testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdmu6nq4h.jl:21\nin expression starting at\
    \ /tmp/tmpdmu6nq4h.jl:21\n"
  stdout: ''
  timestamp: 1659978304
- exit_code: -1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \n    return ifelse(startswith(prefix, strings), strings, string)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmppvsm4bh6.jl:16\n  Test threw
    exception\n  Expression: candidate(Vector{String}([]), "john") == Vector{String}([])\n  MethodError:
    no method matching startswith(::String, ::Vector{String})\n  Closest candidates
    are:\n    startswith(::AbstractString, !Matched::Union{AbstractChar, Tuple{Vararg{AbstractChar}},
    Set{<:AbstractChar}, AbstractVector{<:AbstractChar}}) at ~/.conda/envs/polyglot/share/julia/base/strings/util.jl:25\n    startswith(::Union{SubString{String},
    String}, !Matched::Union{SubString{String}, String}) at ~/.conda/envs/polyglot/share/julia/base/strings/util.jl:48\n    startswith(::AbstractString,
    !Matched::AbstractString) at ~/.conda/envs/polyglot/share/julia/base/strings/util.jl:21\n    ...\n  Stacktrace:\n   [1]
    filter_by_prefix(strings::Vector{String}, prefix::String)\n     @ Main /tmp/tmppvsm4bh6.jl:9\n   [2]
    macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmppvsm4bh6.jl:16 [inlined]\n   [4]
    macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmppvsm4bh6.jl:15\n'''
  timestamp: 1659978306
- exit_code: -1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    filtered = filter(x->starts_with(x, prefix), strings)\n    Vector(filtered)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: Timeout
  stderr: 'b''ERROR: LoadError: '''
  stdout: 'b''test set: Error During Test at /tmp/tmpm1dgxeq3.jl:17\n  Test threw
    exception\n  Expression: candidate(["xxx", "asd", "xxy", "john doe", "xxxAAA",
    "xxx"], "xxx") == ["xxx", "xxxAAA", "xxx"]\n  UndefVarError: starts_with not defined\n  Stacktrace:\n   [1]
    (::var"#1#2"{String})(x::String)\n     @ Main /tmp/tmpm1dgxeq3.jl:8\n   [2] filter(f::var"#1#2"{String},
    a::Vector{String})\n     @ Base ./array.jl:2484\n   [3] filter_by_prefix(strings::Vector{String},
    prefix::String)\n     @ Main /tmp/tmpm1dgxeq3.jl:8\n   [4] macro expansion\n     @
    ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [5]
    macro expansion\n     @ /tmp/tmpm1dgxeq3.jl:17 [inlined]\n   [6] macro expansion\n     @
    ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [7]
    top-level scope\n     @ /tmp/tmpm1dgxeq3.jl:15\nTest Summary: | Pass  Error  Total\ntest
    set      |    1      1      2\n'''
  timestamp: 1659978307
- exit_code: -1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n  strings = [i for i in strings if i.startswith(prefix)]\n  return strings\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: Timeout
  stderr: 'b''ERROR: '''
  stdout: 'b''test set: Error During Test at /tmp/tmpz9tsd6r0.jl:17\n  Test threw
    exception\n  Expression: candidate(["xxx", "asd", "xxy", "john doe", "xxxAAA",
    "xxx"], "xxx") == ["xxx", "xxxAAA", "xxx"]\n  type String has no field startswith\n  Stacktrace:\n    [1]
    getproperty\n      @ ./Base.jl:42 [inlined]\n    [2] (::var"#1#2"{String})(i::String)\n      @
    Main ./none:0\n    [3] iterate\n      @ ./iterators.jl:447 [inlined]\n    [4]
    iterate\n      @ ./generator.jl:44 [inlined]\n    [5] grow_to!\n      @ ./array.jl:797
    [inlined]\n    [6] collect\n      @ ./array.jl:721 [inlined]\n    [7] filter_by_prefix(strings::Vector{String},
    prefix::String)\n      @ Main /tmp/tmpz9tsd6r0.jl:8\n    [8] macro expansion\n      @
    ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n    [9]
    macro expansion\n      @ /tmp/tmpz9tsd6r0.jl:17 [inlined]\n   [10] macro expansion\n      @
    ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [11]
    top-level scope\n      @ /tmp/tmpz9tsd6r0.jl:15\nTest Summary: | Pass  Error  Total\ntest
    set      |    1      1      2\n'''
  timestamp: 1659978307
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    strings = filter(x -> starts_with(x, prefix), strings)\nend\n</cell>\n\
    <code language=julia-1.4>\nfilter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n</cell>\n<code language=julia-1.4>\nfilter_by_prefix([\"abc\", \"bcd\"\
    , \"cde\", \"array\"], \"ab\")\n</cell>\n<text>\nExercise 10\nThe function filter_by_suffix\
    \ should only keep elements of a vector that end with a given suffix.\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9x_tgxyl.jl:10\nin expression starting at\
    \ /tmp/tmp9x_tgxyl.jl:10\n"
  stdout: ''
  timestamp: 1659978304
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    filter(x -> startswith(x, prefix), strings)\nend\n</cell>\n<text>\nfilter_by_suffix\n\
    Like filter_by_prefix, but for suffixes.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1oj6ywct.jl:10\nin expression starting at\
    \ /tmp/tmp1oj6ywct.jl:10\n"
  stdout: ''
  timestamp: 1659978304
- exit_code: -1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    idx = starts_with(strings, prefix)\n    strings = strings[idx]\n    return\
    \ strings\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: Timeout
  stderr: 'b''ERROR: '''
  stdout: 'b''test set: Error During Test at /tmp/tmpup97tpli.jl:17\n  Test threw
    exception\n  Expression: candidate(Vector{String}([]), "john") == Vector{String}([])\n  UndefVarError:
    starts_with not defined\n  Stacktrace:\n   [1] filter_by_prefix(strings::Vector{String},
    prefix::String)\n     @ Main /tmp/tmpup97tpli.jl:8\n   [2] macro expansion\n     @
    ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmpup97tpli.jl:17 [inlined]\n   [4] macro expansion\n     @
    ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmpup97tpli.jl:16\ntest set: Error During Test at
    /tmp/tmpup97tpli.jl:18\n  Test threw exception\n  Expression: candidate(["xxx",
    "asd", "xxy", "john doe", "xxxAAA", "xxx"], "xxx") == ["xxx", "xxxAAA", "xxx"]\n  UndefVarError:
    starts_with not defined\n  Stacktrace:\n   [1] filter_by_prefix(strings::Vector{String},
    prefix::String)\n     @ Main /tmp/tmpup97tpli.jl:8\n   [2] macro expansion\n     @
    ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmpup97tpli.jl:18 [inlined]\n   [4] macro expansion\n     @
    ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmpup97tpli.jl:16\nTest Summary: | Error  Total\ntest
    set      |     2      2\n'''
  timestamp: 1659978307
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    string_prefix = prefix::String\n    filtered = Vector{String}()\n    for\
    \ *string in strings\n        if(string_prefix != \"\" && !string.startswith(string_prefix))\n\
    \            continue\n        push!(filtered, string)\n    end\n    return filtered\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"*\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpad1kj6i2.jl:10\nin expression starting at\
    \ /tmp/tmpad1kj6i2.jl:10\n"
  stdout: ''
  timestamp: 1659978305
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    if !all(startsWith(prefix, string) for string in strings)\n        return\
    \ strings\n    \n    for string in strings \n        if startsWith(prefix, string)\
    \ || startsWith(string(length), prefix)\n            strings -= [string]\n   \
    \     end\n    end\n    strings\nend\n</cell>\n<code language=julia-1.3>\nfilter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<code language=julia-1.3>\n\
    filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<code\
    \ language=julia-1.3>\nfilter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"b\")\n</cell>\n<code language=julia-1.3>\nfilter_by_prefix([\"abc\", \"bcd\"\
    , \"cde\", \"array\"], \"a\")\n</cell>\n<code language=julia-1.3>\nusing PyCall\n\
    @pyimport torch\n@pytorch.set_num_threads(1)\nusing Test\n\n@testset begin\n\n\
    candidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\"\
    ) == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpd6zeln7s.jl:18\nin expression starting at\
    \ /tmp/tmpd6zeln7s.jl:18\n"
  stdout: ''
  timestamp: 1659978304
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    strings = strings[...]\n    for i in eachindex(strings)\n        if starts_with(strings[i],\
    \ prefix)\n            strings[i] = \"\"\n        end\n    end\n    return strings\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid identifier name \"...\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9g3yl3l0.jl:8\nin expression starting at /tmp/tmp9g3yl3l0.jl:8\n"
  stdout: ''
  timestamp: 1659978305
- exit_code: -1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \"\"\"Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    \"\"\"\n    return filter_by_prefix(strings, prefix, \"\
    \")\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpifkvpdnp.jl:17\n  Test threw
    exception\n  Expression: candidate(Vector{String}([]), "john") == Vector{String}([])\n  MethodError:
    no method matching filter_by_prefix(::Vector{String}, ::String, ::String)\n  Closest
    candidates are:\n    filter_by_prefix(::Vector{String}, ::String) at /tmp/tmpifkvpdnp.jl:7\n  Stacktrace:\n   [1]
    filter_by_prefix(strings::Vector{String}, prefix::String)\n     @ Main /tmp/tmpifkvpdnp.jl:10\n   [2]
    macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpifkvpdnp.jl:17 [inlined]\n   [4]
    macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpifkvpdnp.jl:16\n'''
  timestamp: 1659978307
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \n    prefix_length = length(prefix)\n    \n    strings = [string for\
    \ string in strings if string.starts_with(prefix)]\n    \n    if prefix_length\
    \ > 0\n        strings = filter_by_prefix(strings, prefix[prefix_length+1:end])\n\
    \    end\n    \n    return strings\nend\n</cell>\n<text>\nmap()\nApply a function\
    \ elementwise to a vector/matrix of inputs.\nusing Test\n\n@testset begin\n\n\
    candidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\"\
    ) == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcl6q9xuj.jl:19\nin expression starting at\
    \ /tmp/tmpcl6q9xuj.jl:19\n"
  stdout: ''
  timestamp: 1659978305
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    if prefix == \"\"\n        strings \n    else\n        filter(x -> starts_with(x,\
    \ prefix), strings)\n    end\nend\n</cell>\n<code language=julia-1.1>\nfilter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<code language=julia-1.1>\n\
    using Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6gghu76x.jl:14\nin expression starting at\
    \ /tmp/tmp6gghu76x.jl:14\n"
  stdout: ''
  timestamp: 1659978306
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    if is_empty(strings) || is_empty(prefix) then return strings \n    else\
    \ return strings[startswith(strings, prefix)]\nend\n</cell>\n<text>\nAnd now we\
    \ are ready to combine it all together to make our own filter_by_prefix function!\n\
    using Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpox8dm1tx.jl:8\nin expression starting at /tmp/tmpox8dm1tx.jl:8\n"
  stdout: ''
  timestamp: 1659978306
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    strings = strings.filter(s -> startswith(s, prefix))\n    return strings\n\
    end\n</cell>\n<text>\nThe following cell displays two example strings and the\
    \ new filtered one:\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpum_h_0kk.jl:11\nin expression starting at\
    \ /tmp/tmpum_h_0kk.jl:11\n"
  stdout: ''
  timestamp: 1659978306
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    # Write your code here.\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmprk_s3v7s.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmprk_s3v7s.jl:1\n\
    in expression starting at /tmp/tmprk_s3v7s.jl:1\n"
  stdout: ''
  timestamp: 1659978307
- exit_code: -1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    filtered = filter( string -> string.startsWith(prefix), strings )\n  \
    \  if length(filtered) == 0 \n        throw(string(\"No string starting with $prefix\"\
    ))\n    end\n    return filtered\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  status: Timeout
  stderr: 'b''ERROR: '''
  stdout: 'b''test set: Error During Test at /tmp/tmp00fibx3z.jl:19\n  Test threw
    exception\n  Expression: candidate(Vector{String}([]), "john") == Vector{String}([])\n  "No
    string starting with john"\n  Stacktrace:\n   [1] filter_by_prefix(strings::Vector{String},
    prefix::String)\n     @ Main /tmp/tmp00fibx3z.jl:10\n   [2] macro expansion\n     @
    ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmp00fibx3z.jl:19 [inlined]\n   [4] macro expansion\n     @
    ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmp00fibx3z.jl:18\ntest set: Error During Test at
    /tmp/tmp00fibx3z.jl:20\n  Test threw exception\n  Expression: candidate(["xxx",
    "asd", "xxy", "john doe", "xxxAAA", "xxx"], "xxx") == ["xxx", "xxxAAA", "xxx"]\n  type
    String has no field startsWith\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42
    [inlined]\n   [2] (::var"#1#2"{String})(string::String)\n     @ Main /tmp/tmp00fibx3z.jl:8\n   [3]
    filter(f::var"#1#2"{String}, a::Vector{String})\n     @ Base ./array.jl:2484\n   [4]
    filter_by_prefix(strings::Vector{String}, prefix::String)\n     @ Main /tmp/tmp00fibx3z.jl:8\n   [5]
    macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [6] macro expansion\n     @ /tmp/tmp00fibx3z.jl:20 [inlined]\n   [7]
    macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [8] top-level scope\n     @ /tmp/tmp00fibx3z.jl:18\nTest Summary:
    | Error  Total\ntest set      |     2      2\n'''
  timestamp: 1659978309
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    strings[begin(prefix) .. end(strings)] \nend\n</cell>\n<text>\n5. Combining\
    \ multiple filter functions \nWe can combine multiple filter functions using the\
    \ function filter_all that takes a vector of functions as an input. This function\
    \ returns the vector of results for each function call:\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxhfpftrb.jl:10\nin expression starting at\
    \ /tmp/tmpxhfpftrb.jl:10\n"
  stdout: ''
  timestamp: 1659978307
- exit_code: -1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    prefixes = Vector{String}()\n    for s in strings\n        if starts_with(s,\
    \ prefix)\n            push!(prefixes, s)\n        end\n    end\n    return prefixes\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: Timeout
  stderr: 'b''ERROR: '''
  stdout: 'b''test set: Error During Test at /tmp/tmpfmuf661a.jl:22\n  Test threw
    exception\n  Expression: candidate(["xxx", "asd", "xxy", "john doe", "xxxAAA",
    "xxx"], "xxx") == ["xxx", "xxxAAA", "xxx"]\n  UndefVarError: starts_with not defined\n  Stacktrace:\n   [1]
    filter_by_prefix(strings::Vector{String}, prefix::String)\n     @ Main /tmp/tmpfmuf661a.jl:10\n   [2]
    macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpfmuf661a.jl:22 [inlined]\n   [4]
    macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpfmuf661a.jl:20\nTest Summary:
    | Pass  Error  Total\ntest set      |    1      1      2\n'''
  timestamp: 1659978309
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    if prefix != \"\" && prefix != prefix[1]\n        prefix = prefix[1]\n\
    \    end\n    for i in 1 : length(strings)\n        if startswith(string(strings[i]),\
    \ prefix)\n            strings[i] = \"\"\n        end\n    end\n    return strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"\
    cde\", \"array\"], \"a\")\n</cell>\n<text>\nThe filter_by_suffix function does\
    \ the opposite: filters all strings ending with given suffix.\nusing Test\n\n\
    @testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyixg117w.jl:18\nin expression starting at\
    \ /tmp/tmpyixg117w.jl:18\n"
  stdout: ''
  timestamp: 1659978307
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \n    prefix_len = len(prefix)\n    \n    if prefix_len == 0 \n      \
    \  return strings \n    ends = zip(strings[2:end-1], strings[2:end])\n    \n \
    \   return filter((x::String) => startswith(prefix, x)) \nend\n</cell>\n<code\
    \ language=julia-1.4>\nfilter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n</cell>\n<code language=julia-1.4>\nfilter_by_prefix([\"abc\", \"bcd\"\
    , \"cde\", \"array\"], \"c\")\n</cell>\n<code language=julia-1.4>\nfilter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"bcd\")\n</cell>\n<text>\n@filter\nusing\
    \ Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpabzexeml.jl:17\nin expression starting at\
    \ /tmp/tmpabzexeml.jl:17\n"
  stdout: ''
  timestamp: 1659978307
- exit_code: -1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    if !isa(strings, Vector{String}) || length(prefix) == 0 || prefix == \"\
    \"\n        return strings\n    end\n    prefix_idx = findfirst(isequal(prefix),\
    \ strings)\n    if prefix_idx != -1\n        idx = prefix_idx\n        rem = strings[prefix_idx+length(prefix):end]\n\
    \        return filter_by_prefix(rem, prefix)\n    end\n    return strings\nend\n\
    using Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659978309
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \"\"\"Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\n    \n    strings = [s for s in strings if s.startsWith(prefix)]\n    \n \
    \   return strings\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmphgsqfn0n.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmphgsqfn0n.jl:1\n\
    in expression starting at /tmp/tmphgsqfn0n.jl:1\n"
  stdout: ''
  timestamp: 1659978307
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    prefix = lowercase(prefix)\n    result = Vector{String}()\n    for string\
    \ in strings\n        if string.startswith(prefix)\n            push!(result,\
    \ string)\n        end\n    end\n    return result\nend\n</cell>\n<text>\nExercise\
    \ 2\nWrite a filter function that filters two vectors simultaneously.\nThe first\
    \ vector will contain the strings you want to filter, the second vector will contain\
    \ the prefixes of strings you want filtered for (i.e., the vectors should have\
    \ the same length).\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqn6vhfzd.jl:17\nin expression starting at\
    \ /tmp/tmpqn6vhfzd.jl:17\n"
  stdout: ''
  timestamp: 1659978307
- exit_code: 0
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    result = Vector{String}()\n    for s in strings \n        if startswith(s,\
    \ prefix)\n            push!(result, s)\n        end\n    end\n    return result\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    2      2

    '
  stdout: ''
  timestamp: 1659978305
- exit_code: -1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    filtered_strings = Vector{String}()\n    for string in strings\n     \
    \   if string.starts_with(prefix)\n            push!(filtered_strings, string)\n\
    \        end\n    end\n    return filtered_strings\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: Timeout
  stderr: 'b''ERROR: LoadError: '''
  stdout: 'b''test set: Error During Test at /tmp/tmphrhn5urd.jl:22\n  Test threw
    exception\n  Expression: candidate(["xxx", "asd", "xxy", "john doe", "xxxAAA",
    "xxx"], "xxx") == ["xxx", "xxxAAA", "xxx"]\n  type String has no field starts_with\n  Stacktrace:\n   [1]
    getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] filter_by_prefix(strings::Vector{String},
    prefix::String)\n     @ Main /tmp/tmphrhn5urd.jl:10\n   [3] macro expansion\n     @
    ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4]
    macro expansion\n     @ /tmp/tmphrhn5urd.jl:22 [inlined]\n   [5] macro expansion\n     @
    ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6]
    top-level scope\n     @ /tmp/tmphrhn5urd.jl:20\nTest Summary: | Pass  Error  Total\ntest
    set      |    1      1      2\n'''
  timestamp: 1659978309
- exit_code: 0
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    filter!(x -> startswith(x, prefix), strings)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    2      2

    '
  stdout: ''
  timestamp: 1659978306
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    for i in eachindex(strings)\n        if prefix == strings[i][1]\n    \
    \        return strings\n    end\n    return []\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\"\
    ) == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpq3svyn2o.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpq3svyn2o.jl:1\n\
    in expression starting at /tmp/tmpq3svyn2o.jl:1\n"
  stdout: ''
  timestamp: 1659978308
- exit_code: 0
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    filter(s -> startswith(s,prefix), strings)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    2      2

    '
  stdout: ''
  timestamp: 1659978306
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    prefix <- String(prefix)\n    result = new_{T}(strings)\n    for elt in\
    \ strings\n        if startswith(elt, prefix)\n            push!(result, elt)\n\
    \        else\n            push!(result, elt)\n    end\n    return result\nend\n\
    </cell>\n<code language=julia-1.1>\nfilter_by_prefix([\"abc\", \"bcd\", \"cde\"\
    , \"array\"], \"ab\")\n</cell>\n<text>\n2. How many times an element appears in\
    \ the array?\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t\
    @test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1pwaco8_.jl:18\nin expression starting at\
    \ /tmp/tmp1pwaco8_.jl:18\n"
  stdout: ''
  timestamp: 1659978308
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    return filter(string -> starts_with(string,prefix), strings)\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpq5n_ow8k.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpq5n_ow8k.jl:1\n\
    in expression starting at /tmp/tmpq5n_ow8k.jl:1\n"
  stdout: ''
  timestamp: 1659978308
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    filter!(x -> startswith(prefix, x), strings)\nend\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that filters an array of numbers by only keeping those which\
    \ satisfy a given condition.\nFor example, the following code filters out numbers\
    \ that do not have 5 digits:\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpf5ujbrhi.jl:10\nin expression starting at\
    \ /tmp/tmpf5ujbrhi.jl:10\n"
  stdout: ''
  timestamp: 1659978308
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    to_return = Vector{String}()\n    for s in strings\n        if startswith(s,prefix)\
    \ \n            push!(to_return, s)\n        end\n    end\n    return to_return\n\
    end\n</cell>\n<code language=julia-1.5>\n# Test filter_by_prefix()\nprintln(filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\"))\nprintln(filter_by_prefix([\"ab\"\
    , \"bcd\", \"cde\", \"array\"], \"a\"))\nprintln(filter_by_prefix([\"ab\", \"\
    abc\", \"cde\", \"array\"], \"a\"))\n</cell>\n<text>\nmap()\nSimilar to an apply\
    \ function in other languages, map() transforms a function on every element of\
    \ a vector/matrix/array.\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpz19oyfi8.jl:16\nin expression starting at\
    \ /tmp/tmpz19oyfi8.jl:16\n"
  stdout: ''
  timestamp: 1659978309
- exit_code: -1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    filter_strings = map(x->startswith(x,prefix), strings) \n    filter_strings\
    \ = [str for str in filter_strings if str != \"\"]\n    return filter_strings\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659978311
- exit_code: 0
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    matcher = startswith(prefix)\n    return filter(matcher, strings)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    2      2

    '
  stdout: ''
  timestamp: 1659978307
- exit_code: -1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \"\"\"Filter a vector of strings only for those that start with a given\
    \ prefix.\n    \"\"\"\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659978311
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n        filtered = filter(x->startswith(prefix,x), strings)\n        \n  \
    \      return collect(filtered)\n    end\nend # filter_by_prefix\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"end\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpc3grmjdl.jl:12\nin expression starting at /tmp/tmpc3grmjdl.jl:12\n"
  stdout: ''
  timestamp: 1659978309
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    if length(prefix) == 0 \n        return strings \n    else \n        prefix\
    \ = prefix[1:end-1]\n    \n        filter_strings = []\n        for string in\
    \ strings \n            if string.startswith(prefix) \n                filter_strings.push(string)\
    \ \n            end \n        \n        return filter_strings\nend\n</cell>\n\
    <text>\nFilter a matrix for those rows that start with a given prefix.\nThis function\
    \ takes a matrix and a list of strings as parameters. \nIf the given prefix is\
    \ not found, it returns an empty matrix and the error message.\nIf the given prefix\
    \ is found, it filters the matrix by removing all rows that do not start with\
    \ the given prefix.\nFinally, it returns the filtered matrix and the error message.\n\
    using Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpb0lvnm9y.jl:21\nin expression starting at\
    \ /tmp/tmpb0lvnm9y.jl:21\n"
  stdout: ''
  timestamp: 1659978310
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    # filter_by_prefix(filter(startswith(prefix), \"strings\"), prefix)\n\
    \    return filter(x->startswith(prefix, x), strings)\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\n\
    Filter based on a function\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0qa2d3g0.jl:11\nin expression starting at\
    \ /tmp/tmp0qa2d3g0.jl:11\n"
  stdout: ''
  timestamp: 1659978310
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    for s in strings\n        if startswith(s, prefix)\n            push!(result,\
    \ s)\n        end\n    end\n    return result\nend\n</cell>\n<text>\nAnd again,\
    \ a function which takes in a vector of strings and a prefix and returns the vectors\
    \ of strings that are substrings of that prefix, in any order.\nusing Test\n\n\
    @testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjnelmfsr.jl:15\nin expression starting at\
    \ /tmp/tmpjnelmfsr.jl:15\n"
  stdout: ''
  timestamp: 1659978310
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    if !strings or !prefix\n        return strings\n    ends_with_prefix =\
    \ true\n    for s in strings\n        if !hasPrefix(s, prefix)\n            ends_with_prefix\
    \ = false\n            break\n        end\n    end\n    if ends_with_prefix\n\
    \        return filter(s -> !hasPrefix(s, prefix), strings)\n    else\n      \
    \  return strings\n    end\nend\n</cell>\n<code language=julia-1.5>\n@test filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\") === [\"abc\", \"array\"]\n</cell>\n\
    <text>\nfilter_by_prefix!()\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"!\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp1vaf3weu.jl:8\nin expression starting at /tmp/tmp1vaf3weu.jl:8\n"
  stdout: ''
  timestamp: 1659978310
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    if isempty(strings)\n        return strings\n    else\n        return\
    \ filter(x -> starts_with(x, prefix), strings)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<code\
    \ language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgu_q1yay.jl:14\nin expression starting at\
    \ /tmp/tmpgu_q1yay.jl:14\n"
  stdout: ''
  timestamp: 1659978310
- exit_code: 0
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    filter(x -> startswith(x, prefix), strings)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    2      2

    '
  stdout: ''
  timestamp: 1659978308
- exit_code: -1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    strings = [x for x in strings if x.startsWith(prefix)]\n    return strings\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: Timeout
  stderr: 'b''ERROR: LoadError: '''
  stdout: 'b''test set: Error During Test at /tmp/tmpf4uus7pp.jl:17\n  Test threw
    exception\n  Expression: candidate(["xxx", "asd", "xxy", "john doe", "xxxAAA",
    "xxx"], "xxx") == ["xxx", "xxxAAA", "xxx"]\n  type String has no field startsWith\n  Stacktrace:\n    [1]
    getproperty\n      @ ./Base.jl:42 [inlined]\n    [2] (::var"#1#2"{String})(x::String)\n      @
    Main ./none:0\n    [3] iterate\n      @ ./iterators.jl:447 [inlined]\n    [4]
    iterate\n      @ ./generator.jl:44 [inlined]\n    [5] grow_to!\n      @ ./array.jl:797
    [inlined]\n    [6] collect\n      @ ./array.jl:721 [inlined]\n    [7] filter_by_prefix(strings::Vector{String},
    prefix::String)\n      @ Main /tmp/tmpf4uus7pp.jl:8\n    [8] macro expansion\n      @
    ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n    [9]
    macro expansion\n      @ /tmp/tmpf4uus7pp.jl:17 [inlined]\n   [10] macro expansion\n      @
    ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [11]
    top-level scope\n      @ /tmp/tmpf4uus7pp.jl:15\nTest Summary: | Pass  Error  Total\ntest
    set      |    1      1      2\n'''
  timestamp: 1659978312
- exit_code: 0
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    strings = [s for s in strings if startswith(s,prefix)]\n    \n    return\
    \ strings\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    2      2

    '
  stdout: ''
  timestamp: 1659978308
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    return filter(x->startswith(x, prefix), strings)\nend\n</cell>\n<code\
    \ language=julia-1.5>\n# We will use this later when creating a list of input\
    \ strings to filter by.\ninput_strings = [\n    \"abc\",\n    \"bcd\",\n    \"\
    cde\",\n    \"array\"\n]\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix(input_strings,\
    \ \"a\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix(input_strings,\
    \ \"array\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix(input_strings,\
    \ \"ab\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix(input_strings,\
    \ \"abd\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix(input_strings,\
    \ \"abde\")\n</cell>\n<text>\nExercise 2\nWrite a function called filter_by_prefix_and_suffix\
    \ that takes an input vector of strings, and a prefix and suffix string, and returns\
    \ the strings in that vector that start with the prefix and end with the suffix.\
    \ For example, filter_by_prefix_and_suffix(input_strings, \"a\", \"e\") should\
    \ return [\"abc\", \"cde\"].\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmps44uue8d.jl:10\nin expression starting at\
    \ /tmp/tmps44uue8d.jl:10\n"
  stdout: ''
  timestamp: 1659978310
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    strings[prefix === strings[end]] \nend\n</cell>\n<text>\nThe filter function\
    \ has three outputs. The first is the filtered input strings. The second is the\
    \ unfiltered input strings, and finally, the output from the filter function is\
    \ a tuple with a number of elements (one for each input string) that satisfied\
    \ the filtering criteria.\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpei15ga24.jl:10\nin expression starting at\
    \ /tmp/tmpei15ga24.jl:10\n"
  stdout: ''
  timestamp: 1659978310
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    strings = filter(string -> startswith(string, prefix), strings)\n    return\
    \ strings\nend\n</cell>\n<code language=julia-0.5>\n# Example - find all of the\
    \ strings in \"words\" that start with a specific letter \nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpy7o8yixf.jl:11\nin expression starting at\
    \ /tmp/tmpy7o8yixf.jl:11\n"
  stdout: ''
  timestamp: 1659978310
- exit_code: 0
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    filter!(x -> startswith(x, prefix), strings)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    2      2

    '
  stdout: ''
  timestamp: 1659978306
- exit_code: 0
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    strings = [s for s in strings if startswith(s, prefix)]\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    2      2

    '
  stdout: ''
  timestamp: 1659978309
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \n    prefix = String(prefix)\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp3od3fsfa.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp3od3fsfa.jl:1\n\
    in expression starting at /tmp/tmp3od3fsfa.jl:1\n"
  stdout: ''
  timestamp: 1659978311
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    return filter(prefix in strings, strings)\nend\n</cell>\n<code language=julia-1.5>\n\
    # Test your filter_by_prefix function below.\n@test filter_by_prefix([\"abc\"\
    , \"bcd\", \"cde\", \"array\"], \"a\") === [\"abc\", \"array\"]\n@test filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"bc\") === []\n@test filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"array\") === [\"array\"]\n</cell>\n<text>\n\
    Finding all elements in a given vector that are divisible by a given number\n\
    To find all elements of vec that are divisible by a given number N, one can use\
    \ filter with the following function which takes two arguments:\nusing Test\n\n\
    @testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4vdan4lo.jl:10\nin expression starting at\
    \ /tmp/tmp4vdan4lo.jl:10\n"
  stdout: ''
  timestamp: 1659978311
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n\"\"\"Filter an input vector of strings only for ones that start with a given\
    \ prefix.\n    >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"\
    a\")\n    [\"abc\", \"array\"]\n\"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpli_xgi5q.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpli_xgi5q.jl:1\n\
    in expression starting at /tmp/tmpli_xgi5q.jl:1\n"
  stdout: ''
  timestamp: 1659978311
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    if is_nil(strings) || is_nil(prefix)\n        return strings\n    end\n\
    using Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpfe6h6tur.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpfe6h6tur.jl:1\n\
    in expression starting at /tmp/tmpfe6h6tur.jl:1\n"
  stdout: ''
  timestamp: 1659978312
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    if length(prefix) == 0\n        return strings\n    if length(strings)\
    \ == 0\n        return strings\n    ends_with_prefix = false\n    for s in strings\n\
    \        if startswith(s, prefix)\n            return strings\n        ends_with_prefix\
    \ = true\n    end\n    if ends_with_prefix\n        return strings\n    end\n\
    \    return []\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpf321_m3r.jl:1\nin expression starting at /tmp/tmpf321_m3r.jl:1\n"
  stdout: ''
  timestamp: 1659978311
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \"\"\"Filter an input vector of strings only for ones that start with\
    \ a given prefix.\"\"\"\n    \n    for s in strings\n        if starts_with(s,prefix)\n\
    \            return s\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp_p1uh0de.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp_p1uh0de.jl:1\n\
    in expression starting at /tmp/tmp_p1uh0de.jl:1\n"
  stdout: ''
  timestamp: 1659978312
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    if length(strings) < 1 || prefix === \"\"\n        return strings\n  \
    \  endIdx = find_last_index(prefix, strings)\n    \n    # filter out everything\
    \ before the last index\n    return strings[begin:endIdx+1]\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpevyc9ye5.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpevyc9ye5.jl:1\n\
    in expression starting at /tmp/tmpevyc9ye5.jl:1\n"
  stdout: ''
  timestamp: 1659978312
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \"\"\"Filter a string vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nend\n</cell>\n<code language=julia-1.5>\n# Create a function that will split\
    \ a string into its components\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsgpwk4ld.jl:15\nin expression starting at\
    \ /tmp/tmpsgpwk4ld.jl:15\n"
  stdout: ''
  timestamp: 1659978312
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    if length(strings) < 1\n        return strings\n    if length(strings)\
    \ == 1\n        return [strings[0]]\n    if prefix == \"\"\n        return strings\n\
    \    if prefix == strings[1]\n        return strings[2:end]\n    else\n      \
    \  return [prefix | strings[1]] +  filter_by_prefix(strings[2:end], prefix)\n\
    end\n</cell>\n<text>\nFiltering by Suffix:\nFilter an input vector of strings\
    \ only for ones that end with a given suffix.\n>>> filter_by_suffix([], \"a\"\
    )\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n[\"\
    abc\"]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"], \"cde\")\n\
    [\"abc\", \"array\"]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"b\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"], \"\
    b\")\n[\"bcd\", \"array\"]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"\
    array\"], \"array\")\n[\"array\"]\n</text>\n<code language=julia-1.6>\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpieryn5w5.jl:19\nin expression starting at\
    \ /tmp/tmpieryn5w5.jl:19\n"
  stdout: ''
  timestamp: 1659978312
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    prefix_length = len(prefix)\n    prefix_strings = filter(x-> length(x)\
    \ == prefix_length, strings)\n    prefix_filtered_strings = filter(x-> startswith(prefix,\
    \  x), prefix_strings)\n    \n    filtered_strings = filter(x-> length(x) != prefix_length,\
    \ prefix_filtered_strings)\n    \n    return filtered_strings\nusing Test\n\n\
    @testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpfoqm8p5j.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpfoqm8p5j.jl:1\n\
    in expression starting at /tmp/tmpfoqm8p5j.jl:1\n"
  stdout: ''
  timestamp: 1659978312
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n        prefix = lowercase(prefix)\n        \n        result = []\n      \
    \  for s in strings\n            if lowercase(s) startswith prefix\n         \
    \       push!(result, s)\n            end\n        end\n        return result\n\
    \    end\n    \nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"prefix\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpbjoymd3_.jl:12\nin expression starting at /tmp/tmpbjoymd3_.jl:12\n"
  stdout: ''
  timestamp: 1659978313
- exit_code: -1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    filter(s -> starts_with(s, prefix), strings)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: Timeout
  stderr: 'b''ERROR: '''
  stdout: 'b''test set: Error During Test at /tmp/tmppr5yzrpn.jl:16\n  Test threw
    exception\n  Expression: candidate(["xxx", "asd", "xxy", "john doe", "xxxAAA",
    "xxx"], "xxx") == ["xxx", "xxxAAA", "xxx"]\n  UndefVarError: starts_with not defined\n  Stacktrace:\n   [1]
    (::var"#1#2"{String})(s::String)\n     @ Main /tmp/tmppr5yzrpn.jl:8\n   [2] filter(f::var"#1#2"{String},
    a::Vector{String})\n     @ Base ./array.jl:2484\n   [3] filter_by_prefix(strings::Vector{String},
    prefix::String)\n     @ Main /tmp/tmppr5yzrpn.jl:8\n   [4] macro expansion\n     @
    ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [5]
    macro expansion\n     @ /tmp/tmppr5yzrpn.jl:16 [inlined]\n   [6] macro expansion\n     @
    ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [7]
    top-level scope\n     @ /tmp/tmppr5yzrpn.jl:14\nTest Summary: | Pass  Error  Total\ntest
    set      |    1      1      2\n'''
  timestamp: 1659978315
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    filter(strings, function(s)->startswith(s, prefix))\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid identifier name \"->\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmps6xefxt7.jl:8\nin expression starting at /tmp/tmps6xefxt7.jl:8\n"
  stdout: ''
  timestamp: 1659978313
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    return [string for string in strings \n            if string.startswith(prefix)]\n\
    using Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpkkac94u5.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpkkac94u5.jl:1\n\
    in expression starting at /tmp/tmpkkac94u5.jl:1\n"
  stdout: ''
  timestamp: 1659978313
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    filter(x->startswith(x, prefix), strings)\nend\n</cell>\n<text>\n5.3.3\
    \ filter_by_suffix\nWrite a function that filters an input vector of strings only\
    \ for ones that end with a given suffix.\n>>> filter_by_suffix([], \"c\")\n[]\n\
    >>> filter_by_suffix([\"abc\", \"bcd\", \"cde\"], \"c\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    array\", \"array\", \"cde\"], \"c\")\n[\"array\"]\n>>> filter_by_suffix([\"cde\"\
    , \"bcd\", \"array\"], \"c\")\n[\"cde\"]\n\"\"\"\nusing Test\n\n@testset begin\n\
    \ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\"\
    ) == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpupex9556.jl:10\nin expression starting at\
    \ /tmp/tmpupex9556.jl:10\n"
  stdout: ''
  timestamp: 1659978313
- exit_code: 0
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    return filter(s -> startswith(s,prefix), strings)\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    2      2

    '
  stdout: ''
  timestamp: 1659978311
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \n    for str in strings\n        if str.starts_with(prefix)\n       \
    \     push!(filter_list, str)\n        end\n    end\nusing Test\n\n@testset begin\n\
    \ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\"\
    ) == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp49svmncp.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp49svmncp.jl:1\n\
    in expression starting at /tmp/tmp49svmncp.jl:1\n"
  stdout: ''
  timestamp: 1659978313
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    filtered_strings = copy(strings)\n    for str in strings\n        if startswith(str,\
    \ prefix)\n            filtered_strings = remove(str, prefix)\n            break\n\
    \    end\n    return filtered_strings\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmptno1wjxj.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmptno1wjxj.jl:1\n\
    in expression starting at /tmp/tmptno1wjxj.jl:1\n"
  stdout: ''
  timestamp: 1659978313
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    return filter(x -> startswith(prefix, x), strings) \nend\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmprjzod2pb.jl:12

    '
  stdout: "test set: Test Failed at /tmp/tmprjzod2pb.jl:16\n  Expression: candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]\n   Evaluated: [\"xxx\", \"xxx\"] == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprjzod2pb.jl:16 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprjzod2pb.jl:14\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     1      2\n"
  timestamp: 1659978315
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpck8m7gyw.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpck8m7gyw.jl:1\n\
    in expression starting at /tmp/tmpck8m7gyw.jl:1\n"
  stdout: ''
  timestamp: 1659978313
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    return filter(x->startswith(prefix, x), strings)\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmptsh5cucm.jl:12

    '
  stdout: "test set: Test Failed at /tmp/tmptsh5cucm.jl:16\n  Expression: candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]\n   Evaluated: [\"xxx\", \"xxx\"] == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptsh5cucm.jl:16 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptsh5cucm.jl:14\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     1      2\n"
  timestamp: 1659978315
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    map( s -> s if s.startsWith(prefix), strings )\nend\n</cell>\n<code language=julia-0.4>\n\
    filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\n\
    Filter an input vector of strings only for ones that contain words that end with\
    \ the given suffix\nWe will use this to remove the last word of a string that\
    \ does not end with a suffix of our choice\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpup0v4w13.jl:8\nin expression starting at /tmp/tmpup0v4w13.jl:8\n"
  stdout: ''
  timestamp: 1659978314
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n  prefixes = split(prefix, \"\")\n  for s in strings\n    if all(prefix ==\
    \ prefix ? true : s.starts_with(?prefix) for prefix in prefixes)\n      yield\
    \ s\n    end\n  end\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid identifier name \"?\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8sfqeosg.jl:10\nin expression starting at\
    \ /tmp/tmp8sfqeosg.jl:10\n"
  stdout: ''
  timestamp: 1659978314
- exit_code: 0
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    strings = filter(s -> startswith(s, prefix), strings)\n    return strings\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    2      2

    '
  stdout: ''
  timestamp: 1659978274
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n\tfilter!(e -> e.starts_with(prefix), strings)\nend\n</cell>\n<text>\nPractice\
    \ with the function filter_by_prefix\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpw3jp1cr3.jl:10\nin expression starting at\
    \ /tmp/tmpw3jp1cr3.jl:10\n"
  stdout: ''
  timestamp: 1659978314
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    if prefix == \"\"\n        return strings\n    else \n        return filter_by_prefix(filter_by_prefix(strings,\
    \ prefix[1:]), prefix) \nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"1:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpzrwf5y3s.jl:11\nin expression\
    \ starting at /tmp/tmpzrwf5y3s.jl:11\n"
  stdout: ''
  timestamp: 1659978314
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    for s in strings\n        if startswith(s,prefix)\n            return\
    \ s\n    end\n    return []\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp8b22l0s_.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp8b22l0s_.jl:1\n\
    in expression starting at /tmp/tmp8b22l0s_.jl:1\n"
  stdout: ''
  timestamp: 1659978314
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    if length(strings) == 0 \n        return strings \n    \n    strings =\
    \ map(x -> x == \"*\" || x == prefix ? x : \"\",  strings) \n    return filter(x\
    \ -> length(x) > 0, strings) \nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpd03cijh_.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpd03cijh_.jl:1\n\
    in expression starting at /tmp/tmpd03cijh_.jl:1\n"
  stdout: ''
  timestamp: 1659978314
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \n    if length(strings)==0 || prefix==\"\"\n        string\n    else\n\
    \        filter(x -> starts_with(x, prefix), strings)\n    end\nend\n</cell>\n\
    <text>\nThe following cell defines a function that calculates how many of the\
    \ strings in a list are contained in a sublist of a larger list of strings:\n\
    using Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpa3_04esx.jl:15\nin expression starting at\
    \ /tmp/tmpa3_04esx.jl:15\n"
  stdout: ''
  timestamp: 1659978315
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    result = []\n    for string in strings \n        if string.startswith(prefix)\n\
    \            result = [string]\n        end\n    end\n    return result \nend\n\
    </cell>\n<code language=julia-0.4>\n# Let's test it\nfilter_by_prefix([\"abc\"\
    , \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise: Use filter_by_prefix\
    \ to filter an array of numbers for all the numbers that are even.\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3m_biiud.jl:16\nin expression starting at\
    \ /tmp/tmp3m_biiud.jl:16\n"
  stdout: ''
  timestamp: 1659978315
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    if prefix === \"\" \n        strings\n    else \n        prefix \u2208\
    \ strings ? filter_by_prefix(filter!(strings \u2209 prefix), prefix[length(prefix)])\
    \ :\n            strings\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpb920aw13.jl:14\nin expression starting at\
    \ /tmp/tmpb920aw13.jl:14\n"
  stdout: ''
  timestamp: 1659978315
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    return filter((x) -> startswith(prefix, x), strings)\nend\n</cell>\n<code\
    \ language=julia-1.0>\nfilter_by_prefix([\"a\", \"b\", \"c\", \"d\", \"e\"], \"\
    a\")\n</cell>\n<text>\nFiltering out strings that don't start with a certain prefix\n\
    A prefix of a string will be removed when the string starts with it.\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5e68d8z6.jl:10\nin expression starting at\
    \ /tmp/tmp5e68d8z6.jl:10\n"
  stdout: ''
  timestamp: 1659978315
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    strings = filter(x -> startswith(x, prefix), strings)\nend\n</cell>\n\
    <code language=julia-1.3>\n\"\"\"\n    filter_by_prefix(strings::Vector{String},\
    \ prefix::AbstractString)\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwdp578ra.jl:10\nin expression starting at\
    \ /tmp/tmpwdp578ra.jl:10\n"
  stdout: ''
  timestamp: 1659978315
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    if length(strings) < 1 || prefix === \"\"\n        return strings\n  \
    \  else\n        prefix_index = findall(prefix === strings)\n        return strings[prefix_index]\n\
    \    end\nend\n</cell>\n<text>\nNow you can put it all together with a function\
    \ that strips away all the excess whitespace and returns the results. We will\
    \ use the filter function from above as an input for our new function.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxkjbuj4_.jl:15\nin expression starting at\
    \ /tmp/tmpxkjbuj4_.jl:15\n"
  stdout: ''
  timestamp: 1659978315
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \n    return filter(x -> startswith(prefix, x), strings)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp972_o05n.jl:13

    '
  stdout: "test set: Test Failed at /tmp/tmp972_o05n.jl:17\n  Expression: candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]\n   Evaluated: [\"xxx\", \"xxx\"] == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp972_o05n.jl:17 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp972_o05n.jl:15\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     1      2\n"
  timestamp: 1659978317
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \n    return filter(s -> startswith(s,prefix), strings) \nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpd6hzqa9t.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpd6hzqa9t.jl:1\n\
    in expression starting at /tmp/tmpd6hzqa9t.jl:1\n"
  stdout: ''
  timestamp: 1659978316
- exit_code: 0
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \n    strings = filter( l -> startswith(l, prefix), strings)\n    \nend\n\
    using Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    2      2

    '
  stdout: ''
  timestamp: 1659978314
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    prefix_length = length(prefix)\n    result = []\n    for s in strings\n\
    \        if startswith(s, prefix)\n            result[end] = s\n        end\n\
    \    end\n    return result\nend\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThat's\
    \ not how I understand `filter_by_prefix`. The return type is `Vector{String}`\
    \ so `filter_by_prefix([], \"a\")` should return an empty vector. I would expect\
    \ `filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"ab\")` to return\
    \ [\"abc\", \"bcd\"]. My example is different because I am not looking for strings\
    \ starting with prefix.\n<|/ c |>\n<| a tags=julia,performance |>\nI wanted to\
    \ suggest an alternate implementation, which also does string indexing along the\
    \ way. Also note that the algorithm for prefixing strings is O(n), so the performance\
    \ of the algorithm is not dependent on the length of prefix you choose.\n<code>\n\
    using Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsx77x5gw.jl:17\nin expression starting at\
    \ /tmp/tmpsx77x5gw.jl:17\n"
  stdout: ''
  timestamp: 1659978316
- exit_code: -1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    # Filter by prefix, return empty if input was empty or prefix was empty\n\
    \    return if strings.length == 0 || prefix == \"\" \n        strings \n    else\
    \ \n        [s for s in strings if s.startswith(prefix)]\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: Timeout
  stderr: 'b''ERROR: LoadError: '''
  stdout: 'b''test set: Error During Test at /tmp/tmpoe3dfv6o.jl:20\n  Test threw
    exception\n  Expression: candidate(Vector{String}([]), "john") == Vector{String}([])\n  type
    Array has no field length\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42
    [inlined]\n   [2] filter_by_prefix(strings::Vector{String}, prefix::String)\n     @
    Main /tmp/tmpoe3dfv6o.jl:9\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [4] macro expansion\n     @ /tmp/tmpoe3dfv6o.jl:20 [inlined]\n   [5]
    macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [6] top-level scope\n     @ /tmp/tmpoe3dfv6o.jl:19\ntest set: Error
    During Test at /tmp/tmpoe3dfv6o.jl:21\n  Test threw exception\n  Expression: candidate(["xxx",
    "asd", "xxy", "john doe", "xxxAAA", "xxx"], "xxx") == ["xxx", "xxxAAA", "xxx"]\n  type
    Array has no field length\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42
    [inlined]\n   [2] filter_by_prefix(strings::Vector{String}, prefix::String)\n     @
    Main /tmp/tmpoe3dfv6o.jl:9\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [4] macro expansion\n     @ /tmp/tmpoe3dfv6o.jl:21 [inlined]\n   [5]
    macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [6] top-level scope\n     @ /tmp/tmpoe3dfv6o.jl:19\nTest Summary:
    | Error  Total\ntest set      |     2      2\n'''
  timestamp: 1659978318
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \n    for s in strings do \n        if prefix == stringhead(s) \n    \
    \        continue \n        else \n            push!(result, s) \n        end\
    \ \n    end \n    \n    return result\nend\n</cell>\n<code language=julia-0.5>\n\
    filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\n\
    3.4.1 Filter by suffix\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid \"do\" syntax\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpnlj3dpk1.jl:9\nin expression starting at /tmp/tmpnlj3dpk1.jl:9\n"
  stdout: ''
  timestamp: 1659978316
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    if strings == [] || prefix == \"\" \n        return strings \n    \n \
    \   prefix += \"*\"\n    \n    strings = strings[2:end]\n    \n    prefix = prefix[2:end-1]\n\
    \    \n    result = []\n    for s in strings \n        if startswith(s, prefix)\
    \ == true \n            result[end-1] = s \n        end\n    end\n    \n    return\
    \ result\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\"\
    ) == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpy9x0pdvi.jl:26\nin expression starting at\
    \ /tmp/tmpy9x0pdvi.jl:26\n"
  stdout: ''
  timestamp: 1659978316
- exit_code: -1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    index_start = find_index(strings, prefix)\n    return strings[index_start:end]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: Timeout
  stderr: 'b''ERROR: LoadError: '''
  stdout: 'b''test set: Error During Test at /tmp/tmpojw2tiwg.jl:16\n  Test threw
    exception\n  Expression: candidate(Vector{String}([]), "john") == Vector{String}([])\n  UndefVarError:
    find_index not defined\n  Stacktrace:\n   [1] filter_by_prefix(strings::Vector{String},
    prefix::String)\n     @ Main /tmp/tmpojw2tiwg.jl:8\n   [2] macro expansion\n     @
    ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmpojw2tiwg.jl:16 [inlined]\n   [4] macro expansion\n     @
    ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmpojw2tiwg.jl:15\ntest set: Error During Test at
    /tmp/tmpojw2tiwg.jl:17\n  Test threw exception\n  Expression: candidate(["xxx",
    "asd", "xxy", "john doe", "xxxAAA", "xxx"], "xxx") == ["xxx", "xxxAAA", "xxx"]\n  UndefVarError:
    find_index not defined\n  Stacktrace:\n   [1] filter_by_prefix(strings::Vector{String},
    prefix::String)\n     @ Main /tmp/tmpojw2tiwg.jl:8\n   [2] macro expansion\n     @
    ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmpojw2tiwg.jl:17 [inlined]\n   [4] macro expansion\n     @
    ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmpojw2tiwg.jl:15\nTest Summary: | Error  Total\ntest
    set      |     2      2\n'''
  timestamp: 1659978319
- exit_code: -1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    prefix_strings = filter(string -> startswith(string, prefix), strings)\n\
    \    nonprefix_strings = filter(string -> !startswith(string, prefix), strings)\n\
    \    return prefix_strings + nonprefix_strings\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\"\
    ) == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659978319
- exit_code: -1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \n    strings = [s for s in strings if (prefix \u2209 s)]\n    \n    return\
    \ strings\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: Timeout
  stderr: 'b''ERROR: '''
  stdout: 'b''test set: Error During Test at /tmp/tmp3mnvyrs8.jl:19\n  Test threw
    exception\n  Expression: candidate(["xxx", "asd", "xxy", "john doe", "xxxAAA",
    "xxx"], "xxx") == ["xxx", "xxxAAA", "xxx"]\n  use occursin(x, y) for string containment\n  Stacktrace:\n    [1]
    error(s::String)\n      @ Base ./error.jl:33\n    [2] in(#unused#::String, #unused#::String)\n      @
    Base ./strings/search.jl:638\n    [3] \xe2\x88\x89(x::String, itr::String)\n      @
    Base ./operators.jl:1294\n    [4] (::var"#1#2"{String})(s::String)\n      @ Main
    ./none:0\n    [5] iterate\n      @ ./iterators.jl:447 [inlined]\n    [6] iterate\n      @
    ./generator.jl:44 [inlined]\n    [7] grow_to!\n      @ ./array.jl:797 [inlined]\n    [8]
    collect\n      @ ./array.jl:721 [inlined]\n    [9] filter_by_prefix(strings::Vector{String},
    prefix::String)\n      @ Main /tmp/tmp3mnvyrs8.jl:9\n   [10] macro expansion\n      @
    ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [11]
    macro expansion\n      @ /tmp/tmp3mnvyrs8.jl:19 [inlined]\n   [12] macro expansion\n      @
    ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [13]
    top-level scope\n      @ /tmp/tmp3mnvyrs8.jl:17\nTest Summary: | Pass  Error  Total\ntest
    set      |    1      1      2\n'''
  timestamp: 1659978319
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n  \n  if isempty(prefix) || prefix == \"\"\n    return strings\n  else\n \
    \   prefix_idx = length(strings) - length(prefix) - 1\n    if prefix_idx > -1\n\
    \      filter = filter((i:length(strings)) -> (i <= prefix_idx) && (strings[i\
    \ + prefix_idx] == prefix))\n    else\n      filter = filter((i:length(strings))\
    \ -> (i <= prefix_idx) && (strings[i + prefix_idx] == prefix))\n    end\n    strings[filter]\n\
    \  end\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t\
    @test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"i:length(strings)\" is not a valid function\
    \ argument name around /tmp/tmpx3ckrsoq.jl:14\nStacktrace:\n [1] top-level scope\n\
    \   @ /tmp/tmpx3ckrsoq.jl:1\nin expression starting at /tmp/tmpx3ckrsoq.jl:1\n"
  stdout: ''
  timestamp: 1659978317
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    if length(strings) <= 0\n        return strings\n    else \n        prefixes\
    \ = Vector{String}(map(x->x[1], filter(lambda x: x[1] == '*', strings)))\n   \
    \     filtered = filter(x-> startswith(x.value, prefix), strings)\n        \n\
    \        prefixed_filtered = map(x->{x.key, filter_by_prefix(x.value, prefix)},\
    \ filtered)\n        \n        prefixed_strings = map(x->{x.key, x.value}, prefixed_filtered)\n\
    \        \n        strings = map(x->{x.key, x.value}, strings)\n        strings\
    \ = filter(x-> x.key != prefixed_strings, strings)\n        \n        return strings;\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpl_vp3cwm.jl:11\nin expression starting at\
    \ /tmp/tmpl_vp3cwm.jl:11\n"
  stdout: ''
  timestamp: 1659978317
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    if isnothing(prefix) || prefix == \"\"\n        return strings\n    endpos\
    \ = searchprefix(strings, prefix)\n    if endpos < length(strings)\n        prefix\
    \ += strings[endpos]\n        return filter_by_prefix(strings[endpos + 1 :], prefix)\n\
    \    else\n        return strings\n    end\nend\n</cell>\n<code language=julia-1.2>\n\
    using Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3j6kul4t.jl:18\nin expression starting at\
    \ /tmp/tmp3j6kul4t.jl:18\n"
  stdout: ''
  timestamp: 1659978317
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    if strings.length == 0 \n        throw(ArgumentError(\"$prefix must be\
    \ non-empty\"))\n    end\n    return filter(x -> startswith(prefix::String, x),\
    \ strings)\nend\n</cell>\n<code language=julia-1.5>\n@code_warntype filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nfilter_by_prefix(vector,\
    \ prefix)\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvj7tewdm.jl:13\nin expression starting at\
    \ /tmp/tmpvj7tewdm.jl:13\n"
  stdout: ''
  timestamp: 1659978317
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    if length(strings) == 0 || prefix == \"\" \n        strings \n    else\
    \ \n        filter(x -> startswith(x, prefix), strings) \nend\n</cell>\n<code\
    \ language=julia-0.5>\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpza0625rj.jl:13\nin expression starting at\
    \ /tmp/tmpza0625rj.jl:13\n"
  stdout: ''
  timestamp: 1659978317
- exit_code: -1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    return filter(x -> startswith(String, x), strings)\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: '''
  timestamp: 1659978320
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    strings = strings[find(strings) do i\n        i == find(strings.[i, :],\
    \ prefix)\n    end != -1]\nend\n</cell>\n<code language=julia-1.3>\nfilter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nmap()\nmap() applies\
    \ a given function to a collection. Here is a simple example showing how it works:\n\
    using Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid syntax \"strings.[i, :]\" around /tmp/tmp5ezhsch5.jl:9\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmp5ezhsch5.jl:1\nin expression starting\
    \ at /tmp/tmp5ezhsch5.jl:1\n"
  stdout: ''
  timestamp: 1659978318
- exit_code: -1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    if len(prefix) == 0\n        return strings\n    elseif all(x -> prefix\
    \ in x, strings)\n        return strings\n    else\n        return filter(x ->\
    \ prefix in x, strings)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  status: Timeout
  stderr: 'b''ERROR: '''
  stdout: 'b''test set: Error During Test at /tmp/tmpkzoqh7lh.jl:21\n  Test threw
    exception\n  Expression: candidate(Vector{String}([]), "john") == Vector{String}([])\n  UndefVarError:
    len not defined\n  Stacktrace:\n   [1] filter_by_prefix(strings::Vector{String},
    prefix::String)\n     @ Main /tmp/tmpkzoqh7lh.jl:8\n   [2] macro expansion\n     @
    ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmpkzoqh7lh.jl:21 [inlined]\n   [4] macro expansion\n     @
    ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmpkzoqh7lh.jl:20\ntest set: Error During Test at
    /tmp/tmpkzoqh7lh.jl:22\n  Test threw exception\n  Expression: candidate(["xxx",
    "asd", "xxy", "john doe", "xxxAAA", "xxx"], "xxx") == ["xxx", "xxxAAA", "xxx"]\n  UndefVarError:
    len not defined\n  Stacktrace:\n   [1] filter_by_prefix(strings::Vector{String},
    prefix::String)\n     @ Main /tmp/tmpkzoqh7lh.jl:8\n   [2] macro expansion\n     @
    ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmpkzoqh7lh.jl:22 [inlined]\n   [4] macro expansion\n     @
    ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmpkzoqh7lh.jl:20\nTest Summary: | Error  Total\ntest
    set      |     2      2\n'''
  timestamp: 1659978320
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    indices = findall(prefix .== strings, 1) \n    indices = [i for (i, x)\
    \ in enumerate(strings) if x > strings[i]]\n    return strings[indices]\nend\n\
    </cell>\n<code language=julia-1.6>\nfilter_by_prefix([\"ab\", \"c\", \"d\"], \"\
    b\")\n</cell>\n<code language=julia-1.6>\nfilter_by_prefix([\"ab\", \"c\", \"\
    d\"], \"a\")\n</cell>\n<code language=julia-1.6>\nfilter_by_prefix([\"ab\", \"\
    c\", \"d\"], \"a\")\n</cell>\n<code language=julia-1.6>\nfilter_by_prefix([\"\
    ab\", \"c\", \"d\"], \"a\")\n</cell>\n<code language=julia-1.6>\nfilter_by_prefix([\"\
    ab\", \"c\", \"d\"], \"a\")\n</cell>\n<code language=julia-1.6>\nfilter_by_prefix([\"\
    ab\", \"c\", \"d\"], \"a\")\n</cell>\n<code language=julia-1.6>\nfilter_by_prefix([\"\
    ab\", \"c\", \"d\"], \"a\")\n</cell>\n<code language=julia-1.6>\nfilter_by_prefix([\"\
    ab\", \"c\", \"d\"], \"a\")\n</cell>\n<code language=julia-1.6>\nfilter_by_prefix([\"\
    ab\", \"c\", \"d\"], \"a\")\n</cell>\n<code language=julia-1.6>\nfilter_by_prefix([\"\
    ab\", \"c\", \"d\"], \"a\")\n</cell>\n<code language=julia-1.6>\nfilter_by_prefix([\"\
    ab\", \"c\", \"d\"], \"a\")\n</cell>\n<code language=julia-1.6>\nfilter_by_prefix([\"\
    ab\", \"c\", \"d\"], \"a\")\n</cell>\n<code language=julia-1.6>\nfilter_by_prefix([\"\
    ab\", \"c\", \"d\"], \"a\")\n</cell>\n<code language=julia-1.6>\nfilter_by_prefix([\"\
    ab\", \"c\", \"d\"], \"a\")\n</cell>\n<code language=julia-1.6>\nfilter_by_prefix([\"\
    ab\", \"c\", \"d\"], \"a\")\n</cell>\n<code language=julia-1.6>\nfilter_by_prefix([\"\
    ab\", \"c\", \"d\"], \"a\")\n</cell>\n<code language=julia-1.6>\nfilter_by_prefix([\"\
    ab\", \"c\", \"d\"], \"a\")\n</cell>\n<code language=julia-1.6>\nfilter_by_prefix([\"\
    ab\", \"c\", \"d\"], \"a\")\n</cell>\n<code language=julia-1.6>\nfilter_by_prefix([\"\
    ab\", \"c\", \"d\"], \"a\")\n</cell>\n<code language=julia-1.6>\nfilter_by_prefix([\"\
    ab\", \"c\", \"d\"], \"a\")\n</cell>\n<code language=julia-1.6>\nfilter_by_prefix([\"\
    ab\", \"c\", \"d\"], \"a\")\n</cell>\n<code language=julia-1.6>\nfilter_by_prefix([\"\
    ab\", \"c\", \"d\"], \"a\")\n</cell>\n<code language=julia-1.6>\nfilter_by_prefix([\"\
    ab\", \"c\", \"d\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbhjw4772.jl:12\nin expression starting at\
    \ /tmp/tmpbhjw4772.jl:12\n"
  stdout: ''
  timestamp: 1659978318
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    strings = [s for s in strings if startswith(s, prefix)]\n    return strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"\
    cde\", \"array\"], \"a\")\n</cell>\n<code language=julia-1.5>\nusing Test\n\n\
    @testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8r7sntgg.jl:11\nin expression starting at\
    \ /tmp/tmp8r7sntgg.jl:11\n"
  stdout: ''
  timestamp: 1659978318
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    if prefix === \"\" \n        prefix = \".\" \n    endmatchidx = 1 \n \
    \   for s in strings \n        start = 1 \n        while isequal(prefix, s[start])\
    \ \n            start += 1 \n        endmatchidx += 1 \n    endmatchidx += 1 \n\
    \    return strings[endmatchidx:end]\nend \n</cell>\n<text>\nLet's write a function\
    \ which will return the length of an input vector of strings:\nusing Test\n\n\
    @testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprhbxbe73.jl:19\nin expression starting at\
    \ /tmp/tmprhbxbe73.jl:19\n"
  stdout: ''
  timestamp: 1659978318
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n\"\"\"Filter an input vector of strings only for ones that start with a given\
    \ prefix.\n    Arguments\n    ---------\n    strings\n      vector of strings\
    \ to filter\n    prefix\n      prefix for strings to filter out\n    Returns\n\
    \    -------\n    Vector of strings filtered for strings that start with prefix\n\
    \"\"\"\nfilter_by_prefix = map filter (startswith)\nfilter_by_prefix(string.(string.(filter_by_prefix(vec,\
    \ \"ab\"))))\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t\
    @test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"function\" at /tmp/tmpmjg_jmio.jl:7 expected\
    \ \"end\", got \"filter\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpmjg_jmio.jl:19\n\
    in expression starting at /tmp/tmpmjg_jmio.jl:19\n"
  stdout: ''
  timestamp: 1659978318
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \n    return filter!(x -> starts_with(x, prefix), strings)\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp9vi533s4.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp9vi533s4.jl:1\n\
    in expression starting at /tmp/tmp9vi533s4.jl:1\n"
  stdout: ''
  timestamp: 1659978318
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \"\"\"Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp1v5obhg2.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp1v5obhg2.jl:1\n\
    in expression starting at /tmp/tmp1v5obhg2.jl:1\n"
  stdout: ''
  timestamp: 1659978318
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \n    filtered = map(x -> startswith(x,prefix), strings)\n    \n    return\
    \ Vector{String}(filtered...)\nend\n</cell>\n<text>\nfilter_by_suffix\nSimilar\
    \ to filter_by_prefix, but filter out all strings starting with a given suffix\n\
    The result is a vector of all the input strings that do NOT start with a given\
    \ suffix.\nIt also works on strings containing whitespaces.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsi_lq3fh.jl:13\nin expression starting at\
    \ /tmp/tmpsi_lq3fh.jl:13\n"
  stdout: ''
  timestamp: 1659978318
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \"\"\"Filter input string vector for strings that start with a given prefix.\n\
    \    \"\"\"\n    \n    prefix_index = 1:length(prefix)\n    \n    matches = filter((i\
    \ -> startswith(strings[i], prefix)),\n                    prefix_index)\n   \
    \ \n    return filter(i -> matches[i], prefix_index)\nend\n</cell>\n<code language=julia-1.0>\n\
    using Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxgrkatnh.jl:18\nin expression starting at\
    \ /tmp/tmpxgrkatnh.jl:18\n"
  stdout: ''
  timestamp: 1659978319
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    if (prefix != \"\") then\n        keep = filter((x -> starts_with(x, prefix)),\
    \ strings)\n        return filter((x -> starts_with(x, prefix)), strings) \n \
    \   else \n        return strings\n    end\nend\n</cell>\n<text>\nNow let's apply\
    \ this filter to the example above:\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpy3nxlizr.jl:15\nin expression starting at\
    \ /tmp/tmpy3nxlizr.jl:15\n"
  stdout: ''
  timestamp: 1659978319
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    if prefix != \"\" \n        string = strings[:]\n        for s in strings\
    \ do \n            if s.startswith(prefix) \n                remove(s, prefix)\n\
    \            end\n        end\n    end\n    return strings\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid \"do\" syntax\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpc69q8f_9.jl:10\nin expression starting at /tmp/tmpc69q8f_9.jl:10\n"
  stdout: ''
  timestamp: 1659978319
- exit_code: -1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    if prefix != \"\" \n        strings = strings[strings[2:end] .== prefix[2:end]]\
    \ \n    else \n        strings = strings[2:end] \n    end \n    return strings\
    \ \nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpv_z84u9y.jl:21\n  Test threw
    exception\n  Expression: candidate(["xxx", "asd", "xxy", "john doe", "xxxAAA",
    "xxx"], "xxx") == ["xxx", "xxxAAA", "xxx"]\n  BoundsError: attempt to access 6-element
    Vector{String} at index [5-element BitVector]\n  Stacktrace:\n   [1] throw_boundserror(A::Vector{String},
    I::Tuple{Base.LogicalIndex{Int64, BitVector}})\n     @ Base ./abstractarray.jl:691\n   [2]
    checkbounds\n     @ ./abstractarray.jl:656 [inlined]\n   [3] _getindex\n     @
    ./multidimensional.jl:838 [inlined]\n   [4] getindex\n     @ ./abstractarray.jl:1218
    [inlined]\n   [5] filter_by_prefix(strings::Vector{String}, prefix::String)\n     @
    Main /tmp/tmpv_z84u9y.jl:9\n   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [7] macro expansion\n     @ /tmp/tmpv_z84u9y.jl:21 [inlined]\n   [8]
    macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [9] top-level scope\n     @ /tmp/tmpv_z84u9y.jl:19\nTest Summary:
    | Pass  Error  Total\ntest set      |    1      1      2\n'''
  timestamp: 1659978322
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \n    # return an empty vector if there are zero elements or the prefix\
    \ doesn't start\n    # with the first character\n    if length(strings) == 0 ||\
    \ prefix[0] != strings[1]\n        return strings[2:end]\n    end\n    \n    #\
    \ otherwise return the vector with the prefix removed\n    else\n        rest\
    \ = strings[2:end]\n        \n        # filter the rest string with the prefix\
    \ and return the rest\n        filter(s -> startswith(s, prefix), rest)\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"function\" at /tmp/tmpfik66jyp.jl:7 expected\
    \ \"end\", got \"else\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpfik66jyp.jl:16\n\
    in expression starting at /tmp/tmpfik66jyp.jl:16\n"
  stdout: ''
  timestamp: 1659978320
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    return filter(x->startswith(prefix, x), strings)\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmplr65pxl2.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmplr65pxl2.jl:1\n\
    in expression starting at /tmp/tmplr65pxl2.jl:1\n"
  stdout: ''
  timestamp: 1659978320
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \n    answer = []\n    \n    prefix_length = length(prefix)\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp5pm314a1.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp5pm314a1.jl:1\n\
    in expression starting at /tmp/tmp5pm314a1.jl:1\n"
  stdout: ''
  timestamp: 1659978320
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    prefix <- prefix\n    if strings == [] || prefix == \"\"\n        return\
    \ strings\n    else\n        result <- []\n        for s in strings\n        \
    \    if startswith(s, prefix) \n                push!(result, s)\n           \
    \ else\n                println(s)\n                println(\"prefix: \" + prefix)\n\
    \                println(\"strings: \" + strings)\n        end\n        return\
    \ result\nend\n</cell>\n<code language=julia-1.0>\n@time filter_by_prefix(array,\
    \ \"array\")\n@time filter_by_prefix(array, \"array\")\n@time filter_by_prefix(array,\
    \ \"array\")\n@time filter_by_prefix(array, \"array\")\n@time filter_by_prefix(array,\
    \ \"array\")\n@time filter_by_prefix(array, \"array\")\n@time filter_by_prefix(array,\
    \ \"array\")\n@time filter_by_prefix(array, \"array\")\n</cell>\n<code language=julia-1.0>\n\
    @time filter_by_prefix(array, \"array\")\n@time filter_by_prefix(array, \"array\"\
    )\n@time filter_by_prefix(array, \"array\")\n@time filter_by_prefix(array, \"\
    array\")\n@time filter_by_prefix(array, \"array\")\n@time filter_by_prefix(array,\
    \ \"array\")\n@time filter_by_prefix(array, \"array\")\n</cell>\n<code language=julia-1.0>\n\
    @time filter_by_prefix(array, \"array\")\n@time filter_by_prefix(array, \"array\"\
    )\n@time filter_by_prefix(array, \"array\")\n@time filter_by_prefix(array, \"\
    array\")\n@time filter_by_prefix(array, \"array\")\n@time filter_by_prefix(array,\
    \ \"array\")\n@time filter_by_prefix(array, \"array\")\n@time filter_by_prefix(array,\
    \ \"array\")\n</cell>\n<code language=julia-1.0>\n# Let's see how fast it runs\n\
    @time filter_by_prefix(array, \"array\")\n@time filter_by_prefix(array, \"array\"\
    )\n@time filter_by_prefix(array, \"array\")\n@time filter_by_prefix(array, \"\
    array\")\n@time filter_by_prefix(array, \"array\")\n@time filter_by_prefix(array,\
    \ \"array\")\n@time filter_by_prefix(array, \"array\")\n@time filter_by_prefix(array,\
    \ \"array\")\n@time filter_by_prefix(array, \"array\")\n@time filter_by_prefix(array,\
    \ \"array\")\n@time filter_by_prefix(array, \"array\")\n@time filter_by_prefix(array,\
    \ \"array\")\n@time filter_by_prefix(array, \"\nusing Test\n\n@testset begin\n\
    \ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\"\
    ) == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4rl6l2k2.jl:23\nin expression starting at\
    \ /tmp/tmp4rl6l2k2.jl:23\n"
  stdout: ''
  timestamp: 1659978320
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    if !isnull(prefix)\n        for s in strings \n            if prefix in\
    \ s\n                return s\n    end\n    return strings\nend\n</cell>\n<code\
    \ language=julia-1.1>\nfilter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"b\")\n</cell>\n<text>\nExercise 5: Functional Programming in Julia\nWrite\
    \ a function that takes as input a vector and a predicate function, filters all\
    \ of the elements of the vector for which the predicate function evaluates to\
    \ true and returns a new vector. The function should work for vectors of any size.\n\
    using Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpspasj5kx.jl:15\nin expression starting at\
    \ /tmp/tmpspasj5kx.jl:15\n"
  stdout: ''
  timestamp: 1659978320
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \n    for i in strings.index(x)\n        if x.startswith( prefix::String\
    \ )\n            push!(strings, x)\n        end\n    end\n    strings\nend\n</cell>\n\
    <code language=julia-1.1>\nfilter_by_prefix([\"abacus\", \"abacus\", \"abacus\"\
    , \"abacus\"], \"\")\n</cell>\n<text>\nfilter_by_word\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9wksje7r.jl:16\nin expression starting at\
    \ /tmp/tmp9wksje7r.jl:16\n"
  stdout: ''
  timestamp: 1659978321
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    local function matcher(s) -> true \n        local i = findfirst(s, prefix)\
    \ \n        if i == 0 then \n            return false\n        else\n        \
    \    return true\n        end\n    end\n    return filter(matcher, strings)\n\
    end\n</code>\n<|/ a tags=julia,functional-programming dscore=3 |>\n<| a tags=julia,functional-programming\
    \ dscore=2 |>\nBuilding on Mister's answer, here is a solution using macros to\
    \ generate specialized functions.\nThe main idea is to use the generated functions\
    \ as a macro to expand them when they are used without arguments:\n<code>\njulia>\
    \ function filter_by_prefix(strings::Vector{String}, prefix::String)\n       \
    \    filter_by_prefix_$(string(prefix))(strings)\n       end\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid identifier name \"->\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpz4wo7a2p.jl:8\nin expression starting at /tmp/tmpz4wo7a2p.jl:8\n"
  stdout: ''
  timestamp: 1659978321
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    prefix += \"@\"\n    l = length(strings)\n    filtered = Vector{String}()\n\
    \    for i in 1:l\n        if strings[i] == prefix\n            push!(filtered,\
    \ strings[i])\n        end\n    end\n    return filtered\nend\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\"\
    , \"cde\", \"array\"], \"@\")\n</cell>\n<text>\n6.2 filter by suffix\nGiven an\
    \ array of strings and a suffix, filter out all strings from the array that end\
    \ with a given suffix.\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpeh72e2cl.jl:18\nin expression starting at\
    \ /tmp/tmpeh72e2cl.jl:18\n"
  stdout: ''
  timestamp: 1659978321
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \"\"\"Filter an input vector of strings only for ones that start with\
    \ a given prefix.\"\"\"\n    for i in 1:length(strings)\n        if strings[i]\
    \ startswith prefix\n            strings[i]\n        else\n            \"\"\n\
    \        end\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"prefix\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpb57jl0rv.jl:10\nin expression starting at /tmp/tmpb57jl0rv.jl:10\n"
  stdout: ''
  timestamp: 1659978321
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n  local result = []\n  for str in strings\n    if str == prefix\n      result\
    \ = [prefix]\n      break\n    elseif str != \"\"\n      result = [prefix; str]\n\
    \    end\n  end\n  return result\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp_qphptg3.jl:21

    '
  stdout: "test set: Test Failed at /tmp/tmp_qphptg3.jl:25\n  Expression: candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]\n   Evaluated: [\"xxx\"] == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_qphptg3.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_qphptg3.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     1      2\n"
  timestamp: 1659978322
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    filter(x->startswith(prefix, x), strings)\nend\n</cell>\n<text>\nPart\
    \ 2. Data transformations and analysis\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_6xlhhc7.jl:10\nin expression starting at\
    \ /tmp/tmp_6xlhhc7.jl:10\n"
  stdout: ''
  timestamp: 1659978321
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \n    found_prefix = false\n    result = Vector{String}()\n    \n    for\
    \ s in strings\n        if startswith(prefix, s)\n            found_prefix = true\n\
    \        else\n            push!(result, s)\n        end\n    end\n    \n    if\
    \ !found_prefix\n        push!(result, prefix)\n    end\n    \n    return result\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpx5cf3000.jl:28

    '
  stdout: "test set: Test Failed at /tmp/tmpx5cf3000.jl:31\n  Expression: candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([])\n   Evaluated: [\"john\"] == String[]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpx5cf3000.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpx5cf3000.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpx5cf3000.jl:32\n  Expression: candidate([\"xxx\", \"asd\"\
    , \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]\n   Evaluated: [\"asd\", \"xxy\", \"john doe\", \"xxxAAA\"] == [\"\
    xxx\", \"xxxAAA\", \"xxx\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpx5cf3000.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpx5cf3000.jl:30\nTest Summary:\
    \ | Fail  Total\ntest set      |    2      2\n"
  timestamp: 1659978323
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    for s in strings \n        if startswith(s, prefix) \n            yield(s)\
    \ \n        end\n    end\n    return strings\nend\n</cell>\n<text>\nLet's test\
    \ the filter_by_prefix function:\nusing Test\n\n@testset begin\n\ncandidate =\
    \ filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpl7_g_8h5.jl:15\nin expression starting at\
    \ /tmp/tmpl7_g_8h5.jl:15\n"
  stdout: ''
  timestamp: 1659978321
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    map((string) -> startswith(string[1], prefix) ? string[1] : nothing,strings)\n\
    end\n</cell>\n<code language=julia-1.1>\nfilter_by_prefix([\"abc\", \"bcd\", \"\
    cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 1.21: Filter for strings\
    \ ending in \"ab\"\nHint: use filter_by_prefix\nusing Test\n\n@testset begin\n\
    \ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\"\
    ) == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpaa80pw1l.jl:10\nin expression starting at\
    \ /tmp/tmpaa80pw1l.jl:10\n"
  stdout: ''
  timestamp: 1659978321
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    return filter(str->str==prefix, strings)\nusing Test\n\n@testset begin\n\
    \ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\"\
    ) == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpfaykc0z4.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpfaykc0z4.jl:1\n\
    in expression starting at /tmp/tmpfaykc0z4.jl:1\n"
  stdout: ''
  timestamp: 1659978321
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    # Write your code here\n    return strings\nend \n</cell>\n<code language=julia-1.4>\n\
    filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\n\
    Exercise 5\nWrite a function that filters an input vector of numbers only for\
    \ those that are less than a given value.\n>>> filter_by_value([], 0.0)\n[]\n\
    >>> filter_by_value([2, 5, 8], 2.0)\n[2, 5]\n>>> filter_by_value([2, 5, 8], 5.0)\n\
    []\n>>> filter_by_value([2, 5, 8], 9.0)\n[2, 5, 8]\n>>> filter_by_value([2, 5,\
    \ 8], 6.0)\n[]\n>>> filter_by_value([2, 5, 8], 4.0)\n[2, 5, 8]\n>>> filter_by_value([2,\
    \ 5, 8], 1.0)\n[2, 5, 8]\n>>> filter_by_value([2, 5, 8], 0.6)\n[2, 5, 8]\n>>>\
    \ filter_by_value([2, 5, 8], 0.0)\n[2, 5, 8]\n\"\"\"\nusing Test\n\n@testset begin\n\
    \ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\"\
    ) == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_2agj5tl.jl:11\nin expression starting at\
    \ /tmp/tmp_2agj5tl.jl:11\n"
  stdout: ''
  timestamp: 1659978322
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    if prefix == \"\"\n        strings\n    else\n        filter(x -> startswith(prefix,\
    \ x), strings)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp3tko1_sh.jl:16

    '
  stdout: "test set: Test Failed at /tmp/tmp3tko1_sh.jl:20\n  Expression: candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]\n   Evaluated: [\"xxx\", \"xxx\"] == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3tko1_sh.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3tko1_sh.jl:18\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     1      2\n"
  timestamp: 1659978323
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    for word in strings\n        if word[1] == 'a'\n            continue \n\
    \        end\n        if word[1] == 'a'\n            continue \n        end\n\
    \        if word[1] == prefix\n            continue \n        end\n        push!(result,\
    \ word)\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 2 errored,
    0 broken.

    in expression starting at /tmp/tmpzcptpiqg.jl:24

    '
  stdout: "test set: Error During Test at /tmp/tmpzcptpiqg.jl:27\n  Test threw exception\n\
    \  Expression: candidate(Vector{String}([]), \"john\") == Vector{String}([])\n\
    \  UndefVarError: result not defined\n  Stacktrace:\n   [1] filter_by_prefix(strings::Vector{String},\
    \ prefix::String)\n     @ Main /tmp/tmpzcptpiqg.jl:20\n   [2] macro expansion\n\
    \     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpzcptpiqg.jl:27 [inlined]\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpzcptpiqg.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpzcptpiqg.jl:28\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  UndefVarError: result not defined\n\
    \  Stacktrace:\n   [1] filter_by_prefix(strings::Vector{String}, prefix::String)\n\
    \     @ Main /tmp/tmpzcptpiqg.jl:18\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpzcptpiqg.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpzcptpiqg.jl:26\nTest Summary:\
    \ | Error  Total\ntest set      |     2      2\n"
  timestamp: 1659978324
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    if contains(prefix, strings[1])\n        deleteat(strings, 1)\n    end\n\
    \    return strings\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 2 errored,
    0 broken.

    in expression starting at /tmp/tmp2zl9__a_.jl:15

    '
  stdout: "test set: Error During Test at /tmp/tmp2zl9__a_.jl:18\n  Test threw exception\n\
    \  Expression: candidate(Vector{String}([]), \"john\") == Vector{String}([])\n\
    \  BoundsError: attempt to access 0-element Vector{String} at index [1]\n  Stacktrace:\n\
    \   [1] getindex\n     @ ./array.jl:861 [inlined]\n   [2] filter_by_prefix(strings::Vector{String},\
    \ prefix::String)\n     @ Main /tmp/tmp2zl9__a_.jl:8\n   [3] macro expansion\n\
    \     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [4] macro expansion\n     @ /tmp/tmp2zl9__a_.jl:18 [inlined]\n   [5] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp2zl9__a_.jl:17\ntest set:\
    \ Error During Test at /tmp/tmp2zl9__a_.jl:19\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  UndefVarError: deleteat not defined\n\
    \  Stacktrace:\n   [1] filter_by_prefix(strings::Vector{String}, prefix::String)\n\
    \     @ Main /tmp/tmp2zl9__a_.jl:9\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp2zl9__a_.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp2zl9__a_.jl:17\nTest Summary:\
    \ | Error  Total\ntest set      |     2      2\n"
  timestamp: 1659978324
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n  if length(prefix) == 0\n    return strings\n  else\n    filtered = [s for\
    \ s in strings if startswith(s, prefix)]\n    return filtered\nend\n</cell>\n\
    <text>\nExercise. Define a function filter_by_suffix() that filters an input vector\
    \ of strings only for ones that end with a given suffix.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptnvf6r1s.jl:14\nin expression starting at\
    \ /tmp/tmptnvf6r1s.jl:14\n"
  stdout: ''
  timestamp: 1659978322
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    if prefix == \"\"\n        return strings\n    else\n        matching_prefixes\
    \ = filter( x -> starts_with_prefix(x, prefix), strings)\n        matching_prefixes\
    \ \n    end\nend\n</cell>\n<code language=julia-0.5>\nfilter_by_prefix([\"abc\"\
    , \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<code language=julia-0.5>\nfilter_by_prefix(vector,\
    \ prefix)\n</cell>\n<code language=julia-0.5>\n# filter by length\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwp13pckk.jl:15\nin expression starting at\
    \ /tmp/tmpwp13pckk.jl:15\n"
  stdout: ''
  timestamp: 1659978323
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    strings = strings[start:end] for start = 1:size(strings, 1)\n    strings\
    \ = strings[prefix:end] for start = 1:size(strings, 1)\n    strings\nend\n</cell>\n\
    <text>\nExercise 10\nWrite a function that can concatenate two lists, given as\
    \ arguments x and y, with duplicates removed.\nFor example,\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"function\" at /tmp/tmpwucsbuk7.jl:7 expected\
    \ \"end\", got \"for\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpwucsbuk7.jl:8\n\
    in expression starting at /tmp/tmpwucsbuk7.jl:8\n"
  stdout: ''
  timestamp: 1659978323
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    indices = Vec{}\n    for str in strings\n        push!(indices, find(str\
    \ == prefix))\n    end\n    return filter!(indices, (x -> x) -> (x > length(prefix)))\n\
    end\n</cell>\n<text>\nThe above function filters our strings down to those that\
    \ start with the prefix \"a\". Now let's try and filter the entire list for all\
    \ strings that start with a given prefix:\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"x -> begin\n    # /tmp/tmp9cx2kf69.jl, line\
    \ 12\n    x\nend\" is not a valid function argument name around /tmp/tmp9cx2kf69.jl:12\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmp9cx2kf69.jl:1\nin expression starting\
    \ at /tmp/tmp9cx2kf69.jl:1\n"
  stdout: ''
  timestamp: 1659978323
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    filter!(x -> startswith(prefix, x), strings)\nend\n</cell>\n<text>\nAnd\
    \ of course, the filter_by_regex function as well.\nusing Test\n\n@testset begin\n\
    \ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\"\
    ) == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzbzsm34j.jl:10\nin expression starting at\
    \ /tmp/tmpzbzsm34j.jl:10\n"
  stdout: ''
  timestamp: 1659978323
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    if all(string.starts(prefix) for string in strings) \n        return strings\
    \ \n    else \n        return [] \nend \nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpnbjv9cel.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpnbjv9cel.jl:1\n\
    in expression starting at /tmp/tmpnbjv9cel.jl:1\n"
  stdout: ''
  timestamp: 1659978323
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    prefix_index = findall(prefix \u2264 strings)\n    \n    if prefix_index\
    \ == empty\n        return strings\n    else\n        prefix_index = prefix_index[1]\n\
    \        \n        prefix_length = length(prefix)\n        \n        result =\
    \ []\n        \n        for i in prefix_index\n            start = max(0, i-prefix_length)\n\
    \            end = min(i+prefix_length, length(strings[i]))\n            result\
    \ = [strings[i] for i in start:end]\n            \n        end\n    end\nend\n\
    </cell>\n<text>\nFilter Functions\nThe filter functions allow us to specify conditions\
    \ to keep or filter our input vector. Below we implement a filter function that\
    \ will remove the strings that begin with a given prefix.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"start:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxida3tgw.jl:22\nin expression\
    \ starting at /tmp/tmpxida3tgw.jl:22\n"
  stdout: ''
  timestamp: 1659978323
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    if string(prefix) <> '' \n        begin = prefix \n        end = prefix\n\
    \    else\n        begin = ''\n        end = prefix\n    end\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \">\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnkoe2rng.jl:8\nin expression starting at /tmp/tmpnkoe2rng.jl:8\n"
  stdout: ''
  timestamp: 1659978323
- exit_code: 0
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    if prefix != \"\" && prefix[1] == \":\"\n        prefix = prefix[2:end]\n\
    \    end\n    return filter(x -> startswith(x, prefix), strings)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    2      2

    '
  stdout: ''
  timestamp: 1659978322
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    strings = [x for x in strings if x.starts_with(prefix)]\n    return strings\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmpv0o5rx15.jl:13

    '
  stdout: "test set: Error During Test at /tmp/tmpv0o5rx15.jl:17\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  type String has no field\
    \ starts_with\n  Stacktrace:\n    [1] getproperty\n      @ ./Base.jl:42 [inlined]\n\
    \    [2] (::var\"#1#2\"{String})(x::String)\n      @ Main ./none:0\n    [3] iterate\n\
    \      @ ./iterators.jl:447 [inlined]\n    [4] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [5] grow_to!\n      @ ./array.jl:797 [inlined]\n    [6] collect\n\
    \      @ ./array.jl:721 [inlined]\n    [7] filter_by_prefix(strings::Vector{String},\
    \ prefix::String)\n      @ Main /tmp/tmpv0o5rx15.jl:8\n    [8] macro expansion\n\
    \      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \    [9] macro expansion\n      @ /tmp/tmpv0o5rx15.jl:17 [inlined]\n   [10] macro\
    \ expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmpv0o5rx15.jl:15\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    1      1      2\n"
  timestamp: 1659978325
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    # No need to filter since it's already filtered\n    if strings == []\n\
    \        return strings\n    \n    # Get the index of the prefix element (index\
    \ == -1 if no element starts with prefix)\n    index = getindex(strings,prefix)\n\
    using Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpayfv94vl.jl:1\nin expression starting at /tmp/tmpayfv94vl.jl:1\n"
  stdout: ''
  timestamp: 1659978324
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    prefix_str = tostring(prefix)\n    \n    filtered = filter(x -> startswith(tostring(x),\
    \ prefix_str), strings)\n    \n    return filtered\nend\n</cell>\n<text>\nThe\
    \ function filter_by_prefix can also be used to filter out all elements from a\
    \ vector that don't match a given predicate. For example, filter_by_prefix can\
    \ be used to filter out all elements from a vector that don't start with a given\
    \ prefix.\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0rqc4q1x.jl:14\nin expression starting at\
    \ /tmp/tmp0rqc4q1x.jl:14\n"
  stdout: ''
  timestamp: 1659978324
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    strings = strings[:]\n    strings = filter((x) -> startswith(prefix(x),\
    \ x), strings)\n    return strings\nend\n</cell>\n<code language=julia-1.6>\n\
    @time strings = filter_by_prefix(allstrings, \"a\")\n</cell>\n<text>\nExercise:\
    \ Write a function that returns all strings starting with a given prefix.  Call\
    \ it filter_by_prefix().\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkihh114a.jl:12\nin expression starting at\
    \ /tmp/tmpkihh114a.jl:12\n"
  stdout: ''
  timestamp: 1659978324
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    prefix_length = length(prefix)\n    \n    result = []\n    for string\
    \ in strings\n        if string.starts_with(prefix)\n            result[prefix_length+1\
    \ : end] = string[prefix_length+1 :]\n        end\n    end\n    return result\n\
    end\n</cell>\n<code language=julia-1.4>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpft768ecp.jl:18\nin expression starting at\
    \ /tmp/tmpft768ecp.jl:18\n"
  stdout: ''
  timestamp: 1659978324
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    if length(strings) < 1 \n        return strings\n    elseif prefix ==\
    \ \"\" \n        return strings\n    elseif prefix ~= strings[1]\n        return\
    \ strings\n    else\n        return filter_by_prefix(strings[2:end-1], prefix)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\"\
    ) == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsgj1fyoq.jl:18\nin expression starting at\
    \ /tmp/tmpsgj1fyoq.jl:18\n"
  stdout: ''
  timestamp: 1659978324
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    return filter(x -> startswith(prefix, x), strings)\nend\n</cell>\n<text>\n\
    3. filter_by_regex\nFilters an input vector of strings only for the ones that\
    \ match a given regular expression.\n>>> filter_by_regex([], \"^a.*bc$\")\n[]\n\
    >>> filter_by_regex([\"abc\", \"bcd\", \"cde\", \"array\"], \"^a.*bc$\")\n[\"\
    abc\", \"array\"]\n\"\"\"\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpf1smyj5d.jl:10\nin expression starting at\
    \ /tmp/tmpf1smyj5d.jl:10\n"
  stdout: ''
  timestamp: 1659978324
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    map(x -> startswith(prefix) ? (x : \"\") : strings) \nend\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 2 errored,
    0 broken.

    in expression starting at /tmp/tmpxadg3p76.jl:12

    '
  stdout: "test set: Error During Test at /tmp/tmpxadg3p76.jl:15\n  Test threw exception\n\
    \  Expression: candidate(Vector{String}([]), \"john\") == Vector{String}([])\n\
    \  MethodError: no method matching (::var\"#1#2\"{Vector{String}, String})()\n\
    \  Closest candidates are:\n    (::var\"#1#2\")(!Matched::Any) at /tmp/tmpxadg3p76.jl:8\n\
    \  Stacktrace:\n   [1] map(f::var\"#1#2\"{Vector{String}, String})\n     @ Base\
    \ ./abstractarray.jl:2965\n   [2] filter_by_prefix(strings::Vector{String}, prefix::String)\n\
    \     @ Main /tmp/tmpxadg3p76.jl:8\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpxadg3p76.jl:15 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpxadg3p76.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpxadg3p76.jl:16\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  MethodError: no method matching (::var\"\
    #1#2\"{Vector{String}, String})()\n  Closest candidates are:\n    (::var\"#1#2\"\
    )(!Matched::Any) at /tmp/tmpxadg3p76.jl:8\n  Stacktrace:\n   [1] map(f::var\"\
    #1#2\"{Vector{String}, String})\n     @ Base ./abstractarray.jl:2965\n   [2] filter_by_prefix(strings::Vector{String},\
    \ prefix::String)\n     @ Main /tmp/tmpxadg3p76.jl:8\n   [3] macro expansion\n\
    \     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [4] macro expansion\n     @ /tmp/tmpxadg3p76.jl:16 [inlined]\n   [5] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpxadg3p76.jl:14\nTest Summary:\
    \ | Error  Total\ntest set      |     2      2\n"
  timestamp: 1659978326
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    if strings == [] || prefix == \"\"\n        return strings\n    strings_new\
    \ = []\n    for string in strings\n        if string.starts_with(prefix) \n  \
    \          strings_new += string\n    end\n    strings_new\nend\n</cell>\n<code\
    \ language=julia-1.6>\nfilter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n</cell>\n<text>\nThe function filter_by_prefix returns a vector of\
    \ strings such that only those starting with prefix are kept. Note that prefix\
    \ is case-sensitive.\nusing Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplnclegev.jl:17\nin expression starting at\
    \ /tmp/tmplnclegev.jl:17\n"
  stdout: ''
  timestamp: 1659978324
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    \n    if length(strings)==0\n        return []\n    else\n        if length(strings)==1\n\
    \            return [prefix in strings]\n        else\n            res = []\n\
    \            map(x -> push!(res, prefix in x), (strings))\n            return\
    \ res\n    end\nend\n</cell>\n<code language=julia-1.4>\nfilter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<code language=julia-1.4>\n\
    using Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8cvuahid.jl:20\nin expression starting at\
    \ /tmp/tmp8cvuahid.jl:20\n"
  stdout: ''
  timestamp: 1659978324
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    strings = strings[startsWith(strings, prefix)]\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"a\"], \"a\")\n</cell>\n<text>\nThe function filter_by_prefix(...)\
    \ returns a new vector, because it changes the original vector, it is best practice\
    \ to copy the original vector before performing operations on it.\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptasknhxb.jl:10\nin expression starting at\
    \ /tmp/tmptasknhxb.jl:10\n"
  stdout: ''
  timestamp: 1659978324
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    if length(strings) <= 1 \n        return strings\n    end1 = size(strings,\
    \ 1)\n    if prefix == \"\"\n        return strings\n    elseif prefix == strings[end]\n\
    \        return strings\n    else\n        start = findfirst(prefix == strings[end],\
    \ 1)\n        end = start\n        while end < end1\n            end += 1\n  \
    \          if strings[end] == prefix \n                end\n                break\n\
    \            end\n        end\n        return strings[start:end]\n    end\nend\n\
    </cell>\n<code language=julia-1.0>\n# test\nfilter_by_prefix([\"a\",\"b\",\"c\"\
    ], \"a\")\n</cell>\n<code language=julia-1.0>\n# test\nfilter_by_prefix([\"a\"\
    ,\"b\",\"c\"], \"x\")\n</cell>\n<code language=julia-1.0>\n# test\nfilter_by_prefix([\"\
    a\",\"b\",\"c\"], \"y\")\n</cell>\n<text>\nA filter function that removes all\
    \ strings that start with one letter from a given set\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"end\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpdx8obrov.jl:18\nin expression starting at /tmp/tmpdx8obrov.jl:18\n"
  stdout: ''
  timestamp: 1659978324
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    filter_by_prefix(strings, prefix, \"\")\nend\n</cell>\n<text>\nThe function\
    \ can be applied directly to the input vector\nusing Test\n\n@testset begin\n\n\
    candidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]), \"john\"\
    ) == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8j9asvk9.jl:10\nin expression starting at\
    \ /tmp/tmp8j9asvk9.jl:10\n"
  stdout: ''
  timestamp: 1659978324
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that start with\
    \ a given prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
    \ \n    if length(strings) < 1 || length(prefix) == 0\n        return strings\n\
    \    end\n    result = strings[:]\n    for (i, string) in enumerate(strings)\n\
    \        if prefix == string\n            delete!(result, i)\n        end\n  \
    \  end\n    return result\nend\n</cell>\n<text>\n5.5.3 Sort a vector of strings\n\
    using Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpl2yzs3q6.jl:19\nin expression starting at\
    \ /tmp/tmpl2yzs3q6.jl:19\n"
  stdout: ''
  timestamp: 1659978324
