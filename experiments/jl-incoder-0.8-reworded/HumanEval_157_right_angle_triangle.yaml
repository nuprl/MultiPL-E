name: HumanEval_157_right_angle_triangle
language: jl
prompt: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return true\
  \ if the three\n    sides form a right-angled triangle, false otherwise.\n    A\
  \ right-angled triangle is a triangle in which one angle is right angle or \n  \
  \  90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    true\n \
  \   >>> right_angle_triangle(1, 2, 3)\n    false\n    \"\"\"\nfunction right_angle_triangle(a::Int64,\
  \ b::Int64, c::Int64)::Bool \n"
tests: "using Test\n\n@testset begin\n\ncandidate = right_angle_triangle;\n\t@test(candidate(3,\
  \ 4, 5) == true)\n\t@test(candidate(1, 2, 3) == false)\n\t@test(candidate(10, 6,\
  \ 8) == true)\n\t@test(candidate(2, 2, 2) == false)\n\t@test(candidate(7, 24, 25)\
  \ == true)\n\t@test(candidate(10, 5, 7) == false)\n\t@test(candidate(5, 12, 13)\
  \ == true)\n\t@test(candidate(15, 8, 17) == true)\n\t@test(candidate(48, 55, 73)\
  \ == true)\n\t@test(candidate(1, 1, 1) == false)\n\t@test(candidate(2, 2, 10) ==\
  \ false)\nend\n"
completions: ["    # Write your code in Julia\n    return ((a==b) || (a==c) || (b==c))",
  "    if abs(c-b) == abs(a-b) and abs(c-b) == abs(a-c):\n        return true\n  \
    \  else\n        return false", "    triangle = a + b > c\n    triangle2 = b +\
    \ c > a\n    triangle3 = c + a > b\n    return triangle or triangle2 or triangle3\n\
    </code>\n<|/ a |>\n<| c |>\n`right_angle_triangle(1, 3, 2)` is false, right? It\
    \ should be `a = 1` and `b = 3` and `c = 2`.\n<|/ c |>\n<| c |>\nyes. `right_angle_triangle(3,\
    \ 4, 5)` would be false.\n<|/ c |>\n<| c |>\nThanks for the comment, I forgot\
    \ to update `a` when checking for `b` and `c`\n<|/ c |>\n<| c |>\nThe question\
    \ was for \"right-angled triangles\" not just triangles with one angle being either\
    \ right or 90 degree. Your code will return true for right_angle_triangle(3, 4,\
    \ 5) and not right_angle_triangle(3, 4, 6).\n<|/ c |>\n<| a tags=julia dscore=5\
    \ |>\n<code>", "    if abs(a-b) >= abs(b - c) \n        and abs(b - c) >= abs(a\
    \ - b)\n        then a > b and b > c\n        else a == b or b == c or c == a\n\
    \    else \n        false\n    end \nend\n</code>\n<|/ a tags=julia |>\n<| a tags=julia\
    \ |>\nI like using SymPy's solve()\n<code>\nusing SymPy\nsolve([cos(x), sin(x)])\n\
    </code>\nwhich returns \n<code>\n\u23A1   0\u23A4\n\u23A2 - \u23A5\n\u23A3   1\u23A6\
    \n</code>\n<|/ a dscore=2 |>\n<| a dscore=1 |>\nI got it thanks to those who tried\
    \ to help.\nThe code I used:\n<code>", "    if b == c && b == a && a > c || a\
    \ == c && a == b\n        true\n    else\n        false\n    end\nend", "    if\
    \ a*b > c*a && c*b > a*c \n        then true\n        else false\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\n# test code\nright_angle_triangle(3, 4, 5)\n\
    right_angle_triangle(1, 2, 3)\n</cell>\n<text>\nProblem 3.6\nGiven the lengths\
    \ of the sides of a right angled triangle. \n    return the area of the triangle\n\
    \    \n    Ex:\n    >>> right_angled_triangle(3, 4, 5)\n    9.0\n    >>> right_angled_triangle(4,\
    \ 5, 4)\n    7.0\n    \"\"\"", "    if b > c && b > a && c > a\n    then true\n\
    \    else false\n    end\nend", "    \n    if b == c \n        \n        return\
    \ True\n    \n    elseif b > c \n        \n        return false\n    \n    elseif\
    \ b < c \n        \n        return false\n    \n    elseif b == c \n        \n\
    \        return true\n    \n    else\n        \n        return false\n       \
    \ \n    end\n    \nend\n    \n    \n</cell>\n<text>\nWrite a function right_angle_triangle\
    \ which accepts an array of three integers and returns true if the triangle formed\
    \ by these integers is a right-angled triangle, false otherwise. Recall that if\
    \ a triangle is not right-angled, then every three sides must be equal in length.",
  "    if a == 0 && b == 0 && c == 0\n    then true\n    else\n        if a > 0 &&\
    \ b > 0 && c > 0 && a > b && a > c && b > c\n        then true\n        else\n\
    \            if a == 0 || b == 0 || c == 0 || a == b || a == c || b == c\n   \
    \         then true\n            else false\n        end\n    end\nend\n</cell>\n\
    <text>\nExercise\nImplement the function is_triangular(). By definition a triangular\
    \ matrix is a matrix with only 1 line and 1 column. It is constructed as follows:\
    \ \n$$ M = \\begin{bmatrix}\n    m & 1 \\\n    1 & m \\\n    \\end{bmatrix} $$\n\
    The function is provided below", "    \n    \n    \"\"\"\n    Calculate the length\
    \ of side 1\n    \"\"\"\n    function side_one(a::Int64, b::Int64, c::Int64)::Int64\n\
    \    \n    \n    \"\"\"\n    Calculate the length of side 2\n    \"\"\"\n    function\
    \ side_two(a::Int64, b::Int64, c::Int64)::Int64\n    \n    \n    \"\"\"\n    Calculate\
    \ the length of side 3\n    \"\"\"\n    function side_three(a::Int64, b::Int64,\
    \ c::Int64)::Int64\n    \n    \n    \"\"\"\n    Calculate the length of side 4\n\
    \    \"\"\"\n    function side_four(a::Int64, b::Int64, c::Int64)::Int64\n   \
    \ \n    \n    \"\"\"\n    Calculate the length of side 5\n    \"\"\"\n    function\
    \ side_five(a::Int64, b::Int64, c::Int64)::Int64\n    \n    \n    \"\"\"\n   \
    \ Calculate the length of side 6\n    \"\"\"\n    function side_six(a::Int64,\
    \ b::Int64, c::Int64)::Int64\n    \n    \n    \"\"\"\n    Calculate the length\
    \ of side 7\n    \"\"\"\n    function side_seven(a::Int64, b::Int64, c::Int64)::Int64\n\
    \    \n    \n    \"\"\"\n    Calculate the length of side 8\n    \"\"\"\n    function\
    \ side_eight(a::Int64, b::Int64, c::Int64)::Int64\n    \n    \n    \"\"\"\n  \
    \  Calculate the length of side 9\n    \"\"\"\n    function side_nine(a::Int64,\
    \ b::Int64, c::Int64)::Int64\n    \n    \n    \"\"\"\n    Calculate the length\
    \ of side 10\n    \"\"\"\n    function side_ten(a::Int64, b::Int64, c::Int64)::Int64\n\
    \    \n    \n    \"\"\"\n    Calculate the length of side 11\n    \"\"\"\n   \
    \ function side_eleven(a::Int64, b::Int64, c::Int64)::Int64\n    \n    \n    \"\
    \"\"\n    Calculate the length of side 12\n    \"\"\"\n    function side_twelve(a::Int64,\
    \ b::Int64, c::Int64)::Int64\n    \n    \n    \"\"\"\n    Calculate the length\
    \ of side 13\n    \"\"\"\n    function side_thirteen(a::Int64, b::Int64, c::Int64)::Int64\n\
    \    \n    \n    \"\"\"\n    Calculate the length of side 14\n    \"\"\"\n   \
    \ function side_fourteen(a::Int64, b::Int64, c::Int64)::Int64\n    \n    \n  \
    \  \"\"\"\n    Calculate the length of side 15\n    \"\"\"\n    function side_fifteen(a::Int64,\
    \ b::Int64, ", "    return (c-a)==(b+a)\nend ", "    \n    if a>b && b>c && a>c\
    \ \n        return true\n    return false\n\"\"\"\n    Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n    sides form a left-angled\
    \ triangle, false otherwise.\n    A left-angled triangle is a triangle in which\
    \ one angle is left angle or \n    180 degree.\n    Example:\n    >>> left_angle_triangle(3,\
    \ 4, 5)\n    true\n    >>> left_angle_triangle(1, 2, 3)\n    false\n    \"\"\"",
  "    angle_a = (180-(a))%(360)\n    angle_b = (180-(b))%(360)\n    angle_c = (180-(c))%(360)\n\
    \    angle_sum = angle_a + angle_b + angle_c\n    return angle_sum > 0\n    \"\
    \"\"\n    Return true if the triangle formed by the sides a, b, c is right-angled,\
    \ false otherwise.\n    A right-angled triangle is a triangle in which one angle\
    \ is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3,\
    \ 4, 5)\n    true\n    >>> right_angle_triangle(1, 2, 3)\n    false\n    \"\"\"\
    \n</code>\n<|/ a |>\n<| c |>\nIt would be great if you could comment your solution\
    \ and explain it a little bit.\n<|/ c |>\n<| c |>\nThis solution works great for\
    \ right angled triangles. Any idea how to get this to work for non-right angled\
    \ triangles? I have tried a bunch of different things with this but nothing seems\
    \ to work. I have also tried to use an if statement to check if angle_b >angle_a\
    \  and angle_b <angle_c but it gives me an error because of the fact that the\
    \ angles are negative. Thanks for the help!\n<|/ c |>\n<| a tags=math,trigonometry,wolfram-mathematica,geometry,triangle\
    \ |>\nAs mentioned by, this is easily solvable with a little arithmetic, not with\
    \ trigonometry. Let's start by defining the length of the sides:\n<code>\nf[ax_,bx_,cx_]\
    \ := ax^2+bx^2+cx^2\n</code>\nWe can now solve it with a simple quadratic equation:\n\
    <code>\nSolve[x^2 + 2*x*y + y^2 == 1, x, y]\n</code>\nwhich returns\n<code>\n\
    {x -> 4.0, y -> 5.0}\n</code>\nIf this solution is valid, then a right triangle\
    \ has length 4 and the hypotenuse is 5. In Mathematica, you can easily check that\
    \ with\n<code>\nShow[f[4,5,0]]\n</code>\nIf it is not valid, then there may be\
    \ an equation which gives a right angled triangle. Let's check this out. First,\
    \ let's check whether the quadratic equation holds for a solution:\n<code>\nShow[f[4,5,0],\
    \ Sqrt[16]]\n</code>\nwhich returns\n<code>\n{x -> 4, y -> 5}\n</code>\nNow let's\
    \ check which two sides are opposite. If we substitute in the value of x we get\n\
    <code>\nShow[f[4,5,0], Sqrt[16] - f[4,5,0]]\n</code>\nwhich returns\n", "    c\
    \ > a && c > b\nend\n</cell>\n<text>\n5.5 Largest Triangle Area\nThe largest triangle\
    \ area is the one that has the largest area of any triangle with sides of length\
    \ 3 or more. Write a function that returns the area of a triangle that has sides\
    \ a, b, c. The function must return 0 if the triangle is not right-angled, non-zero\
    \ if it is.", "    if a > b + c || b > c + a || c > a + b \n        then false\
    \ \n        else true\n    end\nend", "    #TODO: write the function\n    a<b\n\
    \    b<c\n    a>=b\n    a>=c\n    b>=c\nend", "    |\n    true\nend\n</code>\n\
    <|/ a |>\n<| a |>\nThe other answers have given you the mathematics, but they\
    \ fail to show you how to implement the algorithm on paper. \nI'll explain how\
    \ to implement this in code. The key thing to understand is that you should be\
    \ able to realize two cases:", "    \"\"\"\n    Given the lengths of the three\
    \ sides of a triangle. Return true if the three\n    sides form a right-angled\
    \ triangle, false otherwise.\n    A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3,\
    \ 4, 5)\n    true\n    >>> right_angle_triangle(1, 2, 3)\n    false\n    \"\"\"\
    \n    if b == c\n        return true\n    else\n        if a > b\n           \
    \ if a > c\n                return true\n            else\n                return\
    \ false\n        else if a > c\n            if a > b\n                return true\n\
    \            else\n                return false\n        else\n            if\
    \ b > c\n                if b > a\n                    return true\n         \
    \       else\n                    return false\n            else\n           \
    \     if b > a\n                    return true\n                else\n      \
    \              return false", "    if a == b && b == c && c == a then return true\
    \ \n    else if a + b < c then return false\n    else if b + c < a then return\
    \ false\n    else if a + c < b then return false\n    else return true \nend \n\
    </code>\n<|/ a |>\n<| a dscore=0 tags=combinations,math,algorithm |>\nThere are\
    \ a lot of combinations possible, e.g. when there are 3 items and 5 possible permutations\
    \ of those 3 items, there are over 10^52 possible combinations.\nTo find all combinations\
    \ efficiently, you must have an algorithm that can test whether two items are\
    \ adjacent in some order (e.g. adjacent to each other) or not (e.g. adjacent to\
    \ each other), which would take a lot of time.\nHowever, there exist several simple\
    \ and efficient ways to determine if two items are adjacent to each other.\nFor\
    \ example, we can test whether two items are adjacent to each other in one direction\
    \ or the other, by testing the sum of the items in each direction.\nE.g. we have\
    \ three items:\n<code>\nA = 3\nB = 4\nC = 5\n</code>\nWe can test whether they\
    \ are adjacent in the order A,B,C or C,A,B or C,B,A. Here we do it in two directions,\
    \ so we have two sums:\n<code>\nA +  B = 7\nB +  C = 6\nC +  A = 3\n</code>\n\
    All the items are the same in either sum, so we know that they are adjacent in\
    \ some order.\nSimilarly, we can test whether they are adjacent in the order B,C,A\
    \ or A,B,C by summing up:\n<code>\nB +  C = 5\nC +  A = 4\nA +  C = 3\n</code>\n\
    All the items are the same in either sum, so we know that they are adjacent in\
    \ some order.\nWe can also test whether they are adjacent in the order A,C,B or\
    \ A,C,B or B,A,C or B,C,A. Here we do it in three directions, so we have three\
    \ sums:\n<code>\nA +  C = 4\nB +  A = 3\nC +  B = 6\n</code>\nAll the items are\
    \ the same in either sum, so we know that they are adjacent in some order.\nWe\
    \ are only interested in combinations of adjacent items and can easily test whether\
    \ two items are adjacent to each other in one direction by adding them together.\n\
    <|/ a |>\n<| a dscore=0 tags=combinations,math,algorithm |>\nYou can check if\
    \ two numbers are equal, by summing them and comparing with the original numbers.\
    \ You might do this for 3 or 4 numbers. ", "    (a * b * c >0) && a^2 + b^2 +\
    \ c^2 >0\nend\n</code>\n<code>", "    #return a==b or a==c or b==c\n    return\
    \ (b==c) or (b!=c and abs(b-c)==abs(a-b))\n</code>\nThis function returns true\
    \ or false depending if given triangle is right angle or 90 degree.\n<|/ a |>\n\
    <| c |>\nThe proposed code fails for `right_angle_triangle(2, 3, 4)`. To fix it,\
    \ simply change the `==` to `>=`.\n<|/ c |>\n<| c |>\nI added the code that I\
    \ think is more readable and elegant, thanks\n<|/ c |>\n<| a |>\n<code>", "  \
    \  if a > b and a > c and b > c then\n        true\n    else\n        false\n\
    \    end\nend", "    if a == 0 || b == 0 || c == 0 || a + b > c || a + c > b ||\
    \ b + c > a\n        false\n    else\n        true\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Returns the area of the triangle defined by sides a, b and c. \n\"\
    \"\"", "    \n    \n    \n    \"\"\"\n    Given the lengths of the three sides\
    \ of a triangle. Return true if the three\n    sides form a right-angled triangle,\
    \ false otherwise.\n    A right-angled triangle is a triangle in which one angle\
    \ is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3,\
    \ 4, 5)\n    true\n    >>> right_angle_triangle(1, 2, 3)\n    false\n    \"\"\"",
  "    \n\"\"\"\n    Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n    sides form a right-angled triangle, false otherwise.\n   \
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    \    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    true\n\
    \    >>> right_angle_triangle(1, 2, 3)\n    false\n    \"\"\"", "    if a==b ||\
    \ a==c || b==c \n        return true\n    else \n        return false\nend\n \
    \   \"\"\"\n    right_angle_triangle=\"\"\"\n    Given the lengths of the three\
    \ sides of a triangle. Return true if the three\n    sides form a right-angled\
    \ triangle, false otherwise.\n    A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3,\
    \ 4, 5)\n    true\n    >>> right_angle_triangle(1, 2, 3)\n    false\n    \"\"\"",
  "    | a==0 || b==0 || c==0 = false\n    | a < 0 || b < 0 || c < 0 = false\n   \
    \ | a == 0 || b == 0 || c == 0 = false\n    | a == 0 || b < 0 || c < 0 = false\n\
    \    | a < 0 || b == 0 || c < 0 = false\n    | a == 0 || b == 0 || c < 0 = false\n\
    \    | a < 0 || b < 0 || c == 0 = false\n    | a < 0 || b == 0 || c == 0 = false\n\
    \    | a < 0 || b < 0 || c < 0 = false\n    | a == 0 || b == 0 || c < 0 = false\n\
    \    | a < 0 || b == 0 || c < 0 = false\n    | a < 0 || b < 0 || c < 0 = false\n\
    \    | a < 0 || b == 0 || c < 0 = false\n    | a < 0 || b < 0 || c < 0 = false\n\
    \    | a < 0 || b == 0 || c < 0 = false\n    | a < 0 || b < 0 || c < 0 = false\n\
    \    | a == 0 || b == 0 || c < 0 = false\n    | a < 0 || b == 0 || c < 0 = false\n\
    \    | a < 0 || b < 0 || c < 0 = false\n    | a == 0 || b == 0 || c < 0 = false\n\
    \    | a < 0 || b == 0 || c < 0 = false\n    | a < 0 || b < 0 || c < 0 = false\n\
    \    | a == 0 || b == 0 || c < 0 = false\n    | a < 0 || b == 0 || c < 0 = false\n\
    \    | a < 0 || b < 0 || c < 0 = false\n    | a < 0 || b == 0 || c < 0 = false\n\
    \    | a < 0 || b < 0 || c < 0 = false\n    | a < 0 || b == 0 || c < 0 = false\n\
    \    | a < 0 || b < 0 || c < 0 = false\n    | a < 0 || b == 0 || c < 0 = false\n\
    \    | a < 0 || b < 0 || c < 0 = false\n    | a == 0 || b == 0 || c < 0 = false\n\
    \    | a < 0 || b == 0 || c < 0 = false\n    | a < 0 || b < 0 || c < 0 = false\n\
    \    | a == 0 || b == 0 || c < 0 = false\n    | a < 0 || b == 0 || c < 0 = false\n\
    \    | a < 0 || b < 0 || c < 0 = false\n    | a < 0 || b == 0 || c < 0 = false\n\
    \    | a < 0 || b < 0 || c < 0 = false\n    | a == 0 || b == 0 || c < 0 = false\n\
    \    | a < 0 || b == 0 || c < 0 = false\n    | a < 0 || b < 0 || c < 0 = false\n\
    \    | a < 0 || b == 0 || c < 0 = false\n    | a < 0 || b < 0 || c < ", "    \"\
    \"\"\n    Given the lengths of the three sides of a triangle. Return true if the\
    \ three\n    sides form a right-angled triangle, false otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    true\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    false\n    \"\"\"\n    if b == 0 or c == 0:\n        return false\n\
    \    elif b > c:\n        return true\n    else:\n        return (a * b) % c ==\
    \ 0", '    return (a + b > c) and ((a - b > c) or ((b - a) > c))', "    \"\"\"\
    \n    Given the lengths of the three sides of a triangle. Return true if the three\n\
    \    sides form a right-angled triangle, false otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    true\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    false\n    \"\"\"\n</code>\n<|/ a tags=python,function,type-annotation,function\
    \ dscore=1 |>\n<| c |>\nIf you're going to use type annotations like `a: Int64`\
    \ then why not `a: int`?\n<|/ c |>\n<| c |>\nYou're right, the type annotations\
    \ can be removed in this case, but I put them there for consistency (it won't\
    \ change the function in any way).\n<|/ c |>\n<| c |>\nYeah, I know, it just makes\
    \ your answer less readable. You're free to leave it in, though, I just think\
    \ it's more helpful to have the annotations there in the first place.\n<|/ c |>\n\
    <| c |>\nThis is an excellent answer! I would also add that it's probably better\
    \ to use `@njit` than `@jit` if the function is supposed to be called often enough\
    \ that the performance overhead of `@jit` matters to you. It's possible for `@jit`\
    \ to be much faster than `@njit` for some cases, e.g. if your function is called\
    \ less often or if the compiler has good heuristics to see which parts of the\
    \ function are actually going to be jitted.\n<|/ c |>\n<| a dscore=0 tags=python,function,type-annotation,function\
    \ |>\nI prefer a more pythonic approach:\n<code>\nfrom typing import Union", " \
    \   if a < b && b < c && c < a then \n        return true\n    else if b == c\
    \ then \n        return a % 2 == 0\n    elseif a == c then \n        return b\
    \ == 0\n    elseif b == a then \n        return c == 0\n    else return false\n\
    end \n\"\"\"\n    \n    \n\"\"\"\n    right_angle_triangles\n        Takes a list\
    \ of three integers representing the lengths of the three sides\n        of a\
    \ triangle and returns true if the triangle is right-angled, false otherwise.\n\
    \        A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n        90 degree.\n        Example:\n        >>> right_angle_triangles([3,\
    \ 4, 5])\n        [true, false, false]\n        >>> right_angle_triangles([1,\
    \ 2, 3])\n        [false, false, false]\n    \"\"\"", "    return (a*a + b*b -\
    \ c*c) == 0 \nend \n</code>\n<|/ a |>\n<| a tags=math,python,geometry |>\nA line\
    \ is right angle if \n<code>\n(x0,y0) = (x1,y1)\n</code>\nThe above is true when\
    \ angle is greater than 90 degree.\n<|/ a dscore=0 |>\n<| a dscore=0 |>\nIf there\
    \ are any points (x,y) and the length of any line from that point is l, then this\
    \ line is right angle if and only if l^2/2 lies between 0 and l\n<code>\nimport\
    \ math", "    |a, b| == (a + b + c) % 2 \n    |a, b| == (a + b + c + 1) %2\n \
    \   |a, b| == (a + b + c + 2) %2\n    |a, b, c| == (a + b + c + 3) %2\n    |a,\
    \ b, c| == (a + b + c + 4) % 2 \n    |a, b, c| == (a + b + c + 5) % 2 \n    |a,\
    \ b, c| == (a + b + c + 6) % 2 \n    |a, b, c| == (a + b + c + 7) % 2 \n    |a,\
    \ b, c| == (a + b + c + 8) % 2 \n    |a, b, c| == (a + b + c + 9) % 2 \n    |a,\
    \ b, c| == (a + b + c + 10) % 2 \n    |a, b, c| == (a + b + c + 11) % 2\n    |a,\
    \ b, c| == (a + b + c + 12) % 2 \n    |a, b, c| == (a + b + c + 13) % 2 \n   \
    \ |a, b, c| == (a + b + c + 14) % 2 \n    |a, b, c| == (a + b + c + 15) % 2\n\
    \    |a, b, c| == (a + b + c + 16) % 2 \n    |a, b, c| == (a + b + c + 17) % 2\n\
    \    |a, b, c| == (a + b + c + 18) % 2\n    |a, b, c| == (a + b + c + 19) % 2\n\
    \    |a, b, c| == (a + b + c + 20) % 2\n    |a, b, c| == (a + b + c + 21) % 2\n\
    \    |a, b, c| == (a + b + c + 22) % 2\n    |a, b, c| == (a + b + c + 23) % 2\n\
    \    |a, b, c| == (a + b + c + 24) % 2\n    |a, b, c| == (a + b + c + 25) % 2\n\
    \    |a, b, c| == (a + b + c + 26) % 2\n    |a, b, c| == (a + b + c + 27) % 2\n\
    \    |a, b, c| == (a + b + c + 28) % 2\n    |a, b, c| == (a + b + c + 29) % 2\n\
    \    |a, b, c| == (a + b + c + 30) % 2\n    |a, b, c| == (a + b + c + 31) % 2\n\
    \    |a, b, c| == (a + b + c + 32) % 2\n    |a, b, c| == (a + b + c + 33) % 2\n\
    \    |a, b, c| == (a + b + c + 34) % 2\n    |a, b, c| == (a + b + c + 35) % 2\n\
    \    |a, b, c| == (a + b + c + 36) % ", "    return ((a-b) * (a-c) > (b+c) * (b-a))\n\
    </code>\n<|/ a dscore=3 |>\n<| c |>\nThis is definitely the easiest way to solve\
    \ the problem.\n<|/ c |>\n<| c |>\nThis also works if the triangle is rotated.\
    \ Just need to rotate the triangle 90 degrees clockwise and compare the angles.\
    \ Example: triangle rotated 90 degrees clockwise: `right_angle(a::Int64, b::Int64,\
    \ c::Int64)::Bool = (180 - abs((180 - a) - abs(180 - b) - abs(180 - c)) <= 180)`\n\
    <|/ c |>\n<| a dscore=3 |>\n<code>\ndef isRightAngleTriangle(a,b,c):\n    ab =\
    \ abc = bc =  0.0\n    # find the angles of triangles\n    ab = math.sqrt((a -\
    \ b) * (a - b) + c * (c - a))\n    bc = math.sqrt((b - c) * (b - c) + a * (a -\
    \ b))\n    abc = math.sqrt((ab - bc) * (ab - bc) + bc * (bc - ab))", "    if a\
    \ < 0 or b < 0 or c < 0\n    error(\"The angles must be positive!\")\n    elsif\
    \ a + b > c and a + c > b and b + c > a\n    true\n    else\n    false\nend\n\"\
    \"\"\n    Define the area of a triangle using right triangles \n    \"\"\"", " \
    \   if a == b and a == c or b == c and b == a or c == a and c == b then\n    \
    \    return true\n    else\n        return false\n    end\nend\n</cell>\n<cell>\n\
    \"\"\"\nGiven the lengths of the three sides of a triangle. Return true if the\
    \ three\nsides form a left-angled triangle, false otherwise.\nA left-angled triangle\
    \ is a triangle in which one angle is left angle or \n180 degree.\nExample: \n\
    \    >>> left_angle_triangle(3, 4, 5)\n    false\n    >>> left_angle_triangle(1,\
    \ 2, 3)\n    true\n\"\"\"", "\ta::Int64 >= 0\n\tb::Int64 >= 0\n\tc::Int64 >= 0\n\
    \ta+b+c == 1\n\tb+c == c\n\ta*(c + b) <= 0\n\t(a*c - b*a)/(a*c - b*a) >= 90\n\t\
    b*c >= 0\n\t((a*a + b*b)*c >= 0)\nend", "    if a + b > c and b + c > a and c\
    \ + a > b \n    then true\n    else false\n    end\n</code>\n<|/ a |>\n<| c |>\n\
    Just a tip: When you see an `if` statement with only one expression you can drop\
    \ the `then`. And when you find yourself doing `if true then true else false else\
    \ ...` just think about replacing it with `if ...`. Just my two cents.\n<|/ c\
    \ |>\n<| a tags=if-statement,julia,syntax |>\nIt's called an \"if\" statement.\
    \  It's not a function.\n<|/ a dscore=4 |>\n<| a tags=if-statement,julia,syntax\
    \ |>\nAn if statement is a statement that evaluates to true or false. \n<code>\n\
    julia> if 2 > 1 \n       println(\"2 is greater than 1\")\n       else\n     \
    \  println(\"2 is less than 1\")\n       end\n2 is less than 1", "    (x1,y1)\
    \ = (0,0)\n    (x2,y2) = (0,0)\n    (x3,y3) = (0,0)\n    (x4,y4) = (0,0)\n   \
    \ (x5,y5) = (0,0)\n    (x6,y6) = (0,0)\n    (x7,y7) = (0,0)\n    (x8,y8) = (0,0)\n\
    \    (x9,y9) = (0,0)\n    (x10,y10) = (0,0)\n    (x11,y11) = (0,0)\n    (x12,y12)\
    \ = (0,0)\n    (x13,y13) = (0,0)\n    (x14,y14) = (0,0)\n    (x15,y15) = (0,0)\n\
    \    (x16,y16) = (0,0)\n    (x17,y17) = (0,0)\n    (x18,y18) = (0,0)\n    (x19,y19)\
    \ = (0,0)\n    (x20,y20) = (0,0)\n    x1, y1 = getCoords(a,b,c)\n    x2, y2 =\
    \ getCoords(a,b,b)\n    x3, y3 = getCoords(a,b,c)\n    x4, y4 = getCoords(c,b,c)\n\
    \    x5, y5 = getCoords(b,b,b)\n    x6, y6 = getCoords(b,b,c)\n    x7, y7 = getCoords(c,b,b)\n\
    \    x8, y8 = getCoords(c,c,c)\n    x9, y9 = getCoords(b,b,b)\n    x10, y10 =\
    \ getCoords(b,b,c)\n    x11, y11 = getCoords(b,b,b)\n    x12, y12 = getCoords(b,c,b)\n\
    \    x13, y13 = getCoords(b,b,c)\n    x14, y14 = getCoords(c,b,c)\n    x15, y15\
    \ = getCoords(c,c,c)\n    x16, y16 = getCoords(c,c,b)\n    x17, y17 = getCoords(b,c,b)\n\
    \    x18, y18 = getCoords(b,b,c)\n    x19, y19 = getCoords(b,b,b)\n    x20, y20\
    \ = getCoords(c,c,c)\n    \n    if x1>x2\n        putCoords(x1,y1,x2,y2)\n   \
    \     putCoords(x3,y3,x4,y4)\n        putCoords(x5,y5,x6,y6)\n        putCoords(x7,y7,x8,y8)\n\
    \        putCoords(x9,y9,x10,y10)\n        putCoords(x11,y11,x12,y12)\n      \
    \  putCoords(x13,y13,x14,y14)\n        putCoords(x15,y15,x16,y16)\n        put",
  "    \"\"\"\n    When you only have 3 input arguments: a, b, c, \n    it calculates\
    \ if the 3 numbers are the right angle triangle. \n    \n    Use this function\
    \ to determine if a triangle is a right angle triangle. \n    You can call the\
    \ function with 3 integer arguments: a, b, c\n    \n    Don't write any code here!\
    \ The purpose of this \n    function is to test your understanding of the \n \
    \   triangle function\n    \n    The function should return true if the triangle\
    \ \n    is a right angle triangle and false if it isn't. \n    \"\"\"", "\"\"\"\
    \n    Given the lengths of the three sides of a triangle. Return true if the three\n\
    \    sides form a right-angled triangle, false otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    true\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    false\n    \"\"\"\n    return (((a + b) < c) == ((c + a) < b)) \n\
    \"\"\"\n    >>> right_angle_triangle(3, 2, 4)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"", "    \nend\n\"\"\"\n    Given the lengths of\
    \ the three sides of a triangle. Return true if the three\n    sides form a right-angled\
    \ triangle, false otherwise.\n    A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3,\
    \ 4, 5)\n    true\n    >>> right_angle_triangle(1, 2, 3)\n    false\n    \"\"\"",
  "    if a+b > c and a+c > b and b+c > a \n    then true \n    else false \n    end\n\
    end\n</cell>\n<cell>\nright_angle_triangle(3, 4, 5)\n</cell>\n<text>\nProblem\
    \ 8\nWrite a function that returns true if the number is even and false if it\
    \ is odd.", "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    sides form a right-angled triangle, false otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    true\n\
    \    >>> right_angle_triangle(1, 2, 3)\n    false\n    \"\"\"", "\"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return true if the three\n   \
    \ sides form a right-angled triangle, false otherwise.\n    A right-angled triangle\
    \ is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n\
    \    >>> right_angle_triangle(3, 4, 5)\n    true\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    false\n    \"\"\"", "        if a==b && b==c \n        then return\
    \ true \n        else if a==c \n        then return false \n        else if b==c\
    \ \n        then return false\n        else if a>b\n        then return false\n\
    \        else if a<b\n        then return true\n        else return false", " \
    \   if a > b and a > c and b > c then\n        false\n    else\n        a == b\
    \ or a == c or b == c\n    end\nend\n</cell>\n<code language=julia-1.0>", '    return
    (a + b > c) || (b + c > a) || (c + a > b)', "    if b != c \n    then return true\n\
    \    else if b == c\n    then return true\n    else if b > c \n    then return\
    \ false\n    else return false\nend \n</cell>\n<code language=julia-1.1>\nright_angle_triangle(3,\
    \ 4, 5)\n</cell>\n<code language=julia-1.1>\nright_angle_triangle(1, 2, 3)\n</cell>\n\
    <code language=julia-1.1>\nright_angle_triangle(12, 30, 3)\n</cell>\n<text>\n\
    Question 2:\nWrite a function that checks if a triangle is convex. Write a test\
    \ function to test the function.", "    if a==b and a==c then return true\n  \
    \  if a==b or a==c then return false\n    if b==c then return false\n    if a==0\
    \ or b==0 or c==0 then return false\n    else return (abs(b-a)>abs(c-a) and abs(c-b)>abs(b-a))\n\
    end\n</cell>\n<text>\nExercise 4: Triangle area formula\nUse the formula for the\
    \ triangle area here, to calculate the area of a triangle given its sides:", " \
    \   if a==0 || b==0 || c==0 || (a-b)==(c-a) || (b-c)==(c-b) \n    then true else\
    \ false\nend\n\"\"\"\n    Given the lengths of the three sides of a triangle.\
    \ Return true if the three\n    sides form a right-angled triangle, false otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    true\n\
    \    >>> right_angle_triangle(1, 2, 3)\n    false\n    \"\"\"", "    | a > b =\
    \ false\n    | b > c = false\n    | c > a = false\n    | a = b or a = c or b =\
    \ c = false\n    | a * b * c >= 1 = false\n    | a * b > a = b\n    | b * c >\
    \ b = c\n    | a * b + c * a < 1 = false\n    | a * b + c * a > 1 = true\n   \
    \ | b * c - a * a < 1 = false\n    | b * c - a * a > 1 = true\n    | c * b - a\
    \ * a < 1 = false\n    | c * b - a * a > 1 = true\n    | a * c - b * b < 1 = false\n\
    \    | a * c - b * b > 1 = true\n    | b * c - a * a < 1 = false\n    | b * c\
    \ - a * a > 1 = true\n    | c * a - b * b < 1 = false\n    | c * a - b * b > 1\
    \ = true\n    | a * b * c < 1 = false\n    | a * b * c > 1 = true\n    | b * c\
    \ - a * a < 1 = false\n    | b * c - a * a > 1 = true\n    | c * a - b * b < 1\
    \ = false\n    | c * a - b * b > 1 = true\n    | a * c + b * b < 1 = false\n \
    \   | a * c + b * b > 1 = true\n    | b * c - a * a < 1 = false\n    | b * c -\
    \ a * a > 1 = true\n    | c * a - b * b < 1 = false\n    | c * a - b * b > 1 =\
    \ true\n    | a * c - b * b < 1 = false\n    | a * c - b * b > 1 = true\n    |\
    \ b * c - a * a < 1 = false\n    | b * c - a * a > 1 = true\n    | c * a - b *\
    \ b < 1 = false\n    | c * a - b * b > 1 = true\n    | a * b * c < 1 = false\n\
    \    | a * b * c > 1 = true\n    | b * c - a * a < 1 = false\n    | b * c - a\
    \ * a > 1 = true\n    | c * a - b * b < 1 = false\n    | c * a - b * b > 1 = true\n\
    \    | a * c - b * b < 1 = false\n    | a * c - b * b > 1 = true\n    | b * c\
    \ - a * a < 1 = false\n    | b * c - a * a > 1 = true\n    | c * a - b * b < 1\
    \ = false\n    | c * a - b * b > 1 = true\n    | a * b * c < 1 = false\n    |\
    \ a * b * c > 1 = true\n    | b * c - a * a ", '    if a > b and b > c and c >
    a then true else false end', "    if (b - a) > (c - a) \n        then false \n\
    \        else true\nend\n    \"\"\"\n    Write a function that checks whether\
    \ a triangle is equilateral or is\n    isoceles. A triangle is equilateral if\
    \ it is equilateral, isosceles\n    if it is isosceles, and a triangle is isosceles\
    \ if it is\n    equilateral, isosceles, or 90 degrees. A triangle is isosceles\
    \ if\n    it is equilateral, isosceles, or 180 degrees. An equilateral triangle\
    \ is\n    a triangle where one angle is 180 degrees or 360 degrees. An isoceles\
    \ \n    triangle is one that is neither equilateral nor isosceles; it is a \n\
    \    triangle with two angles that are either 180 degrees or 360 degrees.\n  \
    \  Example:\n    >>> equilateral_triangle(4, 5, 6)\n    true\n    >>> equilateral_triangle(3,\
    \ 4, 5)\n    false\n    >>> equilateral_triangle(4, 3, 5)\n    true\n    >>> equilateral_triangle(4,\
    \ 3, 1)\n    false\n    >>> equilateral_triangle(3, 4, 5)\n    false\n    >>>\
    \ equilateral_triangle(3, 5, 1)\n    true\n    >>> equilateral_triangle(5, 3,\
    \ 1)\n    true\n    >>> equilateral_triangle(5, 5, 1)\n    true\n    >>> equilateral_triangle(5,\
    \ 4, 1)\n    false\n    >>> equilateral_triangle(1, 5, 4)\n    false\n    >>>\
    \ equilateral_triangle(5, 3, 6)\n    false\n    >>> equilateral_triangle(1, 5,\
    \ 6)\n    false\n    >>> equilateral_triangle(4, 3, 6)\n    false\n    >>> equilateral_triangle(6,\
    \ 4, 1)\n    false\n    >>> equilateral_triangle(5, 6, 1)\n    false\n    >>>\
    \ equilateral_triangle(7, 4, 6)\n    false\n    >>> equilateral_triangle(6, 7,\
    \ 1)\n    false\n    >>> equilateral_triangle(6, 4, 7)\n    false\n    >>> equilateral_triangle(7,\
    \ 6, 1)\n    false\n    >>> equilateral_triangle(7, 5, 6)\n    false\n    >>>\
    \ equilateral_triangle(6, 5, 7)\n    false\n    >>> equilateral_triangle(6, 5,\
    \ 6)\n    false\n    >>> equilateral_triangle(5, 6, 7)\n    false\n    >>> equilateral_triangle(5,\
    \ 4, 7)\n    false\n    >>> equilateral_triangle(5, 7, 6)\n    ", "    if c <=\
    \ a || b <= c || b == c then return false else return true \n\"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return true if the three\n   \
    \ sides form a right-angled triangle, false otherwise.\n    A right-angled triangle\
    \ is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n\
    \    >>> right_angle_triangle(3, 4, 5)\n    true\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    false\n    \"\"\"", "        if a < b && a < c \n           return\
    \ true\n        else if a < b\n            if a < c\n               return true\n\
    \            else if b < c\n               return true\n            else if b\
    \ == a\n               return false\n            else if a == c\n            \
    \   return true\n            else if b == c\n               return false\n   \
    \         end\n        end\n    end\nend\n\"\"\"\nGiven the lengths of the three\
    \ sides of a right angle triangle. Return true if the \ntriangle is equilateral,\
    \ false otherwise. \nAn equilateral triangle is a triangle in which all three\
    \ angles are equal, \nor 180 degree.\nExample: \n>>> equilateral_triangle(3, 4,\
    \ 5)\ntrue\n>>> equilateral_triangle(1, 2, 3)\nfalse\n\"\"\"", '    return b >
    0 and c > 0 and a < b and b < c', "    if a+b+c==0 then false else ( (a>b && a>c)\
    \ || (b>a && b>c) || (c>a && c>b) )\nend\n</code>\n<|/ a tags=julia dscore=2 |>\n\
    <| a |>\n<code>", "    if a + b + c < 18\n        false\n    elseif a * b > c\
    \ * c \n        false\n    elseif b * c > a * b\n        true\n    else\n    \
    \    false\n    end\nend\n</code>\n<|/ a |>\n<| c |>\nThis is the most pythonic\
    \ solution!\n<|/ c |>\n<| a tags=julia,python |>\nIn Julia, you could define a\
    \ function that checks if the two given points are equidistant from the origin:\n\
    <code>", '    # write your function here', "    \n    (a, b, c)\nend", "    \n\
    \    if a>b and a>c \n        then return true \n    elseif b>a and b>c \n   \
    \     then return true \n    elseif c>a and c>b\n        then return true \n \
    \   else return false\nend\n\"\"\"\n    Given the lengths of the three sides of\
    \ a triangle. Return true if the three\n    sides form a right-angled triangle,\
    \ false otherwise.\n    A right-angled triangle is a triangle in which one angle\
    \ is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3,\
    \ 4, 5)\n    true\n    >>> right_angle_triangle(1, 2, 3)\n    false\n    \"\"\"",
  "    if c==0 || b==0 || a==0\n        return true\n    else if  (((b-a)*(c-a))-(c*b))%2==0\n\
    \        return false\n    else\n        return true\nend\n</cell>\n<code language=julia-1.6>",
  "    if is_valid_triangle(a, b, c) == true \n    then\n        if is_valid_triangle(a\
    \ + b, c, a) == true \n        then \n            true \n        else \n     \
    \       false\n        end\n    else \n        false\n    end\nend\n\"\"\"\n \
    \   Given the lengths of the three sides of a right angled triangle. Return true\
    \ if the three\n    sides form a equilateral triangle, false otherwise.\n    Example:\n\
    \    >>> equilateral_triangle(3, 5, 4)\n    true\n    >>> equilateral_triangle(4,\
    \ 5, 1)\n    false\n    \"\"\"", "        (a*a + b*b > c*c) ? true : false \n\
    </code>\nThe answer was given from here.\n<|/ a |>\n<| c |>\nThis doesn't work\
    \ for me, since I must use Python3, and I can't import `numpy` as it is only in\
    \ Python2.\n<|/ c |>\n<| a dscore=0 tags=python,pycharm |>\nThe reason for the\
    \ crash is probably the fact that you are using Python 3 and the above code works\
    \ in Python 2. Try using the below code.\n<code>\nimport math\ndef is_right_angled_triangle(side1,\
    \ side2, side3):\n    a, b, c = side1, side2, side3\n    ab = math.sqrt(a**2 +\
    \ b**2)\n    ac = math.sqrt(a**2 + c**2)\n    bc = math.sqrt(b**2 + c**2)\n  \
    \  ab_ac = ab*ac\n    return ab_ac - (ab*bc) > (bc*ab)\n</code>\n<|/ a |>\n<|\
    \ a |>\n<code>\nfrom math import sqrt", "    \n    if a > b + c || b > c + a ||\
    \ c > a + b \n    then \n        return false \n    else \n        return true\n\
    \    end\nend\n</cell>\n<code language=julia-1.0>\n# Plot the three sides of a\
    \ triangle ", "    if a == b and c == b then return true\n    if a == c or b ==\
    \ c or c == a then return false\n    if abs(b - c) == a then return false\n  \
    \  if abs(b - a) == a then return false\n    if abs(c - a) == a then return false\n\
    \    return true\n    \"\"\"", "    if a > b > c \n    then \n        if 90 >\
    \ b > c \n        then \n            if 90 > a > c \n            then \n     \
    \           return true \n            else \n                return false \n \
    \       else \n            return false \n    else \n        return false \n\"\
    \"\"\nGiven a list of integers. Return true if the list contains a 3, false otherwise.\n\
    Example:\n>>> contains_three([1,2,3])\ntrue\n>>> contains_three([4, 6, 2])\nfalse\n\
    \"\"\"", "    if abs(a-b)==abs(a-c) and abs(b-c)==abs(b-a) then return true else\
    \ return false\nend\n\"\"\"\n    Given the lengths of the three sides of a triangle.\
    \ Return true if the three\n    sides form a left-angled triangle, false otherwise.\n\
    \    A left-angled triangle is a triangle in which one angle is left angle or\
    \ \n    180 degree.\n    Example:\n    >>> left_angle_triangle(3, 4, 5)\n    false\n\
    \    >>> left_angle_triangle(1, 2, 3)\n    true\n    \"\"\"", "    if a + b >\
    \ c and c + b > a then true else false\n</code>\n<|/ a dscore=1 tags=math,geometry\
    \ |>\n<| a |>\nI made a little program for you that does that\n<code>\nimport\
    \ math", "    \n    area_triangles = a*b + b*c\n    if area_triangles == 0\n \
    \       false\n    else\n        if b*c < a\n            if a*c < b\n        \
    \        if b*a + a*c < c\n                    return true\n                else\n\
    \                    return false\n            else\n                return false\n\
    \        else\n            if a*c < b\n                return true\n         \
    \   else\n                return false\nend\n    \n\"\"\"\n    Given the lengths\
    \ of the two sides of a triangle. Return true if the two\n    sides form an equilateral\
    \ triangle, false otherwise.\n    An equilateral triangle is a triangle in which\
    \ one angle is equal\n    to the side opposite to the triangle. \n    Example:\n\
    \    >>> equilateral_triangle(3, 4, 5)\n    true\n    >>> equilateral_triangle(1,\
    \ 2, 3)\n    false\n    \"\"\"", "    if a == 0 || b == 0 || c == 0 \n       \
    \ return true\n    return (a * b + c * a == c * b) or (a * c + b * a == b * c)\n\
    end\n</cell>\n<cell>\nright_angle_triangle(3, 4, 5)\n</cell>\n<cell>\nright_angle_triangle(3,\
    \ 4, 10)\n</cell>\n<cell>\nright_angle_triangle(3, 4, 2)\n</cell>\n<cell>\nright_angle_triangle(3,\
    \ 4, 6)\n</cell>\n<text>\nExercise:\nWrite a function which checks if a triangle\
    \ is equilateral or scalene.\nExample input: triangle(3, 4, 5)\nExample output:\
    \ true\nTrue or false?", "</code>\nNow that you have a function that determines\
    \ if a triangle is right angled, you can create a function that finds all the\
    \ triangles that a triangle is right angled to.\nYou will have to implement the\
    \ following functions:\n<code>\ntriangle_are_right_angled(a::Int64, b::Int64,\
    \ c::Int64)\ntriangle_are_right_angled(a::Int64, b::Int64, c::Int64)::Bool\n</code>\n\
    The first function determines if a triangle is right angled to:\n<code>", "  \
    \  return (a + b > c) and (a + c > b) and (a + c > b)\n</code>\nNow to check if\
    \ the triangle is a right angle triangle or not\n<code>", "    if a == 0 || b\
    \ == 0 || c == 0 then return false end\n    if a * a + b * b == c * c then return\
    \ true end\n    if a > b + c and b > c + a then return false end\n    return true\n\
    end\n</cell>\n<cell>", "    \n    if a==0 || b==0 || c==0\n        true\n    else\
    \ if a>0 && b>0 && c>0\n        90 > (b - a) * (c - a) > 0\n    else\n       \
    \ false\n    end\nend\n</cell>\n<code language=julia-0.6>\nright_angle_triangle(3,\
    \ 4, 5)\n</cell>\n<text>\nExercise 17: Implement the function is_right_triangle().\
    \ This function should return a boolean value indicating whether all three sides\
    \ are valid triangle or not (valid triangle means they form a right-angled triangle).\
    \ As a reminder, triangle is a right-angled triangle if and only if one of the\
    \ sides is 90 degree.", "    if b == c || a == b || a == c || (b == a and c >\
    \ 0) || (b == c and c < 0)\n    true\n    else\n    false\nend\n\"\"\"\n    Find\
    \ if a triangle has a right angle formed by 3 sides.\n    Example:\n    >>> right_angled_triangle(3,\
    \ 4, 5)\n    true\n    >>> right_angled_triangle(1, 2, 3)\n    false\n    \"\"\
    \"", "    \n    if a>b and a>c and b>c and a+b>c:\n        return true\n    else\
    \ return false\nend \n</cell>\n<code language=julia-1.6>\n\"\"\"\n    Given the\
    \ lengths of the three sides of a triangle. Return true if the three\n    sides\
    \ form a right-angled triangle, false otherwise.\n    A right-angled triangle\
    \ is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n\
    \    >>> right_angle_triangle(3, 4, 5)\n    true\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    false\n    \"\"\"", "    \n    \"\"\"\n    From Wikipedia :\n   \
    \ Given the lengths of the three sides of a triangle. Return true if the three\n\
    \    sides form a right-angled triangle, false otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    true\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    false\n    \"\"\"\n    \n    if a > b and a > c:\n        return\
    \ true\n    elif b > c and a < b:\n        return true\n    elif c > b and c >\
    \ a:\n        return true\n    else:\n        return false\n    ", "    \n\"\"\
    \"\n    Given the lengths of the three sides of a triangle. Return true if the\
    \ three\n    sides form a right-angled triangle, false otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    true\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    false\n    \"\"\"", "    | a == 0 || b == 0 || c == 0 || a == b ||\
    \ a == c || b == c || a + b + c == 0 || a == a + b + c \n    = true\n    | b >\
    \ c && (a + b < c) = right_angle_triangle(b, a, c) || right_angle_triangle(b,\
    \ a, c)\n    | a > c && (b + c < a) = right_angle_triangle(a, b, c) || right_angle_triangle(a,\
    \ b, c) \n    | b > c && a + c < b = right_angle_triangle(a, b, c) || right_angle_triangle(a,\
    \ b, c)\n    | a > c && b + c < a = right_angle_triangle(a, b, c) || right_angle_triangle(a,\
    \ b, c)\n    | c > a && (a + b < c) = right_angle_triangle(a, b, c) || right_angle_triangle(a,\
    \ b, c) \n    | c > a && (b + c < a) = right_angle_triangle(a, b, c) || right_angle_triangle(a,\
    \ b, c) \n    | c > a && a + c < b = right_angle_triangle(a, b, c) || right_angle_triangle(a,\
    \ b, c)\n    | c > a && b + c < a = right_angle_triangle(a, b, c) || right_angle_triangle(a,\
    \ b, c)\n    | a + b < c  = right_angle_triangle(a, b, c) || right_angle_triangle(a,\
    \ b, c) \n    | a + b < c  = right_angle_triangle(a, b, c) || right_angle_triangle(a,\
    \ b, c) \n    | b + c < a  = right_angle_triangle(a, b, c) || right_angle_triangle(a,\
    \ b, c) \n    | b + c < a  = right_angle_triangle(a, b, c) || right_angle_triangle(a,\
    \ b, c) \n    | a + c < b  = right_angle_triangle(a, b, c) || right_angle_triangle(a,\
    \ b, c) \n    | a + c < b  = right_angle_triangle(a, b, c) || right_angle_triangle(a,\
    \ b, c) \n    | b + c < a  = right_angle_triangle(a, b, c) || right_angle_triangle(a,\
    \ b, c) \n    | b + c < a  = right_angle_triangle(a, b, c) || right_angle_triangle(a,\
    \ b, c) \n    | a + c < b  = right_angle_triangle(a, b, c) || right_angle_triangle(a,\
    \ b, c) \n    | a + c < b  = right_angle_triangle(a, b, c) || right_angle_triangle(a,\
    \ b, c) \n    | b + c < a  = right_angle_triangle(a, b, c) || right_angle_triangle(a,\
    \ b, c) \n    | b + c < a  = right_angle_triangle(a, b, c) || right_angle_triangle(a,\
    \ b, c) \n    | a + b + c < c = right_angle_triangle(a, b, c) || right_angle_triangle(a,\
    \ b, c) \n    | a + b + c < c = right_angle_triangle(a, b, c) || right_angle_triangle(a,\
    \ b, c) \n    | b + c + a < a = right_angle_triangle(a, b, c) || right_angle_triangle(a,\
    \ b, c) \n    | b + c + a ", "    if a*a + b*b == c*c then \n        true\n  \
    \  else \n        false\n    end\nend\n\"\"\"\n    Define a function to check\
    \ if a number is even or odd\n    Example:\n    >>> even_odd_number(2)\n    false\n\
    \    >>> even_odd_number(3)\n    true\n    \"\"\"", "    if a > b + c || a > c\
    \ + b || a > b + c || b > a + c || b > c + a || b > a + c \n    then false \n\
    \    else true\n    end\nend\n</code>\n<|/ a dscore=0 |>\n<| c |>\nI suggest to\
    \ add an explanation or example to the code you have posted\n<|/ c |>\n<| c |>\n\
    I have added the explanation and example. Hope it is helpful.\n<|/ c |>\n<| a\
    \ tags=julia,geometry |>\nI suppose you have your 3 sides as an array. The simplest\
    \ solution would be to sum them and check whether they are equal:\n<code>", " \
    \       right_angle_triangle = True\n        if b > a or b < c or c > a\n    \
    \            right_angle_triangle = False\n        end\n        return right_angle_triangle\n\
    end\n</cell>\n<code language=julia-1.5>\nright_angle_triangle(4, 3, 1)\n</cell>\n\
    <code language=julia-1.5>", "    if a==0 or b==0 or c==0 \n        return true\n\
    \    if a==b or a==c \n        return false\n    if b==c \n        return true\n\
    \    if a>b and a>c\n        return true\n    if b>a and b>c\n        return false\n\
    \    if a>b and b>c\n        return false\n    if a>b or b>a \n        return\
    \ false\n    if a==b or a==c or c==b\n        return true\n    return false",
  "    \"\"\"\n    Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n    sides form a right-angled triangle, false otherwise.\n   \
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    \    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    true\n\
    \    >>> right_angle_triangle(1, 2, 3)\n    false\n    \"\"\"\n    \n    \n# %% ",
  "    if a==b or a==c or b==c:\n        return True\n    else \n        return False",
  "    return (abs (a-b)) == (abs (c-b))\nend \n</cell>\n<code language=julia-0.4>\n\
    # test the functions\nright_angle_triangle(4, 3, 1)\nright_angle_triangle(1, 3,\
    \ 2)\nright_angle_triangle(2, 1, 3)\nright_angle_triangle(1, 2, 1)\nright_angle_triangle(2,\
    \ 1, 1)\nright_angle_triangle(3, 1, 2)\nright_angle_triangle(2, 1, 3)\n</cell>\n\
    <code language=julia-0.4>\n# test the functions\nright_angle_triangle(4, 3, 4)\n\
    right_angle_triangle(1, 3, 3)\nright_angle_triangle(2, 1, 2)\nright_angle_triangle(1,\
    \ 2, 1)\nright_angle_triangle(2, 1, 1)\nright_angle_triangle(3, 1, 2)\nright_angle_triangle(2,\
    \ 1, 3)\n</cell>\n<text>\nQuestion 3\nWrite a function that checks if a triangle\
    \ is equilateral or not.", "    if a+b>c and a>c && b>c \n        then true\n\
    \        else false\nend\n</cell>\n<code language=julia-0.6>\nright_angle_triangle(3,4,5)\n\
    </cell>\n<code language=julia-0.6>", "    if a > c || b > c || a > b \n      \
    \  false\n    else \n        true\nend\n</code>\nI hope you can read this code\
    \ and understand it. This is not optimized code. Feel free to correct any mistakes.\n\
    <|/ a tags=julia |>\n<| a tags=julia dscore=1 |>\nI didn't find any solution which\
    \ use only functions in maths library.\nBut using only functions in Base Julia\
    \ it is possible.\n<code>\n# input: length of one side\n# output: true if input\
    \ is a right angle triangle\n# example: right_angle_triangle(10)\n# example: right_angle_triangle(5)",
  "    return (a >= b) && (b >= c) && (c >= a)\nend", "    \"\"\"\n    Given the lengths\
    \ of the three sides of a triangle. Return true if the three\n    sides form a\
    \ right-angled triangle, false otherwise.\n    A right-angled triangle is a triangle\
    \ in which one angle is right angle or \n    90 degree.\n    Example:\n    >>>\
    \ right_angle_triangle(3, 4, 5)\n    true\n    >>> right_angle_triangle(1, 2,\
    \ 3)\n    false\n    \"\"\"", "    if b==c && b==a \n        return true\n   \
    \ else \n        return false\nend\n</cell>\n<code language=julia-0.6>\n\"\"\"\
    \n    right_angle_triangle2(a::Int64, b::Int64, c::Int64)::Bool\n    \n    Use\
    \ the same function right_angle_triangle, but return true if there is a triangle\
    \ in the rectangle\n    and false otherwise.\n    \n    Use this function if the\
    \ triangle is a right triangle (all three sides are equal).\n    \n    Example:\n\
    \    >>> right_angle_triangle2(1, 1, 1)\n    true\n    >>> right_angle_triangle2(1,\
    \ 5, 3)\n    false\n    \"\"\"", "    triangle_area = sqrt((pow(b, 2) + pow(c,\
    \ 2)) / 2)\n    square_a = sqrt(pow(a, 2))\n    square_b = sqrt(pow(b, 2))\n \
    \   square_c = sqrt(pow(c, 2))\n    \n    if triangle_area == square_a + square_b\
    \ + square_c\n        true\n    else\n        false\n    end\nend\n</cell>\n<text>\n\
    Example: is_right_triangle\nImplement the is_right_triangle function which takes\
    \ in three sides of a triangle and determines\nif it is right angled or 90 degree.\n\
    Example:\n    >>> is_right_triangle(3, 4, 5)\n    True\n    >>> is_right_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"", '    return ((a + b > c) || (a + c > b) || (b
    + c > a))', "    if a + b > c or a + c > b or b + c > a\n        return false\n\
    \    return true", "    \n    if a*a + b*b == c*c then\n        return (true)\
    \ == (a > b and a > c) or (a == b or a == c)\n    else\n        return false\n\
    \    end\nend", "    \n    \"\"\"\n    The right-angled triangle (also known as\
    \ right triangle) is \n    any triangle in which two of the three sides meet at\
    \ their maximum.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    true\n\
    \    >>> right_angle_triangle(1, 2, 3)\n    false\n    \"\"\"", "    if a >= b+c\
    \ || b >= c+a || c >= b+a\n        false\n    else if b == c || c == a || a ==\
    \ b || a == c || b == c\n        true\n    else\n        right_angle_triangle(a+b,\
    \ c, a) | right_angle_triangle(a, c+b, a) | right_angle_triangle(a, b, a+c) \n\
    end", "\"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    sides form a right-angled triangle, false otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    true\n\
    \    >>> right_angle_triangle(1, 2, 3)\n    false\n    \"\"\"", "    if a==b==c\n\
    \    then return true\n    elseif b==c && a==b\n    then return true\n    elseif\
    \ c==a && a==c\n    then return true\n    else return false\n    end\n    end\"\
    \"\"\n    Given the lengths of the three sides of a triangle. Return true if the\
    \ three\n    sides form a right-angled triangle, false otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    true\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    false\n    \"\"\"", "    if abs(b-a) > abs(c-a) \n        then false\n\
    \        else a == b or a == c\n    end\nend", "    \n    left_side = if b > c\
    \ then b else c\n    right_side = if c > a then c else a\n    \n    angle_a =\
    \ right_side - left_side\n    \n    angle_b = c - a\n    \n    angle_c = a - b\n\
    \    \n    if angle_c > angle_a + angle_b then\n        return true\n    else\
    \ \n        return false\n    \nend\n\"\"\"\n    Given a triangle, find if it\
    \ is a valid triangle.\n    A triangle is a valid triangle if all the angles formed\
    \ by sides A, B and C\n    are equal (right angle) or 180 degree\n    Example:\n\
    \    >>> valid_triangle([3, 4])\n    true\n    >>> valid_triangle([3, 4, 5])\n\
    \    false\n    \"\"\"", "    if is_angled_triangle(a, b, c) == true\n    else\
    \ return false\nend", "    if a>b and b>c and a>c \n        true\n    elseif a>b\
    \ and b>c \n        false\n    elseif a>c and b>c \n        true\n    elseif a>c\
    \ and b>c \n        false\n    else\n        false\n    end\nend\n</cell>\n<code\
    \ language=julia-1.0>\n\"\"\"\n    Given the lengths of the two sides of a triangle.\
    \ Return true if the two\n    sides form a right-angled triangle, false otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    true\n\
    \    >>> right_angle_triangle(1, 2, 3)\n    false\n    \"\"\"", "    if a == b\
    \ == c \n        then true\n        else false \nend ", "    if b == c || a ==\
    \ c || b == a \n        true\n    else\n        false\n    end\nend\n</cell>\n\
    <code language=julia-1.0>", "    \nend\n</cell>\n<text>\nNow we can check the\
    \ length of the two sides. If the two sides are not the same length\nthen we return\
    \ false.", "    # @test is_right_triangle(a, b, c) == true\n    return (b - a)\
    \ * (c - b) <= 0", "    if a==b or b==c or a == c \n        return True\n    else\
    \ \n        return false\n    \"\"\"", "    \n    \n    # Write your code here\n\
    \    \n    return (a * b * c) >= 180\nend\n</cell>\n<text>\nProblem 8. Write a\
    \ function right_angled_triangle(a) which returns true if a is a right-angled\
    \ triangle, false otherwise. You may assume that a is right-angled.", "    if\
    \ a + b > c + b || b + c > a + c || c + a > b + a then false else true\nend\n\
    </cell>\n<code language=julia-1.3>", "    left_triangle_check(b, c)\n    right_triangle_check(c,\
    \ a)\n    right_triangle_check(d, b)\n    \n    if a + b > c + d:\n        return\
    \ (a + c) * (b - c) * (d - a) >= 0\n    else:\n        return (a + b) * (c - b)\
    \ * (d - a) >= 0\nend", "    triangle_sides = b^2 + c^2\n    triangle_sides =\
    \ triangle_sides - a*a\n    if triangle_sides == 0 || triangle_sides == a || triangle_sides\
    \ == b*b\n        true\n    else\n        false\nend\n\"\"\"\n    Given the lengths\
    \ of the two sides of a triangle. Return true if the two\n    sides form a right-angled\
    \ triangle, false otherwise.\n    A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3,\
    \ 4, 5)\n    true\n    >>> right_angle_triangle(1, 2, 3)\n    false\n    \"\"\"",
  "    if a <= 0 or b <= 0 or c <= 0 \n        or b == c or b == a \n        or c\
    \ == a or c == b \n    then false \n    else a > b or b > c or c > a \n    end\n\
    end", "    \"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    sides form a right-angled triangle, false otherwise.\n\
    \    A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    true\n\
    \    >>> right_angle_triangle(1, 2, 3)\n    false\n    \"\"\"\n    if a > b and\
    \ b > c and c > a then\n        \n    \"\"\"\n    Return a triangle if all angles\
    \ are within 90 degrees. \n    A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3,\
    \ 4, 5)\n    true\n    >>> right_angle_triangle(1, 2, 3)\n    false\n    \"\"\"\
    \n    return True\n    else\n    \"\"\"\n    Otherwise return false\n    \"\"\"\
    \n    return False\n    \"\"\"\n    \n    \"\"\"\n    \n    \"\"\"\n    \n   \
    \ \"\"\"\n    \n    \n    \"\"\"\n    \n    \"\"\"\n    \n    \"\"\"\n    \n \
    \   \"\"\"\n    \n    \"\"\"\n    \n    \"\"\"\n    \n    \"\"\"\n    \n    \"\
    \"\"\n    \n    \"\"\"\n    \n    \"\"\"\n    \n    \"\"\"\n    \n    \"\"\"\n\
    \    \n    \"\"\"\n    \n    \"\"\"\n    \n    \"\"\"\n    \n    \"\"\"\n    \n\
    \    \"\"\"\n    \n    \"\"\"\n    \n    \"\"\"\n    \n    \"\"\"\n    \n    \"\
    \"\"\n    \n    \"\"\"\n    \n    \"\"\"\n    \n    \"\"\"\n    \n    \"\"\"\n\
    \    \n    \"\"\"\n    \n    \"\"\"\n    \n    \"\"\"\n    \n    \"\"\"\n    \n\
    \    \"\"\"\n    \n    \"\"\"\n    \n    \"\"\"\n    \n    \"\"\"\n    \n    \"\
    \"\"\n    \n    \"\"\"\n    \n    \"\"\"\n    \n    \"\"\"\n    \n    \"\"\"\n\
    \    \n    \"\"\"\n    \n    \"\"\"\n    \n    \"\"\"\n    \n    \"\"\"\n    \n\
    \    \"\"\"\n    \n    \"\"\"\n    \n    \"\"\"\n    \n    \"\"\"\n    \n    \"\
    \"\"\n    \n    \"\"\"\n    \n    \"\"\"\n    \n    \"\"\"\n    \n    \"\"\"\n\
    \    \n    \"\"\"\n    \n    \"\"\"\n    \n    \"\"\"\n    \n    \"\"\"\n    \n\
    \    \"\"\"\n    \n    \"\"\"\n    \n    \"\"\"\n    \n    \"\"\"\n    \n    \"\
    \"\"\n    \n    \"\"\"\n    \n    \"\"\"\n    \n    \"\"\"\n    \n    \"\"\"\n\
    \    \n    \"\"\"\n    \n    \"\"\"\n    \n    \"\"\"\n    \n    \"\"\"\n    \n\
    \    \"\"\"\n    \n    \"\"\"\n    \n    \"\"\"\n    \n    \"\"\"\n    \n    \"\
    \"\"\n    \n    \"\"\"\n    \n    \"\"\"\n    \n    \"\"\"\n    \n    \"\"\"\n\
    \    \n    \"\"\"\n    \n    \"\"\"\n    \n    \"\"\"\n    \n    \"\"\"\n    \n",
  "    if a == b || a == c || b == c\n        return true\n    else\n        return\
    \ false", "    if b >= c && a+b > c \n    or b >= c && b+c > a \n    or c >= a\
    \ && c+a > b \n    then true \n    else false\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    # Write a function right_angle_triangles that returns the number of right-angled\
    \ triangles \n# that make up the input triangle (a triangle is right-angled if\
    \ it meets these conditions: \n# its length is the sum of the lengths of its three\
    \ sides. A right-angled triangle is a triangle in which \n# one angle is right\
    \ angle or 90 degree.). \n# Hint: You can write this as a boolean expression using\
    \ the following rules: \n# - If any side is equal to the other side, return true\n\
    # - Otherwise, return false if any side is greater than the other side\n# - Otherwise,\
    \ return false if any side is less than the other side\n# - If the sum of the\
    \ sides is zero, return true\n# - If the sum of the sides is equal to the length\
    \ of the side, return false\n# - If the sum of the sides is greater than the length\
    \ of the side, return true\n# - If the sum of the sides is less than the length\
    \ of the side, return false\n# Example:\n# right_angle_triangles(3, 4, 5) == true\n\
    # right_angle_triangles(1, 2, 3) == false", "    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n", "    \n    if a==b or a==c or b==c then return true\n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
  '    return (a + b > c) || (b + c > a) || (c + a > b) ', "    if a > b and a > c\
    \ \n    and b > c \n    and abs(a - b) > abs(a - c) \n    and abs(b - c) > abs(b\
    \ - a)\n    then true else false\nend\n\"\"\"\n    Given the lengths of the three\
    \ sides of a triangle. Return true if the three\n    sides form a right-angled\
    \ triangle, false otherwise.\n    A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3,\
    \ 4, 5)\n    true\n    >>> right_angle_triangle(1, 2, 3)\n    false\n    \"\"\"",
  "        \n    \"\"\"\n    Write your code here\n    \"\"\"\n    \n    if a>b and\
    \ a>c \n        then true\n        else if b>c and b > a \n            then true\n\
    \            else if c>a and c>b \n                then true\n               \
    \ else false\nend\n</cell>\n<text>\nTests", "    if a > b and a > c then\n   \
    \ if b % 2 == 0 and c % 2 == 0 then\n        if b <= c then\n            false\n\
    \        else\n            true\n        end\n    elseif b % 2 == 0 and c % 2\
    \ == 1 then\n        if b <= c then\n            true\n        else\n        \
    \    false\n        end\n    elseif b % 2 == 1 and c % 2 == 0 then\n        if\
    \ b <= c then\n            false\n        else\n            true\n        end\n\
    \    elseif b % 2 == 1 and c % 2 == 1 then\n        if b <= c then\n         \
    \   false\n        else\n            true\n        end\n    end\nelseif b > c\
    \ and b > a then\n    if b % 2 == 0 and c % 2 == 0 then\n        if b <= c then\n\
    \            true\n        else\n            false\n        end\n    elseif b\
    \ % 2 == 0 and c % 2 == 1 then\n        if b <= c then\n            false\n  \
    \      else\n            true\n        end\n    elseif b % 2 == 1 and c % 2 ==\
    \ 0 then\n        if b <= c then\n            true\n        else\n           \
    \ false\n        end\n    elseif b % 2 == 1 and c % 2 == 1 then\n        if b\
    \ <= c then\n            false\n        else\n            true\n        end\n\
    \    end\nelseif b > c and c > a then\n    if b % 2 == 0 and c % 2 == 0 then\n\
    \        if b <= c then\n            true\n        else\n            false\n \
    \       end\n    elseif b % 2 == 0 and c % 2 == 1 then\n        if b <= c then\n\
    \            false\n        else\n            true\n        end\n    elseif b\
    \ % 2 == 1 and c % 2 == 0 then\n        if b <= c then\n            true\n   \
    \     else\n            false\n        end\n    elseif b % 2 == 1 and c % 2 ==\
    \ 1 then\n        if b <= c then\n            true\n        else\n           \
    \ false\n        end\n    end\nelseif c > b and c > a then\n    if b % 2 == 0\
    \ and c % 2 == 0 then\n        if b <= c then\n            true\n        else\n\
    \            false\n        end\n    elseif b % 2 == 0 and c % 2 == 1 then\n \
    \       if b <= c then\n            true\n        else\n            false\n  \
    \      end\n    elseif b % 2 == 1 and c % 2 == 0 then\n        if b <= c then\n\
    \            false\n        else\n            true\n        end\n    elseif b\
    \ % 2 == 1 and c % 2 == 1 then\n        if b <= c then\n            true\n   \
    \     else\n            false\n        end\n    end\nelse\n    if b % 2 == 0 and\
    \ c % 2 == 0 then\n        if b <= c then\n", "    return (is_right_angle(a) and\
    \ is_right_angle(b) and is_right_angle(c)) \nend\n</cell>\n<code language=julia-1.5>\n\
    # Testing\nright_angle_triangle(3, 4, 5) == true\nright_angle_triangle(1, 2, 3)\
    \ == false\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Given the lengths\
    \ of the three sides of a triangle. Return true if the three\n    sides form a\
    \ right-angled triangle, false otherwise.\n    A right-angled triangle is a triangle\
    \ in which one angle is right angle or \n    90 degree.\n    Example:\n    >>>\
    \ right_angle_triangle(3, 4, 5)\n    true\n    >>> right_angle_triangle(1, 2,\
    \ 3)\n    false\n    \"\"\"", "\"\"\"\n    Return True if the three sides of a\
    \ triangle form a right-angled triangle,\n    False otherwise. \n    A right-angled\
    \ triangle is a triangle in which one angle is right angle\n    or 90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    true\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    false\n\"\"\"", "    if c > b\n        c > a && c > a || c > b\n\
    \    elseif c < b\n        c < a && c < a || c < b\n    else\n        c > a &&\
    \ c > a || c > b && c > b || c < a && c < a || c < b && c < b\n    end\nend",
  "    if a < b + c and b < c + a and c < a + b\n        return True\n    else\n \
    \       return False\n    end\nend\n</cell>\n<text>\nQuestion:\nSuppose you flip\
    \ a coin ten times. After each coin flip, what is the probability of getting 7\
    \ heads?", "\"\"\"\n    Right-angled triangles form a triangle in which each angle\
    \ is either \n    right angle or 90 degree\n    Example:\n    >>> right_angle_triangle(3,\
    \ 4, 5)\n    true\n    >>> right_angle_triangle(1, 2, 3)\n    false\n    \"\"\"",
  "    |a >= b && a >= c|| a == b&&a == c|| a == c && b == c|| b == c && a == c\n\
    end\n</cell>\n<code language=julia-1.4>\n\"\"\"\n    left_angle_triangle(a, b,\
    \ c)\n    Find the lengths of the three sides of a triangle. Return true if the\
    \ three\n    sides form a left-angled triangle, false otherwise.\n    A left-angled\
    \ triangle is a triangle in which one angle is left angle or \n    180 degree.\n\
    \    Example:\n    >>> left_angle_triangle(4, 5, 6)\n    true\n    >>> left_angle_triangle(1,\
    \ 3, 2)\n    false\n    \"\"\"", "    \n    \"\"\"\n    Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n    sides form a right-angled\
    \ triangle, false otherwise.\n    A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3,\
    \ 4, 5)\n    true\n    >>> right_angle_triangle(1, 2, 3)\n    false\n    \"\"\"",
  "    # YOUR CODE HERE\n    \n    \"\"\"\n    Do not modify this helper function.\n\
    \    \"\"\"", "    if a==0 or b==0 or c==0 then return false\n    if b==c then\
    \ return (a==b or a==c) and (b==c or a==b or b==c)\n    else return false\nend\
    \ \n</cell>\n<text>\nExercise 2.8: \nUse the above function to test whether a\
    \ triangle is a right angle triangle or not. \nNote: Don't forget to test the\
    \ negative case. ", "    if a == 0 || b == 0 || c == 0 then return false\n   \
    \ if b == a || c == a || b == c then return true\n    \n    return false\nend\n\
    </cell>\n<code language=julia-1.3>\nright_angle_triangle(3, 4, 5)\n</cell>\n<code\
    \ language=julia-1.3>\nright_angle_triangle(1, 2, 3)\n</cell>\n<text>\nExercise:\
    \ Calculate the area of a right-angled triangle:\nNone image.png", "    \n   \
    \ if a == b\n        && b == c\n        && (c % 2 == 0)\n        && (a % 2 ==\
    \ 0)\n        return true\n    else\n        return false\nend\n</cell>\n<text>\n\
    Exercise: Write a function that checks if the triangle is a right triangle or\
    \ not.\nGiven the lengths of the three sides of a triangle. Return true if the\
    \ three sides form a right triangle, false otherwise.\n    A right triangle is\
    \ a triangle in which one angle is right angle or 90 degree.\n    Example:\n \
    \   >>> right_triangle(3, 4, 5)\n    true\n    >>> right_triangle(1, 2, 3)\n \
    \   false\n    \"\"\"", "    if a < 3 && b < 3 && c < 3\n        a == b == c ||\
    \ a > b > c || a > c > b || b > c > a\n    else\n        false\n    end\nend\n\
    </cell>\n<code language=julia-1.0>\nright_angle_triangle(3, 4, 5)\n</cell>\n<text>\n\
    A triangle is a right-angled triangle if any of the angles (except 180) are right\
    \ angles.\nThe following code checks whether the three sides form a right-angled\
    \ triangle,\nand outputs true or false accordingly.\nNote that there are many\
    \ other right-angled triangles (right triangles with one angle\non the other side).",
  "    if (b+c) > (a+b) or b == 0 || a == 0 || c == 0\n        false\n    else\n \
    \       a+b > c and b+c > a\nend", "    if a + b + c == 0: return false\n    else\
    \ if ((a + b > c) | (c + b > a) | (b + c > a)) | ((b > a) | (c > a)) | \n    \
    \    (c > b) : return true \n    else : return right_angle_triangle(a,b,c-1) ==\
    \ true and right_angle_triangle(a,c,b) == true \nend\n</cell>\n<code language=julia-1.0>\n\
    ## Triangle is right angle if all three sides are equal", "    \n    \"\"\"\n\
    \    Check if three points are on a right angled triangle. \n    Params:\n   \
    \ ----\n    a: int \n        Length of side 1\n    b: int \n        Length of\
    \ side 2\n    c: int \n        Length of side 3\n    \n    Return:\n    -------\n\
    \    Bool \n        True if the points are on a right angled triangle, False otherwise.\
    \ \n    \n    Examples:\n    ---------\n    >>> right_angle_triangle(3, 4, 5)\n\
    \    True\n    >>> right_angle_triangle(1, 2, 3)\n    False\n    \"\"\"", "  \
    \  if a==0 && b==0 && c==0 \n        true\n    else if a==0 && b==0 \n       \
    \ false\n    else if b==0 \n        true\n    else \n        if c==0 \n      \
    \      true\n        else \n            if a==b \n                if a==c \n \
    \                   true\n                else \n                    false\n \
    \           else \n                if a!=c \n                    false\n     \
    \           else\n                    right_angle_triangle(\n                \
    \        b-1, c, a-1\n                    )\n    end\nend\n</code>\n<|/ a tags=if-statement,julia,function\
    \ |>\n<| a tags=if-statement,julia,function |>\n<code>", "\"\"\"\n    Given the\
    \ lengths of the three sides of a triangle. Return true if the three\n    sides\
    \ form a right-angled triangle, false otherwise.\n    A right-angled triangle\
    \ is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n\
    \    >>> right_angle_triangle(3, 4, 5)\n    true\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    false\n    \"\"\"", "    if b == c && a < c \n        then true\n\
    \        else false\n    end\nend\n</cell>\n<code language=julia-1.6>\n\"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return true if the three\n\
    \    sides form a right-angled triangle, false otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    true\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    false\n    \"\"\"", "    if abs(a-b) < abs(a-c) then\n        true\n\
    \    elseif abs(a-c) < abs(b-c) then\n        true\n    else\n        false\n\
    \    endif\nendfunction\n</code>\n<|/ a dscore=2 |>\n<| a tags=algorithm,raku\
    \ |>\nPython has a built-in math library which includes a function to check for\
    \ an angle between any two given points - isclose() in the module math:\n<code>\n\
    from math import isclose\nisclose(0,90)\nTrue\nisclose(0,270)\nTrue\nisclose(90,270)\n\
    True\nisclose(90,180)\nFalse\nisclose(90,271)\nTrue\n</code>\n<|/ a dscore=2 |>\n\
    <| c |>\nIn Raku it appears there is no `math.isclose`. `Math` comes with `Math::isclose`\
    \ but that returns `true` if the numbers match exactly. Also, `Math::isclose(Math::deg($angle1),\
    \ Math::deg($angle2))` is the same as `Math::deg($angle1) == Math::deg($angle2)`.\
    \ So, `Math::deg($angle1) == Math::deg($angle2)` would work, but `Math::deg($angle1)\
    \ != Math::deg($angle2)` would not.\n<|/ c |>\n<| c |>\nThe other answer here\
    \ was edited after I first wrote this answer, so I'm going to try and clarify\
    \ my point here.  In Raku there is no way to test if two numbers are \"close\"\
    \ without comparing them exactly.  This means that `Math::deg($angle1) == Math::deg($angle2)`\
    \ will return false because they will never be \"close\" to the same degree, even\
    \ though they may represent slightly different values.\n<|/ c |>\n<| a |>\nYou\
    \ can use Deg function to convert to and from degrees\n<code>\nif Math::Deg(angle1)\
    \ == Math::Deg(angle2) then #true\n</code>\n<|/ a dscore=2 tags=algorithm,raku\
    \ |>\n<| c |>\nBut this will not work when `angle1` and `angle2` are extremely\
    \ close to 180. E.g. `Math::Deg(180)` and `Math::Deg(180 + Math::Random())`.\n\
    <|/ c |>\n<| a |>\nThe other answers seem to have missed the point of the question.\
    \ As far as I can tell, the OP wants to check if two angles are close enough to\
    \ each other, but not exactly the same angle. For instance, the two angles 180\
    \ and 360 are close enough, but not exactly 180.\n<code>\nsub close_enough_angles(Int\
    \ $a, Int $b) {\n", "    if a < b+c || a < c-b || a > c+b || a > b+c \n    then\
    \ true\n    else false\nend", "    return (\n        (c-a)*(c-a)*(c-a) >= 0 \n\
    \        and\n        ((b - c) >= 0 or (a > c and a > b))\n    )", "    if b >\
    \ c \n        or c > b \n        or b > a \n    then false \n    else if c ==\
    \ a\n        or b == a\n        or c == a\n    then true \n    else if b == a\
    \ && a == c \n        or (b == c || c == a || a == c) \n    then true \n    else\
    \ \n        if a > b \n            and (a > c || a > a) \n            and (c >\
    \ b || c > a) \n        then false \n        else if b > c \n            and (a\
    \ > c || a > a) \n            and (c > b || c > a) \n        then false \n   \
    \     else \n            if a > c \n                and (a > b || a > a) \n  \
    \              and (c > b || c > a) \n            then true \n            else\
    \ if c > b \n                and (a > b || a > a) \n                and (c > b\
    \ || c > a) \n            then true \n            else \n                if b\
    \ > c \n                    and (a > b || a > a) \n                    and (c\
    \ > b || c > a) \n                then true \n                else \n        \
    \            false \n        end\n    end\nend\n\"\"\"\nGiven the lengths of the\
    \ three sides of a triangle. Return true if the three\nsides form a right-angled\
    \ triangle, false otherwise.\n    A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3,\
    \ 4, 5)\n    true\n    >>> right_angle_triangle(1, 2, 3)\n    false\n\"\"\"",
  "    if a==0 || b==0 || c==0 \n    then return false\n    else if b==0 \n    then\
    \ if c==0 \n    then return true\n    else return false\n    else return right_angle_triangle(a,b-1,c)\n\
    \    else return right_angle_triangle(a,b-1,c-1) || right_angle_triangle(a,b,c-1)\n\
    \    end\n\"\"\"\nGiven the lengths of the sides of a right-angled triangle. Return\
    \ true if the\ntwo middle sides equal each other. Otherwise, return false.\nExample:\
    \ \n    >>> right_angled_triangle(3, 4, 5)\n    false\n    >>> right_angled_triangle(1,\
    \ 2, 3)\n    true\n    \"\"\"", "        \n    if a + b > c and b + c > a and\
    \ c + a > b\n        return true\n    else\n        return false\n    end\nend",
  "    if b==0 || c==0 || a==b || a==c || b==c \n        true \n    else \n      \
    \  false\n    end\nend", "\"\"\"\n    Given the lengths of the three sides of\
    \ a triangle. Return true if the three\n    sides form a right-angled triangle,\
    \ false otherwise.\n    A right-angled triangle is a triangle in which one angle\
    \ is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3,\
    \ 4, 5)\n    true\n    >>> right_angle_triangle(1, 2, 3)\n    false\n    \"\"\"",
  "    if a * c + b * c > a * b\n    then false\n    else if a * c + b * c == a *\
    \ b\n    then true\n    else\n        right_angle_triangle(a * a, b * b, c * c)\
    \ | right_angle_triangle(a * c, b * b, a * b) | right_angle_triangle(a * c, b\
    \ * c, a * b)\n    end\nend\n</cell>\n<text>\nExercise: Write a function that\
    \ can compute $f(x) = x - x^3$. Test it on all pairs of numbers $x$ and $y$ such\
    \ that $x \\in [-10, 10]$ and $y \\in [-10, 10]$.", "    \n    if b == 0 and c\
    \ == 0:\n        return True\n    if b == 0:\n        return abs(c-a) <= 1\n \
    \   if c == 0:\n        return abs(a-b) <= 1\n    return abs(c-a) == abs(a-b)",
  "    return ((b**2) - (4*a*c)) > 0\n\"\"\"\n    Calculate the area of a triangle\
    \ with sides lengths `a`, `b` and `c`\n    https://en.wikipedia.org/wiki/Triangular_area\n\
    \"\"\"", "    | a*b <= c\n    | a*c <= b*b\n    | b*c <= a*a\n    | a*b >= c*c\n\
    \    | a*c >= b*b\n    | b*c >= a*a\n    | a*b >= c*c\n    | a*c >= b*b\n    |\
    \ a*b >= c*c\n    | b*c >= a*a\n    | a*b <= c*c\n    | a*c <= b*b\n    | b*c\
    \ <= a*a\n    | b*c <= a*a\n    | a*b >= c*c\n    | a*c >= b*b\n    | b*c >= a*a\n\
    \    | a*b <= c*c\n    | a*c <= b*b\n    | b*c <= a*a\n    | a*b >= c*c\n    |\
    \ a*c >= b*b\n    | b*c >= a*a\n    | a*b <= c*c\n    | a*c <= b*b\n    | b*c\
    \ <= a*a\n    | a*b >= c*c\n    | a*c >= b*b\n    | b*c >= a*a\n    | a*b <= c*c\n\
    \    | a*c <= b*b\n    | b*c <= a*a\n    | b*c <= a*a\n    | a*b >= c*c\n    |\
    \ a*c >= b*b\n    | b*c >= a*a\n    | a*b <= c*c\n    | a*c <= b*b\n    | b*c\
    \ <= a*a\n    | a*b >= c*c\n    | a*c >= b*b\n    | b*c >= a*a\n    | a*b <= c*c\n\
    \    | a*c <= b*b\n    | b*c <= a*a\n    | a*b >= c*c\n    | a*c >= b*b\n    |\
    \ b*c >= a*a\n    | a*b <= c*c\n    | a*c <= b*b\n    | b*c <= a*a\n    | a*b\
    \ >= c*c\n    | a*c >= b*b\n    | b*c >= a*a\n    | a*b <= c*c\n    | a*c <= b*b\n\
    \    | b*c <= a*a\n    | a*b >= c*c\n    | a*c >= b*b\n    | b*c >= a*a\n    |\
    \ a*b <= c*c\n    | a*c <= b*b\n    | b*c <= a*a\n    | a*b >= c*c\n    | a*c\
    \ >= b*b\n    | b*c >= a*a\n    | a*b <= c*c\n    | a*c <= b*b\n    | b*c <= a*a\n\
    \    | a*b >= c*c\n", "    \n    \"\"\"\n    Given the lengths of the three sides\
    \ of a triangle. Return true if the three\n    sides form a right-angled triangle,\
    \ false otherwise.\n    A right-angled triangle is a triangle in which one angle\
    \ is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3,\
    \ 4, 5)\n    true\n    >>> right_angle_triangle(1, 2, 3)\n    false\n    \"\"\"\
    \n    if a==b and b==c or a==c and a == b then true else false end \nend", " \
    \   | a > 0 && b > 0 && c > 0 && c < a && b < a\n    | a == 0 && b == 0 && c ==\
    \ 0 && true\n    | a == 0 && b > 0 && c > 0 && c < a && b < a\n    | a == 0 &&\
    \ b == 0 && c > 0 && c < a && b < a\n    | a > 0 && b == 0 && c == 0 && true\n\
    \    | a > 0 && b == 0 && c > 0 && c < a && b < a\n    | a > 0 && b > 0 && c ==\
    \ 0 && true\n    | a > 0 && b > 0 && c > 0 && c < a && b < a\n    | a < 0 && b\
    \ == 0 && c == 0 && true\n    | a < 0 && b == 0 && c > 0 && c < a && b < a\n \
    \   | a < 0 && b > 0 && c == 0 && true\n    | a < 0 && b > 0 && c > 0 && c < a\
    \ && b < a\n    | a > 0 && b == 0 && c == 0 && true\n    | a > 0 && b == 0 &&\
    \ c > 0 && c < a && b < a\n    | a > 0 && b > 0 && c == 0 && true\n    | a > 0\
    \ && b > 0 && c > 0 && c < a && b < a\n    | a == 0 && b == 0 && c == 0 && true\n\
    \    | a == 0 && b == 0 && c > 0 && c < a && b < a\n    | a == 0 && b > 0 && c\
    \ == 0 && true\n    | a == 0 && b > 0 && c > 0 && c < a && b < a\n    | a > 0\
    \ && b == 0 && c == 0 && true\n    | a > 0 && b == 0 && c > 0 && c < a && b <\
    \ a\n    | a > 0 && b > 0 && c == 0 && true\n    | a > 0 && b > 0 && c > 0 &&\
    \ c < a && b < a\n    | a < 0 && b == 0 && c == 0 && true\n    | a < 0 && b ==\
    \ 0 && c > 0 && c < a && b < a\n    | a < 0 && b > 0 && c == 0 && true\n    |\
    \ a < 0 && b > 0 && c > 0 && c < a && b < a\n    | a > 0 && b == 0 && c == 0 &&\
    \ true\n    | a > 0 && b == 0 && c > 0 && c < a && b < a\n    | a > 0 && b > 0\
    \ && c == 0 && true\n    | a > 0 && b > 0 && c > 0 && c < a && b < a\n    | a\
    \ == 0 && b == 0 && c == 0 && true\n    | a == 0 && b == 0 && c > 0 && c < a &&\
    \ b < a\n    | a == 0 && b > 0 && c == 0 && true\n    | a == 0 && b > 0 && c >\
    \ 0 && c < ", "    if a == b\n        || a == c\n        || b == c\n    then\n\
    \        return true\n    else if a > b\n        || a > c\n        || b > c\n\
    \    then\n        return true\n    else\n        return false\nend\n</code>\n\
    <|/ a dscore=3 |>\n<| a tags=julia,algorithm |>\nThe two answers provided have\
    \ two problems.  First, they use the same variable twice, which will cause the\
    \ function to only return once.  Second, they don't give the correct answer if\
    \ b is odd.  To fix both these problems, I wrote a function that returns false\
    \ when b is odd:\n<code>", "    if a > b or b > c or c > a\n        return false\n\
    \    if b == c and (b == a or b == c - 1)\n        return true\n    if a == b\
    \ or a == c or b == c \n        return true\n    if c == a\n        return true\n\
    \    if a == b and b == c\n        return true\n    return false", "    | a <\
    \ b\n    | a < c\n    | b < c\n    | a == b\n    | a == c\n    | b == c\n    |\
    \ a > b\n    | a > c\n    | b > c\n    | a == b or b == c or c == a\n    | b ==\
    \ c or c == a\n    | c == a\n    | a == b or b == c or c == a\n    | b == c or\
    \ c == a\n    | c == a\n    | a == b or b == c or c == a\n    | b == c or c ==\
    \ a\n    | c == a\n    | a == b or b == c or c == a\n    | b == c or c == a\n\
    \    | c == a\n    | a == b or b == c or c == a\n    | b == c or c == a\n    |\
    \ c == a\n    | a == b or b == c or c == a\n    | b == c or c == a\n    | c ==\
    \ a\n    | a == b or b == c or c == a\n    | b == c or c == a\n    | c == a\n\
    \    | a == b or b == c or c == a\n    | b == c or c == a\n    | c == a\n    |\
    \ a == b or b == c or c == a\n    | b == c or c == a\n    | c == a\n    | a ==\
    \ b or b == c or c == a\n    | b == c or c == a\n    | c == a\n    | a == b or\
    \ b == c or c == a\n    | b == c or c == a\n    | c == a\n    | a == b or b ==\
    \ c or c == a\n    | b == c or c == a\n    | c == a\n    | a == b or b == c or\
    \ c == a\n    | b == c or c == a\n    | c == a\n    | a == b or b == c or c ==\
    \ a\n    | b == c or c == a\n    | c == a\n    | a == b or b == c or c == a\n\
    \    | b == c or c == a\n    | c == a\n    | a == b or b == c or c == a\n    |\
    \ b == c or c == a\n    | c == a\n    | a == b or b == c or c == a\n    | b ==\
    \ c or c == a\n    | c == a\n    | a == b or b == c or c == a\n    | b == c or\
    \ c == a\n    | c == a\n    | a == b or b == c or c == a\n    | b == c or c ==\
    \ a\n    | c == a\n    | a == b or b == c or c == a\n    | b == c or c == a\n\
    \    | c == a\n    | a == b or b == c or c == ", "    if a==0 || b==0 || c==0\
    \ || a+b+c == 0 {\n        return false\n    }\n    if a+b > c and b+c > a and\
    \ a+c > b {\n        return true\n    }\n    return false\nend \n</cell>\n<cell>\n\
    \"\"\"\n    Given a triangle, find the area of the triangle. \n    Example:\n\
    \    >>> triangle_area(3, 4, 5)\n    12\n    >>> triangle_area(3, 4, 2)\n    6\n\
    \    \"\"\"", "    # Compute the side lengths of a, b and c.\n    a = abs(a)\n\
    \    b = abs(b)\n    c = abs(c)", "    if a>b and b>c and a<c then true else false\
    \ end \nend \n</cell>\n<text>\nPart 3: Practical Exercises", "    \n    \n   \
    \ return ((a + b > c) && (a + c > b)) || \n            ((a + c > b) && (a + b\
    \ > c))\nend", "    | a<b<c | b<c<a | c<a <b | c<a <c \nend\n</code>\n<code>",
  "    if a==b==c \n        true\n    elseif b==c \n        true\n    elseif a==c\
    \ \n        true\n    elseif a==b || b==c || c==a \n        true\n    elseif b==a\
    \ || b==c || a==c \n        true\n    else\n        false\nend\n</code>\n<|/ a\
    \ dscore=2 |>\n<| c |>\nIt is not true that any triangle has 3 sides of length\
    \ 3. A triangle can have 3 sides of length 1 or 2 but it does not have 3 sides.\
    \ A triangle with 1 side of length 1 is a triangle. Consider this triangle: `(0,\
    \ 0, 0)`.\n<|/ c |>\n<| c |>\nThanks for your point. My english is not good, I\
    \ meant 3 sides of length 3.\n<|/ c |>\n<| c |>\nThank you!\n<|/ c |>\n<| a tags=julia,boolean-logic,if-statement\
    \ |>\nUsing functional programming:\n<code>", "    if a == 0 || b == 0 || c ==\
    \ 0 \n    or a * b * c > 0 \n    then false \n    else if a == b or b == c \n\
    \    then a or b \n    else c \n    end \nend \n</code>\n<|/ a tags=julia |>\n\
    <| c |>\nYes, but it's not quite right. A right-angle triangle is one in which\
    \ all three angles are less than 90 degrees. Your code would allow an input like\
    \ `right_angle_triangle(5,6,7)`. You might want to add an explicit `if` statement\
    \ to check for that condition.\n<|/ c |>\n<| a tags=julia |>\nWe can use the following\
    \ function\n<code>", "    if a==0 && b==0 && c==0\n        true\n    else\n  \
    \      a == 0 || b == 0 || c == 0 || abs(a-b)==abs(a-c) && abs(b-c) == abs(a-b)\n\
    \    end\nend\n\"\"\"\n    count_triangles(l::Array{Int64,1})", "    if a>c &&\
    \ a>b\n        return false\n    elseif a>b\n        return true\n    elseif a>c\n\
    \        return right_angle_triangle(b,c,a)\n    else\n        return right_angle_triangle(b,c,a)\n\
    end", "    if a >= b + c then false \n    elif b >= a + c then false \n    elif\
    \ c >= a + b then false \n    else true end\n</code>\n<|/ a tags=r,trigonometry\
    \ |>\n<| a |>\nA solution without using if/else conditionals\n<code>\ntriangle\
    \ = function(side1, side2, side3) {\n  if(side1 >= side2 + side3 | side2 >= side1\
    \ + side3 | side3 >= side1 + side2)\n    TRUE \n  else FALSE\n}", "    if a *\
    \ a + b * b == c * c \n        then true\n        else false\n    end \nend\n\
    </cell>\n<text>\nQuestion: What is wrong with this implementation?", "    if a\
    \ < b\n        || (b > c && a < c)\n        || (a > c && b < c)\n        || (a\
    \ > b && b > c)\n        || (a == b)\n        || (a == c)\n        || (b == c)\n\
    \        || (a != b != c) == false\n    else\n        || (b > c && a > c)\n  \
    \      || (a < c && b > c)\n        || (a < b && b < c)\n        || (a == b)\n\
    \        || (b == c)\n        || (a == c)\n        || (b != c) == false\n    end\n\
    end\n</cell>\n<text>\nExercise\nWrite a Julia function to implement the function\
    \ above.", "    | a + b > c\n    | a + c > b\n    | b + c > a\n    = true \n \
    \   | a == b\n    | a == c\n    | b == c\n    = false \n\"\"\"\n    Given the\
    \ lengths of the three sides of a triangle. Return true if the three\n    sides\
    \ form a right-angled triangle, false otherwise.\n    A right-angled triangle\
    \ is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n\
    \    >>> right_angle_triangle(3, 4, 5)\n    true\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    false\n    \"\"\"", '    return (b - a) * (b - c) > (b + c) * (b
    - a)', "    if a == 0 \n        true \n    else \n        b < 0 \n           \
    \ true \n        else \n            c < 0 \n                true \n          \
    \  else \n                a <= b and a <= c and a >= c \n    end\nend\n</cell>\n\
    <code language=julia-1.3>\nright_angle_triangle(3, 4, 5)\n</cell>\n<code language=julia-1.3>\n\
    right_angle_triangle(1, 2, 3)\n</cell>\n<code language=julia-1.3>\n# Write a right-angled\
    \ triangle function", "    \n    if a>b+c || b>c+a || c>a+b\n        return false\n\
    \    else\n        return true", "    if a <= 0 or b <= 0 or c <= 0 \n       \
    \ false\n    elseif a + b > c || b + c > a || c + a > b \n        false\n    elseif\
    \ a + c > b || c + b > a || b + a > c \n        true\n    else\n        true\n\
    \    end\nend\n</code>\n<|/ a tags=julia,julia-jump,performance,julia-set |>\n\
    <| c |>\nThis is not correct. There are cases where this is true, but they are\
    \ not right-angled triangles, as they do not have all three angles equal. See\
    \ my answer for a correct solution that also handles the case of a right-angle\
    \ triangle with one angle equal to one of the sides.\n<|/ c |>\n<| c |>\nI've\
    \ corrected my answer, and also the function can handle cases like the one you've\
    \ mentioned\n<|/ c |>\n<| a dscore=2 |>\nHere is a solution that also handles\
    \ cases like the one you've mentioned. It also correctly handles a right-angle\
    \ triangle with one angle equal to one of the sides, such as (1, 2, 3).\n<code>",
  "    if a > b + c and b > c + a and c > a + b\n        return true\n    else\n \
    \       return false", "    if a == 0 || b == 0 || c == 0 then\n        true\n\
    \    elseif b > a && c > a then\n        right_angle_triangle(a - 1, b, c)\n \
    \   elseif c > b then\n        right_angle_triangle(a, b - 1, c)\n    elseif b\
    \ > c then\n        right_angle_triangle(a, b, c- 1)\n    else\n        true\n\
    \    end\nend\n    \"\"\"", "    if a+b+c <= 1: \n        return false\n    if\
    \ a == b or a == c or b == c or a==0: \n        return true\n    return (right_angle_triangle(a-1,b,c)\
    \ or right_angle_triangle(a,b-1,c) or right_angle_triangle(a,b,c-1))\n</cell>\n\
    <code language=julia-1.0>\n@assert right_angle_triangle(3, 4, 5) == true\n@assert\
    \ right_angle_triangle(1, 2, 3) == false\n</cell>\n<text>\n4.4 Consider the following\
    \ function definition which returns all subsets of a given set.\nExample:\n@code\n\
    subsets([1,2,3])\n@endcode\nshould return \n@code\n[[1,2,3],[1,3],[2,3],[3],[1,2],[2,1],[3],[1,3],[2,3],[3]]\n\
    @endcode\nRecall that subsets can be represented by a list of the elements of\
    \ the original set \nfollowed by the subsets of the remaining elements.", "\"\"\
    \"\n    Given the lengths of the three sides of a triangle. Return true if the\
    \ three\n    sides form a right-angled triangle, false otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    true\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    false\n    \"\"\"", "     \n    if a==c && a==b\n        return true\n\
    \    else\n        return false\nend\n</cell>\n<cell>\nright_angle_triangle(3,\
    \ 4, 5)\n</cell>\n<cell>\nright_angle_triangle(1, 2, 3)\n</cell>\n<text>\nProblem\
    \ 13 (10 Points)\nGiven the length of the hypotenuse of a right angled triangle\
    \ and the two angles \nof the triangle, determine whether the third angle is greater\
    \ than the sum of the\ntwo angles.\nThe hypotenuse of a right angled triangle\
    \ is\n$$hypotenuse = \\sqrt{(side1)^2 + (side2)^2}$$\nThe angles of a right angled\
    \ triangle are $$angle1 = atan((side1)/(side2))$$ and\n$$angle2 = atan((side2)/(side1))$$\n\
    Write a function to determine whether the third angle is greater than the sum\
    \ of the two angles.\nExample:\nIf the hypotenuse and the angles are\n$$hypotenuse\
    \ = \\sqrt{(6)^2 + (3)^2}$$\n$$angle1 = \\pi$$\n$$angle2 = \\pi/2$$\nthe third\
    \ angle will be greater than the sum of the two angles.\nSo the function should\
    \ return true.\nIf the hypotenuse and the angles are\n$$hypotenuse = \\sqrt{(9)^2\
    \ + (7)^2}$$\n$$angle1 = \\pi$$\n$$angle2 = \\pi/4$$\nthe third angle will be\
    \ greater than the sum of the two angles.\nSo the function should return false.\n\
    Hint: Recall that the trig functions arctan and tan return the angles\nin radians.\
    \ You will need to convert these angles to degrees for your function.\nHere are\
    \ some hints for computing the hypotenuse:\n$$hypotenuse = \\sqrt{(side1)^2 +\
    \ (side2)^2} = \\sqrt{6^2 + (3)^2} = \\sqrt{18}$$\nHere are some hints for computing\
    \ the sum of two angles:\n$$angle1 + angle2 = \\pi + \\pi/4$$\n$$angle1 + angle2\
    \ = \\pi + \\pi/4$$\n$$angle1 + angle2 = \\pi + \\pi/4$$\n$$angle1 + angle2 =\
    \ \\pi + \\pi/4$$\n$$angle1 + angle2 = \\pi + \\pi/4$$\n$$angle1 + angle2 = \\\
    pi + \\pi/4$$\n$$angle1 + angle2 = \\pi + \\pi/4$$\n$$angle1 + angle2 = \\pi +\
    \ \\pi/4$$\n$$angle1 + angle2 = \\pi + \\pi/4$$\n$$angle1 + angle2 = \\pi + \\\
    pi/4$$", "        if a==b==c return true\n        if abs(a-b) > abs(a-c)\n   \
    \         return false\n        if abs(a-b) > abs(b-c)\n            return false\n\
    \        if abs(a-b) > abs(c-a)\n            return false\n        \n    return\
    \ true\nend\n</cell>\n<code language=julia-1.4>\nright_angle_triangle(3,4,5)\n\
    </cell>\n<code language=julia-1.4>", "    if b==c\n        true\n    elseif b\
    \ < c\n        right_angle_triangle(b,c,a)\n    elseif c < b\n        right_angle_triangle(a,b,c)\n\
    \    else\n        (b - a) * (c - b) < (a - b) * (b - c)\nend\n</cell>\n<code\
    \ language=julia-0.5>\nright_angle_triangle(3, 4, 5)\n</cell>\n<code language=julia-0.5>\n\
    right_angle_triangle(1, 2, 3)\n</cell>\n<code language=julia-0.5>\nright_angle_triangle(6,\
    \ 7, 8)\n</cell>\n<text>\nQuestion 5\nWrite a function that tests whether three\
    \ sides of a triangle form a right angled triangle. This function should take\
    \ three arguments of the form (a, b, c). \nUse @code_native to create a Julia\
    \ function that uses the right_angle_triangle function above and returns the result.\n\
    Hint: How do you write a function with multiple arguments?", "    | a==b == c\
    \ == 0 = true\n    | a==b == 0 = false\n    | a==c==0 = false\n    | a==b==c =\
    \ false\n    | a==b == c == false = false\n    | a==b == c == 0= false\n    |\
    \ a < b && b < c && c < 0 = true\n    | a < b && b < c = false\n    | a < b &&\
    \ c < 0 = true\n    | a < c && b < c = false\n    | a < c && c < 0 = true\n  \
    \  | a < b && b < c && c < 0 = false\n    | a < b && b < c = false\n    | a <\
    \ b && c < 0 = false\n    | a < c && b < c = false\n    | a < c && c < 0 = false\n\
    \    | a > b && b > c && c > 0 = true\n    | a > b && b > c = false\n    | a >\
    \ b && c > 0 = true\n    | a > c && b > c = false\n    | a > c && c > 0 = true\n\
    \    | a > b && b > c && c > 0 = false\n    | a > b && b > c = false\n    | a\
    \ > b && c > 0 = false\n    | a > c && b > c = false\n    | a > c && c > 0 = false\n\
    \    | a > b && b > c && c > 0 = false\n    | a > b && b > c = false\n    | a\
    \ > b && c > 0 = false\n    | a > c && b > c = false\n    | a > c && c > 0 = false\n\
    \    | otherwise = false\n    \n\"\"\"\nGiven an angle from 0 to 360 degrees,\
    \ return a string containing the number of\nleading zeroes needed to represent\
    \ that angle. For example, if the angle is\n0, return '00', if the angle is 45,\
    \ return '05'.\nExample:\n>>> get_leading_zeroes(0)\n'00'\n>>> get_leading_zeroes(45)\n\
    '05'\n\"\"\"", "    if a==0 || b==0 || c==0 \n        then return false\n    else\
    \ \n        return (b>=a and b<=c and a>=c and a<=b)\n    end\nend\n</cell>\n\
    <text>\nExercise:\nWrite a function is_convex(a::Int64, b::Int64)::Bool that returns\
    \ true if the triangle (a, b, c) is a convex triangle (no intersection between\
    \ sides). Write a main function that accepts the lengths of the three sides of\
    \ a triangle and calls the is_convex function.", "    if b == c or b == a or c\
    \ == a then \n        return true\n    else \n        return false\nend", "  \
    \  if a > b and a > c then true else false\nend", "\"\"\"\n    rightTriangle(a,\
    \ b, c)\n\"\"\"\n    right_angle_triangle(a, b, c) == ((b - a) * (c > b)) or ((b\
    \ - a) * (c < b)) or ((b - a) * (c > b) and (b - a) * (c < b))\nend", "    if\
    \ is_valid_triangle(a, b, c) \n    then\n        true\n    else\n        false\n\
    \    end\nend\n</cell>\n<code language=julia-0.5>\n\"\"\"\n    Given the lengths\
    \ of the three sides of a triangle. Return true if the three\n    sides form a\
    \ right-angled triangle, false otherwise.\n    A right-angled triangle is a triangle\
    \ in which one angle is right angle or \n    90 degree.\n    Example:\n    >>>\
    \ right_angle_triangle(3, 4, 5)\n    true\n    >>> right_angle_triangle(1, 2,\
    \ 3)\n    false\n\"\"\"", "    return (a + b > c) || (b + c > a) || (c + a > b)\n\
    \    \"\"\"\n    \"\"\"\n    Write a function that calculates the area of a triangle\
    \ (base of triangle),\n    given the lengths of the three sides.\n    A triangle\
    \ is defined as a base with 2 sides, a hypotenuse and a side (all of\n    the\
    \ three sides must be equal). The hypotenuse is always perpendicular to\n    the\
    \ side with smaller length.\n    Example:\n    >>> right_triangle(4, 5, 4)\n \
    \   55\n    >>> right_triangle(3, 3, 4)\n    12\n    \"\"\"", "    if a + b >\
    \ c and b + c > a and a + c > b then true else false end\nend", "    if abs(b\
    \ - c) < abs(a - b) then return true\n    else return false\nend\n</code>\n<|/\
    \ a dscore=2 |>\n<| c |>\nThis is the answer that really solves the issue of checking\
    \ if a triangle is a right angled one or not. The other answers that suggest using\
    \ other angles just check for which side of the triangle is closest to some angle.\
    \ E.g. if the angle is 180 degrees, it would just check if a side is 180 degree\
    \ or is closest to 180 degree.\n<|/ c |>\n<| c |>\nI thought the question was\
    \ to check whether the triangle is a right angled triangle or not. This doesn't\
    \ answer the question as asked.\n<|/ c |>\n<| c |>\nthe question was how to check\
    \ if a triangle is a right angled triangle, not whether a right angled triangle\
    \ is present. How can you check for a right angled triangle without knowing what\
    \ angle it is?\n<|/ c |>\n<| c |>\nYou are right, sorry I misunderstood. However,\
    \ I edited my answer to make it clear that there is an implicit assumption in\
    \ it.\n<|/ c |>\n<| c |>\nThanks for your answer. But how do I add this code to\
    \ my Jupyter Notebook? I'm a beginner so sorry if my question seems stupid\n<|/\
    \ c |>\n<| a dscore=1 |>\nHere's a short Python script to do it using sympy:\n\
    <code>\nfrom sympy import *", "    \n    \"\"\"\n    Find the area of the triangle\
    \ using formula:\n    Area = s*(h*t)\n    where s is side length and\n    h is\
    \ height.\n    >>> right_angle_triangle(3, 4, 5)\n    true\n    \"\"\"\n    \n\
    \    return math.sqrt(a**2+b**2+c**2)*((b+c)*(c+a)-(b*c)*(a*b)) > (b*c)*(a*a)",
  "    \"\"\"\n    Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n    sides form a right-angled triangle, false otherwise.\n   \
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    \    90 degree.\n    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    true\n\
    \    >>> right_angle_triangle(1, 2, 3)\n    false\n    \"\"\"\n    return ((b\
    \ * b - 4 * a * c) >= 0)\n\"\"\"\ndef right_angle_triangle(a::Int64, b::Int64,\
    \ c::Int64)::Bool \n    \"\"\"\n    Given the lengths of the three sides of a\
    \ triangle. Return true if the three\n    sides form a right-angled triangle,\
    \ false otherwise.\n    A right-angled triangle is a triangle in which one angle\
    \ is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3,\
    \ 4, 5)\n    true\n    >>> right_angle_triangle(1, 2, 3)\n    false\n    \"\"\"\
    \n\"\"\"\ndef right_angle_triangle(a::Int64, b::Int64, c::Int64)::Bool \n    \"\
    \"\"\n    Given the lengths of the three sides of a triangle. Return true if the\
    \ three\n    sides form a right-angled triangle, false otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    true\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    false\n    \"\"\"\ndef is_equilateral_triangle(a::Int64, b::Int64,\
    \ c::Int64)::Bool \n    \"\"\"\n    Given the lengths of the three sides of a\
    \ triangle. Return true if the three\n    sides form a equilateral triangle, false\
    \ otherwise.\n    An equilateral triangle is a triangle in which all angles are\
    \ equal\n    Example:\n    >>> is_equilateral_triangle(3, 4, 5)\n    true\n  \
    \  >>> is_equilateral_triangle(1, 2, 3)\n    false\n    \"\"\"\n\"\"\"\ndef right_angle_triangle(a::Int64,\
    \ b::Int64, c::Int64)::Bool \n    \"\"\"\n    Given the lengths of the three sides\
    \ of a triangle. Return true if the three\n    sides form a equilateral triangle,\
    \ false otherwise.\n    An equilateral triangle is a triangle in which all angles\
    \ are equal\n    Example:\n    >>> is_equilateral_triangle(3, 4, 5)\n    true\n\
    \    >>> is_equilateral_triangle(1, 2, 3)\n    false\n    \"\"\"\n\"\"\"\ndef\
    \ is_equilateral_triangle(a::Int64, b::Int64, c::Int64):", "\"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return true if the three\n   \
    \ sides form a right-angled triangle, false otherwise.\n    A right-angled triangle\
    \ is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n\
    \    >>> right_angle_triangle(3, 4, 5)\n    true\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    false\n\"\"\"", "    true = a == b == c\n    return", "    if is_right_angle_triangle(a,\
    \ b, c) == true then \n        return true \n    else \n        return false \n\
    \"\"\"\n    Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    sides form a left-angled triangle, false otherwise.\n    A left-angled\
    \ triangle is a triangle in which one angle is left angle or \n    180 degree.\n\
    \    Example:\n    >>> left_angle_triangle(3, 4, 5)\n    false\n    >>> left_angle_triangle(1,\
    \ 2, 3)\n    true\n    \"\"\"", "    if a>b and b>c and c>a then \n        true\n\
    \    else \n        false\n    end\nend\n\"\"\"\n    Write a function `print_solution(solution::Vector{Int64})\
    \ where solution` is a\n    vector of integers that is of the form [num1, num2,\
    \ num3, ...]\n    Example:\n    >>> print_solution([2,0,4])\n    2\n    \"\"\"",
  "    if a>b and a>c and b>c:\n        return true\n    return false", "    \n  \
    \  \"\"\"\n    Write an efficient algorithm that returns True if a triangle with\
    \ its \n    sides a, b, c is right angled, False otherwise.\n    For example,\
    \ all right angle triangle is given by the following \n    triangles:\n    \n\
    \    (0, 0, 0), (0, 1, 0), (1, 1, 0), (1, 1, 1), (0, 1, 1)\n    \n    This function\
    \ just need to find out whether a, b, and c are the \n    three sides of a right\
    \ angle triangle or not. \n    \n    Runtime: O(1)\n    \"\"\""]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
