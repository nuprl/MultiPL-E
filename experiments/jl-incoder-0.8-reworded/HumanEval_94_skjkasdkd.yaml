name: HumanEval_94_skjkasdkd
language: jl
prompt: "\"\"\"You are given a vector of integers.\n    You need to find the largest\
  \ prime value and return the sum of its digits.\n\n    Examples:\n    >>> skjkasdkd([0,\
  \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n    10\n\
  \    >>> skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1])\n\
  \    25\n    >>> skjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32,\
  \ 30, 1, 9, 3])\n    13\n    >>> skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91,\
  \ 83, 0, 5, 6])\n    11\n    >>> skjkasdkd([0, 81, 12, 3, 1, 21])\n    3\n    >>>\
  \ skjkasdkd([0, 8, 1, 2, 1, 7])\n    7\n    \"\"\"\nfunction skjkasdkd(lst::Vector{Int64})::Int64\
  \ \n"
tests: "using Test\n\n@testset begin\n\ncandidate = skjkasdkd;\n\t@test(candidate([0,\
  \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) == 10)\n\
  \t@test(candidate([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) ==\
  \ 25)\n\t@test(candidate([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32,\
  \ 30, 1, 9, 3]) == 13)\n\t@test(candidate([0, 724, 32, 71, 99, 32, 6, 0, 5, 91,\
  \ 83, 0, 5, 6]) == 11)\n\t@test(candidate([0, 81, 12, 3, 1, 21]) == 3)\n\t@test(candidate([0,\
  \ 8, 1, 2, 1, 7]) == 7)\n\t@test(candidate([8191]) == 19)\n\t@test(candidate([8191,\
  \ 123456, 127, 7]) == 19)\n\t@test(candidate([127, 97, 8192]) == 10)\nend\n"
completions: ["    lst = sort(lst)\n    a = lst[length(lst.)-1]\n    i = 2\n    sum_a\
    \ = 0\n    while i <= sqrt(a) do\n        prime = true\n        for j in lst.[i..end]\
    \ do\n            prime *= ((j % i) == 0)\n        end\n        if prime == true\
    \ then\n            sum_a += i\n        end\n        i += 1\n    end\n    return\
    \ sum_a\nend", "    a=sort(lst)\n    maximo = maximum(a)\n    sum=0\n    i=2\n\
    \    while (i<=maximo)\n        if (a[i]==1)\n            sum=sum+i\n        i=i+1\n\
    \    end\n    return sum\nend", "    s = Int64(0)\n    for x in lst\n        if\
    \ x > 1\n            if isPrime(x)\n                s += x\n                deleteat!(lst,index)\n\
    \            end\n        end\n    end\n    return s\nend\n</cell>\n<text>\nTest\
    \ your code", "# your code here\n    if lst.isempty\n        return 0\n    largest=maximum(lst)\n\
    \    largest_prime=Prime(largest)\n    sum_digits=0\n    for e in lst\n      \
    \  if e == largest\n            continue\n        digits = Prime(e) * largest\n\
    \        if digits == largest_prime\n            sum_digits += digits\n      \
    \  end\n    end\n    return sum_digits\nend", "    prime = find_prime(lst)\n \
    \   ans = 0\n    for n in lst\n        if n % prime == 0\n            ans += n\
    \ / prime\n        end\n    end\n    return ans\nend\n</cell>\n<code language=julia-0.6>\n\
    skjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324,\
    \ 4, 3])\n</cell>\n<code language=julia-0.6>\nskjkasdkd([1, 0, 1, 8, 2, 4597,\
    \ 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1])\n</cell>\n<code language=julia-0.6>\n\
    skjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n\
    </cell>\n<code language=julia-0.6>\nskjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5,\
    \ 91, 83, 0, 5, 6])\n</cell>\n<code language=julia-0.6>\nskjkasdkd([0, 81, 12,\
    \ 3, 1, 21])\n</cell>\n<code language=julia-0.6>\nskjkasdkd([0, 8, 1, 2, 1, 7])\n\
    </cell>\n<code language=julia-0.6>\nskjkasdkd(Vector{Int}(undef, 10^10))\n</cell>\n\
    <code language=julia-0.6>\nskjkasdkd(Vector{Int}(undef, 1))\n</cell>\n<code language=julia-0.6>",
  "    if length(lst) == 0 \n        return 0 \n    \n    # find largest prime number\n\
    \    maxprime::Int64 = 0\n    \n    for i \u2208 lst \n        if (i%2==0) \n\
    \            continue\n        if i%3==0 \n            continue\n        if i%5==0\
    \ \n            continue\n        if i%7==0 \n            continue\n        \n\
    \        j = 7\n        while j>1 \n            if i%j==0 \n                break\n\
    \            j=j-1\n        end\n        \n        if j==1 \n            maxprime\
    \ = i \n        end \n    end \n    \n    # sum\n    sum::Int64 = 0\n    \n  \
    \  for i \u2208 lst \n        if i%2==0 \n            continue\n        if i%3==0\
    \ \n            continue\n        if i%5==0 \n            continue\n        if\
    \ i%7==0 \n            continue\n        \n        j = 7\n        while j>1 \n\
    \            if i%j==0 \n                break\n            j=j-1\n        end\n\
    \        \n        if j==1 \n            sum = sum+i \n        end \n    end \n\
    \    \n    sum\nend ", "    if any(lst==0)\n        return 0\n    if all(lst==2)\n\
    \        return sum(lst)\n    if all(lst==3)\n        return 11\n    if all(lst==4)\n\
    \        return 22\n    if all(lst==5)\n        return 33\n    if all(lst==6)\n\
    \        return 44\n    if all(lst==7)\n        return 55\n    if all(lst==8)\n\
    \        return 66\n    if all(lst==9)\n        return 77\n    if all(lst==10)\n\
    \        return 88\n    if all(lst==11)\n        return 99\n    if all(lst==12)\n\
    \        return 110\n    if all(lst==13)\n        return 121\n    if all(lst==14)\n\
    \        return 132\n    if all(lst==15)\n        return 134\n    if all(lst==16)\n\
    \        return 145\n    if all(lst==17)\n        return 156\n    if all(lst==18)\n\
    \        return 157\n    if all(lst==19)\n        return 158\n    if all(lst==20)\n\
    \        return 159\n    if all(lst==21)\n        return 160\n    if all(lst==22)\n\
    \        return 161\n    if all(lst==23)\n        return 162\n    if all(lst==24)\n\
    \        return 163\n    if all(lst==25)\n        return 164\n    if all(lst==26)\n\
    \        return 165\n    if all(lst==27)\n        return 166\n    if all(lst==28)\n\
    \        return 167\n    if all(lst==29)\n        return 168\n    if all(lst==30)\n\
    \        return 169\n    if all(lst==31)\n        return 170\n    if all(lst==32)\n\
    \        return 171\n    if all(lst==33)\n        return 172\n    if all(lst==34)\n\
    \        return 173\n    if all(lst==35)\n        return 174\n    if all(lst==36)\n\
    \        return 175\n    if all(lst==37)\n        return 176\n    if all(lst==38)\n\
    \        return 177\n    if all(lst==39)\n        return 178\n    if all(lst==40)\n\
    \        return 179\n    if all(lst==41)\n        return 180\n    if all(lst==42)\n\
    \        return 181\n    if all(lst==43)\n        return 182\n    if all(lst==44)\n\
    \        return 183\n    if all(lst==45)\n        return 184\n    if all(lst==46)\n\
    \        return 185\n    if all(lst==47)\n        return 186\n    if all(lst==48)\n\
    \        return 187\n    if all(lst==49)\n        return 188\n    if all(lst==50)\n\
    \        return 189\n    if all(lst==51)\n        return 190\n    if all(lst==52)\n\
    \        return 191\n    if all(lst==53)\n        return 192", "    \"\"\"\n \
    \   Implement your function here\n    \"\"\"\n    largest = 1\n    largestDigits\
    \ = 1\n    for i in lst\n        if i == largest\n            largestDigits +=\
    \ 1\n        else\n            if largestDigits > largest\n                largestDigits\
    \ = largest\n                largest = i\n            end\n        end\n    end\n\
    \    return largestDigits + largest\nend\n</cell>\n<code language=julia-0.5>\n\
    skjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324,\
    \ 4, 3])\n</cell>\n<code language=julia-0.5>\nskjkasdkd([1, 0, 1, 8, 2, 4597,\
    \ 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1])\n</cell>\n<code language=julia-0.5>\n\
    skjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n\
    </cell>\n<code language=julia-0.5>\nskjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5,\
    \ 91, 83, 0, 5, 6])\n</cell>\n<code language=julia-0.5>\nskjkasdkd([0, 81, 12,\
    \ 3, 1, 21])\n</cell>\n<code language=julia-0.5>\nskjkasdkd([0, 8, 1, 2, 1, 7])\n\
    </cell>\n<text>\nProblem 10: Spiral Matrix \nIn this problem, you will define\
    \ a function that takes as input an integer $n$, and outputs the $n \\times n$\
    \ spiral matrix $A \\in \\mathbb{R}^{n \\times n}$.\nThe first row and first column\
    \ of $A$ are $A[0,0]=A[1,1]=\\ldots=A[n,n]=1$.\nThe second row and third column\
    \ of $A$ are $A[0,1]=A[1,2]=\\ldots=A[n,n]=A[n-1,n-2]=2^{n-1}$.\nThe third row\
    \ and third column of $A$ are $A[0,2]=A[1,3]=\\ldots=A[n,n]=A[n-1,n-1]=2^{n-2}$.\n\
    The fourth row and second column of $A$ are $A[0,3]=A[1,4]=\\ldots=A[n,n]=A[n-1,n-2]=A[n-2,n-1]=2^{n-3}$.\n\
    The fifth row and first column of $A$ are $A[0,4]=A[1,5]=\\ldots=A[n,n]=A[n-1,n-2]=",
  "    \n    primes  = primesfilter(primes)\n    sum = 0\n    digits = collect(1:length(lst))\n\
    \    digits.sort!\n    for i in digits\n        prime = primes[i]\n        idx\
    \ = find(digits .== i)\n        tmp = primes[idx]\n        sum += tmp\n    end\n\
    \    return sum\nend\n</cell>\n<cell>\nprimes = [3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97]\n\
    </cell>\n<text>\nExercise 6\nThe sieve of Eratosthenes is a technique to find\
    \ all the primes up to a given number. The idea is to iterate through all odd\
    \ numbers from 2 to number-1 (ignoring even numbers). \nThe sieve is initialized\
    \ as follows: \nFor each odd number $n$, we store a boolean flag $S[n]$ that is\
    \ initially set to true. \nEvery time we encounter an even number $n$, we set\
    \ the flag to false. \nAfter we are done with all even numbers, we print the sequence\
    \ of prime numbers. ", "    \"\"\"\n    find prime number using Sieve of Eratosthenes\n\
    \    \"\"\"\n    # initialize a list to store the prime number\n    prime = Vector{Int64}(1:length(lst))\n\
    \    # initialize a flag to indicate prime number\n    flag = ones(Int, length(lst))\n\
    \    # initialize a prime number counter\n    prime_counter = 1\n    while flag\
    \ != 0\n        # remove all multiples of prime_counter from flag\n        flag\
    \ = flag .* (prime_counter .== prime)\n        # add the remainder of prime number\
    \ to prime\n        prime = prime + flag\n        # add the next prime number\n\
    \        prime_counter += 1\n    end\n    prime\n    prime_counter\n    # calculate\
    \ the sum of all prime number\n    sum(prime)\n    # find the largest prime number\
    \ in the given vector\n    maximum(prime)\n    return maximum(prime)\nend", " \
    \   prime_lst = primes(length(lst))\n    prime_len = len(prime_lst)\n    \n  \
    \  if prime_len == 0 \n        return 0\n    \n    if prime_len == 1 \n      \
    \  return lst[1]\n    \n    if length(lst) <= prime_len \n        return sum(lst)\n\
    \    \n    i = 2 \n    max = prime_lst[i]\n    \n    while i < prime_len \n  \
    \      if lst[i] == max \n            return sum(lst[i:])\n        \n        i\
    \ += 1\n        max = prime_lst[i]\n    end\n    \n    max = prime_lst[prime_len]\n\
    \    \n    return lst[1]\nend", "  \n    # prime number check\n    prime = falses(length(lst))\n\
    \    for i in 2..length(lst)\n        if prime[i] == true\n            continue\
    \ \n        end\n        prime[i] = isPrime(lst[i])\n    end\n    \n    # largest\
    \ prime value\n    largest = 0\n    for i in 2..length(lst)\n        if prime[i]\
    \ == true\n            if lst[i] > largest\n                largest = lst[i]\n\
    \            end\n        end\n    end\n    \n    # sum of digits\n    sum = 0\n\
    \    for i in 2..length(lst)\n        if prime[i] == true\n            sum +=\
    \ lst[i] - largest\n        end\n    end\n    \n    return sum\nend\n</cell>\n\
    <code language=julia-1.5>\n@time skjkasdkd(lst);\n</cell>\n<text>\nQuestion 9:\
    \ Part 1", "    primes = Int64[]\n    for i in 2:length(lst)\n        if lst[i]==0\n\
    \            return 0\n            prime=false\n        elseif lst[i]>0 && lst[i]==1\n\
    \            prime=true\n        elseif isPrime(lst[i])==prime\n            prime=true\n\
    \        else\n            prime=false\n        end\n        push!(primes, lst[i])\n\
    \    end\n    primes\n    \nend\n</cell>\n<code language=julia-1.5>\n@time skjkasdkd(rand(1:100));\n\
    </cell>\n<text>\nExercise: find the largest prime factor of a number", "    primes\
    \ = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n\
    \               71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137,\
    \ 139, 149, 151, 157, 163, 167,\n               173, 179, 181, 191, 193, 197,\
    \ 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277,\n    \
    \           281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367,\
    \ 373, 379, 383, 389, 397, 401,\n               409, 419, 421, 431, 433, 439,\
    \ 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541,\n\
    \               547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617,\
    \ 619, 631, 641, 643, 647, 653, 659, 661,\n               673, 677, 683, 691,\
    \ 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811,\
    \ 821,\n               823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883,\
    \ 887, 907, 911, 919, 929, 937, 941, 947, 953, 967,\n               971, 977,\
    \ 983, 991, 997]\n    \n    biggestPrime = 0\n    for i in primes\n        if\
    \ lst.contains(i)\n            biggestPrime = i\n        end\n    end\n    \n\
    \    function getDigit(number)\n        digits = []\n        for i in 1:length(number)\n\
    \            digit = number[i]\n            push!(digits, digit)\n        end\n\
    \        return digits\n    end\n    \n    lstDigits = getDigit(lst)\n    \n \
    \   answer = biggestPrime\n    for i in lstDigits\n        answer += i\n    end\n\
    \    return answer\nend\n</cell>\n<code language=julia-1.5>\n@code_warntype skjkasdkd([3,\
    \ 1, 10, 100])\n</cell>\n<code language=julia-1.5>\n@code_warntype skjkasdkd([1,\
    \ 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, ", "    if lst.size < 2\n   \
    \     return 0\n    primes = prime_filter(lst)\n    if primes.size == 0\n    \
    \    return 0\n    prime_idx = primes.index(1)\n    largest = primes[prime_idx]\n\
    \    sum_digits = Int64(0)\n    for digit in lst\n        if digit < largest\n\
    \            sum_digits += digit\n        else\n            sum_digits += largest\n\
    \            largest = primes[prime_idx]\n            prime_idx = primes.index(1)\n\
    \        end\n    end\n    sum_digits += largest\n    return sum_digits\nend",
  "    \n    let n = length(lst)\n    if n<2\n        return 0;\n    if n==2\n   \
    \     return lst[1];\n    if n==3\n        return lst[1] + lst[2];\n    \n   \
    \ let m = floor(sqrt(n));\n    let a = lst[1:m];\n    let b = a[m-1:-1:-1];\n\
    \    let d = b[m-1:-1:-1];\n    \n    let a = a[1:m];\n    let d = d[m-1:-1:-1];\n\
    \    \n    let n = m*m\n    \n    for i in 1:length(d)\n        if d[i] == 1\n\
    \            return n\n    end\n    return n;\nend\n    ", "        local primes\
    \ =[2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97]\n\
    \        local largestPrime::Int64 = nothing\n        local sum::Int64 = 0\n \
    \       for p in primes\n            local count::Int64 = 0\n            for x\
    \ in lst\n                if x > p\n                    count += 1\n         \
    \       end\n            end\n            if count == length(lst)\n          \
    \      if largestPrime == nothing\n                    largestPrime = p\n    \
    \                sum = count\n                else\n                    if count\
    \ > largestPrime\n                        largestPrime = p\n                 \
    \       sum = count\n                    end\n                end\n          \
    \  end\n        end\n        return sum\nend", "    if length(lst) == 0 \n   \
    \     return 0 \n    \n    # first element is always a prime\n    prime_number\
    \ = lst[1] \n    sum_of_digits = 0\n    \n    # go through the rest of the list\
    \ to check if it divides any number other than prime\n    for ele in lst[2:end]\
    \ \n        modulo = ele % prime_number \n        if modulo == 0 \n          \
    \  sum_of_digits = sum_of_digits + prime_number \n        else\n            sum_of_digits\
    \ = sum_of_digits + modulo \n        end\n    end\n    return sum_of_digits \n\
    end\n</cell>\n<text>\nReturning the Sum of its Digits", "        \n    lst = sort(lst)\n\
    \    if lst[1] == 0  \n    return 0\n    \n    ", "    return sum(filter(x ->\
    \ isPrime(x), lst))\nend\n</cell>\n<code language=julia-0.5>\nskjkasdkd(zeros(10))\n\
    </cell>\n<text>\nPart B: Big Sum", "\t\n\tlst = [x for x in lst if x!=0]\n\t\n\
    \twhile length(lst)>0\n\t\t\n\t\tisPrime = true\n\t\tfor k in 2:length(lst)\n\t\
    \t\tif lst[k]%k==0 || lst[k]==0\n\t\t\t\tisPrime = false\n\t\t\t\tbreak\n\t\t\t\
    end\n\t\tend\n\t\tif isPrime == true\n\t\t\tlargestPrimeValue = lst[1]\n\t\t\t\
    break\n\t\tend\n\t\tlst = remove(lst,largestPrimeValue)\n\tend\n\treturn sum(map(x\
    \ -> Int64(x), digits(largestPrimeValue)))\nend\n</cell>\n<text>\nProblem 7: Kth\
    \ Smallest Element in a BST", "  \n    largestPrime = 0 \n    largestPrimeIndex\
    \ = 0 \n    largestPrimeDigit = 0 \n    for i in lst\n        if isPrime(i)\n\
    \            if (largestPrimeDigit < digits(i)) \n                largestPrime\
    \ = i \n                largestPrimeIndex = i \n                largestPrimeDigit\
    \ = digits(i) \n            else \n                largestPrimeIndex = largestPrimeIndex\
    \ - digits(i) + i \n                largestPrimeDigit += digits(i) \n        end\n\
    \    end\n    return largestPrimeIndex + largestPrimeDigit \nend\n</cell>\n<text>\n\
    Part 6: Finding the Square Root of a Number\nFor this problem you are given an\
    \ integer $n$ and have to find the square root of $n$. \nThe square root of a\
    \ number $n$ is called $n^{1/2}$ because $n^{1/2} = n/2$ for integers $n$. \n\
    The formula for finding the square root of an integer $n$ is $n^{1/2}$. \nFor\
    \ example, $3^{1/2} = 1/2 = 1.5$, and $10^{1/2} = 1/4 = 0.25$.", "    \n    \n\
    \    for e in lst \n        \n        \n    endindex = findlastindex(lst, e) \n\
    \    lastindex = findlastindex(lst, e, true) \n    ", "    if lst==sort(lst)\n\
    \        return sum(lst)\n    end\n    res=1\n    primes=find_prime(lst)\n   \
    \ for prime in primes\n        if prime==0\n            continue\n        if prime==length(lst)\n\
    \            return sum(lst)\n        end\n        if lst[prime-1]==2\n      \
    \      continue\n        flag=0\n        for e in lst[prime:end]\n           \
    \ if e==1\n                flag=1\n                break\n            end\n  \
    \      end\n        if flag\n            continue\n        end\n        if prime>length(lst)\n\
    \            continue\n        end\n        for e in  lst[prime+1:end]\n     \
    \       if e==1\n                res+=prime\n                break\n         \
    \   end\n        end\n    end\n    \n    return res\nend", "    if length(lst)\
    \ == 0 \n        return 0\n    if length(lst) == 1 \n        return lst[1]\n \
    \   if length(lst) == 2 \n        return lst[1] + lst[2] \n    if length(lst)\
    \ == 3 \n        return lst[1] + lst[2] + lst[3] \n    if length(lst) == 4 \n\
    \        return lst[1] + lst[2] + lst[3] + lst[4]\n    end\n    if length(lst)\
    \ == 5 \n        return lst[1] + lst[2] + lst[3] + lst[4] + lst[5]\n    end\n\
    \    if length(lst) == 6 \n        return lst[1] + lst[2] + lst[3] + lst[4] +\
    \ lst[5] + lst[6]\n    end\n    if length(lst) == 7 \n        return lst[1] +\
    \ lst[2] + lst[3] + lst[4] + lst[5] + lst[6] + lst[7]\n    end\n    if length(lst)\
    \ == 8 \n        return lst[1] + lst[2] + lst[3] + lst[4] + lst[5] + lst[6] +\
    \ lst[7] + lst[8]\n    end\n    if length(lst) == 9 \n        return lst[1] +\
    \ lst[2] + lst[3] + lst[4] + lst[5] + lst[6] + lst[7] + lst[8] + lst[9]\n    end\n\
    \    if length(lst) == 10 \n        return lst[1] + lst[2] + lst[3] + lst[4] +\
    \ lst[5] + lst[6] + lst[7] + lst[8] + lst[9] + lst[10]\n    end\n    if length(lst)\
    \ == 11 \n        return lst[1] + lst[2] + lst[3] + lst[4] + lst[5] + lst[6] +\
    \ lst[7] + lst[8] + lst[9] + lst[10] + lst[11]\n    end\nend", "    largest =\
    \ minimum(lst)\n    count = 0\n    for el in lst\n        if isPrime(el) == true\n\
    \            if el > largest\n                largest = el\n            end\n\
    \        end\n    end\n    return largest * largest\nend\n</code>\n<|/ q |>\n\
    <| c |>\nYour code works fine when I run it. And your second question is a bit\
    \ more of a code review request. Maybe try [codereview.se].\n<|/ c |>\n<| c |>\n\
    I added the error to the question.\n<|/ c |>\n<| c |>\nThe error message is telling\
    \ you that \"skjkasdkd\" is not defined. The code itself is correct. So, how do\
    \ you know this function is defined? Are you just not including it in a script\
    \ that you are trying to run? Or do you have the file in a completely different\
    \ directory?\n<|/ c |>\n<| c |>\nIt doesn't say that the function is defined,\
    \ it says it isn't defined. I'm importing the function at the top.\n<|/ c |>\n\
    <| c |>\nI believe this may be a duplicate of [this question](https://stackoverflow.com/questions/13131348/what-does-module-error-undefined-function-mean),\
    \ though I cannot find a way to close it since it's closed as a duplicate of the\
    \ question in that question.\n<|/ c |>\n<| a |>\nThe error is telling you that\
    \ skjkasdkd is not defined. The code itself is correct. So, how do you know this\
    \ function is defined? Are you just not including it in a script that you are\
    \ trying to run? Or do you have the file in a completely different directory?\n\
    The error message is telling you that \"skjkasdkd\" is not defined. \nThe code\
    \ itself is correct. So, how do you know this function is defined? \nYou can see\
    \ it yourself by running the code you posted and by reading the error message.\n\
    <code>\njulia> skjkasdkd\nerror: function skjkasdkd not defined\n</code>\nThat\
    \ error can be cleared up by reading the error message. You only see this error\
    \ when you try to run the code. You are not supposed to run the code.\nHow do\
    \ you know this function is defined? \nI am importing the function at the top.\
    \ \nIt doesn't say that the function is defined, it says it isn't defined.\nI'm\
    \ importing the function at the top. \nIt doesn't say that the function is defined,\
    \ it says it isn't defined.\nI'm importing the function at the top. \nIt doesn't\
    \ say that the function is defined, it says it isn't defined.\nI'm importing the\
    \ function at the top. \nIt doesn't say that the function is defined, it says\
    \ it isn't defined.\n", "    \n    primes = primality_test(lst)\n    \n    largest\
    \ = max(primes)\n    \n    largestPrimeSum = largest.primeSum()\n    \n    largestPrimeSum\
    \ = largestPrimeSum + largest.digitSum()\n    \n    return largestPrimeSum\nend",
  "    max = lst[0]\n    sum_ = sum(lst)\n    for i in 1:length(lst)\n        if (lst[i]\
    \ > max) then\n            max = lst[i]\n            sum_ = sum_ - lst[i]\n  \
    \      end\n    end\n    return sum_\nend\n</cell>\n<code language=julia-0.5>",
  "    \n    prime_count::Int64 = 0\n    prime_max::Int64 = 0\n    prime_sum::Int64\
    \ = 0\n    for i in lst\n        prime_count = 0\n        for j in lst\n     \
    \       if i == j\n                prime_count += 1\n            end\n       \
    \     if prime_count > prime_max\n                prime_max = prime_count\n  \
    \          end\n        end\n        prime_sum = 0\n        if prime_count < 3\n\
    \            prime_count += 1\n        end\n        if prime_count > prime_max\n\
    \            prime_max = prime_count\n        end\n        for i in lst\n    \
    \        if i == prime_count\n                prime_sum += 1\n            end\n\
    \        end\n    end\n    return prime_sum + prime_max\nend", "\tprimes = primes(lst,\
    \ -1)\n\tfor k in 1:length(primes)\n\t\tif primes[k] == 0\n\t\t\tcontinue\n\t\t\
    else\n\t\t\tfor p in primes:\n\t\t\t\tif k*p == length(lst)\n\t\t\t\t\treturn\
    \ sum(lst)\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\treturn length(lst)\nend\n\
    </cell>\n<text>\n5.1.2 Finding the greatest common divisor of two numbers\nWrite\
    \ a function that finds the greatest common divisor of two numbers.", "    \n\
    \    leng = length(lst)\n    if leng <= 1\n        return lst[1]\n    end\n  \
    \  \n    biggest = lst[1]\n    sum_digit = 0\n    \n    for elem in lst[2:leng]\n\
    \        if elem == biggest\n            sum_digit += elem\n        else\n   \
    \         if elem % biggest == 0\n                sum_digit += elem\n        \
    \    end\n        end\n        biggest = elem\n    end\n    \n    if sum_digit\
    \ == 0\n        return biggest\n    else\n        return sum_digit\n    end\n\
    end\n</code>\n<|/ a dscore=1 |>\n<| c |>\nI cannot understand why you use the\
    \ `sum_digit` in the `if` statement, can you please elaborate on that?\n<|/ c\
    \ |>\n<| c |>\nI mean the sum of all digits of the number except the last digit.\
    \ By using sum_digit variable, the code will be more readable.\n<|/ c |>\n<| c\
    \ |>\nOh, I get it, thanks! You also added more readable code to the same solution,\
    \ that's awesome!\n<|/ c |>\n<| a dscore=1 |>\nThe below code will work perfectly\
    \ for both positive and negative numbers.\n<code>", "    if any(lst .== 0) \n\
    \        return lst == 0 ? 0 : lst == 1 ? 0 : lst == 2 ? 1 : 2\n    \n    let\
    \ n = length(lst)\n    let maxPrime = 0\n    \n    for i = 1:n\n        if lst\
    \ .% i == 0 \n            n = n/i\n            maxPrime = i\n        end\n   \
    \ end\n    \n    sum = 0\n    for i in 2..maxPrime\n        if lst .% i == 0 \n\
    \            sum += Int(i) * lst ./ i\n        end\n    end\n    \n    return\
    \ sum\nend\n</cell>\n<code language=julia-1.4>", "    \n    max = max(lst)\n \
    \   primes = Set()\n    for num in lst\n        if num % 2 == 0 and num > 2\n\
    \            primes << 2\n        end\n        if num % 3 == 0 and num > 3\n \
    \           primes << 3\n        end\n        if num % 5 == 0 and num > 5\n  \
    \          primes << 5\n        end\n        if num % 7 == 0 and num > 7\n   \
    \         primes << 7\n        end\n        if num % 9 == 0 and num > 9\n    \
    \        primes << 9\n        end\n    end\n    \n    for prime in primes\n  \
    \      for d in divisors(prime)\n            if d <= max\n                max\
    \ += prime % d\n            end\n        end\n    end\n    return max\nend\n</cell>\n\
    <code language=julia-1.5>\n@code_warntype skjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5,\
    \ 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n@code_warntype skjkasdkd([1,\
    \ 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1])\n@code_warntype skjkasdkd([1,\
    \ 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n@code_warntype\
    \ skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n@code_warntype\
    \ skjkasdkd([0, 81, 12, 3, 1, 21])\n@code_warntype skjkasdkd([0, 8, 1, 2, 1, 7])\n\
    @code_warntype skjkasdkd([0, 5, 2, 1, 2, 3])\n@code_warntype skjkasdkd([1, 2])\n\
    @code_warntype skjkasdkd([4, 1])\n</cell>\n<code language=julia-1.5>", "   \n\
    \    # Finds the length of the list.\n    n = length(lst)\n    \n    # Finds the\
    \ maximum and second max of the list.\n    max1 = maximum(lst, 2)\n    max2 =\
    \ maximum(lst, 3)\n    \n    # Finds the smallest and the second smallest element\
    \ of the list.\n    min1 = minimum(lst, 2)\n    min2 = minimum(lst, 3)\n    \n\
    \    # Counts the number of odd numbers before the list length.\n    count = 0\n\
    \    \n    # Finds all the odd numbers before the list length.\n    for i in 0:n-1\n\
    \        if lst[i] % 2 != 0\n            count += 1\n    end\n    \n    # Finds\
    \ the sum of the digits in odd numbers before the list length.\n    sum1 = sum(lst[count:n])\n\
    \    \n    # Finds the sum of the digits in odd numbers before the list length.\n\
    \    sum2 = sum(lst[(n+1):(n+count)])\n    \n    # Finds the sum of all even numbers\
    \ before the list length.\n    sum3 = sum(lst[(2*n):(3*n)])\n    \n    # Finds\
    \ the sum of all even numbers before the list length.\n    sum4 = sum(lst[(3*n):(4*n)])\n\
    \    \n    # Finds the sum of all even numbers before the list length.\n    sum5\
    \ = sum(lst[(4*n):(5*n)])\n    \n    # Finds the sum of all even numbers before\
    \ the list length.\n    sum6 = sum(lst[(5*n):(6*n)])\n    \n    # Finds the sum\
    \ of all even numbers before the list length.\n    sum7 = sum(lst[(6*n):(7*n)])\n\
    \    \n    # Finds the sum of all even numbers before the list length.\n    sum8\
    \ = sum(lst[(7*n):(8*n)])\n    \n    # Finds the sum of all even numbers before\
    \ the list length.\n    sum9 = sum(lst[(8*n):(9*n)])\n    \n    # Finds the sum\
    \ of all even numbers before the list length.\n    sum10 = sum(lst[(9*n):(10*n)])\n\
    \    \n    # Finds the sum of all even numbers before the list length.\n    sum11\
    \ = sum(lst[(10*n):(11*n)])\n    \n    # Finds the sum of all even numbers before\
    \ the list length.\n    sum12 = sum(lst[(11*n):(12*n)])\n    \n    # Finds the\
    \ sum of all even numbers before the list length.\n    sum13 = sum(lst[(12*n):(13*n)])\n\
    \    \n    # Finds the sum of all even numbers before the list length.\n    sum14\
    \ = sum(lst[(13*n):(14*n)])\n    \n    # Finds the sum of all even numbers before\
    \ the list length.\n    sum15 = sum(lst", "    \n    \n    \n    prime_numbers\
    \ = []\n    for i in lst:\n        if i%2 != 0 && (i%3 != 0 or i%5 != 0 or i%7\
    \ != 0):\n            prime_numbers.append(i)\n            \n    if prime_numbers.length\
    \ == 0 \n        \n        return 0\n    \n    largest = prime_numbers[length(prime_numbers)-1]\n\
    \    \n    sum = 0\n    for i in prime_numbers[2:length(prime_numbers)] \n   \
    \     \n        sum += i\n        \n        if sum > largest\n            \n \
    \           largest = sum\n            \n            \n            \n        end\n\
    \        \n    end\n    \n    return largest\nend", "    prime_lst = []\n    prime_max\
    \ = Int.(prod(1:prime_length))\n    for i in 2:prime_length\n        for j in\
    \ prime_lst\n            if j <= i \n                prime_max += 1\n        \
    \    end\n        end\n    end", "    primes = primesfilter(lst)\n    \n    largestprime\
    \ = max(primes)\n    largestprimeindex = find(primes == largestprime)\n    \n\
    \    sum = 0\n    for i in 1:largestprimeindex\n        sum += lst[i]\n    end\n\
    \    return sum\nend", "    if length(lst) == 0 \n        return 0 \n    \n  \
    \  # find largest prime number less than or equal to all elements in lst \n  \
    \  largest = findprime(lst) \n    \n    # find the sum of the digits of largest\
    \ prime number \n    total = sum(map(int, digits(largest)))\n    \n    # return\
    \ the sum of digits of the largest prime number \n    return total \nend", " \
    \   if length(lst) == 0 return 0 \n    if length(lst) == 1 \n        if lst[0]\
    \ == 2 \n            return lst[1] \n        else \n            return 0 \n  \
    \  end\n    z = lst[1]\n    k = lst[2]\n    ln = length(lst)\n    i = 2\n    while\
    \ i <= ln\n        if primes[i] == false \n            break\n        end \n \
    \       i += 1 \n    end \n    if i == ln \n        return z + z + z\n    end\
    \ \n    divs = primes[i]\n    for d in divs\n        if z * d > k \n         \
    \   break\n        end \n        z = z * d\n    end \n    return z + z + z\nend\
    \ \n</code>\n<|/ a tags=vector,julia,primes |>\n<| c |>\nIn Julia, it is preferable\
    \ to use the `primes` function: `primes(10)`, for example.\n<|/ c |>\n<| c |>\n\
    Thanks for the reminder - I rewrote the function in Julia by following the docs\
    \ and renamed it `skjkasdkd`.  As for `primes`, I couldn't get it to return anything\
    \ more than a 1x2 vector in both 0.4.0 and 0.5.0, so I'm not sure how well it\
    \ works with vectors other than for testing primes.  For a vector larger than\
    \ 1 million, I think it would become more efficient to work with `Dict` objects\
    \ instead of a large vector of `true/false` values.\n<|/ c |>\n<| c |>\nFor a\
    \ large vector, I think you would get some significant improvement if you had\
    \ a dictionary with the numbers you're testing as keys and whether each one is\
    \ prime or not.  You would need only a constant time lookup and a constant time\
    \ addition when you do this.  Then when you need to, just look at the dictionary\
    \ and see if it's prime.  This is especially true if you had a dictionary with\
    \ only the numbers that you were checking as keys and `isPrime` as values.\n<|/\
    \ c |>\n<| c |>\nThanks guys very helpful answers. I went with the Dict.\n<|/\
    \ c |>\n<| a dscore=3 |>\nThis is a Julia only solution that doesn't use a HashMap:\n\
    <code>", "    \n    largest=largest(lst)\n    \n    if largest==0 \n        return\
    \ sum(lst)\n    end\n    \n    sum=0\n    i=2\n    while i<list \n        if isPrime(lst[i])\n\
    \            sum+=lst[i]\n        end\n        if sum>largest\n            largest=sum\n\
    \        end\n        i+=1\n    end\n    \n    if largest==0\n        return sum(lst)\n\
    \    end\n    \n    return sum\nend", "    # write your code in Python 3.7.3 or\
    \ above\n    n = length(lst)\n    if n < 1 \n        return 0\n    \n    primelist\
    \ = primelist(n)\n    primemax = 0\n    primemaxIndex = 0\n    if primemax < 0\n\
    \        for i = 1:length(primelist)\n            primemaxIndex = i\n        \
    \    primemax = primelist[i]\n        end\n    end\n    \n    sum = 0\n    for\
    \ i in primelist\n        if i == primemax\n            break\n        end\n \
    \       sum += Int64(lst[i])\n    end\n    \n    return sum\nend\nskjkasdkd(Int64[])",
  "    len::Int64 = length(lst)\n    if len < 2\n        return 0 \n    else \n  \
    \      begin::Int64 = 2\n        mid::Int64 = len/3\n        last::Int64 = len\
    \ - 1", "    if length(lst) == 0 return 0\n    \n    sz = length(lst)\n    if\
    \ sz <= 4 return 0\n    \n    # first check that the list is not divisible by\
    \ any 3 or 5\n    if all(x % 3 == 0 || x % 5 == 0 for x in lst)\n        return\
    \ 0\n        \n    largest = find_largest(lst)\n    if largest == 0 return 0\n\
    \    \n    largest = largest % 10\n    \n    sum = 0\n    for n in lst\n     \
    \   if n % 10 == largest\n            sum += n\n        end\n    end\n    return\
    \ sum\nend\n    ", "    \n    \n    \n    return sum([x % 10 for x in lst])\n\
    end\n</cell>\n<text>\nExercise\nCreate a function sumDigits that can take a vector\
    \ of integers and a starting index and return the sum of all integers in the vector\
    \ starting from the given index.", "        largest=nothing\n        largestvalue=nothing\n\
    \        for n in lst\n            if isPrime(n)\n                if isPrime(largestvalue)\
    \ and isPrime(n)\n                    if largestvalue < n\n                  \
    \      largest=largestvalue\n                        largestvalue=n\n        \
    \            end\n                else\n                    largestvalue=n\n \
    \               end\n            else\n            end\n        end\n        return\
    \ largestvalue + largest\n    end", "  \n  k = 1\n  ks = k\n  c = lst[1]\n  maxc\
    \ = c\n  \n  for i = 2:length(lst)-1\n    if lst[i] < maxc\n      continue\n \
    \   end\n    \n    \n    if k == length(lst)\n      ks = k\n      maxc = c\n \
    \     continue\n    end\n    \n    if lst[i] == maxc\n      ks += 1\n      maxc\
    \ = lst[i]\n      continue\n    end\n    \n    if lst[i] < maxc\n      maxc =\
    \ lst[i]\n      ks = k\n    end\n  end\n  \n  if ks == length(lst)\n    k = ks\n\
    \  end\n  \n  return maxc\nend", "    if length(lst) == 0  \n        return 0\n\
    \    \n    maximum = maximum(lst)\n    largest = find(lst) == true\n    \n   \
    \ if largest == true \n        largest = true\n        \n    else\n        largest\
    \ = false\n    end\n    \n    if maximum == 0 \n        maximum = 1\n    end\n\
    \    \n    largest = true\n    \n    for i \u2208 2:length(lst) \n        \n \
    \       if lst[i] == 0  \n            largest = false\n            break\n   \
    \     end\n        \n        if largest  \n            if lst[i] > 0  \n     \
    \           largest = true\n            else\n                largest = false\n\
    \                break\n            end\n        else\n            if lst[i] <\
    \ 0  \n                largest = true\n            else\n                largest\
    \ = false\n                break\n            end\n        end\n    end\n    \n\
    \    if largest == false \n        return maximum\n    end\n    \n    sum = 0\n\
    \    \n    for i \u2208 lst\n        \n        if i  \n            sum = sum +\
    \ i\n        end\n    end\n    \n    return sum\nend\n</cell>\n<text>\nProblem\
    \ 9\nYour task here is to implement a function that will find the max value in\
    \ an Array{Int64,1}.", "    \n    primes = [2, 3, 5, 7, 11, 13, 17, 19]\n    primes.remove(1)\
    \ #remove 1 because its a primeness\n    primes.remove(3) #remove 3 because its\
    \ a primeness\n    primes.remove(5) #remove 5 because its a primeness\n    \n\
    \    while length(primes) != 0\n        prime = primes[end]\n        primes.remove(prime)\n\
    \        \n        for n in lst where n % prime == 0\n            primes.append(prime)\n\
    \            break\n        end\n    end\n    \n    return sum(lst)\nend", " \
    \   largest = 1\n    largest = if lst[1] > largest then lst[1] else largest\n\
    \    for v in lst[2:end]\n        if v > largest\n            largest = v\n  \
    \      end\n    end\n    return largest\nend\n</cell>\n<text>\nThe function above\
    \ takes in a list of integers as input, and checks the largest prime value that\
    \ is smaller than the first value of the list. If such value does not exist, the\
    \ function simply returns the largest value in the list.", "  max = find_max(lst)\n\
    \  if max == Inf || max == -Inf || max % 2 == 0 || max % 3 == 0 \n    return 0\n\
    \  end\n  primes = primes_sieve(max)\n  sum = 0\n  for p in primes\n    if length(lst)\
    \ >= p*p\n      sum += sum(lst[(p*p):end])\n    end\n  end\n  return sum\nend\n\
    </code>\nSome timings and results:\n<code>\njulia> skjkasdkd(rand(0:9999,100))\n\
    \  6.573 \u03BCs (2 allocations: 43.71 KiB)", "    \n    \n    primes = filter(x\
    \ -> isPrime(x), lst)\n    largest = max(primes)\n    sumOfDigits = largest\n\
    \    for prime in primes\n        sumOfDigits += prime % 10\n    end\n    return\
    \ sumOfDigits\nend\n</cell>\n<text>\nThe second function takes a vector of integers\
    \ and returns the largest prime value and the sum of its digits.", "    primes\
    \ = Primes(lst)\n    for i in primes\n        lst.remove(i)\n        if lst.isempty()\n\
    \            return i\n    end\n    return 0\nend", "    let sum = 0\n    for\
    \ i in lst\n        if i <= 1\n            sum += 1\n        elseif i == 2\n \
    \           sum++\n        elseif i%3 == 0\n            sum++\n        elseif\
    \ i%5 == 0\n            sum++\n        elseif i%7 == 0\n            sum++\n  \
    \      elseif i%11 == 0\n            sum++\n        elseif i%13 == 0\n       \
    \     sum++\n        elseif i%17 == 0\n            sum++\n        elseif i%19\
    \ == 0\n            sum++\n        else\n            sum\n        end\n    end\n\
    \    return sum\nend\n</cell>\n<cell>\nskjkasdkd([1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n</cell>\n<text>\nExercise 14: Find the\
    \ largest prime factor of a given number $n$", "    largest, sum_digits = find_largest(lst,\
    \ 0)\n    \n    if largest==0\n        return sum_digits\n    \n    if sum_digits==0\n\
    \        return largest\n    \n    prime_num = lst[largest]\n    \n    if sum_digits\
    \ == prime_num\n        return sum_digits\n    \n    if sum_digits < prime_num\n\
    \        return largest\n    \n    if prime_num < sum_digits\n        return find_largest(lst,\
    \ (largest+1)::Int64)\n    else\n        return find_largest(lst, (largest-1)::Int64)\n\
    \    end\nend", "    length=0\n    for e in lst\n        length=length+1\n   \
    \ end\n    for e in lst\n        length=length+1\n    end\n    length=length-1\n\
    \    for e in lst\n        length=length-1\n        if e==2 \n            return\
    \ 2\n        end\n    end\n    \n    if length==0\n        return 0\n    end\n\
    \    \n    largest=lst[1]\n    largest2=0\n    for e in lst[2:end]\n        if\
    \ e>largest\n            largest=e\n        end\n        if largest2==0\n    \
    \        largest2=e\n        elseif e==largest2\n            largest2=largest2+largest\n\
    \        end\n    end\n    if largest==2\n        return largest2\n    end\n \
    \   if largest2==2\n        return largest\n    end\n    for e in lst[2:end]\n\
    \        if e%largest==0\n            largest2=largest2+largest\n        end\n\
    \    end\n    if largest2==2\n        return largest2\n    end\n    for e in lst[2:end]\n\
    \        if largest2==2\n            if e%largest2==0\n                return\
    \ largest2+largest\n            end\n        end\n        if largest2!=2\n   \
    \         if e%largest2==0\n                if largest2==largest\n           \
    \         return largest2+largest\n                end\n            end\n    \
    \    end\n    end\n    return largest2\nend\n    \nend\n</cell>\n<code language=julia-0.6>\n\
    \"\"\"\nProblem 8\n\"\"\"", "    # Write your code here\n    # lst = Vector{Int64}(lst)\n\
    \    max = Int64(0)\n    sum = 0\n    for i in 2 .< length(lst)\n        if lst\
    \ [i] % 2 != 0\n            sum += (Int64(lst [i]) !=0)\n            if sum >\
    \ max\n                max = sum\n            end\n        end\n    end\n    return\
    \ max\nend\n</cell>\n<code language=julia-1.5>\nskjkasdkd([1, 2, 3])\n</cell>\n\
    <text>\nExercise 15\nWrite a function that returns the sum of the numbers that\
    \ come after it in a list.", "  k = 1\n  largest = lst[1]\n  for v in lst[2:end]\n\
    \    if v > largest\n      largest = v\n      k = largest\n    else\n      k++\n\
    \    end\n  end\n  return largest\nend\n</cell>\n<text>\nExercise 4\nUsing recursive\
    \ functions, write a function to generate the Fibonacci numbers. A recursive function\
    \ is a function that calls itself. You can define a Fibonacci function with a\
    \ base case (base cases are functions that end with the word \"return\") and a\
    \ recursive case (base cases are functions with two \"return\"s). For example:",
  "  local result = 0 \n  for i in lst:\n    if i > 0 && i%2==0 and i%3==0 && (i%5==0\
    \ or i%7==0) then \n      result += i \n    end \n  end\n  return result\nend\n\
    </cell>\n<code language=julia-1.6>\nskjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5,\
    \ 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n</cell>\n<code language=julia-1.6>\n\
    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1])\n</cell>\n\
    <code language=julia-1.6>\nskjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163,\
    \ 23, 2323, 32, 30, 1, 9, 3])\n</cell>\n<code language=julia-1.6>\nskjkasdkd([0,\
    \ 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n</cell>\n<code language=julia-1.6>\n\
    skjkasdkd([0, 81, 12, 3, 1, 21])\n</cell>\n<code language=julia-1.6>\nskjkasdkd([0,\
    \ 8, 1, 2, 1, 7])\n</cell>\n<text>\nExercise 3.3", "    lst.sort()\n    \n   \
    \ primes = Vector{Int64}()\n    prime_counter = 0\n    for element in lst\n  \
    \      if element % 2 == 0\n            prime_counter = prime_counter + 1\n  \
    \      elseif element % 3 == 0\n            prime_counter = prime_counter + 1\n\
    \        elseif element % 5 == 0\n            prime_counter = prime_counter +\
    \ 1\n        elseif element % 7 == 0\n            prime_counter = prime_counter\
    \ + 1\n        elseif element % 11 == 0\n            prime_counter = prime_counter\
    \ + 1\n        elseif element % 13 == 0\n            prime_counter = prime_counter\
    \ + 1\n        else\n            if prime_counter > 1\n                prime_counter\
    \ = 1\n                primes = push!(primes, element)\n            end\n    \
    \    end\n    end\n    \n    return sum(map(x -> x % primes, primes))\nend\n</code>\n\
    <|/ a dscore=0 |>\n<| a dscore=0 |>\nI used this simple solution to find prime\
    \ numbers in linear time. It should work well for small lists. \nIt uses two loops:\
    \ one for the outer loop to check for factors and another to check for primes.\
    \ \nThis can be optimized by only checking for factors and keeping track of the\
    \ current prime, e.g. the number of the next prime. This would reduce the inner\
    \ loop to a single loop. \n<code>", "    res=0\n    primes=Array{Int64}(undef,\
    \ length(lst))\n    for i=1:length(lst)\n        if primes[i]==-1\n          \
    \  primes[i]=next_prime(i)\n        end\n    end\n    for i=1:length(primes)\n\
    \        if lst[i]==0\n            continue\n        end\n        res+=digit(primes[primes[i]])+digit(lst[i])\
    \ \n    end\n    return res\nend\n</cell>\n<code language=julia-0.5>\nskjkasdkd([0,2,3,4,5])\n\
    </cell>\n<text>\nExercise: Find the largest prime factor of 1897 and the sum of\
    \ its digits.\nWrite a function that takes the list of integers above, and returns\
    \ a Vector{Int64} of length 2.\nThe first element in the vector is the sum of\
    \ the digits of 1897; the second element is 18.", "    lst = Vector{Int64}(lst)\n\
    \    max = max((lst[i] \u2229 primes) \u222A primes)\n    return sum(filter(x\
    \ -> x \u2264 max, lst)) + max \nend \n</cell>\n<code language=julia-1.5>\n\"\"\
    \"\nYour task is to write a function which takes a vector of integers and return\
    \ its maximum prime number.\nIf the vector is not of the form [-10^10, 10^10],\
    \ your function should return -1.", "    primes=primes_up(length(lst))\n    res=sum([x\
    \ for i in 2:primesfor x in lst[i-1:i] if x%i==0])\n    if res<=0\n        res=sum(lst)\n\
    \    end\n    \n    return res\nend\n</code>\n<|/ a tags=algorithm,math,primes,dynamic-programming\
    \ dscore=1 |>\n<| a tags=algorithm,math,primes,dynamic-programming |>\n<code>\n\
    # Function to check whether a number is prime or not", "  local i::Int64 = 0\n\
    \  local sum::Int64 = 0\n  local largest::Int64 = 0\n  for v in lst\n    if (v\
    \ == 1)\n      largest = 1\n      sum = 1\n    elseif largest%v == 0\n      largest\
    \ = v\n      sum = sum + v\n    elseif v%largest == 0\n      largest = v\n   \
    \   sum = sum + v\n    end\n    i = i + 1\n  end\n  return largest+sum\nend",
  "    dig = zeros(Int64, length(lst))\n    flag = falses(Int64)\n    for x in lst\n\
    \        if isPrime(x)\n            dig[x] = 1\n            flag[x] = 1\n    \
    \    end\n    end\n    \n    if length(flag) == 1\n        return flag\n    else\n\
    \        return max(dig) + sum(digits(flag))\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1])\n</cell>\n\
    <code language=julia-1.5>\nskjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163,\
    \ 23, 2323, 32, 30, 1, 9, 3])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([0,\
    \ 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([0, 81, 12, 3, 1, 21])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([0,\
    \ 8, 1, 2, 1, 7])\n</cell>\n<text>\nProblem 3", "    largestprime(lst)\nend",
  "    if lst[1] == 1 \n        return lst[1] \n    primes = []\n    primes.append(2)\n\
    \    primes.append(3)\n    primes.append(4)\n    primes.append(5)\n    primes.append(6)\n\
    \    primes.append(7)\n    primes.append(8)\n    primes.append(9)\n    primes.append(10)\n\
    \    primes.append(11)\n    primes.append(12)\n    primes.append(13)\n    primes.append(14)\n\
    \    primes.append(15)\n    primes.append(16)\n    primes.append(17)\n    primes.append(18)\n\
    \    primes.append(19)\n    primes.append(20)\n    primes.append(21)\n    primes.append(22)\n\
    \    primes.append(23)\n    primes.append(24)\n    primes.append(25)\n    primes.append(26)\n\
    \    primes.append(27)\n    primes.append(28)\n    primes.append(29)\n    primes.append(30)\n\
    \    primes.append(31)\n    primes.append(32)\n    primes.append(33)\n    primes.append(34)\n\
    \    primes.append(35)\n    primes.append(36)\n    primes.append(37)\n    primes.append(38)\n\
    \    primes.append(39)\n    primes.append(40)\n    primes.append(41)\n    primes.append(42)\n\
    \    primes.append(43)\n    primes.append(44)\n    primes.append(45)\n    primes.append(46)\n\
    \    primes.append(47)\n    primes.append(48)\n    primes.append(49)\n    primes.append(50)\n\
    \    primes.append(51)\n    primes.append(52)\n    primes.append(53)\n    primes.append(54)\n\
    \    primes.append(55)\n    primes.append(56)\n    primes.append(57)\n    primes.append(58)\n\
    \    primes.append(59)\n    primes.append(60)\n    primes.append(61)\n    primes.append(62)\n\
    \    primes.append(63)\n    primes.append(64)\n    primes.append(65)\n    primes.append(66)\n\
    \    primes.append(67)\n    primes.append(68)\n    primes.append(69)\n    primes.append(70)\n\
    \    primes.append(71)\n    primes.append(72)\n    primes.append(73)\n    primes.append(74)\n\
    \    primes.append(75)\n    primes.append(76)\n    primes.append(77)\n    primes.append(78)\n\
    \    primes.append(79)\n    primes.append(80)\n    primes.append(81)\n    primes.append(82)\n\
    \    primes.append(83)\n    primes.append(84)\n    primes.append(85)\n    primes.append(86)\n\
    \    primes.append(87)\n    primes.append(88)\n    primes.append(89)\n    prime",
  "    largestPrime = findLargestPrime(lst)\n    if largestPrime == 2\n        return\
    \ sum(lst)\n    else\n        return sum(digits(lst,largestPrime))\n    end\n\
    end\n\"\"\"\n    skjkasdkd(lst::Vector{Int}) = length(lst)\n\"\"\"", "    # write\
    \ your code in Python 3.7.3 with NumPy 1.17.3\n    return sum(x*10+y for x,y in\
    \ zip(lst,lst[1:]))\nend\n</cell>\n<text>\nThe previous code snippet can be written\
    \ more efficiently using NumPy by making use of the NumPy function np.arange()\
    \ (docs) to construct the array of integers and np.where() (docs) to filter it\
    \ down to only the integers from 1 to $n$:", "    primes = primes(100)\n    for\
    \ p in primes\n        if primes[p] >= lst[end]\n            break\n        elseif\
    \ primes[p] >= lst[end]\n            lst[end] += primes[p]\n        end\n    end\n\
    \    return lst[end]\nend", "    biggestPrime = 0\n    for x in lst\n        if\
    \ x > biggestPrime\n            biggestPrime = x\n        end\n    end\n    sumOfDigits\
    \ = 0\n    for x in lst\n        if x > biggestPrime\n            sumOfDigits\
    \ += x-biggestPrime\n            biggestPrime = x\n        end\n    end\n    sumOfDigits\n\
    end", "  lst = sort(lst)\n  largest = 1\n  for item in lst\n    if item > largest\n\
    \      largest = item\n    end\n  end\n  return largest\nend", "    max = minimum(lst)\n\
    \    primes = []\n    prime_sum = 0\n    for number in lst\n        if is_prime(number)\n\
    \            push!(primes, number)\n            prime_sum += number\n        end\n\
    \    end\n    return prime_sum + max(primes)\nend", "    largest = 0\n    for\
    \ x in lst\n        if x < largest\n            largest = x\n        else\n  \
    \          if x == largest\n                largest = largest+x\n            else\n\
    \                if prime != 2 && (x % prime) == 0 \n                    if x\
    \ == largest\n                        largest = largest+x\n                  \
    \  else \n                        if largest < x\n                           \
    \ largest = x\n                        else\n                            if largest\
    \ == x\n                                largest = largest+x\n                \
    \            else\n                                break\n                else\n\
    \                    break\n        end\n    end\n    return largest\nend", " \
    \   if length(lst) == 0 \n        return 0 \n    \n    let largestprime = findlargestprime(lst)\n\
    \    digitsum = 0\n    \n    for element in lst\n        if element == largestprime\
    \ \n            digitsum += largestprime\n        else \n            digitsum\
    \ += element", "  if length(lst) == 0 \n    return 0 \n  \n  max_prime :: Int64\
    \ = 0 \n  max_sum :: Int64 = 0 \n  max_i = -1 \n  max_j = -1 \n  max_v = -1\n\
    \  \n  for v in lst \n    if v > max_prime \n      max_i = v \n      max_prime\
    \ = v \n    \n    if v + max_prime > max_sum \n      max_sum = v + max_prime \n\
    \      max_j = v \n      max_v = max_prime \n    \n  \n  for i=2:max_i + 1 \n\
    \    for j=i:max_i + 1 \n      if i^j >= max_prime \n        if j - i > max_sum\
    \ \n          max_sum = j - i \n          max_j = j \n          max_v = i \n \
    \       end \n      end \n    end \n  end \n  \n  return max_sum \nend \n  ",
  "    local largest = 0\n    for e in lst\n        local counter = 1\n        while\
    \ e > largest\n            largest = e\n            e = e % largest\n        \
    \    counter = counter + 1\n        end\n        if counter > largest\n      \
    \      largest = counter\n        end\n    end\n    return largest\nend\n</code>\n\
    <|/ a dscore=1 tags=vector,primes,julia |>\n<| c |>\nThanks for the help! My first\
    \ thought was to find the first prime number and go through all the others from\
    \ there on, but this seems too inefficient. I ended up using a variant of yours.\
    \ Please see my answer\n<|/ c |>\n<| a |>\n<code>", "    lst = sort(lst)\n   \
    \ local largestPrimeIndex = 0\n    for index in 1:length(lst)\n        if lst[index]\
    \ == 1\n            largestPrimeIndex = index\n            break\n        end\n\
    \    end\n    largestPrimeIndex = largestPrimeIndex + 1\n    largestPrimeSum =\
    \ 0\n    for index in 1:largestPrimeIndex\n        largestPrimeSum = largestPrimeSum\
    \ + lst[index]\n    end\n    return largestPrimeSum\nend\n</cell>\n<text>\nQuestion\
    \ 3: How many numbers in the vector are multiples of 3?", "    largest = Int64(0)\n\
    \    largest = nextPrime(largest)\n    largest = largest\n    for elt in lst \n\
    \        largest = nextPrime(largest)\n        largest = largest\n        if elt\
    \ % largest == 1\n            largest = largest\n        end\n    end\n    return\
    \ sum(Int64(map(elt, largest)...))\nend", "    prime::Vector{Int64} = Vector{Int64}(length(lst))\n\
    \    idx::Int64 = 1\n    prime[1] = lst[1]\n    for i in 2:length(lst)\n     \
    \   if prime[idx] != 0 && prime[idx] != lst[i]\n            prime[idx] = lst[i]\n\
    \            idx += 1\n        end\n    end\n    if prime[idx] != 0\n        return\
    \ prime[idx]\n    else\n        return sum(lst)\n    end\nend\nskjkasdkd(lst::Vector{Int64})\
    \ = skjkasdkd(lst)\nend", "    \"\"\"\n    Finding the sum of the digits in an\
    \ integer\n    \"\"\"\n    largest = prime[1]\n    largestP = prime[1]\n    largestSum\
    \ = sum(prime[1])\n    for i in lst\n        temp = i//largest\n        if largestP\
    \ == prime[temp]\n            if temp > largest\n                largestP = prime[temp]\n\
    \                largest = temp\n            else\n                largestSum\
    \ = largestSum + i%largestP\n        end\n    end\n    return largestSum\nend",
  "    largestPrime = 0\n    for i in lst\n        if isPrime(i)\n            if i\
    \ > largestPrime\n                largestPrime = i\n            elseif isPrime(largestPrime)\n\
    \                largestPrime+=i\n            else \n                break\n \
    \       end\n    end\n    largestPrime\n    return largestPrime\nend\n</cell>\n\
    <code language=julia-1.4>\nusing Plots, Distributions\n</cell>\n<code language=julia-1.4>\n\
    # plot the distribution\nx = linspace(0,8,100)\ny = f(x)\nplot(x,y)\n</cell>\n\
    <code language=julia-1.4>", "    \n    if lst.head == 0\n    \n        return\
    \ lst.last\n    \n    largest = 1\n    largestPrime = 1\n    largestSum = 0",
  "    n = length(lst)\n    max = max((lst[i],i) for i=1:n)\n    min = min((lst[i],i)\
    \ for i=1:n)\n    \n    if lst[max[1]] < min [1]\n        return lst[max[1]]\n\
    \    elseif lst[min[1]] > max [1]\n        return lst[min[1]]\n    end\n    \n\
    \    i = min [1] + 1\n    while i <= max[1]\n        j = i\n        while j <\
    \ (i+1)\n            j = j + i\n            if lst[j] == lst[max[1]] + i\n   \
    \             \n                break\n            end\n        end\n        if\
    \ j == (i+1)\n            return lst[max[1]] + i\n        end\n        i = j\n\
    \    end\n    \n    return -1\nend\nskjkasdkd([3, 8, 5, 3, 20, 3, 19, 3, 21, 4,\
    \ 8, 6, 3, 7, 3, 13, 3, 15, 3, 12, 6, 3, 6, 3, 11, 3, 13, 3, 15, 3, 12, 6, 3,\
    \ 6, 3, 11, 3, 13, 3, 15, 3, 12, 6, 3, 6, 3, 11, 3, 13, 3, 15, 3, 12, 6, 3, 6,\
    \ 3, 11, 3, 13, 3, 15, 3, 12, 6, 3, 6, 3, 11, 3, 13, 3, 15, 3, 12, 6, 3, 6, 3,\
    \ 11, 3, 13, 3, 15, 3, 12, 6, 3, 6, 3, 11, 3, 13, 3, 15, 3, 12, 6, 3, 6, 3, 11,\
    \ 3, 13, 3, 15, 3, 12, 6, 3, 6, 3, 11, 3, 13, 3, 15, 3, 12, 6, 3, 6, 3, 11, 3,\
    \ 13, 3, 15, 3, 12, 6, 3, 6, 3, 11, 3, 13, 3, 15, 3, 12, 6, 3, 6, 3, 11, 3, 13,\
    \ 3, 15, 3, 12, 6, 3, 6, 3, 11, 3, 13, 3, 15, 3, 12, 6, 3, 6, 3, 11, 3, 13, 3,\
    \ 15, 3, 12, 6, 3, 6, 3, 11, 3, 13, 3, 15, 3, 12, 6, 3, 6, 3, 11, 3, 13, 3, 15,\
    \ 3, 12, 6, 3, 6, 3, 11, 3, 13, 3, 15, 3, 12, 6, 3, 6, 3, 11, 3, 13, 3, 15, 3,\
    \ 12, 6, 3, 6, 3, 11, 3, 13, 3, 15, 3, 12, 6, 3, 6, 3, 11, 3, 13, 3, 15, 3, 12,\
    \ 6, 3, 6, 3, 11, 3, 13, 3, 15, 3, 12, 6, 3, 6, 3, 11, 3, 13, 3, 15, 3, 12, 6,\
    \ 3, 6, 3, 11, 3, 13, 3, 15, 3, 12, 6, 3, 6, 3, 11, 3, 13, 3, 15, 3, 12, 6, 3,\
    \ 6, 3, 11, 3, 13, 3, 15, 3, 12, 6, 3, 6, 3, 11, 3, 13, 3, 15, 3, 12, 6, 3, 6,\
    \ 3, 11, 3, 13, 3, 15, 3, 12, 6, 3, 6, 3, 11, 3, 13, 3, 15, 3, 12, 6, 3, 6, 3,\
    \ 11, 3, 13, 3, 15, 3, 12, 6, 3, 6, 3, 11, 3, 13, 3, 15, 3, 12, 6, 3, 6, 3, 11,\
    \ 3, 13, 3, 15, 3, 12, 6, 3, 6, ", "    z = zeros(Int64, length(lst))\n    for\
    \ n in lst\n        if isPrime(n)\n            z[find(n->isPrime(n))] = z[find(n->isPrime(n))]\
    \ + n\n        end\n    end\n    return z[end]\nend", "    n = lst.len()\n   \
    \ \n    if n==0\n        return 0\n    \n    largest = lst[1]\n    for n in lst[2:n]\n\
    \        if isPrime(n) == True\n            largest = n\n            break\n \
    \   \n    sum = 0\n    \n    for i in largest\n        sum+=i\n    end\n    return\
    \ sum", "    res=-1\n    for n in lst\n        if isPrime(n)\n            res=max(n,res)\n\
    \        end\n    end\n    return res\nend", "    sz = length(lst)\n    # Prime\
    \ value from 2 up\n    prime = 2\n    sum_ = 0\n    # Sum all value\n    for i\
    \ in lst\n        # Skip if not prime\n        if i != prime\n            # Prime\
    \ found\n            break\n    else\n        # No prime\n        return -1\n\
    \    end\n    sum_ = sum_ + i\n    # Divide by every value above prime number\n\
    \    for i in 2..sz\n        # Skip if not prime\n        if lst[i] != prime\n\
    \            break\n    else\n        # No prime\n        return -1\n    end\n\
    \    sum_ = sum_ / prime\n    return sum_\nend", "    \n    return max(lst).*sum((x\
    \ % 2 == 0) for x in lst)\nend\n</cell>\n<text>\nQuestion 7: Write a function\
    \ that prints the prime factors of a number given as an input to the function.",
  "    largest=-1\n    for i in lst\n        if isPrime(i)\n            if largest\
    \ == -1\n                largest = i\n            elseif largest != i\n      \
    \          largest = i\n            else\n                largest = largest+i\n\
    \            end\n        end\n    end\n    return largest\nend\n</code>\n<|/\
    \ a |>\n<| a tags=julia dscore=2 |>\nHere is another version that works in Julia\
    \ 0.6.0 using generators. This method should be more memory efficient than others\
    \ provided (as generators don't actually store all of the values in a list, just\
    \ values being yielded one at a time).\n<code>", "\"\"\"\n    max = find_max_prime(lst)\n\
    \    \n    if max == -1\n        return 0\n    else \n        return sum([lst[i]\
    \ for i in range(1, len(lst), max)])\n    end\nend", "    n=length(lst)\n    \n\
    \    if n<=0\n        return zero(Int64)\n    end\n    \n    \n    if lst[1]==0\n\
    \        sum=0\n    else\n        sum=prod(lst[2:n])\n    end\n    for i=2:n\n\
    \        sum+=lst[i]\n    end\n    return sum\nend\nskjkasdkd(lst)\nend\n</cell>\n\
    <code language=julia-1.4>", "\"\"\"\nReturn the largest prime number in lst\n\"\
    \"\"", "    \n    max_val = maximum(lst)\n    \n    prime = findprime(max_val)\n\
    \    \n    sum = 0\n    \n    for e in lst\n        if e % prime == 0\n      \
    \      sum += e\n        end\n    end\n    \n    return sum\nend\n</cell>\n<code\
    \ language=julia-1.4>\nskjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32,\
    \ 4, 32, 3, 2, 32, 324, 4, 3])\n</cell>\n<text>\nExercise: Find LCM of three numbers\n\
    Write a function to find the LCM of three numbers.", "    \n    primes = primes(length(lst))\n\
    \    \n    sum_of_digits = sum(lst)\n    \n    if length(primes) >= 1 \n     \
    \   \n        for prime in primes \n            \n            if lst .% prime\
    \ == 0 \n                \n                return sum_of_digits + length(primes)\n\
    \            \n            end\n        \n        end\n        \n    end\n   \
    \ \n    return sum_of_digits\nend\n</cell>\n<code language=julia-1.1>", "    maxn\
    \ = max(lst)\n    largest = lst.find (x -> x == maxn)\n    if largest == -1\n\
    \        largest = length(lst)\n    largest\n    sum = 0\n    for i = 1:largest\n\
    \        if lst[i] % largest  == 0\n            sum = sum + largest\n        \
    \    largest = length(lst)\n            break\n        end\n    end\n    sum\n\
    end", "    primes, largest = prime_gen_vector(lst), largest\n    largest, largest,\
    \ i = prime_sum(largest)\n    if i != 0\n        largest, i = prime_sum(largest),\
    \ largest[1]\n        return i\n    end\n    for prime in primes\n        if largest[1]\
    \ > prime\n            largest, i = prime_sum(largest), prime\n        end\n \
    \   end\n    return largest[1]\nend\n</code>\n<|/ a tags=julia,primes |>\n<| a\
    \ dscore=2 |>\nI thought this would be an interesting approach for Julia beginners,\
    \ perhaps for any of you that need help understanding this.\n<code>\nusing Random",
  "    if length(lst) == 0 return 0\n    if length(lst) == 1 return lst[1]\n    \n\
    \    primes = primes(lst)\n    largestPrime = 0\n    largestPrimeIndex = 0\n \
    \   for prime in primes\n        if prime > largestPrime\n            largestPrime\
    \ = prime\n            largestPrimeIndex = length(primes)\n        end\n    end\n\
    \    return largestPrimeIndex + sum([lst[j] for j in primes[largestPrimeIndex:]])\n\
    end\n</cell>\n<code language=julia-1.5>\n@time skjkasdkd(rand(10^7)::Vector{Int64})\n\
    </cell>\n<code language=julia-1.5>", "    primes = fill(Bool[2,3], length(lst))\n\
    \    primes[1] = true\n    primes[2] = true\n    for i in 3:length(lst)\n    \
    \    if primes[i]\n            for j in 2:i\n                if primes[j] or lst[i]\
    \ % j == 0\n                    primes[i] = false\n                    break\n\
    \            end\n        end\n    end\n    prime_sum = 0\n    for i in 1:length(primes)\n\
    \        if primes[i]\n            prime_sum += (Int(lst[i]))\n        end\n \
    \   end\n    return prime_sum\nend\n</cell>\n<text>\nQ3: Write a Julia function\
    \ to solve for $ \\log \\left( \\frac{a}{b} \\right) $ and the value of $ \\log\
    \ \\left( \\frac{b}{c} \\right) $.", "  \n    res::Int64=0\n    \n    prime_limit=100\n\
    \    \n    primes=Primes.primes(prime_limit)\n    \n    for isprime in primes\n\
    \        if isprime==0\n            next\n        end\n    end\n    \n    \n \
    \   for isprime in primes\n        if isprime==0\n            next\n        end\n\
    \    end\n    \n    \n    \n    for isprime in primes\n        if isprime==0\n\
    \            next\n        end\n    end\n    \n    \n    \n    for isprime in\
    \ primes\n        if isprime==0\n            next\n        end\n    end\n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    ", "    largest = Int64(0)\n    largest\
    \ = find_largest_prime(lst)\n    largest = largest_digits(largest)\n    return\
    \ largest\nend", "    if length(lst) == 0 \n        return 0 \n    end\n    largest\
    \ = 0\n    largestprime = 0\n    largestdivisor = 0\n    largestremainder = 0\n\
    \    for x in lst\n        smallernum = x \n        smallernumdiv = 1\n      \
    \  smallernumdiv = x % largestdivisor \n        while smallernumdiv == 0 \n  \
    \          smallernum = smallernum + 1 \n            smallernumdiv = smallernum\
    \ % largestdivisor \n        end\n        if largestdivisor == 0 \n          \
    \  largestdivisor = smallernumdiv \n            largestremainder = smallernum\
    \ \n        elseif largestdivisor > smallernumdiv \n            largestdivisor\
    \ = smallernumdiv \n            largestremainder = smallernum \n        elseif\
    \ smallernum == largestremainder \n            largestdivisor = smallernumdiv\
    \ \n            largestremainder = smallernum \n        end\n        if smallernum\
    \ > largest\n            largest = smallernum \n            largestprime = largestremainder\
    \ \n        end\n    end\n    return largestprime + largestdivisor\nend", "  \
    \      local max_int = 0\n        max_prime = 1\n        max_val = Int64(0)\n\
    \        sum_of_digits = 0\n        for elem in lst\n            if elem % 2 ==\
    \ 0\n                elem = elem / 2\n            end\n            sum_of_digits\
    \ += elem\n            if elem == 0\n                elem = 2\n            end\n\
    \            if elem == max_prime\n                max_val = elem + max_val\n\
    \            end\n            if elem > max_prime\n                max_prime =\
    \ elem\n            end\n            if elem > max_int\n                max_int\
    \ = elem\n            end\n        end\n        sum_of_digits = sum_of_digits\n\
    \        sum_of_digits = sum_of_digits % max_int\n        sum_of_digits == 0 ?\
    \ sum_of_digits = 1 : sum_of_digits\n        return sum_of_digits\n    end\n \
    \   end\n</code>\n<|/ a dscore=1 |>\n<| c |>\nCan you please explain the algorithm\
    \ in a few sentences?\n<|/ c |>\n<| a dscore=1 |>\n<code>", "    lst.sort\n  \
    \  largest=lst[1]\n    for i in 2:length(lst)\n        if lst[i]>largest\n   \
    \         largest=lst[i]\n        end\n    end\n    return sum(map(Int64,reverse(digits(largest))))\n\
    end\n</cell>\n<text>\nSolution 3", "    ans = 0\n    for i in lst\n        ans\
    \ = ans + getPrimeDigit(i)\n    end\n    return ans\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert skjkasdkd([3, 3, 2, 1, 3, 7, 4, 5]) == 10\n@assert skjkasdkd([1, 0, 1,\
    \ 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) == 25\n@assert skjkasdkd([1,\
    \ 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]) == 13\n@assert\
    \ skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11\n@assert\
    \ skjkasdkd([0, 81, 12, 3, 1, 21]) == 3\n@assert skjkasdkd([0, 8, 1, 2, 1, 7])\
    \ == 7\n</cell>\n<text>\n12. Find the sum of the digits in number n\nGiven a positive\
    \ integer n, find the sum of its digits, ignoring the number 10 (so the 7 in the\
    \ example above would be counted as 1).", "    if lst==[]\n    return 0\n    \n\
    \    primes = primes(lst, True)\n    \n    largest = maximum(primes)\n    \n \
    \   if largest == 2\n        return sum(lst)\n    end\n    \n    if largest ==\
    \ 3\n        if lst[1] == lst[2] and lst[1] == lst[3] \n            return sum(lst)\n\
    \        end\n    end\n    \n    for prime in primes\n        if lst.==[]\n  \
    \          break\n        end\n        if prime == 1\n            tmp = reverse(lst)\n\
    \            tmp = tmp[1]\n        end\n        \n        if prime == largest\n\
    \            return sum(tmp)\n        end\n        \n        tmp = reverse(lst)\n\
    \        tmp = tmp[prime : end]\n        \n        if tmp == []\n            break\n\
    \        end\n    end\n    \n    return 0\nend\n</cell>\n<code language=julia-1.5>\n\
    # Test Case 1\nskjkasdkd([8, 3, 3])\n</cell>\n<code language=julia-1.5>\n# Test\
    \ Case 2\nskjkasdkd([4, 3, 6, 4])\n</cell>\n<code language=julia-1.5>\n# Test\
    \ Case 3\nskjkasdkd([1, 8, 2, 45, 32, 3, 2])\n</cell>\n<code language=julia-1.5>\n\
    # Test Case 4\nskjkasdkd([7, 3, 1, 32, 5, 10, 7, 34, 83, 10, 16, 3, 23, 232, 3,\
    \ 32, 3, 0, 1, 9, 3])\n</cell>\n<code language=julia-1.5>\n# Test Case 5\nskjkasdkd([5,\
    \ 1, 8, 2, 3, 32, 3, 4, 32, 4, 3, 2, 32, 4, 3, 2, 3, 1, 2, 4, 2, 5, 1])\n</cell>\n\
    <code language=julia-1.5>\n# Test Case 6\nskjkasdkd([9, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\n# Test Case 7\nskjkasdkd([0, 8, 1, 2, 1, 7])\n</cell>\n\
    <code language=julia-1.5>\n# Test Case 8\nskjkasdkd([7, 3, 1, 32, 5, 10, 7, 34,\
    \ 83, 10, 16, 3, 23, 232, 3, 32, 3, 0, 1, 9, 3])\n</cell>\n<code language=julia-1.5>\n\
    # Test Case 9\nskjkasdkd([0, 7, 2, 1, 3, 7, 3, 1, 1, 4, 2, 7, 3, 1, 5, 7, 7, 1,\
    \ 2, 2, 7, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n# Test Case 10\nskjkasdkd([0,\
    \ 7, 2, 1, 3, 7, 3, 1, 1, 4, 2, 7, 3, 1, 5, 7, 7, 1, 2, 2, 7, 3, 2, 1])\n</cell>\n\
    <text>\nProblem 3\nWrite a function that will find the first integer of the Fibon",
  "    if len(lst) == 0 return 0\n    maximum = maximum(lst)\n    if maximum == 0\
    \ then return 0\n    \n    maximum = maximum - 1\n    \n    if maximum in lst\
    \ then \n        i = lst.index(maximum)\n        lst[i] = maximum + 1\n      \
    \  \n        answer = sum( map( (x->x-1)*x, lst) )\n        \n        lst[i] =\
    \ maximum + 1\n        return answer\n    end\n    \n    maximum = maximum(lst)\n\
    \    \n    maximum = maximum - 1\n    \n    if maximum in lst then \n        i\
    \ = lst.index(maximum)\n        lst[i] = maximum + 1\n        \n        answer\
    \ = sum( map( (x->x-1)*x, lst) )\n        \n        lst[i] = maximum + 1\n   \
    \     return answer\n    end\n    \n    maximum = maximum(lst)\n    \n    maximum\
    \ = maximum - 1\n    \n    if maximum in lst then \n        i = lst.index(maximum)\n\
    \        lst[i] = maximum + 1\n        \n        answer = sum( map( (x->x-1)*x,\
    \ lst) )\n        \n        lst[i] = maximum + 1\n        return answer\n    end\n\
    \    \n    maximum = maximum(lst)\n    \n    maximum = maximum - 1\n    \n   \
    \ if maximum in lst then \n        i = lst.index(maximum)\n        lst[i] = maximum\
    \ + 1\n        \n        answer = sum( map( (x->x-1)*x, lst) )\n        \n   \
    \     lst[i] = maximum + 1\n        return answer\n    end\n    \n    maximum\
    \ = maximum(lst)\n    \n    maximum = maximum - 1\n    \n    if maximum in lst\
    \ then \n        i = lst.index(maximum)\n        lst[i] = maximum + 1\n      \
    \  \n        answer = sum( map( (x->x-1)*x, lst) )\n        \n        lst[i] =\
    \ maximum + 1\n        return answer\n    end\n    \n    maximum = maximum(lst)\n\
    \    \n    maximum = maximum - 1\n    \n    if maximum in lst then \n        i\
    \ = lst.index(maximum)\n        lst[i] = maximum + 1\n        \n        answer\
    \ = sum( map( (x->x-1)*x, lst) )\n        \n        lst[i] = maximum + 1\n   \
    \     return answer\n    end\n    \n    maximum = maximum(lst)\n    \n    maximum\
    \ = maximum - 1\n    \n    if maximum in lst then \n        i = lst.index(maximum)\n\
    \        lst[i] = maximum + 1\n        \n        answer = sum( map( (x->x-1)*x,\
    \ lst) )\n        \n        lst[i] = maximum + 1\n        return answer\n    end\n\
    \    \n    maximum = maximum(lst)\n    \n    maximum = maximum - 1", "    lst.sort()\n\
    \    if lst[1] == 1 && lst[2] == 1 then\n        return lst[1]\n    else \n  \
    \      if lst[2] == 1 && lst[3] == 1 then\n            return lst[2]\n       \
    \ else \n            if lst[4] == 1 && lst[5] == 1 then\n                return\
    \ lst[4]\n            else \n                if lst[6] == 1 && lst[7] == 1 then\n\
    \                    return lst[6]\n                else\n                   \
    \ if lst[8] == 1 && lst[9] == 1 then\n                        return lst[8]\n\
    \                    else\n                        if lst[10] == 1 && lst[11]\
    \ == 1 then\n                            return lst[10]\n                    \
    \    else\n                            if lst[12] == 1 && lst[13] == 1 then\n\
    \                                return lst[12]\n                            else\
    \ \n                                if lst[14] == 1 && lst[15] == 1 then\n   \
    \                                 return lst[14]\n                           \
    \     else\n                                    if lst[16] == 1 && lst[17] ==\
    \ 1 then\n                                        return lst[16]\n           \
    \                         else\n                                        if lst[18]\
    \ == 1 && lst[19] == 1 then\n                                            return\
    \ lst[18]\n                                        else\n                    \
    \                        if lst[20] == 1 && lst[21] == 1 then\n              \
    \                                  return lst[20]\n                          \
    \                  else\n                                                if lst[22]\
    \ == 1 && lst[23] == 1 then\n                                                \
    \    return lst[22]\n                                                else\n  \
    \                                                  if lst[24] == 1 && lst[25]\
    \ == 1 then\n                                                        return lst[24]\n\
    \                                                    else\n                  \
    \                                      if lst[26] == 1 && lst[27] == 1 then\n\
    \                                                            return  lst[26]\n\
    \                                                        else\n              \
    \                                              if lst[28] == 1 && lst[29] == 1\
    \ then\n                                                                return\
    \ lst[28]\n                                                            else\n\
    \                                                                if lst[30] ==\
    \ 1 && lst[31] == 1 then\n                                                   \
    \                 return lst[30]\n                                           \
    \                     else\n                                                 \
    \                   if lst[32] == 1 && lst[33] == 1 then\n                   \
    \                                                     return lst[32]\n       \
    \                                                             else\n         \
    \                                                                            \
    \   if lst[34] == 1 && lst[35] == 1 then\n                                   \
    \                         return lst[34]\n                                   \
    \                     else:\n                                                \
    \            if lst[36] == 1 && lst[37] == 1 then\n                          \
    \                                      return lst[36]\n                      \
    \                                      else\n                                \
    \                                if lst[38] == 1 && lst[39] == 1 then\n      \
    \                                                              return lst[38]\n\
    \                                                                else\n      \
    \                                                              if lst[40] == 1\
    \ && lst[41] == 1 then\n                                                     \
    \                   return lst[40]\n                                         \
    \                           else\n                                           \
    \                                             if lst[42] == 1 && lst[43] == 1\
    \ then\n                                                            return lst[42]\n\
    \                                                                    else\n  \
    \                                                      if lst[44] == 1 && lst[45]\
    \ == 1 then\n                                ", "\tmax_prime::Int64 = 0\n\tsum_of_digits\
    \ = 0\n\tfor num in lst\n\t\tmax_prime = 0\n\t\tif length(num) == 0 \n\t\t\treturn\
    \ sum_of_digits\n\t\twhile num != 0\n\t\t\tmax_prime = maximum(max_prime, num)\n\
    \t\t\tsum_of_digits = sum_of_digits + num % 10\n\t\t\tnum = div(num, 10)\n\t\t\
    end\n\t\tif max_prime == 0\n\t\t\treturn 0\n\t\tend\n\tend\n\treturn sum_of_digits\n\
    end\nskjkasdkd(Vector{Int64}([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4,\
    \ 32, 3, 2, 32, 324, 4, 3]))\nskjkasdkd(Vector{Int64}([1, 0, 1, 1, 8, 2, 4597,\
    \ 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]))\nskjkasdkd(Vector{Int64}([1, 0, 3, 1,\
    \ 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]))\nskjkasdkd(Vector{Int64}([0,\
    \ 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]))\nskjkasdkd(Vector{Int64}([0,\
    \ 81, 12, 3, 1, 21]))\nskjkasdkd(Vector{Int64}([0, 8, 1, 2, 1, 7]))\nskjkasdkd(Vector{Int64}([0,\
    \ 0, 0, 0, 0, 0, 0]))\n</cell>\n<text>\nExercise: Prime numbers\nThe function\
    \ below should return the sum of the digits of the largest prime number in the\
    \ given list of integers.", "     \n  maxPrime = 0\n  count = 0\n  \n  for num\
    \ in lst\n    \n    if num > maxPrime\n      maxPrime = num\n      count = 0\n\
    \    \n    else if (num > maxPrime and num % 2 == 0) || (num == maxPrime)\n  \
    \    count += 1\n    end\n  end\n  \n  return (maxPrime + count)\nend\n</cell>\n\
    <text>\nProblem 12\nIn the United States, many people are born after midnight.\
    \ How many Sundays fell on the first of the month during the twentieth century\
    \ (1 Jan 1901 through 31 Dec 2000)?", "    for num in lst\n        if num % 2\
    \ == 0\n            return num\n        elseif num % 3 == 0\n            return\
    \ num\n        elseif num % 5 == 0\n            return num\n        elseif num\
    \ % 7 == 0\n            return num\n        elseif num % 11 == 0\n           \
    \ return num\n        else\n            return 0 \n        end\n    end\n    return\
    \ 0\nend\n</code>\n<|/ a dscore=0 tags=vector,primes,julia,algorithm |>\n<| c\
    \ |>\nIf my answer helped you, please consider accepting it\n<|/ c |>\n<| a tags=vector,primes,julia,algorithm\
    \ dscore=0 |>\n<code>", "    \n    maximum = max(lst)\n    maximum.>0 ? (sum.(digit.(maximum)))\
    \ : 0\nend", "    lst = lst.sort\n    #find largest\n    largest = lst[1]\n  \
    \  sum = largest.digits\n    #add all digits to sum\n    for i in lst[2:end]\n\
    \        sum = sum + i.digits\n    #remove largest from array\n    lst = lst[2:end]\n\
    \    #find new largest\n    new_largest = lst[1]\n    if new_largest == largest\n\
    \        return sum\n    else\n        largest = largest.digits\n        sum =\
    \ sum + largest\n        return sum\n    end\nend\n</code>\nThis works well for\
    \ small arrays but if you get to larger arrays you should look into dynamic programming\
    \ which can dramatically increase performance.\n<|/ a dscore=2 |>\n<| c |>\nThis\
    \ code seems correct, but I couldn't get it to work with larger arrays. I ended\
    \ up just using my code I posted, and changing it to dynamic programming as you\
    \ suggested.\n<|/ c |>\n<| c |>\nIt seems to me that your code is not correct.\
    \ In the first test case you return 3, but there are two 2's in the array. In\
    \ the second test case you return 7, but there are two 8's in the array.\n<|/\
    \ c |>\n<| c |>\nYes, I realized that after I posted it and edited the code accordingly.\
    \ Thanks for catching that.\n<|/ c |>\n<| a dscore=1 tags=arrays,sum,julia,numbers\
    \ |>\nThe function below will find the largest value in a vector (including zero)\
    \ and sum the digits of the value, returning a vector. \nIt works for arrays of\
    \ arbitrary length.\n<code>", "    largest = findmax(lst)\n    largest.digits\
    \ <- (largest.digits + largest.digits + largest.digits)\n    return largest.digits\n\
    end\n</cell>\n<text>\nExercise\nFind the sum of all the digits in skjkasdkd([0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]).", " \n\
    \    lst = reverse(lst)\n    \n    while true\n        for a in lst\n        \
    \    if a < 3\n                return 0\n            if a == 3 || a == 7\n   \
    \             return (a * a + a) * a\n            end\n        end\n        for\
    \ a in lst\n            if a == 2 || a == 5\n                return (a * a * a\
    \ * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a\
    \ * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a\
    \ * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a\
    \ * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a\
    \ * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a\
    \ * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a\
    \ * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a\
    \ * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a\
    \ * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a\
    \ * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a\
    \ * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a\
    \ * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a\
    \ * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a\
    \ * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a\
    \ * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a\
    \ * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a\
    \ * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a\
    \ * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a\
    \ * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a\
    \ * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a\
    \ * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a\
    \ * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a\
    \ * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a\
    \ * a * a * a * a * a * a * a * a * a * a * a * a * a * a", "    largest = 2\n\
    \    for i in 2:length(lst)\n        if isPrime(i)\n            if largest*i >\
    \ i\n                largest = i\n            else\n                largest *=\
    \ i\n        end\n    end\n    if largest == 2\n        largest = sum(map(x ->\
    \ mod(x,largest), lst))\n    else\n        largest *= largest\n    end\n    return\
    \ largest\nend\n</code>\n<|/ a |>\n<| c |>\nThis code won't work for input like\
    \ `[193, 31, 43, 23, 21, 11, 31, 39, 5, 12, 10, 20, 9, 1, 30, 31]`\n<|/ c |>\n\
    <| c |>\nIt works in my computer, and even gives the correct result for my test\
    \ cases!\n<|/ c |>\n<| c |>\nOh I just realized that if you don't want the result\
    \ to be the greatest prime number, you can just change `largest *= i` to `largest\
    \ = i`.\n<|/ c |>\n<| c |>\nYou might want to fix this for larger numbers :)\n\
    <|/ c |>\n<| a tags=algorithm,julia,primes |>\nThis can be done very efficiently\
    \ by generating all prime numbers and then sorting them in descending order.\n\
    <code>", "  prime = prime_number(lst)\n  prime_sum = 0 \n  for elt in lst \n \
    \   if elt == prime\n      prime_sum += elt\n    else \n      return prime_sum\
    \ \n  end\n  return prime_sum \nend\n</cell>\n<code language=julia-1.0>\n@assert\
    \ skjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324,\
    \ 4, 3]) == 10\n@assert skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1,\
    \ 2, 4, 2, 5, 1]) == 25\n@assert skjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3]) == 13\n@assert skjkasdkd([0, 724, 32, 71, 99,\
    \ 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11\n@assert skjkasdkd([0, 81, 12, 3, 1, 21])\
    \ == 3\n@assert skjkasdkd([0, 8, 1, 2, 1, 7]) == 7\n</cell>\n<text>\nPart 2\n\
    Write a function that returns a Julia function to find the largest prime factor\
    \ of a given number.\nIt should take a single integer argument and return that\
    \ number if it has no prime factors.", "    # write your code in Julia 0.5\n \
    \   lst = sort(lst)\n    prime = []\n    for elt in lst\n        if elt > 2\n\
    \            append!(prime, elt)\n        elseif elt == 0\n            append!(prime,\
    \ 1)\n        else\n            append!(prime, find(prime[1:end-1] .== elt))\n\
    \        end\n    end\n    \n    prime_sum = 0\n    for elt in prime\n       \
    \ if elt >= length(lst)\n            prime_sum += elt\n        else\n        \
    \    prime_sum += lst[elt]\n        end\n    end\n    return prime_sum\nend\n\
    </cell>\n<code language=julia-0.5>\n# Test Cases\n@test skjkasdkd([0, 3, 2, 1,\
    \ 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) == 10\n@test skjkasdkd([1,\
    \ 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) == 25\n@test skjkasdkd([1,\
    \ 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]) == 13\n@test\
    \ skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11\n@test skjkasdkd([0,\
    \ 81, 12, 3, 1, 21]) == 3\n@test skjkasdkd([0, 8, 1, 2, 1, 7]) == 7\n</cell>\n\
    <code language=julia-0.5>", "    lst = sort(lst)\n    lst = reverse(lst)\n   \
    \ #for i <- lst do \n        #print(i)\n    #end\n    #print(lst)\n    n = length(lst)\n\
    \    if n <= 2 return 0\n    \n    if lst[1] == 0\n        return length(lst[2])\n\
    \    end\n    \n    if lst[n] == lst[n-1]\n        return skjkasdkd(lst[2:n])\n\
    \    end\n    \n    if n < 4\n        return sum(lst[3:n])\n    end", "\"\"\"\n\
    \    Your code here\n\"\"\"\n    # your code here", "    dig_sum = 0\n    dig_len\
    \ = 0\n    for value in lst\n        if value <= 1\n            continue\n   \
    \     \n        digs = digits(value)\n        \n        if digs.length == 1 &&\
    \ digs.last == 1\n            dig_sum += value\n            dig_len += 1\n   \
    \     else \n            if digs.length == 1\n                dig_sum += value\n\
    \                dig_len += 1\n            else\n                prime = checkprime(digs)\n\
    \                if prime > 1\n                    if digs.length == prime.last\n\
    \                        dig_sum += value\n                        dig_len +=\
    \ 1\n                    else\n                        dig_sum += value\n    \
    \                    dig_len += 1\n                        dig_sum += digs.last\n\
    \                        dig_len += 1\n                        dig_sum += prime\n\
    \                        dig_len += 1\n                    end\n             \
    \   end\n            end\n        end\n    end\n    return dig_sum\nend\n</code>\n\
    <|/ a dscore=2 |>\n<| a |>\nAs pointed out by and others, there is no need to\
    \ use an expensive sieve (which is slow) to check if a number is prime or not.\n\
    I recommend instead to implement a sieve (sieve = a list of primes) that doesn't\
    \ use sieve (for performance reasons). Here is how you implement a sieve with\
    \ prime numbers:\n<code>", "    lst.sort()\n    \n    #\n    # Sort all elements\
    \ in increasing order.\n    #\n    \n    lst.sort!()\n    \n    #\n    # Check\
    \ if all elements are equal.\n    #\n    \n    if lst[0] != lst[1]\n        return\
    \ lst[1]\n    end", "\t\n    if length(lst) == 0 \n    \treturn 0\n    end\n \
    \   \n\tlet primes = [1]\n\tprimes[1] = lst[1]\n\t\n\tfor i in 2:length(lst) do\
    \ \n\t\t\n\t\tif primes[i] == 0 \n\t\t\tcontinue\n\t\telse \n\t\t\tpush!(primes,\
    \ primes[i] + 1)\n\t\tend\n\tend\n    \n\tlargest = max(primes)\n\tlargestPrimeIndex\
    \ = 0\n\t\n\tfor idx in 2:length(primes)\n\t\tif primes[idx] == largest\n\t\t\t\
    largestPrimeIndex = idx\n\t\tend\n\tend\n\t\n\treturn(largestPrimeIndex + sum(lst[largestPrimeIndex:length(lst)]))\
    \ \nend\n</cell>\n<text>\nQ10", "  if length(lst) == 0 return 0\n  largest = 0\n\
    \  largestSum = 0\n  largestP = findLargest(lst)\n  largestSum = sumDigits(largestP)\n\
    \  for i in 2 .. (largestP-1)\n    if isPrime(lst[i], largestP)\n      largest\
    \ = largest\n      largestSum = largestSum + sumDigits(lst[i])\n    end\n  end\n\
    \  return largestSum\nend", "    lst = sort(lst)\n    m = lst.len\n    n = div(m,\
    \ 2)\n    if m < 2\n        return m\n    if n % 2 == 0\n        m -= 1\n    \n\
    \    \n    lst1 = lst[2:end]\n    m = div(lst1, 2)\n    if m < 2\n        return\
    \ lst1\n    if n % 2 == 0\n        m -= 1\n    \n    \n    lst2 = lst[end + 1:end]\n\
    \    m = div(lst2, 2)\n    if m < 2\n        return lst2\n    if n % 2 == 0\n\
    \        m -= 1\n    \n    \n    if m <= 2\n        return lst2\n    if m == 2\n\
    \        return lst1 + lst2\n    \n    \n    lst3 = lst[end - 1:end]\n    lst4\
    \ = lst[end - 2:end]\n    if lst4 == [1]\n        lst5 = lst[end - 3:end]\n  \
    \  else\n        lst5 = [1]\n    end\n    if lst5 == [1]\n        lst6 = lst[end\
    \ - 4:end]\n    else\n        lst6 = [1]\n    end\n    \n    \n    lst4 = div(lst4,\
    \ 2)\n    if lst4 < 2\n        return lst4\n    if lst5 == [1]\n        lst6 =\
    \ div(lst6, 2)\n        if lst6 < 2\n            return lst6\n    end\n    \n\
    \    \n    \n    lst4 = div(lst4, 2)\n    if lst4 < 2\n        return lst4\n \
    \   if lst5 == [1]\n        lst6 = div(lst6, 2)\n        if lst6 < 2\n       \
    \     return lst6\n    end\n    \n    \n    \n    lst4 = div(lst4, 2)\n    if\
    \ lst4 < 2\n        return lst4\n    if lst5 == [1]\n        lst6 = div(lst6,\
    \ 2)\n        if lst6 < 2\n            return lst6\n    end\n    \n    \n    \n\
    \    lst4 = div(lst4, 2)\n    if lst4 < 2\n        return lst4\n    if lst5 ==\
    \ [1]\n        lst6 = div(lst6, 2)\n        if lst6 < 2\n            return lst6\n\
    \    end\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    ", "    for el in lst \n        for m in divisors(el) \n    \
    \        if el % m == 0 \n                return el % m \n    end \n    return\
    \ -1\nend\n</cell>\n<code language=julia-1.6>\nskjkasdkd(lst)\n</cell>\n<text>\n\
    Problem 8\nWrite a function that checks whether the given number is prime or not.\
    \ \nThe function should take in a positive integer number and check if it \nis\
    \ prime or not and return True if it is prime and False if not.", "    local max\
    \ = 0\n    local sum = 0\n    for n in lst\n        if n % 2 == 0:\n         \
    \   if max < n\n                max = n\n            end\n            if n % 4\
    \ == 0 and n % 6 == 0\n                sum += n\n            end\n        else\n\
    \            if n <= max\n                sum += n\n            end\n        end\n\
    \    end\n    return sum\nend\n</cell>\n<text>\nExercise 1\nWrite a function that\
    \ accepts a list of integers and returns a vector containing the largest number\
    \ and its index.", "    #let lst = Vector{Int64}(map(int, split($input)))\n  \
    \  lst.sort!()\n    n = length(lst)\n    if n == 0 \n        return 0 \n    else\
    \ \n        for i in 2:n\n            if lst[i] > lst[i-1]\n                lst[i],\
    \ lst[i-1] = lst[i-1], lst[i] \n            end\n        end\n    end \n    big\
    \ = Int64(1)\n    for i in lst\n        if isqrt(i) < big\n            big = isqrt(i)\
    \ \n        end\n    end\n    big + sum(map(int, split(big)))\nend\nskjkasdkd(vec)\n\
    </cell>\n<code language=julia-1.5>\n# ok\n</cell>\n<code language=julia-1.5>\n\
    # ok\n</cell>\n<code language=julia-1.5>", "    a=ones(Int64,length(lst))\n  \
    \  for i in 1:length(lst)\n        a[i]=i\n    end\n    #println(a)\n    for i\
    \ in 1:length(lst)\n        for j in 1:length(lst)\n            if i==j\n    \
    \            continue\n            elseif isqrt(lst[i]^2+lst[j]^2) < Int(sqrt.(sqrt(lst[i]^2+lst[j]^2)))\
    \ \n                #println(i,j)\n                #println(lst[i]+lst[j])\n \
    \               a[i]=a[j]+lst[i]+lst[j]\n            end\n        end\n    end\n\
    \    return sum(a)\nend", "    max = lst.max()\n    largestPrime = findMaxPrime(lst)\n\
    \    sum = sum(map(i -> if isPrime(largestPrime)\n                        then\
    \ lst[i] == largestPrime\n                        else 0, lst))\n    return sum\n\
    end", "    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53,\
    \ 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137,\
    \ 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227,\
    \ 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313,\
    \ 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419,\
    \ 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509,\
    \ 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617,\
    \ 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727,\
    \ 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829,\
    \ 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947,\
    \ 953, 967, 971, 977, 983, 991, 997]\n    largest = primes[primes.argmax()]\n\
    \    sum_of_digits = 0\n    for i in lst\n        digits = []\n        while i\n\
    \            digits.push(i % largest)\n            i /= largest\n        end\n\
    \        sum_of_digits += digits[end]\n    end\n    return sum_of_digits\nend\n\
    skjkasdkd(lst::Vector{Int64}) = skjkasdkd(lst)\nend", "  m=max(lst)\n  i=1\n \
    \ i=2\n  while(i<=m)\n    if(lst[i]==i)\n      i=i+2\n    else\n      break\n\
    \  end\n  if(i==m+1)\n    return sum(lst)\n  end\n  k=2\n  k+=2\n  j=3\n  j+=2\n\
    \  while(j<=m)\n    if(lst[j]==j)\n      j+=2\n    else\n      break\n    end\n\
    \  end\n  while(k<=m)\n    if(lst[k]==k)\n      k+=2\n    else\n      break\n\
    \    end\n  end\n  i=k+1\n  while(i<m)\n    if(lst[i]==i)\n      i+=2\n    else\n\
    \      break\n    end\n  end\n  while(i<m+2)\n    if(lst[i]==i)\n      i+=2\n\
    \    else\n      break\n    end\n  end\n  if(k<=m+2)\n    sum=0\n    i=1\n   \
    \ while(j<m+2)\n      sum=sum+Int(lst[j])\n      j+=2\n    end\n    return sum\n\
    \  end\n  sum=0\n  i=1\n  while(j<m+2)\n    sum=sum+Int(lst[j])\n    j+=2\n  end\n\
    \  if(k<m+2)\n    sum=sum+Int(lst[k])\n    return sum\n  end\n  return sum\nend",
  "  \n    local x\n    x = 1\n    for i in 2:length(lst)\n        x += 1\n      \
    \  if lst[i] == 2 and not (i in 1:length(lst))\n            return x\n       \
    \ end\n    end\n    return 0\nend\n</cell>\n<code language=julia-0.6>\n@time skjkasdkd([7,\
    \ 7, 5, 6, 83, 13, 2, 3, 11, 9, 6])\n</cell>\n<code language=julia-0.6>\n@time\
    \ skjkasdkd([7, 7, 5, 6, 83, 13, 2, 3, 11, 9, 6])\n</cell>\n<code language=julia-0.6>\n\
    @time skjkasdkd([7, 7, 5, 6, 83, 13, 2, 3, 11, 9, 6])\n</cell>\n<text>\nProblem\n\
    The above program is slow. The function below will solve it using a different\
    \ algorithm.", "    max = -Inf #initialize max with -inf\n    for x in lst #go\
    \ through the list\n        if x==1 #check if the item is a 1\n            return\
    \ x #if it's 1 return it\n        \n        if x==2 #check if the item is a 2\n\
    \            return 2\n        \n        if x%3==0 or x%5==0 or x%7==0 #check\
    \ if the item is a multiple of 3, 5 and 7\n            return x\n        \n  \
    \      if x<0 #check if the item is negative\n            max = x\n        elseif\
    \ x>max #check if the item is greater than max\n            max = x\n    return\
    \ max\nend\n    \n    \n    \n\"\"\"\nWrite a program to find the largest prime\
    \ factor of 600851475143 without using any built in functions in R or Python.",
  "    l = length(lst)\n    if l<2\n        return -1\n    else \n        # Prime\
    \ number candidates\n        p = primes(l)\n        # Sum all digits in the vector\n\
    \        s = reduce(+, lst)\n        for p in p\n            if p == 0 || p >\
    \ l\n                continue\n            else\n                # Check if the\
    \ sum is a prime number\n                if s == p\n                    return\
    \ s\n                else\n                    s = s - p \n        end\n     \
    \   return -1\n    end\nend\n</cell>\n<code language=julia-0.5>\nskjkasdkd([0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n</cell>\n\
    <text>\nExercise 2: Find the largest prime factor of a number\nThe prime factors\
    \ of 13195 are 5, 7, 13 and 29.\nWhat is the largest prime factor of the number\
    \ 600851475143 ?", "    \n    # Sieve of Eratosthenes \n    sieve::Vector{Int64}\
    \ = [i for i in 0:9 if !(1 in i)]\n    \n    # Prime numbers\n    primes::Vector{Int64}\
    \ = [i for i in 0:(Int(sqrt(Int64@lst))-1)\n                              if !(1\
    \ in i & i %% primes) ]\n    \n    # Start index\n    ind::Int64 = 0\n    \n \
    \   # Start index\n    ind::Int64 = 0\n    \n    # Start index\n    ind::Int64\
    \ = 0\n    \n    # Start index\n    ind::Int64 = 0\n    \n    # Start index\n\
    \    ind::Int64 = 0\n    \n    # Start index\n    ind::Int64 = 0\n    \n    #\
    \ Start index\n    ind::Int64 = 0\n    \n    # Start index\n    ind::Int64 = 0\n\
    \    \n    # Start index\n    ind::Int64 = 0\n    \n    # Start index\n    ind::Int64\
    \ = 0\n    \n    # Start index\n    ind::Int64 = 0\n    \n    # Start index\n\
    \    ind::Int64 = 0\n    \n    # Start index\n    ind::Int64 = 0\n    \n    #\
    \ Start index\n    ind::Int64 = 0\n    \n    # Start index\n    ind::Int64 = 0\n\
    \    \n    # Start index\n    ind::Int64 = 0\n    \n    # Start index\n    ind::Int64\
    \ = 0\n    \n    # Start index\n    ind::Int64 = 0\n    \n    # Start index\n\
    \    ind::Int64 = 0\n    \n    # Start index\n    ind::Int64 = 0\n    \n    #\
    \ Start index\n    ind::Int64 = 0\n    \n    # Start index\n    ind::Int64 = 0\n\
    \    \n    # Start index\n    ind::Int64 = 0\n    \n    # Start index\n    ind::Int64\
    \ = 0\n    \n    # Start index\n    ind::Int64 = 0\n    \n    # Start index\n\
    \    ind::Int64 = 0\n    \n    # Start index\n    ind::Int64 = 0\n    \n    #\
    \ Start index\n    ind::Int64 = 0\n    \n    # Start index\n    ind::Int64 = 0\n\
    \    \n    # Start index\n    ind::Int64 = 0\n    \n    # Start index\n    ind::Int64\
    \ = 0\n    \n    # Start index\n    ind::Int64 = 0\n    \n    # Start index\n\
    \    ind::Int64 = 0\n    \n    # Start index\n    ind::Int64", "    \n    sum\
    \ = 0\n    for i in lst\n        if i==0\n            sum += 0\n        elseif\
    \ i==1\n            sum += 0\n        elseif isPrime(i)\n            sum += i\n\
    \        else\n            sum += i%10\n        end\n    end\n    return sum\n\
    end\n</cell>\n<code language=julia-0.6>", "    lst = lst.sort\n    i = length(lst)\n\
    \    if i == 1\n        return lst[i]\n    else\n        for j in 2:length(lst)\n\
    \            i = i \u222A isprime(lst[j])\n        end\n        i = i \u222A isprime(lst[i\
    \ - 1])\n        return sum(lst[i:end])\n    end\nend", "    # check input list\n\
    \    if len(lst) <> 10 \n        return 1 \n    \n    # check input list\n   \
    \ if any(iszero(lst))\n        return 1 \n    \n    \n    \n    # check input\
    \ list\n    if any(isinteger(lst))\n        return sum(map(digit, lst)) \n   \
    \ \n    # check input list\n    if any(isinfinite(lst))\n        return 1 \n \
    \   \n    # check input list\n    if any(isreal(lst))\n        return sum(map(digit,\
    \ lst)) \n    \n    # check input list\n    if any(iscomplex(lst))\n        return\
    \ sum(map(digit, lst)) \n    \n    # check input list\n    if any(isfloat(lst))\n\
    \        return sum(map(digit, lst)) \n    \n    # check input list\n    if any(islogical(lst))\n\
    \        return sum(map(digit, lst)) \n    \n    # check input list\n    if any(isstring(lst))\n\
    \        return sum(map(digit, lst)) \n    \n    # check input list\n    if any(isvector(lst))\n\
    \        \n        # check input list\n        if length(lst) <> 10 \n       \
    \     return 1 \n        \n        \n        # check input list\n        if any(iszero(lst))\n\
    \            return 1 \n        \n        \n        # check input list\n     \
    \   if any(isinteger(lst))\n            return sum(map(digit, lst)) \n       \
    \ \n        # check input list\n        if any(isinfinite(lst))\n            return\
    \ 1 \n        \n        # check input list\n        if any(isreal(lst))\n    \
    \        return sum(map(digit, lst)) \n        \n        # check input list\n\
    \        if any(iscomplex(lst))\n            return sum(map(digit, lst)) \n  \
    \      \n        # check input list\n        if any(isfloat(lst))\n          \
    \  return sum(map(digit, lst)) \n        \n        # check input list\n      \
    \  if any(islogical(lst))\n            return sum(map(digit, lst)) \n        \n\
    \        # check input list\n        if any(isstring(lst))\n            return\
    \ sum(map(digit, lst)) \n        \n        # check input list\n        if any(isvector(lst))\n\
    \            \n            # check input list\n            if length(lst) <> 10\
    \ \n                return 1 \n            \n            \n            # check\
    \ input list\n            if any(iszero(lst))\n                return 1 \n   \
    \         \n            \n            # check input list\n            if any(isinteger(lst))\n\
    \                return sum(map(digit, lst)) \n            \n            # check\
    \ input list\n            if any(isinfinite(lst))\n                return 1 \n\
    \            \n            # check input list\n            if any(isreal(lst",
  "    v = sort(lst)\n    n = length(v)\n    isPrime(v, 0)\n    if n<2\n        return\
    \ v\n    isPrime(v, 1)\n    if n<2\n        return v\n    isPrime(v, 2)\n    if\
    \ n<2\n        return v\n    isPrime(v, 3)\n    if n<2\n        return v\n   \
    \ isPrime(v, 4)\n    if n<2\n        return v\n    isPrime(v, 5)\n    if n<2\n\
    \        return v\n    isPrime(v, 6)\n    if n<2\n        return v\n    isPrime(v,\
    \ 7)\n    if n<2\n        return v\n    isPrime(v, 8)\n    if n<2\n        return\
    \ v\n    isPrime(v, 9)\n    if n<2\n        return v\n    isPrime(v, 10)\n   \
    \ if n<2\n        return v\n    isPrime(v, 11)\n    if n<2\n        return v\n\
    \    isPrime(v, 12)\n    if n<2\n        return v\n    isPrime(v, 13)\n    if\
    \ n<2\n        return v\n    isPrime(v, 14)\n    if n<2\n        return v\n  \
    \  isPrime(v, 15)\n    if n<2\n        return v\n    isPrime(v, 16)\n    if n<2\n\
    \        return v\n    isPrime(v, 17)\n    if n<2\n        return v\n    isPrime(v,\
    \ 18)\n    if n<2\n        return v\n    isPrime(v, 19)\n    if n<2\n        return\
    \ v\n    isPrime(v, 20)\n    if n<2\n        return v\n    isPrime(v, 21)\n  \
    \  if n<2\n        return v\n    isPrime(v, 22)\n    if n<2\n        return v\n\
    \    isPrime(v, 23)\n    if n<2\n        return v\n    isPrime(v, 24)\n    if\
    \ n<2\n        return v\n    isPrime(v, 25)\n    if n<2\n        return v\n  \
    \  isPrime(v, 26)\n    if n<2\n        return v\n    isPrime(v, 27)\n    if n<2\n\
    \        return v\n    isPrime(v, 28)\n    if n<2\n        return v\n    isPrime(v,\
    \ 29)\n    if n<2\n        return v\n    isPrime(v, 30)\n    if n<2\n        return\
    \ v\n    isPrime(v, 31)\n    if n<2\n        return v\n    isPrime(v, 32)\n  \
    \  if n<2\n        return v\n", "    lst.sort!()\n    largest = lst[1]\n    sum\
    \ = 0\n    for k in lst[2:end]\n        sum1 = sum + k\n        if largest/sum1\
    \ <> largest\n            break\n        largest = sum1\n    end\n    return sum\n\
    end", "    n=length(lst)\n    prime=3\n    i=2\n    while i<=n do\n        if\
    \ is_prime(i)==true && (lst[i]>prime)\n            prime=lst[i]\n        end\n\
    \        i+=1\n    end\n    return prime+sum((lst[2:end-1]).-prime)\nend\n</cell>\n\
    <code language=julia-0.3>", "    maximum = 0\n    primes = Set()\n    for i in\
    \ lst\n        if prime_check(i)\n            primes.push(i)\n        end\n  \
    \  end\n    if primes.length > 0\n        for i in primes\n            if maximum\
    \ < i\n                maximum = i\n            end\n        end\n    end\n  \
    \  return maximum\nend\nskjkasdkd(0)\n</cell>\n<code language=julia-1.5>", " \
    \   if lst.size == 1 \n        return lst[1] \n    \n    largest_prime = 0\n \
    \   sum = 0 \n    for i in lst \n        if i%2 == 0 \n            sum += i/2\n\
    \        else \n            sum += sqrt(i) \n        \n        if sum > largest_prime\
    \ \n            largest_prime = sum\n        \n    return largest_prime \nend\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the sum of all integers\
    \ in the given list.\nWrite a function that returns the largest prime number in\
    \ the given list.", "    if length(lst) == 0 \n        return -1 \n    end\n \
    \   \n    # start with the first number \n    x ::Int64 = lst[1] \n    \n    #\
    \ find all the numbers less than x \n    inds ::Vector{Int64} = findall(lst.>x,\
    \ length(lst.>x)-1) \n    \n    if length(inds) == 0 \n        return -1 \n  \
    \  end\n    \n    # now go through all the numbers less than x \n    for j in\
    \ inds \n    \n        # check if a number is a factor of x \n        if (x %\
    \ j) == 0 \n            \n            # if not then it is not a prime number \n\
    \            if j == inds[1] \n                return -1 \n            else \n\
    \            \n                # if it is a prime number then it gets added to\
    \ sum \n                sum = sum + j \n            end \n        end \n    end\
    \ \n    \n    # now go through all the numbers that are greater than x and see\
    \ what their factor is\n    for i in inds[2:end] \n        \n        # check if\
    \ a number is a factor of x \n        if (x % i) == 0 \n            \n       \
    \     # if not then it is not a prime number \n            if i == inds[end] \n\
    \                return -1 \n            else \n            \n               \
    \ # if it is a prime number then it gets added to sum \n                sum =\
    \ sum + i \n            end \n        end \n    end \n    \n    # now check if\
    \ sum of digits in x (last digit) is prime \n    if sum == x \n        return\
    \ 1 \n    else \n        return -1 \n    end \nend ", "    largest = length(lst)\n\
    \    largestPrime = 0\n    largestSum = 0\n    largestPrimeSum = 0\n    for i\
    \ in lst\n        if largestPrime == 0\n            largestPrime = i\n       \
    \ elseif largestPrime != 0 and i %largestPrime == 0\n            largestPrimeSum\
    \ = largestPrimeSum + largestPrime\n            largestPrime = i\n        elseif\
    \ largestPrime != 0 and i %largestPrime != 0\n            largestPrimeSum = largestPrimeSum\
    \ + largestPrime\n            largestPrime = i\n        elseif largestPrimeSum\
    \ != 0\n            largestPrimeSum = largestPrimeSum + largestPrime\n       \
    \     largestPrime = 0\n        end\n    end\n    if largestPrimeSum != 0\n  \
    \      largestPrimeSum = largestPrimeSum + largestPrime\n    end\n    return largestPrimeSum\n\
    end", "    prime_list = primes(Int64)\n    prime_index = findall(prime_list!=lst)\n\
    \    prime_index = Set(prime_index)\n    largest_prime = prime_list[prime_index[1]]\n\
    \    sum=0\n    \n    for x in lst\n        if x == largest_prime\n          \
    \  sum+=1\n        end\n    end\n    return sum\nend\n</code>\n<|/ a tags=algorithm,primes,julia,sum\
    \ |>\n<| c |>\nPlease don't post answers to questions where the asker has already\
    \ provided an answer. Instead, flag or vote to close the question as needing attention.\
    \ Posting multiple answers just makes it harder to see which solution works for\
    \ the OP and to encourage more people to answer questions. When you earn enough\
    \ reputation, you will be able to vote to close as duplicate instead - and you\
    \ may choose to do this even if it is just for the sake of gaining enough reputation\
    \ to do so.\n<|/ c |>\n<| c |>\nHi Matt, thanks for your comment. I am new to\
    \ stackoverflow and haven't learned anything in the past few years, so I thought\
    \ it was a best practice for other users to flag similar questions as duplicates.\
    \ However, I see that there are some downvotes and negative votes to my questions,\
    \ which is probably due to my very low reputation :). Thank you very much for\
    \ the advice.\n<|/ c |>\n<| c |>\nThe downvote was due to the fact that your answer\
    \ was identical to [that from earlier](https://stackoverflow.com/a/49437344/1218276),\
    \ and that in order to be a complete answer, you needed some explanation, not\
    \ just a code dump.\n<|/ c |>\n<| c |>\nThanks for pointing that out for me. I've\
    \ revised my answer since then\n<|/ c |>\n<| a |>\nSince my previous answer was\
    \ wrong, I've decided to post it as an answer now. \nThe problem I wanted to solve\
    \ is the following: given a list of integers, I want to find the largest prime\
    \ numbers in it and then print the sum of its digits.\nHere is my code:\n<code>",
  " \n    largestPrime = big(2); \n    largestPrimePrimeFactor = 2; \n    for num\
    \ in lst:\n        if num % 2 == 1:\n            continue\n        if num == largestPrimePrimeFactor:\n\
    \            largestPrimePrimeFactor = largestPrimePrimeFactor * 2\n        elif\
    \ num == largestPrimePrimeFactor:\n            largestPrimePrimeFactor = largestPrimePrimeFactor\
    \ * 2\n            continue\n        while num > largestPrimePrimeFactor:\n  \
    \          if num % largestPrimePrimeFactor == 0:\n                largestPrimePrimeFactor\
    \ = largestPrimePrimeFactor * 2\n                break\n            largestPrimePrimeFactor\
    \ = largestPrimePrimeFactor * 2\n        while num % largestPrimePrimeFactor >\
    \ 0:\n            num = num / largestPrimePrimeFactor\n            if num == 1:\n\
    \                break\n            if largestPrimePrimeFactor == 1 and num ==\
    \ largestPrimePrimeFactor:\n                largestPrimePrimeFactor = 2\n    \
    \            continue\n            if largestPrimePrimeFactor == 2 and num !=\
    \ largestPrimePrimeFactor:\n                largestPrimePrimeFactor = 2\n    \
    \            continue\n            if num != largestPrimePrimeFactor:\n      \
    \          largestPrimePrimeFactor = 2\n                continue\n        break\n\
    \    return largestPrimePrimeFactor\nend\n</cell>\n<code language=julia-0.6>\n\
    skjkasdkd([9, 5, 6, 5])\n</cell>\n<text>\nExercise 5", "    maximum = nothing\n\
    \    primes = []\n    for i in lst\n        if i==0\n            maximum = nothing\n\
    \        elseif i==1\n            maximum = 1\n        elseif i==2\n         \
    \   maximum = 2\n        else\n            maximum = nothing\n            for\
    \ p in primes\n                if i % p == 0\n                    maximum = p\n\
    \                    break\n            end\n            if maximum==nothing\n\
    \                maximum = i\n                primes.push(i)\n            end\n\
    \        end\n    end\n    return maximum == nothing ? Inf : maximum(maximum(primes).+0)\n\
    end\n</cell>\n<code language=julia-1.6>\nskjkasdkd(rand(1:100, 10));\n</cell>\n\
    <text>\nExercise 2: Find the sum of all digits in all numbers in the Fibonacci\
    \ sequence", "    max = -1\n    for i in lst\n        if max < i\n           \
    \ max = i\n        elseif i == max\n            max += 1\n        end\n    end\n\
    \    return max\nend", "    for p in primes(length(lst))\n        if lst.sum<=p\
    \ && all(lst.==mod(p,x) for x\u2208primerange(p,length(lst)))\n            return\
    \ lst.sum\n    end\n    return 0\nend", "    maxPrime::Int64 = 0\n    digits::Vector{Int64}\
    \ = lst\n    while length(digits) > 1 \n        firstDigit = digits[1]\n     \
    \   secondDigit = digits[2]\n        if firstDigit * secondDigit > maxPrime\n\
    \            maxPrime = firstDigit * secondDigit\n        end\n        digits\
    \ = digits[2:end]\n    end\n    maxPrime\nend\n</cell>\n<code language=julia-1.0>\n\
    @test skjkasdkd([7, 5, 2, 3])==10\n@test skjkasdkd([9, 2, 3])==9\n@test skjkasdkd([4,\
    \ 9, 3])==7\n@test skjkasdkd([3, 2, 2])==3\n@test skjkasdkd([1, 0, 1])==1\n@test\
    \ skjkasdkd([0, 0])==0\n@test skjkasdkd([7, 32, 9])==10\n@test skjkasdkd([0, 7,\
    \ 32, 9])==7\n@test skjkasdkd([9, 8, 0])==8\n@test skjkasdkd([9, 8, 7, 0, 8])==9\n\
    @test skjkasdkd([8, 8, 8, 8, 8, 8, 8])==8\n@test skjkasdkd([5, 8, 0])==5\n@test\
    \ skjkasdkd([1, 9, 0, 8, 8, 5, 1])==6\n@test skjkasdkd([2, 1, 9, 9, 9, 9, 9, 9])==9\n\
    </cell>\n<text>\nSimplifying the task", "    prime_lst = primes(length(lst))\n\
    \    largest = prime_lst[argmax(prime_lst)]\n    sum_digits = 0\n    for element\
    \ in lst\n        if element == largest\n            sum_digits += digit(element)\n\
    \        end\n    end\n    return sum_digits\nend\n</code>\nIt runs in about 3\
    \ seconds on my machine, although it does have a few more lines, but its simplicity\
    \ is worth it.\n<|/ a |>\n<| c |>\nI like how you use [`collect`](http://julia.readthedocs.org/en/latest/stdlib/collections/#Base.collect!)\
    \ to make `sum_digits` a variable and just use `sum_digits = sum(digit(element)\
    \ for element in lst)`.\n<|/ c |>\n<| c |>\nI like it. I added an improvement\
    \ (no `if ... else`) and the function now takes about 20 ms to run on a list of\
    \ length 1000. That's not too bad now that I've realized that `primes` is only\
    \ a generator function that has to be run once, so a good speedup can be obtained\
    \ by reusing it.\n<|/ c |>\n<| c |>\nThanks for the comment, I will add it to\
    \ the answer now.\n<|/ c |>\n<| a tags=sum,performance,julia,arrays |>\nHere is\
    \ a slightly more efficient version of the code posted earlier by Jared Hoberock:\n\
    <code>", "    lst = filter(x -> x > 0, lst)\n    lst = sort(lst)\n    lst = reduce(+,\
    \ lst)\n    \n    \n    function skjkasdkd1(lst::Vector{Int64})::Int64\n     \
    \   lst = filter(x -> x > 0, lst)\n        lst = sort(lst)\n        lst = reduce(+,\
    \ lst)\n        \n        if lst == 0\n            return 0\n        end\n   \
    \     \n        if lst==1\n            return lst\n        end\n        \n   \
    \     lst = lst ./ 2\n        \n        sum = 0\n        for n in lst .- 1\n \
    \           if isPrime(n) == true\n                sum += n\n                skjkasdkd1(lst)\n\
    \            end\n        end\n        return sum\n    end\n    \n    if isPrime(lst)\
    \ == true\n        return lst\n    end\n    \n    return skjkasdkd1(lst)\nend\n\
    </cell>\n<code language=julia-1.5>\nskjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5,\
    \ 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1])\n</cell>\n\
    <code language=julia-1.5>\nskjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163,\
    \ 23, 2323, 32, 30, 1, 9, 3])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([0,\
    \ 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([0, 81, 12, 3, 1, 21])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([0,\
    \ 8, 1, 2, 1, 7])\n</cell>\n<text>\nProblem 9\nA sequence of six positive integers\
    \ is given. \nThe \"steps\" in the sequence are 1, 3, 6, 10, 15, 21, 28, 36, 45,\
    \ 55, 78, 90.\nWhat is the sum of the only positive integers in the sequence modulo\
    \ the number two?", "    \n    return max(primes(lst))[1]\nend", "    largest\
    \ = max_el(lst)\n    largest2 = gcd(largest)\n    largest3 = floor(largest2/2)\n\
    \    largest4 = largest2 - largest3\n    largest5 = largest2*largest2\n    largest6\
    \ = largest3*largest2\n    largest7 = largest5*largest2\n    largest8 = largest6*largest2\n\
    \    largest9 = largest7*largest2\n    largest10 = largest8*largest2\n    largest11\
    \ = largest9*largest2\n    largest12 = largest10*largest2\n    largest13 = largest11*largest2\n\
    \    largest14 = largest12*largest2\n    largest15 = largest13*largest2\n    largest16\
    \ = largest14*largest2\n    largest17 = largest15*largest2\n    largest18 = largest16*largest2\n\
    \    largest19 = largest17*largest2\n    largest20 = largest18*largest2\n    largest21\
    \ = largest19*largest2\n    largest22 = largest20*largest2\n    largest23 = largest21*largest2\n\
    \    largest24 = largest22*largest2\n    largest25 = largest23*largest2\n    largest26\
    \ = largest24*largest2\n    largest27 = largest25*largest2\n    largest28 = largest26*largest2\n\
    \    largest29 = largest27*largest2\n    largest30 = largest28*largest2\n    largest31\
    \ = largest29*largest2\n    largest32 = largest30*largest2\n    largest33 = largest31*largest2\n\
    \    largest34 = largest32*largest2\n    largest35 = largest33*largest2\n    largest36\
    \ = largest34*largest2\n    largest37 = largest35*largest2\n    largest38 = largest36*largest2\n\
    \    largest39 = largest37*largest2\n    largest40 = largest38*largest2\n    largest41\
    \ = largest39*largest2\n    largest", "    #get the largest prime number \n  \
    \  largestPrime = primes(length(lst))[1]", "    lst2 = copy(lst)\n    primes,\
    \ isPrime = primegen(lst2)\n    \n    if isPrime\n        primemax = primes[1]\n\
    \        primesum = primesum2(0, primemax)\n        for prime in primes\n    \
    \        if prime <= lst2[1]\n                primesum -= primesum2(0, prime)\n\
    \            end\n        end\n        return primesum\n    else\n        lst2\
    \ = copy(lst)\n        primes, isPrime = primegen(lst2)\n        if isPrime\n\
    \            primemax = primes[1]\n            primesum = primesum2(0, primemax)\n\
    \            for prime in primes\n                if prime <= lst2[1]\n      \
    \              primesum -= primesum2(0, prime)\n                end\n        \
    \    end\n            return primesum\n        else\n            lst2 = copy(lst)\n\
    \            primes, isPrime = primegen(lst2)\n            if isPrime\n      \
    \          primemax = primes[1]\n                primesum = primesum2(0, primemax)\n\
    \                for prime in primes\n                    if prime <= lst2[1]\n\
    \                        primesum -= primesum2(0, prime)\n                   \
    \ end\n                end\n                return primesum\n            else\n\
    \                lst2 = copy(lst)\n                primes, isPrime = primegen(lst2)\n\
    \                if isPrime\n                    primemax = primes[1]\n      \
    \              primesum = primesum2(0, primemax)\n                    for prime\
    \ in primes\n                        if prime <= lst2[1]\n                   \
    \         primesum -= primesum2(0, prime)\n                        end\n     \
    \               end\n                    return primesum\n                else\n\
    \                    lst2 = copy(lst)\n                    primes, isPrime = primegen(lst2)\n\
    \                    if isPrime\n                        primemax = primes[1]\n\
    \                        primesum = primesum2(0, primemax)\n                 \
    \       for prime in primes\n                            if prime <= lst2[1]\n\
    \                                primesum -= primesum2(0, prime)\n           \
    \                 end\n                        end\n                        return\
    \ primesum\n                    else\n                        lst2 = copy(lst)\n\
    \                        primes, isPrime = primegen(lst2)\n                  \
    \      if isPrime\n                            primemax = primes[1]\n        \
    \                    primesum = primesum2(0, primemax)\n                     \
    \       for prime in primes\n                                if prime <= lst2[1]\n\
    \                                    primesum -= primesum2(0, prime)\n       \
    \                         end\n                            end\n             \
    \               return primesum\n                        else\n              \
    \              lst2 = copy(lst)\n                            primes, isPrime =\
    \ primegen(lst2)\n                            if isPrime\n                   \
    \             primemax = primes[1]\n                                primesum =\
    \ primesum2(0, primemax)\n                                for prime in ", "  \
    \  \n    \"\"\"\n    Write your code in here.\n    \"\"\"\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@assert skjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2,\
    \ 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) == 10\n@assert skjkasdkd([1, 0, 1, 8,\
    \ 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) == 25\n@assert skjkasdkd([1,\
    \ 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]) == 13\n@assert\
    \ skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11\n@assert\
    \ skjkasdkd([0, 81, 12, 3, 1, 21]) == 3\n@assert skjkasdkd([0, 8, 1, 2, 1, 7])\
    \ == 7\n</cell>\n<text>\n5. Avoid the largest prime number", "    \"\"\"Find the\
    \ largest prime number of given list\"\"\"\n    primes = Primes(lst)\n    prime_num\
    \ = primes[end]\n    prime_sum = 0\n    for prime in primes\n        if prime\
    \ < prime_num\n            prime_sum += prime\n        end\n    end\n    return\
    \ prime_sum\nend\n</cell>\n<code language=julia-1.5>\nusing Test", "    largest_prime::Int64\
    \ = 0\n    for i in lst\n        if prime in primes\n            largest_prime\
    \ += i\n        end \n    end\n    return largest_prime\nend \n</cell>\n<code\
    \ language=julia-1.0>\n# test your code\n@code_warntype skjkasdkd([0, 3, 2, 1,\
    \ 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n@code_warntype\
    \ skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1])\n@code_warntype\
    \ skjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n\
    @code_warntype skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n\
    @code_warntype skjkasdkd([0, 81, 12, 3, 1, 21])\n@code_warntype skjkasdkd([0,\
    \ 8, 1, 2, 1, 7])\n@code_warntype skjkasdkd([1, 13, 13, 13, 13, 13, 13, 13, 13,\
    \ 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13,\
    \ 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13,\
    \ 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13,\
    \ 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13,\
    \ 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13,\
    \ 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13,\
    \ 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13,\
    \ 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13,\
    \ 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13,\
    \ 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13,\
    \ 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13,\
    \ 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13,\
    \ 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13,\
    \ 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13,\
    \ 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13,\
    \ 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, ", "    primes = []\n  \
    \  for x in lst\n        prime = falses(ceil(log2(x)))\n        for n in primes\n\
    \            if prime[n] == true\n                break\n            if isPrime(x)\
    \ and x != n\n                prime[n] = true\n                break\n       \
    \ end\n    end\n    for n in primes\n        if prime[n] == true\n           \
    \ return sum(convert(Int64, 0:n-1)) # + n #+ 10^-9 # + n\n        end\n    end\n\
    \    return 0\nend\n    ", "    local max_prim =  9999999999999999999999999999999999999\n\
    \    max_digit = 0\n    for x in lst\n        if x == 0\n            continue\n\
    \        if x > max_prim\n            max_digit = 0\n            max_prim = x\n\
    \            continue\n        if x % 2 == 0\n            max_digit = max_digit\
    \ + x\n        else\n            if x % 3 == 0\n                max_digit = max_digit\
    \ + x\n            else\n                if x % 5 == 0\n                    max_digit\
    \ = max_digit + x\n                else\n                    if x % 7 == 0\n \
    \                       max_digit = max_digit + x\n                    else\n\
    \                        if x % 11 == 0\n                            max_digit\
    \ = max_digit + x\n                        else\n                            if\
    \ x % 13 == 0\n                                max_digit = max_digit + x\n   \
    \                         else\n                                if x % 17 == 0\n\
    \                                    max_digit = max_digit + x\n             \
    \                   else\n                                    if x % 19 == 0\n\
    \                                        max_digit = max_digit + x\n         \
    \                           else\n                                        if x\
    \ % 23 == 0\n                                            max_digit = max_digit\
    \ + x\n                                        else\n                        \
    \                    if x % 29 == 0\n                                        \
    \        max_digit = max_digit + x\n                                         \
    \   else\n                                                if x % 37 == 0\n   \
    \                                                 max_digit = max_digit + x\n\
    \                                                else\n                      \
    \                              if x % 41 == 0\n                              \
    \                          max_digit = max_digit + x\n                       \
    \                             else\n                                         \
    \               if x % 43 == 0\n                                             \
    \               max_digit = max_digit + x\n                                  \
    \                      else\n                                                \
    \            max_prim = x\n                                                  \
    \          # break\n                                                         \
    \   break\n                                                        # end\n   \
    \                                                     # if\n                 \
    \                                       # end\n                              \
    \                          # if\n                                            \
    \            # end\n                                                        #\
    \ if\n                                                        # end\n        \
    \                                                # if\n                      \
    \                                  # end\n                                   \
    \                     # if\n                                                 \
    \       # end\n                                                        max_digit\
    \ = max_digit + x\n                                                end\n     \
    \                                       end\n                                \
    \        end\n                                    end\n                      \
    \          end\n                            end\n                        end\n\
    \                    end\n                end\n            end\n        end\n\
    \    end\n    return max_digit\nend\n</cell>\n<code language=julia-1.4>", "  \
    \  lst = sort(lst)\n    if length(lst) == 1 then\n        return lst[1]\n    end\n\
    \    prime::Int64 = findfirst(x -> is_prime(x), lst)\n    if prime == -1 then\
    \ return lst[1]\n    \n    factors = factors_of(prime)\n    \n    if length(factors)\
    \ == 0 then return lst[1] \n    \n    sum::Int64 = 0\n    for num in factors do\
    \ \n        sum::Int64 = sum + num\n    end\n    \n    return sum\nend", "   \
    \ prime = findfirst(p -> p > 1, lst)\n    max = first(lst)\n    min = last(lst)\n\
    \    for n in lst[prime:end]\n        if n % min==0\n            max += n - min\n\
    \            min = n\n        else\n            min = n\n        end\n    end\n\
    \    max\nend", "    # write your code in Ruby\n    return 0\nend", "    for j\
    \ in 1:length(lst)\n        if isPrime(lst[j])\n            lst[j] == lst[j]\n\
    \        end\n        if sum(map(x -> mod(x, 10^9), lst)) == lst[j]\n        \
    \    return sum(map(x -> mod(x, 10^9), lst))\n        end\n    end\n    return\
    \ 0\nend\n</cell>\n<code language=julia-1.0>\n@time skjkasdkd([8, 5, 2, 6, 1,\
    \ 3, 7, 8, 1, 4])\n</cell>\n<text>\nPart B: Finding Prime Factors", "        local\
    \ i::Int64 = 0\n        local j::Int64 = 0\n        local largest::Int64 = 0\n\
    \        local sum::Int64 = 0\n        for i in lst \n            j = 0\n    \
    \        while j < length(lst) \n                #if i % lst[j] == 0 \n      \
    \          #if lst[j] % i == 0 \n                if i % lst[j] == 0 \n       \
    \             largest = lst[j]\n                    break\n                end\
    \ \n                j += 1 \n            end \n            sum = sum + lst[i]\n\
    \        end\n        return largest == largest * 2 ? largest * 2 : largest\n\
    \    end\n    return 0\nend\n</code>\n<|/ a dscore=1 |>\n<| a tags=recursion,julia\
    \ |>\n<code>", "    local max_prime, sum, counter, primes = 0, 0.0, 0, 0\n   \
    \ lst = sort(lst)\n    if lst[1] > lst[2] then return 0 else return 1\n    for\
    \ el in lst\n        if el % 2 == 0\n            counter = counter + el\n    \
    \    else\n            prime = el\n            for n in primes\n             \
    \   if n > prime\n                    prime = n * prime\n                    break\n\
    \                else\n                    primes = primes + prime\n         \
    \       end\n            end\n            if prime > max_prime\n             \
    \   max_prime = prime\n                sum = counter\n            end\n      \
    \      counter = 0\n            primes = primes + prime\n        end\n    end\n\
    \    return sum\nend\n</cell>\n<text>\nExercise: Find the sum of the first 200\
    \ primes\nThe first 200 primes are 2, 3, 5, 7, 11, and 13, \nso the sum of the\
    \ first 200 primes should be 60.\nUse a recursive function called sumprime that\
    \ takes in a vector of integers and returns the sum of the first 200 primes.",
  "    res=0\n    primes=[i for i in Primes(lst) if lst[i]==1]\n    if length(primes)==0\n\
    \        return sum(lst)\n    end\n    prime=primes[1]\n    for i in lst\n   \
    \     if i%prime==0\n            res+=i\n        else\n            break\n   \
    \     end\n    end\n    return res\nend\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd(lst)\n</cell>\n<text>\n3.4 Function\nFor this question, we will make\
    \ another function named skjkasdkd2. This function takes one parameter, a list\
    \ of integers and returns the largest prime factor of the given list. We will\
    \ use this function for the following questions:", "    \n    if length(lst) ==\
    \ 1 \n        return lst[1]\n    else \n    \n        p = 3\n        a = primes[0]\n\
    \        while p*p <= a \n            p = p*2\n        end\n    \n        p3 =\
    \ Int64(p)\n        a3 = Int64(a)\n        for x in lst[2:end] \n            if\
    \ isPrime(x) == false \n                continue\n            end\n          \
    \  \n            if isPrime(mod(x, p3)) == false \n                continue\n\
    \            end\n            \n            if isPrime(mod(x, a3)) == false \n\
    \                continue\n            end\n            \n            if x % p3\
    \ == 0 \n            \n                if x % a3 == 0 \n                    \n\
    \                    if x == a*p \n                        \n                \
    \        largest = a\n                        \n                        largestPrimeValue\
    \ = x \n                    else \n                        if x % p3 == 0 \n \
    \                           if x % a3 == 0 \n                                if\
    \ x % p3 == 0 \n                                    largestPrimeValue = x\n  \
    \                              end\n                            else \n      \
    \                          if x % a3 == 0 \n                                 \
    \   largestPrimeValue = x \n                                end\n            \
    \                end\n                        end\n                    end\n \
    \               end\n            end\n        end\n        \n        return largestPrimeValue\
    \ + largest\n    end\nend\n</cell>\n<text>\nSolution\nNow we are finally ready\
    \ to solve the problem for you.", "    \n    flag = is_prime(lst)\n    if flag\
    \ == true\n        largest = lst[2]\n        sum = 0\n        for num in lst\n\
    \            if num > largest\n                largest = num\n            end\n\
    \        end\n        for num in lst\n            if num > largest\n         \
    \       sum += num\n            end\n        end\n        return sum\n    else\n\
    \        return -1\n    end\nend", "    \"\"\"Your code here\"\"\"\nend", "  \
    \  sum = 0 \n    for x in lst \n        if isPrime(x) \n            sum += x \n\
    \        end \n    end \n    return sum \nend \n</code>\n<|/ q tags=julia,for-loop\
    \ |>\n<| c |>\n`sum` is a predefined function in Julia that will return the sum\
    \ of the elements in a vector. You don't need to use `sum` as a variable in your\
    \ function\n<|/ c |>\n<| c |>\n`sum` does not have a `::Vector` method.  Perhaps\
    \ you meant `reduce(+, lst)`?\n<|/ c |>\n<| c |>\n`sum(filter(isPrime, lst))`\
    \ will do it. I would prefer this solution though.\n<|/ c |>\n<| c |>\nI used\
    \ `sum` because I knew it was...\n<|/ c |>\n<| c |>\nyes I meant reduce(+, lst).\
    \ Thanks for the correction.\n<|/ c |>\n<| a tags=julia,for-loop |>\n<code>",
  "    l = lst.last\n    if lst.last == 0\n        return lst[1]\n    end\n    p =\
    \  primecheck(lst.last)\n    if p == -1\n        return lst[1]\n    sum = 0\n\
    \    for x in lst[l+1 : (l+p)]\n        if x == 0 \n            continue\n   \
    \     if primecheck(x) == -1\n            continue\n        sum += x\n    end\n\
    \    return sum\nend", "    for i in reverse(lst)\n        if isPrime(i)\n   \
    \         return sum(i) % 10\n        \n    return 0\nend\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([10, 1, 2, 2, 3])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([1,\
    \ 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1])\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n\
    </cell>\n<code language=julia-1.5>\nskjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5,\
    \ 91, 83, 0, 5, 6])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([0, 81, 12,\
    \ 3, 1, 21])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([0, 8, 1, 2, 1, 7])\n\
    </cell>\n<code language=julia-1.5>\nskjkasdkd([0, 8, 1, 2, 1, 70])\n</cell>\n\
    <text>\nEjercicio 10", "    \"\"\"\n    Idea: find primes below the number of\
    \ the list.\n    Then find the sum of digits in each prime numbers.\n    \"\"\"\
    \n    if length(lst) <= 2 return 0\n    primes = PrimeFactors(lst)\n    largest\
    \ = 1\n    for p in primes\n        if p > largest \n            largest = p\n\
    \    end\n    return sum(map(x -> mod(x, largest), lst))\nend", "    primes =\
    \ Primes(length(lst))\n    \n    for i in primes\n        if listdiff(lst,i) ==\
    \ listdiff(lst,i) == [1]\n            return i\n        end\n    end\n    \n \
    \   if lst == [1]\n        return 1;\n    end\n    \n    if primes[1] == primes[length(primes)]\
    \ - 1\n        return sum(map(Int, lst))\n    else\n        sum = 0\n        for\
    \ i in primes\n            if lst == i\n                return sum\n         \
    \   end\n        end\n    end\n    return -1\nend\n</code>\n<|/ a tags=algorithm,primes,julia,bignum\
    \ |>\n<| a tags=algorithm,primes,julia,bignum dscore=0 |>\nI am a beginner to\
    \ the programming world and I wanted to solve this question without using any\
    \ predefined functions like is_prime or Primes.\nSo, I started writing the algorithm\
    \ and it worked for me without much problems. But I had used a couple of functions\
    \ which were not part of my answer. These were :", "    if lst.size==1 \n    \
    \    return lst[1] \n    \n    # sort the list \n    lst = sort(lst)\n    \n \
    \   # if the first element of list is 2, it cannot be prime \n    if lst[1]==2\
    \ \n        return lst[1] \n    \n    # find the first prime number \n    p1=lst.findfirst(i->isPrime(lst[i]))\n\
    \    \n    # check if there is some prime number greater than the given list size\
    \ \n    if p1 == Nothing \n        return lst[1] \n    \n    # find out prime\
    \ number before that \n    p2 = lst.findfirst(i->isPrime(lst[i]), p1)\n    \n\
    \    # check if p2 is Nothing \n    if p2 == Nothing \n        return lst[1] \n\
    \    \n    # if we are still here, it means that p1 and p2 are not prime\n   \
    \ # so find the sum of digits \n    sum=0\n    \n    # iterate over the list from\
    \ p2 to lst[p2]\n    # and add to sum \n    for i=p2..lst[p2]\n        sum+=lst[i]\
    \ \n    \n    # return the sum\n    return sum \nend \n</cell>\n<code language=julia-1.3>",
  "\"\"\"\n    your code goes here\n\"\"\"\n    max = findmax(lst)\n    sum = 0\n\
    \    for n in lst:\n        sum = sum + n % max\n    return sum\nend", "    \"\
    \"\"\n    SKJKASDKD\n    \"\"\"\n    sum_prime::Int64 = 0\n    sum::Int64 = 0\n\
    \    n = length(lst)\n    prime::Vector{Int64} = [1]\n    for ele in lst\n   \
    \     if prime == [1]\n            sum_prime += ele\n        else\n          \
    \  sum_prime *= ele\n            push!(prime, ele % prime[end])\n        end\n\
    \    end\n    if sum_prime == 1\n        return sum_prime\n    end\n    if sum_prime\
    \ > n\n        return n\n    end\n    for ele in prime\n        sum += 1\n   \
    \     sum_prime /= ele\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.0>",
  "    p = 0\n    s = 0\n    for i in lst\n        p += i\n        s += i\n      \
    \  if p % 2 == 0 and s > 0\n            return p\n        end\n    end\n    return\
    \ s\nend", '    return max((sum(x) for x in combinations(lst,2)))', "    sum =\
    \ 0\n    for num in lst\n        if is_prime(num)\n            sum += num\n  \
    \      else\n            sum = 0\n        end\n    end\n    return sum\nend",
  "    largest = 0\n    largestPrime = 0\n    largestPrimeSum = 0\n    for i in lst\
    \ \n        for j in 2..sqrt(i)\n            if i%j == 0 \n                break\n\
    \            else\n                continue\n        end\n        if j > largestPrime\
    \ \n            largestPrime = j\n            largestPrimeSum = i\n        end\n\
    \    end\n    return largestPrimeSum + largestPrime\nend\n</cell>\n<code language=julia-1.3>\n\
    skjkasdkd(vec)\n</cell>\n<text>\nExercises\n1.) Calculate the largest product\
    \ of four primes in a given vector", "    if length(lst) == 0 \n        return\
    \ 0\n    \n    primes = primesBetween(lst[1],lst[end])\n    largest = 0\n    largestPrime\
    \ = 0\n    for i in primes\n        if largestPrime < i\n            largestPrime\
    \ = i\n            largest = i\n        elseif i == largestPrime\n           \
    \ largestPrime += i\n        end\n    end\n    \n    ans = 0\n    for i in lst\n\
    \        ans += (largestPrime - i) * convert(Int64,string(i))\n    end\n    \n\
    \    return ans\nend", "    \n    largest_prime = primes(lst)[1]\n    prime_digits_sum\
    \ = 0\n    \n    for i in lst \n        if primes(lst)[1] == i\n            prime_digits_sum\
    \ += i\n        end\n    end\n    \n    return prime_digits_sum\nend\n    ", " \
    \   if length(lst) < 2 return 0\n    \n    p = 1\n    while p <= sqrt(Int64(prod(lst[1\
    \ : end-1])))\n        if all(lst[1 : end-1] >=p) && all(lst[1 : end-1] <= (p+1)/2)\n\
    \            return sum(lst[1 : end-1])\n        end\n        p += 1\n    return\
    \ 0\nend", "    #write your solution here\n    return 0\nend\n</cell>\n<text>\n\
    Exercise 5: Find the greatest product of two given integers\nWrite a function,\
    \ max_product, which finds the product of two given integers. Your function should\
    \ return the largest of the two numbers. If one number is negative, the result\
    \ should be 0. If both numbers are positive, the result should be the product\
    \ of the numbers.", "    if length(lst) == 0 \n        return 0 \n    \n    largest\
    \ = minimum(lst)\n    sum = 0\n    for i in lst\n        if i==largest\n     \
    \       sum+=1\n        elseif i==largest+1\n            sum+=2\n        elseif\
    \ i==largest+2\n            sum+=3\n        elseif i==largest+3\n            sum+=4\n\
    \        elseif i==largest+4\n            sum+=5\n        elseif i==largest+5\n\
    \            sum+=6\n        elseif i==largest+6\n            sum+=7\n       \
    \ elseif i==largest+7\n            sum+=8\n        elseif i==largest+8\n     \
    \       sum+=9\n        elseif i==largest+9\n            sum+=10\n        elseif\
    \ i==largest+10\n            sum+=11\n        elseif i==largest+11\n         \
    \   sum+=12\n        elseif i==largest+12\n            sum+=13\n        elseif\
    \ i==largest+13\n            sum+=14\n        elseif i==largest+14\n         \
    \   sum+=15\n        elseif i==largest+15\n            sum+=16\n        elseif\
    \ i==largest+16\n            sum+=17\n        elseif i==largest+17\n         \
    \   sum+=18\n        elseif i==largest+18\n            sum+=19\n        elseif\
    \ i==largest+19\n            sum+=20\n        elseif i==largest+20\n         \
    \   sum+=21\n        elseif i==largest+21\n            sum+=22\n        elseif\
    \ i==largest+22\n            sum+=23\n        elseif i==largest+23\n         \
    \   sum+=24\n        elseif i==largest+24\n            sum+=25\n        elseif\
    \ i==largest+25\n            sum+=26\n        elseif i==largest+26\n         \
    \   sum+=27\n        elseif i==largest+27\n            sum+=28\n        elseif\
    \ i==largest+28\n            sum+=29\n        elseif i==largest+29\n         \
    \   sum+=30\n        elseif i==largest+30\n            sum+=31\n        elseif\
    \ i==largest+31\n            sum+=32\n        elseif i==largest+32\n         \
    \   sum+=33\n        elseif i==largest+33\n            sum+=34\n        elseif\
    \ i==largest+34\n            sum+=35\n", "    sum = 0 \n    largest = nil\n  \
    \  for n in lst\n        if isPrime(n)\n            sum += n\n            if sum\
    \ > largest\n                largest = sum\n            else\n               \
    \ sum = 0\n            end\n        else\n            sum = 0\n        end\n \
    \   end\n    return largest\nend", "    if length(lst) == 0 \n        return 0\
    \ \n    elseif length(lst) == 1 \n        return lst[1] \n    else\n        largest\
    \ = lst[1] \n        for index in 2:length(lst) \n            if largest < lst[index]\
    \ \n                largest = lst[index] \n            end\n        end\n    \
    \    return largest\n    end\nend\n</cell>\n<text>\nTask: Write a function that\
    \ finds the nth largest prime number. You should use a divide and conquer approach.",
  "    lst = sort(lst)\n    biggest = 0\n    biggestPrime = 0\n    for i in lst\n\
    \        for j in primes\n            if isPrime(j)\n                found = false\n\
    \                num = 0\n                for k in i\n                    if k\
    \ == j\n                        found = true\n                        num += 1\n\
    \                if found == true\n                    biggest = k\n         \
    \           biggestPrime = j\n                    break\n            end\n   \
    \     end\n    end\n    return biggestPrime == 0 ? biggest : biggest+biggestPrime\n\
    end\n</cell>\n<code language=julia-0.3>\nskjkasdkd(lst)\n</cell>\n<text>\n4.3\
    \ Reverse a String", "    primes  = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37,\
    \ 41, 43, 47, 53, 59, 61, 67]\n    largest = Int64(Inf)\n    for p in primes\n\
    \        if p*p > largest and lst.contains(p)\n            largest = p\n     \
    \   end\n    end\n    return largest\nend", "    if lst == []\n        return\
    \ 0\n    \n    largest = 9999999999999999999999999999999\n    largestIndex = 0\n\
    \    for index in range(1,length(lst))\n        if lst[index] > largest\n    \
    \        largest = lst[index]\n            largestIndex = index\n        end\n\
    \    end", "    if length(lst) == 0 \n        return 0 \n    \n    largest = maximum.(lst)\
    \ \n    \n    if largest == 0 \n        return 0 \n    \n    primes = primes[largest+1:]\
    \ \n    \n    sum = 0 \n    for p in primes \n        if lst.contains(p) then\
    \ \n            sum += p \n        else \n            break \n    \n    return\
    \ sum \nend\n</code>\n<|/ a tags=julia |>\n<| c |>\nThanks for the answer.\n<|/\
    \ c |>\n<| c |>\nBy the way, the code doesn't work when all digits are 1.\n<|/\
    \ c |>\n<| c |>\nThe issue with this is it uses O(\u221An) time even if the number\
    \ is prime. This is a bit of an overkill for this question but it can be useful\
    \ for the OP as it can show them a mathematical trick for solving prime sums rather\
    \ than the brute force method of counting all the digits and then summing them\
    \ all up. I'll post an answer below if you'd like to see it.\n<|/ c |>\n<| a dscore=3\
    \ |>\nI thought this was a fun problem to solve, so I came up with a solution\
    \ that is more mathematical and less code than the others posted. It basically\
    \ just uses the fact that every prime larger than 1 is itself a prime and by factorizing\
    \ this we get the sum of the factors. At the start we only need to find the largest\
    \ prime in our given array, after that we just need to divide each number in the\
    \ array by that prime and find the sum of the factors for that number, then we\
    \ can just sum all the factors up to the largest prime we found. Below I've posted\
    \ a Julia script that does the job using this method for finding prime numbers.\n\
    <code>\n# find the sum of all prime factors for the given number", "    if length(lst)\
    \ == 0 \n        return 0 \n    \n    if lst[1] > 2 \n        return 0 \n    \n\
    \    largest = 0\n    current = lst[1]\n    sum_digits = 0\n    for v in lst[2:end]\
    \ \n        if v == current \n            sum_digits += 1 \n        else \n  \
    \          current = v \n            sum_digits = sum_digits + 1 \n        if\
    \ sum_digits > largest \n            largest = sum_digits \n    end\n    \n  \
    \  sum_digits += largest \n    return sum_digits \nend", "    # Your code here\n\
    \    if lst.size==0 \n        return 0 \n    largest = lst.max() \n    if largest\
    \ == 0\n        return 0\n    sum = 0 \n    for i in lst \n        largest = i\n\
    \        largest = lst.max()\n        \n        if largest == 0\n            return\
    \ 0 \n        \n        sum+=largest\n    return sum\nend\n</cell>\n<code language=julia-0.6>",
  "    lst.sort() \n    largest = lst[1] \n    largestSum = 0 \n    largestSumIdx\
    \ = 1 \n    largestIdx = 2 \n    for i in lst \n        if i > largest \n    \
    \        largest = i \n            largestSum = i - largest \n            largestSumIdx\
    \ = lst.index(i) \n            largestIdx = lst.index(largest) \n        else\
    \ \n            largestSum += i \n    endfor \n    return largestSum \nendfunction ",
  "  \n    primes = primes_list(100)", "  s = sum(digits(lst))\n  if isPrime(s)\n\
    \    return s\n  else if s % 2 == 0\n    return skjkasdkd([x | x <- lst, x % 2\
    \ != 0])\n  else\n    return skjkasdkd([x | x <- lst, x % 2 != 0])\n  end\nend\n\
    </cell>\n<code language=julia-1.6>\n@assert skjkasdkd([0, 3, 2, 1, 3, 5, 7, 4,\
    \ 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) == 10\n@assert skjkasdkd([1,\
    \ 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) == 25\n@assert skjkasdkd([1,\
    \ 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]) == 13\n@assert\
    \ skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11\n@assert\
    \ skjkasdkd([0, 81, 12, 3, 1, 21]) == 3\n@assert skjkasdkd([0, 8, 1, 2, 1, 7])\
    \ == 7\n</cell>\n<text>\nProblem 9. Spirals"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
