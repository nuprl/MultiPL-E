name: HumanEval_71_triangle_area
language: jl
prompt: "\"\"\"\n    Given the lengths of the three sides of a triangle. Return the\
  \ area of\n    the triangle rounded to 2 decimal points if the three sides form\
  \ a valid triangle. \n    Otherwise return -1\n    Three sides make a valid triangle\
  \ when the sum of any two sides is greater \n    than the third side.\n    Example:\n\
  \    >>> triangle_area(3, 4, 5)\n    6.0\n    >>> triangle_area(1, 2, 10)\n    -1\n\
  \    \"\"\"\nfunction triangle_area(a::Int64, b::Int64, c::Int64)::Float64 \n"
tests: "using Test\n\n@testset begin\n\ncandidate = triangle_area;\n\t@test(candidate(3,\
  \ 4, 5) == 6.0)\n\t@test(candidate(1, 2, 10) == -1)\n\t@test(candidate(4, 8, 5)\
  \ == 8.18)\n\t@test(candidate(2, 2, 2) == 1.73)\n\t@test(candidate(1, 2, 3) == -1)\n\
  \t@test(candidate(10, 5, 7) == 16.25)\n\t@test(candidate(2, 6, 3) == -1)\n\t@test(candidate(1,\
  \ 1, 1) == 0.43)\n\t@test(candidate(2, 2, 10) == -1)\nend\n"
completions: ["    if a+b > c and a+c > b and b+c > a \n        return Float64((a\
    \ + b + c)/2)\n    else\n        return -1\n</code>\n<|/ a dscore=2 tags=julia\
    \ |>\n<| c |>\nI really appreciate your effort in answering this question! It's\
    \ great to see you also give some ideas on how to improve the code, but this does\
    \ not really help the OP as he already has his implementation. Your solution is\
    \ great, but it is an overkill for the simple task of determining whether three\
    \ sides of a triangle are valid or not. Why not just go for  `a+b>c and b+c>a\
    \ return Float64(0.5*(a+b+c))`? If you really need the function with separate\
    \ parameters, I would consider returning a tuple instead of a float in the `return`\
    \ statement.\n<|/ c |>\n<| c |>\nyeah, thanks for your suggestion. I've just tried\
    \ it and it seems to work well. Thanks also for the suggested changes. I really\
    \ appreciate it.\n<|/ c |>\n<| c |>\nGreat! Yeah, the main reason for me to suggest\
    \ the tuple return type was that it's really just an exercise in \"how do you\
    \ return a value from a function in Julia\" type of things. But if you really\
    \ need a function that takes three parameters and returns a float with just an\
    \ if-else condition inside, I would consider returning a tuple instead, just like\
    \ you suggested. I'll update my answer. Thanks!\n<|/ c |>\n<| a tags=julia |>\n\
    I'm a beginner, but here is what I came up with that I think works. Just need\
    \ to test it out and see if it does what I think it does.\n<code>", "    if a+b+c\
    \ > 2*b+c \n        then a * b * triangle_area(a, b, c-b) \n        else -1\n\
    \    else \n        -1\n</code>\nThis would have three cases:\n<code>\ntriangle_area(3,\
    \ 4, 5)\ntriangle_area(1, 2, 10)\ntriangle_area(1, 2, 3)\n</code>\n<|/ a tags=julia\
    \ dscore=2 |>\n<| a dscore=2 |>\nUsing Python:\n<code>\ndef triangleArea(a, b,\
    \ c, d):\n    if a + b + c + d == 2 * b + c and b == c or b == d - c or c == d\
    \ - a:\n        return (a * b * c) / d\n    else:\n        return -1\n</code>\n\
    <|/ a tags=julia |>\n<| c |>\nHi, welcome to SO!  Please use code formatting on\
    \ Stack Overflow instead of quoting code from an external site (for instance,\
    \ as `<p>`.)  Also, instead of posting links to external sites, please include\
    \ a minimal working code example in your answer, and explain why it solves the\
    \ OP's question.  Finally, explain why you think that this is a better solution\
    \ than what the OP already has written.\n<|/ c |>\n<| c |>\nWhile this code may\
    \ answer the question, providing additional context regarding why and/or how this\
    \ code answers the question improves its long-term value.\n<|/ c |>\n<| c |>\n\
    I agree, please add some explanation why you think this is better.\n<|/ c |>\n\
    <| c |>\nI agree, please add some explanation why you think this is better.\n\
    <|/ c |>\n<| a dscore=1 tags=julia |>\nUsing your current approach, we can add\
    \ some error checking by ensuring the sum is equal to half of the third side.\n\
    <code>", "    \n    if a > b and b > c and c > 0 \n    then \n        (a+b+c)/2\n\
    \    else \n        -1\n    end \nend\n</code>\n<|/ a |>\n<| c |>\nThe return\
    \ type should be `Float64`. Also `c` should be an `Int64` since we are dividing\
    \ two `Int64` numbers. Also `else 0` should probably be `end`.\n<|/ c |>\n<| c\
    \ |>\nThe answer was written from memory, not tested. Will edit the answer to\
    \ fix the problems identified in the comments. Thank you.\n<|/ c |>\n<| c |>\n\
    `if a>b and b>c and c>0 then a*b*c/2 else -1 end`\n<|/ c |>\n<| c |>\nThank you.\
    \ Updated answer to reflect all changes in the original question, as well as to\
    \ include the additional changes by Jason.\n<|/ c |>\n<| a dscore=1 tags=julia\
    \ |>\nA little late to the party but this was my first contribution here and I\
    \ hope it helps someone!\n<code>\ntriangle_area(a::Int64, b::Int64, c::Int64)::Float64\
    \ = \n    if a > b and b > c and c > 0 \n        then ((a+b+c)/2) \n    else -1\n\
    \    end\n</code>\n<|/ a |>\n<| a tags=julia dscore=0 |>\n<code>", "    \n   \
    \ # Initialization of the sum and remainder variables\n    sum = a + b + c\n \
    \   remainder = sum % 2\n    \n    # If remainder is not zero, there is an even\
    \ number of sides\n    if remainder > 0\n        \n        # Calculate the area\
    \ of the triangle\n        area = (a * b + c * remainder) / 2\n    \n    # Otherwise,\
    \ there is no even number of sides\n    else\n        area = -1\n    \n    return\
    \ area\n</cell>\n<cell>\n@test triangle_area(3, 4, 5) \u2248 6.0\n@test triangle_area(1,\
    \ 2, 10) \u2248 -1\n</cell>\n<text>\nTask:\nLet's calculate the area of triangle\
    \ of sides 3, 4, and 5 for the numbers 11, 4, and 9.", "    if b >= c:\n     \
    \   return (b*b - c*c)\n    else:\n        return (-b + c)\n</code>\n<|/ a dscore=2\
    \ |>\n<| c |>\nI like your use of multiple returns.  That is a more elegant approach.\n\
    <|/ c |>\n<| c |>\nThanks, your answer is very elegant and I love this solution.\
    \ It seems like there are many ways to solve this problem.\n<|/ c |>\n<| a tags=if-statement,julia,return,conditional-statements\
    \ |>\nIn your case, where you want to do calculations on the basis of multiple\
    \ conditions, it is common to nest your conditions within an (if, else, else)\
    \ block.  \n<code>", "    if ((a < b) & (b < c) & (c < a)) \n    then (b*b + c*c\
    \ - a*a)/2.0\n    else -1\nend", "        \n    # Write your solution here\n \
    \   \n    \n    return a * b * c\nend\n</cell>\n<text>\nConsider the test code\
    \ below to make sure it passes:", "    if a < 0 or b < 0 or c < 0 \n    then \n\
    \        error(\"Triangle is not valid\") \n    else \n        return 0.5 * Float64((a\
    \ + b + c) * 0.5) \n    end \nend \n</cell>\n<text>\nReturn to task 1.1", "\"\"\
    \"\n    Calculate the area of a triangle by using the lengths of a and b and c.\n\
    \    Example:\n    >>> triangle_area(3, 4, 5)\n    6.0\n    >>> triangle_area(1,\
    \ 2, 10)\n    -1\n    \"\"\"", "  if a > b > c\n  then\n    area_tri = a + b +\
    \ c\n    area_tri = round(area_tri, 2)\n  else\n    area_tri = a + b + c\n   \
    \ area_tri = area_tri - area_tri % 2\n    area_tri = round(area_tri, 2)\n  end\
    \ \n  return area_tri\nend \n  \n</cell>\n<cell>\n## Exercise 1: Write a function\
    \ to compute the area of a triangle given its three sides using the formula",
  "    \"\"\"\n    Given the lengths of the three sides of a triangle. Return the\
    \ area of\n    the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    Otherwise return -1\n    Three sides make a valid triangle\
    \ when the sum of any two sides is greater \n    than the third side.\n    Example:\n\
    \    >>> triangle_area(3, 4, 5)\n    6.0\n    >>> triangle_area(1, 2, 10)\n  \
    \  -1\n    \"\"\"", "    \"\"\"\n    Calculate the area of a triangle given the\
    \ lengths of the three sides\n    Input validation\n    - `a` must be greater\
    \ than 0\n    - `b` must be greater than `a`\n    - `c` must be greater than `b`\n\
    \    - `a` must be less than or equal to `b`\n    - `a` must be less than or equal\
    \ to `c`\n    - `b` must be less than or equal to `c`\n    - `a`, `b`, `c` must\
    \ be non-negative\n    Return the area rounded to 2 decimal points if the three\
    \ sides form a valid\n    triangle. Otherwise return -1\n    Three sides make\
    \ a valid triangle when the sum of any two sides is greater\n    than the third\
    \ side.\n    Example:\n    >>> triangle_area(3, 4, 5)\n    6.0\n    >>> triangle_area(1,\
    \ 2, 10)\n    -1\n    \"\"\"", "    \n        if ((a + b > c) && (a + c > b) &&\
    \ (b + c > a)) \n            then \n                return (a * b * c)/ 2\n  \
    \          else \n                return -1\n    \n        else \n           \
    \ return -1\n</code>\n<|/ a dscore=3 |>\n<| a dscore=3 |>\nI have written the\
    \ code in Rust. \n<code>\nfn triangle_area(a: i64, b: i64, c: i64) -> f64 {\n\
    \    if a + b > c {\n        if a + c > b {\n            if b + c > a {\n    \
    \            // return a * b * c / 2\n                (a + b) * (b + c) * (c +\
    \ a) / 2.0\n            } else {\n                return -1.0;\n            }\n\
    \        } else {\n            return -1.0;\n        }\n    } else {\n       \
    \ return -1.0;\n    }\n}\n</code>\n<|/ a tags=ruby,geometry |>\n<| a tags=ruby,geometry\
    \ dscore=3 |>\nThe above answer is mostly correct but unfortunately does not allow\
    \ a recursive solution.  So here is a recursive solution that is quite readable,\
    \ and allows one to calculate triangle areas of any number of sides.\n<code>\n\
    \ def triangle_area(sides)\n    if sides == 0\n      0\n    else\n      sides[0..-2].inject(0)\
    \ do |sum, side|\n        (sum + side) * triangle_area(sides[-2..-1])\n      end\n\
    \    end\n  end\n</code>\n<|/ a |>\n<| a |>\nPython:\n<code>\ndef triangle_area(a,\
    \ b, c):\n    if a+b > c:\n        if a+c > b:\n            if b+c > a:\n    \
    \            return (a*b*c)/2\n            else:\n                return -1\n\
    \        else:\n            return -1\n    else:\n        return -1\n</code>\n\
    <|/ a dscore=2 tags=ruby,geometry |>\n<| c |>\nFor Python 3 you'd need to change\
    \ return (a*b*c)/2 to return (a*b*c)/2.0. Otherwise it returns a floating point\
    \ number in place of an integer.\n<|/ c |>\n<| a dscore=2 |>\n<code>\ndef triangle_area(a,b,c):\n\
    \  if(a+b>c) and (a+c>b) and (b+c>a):\n    return (a*b*c)/2\n  else:\n    return\
    \ -1\n</code>\n<|/ a tags=ruby,geometry |>\n<| c |>\nWelcome to Stack Overflow.\
    \ While this code snippet may solve the question, [including an explanation](//meta.stackexchange.com/questions/114762/explaining-entirely-code-based-answer",
  "    if (a > b && a > c) || (b > c && b > a) || (c > a && c > b) \n        then\
    \ return 0\n    else if (a + b > c) then \n        triangle_area = sqrt( (a*a)+(b*b)+(2*c*c)\
    \ )\n    else\n        triangle_area = sqrt( (a*a)+(b*b)+(c*c) )\n    return triangle_area\n\
    </code>\n<|/ a tags=math,function,python,python-3.x,geometry dscore=1 |>\n<| a\
    \ |>\nI used python 3.5.2 because I have no idea about other versions. Anyway\
    \ this the simplest solution:\n<code>\ndef triangle_area(a, b, c, d):\n    if\
    \ a < b + c and b < c + d:\n        area = abs(a * b * c - (a + b + c + d) * a)\n\
    \    elif a < b + c and c < a + d:\n        area = abs(a * b * c - (a + b + c\
    \ + d) * a)\n    elif b < c + d and c < a + d:\n        area = abs(a * b * c -\
    \ (a + b + c + d) * a)\n    else:\n        area = -1\n    return area", "\"\"\"\
    \n    Given the lengths of the three sides of a triangle. Return the area of\n\
    \    the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n    Otherwise return -1\n    Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n    than the third side.\n    Example:\n\
    \    >>> triangle_area(3, 4, 5)\n    6.0\n    >>> triangle_area(1, 2, 10)\n  \
    \  -1\n    \"\"\"", "    return (abs(a*(-1) + b*(-1) + c*(-1) - a*(c - b) + b*(c\
    \ - a))/2 +\n            abs(a*(-1) + b*(-1) + c*(-1) - a*(c - b) - b*(c - a))/2)/2\n\
    end\n\"\"\"\n    Return the perimeter of a triangle rounded to 2 decimal points\
    \ if a \n    triangle is valid, otherwise return -1\n    Example:\n    >>> triangle_perimeter(1,\
    \ 2, 3)\n    6.0\n    >>> triangle_perimeter(3, 4, 5)\n    12.0\n    >>> triangle_perimeter(3,\
    \ 4, 4)\n    -1\n    \"\"\"", "</code>\n<|/ a |>\n<| c |>\nThank you! I used this\
    \ for my project and it's working perfectly! Thanks\n<|/ c |>\n<| c |>\nJust a\
    \ note: `triangle_area` is `\u221Aa^2 + b^2 + c^2`, which isn't rounded. `\u221A\
    a^2 + b^2 + c^2` is already rounded to an integer.\n<|/ c |>\n<| a |>\nOne simple\
    \ solution would be to just divide the three sides by the length of the longer\
    \ side, then round it and multiply by the length. This would give the area of\
    \ the triangle rounded to two decimal points:\n<code>\ndef triangle_area(a, b,\
    \ c):\n    long_side = max(a, b, c) # Get the longer side", "    if a==0 || b==0\
    \ || c==0 || (a+b+c) > 6 then \n        return -1\n    else return (0.5 * a *\
    \ b * c)/ 6.0 \nend\n</code>\nThe last thing we do is to define the function which\
    \ checks whether the three sides of a triangle form a valid triangle:\n<code>",
  "    if b >= c and b <= a \n        || a >= c and c <= a \n        || c >= b and\
    \ c <= a \n    then \n        return b * b * c / (a * a * c)\n    else \n    \
    \    return -1\n    end\n    \n</cell>\n<code language=julia-1.1>\na = 3\nb =\
    \ 4\nc = 5\ntriangle_area(a, b, c)\n</cell>\n<text>\nProblem 4\nWrite a function\
    \ that computes the area of any triangle with the specified sides. \n    You may\
    \ assume that the three sides of a triangle are given in that order and \n   \
    \ may appear any number of times in the input list. You may assume that the \n\
    \    valid triangle must have the formula $a*a + b*b > c*c$. \n    Finally, you\
    \ may assume that $0<a<b$ and $0<a<c$.\n    Example:\n    >>> triangle_area(3,4,5)\n\
    \    6.0\n    >>> triangle_area(4,5,6)\n    6.0\n    >>> triangle_area(3,7,5)\n\
    \    6.0\n    >>> triangle_area(3,3,7)\n    7.0\n    \"\"\"", "    if a+b > c\
    \ && c+a > b && b+c > a\n        then area := Float64((a + b + c) / 2)\n    else\n\
    \        area := -1\nend\n</cell>\n<text>\nTriangle Heights\nProblem 8\nWrite\
    \ a function that returns the height of the triangle formed by three given sides.\
    \ \n    You do not need to round the results to the nearest integer.\n    Example:\n\
    \    >>> triangle_height(3, 5, 2)\n    3.5\n    >>> triangle_height(4, 3, 1)\n\
    \    2.0\n    \"\"\"", "    if a + b > c\n        return triangle_area(c, a, b)\n\
    \    elif a + c > b\n        return triangle_area(a, b, c) \n    elif b + c >\
    \ a\n        return triangle_area(a, b, c)\n    else\n        return a*b*c / ((a+b+c)**3)\n\
    end", "if a + b > c && a + c > b && b + c > a \n    area_of_triangle = (a + b\
    \ + c)/2\nelse \n    area_of_triangle = -1\n</code>\n<|/ a |>\n<| a |>\nI did\
    \ it using recursion and no loops\n<code>", "    # write your solution here\n\
    \    if a + b > c and a + c > b and b + c > a\n    else return -1\nend\n</cell>\n\
    <code language=julia-1.0>\n# Run this cell to check your answer", "    if a +\
    \ b > c and a + c > b and b + c > a \n        area := a * b * c \n        precision\
    \ := 4\n        return (Round(area*10**precision)/10**precision)\n    else\n \
    \       area := -1\n        precision := 2\n        return (Round(area*10**precision)/10**precision)\n\
    \    end\n</code>\n<|/ a tags=julia |>\n<| c |>\nThis solution is better because\
    \ it will use less memory. Although, one could use an infinite series or an iterative\
    \ approach to calculate the area of a triangle too\n<|/ c |>\n<| a dscore=4 tags=julia\
    \ |>\nIn a very elegant way, you can do this:\n<code>\nusing Statistics", "  \
    \  if a>b and b>c and c>a then \n        return (b*c - a*b)/2.0\n    else\n  \
    \      return -1\n</code>\n<|/ a tags=numpy,python,function dscore=1 |>\n<| a\
    \ tags=numpy,python,function |>\nHere is a solution using NumPy (and Python):\n\
    <code>\nimport numpy as np", "    if a < b + c or b < a + c or c < a + b\n   \
    \     return -1\n    else\n        return (0.5 * a * b * c) / math.sqrt((a * b)\
    \ ^ 2)\n    end\nend\n</code>\n<|/ a dscore=2 |>\n<| c |>\n`function triangle_area(a::Int64,\
    \ b::Int64, c::Int64)::Float64 \n    if a < b + c or b < a + c or c < a + b\n\
    \        return -1\n    else\n        return (0.5 * a * b * c) / math.sqrt((a\
    \ * b) ^ 2)\n    end\nend`\n<|/ c |>\n<| a dscore=2 tags=julia,if-statement |>\n\
    You were on the right track. Try this:\n<code>", "    if (c<0) | (c>b) \n    \
    \    return -1 \n    else if (a<0) | (a>c) \n        return -1 \n    else if (b<0)\
    \ | (b>c) \n        return -1 \n    else if (b==0) \n        return 0 \n    else\n\
    \        (a*a+b*b+c*c-a*a-b*b-c*c)/2\n</code>\n<|/ a tags=julia,function,geometry\
    \ |>\n<| a tags=julia,function,geometry |>\nAs mentioned in other comments, there\
    \ are many ways to solve this problem, and since you asked for something simple,\
    \ here's one that doesn't require you to write separate functions to compute area:\n\
    <code>", "        if b+c<a or a+b<c\n            return -1\n        return 0.5\
    \ * (b*c) - (a*b) + a\n</code>\n<|/ a dscore=1 |>\n<| c |>\nI like your solution\
    \ but I am afraid it won't work when a triangle has negative sides or a vertex\
    \ is on the opposite side of the line formed by the other vertices. Try inputting\
    \ the following triangle: 1 0 2 0 3 0. -1 0 2 0 3 0. -1 0 2 0 3 0\n<|/ c |>\n\
    <| c |>\nThis solution is based on the fact that the angle between two vectors\
    \ is in the interval [0 2pi]. So in this case it can only work if you know that\
    \ the triangle is equilateral\n<|/ c |>\n<| c |>\nBut I used the triangle formula\
    \ which says the length of a triangle is greater than zero and greater than or\
    \ equal to 2a.\n<|/ c |>\n<| c |>\nOk, I was not aware of that definition, but\
    \ I do not think it applies. Let me think of a better definition...\n<|/ c |>\n\
    <| a tags=math,vector,geometry dscore=0 |>\nA simple solution using basic arithmetic\
    \ involving the determinant of the product of the angles of the three vectors:\n\
    <code>", "    if a >= b+c \n        then return 0.5*(b+c-a)\n    elseif b >= a+c\
    \ \n        then return 0.5*(a+c-b)\n    elseif c >= a+b \n        then return\
    \ 0.5*(a+b-c)\n    else\n        then return -1\n    end\nend\n</code>\n<|/ a\
    \ |>\n<| c |>\nYes, I thought of this, but I thought there might be a more \"\
    elegant\" way to do it.\n<|/ c |>\n<| c |>\nIf you wanted to be even more elegant,\
    \ you could use [Darcy numbers](https://en.wikipedia.org/wiki/Darcy_number), but\
    \ they are very complicated and require a large number of divisions.\n<|/ c |>\n\
    <| a tags=julia,geometry |>\nThis doesn't require any special conditional logic:\n\
    <code>", "    if a+b > c \n        c < a-b \n        else a+b > c\n          \
    \  \n    else c < a-b \n        \n    else c < a+b\n        \n    else a<b<c\n\
    \        \n    else a<b<c\n        \n    else a<b<c\n        \n    else a<b<c\n\
    \        \n    else a<b<c\n        \n    else a<b<c\n        \n    else a<b<c\n\
    \        \n    else a<b<c\n        \n    else a<b<c\n        \n    else a<b<c\n\
    \        \n    else a<b<c\n        \n    else a<b<c\n        \n    else a<b<c\n\
    \        \n    else a<b<c\n        \n    else a<b<c\n        \n    else a<b<c\n\
    \        \n    else a<b<c\n        \n    else a<b<c\n        \n    else a<b<c\n\
    \        \n    else a<b<c\n        \n    else a<b<c\n        \n    else a<b<c\n\
    \        \n    else a<b<c\n        \n    else a<b<c\n        \n    else a<b<c\n\
    \        \n    else a<b<c\n        \n    else a<b<c\n        \n    else a<b<c\n\
    \        \n    else a<b<c\n        \n    else a<b<c\n        \n    else a<b<c\n\
    \        \n    else a<b<c\n        \n    else a<b<c\n        \n    else a<b<c\n\
    \        \n    else a<b<c\n        \n    else a<b<c\n        \n    else a<b<c\n\
    \        \n    else a<b<c\n        \n    else a<b<c\n        \n    else a<b<c\n\
    \        \n    else a<b<c\n        \n    else a<b<c\n        \n    else a<b<c\n\
    \        \n    else a<b<c\n        \n    else a<b<c\n        \n    else a<b<c\n\
    \        \n    else a<b<c\n        \n    else a<", "    if a + b > c and a + c\
    \ > b and b + c > a\n        return (a + (b - c)) * (c - (a - b))\n    else \n\
    \        return -1\n</code>\n<|/ a |>\n<| a dscore=0 |>\nIn python, try this \n\
    <code>\ndef triangle_area(a, b, c):\n    return abs(a*b - b*c + c*(a+b))/2.0\n\
    </code>\n<|/ a tags=python |>\n<| a tags=python |>\n<code>\ndef triangle(a, b,\
    \ c):\n    return round((a+b+c)/2) if a*a + b*b + c*c < a*b*c else -1\n</code>\n\
    This works even when the sides are equal:\n<code>\n>>> triangle(3, 4, 5)\n6.0\n\
    >>> triangle(3, 4, 5)\n6.0\n>>> triangle(3, 4, 5)\n6.0\n>>> triangle(3, 4, 5)\n\
    6.0\n>>> triangle(3, 4, 5)\n6.0\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n\
    My solution is very similar to that of kamsky but uses integer division.\n<code>\n\
    def triangle_area(a, b, c):\n    return abs(a * b - b * c + c * (a + b)) / 2\n\
    </code>\nThe integer division ensures that the final result is always integer\
    \ and doesn't have to be rounded afterwards.\n<|/ a tags=python |>\n<| a dscore=0\
    \ |>\n<code>\ndef triangle_area(a,b,c):\n   return abs(a*b-c*b+b**2)/2", "   \
    \ if a <= 0 or b <= 0 or c <= 0 \n    then return -1\n    else if b <= c \n  \
    \  then return (triangle_area(a, b, c) * a) / b\n    else return (triangle_area(a,\
    \ b, c) * b) / c\nend\n</cell>\n<text>\nWrite a function that takes three points\
    \ as input, and return whether or not they form a right triangle. For example,\
    \ calling triangle_test(Point(0,0), Point(1,0), Point(1,1)) is true while calling\
    \ triangle_test(Point(0,0), Point(-1,0), Point(1,1)) is false.", "    \n    \"\
    \"\"\n    Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n    Otherwise return -1\n    Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n    than the third side.\n    Example:\n\
    \    >>> triangle_area(3, 4, 5)\n    6.0\n    >>> triangle_area(1, 2, 10)\n  \
    \  -1\n    \"\"\"\n    if a < b and a < c\n        area::Float64 = 0.5 * length(a\
    \ * b * c)\n        return round(area, 2)\n    elseif b < c and b < a\n      \
    \  area::Float64 = 0.5 * length(b * b * c)\n        return round(area, 2)\n  \
    \  elseif c < a and c < b\n        area::Float64 = 0.5 * length(c * c * c)\n \
    \       return round(area, 2)\n    else\n        area::Float64 = -1\n        return\
    \ -1\n</code>\nThe function call should look like triangle_area(1, 2, 10).\n<|/\
    \ a |>\n<| c |>\nThis answer doesn't actually attempt to answer the question.\
    \ It might be more appropriate as a comment to another answer.\n<|/ c |>\n<| c\
    \ |>\nThe OP has stated that the code is wrong and asks how to fix it. I pointed\
    \ out that he missed a number of things when he had started the function definition.\
    \ I believe it is better to give a quick explanation of what he has done wrong\
    \ instead of showing him the answer outright.\n<|/ c |>\n<| a |>\nFor those who\
    \ are still looking for an answer, here is the code with the fixed errors (including\
    \ correct indentation) that makes this work.\n<code>", "    if a+b > c || c+a\
    \ > b || b+c > a \n    then return -1\n    else \n        return (a+b+c)/2\nend\n\
    </cell>\n<text>\nProblem 8\nWrite a function that returns true if the number is\
    \ even; otherwise returns false. \nExamples:\n>>> is_even(3) \ntrue\n>>> is_even(17)\
    \ \nfalse\n>>> is_even(21) \nfalse\n>>> is_even(3.2) \nfalse\n>>> is_even(-2)\
    \ \nfalse\n>>> is_even('3') \nfalse\n>>> is_even([]) \nfalse\n>>> is_even(())\
    \ \nfalse\n>>> is_even({}) \nfalse\n>>> is_even(None) \nfalse\n>>> is_even(true)\
    \ \nfalse\n>>> is_even(false) \nfalse\n>>> is_even(0) \nfalse\n>>> is_even(0.5)\
    \ \nfalse\n>>> is_even(Int64[]) \nfalse\n>>> is_even(Int64) \nfalse\n>>> is_even(Float64[])\
    \ \nfalse\n>>> is_even(Float64) \nfalse\n</text>", "    if b + c > a && a + c\
    \ > b && a + b > c\n        area = 0.5 * ((a * a + b * b) * (c - a))\n    else\
    \ \n        area = -1\n    return area\n</code>\n<|/ a dscore=0 |>\n<| a |>\n\
    This is an implementation with your proposed requirements. I added a check that\
    \ the sum of three sides is greater than the third side.\n<code>", "    if a <\
    \ b+c && a < c+b && a < b+c\n        return (a+b+c)/2\n    else\n        return\
    \ -1\nend", "    if a+b > c and a+c > b and b+c > a then \n        area = (a +\
    \ b + c) / 2\n        area = sqrt(area / 2)\n        area = round(area, 2)\n \
    \       return area\n    else\n        return -1\n    end", "\"\"\"\n    Calculate\
    \ the area of a triangle given the lengths of the three sides \n    of a triangle.\
    \ Return the area of the triangle rounded to 2 decimal\n    points if the three\
    \ sides form a valid triangle. Otherwise return -1\n    Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    than the third side.\n\
    \    Example:\n    >>> triangle_area(3, 4, 5)\n    6.0\n    >>> triangle_area(1,\
    \ 2, 10)\n    -1\n    \"\"\"", "    if a+b > c && c+a > b && b+c > a \n      \
    \  then return (b*c-a*b)/(2*a) \n        else return -1\n</code>\n<|/ a tags=math,python-3.x,python,algorithm\
    \ |>\n<| c |>\nI don't think this answer is correct. The area is **not** equal\
    \ to the sum of three sides, because not all sides are positive.\n<|/ c |>\n<|\
    \ c |>\nThe area is always positive\n<|/ c |>\n<| c |>\nNo, it isn't, see my answer.\n\
    <|/ c |>\n<| a |>\nThis question is a little old, but I think it's still an interesting\
    \ one. The tricky part here is how to detect a triangle from 3 points and two\
    \ sides. I'm going to provide an answer based on the original answer by Stephan\
    \ Herrmann.\nIf we want to detect a triangle from 3 points, we can determine whether\
    \ that triangle is convex (i.e. all points are either horizontally or vertically\
    \ aligned with the line). If so, we can determine the area of the triangle by\
    \ considering each line segment and summing the areas of all three sides.\nIn\
    \ fact, we can determine the area of the triangle by considering each line segment\
    \ and summing the areas of all three sides multiplied by their respective lengths.\
    \ The area of the triangle is this value divided by two.\nThe triangle is convex\
    \ if and only if the three points are aligned with the line. For example, if the\
    \ three points are (0, 0), (4, 8) and (9, 12), then the triangle is convex because\
    \ the line segment (9, 12) is aligned with these 3 points.\nWe can determine the\
    \ areas of the three sides by finding the distance of each point from the line\
    \ segment and dividing the sum by two.\n<code>\ndef calculate_area(p0, p1, p2):\n\
    \    # Get the line segment of the triangle\n    slope = (p2.y - p1.y) / (p2.x\
    \ - p1.x)\n    line_x = p1.x + slope * p1.x\n    line_y = p1.y + slope * p1.y\n\
    \    line_length = math.sqrt(math.pow(line_x, 2) + math.pow(line_y, 2))", "  \
    \  if a+b>c then \n        return (a+b+c)/2\n    else \n        return -1", " \
    \   area_of_triangle = (b * c) - ((a * b) * c)\n    if area_of_triangle < 0 \n\
    \        return -1\n    else \n        return area_of_triangle/(a * a + b * b\
    \ + c * c)\nend\n</cell>\n<text>\nLet's test our function using the built-in test_triangle\
    \ function.", "    if a^2+b^2>c^2 \n    then \n    return sqrt(a^2+b^2-c^2) \n\
    \    else \n    return -1\n    end\n</code>\n<|/ a tags=julia dscore=0 |>\n<|\
    \ a tags=julia |>\nIn Julia 1.3, the solution is:\n<code>\nusing PyCall\nusing\
    \ PyCall", "    if a+b > c && c+a > b && b+c > a then \n    return (a * b) / 4\
    \ \n    else \n    return -1", "    if a * b >= c\n        return (a * b + c)\
    \ / 2\n    else\n        return -1\n    end\nend\n</cell>\n<text>\nSolution\n\
    You can solve this problem in just one line of Julia:", "    area_of_triangle\
    \ = sqrt(a*a + b*b + c*c)\n    if area_of_triangle > 0\n        area_of_triangle\
    \ = round(area_of_triangle, 2)\n    else area_of_triangle = -1 \n    return area_of_triangle\n\
    </code>\n<|/ a dscore=1 tags=math,julia |>\n<| a |>\nYou can use a recursive function.\n\
    <code>", "    area::Float64 = 0\n    if b > c && a > b && a+c >= b+c\n       \
    \ area = (b*b-c*c)/(a*c)\n    else if b > c && a > b && a+c > b+c\n        area\
    \ = -(a*c-b*b)/(a*c)\n    else \n        area = -1\n    return area\n\"\"\"\n\
    Given a number N. Return the Nth Fibonacci number - \n    the first two numbers\
    \ of the Fibonacci sequence are 1 and \n    1 and the second two numbers are the\
    \ sum of the two prior numbers. \n    Example: Given N = 3, return 3.\n    \n\
    \    \n\"\"\"", "    if a > b > c \n        then a + b + c\n        else -1\n\
    \    else -1\nend\n</code>\n<|/ a tags=julia dscore=0 |>\n<| a dscore=0 |>\nThe\
    \ answer is to use a function rather than a macro:\n<code>", "    if a < 0 ||\
    \ b < 0 || c < 0 \n        error(\"Arguments out of range\")\n    else if a +\
    \ b > c \n        error(\"Invalid triangle area\")\n    else if c <= a || b <=\
    \ a || c <= b \n        error(\"Invalid triangle area\")\n    else\n        area\
    \ := 0\n    end \n    return area\nend \n</code>\n<|/ a dscore=0 |>\n<| a tags=julia\
    \ |>\nYou can use Base.triangle_area function to check whether triangle is valid\
    \ or not. \n<code>", "    #Triangle area is given by (Side1 + Side2 + Side3) div\
    \ 2\n    area1 = (a + b + c) / 2\n    area2 = (a + c + b) / 2\n    area3 = (a\
    \ + b + c) / 2", "    \"\"\"Compute the area of a triangle given (a,b,c).\"\"\"\
    \n    if a==b or a==c or b==c:\n        return 0\n    if a>b and a>c:\n      \
    \  return (b+c)*(a-2*(b+c))\n    elif b>a and b>c:\n        return (a+c)*(b-2*(a+c))\n\
    \    elif c>a and c>b:\n        return (a+b)*(c-2*(a+b))\n    elif a>b and b>c:\n\
    \        return (b+c)*(a-2*(b+c))\n    elif b>a and b>c:\n        return (a+c)*(b-2*(a+c))\n\
    \    elif c>a and c>b:\n        return (a+b)*(c-2*(a+b))\n    else:\n        print(\"\
    Triangle area invalid for sides: %i and %i or %i %i\".format(a,b,c))\n       \
    \ return -1", "     \n    \n    if a>b+c || b>a+c || c>b+a\n        return -1\n\
    \    else if a==b==c\n        return 1.0\n    else if a==b\n        return 0.5*(c-a)\n\
    \    else if b==c\n        return 0.5*(a-b)\n    else\n        return 0.5*(a+b+c)\n\
    \    end\n    \nend\n</cell>\n<code language=julia-1.0>\n@assert triangle_area(3,4,5)\
    \ == 6.0 \n@assert triangle_area(1,2,3,10) == -1 \n@assert triangle_area(1,2,4,10)\
    \ == -1.0 \n@assert triangle_area(3,3,4) == 0.0 \n@assert triangle_area(1,2,3)\
    \ == 1.0 \n@assert triangle_area(3,4,1) == 0.0 \n@assert triangle_area(1,1,1)\
    \ == 1.0 \n@assert triangle_area(3,3,3) == 0.0 \n@assert triangle_area(0,1,1)\
    \ == 1.0 \n@assert triangle_area(1,1,3) == 0.0 \n@assert triangle_area(3,1,1)\
    \ == 1.0 \n@assert triangle_area(3,0,0) == 1.0 \n@assert triangle_area(1,1,0)\
    \ == 0.0 \n@assert triangle_area(0,0,0) == 0.0 \n@assert triangle_area(0,0,1)\
    \ == 0.0 \n@assert triangle_area(0,1,0) == 0.0 \n@assert triangle_area(1,1,0)\
    \ == 0.0 \n@assert triangle_area(1,1,2) == 0.0 \n@assert triangle_area(2,3,1)\
    \ == 1.0 \n@assert triangle_area(2,3,2) == 1.0 \n@assert triangle_area(1,2,3)\
    \ == 1.0 \n@assert triangle_area(1,3,3) == 1.0 \n@assert triangle_area(2,1,2)\
    \ == 1.0 \n@assert triangle_area(2,1,3) == 1.0 \n@assert triangle_area(3,2,1)\
    \ == 1.0 \n@assert triangle_area(3,1,3) == 1.0 \n@assert triangle_area(3,3,2)\
    \ == 1.0 \n@assert triangle_area(3,0,1) == 1.0 \n@assert triangle_area(2,0,1)\
    \ == 1.0 \n@assert triangle_area(1,1,3) == 1.0 \n@assert triangle_area(0,1,3)\
    \ == 1.0 \n@assert triangle_area(1,1,2) == 1.0 \n@assert triangle_area(0,2,3)\
    \ == 1.0 \n@assert triangle_area(2,0,3) == 1.0 \n@assert triangle_area(2,1,1)\
    \ == 1.0 \n@assert triangle_area(2,1,2) == 1.0 \n@assert triangle_area(1,2,2)\
    \ == 1.0 \n@assert triangle_area(1,3,2) == 1.0 \n@assert triangle_area(2,1,3)\
    \ == 1.0 \n", "    if a + b > c || b + c > a || c + a > b || b + c > a || c +\
    \ a > b || a + b > c \n        then \n            return -1\n        else \n \
    \           return (abs(a - b) * abs(b - c) * abs(c - a))\n        end\n</code>\n\
    <|/ a dscore=1 |>\n<| a dscore=1 tags=math,python,pycharm,ruby |>\n<code>\ndef\
    \ triangle(sides):\n    sum = 0\n    for i in sides:\n        sum += i\n     \
    \   if sum > sides[-1]:\n            return -1\n    return sum", "\"\"\"Return\
    \ the area of a triangle rounded to 2 decimal points if it makes a valid triangle\
    \ or -1 if it does not.\nThree sides make a valid triangle when the sum of any\
    \ two sides is greater than the third side.\nExample: \n>>> triangle_area(3, 4,\
    \ 5)\n6.0\n>>> triangle_area(1, 2, 10)\n-1\n\"\"\"", "    if a > c && a>b then\
    \ return (a+b+c)/2\n    if b>c && b>a then return (b+c+a)/2\n    if c>a && c>b\
    \ then return (c+a+b)/2\n    if a==b==c then return 0\n    if a==b then return\
    \ 1\n    if a==c then return -1\n    return -1\nend\n</code>\n<|/ a dscore=3 |>\n\
    <| a tags=function,julia,if-statement,conditional |>\nHow about this?\n<code>",
  "    if a + b > c && a + c > b && b + c > a then \n        area := (b * b) - (4\
    \ * a * c)\n        return area / 2 \n    else return -1\n\"\"\"\n    Given the\
    \ lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3,\
    \ 4, 5)\n    6.0\n    >>> triangle_area(1, 2, 10)\n    -1\n    \"\"\"", "\"\"\"\
    \n    Find the area of the triangle passed in\n    \n    Arguments:\n        a\
    \ (Int64): the length of the first side of the triangle\n        b (Int64): the\
    \ length of the second side of the triangle\n        c (Int64): the length of\
    \ the third side of the triangle\n        \n    Returns:\n        Float64: the\
    \ area of the triangle or -1 if the triangle does not form a triangle\n    \"\"\
    \"", "    if c <= 0 or b <= 0 or a <= 0 then return -1\n    else return (abs (a)\
    \ + abs (b) + abs (c)) ** (1/2)\n</code>\n<|/ a dscore=4 |>\n<| c |>\nThis is\
    \ amazing, I did not know you could do that! thank you so much!\n<|/ c |>\n<|\
    \ a tags=julia |>\nA solution without any package but using math, assuming you\
    \ have your three sides stored in some vectors a, b, c.\n<code>", "    if a+b>c\
    \ || b+c>a || c+a>b \n        return -1.0\n    else \n        return (a+b+c)/2.0\n\
    \    end\n</code>\n<|/ a dscore=2 |>\n<| a |>\nThe problem is that the function\
    \ triangle_area takes in 3 arguments, but you gave it only one. Fix it like this:\n\
    <code>", "    if a == b and b == c \n        then return 0 \n    else \n     \
    \   (a+b+c)/2.0\n    end\nend\n\"\"\"\n    Write a function that returns the area\
    \ of a triangle rounded to 2 decimal \n    points if the three sides form a valid\
    \ triangle. Otherwise return -1.\n    The function should have one positional\
    \ argument (a triangle side) and \n    should return a number.\n    Write your\
    \ function so that it only takes positive integer values (less than \n    or equal\
    \ to 100) as arguments.\n    Example:\n    >>> triangle_area_rounded(3.5, 4.5,\
    \ 5.5)\n    7.875\n    >>> triangle_area_rounded(-1, -2, -3)\n    -1\n\"\"\"",
  "    # Write your function here\n    return sqrt(a^2 + b^2 + c^2)\nend\n</code>\n\
    <|/ a tags=julia dscore=1 |>\n<| c |>\nHi thanks for answer. Is it possible to\
    \ make a custom function for triangle area that return different result if 3 sides\
    \ are not equal?\n<|/ c |>\n<| c |>\nThe `<` operator compares two arguments for\
    \ being less than or equal to each other. If one argument is `NaN`, it will return\
    \ `NaN` - so you could write `x < y < z`  to compare all three of them\n<|/ c\
    \ |>\n<| c |>\nI think you misunderstood my question. I want a custom function\
    \ that calculate area of triangle if 3 sides are not equal. But I want this function\
    \ to return different result if 3 sides are not equal.\n<|/ c |>\n<| a dscore=0\
    \ |>\nThe triangle area is defined as \u03C0*sin (a+b)", "    if a+b>c && a+c>b\
    \ && a+c+b>a\n    else \n    return a * b * c /((a+b+c) * (a+b+c+a))\nend\n</code>\n\
    <|/ a tags=julia,algorithm |>\n<| a |>\nThe previous answers have shown how to\
    \ calculate the area. However, they assume that you're calculating the area of\
    \ rectangles. \nIn case you want to calculate the area of a triangle, use the\
    \ below code:\n<code>", "    if a > b and a > c then\n        area_of_triangle\
    \ = if b < c then\n                            (b+c-a)/2\n                   \
    \     else \n                            (c-b-a)/2\n                        end\n\
    \    else\n        area_of_triangle = if c < b then\n                        \
    \    (c+b - a)/2\n                        else \n                            (b-c-a)/2\n\
    \                        end\n    end\n    return area_of_triangle\nend\n</code>\n\
    <|/ a |>\n<| a dscore=1 |>\nIf your interested in using the \"mathematical\" package\
    \ Julia, then this answer is incorrect, as it is based on a triangle definition.\
    \ \nThe formula for a triangle is: (a + b + c) / 2. That is, there are 3 sides,\
    \ one at the top, two at the bottom, and one at the side. \nIf you define your\
    \ triangle as one side at the top and 2 at the side and one at the bottom, that\
    \ leaves you with the formula for one side:\n<code>", "    if a >= b and a >=\
    \ c then a + b + c else -1\n    else if b >= a and b >= c then a + b + c else\
    \ -1\n    else if c >= a and c >= b then a + b + c else -1\n    else -1\nend",
  "    \"\"\"\n    Given the lengths of the three sides of a triangle. Return the\
    \ area of\n    the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    Otherwise return -1\n    Three sides make a valid triangle\
    \ when the sum of any two sides is greater \n    than the third side.\n    Example:\n\
    \    >>> triangle_area(3, 4, 5)\n    6.0\n    >>> triangle_area(1, 2, 10)\n  \
    \  -1\n    \"\"\"\n    if b < 0 or c < 0:\n        raise ValueError(\"The sum\
    \ of the three sides must be positive.\")\n    if a + b > c:\n        raise ValueError(\"\
    The sum of the two sides must be greater than the third side.\")\n    if b ==\
    \ c:\n        return 0.0\n    return 0.5 * b * c\n    \"\"\"\n    Given the lengths\
    \ of the three sides of a triangle. Return the area of\n    the triangle rounded\
    \ to 2 decimal points if the three sides form a valid triangle. \n    Otherwise\
    \ return -1\n    Three sides make a valid triangle when the sum of any two sides\
    \ is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3,\
    \ 4, 5)\n    6.0\n    >>> triangle_area(1, 2, 10)\n    -1\n    \"\"\"\n    return\
    \ triangle_area(a, b, c) ", "    area_of_triangle = math.sqrt((b*b) - (a*a))\n\
    \    area_of_triangle\nend\n</code>\n<|/ a |>\n<| a tags=julia,python |>\nHere's\
    \ a Julia implementation using vectorization:\n<code>", "    if a + b > c and\
    \ c + b > a\n        return (a * b + b * c) / 2\n    else\n        return -1\n\
    end\n</cell>\n<cell>\n# Test your solution by calling triangle_area(3,4,5) several\
    \ times to compute the\n# answer. ", "    if (a>b) & (a>c) then return (0.5*(a+b+c))\n\
    \    if (b>a) & (b>c) then return (0.5*(b+a+c))\n    if (c>a) & (c>b) then return\
    \ (0.5*(c+a+b))\n    else return -1\nend\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0\
    \ tags=julia |>\nYou can do as follows,\n<code>", "    if a > b and a > c and\
    \ b > c:\n        # triangle\n        s = (a + b + c)/2\n        return math.sqrt(s*(s-a)*(s-b)*(s-c))\n\
    \    else:\n        # not a triangle\n        return -1\nend\n</cell>\n<text>\n\
    Task 3", "  if(a < b and a < c) \n    area := a + b + c\n  else\n  if(a > b and\
    \ a > c)\n    area := a - b - c\n  else\n    area := b - c\n  return Float64(area)\n\
    end\n</code>\n<|/ a tags=julia,python,c |>\n<| a tags=julia,python,c |>\nFor completeness,\
    \ here's a Julia function with the exact same algorithm:\n<code>", "    \n   \
    \ \n    \n    \"\"\"\n    Define the area of the triangle using the formula above\n\
    \    Make sure you use a valid formula\n    \"\"\"\n    \n    \n    \n    \"\"\
    \"\n    Define the area of the triangle using the formula above\n    Make sure\
    \ you use a valid formula\n    \"\"\"\n    \n    \n    \n    \"\"\"\n    Define\
    \ the area of the triangle using the formula above\n    Make sure you use a valid\
    \ formula\n    \"\"\"\n    \n    \n    \n    \"\"\"\n    Define the area of the\
    \ triangle using the formula above\n    Make sure you use a valid formula\n  \
    \  \"\"\"\n    \n    \n    \n    \"\"\"\n    Define the area of the triangle using\
    \ the formula above\n    Make sure you use a valid formula\n    \"\"\"\n    \n\
    \    \n    \n    \"\"\"\n    Define the area of the triangle using the formula\
    \ above\n    Make sure you use a valid formula\n    \"\"\"\n    \n    \n    \n\
    \    \"\"\"\n    Define the area of the triangle using the formula above\n   \
    \ Make sure you use a valid formula\n    \"\"\"\n    \n    \n    \n    \"\"\"\n\
    \    Define the area of the triangle using the formula above\n    Make sure you\
    \ use a valid formula\n    \"\"\"\n    \n    \n    \n    \"\"\"\n    Define the\
    \ area of the triangle using the formula above\n    Make sure you use a valid\
    \ formula\n    \"\"\"\n    \n    \n    \n    \"\"\"\n    Define the area of the\
    \ triangle using the formula above\n    Make sure you use a valid formula\n  \
    \  \"\"\"\n    \n    \n    \n    \"\"\"\n    Define the area of the triangle using\
    \ the formula above\n    Make sure you use a valid formula\n    \"\"\"\n    \n\
    \    \n    \n    \"\"\"\n    Define the area of the triangle using the formula\
    \ above\n    Make sure you use a valid formula\n    \"\"\"\n    \n    \n    \n\
    \    \"\"\"\n    Define the area of the triangle using the formula above\n   \
    \ Make sure you use a valid formula\n    \"\"\"\n    \n    \n    \n    \"\"\"\n\
    \    Define the area of the triangle using the formula above\n    Make sure you\
    \ use a valid formula\n    \"\"\"\n    \n    \n    \n    \"\"\"\n    Define the\
    \ area of the triangle using the formula above\n    Make sure you use a valid\
    \ formula\n    \"\"\"\n    \n    \n    \n    \"\"\"\n    Define the area of the\
    \ triangle using the formula above\n    Make sure you use a valid formula\n  \
    \  \"\"\"\n    \n    \n    \n    \"\"\"\n    Define the area of the triangle using\
    \ the formula above\n    Make sure you use a valid formula\n    \"\"\"\n    \n\
    \    \n    \n    \"\"\"\n    Define the area of the triangle using the formula\
    \ above\n    Make sure you use a valid formula\n    \"\"\"\n    \n    \n    \n\
    \    \"\"\"\n", "    if a + b > c \n        a + b - c \n    elseif a + c > b \n\
    \        a + c - b \n    elseif b + c > a \n        b + c - a \n    else \n  \
    \      a + b + c\n    end\nend", "\"\"\"\n    Given three sides of a triangle,\
    \ return the area of the triangle rounded\n    down to 2 decimal points if it\
    \ forms a valid triangle otherwise return -1\n    Three sides make a valid triangle\
    \ when the sum of any two sides is greater \n    than the third side.\n    Example:\n\
    \    >>> triangle_area(3, 4, 5)\n    6.0\n    >>> triangle_area(1, 2, 10)\n  \
    \  -1\n    \"\"\"", "    if a<b and a<c then\n    \n        if b<c then\n    \
    \    area = b * b - 4 * a * c\n        return area / (2 * a)\n    else\n     \
    \   if b<c then\n        area = c * c - 4 * a * b\n        return area / (2 *\
    \ a)\n    else\n        if c<a then\n        area = a * a - 4 * a * b\n      \
    \  return area / (2 * a)\n    \nend\n</cell>\n<text>\nExercise 4.26: Write a function\
    \ that prints the length of a triangle using its sides lengths. Given a triangle,\
    \ print its perimeter and print its area.", "    if a + b > c and a + c > b and\
    \ b + c > a\n        area = (a * b) + (c * b)\n    elseif a + b > c\n        area\
    \ = (a * b) + (c * c)\n    elseif b + c > a\n        area = (b * c) + (a * a)\n\
    \    else\n        area = -1\n    return round(area, 2)\nend\n</cell>\n<code language=julia-0.4>\n\
    # test function\ntriangle_area(3, 4, 5)\n</cell>\n<text>\nThe formula for area\
    \ of a triangle is given below:", "    if a > b and a > c \n    then return (b\
    \ + c)/2\n    else if b > c and b > a\n    then return (a + c)/2\n    else if\
    \ c > a and c > b\n    then return (a + b)/2\n    else return -1\nend", "    if\
    \ a < 0 || b < 0 || c < 0 \n        error \"a, b, c must be non-negative\" \n\
    \    return ((a * b) + c) ^ 2 / b\n</code>\n<|/ a dscore=2 |>\n<| c |>\nWhile\
    \ this code may answer the question, providing additional context regarding how\
    \ and/or why it solves the problem would improve the answer's long-term value.\n\
    <|/ c |>\n<| c |>\nGood point; I added some explanation to the code to indicate\
    \ that it would be a good thing to do with my understanding of this problem. \
    \ And I also provided some code illustrating how to use this code, in case the\
    \ OP might have missed the explanation that way.\n<|/ c |>\n<| c |>\nYou seem\
    \ to be confused about what this means: \u201CReturn the area of the triangle\
    \ rounded to 2 decimal points\u201D. The code does this by rounding towards zero,\
    \ and you do not do that. You do it by rounding to a certain number of significant\
    \ digits, which is irrelevant in this case.\n<|/ c |>\n<| c |>\nThat is indeed\
    \ a confusing way of saying it.  I will correct it to be more accurate.\n<|/ c\
    \ |>\n<| a tags=math,python |>\nThis code calculates the area of a triangle with\
    \ any number of sides. It also handles negative sides by adding or subtracting\
    \ 2*pi until it becomes positive. \n<code>\nfrom math import pi", "    if a >\
    \ c \n        > b \n        return abs((a-b)/2) \n    elif b > c \n        > a\
    \ \n        return abs((b-(a-c))/2)\n    else\n        return abs((a+b - c)/2)\
    \ \n    end\nend\n</cell>\n<code language=julia-0.6>\ntriangle_area(3, 4, 5)\n\
    </cell>\n<text>\nExercise 2\nWrite a Julia function that takes in a list of integers\
    \ and returns the maximum number in the list.\nIf the list is empty or has no\
    \ elements, return -1.", "    if a+b > c and a+c > b+c && b+c > a+c \n    then\
    \ \n        triangle_area(a, b, c)\n    else\n        return -1\n    end \nend ",
  "    \n    area_tri = abs(a * b) + abs(b * c)\n    area_tri = area_tri + abs(a *\
    \ c)\n    area_tri = area_tri + abs(b * c)\n    area_tri = area_tri / 2\n    return\
    \ round(area_tri, 2)\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\ndef\
    \ triangle_area(triangle):\n    area = 0.0\n    for side in triangle:\n      \
    \  if side != 0:\n            area += side/2.0\n        else:\n            return\
    \ 0\n    return round(area, 2)\n</code>\n<|/ a tags=julia |>\n<| c |>\nThe area\
    \ is always going to be 0, so no need to return 0 at the end\n<|/ c |>\n<| a tags=julia\
    \ |>\n<code>", "    if (a < 0 and b > 0 and c > 0) or (a > 0 and b > 0 and c <\
    \ 0) or (a < 0 and b < 0 and c < 0):\n        return -1\n    else:\n        return\
    \ 0.5*((a*b + b*c + c*a) - (a*c + b*a + c*b))/3.0\n\"\"\"\nGiven the lengths of\
    \ the sides of a triangle return 1 if the sum of the two sides is greater\nthan\
    \ the third side. Otherwise return -1\nExample: \n    >>> triangle_angle(3, 4,\
    \ 5)\n    1\n    >>> triangle_angle(1, 2, 10)\n    -1\n\"\"\"", "\"\"\"\n    Compute\
    \ the area of a triangle rounded to 2 decimal points if a triangle is a valid\
    \ triangle \n    and -1 if any of its sides is not a valid triangle. \n    \n\
    \    Arguments: \n    a, b: lengths of the three sides of a triangle \n    c:\
    \ length of the third side of the triangle\n    Example:\n    >>> triangle_area(3,\
    \ 4, 5)\n    6.0\n    >>> triangle_area(1, 2, 10)\n    -1\n\"\"\"", "    if a\
    \ + b > c or b > c or c > a \n        \n        return -1\n    else\n        return\
    \ (b - a)*(c - a)\nend\n</cell>\n<text>\nProblem 3\nWrite a function which takes\
    \ in a string and returns the number of words in the string.\nWrite a function\
    \ which takes in an array of strings and returns an array of the length of each\
    \ string in the array.\nWrite a function which takes in an array of strings and\
    \ returns an array of the number of words in each string in the array.", "   \
    \ # your code here\n    if a>=b and a>=c and b>=c:\n        return (a + b + c)\
    \ / 2\n    elif a>=b and b>=c:\n        return (b + c) / 2\n    elif a>=c and\
    \ b>=c:\n        return (a * b) / 2\n    else:\n        return -1\n</code>\n<|/\
    \ a tags=math,python,geometry,algorithm |>\n<| c |>\nFor some reason, this is\
    \ giving me incorrect answers. Could you please check it once?\n<|/ c |>\n<| c\
    \ |>\nHow can you be sure that you are getting the correct answer?\n<|/ c |>\n\
    <| c |>\nI guess I was wrong, please check my answer below. Thanks for your help\n\
    <|/ c |>\n<| a dscore=1 tags=math,python,geometry,algorithm |>\n<code>\nimport\
    \ math", "    \"\"\"\n    Given the lengths of the three sides of a triangle.\
    \ Return the area of\n    the triangle rounded to 2 decimal points if the three\
    \ sides form a valid triangle. \n    Otherwise return -1\n    Three sides make\
    \ a valid triangle when the sum of any two sides is greater \n    than the third\
    \ side.\n    Example:\n    >>> triangle_area(3, 4, 5)\n    6.0\n    >>> triangle_area(1,\
    \ 2, 10)\n    -1\n    \"\"\"", "\"\"\"\n    Calculate the area of a triangle given\
    \ the lengths of the sides \n    of a triangle. Triangles are valid if all three\
    \ sides are greater than\n    the third side. Return zero if all sides are equal\n\
    \    \n    Example usage:\n    >>> triangle_area(1, 2, 10)\n    10.0\n    >>>\
    \ triangle_area(3, 4, 5)\n    6.0\n    \"\"\"", "    if a+b+c <= 0 then -1\n \
    \   else (a * b) /3\n</code>\n<|/ a tags=math,algorithm,area,python |>\n<| a dscore=0\
    \ |>\n<code>\ndef triangleArea(base, height):\n    if (base ** 2 + height ** 2)\
    \ <= 1:\n        return 0\n    else:\n        return base * height / 2\n</code>\n\
    <|/ a tags=math,algorithm,area,python |>\n<| c |>\nIt would be helpful if you\
    \ could also explain what this code does and how it does it.\n<|/ c |>\n<| c |>\n\
    The algorithm here is a bit flawed as it returns the wrong area of triangle when\
    \ the base or height is 0. It's not a correct area calculation at all.\n<|/ c\
    \ |>\n<| a dscore=0 |>\n<code>\ndef triangle_area(base, height):\n    \n    if\
    \ base==0 or height==0: return 0", "    area = if a + b > c then a + b - c else\
    \ -1\n    \n    return area\n</code>\n<code>\n \n</code>\n<|/ a dscore=0 |>\n\
    <| a dscore=0 tags=julia |>\nJust for reference, here's an approach that doesn't\
    \ use macros:\n<code>", "    if a*b > c*c \n        return 1.0\n    else\n   \
    \     return (a*b*c)/((c*c - a*a) * (b*b - a*a))\n    \"\"\"\n    \n    # Your\
    \ solution here\n    \n    # Solution 2\n    \n    a, b, c = a, b - a, c - b\n\
    \    if a*a + b*b > c*c\n        return (c + b * b - a * b * b)/(2 * a * b)\n\
    \    else\n        return (c + b * b - a * b * b)/(2 * a * b)\n    \n    \"\"\"\
    \n    \n    # Solution 3\n    \n    a, b, c = a, b - a, c - b\n    if a*a + b*b\
    \ > c*c\n        return (a + b * b - a * b * b)/(2 * a * b)\n    else\n      \
    \  return (a + b * b - a * b * b)/(2 * a * b)\n    \"\"\"\n    \n    # Solution\
    \ 4\n    \n    a, b, c = a, b - a, c - b\n    return (a*b*c)/((c*c - a*a) * (b*b\
    \ - a*a))\n    \n    \n    \"\"\"\n    # Solution 5\n    \n    a, b, c = a, b\
    \ - a, c - b\n    if a*a + b*b > c*c\n        return (a + b * b - a * b * b)/(2\
    \ * a * b)\n    else\n        return (a + b * b - a * b * b)/(2 * a * b)\n   \
    \ \n    \"\"\"\n    \n    # Solution 6\n    \n    a, b, c = a, b - a, c - b\n\
    \    return (a*b*c)/((c*c - a*a) * (b*b - a*a))\n    \n    \n    \"\"\"\n    #\
    \ Solution 7\n    \n    a, b, c = a, b - a, c - b\n    return (a*b*c)/((c*c -\
    \ a*a) * (b*b - a*a))\n    \n    \"\"\"\n    \n    # Solution 8\n    \n    a,\
    \ b, c = a, b - a, c - b\n    return (a*b*c)/((c*c - a*a) * (b*b - a*a))\n   \
    \ \n    \"\"\"\n    \n    # Solution 9\n    \n    a, b, c = a, b - a, c - b\n\
    \    return (a*b*c)/((c*c - a*a) * (b*b - a*a))\n    \n    \"\"\"\n    \n    #\
    \ Solution 10\n    \n    a, b, c = a, b - a, c - b\n    return (a*b*c)/((c*c -\
    \ a*a) * (b*b - a*a))\n    \n    \"\"\"\n    \n    # Solution 11\n    \n    a,\
    \ b, c = a, b - a, c - b\n    return (a*b*c)/((c*c - a*a) * (b*b - a*a))\n   \
    \ \n    \"\"\"\n    \n    # Solution 12\n    ", "    if a + b > c \n        return\
    \ (a + b - c)\n    elseif a + c > b \n        return (a + c - b) \n    else\n\
    \        return (a + c - b) \n    end\nend\n</cell>\n<text>\nCongratulations,\
    \ your triangle area function works! Let's use it!", "    \"\"\"\n    Given the\
    \ lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3,\
    \ 4, 5)\n    6.0\n    >>> triangle_area(1, 2, 10)\n    -1\n    \"\"\"\n    if\
    \ (a + b < c) or (b + c < a) or (c + a < b) \n        then return -1\n    elif\
    \ (a * b + c * d >= 0) \n        then return (0.5 * b * c) - (0.5 * d * a)\n \
    \       else return -1\n    else\n        then return (0.5 * (b * b) - (a * d))\
    \ / (2.0 * a)\n</code>\n<|/ a dscore=0 |>\n<| c |>\nWhile this code may answer\
    \ the question, providing additional context regarding why and/or how this code\
    \ answers the question improves its long-term value.\n<|/ c |>\n<| c |>\nThis\
    \ code is just an illustration on how to calculate the area of a triangle in R.\
    \ Its explanation is self explanatory.\n<|/ c |>\n<| c |>\nThis code contains\
    \ lots of comments and comments are just to guide you through the process you\
    \ will be doing to find the area.\n<|/ c |>\n<| c |>\nI see. Welcome to SO!\n\
    <|/ c |>\n<| c |>\nYou will notice that comments and explanations are often ignored\
    \ by other users. In fact, I often react to people trying to help by comments\
    \ or answering questions. However, I feel that this answer would be improved by\
    \ being more concise and detailed.\n<|/ c |>\n<| a dscore=0 |>\n<code>", "   \
    \ if (a + b > c) then (b + c) > a else (b + c) > a \n    else (a * b) > c \n</code>\n\
    <|/ a dscore=2 |>\n<| c |>\nThis doesn't answer the question.\n<|/ c |>\n<| c\
    \ |>\nThe OP said \"I don't want to use math library functions\". The `sqrt` function\
    \ can easily be replaced by calculating the `a^2 + b^2 + c^2` formula to determine\
    \ `c` with 2 `if` statements.\n<|/ c |>\n<| c |>\nThis is probably the cleanest\
    \ solution, but it doesn't work when the triangles are rotated about the same\
    \ axis. See [my answer](http://stackoverflow.com/a/34559400/526489) for more info.\n\
    <|/ c |>\n<| c |>\n- I guess I missed the point of the question. I'll add a note\
    \ to the answer that explains why this doesn't work.\n<|/ c |>\n<| a |>\nYou can\
    \ find the area of a triangle in three simple steps:", "    area ::Float64 = 0.0\n\
    \    if a > b and a > c and a > b \n        area = area + ((b - a) * (b - c))\n\
    \    elif b > c and b > a \n        area = area + ((b - c) * (a - b))\n    elif\
    \ c > a and c > b \n        area = area + ((a - b) * (c - a))\n    else\n    \
    \    area = -1\n    return area", "    if a + b <= c:\n        if a + c <= b:\n\
    \            if b + c <= a:\n                return (a * b * c) / (a + b + c)\n\
    \            else\n                return -1\n        else \n            return\
    \ -1\n    else\n        return -1\nend\n</code>\n<|/ a dscore=0 |>\n<| c |>\n\
    It may be better to return the area as Float64 - it might save you some casting\
    \ problems.\n<|/ c |>\n<| c |>\n- thanks for the tip!  I'll edit the answer.\n\
    <|/ c |>\n<| a dscore=0 |>\nIf you really want to learn Julia, here's an implementation\
    \ of the algorithm you've been given:\n<code>", "    if b >= a && b <= c && c\
    \ >= a \n    then ((b - a) * (c - a)) / (b - c)\n    else -1.0", "    if a > 0\
    \ && b > 0 && c > 0 && a + b > c && a + c > b\n        then area::Float64 = sqrt(a^2\
    \ + b^2 - c^2)\n        else area::Float64 = -1\n    else area::Float64 = -1\n\
    end\n\"\"\"\nGiven a tuple of integers representing a point expressed as a sequence\
    \ of \nintegers representing the x position and the y position. Return the angle\
    \ \nof rotation represented by the point. \nExample:\n    >>> point_to_angle_and_distance(Point2D(0,0),\
    \ Point2D(1,1))\n    AngleAndDistance(0.0, 1.0)\n    >>> point_to_angle_and_distance(Point2D(0,0),\
    \ Point2D(-1,-1))\n    AngleAndDistance(-1.0, 1.0)\n    >>> point_to_angle_and_distance(Point2D(0,0),\
    \ Point2D(5,5))\n    AngleAndDistance(135.0, 0.0)\n\"\"\"", "    \n    if a==0\
    \ or b==0 or c==0\n        return -1\n    elseif a>=b+c\n        return 0.5*(a+b+c)\n\
    \    elseif a<=b-c\n        return 0.5*(a+b+c)\n    else\n        return 0.5*(a+b+c)\n\
    \    end\nend\n</code>\n<|/ a tags=julia,python-3.x |>\n<| a dscore=2 |>\n<code>",
  "    if (c<b) or (c<a) or (b<a):\n        return -1\n    else:\n        return (a+b+c)/2.0\n\
    </cell>\n<text>\n4.4 Exercises\nWrite a function that checks whether a number\
    \ is prime or composite. \nThe function should return a Bool.", "    if a > b\
    \ + c \n        then \n            return -1\n    else if b > c + a\n        then\
    \ \n            return -1\n    else if c > a + b\n        then \n            return\
    \ -1\n    else\n        return (a * b * c) / ((a+b)*(a + c) * (b+c))\n\"\"\"\n\
    \    Given two points, calculate the area of a triangle using Heron's formula\n\
    \    \"\"\"", "    \n    \"\"\"\n    Given the lengths of the three sides of a\
    \ triangle. Return the area of\n    the triangle rounded to 2 decimal points if\
    \ the three sides form a valid triangle. \n    Otherwise return -1\n    Three\
    \ sides make a valid triangle when the sum of any two sides is greater \n    than\
    \ the third side.\n    Example:\n    >>> triangle_area(3, 4, 5)\n    6.0\n   \
    \ >>> triangle_area(1, 2, 10)\n    -1\n    \"\"\"\n    if a<=b and b<=c and a>=c\n\
    \    return a * b / (a * a + b * b) + c\n    end", "    area = (a+b+c)/2.0\n \
    \   if area > 0 && a * a + b * b > c * c \n        then area\n    else\n     \
    \   -1\n    end\nend\n</code>\n<|/ a tags=julia,math |>\n<| c |>\nI recommend\
    \ you add some explanation to your answer.\n<|/ c |>\n<| c |>\nA more elegant\
    \ solution would be to calculate the area of a triangle using its sides as input,\
    \ and then return that result as output if the input is valid, and -1 if it is\
    \ invalid.\n<|/ c |>\n<| a tags=julia,math |>\nAs an alternative to using an explicit\
    \ recursion, here is one that uses basic algebra and trigonometry:\n<code>", " \
    \   area = 0.5 * a * b * c\n    if a == 0 and b == 0 and c == 0:\n        return\
    \ 0.0\n    else if a == 0 and b == 0 or c == 0:\n        return -1\n    else if\
    \ a == 0 or b == 0 or c == 0:\n        return -1\n    else if c >= a and c >=\
    \ b and c >= a + b:\n        return area\n    else if c >= a + b and c >= b and\
    \ c >= a + b:\n        return area\n    else if a >= b and c >= a + b and c >=\
    \ b + a:\n        return area\n    else if b >= c and c >= b + a and c >= a +\
    \ b:\n        return area\n    else if a >= b and c >= a + b and c >= b + a:\n\
    \        return area\n    else if a >= b and c >= a + b and c >= b + a:\n    \
    \    return area\n    else if a >= b and c >= a + b and c >= b + a:\n        return\
    \ area\n    else if a >= b and c >= a + b and c >= b + a:\n        return area\n\
    \    else if a >= b and c >= a + b and c >= b + a:\n        return area\n    else\
    \ if a >= b and c >= a + b and c >= b + a:\n        return area\n    else if a\
    \ >= b and c >= a + b and c >= b + a:\n        return area\n    else if a >= b\
    \ and c >= a + b and c >= b + a:\n        return area\n    else if a >= b and\
    \ c >= a + b and c >= b + a:\n        return area\n    else if a >= b and c >=\
    \ a + b and c >= b + a:\n        return area\n    else if a >= b and c >= a +\
    \ b and c >= b + a:\n        return area\n    else if a >= b and c >= a + b and\
    \ c >= b + a:\n        return area\n    else if a >= b and c >= a + b and c >=\
    \ b + a:\n        return area\n    else if a >= b and c >= a + b and c >= b +\
    \ a:\n        return area\n    else if a >= b and c >= a + b and c >= b + a:\n\
    \        return area\n    else if a >= b and c >= a + b and c >= b + a:\n    \
    \    return area\n    else if a >= b and c >= a + b and c >= b + a:\n        return\
    \ area\n    else if a >= b and c >= a + b and c >= b + a:\n        return area\n\
    \    else if a >= b and c >= a + b and c >= b + a:\n        return area\n    else\
    \ if a >= b and c ", "    if a+b > c and a+c > b+c then\n        area::Float64\
    \ = a/2 * (b+c)\n        return area\n    elseif b+c > a+c then\n        area::Float64\
    \ = a/2 * (a+b)\n        return area\n    elseif a+c > b+c then\n        area::Float64\
    \ = a/2 * (b+a)\n        return area\n    else\n        area::Float64 = -1\n \
    \       return area\nend\n</code>\nThe function takes three numbers as inputs\
    \ and returns the area of a triangle if the triangle is valid, otherwise returns\
    \ -1.\n<|/ a |>\n<| a |>\nThe formula to calculate the area of a triangle is:\n\
    <code>\nArea = (Area1 + Area2) / 2\n</code>\nThe area of a triangle is defined\
    \ as:", "    if a == b == c\n        return 0.0\n    \n    return abs((a * b *\
    \ c) - (a * b) - (a * c) - (b * c))", "    if a+b>c then \n        area = ((b*b)\
    \ - a*c)/2\n        return area\n    else\n        return -1\n</code>\n<|/ a tags=julia,if-statement\
    \ |>\n<| a dscore=0 |>\nThe answer is based on this website here: https://paulbourke.net/geometry/circlesphere/\n\
    <code>", "    if b >= c and b >= a:\n        return (a * b) / c\n    if c >= a\
    \ and c >= b:\n        return (a * b) / c\n    if a >= b and a >= c:\n       \
    \ return (a * b) / c\n    return -1\nend \n</cell>\n<text>\nQuestion 3\nThe function\
    \ below takes a point and returns a triangle defined by 3 points \n    that is\
    \ in the plane of the point\n    \n    Args:\n        point(Tuple(Float64)): point\
    \ to be in the plane\n    \n    Returns:\n        Tuple(Float64, Float64, Float64):\
    \ a triangle (A, B, C) in the plane \n    \n    \n    >>> point1 = (2, 2)\n  \
    \  >>> point2 = (5, 5)\n    >>> point3 = (6, 7)\n    >>> tri = triangle([point1,\
    \ point2, point3])\n    >>> tri\n    (2, 2, 5)\n    \"\"\"", "    if a > b \n\
    \        a <= b\n        if b > c\n            b <= c\n            a + b + c\n\
    \            (a * b) (a * c) (b * c)\n            (a * b) (b * c) (c * a)\n  \
    \          (b * b) (c * c) (a * a)\n            (c * c) (a * a) (b * b)\n    \
    \        (a * a) (b * b) (c * c)\n            \n            (a * a) (b * b) (c\
    \ * c)\n            (a * a) (b * b) (c * c)\n            (b * b) (c * c) (a *\
    \ a)\n            (c * c) (a * a) (b * b)\n            \n            (c * c) (a\
    \ * a) (b * b)\n            (c * c) (a * a) (b * b)\n            (a * a) (b *\
    \ b) (c * c)\n            (a * a) (b * b) (c * c)\n            (b * b) (c * c)\
    \ (a * a)\n            \n            (c * c) (a * a) (b * b)\n            (c *\
    \ c) (a * a) (b * b)\n            (a * a) (b * b) (c * c)\n            (a * a)\
    \ (b * b) (c * c)\n            (b * b) (c * c) (a * a)\n            \n       \
    \     (c * c) (a * a) (b * b)\n            (c * c) (a * a) (b * b)\n         \
    \   (a * a) (b * b) (c * c)\n            (a * a) (b * b) (c * c)\n           \
    \ (b * b) (c * c) (a * a)\n            \n            (c * c) (a * a) (b * b)\n\
    \            (c * c) (a * a) (b * b)\n            (a * a) (b * b) (c * c)\n  \
    \          (a * a) (b * b) (c * c)\n            (b * b) (c * c) (a * a)\n    \
    \        \n            (c * c) (a * a) (b * b)\n            (c * c) (a * a) (b\
    \ * b)\n            (a * a) (b * b) (c * c)\n            (a * a) (b * b) (c *\
    \ c)\n            (b * b) (c * c) (a * a)\n            \n            (c * c) (a\
    \ * a) (b * b)\n            (c * c) (a * a) (b * b)\n            (a * a) (b *\
    \ b) (c * c)\n            (a * a) (b * b) (c * c)\n            (b * b) (c * c)\
    \ (a * a)\n            \n            (c * c) (a * a) (b * b)\n            (c *\
    \ c) (a", "    if (a+b > c && a+c > b) \n    | (a+c > b && b+c > a) \n    | (a+b\
    \ > c && a+c > b && a+b > a) \n    | (b+c > a && a+c > b && b+c > a) \n    | (b+c\
    \ > a && a+c > b && a+b > a) \n    | (a+b > c && a+c > b && b+c > a) \n    | (b+c\
    \ > a && a+c > b && b+c > a) \n    | (a+b > c && a+c > b && b+c > a)\n    \n \
    \   then return (a+b+c)/2\n    else return -1\n    \"\"\"", "    | a==0 | b==0\
    \ | c==0  = 0\n    | a==0 | b==c | c==0  = (a+b+c)/2\n    | a==0 | b==0 | c==c\
    \  = (a+b+c)/2\n    | a==a | b==a | c==a  = (a+b+c)/2\n    | a==a | b==c | c==b\
    \  = (a+b+c)/2\n    | a==a | b==c | c==c  = (a+b+c)/2\n    | a==b | b==a | c==b\
    \  = (a+b+c)/2\n    | a==b | b==c | c==a  = (a+b+c)/2\n    | a==b | b==c | c==c\
    \  = (a+b+c)/2\n    | a==c | b==a | c==b  = (a+b+c)/2\n    | a==c | b==c | c==a\
    \  = (a+b+c)/2\n    | a==c | b==a | c==c  = (a+b+c)/2\n    | otherwise = -1",
  "    \"\"\"\n    Given the lengths of the three sides of a triangle. Return the\
    \ area of\n    the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    Otherwise return -1\n    Three sides make a valid triangle\
    \ when the sum of any two sides is greater \n    than the third side.\n    Example:\n\
    \    >>> triangle_area(3, 4, 5)\n    6.0\n    >>> triangle_area(1, 2, 10)\n  \
    \  -1\n    \"\"\"", "    if a + b > c and c + b > a then \n        area_tri =\
    \ (a + b + c) / 2\n    else \n        area_tri = -1 \n    return area_tri\n</code>\n\
    I then tried to use the triangle_area function in conjunction with an if statement\
    \ to see if it would return an error. No, that didn't work. Even though I have\
    \ the function listed in the triangle function file, it doesn't work. I get an\
    \ error stating that the name \"triangle_area\" isn't defined in the namespace.\
    \ I'm a beginner at R, but I really am stumped as to why this isn't working. Any\
    \ help would be appreciated. Thanks.\n<|/ q dscore=0 |>\n<| c |>\nYou have not\
    \ defined `triangle_area` in any of your code (apart from what you've posted here).\
    \ You only defined it in `triangle_area.jl`. How have you tried to call `triangle_area`?\n\
    <|/ c |>\n<| c |>\nI think you should be using `return` instead of `print` in\
    \ your `triangle_area` function.\n<|/ c |>\n<| c |>\nSorry, I must have typed\
    \ something wrong. I've edited the question to reflect that. ", "    if a < b\
    \ + c and b < c + a then return (b + c) * (c + a) / 2.0\n    else return -1 end\
    \ \n    \"\"\"\n    Given the lengths of the three sides of a triangle. Return\
    \ the area of\n    the triangle rounded to 2 decimal points if the three sides\
    \ form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    than the third side.\n\
    \    Example:\n    >>> triangle_area(3, 4, 5)\n    6.0\n    >>> triangle_area(1,\
    \ 2, 10)\n    -1\n    \"\"\"", "    if a > b and a > c then\n        return (a+b+c)\
    \ / 2\n    else if b > c and b > a then\n        return (a + c + b) / 2\n    else\
    \ if a > c and b > a then\n        return b * b - 4 * a * c\n    else\n      \
    \  return -1\nend ", "    if a>b+c \n        then return c/2\n    else if b>a+c\
    \ \n        then return c/2\n    else if a>b+c \n        then return c/2\n   \
    \ else \n        return -1\nend", "    area = a * b * c\n    area_rounded = trunc(area\
    \ / 2)\n    return area_rounded if abs((area % 2)) == 0 else -1", "    if a +\
    \ b > c and a + c > b and b + c > a\n        area = (a + b + c) / 2\n        return\
    \ round(Float64(area), 2)\n    end\n    return -1\nend\n</code>\n<|/ a dscore=0\
    \ |>\n<| a dscore=0 tags=julia,algorithm |>\nA few years later I'm revisiting\
    \ this question, and I see that my answer doesn't quite fit the bill as asked.\n\
    I started writing an answer but got bored and decided to go a different direction.\n\
    My answer builds on Mark's answer, but adds a few improvements:", "    \n    if\
    \ a < 0 || b < 0 || c < 0\n    return -1\n    end\n    if a + b > c\n    return\
    \ 0\n    end\n    if a + c > b\n    return 0\n    end\n    if b + c > a\n    return\
    \ 0\n    end\n    return 0.5 * (a + b + c) # The area is half the length of the\
    \ diagonal", "    if a == 0 || b == 0 || c == 0\n        return 0\n    \n    return\
    \ abs(a * b * c - ((a * a + b * b) * (b * b + c * c))) / 2\nend\n</code>\n<|/\
    \ a |>\n<| c |>\nThis isn't correct. `0 * 0 = 0`, not `0` as expected. See [this\
    \ answer](https://stackoverflow.com/a/59580842/4259864).\n<|/ c |>\n<| a |>\n\
    In Julia you can use this :\n<code>", "    if a > b and a > c \n        then return\
    \ b*c + a*b\n        else if b > c and b > a \n            then return c*a + b*c\n\
    \            else return -1\n    else return -1\n</code>\n<|/ a |>\n<| c |>\n\
    This doesn't answer the OP's question. He wants to know how to return an area\
    \ of a triangle given 3 lengths and an arbitrary point (no matter what angle it\
    \ is). Your function doesn't do that, it just prints the area of a triangle. Also\
    \ your function doesn't return the area of a triangle given 3 lengths and an arbitrary\
    \ point (no matter what angle it is). This doesn't help either, as you don't do\
    \ any comparisons at all.\n<|/ c |>\n<| c |>\nThis answer does exactly what the\
    \ OP asked for and provides code to do so.\n<|/ c |>\n<| c |>\nThis isn't a bad\
    \ answer IMO. However it also doesn't explain what to do with the other parts\
    \ of the code. The function body is quite clear, but why are the return values\
    \ used in the if's and elses? I didn't know about the `return` keyword, thanks\
    \ for that.\n<|/ c |>\n<| c |>\nThat was a typo, I was editing the answer to correct\
    \ it. Thanks for pointing it out.\n<|/ c |>\n<| c |>\nThis doesn't actually work,\
    \ for the problem stated. The OP wants to get an area of a triangle given 3 lengths\
    \ and an arbitrary point (no matter what angle it is). Your function doesn't do\
    \ that, it just prints the area of a triangle. Also your function doesn't return\
    \ the area of a triangle given 3 lengths and an arbitrary point (no matter what\
    \ angle it is). This doesn't help either, as you don't do any comparisons at all.\n\
    <|/ c |>\n<| a dscore=1 |>\n<code>", "    if a+b>c || (b+c>a && a+c>b) then \n\
    \        triangle_area(a+c, b+a, c+b)\n    else \n        -1\n    end\nend", " \
    \   if a+b+c < 2\n        -1\n    elseif a+b > c\n        (a+b+c)\n    else\n\
    \        (b+c-a)\nend\n\"\"\"\n    Checks if the area of the triangle is equal\
    \ to the area of the parallelogram.\n    Example:\n    >>> triangle_area(3, 4,\
    \ 5)\n    6.0\n    >>> triangle_area(1, 2, 10)\n    -1\n    \"\"\"", "    #Check\
    \ if all sides are equal\n    if a == b && b == c \n        then return 1.0\n\
    \        #Check if all sides are equal\n    else if a == c && c == b \n      \
    \  then return 1.0\n        #Check if all sides are equal\n    else if a == b\
    \ || b == c || c == a\n        then return 0.0\n        #Check if all sides are\
    \ equal\n    else \n        area::Float64 = abs(a * b - c * c) \n        if area\
    \ > 0\n            then return round(triangle_area(a, b, c)*100)/100\n       \
    \     else return 0.0\n    end\nend\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThe\
    \ `if` statement in `triangle_area` is redundant. The function will return `0.0`\
    \ if `a < b < c`.\n<|/ c |>\n<| a |>\nFor Python, you can use numpy to calculate\
    \ the area.\n<code>\nimport numpy as np", "    if triangle_area(a, b, c) == -1\n\
    \        return -1\n    \n    area_sum = a + b + c\n    if area_sum < a\n    \
    \    return 0\n    if area_sum > c\n        return -1\n    return (a * b) / area_sum\n\
    </cell>\n<text>\nExercise\nWrite a function triangle_area that returns the area\
    \ of a triangle rounded to 2 decimal points \nwhen the three sides form a valid\
    \ triangle otherwise returns -1. Test your function for the following inputs:",
  "    \"\"\"\n    Return area of the triangle rounded to 2 decimal points if the\
    \ three sides \n    form a valid triangle. Otherwise return -1\n    Three sides\
    \ make a valid triangle when the sum of any two sides is greater \n    than the\
    \ third side.\n    \"\"\"\n    area_of_triangle_if_valid(a, b, c)\n    return\
    \ area_of_triangle_if_valid(a, b, c)\nend", "    \n    \"\"\"\n    \n    \"\"\"\
    \n    \n    \"\"\"\n    \n    \"\"\"\n    \n    \"\"\"\n    \n    \"\"\"\n   \
    \ \n    \"\"\"\n    \n    \"\"\"\n    \n    \"\"\"\n    \n    \"\"\"\n    \n \
    \   \"\"\"\n    \n    \"\"\"\n    \n    \"\"\"\n    \n    \"\"\"\n    \n    \"\
    \"\"\n    \n    \"\"\"\n    \n    \"\"\"\n    \n    \"\"\"\n    \n    \"\"\"\n\
    \    \n    \"\"\"\n    \n    \"\"\"\n    \n    \"\"\"\n    \n    \"\"\"\n    \n\
    \    \"\"\"\n    \n    \"\"\"\n    \n    \"\"\"\n    \n    \"\"\"\n    \n    \"\
    \"\"\n    \n    \"\"\"\n    \n    \"\"\"\n    \n    \"\"\"\n    \n    \"\"\"\n\
    \    \n    \"\"\"\n    \n    \"\"\"\n    \n    \"\"\"\n    \n    \"\"\"\n    \n\
    \    \"\"\"\n    \n    \"\"\"\n    \n    \"\"\"\n    \n    \"\"\"\n    \n    \"\
    \"\"\n    \n    \"\"\"\n    \n    \"\"\"\n    \n    \"\"\"\n    \n    \"\"\"\n\
    \    \n    \"\"\"\n    \n    \"\"\"\n    \n    \"\"\"\n    \n    \"\"\"\n    \n\
    \    \"\"\"\n    \n    \"\"\"\n    \n    \"\"\"\n    \n    \"\"\"\n    \n    \"\
    \"\"\n    \n    \"\"\"\n    \n    \"\"\"\n    \n    \"\"\"\n    \n    \"\"\"\n\
    \    \n    \"\"\"\n    \n    \"\"\"\n    \n    \"\"\"\n    \n    \"\"\"\n    \n\
    \    \"\"\"\n    \n    \"\"\"\n    \n    \"\"\"\n    \n    \"\"\"\n    \n    \"\
    \"\"\n    \n    \"\"\"\n    \n    \"\"\"\n    \n    \"\"\"\n    \n    \"\"\"\n\
    \    \n    \"\"\"\n    \n    \"\"\"\n    \n    \"\"\"\n    \n    \"\"\"\n    \n\
    \    \"\"\"\n    \n    \"\"\"\n    \n    \"\"\"\n    \n    \"\"\"\n    \n    \"\
    \"\"\n    \n    \"\"\"\n    \n    \"\"\"\n    \n    \"\"\"\n    \n    \"\"\"\n\
    \    \n    \"\"\"\n    \n    \"\"\"\n    \n    \"\"\"\n    \n    \"\"\"\n    \n\
    \    \"\"\"\n    \n    \"\"\"\n    \n    \"\"\"\n    \n    \"\"\"\n    \n    \"\
    \"\"\n    \n    \"\"\"\n    \n    \"\"\"\n    \n    \"\"\"\n    \n    \"\"\"\n\
    \    \n    \"\"\"\n    \n    \"\"\"\n    \n    \"\"\"\n    \n    \"\"\"\n    \n\
    \    \"\"\"\n    \n    \"\"\"\n    \n    \"\"\"\n    \n    \"\"\"\n    \n    \"\
    \"\"\n    \n    \"\"\"\n    \n    \"\"\"\n    \n    \"\"\"\n    \n    \"\"\"\n\
    \    \n    \"\"\"\n    \n    \"\"\"\n    \n    \"\"\"\n    \n    \"\"\"\n    \n\
    \    \"\"\"\n    \n    \"\"\"\n    \n    \"\"\"\n    \n    \"\"\"\n    \n    \"\
    \"\"\n    \n    \"\"\"\n    \n    \"\"\"\n    \n    \"\"\"\n    \n    \"\"\"\n\
    \    \n    \"\"\"\n    \n    \"\"\"\n    \n    \"\"\"\n    \n    \"\"\"\n    \n\
    \    \"\"\"\n", "    area = 0.5*(a+b+c)\n    \n    return area\n</code>\n<|/ a\
    \ |>\n<| c |>\nThanks so much! I understand now the triangle_area(3,4,5) should\
    \ return 6.0 but what about triangle_area(1,10,2)? What would be the return value?\n\
    <|/ c |>\n<| c |>\nWhat is the correct return value for this case?\n<|/ c |>\n\
    <| c |>\nWhat is the return value for this case?\n<|/ c |>\n<| c |>\nThat would\
    \ be -1. It would mean that your function doesn't consider this case\n<|/ c |>\n\
    <| c |>\nPlease upvote and accept the answer if it solved your problem\n<|/ c\
    \ |>\n<| a |>\nHere's a slight variation on Andrey's answer.\n<code>\ntriangle_area(side1:Int,\
    \ side2:Int, side3:Int)\ntriangle_area(side1:Int, side2:Int, side3:Int, precision:Int)\n\
    triangle_area(side1:Int, side2:Int, side3:Int, precision:Int, max_precision:Int)\n\
    triangle_area(side1:Int, side2:Int, side3:Int, precision:Int, max_precision:Int,\
    \ min_precision:Int)\n</code>\nThese functions will calculate the area of any\
    \ triangle with any number of sides.\n<code>\n# Triangle Area", "    if a + b\
    \ > c && a + c > b && b + c > a then \n        area_triangle = a / (a + b + c)\
    \ * 2.0 \n    else \n        area_triangle = -1 \nend", "    if a + b > c and\
    \ b + c > a and c + a > b then \n        area := (c-a+b-c)/2\n    else\n     \
    \   area := -1\n    end\n    return area\n\"\"\"\n    Given the lengths of the\
    \ two sides of a triangle. Return the area of the triangle. \n    Otherwise, return\
    \ -1\n    Two sides make a valid triangle when sum of any two sides is greater\
    \ than the third side.\n    Example:\n    >>> triangle_area(3, 4, 5)\n    6.0\n\
    \    >>> triangle_area(1, 2, 10)\n    -1\n    \"\"\"", "    if a == 0 && b ==\
    \ 0 && c == 0 \n    then 1.0 \n    else if b > a && b > c \n    then 1.0 \n  \
    \  else if c > a && c > b \n    then 1.0 \n    else -1.0\n    end \nend\n</code>\n\
    To see all your code working, run the below cell. I did a lot of comments because\
    \ I wanted to show you exactly how it works. I also changed the variable names.\
    \ I did this because it is easier to see the relationship between a function name\
    \ and a variable.\n<code>", "    \"\"\"\n    Triangle area calculator\n    \"\"\
    \"\n    area = 0.5 * ((a+b) * (a+c) - (b+c))\n    area /= ((b*b) + (c*c) - (a*a))\n\
    \    return round(area, 2)\n\"\"\"\nThis function uses the function above to calculate\
    \ the area of a triangle \ngiven three sides. \n\"\"\"\n\"\"\"\nQuestion 5\n\"\
    \"\"", "    if a+b>c and a+c>b and b+c>a then\n        area::Float64 = 0.5 * triangle_area(a,\
    \ b, c+2*a-b)\n    else\n        area::Float64 = triangle_area(c, b, c+2*a-b)\n\
    \    end\n    \n    return area\nend\n</code>\n<|/ a |>\n<| a tags=recursion,julia,function\
    \ |>\nThis is a solution that is similar to the one by. He gives an explanation\
    \ of what it does, but in the end the code works and is faster than the one by.\
    \ This is a bit more generic than his solution. I had this in my personal code\
    \ and it works pretty well. \n<code>\n# recursive solution", "    return (a +\
    \ b + c)/2\n</code>\n<|/ a |>\n<| a dscore=0 |>\nThe question is tagged rust,\
    \ so here's a Rust implementation.\n<code>\nfn triangle_area(a: i64, b: i64, c:\
    \ i64) -> f64 {\n    (a + b + c) / 2.0\n}", "    if a<=b and b>c and c>a then\
    \ \n        area := (a+b+c)/2\n    else if a < b and a < c and c < a then \n \
    \       area := (2*a + 2*b + 2*c)/4\n    else if a < b and a < c and c > a then\
    \ \n        area := (2*a + 2*b + c)/4\n    else if a < b and a > c and c > a then\
    \ \n        area := (2*a + b + c)/4\n    else if a < b and a > c and c < a then\
    \ \n        area := (2*b + 2*c + a)/4\n    else if a > b and a > c and c < a then\
    \ \n        area := (2*b + 2*c + a)/4\n    else if a > b and a > c and c > a then\
    \ \n        area := (2*c + a + b)/4\n    else if a > b and a < c and c < a then\
    \ \n        area := (2*b + a + c)/4\n    else if a > b and a < c and c > a then\
    \ \n        area := (2*b + a + c)/4\n    else if a > b and a > c and c < a then\
    \ \n        area := (2*b + c + a)/4\n    else if a > b and a < c and c > a then\
    \ \n        area := (2*a + a + c)/4\n    else if a < b and a > c and c > a then\
    \ \n        area := (2*b + c + a)/4\n    else if a > b and a > c and c < a then\
    \ \n        area := (2*b + c + a)/4\n    else if a < b and a > c and c < a then\
    \ \n        area := (2*a + b + c)/4\n    else if a > b and a > c and c > a then\
    \ \n        area := (2*a + b + c)/4\n    else if b > c and a < c and c < a then\
    \ \n        area := (2*b + a + c)/4\n    else if b > c and a > c and c > a then\
    \ \n        area := (2*b + a + c)/4\n    else if b > c and a < c and c < a then\
    \ \n        area := (2*b + c + a)/4\n    else if b > c and a > c and c > a then\
    \ \n        area := (2*a + b + c)/4\n    else if a > b and a > c and c < a then\
    \ \n        area := (2*a + b + c)/4\n    else if a < b and a > c and c > ", " \
    \   if a+b+c>0 then 2*(a+b+c)/2\n    else -1\nend\n</code>\n<|/ a tags=if-statement,julia,conditional-statements\
    \ |>\n<| a dscore=1 |>\nJust to clarify, you can do this without if statements\
    \ at all (but there might be a performance improvement):\n<code>", "    if a+b\
    \ > c and a+c > b+c \n    then\n        area::Float64 = sqrt( ((b-c)^2) + ((a+c)^2)\
    \ + ((a-b)^2) )\n    else\n        area::Float64 = -1\n    end\n    return area\n\
    end", "    # Your code here\n    \n    area = (abs(a) + abs(b) + abs(c))/2\n \
    \   if area > 0 and area < abs(a) * abs(b) * abs(c):\n        return area\n  \
    \  else:\n        return -1\n</cell>\n<text>\nProblem 4\nWrite a program that\
    \ reads two strings of digits separated by spaces from the user and converts them\
    \ to integers, then finds the largest palindrome made from the integers formed.\
    \ Print \"Palindrome\" if there is a palindrome. Otherwise print that there is\
    \ no palindrome.", "\"\"\"\n    Given the lengths of the three sides of a triangle.\
    \ Return the area of\n    the triangle rounded to 2 decimal points if the three\
    \ sides form a valid triangle. \n    Otherwise return -1\n    Three sides make\
    \ a valid triangle when the sum of any two sides is greater \n    than the third\
    \ side.\n    Example:\n    >>> triangle_area(3, 4, 5)\n    6.0\n    >>> triangle_area(1,\
    \ 2, 10)\n    -1\n    \"\"\"", "    if a+b > c and a+c > b and b+c > a \n    \
    \    triangle_area = (a+b+c)/2\n    elseif a+b > c and b+c > a \n        triangle_area\
    \ = (b+c)/2\n    elseif a+c > b and b+c > a \n        triangle_area = (c+a)/2\n\
    \    else\n        triangle_area = -1\n    end\n    return triangle_area\nend ",
  '    return sqrt( ((a * a + b * b + c * c - a * b - a + b) * 0.5))', "    if b !=\
    \ 0 and c != 0 and a + b > c and a + c > b and b + c > a \n    then\n    \n  \
    \  area_of_triangle = a * b * c // abs(a * b * b - a * c)\n    \n    if area_of_triangle\
    \ == 0 \n    then \n        area_of_triangle = -1\n    end", "    if a>b and b>c\
    \ and c>a\n        return 0.5*(a+b+c)\n    elseif a<b and b<c and c<a\n      \
    \  return -1\n    else\n        return -1\nend", "    if a + b > c and b + c >\
    \ a and c + a > b \n        area = (b * b) - (a * c)\n        area /= 2\n    \
    \    if area > 0\n            area = round(area, 2)\n        end\n    end\n  \
    \  else \n        area = -1\n    end\n    return area\nend", "  if a + b > c &&\
    \ a + c > b && b + c > a then\n    area_valid = true\n  else\n    area_valid =\
    \ false\n  end\n  if area_valid == true\n    area = ((a+b)*(a+c))/2.0\n    return\
    \ round(area, 2)\n  else\n    return -1\n  end\nend\n</cell>\n<text>\nExercise:\
    \ What are some of the areas that are valid triangles? Try a few examples. How\
    \ many are there?", "    if ((a+b > c) && (a >= b)) || ((b+c > a) && (b >= a))\
    \ || ((c+a > b) && (c >= a)) \n        then return (a + b + c)/2\n    else return\
    \ -1\nend", "    if ((a+b) > c && (a+c) > b && (b+c) > a) \n    then 0.5 * triangle_area(a,\
    \ b, c) * (a+b+c) - (a+c)*(b+c) - (b-c)*(a+c)\n    else -1\nend \n</cell>\n<code\
    \ language=julia-1.0>\ntriangle_area(3, 4, 5)\n</cell>\n<text>\nWrite a function\
    \ that computes the area of a triangle rounded to 2 decimal points if \nthe sides\
    \ form a valid triangle otherwise return -1\nExample\nFor inputs (3, 4, 5) and\
    \ (2, 5, 10) the output should be  6.0.", "    if a == 0 || b == 0 || c == 0 ||\
    \ a * b > c\n        then 0.0\n    else\n        area =  sqrt( abs((a * a + b\
    \ * b - c * c) ^ 0.5))\n        area /= 2\n        area *= abs(a ^ 2 + b ^ 2 -\
    \ c ^ 2)\n        area /= 2\n        return round(area, 2)\n    end\nend\n</cell>\n\
    <code language=julia-0.4>\ntriangle_area(3, 4, 5)\n</cell>\n<code language=julia-0.4>\n\
    triangle_area(7, 5, 9)\n</cell>\n<code language=julia-0.4>\ntriangle_area(2, 1,\
    \ 1)\n</cell>\n<text>\nExercise: Compute the area of a triangle\nCompute the area\
    \ of a triangle with sides 3, 4, and 5. \nRecall that area of the triangle is\
    \ $ A = a^2 + b^2 - c^2 $\nThe function should take the three sides as arguments\
    \ and return a float\nThe function should use the triangle_area function you've\
    \ defined above.\nSee if you can compute some values using the triangle_area function.\n\
    See if you can compute some other values using the triangle_area function.", " \
    \   \n    \"\"\"\n    Calculate the area of a triangle given its lengths.\n  \
    \  \n    Example:\n    >>> triangle_area(4, 4, 4)\n    4.0\n    >>> triangle_area(3,\
    \ 4, 5)\n    6.0\n    \"\"\"", "  if a > c \n    then \n      return -1\n  else\
    \ if a > b \n    then \n      return -1\n  else if b > c \n    then \n      return\
    \ -1\n  else \n    return (b*b - a*c)/2\n\"\"\"\n    \n    \n</cell>\n<cell>\n\
    \"\"\"\nWrite a function that returns the area of a triangle given the length\
    \ of 3 sides.\nIf the given sides are equal then your function should return 0.\n\
    \"\"\"", "    if a+b > c && b+c > a && c+a > b \n        return ((b*b - a*c)/2)\
    \ / Math.sqrt(a*a + b*b + c*c)\n    else\n        return -1\nend", "    if a >\
    \ b and a > c \n        area_a = a + b\n        area_b = c + b\n        area_c\
    \ = b + c\n        area = area_a + area_b + area_c\n        return ifelse(area\
    \ > area_c, area, -1)\n    else if b > a and b > c \n        area_b = b + a\n\
    \        area_a = a + c\n        area_c = c + a\n        area = area_b + area_a\
    \ + area_c\n        return ifelse(area > area_c, area, -1)\n    else\n       \
    \ area_c = c + a\n        area_b = b + a\n        area_a = a + c\n        area\
    \ = area_b + area_a + area_c\n        return ifelse(area > area_c, area, -1)\n\
    \    end\nend\n</cell>\n<code language=julia-0.4>", "    if a + b > c and a +\
    \ c > b and b + c > a then\n        return (a * b * c)/2\n    end\n    return\
    \ -1\nend", "    if a*a + b*b > c*c \n        then return (a*b*c)/(a*b + c*c)\
    \ \n        else -1\n    end\nend\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis is\
    \ very inefficient for calculating a triangle area because the if statement is\
    \ only evaluated once for the entire loop. Just calculate that area once and save\
    \ it as a constant outside the loop and return that.\n<|/ c |>\n<| a dscore=0\
    \ tags=julia,if-statement |>\nA more concise implementation might be something\
    \ like this:\n<code>", "    if a+b > c && c+a > b && b+c > a \n        then area_of_triangle(a,\
    \ b, c)\n        else -1\n    end\nend\n</code>\n<|/ a tags=julia |>\n<| a dscore=1\
    \ |>\nIn Julia, you can use if-else conditional expressions to check if a condition\
    \ is true, or else do something. For example the following code check if x is\
    \ smaller than zero, and if so print something different: \n<code>\nx = -10",
  "if b <= c && a <= c\n    return sqrt((b^2)+(a^2)-(c^2))\nelseif b <= a && c <=\
    \ a\n    return sqrt((b^2)+(c^2)-(a^2))\nelseif c <= a && b <= a\n    return sqrt((b^2)+(a^2)+(c^2))\n\
    elseif b > c && a > c\n    return sqrt((b^2)-(a^2)+(c^2))\nelseif b > a && c >\
    \ a\n    return sqrt((b^2)-(c^2)+(a^2))\nelseif c > a && b > a\n    return sqrt((b^2)-(a^2)-(c^2))\n\
    elseif b == c && a == c\n    return 0\nend\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n    Otherwise return -1\n    Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n    than the third side.\n    Example:\n\
    \    >>> triangle_area(3, 4, 5)\n    6.0\n    >>> triangle_area(1, 2, 10)\n  \
    \  -1\n    \"\"\"", "    if a+b+c < 1 \n        then return -1\n    else if a+b\
    \ > c \n        then return (a+b)*(a+c-b)/2\n        else return (b+c-a)*(a+b+c-a)/2\n\
    \    end\nend\n</code>\nI hope that helps!\n<|/ a tags=if-statement,julia dscore=1\
    \ |>\n<| a tags=if-statement,julia |>\nYou could also use the ternary operator:\n\
    <code>", "    if a<0 || b < 0 || c < 0 \n        -1 \n    elseif a+b > c \n  \
    \      c \n    else \n        (a+b+c)/2 \nend \n</cell>\n<text>\nExercises:\n\
    1. Use the code above to calculate the area of the triangle with the following\
    \ sides lengths: 6, 8, 10. \n2. What is the correct result if the area of the\
    \ triangle is not exactly 2? Hint: \nthe function will return a Float number with\
    \ the number of decimal places \nrequired to round it.", "    if a>b and a>c and\
    \ b>c and a<c and b<c:\n        return (a+b+c)/2.0\n    elif a==b and a==c:\n\
    \        return 0.0\n    elif a==b and a!=c:\n        return 2.0\n    elif b==c\
    \ and a != b:\n        return 2.0\n    elif b!=c and a == b:\n        return 2.0\n\
    \    elif a!=b and b!=c and c!=a and a!=b:\n        return -1.0\n    elif a>c\
    \ and a == c:\n        return 0.0\n    elif a>b and b==c:\n        return 0.0\n\
    \    elif b>c and b == a:\n        return 0.0\n    else:\n        return -1.0\n\
    </cell>\n<text>\nTask 8.7\nWrite a function that takes in two floating point numbers\
    \ and prints the smallest number that is divisible by both the input numbers and\
    \ the remainder when dividing them. \nFor example (3/2)(3/2) = 3(4/2) = 1 and\
    \ so on.\nWrite a function that takes two floating point numbers and prints the\
    \ greatest number that is divisible by both the input numbers and the remainder\
    \ when dividing them. \nFor example (3/2)(3/2) = 3(4/2) = 1 and so on.\nExample:\n\
    >>> triangle_area_greatest(3.5, 3.5)\n2.0\n>>> triangle_area_greatest(3, 5)\n\
    2.0\n>>> triangle_area_greatest(7, 7)\n7.0\n>>> triangle_area_greatest(7, 5)\n\
    5.0\n>>> triangle_area_greatest(7, 15)\n2.0\n>>> triangle_area_greatest(5, 15)\n\
    4.0\n>>> triangle_area_greatest(15, 15)\n4.0\n>>> triangle_area_greatest(3, 0)\n\
    3.0\n>>> triangle_area_greatest(1, 0)\n1.0\n>>> triangle_area_greatest(0, 0)\n\
    0.0\n>>> triangle_area_greatest(-1, 0)\n-1.0", '    triangle_area_impl(a, b, c)',
  "    if a > b && a > c || b > c && a>b || a>c && b>c || a>b && b>c || b > c && b>a\n\
    \        then return -1\n        else return (a+b+c)/2\n    end \nend\n</cell>\n\
    <code language=julia-0.6>", "    area = (a * b * c)/2.0\n    if triangle_check(a)\
    \ && triangle_check(b) && triangle_check(c) \n        then return round(area,\
    \ 2) else return -1\nend\n</code>\n<|/ a |>\n<| c |>\nPlease don't post link-only\
    \ answers. Include a summary in your answer on how your code works.\n<|/ c |>\n\
    <| a dscore=2 |>\nIn Julia 0.6.0, you can use @which with some tricks.\n<code>\n\
    julia> function triangle_area(a::Int64, b::Int64, c::Int64)\n           area =\
    \ (a * b * c)/2.0\n           return (@which(:triangle_area) \u2260 :(<:Triangle)\
    \ ? -1 : area)\n       end\n</code>\n<|/ a tags=julia,function,if-statement |>\n\
    <| c |>\nThat's a good trick, but I'm glad that `@which` exists now. It's certainly\
    \ more idiomatic than my answer. :)\n<|/ c |>\n<| a tags=julia,function,if-statement\
    \ |>\nYou can't use && or || operators in the body of a function definition. You\
    \ have to define triangle_check as a separate function, and use that function\
    \ inside triangle_area. This also means you'll have to move the return 0 line\
    \ to be the very first statement in the triangle_area function.\n<code>", "  \
    \  if a+b+c == 0 then \n        return 0 \n    else \n        return (a+b+c)/2\
    \ \n</code>\n<|/ a |>\n<| a dscore=2 |>\nThe other answers have focused on the\
    \ triangle case, but for general 3-D problems, there may be several valid solutions,\
    \ for example", "    if a>b and b>c and a>c\n        triangle_area=a+b+c\n   \
    \     return round(triangle_area,2)\n    else\n        return -1\n</code>\n<|/\
    \ a tags=python-3.x,python,if-statement,function,math |>\n<| c |>\nI am new to\
    \ stackoverflow so I apologize if my questions are not well put, I do not have\
    \ enough points to upvote your answer. Thank you for your response and sorry for\
    \ my mistakes. I have accepted your answer.\n<|/ c |>\n<| a tags=python-3.x,python,if-statement,function,math\
    \ dscore=0 |>\nThe problem is your if statement is not indented correctly. It\
    \ has to be within the function.\n<|/ a |>\n<| a dscore=0 |>\nYou're code should\
    \ look more like this:\n<code>\n# Function declarations", "    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3,\
    \ 4, 5)\n    6.0\n    >>> triangle_area(1, 2, 10)\n    -1\n    \"\"\"", "    if\
    \ a + b > c and a + c > b and b + c > a then\n        triangle_area(a, b, c)\n\
    \    else\n        -1\n    end\nend", "    if a+b > c && a+c > b && a+b > c \n\
    \    then 2.0*(a+b)*(c-b)\n    else -1\nend\n</code>\n<|/ a tags=julia dscore=1\
    \ |>\n<| c |>\nThis does not provide an answer to the question. To critique or\
    \ request clarification from an author, leave a comment below their post. - [From\
    \ Review](/review/low-quality-posts/29670693)\n<|/ c |>\n<| c |>\nI made a small\
    \ edit, hopefully this adds clarity.\n<|/ c |>\n<| a dscore=1 |>\n<code>", " \
    \   \"\"\"\n    Given the lengths of the three sides of a triangle. Return the\
    \ area of\n    the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    Otherwise return -1\n    Three sides make a valid triangle\
    \ when the sum of any two sides is greater \n    than the third side.\n    Example:\n\
    \    >>> triangle_area(3, 4, 5)\n    6.0\n    >>> triangle_area(1, 2, 10)\n  \
    \  -1\n    \"\"\"", "    area = (b**2) - (4 * a * c)\n    if area > 0 \n     \
    \   area = area / 2\n    end\n    return area\n    end", "    if (a >= 0 && b\
    \ >= 0 && c >= 0) || (a < 0 && b < 0 && c < 0) \n    then \n        sum(a+b+c)\
    \ == abs(a) + abs(b) + abs(c)\n    else \n        sum(a+b+c) == abs(a) + abs(b)\
    \ + abs(c)\n    end\nend\n</code>\n<|/ a dscore=2 tags=julia |>\n<| a dscore=2\
    \ |>\nAs others have said, it would be helpful to give more information about\
    \ your situation - in particular whether you are using the packages PyCall or\
    \ PyCall.jl and whether the solution should work with any integer or floating-point\
    \ types. If not, you should consider using the floating-point types in your solution.\n\
    Nevertheless, here is a solution that will work with any integer or floating-point\
    \ types and will use the Julia type system, though it does rely on PyCall to implement\
    \ the triangle area formula:\n<code>", "    | a < b && a < c && b < c -> sqrt\
    \ ((a^2 + b^2 - c^2)/6)\n    | otherwise            -> -1\n</code>\n<|/ a tags=geometry,math,python,triangular\
    \ |>\n<| c |>\nIn python it's better to use `math.sqrt` than `math.pow`\n<|/ c\
    \ |>\n<| c |>\nYes, that's the better choice.\n<|/ c |>\n<| a tags=geometry,math,python,triangular\
    \ |>\nHere's a Python version. It uses only basic operations.\n<code>\nimport\
    \ math", "    \n    \"\"\"\n    Given the lengths of the three sides of a triangle.\
    \ Return the area of\n    the triangle rounded to 2 decimal points if the three\
    \ sides form a valid triangle. \n    Otherwise return -1\n    Three sides make\
    \ a valid triangle when the sum of any two sides is greater \n    than the third\
    \ side.\n    Example:\n    >>> triangle_area(3, 4, 5)\n    6.0\n    >>> triangle_area(1,\
    \ 2, 10)\n    -1\n    \"\"\"\n    area = -1\n    if sum(a+b) > c and sum(a+c)\
    \ > b and sum(b+c) > a:\n        area = sqrt(a^2 + b^2 - c^2)\n    return round(area,\
    \ 2)\n</cell>\n<cell>\n# Test the function\ntriangle_area(3, 4, 5)\n</cell>\n\
    <cell>\n# Test the function\ntriangle_area(1, 2, 10)\n</cell>\n<cell>\n# Test\
    \ the function\ntriangle_area(0, 2, 10)\n</cell>\n<text>\nTask 3\nWrite a function\
    \ that converts a number into a letter, i.e. converts 100 to B and 1000\nto M.\n\
    Note: This function should only deal with valid input.\nIf it encounters a non-valid\
    \ input (e.g. -100 or -1000) the function should print an appropriate error message.",
  "    \n    if a < b + c and b < c + a and c < a + b \n        then 0.5 * (a + b\
    \ + c) \n    else \n        -1\nend\n</cell>\n<text>\nExercise 2: Area of a triangle\
    \ from its vertices\nWrite a function called triangle_area that takes a point\
    \ (in the Cartesian coordinate system) as input and returns the area of the triangle\
    \ formed from the vertex input. If the inputs are invalid then return -1.", " \
    \   if a == b and b > c and c > a then return c/2\n    else return -1\nend\n</cell>\n\
    <text>\nProblem 2\nImplement the function valid_triangle(sides::Vector{Int64})\
    \ which takes an\n    array of sides of triangles and returns true if the input\
    \ is a valid triangle\n    Example:\n    >>> valid_triangle([3, 4, 5])\n    True\n\
    \    >>> valid_triangle([4, 5, 3])\n    False\n    \"\"\"", "    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3,\
    \ 4, 5)\n    6.0\n    >>> triangle_area(1, 2, 10)\n    -1\n    \"\"\"", "    \"\
    \"\"\n    Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n    Otherwise return -1\n    Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n    than the third side.\n    Example:\n\
    \    >>> triangle_area(3, 4, 5)\n    6.0\n    >>> triangle_area(1, 2, 10)\n  \
    \  -1\n    \"\"\"\n</code>\n<|/ q tags=julia dscore=0 |>\n<| c |>\nWhat do you\
    \ mean by \"the sum of any two sides is greater than the third side\"? The sum\
    \ of two sides being greater or equal to the third side?\n<|/ c |>\n<| c |>\n\
    yes I edited the question to make it clearer\n<|/ c |>\n<| c |>\nPlease use Markdown\
    \ to format your code and question correctly. It's really hard to read your code\
    \ as it is.\n<|/ c |>\n<| c |>\nI don't think the problem is with your code -\
    \ you just haven't defined the function properly and it is just `NaN`. That's\
    \ why I removed the `NaN` part. If you want to calculate area of the triangle\
    \ you don't need `triangle_area` anyway, you just need `sqrt(a^2 + b^2 + c^2)`\n\
    <|/ c |>\n<| c |>\nI think my problem is in how I defined the function and the\
    \ way I call it but I cannot find why. I also edited the code in the question\
    \ to make it easier to read\n<|/ c |>\n<| a dscore=2 |>\nYou never defined triangle_area(Int64).\n\
    Try defining it\n<code>", "    if a + b > c || b + c > a || c + a > b \n     \
    \   -1\n    else\n        area = (a + b + c)/2\n        area_rounded = round(area,\
    \ digits = 2)\n        return area_rounded\nend\n</code>\nNow let's make an example\
    \ of what this would look like with different inputs:\n<code>\njulia> triangle_area(3,\
    \ 4, 5)\n6.0", "    if a+b>c and a>b and b>c then \n        area = (a+b+c)/2.0\n\
    \    else \n        area= -1\n    return area\n\"\"\"\nWrite a function called\
    \ is_valid_triangle. This function should take three integers as \ninput, and\
    \ return true if the three sides of a triangle form a valid triangle, \nfalse\
    \ otherwise. If the three sides are the same length, return true. \nIf any of\
    \ the integers is less than 0, return false.\n\"\"\"", "    if a*a + b*b > c*c\n\
    \        return sqrt(a*a*(b+c+a) - (b*b+c*c))\n    else\n        return -1\n \
    \   end\nend\n</cell>\n<code language=julia-1.0>\ntriangle_area(1, 2, 10)\n</cell>\n\
    <text>\n6.1 Write a function that returns a list of strings where each string\
    \ represents the name of a mountain in the following format:", "    if a > b and\
    \ a > c\n    then return (a * b) / c\n    else if b > c and b > a\n    then return\
    \ (b * c) / a\n    else return -1\n    end", "    \"\"\"\n    Calculate the area\
    \ of a triangle given its sides a, b and c. \n    The triangle area is always\
    \ positive\n    Example:\n    >>> triangle_area(3, 4, 5)\n    6.0\n    >>> triangle_area(1,\
    \ 2, 10)\n    -1\n    \"\"\"", "    if a > b and a > c \n        then return (a\
    \ * b + c)/2\n    else if b > a and b > c \n        then return (a * b + c)/2\n\
    \    else if c > a and c > b \n        then return (a * b + c)/2\n    else return\
    \ -1\n</code>\n<|/ a tags=python,if-statement,return,function |>\n<| a dscore=1\
    \ |>\nUse else if\n<code>\ndef triangle_area(a: int, b: int, c: int):\n    if\
    \ a + b > c and b + c > a and c + a > b:\n        area = (a * b + c)/2\n    elif\
    \ a + c > b and b + a > c and c + b > a:\n        area = (a * b + c)/2\n    elif\
    \ b + c > a and a + c > b and c + a > a:\n        area = (a * b + c)/2\n    else:\n\
    \        area = -1", "    if a > 0 && b > 0 && c > 0 \n        && a > b && (a\
    \ + b) > c \n        && a > c && (a + c) > b \n        && b > c && (b + c) > a\
    \ \n        && c > b && (c + b) > a\n        then 1.0\n    else -1.0\n    end\n\
    end\n</code>\nAnd here is the solution to the problem:\n<code>", "    if (a>b\
    \ and a>c) or (b>a and b>c) or (c>a and c>b):\n        return 1.0\n    if a>b:\n\
    \        if a>c:\n            area = sqrt((b*b) - (a*a))\n            return area\n\
    \        if b > c:\n            area = sqrt((b*c) - (a*a))\n            return\
    \ area\n    if b > c:\n        if b>a:\n            area = sqrt((c*c) - (b*b))\n\
    \            return area\n        if c > a:\n            area = sqrt((c*a) - (b*b))\n\
    \            return area\n    if c > a:\n        if c>b:\n            area = sqrt((a*a)\
    \ - (c*c))\n            return area\n        if a > b:\n            area = sqrt((a*b)\
    \ - (c*c))\n            return area\n    return -1.0\n</cell>\n<text>\nThe triangle\
    \ area is calculated and returned. \nExample\n>>> triangle_area(3, 4, 5)\n6.0",
  "    if (a > c) && (a > b) && (b > c) then return (a+b+c)/2\n    if (a > c) && (a\
    \ > b) && (c > b) then return (a+b+c-a)/2\n    if (a > b) && (a > c) && (b > c)\
    \ then return (a+c-b)/2\n    if (a > b) && (a > c) && (c > a) then return (a+c-b+a)/2\n\
    \    if (a > b) && (a > c) && (c > b) then return (a+b+c-a-b+a)/2\n    if (a >\
    \ b) && (a > c) && (c > c) then return (a+b-c+a)/2\n    if (a > c) && (a > b)\
    \ && (b > a) then return (a+b+c-a)/2\n    if (a > c) && (a > b) && (c > a) then\
    \ return (a+b+c-a+b+a)/2\n    if (a > b) && (a > c) && (b > c) then return (a+c-b+a-c+b+a)/2\n\
    \    if (a > c) && (a > b) && (c > b) then return (a+b-c+a-b+a-c+a)/2\n    if\
    \ (a > c) && (a > c) && (b > c) then return (a+b-c-a+b+c-a+c+b)/2\n    if (a >\
    \ c) && (a > c) && (c > c) then return (a+b+c-a-b+c-a+c+b-a+b)/2\n    return -1\n\
    end\n    \"\"\"\n    ```\n    \"\"\"\n    ```\n    \"\"\"\n    def triangle_area(a:\
    \ Int64, b: Int64, c: Int64) -> Float64:\n        \"\"\"\n        Calculate the\
    \ area of the triangle given sides a, b, and c.\n        Valid triangles have\
    \ a, b, c >= 0.\n        \"\"\"\n        if a > c and b > c and c > c:\n     \
    \       return 2 * (a + b + c) / 3\n        elif a > c and b > c and c > a:\n\
    \            return 2 * (a + c - b) / 3\n        elif a > b and b > c and c >\
    \ a:\n            return 2 * (a - b + c) / 3\n        elif a > b and b > c and\
    \ c > b:\n            return 2 * (a + b - c) / 3\n        elif a > c and b > c\
    \ and c > b:\n            return 2 * (a - c + b) / 3\n        elif a > b and b\
    \ > c and c > a:\n            return 2 * (a + b - c) / 3\n        elif a > b and\
    \ b > c and c > b:", "    \n    if a > b + c or a > c \n        or b > c \n  \
    \      or a > b + c \n        else -1\n    end\nend\n</code>\n<|/ a dscore=0 tags=julia,geometry,triangle\
    \ |>\n<| c |>\nI am so grateful for your help! Thank you!\n<|/ c |>\n<| a dscore=0\
    \ |>\nI have found a solution that works for any number of sides\n<code>", " \
    \   | a == 0 || b == 0 || c == 0 || a > b || b > c || c > a = -1\n    | a > 0\
    \ || b > 0 || c > a = b \xF7 c + 1\n    | a == 0 || b == 0 || c == 0 = a * b *\
    \ c\n    | otherwise = a * b * c / (a + b + c)\n</code>\n<|/ a dscore=2 |>\n<|\
    \ c |>\nI did this exact same thing and I still got negative numbers.\n<|/ c |>\n\
    <| c |>\nSorry I used the same formula for my solution, I've updated the answer\n\
    <|/ c |>\n<| c |>\nThis answer seems to be working now. Thank you\n<|/ c |>\n\
    <| c |>\nFor some reason I keep getting negative numbers. I've checked my code\
    \ and I changed it a lot and now I can't get it working correctly.\n<|/ c |>\n\
    <| c |>\nI updated the formula a little bit, now it should be working. I've tested\
    \ it and it works\n<|/ c |>\n<| a |>\nThe area of polygon is equal to the product\
    \ of the lengths of the sides, divided by two, times four. This is why you are\
    \ getting negative values for your code. \nFrom Wikipedia:", "    \n    area =\
    \ (b*b - a*c)/2\n    if area == 0 || area == -1 \n    then return 0\n    else\
    \ return area\n    end\n    \"\"\"\n    Given a point and a length, return the\
    \ point at the middle of the line \n    formed by the point and the length \n\
    \    Example: \n    >>> point_at_middle(Vector(2, 5), 3)\n    Vector(4.0, 5.0)\n\
    \    \"\"\"", "    \"\"\"\n    Given the lengths of the three sides of a triangle.\
    \ Return the area of\n    the triangle rounded to 2 decimal points if the three\
    \ sides form a valid triangle. \n    Otherwise return -1\n    Three sides make\
    \ a valid triangle when the sum of any two sides is greater \n    than the third\
    \ side.\n    Example:\n    >>> triangle_area(3, 4, 5)\n    6.0\n    >>> triangle_area(1,\
    \ 2, 10)\n    -1\n    \"\"\"\n    ", "    \n    if a + b > c and a + c > b and\
    \ b + c > a \n        return (a * b * c) / sqrt((a+b)*(a+c)*(b+c)); \n    else\n\
    \        return -1; \n    end\n    \n</cell>\n<code language=julia-1.0>\n@assert\
    \ triangle_area(3, 5, 7) == 13 / 5\n@assert triangle_area(2, 3, 1) == -1\n@assert\
    \ triangle_area(1, 4, 10) == 10\n</cell>\n<text>\nPractice\nWrite a function that\
    \ checks if a given number is prime.", "  \n    \"\"\"\n    Calculate the area\
    \ of a triangle\n    \"\"\"", "    if a + b <= c \n        then return (a * b)\
    \ / c\n    else\n        if a + c <= b \n            then return (a * c) / b\n\
    \        else\n            if b + c <= a \n                then return (b * c)\
    \ / a\n            else\n                return -1\nend\n\"\"\"\n    Sum all digits\
    \ in a number \n    e.g. sum_digits(1234) = 4 + 3 + 2 = 7\n    Example:\n    >>>\
    \ sum_digits(1234)\n    7\n    \"\"\"", "    if a < b && a < c && b < c\n    \
    \    area_triangle = 1\n    else\n        if a + b > c\n            area_triangle\
    \ = c / 2\n        else\n            area_triangle = a / 2\n    return area_triangle",
  "    if a+b > c || c+a > b  \n        return -1\n    else\n        area_of_triangle\
    \ = (a + b) * (c + a) * (b + c) / (4.0 * sqrt(a*a + b*b + c*c))\n        return\
    \ round(area_of_triangle, 2)\nend\n</cell>\n<cell>\ntriangle_area(3, 4, 5)\n</cell>\n\
    <text>\nProblem 5\nWrite a function that returns the area of a triangle with its\
    \ vertices ($a$, $b$, $c$)\n    given as a list of tuples $((a_1, b_1), (a_2,\
    \ b_2), (a_3, b_3))$.\n    Example:\n    >>> triangle_area([(1, 2), (2, 3), (3,\
    \ 4)])\n    2.0\n    >>> triangle_area([(1, 2), (2, 3), (3, 4)])\n    2.0\n  \
    \  \"\"\"", "    if (a>0) && (b>0) && (c>0)\n        return (1/3 * a ^ 2 * b ^\
    \ 2 * c)\n    else\n        return -1\n    end\n</code>\n<|/ a tags=math,triangular,area,wolfram-mathematica,geometry\
    \ |>\n<| c |>\nThis doesn't work for me. `triangle_area(12, 3, 4)` returns `0.999999981790589`\
    \ instead of `2.0`.\n<|/ c |>\n<| a |>\nHere is an algorithm from Wikipedia which\
    \ returns its area:\n<code>\ndouble area(double a, double b, double c) {\n  return\
    \ a * b * c / (3.0 * sqrt(a * a + b * b + c * c));\n}\n</code>\n<|/ a dscore=2\
    \ tags=math,triangular,area,wolfram-mathematica,geometry |>\n<| a dscore=2 |>\n\
    You asked, given three sides of a triangle what is the area of that triangle?\n\
    The area of the triangle is given by (4/3)*base*height.\nFor any triangle base\
    \ (length) and height (length) of the triangle can be computed by (a/b)+((b/c)+(a/c)+(b/a))\
    \ or a^2+b^2+c^2 but the latter is more concise and the area of the triangle can\
    \ be computed using that formula.\nThus the area of the triangle can be computed\
    \ as the area of the base divided by the area of the height.\nThe code below shows\
    \ how this can be done.\n<code>\narea[a_,b_,c_]:=(a/b)+((b/c)+(a/c)+(b/a))", " \
    \   \n    area_tri = a * b * c\n    area_tri_float = area_tri::Float64\n    if\
    \ area_tri_float > 0 then\n        area_tri_float = round(area_tri_float, digits\
    \ = 2)\n    else \n        area_tri_float = -1\n    \n    return area_tri_float\n\
    end", "    return (a + b + c) / 2.0\n</cell>\n<text>\nExercise 4\nWrite a function\
    \ that takes in a dictionary as input and returns the sum of the values in the\
    \ dictionary.", "    if a*a + b*b > c*c\n        return sqrt(c*c - a*a + b*b)\n\
    \    elseif a==0 or b==0 or c==0\n        return 0\n    elseif a==b or b==c or\
    \ c==a\n        return 0.5 * triangle_area(c,b,a) \n    else\n        return 0.5\
    \ * triangle_area(b,a,c) + 0.5 * triangle_area(a,c,b)\n    end\nend\n</code>\n\
    <|/ a dscore=0 tags=julia |>\n<| a |>\n<code>\n    using PyPlot", "    area =\
    \ 0.5 * (a + b + c)\n    return area", "    if (a < 0 && b < 0) || (b < 0 && c\
    \ < 0) || (c < 0 && a < 0) \n        then return -1\n    else\n        return\
    \ ((a + b + c)/2)\n    end\nend\n</cell>\n<code language=julia-1.0>\ntriangle_area(3,4,5)\n\
    </cell>\n<text>\nExercise: Can you write a function that calculates the area of\
    \ a triangle given any three sides, regardless of whether or not the sides are\
    \ given in order?", "    if ((a >= 0) && (b >=0) & (c >= 0))::Float64\n      \
    \  \n        return a * b * c\n    else\n        return -1\n    end\nend", " \
    \   if a>0 && b>0 && c>0\n        area_of_triangle = sqrt( ((a+b+c)/2)^2 + ((a-b+c)/2)^2\
    \ + ((a-b-c)/2)^2)\n        if area_of_triangle>1\n            area_of_triangle\
    \ = round(area_of_triangle*100)/100\n        else\n            area_of_triangle\
    \ = round(area_of_triangle*100)/100\n        else\n            area_of_triangle\
    \ = round(area_of_triangle*100)/100\n        else\n            area_of_triangle\
    \ = round(area_of_triangle*100)/100\n        else\n            area_of_triangle\
    \ = round(area_of_triangle*100)/100\n        else\n            area_of_triangle\
    \ = round(area_of_triangle*100)/100\n        end\n    else\n        area_of_triangle\
    \ = -1\n    end\n    return area_of_triangle\nend", "    return math.sqrt(math.pow(a,\
    \ 2) + math.pow(b, 2) + math.pow(c, 2))\n</code>\n<|/ a dscore=0 |>\n<| a tags=python,if-statement\
    \ |>\n<code>\na=input(\"Please enter first number:\")\nb=input(\"Please enter\
    \ second number:\")\nc=input(\"Please enter third number:\")"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
