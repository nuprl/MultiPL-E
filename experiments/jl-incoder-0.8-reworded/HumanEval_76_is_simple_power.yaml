name: HumanEval_76_is_simple_power
language: jl
prompt: "\"\"\"Your task is to write a function that returns true if a number x is\
  \ a simple\n    power of n and false in other cases.\n    x is a simple power of\
  \ n if n**int=x\n    For example:\n    >>> is_simple_power(1, 4)\n    true\n   \
  \ >>> is_simple_power(2, 2)\n    true\n    >>> is_simple_power(8, 2)\n    true\n\
  \    >>> is_simple_power(3, 2)\n    false\n    >>> is_simple_power(3, 1)\n    false\n\
  \    >>> is_simple_power(5, 3)\n    false\n    \"\"\"\nfunction is_simple_power(x::Int64,\
  \ n::Int64)::Bool \n"
tests: "using Test\n\n@testset begin\n\ncandidate = is_simple_power;\n\t@test(candidate(16,\
  \ 2) == true)\n\t@test(candidate(143214, 16) == false)\n\t@test(candidate(4, 2)\
  \ == true)\n\t@test(candidate(9, 3) == true)\n\t@test(candidate(16, 4) == true)\n\
  \t@test(candidate(24, 2) == false)\n\t@test(candidate(128, 4) == false)\n\t@test(candidate(12,\
  \ 6) == false)\n\t@test(candidate(1, 1) == true)\n\t@test(candidate(1, 12) == true)\n\
  end\n"
completions: ["    if is_power(n, x)\n        return true\n    return false\nend\n\
    </cell>\n<text>\n2.5 Exercise\nWrite a function that returns true if the number\
    \ n is a power of 4", "        if is_power(x, n) then\n            if is_power(x,\
    \ n-1) == true then\n                true\n            else\n                false\n\
    \            end\n        else\n            false\n        end\n    end\nend\n\
    \"\"\"\nYour task is to complete the function is_power_of_2::Int -> Bool which\
    \ returns true if a number x is a power of 2\nand false in other cases.\nx is\
    \ a power of 2 if 2**int=x\nFor example:\n>>> is_power_of_2(2)\ntrue\n>>> is_power_of_2(8)\n\
    true\n>>> is_power_of_2(12)\nfalse\n>>> is_power_of_2(1)\nfalse\n>>> is_power_of_2(3)\n\
    false\n>>> is_power_of_2(0)\nfalse\n\"\"\"", "    if n <= 1\n        return true\n\
    \    \n    if n == x \n        return true\n    \n    \n    return false\nend\n\
    \"\"\"\n## Solution\n\"\"\"", "    if is_power(x, n)\n        return true\n  \
    \  else\n        return false\n    end\nend\n</cell>\n<code language=julia-0.5>\n\
    is_simple_power(2, 2)\n</cell>\n<code language=julia-0.5>\nis_simple_power(1,\
    \ 4)\n</cell>\n<code language=julia-0.5>\nis_simple_power(8, 2)\n</cell>\n<text>\n\
    Task 10\nImplement the function is_power_of_two(x), which returns true if x is\
    \ a power of two.\nx must be a nonzero integer.\nx must be a power of two.", " \
    \   if n == 1 \n        return true\n    elif x == 0 \n        return false\n\
    \    elif x < 0 \n        return false\n    elif x&n == 0 \n        return false\n\
    \    else\n        return is_simple_power(x//n, n) \nend", "    if (n == 1)\n\
    \        true\n    else\n        if (x == 1)\n            true\n        else\n\
    \            if (x%n == 0)\n                true\n            else\n         \
    \       false\nend\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThank you so much\n<|/\
    \ c |>\n<| c |>\nplease consider accepting the answer if it helped you\n<|/ c\
    \ |>\n<| c |>\nPlease consider accepting the answer if it helped you\n<|/ c |>\n\
    <| c |>\nThanks to everyone who helped me\n<|/ c |>\n<| a |>\nA simple solution\
    \ for you:\n<code>", "    return x % n == 0\nend\n</cell>\n<code language=julia-0.6>\n\
    # TEST is_simple_power (9) (5\u2264x\u22646\u226420)\n@test is_simple_power(2,3)\n\
    @test is_simple_power(4,4)\n@test is_simple_power(6,6)\n@test is_simple_power(8,8)\n\
    @test is_simple_power(10,10)\n@test is_simple_power(10,11)\n@test is_simple_power(10,12)\n\
    @test is_simple_power(10,14)\n@test is_simple_power(20,20)\n@test is_simple_power(20,21)\n\
    @test is_simple_power(20,22)\n@test is_simple_power(20,23)\n@test is_simple_power(20,24)\n\
    @test is_simple_power(20,25)\n</cell>\n<text>\nProblem 8\n(10 Points) Write a\
    \ Julia function which returns the number of prime numbers less than or equal\
    \ to a given number.", "        if is_even(n)\n            n = n / 2\n       \
    \ else \n            return false\n        return is_power(x, n)", "    if is_power_of_two(x)\
    \ && is_power_of_two(n)\n    \n        function powers_of_two()\n        \n  \
    \      function is_powers_of_two(x)\n        \n        function is_power_of_two(x)\n\
    \            x /= 2\n            while x > 1\n                x /= 2\n       \
    \     end\n            return x == 1\n        end\n        \n        return is_power_of_two(abs(x))\n\
    \    end\n    return false\nend\n</cell>\n<code language=julia-1.4>\nis_simple_power(1,\
    \ 1)\n</cell>\n<code language=julia-1.4>\nis_simple_power(1, 4)\n</cell>\n<code\
    \ language=julia-1.4>\nis_simple_power(2, 2)\n</cell>\n<code language=julia-1.4>\n\
    is_simple_power(3, 2)\n</cell>\n<code language=julia-1.4>\nis_simple_power(3,\
    \ 1)\n</cell>\n<code language=julia-1.4>\nis_simple_power(5, 3)\n</cell>\n<text>\n\
    Problem 6\nUsing Julia's function is_power_of_two write a function that determines\
    \ whether\nn is a power of 2, for example 2 is a power of 2 because 2^2=4.", " \
    \   if is_simple_power_impl(x, n)\n    then return true\n    else return false\n\
    \    end\nend\n</cell>\n<text>\nProblem 9: is_power", "    if n == 0 then return\
    \ true\n    if is_simple_power(x, n / 2) then return true\n    else return false\n\
    end", "    if n<=1\n    then true\n    elseif n>64\n    then false\n    elseif\
    \ n==1\n    then true\n    elseif n==2\n    then true\n    elseif n==4\n    then\
    \ true\n    elseif n==8\n    then true\n    else\n        false\n    end\nend",
  "    if n==1 then return true\n    if n==2 then return true\n    else if n==3 then\
    \ return (x == n**3)\n    else return (x == n**(n-1))\nend\nis_simple_power(x::Int64,\
    \ n)", "    if is_simple_power(x,n)==true then \n        true\n    else\n    \
    \    false\n    end\nend\n</code>\n<|/ a tags=recursion,julia,bigint |>\n<| a\
    \ tags=recursion,julia,bigint dscore=0 |>\nA slightly modified version of the\
    \ other answers (which also uses recursion):\n<code>\nis_pow(x::BigInt, n::Int64)::Bool\n\
    \    try\n        x = BigInt(x)\n        n = BigInt(n)\n        if n == 0 return\
    \ true\n        if n < 0 return false\n        return is_pow(x * x, n-1)\n   \
    \ catch ex\n        return false\n    end\nend\n</code>\n<|/ a |>\n<| a tags=recursion,julia,bigint\
    \ |>\n<code>\nis_pow(x::BigInt, n::Int64)::Bool\n    if n < 0 return false\n \
    \   try\n        x = BigInt(x)\n        n = BigInt(n)\n        if x == 1 return\
    \ n == 0\n        return is_pow(x*x, n-1)\n    catch ex\n        return false\n\
    \    end\nend\n</code>\n<|/ a dscore=0 |>\n<| c |>\nCould you explain your answer\
    \ a little bit?\n<|/ c |>\n<| a tags=recursion,julia,bigint dscore=0 |>\nHere\
    \ is a solution using recursion and no try catch (but it is slower than the try\
    \ catch). I also added a special case for n=1 because it is the base case.\n<code>\n\
    is_pow(x::Int, n::Int64)::Bool = n < 0 || x == 1 || is_pow(x * x, n - 1)\n</code>\n\
    <|/ a |>\n<| a dscore=0 |>\nHere is another approach using recursion but with\
    \ a base case:\n<code>\njulia> const is_power = (a, b) -> (a == 1 || is_power(a\
    \ * a, b - 1))\nis_power (generic function with 1 method)", "    if is_power(x,\
    \ n) == true\n    then true\n    else false\nend function is_simple_power", " \
    \   if is_power2(n) == true\n        return true\n    else if n % 2 == 0\n   \
    \     return is_simple_power(x, n/2)\n    else\n        return false\n    end\n\
    end", "    if is_simple_power(x, n) = true \n        then \n        true\n   \
    \ else\n        false\n</code>\n<|/ a dscore=1 tags=julia |>\n<| c |>\nYou don't\
    \ need the `if` statement inside `is_simple_power`\n<|/ c |>\n<| c |>\nThanks!\
    \ I did not know you could do that.\n<|/ c |>\n<| a dscore=1 |>\nThis answer focuses\
    \ on how to solve this with higher-level functions:\n<code>\nn^(1:N) == x\n</code>\n\
    The \"higher level\" here is \"the power operator\" ^.\nWe can see what it does\
    \ with:\n<code>\njulia> Base.^(n::Integer, x::Integer) = n * x\n</code>\nIn fact,\
    \ it returns n*x, but only in the case where n is a power of x.\nSo we can solve\
    \ this with one of:\n<code>\njulia> n^(1:N) == x\ntrue", "    if n == 0 || x ==\
    \ 0\n    else x == n ** int(x) else false\nend", "    if n==1 return true\n  \
    \  if x==0 return false\n    if n>x return false\n    if is_simple_power(x-1,\
    \ n-1) return true\n    if is_simple_power(x, n-1) return true\n    return false\n\
    end\nis_simple_power(1,4)\n</cell>\n<code language=julia-1.5>\n@assert @is_simple_power(1,\
    \ 4) == true\n@assert @is_simple_power(2, 2) == true\n@assert @is_simple_power(8,\
    \ 2) == true\n@assert @is_simple_power(3, 2) == false\n@assert @is_simple_power(3,\
    \ 1) == false\n@assert @is_simple_power(5, 3) == false\n</cell>\n<text>\n\u041B\
    \u0435\u0433\u043A\u043E \u043F\u0440\u0435\u043E\u0431\u0440\u0430\u0437\u043E\
    \u0432\u0430\u0442\u044C is_simple_power \u0432 \u0447\u0430\u0441\u0442\u044C\
    \ \u0444\u0443\u043D\u043A\u0446\u0438\u0438 power_sum! \u0438\u0437 \u0444\u0443\
    \u043D\u043A\u0446\u0438\u0439 powers \u043D\u0430 \u043E\u0441\u043D\u043E\u0432\
    \u0435 \u043F\u0440\u0435\u043F\u0430\u0440\u0430\u0442\u044B \u0440\u0435\u0448\
    \u0435\u043D\u0438\u044F \u0434\u0432\u0443\u0445 \u0443\u0440\u0430\u0432\u043D\
    \u0435\u043D\u0438\u0439.", "    if is_power_integer(n)\n    then is_simple_power(x,\
    \ (n::Int64))\n    else x < n\n    endif\nend\n\"\"\"\n### Solution\n\"\"\"",
  "    if n==1 \n        return x==1\n    else if n==0\n        return true\n    else\n\
    \        if (x%n==0)\n            is_simple_power(x, n-1)\n        else\n    \
    \        is_simple_power(x, n+1)\n    end\nend\n    \n\"\"\"\n    Your task is\
    \ to implement a version of is_simple_power that returns false for a \n    non-power\
    \ of 3 and a non-power of 5.\n    You are not allowed to use any library functions.\
    \ \n\"\"\"", "    return x==n or x%n==0 \nend\n</cell>\n<text>\n6. Sum numbers\
    \ in an array", "    if is_power_of_n(n,x)\n        return true\n    end\n   \
    \ return false\nend", "    if n < 0 || n > x\n        return false\n    if n ==\
    \ 0\n        return true\n    if n <= x\n        return true\n    return is_simple_power(x\
    \ >> 1, n-1)\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"Your task is to write\
    \ a function that returns true if a number x is a simple\n    power of n and false\
    \ in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n\
    \    >>> is_simple_power(1, 4)\n    true\n    >>> is_simple_power(2, 2)\n    true\n\
    \    >>> is_simple_power(8, 2)\n    true\n    >>> is_simple_power(3, 2)\n    false\n\
    \    >>> is_simple_power(3, 1)\n    false\n    >>> is_simple_power(5, 3)\n   \
    \ false\n    \"\"\"", "    if is_power_of_two(n) == false\n    then\n        return\
    \ false\n    else \n        return (x^n)==x\n    end\nend\n</cell>\n<code language=julia-1.0>\n\
    @assert is_power_of_two(3) == true\n@assert is_power_of_two(5) == true\n@assert\
    \ is_power_of_two(7) == true\n@assert is_power_of_two(9) == false\n@assert is_power_of_two(13)\
    \ == false\n@assert is_power_of_two(25) == true\n@assert is_power_of_two(33) ==\
    \ true\n@assert is_power_of_two(49) == true\n@assert is_power_of_two(81) == true\n\
    @assert is_power_of_two(171) == true\n</cell>\n<text>\nProblem 3. Rewrite your\
    \ is_power_of_two function without using math.pow", "    if x == 1\n    true\n\
    \    else\n        if (x == n)\n            true\n            else\n         \
    \       if n % x == 0\n                    false\n                    else\n \
    \                       is_simple_power(x, n/x)\n                end\n       \
    \ end\n    end\nend\n</cell>\n<text>\nTests\nRun the cell below to test your solution.\
    \ These will all output \"Test passed\" before you move to the solution. Have\
    \ fun!", "    if n == 0 return true \n    else if n % x == 0 return false \n \
    \   else return is_simple_power(x, n-1)\nend", "    \"\"\"\n    You need to do\
    \ your best to write this function.\n    If you have a specific question about\
    \ this topic,\n    ask on the forums.\n    If you don't know where to start, consult\
    \ the video tutorials.\n    If you still need help, try searching the internet.\n\
    \    If you still can't figure it out, then open a new question.\n    \"\"\"\n\
    \    if n==1\n    then return true\n    else if n==2\n    then return x==1\n \
    \   else \n        if x==1\n        then return false\n        else \n       \
    \     if x==n\n            then return true\n            else \n             \
    \   if is_simple_power(x*(x - 1), n/2)\n                then return true\n   \
    \             else return false\n    end\nend\n</cell>\n<text>\nExercise 10",
  "    if is_pow_of_n(n, x) == true\n    then true\n    else false\n    end\nend",
  "    \n    if is_even(n) == false\n        if is_even(x) == false\n            return\
    \ false\n        end\n    end\n    if is_odd(n) == true\n        if is_odd(x)\
    \ == true\n            return true\n        end\n    end\n    if is_even(n) ==\
    \ true\n        if is_odd(x) == true\n            return false\n        end\n\
    \    end", "  if n==0\n    return true\n  else\n    return false\n</code>\n<|/\
    \ a |>\n<| a tags=recursion,julia,function dscore=2 |>\nSince this is a recursion\
    \ problem, you might want to use a helper function with recursion too (which can\
    \ be called recursively):\n<code>", "    if is_power_of_two(n) and n==1\n    then\
    \ return true\n    else \n        return false\n</code>\n<|/ a tags=python-3.x,python\
    \ dscore=1 |>\n<| c |>\nI thought the question was about a number being a *simple*\
    \ power of `n`.  Though they used `n` as the input for a function and used `n`\
    \ as the output, it could be any power of `n` as they didn't specify how the function\
    \ would be used.\n<|/ c |>\n<| c |>\nI agree, which is why I suggested the function\
    \ take `n` as the input, as that's the only way the output would need to depend\
    \ on `n`.\n<|/ c |>\n<| a tags=python-3.x,python |>\n<code>\ndef is_simple_power(x,\
    \ n):\n    return n & x == n\n</code>\n<|/ a dscore=0 |>\n<| a tags=python-3.x,python\
    \ |>\nThis solution does only use bitwise operators.\n<code>\ndef is_power_of_two(n):\n\
    \    return n == n & (n - 1)\n</code>\n<|/ a dscore=0 |>\n<| a |>\nA simple way\
    \ to do this in python:\n<code>\ndef powerOf(base, power):\n    if (power == 0)\n\
    \        return (base == 1)\n    return powerOf(base, power // base) and (base\
    \ % power == 0)\n</code>\n<|/ a tags=python-3.x,python dscore=0 |>\n<| c |>\n\
    This isn't correct, for example `powerOf(10, 4)` returns False.\n<|/ c |>\n<|\
    \ c |>\nYou have a mistake in your return statement. Should have returned `powerOf(base,\
    \ power // base) and (base % power == 0)` instead of `powerOf(base, power // base)\
    \ and (base % power != 0)`.\n<|/ c |>\n<| c |>\nYour code returns True when `powerOf(3,\
    \ 2)` should be False and vice versa. Also it returns True for powerOf(10, 0)\
    \ and powerOf(1, 0). Perhaps you should also check if the base is even or odd.\n\
    <|/ c |>\n<| a dscore=0 |>\n<code>\ndef is_power_of_two(n):\n    return n&(n-1)==n\n\
    </code>\n<|/ a tags=python-3.x,python |>\n<| c |>\nWhile this code may answer\
    \ the question, providing additional context regarding why and/or how this code\
    \ answers the question improves its long-term value.\n<|/ c |>\n<| a tags=python-3.x,python\
    \ dscore=0 |>\nA simple way:\n<code>\ndef check(n):\n   if n>1:", "    if is_power(n)\n\
    \        return true\n    else\n        return false\n</code>\n<|/ a |>\n<| a\
    \ |>\nJust to improve on Benjamin's answer, here is my take on it. It's a little\
    \ different than his, but I like to keep the recursive function as simple as possible.\
    \ He did a lot of work trying to get the recursive function down, so I just did\
    \ some extra work to give a simpler implementation.\n<code>", "    if x==0 ||\
    \ n==0 then \n        return false\n    elseif n==1 \n        return x==1\n  \
    \  elseif n==2 \n        return (x==1) || (x==4)\n    elseif n==4 \n        return\
    \ (x==1) || (x==4)\n    elseif n==5 \n        return (x==1) || (x==9) || (x==12)\n\
    \    elseif n==9 \n        return (x==1) || (x==9) || (x==12) || (x==20)\n   \
    \ elseif n==12 \n        return (x==1) || (x==9) || (x==12) || (x==20)\n    elseif\
    \ n==20 \n        return (x==1) || (x==9) || (x==12) || (x==20)\n    elseif n==7\
    \ \n        return (x==1) || (x==7) || (x==13) || (x==18)\n    elseif n==13\n\
    \        return (x==1) || (x==7) || (x==13) || (x==18)\n    elseif n==18 \n  \
    \      return (x==1) || (x==7) || (x==13) || (x==18) || (x==27)\n    elseif n==27\
    \ \n        return (x==1) || (x==7) || (x==13) || (x==18) || (x==27)\n    end\n\
    \    return false\nend\n</cell>\n<text>\nProblem 5", "    if n % x == 0 \n   \
    \     then true\n        else false\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    #Test is_simple_power function\n@test is_simple_power(2, 2)\n@test is_simple_power(8,\
    \ 2)\n@test is_simple_power(3, 2)\n@test is_simple_power(3, 1)\n@test is_simple_power(5,\
    \ 3)\n@test is_simple_power(1, 4)\n@test is_simple_power(0, 4)\n@test is_simple_power(1,\
    \ 0)\n@test is_simple_power(0, 0)\n@test is_simple_power(3, 1)\n</cell>\n<text>\n\
    Problem 4\nWe have already seen that is_simple_power(x, y) returns true if\nx\
    \ is a simple power of y.\nNow suppose that x is not an integral number and y\
    \ is a\ncomplex number.\nWrite a function is_complex_power that returns true if\
    \ x is a\ncomplex power of y and false otherwise.\nWe say a complex power is any\
    \ power of $i$\nwhere $i$ is a complex number.\nFor example:\n>>> is_complex_power(2,\
    \ 3j)\ntrue\n>>> is_complex_power(1, 3j)\nfalse\n>>> is_complex_power(1, 3j)\n\
    true\n>>> is_complex_power(1, -3j)\ntrue\n>>> is_complex_power(1, 3)\nfalse\n\
    >>> is_complex_power(1, 0)\nfalse\n>>> is_complex_power(1, 0)\ntrue\n>>> is_complex_power(1,\
    \ -0)\nfalse\n>>> is_complex_power(1, 0)\ntrue\n>>> is_complex_power(1, 4)\nfalse\n\
    >>> is_complex_power(1, 4)\ntrue\n>>> is_complex_power(1, 4j)\ntrue\n>>> is_complex_power(1,\
    \ -4j)\nfalse\n>>> is_complex_power(1, 4j)\ntrue\n>>> is_complex_power(1, -4j)\n\
    false\n>>> is_complex_power(1, -4j)\ntrue\n>>> is_complex_power(2, 3j)\nfalse\n\
    >>> is_complex_power(0, 3j)\nfalse\n>>> is_complex_power(-1, 3j)\nfalse\n>>> is_complex_power(-2j,\
    \ 3j)\nfalse\n>>> is_complex_power(2, -3j)\nfalse\n>>> is_complex_power(3, 3j)\n\
    false\n>>> is_complex_power(-3j, 3j)\nfalse\n>>> is_complex_power(2j, -3j)\nfalse\n\
    >>> is_complex_power(2j, 3j)\ntrue\n>>> is_complex_power(2j, 3j)\nfalse\n>>> is_complex_power(-2j,\
    \ -3j)\nfalse\n>>> is_complex_power(-2j, 3j)\ntrue\n>>> is_complex_power(-2j,\
    \ -3j)\nfalse\n>>> is_complex_power(-2j, -3j)\ntrue\n>>> is_complex_power(-2j,\
    \ 3)\nfalse\n", "    if is_power_of_2(n) == true && x == n**int then \n      \
    \  true\n    else \n        false\n    end\nend\n</cell>\n<code language=julia-1.0>\n\
    @time is_simple_power(2, 4)\n@time is_simple_power(2, 2)\n@time is_simple_power(8,\
    \ 2)\n@time is_simple_power(3, 2)\n@time is_simple_power(3, 1)\n@time is_simple_power(5,\
    \ 3)\n</cell>\n<code language=julia-1.0>\n@time is_simple_power(2, 4)\n</cell>\n\
    <text>\nProblem 4b\nExercise 4.1\nWrite a function that takes as input an integer\
    \ $n$ and returns $2^n$ if $n$ is a power of 2 and 0 otherwise. Use this function\
    \ to check whether a number is prime.", "    if n==0\n        return true\n  \
    \  if n%2==0 \n        return false\n    if x==1\n        return true\n    if\
    \ is_simple_power(x, n//2)\n        return true\n    return false\nend\n</cell>\n\
    <text>\nProblem 3", "        \n    if x==1\n        return true\n    return false",
  "    # Your code here\n    if n % x == 0\n        true\n    else\n        false\n\
    \    end\nend\n</cell>\n<text>\nTask 2\nThe function below implements the \"modular\
    \ exponentiation\" algorithm.\nIt works under a modular divisor (modulo) of $n$\
    \ and returns a power in base $n$ with respect to $n$.", "    if is_pow_of_n(x,\
    \ n) == true\n    else \n        return false\n    end\nend\n</cell>\n<cell>\n\
    \"\"\"\nA more general function to test for powers of n is is_pow_of_n(x,y)",
  "    if x == n**x \n    then true\n    else false\nend", "    if (x==1) or (n==1)\n\
    \        return true\n    else\n        return false", "    if x==1\n        true\n\
    \    else if n==1\n        x==n\n    else\n        if n%2==1\n            if is_simple_power(x/n,\
    \ n-1)\n            else\n                false\n        else\n            if\
    \ is_simple_power(x/n, n/2)\n            else\n                false\n       \
    \ end\n    end\nend\n</cell>\n<code language=julia-0.5>\nis_simple_power(1, 4)\n\
    </cell>\n<code language=julia-0.5>\nis_simple_power(2, 2)\n</cell>\n<code language=julia-0.5>\n\
    is_simple_power(8, 2)\n</cell>\n<code language=julia-0.5>\nis_simple_power(3,\
    \ 2)\n</cell>\n<code language=julia-0.5>\nis_simple_power(3, 1)\n</cell>\n<code\
    \ language=julia-0.5>\nis_simple_power(5, 3)\n</cell>\n<text>\nProblem 4", " \
    \   if n == 0\n    then return true\n    else if n == 1\n    then return false\n\
    \    else if x < n\n    then return false\n    else if x == n\n    then return\
    \ true\n    else if n % x == 0\n    then return true\n    else return false\n\
    end", "    if is_power(x, n) == true \n        then return true \n        else\
    \ return false \n    end\nend\n</cell>\n<text>\nExercise 6\nWrite a function that\
    \ returns true if the argument is a power of 2 and the argument is not the number\
    \ 4\nx is a power of 2 if n**int=x\nx is not a power of 2 if n!=x\nFor example:\n\
    >>> is_power_2(1, 4)\ntrue\n>>> is_power_2(2, 4)\nfalse\n>>> is_power_2(8, 4)\n\
    true\n>>> is_power_2(3, 4)\nfalse\n>>> is_power_2(5, 4)\nfalse\n>>> is_power_2(5,\
    \ 3)\nfalse\n>>> is_power_2(3, 1)\nfalse\n>>> is_power_2(5, 2)\nfalse\n>>> is_power_2(5,\
    \ 1)\nfalse\n>>> is_power_2(1, 2)\nfalse\n>>> is_power_2(1, 1)\nfalse\n>>> is_power_2(0,\
    \ 0)\nfalse\n>>> is_power_2(0, 1)\nfalse\n>>> is_power_2(1, 0)\nfalse\n>>> is_power_2(1,\
    \ 1)\nfalse\n\"\"\"", "  if n==1\n  then\n    return true\n  elseif n==2\n  then\n\
    \    return (x==1)\n  else\n    return false\n  end\nend\n</cell>\n<text>\nTest\
    \ Your Solution\nRun the cell below. If there is no output, then your solution\
    \ did not pass the test case.", "    if is_power(n, x)\n        return True\n\
    \    else\n        return False\nend", "    if is_pow(x,n)\n    then return true\n\
    \    else return false\n    end\nend\n</code>\n<|/ a dscore=0 tags=julia |>\n\
    <| a |>\n<code>\nis_pow(x, n) = x < n && (x % n) == 0\n</code>\n<|/ a tags=julia\
    \ dscore=0 |>\n<| a tags=julia |>\nAnother solution:\n<code>\nis_pow(x, n) = x\
    \ < n && (x % n) == 0\n</code>\n<|/ a dscore=0 |>\n<| a |>\nI came up with a variation\
    \ of's solution above. \nI came up with the following solution which does not\
    \ require the division operator to be defined:\n<code>\njulia> using Numbers",
  "    if n==1 \n        then return true \n    else \n        then \n           \
    \ if x % n==0 \n                then return true \n            else \n       \
    \         return false \n        fi \n    fi \nend", "    if is_power_of_2(n)\
    \ == true\n        true\n    elseif n%n == 0\n        true\n    elseif n%n ==\
    \ 1\n        false\n    else\n        false\n    end\nend\n</cell>\n<code language=julia-0.5>\n\
    is_simple_power(1,4)\n</cell>\n<code language=julia-0.5>\nis_power_of_2(1)\n</cell>\n\
    <code language=julia-0.5>\nis_power_of_2(2)\n</cell>\n<code language=julia-0.5>\n\
    is_power_of_2(3)\n</cell>\n<code language=julia-0.5>\nis_power_of_2(4)\n</cell>\n\
    <code language=julia-0.5>\nis_power_of_2(5)\n</cell>\n<code language=julia-0.5>\n\
    is_power_of_2(6)\n</cell>\n<code language=julia-0.5>\nis_power_of_2(7)\n</cell>\n\
    <code language=julia-0.5>\nis_power_of_2(8)\n</cell>\n<code language=julia-0.5>\n\
    is_power_of_2(9)\n</cell>\n<code language=julia-0.5>\nis_power_of_2(10)\n</cell>\n\
    <code language=julia-0.5>\nis_power_of_2(11)\n</cell>\n<code language=julia-0.5>\n\
    is_power_of_2(12)\n</cell>\n<code language=julia-0.5>\nis_power_of_2(13)\n</cell>\n\
    <code language=julia-0.5>\nis_power_of_2(14)\n</cell>\n<code language=julia-0.5>\n\
    is_power_of_2(15)\n</cell>\n<code language=julia-0.5>\nis_power_of_2(16)\n</cell>\n\
    <code language=julia-0.5>\nis_power_of_2(17)\n</cell>\n<code language=julia-0.5>\n\
    is_power_of_2(18)\n</cell>\n<code language=julia-0.5>\nis_power_of_2(19)\n</cell>\n\
    <code language=julia-0.5>\nis_power_of_2(20)\n</cell>\n<code language=julia-0.5>\n\
    is_power_of_2(21)\n</cell>\n<code language=julia-0.5>\nis_power_of_2(22)\n</cell>\n\
    <code language=julia-0.5>\nis_power_of_2(23)\n</cell>\n<code language=julia-0.5>\n\
    is_power_of_2(24)\n</cell>\n<code language=julia-0.5>\nis_power_of_2(25)\n</cell>\n\
    <code language=julia-0.5>\nis_power_of_2(26)\n</cell>\n<code language=julia-0.5>\n\
    is_power_of_2(27)\n</cell>\n<code language=julia-0.5>\nis_power_of_2(28)\n</cell>",
  "    if is_power(x)\n        return true\n    end", "    if n==1 then return false\
    \ end\n    \n    flag = is_simple_power(x,n/2)\n    \n    if is_simple_power(x,\
    \ n/2) then return true\n    else return false end\nend", "    if n^x > x \n \
    \       then false\n        else is_simple_power(x, n-1) // 0\n    end\nend",
  "    if is_simple_power(x, n) == true\n    true\nelse\n    false\nend", "    if\
    \ n==0 \n        then true\n    else\n        if n==1 \n            then x==1\n\
    \        else\n            if n==2 \n                then x==pow(x,2,x)\n    \
    \        else\n                if n==3 \n                    then x==pow(x,3,x)\n\
    \                else\n                    if n==4 \n                        then\
    \ x==pow(x,4,x)\n                    else\n                        if n==5 \n\
    \                            then x==pow(x,5,x)\n                        else\n\
    \                            if n==6 \n                                then x==pow(x,6,x)\n\
    \                            else\n                                if n==7 \n\
    \                                    then x==pow(x,7,x)\n                    \
    \            else\n                                    if n==8 \n            \
    \                            then x==pow(x,8,x)\n                            \
    \        else\n                                        if n==9 \n            \
    \                                then x==pow(x,9,x)\n                        \
    \                else\n                                            if n==10 \n\
    \                                                then x==pow(x,10,x)\n       \
    \                                     else\n                                 \
    \               if n==11 \n                                                  \
    \  then x==pow(x,11,x)\n                                                else\n\
    \                                                    if n==12 \n             \
    \                                           then x==pow(x,12,x)\n            \
    \                                        else\n                              \
    \                          if n==13 \n                                       \
    \                     then x==pow(x,13,x)\n                                  \
    \                      else\n                                                \
    \            false\n    return true\nend\nend", "    if is_power(x)\n        is_power(n)\n\
    \    return \nend\n</cell>\n<text>\nExercise 7\nWrite a function is_square which\
    \ returns true when x and y are both integers and y is an integer power of x.",
  "    if is_power_of_two(x) && is_power_of_two(n)\n        if x==n \n           \
    \ true\n        else\n            false\n    end\nend\n</cell>\n<code language=julia-1.0>\n\
    is_simple_power(3, 1)\n</cell>\n<code language=julia-1.0>\nis_power_of_two(3)\n\
    </cell>\n<code language=julia-1.0>\nis_power_of_two(9)\n</cell>\n<text>\nProblem\
    \ 2.2", "    if is_power_of_two(x)==false && is_power_of_two(n)==false \n    \
    \    then return false\n    else\n        p <- ceil_power(n,x)\n        result\
    \ <- true\n        while true\n            result <- is_power_of_two(p)\n    \
    \        if result==false \n                then p <- p - 2\n                else\
    \ return true\n    end\nend\n\"\"\"\nis_power_of_two(x::Int64)::Bool\n    check\
    \ wheter x is power of 2\n\"\"\"", "    if is_even(n) || is_even(x)\n        true\n\
    \    else\n        false\nend\n</cell>\n<code language=julia-1.3>\n\"\"\"Your\
    \ task is to write a function that returns the sum of n numbers. \n    x is a\
    \ number that represents n numbers.\n    For example:\n    >>> get_sum(1, 3)\n\
    \    4\n    >>> get_sum(3, 4)\n    7\n    \"\"\"", "    if is_power_of_n(x::Int64,\
    \ n)\n        return true\n    else \n        return false\nend\n</cell>\n<code\
    \ language=julia-0.5>\n\"\"\"Write a function is_power_of_n that checks if a number\
    \ n is a simple power of n (n ^ int)\n    x is a simple power of n if n**int=x\n\
    \    For example:\n    >>> is_power_of_n(1, 4)\n    true\n    >>> is_power_of_n(2,\
    \ 2)\n    true\n    >>> is_power_of_n(8, 2)\n    true\n    >>> is_power_of_n(3,\
    \ 2)\n    false\n    >>> is_power_of_n(3, 1)\n    false\n    >>> is_power_of_n(5,\
    \ 3)\n    false\n    \"\"\"", "    if x == 1 \n        then return true\n    else\
    \ if n == 0\n        then return true\n    else \n        if is_power_of_two(x)\n\
    \            then return is_power_of_two(x) or is_simple_power(x, n / 2)\n   \
    \         else return false\n        end\n    end\nend\n</code>\n<|/ a |>\n<|\
    \ c |>\nCould you provide some details on why this works? Would be much appreciated.\n\
    <|/ c |>\n<| a tags=integer-arithmetic,julia,algorithm,primes dscore=4 |>\nA more\
    \ efficient solution is to use Babylonian method to find prime factorization,\
    \ which does not require trial division:\n<code>", "    if n == 1 \n        then\
    \ true\n        else (n % x == 0)\n</code>\n<|/ a dscore=1 tags=python-3.x,python,if-statement\
    \ |>\n<| a tags=python-3.x,python,if-statement |>\n<code>\ndef isPowerOfTwo(n):\
    \ \n    if n <= 1: \n        return False \n    else: \n        while(n > 1):\
    \ \n            temp = n \n            n = n/2 \n            if temp % 2 != 0:\
    \ \n                return False \n        return True \n</code>\n<|/ a dscore=1\
    \ |>\n<| c |>\nWelcome to Stack Overflow! Please don't answer just with source\
    \ code. Try to provide a nice description about how your solution works. See:\
    \ [How do I write a good answer?](https://stackoverflow.com/help/how-to-answer).\
    \ Thanks\n<|/ c |>\n<| a tags=python-3.x,python,if-statement dscore=1 |>\n<code>\n\
    def isPowerOfTwo(n):\n    # n is an integer greater than 1\n    if n>1:\n    \
    \    while n>1:\n            if((n&1)==0):\n                return False\n   \
    \         else:\n                n=n>>1\n        return True\n    else:\n    \
    \    return False\n</code>\n<|/ a |>\n<| a dscore=0 |>\nHere is the answer:\n\
    <code>\ndef isPowerOfTwo(n):\n    if n<=1:\n        return False\n    flag=True\n\
    \    for i in range(n):\n        flag=flag and ((i&1)==0)\n    return flag\n</code>\n\
    <|/ a tags=python-3.x,python,if-statement |>\n<| a tags=python-3.x,python,if-statement\
    \ |>\n<code>\ndef isPowerOfTwo(n):\n  for i in range(0, n):\n    if( (i&1)==0):\n\
    \      return False\n  return True\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0\
    \ tags=python-3.x,python,if-statement |>\n<code>\ndef isPowerOfTwo(n):\n    for\
    \ i in range(n):\n        if( (i&1)==0):\n            return False\n    return\
    \ True\n</code>\n<|/ a |>\n<| a dscore=0 |>\n<code>\ndef isPowerOfTwo(n):\n  for\
    \ i in range(0, n):\n    if( (i&1)==0):\n      return False\n  return True\n</code>\n\
    <|/ a tags=python-3.x,python,if-statement |>\n<| a |>\n<code>\ndef isPowerOfTwo(n):\n\
    \  for i in range (1, n+1):\n    if( (i&1)==0):\n      return False\n  return\
    \ True\n</code>\n<|/ a tags=python-3.x,python,if-statement dscore=0 |>\n<| a |>\n",
  "    if is_pow(x, n)\n        false\n    else\n        true\n    end\nend", "  \
    \  if n==1 return true\n    if n==x return true\n    return false\nend\n</cell>\n\
    <text>\nProblem 3: is_power_of_two\nWrite a function that returns true if a number\
    \ x is a power of two. x is a power of two is n is a power of two if n is even.\n\
    For example, 5 is a power of two (2^1).\nWrite a generic function is_power_of_two(x::Int64),\
    \ that receives a number and returns a Bool value.\nThis function is not restricted\
    \ to check whether x is a power of 2 or not, it can be used with any number.",
  "    if is_power_of_2(x)==true && is_power_of_2(n)==true && x>0 && n>0\n       \
    \ pow = x\n        mul = n/pow\n        result = is_simple_power(pow,mul)\n  \
    \  end\n    return result\nend", "    if is_power_of_two(n) == true\n        true\
    \ \n    else\n        if n % x == 0\n            false\n        else\n       \
    \     if x == 1\n                true\n            else\n                if n\
    \ % x == 1\n                    false\n                else\n                \
    \    if x == n\n                        true\n                    else\n     \
    \                   if n % x == 3\n                            false\n       \
    \                 else\n                            if x == n+1\n            \
    \                    true\n                            else\n                \
    \                is_simple_power(x, n+1)\n        end\n    end\nend\nis_simple_power(4,\
    \ 2)\n</cell>\n<text>\nProblem 6: Write a function that calculates the factorial\
    \ of a number.", "    if n==0 then return false \n    else if n==1 then return\
    \ true\n    elseif x mod n==0 then is_simple_power(x, n-1) else false\n    end\n\
    end", "    if x==0 || n==0\n    true\n    else\n    (x%n)==0\nend\n</cell>\n<text>\n\
    Exercise 2: Compute the following number:\n$$ \\large\n\\begin{align}\n\\frac{1}{4}x^4-3x^2+3x+5\n\
    \\end{align}\n$$\nHint: use Julia syntax", "    if isoddint(n) || isevenint(n)\
    \ || isoddint(x) || isevenint(x) || n<1 || n>9\n    true\n    else \n        (if\
    \ mod(x,n)==0 && mod(n,n)==0 then \n            if div(x,n)==n && div(n,n)==n\
    \ then true\n            else false\n            end)\n    end\nend\n</cell>\n\
    <code language=julia-1.6>\n@assert is_simple_power(3, 1) == true\n@assert is_simple_power(1,\
    \ 4) == true\n@assert is_simple_power(1, 5) == false\n@assert is_simple_power(2,\
    \ 2) == true\n@assert is_simple_power(7, 2) == true\n@assert is_simple_power(3,\
    \ 2) == false\n@assert is_simple_power(3, 3) == false\n@assert is_simple_power(5,\
    \ 3) == false\n@assert is_simple_power(8, 2) == true\n@assert is_simple_power(1,\
    \ 3) == false\n@assert is_simple_power(1, 5) == false\n</cell>\n<text>\nA more\
    \ efficient implementation to compute the same result as previous implementations,\
    \ using the property that if x**n == x then x**n x is equal to x:", "    if is_power_of_two_n(n)\
    \ then \n        return (n*x)%n==0\n    else\n        return false\n    end\n\
    end\n</cell>\n<text>\nQuestion 3: Write a function that returns the number of\
    \ digits in the decimal representation of x.\nFor example, get_decimal(15) should\
    \ return 1.\nWrite the function without using any non-base library function except\
    \ for isinteger.", "    if is_power_of_2(x)\n        return (is_power_of_2(n)\
    \ && is_power_of_2(n*x))\n    else\n        return (x != 0)\nend\n</cell>\n<text>\n\
    Exercise 4.5: Write a function which returns True if a number is a power of n\
    \ and False otherwise. Your function should accept two integers, n and x, as arguments.",
  "    if is_powern(n, x)\n        return true\n    else\n        return false\n \
    \   end\nend\n</cell>\n<text>\nAs a reminder, the function is_powern returns true\
    \ if x is a power of a number n.", "    if n<=1\n        return true\n    elif\
    \ n>x\n        return false\n    else\n        return is_simple_power(x, n-1)\n\
    end", "    if is_power2(n) == true \n        then is_simple_power(x, n-1)\n  \
    \      else false\n    end\nend", "    if is_simple_power(n, x)\n        true\n\
    \    else\n        false\n    end\nend\n</cell>\n<text>\nTask 10: Write a function\
    \ is_simple_power of type Int -> Int -> Bool that takes\n    two simple powers\
    \ as arguments and returns true if and only if the first argument is\n    a simple\
    \ power of the second argument.\n    For example:\n    >>> is_simple_power(1,\
    \ 4)\n    true\n    >>> is_simple_power(2, 2)\n    true\n    >>> is_simple_power(8,\
    \ 2)\n    true\n    >>> is_simple_power(3, 2)\n    false\n    >>> is_simple_power(3,\
    \ 1)\n    false\n    >>> is_simple_power(5, 3)\n    false\n    \"\"\"", "    if\
    \ n==0 \n        true\n    else \n        if x==n\n            true\n        else\n\
    \            if x<n \n                if is_simple_power(x, n-n) \n          \
    \          true\n                else \n                    false\n          \
    \  else \n                false\n        end\n    end\nend\n</cell>\n<code language=julia-1.6>\n\
    is_simple_power(3, 2)\n</cell>\n<text>\nExercise 6. Write a function that returns\
    \ true if a number is even or false if not. \n    x is an even number if x is\
    \ even. \n    x is not an even number otherwise\n    For example:\n    >>> is_even(2)\n\
    \    true\n    >>> is_even(3)\n    false\n    >>> is_even(-2)\n    false\n   \
    \ >>> is_even(25)\n    true\n    >>> is_even(-20)\n    false\n    >>> is_even(-10)\n\
    \    false\n    \"\"\"", "    return (Int64(x) == Int64(x**Int64(n))) \nend\n\
    </cell>\n<code language=julia-0.6>\n@time is_simple_power(2, 2)\n</cell>\n<code\
    \ language=julia-0.6>\n@time is_simple_power(4, 3)\n</cell>\n<code language=julia-0.6>",
  "    \n    if n == 1 \n        return true\n    \n    if n == 2 \n        return\
    \ (x == 1)\n    \n    if n == 3 \n        return ((x==1)&&(x==2)&&(x==4))\n  \
    \  \n    if n == 4 \n        return ((x==1)&&(x==2)&&(x==3)&&(x==4))\n    \n \
    \   if n == 5 \n        return ((x==1)&&(x==2)&&(x==3)&&(x==4)&&(x==5))\n    \n\
    \    if n == 6 \n        return ((x==1)&&(x==2)&&(x==3)&&(x==4)&&(x==5)&&(x==6))\n\
    \    \n    if n == 7 \n        return ((x==1)&&(x==2)&&(x==3)&&(x==4)&&(x==5)&&(x==6)&&(x==7))\n\
    \    \n    if n == 8 \n        return ((x==1)&&(x==2)&&(x==3)&&(x==4)&&(x==5)&&(x==6)&&(x==7)&&(x==8))\n\
    \    \n    if n == 9 \n        return ((x==1)&&(x==2)&&(x==3)&&(x==4)&&(x==5)&&(x==6)&&(x==7)&&(x==8)&&(x==9))\n\
    \    \n    if n == 10 \n        return ((x==1)&&(x==2)&&(x==3)&&(x==4)&&(x==5)&&(x==6)&&(x==7)&&(x==8)&&(x==9)&&(x==10))\n\
    \    \n    return false\n    \nend\n</cell>\n<code language=julia-1.5>", "if n<=0\
    \ \n    return false\nelse if n==1 \n    return true\nelse\n    if is_simple_power(x,\
    \ n-1) \n        return true\n    else\n        return false\n    end\nend\n</cell>\n\
    <code language=julia-1.2>", "    if x == 1 \n        then return true\n    else\
    \ if x == n\n        then return true\n    else \n        return false\n</code>\n\
    <|/ a tags=math,julia,algorithm |>\n<| c |>\nthank you. I'm new here and I didn't\
    \ know what to write here.\n<|/ c |>\n<| c |>\nGreat! I added some code to my\
    \ answer to make it a bit clearer. Let me know if you have more questions.\n<|/\
    \ c |>\n<| c |>\nThanks! I'm trying the first two ideas, your function works fine\
    \ but I need to have my function as I have done in the post because that is what\
    \ I've been asked to do. Maybe I will try to come up with another question later,\
    \ I just need this to be done now. Thank you so much for answering!\n<|/ c |>\n\
    <| c |>\nYou can always accept this answer if it worked for you. Just click the\
    \ checkmark below the voting arrows.\n<|/ c |>\n<| c |>\nI really appreciate your\
    \ help and the time you took to answering me. I tried to accept the answer, but\
    \ I'm afraid I do not have the enough reputation. The system said that I needed\
    \ to wait 1 hour.\n<|/ c |>\n<| a tags=math,julia,algorithm |>\nSince you said\
    \ you were required to write your function in Julia, here are some suggestions:\n\
    <code>\nis_powerof(n::Integer, x::Integer)::Bool\n    if x == 1\n        true\n\
    \    else\n        if x == n\n            true\n        else\n            false\n\
    \        end\n    end\nend\n</code>\nThis can easily be changed to a function\
    \ of the form x -> n -> Bool by replacing the if x == 1 with if x == n.\n<code>\n\
    is_powerof(n::Integer, x::Integer)::Bool\n    if x == 1\n        true\n    else\n\
    \        if x == n\n            true\n        else\n            if n != 1\n  \
    \              is_powerof(n, n * x)\n            else\n                false\n\
    \            end\n        end\n    end\nend\n</code>\nThis function has O(n^2)\
    \ time complexity, so it won't work on the scale that you need it to. Since this\
    \ function is O(n^2), I wonder how you can get it to work on a computer. I'm guessing\
    \ that the answer will be to use recursion. Something like this.\n<code>\nis_powerof(n::Integer,\
    \ x::Integer)::Bool\n    if x == 1\n        true\n    else\n        if x == n\n\
    \            true\n        else\n            if n != 1\n                is_powerof(n,\
    \ n", "    if x==1\n        return true\n    return (x/n)==x", "    if is_power(n)\n\
    \        is_simple_power(x, n-1)\n    end\nend \n\"\"\"\n    \nis_power(x::Int64)::Bool\n\
    \    if is_power2(x)\n        if x == 1\n            return true\n        end\n\
    \        if x == 2\n            return true\n        end\n        return false\n\
    \    end\n    return false\nend\n\"\"\"\n    \nis_power2(x::Int64)::Bool\n   \
    \ if x < 1\n        return false\n    end\n    if x == 0\n        return true\n\
    \    end\n    if x > 1\n        return false\n    end\n    if x % 2 == 0\n   \
    \     return true\n    end\n    return is_power2(x / 2)\nend\n\"\"\"\n    \n\"\
    \"\"\nis_simple_power(x::Int64, n)::Bool\n    if is_simple_power(x, n) \n    \
    \    return true\n    end\n    return false\nend\n\"\"\"\n    \n\"\"\"\nis_power(x::Int64)::Bool\n\
    \    return is_power2(x)\nend\n\"\"\"\n    \n\"\"\"\nis_power(x::Int64)::Bool\n\
    \    if is_power2(x)\n        if x == 1\n            return true\n        end\n\
    \        if x == 2\n            return true\n        end\n        return false\n\
    \    end\n    return false\nend\n\"\"\"\n    ", "    if is_power_of_n(n, x)  \n\
    \        function is_power_of_n(x::Int64, n::Int64)::Bool\n            if is_power_of_n_int(x,n)\n\
    \            true\n            else \n                false\n        end\n   \
    \ end\nend", "    if is_simple_power(n, int(x))\n    true\n    else\n        false\n\
    end\n</cell>\n<code language=julia-1.6>\nis_simple_power(3, 2)\n</cell>\n<code\
    \ language=julia-1.6>", "    if x == n\n        return True\n    if x < n\n  \
    \      return false\n    return is_simple_power(n::Int64, x::Int64)\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nThis doesn't really address the question, since you\
    \ haven't explained how this relates to Python.\n<|/ c |>\n<| c |>\nHe doesn't\
    \ mention Python, just R\n<|/ c |>\n<| c |>\nthe OP explicitly states \"In R\"\
    \ in the question, so this is a solution for R only.\n<|/ c |>\n<| c |>\nHe does\
    \ mention \"In R\", but doesn't mention \"In Python\", and he's apparently a Python\
    \ user, which means he doesn't need an R solution either. So I think it's fair\
    \ to say that this is a Python solution only.\n<|/ c |>\n<| a tags=numbers,r,if-statement,conditional-statements\
    \ dscore=0 |>\n<code>\nis_simple_power <- function(x, n) \n{\n  ifelse(n==1, x==n,\
    \ \n         ifelse(n<1, (x/n)==floor(x/n), \n                (x/n)==floor(x/n)-1))\n\
    }\n</code>\n<|/ a |>\n<| a tags=numbers,r,if-statement,conditional-statements\
    \ |>\n<code>\nis_simple_power <- function(x, n) \n{\n  ifelse(n==1, x==n, \n \
    \        ifelse(n<1, (x/n)==floor(x/n), \n                (x/n)==floor(x/n)-1))\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| c |>\nPlease add an explanation of how this\
    \ solves the problem\n<|/ c |>\n<| a |>\nI hope this help someone. I wrote some\
    \ code in R to check a number is a simple power of some integer and I tested it\
    \ for all the cases. \n<code>\nis_simple_power <- function(n, x) \n{\n  if (n\
    \ == 1) {\n    if (x == 1) {\n      return TRUE\n    } else if (x > 1) {\n   \
    \   return(FALSE)\n    }\n  }\n  if (x < n) {\n    return(FALSE)\n  }\n  is_simple_power(n,\
    \ x %% n)\n}", "    power = n ^ int(x)\n    return power==x \nend\n</cell>\n<text>\n\
    Problem 3\nThe function is_simple_power_of_two checks wheter a number x is a power\
    \ of two.", "    if n == 0\n    then return false\n    else if x /= n\n    then\
    \ return true\n    else return is_simple_power(x, n-1)\nend \n</code>\n<|/ a |>\n\
    <| c |>\nI like that you went to trouble to figure out how to do it! The tricky\
    \ part for me is learning how to do it. Thank you so much!\n<|/ c |>\n<| c |>\n\
    The OP asked for a recursive solution, so the answer given is not correct. See\
    \ the comments on the question.\n<|/ c |>\n<| c |>\nYes, I was referring to a\
    \ recursive solution. I think the answer is incorrect in the sense that if n =\
    \ 0, the answer returns true, but according to OP it should return false. I also\
    \ think the OP should have made clearer how it works before posting a solution.\n\
    <|/ c |>\n<| c |>\nPlease see my comment on the question.\n<|/ c |>\n<| c |>\n\
    I edited my answer, I hope that answers your question. If not, please comment.\
    \ Thank you.\n<|/ c |>\n<| a tags=recursion,factorial,math,haskell,algorithm |>\n\
    In case anybody needs a solution for factorial using recursions, here's mine below:\n\
    <code>\nfactorial :: Int -> Int\nfactorial 1 = 1\nfactorial n = n * factorial\
    \ (n-1)\n</code>\n<|/ a dscore=5 |>\n<| c |>\nIt would be better to state what\
    \ you are doing or add comments to your code snippet to explain what you are doing.\n\
    <|/ c |>\n<| c |>\nThanks for the comment. Done.\n<|/ c |>\n<| c |>\nThis is not\
    \ correct: it works for factorial n, but for factorial 0!, it does not terminate.\
    \ `factorial 0 = 0` and `factorial 1 = 1`, so this does not work.\n<|/ c |>\n\
    <| c |>\nGood catch. Updated the code.\n<|/ c |>\n<| a tags=recursion,factorial,math,haskell,algorithm\
    \ dscore=5 |>\nThe Haskell way to solve this problem is to use induction.\nAn\
    \ inductive proof of n! for any n is by induction on n. In each case, assume that\
    \ n is even, otherwise assume that n is odd. If n is even, divide it by two, reduce\
    \ the remainder by one, multiply it by n. Induction continues until you reach\
    \ zero and you have proven your base case.\nHere's a H", "    if n==0 \n     \
    \   true \n    else \n        if n%2==0 \n            false \n        else \n\
    \            if n%4==0 \n                true \n            else \n          \
    \      if n%8==0 \n                    true \n                else \n        \
    \            true\n</code>\n<|/ a dscore=1 |>\n<| a tags=big-o,python |>\nYou\
    \ can use this solution using itertools:\n<code>\nfrom itertools import combinations",
  "    return (isapprox(x, pow(n, x)))\nend \n</cell>\n<code language=julia-0.4>\n\
    #test\nis_simple_power(3, 4)\n</cell>\n<text>\nTask 5 - Checking Prime\nThe goal\
    \ of this task is to write a function is_prime that returns true if a number n\
    \ is a prime and false in other cases.", "    if is_power_of_2(x)\n        return\
    \ n == x\n    else if n%2\n        return is_simple_power(x, n/2)\n    else\n\
    \        return is_simple_power(x, n-1)\nend\n</code>\n<|/ a |>\n<| a dscore=0\
    \ |>\nI got this answer from a few years ago and i don't have the code with me.\
    \ However, a solution using recursion could be:\n<code>\ndef is_simple_power(x::Int64,\
    \ p::Int64)\n    if p == 0\n        return true\n    else\n        return is_simple_power(x,\
    \ p-1) || p == x && x != 0 && is_power_of_2(x)\n    end\nend", "    if x == 1\
    \ \n        then return true \n        else return false \n    if x == n \n  \
    \      then return true \n        else return false \n    x != 1 and x != n and\
    \ is_simple_power(n-1, x)\n    end\n\"\"\"", "    if n == 0 || x == 0 || x ==\
    \ 1 \n    then return true\n    else return false\n    end\n    \"\"\"\nYour task\
    \ is to write a function is_perfect_power(x::Int64, n::Int64) which returns true\
    \ if\nx is a perfect power of n and false otherwise:\nx is a perfect power of\
    \ n if and only if n is a power of 2 and x is not an even number\n    \"\"\"",
  "    \n    if (n==1) return true\n    \n    if (n % 2) == 0 return false\n    \n\
    \    pow_n_div = 2\n    while (pow_n_div <= n) do\n        \n        if (n % pow_n_div\
    \ == 0) return true\n        \n        pow_n_div *= 2\n    end\n    return false\n\
    end\n</cell>\n<text>\nNow write a function to check if a number n is a power of\
    \ two or not. Hint: Use the modulus operator %.", "    if is_power_of_2(n) ==\
    \ false\n        false\n    else\n        abs(x.^n) == x\nend\n</code>\n<|/ a\
    \ dscore=0 |>\n<| a tags=julia,performance |>\nThe easiest solution is to use\
    \ the built-in ispower function.\n<code>\njulia> ispower(2, 2)\ntrue", "     if\
    \ n^x==x then \n       return true\n     else \n       return false\n   end\n\
    </code>\n<|/ q |>\n<| c |>\nCan you please elaborate? In what sense do you mean\
    \ \"a number is a simple power of n\"? `2^2` is 4, `2^5` is 20, etc.\n<|/ c |>\n\
    <| c |>\nI edited my question. I wrote a function that returns true when n^int\
    \ = x for given x and n. Now, I am stuck at how to check if x is a simple power\
    \ of a number.\n<|/ c |>\n<| c |>\nYou want to check if x is a power of any number\
    \ but smaller than 2^64?\n<|/ c |>\n<| c |>\nYes, I am trying to figure out a\
    \ function that returns true for number that are power of x but smaller than 2^64.\n\
    <|/ c |>\n<| c |>\nI got this question wrong, sorry about that\n<|/ c |>\n<| a\
    \ tags=math,bignum,julia |>\nThis problem comes up frequently. Here are some simple\
    \ rules that I use in my answer to a similar question to decide whether a number\
    \ is a power of another number or not:", "  return((n**int)==x)\nend", "    if\
    \ x==1\n    then \n        true\n    else\n        if n==0\n        then false\n\
    \        else\n            if n>1\n            then if x % n==0\n            then\
    \ true\n            else false\n            end\n            else\n          \
    \      true\n            end\n        end\n    end\nend", "    if is_power(n)\
    \ == 0 then return false else true\n    if is_power(x) == 0 then return false\
    \ else true\n    if x == 1 then return true else false\n    if x % n != 0 then\
    \ return false else true\n    if n == 1 then return true else false\n    if n\
    \ % 2 != 0 then return false else true\n    if n % 4 != 0 then return false else\
    \ true\n    if n % 8 != 0 then return false else true\n    if n % 16 != 0 then\
    \ return false else true\n    return false\nend function\n</cell>\n<code language=julia-1.3>\n\
    \"\"\"", "    if is_not_an_int(n) || not is_not_an_int(x) \n        error(\"invalid\
    \ arguments, please check input\")\n    else if x == 0 \n        error(\"x cannot\
    \ be zero\")\n    else if n == 0 \n        error(\"n cannot be zero\")\n    else\
    \ if n < 0 \n        error(\"n must be positive\")\n    else if n >= 2\n     \
    \   error(\"n must be greater than or equal to 1\")\n    else if x > Int64(Int64(n)\
    \ - 1)\n        error(\"x must be strictly larger than n-1\")\n    else \n   \
    \     return true\nend\n</cell>\n<text>\nProblem 3\nWe want to write a function\
    \ is_natural_number(x) that returns true if x is a natural number, false otherwise.\
    \ Hint: remember that natural numbers are numbers that can be expressed as an\
    \ integer multiplied by 2.", "    if n==1\n        return true\n    if n==0\n\
    \        return false\n    if n>0\n        y=x*n\n        if y==x\n          \
    \  return true\n        else\n            return false\n    end\nend\n\"\"\"\n\
    #@markdown ###4\n```julia\nis_square_number(9^9)\n```\n#@markdown ###5\n```julia\n\
    is_square_number(99^99)\n```\n#@markdown ###6\n```julia\nis_square_number(199^199)\n\
    ```\n#@markdown ###7\n```julia\nis_square_number(997^997)\n```\n#@markdown ###8\n\
    ```julia\nis_square_number(999^999)\n```\n#@markdown ###9\n```julia\nis_square_number(999^999)\n\
    ```\n#@markdown ###10\n```julia\nis_square_number(9999^9999)\n```\n#@markdown\
    \ ###11\n```julia\nis_square_number(10000^10000)\n```\n#@markdown ###12\n```julia\n\
    is_square_number(100000^100000)\n```\n#@markdown ###13\n```julia\nis_square_number(1000000^1000000)\n\
    ```\n#@markdown ###14\n```julia\nis_square_number(10000000^10000000)\n```\n#@markdown\
    \ ###15\n```julia\nis_square_number(100000000^10000000)\n```\n#@markdown ###16\n\
    ```julia\nis_square_number(1000000000^10000000)\n```\n#@markdown ###17\n```julia\n\
    is_square_number(10000000000^10000000)\n```\n#@markdown ###18\n```julia\nis_square_number(100000000000^10000000)\n\
    ```\n#@markdown ###19\n```julia\nis_square_number(1000000000000^10000000)\n```\n\
    #@markdown ###20\n```julia\nis_square_number(10000000000000^10000000)\n```\n#@markdown\
    \ ###21\n```julia\nis_square_number(100000000000000^10000000)\n```\n#@markdown\
    \ ###22\n```julia\nis_square_number(1000000000000000^10000000)\n```\n#@markdown\
    \ ###23\n```julia\nis_square_number(10000000000000000^10000000)\n```\n#@markdown\
    \ ###24\n```julia\nis_", "    if is_simple_power_impl(x, n) then return true else\
    \ return false\nend", "    if n % x == 0 \n    then is_simple_power(x, n-1)\n\
    \    else false\nend\n</cell>\n<code language=julia-1.3>\nis_simple_power(2, 4)\n\
    </cell>\n<code language=julia-1.3>\nis_simple_power(2, 2)\n</cell>\n<code language=julia-1.3>\n\
    is_simple_power(8, 2)\n</cell>\n<code language=julia-1.3>\nis_simple_power(3,\
    \ 2)\n</cell>\n<code language=julia-1.3>\nis_simple_power(3, 1)\n</cell>\n<code\
    \ language=julia-1.3>\nis_simple_power(5, 3)\n</cell>\n<text>\nExercise 3", " \
    \   if x==0 || n==0\n    then return true\n    else return n==1\nend", "    \"\
    \"\"return true if  x is a simple power of n\"\"\"\n    return (n**x) == x\n</cell>\n\
    <text>\nTest your function\nRun the cell below to test your function.", "    if\
    \ is_power_of_two(n) && n==x\n    then true\n    else false\n    end\nend\n</cell>\n\
    <code language=julia-1.0>\nis_power_of_two(n)\n</cell>\n<code language=julia-1.0>\n\
    is_power_of_two(5)\n</cell>\n<code language=julia-1.0>", "  if n==0 or n==1\n\
    \    true\n  else if n==x\n    true\n  else\n    is_simple_power(x,n-1)\n  end\n\
    end\n</cell>\n<code language=julia-1.5>\nis_simple_power(4, 2)\n</cell>\n<text>\n\
    The same for powers of n", "    if is_simple_power(x,n) == true\n        true\n\
    \    else\n        false\n    end\nend", "    if n ==1 then\n        true\n  \
    \  elseif n ==0 then\n        false\n    elseif n ==-1 then\n        is_simple_power(x::Int64,\
    \ n+2)\n    else\n        x > 0 and x >= n\n    end\nend\n</cell>\n<text>\nNext\
    \ we write the function to check whether a number is odd or even. Notice that\
    \ this function uses is_simple_power to verify that the number is power of 2.\
    \ To simplify this function, we can use is_power_of_2.", "    if n == 0\n    \
    \    true\n    else\n        (x ** int) % (n ** int) == x\n    end\nend", "  \
    \  if n^x=x \n    return true \n    return false \nend \n</cell>\n<text>\nProblem\
    \ 2.5.b\nWrite a function which calculates the number of integers in a given range\
    \ which are divisible by an integer k. Use this function for n = 2 to 100. Use\
    \ a range with minimum and maximum values as given by your teacher. Use a single\
    \ if statement and no loops. Remember the function will return a number, not an\
    \ array. You may wish to look at using range and filter. You may wish to look\
    \ at using map. You may wish to look at using filter. You may wish to look at\
    \ using filter. You may wish to look at using filter. You may wish to look at\
    \ using filter.", "    if is_power2(n) \n        return true \n    else \n   \
    \     return false \n    end\nend", "    if x == n\n        return true\n    else\n\
    \        return false\nend", "    if x == n and n != 1 \n    then return true\
    \ \n    else if n >= 0 \n    then return false \n    else return is_simple_power(x,\
    \ n-1) \n    end\nend\n</cell>\n<code language=julia-1.0>\nis_simple_power(2,\
    \ 2)\n</cell>\n<code language=julia-1.0>\nis_simple_power(8, 2)\n</cell>\n<code\
    \ language=julia-1.0>\nis_simple_power(3, 2)\n</cell>\n<code language=julia-1.0>\n\
    is_simple_power(3, 1)\n</cell>\n<code language=julia-1.0>\nis_simple_power(5,\
    \ 3)\n</cell>\n<text>\nExercise 2", "    if is_pow(x, n)\n        return true\n\
    \    \n    else \n        return false\nend", "    if x == 1\n    then return\
    \ true\n    else if n % x == 0\n    then return true\n    else return false\n\
    \    endif", "    if n==1\n        true\n    else\n        if x==n\n         \
    \   true\n        else\n            if n % x == 0\n                true\n    \
    \        else\n                if x==0\n                    false\n          \
    \      else\n                    is_simple_power(x, n-1)\n        end\n    end\n\
    end", "    if n == 1 \n        true\n    else\n        if n%x == 0\n         \
    \   true\n        else\n            false\n        end\n    end\nend\n</cell>\n\
    <code language=julia-1.0>\n\"\"\"Your task is to write a function that returns\
    \ a list of prime numbers up to n\n    For example:\n    >>> list_primes(20)\n\
    \    [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47]\n    \"\"\"", " \
    \   if is_power_of_2(n) == false\n        return false \n    if n == 1 \n    \
    \    return true\n    if n % 2 == 0 \n        return true\n    if n % 3 == 0 \n\
    \        return true\n    if n % 5 == 0 \n        return true\n    if n % 7 ==\
    \ 0 \n        return true\n    if n % 11 == 0 \n        return true\n    if n\
    \ % 13 == 0 \n        return true\n    if n % 17 == 0 \n        return true\n\
    \    if n % 19 == 0 \n        return true\n    if n % 23 == 0 \n        return\
    \ true\n    if n % 29 == 0 \n        return true\n    if n % 31 == 0 \n      \
    \  return true\n    if n % 37 == 0 \n        return true\n    if n % 41 == 0 \n\
    \        return true\n    if n % 47 == 0 \n        return true\n    if n % 53\
    \ == 0 \n        return true\n    if n % 59 == 0 \n        return true\n    if\
    \ n % 61 == 0 \n        return true\n    if n % 67 == 0 \n        return true\n\
    \    if n % 73 == 0 \n        return true\n    if n % 79 == 0 \n        return\
    \ true\n    if n % 83 == 0 \n        return true\n    if n % 89 == 0 \n      \
    \  return true\n    if n % 97 == 0 \n        return true\n    if n % 113 == 0\
    \ \n        return true\n    if n % 129 == 0 \n        return true\n    if n %\
    \ 131 == 0 \n        return true\n    if n % 137 == 0 \n        return true\n\
    \    if n % 143 == 0 \n        return true\n    if n % 149 == 0 \n        return\
    \ true\n    if n % 151 == 0 \n        return true\n    if n % 157 == 0 \n    \
    \    return true\n    if n % 163 == 0 \n        return true\n    if n % 169 ==\
    \ 0 \n        return true\n    if n % 171 == 0 \n        return true\n    if n\
    \ % 177 == 0 \n        return true\n    if n % 183 == 0 \n        return true\n\
    \    if n % 189 == 0 \n        return true\n    if n % 191 == 0 \n        return\
    \ true\n    if n % 197 == 0 \n        return true\n    if n % 203 == 0 \n    \
    \    return true\n    if n % 209 == 0 \n        return true\n    if n % 211 ==\
    \ 0 \n        return true\n    if n % 217 == 0 \n        return true\n    if n\
    \ % 223 == 0 \n        return true\n    if n % 229 == 0 \n        return true\n\
    \    if n % 233 == 0 \n        return true\n    if n % 239 == 0 \n        return\
    \ true\n    if n % 241 == 0 \n        return true\n    if n % 247 == 0 \n    \
    \    return true\n    if n % 253 == 0 \n        return true\n    if n % 259 ==\
    \ 0 \n        return true\n    if n % 261 == 0 \n        return true\n    if n\
    \ % 267 == 0 \n        return true\n    if n % 273 == 0 \n        return true\n\
    \    if n % 279 == 0 \n        return true\n    if ", "    if is_power_of_two(x)\
    \ && n == 2^floor(Int64, log2(x))\n    true\n    else false\nend\n</cell>\n<text>\n\
    Problem 4\nProblem 4.1\nWrite a function pow_of_n_1(x, n) that returns the power\
    \ of a number x to the power n where the power is not an integer.\nx must be a\
    \ positive integer number and n must be an integer.\nFor example, pow_of_n_1(5,\
    \ 2) is 5 * 5 = 25 and pow_of_n_1(10, 2) is 10 to the power 2 is 100 and pow_of_n_1(5,\
    \ 3) is 5 to the power 3 is 150 but pow_of_n_1(5, 1.5) is 5 to the power 1.5 is\
    \ 12.5.", "    \n    if is_simple_power(x,n)\n        return true\n    else\n\
    \        return false\n    end", "    if is_simple_power(x, n)\n        return\
    \ true\n    return false\n    \n\"\"\"\nWrite a function that returns true if\
    \ a number x is a power of n and false in other cases.\nx is not a power of n\
    \ if n**int=x\nFor example:\n>>> is_power(1, 4)\nfalse\n>>> is_power(2, 2)\nfalse\n\
    >>> is_power(8, 2)\ntrue\n>>> is_power(3, 2)\nfalse\n>>> is_power(3, 1)\nfalse\n\
    >>> is_power(5, 3)\nfalse\n\"\"\"", "    if is_base_power(n, x) == true \n   \
    \     then return true \n        else return false \n    else \n        return\
    \ false \nend ", "\"\"\"\n    \n    if n <= 1:\n        return true\n    \n  \
    \  if x == n**0:\n        return true\n    \n    if n == 0 or n == 2:\n      \
    \  return false\n    \n    return is_simple_power(x , n-1)\nend\n</cell>\n<text>\n\
    Problem 1", "    if n==0 return true\n    else if n==1 return x==1\n    else if\
    \ n==Inf return x==1\n    else if n==-Inf return x==1\n    else if n <= 2 return\
    \ x==1\n    else return false\nend\n\"\"\"\nNow write your own function called\
    \ is_power that returns true if a number x is a simple power\nof a number n and\
    \ false otherwise. Recall that x and n are simple powers of numbers if n**int=x.\n\
    For example:\n>>> is_power(1, 4)\ntrue\n>>> is_power(2, 2)\ntrue\n>>> is_power(8,\
    \ 2)\ntrue\n>>> is_power(3, 2)\nfalse\n>>> is_power(3, 1)\nfalse\n>>> is_power(5,\
    \ 3)\nfalse\n\"\"\"", "    if is_power_of_two(n) == true && x>0\n    return true\n\
    \    else \n        return false\nend", "    if n^int==x return true else return\
    \ false \nend \n</cell>\n<code language=julia-0.6>\n\"\"\"Your task is to write\
    \ a function that returns true if a number is palindrome and false in other cases.\n\
    Palindrome is a number that reads the same backward as forward. For example:\n\
    >>> is_palindrome(12345)\ntrue\n>>> is_palindrome(12345678)\ntrue\n>>> is_palindrome(12321)\n\
    false\n>>> is_palindrome(12321)\nfalse\n\"\"\"", "    pow(x, n)==x\nend", "  \
    \  if n==1 \n        return true\n    return false \n    end\nend\n\"\"\"", " \
    \   if is_pow(n, x) == true \n    then return true\n    else return false\n  \
    \  end\nend", "    if is_power_of_two(n)\n        if x==0\n            true\n\
    \        else\n            if x==1\n                true\n            else \n\
    \                if n mod 2==0\n                    if is_power_of_two(n div 2)\n\
    \                        if is_power_of_two(n div 4)\n                       \
    \     if is_power_of_two(n div 8)\n                                if is_power_of_two(n\
    \ div 16)\n                                    true\n                        \
    \        else\n                                    return false\n            \
    \                else\n                                return false\n        \
    \                else\n                            return false\n            \
    \        else\n                        return false\n                else\n  \
    \                  return false\n    end\n    return false\nend", "    return\
    \ true\nend\n</cell>\n<text>\nProblem 3\nWrite a function that returns the factorial\
    \ of a number. The factorial of a number is defined as the product of all the\
    \ numbers from 1 to that number. For example, 5! = 5 x 4 x 3 x 2 x 1 = 120", " \
    \   if is_simple_power(x, n)\n        return true\n    end\n    return x==n\n\
    end\n</cell>\n<text>\nThe power-of-the-number problem is interesting. You can\
    \ solve it as follows:", "    if is_power_of_2(x)\n        true\n    else if n\
    \ == 0\n        true\n    else\n        pow(x, n, n) == x\nend", "    if is_zero(n)\
    \ == true then return true else false \n    if x == 1 then return true \n    if\
    \ x == 0 then return false \n    if n <= 1 then return false \n    if is_one(n)\
    \ == true then return true \n    if is_one(n) == false then return false \n  \
    \  if is_two(n) == true then return true \n    if is_two(n) == false then return\
    \ false \n    if is_three(n) == true then return true \n    if is_three(n) ==\
    \ false then return false \n    if is_four(n) == true then return true \n    if\
    \ is_four(n) == false then return false \n    if is_five(n) == true then return\
    \ true \n    if is_five(n) == false then return false \n    if is_six(n) == true\
    \ then return true \n    if is_six(n) == false then return false \n    if is_seven(n)\
    \ == true then return true \n    if is_seven(n) == false then return false \n\
    \    if is_eight(n) == true then return true \n    if is_eight(n) == false then\
    \ return false \n    if is_nine(n) == true then return true \n    if is_nine(n)\
    \ == false then return false \n    if is_ten(n) == true then return true \n  \
    \  if is_ten(n) == false then return false \n    if is_eleven(n) == true then\
    \ return true \n    if is_eleven(n) == false then return false \n    if is_twelve(n)\
    \ == true then return true \n    if is_twelve(n) == false then return false \n\
    \    if is_thirteen(n) == true then return true \n    if is_thirteen(n) == false\
    \ then return false \n    if is_fourteen(n) == true then return true \n    if\
    \ is_fourteen(n) == false then return false \n    if is_fifteen(n) == true then\
    \ return true \n    if is_fifteen(n) == false then return false \n    if is_sixteen(n)\
    \ == true then return true \n    if is_sixteen(n) == false then return false \n\
    \    if is_seventeen(n) == true then return true \n    if is_seventeen(n) == false\
    \ then return false \n    if is_eighteen(n) == true then return true \n    if\
    \ is_eighteen(n) == false then return false \n    if is_nineteen(n) == true then\
    \ return true \n    if is_nineteen(n) == false then return false \n    if is_twenty(n)\
    \ == true then return true \n    if is_twenty(n) == false then return false \n\
    \    if is_thirty(n) == true then return true \n    if is_thirty(n) == false then\
    \ return false \n    if is_fourty(n) == true then return true \n    if is_fourty(n)\
    \ == false then return false \n    if is_fifty(n) == true then return true \n\
    \    if is_fifty(n) == false then return false \n    if is_sixty(n) == true then\
    \ return true \n    if is_sixty(n) == false then return false \n    if is_", " \
    \   return (n ^ x == x)\nend\n</cell>\n<code language=julia-1.6>\n\"\"\"Your task\
    \ is to write a function that returns the factorial of a number x\nin terms of\
    \ the factorials of all the integers from 1 to x.\nFor example, if x is 3, then\
    \ the factorial of x is 3.\n    x is a number in terms of the factorials of all\
    \ the integers from 1 to x.\n    For example, if x is 3, then the factorial of\
    \ x is 3.\n    x is a number in terms of the factorials of all the integers from\
    \ 1 to x.\n    For example, if x is 3, then the factorial of x is 3.\n    x is\
    \ a number in terms of the factorials of all the integers from 1 to x.\n    For\
    \ example, if x is 3, then the factorial of x is 3.\n    x is a number in terms\
    \ of the factorials of all the integers from 1 to x.\n    For example, if x is\
    \ 3, then the factorial of x is 3.\n    x is a number in terms of the factorials\
    \ of all the integers from 1 to x.\n    For example, if x is 3, then the factorial\
    \ of x is 3.\n    x is a number in terms of the factorials of all the integers\
    \ from 1 to x.\n    For example, if x is 3, then the factorial of x is 3.\n  \
    \  x is a number in terms of the factorials of all the integers from 1 to x.\n\
    \    For example, if x is 3, then the factorial of x is 3.\n    x is a number\
    \ in terms of the factorials of all the integers from 1 to x.\n    For example,\
    \ if x is 3, then the factorial of x is 3.\n    x is a number in terms of the\
    \ factorials of all the integers from 1 to x.\n    For example, if x is 3, then\
    \ the factorial of x is 3.\n    x is a number in terms of the factorials of all\
    \ the integers from 1 to x.\n    For example, if x is 3, then the factorial of\
    \ x is 3.\n    x is a number in terms of the factorials of all the integers from\
    \ 1 to x.\n    For example, if x is 3, then the factorial of x is 3.\n    x is\
    \ a number in terms of the factorials of all the integers from 1 to x.\n    For\
    \ example, if x is 3, then the factorial of x is 3.\n    x is a number in terms\
    \ of the factorials of all the integers from 1 to x.\n    For example, if x is\
    \ 3, then the factorial of x is 3.\n    x is a number in terms of the factorials\
    \ of all the integers from 1 to x.\n    For example, if x is 3, then the factorial\
    \ of x is 3.\n    x is a number in terms of the factorials of all the integers\
    \ from 1 to x.\n    For example, if x is 3, then the factorial of x is 3.\n  \
    \  x is a number in terms of the factorials of all the integers from 1 to x.\n\
    \    For example, if x is 3, then the ", "    if is_power_of_2(n)\n        return\
    \ true\n    if n <= 1\n        return false\n    \n    k = log2(n)\n    for i\
    \ = k+1 downTo 1\n        if x%i == 0\n            return false\n    end\n   \
    \ return true\nend", "    if n <= 0\n        return false\n    if n==1\n     \
    \   return true\n    return x == x^n", "    if n==0 \n        return false\n \
    \   else if n==1 \n        return true\n    else \n        return isPowerOfTwo(x)\
    \ && isPowerOfTwo(n) && x<n && n>1\nend", "    if is_power(n, x) == true\n   \
    \     true\n    else\n        false\n    end\nend", "    if n==0\n    then return\
    \ true\n    else if n==1\n    then return (x==1)\n    else return false\n    end\
    \ \nend\n</cell>\n<code language=julia-1.5>", "    if n == 1 \n        then true\n\
    \    else if x % n == 0 \n        then true\n    else false\nend", "    if is_power2(x)\n\
    \        true\n    else\n        false\n    end\nend", "    \"\"\"\n    if is_power_of_two(x)\n\
    \    if is_power_of_two(n)\n        return is_power_of_two(n * x)\n    else \n\
    \        return false\n    end\n    else \n        return false\n    end\nend\n\
    \"\"\"\n### 3.6. Question 7: Simple power of a number\nGiven a positive integer\
    \ x, a number n and a non-negative integer k, write a function which returns true\
    \ if x is a power of n and false in other cases.\nThe function should return false\
    \ for x=2^k with k > n.\nFor example:\nis_power_of_two(8) = true\nis_power_of_two(9)\
    \ = false\nis_power_of_two(25) = true\nis_power_of_two(30) = false\nis_power_of_two(36)\
    \ = true\n\"\"\"", "    if is_pow2(n)\n        true\n    else\n        false\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>", "    if is_power_of_2(x)\n\
    \        return true\n    else\n        return false", "    \n    true\nend\n\
    </cell>\n<text>\nExercise 10\nWrite a function is_simple_power_2(x::Int64) which\
    \ takes a number x and returns true if x is a simple power of 2 and false otherwise.\n\
    x is a simple power of 2 if 2x**int=x\nFor example, \nis_simple_power_2(1)\ntrue\n\
    is_simple_power_2(4)\ntrue\nis_simple_power_2(8)\ntrue\nis_simple_power_2(5)\n\
    false\nHints\nUse if statements to write your function", "    if is_simple_power(x,n)==true\
    \ \n        then return true\n        else return false\nend \n</code>\nMy output\
    \ for this is \n<code>\njulia> is_simple_power(2,4)\ntrue\njulia> is_simple_power(2,3)\n\
    false\njulia> is_simple_power(2,4)\ntrue\njulia> is_simple_power(3,1)\nfalse\n\
    julia> is_simple_power(2,3)\nfalse\n</code>\n<|/ a |>\n<| a tags=recursion,julia,complexity-theory\
    \ |>\nAs you probably noticed, you can just use == to compare numbers. And ==\
    \ is implemented using a bitwise operator. Also note that == is defined for Int64\
    \ types, and for other types you can just use ==.\nWhat you need to do is use\
    \ bit masks to check whether the first bit is the same as second bit. If both\
    \ are true, then x^n=x, so you don't have to check further:\n<code>", "    if\
    \ n==1 \n        true\n    else\n        if (x == 1) || (n%x==0)\n           \
    \ true\n        else\n            false\n    end\nend", "    if is_power(x,n)\n\
    \        true\n    else\n        false\n    end\nend\n</cell>\n<code language=julia-1.4>\n\
    \"\"\"Your task is to write the function is_integer that returns true if the argument\
    \ is a\n    number and false if not.\n    x is a number if typeof(x)==Int64 and\
    \ false otherwise.\n    For example:\n    >>> is_integer(1)\n    true\n    >>>\
    \ is_integer(1.0)\n    true\n    >>> is_integer(Int64(0.1))\n    true\n    >>>\
    \ is_integer(Float64(0.1))\n    false\n    >>> is_integer(1.0)\n    false\n  \
    \  >>> is_integer(Int64(1.0))\n    false\n    \"\"\"", "    if is_power2(x)\n\
    \        return true\n    end\n    return false\nend", "    if is_simple_power(x,\
    \ n)\n        true\n    else\n        false", "    if n == 1\n        return true\n\
    \    else if n % 2 == 0\n        return is_simple_power(x, n / 2)\n    else \n\
    \        return is_simple_power(x, 3 * n + 1)\n    end\nend", "    # your code\
    \ here\n    if n == 0 return true\n    if n % x == 0 return is_simple_power(x,\
    \ n//x)\n    return false\nend\n</cell>\n<code language=julia-1.0>\nis_simple_power(1,4)\n\
    </cell>\n<code language=julia-1.0>\nis_simple_power(2,2)\n</cell>\n<code language=julia-1.0>\n\
    is_simple_power(8,2)\n</cell>\n<code language=julia-1.0>\nis_simple_power(3,2)\n\
    </cell>\n<code language=julia-1.0>\nis_simple_power(3,1)\n</cell>\n<code language=julia-1.0>\n\
    is_simple_power(5,3)\n</cell>\n<text>\n(4.3) Write a recursive function is_power_of_2(m)\
    \ where m is an integer and returns a boolean value based on the\nfact that m\
    \ = 2^k for some integer k. Assume that the value of m is not negative.", "  \
    \  if is_power(x, n) == true \n        then return true\n        else return false\n\
    </code>\n<|/ a tags=haskell |>\n<| c |>\nYou don't have to do this, you can just\
    \ use `(x `mod` n) == n`, which can sometimes be faster.\n<|/ c |>\n<| c |>\n\
    True, but I've found that using `(x `mod` n) == n` has several advantages.  Firstly,\
    \ `(x `mod` n) == n` is much more straightforward to read.  Secondly, since it\
    \ uses `mod`, it avoids having to do any division.  Thirdly, it gives a clear\
    \ answer for the general case when `n` is a power of `x`.\n<|/ c |>\n<| c |>\n\
    You also avoid division when `n < x` :)\n<|/ c |>\n<| c |>\n`(x `mod` n) == n`\
    \ can be faster than `(x `div` n) == n`.\n<|/ c |>\n<| c |>\n`div` should be optimized\
    \ away for powers since they will always result in an integral result\n<|/ c |>\n\
    <| a tags=haskell |>\nHere's a simple solution\n<code>\nis_pow2 :: Integer ->\
    \ Bool\nis_pow2 x = x == 2 * x\n</code>\n<|/ a dscore=4 |>\n<| a tags=haskell\
    \ dscore=4 |>\nAnother approach for testing if an integer is a power of 2:\n<code>\n\
    isPow2 :: Integer -> Bool\nisPow2 n = n == 2 * n\n</code>\n<|/ a |>\n<| c |>\n\
    This requires knowledge about multiplication. `is_power_of_2` is better for arbitrary\
    \ powers.\n<|/ c |>\n<| c |>\n: I never said that `is_power_of_2` is better for\
    \ arbitrary powers. I said that `isPow2` is better at checking for powers of 2.\
    \ The difference is really small, though.\n<|/ c |>\n<| c |>\nWell, you're right.\
    \ My bad. :)\n<|/ c |>\n<| c |>\nI think this was posted before you added the\
    \ word 'power' to your question\n<|/ c |>\n<| c |>\n: Yes, I agree with your point.\
    \ However, this answer is valid for future visitors to the question, and I thought\
    \ it could be helpful. Maybe I should remove it now?\n<|/ c |>\n<| a tags=haskell\
    \ |>\nThere are a couple of functions that could help you: \n<code>", "    x %\
    \ n == 0\nend\n</cell>\n<text>\nNow check your answer with the cell below.", " \
    \   if is_power_of_n(x, n) then return true else return false\nend\n</cell>\n\
    <code language=julia-1.6>\n# test it \nis_simple_power(1, 4)\n</cell>\n<code language=julia-1.6>\n\
    is_simple_power(2, 2)\n</cell>\n<code language=julia-1.6>\nis_simple_power(8,\
    \ 2)\n</cell>\n<code language=julia-1.6>\nis_simple_power(3, 2)\n</cell>\n<code\
    \ language=julia-1.6>\nis_simple_power(3, 1)\n</cell>\n<code language=julia-1.6>\n\
    is_simple_power(5, 3)\n</cell>\n<text>\nTask: Write a function that returns true\
    \ if the number n is a power of two (i.e., n = 2^k, 1<k<n) and false otherwise.",
  "    \n    if is_power(x, n) \n        then \n        true\n    else\n        false\n\
    \    end\nend\n</code>\n<|/ a dscore=0 tags=math,biginteger,julia |>\n<| c |>\n\
    Hi, thank you for your answer. I tried this solution, however, I seem to be missing\
    \ something because the answer is still wrong. For example, the output should\
    \ be true for 3 and 4 but the output is false for those. I edited my original\
    \ question to include what I tried.\n<|/ c |>\n<| a dscore=0 |>\nHere's a more\
    \ Julian way that should work for all cases:\n<code>", "    if n == 1 return true\n\
    \    return x % n == 0\nend\n</cell>\n<code language=julia-1.2>\n\"\"\"Your task\
    \ is to write a function that returns the number of divisors of a given number\
    \ x\n    x is composite if all its divisors are integers\n    x is prime if all\
    \ its divisors are odd\n    x is composite if all its divisors are powers of 2\n\
    \    For example:\n    >>> count_divisors(123)\n    3\n    >>> count_divisors(7)\n\
    \    3\n    >>> count_divisors(21)\n    2\n    >>> count_divisors(15)\n    3\n\
    \    >>> count_divisors(13) # prime but composite with 2 divisors\n    2\n   \
    \ >>> count_divisors(6) # prime but composite with 3 divisors\n    3\n    >>>\
    \ count_divisors(24) # prime but composite with 2 divisors\n    2\n    >>> count_divisors(9)\
    \ # prime but composite with 3 divisors\n    3\n    >>> count_divisors(9) # prime\
    \ but composite with 3 divisors\n    3\n    \"\"\"", "    if is_power2(n) == true\
    \ return x == n\n    else return false\nend", "    if is_power_of_2(x) && n%2==0\
    \ \n        then n==x \n        else false\n    else false\n    end\nend\n</cell>\n\
    <code language=julia-1.0>\nis_power_of_2(2)\n</cell>\n<code language=julia-1.0>\n\
    is_power_of_2(3)\n</cell>\n<code language=julia-1.0>\nis_power_of_2(4)\n</cell>\n\
    <text>\nTask 2: Create a function that returns the exponent of a number. \n  \
    \  x is a number which is an input to the function.\n    x is an input to the\
    \ function.\n    For example:\n    >>> get_exponent(4, 5)\n    3\n    >>> get_exponent(-4,\
    \ -5)\n    -2\n    >>> get_exponent(6, 1)\n    1\n    >>> get_exponent(6, 3)\n\
    \    3\n    >>> get_exponent(-5, -3)\n    -1\n    \"\"\"", "    if is_power_of_two(n)\
    \ then\n        if x == n^n then\n            return true\n        else\n    \
    \        return false\n    end\n    if is_power_of_two(x) then\n        if x ==\
    \ x^n then\n            return true\n        else\n            return false\n\
    \    end\n    return false\nend\n\"\"\"\n## ## ## ## ## ## ## ## ## ## ## ## ##\
    \ ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ##\
    \ ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ##\
    \ ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ##\
    \ ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ##\
    \ ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ##\
    \ ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ##\
    \ ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ##\
    \ ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ##\
    \ ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ##\
    \ ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ##\
    \ ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ##\
    \ ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ##\
    \ ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ##\
    \ ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ##\
    \ ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ##\
    \ ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ##\
    \ ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ##\
    \ ## ", "    if is_power(x, n) == true\n    else false\nend\n\"\"\"\nWrite a function\
    \ that checks if a number n is a power of n\n(x is a power of n if n**int=x).\n\
    input:\n    a number n that is a power of n\noutput:\n    boolean\n\"\"\"", " \
    \   if is_pow2(x) and x==n*n \n    then return true\n    else return false\nend\n\
    </cell>\n<text>\nSolution 3", "    if is_equal(n**2, x) == true then\n       \
    \ return true\n    else\n        return false\nend\n</cell>\n<code language=julia-1.4>\n\
    @time is_simple_power(8, 2)\n</cell>\n<code language=julia-1.4>", "    if x==0\
    \ return true\n    \n    if (n%2 != 0) return false\n    \n    \n    ", "    \n\
    \    if is_power(n, x) == true\n        \n    else\n        return false\n   \
    \ \nend", "    if is_power2(n) == true\n        then\n            x^n = x\n  \
    \      else\n            false\n        end\n    end\nend\n</cell>\n<code language=julia-1.6>\n\
    is_simple_power(2,2)\n</cell>\n<code language=julia-1.6>\nis_simple_power(2,3)\n\
    </cell>\n<code language=julia-1.6>\nis_simple_power(2,4)\n</cell>\n<code language=julia-1.6>\n\
    is_simple_power(2,5)\n</cell>\n<code language=julia-1.6>\nis_simple_power(3,5)\n\
    </cell>\n<code language=julia-1.6>\nis_simple_power(2,2)\n</cell>\n<code language=julia-1.6>\n\
    is_simple_power(2,5)\n</cell>\n<text>\nExercise 4:", "    if is_power(x, n) ==\
    \ true\n    else false\nend", "    \n    if n == 1 \n        true \n    else \n\
    \        if (x == 1) \n            true \n        else \n            if n % x\
    \ == 0 \n                true \n            else \n                false \nend",
  "    if n==0\n        true\n    else\n        ((x==0||x==1)&&(n==1||n==x))\n   \
    \ end\nend", "    if is_power2(n) == True then\n        return (x == n^n)\n  \
    \  else \n        return false\n    end\nend\n</cell>\n<text>\nTask 6\nWrite a\
    \ function that computes the greatest common divisor of two positive numbers.\n\
    The algorithm should work efficiently for numbers between -10 and 10 (inclusive).",
  "    if n == 0 then true else x == n**int\n    end\nend\n</cell>\n<text>\nQuestion\
    \ 3\nWrite a function that prints the following message if the input is a power\
    \ of three\nand returns a Boolean value. If the input is not a power of three,\
    \ print a different message.", "    if n == 0\n    then return true\n    else\
    \ if n != 0 \n    then return x ** n == x \n    else return false\n    end\nend\n\
    </cell>\n<code language=julia-0.4>\n@time is_simple_power(5, 3)\n</cell>\n<text>\n\
    Problem 12: is_cube\nWrite a function that returns true if a number x is a simple\
    \ cube and false in other cases.\nx is a simple cube if x**3=x\nFor example:\n\
    >>> is_cube(1)\ntrue\n>>> is_cube(2)\ntrue\n>>> is_cube(8)\ntrue\n>>> is_cube(9)\n\
    false\n>>> is_cube(100)\nfalse\n>>> is_cube(400)\nfalse\n\"\"\"", "    if n==0\
    \ then return true\n    if n==1 then return x==1\n    else if n<0 then return\
    \ false\n    else if n>=x then return false\n    else return is_simple_power(x**n,n-1)\
    \ else return true\nend\nprintln(is_simple_power(7, 3))\nprintln(is_simple_power(10,\
    \ 1))\nprintln(is_simple_power(10, 0))\nprintln(is_simple_power(10, -1))\nprintln(is_simple_power(100,\
    \ 5))\nprintln(is_simple_power(-1, 2))\nprintln(is_simple_power(3, 0))\nprintln(is_simple_power(2,\
    \ 3))\nprintln(is_simple_power(10, 2))\nprintln(is_simple_power(3, 1))\n</cell>\n\
    <text>\nThe power function\nThis task consists of two parts.", "    pow(x, n)\
    \ == x\nend\n</cell>\n<code language=julia-1.6>\n@time begin\n    answers = []\n\
    \    for n in 1:100\n        push!(answers, is_simple_power(n, n))\n    end\n\
    end\n</cell>\n<text>\nExercise 2\nIn the cell below, write a function that returns\
    \ true if n is a power of two (i.e. it would be equal to 2^n), false in other\
    \ cases.", "    if n == 0\n        true\n    else\n        if n % x == 0\n   \
    \         true\n        else\n            false\nend\n</cell>\n<code language=julia-0.5>\n\
    \"\"\"\n    Problem 4", "    if is_number(x)\n        power = (x % n) # return\
    \ remainder for division \n        if power == 0 \n            true\n        else\
    \ \n            false\n    else \n        false\n    end\nend\n</cell>\n<text>\n\
    Exercise 4:\nWrite a function that calculates the sum of an even number of numbers\
    \ from 2 to 100.", "    \n    if is_pow(x,n)\n        return true\n    else\n\
    \        return false\nend\n</cell>\n<code language=julia-1.6>\n@assert is_simple_power(1,\
    \ 4) == true\n@assert is_simple_power(2, 2) == true\n@assert is_simple_power(8,\
    \ 2) == true\n@assert is_simple_power(3, 2) == false\n@assert is_simple_power(3,\
    \ 1) == false\n@assert is_simple_power(5, 3) == false\n</cell>\n<code language=julia-1.6>\n\
    \"\"\"\nYour task is to implement the function is_power_of_two(x::Int64) which\
    \ checks if a given integer is a power of two.\nWe define power of two to be a\
    \ power of two if it is equal to the sum of its positive divisors (excluding 1\
    \ and itself).\nFor example:\n>>> is_power_of_two(4)\ntrue\n>>> is_power_of_two(8)\n\
    true\n>>> is_power_of_two(13)\ntrue\n>>> is_power_of_two(17)\nfalse\n\"\"\"",
  "    if is_number(x) and is_number(n) \n        == x == log(x)\n    else\n     \
    \   throw(ArgumentError(\"The arguments must be numbers!\"))\n    end\nend\n</cell>\n\
    <cell>\nis_simple_power(1, 1)\n</cell>\n<text>\nExercise 2.4 : Checking if a number\
    \ is a fraction\nWrite a function that checks if a number is a fraction.\nThe\
    \ number must be a valid fraction, that means it must be a real number between\
    \ 0 and 1.\nThe function should raise an ArgumentError if the number is not a\
    \ valid fraction.\nExamples:\n    0.1\n    0.25\n    0.3333333333333333\n    0.333333333333333333333333333333\n\
    \    0.5\n    0.3333333333333333333333333333333333\n    0.666666666666666666666666666666667\n\

  "    if is_power(x, n) == true then\n        return true\n    end\n    if is_power_of_2(n)\
    \ == true then\n        return x == n\n    end\n    return false\nend\n</cell>\n\
    <code language=julia-1.5>\nis_power(4,4)\n</cell>\n<code language=julia-1.5>\n\
    is_power_of_2(1)\n</cell>\n<code language=julia-1.5>\nis_power_of_2(5)\n</cell>\n\
    <code language=julia-1.5>\nis_power_of_2(10)\n</cell>\n<code language=julia-1.5>\n\
    is_power_of_2(100)\n</cell>\n<code language=julia-1.5>\nis_power_of_2(1000)\n\
    </cell>\n<code language=julia-1.5>\nis_power_of_2(10000)\n</cell>\n<code language=julia-1.5>\n\
    is_power_of_2(100000)\n</cell>\n<code language=julia-1.5>\nis_power_of_2(1000000)\n\
    </cell>\n<code language=julia-1.5>\nis_power_of_2(10000000)\n</cell>\n<code language=julia-1.5>\n\
    is_power_of_2(100000000)\n</cell>\n<code language=julia-1.5>\nis_power_of_2(1000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_power_of_2(10000000000)\n</cell>\n<code\
    \ language=julia-1.5>\nis_power_of_2(100000000000)\n</cell>\n<code language=julia-1.5>\n\
    is_power_of_2(1000000000000)\n</cell>\n<code language=julia-1.5>\nis_power_of_2(10000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_power_of_2(1000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_power_of_2(1000000000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\nis_power_of_2(10000000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    is_power_of_2(100000000000000000000)\n</cell>\n<code language=julia-1.5>\nis_power_of_2(1000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_power_of_2(10000000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_power_of_2(100000000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_power_of_2(1000000000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_power_of_2(10000000000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_power_of_2(100000000000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_power_of_2(1000000000000000000000000000)\n", " \
    \   if n==1 \n        true \n    else \n        if n%x \n            false \n\
    \        else \n            x \n    end\nend", "    if is_power(x, n):\n     \
    \   return true\n    else\n        return false\n    end\nend\n</cell>\n<text>\n\
    Exercise 8: Test the function is_simple_power\nWrite a test file called is_simple_power.jl,\
    \ test it on a few examples and use the JuliaTests package to run all your tests.",
  "    # Your code here\n    if n<1\n        false\n    elseif n==1\n        true\n\
    \    else\n        is_simple_power(x, n/2)\n    end\nend\n</cell>\n<text>\nNow\
    \ we will test the function.", "    if is_power_of_2(n) && is_power_of_2(x) &&\
    \ x==n**x then return true else return false\n    end\n    \nend\n</cell>\n<text>\n\
    Exercise 5\nUsing the previous functions (is_power_of_2, is_power_of_4, and is_power_of_8),\
    \ write a function that returns true if the number x is an integer power of y\
    \ where y is a power of the number two.", "    if x < 0 \n        then return\
    \ false \n    else if x < n \n        then return true \n    else \n        return\
    \ is_simple_power(x//n, n) \nend\n</code>\n<code>\n\"\"\"Your task is to write\
    \ a function that checks if a number x is a power of n\n    in O(1) time complexity\"\
    \"\"", "    if n > 0\n    then x == n**int\n    else x == n\n    end\nend\n</cell>\n\
    <cell>\n@code_warntype @test is_simple_power(2, 2)\n@code_warntype @test is_simple_power(3,\
    \ 2)\n@code_warntype @test is_simple_power(5, 3)\n</cell>\n<text>\nExercise 3\n\
    Write a function that returns the sum of all integers up to and including a given\
    \ number.", "    if is_power_of_two(Int64(n))\n        return true\n    else\n\
    \        return false\n    end\nend", "    if n>1 && x==0\n        return false\n\
    \    elseif n==1\n        return x==1\n    elseif n<=1\n        return is_simple_power(x,\
    \ n-1) || is_simple_power(x, n+n-1)\n    else\n        return is_simple_power(x,\
    \ n-1) || is_simple_power(x, n+n-1)\n    end\nend", "if n==1\n    return true\n\
    else\nreturn (is_simple_power(x, n//2))\nend\nend\n</cell>\n<code language=julia-0.6>\n\
    @testset \"is_simple_power\" begin\n    \n@test is_simple_power(1, 4) == true\n\
    @test is_simple_power(2, 2) == true\n@test is_simple_power(8, 2) == true\n@test\
    \ is_simple_power(3, 2) == false\n@test is_simple_power(3, 1) == false\n@test\
    \ is_simple_power(5, 3) == false\nend\n</cell>\n<text>\n13. \u041F\u0440\u043E\
    \ \u0437\u0430\u043F\u044F\u0442\u0443\u044E (\u0441 \u0438\u0445 \u0440\u0430\
    \u0437\u043C\u0435\u0440\u043E\u043C)\n\u0422\u0435\u043F\u0435\u0440\u044C \u043D\
    \u0443\u0436\u043D\u043E \u0437\u0430\u043F\u044F\u0442\u0430\u0442\u044C \u0432\
    \ \u043A\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u043A\u0430\u0447\u0435\u0441\
    \u0442\u0432\u0430 \u0434\u043B\u044F \u0440\u0430\u0437\u043C\u0435\u0440\u043E\
    \u0432. \u0412 \u0442\u0430\u043A\u043E\u043C \u0441\u043B\u0443\u0447\u0430\u0435\
    \ \u043D\u0443\u0436\u043D\u043E \u0437\u0430\u043F\u044F\u0442\u0430\u0442\u044C\
    \u0441\u044F \u0434\u0432\u043E\u0438\u0447\u043D\u044B\u043C, \u0430 \u0435\u0441\
    \u043B\u0438 \u044D\u0442\u043E \u0440\u0430\u0437\u043C\u0435\u0440 \u043C\u0430\
    \u043B\u0435\u043D\u044C\u043A\u0438\u043C, \u0442\u043E \u0434\u0430\u0436\u0435\
    \ \u0447\u0442\u043E \u0434\u0430\u043D\u043D\u0430\u044F \u0437\u0430\u043F\u044F\
    \u0442\u0430\u044F \u0441 \u043E\u0434\u043D\u0438\u043C \u0440\u0430\u0437\u043C\
    \u0435\u0440\u043E\u043C \u0431\u0443\u0434\u0435\u0442 \u043F\u0440\u043E\u0441\
    \u0442\u043E \u043F\u0435\u0440\u0435\u0432\u0435\u0441\u0442\u0438 \u0432\u0441\
    \u0435 \u0432 \u043E\u0434\u043D\u0443 \u0437\u0430\u043F\u044F\u0442\u0443\u044E\
    . \u0417\u0430\u043F\u044F\u0442\u0430\u044F \u0442\u043E\u0436\u0435 \u043C\u043E\
    \u0436\u0435\u0442 \u0441\u0442\u0440\u043E\u0438\u0442\u044C\u0441\u044F \u043F\
    \u0440\u0438 \u0440\u0430\u0437\u043C\u0435\u0440\u0435 \u043E\u0434\u043D\u043E\
    \u0433\u043E \u0440\u0430\u0437\u043C\u0435\u0440\u0430 (\u0441\u043C. \u0447\u0438\
    \u0441\u043B\u043E 3).", "    if is_power_of_two(x) && is_power_of_two(n) && n==0\n\
    \    then false\n    else x == n**x\n    end\nend\n</cell>\n<code language=julia-0.5>\n\
    is_simple_power(3, 2)\n</cell>\n<text>\nWe also want a function that checks if\
    \ a number x is a prime number\n(is a number that can be expressed as the sum\
    \ of powers of some primes).\nWe will define this function in Julia and we show\
    \ how to check it using our is_simple_power", "    if (x == 1) \n    | (x == 2^n)\
    \ \n    | (x == 3^n) \n    | (x == 4^n)\n    | (x == 6^n) \n    | (x == 10^n)\
    \ \n    | (x == 15^n)\n    | (x == 20^n) \n    | (x == 25^n)\n    | (x == 30^n)\
    \ \n    | (x == 35^n)\n    | (x == 40^n) \n    | (x == 45^n)\n    | (x == 50^n)\
    \ \n    | (x == 55^n)\n    | (x == 60^n)\n    | (x == 65^n)\n    | (x == 70^n)\
    \ \n    | (x == 75^n)\n    | (x == 80^n) \n    | (x == 85^n)\n    | (x == 90)\n\
    \    | (x == 95)\n    | (x == 100)\n    | (x == 105)\n    | (x == 110)\n    |\
    \ (x == 115)\n    | (x == 120)\n    | (x == 125)\n    | (x == 130)\n    | (x ==\
    \ 135)\n    | (x == 140)\n    | (x == 145)\n    | (x == 150)\n    | (x == 155)\n\
    \    | (x == 160)\n    | (x == 165)\n    | (x == 170)\n    | (x == 175)\n    |\
    \ (x == 180)\n    | (x == 185)\n    | (x == 190)\n    | (x == 195)\n    | (x ==\
    \ 200)\n    | (x == 205)\n    | (x == 210)\n    | (x == 215)\n    | (x == 220)\n\
    \    | (x == 225)\n    | (x == 230)\n    | (x == 235)\n    | (x == 240)\n    |\
    \ (x == 245)\n    | (x == 250)\n    | (x == 255)\n    | (x == 2)\n    | (x ==\
    \ 4)\n    | (x == 8))\n    | (x == 9)\n    | (x == 16)\n    | (x == 32)\n    |\
    \ (x == 64)\n    | (x == 128)\n    | (x == 256)\n    | (x == 512)\n    | (x ==\
    \ 1024)\n    | (x == 2048)\n    | (x == 4096)\n    | (x == 8192)\n    | (x ==\
    \ 16384)\n    | (x == 32768)\n    | (x == 65536)\n    | (x == 131072)\n    | (x\
    \ == 262144)\n    | (x == 524288)\n    | (x == 1048576)\n    | (x == 2097152)\n\
    \    | (x == 4194304)\n    | (x == 819200)\n    | (x == 1638400)\n", "    return\
    \ (x == n ** x)\n</code>\n<|/ a tags=julia,boolean dscore=3 |>\n<| a tags=julia,boolean\
    \ |>\nAs was mentioned in the comments, you can use the math.ispower function,\
    \ but I wanted to point out that there is a more Julian way to do this using the\
    \ mod operator. \n<code>\njulia> mod(2, 2)\n1", "    if is_pow(x, n)\n    then\
    \ return true\n    else return false\n    end\nend\n</cell>\n<text>\nQuestion\
    \ 3\nWhat is the type of an elementary function?", "    if n==1\n    return true\n\
    \    if n==0\n    return false\n    return is_simple_power(x, n-1)**x == x\nend\n\
    </cell>\n<code language=julia-1.5>\nis_simple_power(3,2)\n</cell>\n<code language=julia-1.5>\n\
    is_simple_power(2,1)\n</cell>\n<code language=julia-1.5>", "    if is_power(x,n)\n\
    \        return true\n    return false\nend", "    if n <= 1\n        true\n \
    \   else\n        if x == n\n            true\n        else\n            false\n\
    </code>\nAnd this is the result:\n<code>\nis_simple_power(1, 4)\ntrue\nis_simple_power(2,\
    \ 2)\ntrue\nis_simple_power(8, 2)\ntrue\nis_simple_power(3, 2)\nfalse\nis_simple_power(3,\
    \ 1)\nfalse\nis_simple_power(5, 3)\nfalse\n</code>\n<|/ a tags=performance,math,python,recursion\
    \ |>\n<| a tags=performance,math,python,recursion dscore=2 |>\nSince there are\
    \ multiple answers already I'll just add the approach I came up with just for\
    \ completeness:\n<code>\ndef is_simple_power(x::Int64, n::Int64)::Bool \n    if\
    \ n < 1\n        true\n    else\n        if x == n\n            true\n       \
    \ else\n            false\n</code>\nIt's basically the recursive approach.\n<|/\
    \ a |>\n<| a dscore=2 |>\nFor a Python function, you could also use Python's mathematical\
    \ pow:\n<code>\ndef power_of_n(n, x):\n    return math.pow(n, x) == x\n</code>\n\
    <|/ a tags=performance,math,python,recursion |>\n<| c |>\nThis is an excellent\
    \ solution when you need to calculate a power of `x` quickly. However, if `n`\
    \ is an extremely large number (`1e9`) then this approach will take too long to\
    \ execute and may cause an overflow. An alternative would be to convert the `n`\
    \ to a floating-point representation and perform the calculation in floating-point\
    \ format. However, the `pow` function also requires the user to pass a large base\
    \ to handle extremely large numbers, which is an issue in practice.\n<|/ c |>\n\
    <| c |>\n: You are correct. The power function will not work in this case. My\
    \ answer was written before the question was edited and was based on my limited\
    \ understanding of Python. I'm glad you commented on it though.\n<|/ c |>\n<|\
    \ a tags=performance,math,python,recursion |>\nThis problem is equivalent to finding\
    \ the square root of an integer. One simple recursive solution is to use Newton's\
    \ method.\nIn Python, you would do this by using the math library and a function\
    \ like this:\n<code>\ndef sqrt(n):\n    return math.sqrt(n) if n >= 0 else 0\n\
    </code>\n<|/ a dscore=1 |>\n<| c |>\nI think the problem asks to find out if n\
    \ is _simple_, meaning it is a power of 2. So `sqrt(n)` will not work.\n<|/ c\
    \ |>\n<| c |>\nThis will not work with ", "    if is_power_of_two(Int64(n))\n\
    \    then x == n\n    else false\n    end\nend\n</cell>\n<code language=julia-1.6>\n\
    @test is_simple_power(1, 4)\n@test is_simple_power(2, 2)\n@test is_simple_power(8,\
    \ 2)\n@test is_simple_power(3, 2)\n@test is_simple_power(3, 1)\n@test is_simple_power(5,\
    \ 3)\n</cell>\n<text>\nProblem 2", "    if (n < 1) || (n % 1 == 0) || (n == 1)\n\
    \        true\n    else\n        x == n**(int)x\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert is_simple_power(3, 2) == true\n@assert is_simple_power(3, 1) == false\n\
    @assert is_simple_power(5, 3) == false\n</cell>\n<text>\n5.2.1. Problem 4.20",
  "    if n==0 \n        true\n    else if n==1 \n        true\n    else \n      \
    \  if x==1 \n            true\n        else if x==n^1 \n            true\n   \
    \     else \n            false\nend", "    if n==1 \n        true\n    else \n\
    \        (pow(x,n)==x) \n    end\nend\n</cell>\n<text>\n4.7. Test your function\n\
    After writing a function that checks if a number is simple power of n, test your\
    \ function with multiple inputs to make sure it works for all cases. For example:"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
