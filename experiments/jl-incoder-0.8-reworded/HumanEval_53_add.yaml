name: HumanEval_53_add
language: jl
prompt: "\"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n\
  \    12\n    \"\"\"\nfunction add(x::Int64, y::Int64)::Int64 \n"
tests: "using Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate(0, 1)\
  \ == 1)\n\t@test(candidate(1, 0) == 1)\n\t@test(candidate(2, 3) == 5)\n\t@test(candidate(5,\
  \ 7) == 12)\n\t@test(candidate(7, 5) == 12)\nend\n"
completions: ["    if x < 0 || y < 0 || x > MAX_SAFE_INTEGER || y > MAX_SAFE_INTEGER\
    \ \n        error(\"Integers can only be added to positive integers\")\n    else\
    \ \n        x + y\n    end\nend", "    if x <= 0 || y <= 0 \n        error(\"\
    invalid input\")\n    else \n        return x + y\n    end\nend", "    return\
    \ x + y\nend\n</cell>\n<code language=julia-1.5>\nadd(1, 2)\n</cell>\n<text>\n\
    Multiply\nMultiply two numbers x and y\n$$\n\\begin{align}\nx \\times y &= x\\\
    cdot y \\\nxy & = x^y\n\\end{align}\n$$", "    return x+ y\nend \n</cell>\n<code\
    \ language=julia-1.0>\n#type declaration\nadd(x::Int64,y::Int64)\n</cell>\n<code\
    \ language=julia-1.0>\nadd(x,y)\n</cell>\n<code language=julia-1.0>\n#function\
    \ definition", "    if x < 0 || y < 0 \n        error(\"x or y is negative\",\
    \ stop=false)\n    else if x == 0 || y == 0 \n        error(\"x or y is zero\"\
    , stop=false)\n    else \n        return x + y\nend\n</cell>\n<code language=julia-1.0>\n\
    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n \
    \   12\n    \"\"\"", "    return x + y\nend", "    if y==0\n        0\n    else\
    \ if y==1\n        x\n    else\n        x+y\nend\n</cell>\n<text>\nExercise 2:\
    \ Add together two arrays\nWrite a function called add2() that adds two arrays\
    \ x and y. \nThe function should have as its return value a two element array.\n\
    The first element in the array should contain the sum of the first element of\
    \ x and y.\nThe second element in the array should contain the sum of the second\
    \ element of x and y.\nThe function should raise an error if any of the arrays\
    \ does not have two elements.", "    if x <= y\n        then x + y\n    else\n\
    \        x + y - 1\nend\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThat's what I was\
    \ looking for!\n<|/ c |>\n<| a tags=julia |>\nHere's an example for adding two\
    \ numbers in Julia:\n<code>\njulia> add(1, 3)\n4\n</code>\nYou can also add two\
    \ variables:\n<code>\njulia> add(1, 2)\n3\n</code>\nOr even with functions:\n\
    <code>\njulia> function foo(a, b)\n           a + b\n       end", "    | x ==\
    \ y = 0\n    | x > y    = x + y - 1\n    | x < y    = x - y + 1\nend\n</code>\n\
    <|/ a tags=julia,julia-jump |>\n<| a tags=julia,julia-jump |>\nThis is a slight\
    \ variation on John Kugelman's solution that I find easier to read and comprehend.\n\
    <code>", "    if x < 0 || y < 0\n        throw(ErrorException(\"Input cannot be\
    \ negative\"))\n    else\n        return x+y\nend", "    if (x > y)\n        then\
    \ return x + y\n    else return y + x", "    if x == 0 && (y == 0 || (y == 1 &&\
    \ x > 0)))\n        return y\n    if x == 0 && y != 0\n        return y\n    if\
    \ x == 1 && y != 0\n        return y\n    if y == 0 && x > 0\n        return y\n\
    \    if y != 0 && x > 0\n        return x\n    if x != 0 && y > 0\n        return\
    \ x\n    return x + y\n</code>\nThis function will return an error if one of the\
    \ two numbers is zero. Since zero is a member of an infinite set, you can define\
    \ it as any value you want. It doesn't have to be a number though. Just define\
    \ a function which can do what you want when passed zero as one of the two parameters.\
    \ In the case where both parameters are zero just use zero.\nThis solution is\
    \ still very bad in terms of efficiency but you can write a much better one with\
    \ more efficiency that avoids unnecessary if statements. You will need to think\
    \ a bit more about this.\n<|/ a tags=julia,performance,function |>\n<| c |>\n\
    Thanks for the answer. I knew it would be simple and efficient as written. I would\
    \ just like to get it right now and understand why it works. I do agree that it\
    \ is really bad in terms of efficiency, but I am just trying to make things work.\
    \ I'm looking for a solution which has linear efficiency and doesn't use if statements.\
    \ This is part of a larger function, and I am just trying to understand why this\
    \ approach works and why my original solution doesn't.\n<|/ c |>\n<| a |>\nThis\
    \ is pretty much a direct translation of the first answer by Jianfeng Wu from\
    \ the Mathematica community site:\n<code>", '    return x + y', "\"\"\"Adds two\
    \ numbers x and y\n\"\"\"", "    if x == 0 || y == 0 \n    then 0\n    else x\
    \ + y\nend\n</cell>\n<text>\nExercise: Add two numbers x and y, and check that\
    \ it works.", "\"\"\"\n\"\"\"\n    \n# %% [markdown]\n\"\"\"\n    \n# %% [markdown]\n\
    \"\"\"\n# %% [markdown]\n\"\"\"\n# %% [markdown]\n\"\"\"\n# %% [markdown]\n\"\"\
    \"\n# %% [markdown]\n\"\"\"\n# %% [markdown]\n\"\"\"\n# %% [markdown]\n\"\"\"\n\
    # %% [markdown]\n\"\"\"\n# %% [markdown]\n\"\"\"\n# %% [markdown]\n\"\"\"\n# %%\
    \ [markdown]\n\"\"\"\n# %% [markdown]\n\"\"\"\n# %% [markdown]\n\"\"\"\n# %% [markdown]\n\
    \"\"\"\n# %% [markdown]\n\"\"\"\n# %% [markdown]\n\"\"\"\n# %% [markdown]\n\"\"\
    \"\n# %% [markdown]\n\"\"\"\n# %% [markdown]\n\"\"\"\n# %% [markdown]\n\"\"\"\n\
    # %% [markdown]\n\"\"\"\n# %% [markdown]\n\"\"\"\n# %% [markdown]\n\"\"\"\n# %%\
    \ [markdown]\n\"\"\"\n# %% [markdown]\n\"\"\"\n# %% [markdown]\n\"\"\"\n# %% [markdown]\n\
    \"\"\"\n# %% [markdown]\n\"\"\"\n# %% [markdown]\n\"\"\"\n# %% [markdown]\n\"\"\
    \"\n# %% [markdown]\n\"\"\"\n# %% [markdown]\n\"\"\"\n# %% [markdown]\n\"\"\"\n\
    # %% [markdown]\n\"\"\"\n# %% [markdown]\n\"\"\"\n# %% [markdown]\n\"\"\"\n# %%\
    \ [markdown]\n\"\"\"\n# %% [markdown]\n\"\"\"\n# %% [markdown]\n\"\"\"\n# %% [markdown]\n\
    \"\"\"\n# %% [markdown]\n\"\"\"\n# %% [markdown]\n\"\"\"\n# %% [markdown]\n\"\"\
    \"\n# %% [markdown]\n\"\"\"\n# %% [markdown]\n\"\"\"\n# %% [markdown]\n\"\"\"\n\
    # %% [markdown]\n\"\"\"\n# %% [markdown]\n\"\"\"\n# %% [markdown]\n\"\"\"\n# %%\
    \ [markdown]\n\"\"\"\n# %% [markdown]\n\"\"\"\n# %% [markdown]\n\"\"\"\n# %% [markdown]\n\
    \"\"\"\n# %% [markdown]\n\"\"\"\n# %% [markdown]\n\"\"\"\n# %% [markdown]\n\"\"\
    \"\n# %% [markdown]\n\"\"\"\n# %% [markdown]\n\"\"\"\n# %% [markdown]\n\"\"\"\n\
    # %% [markdown]\n\"\"\"\n# %% [markdown]\n\"\"\"\n# %% [markdown]\n\"\"\"\n",
  "    local x\n    local y\n    x = x + y\n    return x", "    if x <> 0 \n     \
    \   then x + y\n    else\n        0\n    end\nend\n</code>\n<|/ a dscore=2 |>\n\
    <| c |>\nI guess you misunderstood the question\n<|/ c |>\n<| a tags=julia dscore=2\
    \ |>\nThe function add in the original question can easily be extended by wrapping\
    \ it in an if statement to prevent it from being used on zero, e.g. if x <> 0.\
    \ As it stands, it gives an error when x is zero, so it seems better to just use\
    \ if x != 0.\nThe function add in the question can be easily modified in the following\
    \ way to avoid the issue with the type mismatch\n<code>", "    if x < y\n    \
    \    then return x + y\n        else return x - y\n    end\nend", "    x + y\n\
    end\n</cell>\n<code language=julia-1.0>", "    return x^y\n</code>\nor use Int64,\
    \ which is the base type for int and double as you said.\n<|/ a dscore=0 |>\n\
    <| c |>\nNo, the point is not the Int vs Integer vs Int64 types. It's because\
    \ Int has a fixed width, and Integer does not. It would also fail for Double (which\
    \ is Double precision floating point number with 64 bits). \nIf you want it to\
    \ work for all types, use Base.add (which works for most types including Int and\
    \ Double).\n<|/ c |>\n<| c |>\nI see what you mean. Thanks for your input, but\
    \ Int64 is indeed the solution.\n<|/ c |>\n<| a tags=julia dscore=0 |>\nThe Julia\
    \ documentation on Base mentions the function Base.add for adding two numbers,\
    \ e.g.:\n<code>\nBase.add(x, y)\n</code>\nwhich returns a new value which is the\
    \ sum of the two given values.\nI cannot find this function in the current version\
    \ of Julia, but when I look at the source code for version 1.0.0 it appears to\
    \ exist:\nhttps://github.com/JuliaLang/julia/blob/1.0.1/base/add.jl\n<|/ a |>\n\
    <| c |>\nI realised that Int has both a fixed width and a variable width and Integer\
    \ does not. Perhaps this is why the add function does not exist for Int? It was\
    \ only introduced in version 0.6 where it wasn't yet a Base.add function.\n<|/\
    \ c |>\n<| c |>\nInt is fixed width by definition, and Int64 is variable width.\
    \ Since Int is a fixed width type it is the same as Int64. Integer on the other\
    \ hand is not fixed width, and therefore the function Base.add does not exist\
    \ for it.\n<|/ c |>\n<| a tags=julia dscore=0 |>\nJust use + (unary plus)\n<code>\n\
    julia> 5 + 5\n10\njulia> 5 - 5\n-5\njulia> 5 * 5\n25\njulia> 5 ** 3\n625\n</code>\n\
    <|/ a |>\n<| c |>\n`+` is not the same as `+` for two numbers. Try this example:\
    \ `(5 + 5) + 5 + 5 + 5 + 5 + 5 + 5 + 5 + 5 + 5 + 5 + 5 + 5 + 5 + 5 + 5 + 5 + 5\
    \ + 5 + 5 + 5 + 5 + 5 + 5 + 5 + 5 + 5 + 5 + 5 + 5 + 5 + 5 + 5 + 5 + 5 + 5 + 5\
    \ + 5 + 5 + 5 + 5 + 5 + 5 + 5 + 5 + 5 + 5 + ", "    if x > 0\n        then x +\
    \ y\n    else if y > 0\n        then x - y\n    else\n        x\nend\n\"\"\"\n\
    \"\"\"\n\"\"\"", "    if x > y then\n        x + y\n    else\n        y - x\n\
    \    end\nend\n</code>\nThe first if checks if the first number is greater than\
    \ the second, and if it is then it returns x + y, else it returns y - x.\nThe\
    \ second if checks if the first number is less than the second, and if it is then\
    \ it returns y - x, else it returns x + y.\n<|/ a |>\n<| c |>\nIt's not really\
    \ necessary. You're using a builtin that does exactly what you're trying to do;\
    \ just use it!\n<|/ c |>\n<| c |>\nHe wants to know how to do this for a general\
    \ function; as opposed to just adding numbers. This is what he wants.\n<|/ c |>\n\
    <| c |>\nThat's a very good point! I'll update the answer with it.\n<|/ c |>\n\
    <| c |>\nThanks a lot man, I've learned a lot from your explanation.\n<|/ c |>\n\
    <| a |>\nThe answer is in Programming in Julia, which is essentially the book\
    \ you were looking for.\nThe short answer is that the function you are looking\
    \ for is called clamp, and you can find it here: http://julia.readthedocs.org/en/latest/stdlib/math/#Base.clamp.\n\
    This allows you to define a function that takes two arguments and returns one\
    \ such that two other arguments meet the criteria that would make the output of\
    \ that function be greater than the function inputs. \nIf you were to write your\
    \ own function, however, you would need to write your own clamp function as well.\n\
    <|/ a tags=julia,function dscore=4 |>\n<| c |>\nThanks a lot for your answer.\
    \ I already have the clamp function in my code, but I thought there might be another\
    \ way of doing it using just a single function.\n<|/ c |>\n<| a tags=julia,function\
    \ dscore=4 |>\nIn Julia, all functions are functions.  (You can call a function\
    \ like a function, but you cannot assign an arbitrary function to another function\
    \ - this would be bad.)\nIn contrast, variables (and types) are names that serve\
    \ as a reference to an object.\n<code>\njulia> function add(x::Int64, y::Int64)\n\
    \           if x > y \n              x + y\n           else\n              y -\
    \ x\n           end\n       end\nadd (generic function with 1 method)", "    x\
    \ = x + y\n    return x\nend\n\"\"\"\n Subtract two numbers x and y\n    >>> sub(2,\
    \ 3)\n    1\n    >>> sub(7, 5)\n    4\n    \"\"\"", "    return x+ y \nend ",
  "    if x > y\n        x + y\n    else\n        y - x\n    end\nend", "    \"\"\"\
    \n    z = x + y\n    return z\nend\n</cell>\n<code language=julia-0.5>\njulia_0.0.version\n\
    </cell>\n<code language=julia-0.5>\n?@doc\n</cell>\n<code language=julia-0.5>\n\
    ?@code_native \n</cell>\n<code language=julia-0.5>\n@code_native add(1, 2)\n</cell>\n\
    <code language=julia-0.5>\n@code_native add(x::Int64, y::Int64)\n</cell>\n<code\
    \ language=julia-0.5>\n@code_native @doc add\n</cell>\n<text>\nFunction docstring",
  "    if x==0 || y==0 then 0 else x + y\nend", "    if x >= y \n        then x +\
    \ y\n        else y + x\n    end\nend\n</cell>\n<code language=julia-1.4>\n\"\"\
    \"Take two numbers and return the sum of the two\n    >>> add(2, 3)\n    5\n \
    \   >>> add(5, 7)\n    12\n    \"\"\"", "    y = x + y\n    return x\nend", " \
    \   if x < y\n        then x + y\n    else\n        x + y\n    end\nend", "  if\
    \ x < y\n    then x + y\n  else y\n  end \nend ", "    if x<0 | y<0\n        return\
    \ error(\"Invalid Input\")\n    return x+y", "  if x >= 0 \n    then x + y \n\
    \  else \n    x + y + 1 \nend \n</cell>\n<code language=julia-1.5>\n\"\"\"Check\
    \ two numbers x and y\nReturn true if they are equal or false if they are not\
    \ equal\n    >>> check(1, 2)\n    True\n    >>> check(1, 3)\n    False\n\"\"\"",
  "    if x >= 0 && x < y \n        then x + y \n        else y + x \n    end\nend\n\
    </code>\n<|/ a tags=julia,performance |>\n<| c |>\nI suggest you to put the `if`\
    \ statement before the `return` statement. Otherwise, the function will exit right\
    \ after `return`\n<|/ c |>\n<| c |>\nI actually think that's a good idea, I will\
    \ amend my answer now\n<|/ c |>\n<| a tags=julia,performance |>\nThe solution\
    \ proposed by is good, but it assumes that all possible values will be returned.\
    \ Sometimes you may not want that: for example, if you wish to return an error\
    \ code instead of an error message. \nIn such a case you can use throw:\n<code>",
  "\"\"\"Add two numbers x and y\n\"\"\"", "        if x < 0 \n            error(\"\
    Invalid input: negative number\")\n        elseif y == 0\n            error(\"\
    Invalid input: y cannot be zero\")\n        elseif y > 0\n            z = x +\
    \ y\n        elseif y >= x\n            z = x + y\n        else\n            error(\"\
    Invalid input: x and y are equal\")\n        end\n    return z\nend\n\"\"\"\n\
    >>> add(1, 3)\n4\n>>> add(3, 4)\n7\n>>> add(-4, 1)\n-5\n>>> add(5, 0)\n5\n\"\"\
    \"", "    if x == 0 \n        then return y\n        else return x + add(y - 1,\
    \ 0)\n    end\nend ", "    return x+ y\nend\n</cell>\n<code language=julia-1.4>\n\
    #export", "    if x <= 0 || y <= 0\n        error(\"Arguments must be positive.\"\
    , 2)\n    end\n    x + y\nend\n</cell>\n<text>\nNote that I've used the function\
    \ end rather than a semicolon. This is mostly a matter of personal style. Having\
    \ a ; at the end of statements is a matter of style, and is mostly optional. However,\
    \ it's very important that you use a ; at the end of the statement to make it\
    \ clear that you're returning the value and not just running the rest of the function.",
  "    if x==0\n        0\n    elseif y==0\n        x\n    elseif y<0\n        0\n\
    \    elseif y>0\n        x + add(x-1, y)\n    else \n        x + add(x-1,0)\n\
    end\n</code>\nand to call it simply do:\n<code>\nadd(2, 3)\n</code>\n<|/ a dscore=0\
    \ tags=julia,function,recursion,runtime-error |>\n<| c |>\nThat is what I tried,\
    \ but I did not know where to put the return statement.\n<|/ c |>\n<| c |>\nYou\
    \ can add the return statement wherever you want, but since your final else case\
    \ is always going to be the result of your function calls, you don't need it at\
    \ all. You can just remove it\n<|/ c |>\n<| a dscore=0 |>\nYou can solve this\
    \ by returning some kind of result of the add function in your else block. \n\
    <code>", "    if x == 0\n    then y\n    else\n        x + y\nend", "    if x\
    \ == y then return x else return x + y\nend\n\"\"\"\nAdd two numbers x and y\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"", "    \"\"\"\
    Compute x + y and return the result.\"\"\"\n    return x + y", "    return (x\
    \ + y)\n</code>\n<|/ a dscore=0 tags=julia,functional-programming |>\n<| c |>\n\
    Thanks Matt, and that does work (and it was a typo). So then what is the difference\
    \ between this implementation and the one I posted in the original question? The\
    \ point of putting it in the function and using (+) is just to make the code more\
    \ legible to me, and I see no other reasons.\n<|/ c |>\n<| c |>\nThe one you posted\
    \ did not work. In the `add` function, when you write `function add(...)::Int64`\
    \ you are defining a function of the same name `add` with the parameters and return\
    \ type specified. `+` does not work because `+` is only defined for two `Int64`s.\
    \ If you would have written `function add(...)::Int64; ...; end` then you would\
    \ have defined the function and could write `add(x + y)`.\n<|/ c |>\n<| c |>\n\
    Ah that makes sense, thank you. I will use the function form then.\n<|/ c |>\n\
    <| a tags=julia,functional-programming |>\nIt doesn't work because when you write\
    \ function add(...)::Int64, you are defining a function of the same name add with\
    \ the parameters and return type specified. + does not work because + is only\
    \ defined for two Int64s.\nIf you would have written function add(...)::Int64;\
    \ ...; end then you would have defined the function and could write add(x + y)\
    \ or even add(x, y + 1) as they would all be valid Julia expressions.\n<|/ a dscore=0\
    \ |>\n<| a |>\nYou can't define functions in Julia. Think of Julia like a scripting\
    \ language. You can only define global variables (like x = 1) and functions (like\
    \ function add(x,y) = x + y).\nIn Julia, you can't do that. Instead of using global\
    \ variables inside functions, use parameters inside a function:\n<code>", "  \
    \  if x <= y\n        then x + y\n    else\n        x + y\n    end\nend\n\"\"\"\
    \n\"\"\"\n## More on `if`\n\"\"\"\n\"\"\"\n- \n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\
    \"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n## More on `else`\n\"\"\"\n\"\"\"\n- \n\"\"\"\n\
    \"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\
    \n\"\"\"\n## More on `end`\n\"\"\"\n\"\"\"\n- \n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\
    \n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\
    \"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n## More on `return`\n\
    \"\"\"\n\"\"\"\n- \n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\
    \"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\
    \"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\
    \n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n## More on `end`\n\"\"\"\n\"\"\"\n- \n\"\"\"\
    \n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\
    \"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\
    \"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\
    \"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\
    \n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\
    \"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\
    \"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\
    \"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\
    \n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\
    \"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\
    \"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\
    \"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\
    \n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\
    \"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\
    \"\"\n\"\"\"\n\"\"\"\n", "    if x != 0 || y != 0 \n        then \n          \
    \  return x + y\n        else\n            return 0\n    end\nend", "    if x\
    \ == 0 || y == 0 \n        then return 0\n    else \n        return (x + y) *\
    \ (-1)\nend\n</code>\nTo be more accurate, this function can be rewritten to this:\n\
    <code>", "    if x == 0 | y == 0 \n        then 0\n    else \n        x + y\n\
    \    end\nend", "    if x == 0 || y == 0 \n        then 0\n        else x + y\n\
    \    end", "    \n    if x < 0 \n        throw ArgumentError(message = \"x cannot\
    \ be less than zero\")\n    else if y <= 0\n        throw ArgumentError(message\
    \ = \"y cannot be less than zero\")\n    else if x == 0 \n        throw ArgumentError(message\
    \ = \"x cannot be zero\")\n    else if y == 0\n        throw ArgumentError(message\
    \ = \"y cannot be zero\")\n    else \n        return x + y\nend", "    if x ==\
    \ 0 || y == 0 \n    then 0\n    else x + y\n    end\nend\n</code>\nThe function\
    \ return 0 on x or y equal to zero.\nIf you need x or y greater than zero, you\
    \ can change the function to:\n<code>", "    if x == 0 || y == 0 \n    then x\
    \ + y \n    else x + y + add(x-1, y-1)\n</code>\n<|/ a dscore=0 |>\n<| a tags=math,algorithm,recursion,functional-programming,haskell\
    \ dscore=0 |>\nFor a recursive function\n<code>\nadd::Int64->Int64->Int64\n</code>\n\
    it would be \n<code>\nadd x y = x + y + add (x - 1) (y - 1)\n</code>\nBut we actually\
    \ have no need for recursion, so instead we can use an iterative function with\
    \ a while loop\n<code>\nadd::Int64->Int64->Int64\nadd x y | y == 0 = 0\n     \
    \     | x == 0 = y\n          | x < 0 = -1\n          | y < 0 = -1\n         \
    \ | x < y = x + add (x - 1) (y - 1)\n          | otherwise = x + add (x - 1) (y\
    \ - 1)\n</code>\n<|/ a |>\n<| c |>\nThis implementation is buggy: it returns `-1`\
    \ for the base cases, and `x + add (x - 1) (y - 1)` for the recursive cases. It's\
    \ not exactly what I would consider recursive.\n<|/ c |>\n<| c |>\nIndeed, this\
    \ implementation is buggy. I will fix it when I get home.\n<|/ c |>\n<| a |>\n\
    Using recursion can be extremely inefficient - but also extremely elegant - so\
    \ it's probably worth your time to learn how to write elegant code.\n<code>\n\
    add x y | x == y = 0\nadd x y | x == 0 && y == 0 = x\nadd x y | x == 0 && y !=\
    \ 0 = -1\n          | x != 0 && y == 0 = x\n          | x > 0 && y > 0 = x + add\
    \ (x-1) (y-1)\nadd x y | x > 0 && y > 0 = x + add (x-1) (y-1)\n</code>\nHere's\
    \ a version with a simpler base case:\n<code>\nadd x y | x == y = x\n        \
    \  | x == 0 && y == 0 = x\n          | x != 0 && y == 0 = x\n          | x > 0\
    \ && y > 0 = x + add (x-1) (y-1)\n</code>\n<|/ a tags=math,algorithm,recursion,functional-programming,haskell\
    \ dscore=0 |>\n<| c |>\nAs a point of interest, this implementation is buggy.\
    \ It returns `-1` for the base cases, and `x + add (x - 1) (y - 1)` for the recursive\
    \ cases. It's not exactly what I would consider recursive.\n<|/ c |>\n<| a dscore=0\
    \ |>\n<code>", "    if x == 0 \n        then return y\n    else\n        return\
    \ x+y\n    end\nend", "    x + y\nend\n</cell>\n<cell>\n@doc \"\"\"\n    multiply\
    \ two numbers x and y\n    >>> multiply(2, 3)\n    6\n    >>> multiply(5, 7)\n\
    \    50\n    \"\"\"", "   if x < y then x + y\n   else x - y\nend\n</code>\n<|/\
    \ a |>\n<| a dscore=0 tags=julia |>\n<code>\n# Julia version", "    if x == 0\
    \ \n        then return y\n        else return x + add(x-1, y)\nend\n</cell>\n\
    <text>\nExercise 2.22\nWrite a program that returns the result of adding the numbers\
    \ 100 and 1 hundred and twenty-six to the number 1 thousand. Hint: You can use\
    \ the function add(). \nHint: You can use the function div().", "    if x == 0\
    \ && y == 0\n        return 0\n    else if x < 0 || y < 0\n        error(\"invalid\
    \ inputs for add\")\n    end\n    if x == 0\n        return y\n    if y == 0\n\
    \        return x\n    return x + y\nend", "  if x >= 0\n    else x < 0\n  else\n\
    \    x < 0\n  return x + y\nend", "    if x == 0\n        then return y\n    else\n\
    \        if y == 0\n            then return x\n        else\n            return\
    \ x + y\n    end\nend", "    sum <- x + y\n    return sum\nend \n\"\"\"\n\"\"\"\
    \n## Using a function", "    if x >  y\n        then x + y\n        else y - x\n\
    \    else x \nend", "    if x >= 0 && x < y \n    then x\n    else y\nend\n  \
    \  \"\"\"\n    ```\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\
    \n    \"\"\"\n    ```\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    Add two numbers\
    \ x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n \
    \   \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    ```\n    \"\"\"\
    \n    \"\"\"\n    \"\"\"\n    Add two numbers x and y\n    >>> add(2, 3)\n   \
    \ 5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\
    \n    \"\"\"\n    \"\"\"\n    ```\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    Add\
    \ two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n \
    \   \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    ```\n    \"\"\"\
    \n    \"\"\"\n    \"\"\"\n    Add two numbers x and y\n    >>> add(2, 3)\n   \
    \ 5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\
    \n    \"\"\"\n    ```\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    Add two numbers\
    \ x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n \
    \   \"\"\"\n    \"\"\"\n    \"\"\"\n    ```\n    \"\"\"\n    \"\"\"\n    Add two\
    \ numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\
    \"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    ```\n    \"\"\"\n    \"\"\"\n  \
    \  Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n\
    \    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    ```\n    \"\"\"\n    \"\"\
    \"\n    Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n\
    \    12\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    ```\n    \"\"\"\n\
    \    \"\"\"\n    Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5,\
    \ 7)\n    12\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    ```\n    \"\"\
    \"\n    \"\"\"\n    Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>>\
    \ add(5, 7)\n    12\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    ```\n\
    \    \"\"\"\n    \"\"\"\n    Add two numbers x and y\n    >>> add(2, 3)\n    5\n\
    \    >>> add(5, 7)\n    12\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n \
    \   ```\n    \"\"\"\n    \"\"\"\n    Add two numbers x and y\n    >>> add(2, 3)\n\
    \    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\
    \"\n    ```\n    \"\"\"\n    \"\"\"\n    Add two numbers x and y", "    return\
    \ x + y\n</code>\n<|/ a |>\n<| c |>\nI dont think this is valid in Julia?\n<|/\
    \ c |>\n<| c |>\nI am not aware of a `add` function in Julia, but the code was\
    \ taken from http://julia-lang.org/downloads/stable/\n<|/ c |>\n<| c |>\nThe question\
    \ was about adding two numbers so this answer is correct for the question, but\
    \ not a good example of good Julia code. `add` is not a Julia function, but a\
    \ Julia builtin. `add2` is a good example of a Julia function.\n<|/ c |>\n<| c\
    \ |>\nThe question was about adding two numbers so I thought the answer is valid\
    \ for both questions.\n<|/ c |>\n<| c |>\nThis does not answer the question. The\
    \ question was about adding two numbers. The answer was to demonstrate a function\
    \ that does that. Also, this add2 is unnecessary, see other answers.\n<|/ c |>\n\
    <| a tags=julia,function |>\n<code>", "\"\"\"\n    if x < y \n    then x + y\n\
    \    else y + x\n    end\nend\n</code>\nAnd this is what the compiler gives me:\n\
    <code>\njulia> add(2, 3)\nERROR: LoadError: UndefVarError: add not defined\nStacktrace:\n\
    \ [1] top-level scope at none:0\n</code>\nCan anyone help me? I am very new to\
    \ Julia so I may be missing something obvious.\n<|/ q tags=julia,package,function\
    \ dscore=1 |>\n<| c |>\nYour code has two missing parenthesis after the if statement:\
    \ `if x < y then (x + y)  else (y + x)  end end`.\n<|/ c |>\n<| c |>\nAhh, thank\
    \ you. That fixed that issue.\n<|/ c |>\n<| a |>\nIn Julia, you have to distinguish\
    \ between functions, modules, macros, etc. One way to distinguish is by looking\
    \ at their type signature. For example, if you have a function, you can type ?add\
    \ which gives you the signature:\n<code>\njulia> add(x)\nadd(x::Real)", "    x\
    \ + y\nend", "   \n     \n    return x+y\nend\n</code>\n<|/ q dscore=2 |>\n<|\
    \ c |>\nYou have a `try` statement that doesn't catch anything. This is the issue.\
    \ Your `catch` statement isn't doing anything at all. If you want to catch any\
    \ error and do something with it, use `catch e`.\n<|/ c |>\n<| a tags=julia |>\n\
    As per your error message, you didn't include catch SomeError in your try block.\
    \  But that isn't the only issue with your code.  When you use a statement like\
    \ add or try inside a try block, you have to put the catch clause somewhere inside\
    \ the try block.  The simplest way is to just put it at the end of the try block:\n\
    <code>", "    if x < 0\n        error \"negative value not allowed\"\n    else\
    \ if y < 0\n        error \"negative value not allowed\"\n    else\n        return\
    \ x + y\nend\n</cell>\n<text>\nFor loops", "    if x != 0\n        throw(\"Not\
    \ a number\")\n    end\n    if y != 0\n        throw(\"Not a number\")\n    end\n\
    \    return x + y\nend\n\"\"\"Add two numbers x and y\n    >>> add(2, 3)\n   \
    \ 5\n    >>> add(5, 7)\n    12\n\"\"\"", "    if x == 0 || y == 0 then return\
    \ 0\n    if x > y then return add(x-y, y)\n    if x == y then return x\n    return\
    \ add(x-y, x) + y\nend\n</code>\nI tried to run this on Julia 1.3 but I'm getting\
    \ an error for the last line of the add function. The error I get is \n<code>\n\
    ArgumentError: invalid keyword argument \"else\"\n</code>\nThe code still works\
    \ fine in Julia 0.7 but I'm looking for a way to make it work with the latest\
    \ Julia versions. \nI thought the Julia 0.7 parser was smart enough to figure\
    \ out that the last line in the add function only calls another function and not\
    \ an if/else, but it seems like the parser just isn't that smart.\n<|/ q dscore=0\
    \ |>\n<| c |>\nThe `else` keyword is valid syntax only in Julia 0.5. Julia 1.0\
    \ removed it altogether.\n<|/ c |>\n<| c |>\nOk, that makes sense. Is there anyway\
    \ to fix this with 1.0 ?\n<|/ c |>\n<| c |>\n`if x < y then x + y else y end`\
    \ should work.\n<|/ c |>\n<| c |>\nThat's what I was going to do, but I was curious\
    \ if it was possible to keep it a nested function. I guess not.\n<|/ c |>\n<|\
    \ c |>\nOk, so I've done some more digging and I'm guessing it's not possible\
    \ to do that without having an `else` statement. Thanks.\n<|/ c |>\n<| a tags=julia,julia-jump\
    \ dscore=2 |>\nIt's not possible in 0.7 but it's planned to be supported in 0.8.\
    \ \nSee the pull request https://github.com/JuliaLang/julia/pull/4451/files#diff-814ebbf70c66ef7d24adf84e491564aR26\
    \ for details.\n<|/ a |>\n<| c |>\nIt looks like the syntax for 0.8 has changed\
    \ again. I'm still getting an error that doesn't make any sense. I'll edit my\
    \ original post to show the syntax I'm currently using.\n<|/ c |>\n<| c |>\nOh,\
    \ my bad, I forgot to wrap my function in a block. Now it works. Thanks.\n<|/\
    \ c |>\n<| c |>\nIt looks like this syntax will eventually be supported for Julia\
    \ 1.0: https://github.com/JuliaLang/julia/issues/4446\n<|/ c |>\n<| c |>\nIt looks\
    \ like the syntax has changed again for 1.0. I'm still getting an error that doesn't\
    \ make any sense", "    if x < y\n        then x + y\n    else\n        x - y\n\
    end\n</code>\nThis function does not modify the arguments in any way; it simply\
    \ returns x + y, which can be computed more efficiently than adding if x < y.\n\
    <|/ a |>\n<| c |>\nWhat if I want to return something other than an Int64? Would\
    \ this work then?", "    if x<y \n    then return x+y\n    else return x-y\n \
    \   end\nend\n\"\"\"\nWrite a function called sub that takes 2 numbers as arguments.\n\
    The function should return the result of the subtraction \nof the two numbers.",
  "    if x == 0 || y == 0 \n        then return 0\n    else \n        then return\
    \ x + y\n    end\nend", "    if x <= 0\n    then return x\n    else if y <= 0\n\
    \    then return y\n    else return x + y", "    return x + y\nend\n</cell>\n\
    <text>\nNote that nothing changes here, except for the function signature.", " \
    \   if x < y\n        then x + y\n        else\n            x - y\n    end\nend",
  "    z = x + y\nend\n</cell>\n<text>\n4.5 Function add!(x::Int64, y::Int64)::Int64",
  "    x = x + y\n    return x\nend ", "    if x==0 || y==0 then 0 else x+y \nend\n\
    </code>\nand \n<code>\n\"\"\"Calculate the average of two numbers\n    >>> add(1,\
    \ 2)\n    3\n    >>> add(3, 6)\n    7\n    \"\"\"", "    if x <= 0 || y <= 0\n\
    \        error(\"Error with add\")\n    elseif x > y\n        error(\"Error with\
    \ add\")\n    else\n        return x + y\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    # Run your add function with the example numbers\n# Try it out on the REPL\nadd(2,\
    \ 3)\n</cell>\n<code language=julia-1.5>\nadd(3, 4)\n</cell>\n<text>\nExercise\
    \ 7: Sum all odd numbers in an array", "    \n    add(x, x + y)\nend", "    x\
    \ + y\nend", "    if x <= 0\n    then x + y\n    else\n        x + (y + 1)\n \
    \   end\nend\n</code>\nAnd similarly for +.\nNote that in Julia it is preferable\
    \ to use a separate operator for positive and negative, e.g. +:\n<code>", "  \
    \  return x+y\n</code>\n<|/ a dscore=0 |>\n<| c |>\nI do not know why the code\
    \ is not formatted correctly in the answer above\n<|/ c |>\n<| c |>\nThe code\
    \ does not look very beautiful to me. I would suggest to put `function add(x::Int64,\
    \ y::Int64)::Int64` in separate line and start function name with `add`\n<|/ c\
    \ |>\n<| c |>\nI agree with you, that makes more sense to me. I will edit my answer.\n\
    <|/ c |>\n<| a dscore=0 tags=julia |>\nThe answer by Daniel Kahlel is correct.\
    \ \nHere are some more examples, if you would like to use them.\n<code>", "  \
    \  if x > 0\n        then x\n    else y\n    end\nend\n\"\"\"\nAdd two numbers\
    \ x and y\n    \"\"\"", "    x = x + y\n    return x", "    return x+y\n</code>\n\
    The return type of add is Int64.\nLet's now use that new function to calculate\
    \ the sum of the elements in the vector\n<code>\nx = collect(1:10)\ny = collect(1:10)",
  "    return (x + y) \nend # add\n</cell>\n<code language=julia-1.5>\n\"\"\"Add two\
    \ strings x and y\n    >>> add(\"2\", \"3\")\n    \"5\"\n    >>> add(\"5\", \"\
    7\")\n    \"12\"\n\"\"\"", "    if x > 0 \n        then return y + x \n      \
    \  else return y\n    else \n        then return x\n    end\nend", "    if x is\
    \ NaN then\n        if y is NaN then NaN\n        else NaN\n    else\n       \
    \ return x + y\nend\nend\n</code>\n<|/ a |>\n<| a dscore=0 |>\nMy original answer\
    \ was wrong. The correct solution is to convert the numbers to a Float64 and use\
    \ +.\n<code>", "    if x <= 0 || y <= 0 \n        error(\"Please insert positive\
    \ numbers\")\n    else\n        return (x + y)\n    end", "    if x == 0 || y\
    \ == 0 \n        then return 0\n    else \n        then\n            return x\
    \ + y\n        end\nend\n</code>\nand you can use the function as shown below:\n\
    <code>\njulia> add(1, 2)\n5", "    if y <= x \n        then x + y\n        else\
    \ x + y + 1\n    end\nend\n</code>\nThe code above is much shorter. But the code\
    \ in the function above is much less readable. The reason is because functional\
    \ programming is about composing functions and composing functions leads to more\
    \ readable code than writing imperative code. The above function could be rewritten\
    \ like this:\n<code>", "if x < y\n    then return x + y\nelse return x + y\nend\n\
    \"\"\"", "    if (x>y) \n        then (x+y) else (y-x) \nend\n\"\"\"\n\"\"\"\n\
    Adds two numbers x and y\n\"\"\"", "    if x <= 0 && y <= 0\n    then return 0\n\
    \    else return x + y\nend\n</cell>\n<text>\nLet's look at the new function using\
    \ Julia's interactive shell:", "     return a + b\nend\n\"\"\"\n    function sum(x::Int64;\
    \ y::Int64)::Int64 \n        return x + y\n    end\n    \"\"\"\n    \"\"\"\n \
    \   function mul(x::Int64; y::Int64)::Int64 \n        return x * y\n    end\n\
    \    \"\"\"\n    function div(x::Int64; y::Int64)::Int64 \n        return x /\
    \ y\n    end\n    \"\"\"\n\"\"\"\n    function idiv(x::Int64; y::Int64)::Int64\
    \ \n        return x % y\n    end\n    \"\"\"", "    if x < 0 \n        error\
    \ \"`x + y` can only be used when `x` is positive\" \n    else \n        return\
    \ x + y\nend\n\"\"\"\n#### Example usage\n\"\"\"\n    >>> add(5, 7)\n    12\n\
    \    >>> add(5, 0)\n    5\n\"\"\"", "    if x < y\n        then return x + y\n\
    \        else return x\n    end\nend\n</cell>\n<text>\nRefactor our add function\
    \ so that it returns the sum of the given numbers:", "    if x < y\n        then\
    \ x + y\n        else y\n    end\nend", "    \"\"\"Add two numbers x and y\n \
    \   >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"", "    if x >=\
    \ 0\n        return x + y\n    else\n        return x - y\n    end\nend", "  \
    \  x + y\nend\n</cell>\n<code language=julia-1.0>\nadd(1, 2)\n</cell>\n<code language=julia-1.0>",
  "    return x + y\n</code>\nAnd now we can use them in expressions:\n<code>\njulia>\
    \ add(10, 5)\n15", "    if y == 0\n        then return x\n    else return x +\
    \ add(x, y - 1)\nend\n</code>\nAnd it works fine:\n<code>\njulia> add(1, 2)\n5",
  "    if x < 0 || y < 0 || x > MAX_VALUE || y > MAX_VALUE \n        error(\"Integers\
    \ can only be added to positive numbers\") \n    else\n        return x + y \n\
    \    end\nend", "    if x>0 && y>0 then\n        z = x+y\n    elseif x<0 && y>0\
    \ then\n        z = x+y\n    elseif x>0 && y<0 then\n        z = x+y\n    elseif\
    \ x<0 && y<0 then\n        z = x+y\n    end\n    return z\nend\n</cell>\n<text>\n\
    Exercise:\nModify the function below to take in 2 lists of tuples (of length 2)\
    \ instead of 2 ints.", "    if y==0 then \n        throw(ZeroException)\n    elseif\
    \ y==1 then \n        return x \n    elseif y==-1 then \n        return negate(x)\
    \ + 1 \n    elseif y>-1 and y<0 then \n        return negate(x) + negate(y) +\
    \ 1 \n    elseif y>-1 and y>=0 then \n        return negate(x) + negate(y) + negate(y-1)\
    \ \n    else \n        return negate(x) + negate(y) \nend", "    if x > 0\n  \
    \      then x + y\n    else\n        x - y\n    end\nend\n</cell>\n<code language=julia-0.5>\n\
    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n \
    \   12\n    \"\"\"", "    if (x > y)\n        then (x + y) \n    else \n     \
    \   x \nend\n    \"\"\"\n\"\"\"\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n\
    \    12\n    \"\"\"\n\"\"\"", "    if x < 0 \n        then x + abs(y) \n     \
    \   else x + y \nend \n\"\"\"\n\"\"\"\n>>> add(10, 12)\n23\n\"\"\"", "    if x\
    \ > y\n        then x + y\n        else y + x\n    end\nend", "    if x < y\n\
    \        then x + y\n        else y - x\n    end\nend\n</code>\nIn Julia, we prefer\
    \ using instead of def for the first argument of a function. Using a function\
    \ is more explicit about what it is doing. It also makes the code more readable\
    \ if we use function calls like add(x, y) instead of add(x + y, y - x).\nTo get\
    \ the first number greater than or equal to the second number in Julia, we use\
    \ the .>= operator:\n<code>", "    if x==0 | y==0 then\n        return 0\n   \
    \ else \n        return x+y\n    end\nend\n</code>\n<|/ a tags=julia |>\n<| a\
    \ tags=julia dscore=1 |>\nThis can be done using a recursive function and using\
    \ an accumulator which starts as zero. \n<code>", "    \n    if x > y \n     \
    \   then x\n        else y\n    end \nend\n</cell>\n<text>\nThe above function\
    \ is a very simple example. Let's see how to add two vectors. The function below\
    \ returns a vector whose elements are the sum of the elements of two vectors.",
  "    if x==0 || y==0 \n        then 0 else x + y\n    else \n        add(mod(x+y,10)+(x/10),\
    \ mod(x/10+y,10)+(y/10))\nend\n</code>\n<|/ a tags=julia,binary-search |>\n<|\
    \ a dscore=0 |>\nThe easiest approach to binary search is to think in terms of\
    \ binary search trees. Given a sorted array such as [8, 7, 6, 5, 1, 2, 3], we\
    \ can perform binary search by looking at where the target element is, comparing\
    \ to the root, and picking the larger of the two nodes. We can do it this way\
    \ by walking down the binary tree until we find something smaller than our target,\
    \ and then looking at its two children until we either find the target or find\
    \ the other end point and compare to the target.\n<code>", "     return x + y\n\
    </code>\nAnd here is how to implement the operator\n<code>\n\"\"\"\nAdd two numbers\
    \ x and y\n>>> add(2, 3)\n5\n>>> add(5, 7)\n12\n\"\"\"", "        if x >= 0 &&\
    \ y >= 0 && x <= y \n        then\n            return x + y\n        else\n  \
    \          throw \"add: Invalid Arguments\"\nend", "    if x > y \n    then x\
    \ + y \n    else y + x\n    end \nend\n</cell>\n<text>\nOkay, that was a little\
    \ annoying, but we can fix it by defining the function as +():", "   x + y\nend\n\
    </cell>\n<text>\nA function can have multiple input parameters\nA function can\
    \ have multiple parameters\nA function can have multiple return values\nIn Julia\
    \ functions don't use return statements", "    x = x + y\n    return x\nend",
  "    if x == 0, y == 0 \n    else x + y\n    end\nend\n</cell>\n<code language=julia-0.5>",
  "    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n\
    \    12\n    \"\"\"", "    if x > y\n        x + y\n    else\n        y - x\n\
    \    end\nend\n\"\"\"", "    if x < y\n        then x + y\n        else y - x\n\
    \    end\nend\n</cell>\n<code language=julia-0.5>", "    if x > y \n        then\
    \ x + y \n        else y + x \n    end\nend", "    if x < 0 || y < 0 \n      \
    \  error(\"Invalid input!\") \n    else \n        return x + y \nend ", "    \"\
    \"\"Define function add\"\"\"\n    x + y", "    if x < y\n        then x+y\n \
    \       else y+x\n    end\nend\n</code>\n<|/ a dscore=2 |>\n<| a tags=julia,type-conversion,function\
    \ dscore=2 |>\nThe easiest thing you can do, if you just need it to compile is\
    \ to use an if-else statement like this:\n<code>", "    if y <= 0\n        return\
    \ 0\n    return x + y\nend", "    return (x + y) \nend", "    # x is Int64 \n\
    \    # y is Int64 \n    if x == 0 && y != 0 \n    then x + y \n    else x + 0\
    \ \nend \n    \nend \n</cell>\n<text>\nThe add function has type signature \n\
    \    (Int64, Int64) -> Int64\nLet's try it", "  return x + y\nend\n</cell>\n<code\
    \ language=julia-1.5>\n\"\"\"\n`subtract` is a simple subtract of two numbers\
    \ x and y.\n\"\"\"", "    return x + y\nend\n</code>\n<|/ a tags=julia,function\
    \ |>\n<| a |>\nThis seems like something that is easy to do with Julia's metaprogramming\
    \ capabilities, rather than having to manually define functions. As I understand\
    \ it, Julia's macros support this feature. Here's an example of what I mean (inspired\
    \ by some code written by Julia's author, Ilya Sokolovsky):\n<code>", "    if\
    \ x > y\n        then return x\n    else\n        then return y\n    end\nend\n\
    \"\"\"\n\"\"\"\n## Example with function\n\"\"\"\nThe example below shows how\
    \ a Julia function is written and used to implement the addition operation. \n\
    \"\"\"", "    if x < y\n        then x+y\n        else y-x\n    end\nend\n\"\"\
    \"\n\"\"\"\n# ## Let's add some comments", "    if y < x then return x+y else\
    \ return y-x\nend", "    \n    if x > y\n        then return x + y\n        else\
    \ return y + x\n    end\nend\n\"\"\"\n\"\"\"\n    \n    \"\"\"\n    \"\"\"\n \
    \   \"\"\"\n    return x + y\nend\n\"\"\"\n\"\"\"\n    \n    \"\"\"\n    \"\"\"\
    \n    return y + x\nend\n\"\"\"\n\"\"\"\n    \n    \"\"\"\n    \"\"\"\n    return\
    \ x + y\nend\n\"\"\"\n\"\"\"\n    \n    \"\"\"\n    \"\"\"\n    return y + x\n\
    end\n\"\"\"\n\"\"\"\n    \n    \"\"\"\n    \"\"\"\n    return x + y\nend\n\"\"\
    \"\n\"\"\"\n    \n    \"\"\"\n    \"\"\"\n    return y + x\nend\n\"\"\"\n\"\"\"\
    \n    \n    \"\"\"\n    \"\"\"\n    return x + y\nend\n\"\"\"\n\"\"\"\n    \n\
    \    \"\"\"\n    \"\"\"\n    return y + x\nend\n\"\"\"\n\"\"\"\n    \n    \"\"\
    \"\n    \"\"\"\n    return x + y\nend\n\"\"\"\n\"\"\"\n    \n    \"\"\"\n    \"\
    \"\"\n    return y + x\nend\n\"\"\"\n\"\"\"\n    \n    \"\"\"\n    \"\"\"\n  \
    \  return x + y\nend\n\"\"\"\n\"\"\"\n    \n    \"\"\"\n    \"\"\"\n    return\
    \ y + x\nend\n\"\"\"\n\"\"\"\n    \n    \"\"\"\n    \"\"\"\n    return x + y\n\
    end\n\"\"\"\n\"\"\"\n    \n    \"\"\"\n    \"\"\"\n    return y + x\nend\n\"\"\
    \"\n\"\"\"\n    \n    \"\"\"\n    \"\"\"\n    return x + y\nend\n\"\"\"\n\"\"\"\
    \n    \n    \"\"\"\n    \"\"\"\n    return y + x\nend\n\"\"\"\n\"\"\"\n    \n\
    \    \"\"\"\n    \"\"\"\n    return x + y\nend\n\"\"\"\n\"\"\"\n    \n    \"\"\
    \"\n    \"\"\"\n    return y + x\nend\n\"\"\"\n\"\"\"\n    \n    \"\"\"\n    \"\
    \"\"\n    return x + y\nend\n\"\"\"\n\"\"\"\n    \n    \"\"\"\n    \"\"\"\n  \
    \  return y + x\nend\n\"\"\"\n\"\"\"\n    \n    \"\"\"\n    \"\"\"\n    return\
    \ x + y\nend\n\"\"\"\n\"\"\"\n    \n    \"\"\"\n    \"\"\"\n    return y + x\n\
    end\n\"\"\"\n\"\"\"\n    \n    \"\"\"\n    \"\"\"\n    return y + x\nend\n\"\"\
    \"\n\"\"\"\n    \n    \"\"\"\n    \"\"\"\n    return x + y\nend\n\"\"\"\n\"\"\"\
    \n    \n    \"\"\"\n    \"\"\"\n    return y + x\nend\n\"\"\"\n\"\"\"\n    \n\
    \    \"\"\"\n    \"\"\"\n    return y + x\nend\n\"\"\"\n\"\"\"\n    \n    \"\"\
    \"\n    \"\"\"\n    return x + y\nend\n\"\"\"\n\"\"\"\n    \n    \"\"\"\n    \"\
    \"\"\n    return y + x\nend\n\"\"\"\n\"\"\"\n    \n    \"\"\"\n    \"\"\"\n  \
    \  return y + x\nend\n\"\"\"\n\"\"\"\n    \n    \"\"\"\n    \"\"\"\n    return\
    \ y + x\nend\n\"\"\"\n\"\"\"\n    \n    \"\"\"\n    \"\"\"", "   return x + y\n\
    </code>\nThe syntax for anonymous functions is similar to the syntax for anonymous\
    \ functions in other languages.\n<|/ a tags=julia,function |>\n<| a |>\nThe first\
    \ line is called a function, the second a macro.\nMacros are very useful for creating\
    \ function-like syntaxes that are less verbose than those of other languages.\
    \ For example, instead of having to write\n<code>", '    return x + y', "    return\
    \ x + y \nend\n</cell>\n<code language=julia-0.4>\n\"\"\"Subtract two numbers\
    \ x and y\n    >>> subtract(2, 3)\n    1\n    >>> subtract(5, 7)\n    6\n    \"\
    \"\"", "    \n    if x >= 0 && y >= 0 \n        then x + y\n        else 0\n \
    \   end \nend", "    if x <= y then return x + y\n    else return x - y", "  \
    \  if x<y \n        then x + y\n    else \n        x - y\nend \n</cell>\n<cell>\n\
    \"\"\"The add function adds the x number to y number\"\"\"", "    | x == y  =\
    \  x\n    | x < y =  x + y\n    | x >  y = x - y\n</code>\n<|/ a tags=haskell,recursion\
    \ |>\n<| a |>\nHere is a simple solution that I devised that might be useful in\
    \ some cases. It also has the nice property that if you want a function to return\
    \ 0, you can simply negate the result or write return 0.\n<code>\n-- Function:\
    \ add two numbers\n-- Parameters: Two numbers to add\n-- Returns: Sum of the two\
    \ numbers\nadd x y = x + y", "    if x < y\n    then x+y\n    else y-x\nend\n\
    </code>\n<|/ a tags=julia dscore=2 |>\n<| c |>\nThank you. Your solution worked\
    \ for me. However, I'm still confused why Julia allows a statement like add(x::Int64,\
    \ y::Int64)\n<|/ c |>\n<| c |>\nYou are welcome. Julia's syntax is quite intuitive,\
    \ and can be quite confusing if you are not familiar with it. I recommend that\
    \ you take some time and learn some basics, such as functional programming and\
    \ higher order functions, if you haven't done so already.\n<|/ c |>\n<| a tags=julia\
    \ |>\nI think that the code you posted actually isn't a minimal reproducible example\
    \ (it is missing some definitions). Here is one that should work:\n<code>\nx =\
    \ rand()\ny = rand()", "    if y > 0 \n        then x+y\n    else x+y\nend \n\
    </cell>\n<code language=julia-1.0>", "   \n    if x > 0 && y > 0 \n    then x\
    \ + y\n    else 0\n    end \nend\n</code>\n<|/ a tags=julia,if-statement dscore=2\
    \ |>\n<| c |>\n`if x > 0 && y > 0` is the same as `if y > 0`.\n<|/ c |>\n<| c\
    \ |>\nHi David, I appreciate your help and explanation.  It really helped me understand\
    \ better what was going on.  I implemented your suggestion and it works.  I appreciate\
    \ it.  And thank you for your help as well.\n<|/ c |>\n<| a dscore=2 |>\nI think\
    \ the answer to your question is just to look at the examples in the official\
    \ documentation here: https://julialang.org/help/\nFor example, if you look at\
    \ the example on https://julialang.org/help/#where-clause it gives you the following:\n\
    <code>", "    x + y\nend\n</code>\n<|/ a tags=julia,function |>\n<| c |>\nWhile\
    \ this code snippet may solve the problem, it doesn't explain why or how it answers\
    \ the question. Please [include an explanation for your code](//meta.stackexchange.com/q/114762/269535),\
    \ as that really helps to improve the quality of your post.  Remember that you\
    \ are answering the question for readers in the future, and those people might\
    \ not know the reasons for your code suggestion.  **Flaggers / reviewers:** [For\
    \ code-only answers such as this one, downvote, don't delete!](//meta.stackoverflow.com/a/260413/2747593)\n\
    <|/ c |>\n<| c |>\nWhile the code is good (and I up-voted it), it would be nice\
    \ if you could add some additional explanation to it.\n<|/ c |>\n<| a tags=julia,function\
    \ |>\nAs already pointed out, your function is not a function (it's a macro).\
    \ The macro just expands the function call into a function call (i.e. the function\
    \ call becomes a statement to execute the call). So basically you are not calling\
    \ the function add() you define in the global scope, but rather the macro, which\
    \ is defined as add() macro.\nIf you want to define a function that can be called\
    \ as add(x, y) you have to define it as follows:\n<code>", "    # use \"end\"\
    \ instead of \"return\" in Julia\n    return x + y\nend\n</code>\nThe only difference\
    \ from R is that the function return nothing while in Julia it returns nothing\n\
    <|/ a dscore=5 |>\n<| c |>\nHow does Julia differ from R about this ?\n<|/ c |>\n\
    <| c |>\nR is missing a return.\n<|/ c |>\n<| c |>\nI thought R's `return` was\
    \ equivalent to Julia's `return`.\n<|/ c |>\n<| c |>\nNo, R's return is not equivalent\
    \ to Julia's return, R's `return` will return the last expression in a function\
    \ body.\n<|/ c |>\n<| c |>\nJulia has more `return` than R but they behave similarly.\n\
    <|/ c |>\n<| a |>\nI'm surprised that nobody has mentioned this yet, Julia can\
    \ do recursive functions natively:\n<code>", "    if x > y\n        x + y\n  \
    \  else\n        y - x\nend\n    \"\"\"\n\"\"\"\n</cell>\n<text>\n5. \uB9AC\uC2A4\
    \uD2B8\n\uC77C\uBC18\uC801\uC73C\uB85C \uC120\uC5B8\uD574\uC57C\uD560 \uB9AC\uC2A4\
    \uD2B8\uB294 \uC544\uB798\uC640 \uAC19\uC774 \uD45C\uD604\uD558\uACE0 \uBA54\uBAA8\
    \uB9AC \uC0AC\uC6A9\uC744 \uC0AC\uC6A9\uD560 \uC218 \uC788\uB2E4.", "    if x\
    \ >= 0\n        x + y\n    else\n        x + y\n    end\nend", "    x + y\nend\n\
    </cell>\n<text>\nExercise 2: Write a function called sub that subtracts two numbers\
    \ x and y\n    >>> sub(2, 3)\n    1\n    >>> sub(9, 10)\n    5\n    \"\"\"", " \
    \   if x == 0 || y == 0 then return 0\n    return x + y\nend\n</cell>\n<code language=julia-1.0>",
  "    return x + y\nend\n</cell>\n<code language=julia-1.6>\n@assert add (2, 3) ==\
    \ 5\n@assert add (5, 7) == 12\n</cell>\n<text>\nExercise 10: add with multiple\
    \ arguments\nWrite a function called add_multiple that adds two numbers", "  \
    \  if x >= 0 && y >= 0\n        x + y\n    else\n        throw NoArgumentError(\"\
    Cannot add negative numbers.\")\n    end\nend", "    if x == 0 || y == 0 \n  \
    \      return 0  \n    else \n        return x + y \nend\n</code>\nAnd now we\
    \ have the function we want to use to perform our operations \n<code>\n\"\"\"\
    Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n\
    \    \"\"\"", "    if x < 0 || y <= 0\n        error(\"arguments must be positive\"\
    )\n    else\n        return x+y\n    end\nend\n</cell>\n<text>\nWe now need to\
    \ test this function with our example:", "    if x < y \n        then x + y \n\
    \        else y + x \n    end\nend\n</cell>\n<cell>", "    if x < 0 \n       \
    \ then x + y\n        else y + x\n    end\nend\n</cell>\n<cell>\n\"\"\"\nadd two\
    \ numbers x and y\nif x < 0 \n    then x + y\n    else y + x\nend\n\"\"\"", " \
    \   if x < y then x + y else x + y\nend\n</code>\nBut then it won't be able to\
    \ infer the return type as Int64, as shown below:\n<code>\njulia> add(2, 3)\n\
    ERROR: MethodError: no method matching +(::Int64, ::Int64)", "    if x < 0 ||\
    \ y < 0\n        throw(DomainError(\"Add arguments must be non-negative\"))\n\
    \    else\n        return x + y", "    if x < 0 || y >= 0\n        throw(ErrorException(\"\
    Bad addition\"))\n    else\n        return x + y\nend\n</code>\nSo when add is\
    \ called the first thing it does is check to see if the x or y arguments are negative.\n\
    <code>", "    return x+y\nend", "   return x + y\nend", "    return x+y\nend\n\
    \"\"\"\nWrite a function that multiplies two numbers x and y.\n>>> multiply(5,\
    \ 5)\n25\n\"\"\"", "    if x < 0 || y < 0 \n    then \n        return error \"\
    Arguments must be non-negative integers\"\n    else \n        return x + y\n \
    \   end\nend\n</code>\nThis code can be improved further.  Here are some examples:\n\
    <code>\njulia> add(0, 0)\nerror", "    if x > y \n        then x + y \n      \
    \  else y + x\n    else x + y\nend\n\"\"\"\n\"\"\"\n## Define an operator \"-\"\
    \ that takes in two Int64 numbers and returns the difference between them (as\
    \ a Int64 number)\n\"\"\"", "    return x + y\n</code>\nThen we can use them in\
    \ Julia:\n<code>\njulia> f(1, 2)\n5\njulia> f(5, 7)\n12\n</code>\n<|/ a dscore=2\
    \ |>\n<| c |>\n`add(x,y)` is the standard way of doing maths in Julia\n<|/ c |>\n\
    <| a |>\nJulia has first-class functions called closures.\n<code>\njulia> f(x)\
    \ -> x + 5\nf (generic function with 1 method)", "    if x < y\n        x + y\n\
    \    else\n        x - y\n    end\nend\n\"\"\"\n\"\"\"\n## Defining functions\
    \ in Julia\n\"\"\"", "    if x > y \n        then x + y\n    else\n        y +\
    \ x\nend", "    \"\"\"This function will add two numbers x and y\n    >>> add(2,\
    \ 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"", "    if x >= 0 && y >= 0\n\
    \        x + y\n    else\n        0\n    end\nend", "    if x < y \n        then\
    \ return x + y\n        else return x - y\n    end\n    return x + y\nend", " \
    \   if x < y\n        then x + y\n        else y\n    end\nend\n</cell>\n<code\
    \ language=julia-1.4>", "    if x < y\n        then return x\n        else return\
    \ y\n</code>\nIf you had several functions to call, you could make a function\
    \ call instead. \n<code>", "  if x < y\n    then return x + y\n    else return\
    \ y + x\n  end\nend\n  \n  \"\"\"Add two numbers x and y\n  Add two numbers x\
    \ and y\n  Add two numbers x and y\n  Add two numbers x and y\n  Add two numbers\
    \ x and y\n  Add two numbers x and y\n  Add two numbers x and y\n  Add two numbers\
    \ x and y\n  Add two numbers x and y\n  Add two numbers x and y\n  Add two numbers\
    \ x and y\n  Add two numbers x and y\n  Add two numbers x and y\n  Add two numbers\
    \ x and y\n  Add two numbers x and y\n  Add two numbers x and y\n  Add two numbers\
    \ x and y\n  Add two numbers x and y\n  Add two numbers x and y\n  Add two numbers\
    \ x and y\n  Add two numbers x and y\n  Add two numbers x and y\n  Add two numbers\
    \ x and y\n  Add two numbers x and y\n  Add two numbers x and y\n  Add two numbers\
    \ x and y\n  Add two numbers x and y\n  Add two numbers x and y\n  Add two numbers\
    \ x and y\n  Add two numbers x and y\n  Add two numbers x and y\n  Add two numbers\
    \ x and y\n  Add two numbers x and y\n  Add two numbers x and y\n  Add two numbers\
    \ x and y\n  Add two numbers x and y\n  Add two numbers x and y\n  Add two numbers\
    \ x and y\n  Add two numbers x and y\n  Add two numbers x and y\n  Add two numbers\
    \ x and y\n  Add two numbers x and y\n  Add two numbers x and y\n  Add two numbers\
    \ x and y\n  Add two numbers x and y\n  Add two numbers x and y\n  Add two numbers\
    \ x and y\n  Add two numbers x and y\n  Add two numbers x and y\n  Add two numbers\
    \ x and y\n  Add two numbers x and y\n  Add two numbers x and y\n  Add two numbers\
    \ x and y\n  Add two numbers x and y\n  Add two numbers x and y\n  Add two numbers\
    \ x and y\n  Add two numbers x and y\n  Add two numbers x and y\n  Add two numbers\
    \ x and y\n  Add two numbers x and y\n  Add two numbers x and y\n  Add two numbers\
    \ x and y\n  Add two numbers x and y\n  Add two numbers x and y\n  Add two numbers\
    \ x and y\n  Add two numbers x and y\n  Add two numbers x and y\n  Add two numbers\
    \ x and y\n  Add two numbers x and y\n  Add two numbers x and y\n", "    if x+y\
    \ == 0\n    then 0\n    else x + y\n    end\nend ", "    if x < 0 | y <0\n   \
    \    return -1\n    else \n       return x + y\nend\n</cell>\n<code language=julia-0.5>\n\
    add(1, 2)\n</cell>\n<text>\nExercise: Create a function called multiply which\
    \ takes in two numbers x and y and returns the product of x and y.", "    if x>=0\
    \ && y>=0 && x+y <= 2**64\n        return x+y\n    else\n        throw(BoundsError())\n\
    \    end\nend\n</cell>\n<code language=julia-1.1>\n\"\"\"Add a scalar to a number\n\
    \    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n\"\"\"", "    x = x + y\n\
    \    return x\nend ", "    return x + y\nend function\n\"\"\"\n## Exercise 4:\
    \ Write a function mult(x::Int64, y::Int64)::Int64 which\n## multiplies two numbers\
    \ x and y, and returns their sum\n## This function should have two arguments:\
    \ x and y\n## (x should be an Int64 and y should be an Int64).\n\"\"\"", "   \
    \ return x + y\nend\n</cell>\n<text>\nThe \"function\" keyword lets us distinguish\
    \ between a function, an abstract method, and a concrete method (which has some\
    \ boilerplate code that is not indented). When we use a function, we must call\
    \ the function. To do this, we use the call function keyword when calling a function.\
    \ When we use a function, we must pass the parameters that we want to call the\
    \ function with, inside the parentheses of the function call.", "     if x < 0\
    \ || y <0 \n         error(1, \"add: negative numbers\")\n     else \n       \
    \  return x+y\nend \n\"\"\"\n    ", "    x + y\nend\n</cell>\n<code language=julia-1.6>",
  "    if x < 0 || y <0\n        error(\"Add Error: x or y is negative\")\n    else\n\
    \        return x + y\n    end", "    if y == 0 then 0 else x + y\n    end\nend\n\
    </cell>\n<code language=julia-0.5>\n\"\"\"\nReturn the factorial of a given number\n\
    \"\"\"", "    a + b\nend\n\"\"\"", "    x + y\nend\n</cell>\n<code language=julia-1.0>\n\
    \"\"\"Add two numbers x and y\n    >>> add(1, 2)\n    3\n    >>> add(5, 7)\n \
    \   11\n    \"\"\"", "    x + y\nend\n</cell>\n<code language=julia-1.5>\n# example\
    \ with multiple arguments", "    if x < 0 \n        error(\"x must be non-negative\"\
    )\n    else \n        if y < 0 \n            error(\"y must be non-negative\"\
    )\n        else\n            return x + y\n    end\nend\n</cell>\n<code language=julia-1.2>\n\
    @time add(3, 4)\n</cell>\n<code language=julia-1.2>\n@time add(3, -4)\n</cell>\n\
    <code language=julia-1.2>\n@time add(3, -4)\n</cell>\n<code language=julia-1.2>\n\
    @time add(3.0, 4.0)\n</cell>\n<code language=julia-1.2>\n@time add(3.0, 4.0)\n\
    </cell>\n<code language=julia-1.2>\n@time add(-3.0, -4)\n</cell>\n<code language=julia-1.2>\n\
    @time add(-3.0, -4)\n</cell>\n<code language=julia-1.2>\n@time add(-3.0, 4.0)\n\
    </cell>\n<code language=julia-1.2>\n@time add(-3.0, 4.0)\n</cell>\n<code language=julia-1.2>\n\
    @time add(3.0, -4)\n</cell>\n<code language=julia-1.2>\n@time add(3.0, -4)\n</cell>\n\
    <code language=julia-1.2>\n@time add(3.0, 4.0)\n</cell>\n<code language=julia-1.2>\n\
    @time add(3.0, 4.0)\n</cell>\n<code language=julia-1.2>\n@time add(-3.0, -4.0)\n\
    </cell>\n<code language=julia-1.2>\n@time add(-3.0, -4.0)\n</cell>\n<code language=julia-1.2>\n\
    @time add(-3.0, 4.0)\n</cell>\n<code language=julia-1.2>\n@time add(-3.0, 4.0)\n\
    </cell>\n<code language=julia-1.2>\n@time add(3.0, -4.0)\n</cell>\n<code language=julia-1.2>\n\
    @time add(3.0, -4.0)\n</cell>\n<code language=julia-1.2>\n@time add(3.0, 4.0)\n\
    </cell>\n<code language=julia-1.2>\n@time add(3.0, 4.0)\n</cell>\n<code language=julia-1.2>\n\
    @time add(-3.0, -4.0)\n</cell>\n<code language=julia-1.2>\n@time add(-3.0, -4.0)\n\
    </cell>\n<code language=julia-1.2>\n@time add(-3.0, 4.0)\n</cell>\n<code language=julia-1.2>\n\
    @time add(-3.0, 4.0)\n</cell>\n<code language=julia-1.2>\n@time add(3.0, -4.0)\n\
    </cell>\n<code language=julia-1.2>\n@time add(3.0, -4.0)\n</cell>\n<code language=",
  "    if x < y \n        then return x + y \n        else return x + y + 1 \n   \
    \ elseif x > y \n        then return x + y - 1 \n        else return x + y + 1\
    \ \n    end\nend\n</cell>\n<code language=julia-1.3>", "    if x < 0 || y < 0\n\
    \        error \"Negative numbers\"\n    else \n        return x + y\nend \n</code>\n\
    In haskell you can use a function as an expression, and it can be called like\
    \ any other function: \n<code>\nadd 5 7\nadd (x+3) (x+4) \n</code>\nAnd finally\
    \ in haskell you can even do recursion: \n<code>\nadd 5 10\nadd 5 (add 10 1)\n\
    </code>\n<|/ a dscore=0 tags=haskell |>\n<| c |>\nThe `+` operator in Haskell\
    \ is a function like any other function. It doesn't require parentheses.\n<|/\
    \ c |>\n<| c |>\nOk, I thought that was how they worked, but I could have sworn\
    \ I had to use parentheses when I tried it in ghci just now\n<|/ c |>\n<| c |>\n\
    Well, you need to learn the difference between a value and an expression in Haskell.\n\
    <|/ c |>\n<| a |>\nThe basic functional programming is based on mathematical functions.\
    \ When you read a programming language, it's almost like a mathematics paper.\
    \ Mathematics paper use \"expressions\" such as (2x + 3y), (6x + y) and (x+y).\
    \ But a programming language just read \"expressions\" as a block of words. And\
    \ \"expressions\" have a lot of meanings. \nWhen you read a programming language,\
    \ it's almost like a mathematics paper. Mathematics paper use \"expressions\"\
    \ such as (2x + 3y), (6x + y) and (x+y). But a programming language just read\
    \ \"expressions\" as a block of words. And \"expressions\" have a lot of meanings.\n\
    So, for you guys, you can read \"expressions\" as words (like \"x\"), but you\
    \ also can read the words as expressions (like \"(2x + 3y)\") (they are very similar,\
    \ but very different). \nSo you can read \"(2x + 3y)\" as two expressions: one\
    \ is a \"(\" expression and one is a \"x\" expression. You just need to remember\
    \ that expression is a block of words and you have to put \"(\" before \"(2x +\
    \ 3y)\" and \"(\" before \"6x + y\" and \"(\" before \"(x+y)\".\nIf you don't\
    \ know what's an expression, you will get stuck very soon. And if you try to read\
    \ something as an expression, you will get confused. That is why people use \"\
    expressions\" instead of \"words\".\n<|/ a dscore=0 tags=haskell |>\n<| a dscore",
  "    if y > 0 \n       then x + y\n    else x + y\n    end\nend\n</cell>\n<code\
    \ language=julia-0.6>\n@time add(2, 3)\n</cell>\n<code language=julia-0.6>", " \
    \ if x <= 0 || y <= 0 then 0 else x + y\nend \n</cell>\n<code language=julia-0.4>",
  "   return x+y\nend\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"", "    if x != 0 && y != 0 \n\
    \        then x + y\n    else 0 \n    end\nend", "   if x >= y \n       then x\
    \ + y\n   else \n       x + y\nend\n</code>\n<|/ a tags=julia |>\n<| c |>\nI didn't\
    \ know I could do that, thank you\n<|/ c |>\n<| c |>\nAs a note, Julia also provides\
    \ the [`clamp`](https://docs.julialang.org/en/v1/base/math/#Base.clamp) function\
    \ for this.\n<|/ c |>\n<| c |>\nThis answer assumes that the inputs are always\
    \ non-negative, which is obviously not the case in most real-world scenarios.\
    \ Julia's `clamp` function does not make that assumption, though.\n<|/ c |>\n\
    <| c |>\n`clamp` has `min` and `max` arguments for that exact purpose.\n<|/ c\
    \ |>\n<| c |>\nThanks for the comment, I'll check it out when I get a minute\n\
    <|/ c |>\n<| a tags=julia |>\nJust as an alternative to clamp() you can also use\
    \ minimum() and maximum() to limit the range of numbers to a certain range.\n\
    For example with x = minimum(x, y) you can replace any x in a range of numbers\
    \ with a smaller number if x is smaller than y.\n<code>\njulia> x = -10\n-10",
  "    if x == 0 \n        then return y\n    else \n        return x + y", "if y\
    \ < 0 then\n    throw(RangeError(\"y must be non-negative\"))\nelseif x < 0 then\n\
    \    throw(RangeError(\"x must be non-negative\"))\nelseif y == 0 then\n    throw(ArithmeticError(\"\
    cannot add 0 to 0\"))\nelse\n    return x + y\nend\nend\n\"\"\"\n\"\"\"\n    add(y::Int64)::Int64"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
