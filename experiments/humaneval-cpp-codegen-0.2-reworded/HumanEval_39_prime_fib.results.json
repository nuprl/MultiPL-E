{
  "name": "HumanEval_39_prime_fib",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nlong prime_fib(long n) {\n",
  "tests": "}\nint main() {\n    auto candidate = prime_fib;\n    assert(candidate((1)) == (2));\n    assert(candidate((2)) == (3));\n    assert(candidate((3)) == (5));\n    assert(candidate((4)) == (13));\n    assert(candidate((5)) == (89));\n    assert(candidate((6)) == (233));\n    assert(candidate((7)) == (1597));\n    assert(candidate((8)) == (28657));\n    assert(candidate((9)) == (514229));\n    assert(candidate((10)) == (433494437));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nlong prime_fib(long n) {\n    assert(n >= 1);\n    if (n == 1) return 2;\n    long a = 1, b = 1, c = 2, d = 3, e = 5;\n    while (c < n) {\n        long tmp = c;\n        c = d + e;\n        d = e;\n        e = tmp;\n    }\n    return c;\n}\nint main() {\n    auto candidate = prime_fib;\n    assert(candidate((1)) == (2));\n    assert(candidate((2)) == (3));\n    assert(candidate((3)) == (5));\n    assert(candidate((4)) == (13));\n    assert(candidate((5)) == (89));\n    assert(candidate((6)) == (233));\n    assert(candidate((7)) == (1597));\n    assert(candidate((8)) == (28657));\n    assert(candidate((9)) == (514229));\n    assert(candidate((10)) == (433494437));\n}\n",
      "timestamp": 1664293121,
      "stdout": "",
      "stderr": "tmpjlvmzxlt: /tmp/tmpjlvmzxlt.cpp:29: int main(): Assertion `candidate((2)) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nlong prime_fib(long n) {\n    assert(n >= 1);\n    if (n == 1) return 2;\n    if (n == 2) return 3;\n    long a = 1, b = 1, c = 2, d = 2, e = 3;\n    while (c < n) {\n        long t = a + b;\n        a = b;\n        b = c;\n        c = d + e;\n        d = e;\n        e = t;\n    }\n    return b;\n}\nint main() {\n    auto candidate = prime_fib;\n    assert(candidate((1)) == (2));\n    assert(candidate((2)) == (3));\n    assert(candidate((3)) == (5));\n    assert(candidate((4)) == (13));\n    assert(candidate((5)) == (89));\n    assert(candidate((6)) == (233));\n    assert(candidate((7)) == (1597));\n    assert(candidate((8)) == (28657));\n    assert(candidate((9)) == (514229));\n    assert(candidate((10)) == (433494437));\n}\n",
      "timestamp": 1664293121,
      "stdout": "",
      "stderr": "tmpkncpv0_d: /tmp/tmpkncpv0_d.cpp:33: int main(): Assertion `candidate((3)) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nlong prime_fib(long n) {\n    if (n == 1) return 2;\n    if (n == 2) return 3;\n    if (n == 3) return 5;\n    if (n == 4) return 13;\n    if (n == 5) return 89;\n    long a = 1, b = 2, c = 3, d = 5, e = 13, f = 89;\n    while (true) {\n        if (n == 1) return a;\n        if (n == 2) return b;\n        if (n == 3) return c;\n        if (n == 4) return d;\n        if (n == 5) return e;\n        if (n == 6) return f;\n        long t = a + b;\n        a = b;\n        b = c;\n        c = d;\n        d = e;\n        e = f;\n        f = t;\n        n -= 1;\n    }\n}\nint main() {\n    auto candidate = prime_fib;\n    assert(candidate((1)) == (2));\n    assert(candidate((2)) == (3));\n    assert(candidate((3)) == (5));\n    assert(candidate((4)) == (13));\n    assert(candidate((5)) == (89));\n    assert(candidate((6)) == (233));\n    assert(candidate((7)) == (1597));\n    assert(candidate((8)) == (28657));\n    assert(candidate((9)) == (514229));\n    assert(candidate((10)) == (433494437));\n}\n",
      "timestamp": 1664293121,
      "stdout": "",
      "stderr": "tmpkchllpsz: /tmp/tmpkchllpsz.cpp:45: int main(): Assertion `candidate((6)) == (233)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nlong prime_fib(long n) {\n    if (n == 1) return 2;\n    if (n == 2) return 3;\n    if (n == 3) return 5;\n    if (n == 4) return 13;\n    if (n == 5) return 89;\n    long a = prime_fib(n - 1);\n    long b = prime_fib(n - 2);\n    long c = prime_fib(n - 3);\n    long p = a + b;\n    long q = a + c;\n    long r = b + c;\n    return (p < q) ? (q < r ? r : p) : (q < r ? r : q);\n}\nint main() {\n    auto candidate = prime_fib;\n    assert(candidate((1)) == (2));\n    assert(candidate((2)) == (3));\n    assert(candidate((3)) == (5));\n    assert(candidate((4)) == (13));\n    assert(candidate((5)) == (89));\n    assert(candidate((6)) == (233));\n    assert(candidate((7)) == (1597));\n    assert(candidate((8)) == (28657));\n    assert(candidate((9)) == (514229));\n    assert(candidate((10)) == (433494437));\n}\n",
      "timestamp": 1664293121,
      "stdout": "",
      "stderr": "tmpcmqqpwcp: /tmp/tmpcmqqpwcp.cpp:35: int main(): Assertion `candidate((6)) == (233)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nlong prime_fib(long n) {\n    if (n == 1) return 2;\n    if (n == 2) return 3;\n    if (n == 3) return 5;\n    long a = 1, b = 1, c = 2, d = 3;\n    while (c < n) {\n        long t = c;\n        c = a + b;\n        a = b;\n        b = t;\n        t = d;\n        d = c;\n        c = t;\n    }\n    return c;\n}\nint main() {\n    auto candidate = prime_fib;\n    assert(candidate((1)) == (2));\n    assert(candidate((2)) == (3));\n    assert(candidate((3)) == (5));\n    assert(candidate((4)) == (13));\n    assert(candidate((5)) == (89));\n    assert(candidate((6)) == (233));\n    assert(candidate((7)) == (1597));\n    assert(candidate((8)) == (28657));\n    assert(candidate((9)) == (514229));\n    assert(candidate((10)) == (433494437));\n}\n",
      "timestamp": 1664293121,
      "stdout": "",
      "stderr": "tmptd59jg94: /tmp/tmptd59jg94.cpp:35: int main(): Assertion `candidate((4)) == (13)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nlong prime_fib(long n) {\n    assert(n >= 1);\n    if (n == 1) return 2;\n    if (n == 2) return 3;\n    long a = 1, b = 1, c = 2, d = 3;\n    while (c < n) {\n        long t = a + b;\n        a = b;\n        b = c;\n        c = d;\n        d = t;\n    }\n    return d;\n}\nint main() {\n    auto candidate = prime_fib;\n    assert(candidate((1)) == (2));\n    assert(candidate((2)) == (3));\n    assert(candidate((3)) == (5));\n    assert(candidate((4)) == (13));\n    assert(candidate((5)) == (89));\n    assert(candidate((6)) == (233));\n    assert(candidate((7)) == (1597));\n    assert(candidate((8)) == (28657));\n    assert(candidate((9)) == (514229));\n    assert(candidate((10)) == (433494437));\n}\n",
      "timestamp": 1664293121,
      "stdout": "",
      "stderr": "tmpgpsnruu1: /tmp/tmpgpsnruu1.cpp:32: int main(): Assertion `candidate((3)) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nlong prime_fib(long n) {\n    if (n < 2) return n;\n    long a = 1, b = 1, c = 2, d = 3;\n    while (c < n) {\n        long t = c;\n        c = d + b;\n        d = b;\n        b = t;\n    }\n    return c;\n}\nint main() {\n    auto candidate = prime_fib;\n    assert(candidate((1)) == (2));\n    assert(candidate((2)) == (3));\n    assert(candidate((3)) == (5));\n    assert(candidate((4)) == (13));\n    assert(candidate((5)) == (89));\n    assert(candidate((6)) == (233));\n    assert(candidate((7)) == (1597));\n    assert(candidate((8)) == (28657));\n    assert(candidate((9)) == (514229));\n    assert(candidate((10)) == (433494437));\n}\n",
      "timestamp": 1664293121,
      "stdout": "",
      "stderr": "tmp05fvak9p: /tmp/tmp05fvak9p.cpp:27: int main(): Assertion `candidate((1)) == (2)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nlong prime_fib(long n) {\n    long a = 1, b = 1, c = 2;\n    while (c < n) {\n        long t = a + b;\n        a = b;\n        b = t;\n        c = a + b;\n    }\n    return c;\n}\nint main() {\n    auto candidate = prime_fib;\n    assert(candidate((1)) == (2));\n    assert(candidate((2)) == (3));\n    assert(candidate((3)) == (5));\n    assert(candidate((4)) == (13));\n    assert(candidate((5)) == (89));\n    assert(candidate((6)) == (233));\n    assert(candidate((7)) == (1597));\n    assert(candidate((8)) == (28657));\n    assert(candidate((9)) == (514229));\n    assert(candidate((10)) == (433494437));\n}\n",
      "timestamp": 1664293121,
      "stdout": "",
      "stderr": "tmpwfx22a25: /tmp/tmpwfx22a25.cpp:27: int main(): Assertion `candidate((2)) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nlong prime_fib(long n) {\n    if (n == 1) return 2;\n    if (n == 2) return 3;\n    if (n == 3) return 5;\n    long a = 1, b = 1, c = 2, d = 3, e = 5;\n    while (c < n) {\n        long tmp = d + e;\n        d = e;\n        e = tmp;\n        if (tmp >= n) break;\n        if (is_prime(tmp)) {\n            c++;\n            a = b;\n            b = c;\n            d = e;\n            e = tmp;\n        }\n    }\n    return e;\n}\nint main() {\n    auto candidate = prime_fib;\n    assert(candidate((1)) == (2));\n    assert(candidate((2)) == (3));\n    assert(candidate((3)) == (5));\n    assert(candidate((4)) == (13));\n    assert(candidate((5)) == (89));\n    assert(candidate((6)) == (233));\n    assert(candidate((7)) == (1597));\n    assert(candidate((8)) == (28657));\n    assert(candidate((9)) == (514229));\n    assert(candidate((10)) == (433494437));\n}\n",
      "timestamp": 1664293121,
      "stdout": "",
      "stderr": "/tmp/tmpw03cqc93.cpp: In function \u2018long int prime_fib(long int)\u2019:\n/tmp/tmpw03cqc93.cpp:24:13: error: \u2018is_prime\u2019 was not declared in this scope\n   24 |         if (is_prime(tmp)) {\n      |             ^~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nlong prime_fib(long n) {\n    assert(n > 0);\n    long a = 1, b = 1, c = 2;\n    while (c < n) {\n        long tmp = a + b;\n        a = b;\n        b = tmp;\n        c = a + b;\n    }\n    return c;\n}\nint main() {\n    auto candidate = prime_fib;\n    assert(candidate((1)) == (2));\n    assert(candidate((2)) == (3));\n    assert(candidate((3)) == (5));\n    assert(candidate((4)) == (13));\n    assert(candidate((5)) == (89));\n    assert(candidate((6)) == (233));\n    assert(candidate((7)) == (1597));\n    assert(candidate((8)) == (28657));\n    assert(candidate((9)) == (514229));\n    assert(candidate((10)) == (433494437));\n}\n",
      "timestamp": 1664293121,
      "stdout": "",
      "stderr": "tmpnjkz7r3y: /tmp/tmpnjkz7r3y.cpp:28: int main(): Assertion `candidate((2)) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nlong prime_fib(long n) {\n    if (n < 2) return n;\n    if (n == 2) return 3;\n    if (n == 3) return 5;\n    long a = 1, b = 1, c = 2, d = 3;\n    while (c < n) {\n        long t = c;\n        c = d + a;\n        d = b + c;\n        b = t;\n    }\n    return d;\n}\nint main() {\n    auto candidate = prime_fib;\n    assert(candidate((1)) == (2));\n    assert(candidate((2)) == (3));\n    assert(candidate((3)) == (5));\n    assert(candidate((4)) == (13));\n    assert(candidate((5)) == (89));\n    assert(candidate((6)) == (233));\n    assert(candidate((7)) == (1597));\n    assert(candidate((8)) == (28657));\n    assert(candidate((9)) == (514229));\n    assert(candidate((10)) == (433494437));\n}\n",
      "timestamp": 1664293121,
      "stdout": "",
      "stderr": "tmpfkxtgfy1: /tmp/tmpfkxtgfy1.cpp:29: int main(): Assertion `candidate((1)) == (2)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nlong prime_fib(long n) {\n    if (n <= 2) return n;\n    long p = prime_fib(n-1);\n    long q = prime_fib(n-2);\n    return (p+q)*(p+q+1)/2 + q;\n}\nint main() {\n    auto candidate = prime_fib;\n    assert(candidate((1)) == (2));\n    assert(candidate((2)) == (3));\n    assert(candidate((3)) == (5));\n    assert(candidate((4)) == (13));\n    assert(candidate((5)) == (89));\n    assert(candidate((6)) == (233));\n    assert(candidate((7)) == (1597));\n    assert(candidate((8)) == (28657));\n    assert(candidate((9)) == (514229));\n    assert(candidate((10)) == (433494437));\n}\n",
      "timestamp": 1664293121,
      "stdout": "",
      "stderr": "tmp62lau4rp: /tmp/tmp62lau4rp.cpp:22: int main(): Assertion `candidate((1)) == (2)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nlong prime_fib(long n) {\n    assert(n >= 1);\n    if (n == 1) return 2;\n    if (n == 2) return 3;\n    long a = 1, b = 1, c = 2, d = 3;\n    while (c < n) {\n        long t = a + b;\n        a = b;\n        b = c;\n        c = d;\n        d = t;\n    }\n    return d;\n}\nint main() {\n    auto candidate = prime_fib;\n    assert(candidate((1)) == (2));\n    assert(candidate((2)) == (3));\n    assert(candidate((3)) == (5));\n    assert(candidate((4)) == (13));\n    assert(candidate((5)) == (89));\n    assert(candidate((6)) == (233));\n    assert(candidate((7)) == (1597));\n    assert(candidate((8)) == (28657));\n    assert(candidate((9)) == (514229));\n    assert(candidate((10)) == (433494437));\n}\n",
      "timestamp": 1664293121,
      "stdout": "",
      "stderr": "tmpgpsnruu1: /tmp/tmpgpsnruu1.cpp:32: int main(): Assertion `candidate((3)) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nlong prime_fib(long n) {\n    if (n == 1) return 2;\n    if (n == 2) return 3;\n    if (n == 3) return 5;\n    if (n == 4) return 13;\n    if (n == 5) return 89;\n    long a = 1, b = 1, c = 2, d = 3, e = 5, f = 13, g = 89;\n    while (true) {\n        if (n == 1) return a;\n        if (n == 2) return b;\n        if (n == 3) return c;\n        if (n == 4) return d;\n        if (n == 5) return e;\n        if (n == 6) return f;\n        if (n == 7) return g;\n        long t = a + b;\n        a = b;\n        b = c;\n        c = d;\n        d = e;\n        e = f;\n        f = g;\n        g = t;\n        n = n + 1;\n    }\n}\nint main() {\n    auto candidate = prime_fib;\n    assert(candidate((1)) == (2));\n    assert(candidate((2)) == (3));\n    assert(candidate((3)) == (5));\n    assert(candidate((4)) == (13));\n    assert(candidate((5)) == (89));\n    assert(candidate((6)) == (233));\n    assert(candidate((7)) == (1597));\n    assert(candidate((8)) == (28657));\n    assert(candidate((9)) == (514229));\n    assert(candidate((10)) == (433494437));\n}\n",
      "timestamp": 1664293121,
      "stdout": "",
      "stderr": "tmpp88ji_fn: /tmp/tmpp88ji_fn.cpp:47: int main(): Assertion `candidate((6)) == (233)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nlong prime_fib(long n) {\n    assert(n >= 1);\n    if (n == 1) return 2;\n    if (n == 2) return 3;\n    long a = 1, b = 1, c = 2, d = 3, e = 5;\n    while (c < n) {\n        long tmp = c;\n        c = d + e;\n        d = e;\n        e = tmp;\n        if (c >= n) break;\n        a = b;\n        b = c;\n        c = d + e;\n        d = e;\n        e = tmp;\n    }\n    return c;\n}\nint main() {\n    auto candidate = prime_fib;\n    assert(candidate((1)) == (2));\n    assert(candidate((2)) == (3));\n    assert(candidate((3)) == (5));\n    assert(candidate((4)) == (13));\n    assert(candidate((5)) == (89));\n    assert(candidate((6)) == (233));\n    assert(candidate((7)) == (1597));\n    assert(candidate((8)) == (28657));\n    assert(candidate((9)) == (514229));\n    assert(candidate((10)) == (433494437));\n}\n",
      "timestamp": 1664293121,
      "stdout": "",
      "stderr": "tmpragsu_sx: /tmp/tmpragsu_sx.cpp:37: int main(): Assertion `candidate((3)) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nlong prime_fib(long n) {\n    if (n == 1) return 2;\n    if (n == 2) return 3;\n    if (n == 3) return 5;\n    if (n == 4) return 13;\n    if (n == 5) return 89;\n    long a = prime_fib(n - 1);\n    long b = prime_fib(n - 2);\n    long c = prime_fib(n - 3);\n    long p = a + b;\n    long q = a + c;\n    long r = b + c;\n    if (p < q) {\n        p = q;\n        q = r;\n        r = p;\n    }\n    if (q < r) {\n        q = r;\n        r = p;\n        p = q;\n    }\n    return p;\n}\nint main() {\n    auto candidate = prime_fib;\n    assert(candidate((1)) == (2));\n    assert(candidate((2)) == (3));\n    assert(candidate((3)) == (5));\n    assert(candidate((4)) == (13));\n    assert(candidate((5)) == (89));\n    assert(candidate((6)) == (233));\n    assert(candidate((7)) == (1597));\n    assert(candidate((8)) == (28657));\n    assert(candidate((9)) == (514229));\n    assert(candidate((10)) == (433494437));\n}\n",
      "timestamp": 1664293121,
      "stdout": "",
      "stderr": "tmptg129djq: /tmp/tmptg129djq.cpp:45: int main(): Assertion `candidate((6)) == (233)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nlong prime_fib(long n) {\n    assert(n >= 1);\n    if (n == 1) return 2;\n    if (n == 2) return 3;\n    long a = 1, b = 1, c = 2, d = 3;\n    while (true) {\n        long next = a + b;\n        if (next > c) {\n            c = next;\n            d = a;\n            a = b;\n            b = c;\n        }\n        if (next > d) {\n            d = next;\n        }\n        if (next > n) {\n            return n;\n        }\n        if (next > b) {\n            b = next;\n        }\n        if (next > a) {\n            a = next;\n        }\n    }\n}\nint main() {\n    auto candidate = prime_fib;\n    assert(candidate((1)) == (2));\n    assert(candidate((2)) == (3));\n    assert(candidate((3)) == (5));\n    assert(candidate((4)) == (13));\n    assert(candidate((5)) == (89));\n    assert(candidate((6)) == (233));\n    assert(candidate((7)) == (1597));\n    assert(candidate((8)) == (28657));\n    assert(candidate((9)) == (514229));\n    assert(candidate((10)) == (433494437));\n}\n",
      "timestamp": 1664293121,
      "stdout": "",
      "stderr": "tmpliavjw2u: /tmp/tmpliavjw2u.cpp:45: int main(): Assertion `candidate((3)) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nlong prime_fib(long n) {\n    if (n == 1) return 2;\n    if (n == 2) return 3;\n    long a = 1, b = 1, c = 2, d = 3;\n    while (c < n) {\n        long tmp = a + b;\n        a = b;\n        b = c;\n        c = d;\n        d = tmp;\n    }\n    return d;\n}\nint main() {\n    auto candidate = prime_fib;\n    assert(candidate((1)) == (2));\n    assert(candidate((2)) == (3));\n    assert(candidate((3)) == (5));\n    assert(candidate((4)) == (13));\n    assert(candidate((5)) == (89));\n    assert(candidate((6)) == (233));\n    assert(candidate((7)) == (1597));\n    assert(candidate((8)) == (28657));\n    assert(candidate((9)) == (514229));\n    assert(candidate((10)) == (433494437));\n}\n",
      "timestamp": 1664293121,
      "stdout": "",
      "stderr": "tmprf2z1l23: /tmp/tmprf2z1l23.cpp:31: int main(): Assertion `candidate((3)) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nlong prime_fib(long n) {\n    if (n < 2) return n;\n    long a = 1, b = 1, c = 2, d = 0, e = 0;\n    while (c < n) {\n        d = a + b;\n        e = c + d;\n        a = b;\n        b = c;\n        c = d;\n        d = e;\n    }\n    return e;\n}\nint main() {\n    auto candidate = prime_fib;\n    assert(candidate((1)) == (2));\n    assert(candidate((2)) == (3));\n    assert(candidate((3)) == (5));\n    assert(candidate((4)) == (13));\n    assert(candidate((5)) == (89));\n    assert(candidate((6)) == (233));\n    assert(candidate((7)) == (1597));\n    assert(candidate((8)) == (28657));\n    assert(candidate((9)) == (514229));\n    assert(candidate((10)) == (433494437));\n}\n",
      "timestamp": 1664293121,
      "stdout": "",
      "stderr": "tmpcgqewt6v: /tmp/tmpcgqewt6v.cpp:29: int main(): Assertion `candidate((1)) == (2)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nlong prime_fib(long n) {\n    if (n < 2) return n;\n    long a = 1, b = 1, c = 2, d = 0;\n    while (c < n) {\n        long t = a + b;\n        a = b;\n        b = c;\n        c = t;\n        d = 0;\n        while (t < n) {\n            t = a + b;\n            a = b;\n            b = t;\n            if (is_prime(t)) d++;\n        }\n    }\n    return c;\n}\nint main() {\n    auto candidate = prime_fib;\n    assert(candidate((1)) == (2));\n    assert(candidate((2)) == (3));\n    assert(candidate((3)) == (5));\n    assert(candidate((4)) == (13));\n    assert(candidate((5)) == (89));\n    assert(candidate((6)) == (233));\n    assert(candidate((7)) == (1597));\n    assert(candidate((8)) == (28657));\n    assert(candidate((9)) == (514229));\n    assert(candidate((10)) == (433494437));\n}\n",
      "timestamp": 1664293121,
      "stdout": "",
      "stderr": "/tmp/tmpctjaroz4.cpp: In function \u2018long int prime_fib(long int)\u2019:\n/tmp/tmpctjaroz4.cpp:27:17: error: \u2018is_prime\u2019 was not declared in this scope\n   27 |             if (is_prime(t)) d++;\n      |                 ^~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nlong prime_fib(long n) {\n    if (n == 1) return 2;\n    if (n == 2) return 3;\n    if (n == 3) return 5;\n    long a = 1, b = 1, c = 2, d = 3, e = 5;\n    while (c < n) {\n        long tmp = c;\n        c = d + e;\n        d = e;\n        e = tmp;\n        if (c >= n) break;\n        a = b;\n        b = c;\n        c = d + e;\n        d = e;\n        e = tmp;\n    }\n    return b;\n}\nint main() {\n    auto candidate = prime_fib;\n    assert(candidate((1)) == (2));\n    assert(candidate((2)) == (3));\n    assert(candidate((3)) == (5));\n    assert(candidate((4)) == (13));\n    assert(candidate((5)) == (89));\n    assert(candidate((6)) == (233));\n    assert(candidate((7)) == (1597));\n    assert(candidate((8)) == (28657));\n    assert(candidate((9)) == (514229));\n    assert(candidate((10)) == (433494437));\n}\n",
      "timestamp": 1664293121,
      "stdout": "",
      "stderr": "tmp6tkyw_w7: /tmp/tmp6tkyw_w7.cpp:38: int main(): Assertion `candidate((4)) == (13)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nlong prime_fib(long n) {\n    if (n < 2) return n;\n    long a = 1, b = 1, c = 2, d = 2, e = 3;\n    while (c < n) {\n        long t = a + b;\n        a = b;\n        b = c;\n        c = d + e;\n        d = e;\n        e = t;\n    }\n    return e;\n}\nint main() {\n    auto candidate = prime_fib;\n    assert(candidate((1)) == (2));\n    assert(candidate((2)) == (3));\n    assert(candidate((3)) == (5));\n    assert(candidate((4)) == (13));\n    assert(candidate((5)) == (89));\n    assert(candidate((6)) == (233));\n    assert(candidate((7)) == (1597));\n    assert(candidate((8)) == (28657));\n    assert(candidate((9)) == (514229));\n    assert(candidate((10)) == (433494437));\n}\n",
      "timestamp": 1664293121,
      "stdout": "",
      "stderr": "tmp297ir_py: /tmp/tmp297ir_py.cpp:29: int main(): Assertion `candidate((1)) == (2)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nlong prime_fib(long n) {\n    if (n < 2) return n;\n    long a = 1, b = 1, c = 2, d = 0;\n    while (c < n) {\n        d = a + b;\n        a = b;\n        b = c;\n        c = d;\n    }\n    return d;\n}\nint main() {\n    auto candidate = prime_fib;\n    assert(candidate((1)) == (2));\n    assert(candidate((2)) == (3));\n    assert(candidate((3)) == (5));\n    assert(candidate((4)) == (13));\n    assert(candidate((5)) == (89));\n    assert(candidate((6)) == (233));\n    assert(candidate((7)) == (1597));\n    assert(candidate((8)) == (28657));\n    assert(candidate((9)) == (514229));\n    assert(candidate((10)) == (433494437));\n}\n",
      "timestamp": 1664293121,
      "stdout": "",
      "stderr": "tmp3ar4vetf: /tmp/tmp3ar4vetf.cpp:27: int main(): Assertion `candidate((1)) == (2)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nlong prime_fib(long n) {\n    long a = 1, b = 1, c = 2, d = 0;\n    while (c < n) {\n        d = a + b;\n        a = b;\n        b = c;\n        c = d;\n    }\n    return d;\n}\nint main() {\n    auto candidate = prime_fib;\n    assert(candidate((1)) == (2));\n    assert(candidate((2)) == (3));\n    assert(candidate((3)) == (5));\n    assert(candidate((4)) == (13));\n    assert(candidate((5)) == (89));\n    assert(candidate((6)) == (233));\n    assert(candidate((7)) == (1597));\n    assert(candidate((8)) == (28657));\n    assert(candidate((9)) == (514229));\n    assert(candidate((10)) == (433494437));\n}\n",
      "timestamp": 1664293121,
      "stdout": "",
      "stderr": "tmp78z3314j: /tmp/tmp78z3314j.cpp:26: int main(): Assertion `candidate((1)) == (2)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nlong prime_fib(long n) {\n    if (n <= 1) return n;\n    long a = 1, b = 1, c = 2, d = 0;\n    while (c < n) {\n        long tmp = a + b;\n        a = b;\n        b = c;\n        c = tmp;\n        if (is_prime(c)) d = c;\n    }\n    return d;\n}\nint main() {\n    auto candidate = prime_fib;\n    assert(candidate((1)) == (2));\n    assert(candidate((2)) == (3));\n    assert(candidate((3)) == (5));\n    assert(candidate((4)) == (13));\n    assert(candidate((5)) == (89));\n    assert(candidate((6)) == (233));\n    assert(candidate((7)) == (1597));\n    assert(candidate((8)) == (28657));\n    assert(candidate((9)) == (514229));\n    assert(candidate((10)) == (433494437));\n}\n",
      "timestamp": 1664293123,
      "stdout": "",
      "stderr": "/tmp/tmpkcsbmha9.cpp: In function \u2018long int prime_fib(long int)\u2019:\n/tmp/tmpkcsbmha9.cpp:22:13: error: \u2018is_prime\u2019 was not declared in this scope\n   22 |         if (is_prime(c)) d = c;\n      |             ^~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nlong prime_fib(long n) {\n    if (n == 1) return 2;\n    if (n == 2) return 3;\n    if (n == 3) return 5;\n    if (n == 4) return 13;\n    if (n == 5) return 89;\n    long a = prime_fib(n-1);\n    long b = prime_fib(n-2);\n    long c = prime_fib(n-3);\n    long p = a + b;\n    long q = a + c;\n    long r = b + c;\n    long s = p + q;\n    long t = p + r;\n    long u = q + r;\n    long v = p + s;\n    long w = q + s;\n    long x = r + s;\n    long y = p + t;\n    long z = q + t;\n    long A = u + v;\n    long B = u + w;\n    long C = v + w;\n    long D = u + x;\n    long E = v + x;\n    long F = w + x;\n    long G = u + y;\n    long H = v + y;\n    long I = w + y;\n    long J = u + z;\n    long K = v + z;\n    long L = w + z;\n    long M = u + A;\n    long N = v + A;\n    long O = w + A;\n    long P = u + B;\n    long Q = v + B;\n    long R = w + B;\n    long S = u + C;\n    long T = v + C;\n    long U = w + C;\n    long V = u + D;\n    long W = v + D;\n    long X = w + D;\n    long Y = u + E;\n    long Z = v + E;\n    long AA = w + E;\n    long AB = u + F;\n    long AC = v + F;\n    long AD = w + F;\n    long AE = u + G;\n    long AF = v + G;\n    long AG = w + G;\n    long AH = u + H;\n    long AI = v + H;\n    \n}\nint main() {\n    auto candidate = prime_fib;\n    assert(candidate((1)) == (2));\n    assert(candidate((2)) == (3));\n    assert(candidate((3)) == (5));\n    assert(candidate((4)) == (13));\n    assert(candidate((5)) == (89));\n    assert(candidate((6)) == (233));\n    assert(candidate((7)) == (1597));\n    assert(candidate((8)) == (28657));\n    assert(candidate((9)) == (514229));\n    assert(candidate((10)) == (433494437));\n}\n",
      "timestamp": 1664293123,
      "stdout": "",
      "stderr": "tmp7mj131bt: /tmp/tmp7mj131bt.cpp:78: int main(): Assertion `candidate((6)) == (233)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nlong prime_fib(long n) {\n    assert(n >= 1);\n    if (n == 1) return 2;\n    if (n == 2) return 3;\n    long a = 1, b = 1, c = 2, d = 3;\n    while (c < n) {\n        long tmp = a + b;\n        a = b;\n        b = c;\n        c = d;\n        d = tmp;\n    }\n    return d;\n}\nint main() {\n    auto candidate = prime_fib;\n    assert(candidate((1)) == (2));\n    assert(candidate((2)) == (3));\n    assert(candidate((3)) == (5));\n    assert(candidate((4)) == (13));\n    assert(candidate((5)) == (89));\n    assert(candidate((6)) == (233));\n    assert(candidate((7)) == (1597));\n    assert(candidate((8)) == (28657));\n    assert(candidate((9)) == (514229));\n    assert(candidate((10)) == (433494437));\n}\n",
      "timestamp": 1664293123,
      "stdout": "",
      "stderr": "tmp02k2nd32: /tmp/tmp02k2nd32.cpp:32: int main(): Assertion `candidate((3)) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nlong prime_fib(long n) {\n    if (n < 2) return n;\n    long a = 1, b = 1, c = 2, d = 0;\n    while (c < n) {\n        d = a + b;\n        a = b;\n        b = c;\n        c = d;\n    }\n    return d;\n}\nint main() {\n    auto candidate = prime_fib;\n    assert(candidate((1)) == (2));\n    assert(candidate((2)) == (3));\n    assert(candidate((3)) == (5));\n    assert(candidate((4)) == (13));\n    assert(candidate((5)) == (89));\n    assert(candidate((6)) == (233));\n    assert(candidate((7)) == (1597));\n    assert(candidate((8)) == (28657));\n    assert(candidate((9)) == (514229));\n    assert(candidate((10)) == (433494437));\n}\n",
      "timestamp": 1664293121,
      "stdout": "",
      "stderr": "tmp3ar4vetf: /tmp/tmp3ar4vetf.cpp:27: int main(): Assertion `candidate((1)) == (2)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nlong prime_fib(long n) {\n    assert(n >= 1);\n    if (n == 1) return 2;\n    if (n == 2) return 3;\n    long p = prime_fib(n - 1) + prime_fib(n - 2);\n    while (p % 2 == 0) p /= 2;\n    while (p % 3 == 0) p /= 3;\n    while (p % 5 == 0) p /= 5;\n    return p;\n}\nint main() {\n    auto candidate = prime_fib;\n    assert(candidate((1)) == (2));\n    assert(candidate((2)) == (3));\n    assert(candidate((3)) == (5));\n    assert(candidate((4)) == (13));\n    assert(candidate((5)) == (89));\n    assert(candidate((6)) == (233));\n    assert(candidate((7)) == (1597));\n    assert(candidate((8)) == (28657));\n    assert(candidate((9)) == (514229));\n    assert(candidate((10)) == (433494437));\n}\n",
      "timestamp": 1664293123,
      "stdout": "",
      "stderr": "tmpvmsp8bop: /tmp/tmpvmsp8bop.cpp:28: int main(): Assertion `candidate((3)) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nlong prime_fib(long n) {\n    assert(n >= 0);\n    if (n == 0) return 0;\n    if (n == 1) return 2;\n    if (n == 2) return 3;\n    if (n == 3) return 5;\n    long a = 1, b = 2, c = 3;\n    while (n > 3) {\n        long t = a + b;\n        a = b;\n        b = c;\n        c = t;\n        n -= 1;\n    }\n    return c;\n}\nint main() {\n    auto candidate = prime_fib;\n    assert(candidate((1)) == (2));\n    assert(candidate((2)) == (3));\n    assert(candidate((3)) == (5));\n    assert(candidate((4)) == (13));\n    assert(candidate((5)) == (89));\n    assert(candidate((6)) == (233));\n    assert(candidate((7)) == (1597));\n    assert(candidate((8)) == (28657));\n    assert(candidate((9)) == (514229));\n    assert(candidate((10)) == (433494437));\n}\n",
      "timestamp": 1664293123,
      "stdout": "",
      "stderr": "tmpqihh13q5: /tmp/tmpqihh13q5.cpp:35: int main(): Assertion `candidate((4)) == (13)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nlong prime_fib(long n) {\n    assert(n >= 1);\n    if (n == 1) return 2;\n    if (n == 2) return 3;\n    long a = 1, b = 1, c = 2, d = 3;\n    while (c < n) {\n        long t = a + b;\n        a = b;\n        b = c;\n        c = d;\n        d = t;\n    }\n    return d;\n}\nint main() {\n    auto candidate = prime_fib;\n    assert(candidate((1)) == (2));\n    assert(candidate((2)) == (3));\n    assert(candidate((3)) == (5));\n    assert(candidate((4)) == (13));\n    assert(candidate((5)) == (89));\n    assert(candidate((6)) == (233));\n    assert(candidate((7)) == (1597));\n    assert(candidate((8)) == (28657));\n    assert(candidate((9)) == (514229));\n    assert(candidate((10)) == (433494437));\n}\n",
      "timestamp": 1664293121,
      "stdout": "",
      "stderr": "tmpgpsnruu1: /tmp/tmpgpsnruu1.cpp:32: int main(): Assertion `candidate((3)) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nlong prime_fib(long n) {\n    long a = 1, b = 1, c = 0;\n    while (c < n) {\n        long t = a + b;\n        a = b;\n        b = t;\n        c++;\n    }\n    return b;\n}\nint main() {\n    auto candidate = prime_fib;\n    assert(candidate((1)) == (2));\n    assert(candidate((2)) == (3));\n    assert(candidate((3)) == (5));\n    assert(candidate((4)) == (13));\n    assert(candidate((5)) == (89));\n    assert(candidate((6)) == (233));\n    assert(candidate((7)) == (1597));\n    assert(candidate((8)) == (28657));\n    assert(candidate((9)) == (514229));\n    assert(candidate((10)) == (433494437));\n}\n",
      "timestamp": 1664293123,
      "stdout": "",
      "stderr": "tmpeb7l0pde: /tmp/tmpeb7l0pde.cpp:29: int main(): Assertion `candidate((4)) == (13)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nlong prime_fib(long n) {\n    assert(n > 0);\n    if (n == 1) return 2;\n    if (n == 2) return 3;\n    long a = 1, b = 1, c = 2, d = 3, e = 5;\n    while (true) {\n        if (n == c) return c;\n        if (n == d) return d;\n        if (n == e) return e;\n        long tmp = a + b;\n        a = b;\n        b = tmp;\n        tmp = c + d;\n        c = d;\n        d = tmp;\n        tmp = e + a;\n        e = a;\n        a = tmp;\n        ++n;\n    }\n}\nint main() {\n    auto candidate = prime_fib;\n    assert(candidate((1)) == (2));\n    assert(candidate((2)) == (3));\n    assert(candidate((3)) == (5));\n    assert(candidate((4)) == (13));\n    assert(candidate((5)) == (89));\n    assert(candidate((6)) == (233));\n    assert(candidate((7)) == (1597));\n    assert(candidate((8)) == (28657));\n    assert(candidate((9)) == (514229));\n    assert(candidate((10)) == (433494437));\n}\n",
      "timestamp": 1664293123,
      "stdout": "",
      "stderr": "tmpky8mbo75: /tmp/tmpky8mbo75.cpp:39: int main(): Assertion `candidate((3)) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nlong prime_fib(long n) {\n    assert(n >= 1);\n    if (n == 1) return 2;\n    if (n == 2) return 3;\n    long a = 1, b = 1, c = 2, d = 3;\n    while (n > 3) {\n        if (n % 2 == 0) {\n            n /= 2;\n            c = a + b;\n            a = b;\n            b = c;\n        } else {\n            n--;\n            d = a + b;\n            a = b;\n            b = d;\n        }\n    }\n    return c;\n}\nint main() {\n    auto candidate = prime_fib;\n    assert(candidate((1)) == (2));\n    assert(candidate((2)) == (3));\n    assert(candidate((3)) == (5));\n    assert(candidate((4)) == (13));\n    assert(candidate((5)) == (89));\n    assert(candidate((6)) == (233));\n    assert(candidate((7)) == (1597));\n    assert(candidate((8)) == (28657));\n    assert(candidate((9)) == (514229));\n    assert(candidate((10)) == (433494437));\n}\n",
      "timestamp": 1664293123,
      "stdout": "",
      "stderr": "tmpiqzpy6jc: /tmp/tmpiqzpy6jc.cpp:38: int main(): Assertion `candidate((3)) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nlong prime_fib(long n) {\n    if (n < 2) return n;\n    long a = 1, b = 1, c = 2, d = 0;\n    while (c < n) {\n        long tmp = a + b;\n        a = b;\n        b = tmp;\n        if (tmp % 2 == 0) {\n            d = tmp;\n            break;\n        }\n        c++;\n    }\n    return d;\n}\nint main() {\n    auto candidate = prime_fib;\n    assert(candidate((1)) == (2));\n    assert(candidate((2)) == (3));\n    assert(candidate((3)) == (5));\n    assert(candidate((4)) == (13));\n    assert(candidate((5)) == (89));\n    assert(candidate((6)) == (233));\n    assert(candidate((7)) == (1597));\n    assert(candidate((8)) == (28657));\n    assert(candidate((9)) == (514229));\n    assert(candidate((10)) == (433494437));\n}\n",
      "timestamp": 1664293123,
      "stdout": "",
      "stderr": "tmp4u21cn0f: /tmp/tmp4u21cn0f.cpp:31: int main(): Assertion `candidate((1)) == (2)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nlong prime_fib(long n) {\n    if (n == 1) return 2;\n    if (n == 2) return 3;\n    if (n == 3) return 5;\n    if (n == 4) return 13;\n    if (n == 5) return 89;\n    long a = 1, b = 2, c = 3, d = 5, e = 13, f = 89, g = 0;\n    while (true) {\n        if (n == 1) return a;\n        if (n == 2) return b;\n        if (n == 3) return c;\n        if (n == 4) return d;\n        if (n == 5) return e;\n        if (n == 6) return f;\n        if (n == 7) return g;\n        if (n == 8) return a + b;\n        if (n == 9) return a + c;\n        if (n == 10) return a + d;\n        if (n == 11) return a + e;\n        if (n == 12) return a + f;\n        if (n == 13) return a + g;\n        if (n == 14) return b + c;\n        if (n == 15) return b + d;\n        if (n == 16) return b + e;\n        if (n == 17) return b + f;\n        if (n == 18) return b + g;\n        if (n == 19) return c + d;\n        if (n == 20) return c + e;\n        if (n == 21) return c + f;\n        if (n == 22) return c + g;\n        if (n == 23) return d + e;\n        if (n == 24) return d + f;\n        if (n == 25) return d + g;\n        if (n == 26) return e + f;\n        if (n == 27) return e + g;\n        if (n == 28) return f + g;\n        if (n == 29) return a + b + c;\n        if (n == 30) return a + b + d;\n        if (n == 31) return a + b + e;\n        if (n == 32) return a + b + f;\n        if (n == 33) return a\n}\nint main() {\n    auto candidate = prime_fib;\n    assert(candidate((1)) == (2));\n    assert(candidate((2)) == (3));\n    assert(candidate((3)) == (5));\n    assert(candidate((4)) == (13));\n    assert(candidate((5)) == (89));\n    assert(candidate((6)) == (233));\n    assert(candidate((7)) == (1597));\n    assert(candidate((8)) == (28657));\n    assert(candidate((9)) == (514229));\n    assert(candidate((10)) == (433494437));\n}\n",
      "timestamp": 1664293123,
      "stdout": "",
      "stderr": "/tmp/tmpwtwbmch7.cpp: In function \u2018long int prime_fib(long int)\u2019:\n/tmp/tmpwtwbmch7.cpp:54:30: error: expected \u2018;\u2019 before \u2018}\u2019 token\n   54 |         if (n == 33) return a\n      |                              ^\n      |                              ;\n   55 | }\n      | ~                             \n/tmp/tmpwtwbmch7.cpp:56:12: error: a function-definition is not allowed here before \u2018{\u2019 token\n   56 | int main() {\n      |            ^\n/tmp/tmpwtwbmch7.cpp:68:1: error: expected \u2018}\u2019 at end of input\n   68 | }\n      | ^\n/tmp/tmpwtwbmch7.cpp:14:24: note: to match this \u2018{\u2019\n   14 | long prime_fib(long n) {\n      |                        ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nlong prime_fib(long n) {\n    if (n == 1) return 2;\n    if (n == 2) return 3;\n    if (n == 3) return 5;\n    if (n == 4) return 13;\n    if (n == 5) return 89;\n    long a = 1, b = 1, c = 2, d = 3, e = 5, f = 13, g = 89;\n    while (true) {\n        long next = a + b;\n        if (next > c) {\n            a = b;\n            b = c;\n            c = next;\n        }\n        else {\n            a = b;\n            b = next;\n        }\n        next = a + b;\n        if (next > d) {\n            a = b;\n            b = d;\n            d = next;\n        }\n        else {\n            a = b;\n            b = next;\n        }\n        next = a + b;\n        if (next > e) {\n            a = b;\n            b = e;\n            e = next;\n        }\n        else {\n            a = b;\n            b = next;\n        }\n        next = a + b;\n        if (next > f) {\n            a = b;\n            b = f;\n            f = next;\n        }\n        else {\n            a = b;\n            b = next;\n        }\n        next = a + b;\n        if (next > g) {\n            a = b;\n            b = g;\n            g = next;\n        }\n        else {\n            a = b;\n            b = next;\n        }\n        if (next == n) return next;\n    }\n}\nint main() {\n    auto candidate = prime_fib;\n    assert(candidate((1)) == (2));\n    assert(candidate((2)) == (3));\n    assert(candidate((3)) == (5));\n    assert(candidate((4)) == (13));\n    assert(candidate((5)) == (89));\n    assert(candidate((6)) == (233));\n    assert(candidate((7)) == (1597));\n    assert(candidate((8)) == (28657));\n    assert(candidate((9)) == (514229));\n    assert(candidate((10)) == (433494437));\n}\n",
      "timestamp": 1664293138,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nlong prime_fib(long n) {\n    assert(n >= 1);\n    if (n == 1) return 2;\n    long a = 1, b = 1, c = 2, d = 3;\n    while (c < n) {\n        long t = a + b;\n        a = b;\n        b = c;\n        c = d;\n        d = t;\n    }\n    return d;\n}\nint main() {\n    auto candidate = prime_fib;\n    assert(candidate((1)) == (2));\n    assert(candidate((2)) == (3));\n    assert(candidate((3)) == (5));\n    assert(candidate((4)) == (13));\n    assert(candidate((5)) == (89));\n    assert(candidate((6)) == (233));\n    assert(candidate((7)) == (1597));\n    assert(candidate((8)) == (28657));\n    assert(candidate((9)) == (514229));\n    assert(candidate((10)) == (433494437));\n}\n",
      "timestamp": 1664293123,
      "stdout": "",
      "stderr": "tmp35vi2ler: /tmp/tmp35vi2ler.cpp:31: int main(): Assertion `candidate((3)) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nlong prime_fib(long n) {\n    if (n < 2) return n;\n    long a = 1, b = 2, c = 1, d = 1, e = 1, f = 1, g = 1, h = 1, i = 1, j = 1, k = 1, l = 1, m = 1, n1 = 1, n2 = 1, p = 1, q = 1, r = 1, s = 1, t = 1, u = 1, v = 1, w = 1, x = 1, y = 1, z = 1;\n    while (n > 0) {\n        if (n % 2 == 0) {\n            n /= 2;\n            a = a + b;\n            b = a - b;\n            a = a - b;\n        } else if (n % 3 == 0) {\n            n /= 3;\n            c = c + d;\n            d = c - d;\n            c = c - d;\n        } else if (n % 5 == 0) {\n            n /= 5;\n            e = e + f;\n            f = e - f;\n            e = e - f;\n        } else if (n % 7 == 0) {\n            n /= 7;\n            g = g + h;\n            h = g - h;\n            g = g - h;\n        } else if (n % 11 == 0) {\n            n /= 11;\n            i = i + j;\n            j = i - j;\n            i = i - j;\n        } else if (n % 13 == 0) {\n            n /= 13;\n            k = k + l;\n            l = k - l;\n            k = k - l;\n        } else if (n % 17 == 0) {\n            n /= 17;\n            m = m + n1;\n            n1 = m - n1;\n            m = m - n1;\n        } else if (n % 19 == 0) {\n            n /= 19;\n            n2 = n2 + p;\n            p = n2 - p;\n            n2 = n2 - p;\n        } else if (n % 23 == 0) {\n            n /= 23;\n            q = q\n}\nint main() {\n    auto candidate = prime_fib;\n    assert(candidate((1)) == (2));\n    assert(candidate((2)) == (3));\n    assert(candidate((3)) == (5));\n    assert(candidate((4)) == (13));\n    assert(candidate((5)) == (89));\n    assert(candidate((6)) == (233));\n    assert(candidate((7)) == (1597));\n    assert(candidate((8)) == (28657));\n    assert(candidate((9)) == (514229));\n    assert(candidate((10)) == (433494437));\n}\n",
      "timestamp": 1664293123,
      "stdout": "",
      "stderr": "/tmp/tmpnkus1838.cpp: In function \u2018long int prime_fib(long int)\u2019:\n/tmp/tmpnkus1838.cpp:60:18: error: expected \u2018;\u2019 before \u2018}\u2019 token\n   60 |             q = q\n      |                  ^\n      |                  ;\n   61 | }\n      | ~                 \n/tmp/tmpnkus1838.cpp:62:12: error: a function-definition is not allowed here before \u2018{\u2019 token\n   62 | int main() {\n      |            ^\n/tmp/tmpnkus1838.cpp:74:1: error: expected \u2018}\u2019 at end of input\n   74 | }\n      | ^\n/tmp/tmpnkus1838.cpp:17:19: note: to match this \u2018{\u2019\n   17 |     while (n > 0) {\n      |                   ^\n/tmp/tmpnkus1838.cpp:74:1: error: expected \u2018}\u2019 at end of input\n   74 | }\n      | ^\n/tmp/tmpnkus1838.cpp:14:24: note: to match this \u2018{\u2019\n   14 | long prime_fib(long n) {\n      |                        ^\n/tmp/tmpnkus1838.cpp:74:1: warning: control reaches end of non-void function [-Wreturn-type]\n   74 | }\n      | ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nlong prime_fib(long n) {\n    assert(n >= 1);\n    if (n == 1) return 2;\n    if (n == 2) return 3;\n    long a = 1, b = 1, c = 2, d = 3;\n    while (c < n) {\n        long t = c;\n        c = a + b;\n        a = b;\n        b = t;\n        t = d;\n        d = c - d;\n        c = d + t;\n        d = t;\n    }\n    return c;\n}\nint main() {\n    auto candidate = prime_fib;\n    assert(candidate((1)) == (2));\n    assert(candidate((2)) == (3));\n    assert(candidate((3)) == (5));\n    assert(candidate((4)) == (13));\n    assert(candidate((5)) == (89));\n    assert(candidate((6)) == (233));\n    assert(candidate((7)) == (1597));\n    assert(candidate((8)) == (28657));\n    assert(candidate((9)) == (514229));\n    assert(candidate((10)) == (433494437));\n}\n",
      "timestamp": 1664293123,
      "stdout": "",
      "stderr": "tmprp0v7qpu: /tmp/tmprp0v7qpu.cpp:35: int main(): Assertion `candidate((3)) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nlong prime_fib(long n) {\n    if (n == 1) return 2;\n    if (n == 2) return 3;\n    if (n == 3) return 5;\n    long a = 1, b = 1, c = 2, d = 3, e = 5;\n    while (c < n) {\n        long tmp = c;\n        c = d + e;\n        d = e;\n        e = tmp;\n        if (c < n) {\n            tmp = c;\n            c = d + e;\n            d = e;\n            e = tmp;\n        }\n    }\n    return c;\n}\nint main() {\n    auto candidate = prime_fib;\n    assert(candidate((1)) == (2));\n    assert(candidate((2)) == (3));\n    assert(candidate((3)) == (5));\n    assert(candidate((4)) == (13));\n    assert(candidate((5)) == (89));\n    assert(candidate((6)) == (233));\n    assert(candidate((7)) == (1597));\n    assert(candidate((8)) == (28657));\n    assert(candidate((9)) == (514229));\n    assert(candidate((10)) == (433494437));\n}\n",
      "timestamp": 1664293123,
      "stdout": "",
      "stderr": "tmp4m7cs64w: /tmp/tmp4m7cs64w.cpp:38: int main(): Assertion `candidate((4)) == (13)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nlong prime_fib(long n) {\n    assert(n >= 1);\n    if (n == 1) return 2;\n    if (n == 2) return 3;\n    if (n == 3) return 5;\n    long a = 1, b = 1, c = 2, d = 3;\n    while (c < n) {\n        long tmp = a + b;\n        a = b;\n        b = c;\n        c = d;\n        d = tmp;\n    }\n    return d;\n}\nint main() {\n    auto candidate = prime_fib;\n    assert(candidate((1)) == (2));\n    assert(candidate((2)) == (3));\n    assert(candidate((3)) == (5));\n    assert(candidate((4)) == (13));\n    assert(candidate((5)) == (89));\n    assert(candidate((6)) == (233));\n    assert(candidate((7)) == (1597));\n    assert(candidate((8)) == (28657));\n    assert(candidate((9)) == (514229));\n    assert(candidate((10)) == (433494437));\n}\n",
      "timestamp": 1664293123,
      "stdout": "",
      "stderr": "tmpnna1jeew: /tmp/tmpnna1jeew.cpp:34: int main(): Assertion `candidate((4)) == (13)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nlong prime_fib(long n) {\n    if (n == 1) return 2;\n    if (n == 2) return 3;\n    if (n == 3) return 5;\n    long a = prime_fib(n - 1);\n    long b = prime_fib(n - 2);\n    long c = prime_fib(n - 3);\n    long p = a + b;\n    long q = a + c;\n    long r = b + c;\n    return (p < q) ? (q < r ? r : p) : (q < r ? r : q);\n}\nint main() {\n    auto candidate = prime_fib;\n    assert(candidate((1)) == (2));\n    assert(candidate((2)) == (3));\n    assert(candidate((3)) == (5));\n    assert(candidate((4)) == (13));\n    assert(candidate((5)) == (89));\n    assert(candidate((6)) == (233));\n    assert(candidate((7)) == (1597));\n    assert(candidate((8)) == (28657));\n    assert(candidate((9)) == (514229));\n    assert(candidate((10)) == (433494437));\n}\n",
      "timestamp": 1664293123,
      "stdout": "",
      "stderr": "tmpdwq9xufv: /tmp/tmpdwq9xufv.cpp:31: int main(): Assertion `candidate((4)) == (13)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nlong prime_fib(long n) {\n    if (n == 1) return 2;\n    if (n == 2) return 3;\n    if (n == 3) return 5;\n    if (n == 4) return 13;\n    if (n == 5) return 89;\n    long a = prime_fib(n - 1);\n    long b = prime_fib(n - 2);\n    long c = prime_fib(n - 3);\n    long d = prime_fib(n - 4);\n    long e = prime_fib(n - 5);\n    long f = prime_fib(n - 6);\n    long g = prime_fib(n - 7);\n    long h = prime_fib(n - 8);\n    long i = prime_fib(n - 9);\n    long j = prime_fib(n - 10);\n    long k = prime_fib(n - 11);\n    long l = prime_fib(n - 12);\n    long m = prime_fib(n - 13);\n    long n = prime_fib(n - 14);\n    long o = prime_fib(n - 15);\n    long p = prime_fib(n - 16);\n    long q = prime_fib(n - 17);\n    long r = prime_fib(n - 18);\n    long s = prime_fib(n - 19);\n    long t = prime_fib(n - 20);\n    long u = prime_fib(n - 21);\n    long v = prime_fib(n - 22);\n    long w = prime_fib(n - 23);\n    long x = prime_fib(n - 24);\n    long y = prime_fib(n - 25);\n    long z = prime_fib(n - 26);\n    long A = prime_fib(n - 27);\n    long B = prime_fib(n - 28);\n    long C = prime_fib(n - 29);\n    long D = prime_fib(n - 30);\n    long E = prime_fib(n - 31);\n    long F = prime_fib(n - 32);\n    long G = prime_fib(\n}\nint main() {\n    auto candidate = prime_fib;\n    assert(candidate((1)) == (2));\n    assert(candidate((2)) == (3));\n    assert(candidate((3)) == (5));\n    assert(candidate((4)) == (13));\n    assert(candidate((5)) == (89));\n    assert(candidate((6)) == (233));\n    assert(candidate((7)) == (1597));\n    assert(candidate((8)) == (28657));\n    assert(candidate((9)) == (514229));\n    assert(candidate((10)) == (433494437));\n}\n",
      "timestamp": 1664293123,
      "stdout": "",
      "stderr": "/tmp/tmpi57dno38.cpp: In function \u2018long int prime_fib(long int)\u2019:\n/tmp/tmpi57dno38.cpp:33:10: error: declaration of \u2018long int n\u2019 shadows a parameter\n   33 |     long n = prime_fib(n - 14);\n      |          ^\n/tmp/tmpi57dno38.cpp:53:1: error: expected primary-expression before \u2018}\u2019 token\n   53 | }\n      | ^\n/tmp/tmpi57dno38.cpp:53:1: warning: control reaches end of non-void function [-Wreturn-type]\n   53 | }\n      | ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nlong prime_fib(long n) {\n    long a = 1, b = 1, c = 0, d = 0;\n    while (c < n) {\n        long temp = a + b;\n        a = b;\n        b = temp;\n        if (temp % 2 == 0) {\n            d = temp;\n            break;\n        }\n        c++;\n    }\n    return d;\n}\nint main() {\n    auto candidate = prime_fib;\n    assert(candidate((1)) == (2));\n    assert(candidate((2)) == (3));\n    assert(candidate((3)) == (5));\n    assert(candidate((4)) == (13));\n    assert(candidate((5)) == (89));\n    assert(candidate((6)) == (233));\n    assert(candidate((7)) == (1597));\n    assert(candidate((8)) == (28657));\n    assert(candidate((9)) == (514229));\n    assert(candidate((10)) == (433494437));\n}\n",
      "timestamp": 1664293123,
      "stdout": "",
      "stderr": "tmpi_q2imfa: /tmp/tmpi_q2imfa.cpp:31: int main(): Assertion `candidate((2)) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nlong prime_fib(long n) {\n    assert(n > 0);\n    if (n == 1) return 2;\n    if (n == 2) return 3;\n    if (n == 3) return 5;\n    if (n == 4) return 13;\n    if (n == 5) return 89;\n    long a = prime_fib(n - 1);\n    long b = prime_fib(n - 2);\n    long c = prime_fib(n - 3);\n    long p = a + b;\n    while (p < c) {\n        a = b;\n        b = c;\n        c = p;\n        p = a + b;\n    }\n    return p;\n}\nint main() {\n    auto candidate = prime_fib;\n    assert(candidate((1)) == (2));\n    assert(candidate((2)) == (3));\n    assert(candidate((3)) == (5));\n    assert(candidate((4)) == (13));\n    assert(candidate((5)) == (89));\n    assert(candidate((6)) == (233));\n    assert(candidate((7)) == (1597));\n    assert(candidate((8)) == (28657));\n    assert(candidate((9)) == (514229));\n    assert(candidate((10)) == (433494437));\n}\n",
      "timestamp": 1664293123,
      "stdout": "",
      "stderr": "tmpmy4uoayt: /tmp/tmpmy4uoayt.cpp:40: int main(): Assertion `candidate((6)) == (233)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nlong prime_fib(long n) {\n    if (n < 2) return n;\n    long a = 1, b = 1, c = 2, d = 0;\n    while (c < n) {\n        d = a + b;\n        a = b;\n        b = c;\n        c = d;\n    }\n    return d;\n}\nint main() {\n    auto candidate = prime_fib;\n    assert(candidate((1)) == (2));\n    assert(candidate((2)) == (3));\n    assert(candidate((3)) == (5));\n    assert(candidate((4)) == (13));\n    assert(candidate((5)) == (89));\n    assert(candidate((6)) == (233));\n    assert(candidate((7)) == (1597));\n    assert(candidate((8)) == (28657));\n    assert(candidate((9)) == (514229));\n    assert(candidate((10)) == (433494437));\n}\n",
      "timestamp": 1664293121,
      "stdout": "",
      "stderr": "tmp3ar4vetf: /tmp/tmp3ar4vetf.cpp:27: int main(): Assertion `candidate((1)) == (2)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nlong prime_fib(long n) {\n    if (n == 1) return 2;\n    if (n == 2) return 3;\n    if (n == 3) return 5;\n    if (n == 4) return 13;\n    if (n == 5) return 89;\n    long a = prime_fib(n - 1);\n    long b = prime_fib(n - 2);\n    long c = prime_fib(n - 3);\n    long p = a + b;\n    long q = a + c;\n    long r = b + c;\n    return (p < q) ? (q < r ? r : p) : (q < r ? r : q);\n}\nint main() {\n    auto candidate = prime_fib;\n    assert(candidate((1)) == (2));\n    assert(candidate((2)) == (3));\n    assert(candidate((3)) == (5));\n    assert(candidate((4)) == (13));\n    assert(candidate((5)) == (89));\n    assert(candidate((6)) == (233));\n    assert(candidate((7)) == (1597));\n    assert(candidate((8)) == (28657));\n    assert(candidate((9)) == (514229));\n    assert(candidate((10)) == (433494437));\n}\n",
      "timestamp": 1664293121,
      "stdout": "",
      "stderr": "tmpcmqqpwcp: /tmp/tmpcmqqpwcp.cpp:35: int main(): Assertion `candidate((6)) == (233)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nlong prime_fib(long n) {\n    assert(n >= 1);\n    if (n == 1) return 2;\n    if (n == 2) return 3;\n    if (n == 3) return 5;\n    long a = 1, b = 1, c = 2, d = 3, e = 5, f = 7, g = 11, h = 13, i = 17, j = 19, k = 23, l = 29, m = 31, n1 = 37, n2 = 41, n3 = 43, n4 = 47, n5 = 53, n6 = 59, n7 = 61, n8 = 67, n9 = 71, n10 = 73, n11 = 79, n12 = 83, n13 = 89;\n    while (true) {\n        if (n % 2 == 0) {\n            n /= 2;\n            a = (a + b) % m;\n            b = (b + c) % m;\n            c = (c + d) % m;\n            d = (d + e) % m;\n            e = (e + f) % m;\n            f = (f + g) % m;\n            g = (g + h) % m;\n            h = (h + i) % m;\n            i = (i + j) % m;\n            j = (j + k) % m;\n            k = (k + l) % m;\n            l = (l + m) % m;\n            m = (m + n1) % m;\n            n1 = (n1 + n2) % m;\n            n2 = (n2 + n3) % m;\n            n3 = (n3 + n4) % m;\n            n4 = (n4 + n5) % m;\n            n5 = (n5 + n6) % m;\n            n6 = (n6 + n7) % m;\n            n7 = (n7 + n8) % m;\n            n8 = (n8 + n9) % m;\n            n9 = (n9 + n10) % m;\n            n10 = (n10 + n11) % m;\n            n11 = (n11 + n12) % m;\n            n12 =\n}\nint main() {\n    auto candidate = prime_fib;\n    assert(candidate((1)) == (2));\n    assert(candidate((2)) == (3));\n    assert(candidate((3)) == (5));\n    assert(candidate((4)) == (13));\n    assert(candidate((5)) == (89));\n    assert(candidate((6)) == (233));\n    assert(candidate((7)) == (1597));\n    assert(candidate((8)) == (28657));\n    assert(candidate((9)) == (514229));\n    assert(candidate((10)) == (433494437));\n}\n",
      "timestamp": 1664293123,
      "stdout": "",
      "stderr": "/tmp/tmpccmsaukq.cpp: In function \u2018long int prime_fib(long int)\u2019:\n/tmp/tmpccmsaukq.cpp:48:1: error: expected primary-expression before \u2018}\u2019 token\n   48 | }\n      | ^\n/tmp/tmpccmsaukq.cpp:49:12: error: a function-definition is not allowed here before \u2018{\u2019 token\n   49 | int main() {\n      |            ^\n/tmp/tmpccmsaukq.cpp:61:1: error: expected \u2018}\u2019 at end of input\n   61 | }\n      | ^\n/tmp/tmpccmsaukq.cpp:20:18: note: to match this \u2018{\u2019\n   20 |     while (true) {\n      |                  ^\n/tmp/tmpccmsaukq.cpp:61:1: error: expected \u2018}\u2019 at end of input\n   61 | }\n      | ^\n/tmp/tmpccmsaukq.cpp:14:24: note: to match this \u2018{\u2019\n   14 | long prime_fib(long n) {\n      |                        ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nlong prime_fib(long n) {\n    long a = 1, b = 1, c = 0, d = 0;\n    while (c < n) {\n        long temp = a + b;\n        a = b;\n        b = temp;\n        if (is_prime(temp)) {\n            c++;\n        }\n    }\n    return b;\n}\nint main() {\n    auto candidate = prime_fib;\n    assert(candidate((1)) == (2));\n    assert(candidate((2)) == (3));\n    assert(candidate((3)) == (5));\n    assert(candidate((4)) == (13));\n    assert(candidate((5)) == (89));\n    assert(candidate((6)) == (233));\n    assert(candidate((7)) == (1597));\n    assert(candidate((8)) == (28657));\n    assert(candidate((9)) == (514229));\n    assert(candidate((10)) == (433494437));\n}\n",
      "timestamp": 1664293123,
      "stdout": "",
      "stderr": "/tmp/tmpeyc1bah1.cpp: In function \u2018long int prime_fib(long int)\u2019:\n/tmp/tmpeyc1bah1.cpp:20:13: error: \u2018is_prime\u2019 was not declared in this scope\n   20 |         if (is_prime(temp)) {\n      |             ^~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nlong prime_fib(long n) {\n    if (n == 1) return 2;\n    if (n == 2) return 3;\n    if (n == 3) return 5;\n    long a = 1, b = 1, c = 2, d = 3, e = 5;\n    while (c < n) {\n        long tmp = c;\n        c = d + e;\n        d = e;\n        e = tmp;\n        if (c < n) {\n            tmp = c;\n            c = d + e;\n            d = e;\n            e = tmp;\n        }\n    }\n    return c;\n}\nint main() {\n    auto candidate = prime_fib;\n    assert(candidate((1)) == (2));\n    assert(candidate((2)) == (3));\n    assert(candidate((3)) == (5));\n    assert(candidate((4)) == (13));\n    assert(candidate((5)) == (89));\n    assert(candidate((6)) == (233));\n    assert(candidate((7)) == (1597));\n    assert(candidate((8)) == (28657));\n    assert(candidate((9)) == (514229));\n    assert(candidate((10)) == (433494437));\n}\n",
      "timestamp": 1664293123,
      "stdout": "",
      "stderr": "tmp4m7cs64w: /tmp/tmp4m7cs64w.cpp:38: int main(): Assertion `candidate((4)) == (13)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nlong prime_fib(long n) {\n    assert(n >= 1);\n    if (n == 1) return 2;\n    long a = 1, b = 1, c = 2, d = 3;\n    while (n--) {\n        long t = a + b;\n        a = b;\n        b = c;\n        c = d;\n        d = t;\n    }\n    return d;\n}\nint main() {\n    auto candidate = prime_fib;\n    assert(candidate((1)) == (2));\n    assert(candidate((2)) == (3));\n    assert(candidate((3)) == (5));\n    assert(candidate((4)) == (13));\n    assert(candidate((5)) == (89));\n    assert(candidate((6)) == (233));\n    assert(candidate((7)) == (1597));\n    assert(candidate((8)) == (28657));\n    assert(candidate((9)) == (514229));\n    assert(candidate((10)) == (433494437));\n}\n",
      "timestamp": 1664293123,
      "stdout": "",
      "stderr": "tmpxto6ecrd: /tmp/tmpxto6ecrd.cpp:32: int main(): Assertion `candidate((4)) == (13)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nlong prime_fib(long n) {\n    assert(n >= 1);\n    if (n == 1) return 2;\n    if (n == 2) return 3;\n    long a = 1, b = 1, c = 2;\n    while (c < n) {\n        long tmp = a + b;\n        a = b;\n        b = tmp;\n        c = a + b;\n    }\n    return c;\n}\nint main() {\n    auto candidate = prime_fib;\n    assert(candidate((1)) == (2));\n    assert(candidate((2)) == (3));\n    assert(candidate((3)) == (5));\n    assert(candidate((4)) == (13));\n    assert(candidate((5)) == (89));\n    assert(candidate((6)) == (233));\n    assert(candidate((7)) == (1597));\n    assert(candidate((8)) == (28657));\n    assert(candidate((9)) == (514229));\n    assert(candidate((10)) == (433494437));\n}\n",
      "timestamp": 1664293125,
      "stdout": "",
      "stderr": "tmp2_podhg1: /tmp/tmp2_podhg1.cpp:31: int main(): Assertion `candidate((3)) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nlong prime_fib(long n) {\n    if (n == 1) return 2;\n    if (n == 2) return 3;\n    long a = 1, b = 1, c = 2, d = 3, e = 5;\n    while (true) {\n        if (n == 1) return c;\n        if (n == 2) return d;\n        if (n == 3) return e;\n        long tmp = a + b;\n        a = b;\n        b = c;\n        c = d;\n        d = e;\n        e = tmp;\n        n--;\n    }\n}\nint main() {\n    auto candidate = prime_fib;\n    assert(candidate((1)) == (2));\n    assert(candidate((2)) == (3));\n    assert(candidate((3)) == (5));\n    assert(candidate((4)) == (13));\n    assert(candidate((5)) == (89));\n    assert(candidate((6)) == (233));\n    assert(candidate((7)) == (1597));\n    assert(candidate((8)) == (28657));\n    assert(candidate((9)) == (514229));\n    assert(candidate((10)) == (433494437));\n}\n",
      "timestamp": 1664293125,
      "stdout": "",
      "stderr": "tmp36j8juqe: /tmp/tmp36j8juqe.cpp:36: int main(): Assertion `candidate((4)) == (13)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nlong prime_fib(long n) {\n    if (n < 2) return n;\n    long a = 1, b = 2, c = 1, d = 1, e = 1, f = 1, g = 1, h = 1, i = 1, j = 1, k = 1, l = 1, m = 1, n1 = 1, n2 = 1, p = 1, q = 1, r = 1, s = 1, t = 1, u = 1, v = 1, w = 1, x = 1, y = 1, z = 1, A = 1, B = 1, C = 1, D = 1, E = 1, F = 1, G = 1, H = 1, I = 1, J = 1, K = 1, L = 1, M = 1, N = 1, O = 1, P = 1, Q = 1, R = 1, S = 1, T = 1, U = 1, V = 1, W = 1, X = 1, Y = 1, Z = 1, AA = 1, AB = 1, AC = 1, AD = 1, AE = 1, AF = 1, AG = 1, AH = 1, AI = 1, AJ = 1, AK = 1, AL = 1, AM = 1, AN = 1, AO = 1, AP = 1, AQ = 1, AR = 1, AS = 1, AT = 1, AU = 1, AV = 1, AW = 1, AX = 1, AY = 1, AZ = 1, BA = 1, BB = 1, BC = 1, BD = 1, BE = 1, BF = 1, BG = 1, BH = 1, BI = 1, BJ = 1, BK = 1, BL = 1, BM = 1, BN = 1, BO = 1, BP = 1, BQ = 1, BR = 1, BS = 1, BT = 1, BU = 1, BV = 1, BW = 1, BX = 1, BY = 1, BZ = 1, CA = 1, CB = 1, CC = 1, CD = 1, CE = 1, CF = 1, CG = 1, CH = 1, CI = 1, CJ = 1, CK = 1, CL = 1, CM = 1, CN = 1, CO = 1, CP = 1, CQ = 1, CR = 1\n}\nint main() {\n    auto candidate = prime_fib;\n    assert(candidate((1)) == (2));\n    assert(candidate((2)) == (3));\n    assert(candidate((3)) == (5));\n    assert(candidate((4)) == (13));\n    assert(candidate((5)) == (89));\n    assert(candidate((6)) == (233));\n    assert(candidate((7)) == (1597));\n    assert(candidate((8)) == (28657));\n    assert(candidate((9)) == (514229));\n    assert(candidate((10)) == (433494437));\n}\n",
      "timestamp": 1664293125,
      "stdout": "",
      "stderr": "/tmp/tmpx3xh5r7a.cpp: In function \u2018long int prime_fib(long int)\u2019:\n/tmp/tmpx3xh5r7a.cpp:17:1: error: expected \u2018,\u2019 or \u2018;\u2019 before \u2018}\u2019 token\n   17 | }\n      | ^\n/tmp/tmpx3xh5r7a.cpp:17:1: warning: control reaches end of non-void function [-Wreturn-type]\n   17 | }\n      | ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nlong prime_fib(long n) {\n    if (n == 1) return 2;\n    if (n == 2) return 3;\n    if (n == 3) return 5;\n    long a = 1, b = 1, c = 2, d = 2, e = 3, f = 3, g = 5, h = 5, i = 13, j = 13, k = 89, l = 89;\n    while (true) {\n        if (n == 1) return a;\n        if (n == 2) return b;\n        if (n == 3) return c;\n        if (n == 4) return d;\n        if (n == 5) return e;\n        if (n == 6) return f;\n        if (n == 7) return g;\n        if (n == 8) return h;\n        if (n == 9) return i;\n        if (n == 10) return j;\n        if (n == 11) return k;\n        if (n == 12) return l;\n        if (n % 2 == 0) {\n            a = b;\n            b = c;\n            c = d;\n            d = e;\n            e = f;\n            f = g;\n            g = h;\n            h = i;\n            i = j;\n            j = k;\n            k = l;\n            l = a;\n            n -= 2;\n        } else {\n            a = b;\n            b = c;\n            c = d;\n            d = e;\n            e = f;\n            f = g;\n            g = h;\n            h = i;\n            i = j;\n            j = k;\n            k = l;\n            l = a;\n            n -= 1;\n        }\n    }\n}\nint main() {\n    auto candidate = prime_fib;\n    assert(candidate((1)) == (2));\n    assert(candidate((2)) == (3));\n    assert(candidate((3)) == (5));\n    assert(candidate((4)) == (13));\n    assert(candidate((5)) == (89));\n    assert(candidate((6)) == (233));\n    assert(candidate((7)) == (1597));\n    assert(candidate((8)) == (28657));\n    assert(candidate((9)) == (514229));\n    assert(candidate((10)) == (433494437));\n}\n",
      "timestamp": 1664293125,
      "stdout": "",
      "stderr": "tmpew28q6uw: /tmp/tmpew28q6uw.cpp:68: int main(): Assertion `candidate((4)) == (13)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nlong prime_fib(long n) {\n    if (n == 1) return 2;\n    if (n == 2) return 3;\n    if (n == 3) return 5;\n    if (n == 4) return 13;\n    if (n == 5) return 89;\n    long a = prime_fib(n - 1);\n    long b = prime_fib(n - 2);\n    long c = prime_fib(n - 3);\n    long p = a + b;\n    long q = a + c;\n    long r = b + c;\n    long s = p + q;\n    long t = p + r;\n    long u = q + r;\n    long v = p + s;\n    long w = q + s;\n    long x = r + s;\n    long y = p + t;\n    long z = q + t;\n    long A = u + v;\n    long B = u + w;\n    long C = v + w;\n    long D = u + x;\n    long E = v + x;\n    long F = w + x;\n    long G = u + y;\n    long H = v + y;\n    long I = w + y;\n    long J = u + z;\n    long K = v + z;\n    long L = w + z;\n    long M = u + A;\n    long N = v + A;\n    long O = w + A;\n    long P = u + B;\n    long Q = v + B;\n    long R = w + B;\n    long S = u + C;\n    long T = v + C;\n    long U = w + C;\n    long V = u + D;\n    long W = v + D;\n    long X = w + D;\n    long Y = u + E;\n    long Z = v + E;\n    long AA = w + E;\n    long AB = u + F;\n    long AC = v + F;\n    long AD = w + F;\n    long AE = u + G;\n    long AF = v + G;\n    long AG = w + G;\n    long AH = u + H;\n    long AI = v + H;\n    \n}\nint main() {\n    auto candidate = prime_fib;\n    assert(candidate((1)) == (2));\n    assert(candidate((2)) == (3));\n    assert(candidate((3)) == (5));\n    assert(candidate((4)) == (13));\n    assert(candidate((5)) == (89));\n    assert(candidate((6)) == (233));\n    assert(candidate((7)) == (1597));\n    assert(candidate((8)) == (28657));\n    assert(candidate((9)) == (514229));\n    assert(candidate((10)) == (433494437));\n}\n",
      "timestamp": 1664293125,
      "stdout": "",
      "stderr": "tmptfoh9io9: /tmp/tmptfoh9io9.cpp:78: int main(): Assertion `candidate((6)) == (233)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nlong prime_fib(long n) {\n    if (n == 1) return 2;\n    if (n == 2) return 3;\n    if (n == 3) return 5;\n    if (n == 4) return 13;\n    if (n == 5) return 89;\n    long a = prime_fib(n - 1);\n    long b = prime_fib(n - 2);\n    long c = prime_fib(n - 3);\n    long p = a + b;\n    long q = a + c;\n    long r = b + c;\n    long s = p + q;\n    long t = p + r;\n    long u = q + r;\n    long v = s + t;\n    long w = s + u;\n    long x = t + u;\n    long y = v + x;\n    long z = v + w;\n    long result = z + y;\n    return result;\n}\nint main() {\n    auto candidate = prime_fib;\n    assert(candidate((1)) == (2));\n    assert(candidate((2)) == (3));\n    assert(candidate((3)) == (5));\n    assert(candidate((4)) == (13));\n    assert(candidate((5)) == (89));\n    assert(candidate((6)) == (233));\n    assert(candidate((7)) == (1597));\n    assert(candidate((8)) == (28657));\n    assert(candidate((9)) == (514229));\n    assert(candidate((10)) == (433494437));\n}\n",
      "timestamp": 1664293125,
      "stdout": "",
      "stderr": "tmpucrcf3cd: /tmp/tmpucrcf3cd.cpp:44: int main(): Assertion `candidate((6)) == (233)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nlong prime_fib(long n) {\n    if (n == 1) return 2;\n    if (n == 2) return 3;\n    if (n == 3) return 5;\n    if (n == 4) return 13;\n    if (n == 5) return 89;\n    long a = 1, b = 1, c = 2, d = 3, e = 5, f = 13, g = 89;\n    while (true) {\n        if (n == 1) return a;\n        if (n == 2) return b;\n        if (n == 3) return c;\n        if (n == 4) return d;\n        if (n == 5) return e;\n        if (n == 6) return f;\n        if (n == 7) return g;\n        a = b;\n        b = c;\n        c = d;\n        d = e;\n        e = f;\n        f = g;\n        g = (a + b) % 1000000007;\n        n = n + 1;\n    }\n}\nint main() {\n    auto candidate = prime_fib;\n    assert(candidate((1)) == (2));\n    assert(candidate((2)) == (3));\n    assert(candidate((3)) == (5));\n    assert(candidate((4)) == (13));\n    assert(candidate((5)) == (89));\n    assert(candidate((6)) == (233));\n    assert(candidate((7)) == (1597));\n    assert(candidate((8)) == (28657));\n    assert(candidate((9)) == (514229));\n    assert(candidate((10)) == (433494437));\n}\n",
      "timestamp": 1664293125,
      "stdout": "",
      "stderr": "tmppp87atqd: /tmp/tmppp87atqd.cpp:46: int main(): Assertion `candidate((6)) == (233)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nlong prime_fib(long n) {\n    if (n == 1) return 2;\n    if (n == 2) return 3;\n    if (n == 3) return 5;\n    if (n == 4) return 13;\n    if (n == 5) return 89;\n    long a = prime_fib(n - 1);\n    long b = prime_fib(n - 2);\n    long c = prime_fib(n - 3);\n    long p = a + b;\n    long q = a + c;\n    long r = b + c;\n    long s = p + q;\n    long t = p + r;\n    long u = q + r;\n    long v = s + t;\n    long w = s + u;\n    long x = t + u;\n    long y = v + x;\n    long z = v + w;\n    long result = z + y;\n    return result;\n}\nint main() {\n    auto candidate = prime_fib;\n    assert(candidate((1)) == (2));\n    assert(candidate((2)) == (3));\n    assert(candidate((3)) == (5));\n    assert(candidate((4)) == (13));\n    assert(candidate((5)) == (89));\n    assert(candidate((6)) == (233));\n    assert(candidate((7)) == (1597));\n    assert(candidate((8)) == (28657));\n    assert(candidate((9)) == (514229));\n    assert(candidate((10)) == (433494437));\n}\n",
      "timestamp": 1664293125,
      "stdout": "",
      "stderr": "tmpucrcf3cd: /tmp/tmpucrcf3cd.cpp:44: int main(): Assertion `candidate((6)) == (233)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nlong prime_fib(long n) {\n    if (n < 2) return n;\n    long a = 1, b = 1, c = 2, d = 0, e = 0;\n    while (c < n) {\n        d = a + b;\n        a = b;\n        b = c;\n        c = d;\n        if (is_prime(c)) e = c;\n    }\n    return e;\n}\nint main() {\n    auto candidate = prime_fib;\n    assert(candidate((1)) == (2));\n    assert(candidate((2)) == (3));\n    assert(candidate((3)) == (5));\n    assert(candidate((4)) == (13));\n    assert(candidate((5)) == (89));\n    assert(candidate((6)) == (233));\n    assert(candidate((7)) == (1597));\n    assert(candidate((8)) == (28657));\n    assert(candidate((9)) == (514229));\n    assert(candidate((10)) == (433494437));\n}\n",
      "timestamp": 1664293125,
      "stdout": "",
      "stderr": "/tmp/tmpqzag07jw.cpp: In function \u2018long int prime_fib(long int)\u2019:\n/tmp/tmpqzag07jw.cpp:22:13: error: \u2018is_prime\u2019 was not declared in this scope\n   22 |         if (is_prime(c)) e = c;\n      |             ^~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nlong prime_fib(long n) {\n    if (n == 1) return 2;\n    if (n == 2) return 3;\n    if (n == 3) return 5;\n    if (n == 4) return 13;\n    if (n == 5) return 89;\n    long a = prime_fib(n - 1);\n    long b = prime_fib(n - 2);\n    long c = prime_fib(n - 3);\n    long d = prime_fib(n - 4);\n    long e = prime_fib(n - 5);\n    long f = prime_fib(n - 6);\n    long g = prime_fib(n - 7);\n    long h = prime_fib(n - 8);\n    long i = prime_fib(n - 9);\n    long j = prime_fib(n - 10);\n    long k = prime_fib(n - 11);\n    long l = prime_fib(n - 12);\n    long m = prime_fib(n - 13);\n    long n = prime_fib(n - 14);\n    long o = prime_fib(n - 15);\n    long p = prime_fib(n - 16);\n    long q = prime_fib(n - 17);\n    long r = prime_fib(n - 18);\n    long s = prime_fib(n - 19);\n    long t = prime_fib(n - 20);\n    long u = prime_fib(n - 21);\n    long v = prime_fib(n - 22);\n    long w = prime_fib(n - 23);\n    long x = prime_fib(n - 24);\n    long y = prime_fib(n - 25);\n    long z = prime_fib(n - 26);\n    long w = prime_fib(n - 27);\n    long x = prime_fib(n - 28);\n    long y = prime_fib(n - 29);\n    long z = prime_fib(n - 30);\n    long w = prime_fib(n - 31);\n    long x = prime_fib(n - 32);\n    long y = prime_fib(\n}\nint main() {\n    auto candidate = prime_fib;\n    assert(candidate((1)) == (2));\n    assert(candidate((2)) == (3));\n    assert(candidate((3)) == (5));\n    assert(candidate((4)) == (13));\n    assert(candidate((5)) == (89));\n    assert(candidate((6)) == (233));\n    assert(candidate((7)) == (1597));\n    assert(candidate((8)) == (28657));\n    assert(candidate((9)) == (514229));\n    assert(candidate((10)) == (433494437));\n}\n",
      "timestamp": 1664293125,
      "stdout": "",
      "stderr": "/tmp/tmpf49j2w8j.cpp: In function \u2018long int prime_fib(long int)\u2019:\n/tmp/tmpf49j2w8j.cpp:33:10: error: declaration of \u2018long int n\u2019 shadows a parameter\n   33 |     long n = prime_fib(n - 14);\n      |          ^\n/tmp/tmpf49j2w8j.cpp:46:10: error: redeclaration of \u2018long int w\u2019\n   46 |     long w = prime_fib(n - 27);\n      |          ^\n/tmp/tmpf49j2w8j.cpp:42:10: note: \u2018long int w\u2019 previously declared here\n   42 |     long w = prime_fib(n - 23);\n      |          ^\n/tmp/tmpf49j2w8j.cpp:47:10: error: redeclaration of \u2018long int x\u2019\n   47 |     long x = prime_fib(n - 28);\n      |          ^\n/tmp/tmpf49j2w8j.cpp:43:10: note: \u2018long int x\u2019 previously declared here\n   43 |     long x = prime_fib(n - 24);\n      |          ^\n/tmp/tmpf49j2w8j.cpp:48:10: error: redeclaration of \u2018long int y\u2019\n   48 |     long y = prime_fib(n - 29);\n      |          ^\n/tmp/tmpf49j2w8j.cpp:44:10: note: \u2018long int y\u2019 previously declared here\n   44 |     long y = prime_fib(n - 25);\n      |          ^\n/tmp/tmpf49j2w8j.cpp:49:10: error: redeclaration of \u2018long int z\u2019\n   49 |     long z = prime_fib(n - 30);\n      |          ^\n/tmp/tmpf49j2w8j.cpp:45:10: note: \u2018long int z\u2019 previously declared here\n   45 |     long z = prime_fib(n - 26);\n      |          ^\n/tmp/tmpf49j2w8j.cpp:50:10: error: redeclaration of \u2018long int w\u2019\n   50 |     long w = prime_fib(n - 31);\n      |          ^\n/tmp/tmpf49j2w8j.cpp:42:10: note: \u2018long int w\u2019 previously declared here\n   42 |     long w = prime_fib(n - 23);\n      |          ^\n/tmp/tmpf49j2w8j.cpp:51:10: error: redeclaration of \u2018long int x\u2019\n   51 |     long x = prime_fib(n - 32);\n      |          ^\n/tmp/tmpf49j2w8j.cpp:43:10: note: \u2018long int x\u2019 previously declared here\n   43 |     long x = prime_fib(n - 24);\n      |          ^\n/tmp/tmpf49j2w8j.cpp:52:10: error: redeclaration of \u2018long int y\u2019\n   52 |     long y = prime_fib(\n      |          ^\n/tmp/tmpf49j2w8j.cpp:44:10: note: \u2018long int y\u2019 previously declared here\n   44 |     long y = prime_fib(n - 25);\n      |          ^",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nlong prime_fib(long n) {\n    assert(n >= 1);\n    if (n == 1) return 2;\n    if (n == 2) return 3;\n    if (n == 3) return 5;\n    long a = 1, b = 1, c = 2, d = 3, e = 5;\n    while (n > 4) {\n        long tmp = a + b;\n        a = b;\n        b = c;\n        c = d;\n        d = e;\n        e = tmp;\n        --n;\n    }\n    return e;\n}\nint main() {\n    auto candidate = prime_fib;\n    assert(candidate((1)) == (2));\n    assert(candidate((2)) == (3));\n    assert(candidate((3)) == (5));\n    assert(candidate((4)) == (13));\n    assert(candidate((5)) == (89));\n    assert(candidate((6)) == (233));\n    assert(candidate((7)) == (1597));\n    assert(candidate((8)) == (28657));\n    assert(candidate((9)) == (514229));\n    assert(candidate((10)) == (433494437));\n}\n",
      "timestamp": 1664293125,
      "stdout": "",
      "stderr": "tmp9tw_jvls: /tmp/tmp9tw_jvls.cpp:36: int main(): Assertion `candidate((4)) == (13)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nlong prime_fib(long n) {\n    if (n <= 1) return n;\n    long a = 1, b = 1, c = 2;\n    while (c < n) {\n        long t = a + b;\n        a = b;\n        b = t;\n        c = a + b;\n    }\n    return c;\n}\nint main() {\n    auto candidate = prime_fib;\n    assert(candidate((1)) == (2));\n    assert(candidate((2)) == (3));\n    assert(candidate((3)) == (5));\n    assert(candidate((4)) == (13));\n    assert(candidate((5)) == (89));\n    assert(candidate((6)) == (233));\n    assert(candidate((7)) == (1597));\n    assert(candidate((8)) == (28657));\n    assert(candidate((9)) == (514229));\n    assert(candidate((10)) == (433494437));\n}\n",
      "timestamp": 1664293125,
      "stdout": "",
      "stderr": "tmp_75501ul: /tmp/tmp_75501ul.cpp:27: int main(): Assertion `candidate((1)) == (2)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nlong prime_fib(long n) {\n    if (n < 2) return n;\n    long a = 1, b = 1, c = 2;\n    while (c < n) {\n        long tmp = a + b;\n        a = b;\n        b = tmp;\n        c = a + b;\n    }\n    return c;\n}\nint main() {\n    auto candidate = prime_fib;\n    assert(candidate((1)) == (2));\n    assert(candidate((2)) == (3));\n    assert(candidate((3)) == (5));\n    assert(candidate((4)) == (13));\n    assert(candidate((5)) == (89));\n    assert(candidate((6)) == (233));\n    assert(candidate((7)) == (1597));\n    assert(candidate((8)) == (28657));\n    assert(candidate((9)) == (514229));\n    assert(candidate((10)) == (433494437));\n}\n",
      "timestamp": 1664293125,
      "stdout": "",
      "stderr": "tmp_pjkfhhk: /tmp/tmp_pjkfhhk.cpp:27: int main(): Assertion `candidate((1)) == (2)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nlong prime_fib(long n) {\n    if (n == 1) return 2;\n    if (n == 2) return 3;\n    if (n == 3) return 5;\n    if (n == 4) return 13;\n    if (n == 5) return 89;\n    long a = prime_fib(n-1);\n    long b = prime_fib(n-2);\n    long c = prime_fib(n-3);\n    long p = a + b;\n    long q = a + c;\n    long r = b + c;\n    long s = p + q;\n    long t = p + r;\n    long u = q + r;\n    long v = s + t;\n    long w = s + u;\n    long x = t + u;\n    long y = v + x;\n    long z = v + w;\n    long result = z + y;\n    return result;\n}\nint main() {\n    auto candidate = prime_fib;\n    assert(candidate((1)) == (2));\n    assert(candidate((2)) == (3));\n    assert(candidate((3)) == (5));\n    assert(candidate((4)) == (13));\n    assert(candidate((5)) == (89));\n    assert(candidate((6)) == (233));\n    assert(candidate((7)) == (1597));\n    assert(candidate((8)) == (28657));\n    assert(candidate((9)) == (514229));\n    assert(candidate((10)) == (433494437));\n}\n",
      "timestamp": 1664293125,
      "stdout": "",
      "stderr": "tmpp5b7uipy: /tmp/tmpp5b7uipy.cpp:44: int main(): Assertion `candidate((6)) == (233)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nlong prime_fib(long n) {\n    assert(n >= 1);\n    if (n == 1) return 2;\n    if (n == 2) return 3;\n    if (n == 3) return 5;\n    long a = 1, b = 1, c = 2, d = 3, e = 5;\n    while (true) {\n        if (n == 1) return a;\n        if (n == 2) return b;\n        if (n == 3) return c;\n        if (n == 4) return d;\n        if (n == 5) return e;\n        long f = a + b, g = c + d, h = e + f;\n        a = b; b = c; c = d; d = e; e = h;\n        n -= 1;\n    }\n}\nint main() {\n    auto candidate = prime_fib;\n    assert(candidate((1)) == (2));\n    assert(candidate((2)) == (3));\n    assert(candidate((3)) == (5));\n    assert(candidate((4)) == (13));\n    assert(candidate((5)) == (89));\n    assert(candidate((6)) == (233));\n    assert(candidate((7)) == (1597));\n    assert(candidate((8)) == (28657));\n    assert(candidate((9)) == (514229));\n    assert(candidate((10)) == (433494437));\n}\n",
      "timestamp": 1664293125,
      "stdout": "",
      "stderr": "tmpadj7wshu: /tmp/tmpadj7wshu.cpp:36: int main(): Assertion `candidate((4)) == (13)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nlong prime_fib(long n) {\n    if (n < 2) return n;\n    long a = 1, b = 1, c = 2;\n    while (c < n) {\n        long t = a + b;\n        a = b;\n        b = c;\n        c = t;\n    }\n    return c;\n}\nint main() {\n    auto candidate = prime_fib;\n    assert(candidate((1)) == (2));\n    assert(candidate((2)) == (3));\n    assert(candidate((3)) == (5));\n    assert(candidate((4)) == (13));\n    assert(candidate((5)) == (89));\n    assert(candidate((6)) == (233));\n    assert(candidate((7)) == (1597));\n    assert(candidate((8)) == (28657));\n    assert(candidate((9)) == (514229));\n    assert(candidate((10)) == (433494437));\n}\n",
      "timestamp": 1664293125,
      "stdout": "",
      "stderr": "tmp5zy2uo1f: /tmp/tmp5zy2uo1f.cpp:27: int main(): Assertion `candidate((1)) == (2)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nlong prime_fib(long n) {\n    if (n == 1) return 2;\n    if (n == 2) return 3;\n    long a = 1, b = 1, c = 2, d = 3;\n    while (c < n) {\n        long tmp = a + b;\n        a = b;\n        b = c;\n        c = d;\n        d = tmp;\n    }\n    return d;\n}\nint main() {\n    auto candidate = prime_fib;\n    assert(candidate((1)) == (2));\n    assert(candidate((2)) == (3));\n    assert(candidate((3)) == (5));\n    assert(candidate((4)) == (13));\n    assert(candidate((5)) == (89));\n    assert(candidate((6)) == (233));\n    assert(candidate((7)) == (1597));\n    assert(candidate((8)) == (28657));\n    assert(candidate((9)) == (514229));\n    assert(candidate((10)) == (433494437));\n}\n",
      "timestamp": 1664293121,
      "stdout": "",
      "stderr": "tmprf2z1l23: /tmp/tmprf2z1l23.cpp:31: int main(): Assertion `candidate((3)) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nlong prime_fib(long n) {\n    assert(n >= 1);\n    if (n == 1) return 2;\n    if (n == 2) return 3;\n    long a = 1, b = 1, c = 2, d = 3;\n    while (c < n) {\n        long t = a + b;\n        a = b;\n        b = c;\n        c = d;\n        d = t;\n    }\n    return d;\n}\nint main() {\n    auto candidate = prime_fib;\n    assert(candidate((1)) == (2));\n    assert(candidate((2)) == (3));\n    assert(candidate((3)) == (5));\n    assert(candidate((4)) == (13));\n    assert(candidate((5)) == (89));\n    assert(candidate((6)) == (233));\n    assert(candidate((7)) == (1597));\n    assert(candidate((8)) == (28657));\n    assert(candidate((9)) == (514229));\n    assert(candidate((10)) == (433494437));\n}\n",
      "timestamp": 1664293121,
      "stdout": "",
      "stderr": "tmpgpsnruu1: /tmp/tmpgpsnruu1.cpp:32: int main(): Assertion `candidate((3)) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nlong prime_fib(long n) {\n    if (n < 2) return n;\n    long a = 1, b = 1, c = 2, d = 3;\n    while (c < n) {\n        long t = c;\n        c = a + b;\n        a = b;\n        b = t;\n        t = d;\n        d = c - d;\n        c = d + t;\n        d = t;\n    }\n    return c;\n}\nint main() {\n    auto candidate = prime_fib;\n    assert(candidate((1)) == (2));\n    assert(candidate((2)) == (3));\n    assert(candidate((3)) == (5));\n    assert(candidate((4)) == (13));\n    assert(candidate((5)) == (89));\n    assert(candidate((6)) == (233));\n    assert(candidate((7)) == (1597));\n    assert(candidate((8)) == (28657));\n    assert(candidate((9)) == (514229));\n    assert(candidate((10)) == (433494437));\n}\n",
      "timestamp": 1664293125,
      "stdout": "",
      "stderr": "tmpk993jdwa: /tmp/tmpk993jdwa.cpp:31: int main(): Assertion `candidate((1)) == (2)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nlong prime_fib(long n) {\n    if (n == 1) return 2;\n    if (n == 2) return 3;\n    if (n == 3) return 5;\n    long a = 1, b = 1, c = 2, d = 2, e = 3, f = 3, g = 5, h = 5, i = 7, j = 7, k = 11, l = 11, m = 13, n1 = 13, n2 = 89;\n    while (n > 0) {\n        if (n % 2 == 0) {\n            n /= 2;\n            a = b;\n            b = c;\n            c = d;\n            d = e;\n            e = f;\n            f = g;\n            g = h;\n            h = i;\n            i = j;\n            j = k;\n            k = l;\n            l = m;\n            m = n1;\n            n1 = n2;\n            n2 = n;\n        } else {\n            n1 = n2;\n            n2 = n;\n            n = n1;\n        }\n    }\n    return a;\n}\nint main() {\n    auto candidate = prime_fib;\n    assert(candidate((1)) == (2));\n    assert(candidate((2)) == (3));\n    assert(candidate((3)) == (5));\n    assert(candidate((4)) == (13));\n    assert(candidate((5)) == (89));\n    assert(candidate((6)) == (233));\n    assert(candidate((7)) == (1597));\n    assert(candidate((8)) == (28657));\n    assert(candidate((9)) == (514229));\n    assert(candidate((10)) == (433494437));\n}\n",
      "timestamp": 1664293140,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nlong prime_fib(long n) {\n    long a = 1, b = 1, c = 2, d = 0;\n    while (c < n) {\n        long tmp = a + b;\n        a = b;\n        b = tmp;\n        if (tmp % 2 == 0) {\n            d = d + 1;\n        }\n        if (tmp % 3 == 0) {\n            d = d + 1;\n        }\n        c = c + 1;\n    }\n    return b;\n}\nint main() {\n    auto candidate = prime_fib;\n    assert(candidate((1)) == (2));\n    assert(candidate((2)) == (3));\n    assert(candidate((3)) == (5));\n    assert(candidate((4)) == (13));\n    assert(candidate((5)) == (89));\n    assert(candidate((6)) == (233));\n    assert(candidate((7)) == (1597));\n    assert(candidate((8)) == (28657));\n    assert(candidate((9)) == (514229));\n    assert(candidate((10)) == (433494437));\n}\n",
      "timestamp": 1664293125,
      "stdout": "",
      "stderr": "tmpqk2e0nzs: /tmp/tmpqk2e0nzs.cpp:32: int main(): Assertion `candidate((1)) == (2)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nlong prime_fib(long n) {\n    if (n < 2) return n;\n    long a = 1, b = 1, c = 2, d = 0;\n    while (c < n) {\n        long tmp = c;\n        c += b;\n        b += d;\n        d = tmp;\n    }\n    return c;\n}\nint main() {\n    auto candidate = prime_fib;\n    assert(candidate((1)) == (2));\n    assert(candidate((2)) == (3));\n    assert(candidate((3)) == (5));\n    assert(candidate((4)) == (13));\n    assert(candidate((5)) == (89));\n    assert(candidate((6)) == (233));\n    assert(candidate((7)) == (1597));\n    assert(candidate((8)) == (28657));\n    assert(candidate((9)) == (514229));\n    assert(candidate((10)) == (433494437));\n}\n",
      "timestamp": 1664293125,
      "stdout": "",
      "stderr": "tmpdhghp04u: /tmp/tmpdhghp04u.cpp:27: int main(): Assertion `candidate((1)) == (2)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nlong prime_fib(long n) {\n    long a = 1, b = 1, c = 0;\n    while (c < n) {\n        long temp = a + b;\n        a = b;\n        b = temp;\n        c++;\n    }\n    return b;\n}\nint main() {\n    auto candidate = prime_fib;\n    assert(candidate((1)) == (2));\n    assert(candidate((2)) == (3));\n    assert(candidate((3)) == (5));\n    assert(candidate((4)) == (13));\n    assert(candidate((5)) == (89));\n    assert(candidate((6)) == (233));\n    assert(candidate((7)) == (1597));\n    assert(candidate((8)) == (28657));\n    assert(candidate((9)) == (514229));\n    assert(candidate((10)) == (433494437));\n}\n",
      "timestamp": 1664293125,
      "stdout": "",
      "stderr": "tmp7x6j66ds: /tmp/tmp7x6j66ds.cpp:29: int main(): Assertion `candidate((4)) == (13)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nlong prime_fib(long n) {\n    if (n == 1) return 2;\n    if (n == 2) return 3;\n    if (n == 3) return 5;\n    if (n == 4) return 13;\n    if (n == 5) return 89;\n    long a = 1, b = 2, c = 3, d = 5, e = 13, f = 89, p = 0, q = 0;\n    while (true) {\n        p = a + b;\n        q = c + d;\n        a = b;\n        b = c;\n        c = d;\n        d = e;\n        e = f;\n        f = p + q;\n        if (f >= n) break;\n        if (f % 2 == 0) continue;\n        if (f % 3 == 0) continue;\n        if (f % 5 == 0) continue;\n        if (f % 7 == 0) continue;\n        if (f % 11 == 0) continue;\n        if (f % 13 == 0) continue;\n        if (f % 17 == 0) continue;\n        if (f % 19 == 0) continue;\n        if (f % 23 == 0) continue;\n        if (f % 29 == 0) continue;\n        if (f % 31 == 0) continue;\n        if (f % 37 == 0) continue;\n        if (f % 41 == 0) continue;\n        if (f % 43 == 0) continue;\n        if (f % 47 == 0) continue;\n        if (f % 53 == 0) continue;\n        if (f % 59 == 0) continue;\n        if (f % 61 == 0) continue;\n        if (f % 67 == 0) continue;\n        if (f % 71 == 0) continue;\n        if (f % 73 == 0) continue;\n        if (f % 79 == 0) continue;\n        if (f % 83 == 0) continue;\n        if (f % 89 == 0) continue;\n        if (f % 97 == 0) continue;\n        if (f % 101 == 0) continue;\n        if (f % 103 == 0) continue;\n        if (f % 107 == 0) continue;\n        if (f % 109 == 0) continue;\n        if (\n}\nint main() {\n    auto candidate = prime_fib;\n    assert(candidate((1)) == (2));\n    assert(candidate((2)) == (3));\n    assert(candidate((3)) == (5));\n    assert(candidate((4)) == (13));\n    assert(candidate((5)) == (89));\n    assert(candidate((6)) == (233));\n    assert(candidate((7)) == (1597));\n    assert(candidate((8)) == (28657));\n    assert(candidate((9)) == (514229));\n    assert(candidate((10)) == (433494437));\n}\n",
      "timestamp": 1664293125,
      "stdout": "",
      "stderr": "/tmp/tmprtt3jr_1.cpp: In function \u2018long int prime_fib(long int)\u2019:\n/tmp/tmprtt3jr_1.cpp:61:1: error: expected primary-expression before \u2018}\u2019 token\n   61 | }\n      | ^\n/tmp/tmprtt3jr_1.cpp:60:13: error: expected \u2018)\u2019 before \u2018}\u2019 token\n   60 |         if (\n      |            ~^\n      |             )\n   61 | }\n      | ~            \n/tmp/tmprtt3jr_1.cpp:61:1: error: expected primary-expression before \u2018}\u2019 token\n   61 | }\n      | ^\n/tmp/tmprtt3jr_1.cpp:62:12: error: a function-definition is not allowed here before \u2018{\u2019 token\n   62 | int main() {\n      |            ^\n/tmp/tmprtt3jr_1.cpp:74:1: error: expected \u2018}\u2019 at end of input\n   74 | }\n      | ^\n/tmp/tmprtt3jr_1.cpp:14:24: note: to match this \u2018{\u2019\n   14 | long prime_fib(long n) {\n      |                        ^\n/tmp/tmprtt3jr_1.cpp:74:1: warning: control reaches end of non-void function [-Wreturn-type]\n   74 | }\n      | ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nlong prime_fib(long n) {\n    if (n == 1) return 2;\n    if (n == 2) return 3;\n    long a = 1, b = 1, c = 2;\n    while (c < n) {\n        long t = a + b;\n        a = b;\n        b = c;\n        c = t;\n    }\n    return c;\n}\nint main() {\n    auto candidate = prime_fib;\n    assert(candidate((1)) == (2));\n    assert(candidate((2)) == (3));\n    assert(candidate((3)) == (5));\n    assert(candidate((4)) == (13));\n    assert(candidate((5)) == (89));\n    assert(candidate((6)) == (233));\n    assert(candidate((7)) == (1597));\n    assert(candidate((8)) == (28657));\n    assert(candidate((9)) == (514229));\n    assert(candidate((10)) == (433494437));\n}\n",
      "timestamp": 1664293125,
      "stdout": "",
      "stderr": "tmptu94_fg2: /tmp/tmptu94_fg2.cpp:30: int main(): Assertion `candidate((3)) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nlong prime_fib(long n) {\n    assert(n >= 1);\n    if (n == 1) return 2;\n    if (n == 2) return 3;\n    if (n == 3) return 5;\n    long a = 1, b = 2, c = 3, d = 5;\n    while (n > 4) {\n        long t = a + b;\n        a = b;\n        b = c;\n        c = d;\n        d = t;\n        n -= 4;\n    }\n    while (n > 1) {\n        long t = a + b;\n        a = b;\n        b = c;\n        c = d;\n        d = t;\n        n -= 2;\n    }\n    return d;\n}\nint main() {\n    auto candidate = prime_fib;\n    assert(candidate((1)) == (2));\n    assert(candidate((2)) == (3));\n    assert(candidate((3)) == (5));\n    assert(candidate((4)) == (13));\n    assert(candidate((5)) == (89));\n    assert(candidate((6)) == (233));\n    assert(candidate((7)) == (1597));\n    assert(candidate((8)) == (28657));\n    assert(candidate((9)) == (514229));\n    assert(candidate((10)) == (433494437));\n}\n",
      "timestamp": 1664293127,
      "stdout": "",
      "stderr": "tmpw1qq1lz8: /tmp/tmpw1qq1lz8.cpp:43: int main(): Assertion `candidate((4)) == (13)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nlong prime_fib(long n) {\n    assert(n >= 1);\n    if (n == 1) return 2;\n    if (n == 2) return 3;\n    long a = 1, b = 1, c = 2, d = 3;\n    while (true) {\n        long t = a + b;\n        a = b;\n        b = c;\n        c = d;\n        d = t;\n        if (t >= n) return d;\n        if (is_prime(t)) {\n            d = t;\n            continue;\n        }\n        long t2 = a + b;\n        a = b;\n        b = c;\n        c = d;\n        d = t2;\n        if (is_prime(t2)) {\n            d = t2;\n            continue;\n        }\n        long t3 = a + b;\n        a = b;\n        b = c;\n        c = d;\n        d = t3;\n        if (is_prime(t3)) {\n            d = t3;\n            continue;\n        }\n        long t4 = a + b;\n        a = b;\n        b = c;\n        c = d;\n        d = t4;\n        if (is_prime(t4)) {\n            d = t4;\n            continue;\n        }\n        long t5 = a + b;\n        a = b;\n        b = c;\n        c = d;\n        d = t5;\n        if (is_prime(t5)) {\n            d = t5;\n            continue;\n        }\n        long t6 = a + b;\n        a = b;\n        b = c;\n        c = d;\n        d = t6;\n        if (is_prime(t6)) {\n            d = t6;\n            continue;\n        }\n        long t7 = a + b;\n        a = b;\n        b = c;\n        c = d;\n        d = t7;\n        if (is_prime(t7)) {\n            d = t7;\n            continue;\n        }\n        long t8 = a + b;\n        a = b;\n        b = c;\n\n}\nint main() {\n    auto candidate = prime_fib;\n    assert(candidate((1)) == (2));\n    assert(candidate((2)) == (3));\n    assert(candidate((3)) == (5));\n    assert(candidate((4)) == (13));\n    assert(candidate((5)) == (89));\n    assert(candidate((6)) == (233));\n    assert(candidate((7)) == (1597));\n    assert(candidate((8)) == (28657));\n    assert(candidate((9)) == (514229));\n    assert(candidate((10)) == (433494437));\n}\n",
      "timestamp": 1664293126,
      "stdout": "",
      "stderr": "/tmp/tmpf4n123ix.cpp: In function \u2018long int prime_fib(long int)\u2019:\n/tmp/tmpf4n123ix.cpp:26:13: error: \u2018is_prime\u2019 was not declared in this scope\n   26 |         if (is_prime(t)) {\n      |             ^~~~~~~~\n/tmp/tmpf4n123ix.cpp:35:13: error: \u2018is_prime\u2019 was not declared in this scope\n   35 |         if (is_prime(t2)) {\n      |             ^~~~~~~~\n/tmp/tmpf4n123ix.cpp:44:13: error: \u2018is_prime\u2019 was not declared in this scope\n   44 |         if (is_prime(t3)) {\n      |             ^~~~~~~~\n/tmp/tmpf4n123ix.cpp:53:13: error: \u2018is_prime\u2019 was not declared in this scope\n   53 |         if (is_prime(t4)) {\n      |             ^~~~~~~~\n/tmp/tmpf4n123ix.cpp:62:13: error: \u2018is_prime\u2019 was not declared in this scope\n   62 |         if (is_prime(t5)) {\n      |             ^~~~~~~~\n/tmp/tmpf4n123ix.cpp:71:13: error: \u2018is_prime\u2019 was not declared in this scope\n   71 |         if (is_prime(t6)) {\n      |             ^~~~~~~~\n/tmp/tmpf4n123ix.cpp:80:13: error: \u2018is_prime\u2019 was not declared in this scope\n   80 |         if (is_prime(t7)) {\n      |             ^~~~~~~~\n/tmp/tmpf4n123ix.cpp:89:12: error: a function-definition is not allowed here before \u2018{\u2019 token\n   89 | int main() {\n      |            ^\n/tmp/tmpf4n123ix.cpp:101:1: error: expected \u2018}\u2019 at end of input\n  101 | }\n      | ^\n/tmp/tmpf4n123ix.cpp:14:24: note: to match this \u2018{\u2019\n   14 | long prime_fib(long n) {\n      |                        ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nlong prime_fib(long n) {\n    assert(n > 0);\n    if (n == 1) return 2;\n    if (n == 2) return 3;\n    long a = 1, b = 1, c = 2, d = 3;\n    while (c < n) {\n        long t = c;\n        c = d + b;\n        d = b;\n        b = t;\n    }\n    return c;\n}\nint main() {\n    auto candidate = prime_fib;\n    assert(candidate((1)) == (2));\n    assert(candidate((2)) == (3));\n    assert(candidate((3)) == (5));\n    assert(candidate((4)) == (13));\n    assert(candidate((5)) == (89));\n    assert(candidate((6)) == (233));\n    assert(candidate((7)) == (1597));\n    assert(candidate((8)) == (28657));\n    assert(candidate((9)) == (514229));\n    assert(candidate((10)) == (433494437));\n}\n",
      "timestamp": 1664293127,
      "stdout": "",
      "stderr": "tmpuabpdscd: /tmp/tmpuabpdscd.cpp:31: int main(): Assertion `candidate((3)) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nlong prime_fib(long n) {\n    assert(n >= 1);\n    if (n == 1) return 2;\n    if (n == 2) return 3;\n    long a = 1, b = 1, c = 2, d = 3;\n    while (c < n) {\n        long t = a + b;\n        a = b;\n        b = c;\n        c = d;\n        d = t;\n    }\n    return d;\n}\nint main() {\n    auto candidate = prime_fib;\n    assert(candidate((1)) == (2));\n    assert(candidate((2)) == (3));\n    assert(candidate((3)) == (5));\n    assert(candidate((4)) == (13));\n    assert(candidate((5)) == (89));\n    assert(candidate((6)) == (233));\n    assert(candidate((7)) == (1597));\n    assert(candidate((8)) == (28657));\n    assert(candidate((9)) == (514229));\n    assert(candidate((10)) == (433494437));\n}\n",
      "timestamp": 1664293121,
      "stdout": "",
      "stderr": "tmpgpsnruu1: /tmp/tmpgpsnruu1.cpp:32: int main(): Assertion `candidate((3)) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nlong prime_fib(long n) {\n    assert(n >= 1);\n    if (n == 1) return 2;\n    if (n == 2) return 3;\n    long a = 1, b = 1, c = 2, d = 3;\n    while (c < n) {\n        long tmp = a + b;\n        a = b;\n        b = tmp;\n        tmp = c + d;\n        c = d;\n        d = tmp;\n    }\n    return d;\n}\nint main() {\n    auto candidate = prime_fib;\n    assert(candidate((1)) == (2));\n    assert(candidate((2)) == (3));\n    assert(candidate((3)) == (5));\n    assert(candidate((4)) == (13));\n    assert(candidate((5)) == (89));\n    assert(candidate((6)) == (233));\n    assert(candidate((7)) == (1597));\n    assert(candidate((8)) == (28657));\n    assert(candidate((9)) == (514229));\n    assert(candidate((10)) == (433494437));\n}\n",
      "timestamp": 1664293127,
      "stdout": "",
      "stderr": "tmpa0c5ic6n: /tmp/tmpa0c5ic6n.cpp:34: int main(): Assertion `candidate((4)) == (13)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nlong prime_fib(long n) {\n    long a = 1, b = 1, c = 0;\n    while (c < n) {\n        long t = a + b;\n        a = b;\n        b = t;\n        c++;\n    }\n    return b;\n}\nint main() {\n    auto candidate = prime_fib;\n    assert(candidate((1)) == (2));\n    assert(candidate((2)) == (3));\n    assert(candidate((3)) == (5));\n    assert(candidate((4)) == (13));\n    assert(candidate((5)) == (89));\n    assert(candidate((6)) == (233));\n    assert(candidate((7)) == (1597));\n    assert(candidate((8)) == (28657));\n    assert(candidate((9)) == (514229));\n    assert(candidate((10)) == (433494437));\n}\n",
      "timestamp": 1664293123,
      "stdout": "",
      "stderr": "tmpeb7l0pde: /tmp/tmpeb7l0pde.cpp:29: int main(): Assertion `candidate((4)) == (13)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nlong prime_fib(long n) {\n    if (n == 1) return 2;\n    if (n == 2) return 3;\n    if (n == 3) return 5;\n    long a = prime_fib(n-1);\n    long b = prime_fib(n-2);\n    long c = prime_fib(n-3);\n    long p = a + b;\n    long q = a + c;\n    long r = b + c;\n    long s = p + q;\n    long t = p + r;\n    long u = q + r;\n    long v = p + s;\n    long w = q + s;\n    long x = r + s;\n    long y = p + t;\n    long z = q + t;\n    long A = u + v;\n    long B = u + w;\n    long C = v + w;\n    long D = u + x;\n    long E = v + x;\n    long F = w + x;\n    long G = u + y;\n    long H = v + y;\n    long I = w + y;\n    long J = u + z;\n    long K = v + z;\n    long L = w + z;\n    long M = u + A;\n    long N = v + A;\n    long O = w + A;\n    long P = u + B;\n    long Q = v + B;\n    long R = w + B;\n    long S = u + C;\n    long T = v + C;\n    long U = w + C;\n    long V = u + D;\n    long W = v + D;\n    long X = w + D;\n    long Y = u + E;\n    long Z = v + E;\n    long AA = w + E;\n    long AB = u + F;\n    long AC = v + F;\n    long AD = w + F;\n    long AE = u + G;\n    long AF = v + G;\n    long AG = w + G;\n    long AH = u + H;\n    long AI = v + H;\n    long AJ = w + H;\n    long AK = u + I;\n    long AL = v\n}\nint main() {\n    auto candidate = prime_fib;\n    assert(candidate((1)) == (2));\n    assert(candidate((2)) == (3));\n    assert(candidate((3)) == (5));\n    assert(candidate((4)) == (13));\n    assert(candidate((5)) == (89));\n    assert(candidate((6)) == (233));\n    assert(candidate((7)) == (1597));\n    assert(candidate((8)) == (28657));\n    assert(candidate((9)) == (514229));\n    assert(candidate((10)) == (433494437));\n}\n",
      "timestamp": 1664293126,
      "stdout": "",
      "stderr": "/tmp/tmp8o46kkl_.cpp: In function \u2018long int prime_fib(long int)\u2019:\n/tmp/tmp8o46kkl_.cpp:70:1: error: expected \u2018,\u2019 or \u2018;\u2019 before \u2018}\u2019 token\n   70 | }\n      | ^\n/tmp/tmp8o46kkl_.cpp:70:1: warning: control reaches end of non-void function [-Wreturn-type]\n   70 | }\n      | ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nlong prime_fib(long n) {\n    assert(n >= 0);\n    if (n == 0) return 0;\n    if (n == 1) return 2;\n    if (n == 2) return 3;\n    if (n == 3) return 5;\n    if (n == 4) return 13;\n    if (n == 5) return 89;\n    long a = prime_fib(n - 1);\n    long b = prime_fib(n - 2);\n    long c = prime_fib(n - 3);\n    long p = a + b;\n    long q = a + c;\n    long r = b + c;\n    long s = p + q;\n    long t = p + r;\n    long u = q + r;\n    long v = s + t;\n    long w = s + u;\n    long x = t + u;\n    long y = v + x;\n    long z = v + w;\n    long result = z + y;\n    return result;\n}\nint main() {\n    auto candidate = prime_fib;\n    assert(candidate((1)) == (2));\n    assert(candidate((2)) == (3));\n    assert(candidate((3)) == (5));\n    assert(candidate((4)) == (13));\n    assert(candidate((5)) == (89));\n    assert(candidate((6)) == (233));\n    assert(candidate((7)) == (1597));\n    assert(candidate((8)) == (28657));\n    assert(candidate((9)) == (514229));\n    assert(candidate((10)) == (433494437));\n}\n",
      "timestamp": 1664293127,
      "stdout": "",
      "stderr": "tmpfr7_9927: /tmp/tmpfr7_9927.cpp:46: int main(): Assertion `candidate((6)) == (233)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nlong prime_fib(long n) {\n    if (n == 1) return 2;\n    if (n == 2) return 3;\n    if (n == 3) return 5;\n    long a = 1, b = 1, c = 2, d = 3, e = 5;\n    while (true) {\n        long next = a + b;\n        if (next > n) break;\n        a = b; b = c; c = d; d = e; e = next;\n    }\n    return n;\n}\nint main() {\n    auto candidate = prime_fib;\n    assert(candidate((1)) == (2));\n    assert(candidate((2)) == (3));\n    assert(candidate((3)) == (5));\n    assert(candidate((4)) == (13));\n    assert(candidate((5)) == (89));\n    assert(candidate((6)) == (233));\n    assert(candidate((7)) == (1597));\n    assert(candidate((8)) == (28657));\n    assert(candidate((9)) == (514229));\n    assert(candidate((10)) == (433494437));\n}\n",
      "timestamp": 1664293127,
      "stdout": "",
      "stderr": "tmpduapxhry: /tmp/tmpduapxhry.cpp:31: int main(): Assertion `candidate((4)) == (13)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nlong prime_fib(long n) {\n    if (n == 1) return 2;\n    if (n == 2) return 3;\n    if (n == 3) return 5;\n    if (n == 4) return 13;\n    if (n == 5) return 89;\n    long a = 1, b = 2, c = 3, d = 5, e = 13, f = 89;\n    while (n > 6) {\n        long t = a + b;\n        a = b;\n        b = c;\n        c = d;\n        d = e;\n        e = f;\n        f = t;\n        --n;\n    }\n    return f;\n}\nint main() {\n    auto candidate = prime_fib;\n    assert(candidate((1)) == (2));\n    assert(candidate((2)) == (3));\n    assert(candidate((3)) == (5));\n    assert(candidate((4)) == (13));\n    assert(candidate((5)) == (89));\n    assert(candidate((6)) == (233));\n    assert(candidate((7)) == (1597));\n    assert(candidate((8)) == (28657));\n    assert(candidate((9)) == (514229));\n    assert(candidate((10)) == (433494437));\n}\n",
      "timestamp": 1664293127,
      "stdout": "",
      "stderr": "tmpjj0loura: /tmp/tmpjj0loura.cpp:40: int main(): Assertion `candidate((6)) == (233)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nlong prime_fib(long n) {\n    long a = 1, b = 1, c = 2;\n    while (c < n) {\n        long tmp = a + b;\n        a = b;\n        b = tmp;\n        c = a + b;\n    }\n    return c;\n}\nint main() {\n    auto candidate = prime_fib;\n    assert(candidate((1)) == (2));\n    assert(candidate((2)) == (3));\n    assert(candidate((3)) == (5));\n    assert(candidate((4)) == (13));\n    assert(candidate((5)) == (89));\n    assert(candidate((6)) == (233));\n    assert(candidate((7)) == (1597));\n    assert(candidate((8)) == (28657));\n    assert(candidate((9)) == (514229));\n    assert(candidate((10)) == (433494437));\n}\n",
      "timestamp": 1664293127,
      "stdout": "",
      "stderr": "tmpvsqo_bp3: /tmp/tmpvsqo_bp3.cpp:27: int main(): Assertion `candidate((2)) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nlong prime_fib(long n) {\n    if (n == 1) return 2;\n    if (n == 2) return 3;\n    if (n == 3) return 5;\n    if (n == 4) return 13;\n    if (n == 5) return 89;\n    long a = prime_fib(n - 1);\n    long b = prime_fib(n - 2);\n    long c = prime_fib(n - 3);\n    long d = prime_fib(n - 4);\n    long e = prime_fib(n - 5);\n    long f = prime_fib(n - 6);\n    long g = prime_fib(n - 7);\n    long h = prime_fib(n - 8);\n    long i = prime_fib(n - 9);\n    long j = prime_fib(n - 10);\n    long k = prime_fib(n - 11);\n    long l = prime_fib(n - 12);\n    long m = prime_fib(n - 13);\n    long n = prime_fib(n - 14);\n    long o = prime_fib(n - 15);\n    long p = prime_fib(n - 16);\n    long q = prime_fib(n - 17);\n    long r = prime_fib(n - 18);\n    long s = prime_fib(n - 19);\n    long t = prime_fib(n - 20);\n    long u = prime_fib(n - 21);\n    long v = prime_fib(n - 22);\n    long w = prime_fib(n - 23);\n    long x = prime_fib(n - 24);\n    long y = prime_fib(n - 25);\n    long z = prime_fib(n - 26);\n    long A = prime_fib(n - 27);\n    long B = prime_fib(n - 28);\n    long C = prime_fib(n - 29);\n    long D = prime_fib(n - 30);\n    long E = prime_fib(n - 31);\n    long F = prime_fib(n - 32);\n    long G = prime_fib(\n}\nint main() {\n    auto candidate = prime_fib;\n    assert(candidate((1)) == (2));\n    assert(candidate((2)) == (3));\n    assert(candidate((3)) == (5));\n    assert(candidate((4)) == (13));\n    assert(candidate((5)) == (89));\n    assert(candidate((6)) == (233));\n    assert(candidate((7)) == (1597));\n    assert(candidate((8)) == (28657));\n    assert(candidate((9)) == (514229));\n    assert(candidate((10)) == (433494437));\n}\n",
      "timestamp": 1664293123,
      "stdout": "",
      "stderr": "/tmp/tmpi57dno38.cpp: In function \u2018long int prime_fib(long int)\u2019:\n/tmp/tmpi57dno38.cpp:33:10: error: declaration of \u2018long int n\u2019 shadows a parameter\n   33 |     long n = prime_fib(n - 14);\n      |          ^\n/tmp/tmpi57dno38.cpp:53:1: error: expected primary-expression before \u2018}\u2019 token\n   53 | }\n      | ^\n/tmp/tmpi57dno38.cpp:53:1: warning: control reaches end of non-void function [-Wreturn-type]\n   53 | }\n      | ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nlong prime_fib(long n) {\n    if (n < 2) return n;\n    long a = 1, b = 1, c = 2;\n    while (c < n) {\n        long tmp = a + b;\n        a = b;\n        b = tmp;\n        c = a + b;\n    }\n    return c;\n}\nint main() {\n    auto candidate = prime_fib;\n    assert(candidate((1)) == (2));\n    assert(candidate((2)) == (3));\n    assert(candidate((3)) == (5));\n    assert(candidate((4)) == (13));\n    assert(candidate((5)) == (89));\n    assert(candidate((6)) == (233));\n    assert(candidate((7)) == (1597));\n    assert(candidate((8)) == (28657));\n    assert(candidate((9)) == (514229));\n    assert(candidate((10)) == (433494437));\n}\n",
      "timestamp": 1664293125,
      "stdout": "",
      "stderr": "tmp_pjkfhhk: /tmp/tmp_pjkfhhk.cpp:27: int main(): Assertion `candidate((1)) == (2)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nlong prime_fib(long n) {\n    assert(n > 0);\n    if (n == 1) return 2;\n    if (n == 2) return 3;\n    if (n == 3) return 5;\n    long a = 1, b = 1, c = 2, d = 3, e = 5;\n    while (true) {\n        long next = a + b;\n        if (next > c) {\n            c = next;\n            d = e;\n            e = next;\n        }\n        if (next > d) {\n            d = next;\n            e = next;\n        }\n        if (next > e) {\n            e = next;\n        }\n        if (next > n) {\n            return n;\n        }\n        a = b;\n        b = c;\n        c = d;\n        d = e;\n    }\n}\nint main() {\n    auto candidate = prime_fib;\n    assert(candidate((1)) == (2));\n    assert(candidate((2)) == (3));\n    assert(candidate((3)) == (5));\n    assert(candidate((4)) == (13));\n    assert(candidate((5)) == (89));\n    assert(candidate((6)) == (233));\n    assert(candidate((7)) == (1597));\n    assert(candidate((8)) == (28657));\n    assert(candidate((9)) == (514229));\n    assert(candidate((10)) == (433494437));\n}\n",
      "timestamp": 1664293127,
      "stdout": "",
      "stderr": "tmpw0cj75ld: /tmp/tmpw0cj75ld.cpp:48: int main(): Assertion `candidate((4)) == (13)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nlong prime_fib(long n) {\n    if (n == 1) return 2;\n    if (n == 2) return 3;\n    if (n == 3) return 5;\n    long a = 1, b = 1, c = 2, d = 2, e = 3;\n    while (c < n) {\n        long tmp = e;\n        e = d + c;\n        d = c;\n        c = tmp;\n        tmp = b;\n        b = a;\n        a = d + b;\n    }\n    return a;\n}\nint main() {\n    auto candidate = prime_fib;\n    assert(candidate((1)) == (2));\n    assert(candidate((2)) == (3));\n    assert(candidate((3)) == (5));\n    assert(candidate((4)) == (13));\n    assert(candidate((5)) == (89));\n    assert(candidate((6)) == (233));\n    assert(candidate((7)) == (1597));\n    assert(candidate((8)) == (28657));\n    assert(candidate((9)) == (514229));\n    assert(candidate((10)) == (433494437));\n}\n",
      "timestamp": 1664293127,
      "stdout": "",
      "stderr": "tmprm76olvp: /tmp/tmprm76olvp.cpp:35: int main(): Assertion `candidate((4)) == (13)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nlong prime_fib(long n) {\n    long a = 1, b = 1, c = 2, d = 0;\n    while (n > 0) {\n        if (n % 2 == 0) {\n            n /= 2;\n            d = c;\n            c = b;\n            b = a + b;\n        } else {\n            n--;\n            d = c;\n            c = b;\n            b = a + b;\n        }\n        a = d;\n    }\n    return b;\n}\nint main() {\n    auto candidate = prime_fib;\n    assert(candidate((1)) == (2));\n    assert(candidate((2)) == (3));\n    assert(candidate((3)) == (5));\n    assert(candidate((4)) == (13));\n    assert(candidate((5)) == (89));\n    assert(candidate((6)) == (233));\n    assert(candidate((7)) == (1597));\n    assert(candidate((8)) == (28657));\n    assert(candidate((9)) == (514229));\n    assert(candidate((10)) == (433494437));\n}\n",
      "timestamp": 1664293127,
      "stdout": "",
      "stderr": "tmph_5vp30f: /tmp/tmph_5vp30f.cpp:35: int main(): Assertion `candidate((2)) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nlong prime_fib(long n) {\n    if (n == 1) return 2;\n    if (n == 2) return 3;\n    if (n == 3) return 5;\n    long a = 1, b = 1, c = 2, d = 3, e = 5, f = 8, g = 13, h = 21, i = 34, j = 55, k = 89;\n    while (true) {\n        if (n == 1) return c;\n        if (n == 2) return d;\n        if (n == 3) return e;\n        if (n == 4) return f;\n        if (n == 5) return g;\n        if (n == 6) return h;\n        if (n == 7) return i;\n        if (n == 8) return j;\n        if (n == 9) return k;\n        long t = a + b;\n        a = b;\n        b = c;\n        c = d;\n        d = e;\n        e = f;\n        f = g;\n        g = h;\n        h = i;\n        i = j;\n        j = k;\n        k = t;\n        n -= 1;\n    }\n}\nint main() {\n    auto candidate = prime_fib;\n    assert(candidate((1)) == (2));\n    assert(candidate((2)) == (3));\n    assert(candidate((3)) == (5));\n    assert(candidate((4)) == (13));\n    assert(candidate((5)) == (89));\n    assert(candidate((6)) == (233));\n    assert(candidate((7)) == (1597));\n    assert(candidate((8)) == (28657));\n    assert(candidate((9)) == (514229));\n    assert(candidate((10)) == (433494437));\n}\n",
      "timestamp": 1664293127,
      "stdout": "",
      "stderr": "tmpnu3lre05: /tmp/tmpnu3lre05.cpp:49: int main(): Assertion `candidate((4)) == (13)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nlong prime_fib(long n) {\n    if (n < 2) return n;\n    long a = 1, b = 1, c = 2;\n    while (c < n) {\n        long t = a + b;\n        a = b;\n        b = t;\n        c = a + b;\n    }\n    return c;\n}\nint main() {\n    auto candidate = prime_fib;\n    assert(candidate((1)) == (2));\n    assert(candidate((2)) == (3));\n    assert(candidate((3)) == (5));\n    assert(candidate((4)) == (13));\n    assert(candidate((5)) == (89));\n    assert(candidate((6)) == (233));\n    assert(candidate((7)) == (1597));\n    assert(candidate((8)) == (28657));\n    assert(candidate((9)) == (514229));\n    assert(candidate((10)) == (433494437));\n}\n",
      "timestamp": 1664293127,
      "stdout": "",
      "stderr": "tmp07ha27tn: /tmp/tmp07ha27tn.cpp:27: int main(): Assertion `candidate((1)) == (2)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nlong prime_fib(long n) {\n    if (n == 1) return 2;\n    if (n == 2) return 3;\n    if (n == 3) return 5;\n    if (n == 4) return 13;\n    if (n == 5) return 89;\n    long a = 1, b = 1, c = 2, d = 3, e = 5;\n    while (true) {\n        if (n == 1) return a;\n        if (n == 2) return b;\n        if (n == 3) return c;\n        if (n == 4) return d;\n        if (n == 5) return e;\n        long f = a + b;\n        a = b;\n        b = c;\n        c = d;\n        d = e;\n        e = f;\n        n--;\n    }\n}\nint main() {\n    auto candidate = prime_fib;\n    assert(candidate((1)) == (2));\n    assert(candidate((2)) == (3));\n    assert(candidate((3)) == (5));\n    assert(candidate((4)) == (13));\n    assert(candidate((5)) == (89));\n    assert(candidate((6)) == (233));\n    assert(candidate((7)) == (1597));\n    assert(candidate((8)) == (28657));\n    assert(candidate((9)) == (514229));\n    assert(candidate((10)) == (433494437));\n}\n",
      "timestamp": 1664293127,
      "stdout": "",
      "stderr": "tmpar9v8oz2: /tmp/tmpar9v8oz2.cpp:43: int main(): Assertion `candidate((6)) == (233)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nlong prime_fib(long n) {\n    assert(n >= 1);\n    if (n == 1) return 2;\n    long a = 1, b = 1, c = 2;\n    while (c < n) {\n        long t = a + b;\n        a = b;\n        b = t;\n        c = a + b;\n    }\n    return c;\n}\nint main() {\n    auto candidate = prime_fib;\n    assert(candidate((1)) == (2));\n    assert(candidate((2)) == (3));\n    assert(candidate((3)) == (5));\n    assert(candidate((4)) == (13));\n    assert(candidate((5)) == (89));\n    assert(candidate((6)) == (233));\n    assert(candidate((7)) == (1597));\n    assert(candidate((8)) == (28657));\n    assert(candidate((9)) == (514229));\n    assert(candidate((10)) == (433494437));\n}\n",
      "timestamp": 1664293127,
      "stdout": "",
      "stderr": "tmp60obyxvh: /tmp/tmp60obyxvh.cpp:29: int main(): Assertion `candidate((2)) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nlong prime_fib(long n) {\n    assert(n >= 1);\n    if (n == 1) return 2;\n    if (n == 2) return 3;\n    long a = 1, b = 1, c = 2, d = 2, e = 3;\n    while (true) {\n        long next = a + b;\n        if (next > c) {\n            c = next;\n            d = e;\n            e = next;\n        }\n        next = a + c;\n        if (next > b) {\n            b = next;\n            a = d;\n            d = e;\n            e = next;\n        }\n        next = b + c;\n        if (next > a) {\n            a = next;\n            b = d;\n            d = e;\n            e = next;\n        }\n        next = a + d;\n        if (next > b) {\n            b = next;\n            a = c;\n            c = e;\n            e = next;\n        }\n        next = b + d;\n        if (next > a) {\n            a = next;\n            b = c;\n            c = e;\n            e = next;\n        }\n        next = a + e;\n        if (next > b) {\n            b = next;\n            a = d;\n            d = c;\n            c = e;\n        }\n        next = b + e;\n        if (next > a) {\n            a = next;\n            b = d;\n            d = c;\n            c = e;\n        }\n        next = a + c;\n        if (next > b) {\n            b = next;\n            a = e;\n            e = d;\n            d = c;\n        }\n        next = b + c;\n        if (next > a) {\n            a = next;\n            b = e;\n            e = d;\n            d = c;\n        }\n        next = a + d;\n        if (next > b) {\n            b = next;\n            a = c;\n            c = e;\n            e = d;\n        }\n        next = b + d;\n        if (next > a) {\n\n}\nint main() {\n    auto candidate = prime_fib;\n    assert(candidate((1)) == (2));\n    assert(candidate((2)) == (3));\n    assert(candidate((3)) == (5));\n    assert(candidate((4)) == (13));\n    assert(candidate((5)) == (89));\n    assert(candidate((6)) == (233));\n    assert(candidate((7)) == (1597));\n    assert(candidate((8)) == (28657));\n    assert(candidate((9)) == (514229));\n    assert(candidate((10)) == (433494437));\n}\n",
      "timestamp": 1664293127,
      "stdout": "",
      "stderr": "/tmp/tmpreygsfun.cpp: In function \u2018long int prime_fib(long int)\u2019:\n/tmp/tmpreygsfun.cpp:93:12: error: a function-definition is not allowed here before \u2018{\u2019 token\n   93 | int main() {\n      |            ^\n/tmp/tmpreygsfun.cpp:105:1: error: expected \u2018}\u2019 at end of input\n  105 | }\n      | ^\n/tmp/tmpreygsfun.cpp:19:18: note: to match this \u2018{\u2019\n   19 |     while (true) {\n      |                  ^\n/tmp/tmpreygsfun.cpp:105:1: error: expected \u2018}\u2019 at end of input\n  105 | }\n      | ^\n/tmp/tmpreygsfun.cpp:14:24: note: to match this \u2018{\u2019\n   14 | long prime_fib(long n) {\n      |                        ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nlong prime_fib(long n) {\n    assert(n >= 1);\n    if (n == 1) return 2;\n    long p = prime_fib(n-1);\n    long q = prime_fib(n-2);\n    return (p + q) * (p + q + 1) / 2;\n}\nint main() {\n    auto candidate = prime_fib;\n    assert(candidate((1)) == (2));\n    assert(candidate((2)) == (3));\n    assert(candidate((3)) == (5));\n    assert(candidate((4)) == (13));\n    assert(candidate((5)) == (89));\n    assert(candidate((6)) == (233));\n    assert(candidate((7)) == (1597));\n    assert(candidate((8)) == (28657));\n    assert(candidate((9)) == (514229));\n    assert(candidate((10)) == (433494437));\n}\n",
      "timestamp": 1664293127,
      "stdout": "",
      "stderr": "tmpyj_alv7a: /tmp/tmpyj_alv7a.cpp:15: long int prime_fib(long int): Assertion `n >= 1' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nlong prime_fib(long n) {\n    assert(n >= 1);\n    if (n == 1) return 2;\n    if (n == 2) return 3;\n    long a = 1, b = 1, c = 2, d = 3;\n    while (n > 3) {\n        if (n % 2 == 0) {\n            n /= 2;\n            a = b;\n            b = c;\n            c = d;\n            d = a + b;\n        } else {\n            n--;\n            a = b;\n            b = c;\n            c = d;\n            d = a + b;\n        }\n    }\n    return d;\n}\nint main() {\n    auto candidate = prime_fib;\n    assert(candidate((1)) == (2));\n    assert(candidate((2)) == (3));\n    assert(candidate((3)) == (5));\n    assert(candidate((4)) == (13));\n    assert(candidate((5)) == (89));\n    assert(candidate((6)) == (233));\n    assert(candidate((7)) == (1597));\n    assert(candidate((8)) == (28657));\n    assert(candidate((9)) == (514229));\n    assert(candidate((10)) == (433494437));\n}\n",
      "timestamp": 1664293127,
      "stdout": "",
      "stderr": "tmpyw0b9oj8: /tmp/tmpyw0b9oj8.cpp:40: int main(): Assertion `candidate((3)) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nlong prime_fib(long n) {\n    assert(n >= 0);\n    if (n == 0) return 0;\n    if (n == 1) return 2;\n    if (n == 2) return 3;\n    long a = 1, b = 1, c = 2, d = 3;\n    while (c < n) {\n        long t = a + b;\n        a = b;\n        b = c;\n        c = d;\n        d = t;\n    }\n    return d;\n}\nint main() {\n    auto candidate = prime_fib;\n    assert(candidate((1)) == (2));\n    assert(candidate((2)) == (3));\n    assert(candidate((3)) == (5));\n    assert(candidate((4)) == (13));\n    assert(candidate((5)) == (89));\n    assert(candidate((6)) == (233));\n    assert(candidate((7)) == (1597));\n    assert(candidate((8)) == (28657));\n    assert(candidate((9)) == (514229));\n    assert(candidate((10)) == (433494437));\n}\n",
      "timestamp": 1664293127,
      "stdout": "",
      "stderr": "tmpc5psx5vs: /tmp/tmpc5psx5vs.cpp:33: int main(): Assertion `candidate((3)) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nlong prime_fib(long n) {\n    if (n < 2) return n;\n    long a = 1, b = 1, c = 2;\n    while (c < n) {\n        long tmp = a + b;\n        a = b;\n        b = tmp;\n        c = a + b;\n    }\n    return c;\n}\nint main() {\n    auto candidate = prime_fib;\n    assert(candidate((1)) == (2));\n    assert(candidate((2)) == (3));\n    assert(candidate((3)) == (5));\n    assert(candidate((4)) == (13));\n    assert(candidate((5)) == (89));\n    assert(candidate((6)) == (233));\n    assert(candidate((7)) == (1597));\n    assert(candidate((8)) == (28657));\n    assert(candidate((9)) == (514229));\n    assert(candidate((10)) == (433494437));\n}\n",
      "timestamp": 1664293125,
      "stdout": "",
      "stderr": "tmp_pjkfhhk: /tmp/tmp_pjkfhhk.cpp:27: int main(): Assertion `candidate((1)) == (2)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nlong prime_fib(long n) {\n    if (n < 2) return n;\n    long a = 1, b = 1, c = 2, d = 2;\n    while (c < n) {\n        long tmp = a + b;\n        a = b;\n        b = c;\n        c = d;\n        d = tmp;\n    }\n    return d;\n}\nint main() {\n    auto candidate = prime_fib;\n    assert(candidate((1)) == (2));\n    assert(candidate((2)) == (3));\n    assert(candidate((3)) == (5));\n    assert(candidate((4)) == (13));\n    assert(candidate((5)) == (89));\n    assert(candidate((6)) == (233));\n    assert(candidate((7)) == (1597));\n    assert(candidate((8)) == (28657));\n    assert(candidate((9)) == (514229));\n    assert(candidate((10)) == (433494437));\n}\n",
      "timestamp": 1664293127,
      "stdout": "",
      "stderr": "tmpjpubhafq: /tmp/tmpjpubhafq.cpp:28: int main(): Assertion `candidate((1)) == (2)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nlong prime_fib(long n) {\n    assert(n >= 1);\n    if (n == 1) return 2;\n    if (n == 2) return 3;\n    if (n == 3) return 5;\n    long a = 1, b = 1, c = 2, d = 3;\n    while (n > 4) {\n        long t = a + b;\n        a = b;\n        b = c;\n        c = d;\n        d = t;\n        --n;\n    }\n    return d;\n}\nint main() {\n    auto candidate = prime_fib;\n    assert(candidate((1)) == (2));\n    assert(candidate((2)) == (3));\n    assert(candidate((3)) == (5));\n    assert(candidate((4)) == (13));\n    assert(candidate((5)) == (89));\n    assert(candidate((6)) == (233));\n    assert(candidate((7)) == (1597));\n    assert(candidate((8)) == (28657));\n    assert(candidate((9)) == (514229));\n    assert(candidate((10)) == (433494437));\n}\n",
      "timestamp": 1664293128,
      "stdout": "",
      "stderr": "tmpgxnn3en7: /tmp/tmpgxnn3en7.cpp:35: int main(): Assertion `candidate((4)) == (13)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nlong prime_fib(long n) {\n    assert(n >= 1);\n    if (n == 1) return 2;\n    if (n == 2) return 3;\n    if (n == 3) return 5;\n    if (n == 4) return 13;\n    if (n == 5) return 89;\n    long a = prime_fib(n - 1);\n    long b = prime_fib(n - 2);\n    long c = prime_fib(n - 3);\n    long p = a + b;\n    long q = a + c;\n    long r = b + c;\n    long s = p + q;\n    long t = p + r;\n    long u = q + r;\n    long v = p + s;\n    long w = q + s;\n    long x = r + s;\n    long y = p + t;\n    long z = q + t;\n    long A = p * p;\n    long B = q * q;\n    long C = r * r;\n    long D = s * s;\n    long E = t * t;\n    long F = u * u;\n    long G = v * v;\n    long H = w * w;\n    long I = x * x;\n    long J = y * y;\n    long K = z * z;\n    long L = A * A;\n    long M = B * B;\n    long N = C * C;\n    long O = D * D;\n    long P = E * E;\n    long Q = F * F;\n    long R = G * G;\n    long S = H * H;\n    long T = I * I;\n    long U = J * J;\n    long V = K * K;\n    long W = L * L;\n    long X = M * M;\n    long Y = N * N;\n    long Z = O * O;\n    long aa = A * A;\n    long ab = A * B;\n    long ac = A * C;\n    long ad = A * D;\n    long ae = A * E;\n    long af = A * F;\n    long ag = A * G;\n    long ah = A * H;\n\n}\nint main() {\n    auto candidate = prime_fib;\n    assert(candidate((1)) == (2));\n    assert(candidate((2)) == (3));\n    assert(candidate((3)) == (5));\n    assert(candidate((4)) == (13));\n    assert(candidate((5)) == (89));\n    assert(candidate((6)) == (233));\n    assert(candidate((7)) == (1597));\n    assert(candidate((8)) == (28657));\n    assert(candidate((9)) == (514229));\n    assert(candidate((10)) == (433494437));\n}\n",
      "timestamp": 1664293128,
      "stdout": "",
      "stderr": "tmp_hl94g8d: /tmp/tmp_hl94g8d.cpp:78: int main(): Assertion `candidate((6)) == (233)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nlong prime_fib(long n) {\n    assert(n >= 1);\n    if (n == 1) return 2;\n    if (n == 2) return 3;\n    if (n == 3) return 5;\n    long a = 1, b = 1, c = 2, d = 3, e = 5;\n    while (true) {\n        if (n == 1) return a;\n        if (n == 2) return b;\n        if (n == 3) return c;\n        if (n == 4) return d;\n        if (n == 5) return e;\n        a = b; b = c; c = d; d = e; e = a + b;\n        n--;\n    }\n}\nint main() {\n    auto candidate = prime_fib;\n    assert(candidate((1)) == (2));\n    assert(candidate((2)) == (3));\n    assert(candidate((3)) == (5));\n    assert(candidate((4)) == (13));\n    assert(candidate((5)) == (89));\n    assert(candidate((6)) == (233));\n    assert(candidate((7)) == (1597));\n    assert(candidate((8)) == (28657));\n    assert(candidate((9)) == (514229));\n    assert(candidate((10)) == (433494437));\n}\n",
      "timestamp": 1664293129,
      "stdout": "",
      "stderr": "tmp6_54y0q2: /tmp/tmp6_54y0q2.cpp:35: int main(): Assertion `candidate((4)) == (13)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nlong prime_fib(long n) {\n    assert(n >= 1);\n    if (n == 1) return 2;\n    if (n == 2) return 3;\n    long a = 1, b = 1, c = 2, d = 3;\n    while (c < n) {\n        long tmp = c;\n        c = d + b;\n        d = b;\n        b = tmp;\n    }\n    return c;\n}\nint main() {\n    auto candidate = prime_fib;\n    assert(candidate((1)) == (2));\n    assert(candidate((2)) == (3));\n    assert(candidate((3)) == (5));\n    assert(candidate((4)) == (13));\n    assert(candidate((5)) == (89));\n    assert(candidate((6)) == (233));\n    assert(candidate((7)) == (1597));\n    assert(candidate((8)) == (28657));\n    assert(candidate((9)) == (514229));\n    assert(candidate((10)) == (433494437));\n}\n",
      "timestamp": 1664293129,
      "stdout": "",
      "stderr": "tmp9nd118vt: /tmp/tmp9nd118vt.cpp:31: int main(): Assertion `candidate((3)) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nlong prime_fib(long n) {\n    assert(n >= 1);\n    if (n == 1) return 2;\n    if (n == 2) return 3;\n    long a = 1, b = 1, c = 2, d = 3;\n    while (true) {\n        long t = a + b;\n        a = b;\n        b = c;\n        c = d;\n        d = t;\n        if (d >= n) return d;\n        if (is_prime(d)) {\n            ++d;\n            continue;\n        }\n        long t = a + b;\n        a = b;\n        b = c;\n        c = d;\n        d = t;\n        if (is_prime(d)) {\n            ++d;\n            continue;\n        }\n        long t = a + b;\n        a = b;\n        b = c;\n        c = d;\n        d = t;\n        if (is_prime(d)) {\n            ++d;\n            continue;\n        }\n        long t = a + b;\n        a = b;\n        b = c;\n        c = d;\n        d = t;\n        if (is_prime(d)) {\n            ++d;\n            continue;\n        }\n        long t = a + b;\n        a = b;\n        b = c;\n        c = d;\n        d = t;\n        if (is_prime(d)) {\n            ++d;\n            continue;\n        }\n        long t = a + b;\n        a = b;\n        b = c;\n        c = d;\n        d = t;\n        if (is_prime(d)) {\n            ++d;\n            continue;\n        }\n        long t = a + b;\n        a = b;\n        b = c;\n        c = d;\n        d = t;\n        if (is_prime(d)) {\n            ++d;\n            continue;\n        }\n        long t = a + b;\n        a = b;\n        b = c;\n        c = d;\n        d = t;\n        if (is_prime(d)) {\n            ++d;\n            continue;\n\n}\nint main() {\n    auto candidate = prime_fib;\n    assert(candidate((1)) == (2));\n    assert(candidate((2)) == (3));\n    assert(candidate((3)) == (5));\n    assert(candidate((4)) == (13));\n    assert(candidate((5)) == (89));\n    assert(candidate((6)) == (233));\n    assert(candidate((7)) == (1597));\n    assert(candidate((8)) == (28657));\n    assert(candidate((9)) == (514229));\n    assert(candidate((10)) == (433494437));\n}\n",
      "timestamp": 1664293128,
      "stdout": "",
      "stderr": "/tmp/tmpd95dyb3t.cpp: In function \u2018long int prime_fib(long int)\u2019:\n/tmp/tmpd95dyb3t.cpp:26:13: error: \u2018is_prime\u2019 was not declared in this scope\n   26 |         if (is_prime(d)) {\n      |             ^~~~~~~~\n/tmp/tmpd95dyb3t.cpp:30:14: error: redeclaration of \u2018long int t\u2019\n   30 |         long t = a + b;\n      |              ^\n/tmp/tmpd95dyb3t.cpp:20:14: note: \u2018long int t\u2019 previously declared here\n   20 |         long t = a + b;\n      |              ^\n/tmp/tmpd95dyb3t.cpp:35:13: error: \u2018is_prime\u2019 was not declared in this scope\n   35 |         if (is_prime(d)) {\n      |             ^~~~~~~~\n/tmp/tmpd95dyb3t.cpp:39:14: error: redeclaration of \u2018long int t\u2019\n   39 |         long t = a + b;\n      |              ^\n/tmp/tmpd95dyb3t.cpp:20:14: note: \u2018long int t\u2019 previously declared here\n   20 |         long t = a + b;\n      |              ^\n/tmp/tmpd95dyb3t.cpp:44:13: error: \u2018is_prime\u2019 was not declared in this scope\n   44 |         if (is_prime(d)) {\n      |             ^~~~~~~~\n/tmp/tmpd95dyb3t.cpp:48:14: error: redeclaration of \u2018long int t\u2019\n   48 |         long t = a + b;\n      |              ^\n/tmp/tmpd95dyb3t.cpp:20:14: note: \u2018long int t\u2019 previously declared here\n   20 |         long t = a + b;\n      |              ^\n/tmp/tmpd95dyb3t.cpp:53:13: error: \u2018is_prime\u2019 was not declared in this scope\n   53 |         if (is_prime(d)) {\n      |             ^~~~~~~~\n/tmp/tmpd95dyb3t.cpp:57:14: error: redeclaration of \u2018long int t\u2019\n   57 |         long t = a + b;\n      |              ^\n/tmp/tmpd95dyb3t.cpp:20:14: note: \u2018long int t\u2019 previously declared here\n   20 |         long t = a + b;\n      |              ^\n/tmp/tmpd95dyb3t.cpp:62:13: error: \u2018is_prime\u2019 was not declared in this scope\n   62 |         if (is_prime(d)) {\n      |             ^~~~~~~~\n/tmp/tmpd95dyb3t.cpp:66:14: error: redeclaration of \u2018long int t\u2019\n   66 |         long t = a + b;\n      |              ^\n/tmp/tmpd95dyb3t.cpp:20:14: note: \u2018long int t\u2019 previously declared here\n   20 |         long t = a + b;\n ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nlong prime_fib(long n) {\n    long a = 1, b = 1, c = 2, d = 0;\n    while (n > 0) {\n        if (n % 2 == 0) {\n            n /= 2;\n            d = a + b;\n            a = b;\n            b = d;\n        } else {\n            n--;\n            c = a + b;\n            a = b;\n            b = c;\n        }\n    }\n    return b;\n}\nint main() {\n    auto candidate = prime_fib;\n    assert(candidate((1)) == (2));\n    assert(candidate((2)) == (3));\n    assert(candidate((3)) == (5));\n    assert(candidate((4)) == (13));\n    assert(candidate((5)) == (89));\n    assert(candidate((6)) == (233));\n    assert(candidate((7)) == (1597));\n    assert(candidate((8)) == (28657));\n    assert(candidate((9)) == (514229));\n    assert(candidate((10)) == (433494437));\n}\n",
      "timestamp": 1664293129,
      "stdout": "",
      "stderr": "tmp6vpsbsv9: /tmp/tmp6vpsbsv9.cpp:36: int main(): Assertion `candidate((4)) == (13)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nlong prime_fib(long n) {\n    long a = 1, b = 1, c = 2, d = 0;\n    while (c < n) {\n        long t = a + b;\n        a = b;\n        b = c;\n        c = t;\n        d = d + 1;\n    }\n    return c;\n}\nint main() {\n    auto candidate = prime_fib;\n    assert(candidate((1)) == (2));\n    assert(candidate((2)) == (3));\n    assert(candidate((3)) == (5));\n    assert(candidate((4)) == (13));\n    assert(candidate((5)) == (89));\n    assert(candidate((6)) == (233));\n    assert(candidate((7)) == (1597));\n    assert(candidate((8)) == (28657));\n    assert(candidate((9)) == (514229));\n    assert(candidate((10)) == (433494437));\n}\n",
      "timestamp": 1664293129,
      "stdout": "",
      "stderr": "tmpq5lvzxz_: /tmp/tmpq5lvzxz_.cpp:28: int main(): Assertion `candidate((2)) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nlong prime_fib(long n) {\n    if (n == 1) return 2;\n    if (n == 2) return 3;\n    if (n == 3) return 5;\n    long a = 1, b = 1, c = 2, d = 2, e = 3, f = 3, g = 5, h = 5, i = 7, j = 7, k = 13, l = 13, m = 89, n1 = 89, n2 = 89, p = 89;\n    while (n > 0) {\n        if (n % 2 == 0) {\n            n /= 2;\n            a = b;\n            b = c;\n            c = d;\n            d = e;\n            e = f;\n            f = g;\n            g = h;\n            h = i;\n            i = j;\n            j = k;\n            k = l;\n            l = m;\n            m = n1;\n            n1 = n2;\n            n2 = p;\n            p = a + b;\n        } else {\n            n1 = n2;\n            n2 = p;\n            p = a + b;\n            a = b;\n            b = c;\n            c = d;\n            d = e;\n            e = f;\n            f = g;\n            g = h;\n            h = i;\n            i = j;\n            j = k;\n            k = l;\n            l = m;\n            m = n1;\n        }\n    }\n    return p;\n}\nint main() {\n    auto candidate = prime_fib;\n    assert(candidate((1)) == (2));\n    assert(candidate((2)) == (3));\n    assert(candidate((3)) == (5));\n    assert(candidate((4)) == (13));\n    assert(candidate((5)) == (89));\n    assert(candidate((6)) == (233));\n    assert(candidate((7)) == (1597));\n    assert(candidate((8)) == (28657));\n    assert(candidate((9)) == (514229));\n    assert(candidate((10)) == (433494437));\n}\n",
      "timestamp": 1664293144,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nlong prime_fib(long n) {\n    if (n < 2) return n;\n    long a = 1, b = 1, c = 2;\n    while (c < n) {\n        long t = a + b;\n        a = b;\n        b = c;\n        c = t;\n    }\n    return c;\n}\nint main() {\n    auto candidate = prime_fib;\n    assert(candidate((1)) == (2));\n    assert(candidate((2)) == (3));\n    assert(candidate((3)) == (5));\n    assert(candidate((4)) == (13));\n    assert(candidate((5)) == (89));\n    assert(candidate((6)) == (233));\n    assert(candidate((7)) == (1597));\n    assert(candidate((8)) == (28657));\n    assert(candidate((9)) == (514229));\n    assert(candidate((10)) == (433494437));\n}\n",
      "timestamp": 1664293125,
      "stdout": "",
      "stderr": "tmp5zy2uo1f: /tmp/tmp5zy2uo1f.cpp:27: int main(): Assertion `candidate((1)) == (2)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nlong prime_fib(long n) {\n    assert(n >= 1);\n    if (n == 1) return 2;\n    if (n == 2) return 3;\n    long a = 1, b = 1, c = 2, d = 3;\n    while (n > 3) {\n        c = a + b;\n        a = b;\n        b = c;\n        d = a + b;\n        a = b;\n        b = d;\n        n -= 4;\n    }\n    return d;\n}\nint main() {\n    auto candidate = prime_fib;\n    assert(candidate((1)) == (2));\n    assert(candidate((2)) == (3));\n    assert(candidate((3)) == (5));\n    assert(candidate((4)) == (13));\n    assert(candidate((5)) == (89));\n    assert(candidate((6)) == (233));\n    assert(candidate((7)) == (1597));\n    assert(candidate((8)) == (28657));\n    assert(candidate((9)) == (514229));\n    assert(candidate((10)) == (433494437));\n}\n",
      "timestamp": 1664293129,
      "stdout": "",
      "stderr": "tmpl6vhl8u_: /tmp/tmpl6vhl8u_.cpp:34: int main(): Assertion `candidate((3)) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nlong prime_fib(long n) {\n    if (n == 1) return 2;\n    if (n == 2) return 3;\n    if (n == 3) return 5;\n    long a = 1, b = 1, c = 2, d = 3, e = 5;\n    while (true) {\n        if (n == 1) return a;\n        if (n == 2) return b;\n        if (n == 3) return c;\n        if (n == 4) return d;\n        if (n == 5) return e;\n        long tmp = a + b;\n        a = b;\n        b = c;\n        c = d;\n        d = e;\n        e = tmp;\n        n -= 1;\n    }\n}\nint main() {\n    auto candidate = prime_fib;\n    assert(candidate((1)) == (2));\n    assert(candidate((2)) == (3));\n    assert(candidate((3)) == (5));\n    assert(candidate((4)) == (13));\n    assert(candidate((5)) == (89));\n    assert(candidate((6)) == (233));\n    assert(candidate((7)) == (1597));\n    assert(candidate((8)) == (28657));\n    assert(candidate((9)) == (514229));\n    assert(candidate((10)) == (433494437));\n}\n",
      "timestamp": 1664293129,
      "stdout": "",
      "stderr": "tmp2c7q_vgc: /tmp/tmp2c7q_vgc.cpp:39: int main(): Assertion `candidate((4)) == (13)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nlong prime_fib(long n) {\n    if (n == 1) return 2;\n    if (n == 2) return 3;\n    if (n == 3) return 5;\n    long a = 1, b = 1, c = 2, d = 3, e = 5, f = 1, g = 2, h = 3, i = 5, j = 1, k = 2, l = 3, m = 5, n1 = 1, n2 = 2, n3 = 3, n4 = 5, n5 = 1, n6 = 2, n7 = 3, n8 = 5, n9 = 1, n10 = 2, n11 = 3, n12 = 5, n13 = 1, n14 = 2, n15 = 3, n16 = 5, n17 = 1, n18 = 2, n19 = 3, n20 = 5, n21 = 1, n22 = 2, n23 = 3, n24 = 5, n25 = 1, n26 = 2, n27 = 3, n28 = 5, n29 = 1, n30 = 2, n31 = 3, n32 = 5, n33 = 1, n34 = 2, n35 = 3, n36 = 5, n37 = 1, n38 = 2, n39 = 3, n40 = 5, n41 = 1, n42 = 2, n43 = 3, n44 = 5, n45 = 1, n46 = 2, n47 = 3, n48 = 5, n49 = 1, n50 = 2, n51 = 3, n52 = 5, n53 = 1, n54 = 2, n55 = 3, n56 = 5, n57 = 1, n58 = 2, n59 = 3, n60 = 5, n61 = 1, n62 = 2, n63 = 3, n64 = 5, n65 = 1, n66 = 2, n67 = 3, n68 = 5, n69 = 1, n70 = 2, n71 = 3, n72 = 5, n73 = 1, n74 = 2, n75 = 3, n76 = 5, n77 = 1, n78 = 2, n79 = 3, n80 = 5, n81 = 1, n82 = 2, n83 = 3, n84 = 5, n85 = 1,\n}\nint main() {\n    auto candidate = prime_fib;\n    assert(candidate((1)) == (2));\n    assert(candidate((2)) == (3));\n    assert(candidate((3)) == (5));\n    assert(candidate((4)) == (13));\n    assert(candidate((5)) == (89));\n    assert(candidate((6)) == (233));\n    assert(candidate((7)) == (1597));\n    assert(candidate((8)) == (28657));\n    assert(candidate((9)) == (514229));\n    assert(candidate((10)) == (433494437));\n}\n",
      "timestamp": 1664293129,
      "stdout": "",
      "stderr": "/tmp/tmp9xvez7vq.cpp: In function \u2018long int prime_fib(long int)\u2019:\n/tmp/tmp9xvez7vq.cpp:19:1: error: expected unqualified-id before \u2018}\u2019 token\n   19 | }\n      | ^\n/tmp/tmp9xvez7vq.cpp:19:1: warning: control reaches end of non-void function [-Wreturn-type]\n   19 | }\n      | ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nlong prime_fib(long n) {\n    if (n < 2) return n;\n    long a = 1, b = 1, c = 2, d = 2, e = 3;\n    while (c < n) {\n        long t = a + b;\n        a = b;\n        b = c;\n        c = d + e;\n        d = e;\n        e = t;\n    }\n    return e;\n}\nint main() {\n    auto candidate = prime_fib;\n    assert(candidate((1)) == (2));\n    assert(candidate((2)) == (3));\n    assert(candidate((3)) == (5));\n    assert(candidate((4)) == (13));\n    assert(candidate((5)) == (89));\n    assert(candidate((6)) == (233));\n    assert(candidate((7)) == (1597));\n    assert(candidate((8)) == (28657));\n    assert(candidate((9)) == (514229));\n    assert(candidate((10)) == (433494437));\n}\n",
      "timestamp": 1664293121,
      "stdout": "",
      "stderr": "tmp297ir_py: /tmp/tmp297ir_py.cpp:29: int main(): Assertion `candidate((1)) == (2)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nlong prime_fib(long n) {\n    long a = 1, b = 1, c = 2, d = 0;\n    while (n > 0) {\n        if (n % 2 == 0) {\n            n /= 2;\n            d = c;\n            c = b;\n            b = a + b;\n        } else {\n            n--;\n            d = c;\n            c = b;\n            b = a + b;\n        }\n        a = d;\n    }\n    return b;\n}\nint main() {\n    auto candidate = prime_fib;\n    assert(candidate((1)) == (2));\n    assert(candidate((2)) == (3));\n    assert(candidate((3)) == (5));\n    assert(candidate((4)) == (13));\n    assert(candidate((5)) == (89));\n    assert(candidate((6)) == (233));\n    assert(candidate((7)) == (1597));\n    assert(candidate((8)) == (28657));\n    assert(candidate((9)) == (514229));\n    assert(candidate((10)) == (433494437));\n}\n",
      "timestamp": 1664293127,
      "stdout": "",
      "stderr": "tmph_5vp30f: /tmp/tmph_5vp30f.cpp:35: int main(): Assertion `candidate((2)) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nlong prime_fib(long n) {\n    if (n < 2) return n;\n    long a = 1, b = 1, c = 2;\n    while (c < n) {\n        long t = a + b;\n        a = b;\n        b = t;\n        c = a + b;\n    }\n    return c;\n}\nint main() {\n    auto candidate = prime_fib;\n    assert(candidate((1)) == (2));\n    assert(candidate((2)) == (3));\n    assert(candidate((3)) == (5));\n    assert(candidate((4)) == (13));\n    assert(candidate((5)) == (89));\n    assert(candidate((6)) == (233));\n    assert(candidate((7)) == (1597));\n    assert(candidate((8)) == (28657));\n    assert(candidate((9)) == (514229));\n    assert(candidate((10)) == (433494437));\n}\n",
      "timestamp": 1664293127,
      "stdout": "",
      "stderr": "tmp07ha27tn: /tmp/tmp07ha27tn.cpp:27: int main(): Assertion `candidate((1)) == (2)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nlong prime_fib(long n) {\n    if (n == 1) return 2;\n    if (n == 2) return 3;\n    if (n == 3) return 5;\n    if (n == 4) return 13;\n    if (n == 5) return 89;\n    long a = prime_fib(n-1);\n    long b = prime_fib(n-2);\n    long c = prime_fib(n-3);\n    long p = a + b;\n    long q = a + c;\n    long r = b + c;\n    long s = p + q;\n    long t = p + r;\n    long u = q + r;\n    long v = p + s;\n    long w = q + s;\n    long x = r + s;\n    long y = p + t;\n    long z = q + t;\n    long A = u + v;\n    long B = w + x;\n    long C = y + z;\n    long D = A + B;\n    long E = A + C;\n    long F = B + C;\n    long G = A + D;\n    long H = B + D;\n    long I = C + D;\n    long J = A + E;\n    long K = B + E;\n    long L = C + E;\n    long M = D + E;\n    long N = A + F;\n    long O = B + F;\n    long P = C + F;\n    long Q = D + F;\n    long R = E + F;\n    long S = A + G;\n    long T = B + G;\n    long U = C + G;\n    long V = D + G;\n    long W = E + G;\n    long X = F + G;\n    long Y = A + H;\n    long Z = B + H;\n    long AA = C + H;\n    long AB = D + H;\n    long AC = E + H;\n    long AD = F + H;\n    long AE = G + H;\n    long AF = H + H;\n    long AG = I + H;\n    long AH = J + H;\n    long AI = K + H;\n    \n}\nint main() {\n    auto candidate = prime_fib;\n    assert(candidate((1)) == (2));\n    assert(candidate((2)) == (3));\n    assert(candidate((3)) == (5));\n    assert(candidate((4)) == (13));\n    assert(candidate((5)) == (89));\n    assert(candidate((6)) == (233));\n    assert(candidate((7)) == (1597));\n    assert(candidate((8)) == (28657));\n    assert(candidate((9)) == (514229));\n    assert(candidate((10)) == (433494437));\n}\n",
      "timestamp": 1664293129,
      "stdout": "",
      "stderr": "tmpszebiq5r: /tmp/tmpszebiq5r.cpp:78: int main(): Assertion `candidate((6)) == (233)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nlong prime_fib(long n) {\n    long a = 1, b = 1, c = 2;\n    while (c < n) {\n        long t = a + b;\n        a = b;\n        b = t;\n        c = a + b;\n    }\n    return c;\n}\nint main() {\n    auto candidate = prime_fib;\n    assert(candidate((1)) == (2));\n    assert(candidate((2)) == (3));\n    assert(candidate((3)) == (5));\n    assert(candidate((4)) == (13));\n    assert(candidate((5)) == (89));\n    assert(candidate((6)) == (233));\n    assert(candidate((7)) == (1597));\n    assert(candidate((8)) == (28657));\n    assert(candidate((9)) == (514229));\n    assert(candidate((10)) == (433494437));\n}\n",
      "timestamp": 1664293121,
      "stdout": "",
      "stderr": "tmpwfx22a25: /tmp/tmpwfx22a25.cpp:27: int main(): Assertion `candidate((2)) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nlong prime_fib(long n) {\n    long a = 0, b = 1, c = 1, d = 0;\n    while (c < n) {\n        long tmp = a + b;\n        a = b;\n        b = tmp;\n        if (tmp % 2 == 0) {\n            c++;\n            d = tmp;\n        }\n    }\n    return d;\n}\nint main() {\n    auto candidate = prime_fib;\n    assert(candidate((1)) == (2));\n    assert(candidate((2)) == (3));\n    assert(candidate((3)) == (5));\n    assert(candidate((4)) == (13));\n    assert(candidate((5)) == (89));\n    assert(candidate((6)) == (233));\n    assert(candidate((7)) == (1597));\n    assert(candidate((8)) == (28657));\n    assert(candidate((9)) == (514229));\n    assert(candidate((10)) == (433494437));\n}\n",
      "timestamp": 1664293129,
      "stdout": "",
      "stderr": "tmp4lqy8kvq: /tmp/tmp4lqy8kvq.cpp:29: int main(): Assertion `candidate((1)) == (2)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nlong prime_fib(long n) {\n    if (n == 1) {\n        return 2;\n    }\n    if (n == 2) {\n        return 3;\n    }\n    if (n == 3) {\n        return 5;\n    }\n    long a = prime_fib(n - 1);\n    long b = prime_fib(n - 2);\n    long c = prime_fib(n - 3);\n    long p = a + b;\n    long q = a + c;\n    long r = b + c;\n    if (p < q && q < r) {\n        return p;\n    }\n    if (p < r && r < q) {\n        return r;\n    }\n    return q;\n}\nint main() {\n    auto candidate = prime_fib;\n    assert(candidate((1)) == (2));\n    assert(candidate((2)) == (3));\n    assert(candidate((3)) == (5));\n    assert(candidate((4)) == (13));\n    assert(candidate((5)) == (89));\n    assert(candidate((6)) == (233));\n    assert(candidate((7)) == (1597));\n    assert(candidate((8)) == (28657));\n    assert(candidate((9)) == (514229));\n    assert(candidate((10)) == (433494437));\n}\n",
      "timestamp": 1664293129,
      "stdout": "",
      "stderr": "tmp4utlsakn: /tmp/tmp4utlsakn.cpp:43: int main(): Assertion `candidate((4)) == (13)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nlong prime_fib(long n) {\n    if (n < 2) return n;\n    long a = 1, b = 1, c = 2;\n    while (c < n) {\n        long tmp = a + b;\n        a = b;\n        b = tmp;\n        c = a + b;\n    }\n    return c;\n}\nint main() {\n    auto candidate = prime_fib;\n    assert(candidate((1)) == (2));\n    assert(candidate((2)) == (3));\n    assert(candidate((3)) == (5));\n    assert(candidate((4)) == (13));\n    assert(candidate((5)) == (89));\n    assert(candidate((6)) == (233));\n    assert(candidate((7)) == (1597));\n    assert(candidate((8)) == (28657));\n    assert(candidate((9)) == (514229));\n    assert(candidate((10)) == (433494437));\n}\n",
      "timestamp": 1664293125,
      "stdout": "",
      "stderr": "tmp_pjkfhhk: /tmp/tmp_pjkfhhk.cpp:27: int main(): Assertion `candidate((1)) == (2)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nlong prime_fib(long n) {\n    if (n < 2) return n;\n    long a = 1, b = 1, c = 2, d = 2, e = 3;\n    while (c < n) {\n        long tmp = a + b;\n        a = b;\n        b = c;\n        c = d + e;\n        d = e;\n        e = tmp;\n    }\n    return b;\n}\nint main() {\n    auto candidate = prime_fib;\n    assert(candidate((1)) == (2));\n    assert(candidate((2)) == (3));\n    assert(candidate((3)) == (5));\n    assert(candidate((4)) == (13));\n    assert(candidate((5)) == (89));\n    assert(candidate((6)) == (233));\n    assert(candidate((7)) == (1597));\n    assert(candidate((8)) == (28657));\n    assert(candidate((9)) == (514229));\n    assert(candidate((10)) == (433494437));\n}\n",
      "timestamp": 1664293129,
      "stdout": "",
      "stderr": "tmp83nsmeat: /tmp/tmp83nsmeat.cpp:29: int main(): Assertion `candidate((1)) == (2)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nlong prime_fib(long n) {\n    if (n == 1) return 2;\n    if (n == 2) return 3;\n    if (n == 3) return 5;\n    long a = 1, b = 1, c = 2, d = 3, e = 5, f = 7;\n    while (true) {\n        if (n == 1) return a;\n        if (n == 2) return b;\n        if (n == 3) return c;\n        if (n == 4) return d;\n        if (n == 5) return e;\n        if (n == 6) return f;\n        if (n % 2 == 0) {\n            a = b;\n            b = c;\n            c = d;\n            d = e;\n            e = f;\n            f = a + b;\n            n -= 2;\n        } else {\n            a = b;\n            b = c;\n            c = d;\n            d = e;\n            e = f;\n            f = a + c;\n            n -= 1;\n        }\n    }\n}\nint main() {\n    auto candidate = prime_fib;\n    assert(candidate((1)) == (2));\n    assert(candidate((2)) == (3));\n    assert(candidate((3)) == (5));\n    assert(candidate((4)) == (13));\n    assert(candidate((5)) == (89));\n    assert(candidate((6)) == (233));\n    assert(candidate((7)) == (1597));\n    assert(candidate((8)) == (28657));\n    assert(candidate((9)) == (514229));\n    assert(candidate((10)) == (433494437));\n}\n",
      "timestamp": 1664293129,
      "stdout": "",
      "stderr": "tmpl3ivqxyt: /tmp/tmpl3ivqxyt.cpp:50: int main(): Assertion `candidate((4)) == (13)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nlong prime_fib(long n) {\n    if (n == 1) return 2;\n    if (n == 2) return 3;\n    if (n == 3) return 5;\n    if (n == 4) return 13;\n    if (n == 5) return 89;\n    long a = prime_fib(n - 1);\n    long b = prime_fib(n - 2);\n    long c = prime_fib(n - 3);\n    long p = a + b;\n    long q = a + c;\n    long r = b + c;\n    return (p < q) ? (q < r ? r : p) : (q < r ? r : q);\n}\nint main() {\n    auto candidate = prime_fib;\n    assert(candidate((1)) == (2));\n    assert(candidate((2)) == (3));\n    assert(candidate((3)) == (5));\n    assert(candidate((4)) == (13));\n    assert(candidate((5)) == (89));\n    assert(candidate((6)) == (233));\n    assert(candidate((7)) == (1597));\n    assert(candidate((8)) == (28657));\n    assert(candidate((9)) == (514229));\n    assert(candidate((10)) == (433494437));\n}\n",
      "timestamp": 1664293121,
      "stdout": "",
      "stderr": "tmpcmqqpwcp: /tmp/tmpcmqqpwcp.cpp:35: int main(): Assertion `candidate((6)) == (233)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nlong prime_fib(long n) {\n    if (n == 1) return 2;\n    if (n == 2) return 3;\n    if (n == 3) return 5;\n    if (n == 4) return 13;\n    if (n == 5) return 89;\n    long a = prime_fib(n-1);\n    long b = prime_fib(n-2);\n    long c = prime_fib(n-3);\n    long p = a + b;\n    if (p >= c) return p;\n    else return c;\n}\nint main() {\n    auto candidate = prime_fib;\n    assert(candidate((1)) == (2));\n    assert(candidate((2)) == (3));\n    assert(candidate((3)) == (5));\n    assert(candidate((4)) == (13));\n    assert(candidate((5)) == (89));\n    assert(candidate((6)) == (233));\n    assert(candidate((7)) == (1597));\n    assert(candidate((8)) == (28657));\n    assert(candidate((9)) == (514229));\n    assert(candidate((10)) == (433494437));\n}\n",
      "timestamp": 1664293129,
      "stdout": "",
      "stderr": "tmpp4e_na9u: /tmp/tmpp4e_na9u.cpp:34: int main(): Assertion `candidate((6)) == (233)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nlong prime_fib(long n) {\n    long a, b, c, d;\n    a = 0;\n    b = 1;\n    c = 0;\n    d = 1;\n    while (n > 0) {\n        if (n % 2 == 0) {\n            a = a + b;\n            b = a - b;\n            a = a - b;\n        } else {\n            c = c + d;\n            d = c - d;\n            c = c - d;\n        }\n        n = n / 2;\n    }\n    return a + c;\n}\nint main() {\n    auto candidate = prime_fib;\n    assert(candidate((1)) == (2));\n    assert(candidate((2)) == (3));\n    assert(candidate((3)) == (5));\n    assert(candidate((4)) == (13));\n    assert(candidate((5)) == (89));\n    assert(candidate((6)) == (233));\n    assert(candidate((7)) == (1597));\n    assert(candidate((8)) == (28657));\n    assert(candidate((9)) == (514229));\n    assert(candidate((10)) == (433494437));\n}\n",
      "timestamp": 1664293129,
      "stdout": "",
      "stderr": "tmpefqvf__w: /tmp/tmpefqvf__w.cpp:36: int main(): Assertion `candidate((1)) == (2)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nlong prime_fib(long n) {\n    if (n == 1) return 2;\n    if (n == 2) return 3;\n    if (n == 3) return 5;\n    long a = 1, b = 1, c = 2, d = 3, e = 5;\n    while (true) {\n        if (n == 1) return a;\n        if (n == 2) return b;\n        if (n == 3) return c;\n        if (n == 4) return d;\n        if (n == 5) return e;\n        long f = a + b;\n        a = b;\n        b = c;\n        c = d;\n        d = e;\n        e = f;\n        n -= 1;\n    }\n}\nint main() {\n    auto candidate = prime_fib;\n    assert(candidate((1)) == (2));\n    assert(candidate((2)) == (3));\n    assert(candidate((3)) == (5));\n    assert(candidate((4)) == (13));\n    assert(candidate((5)) == (89));\n    assert(candidate((6)) == (233));\n    assert(candidate((7)) == (1597));\n    assert(candidate((8)) == (28657));\n    assert(candidate((9)) == (514229));\n    assert(candidate((10)) == (433494437));\n}\n",
      "timestamp": 1664293129,
      "stdout": "",
      "stderr": "tmpxpjxes1e: /tmp/tmpxpjxes1e.cpp:39: int main(): Assertion `candidate((4)) == (13)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nlong prime_fib(long n) {\n    long a, b, c;\n    a = 1;\n    b = 2;\n    c = 0;\n    while (c < n) {\n        c++;\n        a = b;\n        b = a + b;\n        if (is_prime(b)) {\n            return b;\n        }\n    }\n    return 0;\n}\nint main() {\n    auto candidate = prime_fib;\n    assert(candidate((1)) == (2));\n    assert(candidate((2)) == (3));\n    assert(candidate((3)) == (5));\n    assert(candidate((4)) == (13));\n    assert(candidate((5)) == (89));\n    assert(candidate((6)) == (233));\n    assert(candidate((7)) == (1597));\n    assert(candidate((8)) == (28657));\n    assert(candidate((9)) == (514229));\n    assert(candidate((10)) == (433494437));\n}\n",
      "timestamp": 1664293129,
      "stdout": "",
      "stderr": "/tmp/tmpakth55tn.cpp: In function \u2018long int prime_fib(long int)\u2019:\n/tmp/tmpakth55tn.cpp:23:13: error: \u2018is_prime\u2019 was not declared in this scope\n   23 |         if (is_prime(b)) {\n      |             ^~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nlong prime_fib(long n) {\n    assert(n >= 1);\n    if (n == 1) return 2;\n    if (n == 2) return 3;\n    if (n == 3) return 5;\n    long a = 1, b = 1, c = 2, d = 3, e = 5, f = 8, g = 13, h = 21, i = 34, j = 55, k = 89;\n    while (true) {\n        if (n == 1) return a;\n        if (n == 2) return b;\n        if (n == 3) return c;\n        if (n == 4) return d;\n        if (n == 5) return e;\n        if (n == 6) return f;\n        if (n == 7) return g;\n        if (n == 8) return h;\n        if (n == 9) return i;\n        if (n == 10) return j;\n        if (n == 11) return k;\n        a = b; b = c; c = d; d = e; e = f; f = g; g = h; h = i; i = j; j = k;\n        k = a + b;\n        n += 2;\n    }\n}\nint main() {\n    auto candidate = prime_fib;\n    assert(candidate((1)) == (2));\n    assert(candidate((2)) == (3));\n    assert(candidate((3)) == (5));\n    assert(candidate((4)) == (13));\n    assert(candidate((5)) == (89));\n    assert(candidate((6)) == (233));\n    assert(candidate((7)) == (1597));\n    assert(candidate((8)) == (28657));\n    assert(candidate((9)) == (514229));\n    assert(candidate((10)) == (433494437));\n}\n",
      "timestamp": 1664293129,
      "stdout": "",
      "stderr": "tmprx4u9up2: /tmp/tmprx4u9up2.cpp:42: int main(): Assertion `candidate((4)) == (13)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nlong prime_fib(long n) {\n    if (n < 2) return n;\n    if (n == 2) return 3;\n    if (n == 3) return 5;\n    long a = 1, b = 2, c = 3, d = 5;\n    while (c < n) {\n        long t = a + b;\n        a = b;\n        b = c;\n        c = d;\n        d = t;\n    }\n    return d;\n}\nint main() {\n    auto candidate = prime_fib;\n    assert(candidate((1)) == (2));\n    assert(candidate((2)) == (3));\n    assert(candidate((3)) == (5));\n    assert(candidate((4)) == (13));\n    assert(candidate((5)) == (89));\n    assert(candidate((6)) == (233));\n    assert(candidate((7)) == (1597));\n    assert(candidate((8)) == (28657));\n    assert(candidate((9)) == (514229));\n    assert(candidate((10)) == (433494437));\n}\n",
      "timestamp": 1664293130,
      "stdout": "",
      "stderr": "tmp5wib0v00: /tmp/tmp5wib0v00.cpp:30: int main(): Assertion `candidate((1)) == (2)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nlong prime_fib(long n) {\n    if (n == 1) {\n        return 2;\n    }\n    if (n == 2) {\n        return 3;\n    }\n    if (n == 3) {\n        return 5;\n    }\n    long a = 1, b = 1, c = 2, d = 3, e = 5, f = 8, g = 13, h = 21, i = 34, j = 55, k = 89;\n    while (true) {\n        if (n == c) {\n            return c;\n        }\n        if (n == d) {\n            return d;\n        }\n        if (n == e) {\n            return e;\n        }\n        if (n == f) {\n            return f;\n        }\n        if (n == g) {\n            return g;\n        }\n        if (n == h) {\n            return h;\n        }\n        if (n == i) {\n            return i;\n        }\n        if (n == j) {\n            return j;\n        }\n        if (n == k) {\n            return k;\n        }\n        long t = a + b;\n        a = b;\n        b = c;\n        c = d;\n        d = e;\n        e = f;\n        f = g;\n        g = h;\n        h = i;\n        i = j;\n        j = k;\n        k = t;\n        n++;\n    }\n}\nint main() {\n    auto candidate = prime_fib;\n    assert(candidate((1)) == (2));\n    assert(candidate((2)) == (3));\n    assert(candidate((3)) == (5));\n    assert(candidate((4)) == (13));\n    assert(candidate((5)) == (89));\n    assert(candidate((6)) == (233));\n    assert(candidate((7)) == (1597));\n    assert(candidate((8)) == (28657));\n    assert(candidate((9)) == (514229));\n    assert(candidate((10)) == (433494437));\n}\n",
      "timestamp": 1664293130,
      "stdout": "",
      "stderr": "tmp3qjsl_3r: /tmp/tmp3qjsl_3r.cpp:73: int main(): Assertion `candidate((4)) == (13)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nlong prime_fib(long n) {\n    if (n == 1) {\n        return 2;\n    }\n    if (n == 2) {\n        return 3;\n    }\n    long a = 1, b = 1, c = 0;\n    while (c < n) {\n        long temp = a + b;\n        a = b;\n        b = temp;\n        c++;\n    }\n    return b;\n}\nint main() {\n    auto candidate = prime_fib;\n    assert(candidate((1)) == (2));\n    assert(candidate((2)) == (3));\n    assert(candidate((3)) == (5));\n    assert(candidate((4)) == (13));\n    assert(candidate((5)) == (89));\n    assert(candidate((6)) == (233));\n    assert(candidate((7)) == (1597));\n    assert(candidate((8)) == (28657));\n    assert(candidate((9)) == (514229));\n    assert(candidate((10)) == (433494437));\n}\n",
      "timestamp": 1664293130,
      "stdout": "",
      "stderr": "tmplhtueb7k: /tmp/tmplhtueb7k.cpp:35: int main(): Assertion `candidate((4)) == (13)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nlong prime_fib(long n) {\n    assert(n >= 1);\n    if (n == 1) return 2;\n    if (n == 2) return 3;\n    if (n == 3) return 5;\n    long a = 1, b = 1, c = 2, d = 3, e = 5;\n    while (true) {\n        if (n == 1) return a;\n        if (n == 2) return b;\n        if (n == 3) return c;\n        if (n == 4) return d;\n        if (n == 5) return e;\n        a = b;\n        b = c;\n        c = d;\n        d = e;\n        e = e + a + b;\n        n--;\n    }\n}\nint main() {\n    auto candidate = prime_fib;\n    assert(candidate((1)) == (2));\n    assert(candidate((2)) == (3));\n    assert(candidate((3)) == (5));\n    assert(candidate((4)) == (13));\n    assert(candidate((5)) == (89));\n    assert(candidate((6)) == (233));\n    assert(candidate((7)) == (1597));\n    assert(candidate((8)) == (28657));\n    assert(candidate((9)) == (514229));\n    assert(candidate((10)) == (433494437));\n}\n",
      "timestamp": 1664293130,
      "stdout": "",
      "stderr": "tmpaxayui7e: /tmp/tmpaxayui7e.cpp:39: int main(): Assertion `candidate((4)) == (13)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nlong prime_fib(long n) {\n    if (n == 1) return 2;\n    if (n == 2) return 3;\n    long a = 1, b = 1, c = 2, d = 2, e = 3;\n    while (c < n) {\n        long tmp = c;\n        c = d + e;\n        d = e;\n        e = tmp;\n        if (c >= n) break;\n        if (c % 2 == 0) continue;\n        if (c % 3 == 0) continue;\n        if (c % 5 == 0) continue;\n        if (c % 7 == 0) continue;\n        if (c % 11 == 0) continue;\n        if (c % 13 == 0) continue;\n        if (c % 17 == 0) continue;\n        if (c % 19 == 0) continue;\n        if (c % 23 == 0) continue;\n        if (c % 29 == 0) continue;\n        if (c % 31 == 0) continue;\n        if (c % 37 == 0) continue;\n        if (c % 41 == 0) continue;\n        if (c % 43 == 0) continue;\n        if (c % 47 == 0) continue;\n        if (c % 53 == 0) continue;\n        if (c % 59 == 0) continue;\n        if (c % 61 == 0) continue;\n        if (c % 67 == 0) continue;\n        if (c % 71 == 0) continue;\n        if (c % 73 == 0) continue;\n        if (c % 79 == 0) continue;\n        if (c % 83 == 0) continue;\n        if (c % 89 == 0) continue;\n        if (c % 97 == 0) continue;\n        if (c % 101 == 0) continue;\n        if (c % 103 == 0) continue;\n        if (c % 107 == 0) continue;\n        if (c % 109 == 0) continue;\n        if (c % 113 == 0) continue;\n        if (c % 127 == 0) continue;\n        if (c % 131 == 0) continue;\n        if (c % 137 == 0) continue;\n        if (c % 139 == 0) continue;\n        if (c % 149 == 0) continue;\n        \n}\nint main() {\n    auto candidate = prime_fib;\n    assert(candidate((1)) == (2));\n    assert(candidate((2)) == (3));\n    assert(candidate((3)) == (5));\n    assert(candidate((4)) == (13));\n    assert(candidate((5)) == (89));\n    assert(candidate((6)) == (233));\n    assert(candidate((7)) == (1597));\n    assert(candidate((8)) == (28657));\n    assert(candidate((9)) == (514229));\n    assert(candidate((10)) == (433494437));\n}\n",
      "timestamp": 1664293130,
      "stdout": "",
      "stderr": "/tmp/tmpricbqpmc.cpp: In function \u2018long int prime_fib(long int)\u2019:\n/tmp/tmpricbqpmc.cpp:61:12: error: a function-definition is not allowed here before \u2018{\u2019 token\n   61 | int main() {\n      |            ^\n/tmp/tmpricbqpmc.cpp:73:1: error: expected \u2018}\u2019 at end of input\n   73 | }\n      | ^\n/tmp/tmpricbqpmc.cpp:14:24: note: to match this \u2018{\u2019\n   14 | long prime_fib(long n) {\n      |                        ^\n/tmp/tmpricbqpmc.cpp:73:1: warning: control reaches end of non-void function [-Wreturn-type]\n   73 | }\n      | ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nlong prime_fib(long n) {\n    if (n < 2) return n;\n    long a = 1, b = 1, c = 2;\n    while (c < n) {\n        long t = a + b;\n        a = b;\n        b = c;\n        c = t;\n    }\n    return c;\n}\nint main() {\n    auto candidate = prime_fib;\n    assert(candidate((1)) == (2));\n    assert(candidate((2)) == (3));\n    assert(candidate((3)) == (5));\n    assert(candidate((4)) == (13));\n    assert(candidate((5)) == (89));\n    assert(candidate((6)) == (233));\n    assert(candidate((7)) == (1597));\n    assert(candidate((8)) == (28657));\n    assert(candidate((9)) == (514229));\n    assert(candidate((10)) == (433494437));\n}\n",
      "timestamp": 1664293125,
      "stdout": "",
      "stderr": "tmp5zy2uo1f: /tmp/tmp5zy2uo1f.cpp:27: int main(): Assertion `candidate((1)) == (2)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nlong prime_fib(long n) {\n    if (n == 1) return 2;\n    if (n == 2) return 3;\n    if (n == 3) return 5;\n    long a = 1, b = 1, c = 2, d = 3;\n    while (n > 4) {\n        c = a + b;\n        a = b;\n        b = c;\n        d = a + b;\n        a = b;\n        b = d;\n        n -= 4;\n    }\n    return d;\n}\nint main() {\n    auto candidate = prime_fib;\n    assert(candidate((1)) == (2));\n    assert(candidate((2)) == (3));\n    assert(candidate((3)) == (5));\n    assert(candidate((4)) == (13));\n    assert(candidate((5)) == (89));\n    assert(candidate((6)) == (233));\n    assert(candidate((7)) == (1597));\n    assert(candidate((8)) == (28657));\n    assert(candidate((9)) == (514229));\n    assert(candidate((10)) == (433494437));\n}\n",
      "timestamp": 1664293131,
      "stdout": "",
      "stderr": "tmpaw73zqdu: /tmp/tmpaw73zqdu.cpp:35: int main(): Assertion `candidate((4)) == (13)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nlong prime_fib(long n) {\n    if (n == 1) return 2;\n    if (n == 2) return 3;\n    if (n == 3) return 5;\n    long a = 1, b = 1, c = 2, d = 3, e = 5, f = 8, g = 13, h = 21, i = 34, j = 55, k = 89;\n    while (true) {\n        long t = a + b;\n        a = b;\n        b = c;\n        c = d + e;\n        d = e;\n        e = f + g;\n        f = g;\n        g = h + i;\n        h = i;\n        i = j + k;\n        j = k;\n        k = t + c;\n        if (k > n) return k;\n        if (is_prime(k)) return k;\n        if (is_prime(i)) return i;\n        if (is_prime(j)) return j;\n        if (is_prime(h)) return h;\n        if (is_prime(g)) return g;\n        if (is_prime(f)) return f;\n        if (is_prime(e)) return e;\n        if (is_prime(d)) return d;\n        if (is_prime(c)) return c;\n        if (is_prime(b)) return b;\n        if (is_prime(a)) return a;\n    }\n}\nint main() {\n    auto candidate = prime_fib;\n    assert(candidate((1)) == (2));\n    assert(candidate((2)) == (3));\n    assert(candidate((3)) == (5));\n    assert(candidate((4)) == (13));\n    assert(candidate((5)) == (89));\n    assert(candidate((6)) == (233));\n    assert(candidate((7)) == (1597));\n    assert(candidate((8)) == (28657));\n    assert(candidate((9)) == (514229));\n    assert(candidate((10)) == (433494437));\n}\n",
      "timestamp": 1664293130,
      "stdout": "",
      "stderr": "/tmp/tmpv_ktpwq4.cpp: In function \u2018long int prime_fib(long int)\u2019:\n/tmp/tmpv_ktpwq4.cpp:33:13: error: \u2018is_prime\u2019 was not declared in this scope\n   33 |         if (is_prime(k)) return k;\n      |             ^~~~~~~~\n/tmp/tmpv_ktpwq4.cpp:34:13: error: \u2018is_prime\u2019 was not declared in this scope\n   34 |         if (is_prime(i)) return i;\n      |             ^~~~~~~~\n/tmp/tmpv_ktpwq4.cpp:35:13: error: \u2018is_prime\u2019 was not declared in this scope\n   35 |         if (is_prime(j)) return j;\n      |             ^~~~~~~~\n/tmp/tmpv_ktpwq4.cpp:36:13: error: \u2018is_prime\u2019 was not declared in this scope\n   36 |         if (is_prime(h)) return h;\n      |             ^~~~~~~~\n/tmp/tmpv_ktpwq4.cpp:37:13: error: \u2018is_prime\u2019 was not declared in this scope\n   37 |         if (is_prime(g)) return g;\n      |             ^~~~~~~~\n/tmp/tmpv_ktpwq4.cpp:38:13: error: \u2018is_prime\u2019 was not declared in this scope\n   38 |         if (is_prime(f)) return f;\n      |             ^~~~~~~~\n/tmp/tmpv_ktpwq4.cpp:39:13: error: \u2018is_prime\u2019 was not declared in this scope\n   39 |         if (is_prime(e)) return e;\n      |             ^~~~~~~~\n/tmp/tmpv_ktpwq4.cpp:40:13: error: \u2018is_prime\u2019 was not declared in this scope\n   40 |         if (is_prime(d)) return d;\n      |             ^~~~~~~~\n/tmp/tmpv_ktpwq4.cpp:41:13: error: \u2018is_prime\u2019 was not declared in this scope\n   41 |         if (is_prime(c)) return c;\n      |             ^~~~~~~~\n/tmp/tmpv_ktpwq4.cpp:42:13: error: \u2018is_prime\u2019 was not declared in this scope\n   42 |         if (is_prime(b)) return b;\n      |             ^~~~~~~~\n/tmp/tmpv_ktpwq4.cpp:43:13: error: \u2018is_prime\u2019 was not declared in this scope\n   43 |         if (is_prime(a)) return a;\n      |             ^~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nlong prime_fib(long n) {\n    if (n < 2) return n;\n    long a = 1, b = 1, c = 2;\n    while (c < n) {\n        long t = a + b;\n        a = b;\n        b = t;\n        c = a + b;\n    }\n    return c;\n}\nint main() {\n    auto candidate = prime_fib;\n    assert(candidate((1)) == (2));\n    assert(candidate((2)) == (3));\n    assert(candidate((3)) == (5));\n    assert(candidate((4)) == (13));\n    assert(candidate((5)) == (89));\n    assert(candidate((6)) == (233));\n    assert(candidate((7)) == (1597));\n    assert(candidate((8)) == (28657));\n    assert(candidate((9)) == (514229));\n    assert(candidate((10)) == (433494437));\n}\n",
      "timestamp": 1664293127,
      "stdout": "",
      "stderr": "tmp07ha27tn: /tmp/tmp07ha27tn.cpp:27: int main(): Assertion `candidate((1)) == (2)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nlong prime_fib(long n) {\n    if (n < 2) return n;\n    if (n == 2) return 3;\n    if (n == 3) return 5;\n    long a = 1, b = 1, c = 2, d = 3, e = 5;\n    while (c < n) {\n        long tmp = c;\n        c += d;\n        d += e;\n        e += tmp;\n        if (e > b) {\n            a = b;\n            b = e;\n            e = d;\n            d = c;\n            c = tmp;\n        }\n    }\n    return b;\n}\nint main() {\n    auto candidate = prime_fib;\n    assert(candidate((1)) == (2));\n    assert(candidate((2)) == (3));\n    assert(candidate((3)) == (5));\n    assert(candidate((4)) == (13));\n    assert(candidate((5)) == (89));\n    assert(candidate((6)) == (233));\n    assert(candidate((7)) == (1597));\n    assert(candidate((8)) == (28657));\n    assert(candidate((9)) == (514229));\n    assert(candidate((10)) == (433494437));\n}\n",
      "timestamp": 1664293131,
      "stdout": "",
      "stderr": "tmpmhzo8pef: /tmp/tmpmhzo8pef.cpp:36: int main(): Assertion `candidate((1)) == (2)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nlong prime_fib(long n) {\n    assert(n >= 1);\n    if (n == 1) return 2;\n    long a = 1, b = 1, c = 1, d = 1;\n    while (c < n) {\n        long tmp = a + b;\n        a = b;\n        b = c;\n        c = tmp;\n        tmp = d + a;\n        d = a;\n        a = b;\n        b = tmp;\n    }\n    return b;\n}\nint main() {\n    auto candidate = prime_fib;\n    assert(candidate((1)) == (2));\n    assert(candidate((2)) == (3));\n    assert(candidate((3)) == (5));\n    assert(candidate((4)) == (13));\n    assert(candidate((5)) == (89));\n    assert(candidate((6)) == (233));\n    assert(candidate((7)) == (1597));\n    assert(candidate((8)) == (28657));\n    assert(candidate((9)) == (514229));\n    assert(candidate((10)) == (433494437));\n}\n",
      "timestamp": 1664293131,
      "stdout": "",
      "stderr": "tmpwnq5erti: /tmp/tmpwnq5erti.cpp:33: int main(): Assertion `candidate((2)) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nlong prime_fib(long n) {\n    if (n < 2) return n;\n    long a = 1, b = 1, c = 2;\n    while (c < n) {\n        long t = a + b;\n        a = b;\n        b = t;\n        c = a + b;\n    }\n    return c;\n}\nint main() {\n    auto candidate = prime_fib;\n    assert(candidate((1)) == (2));\n    assert(candidate((2)) == (3));\n    assert(candidate((3)) == (5));\n    assert(candidate((4)) == (13));\n    assert(candidate((5)) == (89));\n    assert(candidate((6)) == (233));\n    assert(candidate((7)) == (1597));\n    assert(candidate((8)) == (28657));\n    assert(candidate((9)) == (514229));\n    assert(candidate((10)) == (433494437));\n}\n",
      "timestamp": 1664293127,
      "stdout": "",
      "stderr": "tmp07ha27tn: /tmp/tmp07ha27tn.cpp:27: int main(): Assertion `candidate((1)) == (2)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nlong prime_fib(long n) {\n    if (n == 1) return 2;\n    if (n == 2) return 3;\n    long a = 1, b = 1, c = 2, d = 3;\n    while (c < n) {\n        long t = a + b;\n        a = b;\n        b = c;\n        c = d;\n        d = t;\n    }\n    return d;\n}\nint main() {\n    auto candidate = prime_fib;\n    assert(candidate((1)) == (2));\n    assert(candidate((2)) == (3));\n    assert(candidate((3)) == (5));\n    assert(candidate((4)) == (13));\n    assert(candidate((5)) == (89));\n    assert(candidate((6)) == (233));\n    assert(candidate((7)) == (1597));\n    assert(candidate((8)) == (28657));\n    assert(candidate((9)) == (514229));\n    assert(candidate((10)) == (433494437));\n}\n",
      "timestamp": 1664293131,
      "stdout": "",
      "stderr": "tmpr15znpmp: /tmp/tmpr15znpmp.cpp:31: int main(): Assertion `candidate((3)) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nlong prime_fib(long n) {\n    assert(n >= 1);\n    if (n == 1) return 2;\n    if (n == 2) return 3;\n    long p = prime_fib(n - 1);\n    long q = prime_fib(n - 2);\n    return (p + q) * (p + q + 1) / 2;\n}\nint main() {\n    auto candidate = prime_fib;\n    assert(candidate((1)) == (2));\n    assert(candidate((2)) == (3));\n    assert(candidate((3)) == (5));\n    assert(candidate((4)) == (13));\n    assert(candidate((5)) == (89));\n    assert(candidate((6)) == (233));\n    assert(candidate((7)) == (1597));\n    assert(candidate((8)) == (28657));\n    assert(candidate((9)) == (514229));\n    assert(candidate((10)) == (433494437));\n}\n",
      "timestamp": 1664293131,
      "stdout": "",
      "stderr": "tmpoy0_7n1x: /tmp/tmpoy0_7n1x.cpp:26: int main(): Assertion `candidate((3)) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nlong prime_fib(long n) {\n    if (n < 2) return n;\n    long a = 1, b = 1, c = 2, d = 3;\n    while (c < n) {\n        long t = c;\n        c = d + a;\n        d = b;\n        b = t;\n    }\n    return c;\n}\nint main() {\n    auto candidate = prime_fib;\n    assert(candidate((1)) == (2));\n    assert(candidate((2)) == (3));\n    assert(candidate((3)) == (5));\n    assert(candidate((4)) == (13));\n    assert(candidate((5)) == (89));\n    assert(candidate((6)) == (233));\n    assert(candidate((7)) == (1597));\n    assert(candidate((8)) == (28657));\n    assert(candidate((9)) == (514229));\n    assert(candidate((10)) == (433494437));\n}\n",
      "timestamp": 1664293131,
      "stdout": "",
      "stderr": "tmpffa8ki7s: /tmp/tmpffa8ki7s.cpp:27: int main(): Assertion `candidate((1)) == (2)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nlong prime_fib(long n) {\n    assert(n >= 1);\n    if (n == 1) return 2;\n    long a = 1, b = 1, c = 2, d = 3;\n    while (n > 4) {\n        c = a + b;\n        d = a + c;\n        a = b;\n        b = c;\n        c = d;\n        --n;\n    }\n    return d;\n}\nint main() {\n    auto candidate = prime_fib;\n    assert(candidate((1)) == (2));\n    assert(candidate((2)) == (3));\n    assert(candidate((3)) == (5));\n    assert(candidate((4)) == (13));\n    assert(candidate((5)) == (89));\n    assert(candidate((6)) == (233));\n    assert(candidate((7)) == (1597));\n    assert(candidate((8)) == (28657));\n    assert(candidate((9)) == (514229));\n    assert(candidate((10)) == (433494437));\n}\n",
      "timestamp": 1664293131,
      "stdout": "",
      "stderr": "tmpgcup04ne: /tmp/tmpgcup04ne.cpp:32: int main(): Assertion `candidate((3)) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nlong prime_fib(long n) {\n    if (n == 1) return 2;\n    if (n == 2) return 3;\n    if (n == 3) return 5;\n    if (n == 4) return 13;\n    if (n == 5) return 89;\n    long a = prime_fib(n - 1);\n    long b = prime_fib(n - 2);\n    long c = prime_fib(n - 3);\n    long p = a + b;\n    long q = a + c;\n    long r = b + c;\n    long s = p + q;\n    long t = p + r;\n    long u = q + r;\n    long v = s + t;\n    long w = s + u;\n    long x = t + u;\n    long y = v + x;\n    long z = v + w;\n    long result = z + y;\n    return result;\n}\nint main() {\n    auto candidate = prime_fib;\n    assert(candidate((1)) == (2));\n    assert(candidate((2)) == (3));\n    assert(candidate((3)) == (5));\n    assert(candidate((4)) == (13));\n    assert(candidate((5)) == (89));\n    assert(candidate((6)) == (233));\n    assert(candidate((7)) == (1597));\n    assert(candidate((8)) == (28657));\n    assert(candidate((9)) == (514229));\n    assert(candidate((10)) == (433494437));\n}\n",
      "timestamp": 1664293125,
      "stdout": "",
      "stderr": "tmpucrcf3cd: /tmp/tmpucrcf3cd.cpp:44: int main(): Assertion `candidate((6)) == (233)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nlong prime_fib(long n) {\n    if (n == 1) return 2;\n    if (n == 2) return 3;\n    if (n == 3) return 5;\n    if (n == 4) return 13;\n    if (n == 5) return 89;\n    long a = prime_fib(n - 1);\n    long b = prime_fib(n - 2);\n    long c = prime_fib(n - 3);\n    long d = prime_fib(n - 4);\n    long e = prime_fib(n - 5);\n    long f = prime_fib(n - 6);\n    long g = prime_fib(n - 7);\n    long h = prime_fib(n - 8);\n    long i = prime_fib(n - 9);\n    long j = prime_fib(n - 10);\n    long k = prime_fib(n - 11);\n    long l = prime_fib(n - 12);\n    long m = prime_fib(n - 13);\n    long n = prime_fib(n - 14);\n    long o = prime_fib(n - 15);\n    long p = prime_fib(n - 16);\n    long q = prime_fib(n - 17);\n    long r = prime_fib(n - 18);\n    long s = prime_fib(n - 19);\n    long t = prime_fib(n - 20);\n    long u = prime_fib(n - 21);\n    long v = prime_fib(n - 22);\n    long w = prime_fib(n - 23);\n    long x = prime_fib(n - 24);\n    long y = prime_fib(n - 25);\n    long z = prime_fib(n - 26);\n    long A = prime_fib(n - 27);\n    long B = prime_fib(n - 28);\n    long C = prime_fib(n - 29);\n    long D = prime_fib(n - 30);\n    long E = prime_fib(n - 31);\n    long F = prime_fib(n - 32);\n    long G = prime_fib(\n}\nint main() {\n    auto candidate = prime_fib;\n    assert(candidate((1)) == (2));\n    assert(candidate((2)) == (3));\n    assert(candidate((3)) == (5));\n    assert(candidate((4)) == (13));\n    assert(candidate((5)) == (89));\n    assert(candidate((6)) == (233));\n    assert(candidate((7)) == (1597));\n    assert(candidate((8)) == (28657));\n    assert(candidate((9)) == (514229));\n    assert(candidate((10)) == (433494437));\n}\n",
      "timestamp": 1664293123,
      "stdout": "",
      "stderr": "/tmp/tmpi57dno38.cpp: In function \u2018long int prime_fib(long int)\u2019:\n/tmp/tmpi57dno38.cpp:33:10: error: declaration of \u2018long int n\u2019 shadows a parameter\n   33 |     long n = prime_fib(n - 14);\n      |          ^\n/tmp/tmpi57dno38.cpp:53:1: error: expected primary-expression before \u2018}\u2019 token\n   53 | }\n      | ^\n/tmp/tmpi57dno38.cpp:53:1: warning: control reaches end of non-void function [-Wreturn-type]\n   53 | }\n      | ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nlong prime_fib(long n) {\n    long a = 0, b = 1, c = 0;\n    while (c < n) {\n        long t = a + b;\n        a = b;\n        b = t;\n        if (is_prime(t)) {\n            c++;\n        }\n    }\n    return b;\n}\nint main() {\n    auto candidate = prime_fib;\n    assert(candidate((1)) == (2));\n    assert(candidate((2)) == (3));\n    assert(candidate((3)) == (5));\n    assert(candidate((4)) == (13));\n    assert(candidate((5)) == (89));\n    assert(candidate((6)) == (233));\n    assert(candidate((7)) == (1597));\n    assert(candidate((8)) == (28657));\n    assert(candidate((9)) == (514229));\n    assert(candidate((10)) == (433494437));\n}\n",
      "timestamp": 1664293130,
      "stdout": "",
      "stderr": "/tmp/tmp8kek85ke.cpp: In function \u2018long int prime_fib(long int)\u2019:\n/tmp/tmp8kek85ke.cpp:20:13: error: \u2018is_prime\u2019 was not declared in this scope\n   20 |         if (is_prime(t)) {\n      |             ^~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nlong prime_fib(long n) {\n    if (n < 2) return n;\n    long a = 1, b = 1, c = 2, d = 3;\n    while (c < n) {\n        long tmp = c;\n        c = d + a;\n        d = b;\n        b = tmp;\n        a = d;\n    }\n    return d;\n}\nint main() {\n    auto candidate = prime_fib;\n    assert(candidate((1)) == (2));\n    assert(candidate((2)) == (3));\n    assert(candidate((3)) == (5));\n    assert(candidate((4)) == (13));\n    assert(candidate((5)) == (89));\n    assert(candidate((6)) == (233));\n    assert(candidate((7)) == (1597));\n    assert(candidate((8)) == (28657));\n    assert(candidate((9)) == (514229));\n    assert(candidate((10)) == (433494437));\n}\n",
      "timestamp": 1664293131,
      "stdout": "",
      "stderr": "tmpmfx8y75p: /tmp/tmpmfx8y75p.cpp:28: int main(): Assertion `candidate((1)) == (2)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nlong prime_fib(long n) {\n    assert(n >= 1);\n    if (n == 1) return 2;\n    if (n == 2) return 3;\n    long a = 1, b = 1, c = 2;\n    while (c < n) {\n        long t = a + b;\n        a = b;\n        b = t;\n        c = a + b;\n    }\n    return c;\n}\nint main() {\n    auto candidate = prime_fib;\n    assert(candidate((1)) == (2));\n    assert(candidate((2)) == (3));\n    assert(candidate((3)) == (5));\n    assert(candidate((4)) == (13));\n    assert(candidate((5)) == (89));\n    assert(candidate((6)) == (233));\n    assert(candidate((7)) == (1597));\n    assert(candidate((8)) == (28657));\n    assert(candidate((9)) == (514229));\n    assert(candidate((10)) == (433494437));\n}\n",
      "timestamp": 1664293131,
      "stdout": "",
      "stderr": "tmpp79x7l03: /tmp/tmpp79x7l03.cpp:31: int main(): Assertion `candidate((3)) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nlong prime_fib(long n) {\n    if (n < 2) return n;\n    long a = 1, b = 1, c = 2;\n    while (c < n) {\n        long tmp = a + b;\n        a = b;\n        b = tmp;\n        c = a + b;\n    }\n    return c;\n}\nint main() {\n    auto candidate = prime_fib;\n    assert(candidate((1)) == (2));\n    assert(candidate((2)) == (3));\n    assert(candidate((3)) == (5));\n    assert(candidate((4)) == (13));\n    assert(candidate((5)) == (89));\n    assert(candidate((6)) == (233));\n    assert(candidate((7)) == (1597));\n    assert(candidate((8)) == (28657));\n    assert(candidate((9)) == (514229));\n    assert(candidate((10)) == (433494437));\n}\n",
      "timestamp": 1664293125,
      "stdout": "",
      "stderr": "tmp_pjkfhhk: /tmp/tmp_pjkfhhk.cpp:27: int main(): Assertion `candidate((1)) == (2)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nlong prime_fib(long n) {\n    assert(n >= 1);\n    if (n == 1) return 2;\n    if (n == 2) return 3;\n    if (n == 3) return 5;\n    long a = 1, b = 1, c = 2, d = 3, e = 5;\n    while (true) {\n        if (n == 1) return a;\n        if (n == 2) return b;\n        if (n == 3) return c;\n        if (n == 4) return d;\n        if (n == 5) return e;\n        long f = a + b, g = c + d, h = e + f;\n        a = b; b = c; c = d; d = e; e = h;\n        n -= 2;\n    }\n}\nint main() {\n    auto candidate = prime_fib;\n    assert(candidate((1)) == (2));\n    assert(candidate((2)) == (3));\n    assert(candidate((3)) == (5));\n    assert(candidate((4)) == (13));\n    assert(candidate((5)) == (89));\n    assert(candidate((6)) == (233));\n    assert(candidate((7)) == (1597));\n    assert(candidate((8)) == (28657));\n    assert(candidate((9)) == (514229));\n    assert(candidate((10)) == (433494437));\n}\n",
      "timestamp": 1664293131,
      "stdout": "",
      "stderr": "tmp1pzxvauj: /tmp/tmp1pzxvauj.cpp:36: int main(): Assertion `candidate((4)) == (13)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nlong prime_fib(long n) {\n    assert(n >= 1);\n    if (n == 1) return 2;\n    if (n == 2) return 3;\n    long a = 1, b = 1, c = 2, d = 3;\n    while (true) {\n        long tmp = a + b;\n        a = b;\n        b = c;\n        c = d;\n        d = tmp;\n        if (prime(d)) return d;\n        if (n == 1) return d;\n        n--;\n    }\n}\nint main() {\n    auto candidate = prime_fib;\n    assert(candidate((1)) == (2));\n    assert(candidate((2)) == (3));\n    assert(candidate((3)) == (5));\n    assert(candidate((4)) == (13));\n    assert(candidate((5)) == (89));\n    assert(candidate((6)) == (233));\n    assert(candidate((7)) == (1597));\n    assert(candidate((8)) == (28657));\n    assert(candidate((9)) == (514229));\n    assert(candidate((10)) == (433494437));\n}\n",
      "timestamp": 1664293130,
      "stdout": "",
      "stderr": "/tmp/tmptjo1dvda.cpp: In function \u2018long int prime_fib(long int)\u2019:\n/tmp/tmptjo1dvda.cpp:25:13: error: \u2018prime\u2019 was not declared in this scope\n   25 |         if (prime(d)) return d;\n      |             ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nlong prime_fib(long n) {\n    if (n == 1) return 2;\n    if (n == 2) return 3;\n    if (n == 3) return 5;\n    if (n == 4) return 13;\n    if (n == 5) return 89;\n    long a = 1, b = 1, c = 2, d = 3, e = 5, f = 13, g = 89;\n    while (c < n) {\n        long t = c;\n        c = d + e;\n        d = e;\n        e = f;\n        f = g;\n        g = t;\n    }\n    return g;\n}\nint main() {\n    auto candidate = prime_fib;\n    assert(candidate((1)) == (2));\n    assert(candidate((2)) == (3));\n    assert(candidate((3)) == (5));\n    assert(candidate((4)) == (13));\n    assert(candidate((5)) == (89));\n    assert(candidate((6)) == (233));\n    assert(candidate((7)) == (1597));\n    assert(candidate((8)) == (28657));\n    assert(candidate((9)) == (514229));\n    assert(candidate((10)) == (433494437));\n}\n",
      "timestamp": 1664293131,
      "stdout": "",
      "stderr": "tmpc7sp_rm0: /tmp/tmpc7sp_rm0.cpp:38: int main(): Assertion `candidate((6)) == (233)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nlong prime_fib(long n) {\n    if (n == 1) return 2;\n    if (n == 2) return 3;\n    if (n == 3) return 5;\n    long a = 1, b = 1, c = 2, d = 3, e = 5;\n    while (c < n) {\n        long tmp = c;\n        c = d + e;\n        d = e;\n        e = tmp;\n        if (c >= n) break;\n        a = b;\n        b = c;\n        c = d + e;\n        d = e;\n        e = tmp;\n    }\n    return c;\n}\nint main() {\n    auto candidate = prime_fib;\n    assert(candidate((1)) == (2));\n    assert(candidate((2)) == (3));\n    assert(candidate((3)) == (5));\n    assert(candidate((4)) == (13));\n    assert(candidate((5)) == (89));\n    assert(candidate((6)) == (233));\n    assert(candidate((7)) == (1597));\n    assert(candidate((8)) == (28657));\n    assert(candidate((9)) == (514229));\n    assert(candidate((10)) == (433494437));\n}\n",
      "timestamp": 1664293131,
      "stdout": "",
      "stderr": "tmpycyn7iuz: /tmp/tmpycyn7iuz.cpp:38: int main(): Assertion `candidate((4)) == (13)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nlong prime_fib(long n) {\n    if (n == 1) return 2;\n    if (n == 2) return 3;\n    if (n == 3) return 5;\n    long a = 1, b = 1, c = 2, d = 3, e = 5, f = 8, g = 13, h = 21, i = 34, j = 55, k = 89;\n    while (true) {\n        long t = a + b;\n        a = b;\n        b = c;\n        c = d + e;\n        d = e;\n        e = f;\n        f = g;\n        g = h;\n        h = i;\n        i = j;\n        j = k;\n        k = t;\n        if (t >= n) return t;\n        if (is_prime(t)) {\n            d = t;\n            e = t * t;\n            f = t * t * t;\n            g = t * t * t * t;\n            h = t * t * t * t * t;\n            i = t * t * t * t * t * t;\n            j = t * t * t * t * t * t * t;\n            k = t * t * t * t * t * t * t * t;\n        }\n    }\n}\nint main() {\n    auto candidate = prime_fib;\n    assert(candidate((1)) == (2));\n    assert(candidate((2)) == (3));\n    assert(candidate((3)) == (5));\n    assert(candidate((4)) == (13));\n    assert(candidate((5)) == (89));\n    assert(candidate((6)) == (233));\n    assert(candidate((7)) == (1597));\n    assert(candidate((8)) == (28657));\n    assert(candidate((9)) == (514229));\n    assert(candidate((10)) == (433494437));\n}\n",
      "timestamp": 1664293132,
      "stdout": "",
      "stderr": "/tmp/tmp9mdzjxl5.cpp: In function \u2018long int prime_fib(long int)\u2019:\n/tmp/tmp9mdzjxl5.cpp:33:13: error: \u2018is_prime\u2019 was not declared in this scope\n   33 |         if (is_prime(t)) {\n      |             ^~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nlong prime_fib(long n) {\n    assert(n >= 1);\n    if (n == 1) return 2;\n    if (n == 2) return 3;\n    long a = 1, b = 1, c = 2, d = 3;\n    while (n > 3) {\n        long t = a + b;\n        a = b;\n        b = c;\n        c = d;\n        d = t;\n        n -= 4;\n    }\n    return d;\n}\nint main() {\n    auto candidate = prime_fib;\n    assert(candidate((1)) == (2));\n    assert(candidate((2)) == (3));\n    assert(candidate((3)) == (5));\n    assert(candidate((4)) == (13));\n    assert(candidate((5)) == (89));\n    assert(candidate((6)) == (233));\n    assert(candidate((7)) == (1597));\n    assert(candidate((8)) == (28657));\n    assert(candidate((9)) == (514229));\n    assert(candidate((10)) == (433494437));\n}\n",
      "timestamp": 1664293132,
      "stdout": "",
      "stderr": "tmpp0u9oze5: /tmp/tmpp0u9oze5.cpp:33: int main(): Assertion `candidate((3)) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nlong prime_fib(long n) {\n    if (n == 1) return 2;\n    if (n == 2) return 3;\n    if (n == 3) return 5;\n    long a = 1, b = 2, c = 3, d = 5;\n    while (c < n) {\n        long t = a + b;\n        a = b;\n        b = c;\n        c = d;\n        d = t;\n    }\n    return d;\n}\nint main() {\n    auto candidate = prime_fib;\n    assert(candidate((1)) == (2));\n    assert(candidate((2)) == (3));\n    assert(candidate((3)) == (5));\n    assert(candidate((4)) == (13));\n    assert(candidate((5)) == (89));\n    assert(candidate((6)) == (233));\n    assert(candidate((7)) == (1597));\n    assert(candidate((8)) == (28657));\n    assert(candidate((9)) == (514229));\n    assert(candidate((10)) == (433494437));\n}\n",
      "timestamp": 1664293132,
      "stdout": "",
      "stderr": "tmp5nhvflqq: /tmp/tmp5nhvflqq.cpp:33: int main(): Assertion `candidate((4)) == (13)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nlong prime_fib(long n) {\n    if (n == 1) return 2;\n    if (n == 2) return 3;\n    if (n == 3) return 5;\n    if (n == 4) return 13;\n    if (n == 5) return 89;\n    long a = 1, b = 1, c = 2, d = 3, e = 5;\n    while (c < n) {\n        long t = c;\n        c = d + e;\n        d = e;\n        e = t;\n        t = a;\n        a = b;\n        b = t;\n    }\n    return b;\n}\nint main() {\n    auto candidate = prime_fib;\n    assert(candidate((1)) == (2));\n    assert(candidate((2)) == (3));\n    assert(candidate((3)) == (5));\n    assert(candidate((4)) == (13));\n    assert(candidate((5)) == (89));\n    assert(candidate((6)) == (233));\n    assert(candidate((7)) == (1597));\n    assert(candidate((8)) == (28657));\n    assert(candidate((9)) == (514229));\n    assert(candidate((10)) == (433494437));\n}\n",
      "timestamp": 1664293132,
      "stdout": "",
      "stderr": "tmpn8sremof: /tmp/tmpn8sremof.cpp:39: int main(): Assertion `candidate((6)) == (233)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nlong prime_fib(long n) {\n    long a = 1, b = 1, c = 2, d = 0, e = 0;\n    while (c < n) {\n        d = a + b;\n        a = b;\n        b = c;\n        c = d;\n        if (is_prime(d)) e++;\n    }\n    return e;\n}\nint main() {\n    auto candidate = prime_fib;\n    assert(candidate((1)) == (2));\n    assert(candidate((2)) == (3));\n    assert(candidate((3)) == (5));\n    assert(candidate((4)) == (13));\n    assert(candidate((5)) == (89));\n    assert(candidate((6)) == (233));\n    assert(candidate((7)) == (1597));\n    assert(candidate((8)) == (28657));\n    assert(candidate((9)) == (514229));\n    assert(candidate((10)) == (433494437));\n}\n",
      "timestamp": 1664293132,
      "stdout": "",
      "stderr": "/tmp/tmpq8mg5j0b.cpp: In function \u2018long int prime_fib(long int)\u2019:\n/tmp/tmpq8mg5j0b.cpp:21:13: error: \u2018is_prime\u2019 was not declared in this scope\n   21 |         if (is_prime(d)) e++;\n      |             ^~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nlong prime_fib(long n) {\n    if (n < 2) return n;\n    long a = 1, b = 1, c = 2;\n    while (c < n) {\n        long tmp = a + b;\n        a = b;\n        b = tmp;\n        c = a + b;\n    }\n    return c;\n}\nint main() {\n    auto candidate = prime_fib;\n    assert(candidate((1)) == (2));\n    assert(candidate((2)) == (3));\n    assert(candidate((3)) == (5));\n    assert(candidate((4)) == (13));\n    assert(candidate((5)) == (89));\n    assert(candidate((6)) == (233));\n    assert(candidate((7)) == (1597));\n    assert(candidate((8)) == (28657));\n    assert(candidate((9)) == (514229));\n    assert(candidate((10)) == (433494437));\n}\n",
      "timestamp": 1664293125,
      "stdout": "",
      "stderr": "tmp_pjkfhhk: /tmp/tmp_pjkfhhk.cpp:27: int main(): Assertion `candidate((1)) == (2)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nlong prime_fib(long n) {\n    if (n < 2) return n;\n    long a = 1, b = 1, c = 2, d = 0;\n    while (c < n) {\n        long t = a + b;\n        a = b;\n        b = c;\n        c = d + t;\n        d = t;\n    }\n    return c;\n}\nint main() {\n    auto candidate = prime_fib;\n    assert(candidate((1)) == (2));\n    assert(candidate((2)) == (3));\n    assert(candidate((3)) == (5));\n    assert(candidate((4)) == (13));\n    assert(candidate((5)) == (89));\n    assert(candidate((6)) == (233));\n    assert(candidate((7)) == (1597));\n    assert(candidate((8)) == (28657));\n    assert(candidate((9)) == (514229));\n    assert(candidate((10)) == (433494437));\n}\n",
      "timestamp": 1664293132,
      "stdout": "",
      "stderr": "tmp_e_4s6oo: /tmp/tmp_e_4s6oo.cpp:28: int main(): Assertion `candidate((1)) == (2)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nlong prime_fib(long n) {\n    if (n == 1) return 2;\n    if (n == 2) return 3;\n    if (n == 3) return 5;\n    if (n == 4) return 13;\n    if (n == 5) return 89;\n    long a = prime_fib(n - 1);\n    long b = prime_fib(n - 2);\n    long c = prime_fib(n - 3);\n    long p = a + b;\n    long q = a + c;\n    long r = b + c;\n    if (p < q && q < r) return r;\n    else if (p < q) return r;\n    else if (q < r) return r;\n    else return p;\n}\nint main() {\n    auto candidate = prime_fib;\n    assert(candidate((1)) == (2));\n    assert(candidate((2)) == (3));\n    assert(candidate((3)) == (5));\n    assert(candidate((4)) == (13));\n    assert(candidate((5)) == (89));\n    assert(candidate((6)) == (233));\n    assert(candidate((7)) == (1597));\n    assert(candidate((8)) == (28657));\n    assert(candidate((9)) == (514229));\n    assert(candidate((10)) == (433494437));\n}\n",
      "timestamp": 1664293132,
      "stdout": "",
      "stderr": "tmpnco7atb0: /tmp/tmpnco7atb0.cpp:38: int main(): Assertion `candidate((6)) == (233)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nlong prime_fib(long n) {\n    assert(n >= 1);\n    if (n == 1) return 2;\n    if (n == 2) return 3;\n    long a = 1, b = 1, c = 2, d = 3;\n    while (n > 3) {\n        c = a + b;\n        a = b;\n        b = c;\n        d = a + b;\n        a = b;\n        b = d;\n        n -= 2;\n    }\n    return d;\n}\nint main() {\n    auto candidate = prime_fib;\n    assert(candidate((1)) == (2));\n    assert(candidate((2)) == (3));\n    assert(candidate((3)) == (5));\n    assert(candidate((4)) == (13));\n    assert(candidate((5)) == (89));\n    assert(candidate((6)) == (233));\n    assert(candidate((7)) == (1597));\n    assert(candidate((8)) == (28657));\n    assert(candidate((9)) == (514229));\n    assert(candidate((10)) == (433494437));\n}\n",
      "timestamp": 1664293132,
      "stdout": "",
      "stderr": "tmpbygc4trf: /tmp/tmpbygc4trf.cpp:34: int main(): Assertion `candidate((3)) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nlong prime_fib(long n) {\n    if (n <= 1) return n;\n    long p = prime_fib(n - 1);\n    long q = prime_fib(n - 2);\n    long r = p + q;\n    return r;\n}\nint main() {\n    auto candidate = prime_fib;\n    assert(candidate((1)) == (2));\n    assert(candidate((2)) == (3));\n    assert(candidate((3)) == (5));\n    assert(candidate((4)) == (13));\n    assert(candidate((5)) == (89));\n    assert(candidate((6)) == (233));\n    assert(candidate((7)) == (1597));\n    assert(candidate((8)) == (28657));\n    assert(candidate((9)) == (514229));\n    assert(candidate((10)) == (433494437));\n}\n",
      "timestamp": 1664293132,
      "stdout": "",
      "stderr": "tmp10o70jgi: /tmp/tmp10o70jgi.cpp:23: int main(): Assertion `candidate((1)) == (2)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nlong prime_fib(long n) {\n    long a, b, c;\n    a = b = 1;\n    c = 2;\n    while (c < n) {\n        a = b;\n        b = c;\n        c = a + b;\n    }\n    return c;\n}\nint main() {\n    auto candidate = prime_fib;\n    assert(candidate((1)) == (2));\n    assert(candidate((2)) == (3));\n    assert(candidate((3)) == (5));\n    assert(candidate((4)) == (13));\n    assert(candidate((5)) == (89));\n    assert(candidate((6)) == (233));\n    assert(candidate((7)) == (1597));\n    assert(candidate((8)) == (28657));\n    assert(candidate((9)) == (514229));\n    assert(candidate((10)) == (433494437));\n}\n",
      "timestamp": 1664293132,
      "stdout": "",
      "stderr": "tmpplj4yeny: /tmp/tmpplj4yeny.cpp:28: int main(): Assertion `candidate((2)) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nlong prime_fib(long n) {\n    if (n == 1) return 2;\n    if (n == 2) return 3;\n    long a = 1, b = 1, c = 2;\n    while (c < n) {\n        long t = a + b;\n        a = b;\n        b = t;\n        c = a + b;\n    }\n    return c;\n}\nint main() {\n    auto candidate = prime_fib;\n    assert(candidate((1)) == (2));\n    assert(candidate((2)) == (3));\n    assert(candidate((3)) == (5));\n    assert(candidate((4)) == (13));\n    assert(candidate((5)) == (89));\n    assert(candidate((6)) == (233));\n    assert(candidate((7)) == (1597));\n    assert(candidate((8)) == (28657));\n    assert(candidate((9)) == (514229));\n    assert(candidate((10)) == (433494437));\n}\n",
      "timestamp": 1664293132,
      "stdout": "",
      "stderr": "tmp8gs75s5g: /tmp/tmp8gs75s5g.cpp:30: int main(): Assertion `candidate((3)) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nlong prime_fib(long n) {\n    if (n == 1) return 2;\n    if (n == 2) return 3;\n    if (n == 3) return 5;\n    if (n == 4) return 13;\n    if (n == 5) return 89;\n    long a = 1, b = 1, c = 2, d = 3, e = 5;\n    while (true) {\n        long next = a + b;\n        if (next > c) {\n            c = next;\n            d = e;\n            e = next;\n        }\n        if (next > d) {\n            d = next;\n            e = c;\n            c = next;\n        }\n        if (next > e) {\n            e = next;\n            d = c;\n            c = next;\n        }\n        if (next > d) {\n            d = next;\n            e = c;\n            c = next;\n        }\n        if (next > e) {\n            e = next;\n            d = c;\n            c = next;\n        }\n        if (next > d) {\n            d = next;\n            e = c;\n            c = next;\n        }\n        if (next > e) {\n            e = next;\n            d = c;\n            c = next;\n        }\n        if (next > d) {\n            d = next;\n            e = c;\n            c = next;\n        }\n        if (next > e) {\n            e = next;\n            d = c;\n            c = next;\n        }\n        if (next > d) {\n            d = next;\n            e = c;\n            c = next;\n        }\n        if (next > e) {\n            e = next;\n            d = c;\n            c = next;\n        }\n        if (next > d) {\n            d = next;\n            e = c;\n            c = next;\n        }\n        if (next > e) {\n            e = next;\n            d = c;\n            c = next;\n        }\n        if (next > d) {\n            d = next;\n            e = c;\n            c = next;\n        \n}\nint main() {\n    auto candidate = prime_fib;\n    assert(candidate((1)) == (2));\n    assert(candidate((2)) == (3));\n    assert(candidate((3)) == (5));\n    assert(candidate((4)) == (13));\n    assert(candidate((5)) == (89));\n    assert(candidate((6)) == (233));\n    assert(candidate((7)) == (1597));\n    assert(candidate((8)) == (28657));\n    assert(candidate((9)) == (514229));\n    assert(candidate((10)) == (433494437));\n}\n",
      "timestamp": 1664293132,
      "stdout": "",
      "stderr": "/tmp/tmpxexmcy2g.cpp: In function \u2018long int prime_fib(long int)\u2019:\n/tmp/tmpxexmcy2g.cpp:94:12: error: a function-definition is not allowed here before \u2018{\u2019 token\n   94 | int main() {\n      |            ^\n/tmp/tmpxexmcy2g.cpp:106:1: error: expected \u2018}\u2019 at end of input\n  106 | }\n      | ^\n/tmp/tmpxexmcy2g.cpp:21:18: note: to match this \u2018{\u2019\n   21 |     while (true) {\n      |                  ^\n/tmp/tmpxexmcy2g.cpp:106:1: error: expected \u2018}\u2019 at end of input\n  106 | }\n      | ^\n/tmp/tmpxexmcy2g.cpp:14:24: note: to match this \u2018{\u2019\n   14 | long prime_fib(long n) {\n      |                        ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nlong prime_fib(long n) {\n    long a = 1, b = 1, c = 0;\n    while (c < n) {\n        c = a + b;\n        a = b;\n        b = c;\n    }\n    return b;\n}\nint main() {\n    auto candidate = prime_fib;\n    assert(candidate((1)) == (2));\n    assert(candidate((2)) == (3));\n    assert(candidate((3)) == (5));\n    assert(candidate((4)) == (13));\n    assert(candidate((5)) == (89));\n    assert(candidate((6)) == (233));\n    assert(candidate((7)) == (1597));\n    assert(candidate((8)) == (28657));\n    assert(candidate((9)) == (514229));\n    assert(candidate((10)) == (433494437));\n}\n",
      "timestamp": 1664293132,
      "stdout": "",
      "stderr": "tmpvoxmgi96: /tmp/tmpvoxmgi96.cpp:26: int main(): Assertion `candidate((2)) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nlong prime_fib(long n) {\n    assert(n >= 1);\n    if (n == 1) return 2;\n    if (n == 2) return 3;\n    long a = 1, b = 1, c = 2, d = 3, e = 5;\n    while (c < n) {\n        long tmp = c;\n        c = d + e;\n        d = e;\n        e = tmp;\n        if (c >= n) break;\n        a = b;\n        b = c;\n        c = d + e;\n        d = e;\n        e = tmp;\n    }\n    return b;\n}\nint main() {\n    auto candidate = prime_fib;\n    assert(candidate((1)) == (2));\n    assert(candidate((2)) == (3));\n    assert(candidate((3)) == (5));\n    assert(candidate((4)) == (13));\n    assert(candidate((5)) == (89));\n    assert(candidate((6)) == (233));\n    assert(candidate((7)) == (1597));\n    assert(candidate((8)) == (28657));\n    assert(candidate((9)) == (514229));\n    assert(candidate((10)) == (433494437));\n}\n",
      "timestamp": 1664293133,
      "stdout": "",
      "stderr": "tmphlzzctqh: /tmp/tmphlzzctqh.cpp:37: int main(): Assertion `candidate((3)) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nlong prime_fib(long n) {\n    assert(n >= 1);\n    if (n == 1) return 2;\n    if (n == 2) return 3;\n    long a = 1, b = 1, c = 2, d = 3;\n    while (n > 3) {\n        long t = a + b;\n        a = b;\n        b = c;\n        c = d;\n        d = t;\n        --n;\n    }\n    return d;\n}\nint main() {\n    auto candidate = prime_fib;\n    assert(candidate((1)) == (2));\n    assert(candidate((2)) == (3));\n    assert(candidate((3)) == (5));\n    assert(candidate((4)) == (13));\n    assert(candidate((5)) == (89));\n    assert(candidate((6)) == (233));\n    assert(candidate((7)) == (1597));\n    assert(candidate((8)) == (28657));\n    assert(candidate((9)) == (514229));\n    assert(candidate((10)) == (433494437));\n}\n",
      "timestamp": 1664293132,
      "stdout": "",
      "stderr": "tmpa2sfaq9z: /tmp/tmpa2sfaq9z.cpp:33: int main(): Assertion `candidate((3)) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nlong prime_fib(long n) {\n    assert(n >= 1);\n    if (n == 1) return 2;\n    if (n == 2) return 3;\n    long a = 1, b = 1, c = 2;\n    while (c < n) {\n        long tmp = a + b;\n        a = b;\n        b = tmp;\n        c = a + b;\n    }\n    return c;\n}\nint main() {\n    auto candidate = prime_fib;\n    assert(candidate((1)) == (2));\n    assert(candidate((2)) == (3));\n    assert(candidate((3)) == (5));\n    assert(candidate((4)) == (13));\n    assert(candidate((5)) == (89));\n    assert(candidate((6)) == (233));\n    assert(candidate((7)) == (1597));\n    assert(candidate((8)) == (28657));\n    assert(candidate((9)) == (514229));\n    assert(candidate((10)) == (433494437));\n}\n",
      "timestamp": 1664293125,
      "stdout": "",
      "stderr": "tmp2_podhg1: /tmp/tmp2_podhg1.cpp:31: int main(): Assertion `candidate((3)) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nlong prime_fib(long n) {\n    if (n < 2) return n;\n    long a = 1, b = 1, c = 2;\n    while (c < n) {\n        long tmp = a + b;\n        a = b;\n        b = tmp;\n        c = a + b;\n    }\n    return c;\n}\nint main() {\n    auto candidate = prime_fib;\n    assert(candidate((1)) == (2));\n    assert(candidate((2)) == (3));\n    assert(candidate((3)) == (5));\n    assert(candidate((4)) == (13));\n    assert(candidate((5)) == (89));\n    assert(candidate((6)) == (233));\n    assert(candidate((7)) == (1597));\n    assert(candidate((8)) == (28657));\n    assert(candidate((9)) == (514229));\n    assert(candidate((10)) == (433494437));\n}\n",
      "timestamp": 1664293125,
      "stdout": "",
      "stderr": "tmp_pjkfhhk: /tmp/tmp_pjkfhhk.cpp:27: int main(): Assertion `candidate((1)) == (2)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nlong prime_fib(long n) {\n    assert(n >= 1);\n    if (n == 1) return 2;\n    long p = prime_fib(n - 1);\n    long q = prime_fib(n - 2);\n    return (p + q) * (p + q + 1) / 2;\n}\nint main() {\n    auto candidate = prime_fib;\n    assert(candidate((1)) == (2));\n    assert(candidate((2)) == (3));\n    assert(candidate((3)) == (5));\n    assert(candidate((4)) == (13));\n    assert(candidate((5)) == (89));\n    assert(candidate((6)) == (233));\n    assert(candidate((7)) == (1597));\n    assert(candidate((8)) == (28657));\n    assert(candidate((9)) == (514229));\n    assert(candidate((10)) == (433494437));\n}\n",
      "timestamp": 1664293132,
      "stdout": "",
      "stderr": "tmp7or8de8h: /tmp/tmp7or8de8h.cpp:15: long int prime_fib(long int): Assertion `n >= 1' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nlong prime_fib(long n) {\n    assert(n >= 1);\n    if (n == 1) return 2;\n    if (n == 2) return 3;\n    long a = 1, b = 1, c = 2, d = 3;\n    while (c < n) {\n        long tmp = a + b;\n        a = b;\n        b = tmp;\n        tmp = c + d;\n        c = d;\n        d = tmp;\n    }\n    return d;\n}\nint main() {\n    auto candidate = prime_fib;\n    assert(candidate((1)) == (2));\n    assert(candidate((2)) == (3));\n    assert(candidate((3)) == (5));\n    assert(candidate((4)) == (13));\n    assert(candidate((5)) == (89));\n    assert(candidate((6)) == (233));\n    assert(candidate((7)) == (1597));\n    assert(candidate((8)) == (28657));\n    assert(candidate((9)) == (514229));\n    assert(candidate((10)) == (433494437));\n}\n",
      "timestamp": 1664293127,
      "stdout": "",
      "stderr": "tmpa0c5ic6n: /tmp/tmpa0c5ic6n.cpp:34: int main(): Assertion `candidate((4)) == (13)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nlong prime_fib(long n) {\n    if (n == 1) return 2;\n    if (n == 2) return 3;\n    if (n == 3) return 5;\n    long a = 1, b = 1, c = 2, d = 3, e = 5, f = 7, g = 11, h = 13, i = 17, j = 19, k = 23, l = 29, m = 31, n1 = 1, n2 = 1, n3 = 2, n4 = 3, n5 = 5, n6 = 7, n7 = 11, n8 = 13, n9 = 17, n10 = 19, n11 = 23, n12 = 29, n13 = 31, n14 = 37, n15 = 41, n16 = 43, n17 = 47, n18 = 53, n19 = 59, n20 = 61, n21 = 67, n22 = 71, n23 = 73, n24 = 79, n25 = 83, n26 = 89, n27 = 97, n28 = 101, n29 = 103, n30 = 107, n31 = 109, n32 = 113, n33 = 127, n34 = 131, n35 = 137, n36 = 139, n37 = 149, n38 = 151, n39 = 157, n40 = 163, n41 = 167, n42 = 173, n43 = 179, n44 = 181, n45 = 191, n46 = 193, n47 = 197, n48 = 199, n49 = 211, n50 = 223, n51 = 227, n52 = 229, n53 = 233, n54 = 239, n55 = 241, n56 = 251, n57 = 257, n58 = 263, n59 = 269, n60 = 271, n61 = 277, n62 = 281, n63 = 283, n64 = 293, n65 = 307, n66 = 311, n67 = 313, n68 = 317, n69 = 331, n70 = 337, n71 = 347, n72 = 349, n73 = 353, n74 = 359, n75 = 367, n76 = 373, n77 = 379, n78 = 383, n79 = 389, n80 = 397, n81 = 401, n82 = 409, n83 = 419, n84 = 421, n85 = 4\n}\nint main() {\n    auto candidate = prime_fib;\n    assert(candidate((1)) == (2));\n    assert(candidate((2)) == (3));\n    assert(candidate((3)) == (5));\n    assert(candidate((4)) == (13));\n    assert(candidate((5)) == (89));\n    assert(candidate((6)) == (233));\n    assert(candidate((7)) == (1597));\n    assert(candidate((8)) == (28657));\n    assert(candidate((9)) == (514229));\n    assert(candidate((10)) == (433494437));\n}\n",
      "timestamp": 1664293132,
      "stdout": "",
      "stderr": "/tmp/tmpgvr8g559.cpp: In function \u2018long int prime_fib(long int)\u2019:\n/tmp/tmpgvr8g559.cpp:19:1: error: expected \u2018,\u2019 or \u2018;\u2019 before \u2018}\u2019 token\n   19 | }\n      | ^\n/tmp/tmpgvr8g559.cpp:19:1: warning: control reaches end of non-void function [-Wreturn-type]\n   19 | }\n      | ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nlong prime_fib(long n) {\n    assert(n >= 1);\n    if (n == 1) return 2;\n    if (n == 2) return 3;\n    long a = 1, b = 1, c = 2, d = 3;\n    while (true) {\n        long p = a + b;\n        if (p > n) break;\n        if (p == n) return p;\n        a = b; b = c; c = d; d = p;\n    }\n    return d;\n}\nint main() {\n    auto candidate = prime_fib;\n    assert(candidate((1)) == (2));\n    assert(candidate((2)) == (3));\n    assert(candidate((3)) == (5));\n    assert(candidate((4)) == (13));\n    assert(candidate((5)) == (89));\n    assert(candidate((6)) == (233));\n    assert(candidate((7)) == (1597));\n    assert(candidate((8)) == (28657));\n    assert(candidate((9)) == (514229));\n    assert(candidate((10)) == (433494437));\n}\n",
      "timestamp": 1664293132,
      "stdout": "",
      "stderr": "tmpurb_3293: /tmp/tmpurb_3293.cpp:31: int main(): Assertion `candidate((3)) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nlong prime_fib(long n) {\n    if (n < 2) return n;\n    long a = 1, b = 1, c = 2;\n    while (c < n) {\n        long t = a + b;\n        a = b;\n        b = t;\n        c = a + b;\n    }\n    return c;\n}\nint main() {\n    auto candidate = prime_fib;\n    assert(candidate((1)) == (2));\n    assert(candidate((2)) == (3));\n    assert(candidate((3)) == (5));\n    assert(candidate((4)) == (13));\n    assert(candidate((5)) == (89));\n    assert(candidate((6)) == (233));\n    assert(candidate((7)) == (1597));\n    assert(candidate((8)) == (28657));\n    assert(candidate((9)) == (514229));\n    assert(candidate((10)) == (433494437));\n}\n",
      "timestamp": 1664293127,
      "stdout": "",
      "stderr": "tmp07ha27tn: /tmp/tmp07ha27tn.cpp:27: int main(): Assertion `candidate((1)) == (2)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nlong prime_fib(long n) {\n    assert(n >= 1);\n    if (n == 1) return 2;\n    if (n == 2) return 3;\n    long a = 1, b = 1, c = 2, d = 3;\n    while (c < n) {\n        long tmp = c;\n        c += d;\n        d += b;\n        b += a;\n        a = tmp;\n    }\n    return c;\n}\nint main() {\n    auto candidate = prime_fib;\n    assert(candidate((1)) == (2));\n    assert(candidate((2)) == (3));\n    assert(candidate((3)) == (5));\n    assert(candidate((4)) == (13));\n    assert(candidate((5)) == (89));\n    assert(candidate((6)) == (233));\n    assert(candidate((7)) == (1597));\n    assert(candidate((8)) == (28657));\n    assert(candidate((9)) == (514229));\n    assert(candidate((10)) == (433494437));\n}\n",
      "timestamp": 1664293133,
      "stdout": "",
      "stderr": "tmpskjh3m0n: /tmp/tmpskjh3m0n.cpp:33: int main(): Assertion `candidate((4)) == (13)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nlong prime_fib(long n) {\n    assert(n >= 0);\n    if (n == 0) return 0;\n    if (n == 1) return 2;\n    if (n == 2) return 3;\n    long a = 1, b = 1, c = 2, d = 3;\n    while (c < n) {\n        long t = a + b;\n        a = b;\n        b = c;\n        c = d;\n        d = t;\n    }\n    return d;\n}\nint main() {\n    auto candidate = prime_fib;\n    assert(candidate((1)) == (2));\n    assert(candidate((2)) == (3));\n    assert(candidate((3)) == (5));\n    assert(candidate((4)) == (13));\n    assert(candidate((5)) == (89));\n    assert(candidate((6)) == (233));\n    assert(candidate((7)) == (1597));\n    assert(candidate((8)) == (28657));\n    assert(candidate((9)) == (514229));\n    assert(candidate((10)) == (433494437));\n}\n",
      "timestamp": 1664293127,
      "stdout": "",
      "stderr": "tmpc5psx5vs: /tmp/tmpc5psx5vs.cpp:33: int main(): Assertion `candidate((3)) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nlong prime_fib(long n) {\n    assert(n >= 1);\n    if (n == 1) return 2;\n    if (n == 2) return 3;\n    long a = 1, b = 1, c = 2, d = 3;\n    while (c < n) {\n        long t = a + b;\n        a = b;\n        b = c;\n        c = d;\n        d = t;\n    }\n    return d;\n}\nint main() {\n    auto candidate = prime_fib;\n    assert(candidate((1)) == (2));\n    assert(candidate((2)) == (3));\n    assert(candidate((3)) == (5));\n    assert(candidate((4)) == (13));\n    assert(candidate((5)) == (89));\n    assert(candidate((6)) == (233));\n    assert(candidate((7)) == (1597));\n    assert(candidate((8)) == (28657));\n    assert(candidate((9)) == (514229));\n    assert(candidate((10)) == (433494437));\n}\n",
      "timestamp": 1664293121,
      "stdout": "",
      "stderr": "tmpgpsnruu1: /tmp/tmpgpsnruu1.cpp:32: int main(): Assertion `candidate((3)) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nlong prime_fib(long n) {\n    assert(n >= 1);\n    if (n == 1) return 2;\n    if (n == 2) return 3;\n    if (n == 3) return 5;\n    long a = 1, b = 1, c = 2, d = 3;\n    while (c < n) {\n        long tmp = c;\n        c += d;\n        d = b + a;\n        b = tmp;\n        a = d;\n    }\n    return d;\n}\nint main() {\n    auto candidate = prime_fib;\n    assert(candidate((1)) == (2));\n    assert(candidate((2)) == (3));\n    assert(candidate((3)) == (5));\n    assert(candidate((4)) == (13));\n    assert(candidate((5)) == (89));\n    assert(candidate((6)) == (233));\n    assert(candidate((7)) == (1597));\n    assert(candidate((8)) == (28657));\n    assert(candidate((9)) == (514229));\n    assert(candidate((10)) == (433494437));\n}\n",
      "timestamp": 1664293133,
      "stdout": "",
      "stderr": "tmpi4cb1rr_: /tmp/tmpi4cb1rr_.cpp:34: int main(): Assertion `candidate((4)) == (13)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nlong prime_fib(long n) {\n    assert(n >= 1);\n    if (n == 1) return 2;\n    if (n == 2) return 3;\n    long a = 1, b = 1, c = 2, d = 3;\n    while (n > 3) {\n        c = a + b;\n        a = b;\n        b = c;\n        d = a + b;\n        a = b;\n        b = d;\n        n -= 2;\n    }\n    return c;\n}\nint main() {\n    auto candidate = prime_fib;\n    assert(candidate((1)) == (2));\n    assert(candidate((2)) == (3));\n    assert(candidate((3)) == (5));\n    assert(candidate((4)) == (13));\n    assert(candidate((5)) == (89));\n    assert(candidate((6)) == (233));\n    assert(candidate((7)) == (1597));\n    assert(candidate((8)) == (28657));\n    assert(candidate((9)) == (514229));\n    assert(candidate((10)) == (433494437));\n}\n",
      "timestamp": 1664293134,
      "stdout": "",
      "stderr": "tmpzw9ae1zn: /tmp/tmpzw9ae1zn.cpp:34: int main(): Assertion `candidate((3)) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nlong prime_fib(long n) {\n    if (n < 2) return n;\n    if (n == 2) return 3;\n    if (n == 3) return 5;\n    long a = 1, b = 1, c = 2, d = 3;\n    while (true) {\n        if (n == 2) return c;\n        if (n == 3) return d;\n        if (n == 4) return 13;\n        if (n == 5) return 89;\n        long t = a + b;\n        a = b;\n        b = c;\n        c = d;\n        d = t;\n        n -= 2;\n    }\n}\nint main() {\n    auto candidate = prime_fib;\n    assert(candidate((1)) == (2));\n    assert(candidate((2)) == (3));\n    assert(candidate((3)) == (5));\n    assert(candidate((4)) == (13));\n    assert(candidate((5)) == (89));\n    assert(candidate((6)) == (233));\n    assert(candidate((7)) == (1597));\n    assert(candidate((8)) == (28657));\n    assert(candidate((9)) == (514229));\n    assert(candidate((10)) == (433494437));\n}\n",
      "timestamp": 1664293134,
      "stdout": "",
      "stderr": "tmpiw6q9fzw: /tmp/tmpiw6q9fzw.cpp:34: int main(): Assertion `candidate((1)) == (2)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nlong prime_fib(long n) {\n    if (n == 1) return 2;\n    if (n == 2) return 3;\n    if (n == 3) return 5;\n    if (n == 4) return 13;\n    long a = 1, b = 1, c = 2, d = 3, e = 5, f = 13, g = 89;\n    while (true) {\n        long t = a + b;\n        a = b;\n        b = c;\n        c = d;\n        d = e;\n        e = f;\n        f = g;\n        g = t;\n        if (g >= n) return g;\n        if (is_prime(g)) {\n            if (n % g == 0) return g;\n        }\n    }\n}\nint main() {\n    auto candidate = prime_fib;\n    assert(candidate((1)) == (2));\n    assert(candidate((2)) == (3));\n    assert(candidate((3)) == (5));\n    assert(candidate((4)) == (13));\n    assert(candidate((5)) == (89));\n    assert(candidate((6)) == (233));\n    assert(candidate((7)) == (1597));\n    assert(candidate((8)) == (28657));\n    assert(candidate((9)) == (514229));\n    assert(candidate((10)) == (433494437));\n}\n",
      "timestamp": 1664293134,
      "stdout": "",
      "stderr": "/tmp/tmp273bll0r.cpp: In function \u2018long int prime_fib(long int)\u2019:\n/tmp/tmp273bll0r.cpp:30:13: error: \u2018is_prime\u2019 was not declared in this scope\n   30 |         if (is_prime(g)) {\n      |             ^~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nlong prime_fib(long n) {\n    if (n <= 2) return n;\n    long a = 1, b = 1, c = 2, d = 3;\n    while (c < n) {\n        long t = a + b;\n        a = b;\n        b = c;\n        c = d;\n        d = t;\n    }\n    return d;\n}\nint main() {\n    auto candidate = prime_fib;\n    assert(candidate((1)) == (2));\n    assert(candidate((2)) == (3));\n    assert(candidate((3)) == (5));\n    assert(candidate((4)) == (13));\n    assert(candidate((5)) == (89));\n    assert(candidate((6)) == (233));\n    assert(candidate((7)) == (1597));\n    assert(candidate((8)) == (28657));\n    assert(candidate((9)) == (514229));\n    assert(candidate((10)) == (433494437));\n}\n",
      "timestamp": 1664293134,
      "stdout": "",
      "stderr": "tmp5dd8kji8: /tmp/tmp5dd8kji8.cpp:28: int main(): Assertion `candidate((1)) == (2)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nlong prime_fib(long n) {\n    assert(n > 0);\n    if (n == 1) return 2;\n    if (n == 2) return 3;\n    long a = 1, b = 1, c = 2, d = 3;\n    while (c < n) {\n        long tmp = a + b;\n        a = b;\n        b = c;\n        c = d;\n        d = tmp;\n    }\n    return d;\n}\nint main() {\n    auto candidate = prime_fib;\n    assert(candidate((1)) == (2));\n    assert(candidate((2)) == (3));\n    assert(candidate((3)) == (5));\n    assert(candidate((4)) == (13));\n    assert(candidate((5)) == (89));\n    assert(candidate((6)) == (233));\n    assert(candidate((7)) == (1597));\n    assert(candidate((8)) == (28657));\n    assert(candidate((9)) == (514229));\n    assert(candidate((10)) == (433494437));\n}\n",
      "timestamp": 1664293134,
      "stdout": "",
      "stderr": "tmp5228369k: /tmp/tmp5228369k.cpp:32: int main(): Assertion `candidate((3)) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nlong prime_fib(long n) {\n    assert(n >= 1);\n    if (n == 1) return 2;\n    if (n == 2) return 3;\n    long a = 1, b = 1, c = 2, d = 3;\n    while (n > 3) {\n        c = a + b;\n        d = c - a;\n        a = b;\n        b = c;\n        n -= 2;\n    }\n    return c;\n}\nint main() {\n    auto candidate = prime_fib;\n    assert(candidate((1)) == (2));\n    assert(candidate((2)) == (3));\n    assert(candidate((3)) == (5));\n    assert(candidate((4)) == (13));\n    assert(candidate((5)) == (89));\n    assert(candidate((6)) == (233));\n    assert(candidate((7)) == (1597));\n    assert(candidate((8)) == (28657));\n    assert(candidate((9)) == (514229));\n    assert(candidate((10)) == (433494437));\n}\n",
      "timestamp": 1664293134,
      "stdout": "",
      "stderr": "tmph05n4t1l: /tmp/tmph05n4t1l.cpp:32: int main(): Assertion `candidate((3)) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nlong prime_fib(long n) {\n    if (n == 1) return 2;\n    if (n == 2) return 3;\n    long a = 1, b = 1, c = 2, d = 3;\n    while (c < n) {\n        long t = a + b;\n        a = b;\n        b = c;\n        c = d;\n        d = t;\n    }\n    return d;\n}\nint main() {\n    auto candidate = prime_fib;\n    assert(candidate((1)) == (2));\n    assert(candidate((2)) == (3));\n    assert(candidate((3)) == (5));\n    assert(candidate((4)) == (13));\n    assert(candidate((5)) == (89));\n    assert(candidate((6)) == (233));\n    assert(candidate((7)) == (1597));\n    assert(candidate((8)) == (28657));\n    assert(candidate((9)) == (514229));\n    assert(candidate((10)) == (433494437));\n}\n",
      "timestamp": 1664293131,
      "stdout": "",
      "stderr": "tmpr15znpmp: /tmp/tmpr15znpmp.cpp:31: int main(): Assertion `candidate((3)) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nlong prime_fib(long n) {\n    assert(n >= 1);\n    if (n == 1) return 2;\n    long p = prime_fib(n-1);\n    long q = prime_fib(n-2);\n    return (p+q)*(p+q+1)/2;\n}\nint main() {\n    auto candidate = prime_fib;\n    assert(candidate((1)) == (2));\n    assert(candidate((2)) == (3));\n    assert(candidate((3)) == (5));\n    assert(candidate((4)) == (13));\n    assert(candidate((5)) == (89));\n    assert(candidate((6)) == (233));\n    assert(candidate((7)) == (1597));\n    assert(candidate((8)) == (28657));\n    assert(candidate((9)) == (514229));\n    assert(candidate((10)) == (433494437));\n}\n",
      "timestamp": 1664293134,
      "stdout": "",
      "stderr": "tmp_ngp1yff: /tmp/tmp_ngp1yff.cpp:15: long int prime_fib(long int): Assertion `n >= 1' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nlong prime_fib(long n) {\n    if (n < 2) return n;\n    long a = 1, b = 1, c = 2, d = 3;\n    while (c < n) {\n        long tmp = c;\n        c = d + b;\n        d = b;\n        b = tmp;\n    }\n    return c;\n}\nint main() {\n    auto candidate = prime_fib;\n    assert(candidate((1)) == (2));\n    assert(candidate((2)) == (3));\n    assert(candidate((3)) == (5));\n    assert(candidate((4)) == (13));\n    assert(candidate((5)) == (89));\n    assert(candidate((6)) == (233));\n    assert(candidate((7)) == (1597));\n    assert(candidate((8)) == (28657));\n    assert(candidate((9)) == (514229));\n    assert(candidate((10)) == (433494437));\n}\n",
      "timestamp": 1664293134,
      "stdout": "",
      "stderr": "tmp6zbucj67: /tmp/tmp6zbucj67.cpp:27: int main(): Assertion `candidate((1)) == (2)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nlong prime_fib(long n) {\n    if (n < 2) return n;\n    long a = 1, b = 1, c = 2;\n    while (c < n) {\n        long tmp = a + b;\n        a = b;\n        b = tmp;\n        c = a + b;\n    }\n    return c;\n}\nint main() {\n    auto candidate = prime_fib;\n    assert(candidate((1)) == (2));\n    assert(candidate((2)) == (3));\n    assert(candidate((3)) == (5));\n    assert(candidate((4)) == (13));\n    assert(candidate((5)) == (89));\n    assert(candidate((6)) == (233));\n    assert(candidate((7)) == (1597));\n    assert(candidate((8)) == (28657));\n    assert(candidate((9)) == (514229));\n    assert(candidate((10)) == (433494437));\n}\n",
      "timestamp": 1664293125,
      "stdout": "",
      "stderr": "tmp_pjkfhhk: /tmp/tmp_pjkfhhk.cpp:27: int main(): Assertion `candidate((1)) == (2)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nlong prime_fib(long n) {\n    if (n == 1) return 2;\n    if (n == 2) return 3;\n    if (n == 3) return 5;\n    long a = 1, b = 1, c = 2, d = 3, e = 5;\n    while (c < n) {\n        long tmp = c;\n        c = d + e;\n        d = e;\n        e = tmp;\n        if (c < n) {\n            tmp = c;\n            c = d + e;\n            d = e;\n            e = tmp;\n        }\n    }\n    return c;\n}\nint main() {\n    auto candidate = prime_fib;\n    assert(candidate((1)) == (2));\n    assert(candidate((2)) == (3));\n    assert(candidate((3)) == (5));\n    assert(candidate((4)) == (13));\n    assert(candidate((5)) == (89));\n    assert(candidate((6)) == (233));\n    assert(candidate((7)) == (1597));\n    assert(candidate((8)) == (28657));\n    assert(candidate((9)) == (514229));\n    assert(candidate((10)) == (433494437));\n}\n",
      "timestamp": 1664293123,
      "stdout": "",
      "stderr": "tmp4m7cs64w: /tmp/tmp4m7cs64w.cpp:38: int main(): Assertion `candidate((4)) == (13)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nlong prime_fib(long n) {\n    if (n == 1) return 2;\n    if (n == 2) return 3;\n    if (n == 3) return 5;\n    long a = 1, b = 1, c = 2, d = 2, e = 3, f = 3, g = 5, h = 5, i = 7, j = 7, k = 13, l = 13, m = 89, n1 = 89, n2 = 89, p = 89, q = 89, r = 89, s = 89, t = 89, u = 89, v = 89, w = 89, x = 89, y = 89, z = 89;\n    while (n > 1) {\n        if (n % 2 == 0) {\n            n /= 2;\n            a = b;\n            b = c;\n            c = d;\n            d = e;\n            e = f;\n            f = g;\n            g = h;\n            h = i;\n            i = j;\n            j = k;\n            k = l;\n            l = m;\n            m = n1;\n            n1 = n2;\n            n2 = p;\n            p = q;\n            q = r;\n            r = s;\n            s = t;\n            t = u;\n            u = v;\n            v = w;\n            w = x;\n            x = y;\n            y = z;\n            z = 0;\n        } else {\n            n1 = n2;\n            n2 = p;\n            p = q;\n            q = r;\n            r = s;\n            s = t;\n            t = u;\n            u = v;\n            v = w;\n            w = x;\n            x = y;\n            y = z;\n            z = n;\n        }\n    }\n    return z;\n}\nint main() {\n    auto candidate = prime_fib;\n    assert(candidate((1)) == (2));\n    assert(candidate((2)) == (3));\n    assert(candidate((3)) == (5));\n    assert(candidate((4)) == (13));\n    assert(candidate((5)) == (89));\n    assert(candidate((6)) == (233));\n    assert(candidate((7)) == (1597));\n    assert(candidate((8)) == (28657));\n    assert(candidate((9)) == (514229));\n    assert(candidate((10)) == (433494437));\n}\n",
      "timestamp": 1664293134,
      "stdout": "",
      "stderr": "tmpltz6h4rf: /tmp/tmpltz6h4rf.cpp:71: int main(): Assertion `candidate((4)) == (13)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nlong prime_fib(long n) {\n    if (n < 2) return n;\n    long a = 1, b = 1, c = 2;\n    while (c < n) {\n        long tmp = a + b;\n        a = b;\n        b = tmp;\n        c = a + b;\n    }\n    return c;\n}\nint main() {\n    auto candidate = prime_fib;\n    assert(candidate((1)) == (2));\n    assert(candidate((2)) == (3));\n    assert(candidate((3)) == (5));\n    assert(candidate((4)) == (13));\n    assert(candidate((5)) == (89));\n    assert(candidate((6)) == (233));\n    assert(candidate((7)) == (1597));\n    assert(candidate((8)) == (28657));\n    assert(candidate((9)) == (514229));\n    assert(candidate((10)) == (433494437));\n}\n",
      "timestamp": 1664293125,
      "stdout": "",
      "stderr": "tmp_pjkfhhk: /tmp/tmp_pjkfhhk.cpp:27: int main(): Assertion `candidate((1)) == (2)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nlong prime_fib(long n) {\n    assert(n >= 1);\n    if (n == 1) return 2;\n    if (n == 2) return 3;\n    long a = 1, b = 1, c = 2, d = 3;\n    while (n > 3) {\n        c = a + b;\n        a = b;\n        b = c;\n        d = a + b;\n        a = b;\n        b = d;\n        n -= 2;\n    }\n    return d;\n}\nint main() {\n    auto candidate = prime_fib;\n    assert(candidate((1)) == (2));\n    assert(candidate((2)) == (3));\n    assert(candidate((3)) == (5));\n    assert(candidate((4)) == (13));\n    assert(candidate((5)) == (89));\n    assert(candidate((6)) == (233));\n    assert(candidate((7)) == (1597));\n    assert(candidate((8)) == (28657));\n    assert(candidate((9)) == (514229));\n    assert(candidate((10)) == (433494437));\n}\n",
      "timestamp": 1664293132,
      "stdout": "",
      "stderr": "tmpbygc4trf: /tmp/tmpbygc4trf.cpp:34: int main(): Assertion `candidate((3)) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nlong prime_fib(long n) {\n    if (n < 2) return n;\n    long a = 1, b = 1, c = 2;\n    while (c < n) {\n        long t = a + b;\n        a = b;\n        b = t;\n        c = a + b;\n    }\n    return c;\n}\nint main() {\n    auto candidate = prime_fib;\n    assert(candidate((1)) == (2));\n    assert(candidate((2)) == (3));\n    assert(candidate((3)) == (5));\n    assert(candidate((4)) == (13));\n    assert(candidate((5)) == (89));\n    assert(candidate((6)) == (233));\n    assert(candidate((7)) == (1597));\n    assert(candidate((8)) == (28657));\n    assert(candidate((9)) == (514229));\n    assert(candidate((10)) == (433494437));\n}\n",
      "timestamp": 1664293127,
      "stdout": "",
      "stderr": "tmp07ha27tn: /tmp/tmp07ha27tn.cpp:27: int main(): Assertion `candidate((1)) == (2)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nlong prime_fib(long n) {\n    if (n == 1) return 2;\n    if (n == 2) return 3;\n    if (n == 3) return 5;\n    long a = 1, b = 1, c = 2, d = 3, e = 5, f = 8, g = 13, h = 21, i = 34, j = 55, k = 89;\n    while (true) {\n        long next = a + b;\n        a = b;\n        b = c;\n        c = d;\n        d = e;\n        e = f;\n        f = g;\n        g = h;\n        h = i;\n        i = j;\n        j = k;\n        k = next;\n        if (next > n) return k;\n        if (next > n) return k;\n        if (is_prime(next)) return next;\n        if (next > n) return k;\n        if (is_prime(next)) return next;\n        if (next > n) return k;\n        if (is_prime(next)) return next;\n        if (next > n) return k;\n        if (is_prime(next)) return next;\n        if (next > n) return k;\n        if (is_prime(next)) return next;\n        if (next > n) return k;\n        if (is_prime(next)) return next;\n        if (next > n) return k;\n        if (is_prime(next)) return next;\n        if (next > n) return k;\n        if (is_prime(next)) return next;\n        if (next > n) return k;\n        if (is_prime(next)) return next;\n        if (next > n) return k;\n        if (is_prime(next)) return next;\n        if (next > n) return k;\n        if (is_prime(next)) return next;\n        if (next > n) return k;\n        if (is_prime(next)) return next;\n        if (next > n) return k;\n        if (is_prime(next)) return next;\n        if (next > n) return k;\n        if (is_prime(next)) return next;\n        if (\n}\nint main() {\n    auto candidate = prime_fib;\n    assert(candidate((1)) == (2));\n    assert(candidate((2)) == (3));\n    assert(candidate((3)) == (5));\n    assert(candidate((4)) == (13));\n    assert(candidate((5)) == (89));\n    assert(candidate((6)) == (233));\n    assert(candidate((7)) == (1597));\n    assert(candidate((8)) == (28657));\n    assert(candidate((9)) == (514229));\n    assert(candidate((10)) == (433494437));\n}\n",
      "timestamp": 1664293134,
      "stdout": "",
      "stderr": "/tmp/tmph4c6g7nz.cpp: In function \u2018long int prime_fib(long int)\u2019:\n/tmp/tmph4c6g7nz.cpp:34:13: error: \u2018is_prime\u2019 was not declared in this scope\n   34 |         if (is_prime(next)) return next;\n      |             ^~~~~~~~\n/tmp/tmph4c6g7nz.cpp:36:13: error: \u2018is_prime\u2019 was not declared in this scope\n   36 |         if (is_prime(next)) return next;\n      |             ^~~~~~~~\n/tmp/tmph4c6g7nz.cpp:38:13: error: \u2018is_prime\u2019 was not declared in this scope\n   38 |         if (is_prime(next)) return next;\n      |             ^~~~~~~~\n/tmp/tmph4c6g7nz.cpp:40:13: error: \u2018is_prime\u2019 was not declared in this scope\n   40 |         if (is_prime(next)) return next;\n      |             ^~~~~~~~\n/tmp/tmph4c6g7nz.cpp:42:13: error: \u2018is_prime\u2019 was not declared in this scope\n   42 |         if (is_prime(next)) return next;\n      |             ^~~~~~~~\n/tmp/tmph4c6g7nz.cpp:44:13: error: \u2018is_prime\u2019 was not declared in this scope\n   44 |         if (is_prime(next)) return next;\n      |             ^~~~~~~~\n/tmp/tmph4c6g7nz.cpp:46:13: error: \u2018is_prime\u2019 was not declared in this scope\n   46 |         if (is_prime(next)) return next;\n      |             ^~~~~~~~\n/tmp/tmph4c6g7nz.cpp:48:13: error: \u2018is_prime\u2019 was not declared in this scope\n   48 |         if (is_prime(next)) return next;\n      |             ^~~~~~~~\n/tmp/tmph4c6g7nz.cpp:50:13: error: \u2018is_prime\u2019 was not declared in this scope\n   50 |         if (is_prime(next)) return next;\n      |             ^~~~~~~~\n/tmp/tmph4c6g7nz.cpp:52:13: error: \u2018is_prime\u2019 was not declared in this scope\n   52 |         if (is_prime(next)) return next;\n      |             ^~~~~~~~\n/tmp/tmph4c6g7nz.cpp:54:13: error: \u2018is_prime\u2019 was not declared in this scope\n   54 |         if (is_prime(next)) return next;\n      |             ^~~~~~~~\n/tmp/tmph4c6g7nz.cpp:56:13: error: \u2018is_prime\u2019 was not declared in this scope\n   56 |         if (is_prime(next)) return next;\n      |             ^~~~~~~~\n/tmp/tmph4c6g7nz.cpp:58:13: error: \u2018is_prime\u2019 was not declared in ",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}