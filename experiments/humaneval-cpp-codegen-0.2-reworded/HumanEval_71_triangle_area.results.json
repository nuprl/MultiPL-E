{
  "name": "HumanEval_71_triangle_area",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.00\n// >>> triangle_area(1, 2, 10)\n// -1\nfloat triangle_area(long a, long b, long c) {\n",
  "tests": "}\nint main() {\n    auto candidate = triangle_area;\n    assert(candidate((3), (4), (5)) == (6.0));\n    assert(candidate((1), (2), (10)) == (float(-1)));\n    assert(candidate((4), (8), (5)) == (8.18));\n    assert(candidate((2), (2), (2)) == (1.73));\n    assert(candidate((1), (2), (3)) == (float(-1)));\n    assert(candidate((10), (5), (7)) == (16.25));\n    assert(candidate((2), (6), (3)) == (float(-1)));\n    assert(candidate((1), (1), (1)) == (0.43));\n    assert(candidate((2), (2), (10)) == (float(-1)));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.00\n// >>> triangle_area(1, 2, 10)\n// -1\nfloat triangle_area(long a, long b, long c) {\n    float area = 0.0;\n    if (a + b > c && b + c > a && c + a > b) {\n        area = (float)(a + b + c) / 2.0;\n        area = area * area;\n    }\n    return area;\n}\nint main() {\n    auto candidate = triangle_area;\n    assert(candidate((3), (4), (5)) == (6.0));\n    assert(candidate((1), (2), (10)) == (float(-1)));\n    assert(candidate((4), (8), (5)) == (8.18));\n    assert(candidate((2), (2), (2)) == (1.73));\n    assert(candidate((1), (2), (3)) == (float(-1)));\n    assert(candidate((10), (5), (7)) == (16.25));\n    assert(candidate((2), (6), (3)) == (float(-1)));\n    assert(candidate((1), (1), (1)) == (0.43));\n    assert(candidate((2), (2), (10)) == (float(-1)));\n}\n",
      "timestamp": 1664292645,
      "stdout": "",
      "stderr": "tmpk2ukx3y2: /tmp/tmpk2ukx3y2.cpp:23: int main(): Assertion `candidate((3), (4), (5)) == (6.0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.00\n// >>> triangle_area(1, 2, 10)\n// -1\nfloat triangle_area(long a, long b, long c) {\n    float area = 0.0;\n    if (a + b > c && b + c > a && a + c > b) {\n        area = (float) (a * b * c) / 2.0;\n    }\n    return area;\n}\nint main() {\n    auto candidate = triangle_area;\n    assert(candidate((3), (4), (5)) == (6.0));\n    assert(candidate((1), (2), (10)) == (float(-1)));\n    assert(candidate((4), (8), (5)) == (8.18));\n    assert(candidate((2), (2), (2)) == (1.73));\n    assert(candidate((1), (2), (3)) == (float(-1)));\n    assert(candidate((10), (5), (7)) == (16.25));\n    assert(candidate((2), (6), (3)) == (float(-1)));\n    assert(candidate((1), (1), (1)) == (0.43));\n    assert(candidate((2), (2), (10)) == (float(-1)));\n}\n",
      "timestamp": 1664292645,
      "stdout": "",
      "stderr": "tmpp44u3deo: /tmp/tmpp44u3deo.cpp:22: int main(): Assertion `candidate((3), (4), (5)) == (6.0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.00\n// >>> triangle_area(1, 2, 10)\n// -1\nfloat triangle_area(long a, long b, long c) {\n    float area = 0.0;\n    if (a + b > c && a + c > b && b + c > a) {\n        area = (float)(0.5 * (a + b + c) * sqrt(pow(a, 2) + pow(b, 2) + pow(c, 2)));\n    }\n    return area;\n}\nint main() {\n    auto candidate = triangle_area;\n    assert(candidate((3), (4), (5)) == (6.0));\n    assert(candidate((1), (2), (10)) == (float(-1)));\n    assert(candidate((4), (8), (5)) == (8.18));\n    assert(candidate((2), (2), (2)) == (1.73));\n    assert(candidate((1), (2), (3)) == (float(-1)));\n    assert(candidate((10), (5), (7)) == (16.25));\n    assert(candidate((2), (6), (3)) == (float(-1)));\n    assert(candidate((1), (1), (1)) == (0.43));\n    assert(candidate((2), (2), (10)) == (float(-1)));\n}\n",
      "timestamp": 1664292645,
      "stdout": "",
      "stderr": "tmpahptgdyd: /tmp/tmpahptgdyd.cpp:22: int main(): Assertion `candidate((3), (4), (5)) == (6.0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.00\n// >>> triangle_area(1, 2, 10)\n// -1\nfloat triangle_area(long a, long b, long c) {\n    if (a + b < c || a + c < b || b + c < a)\n        return -1;\n    return (a + b + c) / 2.0;\n}\nint main() {\n    auto candidate = triangle_area;\n    assert(candidate((3), (4), (5)) == (6.0));\n    assert(candidate((1), (2), (10)) == (float(-1)));\n    assert(candidate((4), (8), (5)) == (8.18));\n    assert(candidate((2), (2), (2)) == (1.73));\n    assert(candidate((1), (2), (3)) == (float(-1)));\n    assert(candidate((10), (5), (7)) == (16.25));\n    assert(candidate((2), (6), (3)) == (float(-1)));\n    assert(candidate((1), (1), (1)) == (0.43));\n    assert(candidate((2), (2), (10)) == (float(-1)));\n}\n",
      "timestamp": 1664292645,
      "stdout": "",
      "stderr": "tmpq7a0t016: /tmp/tmpq7a0t016.cpp:22: int main(): Assertion `candidate((4), (8), (5)) == (8.18)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.00\n// >>> triangle_area(1, 2, 10)\n// -1\nfloat triangle_area(long a, long b, long c) {\n    float area = 0.0;\n    if (a + b > c && a + c > b && b + c > a) {\n        area = (float) (a + b + c) / 2;\n        area = area * area;\n    }\n    return area;\n}\nint main() {\n    auto candidate = triangle_area;\n    assert(candidate((3), (4), (5)) == (6.0));\n    assert(candidate((1), (2), (10)) == (float(-1)));\n    assert(candidate((4), (8), (5)) == (8.18));\n    assert(candidate((2), (2), (2)) == (1.73));\n    assert(candidate((1), (2), (3)) == (float(-1)));\n    assert(candidate((10), (5), (7)) == (16.25));\n    assert(candidate((2), (6), (3)) == (float(-1)));\n    assert(candidate((1), (1), (1)) == (0.43));\n    assert(candidate((2), (2), (10)) == (float(-1)));\n}\n",
      "timestamp": 1664292645,
      "stdout": "",
      "stderr": "tmpnewxlfcv: /tmp/tmpnewxlfcv.cpp:23: int main(): Assertion `candidate((3), (4), (5)) == (6.0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.00\n// >>> triangle_area(1, 2, 10)\n// -1\nfloat triangle_area(long a, long b, long c) {\n    if (a + b <= c || b + c <= a || a + c <= b) {\n        return -1;\n    }\n    return (a + b + c) / 2;\n}\nint main() {\n    auto candidate = triangle_area;\n    assert(candidate((3), (4), (5)) == (6.0));\n    assert(candidate((1), (2), (10)) == (float(-1)));\n    assert(candidate((4), (8), (5)) == (8.18));\n    assert(candidate((2), (2), (2)) == (1.73));\n    assert(candidate((1), (2), (3)) == (float(-1)));\n    assert(candidate((10), (5), (7)) == (16.25));\n    assert(candidate((2), (6), (3)) == (float(-1)));\n    assert(candidate((1), (1), (1)) == (0.43));\n    assert(candidate((2), (2), (10)) == (float(-1)));\n}\n",
      "timestamp": 1664292645,
      "stdout": "",
      "stderr": "tmp3_fw44k1: /tmp/tmp3_fw44k1.cpp:23: int main(): Assertion `candidate((4), (8), (5)) == (8.18)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.00\n// >>> triangle_area(1, 2, 10)\n// -1\nfloat triangle_area(long a, long b, long c) {\n    if (a + b <= c || a + c <= b || b + c <= a)\n        return -1;\n    return (float)(a + b + c) / 2;\n}\nint main() {\n    auto candidate = triangle_area;\n    assert(candidate((3), (4), (5)) == (6.0));\n    assert(candidate((1), (2), (10)) == (float(-1)));\n    assert(candidate((4), (8), (5)) == (8.18));\n    assert(candidate((2), (2), (2)) == (1.73));\n    assert(candidate((1), (2), (3)) == (float(-1)));\n    assert(candidate((10), (5), (7)) == (16.25));\n    assert(candidate((2), (6), (3)) == (float(-1)));\n    assert(candidate((1), (1), (1)) == (0.43));\n    assert(candidate((2), (2), (10)) == (float(-1)));\n}\n",
      "timestamp": 1664292645,
      "stdout": "",
      "stderr": "tmpfhpewq9v: /tmp/tmpfhpewq9v.cpp:22: int main(): Assertion `candidate((4), (8), (5)) == (8.18)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.00\n// >>> triangle_area(1, 2, 10)\n// -1\nfloat triangle_area(long a, long b, long c) {\n    if (a + b <= c || b + c <= a || a + c <= b) {\n        return -1;\n    }\n    float area = 0.5 * (a + b + c);\n    area = area - std::sqrt(area);\n    return area;\n}\nint main() {\n    auto candidate = triangle_area;\n    assert(candidate((3), (4), (5)) == (6.0));\n    assert(candidate((1), (2), (10)) == (float(-1)));\n    assert(candidate((4), (8), (5)) == (8.18));\n    assert(candidate((2), (2), (2)) == (1.73));\n    assert(candidate((1), (2), (3)) == (float(-1)));\n    assert(candidate((10), (5), (7)) == (16.25));\n    assert(candidate((2), (6), (3)) == (float(-1)));\n    assert(candidate((1), (1), (1)) == (0.43));\n    assert(candidate((2), (2), (10)) == (float(-1)));\n}\n",
      "timestamp": 1664292645,
      "stdout": "",
      "stderr": "tmpho09l1hq: /tmp/tmpho09l1hq.cpp:23: int main(): Assertion `candidate((3), (4), (5)) == (6.0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.00\n// >>> triangle_area(1, 2, 10)\n// -1\nfloat triangle_area(long a, long b, long c) {\n    float area = 0.0;\n    if (a + b > c && b + c > a && a + c > b) {\n        area = (a + b + c) / 2.0;\n    }\n    return area;\n}\nint main() {\n    auto candidate = triangle_area;\n    assert(candidate((3), (4), (5)) == (6.0));\n    assert(candidate((1), (2), (10)) == (float(-1)));\n    assert(candidate((4), (8), (5)) == (8.18));\n    assert(candidate((2), (2), (2)) == (1.73));\n    assert(candidate((1), (2), (3)) == (float(-1)));\n    assert(candidate((10), (5), (7)) == (16.25));\n    assert(candidate((2), (6), (3)) == (float(-1)));\n    assert(candidate((1), (1), (1)) == (0.43));\n    assert(candidate((2), (2), (10)) == (float(-1)));\n}\n",
      "timestamp": 1664292645,
      "stdout": "",
      "stderr": "tmpc2emahhh: /tmp/tmpc2emahhh.cpp:23: int main(): Assertion `candidate((1), (2), (10)) == (float(-1))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.00\n// >>> triangle_area(1, 2, 10)\n// -1\nfloat triangle_area(long a, long b, long c) {\n    if (a + b <= c || b + c <= a || a + c <= b)\n        return -1;\n    return (a + b + c) / 2;\n}\nint main() {\n    auto candidate = triangle_area;\n    assert(candidate((3), (4), (5)) == (6.0));\n    assert(candidate((1), (2), (10)) == (float(-1)));\n    assert(candidate((4), (8), (5)) == (8.18));\n    assert(candidate((2), (2), (2)) == (1.73));\n    assert(candidate((1), (2), (3)) == (float(-1)));\n    assert(candidate((10), (5), (7)) == (16.25));\n    assert(candidate((2), (6), (3)) == (float(-1)));\n    assert(candidate((1), (1), (1)) == (0.43));\n    assert(candidate((2), (2), (10)) == (float(-1)));\n}\n",
      "timestamp": 1664292645,
      "stdout": "",
      "stderr": "tmph18j972r: /tmp/tmph18j972r.cpp:22: int main(): Assertion `candidate((4), (8), (5)) == (8.18)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.00\n// >>> triangle_area(1, 2, 10)\n// -1\nfloat triangle_area(long a, long b, long c) {\n    float area = 0;\n    if (a + b > c && b + c > a && a + c > b) {\n        area = (float) (a * b * c) / 2;\n    }\n    return area;\n}\nint main() {\n    auto candidate = triangle_area;\n    assert(candidate((3), (4), (5)) == (6.0));\n    assert(candidate((1), (2), (10)) == (float(-1)));\n    assert(candidate((4), (8), (5)) == (8.18));\n    assert(candidate((2), (2), (2)) == (1.73));\n    assert(candidate((1), (2), (3)) == (float(-1)));\n    assert(candidate((10), (5), (7)) == (16.25));\n    assert(candidate((2), (6), (3)) == (float(-1)));\n    assert(candidate((1), (1), (1)) == (0.43));\n    assert(candidate((2), (2), (10)) == (float(-1)));\n}\n",
      "timestamp": 1664292645,
      "stdout": "",
      "stderr": "tmp_mpramxl: /tmp/tmp_mpramxl.cpp:22: int main(): Assertion `candidate((3), (4), (5)) == (6.0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.00\n// >>> triangle_area(1, 2, 10)\n// -1\nfloat triangle_area(long a, long b, long c) {\n    float area = 0.0;\n    if (a + b > c && a + c > b && b + c > a) {\n        area = (float) (a + b + c) / 2.0;\n        area = area * area / 2.0;\n    }\n    return area;\n}\nint main() {\n    auto candidate = triangle_area;\n    assert(candidate((3), (4), (5)) == (6.0));\n    assert(candidate((1), (2), (10)) == (float(-1)));\n    assert(candidate((4), (8), (5)) == (8.18));\n    assert(candidate((2), (2), (2)) == (1.73));\n    assert(candidate((1), (2), (3)) == (float(-1)));\n    assert(candidate((10), (5), (7)) == (16.25));\n    assert(candidate((2), (6), (3)) == (float(-1)));\n    assert(candidate((1), (1), (1)) == (0.43));\n    assert(candidate((2), (2), (10)) == (float(-1)));\n}\n",
      "timestamp": 1664292645,
      "stdout": "",
      "stderr": "tmp5pwsuy0y: /tmp/tmp5pwsuy0y.cpp:23: int main(): Assertion `candidate((3), (4), (5)) == (6.0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.00\n// >>> triangle_area(1, 2, 10)\n// -1\nfloat triangle_area(long a, long b, long c) {\n    float area;\n    area = (float) (a + b + c) / 2;\n    area = area - (area - a) - (area - b) - (area - c);\n    return area;\n}\nint main() {\n    auto candidate = triangle_area;\n    assert(candidate((3), (4), (5)) == (6.0));\n    assert(candidate((1), (2), (10)) == (float(-1)));\n    assert(candidate((4), (8), (5)) == (8.18));\n    assert(candidate((2), (2), (2)) == (1.73));\n    assert(candidate((1), (2), (3)) == (float(-1)));\n    assert(candidate((10), (5), (7)) == (16.25));\n    assert(candidate((2), (6), (3)) == (float(-1)));\n    assert(candidate((1), (1), (1)) == (0.43));\n    assert(candidate((2), (2), (10)) == (float(-1)));\n}\n",
      "timestamp": 1664292645,
      "stdout": "",
      "stderr": "tmpfkne5c3d: /tmp/tmpfkne5c3d.cpp:21: int main(): Assertion `candidate((3), (4), (5)) == (6.0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.00\n// >>> triangle_area(1, 2, 10)\n// -1\nfloat triangle_area(long a, long b, long c) {\n    float area = 0.0;\n    if (a + b > c && a + c > b && b + c > a) {\n        area = (a + b + c) / 2.0;\n        area = area * area;\n    }\n    return area;\n}\nint main() {\n    auto candidate = triangle_area;\n    assert(candidate((3), (4), (5)) == (6.0));\n    assert(candidate((1), (2), (10)) == (float(-1)));\n    assert(candidate((4), (8), (5)) == (8.18));\n    assert(candidate((2), (2), (2)) == (1.73));\n    assert(candidate((1), (2), (3)) == (float(-1)));\n    assert(candidate((10), (5), (7)) == (16.25));\n    assert(candidate((2), (6), (3)) == (float(-1)));\n    assert(candidate((1), (1), (1)) == (0.43));\n    assert(candidate((2), (2), (10)) == (float(-1)));\n}\n",
      "timestamp": 1664292644,
      "stdout": "",
      "stderr": "tmp7sy7y04g: /tmp/tmp7sy7y04g.cpp:23: int main(): Assertion `candidate((3), (4), (5)) == (6.0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.00\n// >>> triangle_area(1, 2, 10)\n// -1\nfloat triangle_area(long a, long b, long c) {\n    float area = 0;\n    if (a + b > c && b + c > a && c + a > b) {\n        area = (float) (a + b + c) / 2;\n        area = area * area / 2;\n    }\n    return area;\n}\nint main() {\n    auto candidate = triangle_area;\n    assert(candidate((3), (4), (5)) == (6.0));\n    assert(candidate((1), (2), (10)) == (float(-1)));\n    assert(candidate((4), (8), (5)) == (8.18));\n    assert(candidate((2), (2), (2)) == (1.73));\n    assert(candidate((1), (2), (3)) == (float(-1)));\n    assert(candidate((10), (5), (7)) == (16.25));\n    assert(candidate((2), (6), (3)) == (float(-1)));\n    assert(candidate((1), (1), (1)) == (0.43));\n    assert(candidate((2), (2), (10)) == (float(-1)));\n}\n",
      "timestamp": 1664292645,
      "stdout": "",
      "stderr": "tmpnq1dc0p8: /tmp/tmpnq1dc0p8.cpp:23: int main(): Assertion `candidate((3), (4), (5)) == (6.0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.00\n// >>> triangle_area(1, 2, 10)\n// -1\nfloat triangle_area(long a, long b, long c) {\n    float area = 0.0;\n    if (a + b > c && a + c > b && b + c > a) {\n        area = (a + b + c) / 2.0;\n    }\n    return area;\n}\nint main() {\n    auto candidate = triangle_area;\n    assert(candidate((3), (4), (5)) == (6.0));\n    assert(candidate((1), (2), (10)) == (float(-1)));\n    assert(candidate((4), (8), (5)) == (8.18));\n    assert(candidate((2), (2), (2)) == (1.73));\n    assert(candidate((1), (2), (3)) == (float(-1)));\n    assert(candidate((10), (5), (7)) == (16.25));\n    assert(candidate((2), (6), (3)) == (float(-1)));\n    assert(candidate((1), (1), (1)) == (0.43));\n    assert(candidate((2), (2), (10)) == (float(-1)));\n}\n",
      "timestamp": 1664292645,
      "stdout": "",
      "stderr": "tmpe7wwz5l7: /tmp/tmpe7wwz5l7.cpp:23: int main(): Assertion `candidate((1), (2), (10)) == (float(-1))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.00\n// >>> triangle_area(1, 2, 10)\n// -1\nfloat triangle_area(long a, long b, long c) {\n    float area = 0;\n    if (a + b > c) {\n        area = (float) (a + b - c) / 2;\n    }\n    return area;\n}\nint main() {\n    auto candidate = triangle_area;\n    assert(candidate((3), (4), (5)) == (6.0));\n    assert(candidate((1), (2), (10)) == (float(-1)));\n    assert(candidate((4), (8), (5)) == (8.18));\n    assert(candidate((2), (2), (2)) == (1.73));\n    assert(candidate((1), (2), (3)) == (float(-1)));\n    assert(candidate((10), (5), (7)) == (16.25));\n    assert(candidate((2), (6), (3)) == (float(-1)));\n    assert(candidate((1), (1), (1)) == (0.43));\n    assert(candidate((2), (2), (10)) == (float(-1)));\n}\n",
      "timestamp": 1664292644,
      "stdout": "",
      "stderr": "tmpbaygdssi: /tmp/tmpbaygdssi.cpp:22: int main(): Assertion `candidate((3), (4), (5)) == (6.0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.00\n// >>> triangle_area(1, 2, 10)\n// -1\nfloat triangle_area(long a, long b, long c) {\n    if (a + b < c || a + c < b || b + c < a) return -1;\n    return (a + b + c) / 2.0;\n}\nint main() {\n    auto candidate = triangle_area;\n    assert(candidate((3), (4), (5)) == (6.0));\n    assert(candidate((1), (2), (10)) == (float(-1)));\n    assert(candidate((4), (8), (5)) == (8.18));\n    assert(candidate((2), (2), (2)) == (1.73));\n    assert(candidate((1), (2), (3)) == (float(-1)));\n    assert(candidate((10), (5), (7)) == (16.25));\n    assert(candidate((2), (6), (3)) == (float(-1)));\n    assert(candidate((1), (1), (1)) == (0.43));\n    assert(candidate((2), (2), (10)) == (float(-1)));\n}\n",
      "timestamp": 1664292645,
      "stdout": "",
      "stderr": "tmpnduvapsm: /tmp/tmpnduvapsm.cpp:21: int main(): Assertion `candidate((4), (8), (5)) == (8.18)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.00\n// >>> triangle_area(1, 2, 10)\n// -1\nfloat triangle_area(long a, long b, long c) {\n    float area = 0.0;\n    if (a + b > c && b + c > a && c + a > b) {\n        area = (float) (a * b * c) / 2.0;\n    }\n    return area;\n}\nint main() {\n    auto candidate = triangle_area;\n    assert(candidate((3), (4), (5)) == (6.0));\n    assert(candidate((1), (2), (10)) == (float(-1)));\n    assert(candidate((4), (8), (5)) == (8.18));\n    assert(candidate((2), (2), (2)) == (1.73));\n    assert(candidate((1), (2), (3)) == (float(-1)));\n    assert(candidate((10), (5), (7)) == (16.25));\n    assert(candidate((2), (6), (3)) == (float(-1)));\n    assert(candidate((1), (1), (1)) == (0.43));\n    assert(candidate((2), (2), (10)) == (float(-1)));\n}\n",
      "timestamp": 1664292645,
      "stdout": "",
      "stderr": "tmpuiefrdnj: /tmp/tmpuiefrdnj.cpp:22: int main(): Assertion `candidate((3), (4), (5)) == (6.0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.00\n// >>> triangle_area(1, 2, 10)\n// -1\nfloat triangle_area(long a, long b, long c) {\n    float area;\n    if (a + b > c || a + c > b || b + c > a) {\n        area = -1;\n    } else {\n        area = (float) (a + b + c) / 2;\n    }\n    return area;\n}\nint main() {\n    auto candidate = triangle_area;\n    assert(candidate((3), (4), (5)) == (6.0));\n    assert(candidate((1), (2), (10)) == (float(-1)));\n    assert(candidate((4), (8), (5)) == (8.18));\n    assert(candidate((2), (2), (2)) == (1.73));\n    assert(candidate((1), (2), (3)) == (float(-1)));\n    assert(candidate((10), (5), (7)) == (16.25));\n    assert(candidate((2), (6), (3)) == (float(-1)));\n    assert(candidate((1), (1), (1)) == (0.43));\n    assert(candidate((2), (2), (10)) == (float(-1)));\n}\n",
      "timestamp": 1664292644,
      "stdout": "",
      "stderr": "tmpn12a5glp: /tmp/tmpn12a5glp.cpp:24: int main(): Assertion `candidate((3), (4), (5)) == (6.0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.00\n// >>> triangle_area(1, 2, 10)\n// -1\nfloat triangle_area(long a, long b, long c) {\n    float area = 0.0;\n    if (a + b > c && b + c > a && a + c > b) {\n        area = (float)(0.5 * (a + b + c) * sqrt(pow(a, 2) + pow(b, 2) + pow(c, 2)));\n    }\n    return area;\n}\nint main() {\n    auto candidate = triangle_area;\n    assert(candidate((3), (4), (5)) == (6.0));\n    assert(candidate((1), (2), (10)) == (float(-1)));\n    assert(candidate((4), (8), (5)) == (8.18));\n    assert(candidate((2), (2), (2)) == (1.73));\n    assert(candidate((1), (2), (3)) == (float(-1)));\n    assert(candidate((10), (5), (7)) == (16.25));\n    assert(candidate((2), (6), (3)) == (float(-1)));\n    assert(candidate((1), (1), (1)) == (0.43));\n    assert(candidate((2), (2), (10)) == (float(-1)));\n}\n",
      "timestamp": 1664292645,
      "stdout": "",
      "stderr": "tmpxhf5sacj: /tmp/tmpxhf5sacj.cpp:22: int main(): Assertion `candidate((3), (4), (5)) == (6.0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.00\n// >>> triangle_area(1, 2, 10)\n// -1\nfloat triangle_area(long a, long b, long c) {\n    float area;\n    area = (float) (a + b + c) / 2;\n    area = area - (area * (area - a) * (area - b) * (area - c)) / (4 * area);\n    return area;\n}\nint main() {\n    auto candidate = triangle_area;\n    assert(candidate((3), (4), (5)) == (6.0));\n    assert(candidate((1), (2), (10)) == (float(-1)));\n    assert(candidate((4), (8), (5)) == (8.18));\n    assert(candidate((2), (2), (2)) == (1.73));\n    assert(candidate((1), (2), (3)) == (float(-1)));\n    assert(candidate((10), (5), (7)) == (16.25));\n    assert(candidate((2), (6), (3)) == (float(-1)));\n    assert(candidate((1), (1), (1)) == (0.43));\n    assert(candidate((2), (2), (10)) == (float(-1)));\n}\n",
      "timestamp": 1664292645,
      "stdout": "",
      "stderr": "tmpg1us89_6: /tmp/tmpg1us89_6.cpp:21: int main(): Assertion `candidate((3), (4), (5)) == (6.0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.00\n// >>> triangle_area(1, 2, 10)\n// -1\nfloat triangle_area(long a, long b, long c) {\n    float area = 0.0;\n    if (a + b > c && a + c > b && b + c > a) {\n        area = (float)(0.5 * (a + b + c) * sqrt(pow(a, 2) + pow(b, 2) + pow(c, 2)));\n    }\n    return area;\n}\nint main() {\n    auto candidate = triangle_area;\n    assert(candidate((3), (4), (5)) == (6.0));\n    assert(candidate((1), (2), (10)) == (float(-1)));\n    assert(candidate((4), (8), (5)) == (8.18));\n    assert(candidate((2), (2), (2)) == (1.73));\n    assert(candidate((1), (2), (3)) == (float(-1)));\n    assert(candidate((10), (5), (7)) == (16.25));\n    assert(candidate((2), (6), (3)) == (float(-1)));\n    assert(candidate((1), (1), (1)) == (0.43));\n    assert(candidate((2), (2), (10)) == (float(-1)));\n}\n",
      "timestamp": 1664292645,
      "stdout": "",
      "stderr": "tmpahptgdyd: /tmp/tmpahptgdyd.cpp:22: int main(): Assertion `candidate((3), (4), (5)) == (6.0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.00\n// >>> triangle_area(1, 2, 10)\n// -1\nfloat triangle_area(long a, long b, long c) {\n    if (a + b <= c || a + c <= b || b + c <= a) return -1;\n    return (a + b + c) / 2;\n}\nint main() {\n    auto candidate = triangle_area;\n    assert(candidate((3), (4), (5)) == (6.0));\n    assert(candidate((1), (2), (10)) == (float(-1)));\n    assert(candidate((4), (8), (5)) == (8.18));\n    assert(candidate((2), (2), (2)) == (1.73));\n    assert(candidate((1), (2), (3)) == (float(-1)));\n    assert(candidate((10), (5), (7)) == (16.25));\n    assert(candidate((2), (6), (3)) == (float(-1)));\n    assert(candidate((1), (1), (1)) == (0.43));\n    assert(candidate((2), (2), (10)) == (float(-1)));\n}\n",
      "timestamp": 1664292645,
      "stdout": "",
      "stderr": "tmpj9_mi7eh: /tmp/tmpj9_mi7eh.cpp:21: int main(): Assertion `candidate((4), (8), (5)) == (8.18)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.00\n// >>> triangle_area(1, 2, 10)\n// -1\nfloat triangle_area(long a, long b, long c) {\n    float area;\n    if (a + b > c || b + c > a || c + a > b) {\n        area = -1;\n    } else {\n        area = (a + b + c) / 2;\n    }\n    return area;\n}\nint main() {\n    auto candidate = triangle_area;\n    assert(candidate((3), (4), (5)) == (6.0));\n    assert(candidate((1), (2), (10)) == (float(-1)));\n    assert(candidate((4), (8), (5)) == (8.18));\n    assert(candidate((2), (2), (2)) == (1.73));\n    assert(candidate((1), (2), (3)) == (float(-1)));\n    assert(candidate((10), (5), (7)) == (16.25));\n    assert(candidate((2), (6), (3)) == (float(-1)));\n    assert(candidate((1), (1), (1)) == (0.43));\n    assert(candidate((2), (2), (10)) == (float(-1)));\n}\n",
      "timestamp": 1664292646,
      "stdout": "",
      "stderr": "tmph1ucyyeb: /tmp/tmph1ucyyeb.cpp:24: int main(): Assertion `candidate((3), (4), (5)) == (6.0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.00\n// >>> triangle_area(1, 2, 10)\n// -1\nfloat triangle_area(long a, long b, long c) {\n    float area = 0.0f;\n    if (a + b > c && a + c > b && b + c > a) {\n        area = (float) (a + b + c) / 2.0f;\n    }\n    return area;\n}\nint main() {\n    auto candidate = triangle_area;\n    assert(candidate((3), (4), (5)) == (6.0));\n    assert(candidate((1), (2), (10)) == (float(-1)));\n    assert(candidate((4), (8), (5)) == (8.18));\n    assert(candidate((2), (2), (2)) == (1.73));\n    assert(candidate((1), (2), (3)) == (float(-1)));\n    assert(candidate((10), (5), (7)) == (16.25));\n    assert(candidate((2), (6), (3)) == (float(-1)));\n    assert(candidate((1), (1), (1)) == (0.43));\n    assert(candidate((2), (2), (10)) == (float(-1)));\n}\n",
      "timestamp": 1664292646,
      "stdout": "",
      "stderr": "tmp69biwqhe: /tmp/tmp69biwqhe.cpp:23: int main(): Assertion `candidate((1), (2), (10)) == (float(-1))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.00\n// >>> triangle_area(1, 2, 10)\n// -1\nfloat triangle_area(long a, long b, long c) {\n    float area = 0;\n    if (a + b > c && a + c > b && b + c > a) {\n        area = (float) (a + b + c) / 2;\n    }\n    return area;\n}\nint main() {\n    auto candidate = triangle_area;\n    assert(candidate((3), (4), (5)) == (6.0));\n    assert(candidate((1), (2), (10)) == (float(-1)));\n    assert(candidate((4), (8), (5)) == (8.18));\n    assert(candidate((2), (2), (2)) == (1.73));\n    assert(candidate((1), (2), (3)) == (float(-1)));\n    assert(candidate((10), (5), (7)) == (16.25));\n    assert(candidate((2), (6), (3)) == (float(-1)));\n    assert(candidate((1), (1), (1)) == (0.43));\n    assert(candidate((2), (2), (10)) == (float(-1)));\n}\n",
      "timestamp": 1664292646,
      "stdout": "",
      "stderr": "tmp938xrm5j: /tmp/tmp938xrm5j.cpp:23: int main(): Assertion `candidate((1), (2), (10)) == (float(-1))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.00\n// >>> triangle_area(1, 2, 10)\n// -1\nfloat triangle_area(long a, long b, long c) {\n    if (a + b > c || a + c > b || b + c > a) return -1;\n    return (a + b + c) / 2;\n}\nint main() {\n    auto candidate = triangle_area;\n    assert(candidate((3), (4), (5)) == (6.0));\n    assert(candidate((1), (2), (10)) == (float(-1)));\n    assert(candidate((4), (8), (5)) == (8.18));\n    assert(candidate((2), (2), (2)) == (1.73));\n    assert(candidate((1), (2), (3)) == (float(-1)));\n    assert(candidate((10), (5), (7)) == (16.25));\n    assert(candidate((2), (6), (3)) == (float(-1)));\n    assert(candidate((1), (1), (1)) == (0.43));\n    assert(candidate((2), (2), (10)) == (float(-1)));\n}\n",
      "timestamp": 1664292647,
      "stdout": "",
      "stderr": "tmplaqjfyo7: /tmp/tmplaqjfyo7.cpp:19: int main(): Assertion `candidate((3), (4), (5)) == (6.0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.00\n// >>> triangle_area(1, 2, 10)\n// -1\nfloat triangle_area(long a, long b, long c) {\n    float area = 0.0f;\n    if (a + b > c && b + c > a && c + a > b) {\n        area = (float)((a + b + c) / 2.0);\n        area = area * area;\n    }\n    return area;\n}\nint main() {\n    auto candidate = triangle_area;\n    assert(candidate((3), (4), (5)) == (6.0));\n    assert(candidate((1), (2), (10)) == (float(-1)));\n    assert(candidate((4), (8), (5)) == (8.18));\n    assert(candidate((2), (2), (2)) == (1.73));\n    assert(candidate((1), (2), (3)) == (float(-1)));\n    assert(candidate((10), (5), (7)) == (16.25));\n    assert(candidate((2), (6), (3)) == (float(-1)));\n    assert(candidate((1), (1), (1)) == (0.43));\n    assert(candidate((2), (2), (10)) == (float(-1)));\n}\n",
      "timestamp": 1664292647,
      "stdout": "",
      "stderr": "tmpe8lb1v36: /tmp/tmpe8lb1v36.cpp:23: int main(): Assertion `candidate((3), (4), (5)) == (6.0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.00\n// >>> triangle_area(1, 2, 10)\n// -1\nfloat triangle_area(long a, long b, long c) {\n    if (a + b <= c || a + c <= b || b + c <= a)\n        return -1;\n    return (a + b + c) / 2;\n}\nint main() {\n    auto candidate = triangle_area;\n    assert(candidate((3), (4), (5)) == (6.0));\n    assert(candidate((1), (2), (10)) == (float(-1)));\n    assert(candidate((4), (8), (5)) == (8.18));\n    assert(candidate((2), (2), (2)) == (1.73));\n    assert(candidate((1), (2), (3)) == (float(-1)));\n    assert(candidate((10), (5), (7)) == (16.25));\n    assert(candidate((2), (6), (3)) == (float(-1)));\n    assert(candidate((1), (1), (1)) == (0.43));\n    assert(candidate((2), (2), (10)) == (float(-1)));\n}\n",
      "timestamp": 1664292646,
      "stdout": "",
      "stderr": "tmpcvdzaa1l: /tmp/tmpcvdzaa1l.cpp:22: int main(): Assertion `candidate((4), (8), (5)) == (8.18)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.00\n// >>> triangle_area(1, 2, 10)\n// -1\nfloat triangle_area(long a, long b, long c) {\n    float area = 0.0;\n    if (a + b > c && b + c > a && c + a > b) {\n        area = (float) (a * b * c) / 2.0;\n    }\n    return area;\n}\nint main() {\n    auto candidate = triangle_area;\n    assert(candidate((3), (4), (5)) == (6.0));\n    assert(candidate((1), (2), (10)) == (float(-1)));\n    assert(candidate((4), (8), (5)) == (8.18));\n    assert(candidate((2), (2), (2)) == (1.73));\n    assert(candidate((1), (2), (3)) == (float(-1)));\n    assert(candidate((10), (5), (7)) == (16.25));\n    assert(candidate((2), (6), (3)) == (float(-1)));\n    assert(candidate((1), (1), (1)) == (0.43));\n    assert(candidate((2), (2), (10)) == (float(-1)));\n}\n",
      "timestamp": 1664292645,
      "stdout": "",
      "stderr": "tmpuiefrdnj: /tmp/tmpuiefrdnj.cpp:22: int main(): Assertion `candidate((3), (4), (5)) == (6.0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.00\n// >>> triangle_area(1, 2, 10)\n// -1\nfloat triangle_area(long a, long b, long c) {\n    float area = 0.0;\n    if (a + b > c && b + c > a && a + c > b) {\n        area = (float) (a + b + c) / 2.0;\n    }\n    return area;\n}\nint main() {\n    auto candidate = triangle_area;\n    assert(candidate((3), (4), (5)) == (6.0));\n    assert(candidate((1), (2), (10)) == (float(-1)));\n    assert(candidate((4), (8), (5)) == (8.18));\n    assert(candidate((2), (2), (2)) == (1.73));\n    assert(candidate((1), (2), (3)) == (float(-1)));\n    assert(candidate((10), (5), (7)) == (16.25));\n    assert(candidate((2), (6), (3)) == (float(-1)));\n    assert(candidate((1), (1), (1)) == (0.43));\n    assert(candidate((2), (2), (10)) == (float(-1)));\n}\n",
      "timestamp": 1664292647,
      "stdout": "",
      "stderr": "tmp0i4_73_c: /tmp/tmp0i4_73_c.cpp:23: int main(): Assertion `candidate((1), (2), (10)) == (float(-1))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.00\n// >>> triangle_area(1, 2, 10)\n// -1\nfloat triangle_area(long a, long b, long c) {\n    if (a + b <= c || b + c <= a || c + a <= b)\n        return -1;\n    return (float) (a + b + c) / 2;\n}\nint main() {\n    auto candidate = triangle_area;\n    assert(candidate((3), (4), (5)) == (6.0));\n    assert(candidate((1), (2), (10)) == (float(-1)));\n    assert(candidate((4), (8), (5)) == (8.18));\n    assert(candidate((2), (2), (2)) == (1.73));\n    assert(candidate((1), (2), (3)) == (float(-1)));\n    assert(candidate((10), (5), (7)) == (16.25));\n    assert(candidate((2), (6), (3)) == (float(-1)));\n    assert(candidate((1), (1), (1)) == (0.43));\n    assert(candidate((2), (2), (10)) == (float(-1)));\n}\n",
      "timestamp": 1664292646,
      "stdout": "",
      "stderr": "tmps0eiksur: /tmp/tmps0eiksur.cpp:22: int main(): Assertion `candidate((4), (8), (5)) == (8.18)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.00\n// >>> triangle_area(1, 2, 10)\n// -1\nfloat triangle_area(long a, long b, long c) {\n    if (a + b <= c || a + c <= b || b + c <= a) return -1;\n    return (float) (a + b + c) / 2;\n}\nint main() {\n    auto candidate = triangle_area;\n    assert(candidate((3), (4), (5)) == (6.0));\n    assert(candidate((1), (2), (10)) == (float(-1)));\n    assert(candidate((4), (8), (5)) == (8.18));\n    assert(candidate((2), (2), (2)) == (1.73));\n    assert(candidate((1), (2), (3)) == (float(-1)));\n    assert(candidate((10), (5), (7)) == (16.25));\n    assert(candidate((2), (6), (3)) == (float(-1)));\n    assert(candidate((1), (1), (1)) == (0.43));\n    assert(candidate((2), (2), (10)) == (float(-1)));\n}\n",
      "timestamp": 1664292647,
      "stdout": "",
      "stderr": "tmp5nt2un13: /tmp/tmp5nt2un13.cpp:21: int main(): Assertion `candidate((4), (8), (5)) == (8.18)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.00\n// >>> triangle_area(1, 2, 10)\n// -1\nfloat triangle_area(long a, long b, long c) {\n    float area;\n    if (a + b > c && a + c > b && b + c > a) {\n        area = (float) (0.5 * (a + b + c) * (a + b - c) * (a + c - b) * (b + c - a));\n    } else {\n        area = -1;\n    }\n    return area;\n}\nint main() {\n    auto candidate = triangle_area;\n    assert(candidate((3), (4), (5)) == (6.0));\n    assert(candidate((1), (2), (10)) == (float(-1)));\n    assert(candidate((4), (8), (5)) == (8.18));\n    assert(candidate((2), (2), (2)) == (1.73));\n    assert(candidate((1), (2), (3)) == (float(-1)));\n    assert(candidate((10), (5), (7)) == (16.25));\n    assert(candidate((2), (6), (3)) == (float(-1)));\n    assert(candidate((1), (1), (1)) == (0.43));\n    assert(candidate((2), (2), (10)) == (float(-1)));\n}\n",
      "timestamp": 1664292646,
      "stdout": "",
      "stderr": "tmpt3ulp_xo: /tmp/tmpt3ulp_xo.cpp:24: int main(): Assertion `candidate((3), (4), (5)) == (6.0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.00\n// >>> triangle_area(1, 2, 10)\n// -1\nfloat triangle_area(long a, long b, long c) {\n    float area = 0;\n    if (a + b > c && b + c > a && c + a > b) {\n        area = (float) (a * b * 0.5);\n    }\n    return area;\n}\nint main() {\n    auto candidate = triangle_area;\n    assert(candidate((3), (4), (5)) == (6.0));\n    assert(candidate((1), (2), (10)) == (float(-1)));\n    assert(candidate((4), (8), (5)) == (8.18));\n    assert(candidate((2), (2), (2)) == (1.73));\n    assert(candidate((1), (2), (3)) == (float(-1)));\n    assert(candidate((10), (5), (7)) == (16.25));\n    assert(candidate((2), (6), (3)) == (float(-1)));\n    assert(candidate((1), (1), (1)) == (0.43));\n    assert(candidate((2), (2), (10)) == (float(-1)));\n}\n",
      "timestamp": 1664292647,
      "stdout": "",
      "stderr": "tmpl212y3dj: /tmp/tmpl212y3dj.cpp:23: int main(): Assertion `candidate((1), (2), (10)) == (float(-1))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.00\n// >>> triangle_area(1, 2, 10)\n// -1\nfloat triangle_area(long a, long b, long c) {\n    float area = 0;\n    if (a + b > c) {\n        area = (float) (a + b - c) / 2;\n    } else if (a + c > b) {\n        area = (float) (a + c - b) / 2;\n    } else if (b + c > a) {\n        area = (float) (b + c - a) / 2;\n    }\n    return area;\n}\nint main() {\n    auto candidate = triangle_area;\n    assert(candidate((3), (4), (5)) == (6.0));\n    assert(candidate((1), (2), (10)) == (float(-1)));\n    assert(candidate((4), (8), (5)) == (8.18));\n    assert(candidate((2), (2), (2)) == (1.73));\n    assert(candidate((1), (2), (3)) == (float(-1)));\n    assert(candidate((10), (5), (7)) == (16.25));\n    assert(candidate((2), (6), (3)) == (float(-1)));\n    assert(candidate((1), (1), (1)) == (0.43));\n    assert(candidate((2), (2), (10)) == (float(-1)));\n}\n",
      "timestamp": 1664292647,
      "stdout": "",
      "stderr": "tmp4jyp2ppa: /tmp/tmp4jyp2ppa.cpp:26: int main(): Assertion `candidate((3), (4), (5)) == (6.0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.00\n// >>> triangle_area(1, 2, 10)\n// -1\nfloat triangle_area(long a, long b, long c) {\n    float area = 0.0;\n    if (a + b > c && b + c > a && a + c > b) {\n        area = (float) (a * b * c) / 2.0;\n    }\n    return area;\n}\nint main() {\n    auto candidate = triangle_area;\n    assert(candidate((3), (4), (5)) == (6.0));\n    assert(candidate((1), (2), (10)) == (float(-1)));\n    assert(candidate((4), (8), (5)) == (8.18));\n    assert(candidate((2), (2), (2)) == (1.73));\n    assert(candidate((1), (2), (3)) == (float(-1)));\n    assert(candidate((10), (5), (7)) == (16.25));\n    assert(candidate((2), (6), (3)) == (float(-1)));\n    assert(candidate((1), (1), (1)) == (0.43));\n    assert(candidate((2), (2), (10)) == (float(-1)));\n}\n",
      "timestamp": 1664292645,
      "stdout": "",
      "stderr": "tmpp44u3deo: /tmp/tmpp44u3deo.cpp:22: int main(): Assertion `candidate((3), (4), (5)) == (6.0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.00\n// >>> triangle_area(1, 2, 10)\n// -1\nfloat triangle_area(long a, long b, long c) {\n    float area;\n    if (a + b > c && a + c > b && b + c > a) {\n        area = (float) (0.5 * (a + b + c) * sqrt(pow(a, 2) + pow(b, 2) + pow(c, 2)));\n    } else {\n        area = -1;\n    }\n    return area;\n}\nint main() {\n    auto candidate = triangle_area;\n    assert(candidate((3), (4), (5)) == (6.0));\n    assert(candidate((1), (2), (10)) == (float(-1)));\n    assert(candidate((4), (8), (5)) == (8.18));\n    assert(candidate((2), (2), (2)) == (1.73));\n    assert(candidate((1), (2), (3)) == (float(-1)));\n    assert(candidate((10), (5), (7)) == (16.25));\n    assert(candidate((2), (6), (3)) == (float(-1)));\n    assert(candidate((1), (1), (1)) == (0.43));\n    assert(candidate((2), (2), (10)) == (float(-1)));\n}\n",
      "timestamp": 1664292647,
      "stdout": "",
      "stderr": "tmpk0ot5761: /tmp/tmpk0ot5761.cpp:24: int main(): Assertion `candidate((3), (4), (5)) == (6.0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.00\n// >>> triangle_area(1, 2, 10)\n// -1\nfloat triangle_area(long a, long b, long c) {\n    if (a + b <= c || b + c <= a || a + c <= b) return -1;\n    return (float) (a + b + c) / 2;\n}\nint main() {\n    auto candidate = triangle_area;\n    assert(candidate((3), (4), (5)) == (6.0));\n    assert(candidate((1), (2), (10)) == (float(-1)));\n    assert(candidate((4), (8), (5)) == (8.18));\n    assert(candidate((2), (2), (2)) == (1.73));\n    assert(candidate((1), (2), (3)) == (float(-1)));\n    assert(candidate((10), (5), (7)) == (16.25));\n    assert(candidate((2), (6), (3)) == (float(-1)));\n    assert(candidate((1), (1), (1)) == (0.43));\n    assert(candidate((2), (2), (10)) == (float(-1)));\n}\n",
      "timestamp": 1664292647,
      "stdout": "",
      "stderr": "tmptqate5pt: /tmp/tmptqate5pt.cpp:21: int main(): Assertion `candidate((4), (8), (5)) == (8.18)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.00\n// >>> triangle_area(1, 2, 10)\n// -1\nfloat triangle_area(long a, long b, long c) {\n    if (a + b < c || a + c < b || b + c < a) return -1;\n    return (a + b + c) / 2;\n}\nint main() {\n    auto candidate = triangle_area;\n    assert(candidate((3), (4), (5)) == (6.0));\n    assert(candidate((1), (2), (10)) == (float(-1)));\n    assert(candidate((4), (8), (5)) == (8.18));\n    assert(candidate((2), (2), (2)) == (1.73));\n    assert(candidate((1), (2), (3)) == (float(-1)));\n    assert(candidate((10), (5), (7)) == (16.25));\n    assert(candidate((2), (6), (3)) == (float(-1)));\n    assert(candidate((1), (1), (1)) == (0.43));\n    assert(candidate((2), (2), (10)) == (float(-1)));\n}\n",
      "timestamp": 1664292646,
      "stdout": "",
      "stderr": "tmpcpxm4fue: /tmp/tmpcpxm4fue.cpp:21: int main(): Assertion `candidate((4), (8), (5)) == (8.18)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.00\n// >>> triangle_area(1, 2, 10)\n// -1\nfloat triangle_area(long a, long b, long c) {\n    if (a + b <= c || a + c <= b || b + c <= a)\n        return -1;\n    return (a + b + c) / 2;\n}\nint main() {\n    auto candidate = triangle_area;\n    assert(candidate((3), (4), (5)) == (6.0));\n    assert(candidate((1), (2), (10)) == (float(-1)));\n    assert(candidate((4), (8), (5)) == (8.18));\n    assert(candidate((2), (2), (2)) == (1.73));\n    assert(candidate((1), (2), (3)) == (float(-1)));\n    assert(candidate((10), (5), (7)) == (16.25));\n    assert(candidate((2), (6), (3)) == (float(-1)));\n    assert(candidate((1), (1), (1)) == (0.43));\n    assert(candidate((2), (2), (10)) == (float(-1)));\n}\n",
      "timestamp": 1664292646,
      "stdout": "",
      "stderr": "tmpcvdzaa1l: /tmp/tmpcvdzaa1l.cpp:22: int main(): Assertion `candidate((4), (8), (5)) == (8.18)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.00\n// >>> triangle_area(1, 2, 10)\n// -1\nfloat triangle_area(long a, long b, long c) {\n    if (a + b <= c || a + c <= b || b + c <= a) {\n        return -1;\n    }\n    return (a + b + c) / 2;\n}\nint main() {\n    auto candidate = triangle_area;\n    assert(candidate((3), (4), (5)) == (6.0));\n    assert(candidate((1), (2), (10)) == (float(-1)));\n    assert(candidate((4), (8), (5)) == (8.18));\n    assert(candidate((2), (2), (2)) == (1.73));\n    assert(candidate((1), (2), (3)) == (float(-1)));\n    assert(candidate((10), (5), (7)) == (16.25));\n    assert(candidate((2), (6), (3)) == (float(-1)));\n    assert(candidate((1), (1), (1)) == (0.43));\n    assert(candidate((2), (2), (10)) == (float(-1)));\n}\n",
      "timestamp": 1664292646,
      "stdout": "",
      "stderr": "tmp9iffjjte: /tmp/tmp9iffjjte.cpp:23: int main(): Assertion `candidate((4), (8), (5)) == (8.18)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.00\n// >>> triangle_area(1, 2, 10)\n// -1\nfloat triangle_area(long a, long b, long c) {\n    if (a + b <= c || a + c <= b || b + c <= a) {\n        return -1;\n    }\n    return (a + b + c) / 2.0;\n}\nint main() {\n    auto candidate = triangle_area;\n    assert(candidate((3), (4), (5)) == (6.0));\n    assert(candidate((1), (2), (10)) == (float(-1)));\n    assert(candidate((4), (8), (5)) == (8.18));\n    assert(candidate((2), (2), (2)) == (1.73));\n    assert(candidate((1), (2), (3)) == (float(-1)));\n    assert(candidate((10), (5), (7)) == (16.25));\n    assert(candidate((2), (6), (3)) == (float(-1)));\n    assert(candidate((1), (1), (1)) == (0.43));\n    assert(candidate((2), (2), (10)) == (float(-1)));\n}\n",
      "timestamp": 1664292647,
      "stdout": "",
      "stderr": "tmp__k4tn54: /tmp/tmp__k4tn54.cpp:23: int main(): Assertion `candidate((4), (8), (5)) == (8.18)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.00\n// >>> triangle_area(1, 2, 10)\n// -1\nfloat triangle_area(long a, long b, long c) {\n    if (a + b < c || a + c < b || b + c < a) {\n        return -1;\n    }\n    return (a + b + c) / 2.0;\n}\nint main() {\n    auto candidate = triangle_area;\n    assert(candidate((3), (4), (5)) == (6.0));\n    assert(candidate((1), (2), (10)) == (float(-1)));\n    assert(candidate((4), (8), (5)) == (8.18));\n    assert(candidate((2), (2), (2)) == (1.73));\n    assert(candidate((1), (2), (3)) == (float(-1)));\n    assert(candidate((10), (5), (7)) == (16.25));\n    assert(candidate((2), (6), (3)) == (float(-1)));\n    assert(candidate((1), (1), (1)) == (0.43));\n    assert(candidate((2), (2), (10)) == (float(-1)));\n}\n",
      "timestamp": 1664292646,
      "stdout": "",
      "stderr": "tmpggye9r7i: /tmp/tmpggye9r7i.cpp:23: int main(): Assertion `candidate((4), (8), (5)) == (8.18)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.00\n// >>> triangle_area(1, 2, 10)\n// -1\nfloat triangle_area(long a, long b, long c) {\n    float area = 0.0;\n    if (a + b > c && b + c > a && c + a > b) {\n        area = (float)(a + b + c) / 2.0;\n        area = area * area / 2.0;\n    }\n    return area;\n}\nint main() {\n    auto candidate = triangle_area;\n    assert(candidate((3), (4), (5)) == (6.0));\n    assert(candidate((1), (2), (10)) == (float(-1)));\n    assert(candidate((4), (8), (5)) == (8.18));\n    assert(candidate((2), (2), (2)) == (1.73));\n    assert(candidate((1), (2), (3)) == (float(-1)));\n    assert(candidate((10), (5), (7)) == (16.25));\n    assert(candidate((2), (6), (3)) == (float(-1)));\n    assert(candidate((1), (1), (1)) == (0.43));\n    assert(candidate((2), (2), (10)) == (float(-1)));\n}\n",
      "timestamp": 1664292646,
      "stdout": "",
      "stderr": "tmp8bltof0d: /tmp/tmp8bltof0d.cpp:23: int main(): Assertion `candidate((3), (4), (5)) == (6.0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.00\n// >>> triangle_area(1, 2, 10)\n// -1\nfloat triangle_area(long a, long b, long c) {\n    float area;\n    if (a + b > c || a + c > b || b + c > a) {\n        area = -1;\n    } else {\n        area = (a + b + c) / 2;\n    }\n    return area;\n}\nint main() {\n    auto candidate = triangle_area;\n    assert(candidate((3), (4), (5)) == (6.0));\n    assert(candidate((1), (2), (10)) == (float(-1)));\n    assert(candidate((4), (8), (5)) == (8.18));\n    assert(candidate((2), (2), (2)) == (1.73));\n    assert(candidate((1), (2), (3)) == (float(-1)));\n    assert(candidate((10), (5), (7)) == (16.25));\n    assert(candidate((2), (6), (3)) == (float(-1)));\n    assert(candidate((1), (1), (1)) == (0.43));\n    assert(candidate((2), (2), (10)) == (float(-1)));\n}\n",
      "timestamp": 1664292647,
      "stdout": "",
      "stderr": "tmpn4wyjp56: /tmp/tmpn4wyjp56.cpp:24: int main(): Assertion `candidate((3), (4), (5)) == (6.0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.00\n// >>> triangle_area(1, 2, 10)\n// -1\nfloat triangle_area(long a, long b, long c) {\n    if (a + b <= c || b + c <= a || a + c <= b) {\n        return -1;\n    }\n    return (a + b + c) / 2;\n}\nint main() {\n    auto candidate = triangle_area;\n    assert(candidate((3), (4), (5)) == (6.0));\n    assert(candidate((1), (2), (10)) == (float(-1)));\n    assert(candidate((4), (8), (5)) == (8.18));\n    assert(candidate((2), (2), (2)) == (1.73));\n    assert(candidate((1), (2), (3)) == (float(-1)));\n    assert(candidate((10), (5), (7)) == (16.25));\n    assert(candidate((2), (6), (3)) == (float(-1)));\n    assert(candidate((1), (1), (1)) == (0.43));\n    assert(candidate((2), (2), (10)) == (float(-1)));\n}\n",
      "timestamp": 1664292645,
      "stdout": "",
      "stderr": "tmp3_fw44k1: /tmp/tmp3_fw44k1.cpp:23: int main(): Assertion `candidate((4), (8), (5)) == (8.18)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.00\n// >>> triangle_area(1, 2, 10)\n// -1\nfloat triangle_area(long a, long b, long c) {\n    float area = 0.0;\n    if (a + b > c && a + c > b && b + c > a) {\n        area = (float) (a + b + c) / 2.0;\n    }\n    return area;\n}\nint main() {\n    auto candidate = triangle_area;\n    assert(candidate((3), (4), (5)) == (6.0));\n    assert(candidate((1), (2), (10)) == (float(-1)));\n    assert(candidate((4), (8), (5)) == (8.18));\n    assert(candidate((2), (2), (2)) == (1.73));\n    assert(candidate((1), (2), (3)) == (float(-1)));\n    assert(candidate((10), (5), (7)) == (16.25));\n    assert(candidate((2), (6), (3)) == (float(-1)));\n    assert(candidate((1), (1), (1)) == (0.43));\n    assert(candidate((2), (2), (10)) == (float(-1)));\n}\n",
      "timestamp": 1664292647,
      "stdout": "",
      "stderr": "tmp9ajjeii3: /tmp/tmp9ajjeii3.cpp:23: int main(): Assertion `candidate((1), (2), (10)) == (float(-1))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.00\n// >>> triangle_area(1, 2, 10)\n// -1\nfloat triangle_area(long a, long b, long c) {\n    if (a + b <= c || a + c <= b || b + c <= a)\n        return -1;\n    return (a + b + c) / 2;\n}\nint main() {\n    auto candidate = triangle_area;\n    assert(candidate((3), (4), (5)) == (6.0));\n    assert(candidate((1), (2), (10)) == (float(-1)));\n    assert(candidate((4), (8), (5)) == (8.18));\n    assert(candidate((2), (2), (2)) == (1.73));\n    assert(candidate((1), (2), (3)) == (float(-1)));\n    assert(candidate((10), (5), (7)) == (16.25));\n    assert(candidate((2), (6), (3)) == (float(-1)));\n    assert(candidate((1), (1), (1)) == (0.43));\n    assert(candidate((2), (2), (10)) == (float(-1)));\n}\n",
      "timestamp": 1664292646,
      "stdout": "",
      "stderr": "tmpcvdzaa1l: /tmp/tmpcvdzaa1l.cpp:22: int main(): Assertion `candidate((4), (8), (5)) == (8.18)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.00\n// >>> triangle_area(1, 2, 10)\n// -1\nfloat triangle_area(long a, long b, long c) {\n    if (a + b <= c || b + c <= a || a + c <= b) {\n        return -1;\n    }\n    float area = 0.5 * (a + b + c);\n    return area;\n}\nint main() {\n    auto candidate = triangle_area;\n    assert(candidate((3), (4), (5)) == (6.0));\n    assert(candidate((1), (2), (10)) == (float(-1)));\n    assert(candidate((4), (8), (5)) == (8.18));\n    assert(candidate((2), (2), (2)) == (1.73));\n    assert(candidate((1), (2), (3)) == (float(-1)));\n    assert(candidate((10), (5), (7)) == (16.25));\n    assert(candidate((2), (6), (3)) == (float(-1)));\n    assert(candidate((1), (1), (1)) == (0.43));\n    assert(candidate((2), (2), (10)) == (float(-1)));\n}\n",
      "timestamp": 1664292646,
      "stdout": "",
      "stderr": "tmpuvwvfrh3: /tmp/tmpuvwvfrh3.cpp:24: int main(): Assertion `candidate((4), (8), (5)) == (8.18)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.00\n// >>> triangle_area(1, 2, 10)\n// -1\nfloat triangle_area(long a, long b, long c) {\n    if (a + b < c || a + c < b || b + c < a) {\n        return -1;\n    }\n    return (a + b + c) / 2;\n}\nint main() {\n    auto candidate = triangle_area;\n    assert(candidate((3), (4), (5)) == (6.0));\n    assert(candidate((1), (2), (10)) == (float(-1)));\n    assert(candidate((4), (8), (5)) == (8.18));\n    assert(candidate((2), (2), (2)) == (1.73));\n    assert(candidate((1), (2), (3)) == (float(-1)));\n    assert(candidate((10), (5), (7)) == (16.25));\n    assert(candidate((2), (6), (3)) == (float(-1)));\n    assert(candidate((1), (1), (1)) == (0.43));\n    assert(candidate((2), (2), (10)) == (float(-1)));\n}\n",
      "timestamp": 1664292647,
      "stdout": "",
      "stderr": "tmph9se5gd7: /tmp/tmph9se5gd7.cpp:23: int main(): Assertion `candidate((4), (8), (5)) == (8.18)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.00\n// >>> triangle_area(1, 2, 10)\n// -1\nfloat triangle_area(long a, long b, long c) {\n    float area = 0;\n    if (a + b > c && b + c > a && c + a > b) {\n        area = (float)(0.5 * (a + b + c) * sqrt(pow(a, 2) + pow(b, 2) + pow(c, 2)));\n    }\n    return area;\n}\nint main() {\n    auto candidate = triangle_area;\n    assert(candidate((3), (4), (5)) == (6.0));\n    assert(candidate((1), (2), (10)) == (float(-1)));\n    assert(candidate((4), (8), (5)) == (8.18));\n    assert(candidate((2), (2), (2)) == (1.73));\n    assert(candidate((1), (2), (3)) == (float(-1)));\n    assert(candidate((10), (5), (7)) == (16.25));\n    assert(candidate((2), (6), (3)) == (float(-1)));\n    assert(candidate((1), (1), (1)) == (0.43));\n    assert(candidate((2), (2), (10)) == (float(-1)));\n}\n",
      "timestamp": 1664292648,
      "stdout": "",
      "stderr": "tmp85lur0sc: /tmp/tmp85lur0sc.cpp:22: int main(): Assertion `candidate((3), (4), (5)) == (6.0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.00\n// >>> triangle_area(1, 2, 10)\n// -1\nfloat triangle_area(long a, long b, long c) {\n    float area = 0;\n    if (a + b > c && b + c > a && a + c > b) {\n        area = (float) (a * b * c) / 2;\n    }\n    return area;\n}\nint main() {\n    auto candidate = triangle_area;\n    assert(candidate((3), (4), (5)) == (6.0));\n    assert(candidate((1), (2), (10)) == (float(-1)));\n    assert(candidate((4), (8), (5)) == (8.18));\n    assert(candidate((2), (2), (2)) == (1.73));\n    assert(candidate((1), (2), (3)) == (float(-1)));\n    assert(candidate((10), (5), (7)) == (16.25));\n    assert(candidate((2), (6), (3)) == (float(-1)));\n    assert(candidate((1), (1), (1)) == (0.43));\n    assert(candidate((2), (2), (10)) == (float(-1)));\n}\n",
      "timestamp": 1664292645,
      "stdout": "",
      "stderr": "tmp_mpramxl: /tmp/tmp_mpramxl.cpp:22: int main(): Assertion `candidate((3), (4), (5)) == (6.0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.00\n// >>> triangle_area(1, 2, 10)\n// -1\nfloat triangle_area(long a, long b, long c) {\n    if (a + b <= c || a + c <= b || b + c <= a)\n        return -1;\n    return (a + b + c) / 2;\n}\nint main() {\n    auto candidate = triangle_area;\n    assert(candidate((3), (4), (5)) == (6.0));\n    assert(candidate((1), (2), (10)) == (float(-1)));\n    assert(candidate((4), (8), (5)) == (8.18));\n    assert(candidate((2), (2), (2)) == (1.73));\n    assert(candidate((1), (2), (3)) == (float(-1)));\n    assert(candidate((10), (5), (7)) == (16.25));\n    assert(candidate((2), (6), (3)) == (float(-1)));\n    assert(candidate((1), (1), (1)) == (0.43));\n    assert(candidate((2), (2), (10)) == (float(-1)));\n}\n",
      "timestamp": 1664292646,
      "stdout": "",
      "stderr": "tmpcvdzaa1l: /tmp/tmpcvdzaa1l.cpp:22: int main(): Assertion `candidate((4), (8), (5)) == (8.18)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.00\n// >>> triangle_area(1, 2, 10)\n// -1\nfloat triangle_area(long a, long b, long c) {\n    float area = 0.0f;\n    if (a + b > c && a + c > b && b + c > a) {\n        area = (float) (a + b + c) / 2.0f;\n    }\n    return area;\n}\nint main() {\n    auto candidate = triangle_area;\n    assert(candidate((3), (4), (5)) == (6.0));\n    assert(candidate((1), (2), (10)) == (float(-1)));\n    assert(candidate((4), (8), (5)) == (8.18));\n    assert(candidate((2), (2), (2)) == (1.73));\n    assert(candidate((1), (2), (3)) == (float(-1)));\n    assert(candidate((10), (5), (7)) == (16.25));\n    assert(candidate((2), (6), (3)) == (float(-1)));\n    assert(candidate((1), (1), (1)) == (0.43));\n    assert(candidate((2), (2), (10)) == (float(-1)));\n}\n",
      "timestamp": 1664292646,
      "stdout": "",
      "stderr": "tmp69biwqhe: /tmp/tmp69biwqhe.cpp:23: int main(): Assertion `candidate((1), (2), (10)) == (float(-1))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.00\n// >>> triangle_area(1, 2, 10)\n// -1\nfloat triangle_area(long a, long b, long c) {\n    float area = 0.0;\n    if (a + b > c && a + c > b && b + c > a) {\n        area = (float) (a + b + c) / 2.0;\n    }\n    return area;\n}\nint main() {\n    auto candidate = triangle_area;\n    assert(candidate((3), (4), (5)) == (6.0));\n    assert(candidate((1), (2), (10)) == (float(-1)));\n    assert(candidate((4), (8), (5)) == (8.18));\n    assert(candidate((2), (2), (2)) == (1.73));\n    assert(candidate((1), (2), (3)) == (float(-1)));\n    assert(candidate((10), (5), (7)) == (16.25));\n    assert(candidate((2), (6), (3)) == (float(-1)));\n    assert(candidate((1), (1), (1)) == (0.43));\n    assert(candidate((2), (2), (10)) == (float(-1)));\n}\n",
      "timestamp": 1664292647,
      "stdout": "",
      "stderr": "tmp9ajjeii3: /tmp/tmp9ajjeii3.cpp:23: int main(): Assertion `candidate((1), (2), (10)) == (float(-1))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.00\n// >>> triangle_area(1, 2, 10)\n// -1\nfloat triangle_area(long a, long b, long c) {\n    float area = 0;\n    if (a + b > c && a + c > b && b + c > a) {\n        area = (float) (a + b + c) / 2;\n    }\n    return area;\n}\nint main() {\n    auto candidate = triangle_area;\n    assert(candidate((3), (4), (5)) == (6.0));\n    assert(candidate((1), (2), (10)) == (float(-1)));\n    assert(candidate((4), (8), (5)) == (8.18));\n    assert(candidate((2), (2), (2)) == (1.73));\n    assert(candidate((1), (2), (3)) == (float(-1)));\n    assert(candidate((10), (5), (7)) == (16.25));\n    assert(candidate((2), (6), (3)) == (float(-1)));\n    assert(candidate((1), (1), (1)) == (0.43));\n    assert(candidate((2), (2), (10)) == (float(-1)));\n}\n",
      "timestamp": 1664292646,
      "stdout": "",
      "stderr": "tmp938xrm5j: /tmp/tmp938xrm5j.cpp:23: int main(): Assertion `candidate((1), (2), (10)) == (float(-1))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.00\n// >>> triangle_area(1, 2, 10)\n// -1\nfloat triangle_area(long a, long b, long c) {\n    float area = 0.0;\n    if (a + b > c && b + c > a && a + c > b) {\n        area = (float)(0.5 * (a + b + c) * sqrt(pow(a, 2) + pow(b, 2) + pow(c, 2)));\n    }\n    return area;\n}\nint main() {\n    auto candidate = triangle_area;\n    assert(candidate((3), (4), (5)) == (6.0));\n    assert(candidate((1), (2), (10)) == (float(-1)));\n    assert(candidate((4), (8), (5)) == (8.18));\n    assert(candidate((2), (2), (2)) == (1.73));\n    assert(candidate((1), (2), (3)) == (float(-1)));\n    assert(candidate((10), (5), (7)) == (16.25));\n    assert(candidate((2), (6), (3)) == (float(-1)));\n    assert(candidate((1), (1), (1)) == (0.43));\n    assert(candidate((2), (2), (10)) == (float(-1)));\n}\n",
      "timestamp": 1664292645,
      "stdout": "",
      "stderr": "tmpxhf5sacj: /tmp/tmpxhf5sacj.cpp:22: int main(): Assertion `candidate((3), (4), (5)) == (6.0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.00\n// >>> triangle_area(1, 2, 10)\n// -1\nfloat triangle_area(long a, long b, long c) {\n    float area = 0.0;\n    if (a + b > c && a + c > b && b + c > a) {\n        area = (float) (a + b + c) / 2.0;\n        area = area * area / 2.0;\n    }\n    return area;\n}\nint main() {\n    auto candidate = triangle_area;\n    assert(candidate((3), (4), (5)) == (6.0));\n    assert(candidate((1), (2), (10)) == (float(-1)));\n    assert(candidate((4), (8), (5)) == (8.18));\n    assert(candidate((2), (2), (2)) == (1.73));\n    assert(candidate((1), (2), (3)) == (float(-1)));\n    assert(candidate((10), (5), (7)) == (16.25));\n    assert(candidate((2), (6), (3)) == (float(-1)));\n    assert(candidate((1), (1), (1)) == (0.43));\n    assert(candidate((2), (2), (10)) == (float(-1)));\n}\n",
      "timestamp": 1664292645,
      "stdout": "",
      "stderr": "tmp5pwsuy0y: /tmp/tmp5pwsuy0y.cpp:23: int main(): Assertion `candidate((3), (4), (5)) == (6.0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.00\n// >>> triangle_area(1, 2, 10)\n// -1\nfloat triangle_area(long a, long b, long c) {\n    if (a + b <= c || b + c <= a || c + a <= b)\n        return -1;\n    return (a + b + c) / 2;\n}\nint main() {\n    auto candidate = triangle_area;\n    assert(candidate((3), (4), (5)) == (6.0));\n    assert(candidate((1), (2), (10)) == (float(-1)));\n    assert(candidate((4), (8), (5)) == (8.18));\n    assert(candidate((2), (2), (2)) == (1.73));\n    assert(candidate((1), (2), (3)) == (float(-1)));\n    assert(candidate((10), (5), (7)) == (16.25));\n    assert(candidate((2), (6), (3)) == (float(-1)));\n    assert(candidate((1), (1), (1)) == (0.43));\n    assert(candidate((2), (2), (10)) == (float(-1)));\n}\n",
      "timestamp": 1664292649,
      "stdout": "",
      "stderr": "tmpd9reuknw: /tmp/tmpd9reuknw.cpp:22: int main(): Assertion `candidate((4), (8), (5)) == (8.18)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.00\n// >>> triangle_area(1, 2, 10)\n// -1\nfloat triangle_area(long a, long b, long c) {\n    float area = 0.0;\n    if (a + b > c && b + c > a && a + c > b) {\n        area = (float) (a * b * c) / 2.0;\n    }\n    return area;\n}\nint main() {\n    auto candidate = triangle_area;\n    assert(candidate((3), (4), (5)) == (6.0));\n    assert(candidate((1), (2), (10)) == (float(-1)));\n    assert(candidate((4), (8), (5)) == (8.18));\n    assert(candidate((2), (2), (2)) == (1.73));\n    assert(candidate((1), (2), (3)) == (float(-1)));\n    assert(candidate((10), (5), (7)) == (16.25));\n    assert(candidate((2), (6), (3)) == (float(-1)));\n    assert(candidate((1), (1), (1)) == (0.43));\n    assert(candidate((2), (2), (10)) == (float(-1)));\n}\n",
      "timestamp": 1664292645,
      "stdout": "",
      "stderr": "tmpp44u3deo: /tmp/tmpp44u3deo.cpp:22: int main(): Assertion `candidate((3), (4), (5)) == (6.0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.00\n// >>> triangle_area(1, 2, 10)\n// -1\nfloat triangle_area(long a, long b, long c) {\n    float area = 0.0f;\n    if (a + b > c && a + c > b && b + c > a) {\n        area = (float) (a * b * c) / 2.0f;\n    }\n    return area;\n}\nint main() {\n    auto candidate = triangle_area;\n    assert(candidate((3), (4), (5)) == (6.0));\n    assert(candidate((1), (2), (10)) == (float(-1)));\n    assert(candidate((4), (8), (5)) == (8.18));\n    assert(candidate((2), (2), (2)) == (1.73));\n    assert(candidate((1), (2), (3)) == (float(-1)));\n    assert(candidate((10), (5), (7)) == (16.25));\n    assert(candidate((2), (6), (3)) == (float(-1)));\n    assert(candidate((1), (1), (1)) == (0.43));\n    assert(candidate((2), (2), (10)) == (float(-1)));\n}\n",
      "timestamp": 1664292649,
      "stdout": "",
      "stderr": "tmpcyvlg3z2: /tmp/tmpcyvlg3z2.cpp:22: int main(): Assertion `candidate((3), (4), (5)) == (6.0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.00\n// >>> triangle_area(1, 2, 10)\n// -1\nfloat triangle_area(long a, long b, long c) {\n    float area = 0.0;\n    if (a + b > c && a + c > b && b + c > a) {\n        area = (float) (a + b + c) / 2.0;\n    }\n    return area;\n}\nint main() {\n    auto candidate = triangle_area;\n    assert(candidate((3), (4), (5)) == (6.0));\n    assert(candidate((1), (2), (10)) == (float(-1)));\n    assert(candidate((4), (8), (5)) == (8.18));\n    assert(candidate((2), (2), (2)) == (1.73));\n    assert(candidate((1), (2), (3)) == (float(-1)));\n    assert(candidate((10), (5), (7)) == (16.25));\n    assert(candidate((2), (6), (3)) == (float(-1)));\n    assert(candidate((1), (1), (1)) == (0.43));\n    assert(candidate((2), (2), (10)) == (float(-1)));\n}\n",
      "timestamp": 1664292647,
      "stdout": "",
      "stderr": "tmp9ajjeii3: /tmp/tmp9ajjeii3.cpp:23: int main(): Assertion `candidate((1), (2), (10)) == (float(-1))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.00\n// >>> triangle_area(1, 2, 10)\n// -1\nfloat triangle_area(long a, long b, long c) {\n    if (a + b <= c || b + c <= a || a + c <= b)\n        return -1;\n    return (a + b + c) / 2;\n}\nint main() {\n    auto candidate = triangle_area;\n    assert(candidate((3), (4), (5)) == (6.0));\n    assert(candidate((1), (2), (10)) == (float(-1)));\n    assert(candidate((4), (8), (5)) == (8.18));\n    assert(candidate((2), (2), (2)) == (1.73));\n    assert(candidate((1), (2), (3)) == (float(-1)));\n    assert(candidate((10), (5), (7)) == (16.25));\n    assert(candidate((2), (6), (3)) == (float(-1)));\n    assert(candidate((1), (1), (1)) == (0.43));\n    assert(candidate((2), (2), (10)) == (float(-1)));\n}\n",
      "timestamp": 1664292645,
      "stdout": "",
      "stderr": "tmph18j972r: /tmp/tmph18j972r.cpp:22: int main(): Assertion `candidate((4), (8), (5)) == (8.18)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.00\n// >>> triangle_area(1, 2, 10)\n// -1\nfloat triangle_area(long a, long b, long c) {\n    float area;\n    if (a + b > c || a + c > b || b + c > a) {\n        area = -1;\n    } else {\n        area = (a + b + c) / 2;\n    }\n    return area;\n}\nint main() {\n    auto candidate = triangle_area;\n    assert(candidate((3), (4), (5)) == (6.0));\n    assert(candidate((1), (2), (10)) == (float(-1)));\n    assert(candidate((4), (8), (5)) == (8.18));\n    assert(candidate((2), (2), (2)) == (1.73));\n    assert(candidate((1), (2), (3)) == (float(-1)));\n    assert(candidate((10), (5), (7)) == (16.25));\n    assert(candidate((2), (6), (3)) == (float(-1)));\n    assert(candidate((1), (1), (1)) == (0.43));\n    assert(candidate((2), (2), (10)) == (float(-1)));\n}\n",
      "timestamp": 1664292647,
      "stdout": "",
      "stderr": "tmpn4wyjp56: /tmp/tmpn4wyjp56.cpp:24: int main(): Assertion `candidate((3), (4), (5)) == (6.0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.00\n// >>> triangle_area(1, 2, 10)\n// -1\nfloat triangle_area(long a, long b, long c) {\n    float area = 0.0;\n    if (a + b > c && a + c > b && b + c > a) {\n        area = (float) (a + b + c) / 2.0;\n    }\n    return area;\n}\nint main() {\n    auto candidate = triangle_area;\n    assert(candidate((3), (4), (5)) == (6.0));\n    assert(candidate((1), (2), (10)) == (float(-1)));\n    assert(candidate((4), (8), (5)) == (8.18));\n    assert(candidate((2), (2), (2)) == (1.73));\n    assert(candidate((1), (2), (3)) == (float(-1)));\n    assert(candidate((10), (5), (7)) == (16.25));\n    assert(candidate((2), (6), (3)) == (float(-1)));\n    assert(candidate((1), (1), (1)) == (0.43));\n    assert(candidate((2), (2), (10)) == (float(-1)));\n}\n",
      "timestamp": 1664292647,
      "stdout": "",
      "stderr": "tmp9ajjeii3: /tmp/tmp9ajjeii3.cpp:23: int main(): Assertion `candidate((1), (2), (10)) == (float(-1))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.00\n// >>> triangle_area(1, 2, 10)\n// -1\nfloat triangle_area(long a, long b, long c) {\n    float area = 0.0;\n    if (a + b > c && b + c > a && c + a > b) {\n        area = (float)(0.5 * (a + b + c) * sqrt(pow(a, 2) + pow(b, 2) + pow(c, 2)));\n    }\n    return area;\n}\nint main() {\n    auto candidate = triangle_area;\n    assert(candidate((3), (4), (5)) == (6.0));\n    assert(candidate((1), (2), (10)) == (float(-1)));\n    assert(candidate((4), (8), (5)) == (8.18));\n    assert(candidate((2), (2), (2)) == (1.73));\n    assert(candidate((1), (2), (3)) == (float(-1)));\n    assert(candidate((10), (5), (7)) == (16.25));\n    assert(candidate((2), (6), (3)) == (float(-1)));\n    assert(candidate((1), (1), (1)) == (0.43));\n    assert(candidate((2), (2), (10)) == (float(-1)));\n}\n",
      "timestamp": 1664292648,
      "stdout": "",
      "stderr": "tmpgfksj9wb: /tmp/tmpgfksj9wb.cpp:22: int main(): Assertion `candidate((3), (4), (5)) == (6.0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.00\n// >>> triangle_area(1, 2, 10)\n// -1\nfloat triangle_area(long a, long b, long c) {\n    float area = 0.0f;\n    if (a + b > c && b + c > a && c + a > b) {\n        area = (float)(0.5 * (a + b + c) * sqrt(pow(a, 2) + pow(b, 2) + pow(c, 2)));\n    }\n    return area;\n}\nint main() {\n    auto candidate = triangle_area;\n    assert(candidate((3), (4), (5)) == (6.0));\n    assert(candidate((1), (2), (10)) == (float(-1)));\n    assert(candidate((4), (8), (5)) == (8.18));\n    assert(candidate((2), (2), (2)) == (1.73));\n    assert(candidate((1), (2), (3)) == (float(-1)));\n    assert(candidate((10), (5), (7)) == (16.25));\n    assert(candidate((2), (6), (3)) == (float(-1)));\n    assert(candidate((1), (1), (1)) == (0.43));\n    assert(candidate((2), (2), (10)) == (float(-1)));\n}\n",
      "timestamp": 1664292648,
      "stdout": "",
      "stderr": "tmp9l_jwqs8: /tmp/tmp9l_jwqs8.cpp:22: int main(): Assertion `candidate((3), (4), (5)) == (6.0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.00\n// >>> triangle_area(1, 2, 10)\n// -1\nfloat triangle_area(long a, long b, long c) {\n    float area = 0.0;\n    if (a + b > c && b + c > a && a + c > b) {\n        area = (float)(a + b + c) / 2.0;\n    }\n    return area;\n}\nint main() {\n    auto candidate = triangle_area;\n    assert(candidate((3), (4), (5)) == (6.0));\n    assert(candidate((1), (2), (10)) == (float(-1)));\n    assert(candidate((4), (8), (5)) == (8.18));\n    assert(candidate((2), (2), (2)) == (1.73));\n    assert(candidate((1), (2), (3)) == (float(-1)));\n    assert(candidate((10), (5), (7)) == (16.25));\n    assert(candidate((2), (6), (3)) == (float(-1)));\n    assert(candidate((1), (1), (1)) == (0.43));\n    assert(candidate((2), (2), (10)) == (float(-1)));\n}\n",
      "timestamp": 1664292648,
      "stdout": "",
      "stderr": "tmp7v3658wq: /tmp/tmp7v3658wq.cpp:23: int main(): Assertion `candidate((1), (2), (10)) == (float(-1))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.00\n// >>> triangle_area(1, 2, 10)\n// -1\nfloat triangle_area(long a, long b, long c) {\n    float area = 0.0f;\n    if (a + b > c && a + c > b && b + c > a) {\n        area = (float)(0.5 * (a + b + c) * sqrt(pow(a, 2) + pow(b, 2) + pow(c, 2)));\n    }\n    return area;\n}\nint main() {\n    auto candidate = triangle_area;\n    assert(candidate((3), (4), (5)) == (6.0));\n    assert(candidate((1), (2), (10)) == (float(-1)));\n    assert(candidate((4), (8), (5)) == (8.18));\n    assert(candidate((2), (2), (2)) == (1.73));\n    assert(candidate((1), (2), (3)) == (float(-1)));\n    assert(candidate((10), (5), (7)) == (16.25));\n    assert(candidate((2), (6), (3)) == (float(-1)));\n    assert(candidate((1), (1), (1)) == (0.43));\n    assert(candidate((2), (2), (10)) == (float(-1)));\n}\n",
      "timestamp": 1664292648,
      "stdout": "",
      "stderr": "tmp51nqlj5h: /tmp/tmp51nqlj5h.cpp:22: int main(): Assertion `candidate((3), (4), (5)) == (6.0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.00\n// >>> triangle_area(1, 2, 10)\n// -1\nfloat triangle_area(long a, long b, long c) {\n    float area = 0;\n    if (a + b > c && b + c > a && a + c > b) {\n        area = (float) (a * b * c) / 2;\n    }\n    return area;\n}\nint main() {\n    auto candidate = triangle_area;\n    assert(candidate((3), (4), (5)) == (6.0));\n    assert(candidate((1), (2), (10)) == (float(-1)));\n    assert(candidate((4), (8), (5)) == (8.18));\n    assert(candidate((2), (2), (2)) == (1.73));\n    assert(candidate((1), (2), (3)) == (float(-1)));\n    assert(candidate((10), (5), (7)) == (16.25));\n    assert(candidate((2), (6), (3)) == (float(-1)));\n    assert(candidate((1), (1), (1)) == (0.43));\n    assert(candidate((2), (2), (10)) == (float(-1)));\n}\n",
      "timestamp": 1664292645,
      "stdout": "",
      "stderr": "tmp_mpramxl: /tmp/tmp_mpramxl.cpp:22: int main(): Assertion `candidate((3), (4), (5)) == (6.0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.00\n// >>> triangle_area(1, 2, 10)\n// -1\nfloat triangle_area(long a, long b, long c) {\n    float area = 0.0f;\n    if (a + b > c && a + c > b && b + c > a) {\n        area = (float) (a + b + c) / 2.0f;\n    }\n    return area;\n}\nint main() {\n    auto candidate = triangle_area;\n    assert(candidate((3), (4), (5)) == (6.0));\n    assert(candidate((1), (2), (10)) == (float(-1)));\n    assert(candidate((4), (8), (5)) == (8.18));\n    assert(candidate((2), (2), (2)) == (1.73));\n    assert(candidate((1), (2), (3)) == (float(-1)));\n    assert(candidate((10), (5), (7)) == (16.25));\n    assert(candidate((2), (6), (3)) == (float(-1)));\n    assert(candidate((1), (1), (1)) == (0.43));\n    assert(candidate((2), (2), (10)) == (float(-1)));\n}\n",
      "timestamp": 1664292646,
      "stdout": "",
      "stderr": "tmp69biwqhe: /tmp/tmp69biwqhe.cpp:23: int main(): Assertion `candidate((1), (2), (10)) == (float(-1))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.00\n// >>> triangle_area(1, 2, 10)\n// -1\nfloat triangle_area(long a, long b, long c) {\n    float area = 0.0;\n    if (a + b > c && b + c > a && c + a > b) {\n        area = (float)(a + b + c) / 2.0;\n    }\n    return area;\n}\nint main() {\n    auto candidate = triangle_area;\n    assert(candidate((3), (4), (5)) == (6.0));\n    assert(candidate((1), (2), (10)) == (float(-1)));\n    assert(candidate((4), (8), (5)) == (8.18));\n    assert(candidate((2), (2), (2)) == (1.73));\n    assert(candidate((1), (2), (3)) == (float(-1)));\n    assert(candidate((10), (5), (7)) == (16.25));\n    assert(candidate((2), (6), (3)) == (float(-1)));\n    assert(candidate((1), (1), (1)) == (0.43));\n    assert(candidate((2), (2), (10)) == (float(-1)));\n}\n",
      "timestamp": 1664292648,
      "stdout": "",
      "stderr": "tmpqwwu6317: /tmp/tmpqwwu6317.cpp:23: int main(): Assertion `candidate((1), (2), (10)) == (float(-1))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.00\n// >>> triangle_area(1, 2, 10)\n// -1\nfloat triangle_area(long a, long b, long c) {\n    float area = 0.0;\n    if (a + b > c && a + c > b && b + c > a) {\n        area = (float) (a + b + c) / 2;\n    }\n    return area;\n}\nint main() {\n    auto candidate = triangle_area;\n    assert(candidate((3), (4), (5)) == (6.0));\n    assert(candidate((1), (2), (10)) == (float(-1)));\n    assert(candidate((4), (8), (5)) == (8.18));\n    assert(candidate((2), (2), (2)) == (1.73));\n    assert(candidate((1), (2), (3)) == (float(-1)));\n    assert(candidate((10), (5), (7)) == (16.25));\n    assert(candidate((2), (6), (3)) == (float(-1)));\n    assert(candidate((1), (1), (1)) == (0.43));\n    assert(candidate((2), (2), (10)) == (float(-1)));\n}\n",
      "timestamp": 1664292648,
      "stdout": "",
      "stderr": "tmp988tzy7p: /tmp/tmp988tzy7p.cpp:23: int main(): Assertion `candidate((1), (2), (10)) == (float(-1))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.00\n// >>> triangle_area(1, 2, 10)\n// -1\nfloat triangle_area(long a, long b, long c) {\n    float area = 0;\n    if (a + b > c && b + c > a && a + c > b) {\n        area = (float) (a + b + c) / 2;\n    }\n    return area;\n}\nint main() {\n    auto candidate = triangle_area;\n    assert(candidate((3), (4), (5)) == (6.0));\n    assert(candidate((1), (2), (10)) == (float(-1)));\n    assert(candidate((4), (8), (5)) == (8.18));\n    assert(candidate((2), (2), (2)) == (1.73));\n    assert(candidate((1), (2), (3)) == (float(-1)));\n    assert(candidate((10), (5), (7)) == (16.25));\n    assert(candidate((2), (6), (3)) == (float(-1)));\n    assert(candidate((1), (1), (1)) == (0.43));\n    assert(candidate((2), (2), (10)) == (float(-1)));\n}\n",
      "timestamp": 1664292648,
      "stdout": "",
      "stderr": "tmpxdwn1wi2: /tmp/tmpxdwn1wi2.cpp:23: int main(): Assertion `candidate((1), (2), (10)) == (float(-1))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.00\n// >>> triangle_area(1, 2, 10)\n// -1\nfloat triangle_area(long a, long b, long c) {\n    float area = 0.0;\n    if (a + b > c && a + c > b && b + c > a) {\n        area = (float) (a + b + c) / 2.0;\n        area = area * area / 2.0;\n    }\n    return area;\n}\nint main() {\n    auto candidate = triangle_area;\n    assert(candidate((3), (4), (5)) == (6.0));\n    assert(candidate((1), (2), (10)) == (float(-1)));\n    assert(candidate((4), (8), (5)) == (8.18));\n    assert(candidate((2), (2), (2)) == (1.73));\n    assert(candidate((1), (2), (3)) == (float(-1)));\n    assert(candidate((10), (5), (7)) == (16.25));\n    assert(candidate((2), (6), (3)) == (float(-1)));\n    assert(candidate((1), (1), (1)) == (0.43));\n    assert(candidate((2), (2), (10)) == (float(-1)));\n}\n",
      "timestamp": 1664292645,
      "stdout": "",
      "stderr": "tmp5pwsuy0y: /tmp/tmp5pwsuy0y.cpp:23: int main(): Assertion `candidate((3), (4), (5)) == (6.0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.00\n// >>> triangle_area(1, 2, 10)\n// -1\nfloat triangle_area(long a, long b, long c) {\n    float area = 0.0;\n    if (a + b > c && a + c > b && b + c > a) {\n        area = (float) (a + b + c) / 2.0;\n        area = area * area / 2.0;\n    }\n    return area;\n}\nint main() {\n    auto candidate = triangle_area;\n    assert(candidate((3), (4), (5)) == (6.0));\n    assert(candidate((1), (2), (10)) == (float(-1)));\n    assert(candidate((4), (8), (5)) == (8.18));\n    assert(candidate((2), (2), (2)) == (1.73));\n    assert(candidate((1), (2), (3)) == (float(-1)));\n    assert(candidate((10), (5), (7)) == (16.25));\n    assert(candidate((2), (6), (3)) == (float(-1)));\n    assert(candidate((1), (1), (1)) == (0.43));\n    assert(candidate((2), (2), (10)) == (float(-1)));\n}\n",
      "timestamp": 1664292645,
      "stdout": "",
      "stderr": "tmp5pwsuy0y: /tmp/tmp5pwsuy0y.cpp:23: int main(): Assertion `candidate((3), (4), (5)) == (6.0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.00\n// >>> triangle_area(1, 2, 10)\n// -1\nfloat triangle_area(long a, long b, long c) {\n    float area = 0;\n    if (a + b > c && a + c > b && b + c > a) {\n        area = (float) (a + b + c) / 2;\n        area = area * area;\n    }\n    return area;\n}\nint main() {\n    auto candidate = triangle_area;\n    assert(candidate((3), (4), (5)) == (6.0));\n    assert(candidate((1), (2), (10)) == (float(-1)));\n    assert(candidate((4), (8), (5)) == (8.18));\n    assert(candidate((2), (2), (2)) == (1.73));\n    assert(candidate((1), (2), (3)) == (float(-1)));\n    assert(candidate((10), (5), (7)) == (16.25));\n    assert(candidate((2), (6), (3)) == (float(-1)));\n    assert(candidate((1), (1), (1)) == (0.43));\n    assert(candidate((2), (2), (10)) == (float(-1)));\n}\n",
      "timestamp": 1664292648,
      "stdout": "",
      "stderr": "tmpfc67922n: /tmp/tmpfc67922n.cpp:23: int main(): Assertion `candidate((3), (4), (5)) == (6.0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.00\n// >>> triangle_area(1, 2, 10)\n// -1\nfloat triangle_area(long a, long b, long c) {\n    if (a + b < c || a + c < b || b + c < a) {\n        return -1;\n    }\n    return (a + b + c) / 2;\n}\nint main() {\n    auto candidate = triangle_area;\n    assert(candidate((3), (4), (5)) == (6.0));\n    assert(candidate((1), (2), (10)) == (float(-1)));\n    assert(candidate((4), (8), (5)) == (8.18));\n    assert(candidate((2), (2), (2)) == (1.73));\n    assert(candidate((1), (2), (3)) == (float(-1)));\n    assert(candidate((10), (5), (7)) == (16.25));\n    assert(candidate((2), (6), (3)) == (float(-1)));\n    assert(candidate((1), (1), (1)) == (0.43));\n    assert(candidate((2), (2), (10)) == (float(-1)));\n}\n",
      "timestamp": 1664292647,
      "stdout": "",
      "stderr": "tmph9se5gd7: /tmp/tmph9se5gd7.cpp:23: int main(): Assertion `candidate((4), (8), (5)) == (8.18)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.00\n// >>> triangle_area(1, 2, 10)\n// -1\nfloat triangle_area(long a, long b, long c) {\n    float area;\n    area = (a + b + c) / 2;\n    if (area > c) {\n        return area;\n    }\n    return -1;\n}\nint main() {\n    auto candidate = triangle_area;\n    assert(candidate((3), (4), (5)) == (6.0));\n    assert(candidate((1), (2), (10)) == (float(-1)));\n    assert(candidate((4), (8), (5)) == (8.18));\n    assert(candidate((2), (2), (2)) == (1.73));\n    assert(candidate((1), (2), (3)) == (float(-1)));\n    assert(candidate((10), (5), (7)) == (16.25));\n    assert(candidate((2), (6), (3)) == (float(-1)));\n    assert(candidate((1), (1), (1)) == (0.43));\n    assert(candidate((2), (2), (10)) == (float(-1)));\n}\n",
      "timestamp": 1664292649,
      "stdout": "",
      "stderr": "tmpx1gjm5rc: /tmp/tmpx1gjm5rc.cpp:25: int main(): Assertion `candidate((4), (8), (5)) == (8.18)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.00\n// >>> triangle_area(1, 2, 10)\n// -1\nfloat triangle_area(long a, long b, long c) {\n    float area = 0.0;\n    if (a + b > c && b + c > a && a + c > b) {\n        area = (float) (a * b * c) / 2.0;\n    }\n    return area;\n}\nint main() {\n    auto candidate = triangle_area;\n    assert(candidate((3), (4), (5)) == (6.0));\n    assert(candidate((1), (2), (10)) == (float(-1)));\n    assert(candidate((4), (8), (5)) == (8.18));\n    assert(candidate((2), (2), (2)) == (1.73));\n    assert(candidate((1), (2), (3)) == (float(-1)));\n    assert(candidate((10), (5), (7)) == (16.25));\n    assert(candidate((2), (6), (3)) == (float(-1)));\n    assert(candidate((1), (1), (1)) == (0.43));\n    assert(candidate((2), (2), (10)) == (float(-1)));\n}\n",
      "timestamp": 1664292645,
      "stdout": "",
      "stderr": "tmpp44u3deo: /tmp/tmpp44u3deo.cpp:22: int main(): Assertion `candidate((3), (4), (5)) == (6.0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.00\n// >>> triangle_area(1, 2, 10)\n// -1\nfloat triangle_area(long a, long b, long c) {\n    float area;\n    area = (float) (a + b + c) / 2;\n    if (a + b > c && a + c > b && b + c > a)\n        return area;\n    else\n        return -1;\n}\nint main() {\n    auto candidate = triangle_area;\n    assert(candidate((3), (4), (5)) == (6.0));\n    assert(candidate((1), (2), (10)) == (float(-1)));\n    assert(candidate((4), (8), (5)) == (8.18));\n    assert(candidate((2), (2), (2)) == (1.73));\n    assert(candidate((1), (2), (3)) == (float(-1)));\n    assert(candidate((10), (5), (7)) == (16.25));\n    assert(candidate((2), (6), (3)) == (float(-1)));\n    assert(candidate((1), (1), (1)) == (0.43));\n    assert(candidate((2), (2), (10)) == (float(-1)));\n}\n",
      "timestamp": 1664292649,
      "stdout": "",
      "stderr": "tmpnloiohh0: /tmp/tmpnloiohh0.cpp:25: int main(): Assertion `candidate((4), (8), (5)) == (8.18)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.00\n// >>> triangle_area(1, 2, 10)\n// -1\nfloat triangle_area(long a, long b, long c) {\n    if (a + b <= c || a + c <= b || b + c <= a)\n        return -1;\n    return (a + b + c) / 2;\n}\nint main() {\n    auto candidate = triangle_area;\n    assert(candidate((3), (4), (5)) == (6.0));\n    assert(candidate((1), (2), (10)) == (float(-1)));\n    assert(candidate((4), (8), (5)) == (8.18));\n    assert(candidate((2), (2), (2)) == (1.73));\n    assert(candidate((1), (2), (3)) == (float(-1)));\n    assert(candidate((10), (5), (7)) == (16.25));\n    assert(candidate((2), (6), (3)) == (float(-1)));\n    assert(candidate((1), (1), (1)) == (0.43));\n    assert(candidate((2), (2), (10)) == (float(-1)));\n}\n",
      "timestamp": 1664292646,
      "stdout": "",
      "stderr": "tmpcvdzaa1l: /tmp/tmpcvdzaa1l.cpp:22: int main(): Assertion `candidate((4), (8), (5)) == (8.18)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.00\n// >>> triangle_area(1, 2, 10)\n// -1\nfloat triangle_area(long a, long b, long c) {\n    float area = 0.0;\n    if (a + b > c && a + c > b && b + c > a) {\n        area = (float) (a * b * c) / 2.0;\n    }\n    return area;\n}\nint main() {\n    auto candidate = triangle_area;\n    assert(candidate((3), (4), (5)) == (6.0));\n    assert(candidate((1), (2), (10)) == (float(-1)));\n    assert(candidate((4), (8), (5)) == (8.18));\n    assert(candidate((2), (2), (2)) == (1.73));\n    assert(candidate((1), (2), (3)) == (float(-1)));\n    assert(candidate((10), (5), (7)) == (16.25));\n    assert(candidate((2), (6), (3)) == (float(-1)));\n    assert(candidate((1), (1), (1)) == (0.43));\n    assert(candidate((2), (2), (10)) == (float(-1)));\n}\n",
      "timestamp": 1664292649,
      "stdout": "",
      "stderr": "tmpqqmx0klh: /tmp/tmpqqmx0klh.cpp:22: int main(): Assertion `candidate((3), (4), (5)) == (6.0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.00\n// >>> triangle_area(1, 2, 10)\n// -1\nfloat triangle_area(long a, long b, long c) {\n    float area = 0.0f;\n    if (a + b > c && a + c > b && b + c > a) {\n        area = (a + b + c) / 2.0f;\n    }\n    return area;\n}\nint main() {\n    auto candidate = triangle_area;\n    assert(candidate((3), (4), (5)) == (6.0));\n    assert(candidate((1), (2), (10)) == (float(-1)));\n    assert(candidate((4), (8), (5)) == (8.18));\n    assert(candidate((2), (2), (2)) == (1.73));\n    assert(candidate((1), (2), (3)) == (float(-1)));\n    assert(candidate((10), (5), (7)) == (16.25));\n    assert(candidate((2), (6), (3)) == (float(-1)));\n    assert(candidate((1), (1), (1)) == (0.43));\n    assert(candidate((2), (2), (10)) == (float(-1)));\n}\n",
      "timestamp": 1664292649,
      "stdout": "",
      "stderr": "tmpdzd126qi: /tmp/tmpdzd126qi.cpp:23: int main(): Assertion `candidate((1), (2), (10)) == (float(-1))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.00\n// >>> triangle_area(1, 2, 10)\n// -1\nfloat triangle_area(long a, long b, long c) {\n    float area = 0.0;\n    if (a + b > c && a + c > b && b + c > a) {\n        area = (float) (a + b + c) / 2.0;\n    }\n    return area;\n}\nint main() {\n    auto candidate = triangle_area;\n    assert(candidate((3), (4), (5)) == (6.0));\n    assert(candidate((1), (2), (10)) == (float(-1)));\n    assert(candidate((4), (8), (5)) == (8.18));\n    assert(candidate((2), (2), (2)) == (1.73));\n    assert(candidate((1), (2), (3)) == (float(-1)));\n    assert(candidate((10), (5), (7)) == (16.25));\n    assert(candidate((2), (6), (3)) == (float(-1)));\n    assert(candidate((1), (1), (1)) == (0.43));\n    assert(candidate((2), (2), (10)) == (float(-1)));\n}\n",
      "timestamp": 1664292647,
      "stdout": "",
      "stderr": "tmp9ajjeii3: /tmp/tmp9ajjeii3.cpp:23: int main(): Assertion `candidate((1), (2), (10)) == (float(-1))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.00\n// >>> triangle_area(1, 2, 10)\n// -1\nfloat triangle_area(long a, long b, long c) {\n    float area = 0.0;\n    if (a + b > c && a + c > b && b + c > a) {\n        area = (float)(a + b + c) / 2.0;\n        area = area * area;\n    }\n    return area;\n}\nint main() {\n    auto candidate = triangle_area;\n    assert(candidate((3), (4), (5)) == (6.0));\n    assert(candidate((1), (2), (10)) == (float(-1)));\n    assert(candidate((4), (8), (5)) == (8.18));\n    assert(candidate((2), (2), (2)) == (1.73));\n    assert(candidate((1), (2), (3)) == (float(-1)));\n    assert(candidate((10), (5), (7)) == (16.25));\n    assert(candidate((2), (6), (3)) == (float(-1)));\n    assert(candidate((1), (1), (1)) == (0.43));\n    assert(candidate((2), (2), (10)) == (float(-1)));\n}\n",
      "timestamp": 1664292649,
      "stdout": "",
      "stderr": "tmpe7g0zn1e: /tmp/tmpe7g0zn1e.cpp:23: int main(): Assertion `candidate((3), (4), (5)) == (6.0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.00\n// >>> triangle_area(1, 2, 10)\n// -1\nfloat triangle_area(long a, long b, long c) {\n    float area = 0.0;\n    if (a + b > c && b + c > a && a + c > b) {\n        area = (float) (a + b + c) / 2.0;\n    }\n    return area;\n}\nint main() {\n    auto candidate = triangle_area;\n    assert(candidate((3), (4), (5)) == (6.0));\n    assert(candidate((1), (2), (10)) == (float(-1)));\n    assert(candidate((4), (8), (5)) == (8.18));\n    assert(candidate((2), (2), (2)) == (1.73));\n    assert(candidate((1), (2), (3)) == (float(-1)));\n    assert(candidate((10), (5), (7)) == (16.25));\n    assert(candidate((2), (6), (3)) == (float(-1)));\n    assert(candidate((1), (1), (1)) == (0.43));\n    assert(candidate((2), (2), (10)) == (float(-1)));\n}\n",
      "timestamp": 1664292647,
      "stdout": "",
      "stderr": "tmp0i4_73_c: /tmp/tmp0i4_73_c.cpp:23: int main(): Assertion `candidate((1), (2), (10)) == (float(-1))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.00\n// >>> triangle_area(1, 2, 10)\n// -1\nfloat triangle_area(long a, long b, long c) {\n    float area = 0.0;\n    if (a + b > c && b + c > a && c + a > b) {\n        area = (float) (a + b + c) / 2.0;\n        area = area * (area - a) * (area - b) * (area - c);\n        area = area / 2.0;\n    }\n    return area;\n}\nint main() {\n    auto candidate = triangle_area;\n    assert(candidate((3), (4), (5)) == (6.0));\n    assert(candidate((1), (2), (10)) == (float(-1)));\n    assert(candidate((4), (8), (5)) == (8.18));\n    assert(candidate((2), (2), (2)) == (1.73));\n    assert(candidate((1), (2), (3)) == (float(-1)));\n    assert(candidate((10), (5), (7)) == (16.25));\n    assert(candidate((2), (6), (3)) == (float(-1)));\n    assert(candidate((1), (1), (1)) == (0.43));\n    assert(candidate((2), (2), (10)) == (float(-1)));\n}\n",
      "timestamp": 1664292649,
      "stdout": "",
      "stderr": "tmprdv3931q: /tmp/tmprdv3931q.cpp:24: int main(): Assertion `candidate((3), (4), (5)) == (6.0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.00\n// >>> triangle_area(1, 2, 10)\n// -1\nfloat triangle_area(long a, long b, long c) {\n    if (a + b > c || b + c > a || a + c > b)\n        return -1;\n    float area = 0.5 * (a + b + c);\n    return area;\n}\nint main() {\n    auto candidate = triangle_area;\n    assert(candidate((3), (4), (5)) == (6.0));\n    assert(candidate((1), (2), (10)) == (float(-1)));\n    assert(candidate((4), (8), (5)) == (8.18));\n    assert(candidate((2), (2), (2)) == (1.73));\n    assert(candidate((1), (2), (3)) == (float(-1)));\n    assert(candidate((10), (5), (7)) == (16.25));\n    assert(candidate((2), (6), (3)) == (float(-1)));\n    assert(candidate((1), (1), (1)) == (0.43));\n    assert(candidate((2), (2), (10)) == (float(-1)));\n}\n",
      "timestamp": 1664292649,
      "stdout": "",
      "stderr": "tmp4yd0qfag: /tmp/tmp4yd0qfag.cpp:21: int main(): Assertion `candidate((3), (4), (5)) == (6.0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.00\n// >>> triangle_area(1, 2, 10)\n// -1\nfloat triangle_area(long a, long b, long c) {\n    float area;\n    area = (float) (a + b + c) / 2;\n    if (a + b > c && a + c > b && b + c > a) {\n        return area;\n    }\n    return -1;\n}\nint main() {\n    auto candidate = triangle_area;\n    assert(candidate((3), (4), (5)) == (6.0));\n    assert(candidate((1), (2), (10)) == (float(-1)));\n    assert(candidate((4), (8), (5)) == (8.18));\n    assert(candidate((2), (2), (2)) == (1.73));\n    assert(candidate((1), (2), (3)) == (float(-1)));\n    assert(candidate((10), (5), (7)) == (16.25));\n    assert(candidate((2), (6), (3)) == (float(-1)));\n    assert(candidate((1), (1), (1)) == (0.43));\n    assert(candidate((2), (2), (10)) == (float(-1)));\n}\n",
      "timestamp": 1664292648,
      "stdout": "",
      "stderr": "tmpzzzau_er: /tmp/tmpzzzau_er.cpp:25: int main(): Assertion `candidate((4), (8), (5)) == (8.18)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.00\n// >>> triangle_area(1, 2, 10)\n// -1\nfloat triangle_area(long a, long b, long c) {\n    float area = 0.0;\n    if (a + b > c && a + c > b && b + c > a) {\n        area = (float) (a * b * c) / 2.0;\n    }\n    return area;\n}\nint main() {\n    auto candidate = triangle_area;\n    assert(candidate((3), (4), (5)) == (6.0));\n    assert(candidate((1), (2), (10)) == (float(-1)));\n    assert(candidate((4), (8), (5)) == (8.18));\n    assert(candidate((2), (2), (2)) == (1.73));\n    assert(candidate((1), (2), (3)) == (float(-1)));\n    assert(candidate((10), (5), (7)) == (16.25));\n    assert(candidate((2), (6), (3)) == (float(-1)));\n    assert(candidate((1), (1), (1)) == (0.43));\n    assert(candidate((2), (2), (10)) == (float(-1)));\n}\n",
      "timestamp": 1664292649,
      "stdout": "",
      "stderr": "tmpqqmx0klh: /tmp/tmpqqmx0klh.cpp:22: int main(): Assertion `candidate((3), (4), (5)) == (6.0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.00\n// >>> triangle_area(1, 2, 10)\n// -1\nfloat triangle_area(long a, long b, long c) {\n    if (a + b <= c || a + c <= b || b + c <= a) return -1;\n    return (a + b + c) / 2.0;\n}\nint main() {\n    auto candidate = triangle_area;\n    assert(candidate((3), (4), (5)) == (6.0));\n    assert(candidate((1), (2), (10)) == (float(-1)));\n    assert(candidate((4), (8), (5)) == (8.18));\n    assert(candidate((2), (2), (2)) == (1.73));\n    assert(candidate((1), (2), (3)) == (float(-1)));\n    assert(candidate((10), (5), (7)) == (16.25));\n    assert(candidate((2), (6), (3)) == (float(-1)));\n    assert(candidate((1), (1), (1)) == (0.43));\n    assert(candidate((2), (2), (10)) == (float(-1)));\n}\n",
      "timestamp": 1664292649,
      "stdout": "",
      "stderr": "tmpk0d18fhp: /tmp/tmpk0d18fhp.cpp:21: int main(): Assertion `candidate((4), (8), (5)) == (8.18)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.00\n// >>> triangle_area(1, 2, 10)\n// -1\nfloat triangle_area(long a, long b, long c) {\n    float area = 0;\n    if (a + b > c) {\n        area = (float) (a + b - c) / 2;\n    }\n    return area;\n}\nint main() {\n    auto candidate = triangle_area;\n    assert(candidate((3), (4), (5)) == (6.0));\n    assert(candidate((1), (2), (10)) == (float(-1)));\n    assert(candidate((4), (8), (5)) == (8.18));\n    assert(candidate((2), (2), (2)) == (1.73));\n    assert(candidate((1), (2), (3)) == (float(-1)));\n    assert(candidate((10), (5), (7)) == (16.25));\n    assert(candidate((2), (6), (3)) == (float(-1)));\n    assert(candidate((1), (1), (1)) == (0.43));\n    assert(candidate((2), (2), (10)) == (float(-1)));\n}\n",
      "timestamp": 1664292644,
      "stdout": "",
      "stderr": "tmpbaygdssi: /tmp/tmpbaygdssi.cpp:22: int main(): Assertion `candidate((3), (4), (5)) == (6.0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.00\n// >>> triangle_area(1, 2, 10)\n// -1\nfloat triangle_area(long a, long b, long c) {\n    float area;\n    if (a + b > c && a + c > b && b + c > a) {\n        area = (float)(0.5 * (a + b + c) * sqrt(pow(a, 2) + pow(b, 2) + pow(c, 2)));\n    } else {\n        area = -1;\n    }\n    return area;\n}\nint main() {\n    auto candidate = triangle_area;\n    assert(candidate((3), (4), (5)) == (6.0));\n    assert(candidate((1), (2), (10)) == (float(-1)));\n    assert(candidate((4), (8), (5)) == (8.18));\n    assert(candidate((2), (2), (2)) == (1.73));\n    assert(candidate((1), (2), (3)) == (float(-1)));\n    assert(candidate((10), (5), (7)) == (16.25));\n    assert(candidate((2), (6), (3)) == (float(-1)));\n    assert(candidate((1), (1), (1)) == (0.43));\n    assert(candidate((2), (2), (10)) == (float(-1)));\n}\n",
      "timestamp": 1664292648,
      "stdout": "",
      "stderr": "tmpno68z7f8: /tmp/tmpno68z7f8.cpp:24: int main(): Assertion `candidate((3), (4), (5)) == (6.0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.00\n// >>> triangle_area(1, 2, 10)\n// -1\nfloat triangle_area(long a, long b, long c) {\n    float area = 0.0;\n    if (a + b > c && a + c > b && b + c > a) {\n        area = (float) (a + b + c) / 2.0;\n    }\n    return area;\n}\nint main() {\n    auto candidate = triangle_area;\n    assert(candidate((3), (4), (5)) == (6.0));\n    assert(candidate((1), (2), (10)) == (float(-1)));\n    assert(candidate((4), (8), (5)) == (8.18));\n    assert(candidate((2), (2), (2)) == (1.73));\n    assert(candidate((1), (2), (3)) == (float(-1)));\n    assert(candidate((10), (5), (7)) == (16.25));\n    assert(candidate((2), (6), (3)) == (float(-1)));\n    assert(candidate((1), (1), (1)) == (0.43));\n    assert(candidate((2), (2), (10)) == (float(-1)));\n}\n",
      "timestamp": 1664292647,
      "stdout": "",
      "stderr": "tmp9ajjeii3: /tmp/tmp9ajjeii3.cpp:23: int main(): Assertion `candidate((1), (2), (10)) == (float(-1))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.00\n// >>> triangle_area(1, 2, 10)\n// -1\nfloat triangle_area(long a, long b, long c) {\n    float area = 0;\n    if (a + b > c && a + c > b && b + c > a) {\n        area = (float) (a + b + c) / 2;\n    }\n    return area;\n}\nint main() {\n    auto candidate = triangle_area;\n    assert(candidate((3), (4), (5)) == (6.0));\n    assert(candidate((1), (2), (10)) == (float(-1)));\n    assert(candidate((4), (8), (5)) == (8.18));\n    assert(candidate((2), (2), (2)) == (1.73));\n    assert(candidate((1), (2), (3)) == (float(-1)));\n    assert(candidate((10), (5), (7)) == (16.25));\n    assert(candidate((2), (6), (3)) == (float(-1)));\n    assert(candidate((1), (1), (1)) == (0.43));\n    assert(candidate((2), (2), (10)) == (float(-1)));\n}\n",
      "timestamp": 1664292646,
      "stdout": "",
      "stderr": "tmp938xrm5j: /tmp/tmp938xrm5j.cpp:23: int main(): Assertion `candidate((1), (2), (10)) == (float(-1))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.00\n// >>> triangle_area(1, 2, 10)\n// -1\nfloat triangle_area(long a, long b, long c) {\n    if (a + b <= c || b + c <= a || c + a <= b)\n        return -1;\n    return (a + b + c) / 2;\n}\nint main() {\n    auto candidate = triangle_area;\n    assert(candidate((3), (4), (5)) == (6.0));\n    assert(candidate((1), (2), (10)) == (float(-1)));\n    assert(candidate((4), (8), (5)) == (8.18));\n    assert(candidate((2), (2), (2)) == (1.73));\n    assert(candidate((1), (2), (3)) == (float(-1)));\n    assert(candidate((10), (5), (7)) == (16.25));\n    assert(candidate((2), (6), (3)) == (float(-1)));\n    assert(candidate((1), (1), (1)) == (0.43));\n    assert(candidate((2), (2), (10)) == (float(-1)));\n}\n",
      "timestamp": 1664292649,
      "stdout": "",
      "stderr": "tmpd9reuknw: /tmp/tmpd9reuknw.cpp:22: int main(): Assertion `candidate((4), (8), (5)) == (8.18)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.00\n// >>> triangle_area(1, 2, 10)\n// -1\nfloat triangle_area(long a, long b, long c) {\n    float area = 0.0f;\n    if (a + b > c && b + c > a && a + c > b) {\n        area = (float)(0.5 * (a + b + c) * (a + b - c) * (a + c - b) * (b + c - a));\n    }\n    return area;\n}\nint main() {\n    auto candidate = triangle_area;\n    assert(candidate((3), (4), (5)) == (6.0));\n    assert(candidate((1), (2), (10)) == (float(-1)));\n    assert(candidate((4), (8), (5)) == (8.18));\n    assert(candidate((2), (2), (2)) == (1.73));\n    assert(candidate((1), (2), (3)) == (float(-1)));\n    assert(candidate((10), (5), (7)) == (16.25));\n    assert(candidate((2), (6), (3)) == (float(-1)));\n    assert(candidate((1), (1), (1)) == (0.43));\n    assert(candidate((2), (2), (10)) == (float(-1)));\n}\n",
      "timestamp": 1664292649,
      "stdout": "",
      "stderr": "tmpyulgf226: /tmp/tmpyulgf226.cpp:22: int main(): Assertion `candidate((3), (4), (5)) == (6.0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.00\n// >>> triangle_area(1, 2, 10)\n// -1\nfloat triangle_area(long a, long b, long c) {\n    if (a + b <= c || a + c <= b || b + c <= a) {\n        return -1;\n    }\n    return (a + b + c) / 2;\n}\nint main() {\n    auto candidate = triangle_area;\n    assert(candidate((3), (4), (5)) == (6.0));\n    assert(candidate((1), (2), (10)) == (float(-1)));\n    assert(candidate((4), (8), (5)) == (8.18));\n    assert(candidate((2), (2), (2)) == (1.73));\n    assert(candidate((1), (2), (3)) == (float(-1)));\n    assert(candidate((10), (5), (7)) == (16.25));\n    assert(candidate((2), (6), (3)) == (float(-1)));\n    assert(candidate((1), (1), (1)) == (0.43));\n    assert(candidate((2), (2), (10)) == (float(-1)));\n}\n",
      "timestamp": 1664292646,
      "stdout": "",
      "stderr": "tmp9iffjjte: /tmp/tmp9iffjjte.cpp:23: int main(): Assertion `candidate((4), (8), (5)) == (8.18)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.00\n// >>> triangle_area(1, 2, 10)\n// -1\nfloat triangle_area(long a, long b, long c) {\n    float area = 0;\n    if (a + b > c && a + c > b && b + c > a) {\n        area = (float) (a + b + c) / 2;\n        area = area * area / 2;\n    }\n    return area;\n}\nint main() {\n    auto candidate = triangle_area;\n    assert(candidate((3), (4), (5)) == (6.0));\n    assert(candidate((1), (2), (10)) == (float(-1)));\n    assert(candidate((4), (8), (5)) == (8.18));\n    assert(candidate((2), (2), (2)) == (1.73));\n    assert(candidate((1), (2), (3)) == (float(-1)));\n    assert(candidate((10), (5), (7)) == (16.25));\n    assert(candidate((2), (6), (3)) == (float(-1)));\n    assert(candidate((1), (1), (1)) == (0.43));\n    assert(candidate((2), (2), (10)) == (float(-1)));\n}\n",
      "timestamp": 1664292649,
      "stdout": "",
      "stderr": "tmpi2u51aau: /tmp/tmpi2u51aau.cpp:23: int main(): Assertion `candidate((3), (4), (5)) == (6.0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.00\n// >>> triangle_area(1, 2, 10)\n// -1\nfloat triangle_area(long a, long b, long c) {\n    if (a + b <= c || b + c <= a || a + c <= b) {\n        return -1;\n    }\n    return (a + b + c) / 2;\n}\nint main() {\n    auto candidate = triangle_area;\n    assert(candidate((3), (4), (5)) == (6.0));\n    assert(candidate((1), (2), (10)) == (float(-1)));\n    assert(candidate((4), (8), (5)) == (8.18));\n    assert(candidate((2), (2), (2)) == (1.73));\n    assert(candidate((1), (2), (3)) == (float(-1)));\n    assert(candidate((10), (5), (7)) == (16.25));\n    assert(candidate((2), (6), (3)) == (float(-1)));\n    assert(candidate((1), (1), (1)) == (0.43));\n    assert(candidate((2), (2), (10)) == (float(-1)));\n}\n",
      "timestamp": 1664292645,
      "stdout": "",
      "stderr": "tmp3_fw44k1: /tmp/tmp3_fw44k1.cpp:23: int main(): Assertion `candidate((4), (8), (5)) == (8.18)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.00\n// >>> triangle_area(1, 2, 10)\n// -1\nfloat triangle_area(long a, long b, long c) {\n    float area = 0;\n    if (a + b > c && b + c > a && a + c > b) {\n        area = (float) (a * b * c) / 2;\n    }\n    return area;\n}\nint main() {\n    auto candidate = triangle_area;\n    assert(candidate((3), (4), (5)) == (6.0));\n    assert(candidate((1), (2), (10)) == (float(-1)));\n    assert(candidate((4), (8), (5)) == (8.18));\n    assert(candidate((2), (2), (2)) == (1.73));\n    assert(candidate((1), (2), (3)) == (float(-1)));\n    assert(candidate((10), (5), (7)) == (16.25));\n    assert(candidate((2), (6), (3)) == (float(-1)));\n    assert(candidate((1), (1), (1)) == (0.43));\n    assert(candidate((2), (2), (10)) == (float(-1)));\n}\n",
      "timestamp": 1664292645,
      "stdout": "",
      "stderr": "tmp_mpramxl: /tmp/tmp_mpramxl.cpp:22: int main(): Assertion `candidate((3), (4), (5)) == (6.0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.00\n// >>> triangle_area(1, 2, 10)\n// -1\nfloat triangle_area(long a, long b, long c) {\n    float area;\n    if (a + b > c || a + c > b || b + c > a)\n        area = -1;\n    else\n        area = (float) (a + b + c) / 2;\n    return area;\n}\nint main() {\n    auto candidate = triangle_area;\n    assert(candidate((3), (4), (5)) == (6.0));\n    assert(candidate((1), (2), (10)) == (float(-1)));\n    assert(candidate((4), (8), (5)) == (8.18));\n    assert(candidate((2), (2), (2)) == (1.73));\n    assert(candidate((1), (2), (3)) == (float(-1)));\n    assert(candidate((10), (5), (7)) == (16.25));\n    assert(candidate((2), (6), (3)) == (float(-1)));\n    assert(candidate((1), (1), (1)) == (0.43));\n    assert(candidate((2), (2), (10)) == (float(-1)));\n}\n",
      "timestamp": 1664292650,
      "stdout": "",
      "stderr": "tmprcki53zm: /tmp/tmprcki53zm.cpp:23: int main(): Assertion `candidate((3), (4), (5)) == (6.0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.00\n// >>> triangle_area(1, 2, 10)\n// -1\nfloat triangle_area(long a, long b, long c) {\n    float area = 0.0;\n    if (a + b > c && a + c > b && b + c > a) {\n        area = (float)(0.5 * (a + b + c) * (a + b - c) * (a + c - b) * (b + c - a));\n    }\n    return area;\n}\nint main() {\n    auto candidate = triangle_area;\n    assert(candidate((3), (4), (5)) == (6.0));\n    assert(candidate((1), (2), (10)) == (float(-1)));\n    assert(candidate((4), (8), (5)) == (8.18));\n    assert(candidate((2), (2), (2)) == (1.73));\n    assert(candidate((1), (2), (3)) == (float(-1)));\n    assert(candidate((10), (5), (7)) == (16.25));\n    assert(candidate((2), (6), (3)) == (float(-1)));\n    assert(candidate((1), (1), (1)) == (0.43));\n    assert(candidate((2), (2), (10)) == (float(-1)));\n}\n",
      "timestamp": 1664292650,
      "stdout": "",
      "stderr": "tmpmboi69m9: /tmp/tmpmboi69m9.cpp:22: int main(): Assertion `candidate((3), (4), (5)) == (6.0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.00\n// >>> triangle_area(1, 2, 10)\n// -1\nfloat triangle_area(long a, long b, long c) {\n    float area = 0.0f;\n    if (a + b > c && b + c > a && a + c > b) {\n        area = (float) (a * b * c) / 2.0f;\n    }\n    return area;\n}\nint main() {\n    auto candidate = triangle_area;\n    assert(candidate((3), (4), (5)) == (6.0));\n    assert(candidate((1), (2), (10)) == (float(-1)));\n    assert(candidate((4), (8), (5)) == (8.18));\n    assert(candidate((2), (2), (2)) == (1.73));\n    assert(candidate((1), (2), (3)) == (float(-1)));\n    assert(candidate((10), (5), (7)) == (16.25));\n    assert(candidate((2), (6), (3)) == (float(-1)));\n    assert(candidate((1), (1), (1)) == (0.43));\n    assert(candidate((2), (2), (10)) == (float(-1)));\n}\n",
      "timestamp": 1664292650,
      "stdout": "",
      "stderr": "tmpul0yxq5c: /tmp/tmpul0yxq5c.cpp:22: int main(): Assertion `candidate((3), (4), (5)) == (6.0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.00\n// >>> triangle_area(1, 2, 10)\n// -1\nfloat triangle_area(long a, long b, long c) {\n    if (a + b <= c || b + c <= a || c + a <= b)\n        return -1;\n    return (a + b + c) / 2;\n}\nint main() {\n    auto candidate = triangle_area;\n    assert(candidate((3), (4), (5)) == (6.0));\n    assert(candidate((1), (2), (10)) == (float(-1)));\n    assert(candidate((4), (8), (5)) == (8.18));\n    assert(candidate((2), (2), (2)) == (1.73));\n    assert(candidate((1), (2), (3)) == (float(-1)));\n    assert(candidate((10), (5), (7)) == (16.25));\n    assert(candidate((2), (6), (3)) == (float(-1)));\n    assert(candidate((1), (1), (1)) == (0.43));\n    assert(candidate((2), (2), (10)) == (float(-1)));\n}\n",
      "timestamp": 1664292649,
      "stdout": "",
      "stderr": "tmpd9reuknw: /tmp/tmpd9reuknw.cpp:22: int main(): Assertion `candidate((4), (8), (5)) == (8.18)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.00\n// >>> triangle_area(1, 2, 10)\n// -1\nfloat triangle_area(long a, long b, long c) {\n    if (a + b > c || a + c > b || b + c > a) {\n        return -1;\n    }\n    float area = 0.5 * (a + b + c);\n    area = area * area / 2;\n    return area;\n}\nint main() {\n    auto candidate = triangle_area;\n    assert(candidate((3), (4), (5)) == (6.0));\n    assert(candidate((1), (2), (10)) == (float(-1)));\n    assert(candidate((4), (8), (5)) == (8.18));\n    assert(candidate((2), (2), (2)) == (1.73));\n    assert(candidate((1), (2), (3)) == (float(-1)));\n    assert(candidate((10), (5), (7)) == (16.25));\n    assert(candidate((2), (6), (3)) == (float(-1)));\n    assert(candidate((1), (1), (1)) == (0.43));\n    assert(candidate((2), (2), (10)) == (float(-1)));\n}\n",
      "timestamp": 1664292650,
      "stdout": "",
      "stderr": "tmpx9nkg_gh: /tmp/tmpx9nkg_gh.cpp:23: int main(): Assertion `candidate((3), (4), (5)) == (6.0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.00\n// >>> triangle_area(1, 2, 10)\n// -1\nfloat triangle_area(long a, long b, long c) {\n    float area = 0.0;\n    if (a + b > c && a + c > b && b + c > a) {\n        area = (float) (a * b * c) / 2.0;\n    }\n    return area;\n}\nint main() {\n    auto candidate = triangle_area;\n    assert(candidate((3), (4), (5)) == (6.0));\n    assert(candidate((1), (2), (10)) == (float(-1)));\n    assert(candidate((4), (8), (5)) == (8.18));\n    assert(candidate((2), (2), (2)) == (1.73));\n    assert(candidate((1), (2), (3)) == (float(-1)));\n    assert(candidate((10), (5), (7)) == (16.25));\n    assert(candidate((2), (6), (3)) == (float(-1)));\n    assert(candidate((1), (1), (1)) == (0.43));\n    assert(candidate((2), (2), (10)) == (float(-1)));\n}\n",
      "timestamp": 1664292649,
      "stdout": "",
      "stderr": "tmpqqmx0klh: /tmp/tmpqqmx0klh.cpp:22: int main(): Assertion `candidate((3), (4), (5)) == (6.0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.00\n// >>> triangle_area(1, 2, 10)\n// -1\nfloat triangle_area(long a, long b, long c) {\n    float area = 0.0;\n    if (a + b > c && b + c > a && a + c > b) {\n        area = (float) (a + b + c) / 2.0;\n    }\n    return area;\n}\nint main() {\n    auto candidate = triangle_area;\n    assert(candidate((3), (4), (5)) == (6.0));\n    assert(candidate((1), (2), (10)) == (float(-1)));\n    assert(candidate((4), (8), (5)) == (8.18));\n    assert(candidate((2), (2), (2)) == (1.73));\n    assert(candidate((1), (2), (3)) == (float(-1)));\n    assert(candidate((10), (5), (7)) == (16.25));\n    assert(candidate((2), (6), (3)) == (float(-1)));\n    assert(candidate((1), (1), (1)) == (0.43));\n    assert(candidate((2), (2), (10)) == (float(-1)));\n}\n",
      "timestamp": 1664292647,
      "stdout": "",
      "stderr": "tmp0i4_73_c: /tmp/tmp0i4_73_c.cpp:23: int main(): Assertion `candidate((1), (2), (10)) == (float(-1))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.00\n// >>> triangle_area(1, 2, 10)\n// -1\nfloat triangle_area(long a, long b, long c) {\n    if (a + b <= c || b + c <= a || c + a <= b) return -1;\n    return (a + b + c) / 2;\n}\nint main() {\n    auto candidate = triangle_area;\n    assert(candidate((3), (4), (5)) == (6.0));\n    assert(candidate((1), (2), (10)) == (float(-1)));\n    assert(candidate((4), (8), (5)) == (8.18));\n    assert(candidate((2), (2), (2)) == (1.73));\n    assert(candidate((1), (2), (3)) == (float(-1)));\n    assert(candidate((10), (5), (7)) == (16.25));\n    assert(candidate((2), (6), (3)) == (float(-1)));\n    assert(candidate((1), (1), (1)) == (0.43));\n    assert(candidate((2), (2), (10)) == (float(-1)));\n}\n",
      "timestamp": 1664292650,
      "stdout": "",
      "stderr": "tmphhmygv_n: /tmp/tmphhmygv_n.cpp:21: int main(): Assertion `candidate((4), (8), (5)) == (8.18)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.00\n// >>> triangle_area(1, 2, 10)\n// -1\nfloat triangle_area(long a, long b, long c) {\n    if (a + b <= c || b + c <= a || a + c <= b) return -1;\n    return (a + b + c) / 2;\n}\nint main() {\n    auto candidate = triangle_area;\n    assert(candidate((3), (4), (5)) == (6.0));\n    assert(candidate((1), (2), (10)) == (float(-1)));\n    assert(candidate((4), (8), (5)) == (8.18));\n    assert(candidate((2), (2), (2)) == (1.73));\n    assert(candidate((1), (2), (3)) == (float(-1)));\n    assert(candidate((10), (5), (7)) == (16.25));\n    assert(candidate((2), (6), (3)) == (float(-1)));\n    assert(candidate((1), (1), (1)) == (0.43));\n    assert(candidate((2), (2), (10)) == (float(-1)));\n}\n",
      "timestamp": 1664292650,
      "stdout": "",
      "stderr": "tmpiixmyicc: /tmp/tmpiixmyicc.cpp:21: int main(): Assertion `candidate((4), (8), (5)) == (8.18)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.00\n// >>> triangle_area(1, 2, 10)\n// -1\nfloat triangle_area(long a, long b, long c) {\n    if (a + b <= c || b + c <= a || a + c <= b) {\n        return -1;\n    }\n    return (a + b + c) / 2;\n}\nint main() {\n    auto candidate = triangle_area;\n    assert(candidate((3), (4), (5)) == (6.0));\n    assert(candidate((1), (2), (10)) == (float(-1)));\n    assert(candidate((4), (8), (5)) == (8.18));\n    assert(candidate((2), (2), (2)) == (1.73));\n    assert(candidate((1), (2), (3)) == (float(-1)));\n    assert(candidate((10), (5), (7)) == (16.25));\n    assert(candidate((2), (6), (3)) == (float(-1)));\n    assert(candidate((1), (1), (1)) == (0.43));\n    assert(candidate((2), (2), (10)) == (float(-1)));\n}\n",
      "timestamp": 1664292645,
      "stdout": "",
      "stderr": "tmp3_fw44k1: /tmp/tmp3_fw44k1.cpp:23: int main(): Assertion `candidate((4), (8), (5)) == (8.18)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.00\n// >>> triangle_area(1, 2, 10)\n// -1\nfloat triangle_area(long a, long b, long c) {\n    float area = 0.0;\n    if (a + b > c && b + c > a && c + a > b) {\n        area = (float) (a + b + c) / 2.0;\n        area = area * area;\n    }\n    return area;\n}\nint main() {\n    auto candidate = triangle_area;\n    assert(candidate((3), (4), (5)) == (6.0));\n    assert(candidate((1), (2), (10)) == (float(-1)));\n    assert(candidate((4), (8), (5)) == (8.18));\n    assert(candidate((2), (2), (2)) == (1.73));\n    assert(candidate((1), (2), (3)) == (float(-1)));\n    assert(candidate((10), (5), (7)) == (16.25));\n    assert(candidate((2), (6), (3)) == (float(-1)));\n    assert(candidate((1), (1), (1)) == (0.43));\n    assert(candidate((2), (2), (10)) == (float(-1)));\n}\n",
      "timestamp": 1664292650,
      "stdout": "",
      "stderr": "tmpi4jsa2xh: /tmp/tmpi4jsa2xh.cpp:23: int main(): Assertion `candidate((3), (4), (5)) == (6.0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.00\n// >>> triangle_area(1, 2, 10)\n// -1\nfloat triangle_area(long a, long b, long c) {\n    float area = 0.0;\n    if (a + b > c && a + c > b && b + c > a) {\n        area = (float) (a + b + c) / 2.0;\n        area = area * area / 2.0;\n    }\n    return area;\n}\nint main() {\n    auto candidate = triangle_area;\n    assert(candidate((3), (4), (5)) == (6.0));\n    assert(candidate((1), (2), (10)) == (float(-1)));\n    assert(candidate((4), (8), (5)) == (8.18));\n    assert(candidate((2), (2), (2)) == (1.73));\n    assert(candidate((1), (2), (3)) == (float(-1)));\n    assert(candidate((10), (5), (7)) == (16.25));\n    assert(candidate((2), (6), (3)) == (float(-1)));\n    assert(candidate((1), (1), (1)) == (0.43));\n    assert(candidate((2), (2), (10)) == (float(-1)));\n}\n",
      "timestamp": 1664292645,
      "stdout": "",
      "stderr": "tmp5pwsuy0y: /tmp/tmp5pwsuy0y.cpp:23: int main(): Assertion `candidate((3), (4), (5)) == (6.0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.00\n// >>> triangle_area(1, 2, 10)\n// -1\nfloat triangle_area(long a, long b, long c) {\n    float area = 0.0f;\n    if (a + b > c && a + c > b && b + c > a) {\n        area = (float) (a + b + c) / 2.0f;\n    }\n    return area;\n}\nint main() {\n    auto candidate = triangle_area;\n    assert(candidate((3), (4), (5)) == (6.0));\n    assert(candidate((1), (2), (10)) == (float(-1)));\n    assert(candidate((4), (8), (5)) == (8.18));\n    assert(candidate((2), (2), (2)) == (1.73));\n    assert(candidate((1), (2), (3)) == (float(-1)));\n    assert(candidate((10), (5), (7)) == (16.25));\n    assert(candidate((2), (6), (3)) == (float(-1)));\n    assert(candidate((1), (1), (1)) == (0.43));\n    assert(candidate((2), (2), (10)) == (float(-1)));\n}\n",
      "timestamp": 1664292646,
      "stdout": "",
      "stderr": "tmp69biwqhe: /tmp/tmp69biwqhe.cpp:23: int main(): Assertion `candidate((1), (2), (10)) == (float(-1))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.00\n// >>> triangle_area(1, 2, 10)\n// -1\nfloat triangle_area(long a, long b, long c) {\n    if (a + b <= c || b + c <= a || a + c <= b) {\n        return -1;\n    }\n    float area = (float) (a * b * c) / 2;\n    return area;\n}\nint main() {\n    auto candidate = triangle_area;\n    assert(candidate((3), (4), (5)) == (6.0));\n    assert(candidate((1), (2), (10)) == (float(-1)));\n    assert(candidate((4), (8), (5)) == (8.18));\n    assert(candidate((2), (2), (2)) == (1.73));\n    assert(candidate((1), (2), (3)) == (float(-1)));\n    assert(candidate((10), (5), (7)) == (16.25));\n    assert(candidate((2), (6), (3)) == (float(-1)));\n    assert(candidate((1), (1), (1)) == (0.43));\n    assert(candidate((2), (2), (10)) == (float(-1)));\n}\n",
      "timestamp": 1664292651,
      "stdout": "",
      "stderr": "tmpalfvvmxk: /tmp/tmpalfvvmxk.cpp:22: int main(): Assertion `candidate((3), (4), (5)) == (6.0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.00\n// >>> triangle_area(1, 2, 10)\n// -1\nfloat triangle_area(long a, long b, long c) {\n    if (a + b < c || a + c < b || b + c < a) return -1;\n    return (a + b + c) / 2.0;\n}\nint main() {\n    auto candidate = triangle_area;\n    assert(candidate((3), (4), (5)) == (6.0));\n    assert(candidate((1), (2), (10)) == (float(-1)));\n    assert(candidate((4), (8), (5)) == (8.18));\n    assert(candidate((2), (2), (2)) == (1.73));\n    assert(candidate((1), (2), (3)) == (float(-1)));\n    assert(candidate((10), (5), (7)) == (16.25));\n    assert(candidate((2), (6), (3)) == (float(-1)));\n    assert(candidate((1), (1), (1)) == (0.43));\n    assert(candidate((2), (2), (10)) == (float(-1)));\n}\n",
      "timestamp": 1664292645,
      "stdout": "",
      "stderr": "tmpnduvapsm: /tmp/tmpnduvapsm.cpp:21: int main(): Assertion `candidate((4), (8), (5)) == (8.18)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.00\n// >>> triangle_area(1, 2, 10)\n// -1\nfloat triangle_area(long a, long b, long c) {\n    float area = 0;\n    if (a + b > c || a + c > b || b + c > a)\n        return -1;\n    area = (a + b + c) / 2;\n    area = area * area;\n    return area;\n}\nint main() {\n    auto candidate = triangle_area;\n    assert(candidate((3), (4), (5)) == (6.0));\n    assert(candidate((1), (2), (10)) == (float(-1)));\n    assert(candidate((4), (8), (5)) == (8.18));\n    assert(candidate((2), (2), (2)) == (1.73));\n    assert(candidate((1), (2), (3)) == (float(-1)));\n    assert(candidate((10), (5), (7)) == (16.25));\n    assert(candidate((2), (6), (3)) == (float(-1)));\n    assert(candidate((1), (1), (1)) == (0.43));\n    assert(candidate((2), (2), (10)) == (float(-1)));\n}\n",
      "timestamp": 1664292651,
      "stdout": "",
      "stderr": "tmp7uph32_a: /tmp/tmp7uph32_a.cpp:23: int main(): Assertion `candidate((3), (4), (5)) == (6.0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.00\n// >>> triangle_area(1, 2, 10)\n// -1\nfloat triangle_area(long a, long b, long c) {\n    float area;\n    if (a + b > c || a + c > b || b + c > a) {\n        area = -1;\n    } else {\n        area = (float) (a + b + c) / 2;\n    }\n    return area;\n}\nint main() {\n    auto candidate = triangle_area;\n    assert(candidate((3), (4), (5)) == (6.0));\n    assert(candidate((1), (2), (10)) == (float(-1)));\n    assert(candidate((4), (8), (5)) == (8.18));\n    assert(candidate((2), (2), (2)) == (1.73));\n    assert(candidate((1), (2), (3)) == (float(-1)));\n    assert(candidate((10), (5), (7)) == (16.25));\n    assert(candidate((2), (6), (3)) == (float(-1)));\n    assert(candidate((1), (1), (1)) == (0.43));\n    assert(candidate((2), (2), (10)) == (float(-1)));\n}\n",
      "timestamp": 1664292644,
      "stdout": "",
      "stderr": "tmpn12a5glp: /tmp/tmpn12a5glp.cpp:24: int main(): Assertion `candidate((3), (4), (5)) == (6.0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.00\n// >>> triangle_area(1, 2, 10)\n// -1\nfloat triangle_area(long a, long b, long c) {\n    if (a + b <= c || b + c <= a || a + c <= b)\n        return -1;\n    return (float)(a + b + c) / 2;\n}\nint main() {\n    auto candidate = triangle_area;\n    assert(candidate((3), (4), (5)) == (6.0));\n    assert(candidate((1), (2), (10)) == (float(-1)));\n    assert(candidate((4), (8), (5)) == (8.18));\n    assert(candidate((2), (2), (2)) == (1.73));\n    assert(candidate((1), (2), (3)) == (float(-1)));\n    assert(candidate((10), (5), (7)) == (16.25));\n    assert(candidate((2), (6), (3)) == (float(-1)));\n    assert(candidate((1), (1), (1)) == (0.43));\n    assert(candidate((2), (2), (10)) == (float(-1)));\n}\n",
      "timestamp": 1664292650,
      "stdout": "",
      "stderr": "tmp83yso2c_: /tmp/tmp83yso2c_.cpp:22: int main(): Assertion `candidate((4), (8), (5)) == (8.18)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.00\n// >>> triangle_area(1, 2, 10)\n// -1\nfloat triangle_area(long a, long b, long c) {\n    float area = 0.0;\n    if (a + b > c && a + c > b && b + c > a) {\n        area = (float) (a + b + c) / 2.0;\n        area = area * area;\n    }\n    return area;\n}\nint main() {\n    auto candidate = triangle_area;\n    assert(candidate((3), (4), (5)) == (6.0));\n    assert(candidate((1), (2), (10)) == (float(-1)));\n    assert(candidate((4), (8), (5)) == (8.18));\n    assert(candidate((2), (2), (2)) == (1.73));\n    assert(candidate((1), (2), (3)) == (float(-1)));\n    assert(candidate((10), (5), (7)) == (16.25));\n    assert(candidate((2), (6), (3)) == (float(-1)));\n    assert(candidate((1), (1), (1)) == (0.43));\n    assert(candidate((2), (2), (10)) == (float(-1)));\n}\n",
      "timestamp": 1664292651,
      "stdout": "",
      "stderr": "tmpbfeg2z5u: /tmp/tmpbfeg2z5u.cpp:23: int main(): Assertion `candidate((3), (4), (5)) == (6.0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.00\n// >>> triangle_area(1, 2, 10)\n// -1\nfloat triangle_area(long a, long b, long c) {\n    float area = 0.0;\n    if (a + b > c && b + c > a && a + c > b) {\n        area = (float)(a * b * c) / 2.0;\n    }\n    return area;\n}\nint main() {\n    auto candidate = triangle_area;\n    assert(candidate((3), (4), (5)) == (6.0));\n    assert(candidate((1), (2), (10)) == (float(-1)));\n    assert(candidate((4), (8), (5)) == (8.18));\n    assert(candidate((2), (2), (2)) == (1.73));\n    assert(candidate((1), (2), (3)) == (float(-1)));\n    assert(candidate((10), (5), (7)) == (16.25));\n    assert(candidate((2), (6), (3)) == (float(-1)));\n    assert(candidate((1), (1), (1)) == (0.43));\n    assert(candidate((2), (2), (10)) == (float(-1)));\n}\n",
      "timestamp": 1664292650,
      "stdout": "",
      "stderr": "tmptzsgi8o8: /tmp/tmptzsgi8o8.cpp:22: int main(): Assertion `candidate((3), (4), (5)) == (6.0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.00\n// >>> triangle_area(1, 2, 10)\n// -1\nfloat triangle_area(long a, long b, long c) {\n    if (a + b <= c || a + c <= b || b + c <= a) return -1;\n    return (a + b + c) / 2.0;\n}\nint main() {\n    auto candidate = triangle_area;\n    assert(candidate((3), (4), (5)) == (6.0));\n    assert(candidate((1), (2), (10)) == (float(-1)));\n    assert(candidate((4), (8), (5)) == (8.18));\n    assert(candidate((2), (2), (2)) == (1.73));\n    assert(candidate((1), (2), (3)) == (float(-1)));\n    assert(candidate((10), (5), (7)) == (16.25));\n    assert(candidate((2), (6), (3)) == (float(-1)));\n    assert(candidate((1), (1), (1)) == (0.43));\n    assert(candidate((2), (2), (10)) == (float(-1)));\n}\n",
      "timestamp": 1664292649,
      "stdout": "",
      "stderr": "tmpk0d18fhp: /tmp/tmpk0d18fhp.cpp:21: int main(): Assertion `candidate((4), (8), (5)) == (8.18)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.00\n// >>> triangle_area(1, 2, 10)\n// -1\nfloat triangle_area(long a, long b, long c) {\n    float area = 0.0;\n    if (a + b > c && b + c > a && a + c > b) {\n        area = (float) (a + b + c) / 2.0;\n    }\n    return area;\n}\nint main() {\n    auto candidate = triangle_area;\n    assert(candidate((3), (4), (5)) == (6.0));\n    assert(candidate((1), (2), (10)) == (float(-1)));\n    assert(candidate((4), (8), (5)) == (8.18));\n    assert(candidate((2), (2), (2)) == (1.73));\n    assert(candidate((1), (2), (3)) == (float(-1)));\n    assert(candidate((10), (5), (7)) == (16.25));\n    assert(candidate((2), (6), (3)) == (float(-1)));\n    assert(candidate((1), (1), (1)) == (0.43));\n    assert(candidate((2), (2), (10)) == (float(-1)));\n}\n",
      "timestamp": 1664292647,
      "stdout": "",
      "stderr": "tmp0i4_73_c: /tmp/tmp0i4_73_c.cpp:23: int main(): Assertion `candidate((1), (2), (10)) == (float(-1))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.00\n// >>> triangle_area(1, 2, 10)\n// -1\nfloat triangle_area(long a, long b, long c) {\n    float area = 0.0;\n    if (a + b > c && b + c > a && c + a > b) {\n        area = (float) (a * b * 0.5);\n    }\n    return area;\n}\nint main() {\n    auto candidate = triangle_area;\n    assert(candidate((3), (4), (5)) == (6.0));\n    assert(candidate((1), (2), (10)) == (float(-1)));\n    assert(candidate((4), (8), (5)) == (8.18));\n    assert(candidate((2), (2), (2)) == (1.73));\n    assert(candidate((1), (2), (3)) == (float(-1)));\n    assert(candidate((10), (5), (7)) == (16.25));\n    assert(candidate((2), (6), (3)) == (float(-1)));\n    assert(candidate((1), (1), (1)) == (0.43));\n    assert(candidate((2), (2), (10)) == (float(-1)));\n}\n",
      "timestamp": 1664292650,
      "stdout": "",
      "stderr": "tmpcf94f3m3: /tmp/tmpcf94f3m3.cpp:23: int main(): Assertion `candidate((1), (2), (10)) == (float(-1))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.00\n// >>> triangle_area(1, 2, 10)\n// -1\nfloat triangle_area(long a, long b, long c) {\n    float area;\n    area = (float) (a + b + c) / 2;\n    area = area - sqrt(area * (area - a) * (area - b) * (area - c));\n    return area;\n}\nint main() {\n    auto candidate = triangle_area;\n    assert(candidate((3), (4), (5)) == (6.0));\n    assert(candidate((1), (2), (10)) == (float(-1)));\n    assert(candidate((4), (8), (5)) == (8.18));\n    assert(candidate((2), (2), (2)) == (1.73));\n    assert(candidate((1), (2), (3)) == (float(-1)));\n    assert(candidate((10), (5), (7)) == (16.25));\n    assert(candidate((2), (6), (3)) == (float(-1)));\n    assert(candidate((1), (1), (1)) == (0.43));\n    assert(candidate((2), (2), (10)) == (float(-1)));\n}\n",
      "timestamp": 1664292650,
      "stdout": "",
      "stderr": "tmphtvpksjn: /tmp/tmphtvpksjn.cpp:21: int main(): Assertion `candidate((3), (4), (5)) == (6.0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.00\n// >>> triangle_area(1, 2, 10)\n// -1\nfloat triangle_area(long a, long b, long c) {\n    float area = 0.0;\n    if (a + b > c && b + c > a && c + a > b) {\n        area = (float) (a * b * c) / 2.0;\n    }\n    return area;\n}\nint main() {\n    auto candidate = triangle_area;\n    assert(candidate((3), (4), (5)) == (6.0));\n    assert(candidate((1), (2), (10)) == (float(-1)));\n    assert(candidate((4), (8), (5)) == (8.18));\n    assert(candidate((2), (2), (2)) == (1.73));\n    assert(candidate((1), (2), (3)) == (float(-1)));\n    assert(candidate((10), (5), (7)) == (16.25));\n    assert(candidate((2), (6), (3)) == (float(-1)));\n    assert(candidate((1), (1), (1)) == (0.43));\n    assert(candidate((2), (2), (10)) == (float(-1)));\n}\n",
      "timestamp": 1664292645,
      "stdout": "",
      "stderr": "tmpuiefrdnj: /tmp/tmpuiefrdnj.cpp:22: int main(): Assertion `candidate((3), (4), (5)) == (6.0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.00\n// >>> triangle_area(1, 2, 10)\n// -1\nfloat triangle_area(long a, long b, long c) {\n    float area = 0;\n    if (a + b > c && a + c > b && b + c > a) {\n        area = (float) (a + b + c) / 2;\n    }\n    return area;\n}\nint main() {\n    auto candidate = triangle_area;\n    assert(candidate((3), (4), (5)) == (6.0));\n    assert(candidate((1), (2), (10)) == (float(-1)));\n    assert(candidate((4), (8), (5)) == (8.18));\n    assert(candidate((2), (2), (2)) == (1.73));\n    assert(candidate((1), (2), (3)) == (float(-1)));\n    assert(candidate((10), (5), (7)) == (16.25));\n    assert(candidate((2), (6), (3)) == (float(-1)));\n    assert(candidate((1), (1), (1)) == (0.43));\n    assert(candidate((2), (2), (10)) == (float(-1)));\n}\n",
      "timestamp": 1664292646,
      "stdout": "",
      "stderr": "tmp938xrm5j: /tmp/tmp938xrm5j.cpp:23: int main(): Assertion `candidate((1), (2), (10)) == (float(-1))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.00\n// >>> triangle_area(1, 2, 10)\n// -1\nfloat triangle_area(long a, long b, long c) {\n    if (a + b <= c || b + c <= a || a + c <= b) {\n        return -1;\n    }\n    return (a + b + c) / 2.0;\n}\nint main() {\n    auto candidate = triangle_area;\n    assert(candidate((3), (4), (5)) == (6.0));\n    assert(candidate((1), (2), (10)) == (float(-1)));\n    assert(candidate((4), (8), (5)) == (8.18));\n    assert(candidate((2), (2), (2)) == (1.73));\n    assert(candidate((1), (2), (3)) == (float(-1)));\n    assert(candidate((10), (5), (7)) == (16.25));\n    assert(candidate((2), (6), (3)) == (float(-1)));\n    assert(candidate((1), (1), (1)) == (0.43));\n    assert(candidate((2), (2), (10)) == (float(-1)));\n}\n",
      "timestamp": 1664292650,
      "stdout": "",
      "stderr": "tmpoyt98c6j: /tmp/tmpoyt98c6j.cpp:23: int main(): Assertion `candidate((4), (8), (5)) == (8.18)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.00\n// >>> triangle_area(1, 2, 10)\n// -1\nfloat triangle_area(long a, long b, long c) {\n    float area = 0.0;\n    if (a + b > c && b + c > a && a + c > b) {\n        area = (float) (a * b * c) / 2.0;\n    }\n    return area;\n}\nint main() {\n    auto candidate = triangle_area;\n    assert(candidate((3), (4), (5)) == (6.0));\n    assert(candidate((1), (2), (10)) == (float(-1)));\n    assert(candidate((4), (8), (5)) == (8.18));\n    assert(candidate((2), (2), (2)) == (1.73));\n    assert(candidate((1), (2), (3)) == (float(-1)));\n    assert(candidate((10), (5), (7)) == (16.25));\n    assert(candidate((2), (6), (3)) == (float(-1)));\n    assert(candidate((1), (1), (1)) == (0.43));\n    assert(candidate((2), (2), (10)) == (float(-1)));\n}\n",
      "timestamp": 1664292645,
      "stdout": "",
      "stderr": "tmpp44u3deo: /tmp/tmpp44u3deo.cpp:22: int main(): Assertion `candidate((3), (4), (5)) == (6.0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.00\n// >>> triangle_area(1, 2, 10)\n// -1\nfloat triangle_area(long a, long b, long c) {\n    float area = 0.0;\n    if (a + b > c && b + c > a && c + a > b) {\n        area = (float) (a * b * c) / 2.0;\n    }\n    return area;\n}\nint main() {\n    auto candidate = triangle_area;\n    assert(candidate((3), (4), (5)) == (6.0));\n    assert(candidate((1), (2), (10)) == (float(-1)));\n    assert(candidate((4), (8), (5)) == (8.18));\n    assert(candidate((2), (2), (2)) == (1.73));\n    assert(candidate((1), (2), (3)) == (float(-1)));\n    assert(candidate((10), (5), (7)) == (16.25));\n    assert(candidate((2), (6), (3)) == (float(-1)));\n    assert(candidate((1), (1), (1)) == (0.43));\n    assert(candidate((2), (2), (10)) == (float(-1)));\n}\n",
      "timestamp": 1664292645,
      "stdout": "",
      "stderr": "tmpuiefrdnj: /tmp/tmpuiefrdnj.cpp:22: int main(): Assertion `candidate((3), (4), (5)) == (6.0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.00\n// >>> triangle_area(1, 2, 10)\n// -1\nfloat triangle_area(long a, long b, long c) {\n    float area = 0.0f;\n    if (a + b > c && a + c > b && b + c > a) {\n        area = (float) (a + b + c) / 2.0f;\n    }\n    return area;\n}\nint main() {\n    auto candidate = triangle_area;\n    assert(candidate((3), (4), (5)) == (6.0));\n    assert(candidate((1), (2), (10)) == (float(-1)));\n    assert(candidate((4), (8), (5)) == (8.18));\n    assert(candidate((2), (2), (2)) == (1.73));\n    assert(candidate((1), (2), (3)) == (float(-1)));\n    assert(candidate((10), (5), (7)) == (16.25));\n    assert(candidate((2), (6), (3)) == (float(-1)));\n    assert(candidate((1), (1), (1)) == (0.43));\n    assert(candidate((2), (2), (10)) == (float(-1)));\n}\n",
      "timestamp": 1664292646,
      "stdout": "",
      "stderr": "tmp69biwqhe: /tmp/tmp69biwqhe.cpp:23: int main(): Assertion `candidate((1), (2), (10)) == (float(-1))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.00\n// >>> triangle_area(1, 2, 10)\n// -1\nfloat triangle_area(long a, long b, long c) {\n    float area = 0.0;\n    if (a + b > c && b + c > a && a + c > b) {\n        area = (float) (a + b + c) / 2.0;\n    }\n    return area;\n}\nint main() {\n    auto candidate = triangle_area;\n    assert(candidate((3), (4), (5)) == (6.0));\n    assert(candidate((1), (2), (10)) == (float(-1)));\n    assert(candidate((4), (8), (5)) == (8.18));\n    assert(candidate((2), (2), (2)) == (1.73));\n    assert(candidate((1), (2), (3)) == (float(-1)));\n    assert(candidate((10), (5), (7)) == (16.25));\n    assert(candidate((2), (6), (3)) == (float(-1)));\n    assert(candidate((1), (1), (1)) == (0.43));\n    assert(candidate((2), (2), (10)) == (float(-1)));\n}\n",
      "timestamp": 1664292647,
      "stdout": "",
      "stderr": "tmp0i4_73_c: /tmp/tmp0i4_73_c.cpp:23: int main(): Assertion `candidate((1), (2), (10)) == (float(-1))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.00\n// >>> triangle_area(1, 2, 10)\n// -1\nfloat triangle_area(long a, long b, long c) {\n    float area = 0;\n    if (a + b > c && b + c > a && a + c > b) {\n        area = (float)(0.5 * (a + b + c) * sqrt(pow(a, 2) + pow(b, 2) + pow(c, 2)));\n    }\n    return area;\n}\nint main() {\n    auto candidate = triangle_area;\n    assert(candidate((3), (4), (5)) == (6.0));\n    assert(candidate((1), (2), (10)) == (float(-1)));\n    assert(candidate((4), (8), (5)) == (8.18));\n    assert(candidate((2), (2), (2)) == (1.73));\n    assert(candidate((1), (2), (3)) == (float(-1)));\n    assert(candidate((10), (5), (7)) == (16.25));\n    assert(candidate((2), (6), (3)) == (float(-1)));\n    assert(candidate((1), (1), (1)) == (0.43));\n    assert(candidate((2), (2), (10)) == (float(-1)));\n}\n",
      "timestamp": 1664292650,
      "stdout": "",
      "stderr": "tmp6b2d158l: /tmp/tmp6b2d158l.cpp:22: int main(): Assertion `candidate((3), (4), (5)) == (6.0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.00\n// >>> triangle_area(1, 2, 10)\n// -1\nfloat triangle_area(long a, long b, long c) {\n    if (a + b <= c || a + c <= b || b + c <= a) {\n        return -1;\n    }\n    return (float)(a + b + c) / 2;\n}\nint main() {\n    auto candidate = triangle_area;\n    assert(candidate((3), (4), (5)) == (6.0));\n    assert(candidate((1), (2), (10)) == (float(-1)));\n    assert(candidate((4), (8), (5)) == (8.18));\n    assert(candidate((2), (2), (2)) == (1.73));\n    assert(candidate((1), (2), (3)) == (float(-1)));\n    assert(candidate((10), (5), (7)) == (16.25));\n    assert(candidate((2), (6), (3)) == (float(-1)));\n    assert(candidate((1), (1), (1)) == (0.43));\n    assert(candidate((2), (2), (10)) == (float(-1)));\n}\n",
      "timestamp": 1664292650,
      "stdout": "",
      "stderr": "tmpp1mambip: /tmp/tmpp1mambip.cpp:23: int main(): Assertion `candidate((4), (8), (5)) == (8.18)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.00\n// >>> triangle_area(1, 2, 10)\n// -1\nfloat triangle_area(long a, long b, long c) {\n    float area = 0.0;\n    if (a + b > c && b + c > a && a + c > b) {\n        area = (float)(0.5 * (a + b + c) * sqrt(pow(a, 2) + pow(b, 2) + pow(c, 2)));\n    }\n    return area;\n}\nint main() {\n    auto candidate = triangle_area;\n    assert(candidate((3), (4), (5)) == (6.0));\n    assert(candidate((1), (2), (10)) == (float(-1)));\n    assert(candidate((4), (8), (5)) == (8.18));\n    assert(candidate((2), (2), (2)) == (1.73));\n    assert(candidate((1), (2), (3)) == (float(-1)));\n    assert(candidate((10), (5), (7)) == (16.25));\n    assert(candidate((2), (6), (3)) == (float(-1)));\n    assert(candidate((1), (1), (1)) == (0.43));\n    assert(candidate((2), (2), (10)) == (float(-1)));\n}\n",
      "timestamp": 1664292645,
      "stdout": "",
      "stderr": "tmpxhf5sacj: /tmp/tmpxhf5sacj.cpp:22: int main(): Assertion `candidate((3), (4), (5)) == (6.0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.00\n// >>> triangle_area(1, 2, 10)\n// -1\nfloat triangle_area(long a, long b, long c) {\n    float area = 0.0;\n    if (a + b > c && b + c > a && a + c > b) {\n        area = (float) (a + b + c) / 2.0;\n    }\n    return area;\n}\nint main() {\n    auto candidate = triangle_area;\n    assert(candidate((3), (4), (5)) == (6.0));\n    assert(candidate((1), (2), (10)) == (float(-1)));\n    assert(candidate((4), (8), (5)) == (8.18));\n    assert(candidate((2), (2), (2)) == (1.73));\n    assert(candidate((1), (2), (3)) == (float(-1)));\n    assert(candidate((10), (5), (7)) == (16.25));\n    assert(candidate((2), (6), (3)) == (float(-1)));\n    assert(candidate((1), (1), (1)) == (0.43));\n    assert(candidate((2), (2), (10)) == (float(-1)));\n}\n",
      "timestamp": 1664292647,
      "stdout": "",
      "stderr": "tmp0i4_73_c: /tmp/tmp0i4_73_c.cpp:23: int main(): Assertion `candidate((1), (2), (10)) == (float(-1))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.00\n// >>> triangle_area(1, 2, 10)\n// -1\nfloat triangle_area(long a, long b, long c) {\n    float area = 0.0;\n    if (a + b > c && a + c > b && b + c > a) {\n        area = (float) (a * b * c) / 2.0;\n    }\n    return area;\n}\nint main() {\n    auto candidate = triangle_area;\n    assert(candidate((3), (4), (5)) == (6.0));\n    assert(candidate((1), (2), (10)) == (float(-1)));\n    assert(candidate((4), (8), (5)) == (8.18));\n    assert(candidate((2), (2), (2)) == (1.73));\n    assert(candidate((1), (2), (3)) == (float(-1)));\n    assert(candidate((10), (5), (7)) == (16.25));\n    assert(candidate((2), (6), (3)) == (float(-1)));\n    assert(candidate((1), (1), (1)) == (0.43));\n    assert(candidate((2), (2), (10)) == (float(-1)));\n}\n",
      "timestamp": 1664292649,
      "stdout": "",
      "stderr": "tmpqqmx0klh: /tmp/tmpqqmx0klh.cpp:22: int main(): Assertion `candidate((3), (4), (5)) == (6.0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.00\n// >>> triangle_area(1, 2, 10)\n// -1\nfloat triangle_area(long a, long b, long c) {\n    float area = 0;\n    if (a + b > c && b + c > a && a + c > b) {\n        area = (float) (a + b + c) / 2;\n    }\n    return area;\n}\nint main() {\n    auto candidate = triangle_area;\n    assert(candidate((3), (4), (5)) == (6.0));\n    assert(candidate((1), (2), (10)) == (float(-1)));\n    assert(candidate((4), (8), (5)) == (8.18));\n    assert(candidate((2), (2), (2)) == (1.73));\n    assert(candidate((1), (2), (3)) == (float(-1)));\n    assert(candidate((10), (5), (7)) == (16.25));\n    assert(candidate((2), (6), (3)) == (float(-1)));\n    assert(candidate((1), (1), (1)) == (0.43));\n    assert(candidate((2), (2), (10)) == (float(-1)));\n}\n",
      "timestamp": 1664292648,
      "stdout": "",
      "stderr": "tmpxdwn1wi2: /tmp/tmpxdwn1wi2.cpp:23: int main(): Assertion `candidate((1), (2), (10)) == (float(-1))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.00\n// >>> triangle_area(1, 2, 10)\n// -1\nfloat triangle_area(long a, long b, long c) {\n    if (a + b <= c || b + c <= a || c + a <= b) {\n        return -1;\n    }\n    return (a + b + c) / 2.0;\n}\nint main() {\n    auto candidate = triangle_area;\n    assert(candidate((3), (4), (5)) == (6.0));\n    assert(candidate((1), (2), (10)) == (float(-1)));\n    assert(candidate((4), (8), (5)) == (8.18));\n    assert(candidate((2), (2), (2)) == (1.73));\n    assert(candidate((1), (2), (3)) == (float(-1)));\n    assert(candidate((10), (5), (7)) == (16.25));\n    assert(candidate((2), (6), (3)) == (float(-1)));\n    assert(candidate((1), (1), (1)) == (0.43));\n    assert(candidate((2), (2), (10)) == (float(-1)));\n}\n",
      "timestamp": 1664292650,
      "stdout": "",
      "stderr": "tmpv5eip_m8: /tmp/tmpv5eip_m8.cpp:23: int main(): Assertion `candidate((4), (8), (5)) == (8.18)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.00\n// >>> triangle_area(1, 2, 10)\n// -1\nfloat triangle_area(long a, long b, long c) {\n    float area = 0.0f;\n    if (a + b > c && a + c > b && b + c > a) {\n        area = (float) (a + b + c) / 2.0f;\n    }\n    return area;\n}\nint main() {\n    auto candidate = triangle_area;\n    assert(candidate((3), (4), (5)) == (6.0));\n    assert(candidate((1), (2), (10)) == (float(-1)));\n    assert(candidate((4), (8), (5)) == (8.18));\n    assert(candidate((2), (2), (2)) == (1.73));\n    assert(candidate((1), (2), (3)) == (float(-1)));\n    assert(candidate((10), (5), (7)) == (16.25));\n    assert(candidate((2), (6), (3)) == (float(-1)));\n    assert(candidate((1), (1), (1)) == (0.43));\n    assert(candidate((2), (2), (10)) == (float(-1)));\n}\n",
      "timestamp": 1664292646,
      "stdout": "",
      "stderr": "tmp69biwqhe: /tmp/tmp69biwqhe.cpp:23: int main(): Assertion `candidate((1), (2), (10)) == (float(-1))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.00\n// >>> triangle_area(1, 2, 10)\n// -1\nfloat triangle_area(long a, long b, long c) {\n    float area = 0.0f;\n    if (a + b > c && a + c > b && b + c > a) {\n        area = (float) (a + b + c) / 2.0f;\n    }\n    return area;\n}\nint main() {\n    auto candidate = triangle_area;\n    assert(candidate((3), (4), (5)) == (6.0));\n    assert(candidate((1), (2), (10)) == (float(-1)));\n    assert(candidate((4), (8), (5)) == (8.18));\n    assert(candidate((2), (2), (2)) == (1.73));\n    assert(candidate((1), (2), (3)) == (float(-1)));\n    assert(candidate((10), (5), (7)) == (16.25));\n    assert(candidate((2), (6), (3)) == (float(-1)));\n    assert(candidate((1), (1), (1)) == (0.43));\n    assert(candidate((2), (2), (10)) == (float(-1)));\n}\n",
      "timestamp": 1664292646,
      "stdout": "",
      "stderr": "tmp69biwqhe: /tmp/tmp69biwqhe.cpp:23: int main(): Assertion `candidate((1), (2), (10)) == (float(-1))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.00\n// >>> triangle_area(1, 2, 10)\n// -1\nfloat triangle_area(long a, long b, long c) {\n    float area;\n    if (a + b > c || a + c > b || b + c > a) {\n        area = -1;\n    } else {\n        area = (a + b + c) / 2;\n    }\n    return area;\n}\nint main() {\n    auto candidate = triangle_area;\n    assert(candidate((3), (4), (5)) == (6.0));\n    assert(candidate((1), (2), (10)) == (float(-1)));\n    assert(candidate((4), (8), (5)) == (8.18));\n    assert(candidate((2), (2), (2)) == (1.73));\n    assert(candidate((1), (2), (3)) == (float(-1)));\n    assert(candidate((10), (5), (7)) == (16.25));\n    assert(candidate((2), (6), (3)) == (float(-1)));\n    assert(candidate((1), (1), (1)) == (0.43));\n    assert(candidate((2), (2), (10)) == (float(-1)));\n}\n",
      "timestamp": 1664292647,
      "stdout": "",
      "stderr": "tmpn4wyjp56: /tmp/tmpn4wyjp56.cpp:24: int main(): Assertion `candidate((3), (4), (5)) == (6.0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.00\n// >>> triangle_area(1, 2, 10)\n// -1\nfloat triangle_area(long a, long b, long c) {\n    float area = 0.0;\n    if (a + b > c && b + c > a && a + c > b) {\n        area = (float) (a * b * c) / 2.0;\n    }\n    return area;\n}\nint main() {\n    auto candidate = triangle_area;\n    assert(candidate((3), (4), (5)) == (6.0));\n    assert(candidate((1), (2), (10)) == (float(-1)));\n    assert(candidate((4), (8), (5)) == (8.18));\n    assert(candidate((2), (2), (2)) == (1.73));\n    assert(candidate((1), (2), (3)) == (float(-1)));\n    assert(candidate((10), (5), (7)) == (16.25));\n    assert(candidate((2), (6), (3)) == (float(-1)));\n    assert(candidate((1), (1), (1)) == (0.43));\n    assert(candidate((2), (2), (10)) == (float(-1)));\n}\n",
      "timestamp": 1664292645,
      "stdout": "",
      "stderr": "tmpp44u3deo: /tmp/tmpp44u3deo.cpp:22: int main(): Assertion `candidate((3), (4), (5)) == (6.0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.00\n// >>> triangle_area(1, 2, 10)\n// -1\nfloat triangle_area(long a, long b, long c) {\n    float area = 0.0f;\n    if (a + b > c && a + c > b && b + c > a) {\n        area = (float) (a + b + c) / 2.0f;\n    }\n    return area;\n}\nint main() {\n    auto candidate = triangle_area;\n    assert(candidate((3), (4), (5)) == (6.0));\n    assert(candidate((1), (2), (10)) == (float(-1)));\n    assert(candidate((4), (8), (5)) == (8.18));\n    assert(candidate((2), (2), (2)) == (1.73));\n    assert(candidate((1), (2), (3)) == (float(-1)));\n    assert(candidate((10), (5), (7)) == (16.25));\n    assert(candidate((2), (6), (3)) == (float(-1)));\n    assert(candidate((1), (1), (1)) == (0.43));\n    assert(candidate((2), (2), (10)) == (float(-1)));\n}\n",
      "timestamp": 1664292646,
      "stdout": "",
      "stderr": "tmp69biwqhe: /tmp/tmp69biwqhe.cpp:23: int main(): Assertion `candidate((1), (2), (10)) == (float(-1))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.00\n// >>> triangle_area(1, 2, 10)\n// -1\nfloat triangle_area(long a, long b, long c) {\n    float area = 0;\n    if (a + b > c) {\n        area = (float) (a + b - c) / 2;\n    }\n    return area;\n}\nint main() {\n    auto candidate = triangle_area;\n    assert(candidate((3), (4), (5)) == (6.0));\n    assert(candidate((1), (2), (10)) == (float(-1)));\n    assert(candidate((4), (8), (5)) == (8.18));\n    assert(candidate((2), (2), (2)) == (1.73));\n    assert(candidate((1), (2), (3)) == (float(-1)));\n    assert(candidate((10), (5), (7)) == (16.25));\n    assert(candidate((2), (6), (3)) == (float(-1)));\n    assert(candidate((1), (1), (1)) == (0.43));\n    assert(candidate((2), (2), (10)) == (float(-1)));\n}\n",
      "timestamp": 1664292644,
      "stdout": "",
      "stderr": "tmpbaygdssi: /tmp/tmpbaygdssi.cpp:22: int main(): Assertion `candidate((3), (4), (5)) == (6.0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.00\n// >>> triangle_area(1, 2, 10)\n// -1\nfloat triangle_area(long a, long b, long c) {\n    float area = 0;\n    if (a + b > c && a + c > b && b + c > a) {\n        area = (float) (a * b * c) / 2;\n    }\n    return area;\n}\nint main() {\n    auto candidate = triangle_area;\n    assert(candidate((3), (4), (5)) == (6.0));\n    assert(candidate((1), (2), (10)) == (float(-1)));\n    assert(candidate((4), (8), (5)) == (8.18));\n    assert(candidate((2), (2), (2)) == (1.73));\n    assert(candidate((1), (2), (3)) == (float(-1)));\n    assert(candidate((10), (5), (7)) == (16.25));\n    assert(candidate((2), (6), (3)) == (float(-1)));\n    assert(candidate((1), (1), (1)) == (0.43));\n    assert(candidate((2), (2), (10)) == (float(-1)));\n}\n",
      "timestamp": 1664292650,
      "stdout": "",
      "stderr": "tmptw23mgvo: /tmp/tmptw23mgvo.cpp:22: int main(): Assertion `candidate((3), (4), (5)) == (6.0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.00\n// >>> triangle_area(1, 2, 10)\n// -1\nfloat triangle_area(long a, long b, long c) {\n    float area = 0.0f;\n    if (a + b > c && b + c > a && c + a > b) {\n        area = (float) (a + b + c) / 2.0f;\n    }\n    return area;\n}\nint main() {\n    auto candidate = triangle_area;\n    assert(candidate((3), (4), (5)) == (6.0));\n    assert(candidate((1), (2), (10)) == (float(-1)));\n    assert(candidate((4), (8), (5)) == (8.18));\n    assert(candidate((2), (2), (2)) == (1.73));\n    assert(candidate((1), (2), (3)) == (float(-1)));\n    assert(candidate((10), (5), (7)) == (16.25));\n    assert(candidate((2), (6), (3)) == (float(-1)));\n    assert(candidate((1), (1), (1)) == (0.43));\n    assert(candidate((2), (2), (10)) == (float(-1)));\n}\n",
      "timestamp": 1664292650,
      "stdout": "",
      "stderr": "tmp1qvpnxn3: /tmp/tmp1qvpnxn3.cpp:23: int main(): Assertion `candidate((1), (2), (10)) == (float(-1))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.00\n// >>> triangle_area(1, 2, 10)\n// -1\nfloat triangle_area(long a, long b, long c) {\n    if (a + b <= c || a + c <= b || b + c <= a) {\n        return -1;\n    }\n    return (a + b + c) / 2.0;\n}\nint main() {\n    auto candidate = triangle_area;\n    assert(candidate((3), (4), (5)) == (6.0));\n    assert(candidate((1), (2), (10)) == (float(-1)));\n    assert(candidate((4), (8), (5)) == (8.18));\n    assert(candidate((2), (2), (2)) == (1.73));\n    assert(candidate((1), (2), (3)) == (float(-1)));\n    assert(candidate((10), (5), (7)) == (16.25));\n    assert(candidate((2), (6), (3)) == (float(-1)));\n    assert(candidate((1), (1), (1)) == (0.43));\n    assert(candidate((2), (2), (10)) == (float(-1)));\n}\n",
      "timestamp": 1664292647,
      "stdout": "",
      "stderr": "tmp__k4tn54: /tmp/tmp__k4tn54.cpp:23: int main(): Assertion `candidate((4), (8), (5)) == (8.18)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.00\n// >>> triangle_area(1, 2, 10)\n// -1\nfloat triangle_area(long a, long b, long c) {\n    if (a + b <= c || a + c <= b || b + c <= a) {\n        return -1;\n    }\n    return (a + b + c) / 2.0;\n}\nint main() {\n    auto candidate = triangle_area;\n    assert(candidate((3), (4), (5)) == (6.0));\n    assert(candidate((1), (2), (10)) == (float(-1)));\n    assert(candidate((4), (8), (5)) == (8.18));\n    assert(candidate((2), (2), (2)) == (1.73));\n    assert(candidate((1), (2), (3)) == (float(-1)));\n    assert(candidate((10), (5), (7)) == (16.25));\n    assert(candidate((2), (6), (3)) == (float(-1)));\n    assert(candidate((1), (1), (1)) == (0.43));\n    assert(candidate((2), (2), (10)) == (float(-1)));\n}\n",
      "timestamp": 1664292647,
      "stdout": "",
      "stderr": "tmp__k4tn54: /tmp/tmp__k4tn54.cpp:23: int main(): Assertion `candidate((4), (8), (5)) == (8.18)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.00\n// >>> triangle_area(1, 2, 10)\n// -1\nfloat triangle_area(long a, long b, long c) {\n    if (a + b <= c || a + c <= b || b + c <= a) return -1;\n    return (a + b + c) / 2.0;\n}\nint main() {\n    auto candidate = triangle_area;\n    assert(candidate((3), (4), (5)) == (6.0));\n    assert(candidate((1), (2), (10)) == (float(-1)));\n    assert(candidate((4), (8), (5)) == (8.18));\n    assert(candidate((2), (2), (2)) == (1.73));\n    assert(candidate((1), (2), (3)) == (float(-1)));\n    assert(candidate((10), (5), (7)) == (16.25));\n    assert(candidate((2), (6), (3)) == (float(-1)));\n    assert(candidate((1), (1), (1)) == (0.43));\n    assert(candidate((2), (2), (10)) == (float(-1)));\n}\n",
      "timestamp": 1664292649,
      "stdout": "",
      "stderr": "tmpk0d18fhp: /tmp/tmpk0d18fhp.cpp:21: int main(): Assertion `candidate((4), (8), (5)) == (8.18)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.00\n// >>> triangle_area(1, 2, 10)\n// -1\nfloat triangle_area(long a, long b, long c) {\n    float area;\n    if (a + b > c || a + c > b || b + c > a)\n        area = -1;\n    else\n        area = (float) (a + b + c) / 2;\n    return area;\n}\nint main() {\n    auto candidate = triangle_area;\n    assert(candidate((3), (4), (5)) == (6.0));\n    assert(candidate((1), (2), (10)) == (float(-1)));\n    assert(candidate((4), (8), (5)) == (8.18));\n    assert(candidate((2), (2), (2)) == (1.73));\n    assert(candidate((1), (2), (3)) == (float(-1)));\n    assert(candidate((10), (5), (7)) == (16.25));\n    assert(candidate((2), (6), (3)) == (float(-1)));\n    assert(candidate((1), (1), (1)) == (0.43));\n    assert(candidate((2), (2), (10)) == (float(-1)));\n}\n",
      "timestamp": 1664292650,
      "stdout": "",
      "stderr": "tmprcki53zm: /tmp/tmprcki53zm.cpp:23: int main(): Assertion `candidate((3), (4), (5)) == (6.0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.00\n// >>> triangle_area(1, 2, 10)\n// -1\nfloat triangle_area(long a, long b, long c) {\n    float area = 0.0;\n    if (a + b > c && a + c > b && b + c > a) {\n        area = (float) (a + b + c) / 2.0;\n    }\n    return area;\n}\nint main() {\n    auto candidate = triangle_area;\n    assert(candidate((3), (4), (5)) == (6.0));\n    assert(candidate((1), (2), (10)) == (float(-1)));\n    assert(candidate((4), (8), (5)) == (8.18));\n    assert(candidate((2), (2), (2)) == (1.73));\n    assert(candidate((1), (2), (3)) == (float(-1)));\n    assert(candidate((10), (5), (7)) == (16.25));\n    assert(candidate((2), (6), (3)) == (float(-1)));\n    assert(candidate((1), (1), (1)) == (0.43));\n    assert(candidate((2), (2), (10)) == (float(-1)));\n}\n",
      "timestamp": 1664292647,
      "stdout": "",
      "stderr": "tmp9ajjeii3: /tmp/tmp9ajjeii3.cpp:23: int main(): Assertion `candidate((1), (2), (10)) == (float(-1))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.00\n// >>> triangle_area(1, 2, 10)\n// -1\nfloat triangle_area(long a, long b, long c) {\n    float area = 0.0;\n    if (a + b > c && a + c > b && b + c > a) {\n        area = (float) (a + b + c) / 2.0;\n        area = area * area / 2.0;\n    }\n    return area;\n}\nint main() {\n    auto candidate = triangle_area;\n    assert(candidate((3), (4), (5)) == (6.0));\n    assert(candidate((1), (2), (10)) == (float(-1)));\n    assert(candidate((4), (8), (5)) == (8.18));\n    assert(candidate((2), (2), (2)) == (1.73));\n    assert(candidate((1), (2), (3)) == (float(-1)));\n    assert(candidate((10), (5), (7)) == (16.25));\n    assert(candidate((2), (6), (3)) == (float(-1)));\n    assert(candidate((1), (1), (1)) == (0.43));\n    assert(candidate((2), (2), (10)) == (float(-1)));\n}\n",
      "timestamp": 1664292645,
      "stdout": "",
      "stderr": "tmp5pwsuy0y: /tmp/tmp5pwsuy0y.cpp:23: int main(): Assertion `candidate((3), (4), (5)) == (6.0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.00\n// >>> triangle_area(1, 2, 10)\n// -1\nfloat triangle_area(long a, long b, long c) {\n    float area = 0.0;\n    if (a + b > c && a + c > b && b + c > a) {\n        area = (float) (a + b + c) / 2.0;\n        area = area * area;\n    }\n    return area;\n}\nint main() {\n    auto candidate = triangle_area;\n    assert(candidate((3), (4), (5)) == (6.0));\n    assert(candidate((1), (2), (10)) == (float(-1)));\n    assert(candidate((4), (8), (5)) == (8.18));\n    assert(candidate((2), (2), (2)) == (1.73));\n    assert(candidate((1), (2), (3)) == (float(-1)));\n    assert(candidate((10), (5), (7)) == (16.25));\n    assert(candidate((2), (6), (3)) == (float(-1)));\n    assert(candidate((1), (1), (1)) == (0.43));\n    assert(candidate((2), (2), (10)) == (float(-1)));\n}\n",
      "timestamp": 1664292651,
      "stdout": "",
      "stderr": "tmpbfeg2z5u: /tmp/tmpbfeg2z5u.cpp:23: int main(): Assertion `candidate((3), (4), (5)) == (6.0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.00\n// >>> triangle_area(1, 2, 10)\n// -1\nfloat triangle_area(long a, long b, long c) {\n    if (a + b < c || a + c < b || b + c < a) return -1;\n    return (a + b + c) / 2.0;\n}\nint main() {\n    auto candidate = triangle_area;\n    assert(candidate((3), (4), (5)) == (6.0));\n    assert(candidate((1), (2), (10)) == (float(-1)));\n    assert(candidate((4), (8), (5)) == (8.18));\n    assert(candidate((2), (2), (2)) == (1.73));\n    assert(candidate((1), (2), (3)) == (float(-1)));\n    assert(candidate((10), (5), (7)) == (16.25));\n    assert(candidate((2), (6), (3)) == (float(-1)));\n    assert(candidate((1), (1), (1)) == (0.43));\n    assert(candidate((2), (2), (10)) == (float(-1)));\n}\n",
      "timestamp": 1664292645,
      "stdout": "",
      "stderr": "tmpnduvapsm: /tmp/tmpnduvapsm.cpp:21: int main(): Assertion `candidate((4), (8), (5)) == (8.18)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.00\n// >>> triangle_area(1, 2, 10)\n// -1\nfloat triangle_area(long a, long b, long c) {\n    float area = 0.0;\n    if (a + b > c && b + c > a && c + a > b) {\n        area = (float) (a + b + c) / 2.0;\n    }\n    return area;\n}\nint main() {\n    auto candidate = triangle_area;\n    assert(candidate((3), (4), (5)) == (6.0));\n    assert(candidate((1), (2), (10)) == (float(-1)));\n    assert(candidate((4), (8), (5)) == (8.18));\n    assert(candidate((2), (2), (2)) == (1.73));\n    assert(candidate((1), (2), (3)) == (float(-1)));\n    assert(candidate((10), (5), (7)) == (16.25));\n    assert(candidate((2), (6), (3)) == (float(-1)));\n    assert(candidate((1), (1), (1)) == (0.43));\n    assert(candidate((2), (2), (10)) == (float(-1)));\n}\n",
      "timestamp": 1664292650,
      "stdout": "",
      "stderr": "tmpo7do9aww: /tmp/tmpo7do9aww.cpp:23: int main(): Assertion `candidate((1), (2), (10)) == (float(-1))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.00\n// >>> triangle_area(1, 2, 10)\n// -1\nfloat triangle_area(long a, long b, long c) {\n    float area = 0.0;\n    if (a + b > c && b + c > a && a + c > b) {\n        area = (float)(0.5 * (a + b + c) * (a + b - c) * (a + c - b) * (b + c - a));\n    }\n    return area;\n}\nint main() {\n    auto candidate = triangle_area;\n    assert(candidate((3), (4), (5)) == (6.0));\n    assert(candidate((1), (2), (10)) == (float(-1)));\n    assert(candidate((4), (8), (5)) == (8.18));\n    assert(candidate((2), (2), (2)) == (1.73));\n    assert(candidate((1), (2), (3)) == (float(-1)));\n    assert(candidate((10), (5), (7)) == (16.25));\n    assert(candidate((2), (6), (3)) == (float(-1)));\n    assert(candidate((1), (1), (1)) == (0.43));\n    assert(candidate((2), (2), (10)) == (float(-1)));\n}\n",
      "timestamp": 1664292650,
      "stdout": "",
      "stderr": "tmp1lpgus1b: /tmp/tmp1lpgus1b.cpp:22: int main(): Assertion `candidate((3), (4), (5)) == (6.0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.00\n// >>> triangle_area(1, 2, 10)\n// -1\nfloat triangle_area(long a, long b, long c) {\n    if (a + b <= c || b + c <= a || a + c <= b)\n        return -1;\n    return (a + b + c) / 2.0;\n}\nint main() {\n    auto candidate = triangle_area;\n    assert(candidate((3), (4), (5)) == (6.0));\n    assert(candidate((1), (2), (10)) == (float(-1)));\n    assert(candidate((4), (8), (5)) == (8.18));\n    assert(candidate((2), (2), (2)) == (1.73));\n    assert(candidate((1), (2), (3)) == (float(-1)));\n    assert(candidate((10), (5), (7)) == (16.25));\n    assert(candidate((2), (6), (3)) == (float(-1)));\n    assert(candidate((1), (1), (1)) == (0.43));\n    assert(candidate((2), (2), (10)) == (float(-1)));\n}\n",
      "timestamp": 1664292651,
      "stdout": "",
      "stderr": "tmp6dyayqfs: /tmp/tmp6dyayqfs.cpp:22: int main(): Assertion `candidate((4), (8), (5)) == (8.18)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.00\n// >>> triangle_area(1, 2, 10)\n// -1\nfloat triangle_area(long a, long b, long c) {\n    if (a + b <= c || b + c <= a || a + c <= b) {\n        return -1;\n    }\n    return (a + b + c) / 2;\n}\nint main() {\n    auto candidate = triangle_area;\n    assert(candidate((3), (4), (5)) == (6.0));\n    assert(candidate((1), (2), (10)) == (float(-1)));\n    assert(candidate((4), (8), (5)) == (8.18));\n    assert(candidate((2), (2), (2)) == (1.73));\n    assert(candidate((1), (2), (3)) == (float(-1)));\n    assert(candidate((10), (5), (7)) == (16.25));\n    assert(candidate((2), (6), (3)) == (float(-1)));\n    assert(candidate((1), (1), (1)) == (0.43));\n    assert(candidate((2), (2), (10)) == (float(-1)));\n}\n",
      "timestamp": 1664292645,
      "stdout": "",
      "stderr": "tmp3_fw44k1: /tmp/tmp3_fw44k1.cpp:23: int main(): Assertion `candidate((4), (8), (5)) == (8.18)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.00\n// >>> triangle_area(1, 2, 10)\n// -1\nfloat triangle_area(long a, long b, long c) {\n    float area = 0;\n    if (a + b > c || a + c > b || b + c > a)\n        return -1;\n    area = (float) (a + b + c) / 2;\n    area = area * area;\n    return area;\n}\nint main() {\n    auto candidate = triangle_area;\n    assert(candidate((3), (4), (5)) == (6.0));\n    assert(candidate((1), (2), (10)) == (float(-1)));\n    assert(candidate((4), (8), (5)) == (8.18));\n    assert(candidate((2), (2), (2)) == (1.73));\n    assert(candidate((1), (2), (3)) == (float(-1)));\n    assert(candidate((10), (5), (7)) == (16.25));\n    assert(candidate((2), (6), (3)) == (float(-1)));\n    assert(candidate((1), (1), (1)) == (0.43));\n    assert(candidate((2), (2), (10)) == (float(-1)));\n}\n",
      "timestamp": 1664292652,
      "stdout": "",
      "stderr": "tmpnrt0ovyw: /tmp/tmpnrt0ovyw.cpp:23: int main(): Assertion `candidate((3), (4), (5)) == (6.0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.00\n// >>> triangle_area(1, 2, 10)\n// -1\nfloat triangle_area(long a, long b, long c) {\n    if (a + b <= c || b + c <= a || c + a <= b)\n        return -1;\n    return (a + b + c) / 2;\n}\nint main() {\n    auto candidate = triangle_area;\n    assert(candidate((3), (4), (5)) == (6.0));\n    assert(candidate((1), (2), (10)) == (float(-1)));\n    assert(candidate((4), (8), (5)) == (8.18));\n    assert(candidate((2), (2), (2)) == (1.73));\n    assert(candidate((1), (2), (3)) == (float(-1)));\n    assert(candidate((10), (5), (7)) == (16.25));\n    assert(candidate((2), (6), (3)) == (float(-1)));\n    assert(candidate((1), (1), (1)) == (0.43));\n    assert(candidate((2), (2), (10)) == (float(-1)));\n}\n",
      "timestamp": 1664292649,
      "stdout": "",
      "stderr": "tmpd9reuknw: /tmp/tmpd9reuknw.cpp:22: int main(): Assertion `candidate((4), (8), (5)) == (8.18)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.00\n// >>> triangle_area(1, 2, 10)\n// -1\nfloat triangle_area(long a, long b, long c) {\n    if (a + b <= c || b + c <= a || a + c <= b) {\n        return -1;\n    }\n    float s = (a + b + c) / 2;\n    return sqrt(s * (s - a) * (s - b) * (s - c));\n}\nint main() {\n    auto candidate = triangle_area;\n    assert(candidate((3), (4), (5)) == (6.0));\n    assert(candidate((1), (2), (10)) == (float(-1)));\n    assert(candidate((4), (8), (5)) == (8.18));\n    assert(candidate((2), (2), (2)) == (1.73));\n    assert(candidate((1), (2), (3)) == (float(-1)));\n    assert(candidate((10), (5), (7)) == (16.25));\n    assert(candidate((2), (6), (3)) == (float(-1)));\n    assert(candidate((1), (1), (1)) == (0.43));\n    assert(candidate((2), (2), (10)) == (float(-1)));\n}\n",
      "timestamp": 1664292652,
      "stdout": "",
      "stderr": "tmpkg0p5v4w: /tmp/tmpkg0p5v4w.cpp:24: int main(): Assertion `candidate((4), (8), (5)) == (8.18)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.00\n// >>> triangle_area(1, 2, 10)\n// -1\nfloat triangle_area(long a, long b, long c) {\n    if (a + b < c || a + c < b || b + c < a) return -1;\n    return (a + b + c) / 2;\n}\nint main() {\n    auto candidate = triangle_area;\n    assert(candidate((3), (4), (5)) == (6.0));\n    assert(candidate((1), (2), (10)) == (float(-1)));\n    assert(candidate((4), (8), (5)) == (8.18));\n    assert(candidate((2), (2), (2)) == (1.73));\n    assert(candidate((1), (2), (3)) == (float(-1)));\n    assert(candidate((10), (5), (7)) == (16.25));\n    assert(candidate((2), (6), (3)) == (float(-1)));\n    assert(candidate((1), (1), (1)) == (0.43));\n    assert(candidate((2), (2), (10)) == (float(-1)));\n}\n",
      "timestamp": 1664292646,
      "stdout": "",
      "stderr": "tmpcpxm4fue: /tmp/tmpcpxm4fue.cpp:21: int main(): Assertion `candidate((4), (8), (5)) == (8.18)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.00\n// >>> triangle_area(1, 2, 10)\n// -1\nfloat triangle_area(long a, long b, long c) {\n    float area = 0.0;\n    if (a + b > c && a + c > b && b + c > a) {\n        area = (float) (a + b + c) / 2.0;\n        area = area * area;\n    }\n    return area;\n}\nint main() {\n    auto candidate = triangle_area;\n    assert(candidate((3), (4), (5)) == (6.0));\n    assert(candidate((1), (2), (10)) == (float(-1)));\n    assert(candidate((4), (8), (5)) == (8.18));\n    assert(candidate((2), (2), (2)) == (1.73));\n    assert(candidate((1), (2), (3)) == (float(-1)));\n    assert(candidate((10), (5), (7)) == (16.25));\n    assert(candidate((2), (6), (3)) == (float(-1)));\n    assert(candidate((1), (1), (1)) == (0.43));\n    assert(candidate((2), (2), (10)) == (float(-1)));\n}\n",
      "timestamp": 1664292651,
      "stdout": "",
      "stderr": "tmpbfeg2z5u: /tmp/tmpbfeg2z5u.cpp:23: int main(): Assertion `candidate((3), (4), (5)) == (6.0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.00\n// >>> triangle_area(1, 2, 10)\n// -1\nfloat triangle_area(long a, long b, long c) {\n    float area = 0.0;\n    if (a + b > c && a + c > b && b + c > a) {\n        area = (float) (a * b * c) / 2.0;\n    }\n    return area;\n}\nint main() {\n    auto candidate = triangle_area;\n    assert(candidate((3), (4), (5)) == (6.0));\n    assert(candidate((1), (2), (10)) == (float(-1)));\n    assert(candidate((4), (8), (5)) == (8.18));\n    assert(candidate((2), (2), (2)) == (1.73));\n    assert(candidate((1), (2), (3)) == (float(-1)));\n    assert(candidate((10), (5), (7)) == (16.25));\n    assert(candidate((2), (6), (3)) == (float(-1)));\n    assert(candidate((1), (1), (1)) == (0.43));\n    assert(candidate((2), (2), (10)) == (float(-1)));\n}\n",
      "timestamp": 1664292649,
      "stdout": "",
      "stderr": "tmpqqmx0klh: /tmp/tmpqqmx0klh.cpp:22: int main(): Assertion `candidate((3), (4), (5)) == (6.0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.00\n// >>> triangle_area(1, 2, 10)\n// -1\nfloat triangle_area(long a, long b, long c) {\n    float area = 0.0;\n    if (a + b > c && a + c > b && b + c > a) {\n        area = (float) (a * b * c) / 2.0;\n    }\n    return area;\n}\nint main() {\n    auto candidate = triangle_area;\n    assert(candidate((3), (4), (5)) == (6.0));\n    assert(candidate((1), (2), (10)) == (float(-1)));\n    assert(candidate((4), (8), (5)) == (8.18));\n    assert(candidate((2), (2), (2)) == (1.73));\n    assert(candidate((1), (2), (3)) == (float(-1)));\n    assert(candidate((10), (5), (7)) == (16.25));\n    assert(candidate((2), (6), (3)) == (float(-1)));\n    assert(candidate((1), (1), (1)) == (0.43));\n    assert(candidate((2), (2), (10)) == (float(-1)));\n}\n",
      "timestamp": 1664292649,
      "stdout": "",
      "stderr": "tmpqqmx0klh: /tmp/tmpqqmx0klh.cpp:22: int main(): Assertion `candidate((3), (4), (5)) == (6.0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.00\n// >>> triangle_area(1, 2, 10)\n// -1\nfloat triangle_area(long a, long b, long c) {\n    float area = 0.0;\n    if (a + b > c && a + c > b && b + c > a) {\n        area = (float) (a + b + c) / 2.0;\n    }\n    return area;\n}\nint main() {\n    auto candidate = triangle_area;\n    assert(candidate((3), (4), (5)) == (6.0));\n    assert(candidate((1), (2), (10)) == (float(-1)));\n    assert(candidate((4), (8), (5)) == (8.18));\n    assert(candidate((2), (2), (2)) == (1.73));\n    assert(candidate((1), (2), (3)) == (float(-1)));\n    assert(candidate((10), (5), (7)) == (16.25));\n    assert(candidate((2), (6), (3)) == (float(-1)));\n    assert(candidate((1), (1), (1)) == (0.43));\n    assert(candidate((2), (2), (10)) == (float(-1)));\n}\n",
      "timestamp": 1664292647,
      "stdout": "",
      "stderr": "tmp9ajjeii3: /tmp/tmp9ajjeii3.cpp:23: int main(): Assertion `candidate((1), (2), (10)) == (float(-1))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.00\n// >>> triangle_area(1, 2, 10)\n// -1\nfloat triangle_area(long a, long b, long c) {\n    float area;\n    area = (a + b + c) / 2;\n    if (a + b > c && a + c > b && b + c > a) {\n        return area;\n    }\n    return -1;\n}\nint main() {\n    auto candidate = triangle_area;\n    assert(candidate((3), (4), (5)) == (6.0));\n    assert(candidate((1), (2), (10)) == (float(-1)));\n    assert(candidate((4), (8), (5)) == (8.18));\n    assert(candidate((2), (2), (2)) == (1.73));\n    assert(candidate((1), (2), (3)) == (float(-1)));\n    assert(candidate((10), (5), (7)) == (16.25));\n    assert(candidate((2), (6), (3)) == (float(-1)));\n    assert(candidate((1), (1), (1)) == (0.43));\n    assert(candidate((2), (2), (10)) == (float(-1)));\n}\n",
      "timestamp": 1664292652,
      "stdout": "",
      "stderr": "tmphcmzbsz3: /tmp/tmphcmzbsz3.cpp:25: int main(): Assertion `candidate((4), (8), (5)) == (8.18)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.00\n// >>> triangle_area(1, 2, 10)\n// -1\nfloat triangle_area(long a, long b, long c) {\n    float area = 0.0;\n    if (a + b > c && a + c > b && b + c > a) {\n        area = (float)(0.5 * (a + b + c) * sqrt(pow(a, 2) + pow(b, 2) + pow(c, 2)));\n    }\n    return area;\n}\nint main() {\n    auto candidate = triangle_area;\n    assert(candidate((3), (4), (5)) == (6.0));\n    assert(candidate((1), (2), (10)) == (float(-1)));\n    assert(candidate((4), (8), (5)) == (8.18));\n    assert(candidate((2), (2), (2)) == (1.73));\n    assert(candidate((1), (2), (3)) == (float(-1)));\n    assert(candidate((10), (5), (7)) == (16.25));\n    assert(candidate((2), (6), (3)) == (float(-1)));\n    assert(candidate((1), (1), (1)) == (0.43));\n    assert(candidate((2), (2), (10)) == (float(-1)));\n}\n",
      "timestamp": 1664292645,
      "stdout": "",
      "stderr": "tmpahptgdyd: /tmp/tmpahptgdyd.cpp:22: int main(): Assertion `candidate((3), (4), (5)) == (6.0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.00\n// >>> triangle_area(1, 2, 10)\n// -1\nfloat triangle_area(long a, long b, long c) {\n    float area = 0.0;\n    if (a + b > c && b + c > a && a + c > b) {\n        area = (float)(a + b + c) / 2.0;\n        area = area * area;\n    }\n    return area;\n}\nint main() {\n    auto candidate = triangle_area;\n    assert(candidate((3), (4), (5)) == (6.0));\n    assert(candidate((1), (2), (10)) == (float(-1)));\n    assert(candidate((4), (8), (5)) == (8.18));\n    assert(candidate((2), (2), (2)) == (1.73));\n    assert(candidate((1), (2), (3)) == (float(-1)));\n    assert(candidate((10), (5), (7)) == (16.25));\n    assert(candidate((2), (6), (3)) == (float(-1)));\n    assert(candidate((1), (1), (1)) == (0.43));\n    assert(candidate((2), (2), (10)) == (float(-1)));\n}\n",
      "timestamp": 1664292652,
      "stdout": "",
      "stderr": "tmphl9ejgnb: /tmp/tmphl9ejgnb.cpp:23: int main(): Assertion `candidate((3), (4), (5)) == (6.0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.00\n// >>> triangle_area(1, 2, 10)\n// -1\nfloat triangle_area(long a, long b, long c) {\n    float area = 0.0;\n    if (a + b > c && b + c > a && a + c > b) {\n        area = (float)(0.5 * (a + b + c) * sqrt(pow(a, 2) + pow(b, 2) + pow(c, 2)));\n    }\n    return area;\n}\nint main() {\n    auto candidate = triangle_area;\n    assert(candidate((3), (4), (5)) == (6.0));\n    assert(candidate((1), (2), (10)) == (float(-1)));\n    assert(candidate((4), (8), (5)) == (8.18));\n    assert(candidate((2), (2), (2)) == (1.73));\n    assert(candidate((1), (2), (3)) == (float(-1)));\n    assert(candidate((10), (5), (7)) == (16.25));\n    assert(candidate((2), (6), (3)) == (float(-1)));\n    assert(candidate((1), (1), (1)) == (0.43));\n    assert(candidate((2), (2), (10)) == (float(-1)));\n}\n",
      "timestamp": 1664292645,
      "stdout": "",
      "stderr": "tmpxhf5sacj: /tmp/tmpxhf5sacj.cpp:22: int main(): Assertion `candidate((3), (4), (5)) == (6.0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.00\n// >>> triangle_area(1, 2, 10)\n// -1\nfloat triangle_area(long a, long b, long c) {\n    float area = 0.0;\n    if (a + b > c && b + c > a && c + a > b) {\n        area = (float) (a * b / 2.0);\n    }\n    return area;\n}\nint main() {\n    auto candidate = triangle_area;\n    assert(candidate((3), (4), (5)) == (6.0));\n    assert(candidate((1), (2), (10)) == (float(-1)));\n    assert(candidate((4), (8), (5)) == (8.18));\n    assert(candidate((2), (2), (2)) == (1.73));\n    assert(candidate((1), (2), (3)) == (float(-1)));\n    assert(candidate((10), (5), (7)) == (16.25));\n    assert(candidate((2), (6), (3)) == (float(-1)));\n    assert(candidate((1), (1), (1)) == (0.43));\n    assert(candidate((2), (2), (10)) == (float(-1)));\n}\n",
      "timestamp": 1664292652,
      "stdout": "",
      "stderr": "tmp60wfg5u3: /tmp/tmp60wfg5u3.cpp:23: int main(): Assertion `candidate((1), (2), (10)) == (float(-1))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.00\n// >>> triangle_area(1, 2, 10)\n// -1\nfloat triangle_area(long a, long b, long c) {\n    if (a + b <= c || a + c <= b || b + c <= a) {\n        return -1;\n    }\n    return (a + b + c) / 2;\n}\nint main() {\n    auto candidate = triangle_area;\n    assert(candidate((3), (4), (5)) == (6.0));\n    assert(candidate((1), (2), (10)) == (float(-1)));\n    assert(candidate((4), (8), (5)) == (8.18));\n    assert(candidate((2), (2), (2)) == (1.73));\n    assert(candidate((1), (2), (3)) == (float(-1)));\n    assert(candidate((10), (5), (7)) == (16.25));\n    assert(candidate((2), (6), (3)) == (float(-1)));\n    assert(candidate((1), (1), (1)) == (0.43));\n    assert(candidate((2), (2), (10)) == (float(-1)));\n}\n",
      "timestamp": 1664292646,
      "stdout": "",
      "stderr": "tmp9iffjjte: /tmp/tmp9iffjjte.cpp:23: int main(): Assertion `candidate((4), (8), (5)) == (8.18)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.00\n// >>> triangle_area(1, 2, 10)\n// -1\nfloat triangle_area(long a, long b, long c) {\n    if (a + b <= c || a + c <= b || b + c <= a) {\n        return -1;\n    }\n    return (a + b + c) / 2.0;\n}\nint main() {\n    auto candidate = triangle_area;\n    assert(candidate((3), (4), (5)) == (6.0));\n    assert(candidate((1), (2), (10)) == (float(-1)));\n    assert(candidate((4), (8), (5)) == (8.18));\n    assert(candidate((2), (2), (2)) == (1.73));\n    assert(candidate((1), (2), (3)) == (float(-1)));\n    assert(candidate((10), (5), (7)) == (16.25));\n    assert(candidate((2), (6), (3)) == (float(-1)));\n    assert(candidate((1), (1), (1)) == (0.43));\n    assert(candidate((2), (2), (10)) == (float(-1)));\n}\n",
      "timestamp": 1664292647,
      "stdout": "",
      "stderr": "tmp__k4tn54: /tmp/tmp__k4tn54.cpp:23: int main(): Assertion `candidate((4), (8), (5)) == (8.18)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.00\n// >>> triangle_area(1, 2, 10)\n// -1\nfloat triangle_area(long a, long b, long c) {\n    if (a + b <= c || b + c <= a || c + a <= b)\n        return -1;\n    return (float) (a + b + c) / 2;\n}\nint main() {\n    auto candidate = triangle_area;\n    assert(candidate((3), (4), (5)) == (6.0));\n    assert(candidate((1), (2), (10)) == (float(-1)));\n    assert(candidate((4), (8), (5)) == (8.18));\n    assert(candidate((2), (2), (2)) == (1.73));\n    assert(candidate((1), (2), (3)) == (float(-1)));\n    assert(candidate((10), (5), (7)) == (16.25));\n    assert(candidate((2), (6), (3)) == (float(-1)));\n    assert(candidate((1), (1), (1)) == (0.43));\n    assert(candidate((2), (2), (10)) == (float(-1)));\n}\n",
      "timestamp": 1664292646,
      "stdout": "",
      "stderr": "tmps0eiksur: /tmp/tmps0eiksur.cpp:22: int main(): Assertion `candidate((4), (8), (5)) == (8.18)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.00\n// >>> triangle_area(1, 2, 10)\n// -1\nfloat triangle_area(long a, long b, long c) {\n    if (a + b <= c || b + c <= a || a + c <= b) {\n        return -1;\n    }\n    return (a + b + c) / 2.0;\n}\nint main() {\n    auto candidate = triangle_area;\n    assert(candidate((3), (4), (5)) == (6.0));\n    assert(candidate((1), (2), (10)) == (float(-1)));\n    assert(candidate((4), (8), (5)) == (8.18));\n    assert(candidate((2), (2), (2)) == (1.73));\n    assert(candidate((1), (2), (3)) == (float(-1)));\n    assert(candidate((10), (5), (7)) == (16.25));\n    assert(candidate((2), (6), (3)) == (float(-1)));\n    assert(candidate((1), (1), (1)) == (0.43));\n    assert(candidate((2), (2), (10)) == (float(-1)));\n}\n",
      "timestamp": 1664292650,
      "stdout": "",
      "stderr": "tmpoyt98c6j: /tmp/tmpoyt98c6j.cpp:23: int main(): Assertion `candidate((4), (8), (5)) == (8.18)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.00\n// >>> triangle_area(1, 2, 10)\n// -1\nfloat triangle_area(long a, long b, long c) {\n    float area = 0.0;\n    if (a + b > c && a + c > b && b + c > a) {\n        area = (float) (a + b + c) / 2;\n    }\n    return area;\n}\nint main() {\n    auto candidate = triangle_area;\n    assert(candidate((3), (4), (5)) == (6.0));\n    assert(candidate((1), (2), (10)) == (float(-1)));\n    assert(candidate((4), (8), (5)) == (8.18));\n    assert(candidate((2), (2), (2)) == (1.73));\n    assert(candidate((1), (2), (3)) == (float(-1)));\n    assert(candidate((10), (5), (7)) == (16.25));\n    assert(candidate((2), (6), (3)) == (float(-1)));\n    assert(candidate((1), (1), (1)) == (0.43));\n    assert(candidate((2), (2), (10)) == (float(-1)));\n}\n",
      "timestamp": 1664292648,
      "stdout": "",
      "stderr": "tmp988tzy7p: /tmp/tmp988tzy7p.cpp:23: int main(): Assertion `candidate((1), (2), (10)) == (float(-1))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.00\n// >>> triangle_area(1, 2, 10)\n// -1\nfloat triangle_area(long a, long b, long c) {\n    float area = 0.0f;\n    if (a + b > c && a + c > b && b + c > a) {\n        area = (float) (0.5 * (a + b + c) * sqrt(pow(a, 2) + pow(b, 2) + pow(c, 2)));\n    }\n    return area;\n}\nint main() {\n    auto candidate = triangle_area;\n    assert(candidate((3), (4), (5)) == (6.0));\n    assert(candidate((1), (2), (10)) == (float(-1)));\n    assert(candidate((4), (8), (5)) == (8.18));\n    assert(candidate((2), (2), (2)) == (1.73));\n    assert(candidate((1), (2), (3)) == (float(-1)));\n    assert(candidate((10), (5), (7)) == (16.25));\n    assert(candidate((2), (6), (3)) == (float(-1)));\n    assert(candidate((1), (1), (1)) == (0.43));\n    assert(candidate((2), (2), (10)) == (float(-1)));\n}\n",
      "timestamp": 1664292652,
      "stdout": "",
      "stderr": "tmp116mm5v5: /tmp/tmp116mm5v5.cpp:22: int main(): Assertion `candidate((3), (4), (5)) == (6.0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.00\n// >>> triangle_area(1, 2, 10)\n// -1\nfloat triangle_area(long a, long b, long c) {\n    float area = 0;\n    if (a + b > c && b + c > a && a + c > b) {\n        area = (a + b + c) / 2;\n    }\n    return area;\n}\nint main() {\n    auto candidate = triangle_area;\n    assert(candidate((3), (4), (5)) == (6.0));\n    assert(candidate((1), (2), (10)) == (float(-1)));\n    assert(candidate((4), (8), (5)) == (8.18));\n    assert(candidate((2), (2), (2)) == (1.73));\n    assert(candidate((1), (2), (3)) == (float(-1)));\n    assert(candidate((10), (5), (7)) == (16.25));\n    assert(candidate((2), (6), (3)) == (float(-1)));\n    assert(candidate((1), (1), (1)) == (0.43));\n    assert(candidate((2), (2), (10)) == (float(-1)));\n}\n",
      "timestamp": 1664292653,
      "stdout": "",
      "stderr": "tmptswcb9mn: /tmp/tmptswcb9mn.cpp:23: int main(): Assertion `candidate((1), (2), (10)) == (float(-1))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.00\n// >>> triangle_area(1, 2, 10)\n// -1\nfloat triangle_area(long a, long b, long c) {\n    float area = 0;\n    if (a + b > c && b + c > a && a + c > b) {\n        area = (float)(0.5 * (a + b + c) * (a + b - c) * (a + c - b) * (b + c - a));\n    }\n    return area;\n}\nint main() {\n    auto candidate = triangle_area;\n    assert(candidate((3), (4), (5)) == (6.0));\n    assert(candidate((1), (2), (10)) == (float(-1)));\n    assert(candidate((4), (8), (5)) == (8.18));\n    assert(candidate((2), (2), (2)) == (1.73));\n    assert(candidate((1), (2), (3)) == (float(-1)));\n    assert(candidate((10), (5), (7)) == (16.25));\n    assert(candidate((2), (6), (3)) == (float(-1)));\n    assert(candidate((1), (1), (1)) == (0.43));\n    assert(candidate((2), (2), (10)) == (float(-1)));\n}\n",
      "timestamp": 1664292653,
      "stdout": "",
      "stderr": "tmpo7wd68mg: /tmp/tmpo7wd68mg.cpp:22: int main(): Assertion `candidate((3), (4), (5)) == (6.0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.00\n// >>> triangle_area(1, 2, 10)\n// -1\nfloat triangle_area(long a, long b, long c) {\n    if (a + b < c || a + c < b || b + c < a) return -1;\n    return (a + b + c) / 2;\n}\nint main() {\n    auto candidate = triangle_area;\n    assert(candidate((3), (4), (5)) == (6.0));\n    assert(candidate((1), (2), (10)) == (float(-1)));\n    assert(candidate((4), (8), (5)) == (8.18));\n    assert(candidate((2), (2), (2)) == (1.73));\n    assert(candidate((1), (2), (3)) == (float(-1)));\n    assert(candidate((10), (5), (7)) == (16.25));\n    assert(candidate((2), (6), (3)) == (float(-1)));\n    assert(candidate((1), (1), (1)) == (0.43));\n    assert(candidate((2), (2), (10)) == (float(-1)));\n}\n",
      "timestamp": 1664292646,
      "stdout": "",
      "stderr": "tmpcpxm4fue: /tmp/tmpcpxm4fue.cpp:21: int main(): Assertion `candidate((4), (8), (5)) == (8.18)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.00\n// >>> triangle_area(1, 2, 10)\n// -1\nfloat triangle_area(long a, long b, long c) {\n    float area = 0;\n    if (a + b > c && b + c > a && c + a > b) {\n        area = (float) (a * b / 2);\n    }\n    return area;\n}\nint main() {\n    auto candidate = triangle_area;\n    assert(candidate((3), (4), (5)) == (6.0));\n    assert(candidate((1), (2), (10)) == (float(-1)));\n    assert(candidate((4), (8), (5)) == (8.18));\n    assert(candidate((2), (2), (2)) == (1.73));\n    assert(candidate((1), (2), (3)) == (float(-1)));\n    assert(candidate((10), (5), (7)) == (16.25));\n    assert(candidate((2), (6), (3)) == (float(-1)));\n    assert(candidate((1), (1), (1)) == (0.43));\n    assert(candidate((2), (2), (10)) == (float(-1)));\n}\n",
      "timestamp": 1664292652,
      "stdout": "",
      "stderr": "tmpmfqrvpnb: /tmp/tmpmfqrvpnb.cpp:23: int main(): Assertion `candidate((1), (2), (10)) == (float(-1))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.00\n// >>> triangle_area(1, 2, 10)\n// -1\nfloat triangle_area(long a, long b, long c) {\n    float area = 0;\n    if (a + b > c && b + c > a && a + c > b) {\n        area = (float) (a + b + c) / 2;\n    }\n    return area;\n}\nint main() {\n    auto candidate = triangle_area;\n    assert(candidate((3), (4), (5)) == (6.0));\n    assert(candidate((1), (2), (10)) == (float(-1)));\n    assert(candidate((4), (8), (5)) == (8.18));\n    assert(candidate((2), (2), (2)) == (1.73));\n    assert(candidate((1), (2), (3)) == (float(-1)));\n    assert(candidate((10), (5), (7)) == (16.25));\n    assert(candidate((2), (6), (3)) == (float(-1)));\n    assert(candidate((1), (1), (1)) == (0.43));\n    assert(candidate((2), (2), (10)) == (float(-1)));\n}\n",
      "timestamp": 1664292648,
      "stdout": "",
      "stderr": "tmpxdwn1wi2: /tmp/tmpxdwn1wi2.cpp:23: int main(): Assertion `candidate((1), (2), (10)) == (float(-1))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.00\n// >>> triangle_area(1, 2, 10)\n// -1\nfloat triangle_area(long a, long b, long c) {\n    float area = 0.0;\n    if (a + b > c && a + c > b && b + c > a) {\n        area = (float) (a + b + c) / 2.0;\n    }\n    return area;\n}\nint main() {\n    auto candidate = triangle_area;\n    assert(candidate((3), (4), (5)) == (6.0));\n    assert(candidate((1), (2), (10)) == (float(-1)));\n    assert(candidate((4), (8), (5)) == (8.18));\n    assert(candidate((2), (2), (2)) == (1.73));\n    assert(candidate((1), (2), (3)) == (float(-1)));\n    assert(candidate((10), (5), (7)) == (16.25));\n    assert(candidate((2), (6), (3)) == (float(-1)));\n    assert(candidate((1), (1), (1)) == (0.43));\n    assert(candidate((2), (2), (10)) == (float(-1)));\n}\n",
      "timestamp": 1664292647,
      "stdout": "",
      "stderr": "tmp9ajjeii3: /tmp/tmp9ajjeii3.cpp:23: int main(): Assertion `candidate((1), (2), (10)) == (float(-1))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.00\n// >>> triangle_area(1, 2, 10)\n// -1\nfloat triangle_area(long a, long b, long c) {\n    float area = 0;\n    if (a + b > c && a + c > b && b + c > a) {\n        area = (float) (a * b / 2);\n        area += (float) (b * c / 2);\n        area += (float) (c * a / 2);\n        area -= (float) (a + b + c) / 2;\n        area = area * 0.5;\n    }\n    return area;\n}\nint main() {\n    auto candidate = triangle_area;\n    assert(candidate((3), (4), (5)) == (6.0));\n    assert(candidate((1), (2), (10)) == (float(-1)));\n    assert(candidate((4), (8), (5)) == (8.18));\n    assert(candidate((2), (2), (2)) == (1.73));\n    assert(candidate((1), (2), (3)) == (float(-1)));\n    assert(candidate((10), (5), (7)) == (16.25));\n    assert(candidate((2), (6), (3)) == (float(-1)));\n    assert(candidate((1), (1), (1)) == (0.43));\n    assert(candidate((2), (2), (10)) == (float(-1)));\n}\n",
      "timestamp": 1664292652,
      "stdout": "",
      "stderr": "tmp6zmwrd6w: /tmp/tmp6zmwrd6w.cpp:26: int main(): Assertion `candidate((3), (4), (5)) == (6.0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.00\n// >>> triangle_area(1, 2, 10)\n// -1\nfloat triangle_area(long a, long b, long c) {\n    float area = 0.0;\n    if (a + b > c && b + c > a && c + a > b) {\n        area = (float) (a * b * c) / 2.0;\n    }\n    return area;\n}\nint main() {\n    auto candidate = triangle_area;\n    assert(candidate((3), (4), (5)) == (6.0));\n    assert(candidate((1), (2), (10)) == (float(-1)));\n    assert(candidate((4), (8), (5)) == (8.18));\n    assert(candidate((2), (2), (2)) == (1.73));\n    assert(candidate((1), (2), (3)) == (float(-1)));\n    assert(candidate((10), (5), (7)) == (16.25));\n    assert(candidate((2), (6), (3)) == (float(-1)));\n    assert(candidate((1), (1), (1)) == (0.43));\n    assert(candidate((2), (2), (10)) == (float(-1)));\n}\n",
      "timestamp": 1664292645,
      "stdout": "",
      "stderr": "tmpuiefrdnj: /tmp/tmpuiefrdnj.cpp:22: int main(): Assertion `candidate((3), (4), (5)) == (6.0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.00\n// >>> triangle_area(1, 2, 10)\n// -1\nfloat triangle_area(long a, long b, long c) {\n    float area = 0;\n    if (a + b > c && a + c > b && b + c > a) {\n        area = (float) (a + b + c) / 2;\n    }\n    return area;\n}\nint main() {\n    auto candidate = triangle_area;\n    assert(candidate((3), (4), (5)) == (6.0));\n    assert(candidate((1), (2), (10)) == (float(-1)));\n    assert(candidate((4), (8), (5)) == (8.18));\n    assert(candidate((2), (2), (2)) == (1.73));\n    assert(candidate((1), (2), (3)) == (float(-1)));\n    assert(candidate((10), (5), (7)) == (16.25));\n    assert(candidate((2), (6), (3)) == (float(-1)));\n    assert(candidate((1), (1), (1)) == (0.43));\n    assert(candidate((2), (2), (10)) == (float(-1)));\n}\n",
      "timestamp": 1664292646,
      "stdout": "",
      "stderr": "tmp938xrm5j: /tmp/tmp938xrm5j.cpp:23: int main(): Assertion `candidate((1), (2), (10)) == (float(-1))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.00\n// >>> triangle_area(1, 2, 10)\n// -1\nfloat triangle_area(long a, long b, long c) {\n    float area = 0.0;\n    if (a + b > c && b + c > a && c + a > b) {\n        area = (float) (a + b + c) / 2.0;\n    }\n    return area;\n}\nint main() {\n    auto candidate = triangle_area;\n    assert(candidate((3), (4), (5)) == (6.0));\n    assert(candidate((1), (2), (10)) == (float(-1)));\n    assert(candidate((4), (8), (5)) == (8.18));\n    assert(candidate((2), (2), (2)) == (1.73));\n    assert(candidate((1), (2), (3)) == (float(-1)));\n    assert(candidate((10), (5), (7)) == (16.25));\n    assert(candidate((2), (6), (3)) == (float(-1)));\n    assert(candidate((1), (1), (1)) == (0.43));\n    assert(candidate((2), (2), (10)) == (float(-1)));\n}\n",
      "timestamp": 1664292650,
      "stdout": "",
      "stderr": "tmpo7do9aww: /tmp/tmpo7do9aww.cpp:23: int main(): Assertion `candidate((1), (2), (10)) == (float(-1))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.00\n// >>> triangle_area(1, 2, 10)\n// -1\nfloat triangle_area(long a, long b, long c) {\n    if (a + b <= c || b + c <= a || a + c <= b) {\n        return -1;\n    }\n    return (a + b + c) / 2;\n}\nint main() {\n    auto candidate = triangle_area;\n    assert(candidate((3), (4), (5)) == (6.0));\n    assert(candidate((1), (2), (10)) == (float(-1)));\n    assert(candidate((4), (8), (5)) == (8.18));\n    assert(candidate((2), (2), (2)) == (1.73));\n    assert(candidate((1), (2), (3)) == (float(-1)));\n    assert(candidate((10), (5), (7)) == (16.25));\n    assert(candidate((2), (6), (3)) == (float(-1)));\n    assert(candidate((1), (1), (1)) == (0.43));\n    assert(candidate((2), (2), (10)) == (float(-1)));\n}\n",
      "timestamp": 1664292645,
      "stdout": "",
      "stderr": "tmp3_fw44k1: /tmp/tmp3_fw44k1.cpp:23: int main(): Assertion `candidate((4), (8), (5)) == (8.18)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.00\n// >>> triangle_area(1, 2, 10)\n// -1\nfloat triangle_area(long a, long b, long c) {\n    float area = 0.0;\n    if (a + b > c && b + c > a && a + c > b) {\n        area = (float) (a * b * c) / 2.0;\n    }\n    return area;\n}\nint main() {\n    auto candidate = triangle_area;\n    assert(candidate((3), (4), (5)) == (6.0));\n    assert(candidate((1), (2), (10)) == (float(-1)));\n    assert(candidate((4), (8), (5)) == (8.18));\n    assert(candidate((2), (2), (2)) == (1.73));\n    assert(candidate((1), (2), (3)) == (float(-1)));\n    assert(candidate((10), (5), (7)) == (16.25));\n    assert(candidate((2), (6), (3)) == (float(-1)));\n    assert(candidate((1), (1), (1)) == (0.43));\n    assert(candidate((2), (2), (10)) == (float(-1)));\n}\n",
      "timestamp": 1664292645,
      "stdout": "",
      "stderr": "tmpp44u3deo: /tmp/tmpp44u3deo.cpp:22: int main(): Assertion `candidate((3), (4), (5)) == (6.0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.00\n// >>> triangle_area(1, 2, 10)\n// -1\nfloat triangle_area(long a, long b, long c) {\n    float area;\n    area = (float) (a + b + c) / 2.0;\n    if (a + b > c && a + c > b && b + c > a) {\n        return area;\n    }\n    return -1;\n}\nint main() {\n    auto candidate = triangle_area;\n    assert(candidate((3), (4), (5)) == (6.0));\n    assert(candidate((1), (2), (10)) == (float(-1)));\n    assert(candidate((4), (8), (5)) == (8.18));\n    assert(candidate((2), (2), (2)) == (1.73));\n    assert(candidate((1), (2), (3)) == (float(-1)));\n    assert(candidate((10), (5), (7)) == (16.25));\n    assert(candidate((2), (6), (3)) == (float(-1)));\n    assert(candidate((1), (1), (1)) == (0.43));\n    assert(candidate((2), (2), (10)) == (float(-1)));\n}\n",
      "timestamp": 1664292652,
      "stdout": "",
      "stderr": "tmp0cqpf988: /tmp/tmp0cqpf988.cpp:25: int main(): Assertion `candidate((4), (8), (5)) == (8.18)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.00\n// >>> triangle_area(1, 2, 10)\n// -1\nfloat triangle_area(long a, long b, long c) {\n    float area = 0;\n    if (a + b > c && b + c > a && a + c > b) {\n        area = (float)(0.5 * (a + b + c) * sqrt(pow(a, 2) + pow(b, 2) + pow(c, 2)));\n    }\n    return area;\n}\nint main() {\n    auto candidate = triangle_area;\n    assert(candidate((3), (4), (5)) == (6.0));\n    assert(candidate((1), (2), (10)) == (float(-1)));\n    assert(candidate((4), (8), (5)) == (8.18));\n    assert(candidate((2), (2), (2)) == (1.73));\n    assert(candidate((1), (2), (3)) == (float(-1)));\n    assert(candidate((10), (5), (7)) == (16.25));\n    assert(candidate((2), (6), (3)) == (float(-1)));\n    assert(candidate((1), (1), (1)) == (0.43));\n    assert(candidate((2), (2), (10)) == (float(-1)));\n}\n",
      "timestamp": 1664292650,
      "stdout": "",
      "stderr": "tmp6b2d158l: /tmp/tmp6b2d158l.cpp:22: int main(): Assertion `candidate((3), (4), (5)) == (6.0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.00\n// >>> triangle_area(1, 2, 10)\n// -1\nfloat triangle_area(long a, long b, long c) {\n    float area = 0.0;\n    if (a + b > c && b + c > a && a + c > b) {\n        area = (float)(a + b + c) / 2.0;\n        area = area * area;\n    }\n    return area;\n}\nint main() {\n    auto candidate = triangle_area;\n    assert(candidate((3), (4), (5)) == (6.0));\n    assert(candidate((1), (2), (10)) == (float(-1)));\n    assert(candidate((4), (8), (5)) == (8.18));\n    assert(candidate((2), (2), (2)) == (1.73));\n    assert(candidate((1), (2), (3)) == (float(-1)));\n    assert(candidate((10), (5), (7)) == (16.25));\n    assert(candidate((2), (6), (3)) == (float(-1)));\n    assert(candidate((1), (1), (1)) == (0.43));\n    assert(candidate((2), (2), (10)) == (float(-1)));\n}\n",
      "timestamp": 1664292652,
      "stdout": "",
      "stderr": "tmphl9ejgnb: /tmp/tmphl9ejgnb.cpp:23: int main(): Assertion `candidate((3), (4), (5)) == (6.0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.00\n// >>> triangle_area(1, 2, 10)\n// -1\nfloat triangle_area(long a, long b, long c) {\n    float area = 0.0;\n    if (a + b > c && a + c > b && b + c > a) {\n        area = (float) (a + b + c) / 2.0;\n    }\n    return area;\n}\nint main() {\n    auto candidate = triangle_area;\n    assert(candidate((3), (4), (5)) == (6.0));\n    assert(candidate((1), (2), (10)) == (float(-1)));\n    assert(candidate((4), (8), (5)) == (8.18));\n    assert(candidate((2), (2), (2)) == (1.73));\n    assert(candidate((1), (2), (3)) == (float(-1)));\n    assert(candidate((10), (5), (7)) == (16.25));\n    assert(candidate((2), (6), (3)) == (float(-1)));\n    assert(candidate((1), (1), (1)) == (0.43));\n    assert(candidate((2), (2), (10)) == (float(-1)));\n}\n",
      "timestamp": 1664292647,
      "stdout": "",
      "stderr": "tmp9ajjeii3: /tmp/tmp9ajjeii3.cpp:23: int main(): Assertion `candidate((1), (2), (10)) == (float(-1))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.00\n// >>> triangle_area(1, 2, 10)\n// -1\nfloat triangle_area(long a, long b, long c) {\n    float area = 0.0;\n    if (a + b > c && a + c > b && b + c > a) {\n        area = (float) (a + b + c) / 2.0;\n    }\n    return area;\n}\nint main() {\n    auto candidate = triangle_area;\n    assert(candidate((3), (4), (5)) == (6.0));\n    assert(candidate((1), (2), (10)) == (float(-1)));\n    assert(candidate((4), (8), (5)) == (8.18));\n    assert(candidate((2), (2), (2)) == (1.73));\n    assert(candidate((1), (2), (3)) == (float(-1)));\n    assert(candidate((10), (5), (7)) == (16.25));\n    assert(candidate((2), (6), (3)) == (float(-1)));\n    assert(candidate((1), (1), (1)) == (0.43));\n    assert(candidate((2), (2), (10)) == (float(-1)));\n}\n",
      "timestamp": 1664292647,
      "stdout": "",
      "stderr": "tmp9ajjeii3: /tmp/tmp9ajjeii3.cpp:23: int main(): Assertion `candidate((1), (2), (10)) == (float(-1))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.00\n// >>> triangle_area(1, 2, 10)\n// -1\nfloat triangle_area(long a, long b, long c) {\n    if (a + b <= c || a + c <= b || b + c <= a) {\n        return -1;\n    }\n    return (a + b + c) / 2;\n}\nint main() {\n    auto candidate = triangle_area;\n    assert(candidate((3), (4), (5)) == (6.0));\n    assert(candidate((1), (2), (10)) == (float(-1)));\n    assert(candidate((4), (8), (5)) == (8.18));\n    assert(candidate((2), (2), (2)) == (1.73));\n    assert(candidate((1), (2), (3)) == (float(-1)));\n    assert(candidate((10), (5), (7)) == (16.25));\n    assert(candidate((2), (6), (3)) == (float(-1)));\n    assert(candidate((1), (1), (1)) == (0.43));\n    assert(candidate((2), (2), (10)) == (float(-1)));\n}\n",
      "timestamp": 1664292646,
      "stdout": "",
      "stderr": "tmp9iffjjte: /tmp/tmp9iffjjte.cpp:23: int main(): Assertion `candidate((4), (8), (5)) == (8.18)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.00\n// >>> triangle_area(1, 2, 10)\n// -1\nfloat triangle_area(long a, long b, long c) {\n    if (a + b <= c || a + c <= b || b + c <= a) {\n        return -1;\n    }\n    return (a + b + c) / 2;\n}\nint main() {\n    auto candidate = triangle_area;\n    assert(candidate((3), (4), (5)) == (6.0));\n    assert(candidate((1), (2), (10)) == (float(-1)));\n    assert(candidate((4), (8), (5)) == (8.18));\n    assert(candidate((2), (2), (2)) == (1.73));\n    assert(candidate((1), (2), (3)) == (float(-1)));\n    assert(candidate((10), (5), (7)) == (16.25));\n    assert(candidate((2), (6), (3)) == (float(-1)));\n    assert(candidate((1), (1), (1)) == (0.43));\n    assert(candidate((2), (2), (10)) == (float(-1)));\n}\n",
      "timestamp": 1664292646,
      "stdout": "",
      "stderr": "tmp9iffjjte: /tmp/tmp9iffjjte.cpp:23: int main(): Assertion `candidate((4), (8), (5)) == (8.18)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    }
  ]
}