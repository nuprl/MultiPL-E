{
  "name": "HumanEval_24_largest_divisor",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nlong largest_divisor(long n) {\n",
  "tests": "}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) == (7));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nlong largest_divisor(long n) {\n    long i, j;\n    for (i = 2; i < n; i++) {\n        if (n % i == 0) {\n            j = i;\n            while (n % j == 0) {\n                j++;\n            }\n            if (j > i) {\n                i = j;\n            }\n        }\n    }\n    return i;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) == (7));\n}\n",
      "timestamp": 1664292880,
      "stdout": "",
      "stderr": "tmpxzfho5xw: /tmp/tmpxzfho5xw.cpp:23: int main(): Assertion `candidate((3)) == (1)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nlong largest_divisor(long n) {\n    long result = n;\n    while (result % 2 == 0) {\n        result /= 2;\n    }\n    while (result % 3 == 0) {\n        result /= 3;\n    }\n    while (result % 5 == 0) {\n        result /= 5;\n    }\n    while (result % 7 == 0) {\n        result /= 7;\n    }\n    while (result % 11 == 0) {\n        result /= 11;\n    }\n    while (result % 13 == 0) {\n        result /= 13;\n    }\n    while (result % 17 == 0) {\n        result /= 17;\n    }\n    return result;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) == (7));\n}\n",
      "timestamp": 1664292880,
      "stdout": "",
      "stderr": "tmpzhhawvhw: /tmp/tmpzhhawvhw.cpp:35: int main(): Assertion `candidate((10)) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nlong largest_divisor(long n) {\n    long i, j, k;\n    for (i = 2; i <= n; i++) {\n        if (n % i == 0) {\n            j = i;\n            while (n % j == 0) {\n                j++;\n            }\n            k = j;\n            while (k <= n) {\n                k *= j;\n            }\n            if (k < n) {\n                return k;\n            }\n        }\n    }\n    return n;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) == (7));\n}\n",
      "timestamp": 1664292880,
      "stdout": "",
      "stderr": "tmp96veibgz: /tmp/tmp96veibgz.cpp:27: int main(): Assertion `candidate((3)) == (1)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nlong largest_divisor(long n) {\n    long i, j, k;\n    for (i = 2; i < n; i++) {\n        if (n % i == 0) {\n            k = i;\n            while (n % i == 0) {\n                n /= i;\n            }\n        }\n    }\n    return k;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) == (7));\n}\n",
      "timestamp": 1664292880,
      "stdout": "",
      "stderr": "tmp64k_u2uc: /tmp/tmp64k_u2uc.cpp:20: int main(): Assertion `candidate((3)) == (1)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nlong largest_divisor(long n) {\n    long i, j, k;\n    for (i = 2; i < n; i++) {\n        if (n % i == 0) {\n            k = i;\n            while (n % i == 0) {\n                n /= i;\n            }\n            return k;\n        }\n    }\n    return n;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) == (7));\n}\n",
      "timestamp": 1664292880,
      "stdout": "",
      "stderr": "tmp3eybsimw: /tmp/tmp3eybsimw.cpp:21: int main(): Assertion `candidate((3)) == (1)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nlong largest_divisor(long n) {\n    long i, j, k;\n    long max = n;\n    for (i = 2; i <= n / i; i++) {\n        if (n % i == 0) {\n            k = i;\n            while (n % k == 0) {\n                k++;\n            }\n            if (k > max) {\n                max = k;\n            }\n        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) == (7));\n}\n",
      "timestamp": 1664292880,
      "stdout": "",
      "stderr": "tmpo0qzxq47: /tmp/tmpo0qzxq47.cpp:24: int main(): Assertion `candidate((3)) == (1)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nlong largest_divisor(long n) {\n    long i = 2;\n    while (i <= n / 2) {\n        if (n % i == 0) {\n            return i;\n        }\n        i++;\n    }\n    return i - 1;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) == (7));\n}\n",
      "timestamp": 1664292880,
      "stdout": "",
      "stderr": "tmpt3ugan4k: /tmp/tmpt3ugan4k.cpp:19: int main(): Assertion `candidate((7)) == (1)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nlong largest_divisor(long n) {\n    long i, j, k;\n    long max = n;\n    for (i = 2; i <= n; i++) {\n        if (n % i == 0) {\n            max = i;\n            for (j = i; j <= n; j += i) {\n                if (n % j == 0) {\n                    max = j;\n                    break;\n                }\n            }\n        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) == (7));\n}\n",
      "timestamp": 1664292880,
      "stdout": "",
      "stderr": "tmp_3k7knfq: /tmp/tmp_3k7knfq.cpp:24: int main(): Assertion `candidate((3)) == (1)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nlong largest_divisor(long n) {\n    long i, j, max_i = 0;\n    for (i = 1; i <= n; i++) {\n        if (n % i == 0) {\n            j = i;\n            while (n % j == 0) {\n                j++;\n            }\n            if (j > max_i) {\n                max_i = j;\n            }\n        }\n    }\n    return max_i;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) == (7));\n}\n",
      "timestamp": 1664292880,
      "stdout": "",
      "stderr": "tmpuxuo99ud: /tmp/tmpuxuo99ud.cpp:23: int main(): Assertion `candidate((3)) == (1)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nlong largest_divisor(long n) {\n    long result = n;\n    while (result % 2 == 0) {\n        result /= 2;\n    }\n    while (result % 3 == 0) {\n        result /= 3;\n    }\n    while (result % 5 == 0) {\n        result /= 5;\n    }\n    while (result % 7 == 0) {\n        result /= 7;\n    }\n    while (result % 11 == 0) {\n        result /= 11;\n    }\n    while (result % 13 == 0) {\n        result /= 13;\n    }\n    while (result % 17 == 0) {\n        result /= 17;\n    }\n    return result;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) == (7));\n}\n",
      "timestamp": 1664292880,
      "stdout": "",
      "stderr": "tmpzhhawvhw: /tmp/tmpzhhawvhw.cpp:35: int main(): Assertion `candidate((10)) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nlong largest_divisor(long n) {\n    long i, j, k;\n    for (i = 2; i < n; i++) {\n        if (n % i == 0) {\n            k = i;\n            while (n % i == 0) {\n                n /= i;\n            }\n            return k;\n        }\n    }\n    return n;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) == (7));\n}\n",
      "timestamp": 1664292880,
      "stdout": "",
      "stderr": "tmp3eybsimw: /tmp/tmp3eybsimw.cpp:21: int main(): Assertion `candidate((3)) == (1)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nlong largest_divisor(long n) {\n    long result = n;\n    while (n % 2 == 0) {\n        result = 2 * result;\n        n /= 2;\n    }\n    while (n % 3 == 0) {\n        result = 3 * result;\n        n /= 3;\n    }\n    while (n % 5 == 0) {\n        result = 5 * result;\n        n /= 5;\n    }\n    while (n % 7 == 0) {\n        result = 7 * result;\n        n /= 7;\n    }\n    while (n % 11 == 0) {\n        result = 11 * result;\n        n /= 11;\n    }\n    while (n % 13 == 0) {\n        result = 13 * result;\n        n /= 13;\n    }\n    while (n % 17 == 0) {\n        result = 17 * result;\n        n /= 17;\n    }\n    while (n % 19 == 0) {\n        result = 19 * result;\n        n /= 19;\n    }\n    while (n % 23 == 0) {\n        result = 23 * result;\n        n /= 23;\n    }\n    while (n % 29 == 0) {\n        result = 29 * result;\n        n /= 29;\n    }\n    while (n % 31 == 0) {\n        result = 31 * result;\n        n /= 31;\n    }\n    while (n % 37 == 0) {\n        result = 37 * result;\n        n /= 37;\n    }\n    while (n % 41 == 0) {\n        result = 41 * result;\n        n /= 41;\n    }\n    while (n % 43 == 0) {\n        result = 43 * result;\n        n /= 43;\n    }\n    while (n % 47 == 0) {\n        result = 47 * result;\n        n /= 47;\n    }\n    while (n % 53 == 0) {\n        result = 53 * result;\n        n /= 53;\n    }\n    while (n % 59 == 0) {\n        result = 59 * result;\n        n /= 59;\n    }\n    while (n % 61 == 0) {\n        \n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) == (7));\n}\n",
      "timestamp": 1664292880,
      "stdout": "",
      "stderr": "/tmp/tmpvg_7gfqd.cpp: In function \u2018long int largest_divisor(long int)\u2019:\n/tmp/tmpvg_7gfqd.cpp:79:12: error: a function-definition is not allowed here before \u2018{\u2019 token\n   79 | int main() {\n      |            ^\n/tmp/tmpvg_7gfqd.cpp:86:1: error: expected \u2018}\u2019 at end of input\n   86 | }\n      | ^\n/tmp/tmpvg_7gfqd.cpp:6:30: note: to match this \u2018{\u2019\n    6 | long largest_divisor(long n) {\n      |                              ^\n/tmp/tmpvg_7gfqd.cpp:86:1: warning: no return statement in function returning non-void [-Wreturn-type]\n   86 | }\n      | ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nlong largest_divisor(long n) {\n    long i = 2;\n    while (i*i <= n) {\n        if (n % i == 0) {\n            return i;\n        }\n        i++;\n    }\n    return i;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) == (7));\n}\n",
      "timestamp": 1664292880,
      "stdout": "",
      "stderr": "tmpyzk3pe2u: /tmp/tmpyzk3pe2u.cpp:18: int main(): Assertion `candidate((3)) == (1)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nlong largest_divisor(long n) {\n    long result = n;\n    while (n % 2 == 0) {\n        result = 2 * result;\n        n /= 2;\n    }\n    while (n % 3 == 0) {\n        result = 3 * result;\n        n /= 3;\n    }\n    while (n % 5 == 0) {\n        result = 5 * result;\n        n /= 5;\n    }\n    return result;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) == (7));\n}\n",
      "timestamp": 1664292880,
      "stdout": "",
      "stderr": "tmpiz4ihx5p: /tmp/tmpiz4ihx5p.cpp:24: int main(): Assertion `candidate((3)) == (1)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nlong largest_divisor(long n) {\n    long result = n;\n    while (result % 2 == 0) {\n        result /= 2;\n    }\n    while (result % 3 == 0) {\n        result /= 3;\n    }\n    while (result % 5 == 0) {\n        result /= 5;\n    }\n    while (result % 7 == 0) {\n        result /= 7;\n    }\n    while (result % 11 == 0) {\n        result /= 11;\n    }\n    while (result % 13 == 0) {\n        result /= 13;\n    }\n    while (result % 17 == 0) {\n        result /= 17;\n    }\n    return result;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) == (7));\n}\n",
      "timestamp": 1664292880,
      "stdout": "",
      "stderr": "tmpzhhawvhw: /tmp/tmpzhhawvhw.cpp:35: int main(): Assertion `candidate((10)) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nlong largest_divisor(long n) {\n    long i, j, k;\n    long m = n;\n    for (i = 2; i <= n / i; i++) {\n        if (n % i == 0) {\n            m = i;\n            break;\n        }\n    }\n    if (m == n) {\n        return n;\n    }\n    for (i = m; i <= n / i; i++) {\n        if (n % i == 0) {\n            m = i;\n            break;\n        }\n    }\n    return m;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) == (7));\n}\n",
      "timestamp": 1664292880,
      "stdout": "",
      "stderr": "tmpqgvzj7cs: /tmp/tmpqgvzj7cs.cpp:28: int main(): Assertion `candidate((3)) == (1)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nlong largest_divisor(long n) {\n    long i = 2;\n    while (i <= n) {\n        if (n % i == 0) {\n            return i;\n        }\n        i++;\n    }\n    return i - 1;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) == (7));\n}\n",
      "timestamp": 1664292880,
      "stdout": "",
      "stderr": "tmp07qdij0m: /tmp/tmp07qdij0m.cpp:18: int main(): Assertion `candidate((3)) == (1)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nlong largest_divisor(long n) {\n    long i = 2;\n    while (i*i <= n) {\n        if (n % i == 0) {\n            return i;\n        }\n        i++;\n    }\n    return i-1;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) == (7));\n}\n",
      "timestamp": 1664292880,
      "stdout": "",
      "stderr": "tmpbksn_uux: /tmp/tmpbksn_uux.cpp:19: int main(): Assertion `candidate((7)) == (1)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nlong largest_divisor(long n) {\n    long i = 1;\n    while (i*i <= n) {\n        if (n % i == 0) {\n            return i;\n        }\n        i++;\n    }\n    return i;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) == (7));\n}\n",
      "timestamp": 1664292880,
      "stdout": "",
      "stderr": "tmpvkc06oz8: /tmp/tmpvkc06oz8.cpp:20: int main(): Assertion `candidate((10)) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nlong largest_divisor(long n) {\n    long i, j, k;\n    for (i = 2; i <= n; i++) {\n        if (n % i == 0) {\n            j = i;\n            k = n / i;\n            while (k % j == 0) {\n                j = j / 2;\n                k = k / j;\n            }\n            return i * j;\n        }\n    }\n    return n;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) == (7));\n}\n",
      "timestamp": 1664292880,
      "stdout": "",
      "stderr": "tmpcrxoc5eh: /tmp/tmpcrxoc5eh.cpp:23: int main(): Assertion `candidate((3)) == (1)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nlong largest_divisor(long n) {\n    long i, j, k;\n    for (i = 2; i < n; i++) {\n        if (n % i == 0) {\n            k = i;\n            while (n % i == 0) {\n                n /= i;\n            }\n            return k;\n        }\n    }\n    return n;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) == (7));\n}\n",
      "timestamp": 1664292880,
      "stdout": "",
      "stderr": "tmp3eybsimw: /tmp/tmp3eybsimw.cpp:21: int main(): Assertion `candidate((3)) == (1)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nlong largest_divisor(long n) {\n    long i = 2;\n    while (i <= n) {\n        if (n % i == 0) {\n            return i;\n        }\n        i++;\n    }\n    return i;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) == (7));\n}\n",
      "timestamp": 1664292880,
      "stdout": "",
      "stderr": "tmpnz1q2rrw: /tmp/tmpnz1q2rrw.cpp:18: int main(): Assertion `candidate((3)) == (1)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nlong largest_divisor(long n) {\n    long i, j, k;\n    long max = n;\n    for (i = 2; i < n; i++) {\n        if (n % i == 0) {\n            k = i;\n            while (n % i == 0) {\n                n /= i;\n            }\n            if (k > max) {\n                max = k;\n            }\n        }\n    }\n    if (n > 1) {\n        max = n;\n    }\n    return max;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) == (7));\n}\n",
      "timestamp": 1664292880,
      "stdout": "",
      "stderr": "tmphb4z4d1q: /tmp/tmphb4z4d1q.cpp:27: int main(): Assertion `candidate((3)) == (1)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nlong largest_divisor(long n) {\n    long i, j, k;\n    long result = n;\n    for (i = 2; i < n; i++) {\n        if (n % i == 0) {\n            result = i;\n            break;\n        }\n    }\n    if (result == n) {\n        for (i = 2; i < n; i++) {\n            for (j = i + i; j < n; j += i) {\n                if (n % j == 0) {\n                    result = j;\n                    break;\n                }\n            }\n            if (result != n) break;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) == (7));\n}\n",
      "timestamp": 1664292880,
      "stdout": "",
      "stderr": "tmpsb1cdg9q: /tmp/tmpsb1cdg9q.cpp:30: int main(): Assertion `candidate((3)) == (1)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nlong largest_divisor(long n) {\n    long i, j, k;\n    long m = n;\n    for (i = 2; i <= n / i; i++) {\n        if (n % i == 0) {\n            m = i;\n            break;\n        }\n    }\n    if (m == n) return m;\n    for (i = 2; i <= m / i; i++) {\n        if (m % i == 0) {\n            m = i;\n            break;\n        }\n    }\n    if (m == n) return m;\n    for (i = 2; i <= n / i; i++) {\n        if (n % i == 0) {\n            m = i;\n            break;\n        }\n    }\n    if (m == n) return m;\n    for (i = 2; i <= m / i; i++) {\n        if (m % i == 0) {\n            m = i;\n            break;\n        }\n    }\n    return m;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) == (7));\n}\n",
      "timestamp": 1664292880,
      "stdout": "",
      "stderr": "tmp6ghhh96m: /tmp/tmp6ghhh96m.cpp:40: int main(): Assertion `candidate((3)) == (1)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nlong largest_divisor(long n) {\n    long result = n;\n    while (result % 2 == 0) {\n        result /= 2;\n    }\n    while (result % 3 == 0) {\n        result /= 3;\n    }\n    while (result % 5 == 0) {\n        result /= 5;\n    }\n    while (result % 7 == 0) {\n        result /= 7;\n    }\n    while (result % 11 == 0) {\n        result /= 11;\n    }\n    while (result % 13 == 0) {\n        result /= 13;\n    }\n    while (result % 17 == 0) {\n        result /= 17;\n    }\n    return result;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) == (7));\n}\n",
      "timestamp": 1664292880,
      "stdout": "",
      "stderr": "tmpzhhawvhw: /tmp/tmpzhhawvhw.cpp:35: int main(): Assertion `candidate((10)) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nlong largest_divisor(long n) {\n    long i, j, k;\n    long m = n;\n    for (i = 2; i <= n / i; i++) {\n        if (n % i == 0) {\n            m = i;\n            break;\n        }\n    }\n    if (m == n) return m;\n    for (i = m; i <= n / m; i++) {\n        if (n % i == 0) {\n            m = i;\n            break;\n        }\n    }\n    if (m == n) return m;\n    for (i = m; i <= n / m; i++) {\n        if (n % i == 0) {\n            m = i;\n            break;\n        }\n    }\n    if (m == n) return m;\n    for (i = m; i <= n / m; i++) {\n        if (n % i == 0) {\n            m = i;\n            break;\n        }\n    }\n    if (m == n) return m;\n    for (i = m; i <= n / m; i++) {\n        if (n % i == 0) {\n            m = i;\n            break;\n        }\n    }\n    if (m == n) return m;\n    for (i = m; i <= n / m; i++) {\n        if (n % i == 0) {\n            m = i;\n            break;\n        }\n    }\n    if (m == n) return m;\n    for (i = m; i <= n / m; i++) {\n        if (n % i == 0) {\n            m = i;\n            break;\n        }\n    }\n    if (m == n) return m;\n    for (i = m; i <= n / m; i++) {\n        if (n % i == 0) {\n            m = i;\n            break;\n        }\n    }\n    if (m == n) return m;\n    for (i = m; i <= n / m; i++) {\n        if (n % i == 0) {\n            m = i;\n            break;\n        }\n    }\n    if (m == n) return m;\n    \n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) == (7));\n}\n",
      "timestamp": 1664292880,
      "stdout": "",
      "stderr": "tmpgsfpyyv_: /tmp/tmpgsfpyyv_.cpp:76: int main(): Assertion `candidate((3)) == (1)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nlong largest_divisor(long n) {\n    long i, j, k;\n    long result = n;\n    for (i = 2; i <= n / i; i++) {\n        if (n % i == 0) {\n            result = i;\n            break;\n        }\n    }\n    if (result == n) {\n        for (i = 2; i <= n / i; i++) {\n            if (n % i == 0) {\n                result = i;\n                break;\n            }\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) == (7));\n}\n",
      "timestamp": 1664292880,
      "stdout": "",
      "stderr": "tmpixb0xaa4: /tmp/tmpixb0xaa4.cpp:27: int main(): Assertion `candidate((3)) == (1)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nlong largest_divisor(long n) {\n    long result = n;\n    while (result % 2 == 0) {\n        result /= 2;\n    }\n    while (result % 3 == 0) {\n        result /= 3;\n    }\n    while (result % 5 == 0) {\n        result /= 5;\n    }\n    while (result % 7 == 0) {\n        result /= 7;\n    }\n    while (result % 11 == 0) {\n        result /= 11;\n    }\n    while (result % 13 == 0) {\n        result /= 13;\n    }\n    while (result % 17 == 0) {\n        result /= 17;\n    }\n    return result;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) == (7));\n}\n",
      "timestamp": 1664292880,
      "stdout": "",
      "stderr": "tmpzhhawvhw: /tmp/tmpzhhawvhw.cpp:35: int main(): Assertion `candidate((10)) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nlong largest_divisor(long n) {\n    long i, j, k;\n    long m = n;\n    for (i = 2; i <= n / i; i++) {\n        if (n % i == 0) {\n            m = i;\n            break;\n        }\n    }\n    if (m == n) {\n        return n;\n    }\n    for (i = 2; i <= m / i; i++) {\n        if (m % i == 0) {\n            k = m / i;\n            break;\n        }\n    }\n    return k;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) == (7));\n}\n",
      "timestamp": 1664292882,
      "stdout": "",
      "stderr": "tmplszbn4cl: /tmp/tmplszbn4cl.cpp:28: int main(): Assertion `candidate((3)) == (1)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nlong largest_divisor(long n) {\n    long i, j, k, m;\n    if (n == 1) return 1;\n    for (i = 2; i <= n; i++) {\n        if (n % i == 0) {\n            m = i;\n            while (n % i == 0) {\n                n /= i;\n            }\n        }\n    }\n    if (n > 1) m = n;\n    return m;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) == (7));\n}\n",
      "timestamp": 1664292882,
      "stdout": "",
      "stderr": "tmpzn25b7sr: /tmp/tmpzn25b7sr.cpp:22: int main(): Assertion `candidate((3)) == (1)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nlong largest_divisor(long n) {\n    long i, j, k;\n    long max = n;\n    for (i = 2; i <= n; i++) {\n        if (n % i == 0) {\n            max = i;\n            for (j = i; j <= n; j += i) {\n                k = n / j;\n                if (k % i == 0) {\n                    max = j;\n                    break;\n                }\n            }\n        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) == (7));\n}\n",
      "timestamp": 1664292882,
      "stdout": "",
      "stderr": "tmpds51fou9: /tmp/tmpds51fou9.cpp:25: int main(): Assertion `candidate((3)) == (1)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nlong largest_divisor(long n) {\n    long i, j, k;\n    long max = n;\n    for (i = 2; i < n; i++) {\n        if (n % i == 0) {\n            k = i;\n            while (n % k == 0) {\n                k++;\n            }\n            if (k > max) {\n                max = k;\n            }\n        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) == (7));\n}\n",
      "timestamp": 1664292882,
      "stdout": "",
      "stderr": "tmp_kb7ohg2: /tmp/tmp_kb7ohg2.cpp:24: int main(): Assertion `candidate((3)) == (1)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nlong largest_divisor(long n) {\n    long i, j, k;\n    long max = n;\n    for (i = 2; i < n; i++) {\n        if (n % i == 0) {\n            max = i;\n            break;\n        }\n    }\n    if (max == n) {\n        return n;\n    }\n    for (i = max; i > 1; i--) {\n        if (n % i == 0) {\n            k = n / i;\n            for (j = i; j < k; j++) {\n                if (n % j == 0) {\n                    max = j;\n                    break;\n                }\n            }\n            break;\n        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) == (7));\n}\n",
      "timestamp": 1664292882,
      "stdout": "",
      "stderr": "tmpjewvmked: /tmp/tmpjewvmked.cpp:34: int main(): Assertion `candidate((3)) == (1)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nlong largest_divisor(long n) {\n    long i = 2;\n    while (i <= n) {\n        if (n % i == 0) {\n            return i;\n        }\n        i++;\n    }\n    return i;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) == (7));\n}\n",
      "timestamp": 1664292880,
      "stdout": "",
      "stderr": "tmpnz1q2rrw: /tmp/tmpnz1q2rrw.cpp:18: int main(): Assertion `candidate((3)) == (1)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nlong largest_divisor(long n) {\n    long i = 1;\n    while (n % i != 0) {\n        i++;\n    }\n    return i;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) == (7));\n}\n",
      "timestamp": 1664292882,
      "stdout": "",
      "stderr": "tmpse199amp: /tmp/tmpse199amp.cpp:17: int main(): Assertion `candidate((10)) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nlong largest_divisor(long n) {\n    long i, j, k;\n    for (i = 2; i < n; i++) {\n        if (n % i == 0) {\n            j = i;\n            while (n % j == 0) {\n                j++;\n            }\n            k = j;\n            while (k > 1 && n % k == 0) {\n                k--;\n            }\n            if (k == 1) {\n                return i;\n            }\n        }\n    }\n    return n;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) == (7));\n}\n",
      "timestamp": 1664292882,
      "stdout": "",
      "stderr": "tmp7g0v22md: /tmp/tmp7g0v22md.cpp:27: int main(): Assertion `candidate((3)) == (1)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nlong largest_divisor(long n) {\n    long i = 2;\n    while (i <= n / i) {\n        if (n % i == 0) {\n            return i;\n        }\n        i++;\n    }\n    return i - 1;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) == (7));\n}\n",
      "timestamp": 1664292882,
      "stdout": "",
      "stderr": "tmp08x84ztf: /tmp/tmp08x84ztf.cpp:19: int main(): Assertion `candidate((7)) == (1)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nlong largest_divisor(long n) {\n    long i, j;\n    for (i = 2; i <= n; i++) {\n        if (n % i == 0) {\n            j = i;\n            while (n % j == 0) {\n                j++;\n            }\n            return j;\n        }\n    }\n    return n;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) == (7));\n}\n",
      "timestamp": 1664292882,
      "stdout": "",
      "stderr": "tmpfn0xlean: /tmp/tmpfn0xlean.cpp:21: int main(): Assertion `candidate((3)) == (1)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nlong largest_divisor(long n) {\n    long i = 2;\n    while (i <= n) {\n        if (n % i == 0) {\n            return i;\n        }\n        i++;\n    }\n    return i;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) == (7));\n}\n",
      "timestamp": 1664292880,
      "stdout": "",
      "stderr": "tmpnz1q2rrw: /tmp/tmpnz1q2rrw.cpp:18: int main(): Assertion `candidate((3)) == (1)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nlong largest_divisor(long n) {\n    long i, j, max_i = 1;\n    for (i = 2; i <= n; i++) {\n        if (n % i == 0) {\n            max_i = i;\n            break;\n        }\n    }\n    for (i = max_i; i <= n; i++) {\n        if (n % i == 0) {\n            j = i;\n            while (n % j == 0) {\n                j++;\n            }\n            if (j > max_i) {\n                max_i = j;\n            }\n        }\n    }\n    return max_i;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) == (7));\n}\n",
      "timestamp": 1664292882,
      "stdout": "",
      "stderr": "tmptusftuto: /tmp/tmptusftuto.cpp:29: int main(): Assertion `candidate((3)) == (1)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nlong largest_divisor(long n) {\n    long i, j, k;\n    long result = n;\n    for (i = 2; i <= n / i; i++) {\n        if (n % i == 0) {\n            result = i;\n            break;\n        }\n    }\n    if (result == n) {\n        for (i = 2; i <= n / i; i++) {\n            if (n % i == 0) {\n                result = i;\n                break;\n            }\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) == (7));\n}\n",
      "timestamp": 1664292880,
      "stdout": "",
      "stderr": "tmpixb0xaa4: /tmp/tmpixb0xaa4.cpp:27: int main(): Assertion `candidate((3)) == (1)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nlong largest_divisor(long n) {\n    long result = n;\n    while (result % 2 == 0) {\n        result /= 2;\n    }\n    while (result % 3 == 0) {\n        result /= 3;\n    }\n    while (result % 5 == 0) {\n        result /= 5;\n    }\n    while (result % 7 == 0) {\n        result /= 7;\n    }\n    while (result % 11 == 0) {\n        result /= 11;\n    }\n    while (result % 13 == 0) {\n        result /= 13;\n    }\n    while (result % 17 == 0) {\n        result /= 17;\n    }\n    return result;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) == (7));\n}\n",
      "timestamp": 1664292880,
      "stdout": "",
      "stderr": "tmpzhhawvhw: /tmp/tmpzhhawvhw.cpp:35: int main(): Assertion `candidate((10)) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nlong largest_divisor(long n) {\n    long i, j, k;\n    long result = n;\n    for (i = 2; i < n; i++) {\n        if (n % i == 0) {\n            result = i;\n            break;\n        }\n    }\n    if (result == n) {\n        for (i = 2; i < n; i++) {\n            if (n % i == 0) {\n                result = i;\n                break;\n            }\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) == (7));\n}\n",
      "timestamp": 1664292882,
      "stdout": "",
      "stderr": "tmpnsrfe5kb: /tmp/tmpnsrfe5kb.cpp:27: int main(): Assertion `candidate((3)) == (1)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nlong largest_divisor(long n) {\n    long i = 2;\n    while (i < n) {\n        if (n % i == 0) {\n            return i;\n        }\n        i++;\n    }\n    return i;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) == (7));\n}\n",
      "timestamp": 1664292882,
      "stdout": "",
      "stderr": "tmpt3xa17n5: /tmp/tmpt3xa17n5.cpp:18: int main(): Assertion `candidate((3)) == (1)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nlong largest_divisor(long n) {\n    long i = 2;\n    while (i*i <= n) {\n        if (n % i == 0) {\n            return i;\n        }\n        i++;\n    }\n    return i-1;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) == (7));\n}\n",
      "timestamp": 1664292880,
      "stdout": "",
      "stderr": "tmpbksn_uux: /tmp/tmpbksn_uux.cpp:19: int main(): Assertion `candidate((7)) == (1)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nlong largest_divisor(long n) {\n    long i, j, k;\n    for (i = 2; i < n; i++) {\n        if (n % i == 0) {\n            k = i;\n            while (n % i == 0) {\n                n /= i;\n            }\n        }\n    }\n    if (n > 1) {\n        k = n;\n    }\n    return k;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) == (7));\n}\n",
      "timestamp": 1664292882,
      "stdout": "",
      "stderr": "tmpfad5mt2t: /tmp/tmpfad5mt2t.cpp:23: int main(): Assertion `candidate((3)) == (1)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nlong largest_divisor(long n) {\n    long i, j, k;\n    for (i = 2; i <= n; i++) {\n        if (n % i == 0) {\n            k = i;\n            while (n % i == 0) {\n                n /= i;\n            }\n        }\n    }\n    return k;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) == (7));\n}\n",
      "timestamp": 1664292882,
      "stdout": "",
      "stderr": "tmpadn6snk2: /tmp/tmpadn6snk2.cpp:20: int main(): Assertion `candidate((3)) == (1)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nlong largest_divisor(long n) {\n    long i, j, k;\n    for (i = 2; i < n; i++) {\n        if (n % i == 0) {\n            k = i;\n            while (n % i == 0) {\n                n /= i;\n            }\n        }\n    }\n    if (n > 1) {\n        k = n;\n    }\n    return k;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) == (7));\n}\n",
      "timestamp": 1664292882,
      "stdout": "",
      "stderr": "tmpfad5mt2t: /tmp/tmpfad5mt2t.cpp:23: int main(): Assertion `candidate((3)) == (1)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nlong largest_divisor(long n) {\n    long i = 2;\n    while (i <= n / 2) {\n        if (n % i == 0) {\n            return i;\n        }\n        i++;\n    }\n    return n;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) == (7));\n}\n",
      "timestamp": 1664292882,
      "stdout": "",
      "stderr": "tmpdstlcd57: /tmp/tmpdstlcd57.cpp:18: int main(): Assertion `candidate((3)) == (1)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nlong largest_divisor(long n) {\n    long i, j, k;\n    for (i = 2; i < n; i++) {\n        if (n % i == 0) {\n            k = i;\n            while (n % i == 0) {\n                n /= i;\n            }\n            return k;\n        }\n    }\n    return n;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) == (7));\n}\n",
      "timestamp": 1664292880,
      "stdout": "",
      "stderr": "tmp3eybsimw: /tmp/tmp3eybsimw.cpp:21: int main(): Assertion `candidate((3)) == (1)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nlong largest_divisor(long n) {\n    long i, j, k;\n    long result = n;\n    for (i = 2; i < n; i++) {\n        if (n % i == 0) {\n            result = i;\n            break;\n        }\n    }\n    if (result == n) {\n        for (i = 2; i < n; i++) {\n            if (n % i == 0) {\n                result = i;\n                break;\n            }\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) == (7));\n}\n",
      "timestamp": 1664292882,
      "stdout": "",
      "stderr": "tmpnsrfe5kb: /tmp/tmpnsrfe5kb.cpp:27: int main(): Assertion `candidate((3)) == (1)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nlong largest_divisor(long n) {\n    long i = 1;\n    while (i*i <= n) {\n        if (n % i == 0) {\n            return i;\n        }\n        i++;\n    }\n    return i-1;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) == (7));\n}\n",
      "timestamp": 1664292882,
      "stdout": "",
      "stderr": "tmpck6t71y6: /tmp/tmpck6t71y6.cpp:20: int main(): Assertion `candidate((10)) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nlong largest_divisor(long n) {\n    long i, j, max = n;\n    for (i = 2; i <= n / i; i++) {\n        if (n % i == 0) {\n            max = i;\n            break;\n        }\n    }\n    if (max == n)\n        return max;\n    for (j = max; j > 1; j--) {\n        if (n % j == 0)\n            return j;\n    }\n    return max;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) == (7));\n}\n",
      "timestamp": 1664292882,
      "stdout": "",
      "stderr": "tmpoyvw2t1c: /tmp/tmpoyvw2t1c.cpp:24: int main(): Assertion `candidate((3)) == (1)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nlong largest_divisor(long n) {\n    long result = n;\n    while (n % 2 == 0) {\n        result = 2;\n        n /= 2;\n    }\n    while (n % 3 == 0) {\n        result = 3;\n        n /= 3;\n    }\n    while (n % 5 == 0) {\n        result = 5;\n        n /= 5;\n    }\n    while (n % 7 == 0) {\n        result = 7;\n        n /= 7;\n    }\n    while (n % 11 == 0) {\n        result = 11;\n        n /= 11;\n    }\n    while (n % 13 == 0) {\n        result = 13;\n        n /= 13;\n    }\n    while (n % 17 == 0) {\n        result = 17;\n        n /= 17;\n    }\n    while (n % 19 == 0) {\n        result = 19;\n        n /= 19;\n    }\n    while (n % 23 == 0) {\n        result = 23;\n        n /= 23;\n    }\n    while (n % 29 == 0) {\n        result = 29;\n        n /= 29;\n    }\n    while (n % 31 == 0) {\n        result = 31;\n        n /= 31;\n    }\n    while (n % 37 == 0) {\n        result = 37;\n        n /= 37;\n    }\n    while (n % 41 == 0) {\n        result = 41;\n        n /= 41;\n    }\n    while (n % 43 == 0) {\n        result = 43;\n        n /= 43;\n    }\n    while (n % 47 == 0) {\n        result = 47;\n        n /= 47;\n    }\n    while (n % 53 == 0) {\n        result = 53;\n        n /= 53;\n    }\n    while (n % 59 == 0) {\n        result = 59;\n        n /= 59;\n    }\n    while (n % 61 == 0) {\n        result = 61;\n        n /= 61;\n    }\n    while (n % 67 == 0) {\n        result = 67;\n        n\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) == (7));\n}\n",
      "timestamp": 1664292882,
      "stdout": "",
      "stderr": "/tmp/tmp2epyl_cn.cpp: In function \u2018long int largest_divisor(long int)\u2019:\n/tmp/tmp2epyl_cn.cpp:82:10: error: expected \u2018;\u2019 before \u2018}\u2019 token\n   82 |         n\n      |          ^\n      |          ;\n   83 | }\n      | ~         \n/tmp/tmp2epyl_cn.cpp:84:12: error: a function-definition is not allowed here before \u2018{\u2019 token\n   84 | int main() {\n      |            ^\n/tmp/tmp2epyl_cn.cpp:91:1: error: expected \u2018}\u2019 at end of input\n   91 | }\n      | ^\n/tmp/tmp2epyl_cn.cpp:6:30: note: to match this \u2018{\u2019\n    6 | long largest_divisor(long n) {\n      |                              ^\n/tmp/tmp2epyl_cn.cpp:91:1: warning: no return statement in function returning non-void [-Wreturn-type]\n   91 | }\n      | ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nlong largest_divisor(long n) {\n    long i, j, k;\n    for (i = 2; i <= n; i++) {\n        if (n % i == 0) {\n            j = i;\n            while (n % j == 0) {\n                j++;\n            }\n            k = j;\n            while (k <= n) {\n                k *= j;\n            }\n            return k;\n        }\n    }\n    return n;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) == (7));\n}\n",
      "timestamp": 1664292882,
      "stdout": "",
      "stderr": "tmpf9lj9qc3: /tmp/tmpf9lj9qc3.cpp:25: int main(): Assertion `candidate((3)) == (1)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nlong largest_divisor(long n) {\n    long i = 2;\n    while (i <= n) {\n        if (n % i == 0) {\n            return i;\n        }\n        i++;\n    }\n    return i - 1;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) == (7));\n}\n",
      "timestamp": 1664292880,
      "stdout": "",
      "stderr": "tmp07qdij0m: /tmp/tmp07qdij0m.cpp:18: int main(): Assertion `candidate((3)) == (1)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nlong largest_divisor(long n) {\n    long i, j, k;\n    long result = n;\n    for (i = 2; i < n; i++) {\n        if (n % i == 0) {\n            result = i;\n            break;\n        }\n    }\n    if (result == n) {\n        for (i = 2; i < n; i++) {\n            for (j = i + i; j < n; j += i) {\n                if (n % j == 0) {\n                    result = j;\n                    break;\n                }\n            }\n            if (result != n) break;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) == (7));\n}\n",
      "timestamp": 1664292880,
      "stdout": "",
      "stderr": "tmpsb1cdg9q: /tmp/tmpsb1cdg9q.cpp:30: int main(): Assertion `candidate((3)) == (1)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nlong largest_divisor(long n) {\n    long i, j, k;\n    for (i = 1; i < n; i++) {\n        if (n % i == 0) {\n            k = i;\n            while (n % i == 0) {\n                n /= i;\n            }\n            return k;\n        }\n    }\n    return n;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) == (7));\n}\n",
      "timestamp": 1664292897,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nlong largest_divisor(long n) {\n    long i, j;\n    for (i = 1; i <= n; i++) {\n        if (n % i == 0) {\n            j = i;\n            while (n % i == 0) {\n                n /= i;\n            }\n            return j;\n        }\n    }\n    return n;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) == (7));\n}\n",
      "timestamp": 1664292897,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nlong largest_divisor(long n) {\n    long result = n;\n    while (n % 2 == 0) {\n        result = 2 * result;\n        n /= 2;\n    }\n    while (n % 3 == 0) {\n        result = 3 * result;\n        n /= 3;\n    }\n    while (n % 5 == 0) {\n        result = 5 * result;\n        n /= 5;\n    }\n    return result;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) == (7));\n}\n",
      "timestamp": 1664292880,
      "stdout": "",
      "stderr": "tmpiz4ihx5p: /tmp/tmpiz4ihx5p.cpp:24: int main(): Assertion `candidate((3)) == (1)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nlong largest_divisor(long n) {\n    long i, j, k;\n    long result = n;\n    for (i = 2; i <= n / i; i++) {\n        if (n % i == 0) {\n            result = i;\n            break;\n        }\n    }\n    if (result == n) {\n        for (i = n, j = 2; i > 1; i /= j, j++) {\n            if (i % j == 0) {\n                result = j;\n                break;\n            }\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) == (7));\n}\n",
      "timestamp": 1664292882,
      "stdout": "",
      "stderr": "tmpzhe1xuta: /tmp/tmpzhe1xuta.cpp:27: int main(): Assertion `candidate((3)) == (1)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nlong largest_divisor(long n) {\n    long i, j, max = 0;\n    for (i = 1; i <= n; i++) {\n        if (n % i == 0) {\n            j = i;\n            while (n % j == 0) {\n                j++;\n            }\n            if (j > max) {\n                max = j;\n            }\n        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) == (7));\n}\n",
      "timestamp": 1664292882,
      "stdout": "",
      "stderr": "tmpgpescacu: /tmp/tmpgpescacu.cpp:23: int main(): Assertion `candidate((3)) == (1)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nlong largest_divisor(long n) {\n    long result = n;\n    while (result % 2 == 0) {\n        result /= 2;\n    }\n    while (result % 3 == 0) {\n        result /= 3;\n    }\n    while (result % 5 == 0) {\n        result /= 5;\n    }\n    while (result % 7 == 0) {\n        result /= 7;\n    }\n    while (result % 11 == 0) {\n        result /= 11;\n    }\n    while (result % 13 == 0) {\n        result /= 13;\n    }\n    while (result % 17 == 0) {\n        result /= 17;\n    }\n    return result;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) == (7));\n}\n",
      "timestamp": 1664292880,
      "stdout": "",
      "stderr": "tmpzhhawvhw: /tmp/tmpzhhawvhw.cpp:35: int main(): Assertion `candidate((10)) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nlong largest_divisor(long n) {\n    long i = 2;\n    while (i <= n) {\n        if (n % i == 0) {\n            return i;\n        }\n        i++;\n    }\n    return i - 1;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) == (7));\n}\n",
      "timestamp": 1664292880,
      "stdout": "",
      "stderr": "tmp07qdij0m: /tmp/tmp07qdij0m.cpp:18: int main(): Assertion `candidate((3)) == (1)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nlong largest_divisor(long n) {\n    long result = n;\n    while (n % 2 == 0) {\n        n /= 2;\n    }\n    while (n % 3 == 0) {\n        n /= 3;\n    }\n    while (n % 5 == 0) {\n        n /= 5;\n    }\n    while (n % 7 == 0) {\n        n /= 7;\n    }\n    while (n % 11 == 0) {\n        n /= 11;\n    }\n    while (n % 13 == 0) {\n        n /= 13;\n    }\n    while (n % 17 == 0) {\n        n /= 17;\n    }\n    while (n % 19 == 0) {\n        n /= 19;\n    }\n    while (n % 23 == 0) {\n        n /= 23;\n    }\n    while (n % 29 == 0) {\n        n /= 29;\n    }\n    while (n % 31 == 0) {\n        n /= 31;\n    }\n    while (n % 37 == 0) {\n        n /= 37;\n    }\n    while (n % 41 == 0) {\n        n /= 41;\n    }\n    while (n % 43 == 0) {\n        n /= 43;\n    }\n    while (n % 47 == 0) {\n        n /= 47;\n    }\n    while (n % 53 == 0) {\n        n /= 53;\n    }\n    while (n % 59 == 0) {\n        n /= 59;\n    }\n    while (n % 61 == 0) {\n        n /= 61;\n    }\n    while (n % 67 == 0) {\n        n /= 67;\n    }\n    while (n % 71 == 0) {\n        n /= 71;\n    }\n    while (n % 73 == 0) {\n        n /= 73;\n    }\n    while (n % 79 == 0) {\n        n /= 79;\n    }\n    while (n % 83 == 0) {\n        n /= 83;\n    }\n    while (n % 89 == 0) {\n        n /= 89;\n    }\n    \n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) == (7));\n}\n",
      "timestamp": 1664292884,
      "stdout": "",
      "stderr": "tmpb8g3jtsk: /tmp/tmpb8g3jtsk.cpp:84: int main(): Assertion `candidate((3)) == (1)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nlong largest_divisor(long n) {\n    long result = n;\n    while (result % 2 == 0) {\n        result /= 2;\n    }\n    while (result % 3 == 0) {\n        result /= 3;\n    }\n    while (result % 5 == 0) {\n        result /= 5;\n    }\n    while (result % 7 == 0) {\n        result /= 7;\n    }\n    while (result % 11 == 0) {\n        result /= 11;\n    }\n    while (result % 13 == 0) {\n        result /= 13;\n    }\n    while (result % 17 == 0) {\n        result /= 17;\n    }\n    return result;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) == (7));\n}\n",
      "timestamp": 1664292880,
      "stdout": "",
      "stderr": "tmpzhhawvhw: /tmp/tmpzhhawvhw.cpp:35: int main(): Assertion `candidate((10)) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nlong largest_divisor(long n) {\n    long i, j, k;\n    long m = n;\n    for (i = 2; i <= n; i++) {\n        if (n % i == 0) {\n            m = i;\n            break;\n        }\n    }\n    if (m == n) {\n        return n;\n    }\n    for (j = 2; j <= m; j++) {\n        if (m % j == 0) {\n            k = j;\n            break;\n        }\n    }\n    return k;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) == (7));\n}\n",
      "timestamp": 1664292884,
      "stdout": "",
      "stderr": "tmpq8_viv4t: /tmp/tmpq8_viv4t.cpp:28: int main(): Assertion `candidate((3)) == (1)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nlong largest_divisor(long n) {\n    long i, j;\n    for (i = 1; i < n; i++) {\n        if (n % i == 0) {\n            j = i;\n            while (n % j == 0) {\n                j++;\n            }\n            return j;\n        }\n    }\n    return n;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) == (7));\n}\n",
      "timestamp": 1664292884,
      "stdout": "",
      "stderr": "tmpy_s5dn7u: /tmp/tmpy_s5dn7u.cpp:21: int main(): Assertion `candidate((3)) == (1)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nlong largest_divisor(long n) {\n    long i, j, k;\n    long m = n;\n    for (i = 2; i <= m / i; i++) {\n        if (m % i == 0) {\n            k = i;\n            while (m % k == 0) {\n                k++;\n            }\n            if (k > j) {\n                j = k;\n            }\n        }\n    }\n    return j;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) == (7));\n}\n",
      "timestamp": 1664292884,
      "stdout": "",
      "stderr": "tmpxxfhxped: /tmp/tmpxxfhxped.cpp:24: int main(): Assertion `candidate((3)) == (1)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nlong largest_divisor(long n) {\n    long i = 2;\n    while (i <= n / 2) {\n        if (n % i == 0) {\n            return i;\n        }\n        i++;\n    }\n    return i - 1;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) == (7));\n}\n",
      "timestamp": 1664292880,
      "stdout": "",
      "stderr": "tmpt3ugan4k: /tmp/tmpt3ugan4k.cpp:19: int main(): Assertion `candidate((7)) == (1)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nlong largest_divisor(long n) {\n    long i = 1;\n    while (i*i <= n) {\n        if (n % i == 0) {\n            return i;\n        }\n        i++;\n    }\n    return i-1;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) == (7));\n}\n",
      "timestamp": 1664292882,
      "stdout": "",
      "stderr": "tmpck6t71y6: /tmp/tmpck6t71y6.cpp:20: int main(): Assertion `candidate((10)) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nlong largest_divisor(long n) {\n    long i = 2;\n    while (i <= n / i) {\n        if (n % i == 0) {\n            return i;\n        }\n        i++;\n    }\n    return i - 1;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) == (7));\n}\n",
      "timestamp": 1664292882,
      "stdout": "",
      "stderr": "tmp08x84ztf: /tmp/tmp08x84ztf.cpp:19: int main(): Assertion `candidate((7)) == (1)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nlong largest_divisor(long n) {\n    long i, j;\n    for (i = 2; i < n; i++) {\n        if (n % i == 0) {\n            j = i;\n            while (n % j == 0) {\n                j++;\n            }\n            return j;\n        }\n    }\n    return n;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) == (7));\n}\n",
      "timestamp": 1664292884,
      "stdout": "",
      "stderr": "tmpjj_k57e6: /tmp/tmpjj_k57e6.cpp:21: int main(): Assertion `candidate((3)) == (1)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nlong largest_divisor(long n) {\n    long result = n;\n    while (result % 2 == 0) {\n        result /= 2;\n    }\n    while (result % 3 == 0) {\n        result /= 3;\n    }\n    while (result % 5 == 0) {\n        result /= 5;\n    }\n    while (result % 7 == 0) {\n        result /= 7;\n    }\n    while (result % 11 == 0) {\n        result /= 11;\n    }\n    while (result % 13 == 0) {\n        result /= 13;\n    }\n    while (result % 17 == 0) {\n        result /= 17;\n    }\n    return result;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) == (7));\n}\n",
      "timestamp": 1664292880,
      "stdout": "",
      "stderr": "tmpzhhawvhw: /tmp/tmpzhhawvhw.cpp:35: int main(): Assertion `candidate((10)) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nlong largest_divisor(long n) {\n    long i, j, k;\n    for (i = 2; i < n; i++) {\n        if (n % i == 0) {\n            k = i;\n            while (n % i == 0) {\n                n /= i;\n            }\n            return k;\n        }\n    }\n    return n;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) == (7));\n}\n",
      "timestamp": 1664292880,
      "stdout": "",
      "stderr": "tmp3eybsimw: /tmp/tmp3eybsimw.cpp:21: int main(): Assertion `candidate((3)) == (1)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nlong largest_divisor(long n) {\n    long i, j, max_i = 0;\n    for (i = 1; i < n; i++) {\n        if (n % i == 0) {\n            j = i;\n            while (n % j == 0) {\n                j++;\n            }\n            if (j > max_i) {\n                max_i = j;\n            }\n        }\n    }\n    return max_i;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) == (7));\n}\n",
      "timestamp": 1664292884,
      "stdout": "",
      "stderr": "tmpp_s634yx: /tmp/tmpp_s634yx.cpp:23: int main(): Assertion `candidate((3)) == (1)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nlong largest_divisor(long n) {\n    long result = n;\n    while (result % 2 == 0) {\n        result /= 2;\n    }\n    while (result % 3 == 0) {\n        result /= 3;\n    }\n    while (result % 5 == 0) {\n        result /= 5;\n    }\n    while (result % 7 == 0) {\n        result /= 7;\n    }\n    while (result % 11 == 0) {\n        result /= 11;\n    }\n    while (result % 13 == 0) {\n        result /= 13;\n    }\n    while (result % 17 == 0) {\n        result /= 17;\n    }\n    return result;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) == (7));\n}\n",
      "timestamp": 1664292880,
      "stdout": "",
      "stderr": "tmpzhhawvhw: /tmp/tmpzhhawvhw.cpp:35: int main(): Assertion `candidate((10)) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nlong largest_divisor(long n) {\n    long i = 2;\n    while (i <= n) {\n        if (n % i == 0) {\n            return i;\n        }\n        i++;\n    }\n    return i - 1;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) == (7));\n}\n",
      "timestamp": 1664292880,
      "stdout": "",
      "stderr": "tmp07qdij0m: /tmp/tmp07qdij0m.cpp:18: int main(): Assertion `candidate((3)) == (1)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nlong largest_divisor(long n) {\n    long i, j;\n    long max = n;\n    for (i = 2; i <= n; i++) {\n        if (n % i == 0) {\n            max = i;\n            for (j = i + i; j <= n; j += i) {\n                if (n % j == 0) {\n                    max = j;\n                    break;\n                }\n            }\n        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) == (7));\n}\n",
      "timestamp": 1664292884,
      "stdout": "",
      "stderr": "tmpxds7jqtp: /tmp/tmpxds7jqtp.cpp:24: int main(): Assertion `candidate((3)) == (1)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nlong largest_divisor(long n) {\n    long i, j;\n    for (i = 1; i <= n; i++) {\n        if (n % i == 0) {\n            j = i;\n            while (n % j == 0) {\n                j++;\n            }\n            return j;\n        }\n    }\n    return n;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) == (7));\n}\n",
      "timestamp": 1664292884,
      "stdout": "",
      "stderr": "tmpx4729bet: /tmp/tmpx4729bet.cpp:21: int main(): Assertion `candidate((3)) == (1)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nlong largest_divisor(long n) {\n    long i = 1;\n    while (i*i <= n) {\n        if (n % i == 0) {\n            return i;\n        }\n        i++;\n    }\n    return i-1;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) == (7));\n}\n",
      "timestamp": 1664292882,
      "stdout": "",
      "stderr": "tmpck6t71y6: /tmp/tmpck6t71y6.cpp:20: int main(): Assertion `candidate((10)) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nlong largest_divisor(long n) {\n    long i, j, k;\n    for (i = 2; i <= n; i++) {\n        if (n % i == 0) {\n            j = i;\n            while (n % j == 0) {\n                j++;\n            }\n            k = j;\n            while (k <= n / j) {\n                k *= j;\n            }\n            if (k < n) {\n                return k;\n            }\n        }\n    }\n    return n;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) == (7));\n}\n",
      "timestamp": 1664292884,
      "stdout": "",
      "stderr": "tmppslm_3kc: /tmp/tmppslm_3kc.cpp:27: int main(): Assertion `candidate((3)) == (1)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nlong largest_divisor(long n) {\n    long i = 2;\n    while (i*i <= n) {\n        if (n % i == 0) {\n            return i;\n        }\n        i++;\n    }\n    return i-1;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) == (7));\n}\n",
      "timestamp": 1664292880,
      "stdout": "",
      "stderr": "tmpbksn_uux: /tmp/tmpbksn_uux.cpp:19: int main(): Assertion `candidate((7)) == (1)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nlong largest_divisor(long n) {\n    long i, j, k;\n    long result = n;\n    for (i = 2; i <= n / i; i++) {\n        if (n % i == 0) {\n            result = i;\n            break;\n        }\n    }\n    if (result == n) {\n        for (i = 2; i <= n / i; i++) {\n            if (n % i == 0) {\n                result = i;\n                break;\n            }\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) == (7));\n}\n",
      "timestamp": 1664292880,
      "stdout": "",
      "stderr": "tmpixb0xaa4: /tmp/tmpixb0xaa4.cpp:27: int main(): Assertion `candidate((3)) == (1)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nlong largest_divisor(long n) {\n    long result = n;\n    while(result % 2 == 0) {\n        result /= 2;\n    }\n    while(result % 3 == 0) {\n        result /= 3;\n    }\n    while(result % 5 == 0) {\n        result /= 5;\n    }\n    while(result % 7 == 0) {\n        result /= 7;\n    }\n    while(result % 11 == 0) {\n        result /= 11;\n    }\n    while(result % 13 == 0) {\n        result /= 13;\n    }\n    while(result % 17 == 0) {\n        result /= 17;\n    }\n    return result;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) == (7));\n}\n",
      "timestamp": 1664292884,
      "stdout": "",
      "stderr": "tmp2mztfjht: /tmp/tmp2mztfjht.cpp:35: int main(): Assertion `candidate((10)) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nlong largest_divisor(long n) {\n    long i, j, k;\n    long m = n;\n    for (i = 2; i <= m; i++) {\n        if (m % i == 0) {\n            k = i;\n            while (m % i == 0) {\n                m /= i;\n            }\n        }\n    }\n    if (m != 1) {\n        return m;\n    }\n    for (i = 2; i <= n; i++) {\n        if (n % i == 0) {\n            k = i;\n            while (n % i == 0) {\n                n /= i;\n            }\n        }\n    }\n    if (n != 1) {\n        return n;\n    }\n    return k;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) == (7));\n}\n",
      "timestamp": 1664292884,
      "stdout": "",
      "stderr": "tmp8tk6pn74: /tmp/tmp8tk6pn74.cpp:35: int main(): Assertion `candidate((3)) == (1)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nlong largest_divisor(long n) {\n    long i, j, k;\n    long max = n;\n    for (i = 2; i <= n; i++) {\n        if (n % i == 0) {\n            max = i;\n            for (j = i; j <= n; j += i) {\n                k = n / j;\n                if (k % i != 0) break;\n            }\n            if (j > max) max = j;\n        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) == (7));\n}\n",
      "timestamp": 1664292884,
      "stdout": "",
      "stderr": "tmptfdflhl1: /tmp/tmptfdflhl1.cpp:23: int main(): Assertion `candidate((3)) == (1)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nlong largest_divisor(long n) {\n    long i, j, k;\n    for (i = 2; i <= n; i++) {\n        if (n % i == 0) {\n            j = i;\n            while (n % j == 0) {\n                j++;\n            }\n            k = j;\n            while (k <= n / j) {\n                k *= j;\n            }\n            if (k < n) {\n                return k;\n            }\n        }\n    }\n    return n;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) == (7));\n}\n",
      "timestamp": 1664292884,
      "stdout": "",
      "stderr": "tmppslm_3kc: /tmp/tmppslm_3kc.cpp:27: int main(): Assertion `candidate((3)) == (1)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nlong largest_divisor(long n) {\n    long i = 2;\n    while (i*i <= n) {\n        if (n % i == 0) {\n            return i;\n        }\n        i++;\n    }\n    return i-1;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) == (7));\n}\n",
      "timestamp": 1664292880,
      "stdout": "",
      "stderr": "tmpbksn_uux: /tmp/tmpbksn_uux.cpp:19: int main(): Assertion `candidate((7)) == (1)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nlong largest_divisor(long n) {\n    long i, j, k;\n    for (i = 2; i < n; i++) {\n        if (n % i == 0) {\n            k = i;\n            while (n % i == 0) {\n                n /= i;\n            }\n        }\n    }\n    if (n > 1) {\n        k = n;\n    }\n    return k;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) == (7));\n}\n",
      "timestamp": 1664292882,
      "stdout": "",
      "stderr": "tmpfad5mt2t: /tmp/tmpfad5mt2t.cpp:23: int main(): Assertion `candidate((3)) == (1)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nlong largest_divisor(long n) {\n    long i, j, k;\n    for (i = 2; i < n; i++) {\n        if (n % i == 0) {\n            k = i;\n            while (n % i == 0) {\n                n /= i;\n            }\n            return k;\n        }\n    }\n    return n;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) == (7));\n}\n",
      "timestamp": 1664292880,
      "stdout": "",
      "stderr": "tmp3eybsimw: /tmp/tmp3eybsimw.cpp:21: int main(): Assertion `candidate((3)) == (1)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nlong largest_divisor(long n) {\n    long i = 2;\n    while (i <= n) {\n        if (n % i == 0) {\n            return i;\n        }\n        i++;\n    }\n    return i - 1;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) == (7));\n}\n",
      "timestamp": 1664292880,
      "stdout": "",
      "stderr": "tmp07qdij0m: /tmp/tmp07qdij0m.cpp:18: int main(): Assertion `candidate((3)) == (1)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nlong largest_divisor(long n) {\n    long i, j, k;\n    for (i = 2; i < n; i++) {\n        if (n % i == 0) {\n            j = i;\n            while (n % j == 0) {\n                j++;\n            }\n            k = j;\n            while (k > 1 && n % k == 0) {\n                k--;\n            }\n            if (k == 1) {\n                return i;\n            }\n        }\n    }\n    return n;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) == (7));\n}\n",
      "timestamp": 1664292882,
      "stdout": "",
      "stderr": "tmp7g0v22md: /tmp/tmp7g0v22md.cpp:27: int main(): Assertion `candidate((3)) == (1)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nlong largest_divisor(long n) {\n    long i, j;\n    for (i = 2; i <= n; i++) {\n        if (n % i == 0) {\n            j = i;\n            while (n % j == 0) {\n                j++;\n            }\n            return j;\n        }\n    }\n    return n;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) == (7));\n}\n",
      "timestamp": 1664292882,
      "stdout": "",
      "stderr": "tmpfn0xlean: /tmp/tmpfn0xlean.cpp:21: int main(): Assertion `candidate((3)) == (1)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nlong largest_divisor(long n) {\n    long i, j, k;\n    for (i = 2; i < n; i++) {\n        if (n % i == 0) {\n            j = i;\n            while (n % j == 0) {\n                j++;\n            }\n            k = j;\n            while (k > 1 && n % k == 0) {\n                k--;\n            }\n            if (k == 1) {\n                return i;\n            }\n        }\n    }\n    return n;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) == (7));\n}\n",
      "timestamp": 1664292882,
      "stdout": "",
      "stderr": "tmp7g0v22md: /tmp/tmp7g0v22md.cpp:27: int main(): Assertion `candidate((3)) == (1)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nlong largest_divisor(long n) {\n    long i, j, k;\n    for (i = 2; i <= n; i++) {\n        if (n % i == 0) {\n            k = i;\n            while (n % i == 0) {\n                n /= i;\n            }\n            return k;\n        }\n    }\n    return n;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) == (7));\n}\n",
      "timestamp": 1664292884,
      "stdout": "",
      "stderr": "tmple0dqne3: /tmp/tmple0dqne3.cpp:21: int main(): Assertion `candidate((3)) == (1)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nlong largest_divisor(long n) {\n    long i = 2;\n    while (i <= n) {\n        if (n % i == 0) {\n            return i;\n        }\n        i++;\n    }\n    return n;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) == (7));\n}\n",
      "timestamp": 1664292884,
      "stdout": "",
      "stderr": "tmp_oxpfm5q: /tmp/tmp_oxpfm5q.cpp:18: int main(): Assertion `candidate((3)) == (1)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nlong largest_divisor(long n) {\n    long i = 2;\n    while (i <= n / i) {\n        if (n % i == 0) {\n            return i;\n        }\n        i++;\n    }\n    return i - 1;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) == (7));\n}\n",
      "timestamp": 1664292882,
      "stdout": "",
      "stderr": "tmp08x84ztf: /tmp/tmp08x84ztf.cpp:19: int main(): Assertion `candidate((7)) == (1)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nlong largest_divisor(long n) {\n    long result = n;\n    while(result % 2 == 0) {\n        result /= 2;\n    }\n    while(result % 3 == 0) {\n        result /= 3;\n    }\n    while(result % 5 == 0) {\n        result /= 5;\n    }\n    while(result % 7 == 0) {\n        result /= 7;\n    }\n    while(result % 11 == 0) {\n        result /= 11;\n    }\n    while(result % 13 == 0) {\n        result /= 13;\n    }\n    while(result % 17 == 0) {\n        result /= 17;\n    }\n    return result;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) == (7));\n}\n",
      "timestamp": 1664292884,
      "stdout": "",
      "stderr": "tmp2mztfjht: /tmp/tmp2mztfjht.cpp:35: int main(): Assertion `candidate((10)) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nlong largest_divisor(long n) {\n    long result = n;\n    while (result % 2 == 0) {\n        result /= 2;\n    }\n    while (result % 3 == 0) {\n        result /= 3;\n    }\n    while (result % 5 == 0) {\n        result /= 5;\n    }\n    while (result % 7 == 0) {\n        result /= 7;\n    }\n    while (result % 11 == 0) {\n        result /= 11;\n    }\n    while (result % 13 == 0) {\n        result /= 13;\n    }\n    while (result % 17 == 0) {\n        result /= 17;\n    }\n    return result;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) == (7));\n}\n",
      "timestamp": 1664292880,
      "stdout": "",
      "stderr": "tmpzhhawvhw: /tmp/tmpzhhawvhw.cpp:35: int main(): Assertion `candidate((10)) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nlong largest_divisor(long n) {\n    long i, j, k;\n    for (i = 2; i < n; i++) {\n        if (n % i == 0) {\n            k = i;\n            while (n % i == 0) {\n                n /= i;\n            }\n        }\n    }\n    if (n > 1) {\n        k = n;\n    }\n    return k;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) == (7));\n}\n",
      "timestamp": 1664292882,
      "stdout": "",
      "stderr": "tmpfad5mt2t: /tmp/tmpfad5mt2t.cpp:23: int main(): Assertion `candidate((3)) == (1)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nlong largest_divisor(long n) {\n    long i, j, k;\n    for (i = 2; i < n; i++) {\n        if (n % i == 0) {\n            k = i;\n            while (n % i == 0) {\n                n /= i;\n            }\n            return k;\n        }\n    }\n    return n;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) == (7));\n}\n",
      "timestamp": 1664292880,
      "stdout": "",
      "stderr": "tmp3eybsimw: /tmp/tmp3eybsimw.cpp:21: int main(): Assertion `candidate((3)) == (1)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nlong largest_divisor(long n) {\n    long i, j, k;\n    long m = n;\n    for (i = 2; i < m; i++) {\n        if (m % i == 0) {\n            m /= i;\n            k = i;\n            while (m % i == 0) {\n                m /= i;\n                k *= i;\n            }\n            j = k;\n            while (j <= n) {\n                if (j == n) {\n                    return j;\n                }\n                j *= k;\n            }\n        }\n    }\n    return n;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) == (7));\n}\n",
      "timestamp": 1664292884,
      "stdout": "",
      "stderr": "tmpl2rhdsyv: /tmp/tmpl2rhdsyv.cpp:30: int main(): Assertion `candidate((3)) == (1)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nlong largest_divisor(long n) {\n    long i, j;\n    for (i = 1; i <= n; i++) {\n        if (n % i == 0) {\n            j = i;\n            while (n % j == 0) {\n                j++;\n            }\n            if (j > i) {\n                i = j;\n            }\n        }\n    }\n    return i;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) == (7));\n}\n",
      "timestamp": 1664292884,
      "stdout": "",
      "stderr": "tmpvyd2g8hy: /tmp/tmpvyd2g8hy.cpp:23: int main(): Assertion `candidate((3)) == (1)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nlong largest_divisor(long n) {\n    long i = 1;\n    while (i*i <= n) {\n        if (n % i == 0) {\n            return i;\n        }\n        i++;\n    }\n    return i;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) == (7));\n}\n",
      "timestamp": 1664292880,
      "stdout": "",
      "stderr": "tmpvkc06oz8: /tmp/tmpvkc06oz8.cpp:20: int main(): Assertion `candidate((10)) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nlong largest_divisor(long n) {\n    long i, j, k;\n    for (i = 2; i <= n; i++) {\n        if (n % i == 0) {\n            j = i;\n            while (n % j == 0) {\n                j++;\n            }\n            k = j;\n            while (k <= n) {\n                k *= j;\n            }\n            if (k > n) {\n                return i;\n            }\n        }\n    }\n    return n;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) == (7));\n}\n",
      "timestamp": 1664292884,
      "stdout": "",
      "stderr": "tmpwutrbxir: /tmp/tmpwutrbxir.cpp:27: int main(): Assertion `candidate((3)) == (1)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nlong largest_divisor(long n) {\n    long i = 2;\n    while (i <= n / 2) {\n        if (n % i == 0) {\n            return i;\n        }\n        i++;\n    }\n    return n;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) == (7));\n}\n",
      "timestamp": 1664292882,
      "stdout": "",
      "stderr": "tmpdstlcd57: /tmp/tmpdstlcd57.cpp:18: int main(): Assertion `candidate((3)) == (1)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nlong largest_divisor(long n) {\n    long i = 2;\n    while (i < n) {\n        if (n % i == 0) {\n            return i;\n        }\n        i++;\n    }\n    return i;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) == (7));\n}\n",
      "timestamp": 1664292882,
      "stdout": "",
      "stderr": "tmpt3xa17n5: /tmp/tmpt3xa17n5.cpp:18: int main(): Assertion `candidate((3)) == (1)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nlong largest_divisor(long n) {\n    long result = n;\n    while (n % 2 == 0) {\n        n /= 2;\n    }\n    while (n % 3 == 0) {\n        n /= 3;\n    }\n    while (n % 5 == 0) {\n        n /= 5;\n    }\n    while (n % 7 == 0) {\n        n /= 7;\n    }\n    while (n % 11 == 0) {\n        n /= 11;\n    }\n    while (n % 13 == 0) {\n        n /= 13;\n    }\n    while (n % 17 == 0) {\n        n /= 17;\n    }\n    while (n % 19 == 0) {\n        n /= 19;\n    }\n    while (n % 23 == 0) {\n        n /= 23;\n    }\n    while (n % 29 == 0) {\n        n /= 29;\n    }\n    while (n % 31 == 0) {\n        n /= 31;\n    }\n    while (n % 37 == 0) {\n        n /= 37;\n    }\n    while (n % 41 == 0) {\n        n /= 41;\n    }\n    while (n % 43 == 0) {\n        n /= 43;\n    }\n    while (n % 47 == 0) {\n        n /= 47;\n    }\n    while (n % 53 == 0) {\n        n /= 53;\n    }\n    while (n % 59 == 0) {\n        n /= 59;\n    }\n    while (n % 61 == 0) {\n        n /= 61;\n    }\n    while (n % 67 == 0) {\n        n /= 67;\n    }\n    while (n % 71 == 0) {\n        n /= 71;\n    }\n    while (n % 73 == 0) {\n        n /= 73;\n    }\n    while (n % 79 == 0) {\n        n /= 79;\n    }\n    while (n % 83 == 0) {\n        n /= 83;\n    }\n    while (n % 89 == 0) {\n        n /= 89;\n    }\n    \n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) == (7));\n}\n",
      "timestamp": 1664292884,
      "stdout": "",
      "stderr": "tmpb8g3jtsk: /tmp/tmpb8g3jtsk.cpp:84: int main(): Assertion `candidate((3)) == (1)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nlong largest_divisor(long n) {\n    long result = n;\n    while (result % 2 == 0) {\n        result /= 2;\n    }\n    while (result % 3 == 0) {\n        result /= 3;\n    }\n    while (result % 5 == 0) {\n        result /= 5;\n    }\n    while (result % 7 == 0) {\n        result /= 7;\n    }\n    while (result % 11 == 0) {\n        result /= 11;\n    }\n    while (result % 13 == 0) {\n        result /= 13;\n    }\n    while (result % 17 == 0) {\n        result /= 17;\n    }\n    return result;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) == (7));\n}\n",
      "timestamp": 1664292880,
      "stdout": "",
      "stderr": "tmpzhhawvhw: /tmp/tmpzhhawvhw.cpp:35: int main(): Assertion `candidate((10)) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nlong largest_divisor(long n) {\n    long i = 2;\n    while (i <= n / i) {\n        if (n % i == 0) {\n            return i;\n        }\n        i++;\n    }\n    return n;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) == (7));\n}\n",
      "timestamp": 1664292884,
      "stdout": "",
      "stderr": "tmp1v9j_9qw: /tmp/tmp1v9j_9qw.cpp:18: int main(): Assertion `candidate((3)) == (1)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nlong largest_divisor(long n) {\n    long result = n;\n    while (result % 2 == 0) {\n        result /= 2;\n    }\n    while (result % 3 == 0) {\n        result /= 3;\n    }\n    while (result % 5 == 0) {\n        result /= 5;\n    }\n    while (result % 7 == 0) {\n        result /= 7;\n    }\n    while (result % 11 == 0) {\n        result /= 11;\n    }\n    while (result % 13 == 0) {\n        result /= 13;\n    }\n    while (result % 17 == 0) {\n        result /= 17;\n    }\n    return result;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) == (7));\n}\n",
      "timestamp": 1664292880,
      "stdout": "",
      "stderr": "tmpzhhawvhw: /tmp/tmpzhhawvhw.cpp:35: int main(): Assertion `candidate((10)) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nlong largest_divisor(long n) {\n    long i = 2;\n    while (i <= n / i) {\n        if (n % i == 0) {\n            return i;\n        }\n        i++;\n    }\n    return i - 1;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) == (7));\n}\n",
      "timestamp": 1664292882,
      "stdout": "",
      "stderr": "tmp08x84ztf: /tmp/tmp08x84ztf.cpp:19: int main(): Assertion `candidate((7)) == (1)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nlong largest_divisor(long n) {\n    long i, j, k;\n    for (i = 2; i < n; i++) {\n        if (n % i == 0) {\n            j = i;\n            while (n % j == 0) {\n                j++;\n            }\n            k = j;\n            while (k <= n / j) {\n                k *= j;\n            }\n            if (k < n) {\n                return k;\n            }\n        }\n    }\n    return n;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) == (7));\n}\n",
      "timestamp": 1664292884,
      "stdout": "",
      "stderr": "tmp1w7_420d: /tmp/tmp1w7_420d.cpp:27: int main(): Assertion `candidate((3)) == (1)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nlong largest_divisor(long n) {\n    long i, j, k, m;\n    for (i = 2; i < n; i++) {\n        if (n % i == 0) {\n            m = i;\n            for (j = i + i; j < n; j += i) {\n                if (n % j == 0) {\n                    m = j;\n                }\n            }\n            if (m < n) {\n                return m;\n            }\n        }\n    }\n    return n;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) == (7));\n}\n",
      "timestamp": 1664292884,
      "stdout": "",
      "stderr": "tmpp40ndkjp: /tmp/tmpp40ndkjp.cpp:25: int main(): Assertion `candidate((3)) == (1)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nlong largest_divisor(long n) {\n    long i = 2;\n    while (i <= n/i) {\n        if (n % i == 0) {\n            return i;\n        }\n        i++;\n    }\n    return i;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) == (7));\n}\n",
      "timestamp": 1664292884,
      "stdout": "",
      "stderr": "tmpf9wf7taz: /tmp/tmpf9wf7taz.cpp:18: int main(): Assertion `candidate((3)) == (1)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nlong largest_divisor(long n) {\n    long result = n;\n    while (result % 2 == 0) {\n        result /= 2;\n    }\n    while (result % 3 == 0) {\n        result /= 3;\n    }\n    while (result % 5 == 0) {\n        result /= 5;\n    }\n    while (result % 7 == 0) {\n        result /= 7;\n    }\n    while (result % 11 == 0) {\n        result /= 11;\n    }\n    while (result % 13 == 0) {\n        result /= 13;\n    }\n    while (result % 17 == 0) {\n        result /= 17;\n    }\n    return result;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) == (7));\n}\n",
      "timestamp": 1664292880,
      "stdout": "",
      "stderr": "tmpzhhawvhw: /tmp/tmpzhhawvhw.cpp:35: int main(): Assertion `candidate((10)) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nlong largest_divisor(long n) {\n    long i = 2;\n    while(i*i <= n) {\n        if(n%i == 0) {\n            return i;\n        }\n        i++;\n    }\n    return i-1;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) == (7));\n}\n",
      "timestamp": 1664292886,
      "stdout": "",
      "stderr": "tmpj8l2yzcj: /tmp/tmpj8l2yzcj.cpp:19: int main(): Assertion `candidate((7)) == (1)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nlong largest_divisor(long n) {\n    long result = n;\n    while (n % 2 == 0) {\n        n /= 2;\n    }\n    while (n % 3 == 0) {\n        n /= 3;\n    }\n    while (n % 5 == 0) {\n        n /= 5;\n    }\n    while (n % 7 == 0) {\n        n /= 7;\n    }\n    while (n % 11 == 0) {\n        n /= 11;\n    }\n    while (n % 13 == 0) {\n        n /= 13;\n    }\n    while (n % 17 == 0) {\n        n /= 17;\n    }\n    while (n % 19 == 0) {\n        n /= 19;\n    }\n    while (n % 23 == 0) {\n        n /= 23;\n    }\n    while (n % 29 == 0) {\n        n /= 29;\n    }\n    while (n % 31 == 0) {\n        n /= 31;\n    }\n    while (n % 37 == 0) {\n        n /= 37;\n    }\n    while (n % 41 == 0) {\n        n /= 41;\n    }\n    while (n % 43 == 0) {\n        n /= 43;\n    }\n    while (n % 47 == 0) {\n        n /= 47;\n    }\n    while (n % 53 == 0) {\n        n /= 53;\n    }\n    while (n % 59 == 0) {\n        n /= 59;\n    }\n    while (n % 61 == 0) {\n        n /= 61;\n    }\n    while (n % 67 == 0) {\n        n /= 67;\n    }\n    while (n % 71 == 0) {\n        n /= 71;\n    }\n    while (n % 73 == 0) {\n        n /= 73;\n    }\n    while (n % 79 == 0) {\n        n /= 79;\n    }\n    while (n % 83 == 0) {\n        n /= 83;\n    }\n    while (n % 89 == 0) {\n        n /= 89;\n    }\n    \n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) == (7));\n}\n",
      "timestamp": 1664292884,
      "stdout": "",
      "stderr": "tmpb8g3jtsk: /tmp/tmpb8g3jtsk.cpp:84: int main(): Assertion `candidate((3)) == (1)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nlong largest_divisor(long n) {\n    long i, j, k, m;\n    for (i = 2; i < n; i++) {\n        if (n % i == 0) {\n            m = i;\n            while (n % i == 0) {\n                n /= i;\n            }\n        }\n    }\n    if (n > 1) {\n        m = n;\n    }\n    return m;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) == (7));\n}\n",
      "timestamp": 1664292886,
      "stdout": "",
      "stderr": "tmp_6kvyn5q: /tmp/tmp_6kvyn5q.cpp:23: int main(): Assertion `candidate((3)) == (1)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nlong largest_divisor(long n) {\n    long i = 2;\n    while (i <= n) {\n        if (n % i == 0) {\n            return i;\n        }\n        i++;\n    }\n    return i - 1;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) == (7));\n}\n",
      "timestamp": 1664292880,
      "stdout": "",
      "stderr": "tmp07qdij0m: /tmp/tmp07qdij0m.cpp:18: int main(): Assertion `candidate((3)) == (1)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nlong largest_divisor(long n) {\n    long i, j, k;\n    for (i = 2; i < n; i++) {\n        if (n % i == 0) {\n            k = i;\n            while (n % i == 0) {\n                n /= i;\n            }\n            return k;\n        }\n    }\n    return n;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) == (7));\n}\n",
      "timestamp": 1664292880,
      "stdout": "",
      "stderr": "tmp3eybsimw: /tmp/tmp3eybsimw.cpp:21: int main(): Assertion `candidate((3)) == (1)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nlong largest_divisor(long n) {\n    long result = n;\n    while (n % 2 == 0) {\n        n /= 2;\n    }\n    while (n % 3 == 0) {\n        n /= 3;\n    }\n    while (n % 5 == 0) {\n        n /= 5;\n    }\n    while (n % 7 == 0) {\n        n /= 7;\n    }\n    while (n % 11 == 0) {\n        n /= 11;\n    }\n    while (n % 13 == 0) {\n        n /= 13;\n    }\n    while (n % 17 == 0) {\n        n /= 17;\n    }\n    while (n % 19 == 0) {\n        n /= 19;\n    }\n    while (n % 23 == 0) {\n        n /= 23;\n    }\n    while (n % 29 == 0) {\n        n /= 29;\n    }\n    while (n % 31 == 0) {\n        n /= 31;\n    }\n    while (n % 37 == 0) {\n        n /= 37;\n    }\n    while (n % 41 == 0) {\n        n /= 41;\n    }\n    while (n % 43 == 0) {\n        n /= 43;\n    }\n    while (n % 47 == 0) {\n        n /= 47;\n    }\n    while (n % 53 == 0) {\n        n /= 53;\n    }\n    while (n % 59 == 0) {\n        n /= 59;\n    }\n    while (n % 61 == 0) {\n        n /= 61;\n    }\n    while (n % 67 == 0) {\n        n /= 67;\n    }\n    while (n % 71 == 0) {\n        n /= 71;\n    }\n    while (n % 73 == 0) {\n        n /= 73;\n    }\n    while (n % 79 == 0) {\n        n /= 79;\n    }\n    while (n % 83 == 0) {\n        n /= 83;\n    }\n    while (n % 89 == 0) {\n        n /= 89;\n    }\n    \n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) == (7));\n}\n",
      "timestamp": 1664292884,
      "stdout": "",
      "stderr": "tmpb8g3jtsk: /tmp/tmpb8g3jtsk.cpp:84: int main(): Assertion `candidate((3)) == (1)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nlong largest_divisor(long n) {\n    long i, j;\n    for (i = 1; i < n; i++) {\n        if (n % i == 0) {\n            j = i;\n            while (n % j == 0) {\n                j++;\n            }\n            return j;\n        }\n    }\n    return n;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) == (7));\n}\n",
      "timestamp": 1664292884,
      "stdout": "",
      "stderr": "tmpy_s5dn7u: /tmp/tmpy_s5dn7u.cpp:21: int main(): Assertion `candidate((3)) == (1)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nlong largest_divisor(long n) {\n    long i = 1;\n    while (i*i <= n) {\n        if (n % i == 0) {\n            return i;\n        }\n        i++;\n    }\n    return i-1;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) == (7));\n}\n",
      "timestamp": 1664292882,
      "stdout": "",
      "stderr": "tmpck6t71y6: /tmp/tmpck6t71y6.cpp:20: int main(): Assertion `candidate((10)) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nlong largest_divisor(long n) {\n    long i, j;\n    for (i = 2; i <= n; i++) {\n        if (n % i == 0) {\n            j = i;\n            while (n % j == 0) {\n                j++;\n            }\n            return j;\n        }\n    }\n    return n;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) == (7));\n}\n",
      "timestamp": 1664292882,
      "stdout": "",
      "stderr": "tmpfn0xlean: /tmp/tmpfn0xlean.cpp:21: int main(): Assertion `candidate((3)) == (1)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nlong largest_divisor(long n) {\n    long i = 2;\n    while (i <= n) {\n        if (n % i == 0) {\n            return i;\n        }\n        i++;\n    }\n    return i - 1;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) == (7));\n}\n",
      "timestamp": 1664292880,
      "stdout": "",
      "stderr": "tmp07qdij0m: /tmp/tmp07qdij0m.cpp:18: int main(): Assertion `candidate((3)) == (1)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nlong largest_divisor(long n) {\n    long result = n;\n    while (n % 2 == 0) {\n        n /= 2;\n    }\n    while (n % 3 == 0) {\n        n /= 3;\n    }\n    while (n % 5 == 0) {\n        n /= 5;\n    }\n    while (n % 7 == 0) {\n        n /= 7;\n    }\n    while (n % 11 == 0) {\n        n /= 11;\n    }\n    while (n % 13 == 0) {\n        n /= 13;\n    }\n    while (n % 17 == 0) {\n        n /= 17;\n    }\n    while (n % 19 == 0) {\n        n /= 19;\n    }\n    while (n % 23 == 0) {\n        n /= 23;\n    }\n    while (n % 29 == 0) {\n        n /= 29;\n    }\n    while (n % 31 == 0) {\n        n /= 31;\n    }\n    while (n % 37 == 0) {\n        n /= 37;\n    }\n    while (n % 41 == 0) {\n        n /= 41;\n    }\n    while (n % 43 == 0) {\n        n /= 43;\n    }\n    while (n % 47 == 0) {\n        n /= 47;\n    }\n    while (n % 53 == 0) {\n        n /= 53;\n    }\n    while (n % 59 == 0) {\n        n /= 59;\n    }\n    while (n % 61 == 0) {\n        n /= 61;\n    }\n    while (n % 67 == 0) {\n        n /= 67;\n    }\n    while (n % 71 == 0) {\n        n /= 71;\n    }\n    while (n % 73 == 0) {\n        n /= 73;\n    }\n    while (n % 79 == 0) {\n        n /= 79;\n    }\n    while (n % 83 == 0) {\n        n /= 83;\n    }\n    while (n % 89 == 0) {\n        n /= 89;\n    }\n    \n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) == (7));\n}\n",
      "timestamp": 1664292884,
      "stdout": "",
      "stderr": "tmpb8g3jtsk: /tmp/tmpb8g3jtsk.cpp:84: int main(): Assertion `candidate((3)) == (1)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nlong largest_divisor(long n) {\n    long i = 2;\n    while (i <= n / i) {\n        if (n % i == 0) {\n            return i;\n        }\n        i++;\n    }\n    return n;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) == (7));\n}\n",
      "timestamp": 1664292884,
      "stdout": "",
      "stderr": "tmp1v9j_9qw: /tmp/tmp1v9j_9qw.cpp:18: int main(): Assertion `candidate((3)) == (1)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nlong largest_divisor(long n) {\n    long result = n;\n    while(n%result == 0) {\n        result = result - 1;\n    }\n    return result;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) == (7));\n}\n",
      "timestamp": 1664292886,
      "stdout": "",
      "stderr": "tmpaqtet1kl: /tmp/tmpaqtet1kl.cpp:15: int main(): Assertion `candidate((3)) == (1)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nlong largest_divisor(long n) {\n    long i = 2;\n    while (i <= n / i) {\n        if (n % i == 0) {\n            return i;\n        }\n        i++;\n    }\n    return i - 1;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) == (7));\n}\n",
      "timestamp": 1664292882,
      "stdout": "",
      "stderr": "tmp08x84ztf: /tmp/tmp08x84ztf.cpp:19: int main(): Assertion `candidate((7)) == (1)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nlong largest_divisor(long n) {\n    long i = 1;\n    while(i*i <= n) {\n        if(n % i == 0) {\n            return i;\n        }\n        i++;\n    }\n    return i;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) == (7));\n}\n",
      "timestamp": 1664292886,
      "stdout": "",
      "stderr": "tmp75g9rojs: /tmp/tmp75g9rojs.cpp:20: int main(): Assertion `candidate((10)) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nlong largest_divisor(long n) {\n    long i, j, k;\n    long result = n;\n    for (i = 2; i <= n / 2; i++) {\n        if (n % i == 0) {\n            result = i;\n            break;\n        }\n    }\n    if (result == n) {\n        for (i = 2; i <= n / 2; i++) {\n            if (n % i == 0) {\n                result = i;\n                break;\n            }\n        }\n    }\n    if (result == n) {\n        for (i = 2; i <= n / 2; i++) {\n            if (n % i == 0) {\n                result = i;\n                break;\n            }\n        }\n    }\n    if (result == n) {\n        for (i = 2; i <= n / 2; i++) {\n            if (n % i == 0) {\n                result = i;\n                break;\n            }\n        }\n    }\n    if (result == n) {\n        for (i = 2; i <= n / 2; i++) {\n            if (n % i == 0) {\n                result = i;\n                break;\n            }\n        }\n    }\n    if (result == n) {\n        for (i = 2; i <= n / 2; i++) {\n            if (n % i == 0) {\n                result = i;\n                break;\n            }\n        }\n    }\n    if (result == n) {\n        for (i = 2; i <= n / 2; i++) {\n            if (n % i == 0) {\n                result = i;\n                break;\n            }\n        }\n    }\n    if (result == n) {\n        for (i = 2; i <= n / 2; i++) {\n            if (n % i == 0) {\n                result = i;\n                break;\n            }\n        }\n    }\n    if (result == n) {\n        for (i = 2; i <= n / 2; i++) {\n            if (n % i == 0) {\n                result = i;\n                break;\n            }\n        }\n    }\n    if (result\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) == (7));\n}\n",
      "timestamp": 1664292886,
      "stdout": "",
      "stderr": "/tmp/tmp8okt5ym4.cpp: In function \u2018long int largest_divisor(long int)\u2019:\n/tmp/tmp8okt5ym4.cpp:79:15: error: expected \u2018)\u2019 before \u2018}\u2019 token\n   79 |     if (result\n      |        ~      ^\n      |               )\n   80 | }\n      | ~              \n/tmp/tmp8okt5ym4.cpp:80:1: error: expected primary-expression before \u2018}\u2019 token\n   80 | }\n      | ^\n/tmp/tmp8okt5ym4.cpp:80:1: warning: no return statement in function returning non-void [-Wreturn-type]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nlong largest_divisor(long n) {\n    long i, j, k;\n    for (i = 1; i < n; i++) {\n        if (n % i == 0) {\n            k = i;\n            for (j = i; j < n; j += i) {\n                if (n % j != 0) {\n                    k = i;\n                    break;\n                }\n            }\n            if (k > i) {\n                i = k;\n            }\n        }\n    }\n    return i;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) == (7));\n}\n",
      "timestamp": 1664292886,
      "stdout": "",
      "stderr": "tmpwzart9sr: /tmp/tmpwzart9sr.cpp:26: int main(): Assertion `candidate((3)) == (1)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nlong largest_divisor(long n) {\n    long i = 2;\n    while(i*i <= n) {\n        if(n % i == 0) {\n            return i;\n        }\n        i++;\n    }\n    return n;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) == (7));\n}\n",
      "timestamp": 1664292886,
      "stdout": "",
      "stderr": "tmp9ol9egxq: /tmp/tmp9ol9egxq.cpp:18: int main(): Assertion `candidate((3)) == (1)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nlong largest_divisor(long n) {\n    long i = 2;\n    while (i <= n / 2) {\n        if (n % i == 0) {\n            return i;\n        }\n        i++;\n    }\n    return n;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) == (7));\n}\n",
      "timestamp": 1664292882,
      "stdout": "",
      "stderr": "tmpdstlcd57: /tmp/tmpdstlcd57.cpp:18: int main(): Assertion `candidate((3)) == (1)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nlong largest_divisor(long n) {\n    long i = 2;\n    while (i <= n / i) {\n        if (n % i == 0) {\n            return i;\n        }\n        i++;\n    }\n    return i - 1;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) == (7));\n}\n",
      "timestamp": 1664292882,
      "stdout": "",
      "stderr": "tmp08x84ztf: /tmp/tmp08x84ztf.cpp:19: int main(): Assertion `candidate((7)) == (1)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nlong largest_divisor(long n) {\n    long i = 1;\n    while (i*i <= n) {\n        if (n % i == 0) {\n            return i;\n        }\n        i++;\n    }\n    return i;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) == (7));\n}\n",
      "timestamp": 1664292880,
      "stdout": "",
      "stderr": "tmpvkc06oz8: /tmp/tmpvkc06oz8.cpp:20: int main(): Assertion `candidate((10)) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nlong largest_divisor(long n) {\n    long i, j, k;\n    for (i = 2; i <= n; i++) {\n        if (n % i == 0) {\n            k = i;\n            while (n % i == 0) {\n                n /= i;\n            }\n            return k;\n        }\n    }\n    return n;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) == (7));\n}\n",
      "timestamp": 1664292884,
      "stdout": "",
      "stderr": "tmple0dqne3: /tmp/tmple0dqne3.cpp:21: int main(): Assertion `candidate((3)) == (1)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nlong largest_divisor(long n) {\n    long result = n;\n    while (result % 2 == 0) {\n        result /= 2;\n    }\n    while (result % 3 == 0) {\n        result /= 3;\n    }\n    while (result % 5 == 0) {\n        result /= 5;\n    }\n    while (result % 7 == 0) {\n        result /= 7;\n    }\n    while (result % 11 == 0) {\n        result /= 11;\n    }\n    while (result % 13 == 0) {\n        result /= 13;\n    }\n    while (result % 17 == 0) {\n        result /= 17;\n    }\n    return result;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) == (7));\n}\n",
      "timestamp": 1664292880,
      "stdout": "",
      "stderr": "tmpzhhawvhw: /tmp/tmpzhhawvhw.cpp:35: int main(): Assertion `candidate((10)) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nlong largest_divisor(long n) {\n    long result = n;\n    while (result % 2 == 0) {\n        result /= 2;\n    }\n    while (result % 3 == 0) {\n        result /= 3;\n    }\n    while (result % 5 == 0) {\n        result /= 5;\n    }\n    while (result % 7 == 0) {\n        result /= 7;\n    }\n    while (result % 11 == 0) {\n        result /= 11;\n    }\n    while (result % 13 == 0) {\n        result /= 13;\n    }\n    while (result % 17 == 0) {\n        result /= 17;\n    }\n    return result;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) == (7));\n}\n",
      "timestamp": 1664292880,
      "stdout": "",
      "stderr": "tmpzhhawvhw: /tmp/tmpzhhawvhw.cpp:35: int main(): Assertion `candidate((10)) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nlong largest_divisor(long n) {\n    long i, j, k;\n    for (i = 2; i < n; i++) {\n        if (n % i == 0) {\n            k = i;\n            while (n % i == 0) {\n                n /= i;\n            }\n        }\n    }\n    if (n > 1) {\n        k = n;\n    }\n    return k;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) == (7));\n}\n",
      "timestamp": 1664292882,
      "stdout": "",
      "stderr": "tmpfad5mt2t: /tmp/tmpfad5mt2t.cpp:23: int main(): Assertion `candidate((3)) == (1)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nlong largest_divisor(long n) {\n    long i, j;\n    for (i = 1; i < n; i++) {\n        if (n % i == 0) {\n            j = i;\n            while (n % j == 0) {\n                j++;\n            }\n            if (j > i) {\n                i = j;\n            }\n        }\n    }\n    return i;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) == (7));\n}\n",
      "timestamp": 1664292886,
      "stdout": "",
      "stderr": "tmpgx55638r: /tmp/tmpgx55638r.cpp:23: int main(): Assertion `candidate((3)) == (1)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nlong largest_divisor(long n) {\n    long i, j, k;\n    for (i = 2; i < n; i++) {\n        if (n % i == 0) {\n            k = i;\n            while (n % i == 0) {\n                n /= i;\n            }\n        }\n    }\n    return n;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) == (7));\n}\n",
      "timestamp": 1664292886,
      "stdout": "",
      "stderr": "tmpqrc0dlhb: /tmp/tmpqrc0dlhb.cpp:20: int main(): Assertion `candidate((3)) == (1)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nlong largest_divisor(long n) {\n    long i, j, k;\n    for (i = 2; i <= n; i++) {\n        if (n % i == 0) {\n            k = i;\n            while (n % i == 0) {\n                n /= i;\n            }\n        }\n    }\n    return k;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) == (7));\n}\n",
      "timestamp": 1664292882,
      "stdout": "",
      "stderr": "tmpadn6snk2: /tmp/tmpadn6snk2.cpp:20: int main(): Assertion `candidate((3)) == (1)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nlong largest_divisor(long n) {\n    long i, j, k;\n    long m = n;\n    for (i = 2; i <= n / i; i++) {\n        if (n % i == 0) {\n            m = i;\n            break;\n        }\n    }\n    if (m == n) return n;\n    for (i = 2; i <= m / i; i++) {\n        if (m % i == 0) {\n            m = i;\n            break;\n        }\n    }\n    if (m == n) return n;\n    for (i = 2; i <= m / i; i++) {\n        if (m % i == 0) {\n            m = i;\n            break;\n        }\n    }\n    for (i = 2; i <= m / i; i++) {\n        if (m % i == 0) {\n            m = i;\n            break;\n        }\n    }\n    return m;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) == (7));\n}\n",
      "timestamp": 1664292886,
      "stdout": "",
      "stderr": "tmphnswsk1e: /tmp/tmphnswsk1e.cpp:39: int main(): Assertion `candidate((3)) == (1)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nlong largest_divisor(long n) {\n    long i, j, k;\n    for (i = 2; i <= n; i++) {\n        if (n % i == 0) {\n            j = i;\n            while (n % j == 0) {\n                j++;\n            }\n            k = j;\n            while (k <= n / j) {\n                k *= j;\n            }\n            if (k < n) {\n                return k;\n            }\n        }\n    }\n    return n;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) == (7));\n}\n",
      "timestamp": 1664292884,
      "stdout": "",
      "stderr": "tmppslm_3kc: /tmp/tmppslm_3kc.cpp:27: int main(): Assertion `candidate((3)) == (1)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nlong largest_divisor(long n) {\n    long i, j, k, m;\n    for (i = 2; i <= n; i++) {\n        if (n % i == 0) {\n            m = i;\n            while (n % i == 0) {\n                n /= i;\n            }\n        }\n    }\n    if (n > 1) {\n        m = n;\n    }\n    return m;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) == (7));\n}\n",
      "timestamp": 1664292886,
      "stdout": "",
      "stderr": "tmp7r8vukv1: /tmp/tmp7r8vukv1.cpp:23: int main(): Assertion `candidate((3)) == (1)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nlong largest_divisor(long n) {\n    long i, j;\n    for (i = 2; i <= n; i++) {\n        if (n % i == 0) {\n            j = i;\n            while (n % i == 0) {\n                n /= i;\n            }\n            return j;\n        }\n    }\n    return n;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) == (7));\n}\n",
      "timestamp": 1664292886,
      "stdout": "",
      "stderr": "tmprm2_b74w: /tmp/tmprm2_b74w.cpp:21: int main(): Assertion `candidate((3)) == (1)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nlong largest_divisor(long n) {\n    long result = n;\n    while (result % 2 == 0) {\n        result /= 2;\n    }\n    while (result % 3 == 0) {\n        result /= 3;\n    }\n    while (result % 5 == 0) {\n        result /= 5;\n    }\n    while (result % 7 == 0) {\n        result /= 7;\n    }\n    while (result % 11 == 0) {\n        result /= 11;\n    }\n    while (result % 13 == 0) {\n        result /= 13;\n    }\n    while (result % 17 == 0) {\n        result /= 17;\n    }\n    return result;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) == (7));\n}\n",
      "timestamp": 1664292880,
      "stdout": "",
      "stderr": "tmpzhhawvhw: /tmp/tmpzhhawvhw.cpp:35: int main(): Assertion `candidate((10)) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nlong largest_divisor(long n) {\n    long i = 2;\n    while (i <= n / 2) {\n        if (n % i == 0) {\n            return i;\n        }\n        i++;\n    }\n    return i - 1;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) == (7));\n}\n",
      "timestamp": 1664292880,
      "stdout": "",
      "stderr": "tmpt3ugan4k: /tmp/tmpt3ugan4k.cpp:19: int main(): Assertion `candidate((7)) == (1)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nlong largest_divisor(long n) {\n    long i = 2;\n    while (i < n) {\n        if (n % i == 0) {\n            return i;\n        }\n        i++;\n    }\n    return i;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) == (7));\n}\n",
      "timestamp": 1664292882,
      "stdout": "",
      "stderr": "tmpt3xa17n5: /tmp/tmpt3xa17n5.cpp:18: int main(): Assertion `candidate((3)) == (1)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nlong largest_divisor(long n) {\n    long i, j, k;\n    for (i = 2; i < n; i++) {\n        if (n % i == 0) {\n            k = i;\n            while (n % i == 0) {\n                n /= i;\n            }\n            return k;\n        }\n    }\n    return n;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) == (7));\n}\n",
      "timestamp": 1664292880,
      "stdout": "",
      "stderr": "tmp3eybsimw: /tmp/tmp3eybsimw.cpp:21: int main(): Assertion `candidate((3)) == (1)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nlong largest_divisor(long n) {\n    long i, j, k;\n    long max = n;\n    for (i = 2; i < n; i++) {\n        if (n % i == 0) {\n            k = i;\n            while (n % i == 0) {\n                n /= i;\n            }\n            max = std::min(max, k);\n        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) == (7));\n}\n",
      "timestamp": 1664292886,
      "stdout": "",
      "stderr": "tmpfvxaor5w: /tmp/tmpfvxaor5w.cpp:22: int main(): Assertion `candidate((3)) == (1)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nlong largest_divisor(long n) {\n    long i = 2;\n    while (i < n) {\n        if (n % i == 0) {\n            return i;\n        }\n        i++;\n    }\n    return i;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) == (7));\n}\n",
      "timestamp": 1664292882,
      "stdout": "",
      "stderr": "tmpt3xa17n5: /tmp/tmpt3xa17n5.cpp:18: int main(): Assertion `candidate((3)) == (1)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nlong largest_divisor(long n) {\n    long i, j, k;\n    long max = n;\n    for (i = 2; i < n; i++) {\n        if (n % i == 0) {\n            max = i;\n            break;\n        }\n    }\n    if (max == n) {\n        return max;\n    }\n    for (i = max; i > 1; i--) {\n        if (n % i == 0) {\n            max = i;\n            break;\n        }\n    }\n    for (i = max; i > 1; i--) {\n        for (j = 2; j < i; j++) {\n            if (i % j == 0) {\n                k = i / j;\n                if (k < max) {\n                    max = k;\n                }\n            }\n        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) == (7));\n}\n",
      "timestamp": 1664292886,
      "stdout": "",
      "stderr": "tmp9xw15pdw: /tmp/tmp9xw15pdw.cpp:38: int main(): Assertion `candidate((3)) == (1)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nlong largest_divisor(long n) {\n    long i, j, k;\n    for (i = 1; i <= n / 2; i++) {\n        if (n % i == 0) {\n            k = i;\n            while (n % i == 0) {\n                n /= i;\n            }\n            return k;\n        }\n    }\n    return n;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) == (7));\n}\n",
      "timestamp": 1664292901,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nlong largest_divisor(long n) {\n    long i, j, k;\n    for (i = 2; i <= n; i++) {\n        if (n % i == 0) {\n            j = i;\n            while (n % j == 0) {\n                j++;\n            }\n            k = j;\n            while (k <= n / j) {\n                k *= j;\n            }\n            if (k < n) {\n                return k;\n            }\n        }\n    }\n    return n;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) == (7));\n}\n",
      "timestamp": 1664292884,
      "stdout": "",
      "stderr": "tmppslm_3kc: /tmp/tmppslm_3kc.cpp:27: int main(): Assertion `candidate((3)) == (1)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nlong largest_divisor(long n) {\n    long i, j, k;\n    long max = n;\n    for (i = 2; i <= n / 2; i++) {\n        if (n % i == 0) {\n            max = i;\n            break;\n        }\n    }\n    if (max == n) {\n        return n;\n    }\n    for (i = max + 1; i <= n; i++) {\n        if (n % i == 0) {\n            k = i;\n            while (n % k == 0) {\n                k++;\n            }\n            if (k < max) {\n                max = k;\n            }\n        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) == (7));\n}\n",
      "timestamp": 1664292886,
      "stdout": "",
      "stderr": "tmpiryuhsy9: /tmp/tmpiryuhsy9.cpp:33: int main(): Assertion `candidate((3)) == (1)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nlong largest_divisor(long n) {\n    long i, j, k;\n    for (i = 2; i < n; i++) {\n        if (n % i == 0) {\n            k = i;\n            while (n % i == 0) {\n                n /= i;\n            }\n            return k;\n        }\n    }\n    return n;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) == (7));\n}\n",
      "timestamp": 1664292880,
      "stdout": "",
      "stderr": "tmp3eybsimw: /tmp/tmp3eybsimw.cpp:21: int main(): Assertion `candidate((3)) == (1)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nlong largest_divisor(long n) {\n    long i, j, k;\n    long result = n;\n    for (i = 2; i <= n / i; i++) {\n        if (n % i == 0) {\n            result = i;\n            break;\n        }\n    }\n    if (result == n) {\n        for (i = 2; i <= n / i; i++) {\n            if (n % i == 0) {\n                result = i;\n                break;\n            }\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) == (7));\n}\n",
      "timestamp": 1664292880,
      "stdout": "",
      "stderr": "tmpixb0xaa4: /tmp/tmpixb0xaa4.cpp:27: int main(): Assertion `candidate((3)) == (1)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nlong largest_divisor(long n) {\n    long i, j, k;\n    long m = n;\n    while (m > 1) {\n        i = m / 2;\n        j = m % 2;\n        k = i;\n        while (k > 1) {\n            if (m % k == 0) {\n                m = k;\n                break;\n            }\n            k = k / 2;\n        }\n    }\n    return m;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) == (7));\n}\n",
      "timestamp": 1664292901,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nlong largest_divisor(long n) {\n    long result = n;\n    while (result % 2 == 0) {\n        result /= 2;\n    }\n    while (result % 3 == 0) {\n        result /= 3;\n    }\n    while (result % 5 == 0) {\n        result /= 5;\n    }\n    return result;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) == (7));\n}\n",
      "timestamp": 1664292886,
      "stdout": "",
      "stderr": "tmpb8kgl2cv: /tmp/tmpb8kgl2cv.cpp:22: int main(): Assertion `candidate((7)) == (1)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nlong largest_divisor(long n) {\n    long i = 2;\n    while(i*i <= n) {\n        if(n%i == 0) {\n            return i;\n        }\n        i++;\n    }\n    return i-1;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) == (7));\n}\n",
      "timestamp": 1664292886,
      "stdout": "",
      "stderr": "tmpj8l2yzcj: /tmp/tmpj8l2yzcj.cpp:19: int main(): Assertion `candidate((7)) == (1)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nlong largest_divisor(long n) {\n    long i, j, k;\n    for (i = 2; i <= n; i++) {\n        if (n % i == 0) {\n            k = i;\n            while (n % i == 0) {\n                n /= i;\n            }\n            return k;\n        }\n    }\n    return n;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) == (7));\n}\n",
      "timestamp": 1664292884,
      "stdout": "",
      "stderr": "tmple0dqne3: /tmp/tmple0dqne3.cpp:21: int main(): Assertion `candidate((3)) == (1)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nlong largest_divisor(long n) {\n    long i, j, k;\n    for (i = 2; i < n; i++) {\n        if (n % i == 0) {\n            k = i;\n            while (n % i == 0) {\n                n /= i;\n            }\n            return k;\n        }\n    }\n    return n;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) == (7));\n}\n",
      "timestamp": 1664292880,
      "stdout": "",
      "stderr": "tmp3eybsimw: /tmp/tmp3eybsimw.cpp:21: int main(): Assertion `candidate((3)) == (1)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nlong largest_divisor(long n) {\n    long i, j;\n    for (i = 2; i < n; i++) {\n        if (n % i == 0) {\n            j = i;\n            while (n % j == 0) {\n                j++;\n            }\n            return j;\n        }\n    }\n    return n;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) == (7));\n}\n",
      "timestamp": 1664292884,
      "stdout": "",
      "stderr": "tmpjj_k57e6: /tmp/tmpjj_k57e6.cpp:21: int main(): Assertion `candidate((3)) == (1)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nlong largest_divisor(long n) {\n    long i = 2;\n    while (i <= n/i) {\n        if (n % i == 0) {\n            return i;\n        }\n        i++;\n    }\n    return i-1;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) == (7));\n}\n",
      "timestamp": 1664292886,
      "stdout": "",
      "stderr": "tmp2xwlrzb_: /tmp/tmp2xwlrzb_.cpp:19: int main(): Assertion `candidate((7)) == (1)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nlong largest_divisor(long n) {\n    long i, j;\n    for (i = 2; i <= n; i++) {\n        if (n % i == 0) {\n            j = i;\n            while (n % j == 0) {\n                j++;\n            }\n            return j;\n        }\n    }\n    return n;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) == (7));\n}\n",
      "timestamp": 1664292882,
      "stdout": "",
      "stderr": "tmpfn0xlean: /tmp/tmpfn0xlean.cpp:21: int main(): Assertion `candidate((3)) == (1)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nlong largest_divisor(long n) {\n    long i = 1;\n    while (i*i <= n) {\n        if (n % i == 0) {\n            return i;\n        }\n        i++;\n    }\n    return i;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) == (7));\n}\n",
      "timestamp": 1664292880,
      "stdout": "",
      "stderr": "tmpvkc06oz8: /tmp/tmpvkc06oz8.cpp:20: int main(): Assertion `candidate((10)) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nlong largest_divisor(long n) {\n    long i, j, k;\n    for (i = 2; i <= n; i++) {\n        if (n % i == 0) {\n            k = i;\n            while (n % i == 0) {\n                n /= i;\n            }\n            return k;\n        }\n    }\n    return n;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) == (7));\n}\n",
      "timestamp": 1664292884,
      "stdout": "",
      "stderr": "tmple0dqne3: /tmp/tmple0dqne3.cpp:21: int main(): Assertion `candidate((3)) == (1)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nlong largest_divisor(long n) {\n    long i, j, max = 0;\n    for (i = 1; i < n; i++) {\n        if (n % i == 0) {\n            j = i;\n            while (n % j == 0) {\n                j++;\n            }\n            if (j > max) {\n                max = j;\n            }\n        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) == (7));\n}\n",
      "timestamp": 1664292886,
      "stdout": "",
      "stderr": "tmp01c6cvxz: /tmp/tmp01c6cvxz.cpp:23: int main(): Assertion `candidate((3)) == (1)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nlong largest_divisor(long n) {\n    long i, j, k;\n    for (i = 2; i < n; i++) {\n        if (n % i == 0) {\n            j = i;\n            while (n % j == 0) {\n                j++;\n            }\n            if (j > k) {\n                k = j;\n            }\n        }\n    }\n    return k;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) == (7));\n}\n",
      "timestamp": 1664292886,
      "stdout": "",
      "stderr": "tmpt7yiqjdx: /tmp/tmpt7yiqjdx.cpp:23: int main(): Assertion `candidate((3)) == (1)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nlong largest_divisor(long n) {\n    long result = n;\n    while (n % 2 == 0) {\n        result = 2 * result;\n        n /= 2;\n    }\n    while (n % 3 == 0) {\n        result = 3 * result;\n        n /= 3;\n    }\n    while (n % 5 == 0) {\n        result = 5 * result;\n        n /= 5;\n    }\n    return result;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) == (7));\n}\n",
      "timestamp": 1664292880,
      "stdout": "",
      "stderr": "tmpiz4ihx5p: /tmp/tmpiz4ihx5p.cpp:24: int main(): Assertion `candidate((3)) == (1)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nlong largest_divisor(long n) {\n    long i = 2;\n    while (i < n) {\n        if (n % i == 0) {\n            return i;\n        }\n        i++;\n    }\n    return i;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) == (7));\n}\n",
      "timestamp": 1664292882,
      "stdout": "",
      "stderr": "tmpt3xa17n5: /tmp/tmpt3xa17n5.cpp:18: int main(): Assertion `candidate((3)) == (1)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nlong largest_divisor(long n) {\n    long i, j, k;\n    long max = n;\n    for (i = 2; i < n; i++) {\n        if (n % i == 0) {\n            max = i;\n            break;\n        }\n    }\n    if (max == n) {\n        return max;\n    }\n    for (i = max; i > 1; i--) {\n        if (n % i == 0) {\n            k = i;\n            break;\n        }\n    }\n    for (j = 2; j < k; j++) {\n        if (n % j == 0) {\n            k = j;\n            break;\n        }\n    }\n    return k;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) == (7));\n}\n",
      "timestamp": 1664292888,
      "stdout": "",
      "stderr": "tmphertfcbi: /tmp/tmphertfcbi.cpp:34: int main(): Assertion `candidate((3)) == (1)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nlong largest_divisor(long n) {\n    long i = 2;\n    while (i <= n / i) {\n        if (n % i == 0) {\n            return i;\n        }\n        i++;\n    }\n    return n;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) == (7));\n}\n",
      "timestamp": 1664292884,
      "stdout": "",
      "stderr": "tmp1v9j_9qw: /tmp/tmp1v9j_9qw.cpp:18: int main(): Assertion `candidate((3)) == (1)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nlong largest_divisor(long n) {\n    long result = n;\n    while (result % 2 == 0) {\n        result /= 2;\n    }\n    while (result % 3 == 0) {\n        result /= 3;\n    }\n    while (result % 5 == 0) {\n        result /= 5;\n    }\n    while (result % 7 == 0) {\n        result /= 7;\n    }\n    while (result % 11 == 0) {\n        result /= 11;\n    }\n    while (result % 13 == 0) {\n        result /= 13;\n    }\n    while (result % 17 == 0) {\n        result /= 17;\n    }\n    return result;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) == (7));\n}\n",
      "timestamp": 1664292880,
      "stdout": "",
      "stderr": "tmpzhhawvhw: /tmp/tmpzhhawvhw.cpp:35: int main(): Assertion `candidate((10)) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nlong largest_divisor(long n) {\n    long i, j, k;\n    for (i = 2; i <= n; i++) {\n        if (n % i == 0) {\n            j = i;\n            while (n % j == 0) {\n                j++;\n            }\n            k = j;\n            while (k <= n / j) {\n                k *= j;\n            }\n            if (k < n) {\n                n = k;\n            }\n        }\n    }\n    return n;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) == (7));\n}\n",
      "timestamp": 1664292888,
      "stdout": "",
      "stderr": "tmp7q05oeiz: /tmp/tmp7q05oeiz.cpp:27: int main(): Assertion `candidate((3)) == (1)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nlong largest_divisor(long n) {\n    long i = 2;\n    while (i <= n / i) {\n        if (n % i == 0) {\n            return i;\n        }\n        i++;\n    }\n    return i - 1;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) == (7));\n}\n",
      "timestamp": 1664292882,
      "stdout": "",
      "stderr": "tmp08x84ztf: /tmp/tmp08x84ztf.cpp:19: int main(): Assertion `candidate((7)) == (1)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nlong largest_divisor(long n) {\n    long i = 1;\n    while (i * i <= n) {\n        if (n % i == 0) {\n            return i;\n        }\n        i++;\n    }\n    return i - 1;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) == (7));\n}\n",
      "timestamp": 1664292888,
      "stdout": "",
      "stderr": "tmpn4ndycrr: /tmp/tmpn4ndycrr.cpp:20: int main(): Assertion `candidate((10)) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nlong largest_divisor(long n) {\n    long result = n;\n    while(n%result == 0) {\n        result--;\n    }\n    return result;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) == (7));\n}\n",
      "timestamp": 1664292888,
      "stdout": "",
      "stderr": "tmpo3uiycsc: /tmp/tmpo3uiycsc.cpp:15: int main(): Assertion `candidate((3)) == (1)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nlong largest_divisor(long n) {\n    long result = n;\n    while (result % 2 == 0) {\n        result /= 2;\n    }\n    while (result % 3 == 0) {\n        result /= 3;\n    }\n    while (result % 5 == 0) {\n        result /= 5;\n    }\n    while (result % 7 == 0) {\n        result /= 7;\n    }\n    while (result % 11 == 0) {\n        result /= 11;\n    }\n    while (result % 13 == 0) {\n        result /= 13;\n    }\n    while (result % 17 == 0) {\n        result /= 17;\n    }\n    return result;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) == (7));\n}\n",
      "timestamp": 1664292880,
      "stdout": "",
      "stderr": "tmpzhhawvhw: /tmp/tmpzhhawvhw.cpp:35: int main(): Assertion `candidate((10)) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nlong largest_divisor(long n) {\n    long result = n;\n    while (result % 2 == 0) {\n        result /= 2;\n    }\n    while (result % 3 == 0) {\n        result /= 3;\n    }\n    while (result % 5 == 0) {\n        result /= 5;\n    }\n    while (result % 7 == 0) {\n        result /= 7;\n    }\n    while (result % 11 == 0) {\n        result /= 11;\n    }\n    while (result % 13 == 0) {\n        result /= 13;\n    }\n    while (result % 17 == 0) {\n        result /= 17;\n    }\n    return result;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) == (7));\n}\n",
      "timestamp": 1664292880,
      "stdout": "",
      "stderr": "tmpzhhawvhw: /tmp/tmpzhhawvhw.cpp:35: int main(): Assertion `candidate((10)) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nlong largest_divisor(long n) {\n    long i = 1, j = n;\n    while (i <= j) {\n        long mid = i + (j - i) / 2;\n        if (n % mid == 0) {\n            j = mid - 1;\n        } else {\n            i = mid + 1;\n        }\n    }\n    return i;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) == (7));\n}\n",
      "timestamp": 1664292888,
      "stdout": "",
      "stderr": "tmp9u78y_zj: /tmp/tmp9u78y_zj.cpp:20: int main(): Assertion `candidate((3)) == (1)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nlong largest_divisor(long n) {\n    long result = n;\n    while (result % 2 == 0) {\n        result /= 2;\n    }\n    while (result % 3 == 0) {\n        result /= 3;\n    }\n    while (result % 5 == 0) {\n        result /= 5;\n    }\n    while (result % 7 == 0) {\n        result /= 7;\n    }\n    while (result % 11 == 0) {\n        result /= 11;\n    }\n    while (result % 13 == 0) {\n        result /= 13;\n    }\n    while (result % 17 == 0) {\n        result /= 17;\n    }\n    return result;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) == (7));\n}\n",
      "timestamp": 1664292880,
      "stdout": "",
      "stderr": "tmpzhhawvhw: /tmp/tmpzhhawvhw.cpp:35: int main(): Assertion `candidate((10)) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nlong largest_divisor(long n) {\n    long i, j;\n    for (i = 1; i < n; i++) {\n        if (n % i == 0) {\n            j = i;\n            while (n % j == 0) {\n                j++;\n            }\n            return j;\n        }\n    }\n    return n;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) == (7));\n}\n",
      "timestamp": 1664292884,
      "stdout": "",
      "stderr": "tmpy_s5dn7u: /tmp/tmpy_s5dn7u.cpp:21: int main(): Assertion `candidate((3)) == (1)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nlong largest_divisor(long n) {\n    long result = n;\n    while (n % 2 == 0) {\n        result = 2;\n        n /= 2;\n    }\n    while (n % 3 == 0) {\n        result = 3;\n        n /= 3;\n    }\n    while (n % 5 == 0) {\n        result = 5;\n        n /= 5;\n    }\n    while (n % 7 == 0) {\n        result = 7;\n        n /= 7;\n    }\n    while (n % 11 == 0) {\n        result = 11;\n        n /= 11;\n    }\n    while (n % 13 == 0) {\n        result = 13;\n        n /= 13;\n    }\n    while (n % 17 == 0) {\n        result = 17;\n        n /= 17;\n    }\n    return result;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) == (7));\n}\n",
      "timestamp": 1664292888,
      "stdout": "",
      "stderr": "tmpbi8mdd77: /tmp/tmpbi8mdd77.cpp:40: int main(): Assertion `candidate((3)) == (1)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nlong largest_divisor(long n) {\n    long i, j, k;\n    for (i = 2; i < n; i++) {\n        if (n % i == 0) {\n            j = i;\n            while (n % j == 0) {\n                j++;\n            }\n            k = j;\n            while (k <= n / j) {\n                k *= j;\n            }\n            if (k < n) {\n                return k;\n            }\n        }\n    }\n    return n;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) == (7));\n}\n",
      "timestamp": 1664292884,
      "stdout": "",
      "stderr": "tmp1w7_420d: /tmp/tmp1w7_420d.cpp:27: int main(): Assertion `candidate((3)) == (1)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nlong largest_divisor(long n) {\n    long result = n;\n    while(n % result == 0) {\n        result = result - 1;\n    }\n    return result;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) == (7));\n}\n",
      "timestamp": 1664292888,
      "stdout": "",
      "stderr": "tmpog87ilg6: /tmp/tmpog87ilg6.cpp:15: int main(): Assertion `candidate((3)) == (1)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nlong largest_divisor(long n) {\n    long i, j;\n    for (i = 2; i <= n; i++) {\n        if (n % i == 0) {\n            j = i;\n            while (n % j == 0) {\n                j++;\n            }\n            if (j > i) {\n                return j;\n            }\n        }\n    }\n    return n;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) == (7));\n}\n",
      "timestamp": 1664292888,
      "stdout": "",
      "stderr": "tmpe_l2kzkw: /tmp/tmpe_l2kzkw.cpp:23: int main(): Assertion `candidate((3)) == (1)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nlong largest_divisor(long n) {\n    long i = 1;\n    while (i*i <= n) {\n        if (n % i == 0) {\n            return i;\n        }\n        i++;\n    }\n    return i-1;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) == (7));\n}\n",
      "timestamp": 1664292882,
      "stdout": "",
      "stderr": "tmpck6t71y6: /tmp/tmpck6t71y6.cpp:20: int main(): Assertion `candidate((10)) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nlong largest_divisor(long n) {\n    long result = n;\n    while(n % 2 == 0) {\n        result = 2;\n        n /= 2;\n    }\n    while(n % 3 == 0) {\n        result = 3;\n        n /= 3;\n    }\n    while(n % 5 == 0) {\n        result = 5;\n        n /= 5;\n    }\n    while(n % 7 == 0) {\n        result = 7;\n        n /= 7;\n    }\n    while(n % 11 == 0) {\n        result = 11;\n        n /= 11;\n    }\n    while(n % 13 == 0) {\n        result = 13;\n        n /= 13;\n    }\n    while(n % 17 == 0) {\n        result = 17;\n        n /= 17;\n    }\n    while(n % 19 == 0) {\n        result = 19;\n        n /= 19;\n    }\n    while(n % 23 == 0) {\n        result = 23;\n        n /= 23;\n    }\n    while(n % 29 == 0) {\n        result = 29;\n        n /= 29;\n    }\n    while(n % 31 == 0) {\n        result = 31;\n        n /= 31;\n    }\n    while(n % 37 == 0) {\n        result = 37;\n        n /= 37;\n    }\n    while(n % 41 == 0) {\n        result = 41;\n        n /= 41;\n    }\n    while(n % 43 == 0) {\n        result = 43;\n        n /= 43;\n    }\n    while(n % 47 == 0) {\n        result = 47;\n        n /= 47;\n    }\n    while(n % 53 == 0) {\n        result = 53;\n        n /= 53;\n    }\n    while(n % 59 == 0) {\n        result = 59;\n        n /= 59;\n    }\n    while(n % 61 == 0) {\n        result = 61;\n        n /= 61;\n    }\n    while(n % 67 == 0) {\n        result = 67;\n        n\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) == (7));\n}\n",
      "timestamp": 1664292888,
      "stdout": "",
      "stderr": "/tmp/tmpjdt691sb.cpp: In function \u2018long int largest_divisor(long int)\u2019:\n/tmp/tmpjdt691sb.cpp:82:10: error: expected \u2018;\u2019 before \u2018}\u2019 token\n   82 |         n\n      |          ^\n      |          ;\n   83 | }\n      | ~         \n/tmp/tmpjdt691sb.cpp:84:12: error: a function-definition is not allowed here before \u2018{\u2019 token\n   84 | int main() {\n      |            ^\n/tmp/tmpjdt691sb.cpp:91:1: error: expected \u2018}\u2019 at end of input\n   91 | }\n      | ^\n/tmp/tmpjdt691sb.cpp:6:30: note: to match this \u2018{\u2019\n    6 | long largest_divisor(long n) {\n      |                              ^\n/tmp/tmpjdt691sb.cpp:91:1: warning: no return statement in function returning non-void [-Wreturn-type]\n   91 | }\n      | ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nlong largest_divisor(long n) {\n    long i, j, k;\n    long m = n;\n    for (i = 2; i <= n / i; i++) {\n        if (n % i == 0) {\n            m = i;\n            break;\n        }\n    }\n    if (m == n) {\n        return n;\n    }\n    for (i = 2; i <= n / i; i++) {\n        if (n % i != 0) {\n            continue;\n        }\n        for (j = i; j <= n / j; j++) {\n            if (n % j != 0) {\n                continue;\n            }\n            for (k = j; k <= n / k; k++) {\n                if (n % k != 0) {\n                    continue;\n                }\n                if (m < i * j * k) {\n                    m = i * j * k;\n                }\n            }\n        }\n    }\n    return m;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) == (7));\n}\n",
      "timestamp": 1664292888,
      "stdout": "",
      "stderr": "tmpx33ex_g0: /tmp/tmpx33ex_g0.cpp:40: int main(): Assertion `candidate((3)) == (1)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nlong largest_divisor(long n) {\n    long i, j;\n    for (i = 1; i <= n; i++) {\n        if (n % i == 0) {\n            j = i;\n            while (n % i == 0) {\n                n /= i;\n            }\n            return j;\n        }\n    }\n    return n;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) == (7));\n}\n",
      "timestamp": 1664292897,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nlong largest_divisor(long n) {\n    long i = 2;\n    while (i*i <= n) {\n        if (n % i == 0) {\n            return i;\n        }\n        i++;\n    }\n    return i-1;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) == (7));\n}\n",
      "timestamp": 1664292880,
      "stdout": "",
      "stderr": "tmpbksn_uux: /tmp/tmpbksn_uux.cpp:19: int main(): Assertion `candidate((7)) == (1)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nlong largest_divisor(long n) {\n    long i, j, k;\n    for (i = 2; i <= n; i++) {\n        if (n % i == 0) {\n            j = i;\n            while (n % j == 0) {\n                j++;\n            }\n            k = j;\n            while (k <= n) {\n                k *= j;\n            }\n            return k;\n        }\n    }\n    return n;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) == (7));\n}\n",
      "timestamp": 1664292882,
      "stdout": "",
      "stderr": "tmpf9lj9qc3: /tmp/tmpf9lj9qc3.cpp:25: int main(): Assertion `candidate((3)) == (1)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nlong largest_divisor(long n) {\n    long i, j;\n    long max = n;\n    for (i = 2; i < n; i++) {\n        if (n % i == 0) {\n            max = i;\n            for (j = i + i; j < n; j += i) {\n                if (n % j == 0) {\n                    max = j;\n                    break;\n                }\n            }\n        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) == (7));\n}\n",
      "timestamp": 1664292888,
      "stdout": "",
      "stderr": "tmpxdwz23lq: /tmp/tmpxdwz23lq.cpp:24: int main(): Assertion `candidate((3)) == (1)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nlong largest_divisor(long n) {\n    long i, j, k, m;\n    for (i = 2; i < n; i++) {\n        if (n % i == 0) {\n            m = i;\n            for (j = i; j < n; j += i) {\n                if (n % j == 0) {\n                    m = j;\n                    break;\n                }\n            }\n            if (m > i)\n                return m;\n        }\n    }\n    return n;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) == (7));\n}\n",
      "timestamp": 1664292888,
      "stdout": "",
      "stderr": "tmp4skg7ta8: /tmp/tmp4skg7ta8.cpp:25: int main(): Assertion `candidate((3)) == (1)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    }
  ]
}