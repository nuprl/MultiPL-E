{
  "name": "HumanEval_99_closest_integer",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nlong closest_integer(std::string value) {\n",
  "tests": "}\nint main() {\n    auto candidate = closest_integer;\n    assert(candidate((\"10\")) == (10));\n    assert(candidate((\"14.5\")) == (15));\n    assert(candidate((\"-15.5\")) == (-16));\n    assert(candidate((\"15.3\")) == (15));\n    assert(candidate((\"0\")) == (0));\n}\n",
  "completions": [
    "    long result = 0;\n    std::string::iterator it = value.begin();\n    while (it != value.end() && *it == ' ') {\n        it++;\n    }\n    if (it == value.end()) {\n        return result;\n    }\n    bool is_negative = false;\n    if (*it == '-') {\n        is_negative = true;\n        it++;\n    }\n    while (it != value.end() && *it >= '0' && *it <= '9') {\n        result = result * 10 + (*it - '0');\n        it++;\n    }\n    if (is_negative) {\n        result = -result;\n    }\n    return result;",
    "    long result = 0;\n    long sign = 1;\n    if (value[0] == '-') {\n        sign = -1;\n        value.erase(0, 1);\n    }\n    for (int i = 0; i < value.size(); i++) {\n        if (value[i] == '.') {\n            result = sign * (long) std::stod(value.substr(0, i));\n            break;\n        }\n    }\n    if (value.find('.') != std::string::npos) {\n        result = sign * (long) std::stod(value);\n    }\n    return result;",
    "    long result = 0;\n    std::string::size_type pos = 0;\n    std::string::size_type len = value.length();\n    if (len == 0) return result;\n    if (value[0] == '-') {\n        result = -1;\n        pos = 1;\n    }\n    while (pos < len) {\n        if (value[pos] < '0' || value[pos] > '9') break;\n        result = result * 10 + value[pos] - '0';\n        pos++;\n    }\n    if (pos == len) return result;\n    if (value[pos] == '.') {\n        pos++;\n        while (pos < len) {\n            if (value[pos] < '0' || value[pos] > '9') break;\n            result = result * 10 + value[pos] - '0';\n            pos++;\n        }\n        if (pos == len) return result;\n    }\n    if (value[pos] == 'e' || value[pos] == 'E') {\n        pos++;\n        if (value[pos] == '-') {\n            result = -result;\n            pos++;\n        }\n        while (pos < len) {\n            if (value[pos] < '0' || value[pos] > '9') break;\n            result = result * 10 + value[pos] - '0';\n            pos++;\n        }\n        if (pos == len) return result;\n    }\n    if (value[pos] == '-') {\n        result = -result;\n        pos++;\n    }\n    if (value[pos] == '.') {\n        pos++;\n        while (pos < len) {\n            if (value[pos] < '0' || value[pos] > '9') break;\n            result = result * 10 + value[pos] - '0';\n            pos++;\n        }\n        if (pos == len) return result;\n    }\n    if (value[pos] == 'e' || value[pos] == 'E') {\n        pos++;\n        if (value[pos] == '-') {\n            result = -result;\n            pos++;\n",
    "    long result = 0;\n    std::stringstream ss(value);\n    ss >> result;\n    return result;",
    "    long result = 0;\n    long sign = 1;\n    long num = 0;\n    long num_sign = 1;\n    long num_abs = 0;\n    long num_abs_sign = 1;\n    long num_abs_sign_diff = 0;\n    long num_abs_sign_diff_sign = 1;\n    long num_abs_sign_diff_sign_diff = 0;\n    long num_abs_sign_diff_sign_diff_sign = 1;\n    long num_abs_sign_diff_sign_diff_sign_diff = 0;\n    long num_abs_sign_diff_sign_diff_sign_diff_sign = 1;\n    long num_abs_sign_diff_sign_diff_sign_diff_sign_diff = 0;\n    long num_abs_sign_diff_sign_diff_sign_diff_sign_diff_sign = 1;\n    long num_abs_sign_diff_sign_diff_sign_diff_sign_diff_sign_diff = 0;\n    long num_abs_sign_diff_sign_diff_sign_diff_sign_diff_sign_diff_sign = 1;\n    long num_abs_sign_diff_sign_diff_sign_diff_sign_diff_sign_diff_sign_diff = 0;\n    long num_abs_sign_diff_sign_diff_sign_diff_sign_diff_sign_diff_sign_diff_sign = 1;\n    long num_abs_sign_diff_sign_diff_sign_diff_sign_diff_sign_diff_sign_diff_sign_diff = 0;\n    long num_abs_sign_diff_sign_diff_sign_diff_sign_diff_sign_diff_sign_diff_sign_diff_sign = 1;\n    long num_abs_sign_diff_sign_diff_sign_diff_sign_diff_sign_diff_sign_diff_sign_diff_sign_diff = 0;\n    long num_abs_sign_diff_sign_diff_sign_diff_sign_diff_sign_diff_sign_diff_sign_diff_sign_diff_sign = 1;\n    long num_abs_sign_diff_sign_diff_",
    "    long result = 0;\n    long sign = 1;\n    if (value[0] == '-') {\n        sign = -1;\n        value.erase(0, 1);\n    }\n    for (auto &c : value) {\n        if (c >= '0' && c <= '9') {\n            result = result * 10 + c - '0';\n        } else {\n            break;\n        }\n    }\n    result = result * sign;\n    if (result == 0) {\n        return 0;\n    }\n    if (result > 0) {\n        result = result + 5;\n    } else {\n        result = result - 5;\n    }\n    result = result / 10;\n    return result * sign;",
    "    long result = 0;\n    long sign = 1;\n    long num = 0;\n    long num_sign = 1;\n    long num_abs = 0;\n    long num_abs_sign = 1;\n    long num_abs_sign_temp = 1;\n    long num_abs_sign_temp_2 = 1;\n    long num_abs_sign_temp_3 = 1;\n    long num_abs_sign_temp_4 = 1;\n    long num_abs_sign_temp_5 = 1;\n    long num_abs_sign_temp_6 = 1;\n    long num_abs_sign_temp_7 = 1;\n    long num_abs_sign_temp_8 = 1;\n    long num_abs_sign_temp_9 = 1;\n    long num_abs_sign_temp_10 = 1;\n    long num_abs_sign_temp_11 = 1;\n    long num_abs_sign_temp_12 = 1;\n    long num_abs_sign_temp_13 = 1;\n    long num_abs_sign_temp_14 = 1;\n    long num_abs_sign_temp_15 = 1;\n    long num_abs_sign_temp_16 = 1;\n    long num_abs_sign_temp_17 = 1;\n    long num_abs_sign_temp_18 = 1;\n    long num_abs_sign_temp_19 = 1;\n    long num_abs_sign_temp_20 = 1;\n    long num_abs_sign_temp_21 = 1;\n    long num_abs_sign_temp_22 = 1;\n    long num_abs_sign_temp_23 = 1;\n    long num_abs_sign_temp_24 = 1;\n    long num_abs_sign_temp_25 = 1;\n    long num_abs_sign_temp_26 = 1;\n    long num_abs_sign_temp_27 = 1;\n    long num_abs_sign_temp_28 = 1;\n    long num_abs_sign_temp_29 = 1;\n    long num_abs_sign_temp_30 = 1;\n    long num_abs_sign_temp_31 = 1;",
    "    long result = 0;\n    std::stringstream ss(value);\n    ss >> result;\n    return result;",
    "    long result = 0;\n    long sign = 1;\n    if (value[0] == '-') {\n        sign = -1;\n        value.erase(0, 1);\n    }\n    for (auto i = value.begin(); i != value.end(); ++i) {\n        if (*i == '.') {\n            result += sign * std::stoi(value.substr(0, i - value.begin()));\n            value.erase(0, i - value.begin());\n            break;\n        }\n        result += sign * std::stoi(*i - '0');\n    }\n    if (value.size() > 0) {\n        result += sign * std::stoi(value);\n    }\n    return result;",
    "    long result = 0;\n    long sign = 1;\n    long exponent = 0;\n    long fraction = 0;\n    long fraction_sign = 1;\n    long fraction_exponent = 0;\n    long fraction_fraction = 0;\n    long fraction_fraction_sign = 1;\n    long fraction_fraction_exponent = 0;\n    long fraction_fraction_fraction = 0;\n    long fraction_fraction_fraction_sign = 1;\n    long fraction_fraction_fraction_exponent = 0;\n    long fraction_fraction_fraction_fraction = 0;\n    long fraction_fraction_fraction_fraction_sign = 1;\n    long fraction_fraction_fraction_fraction_exponent = 0;\n    long fraction_fraction_fraction_fraction_fraction = 0;\n    long fraction_fraction_fraction_fraction_fraction_sign = 1;\n    long fraction_fraction_fraction_fraction_fraction_exponent = 0;\n    long fraction_fraction_fraction_fraction_fraction_fraction = 0;\n    long fraction_fraction_fraction_fraction_fraction_fraction_sign = 1;\n    long fraction_fraction_fraction_fraction_fraction_fraction_exponent = 0;\n    long fraction_fraction_fraction_fraction_fraction_fraction_fraction = 0;\n    long fraction_fraction_fraction_fraction_fraction_fraction_fraction_sign = 1;\n    long fraction_fraction_fraction_fraction_fraction_fraction_fraction_exponent = 0;\n    long fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction = 0;\n    long fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_sign = 1;\n    long fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_exponent = 0;\n    long fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction_fraction = 0;\n",
    "    long result = 0;\n    std::stringstream ss(value);\n    ss >> result;\n    return result;",
    "    long result = 0;\n    long sign = 1;\n    if (value[0] == '-') {\n        sign = -1;\n        value.erase(0, 1);\n    }\n    for (int i = 0; i < value.size(); i++) {\n        if (value[i] == '.') {\n            result = result + (value[i + 1] - '0') * sign * pow(10, value.size() - i - 2);\n            break;\n        }\n        result = result + (value[i] - '0') * sign * pow(10, value.size() - i - 1);\n    }\n    return result;",
    "    long result = 0;\n    long sign = 1;\n    if (value[0] == '-') {\n        sign = -1;\n        value = value.substr(1);\n    }\n    for (int i = 0; i < value.length(); i++) {\n        if (value[i] >= '0' && value[i] <= '9') {\n            result = result * 10 + value[i] - '0';\n        } else {\n            break;\n        }\n    }\n    result = result * sign;\n    if (result == 0) {\n        return 0;\n    }\n    if (result % 2 == 0) {\n        return result / 2 * sign;\n    } else {\n        return (result / 2 + 1) * sign;\n    }",
    "    long result = 0;\n    long sign = 1;\n    if (value[0] == '-') {\n        sign = -1;\n        value.erase(0, 1);\n    }\n    for (auto it = value.begin(); it != value.end(); ++it) {\n        if (*it == '.') {\n            result += sign * std::stoi(value.substr(0, it - value.begin()));\n            value.erase(0, it - value.begin());\n            break;\n        }\n        result += sign * std::stoi(*it - '0');\n    }\n    if (value.size() > 0) {\n        result += sign * std::stoi(value);\n    }\n    return result;",
    "    long result = 0;\n    long sign = 1;\n    if (value[0] == '-') {\n        sign = -1;\n        value = value.substr(1);\n    }\n    for (int i = 0; i < value.size(); i++) {\n        if (value[i] >= '0' && value[i] <= '9') {\n            result = result * 10 + value[i] - '0';\n        } else {\n            break;\n        }\n    }\n    result = result * sign;\n    if (result == 0) {\n        result = 1;\n    }\n    return result;",
    "    long result = 0;\n    std::stringstream ss(value);\n    ss >> result;\n    return result;",
    "    long result = 0;\n    long sign = 1;\n    if (value[0] == '-') {\n        sign = -1;\n        value = value.substr(1);\n    }\n    for (int i = 0; i < value.length(); i++) {\n        if (value[i] >= '0' && value[i] <= '9') {\n            result = result * 10 + value[i] - '0';\n        }\n    }\n    result = result * sign;\n    if (result < 0) {\n        result = -result;\n    }\n    return result;",
    "    long result = 0;\n    long sign = 1;\n    if (value[0] == '-') {\n        sign = -1;\n        value.erase(0, 1);\n    }\n    for (int i = 0; i < value.length(); i++) {\n        if (value[i] >= '0' && value[i] <= '9') {\n            result = result * 10 + value[i] - '0';\n        } else {\n            break;\n        }\n    }\n    result = sign * result;\n    if (result > INT_MAX) {\n        result = INT_MAX;\n    } else if (result < INT_MIN) {\n        result = INT_MIN;\n    }\n    return result;",
    "    long result = 0;\n    long sign = 1;\n    if (value[0] == '-') {\n        sign = -1;\n        value = value.substr(1);\n    }\n    for (int i = value.size() - 1; i >= 0; i--) {\n        if (value[i] >= '0' && value[i] <= '9') {\n            result = result * 10 + value[i] - '0';\n        } else {\n            break;\n        }\n    }\n    result = sign * result;\n    if (result == 0) {\n        result = 1;\n    }\n    return result;",
    "    long result = 0;\n    long sign = 1;\n    if (value[0] == '-') {\n        sign = -1;\n        value = value.substr(1);\n    }\n    for (int i = value.length() - 1; i >= 0; i--) {\n        if (value[i] >= '0' && value[i] <= '9') {\n            result = result * 10 + value[i] - '0';\n        }\n    }\n    result = result * sign;\n    if (result < 0) {\n        result = -result;\n    }\n    return result;",
    "    long result = 0;\n    long sign = 1;\n    if (value[0] == '-') {\n        sign = -1;\n        value.erase(0, 1);\n    }\n    for (int i = 0; i < value.size(); i++) {\n        if (value[i] >= '0' && value[i] <= '9') {\n            result = result * 10 + value[i] - '0';\n        }\n    }\n    result = result * sign;\n    return result;",
    "    long result = 0;\n    long sign = 1;\n    long power = 1;\n    long temp = 0;\n    long temp_sign = 1;\n    long temp_power = 1;\n    long temp_result = 0;\n    long temp_result_sign = 1;\n    long temp_result_power = 1;\n    long temp_result_temp = 0;\n    long temp_result_temp_sign = 1;\n    long temp_result_temp_power = 1;\n    long temp_result_temp_result = 0;\n    long temp_result_temp_result_sign = 1;\n    long temp_result_temp_result_power = 1;\n    long temp_result_temp_result_temp = 0;\n    long temp_result_temp_result_temp_sign = 1;\n    long temp_result_temp_result_temp_power = 1;\n    long temp_result_temp_result_temp_result = 0;\n    long temp_result_temp_result_temp_result_sign = 1;\n    long temp_result_temp_result_temp_result_power = 1;\n    long temp_result_temp_result_temp_result_temp = 0;\n    long temp_result_temp_result_temp_result_temp_sign = 1;\n    long temp_result_temp_result_temp_result_temp_power = 1;\n    long temp_result_temp_result_temp_result_temp_result = 0;\n    long temp_result_temp_result_temp_result_temp_result_sign = 1;\n    long temp_result_temp_result_temp_result_temp_result_power = 1;\n    long temp_result_temp_result_temp_result_temp_result_temp = 0;\n    long temp_result_temp_result_temp_result_temp_result_temp_sign = 1;\n    long temp_result_temp_result_temp_result_temp_result_temp_power = 1;\n    long temp_result_temp_result_temp_result_temp_result_temp_result = 0;\n    long temp_result_temp_result_temp_result_temp_result_temp_result_sign = 1",
    "    long result = 0;\n    long sign = 1;\n    if (value[0] == '-') {\n        sign = -1;\n        value.erase(0, 1);\n    }\n    for (int i = 0; i < value.size(); i++) {\n        if (value[i] >= '0' && value[i] <= '9') {\n            result = result * 10 + value[i] - '0';\n        }\n    }\n    result = result * sign;\n    if (result < 0) {\n        result = result - 1;\n    }\n    return result;",
    "    long result = 0;\n    std::stringstream ss(value);\n    ss >> result;\n    return result;",
    "    long result = 0;\n    long sign = 1;\n    long power = 1;\n    long digit = 0;\n    long max_power = 0;\n    long max_digit = 0;\n    long max_value = 0;\n    long min_value = 0;\n    long min_digit = 0;\n    long min_power = 0;\n    long diff = 0;\n    long diff_sign = 0;\n    long diff_power = 0;\n    long diff_digit = 0;\n    long diff_value = 0;\n    long diff_max_value = 0;\n    long diff_min_value = 0;\n    long diff_max_power = 0;\n    long diff_min_power = 0;\n    long diff_max_digit = 0;\n    long diff_min_digit = 0;\n    long diff_max_value_sign = 0;\n    long diff_min_value_sign = 0;\n    long diff_max_value_power = 0;\n    long diff_min_value_power = 0;\n    long diff_max_value_digit = 0;\n    long diff_min_value_digit = 0;\n    long diff_max_value_value = 0;\n    long diff_min_value_value = 0;\n    long diff_max_value_value_sign = 0;\n    long diff_min_value_value_sign = 0;\n    long diff_max_value_value_power = 0;\n    long diff_min_value_value_power = 0;\n    long diff_max_value_value_digit = 0;\n    long diff_min_value_value_digit = 0;\n    long diff_max_value_value_value = 0;\n    long diff_min_value_value_value = 0;\n    long diff_max_value_value_value_sign = 0;\n    long diff_min_value_value_value_sign = 0;\n    long diff_max_value_value_value_power = 0;\n    long diff_min_value_value_value_power = 0;\n    long diff_max_value_value_value_digit = 0;\n    long diff_min_value_value_value_",
    "    long result = 0;\n    long sign = 1;\n    if (value[0] == '-') {\n        sign = -1;\n        value = value.substr(1);\n    }\n    for (int i = 0; i < value.size(); i++) {\n        if (value[i] >= '0' && value[i] <= '9') {\n            result = result * 10 + value[i] - '0';\n        }\n    }\n    result = result * sign;\n    if (result > INT_MAX) {\n        return INT_MAX;\n    }\n    if (result < INT_MIN) {\n        return INT_MIN;\n    }\n    return result;",
    "    long result = 0;\n    long sign = 1;\n    if (value[0] == '-') {\n        sign = -1;\n        value.erase(0, 1);\n    }\n    for (int i = 0; i < value.size(); i++) {\n        if (value[i] >= '0' && value[i] <= '9') {\n            result = result * 10 + value[i] - '0';\n        }\n    }\n    result = result * sign;\n    return result;",
    "    long result = 0;\n    std::string::iterator it = value.begin();\n    while (it != value.end()) {\n        if (*it == '.') {\n            break;\n        }\n        result = result * 10 + *it - '0';\n        ++it;\n    }\n    if (it != value.end()) {\n        result = result * 10 + *it - '0';\n        ++it;\n    }\n    if (it != value.end()) {\n        result = result * 10 + *it - '0';\n    }\n    return result;",
    "    long result = 0;\n    long sign = 1;\n    long num = 0;\n    long num_sign = 1;\n    long num_abs = 0;\n    long num_abs_sign = 1;\n    long num_abs_sign_temp = 1;\n    long num_abs_sign_temp_2 = 1;\n    long num_abs_sign_temp_3 = 1;\n    long num_abs_sign_temp_4 = 1;\n    long num_abs_sign_temp_5 = 1;\n    long num_abs_sign_temp_6 = 1;\n    long num_abs_sign_temp_7 = 1;\n    long num_abs_sign_temp_8 = 1;\n    long num_abs_sign_temp_9 = 1;\n    long num_abs_sign_temp_10 = 1;\n    long num_abs_sign_temp_11 = 1;\n    long num_abs_sign_temp_12 = 1;\n    long num_abs_sign_temp_13 = 1;\n    long num_abs_sign_temp_14 = 1;\n    long num_abs_sign_temp_15 = 1;\n    long num_abs_sign_temp_16 = 1;\n    long num_abs_sign_temp_17 = 1;\n    long num_abs_sign_temp_18 = 1;\n    long num_abs_sign_temp_19 = 1;\n    long num_abs_sign_temp_20 = 1;\n    long num_abs_sign_temp_21 = 1;\n    long num_abs_sign_temp_22 = 1;\n    long num_abs_sign_temp_23 = 1;\n    long num_abs_sign_temp_24 = 1;\n    long num_abs_sign_temp_25 = 1;\n    long num_abs_sign_temp_26 = 1;\n    long num_abs_sign_temp_27 = 1;\n    long num_abs_sign_temp_28 = 1;\n    long num_abs_sign_temp_29 = 1;\n    long num_abs_sign_temp_30 = 1;\n    long num_abs_sign_temp_31 = 1;",
    "    long result = 0;\n    std::string::iterator it = value.begin();\n    while (it != value.end() && *it != '.') {\n        result = result * 10 + *it - '0';\n        ++it;\n    }\n    if (it != value.end()) {\n        result = result * 10 + *it - '0';\n    }\n    return result;",
    "    long result = 0;\n    long sign = 1;\n    if (value[0] == '-') {\n        sign = -1;\n        value = value.substr(1);\n    }\n    for (int i = 0; i < value.size(); i++) {\n        if (value[i] >= '0' && value[i] <= '9') {\n            result = result * 10 + value[i] - '0';\n        }\n    }\n    result = result * sign;\n    if (result > INT_MAX) {\n        return INT_MAX;\n    }\n    if (result < INT_MIN) {\n        return INT_MIN;\n    }\n    return result;",
    "    long result = 0;\n    long sign = 1;\n    if (value[0] == '-') {\n        sign = -1;\n        value.erase(0, 1);\n    }\n    for (int i = 0; i < value.size(); ++i) {\n        if (value[i] == '.') {\n            result += sign * (value[i + 1] - '0') * pow(10, value.size() - i - 1);\n            break;\n        }\n        result += sign * (value[i] - '0') * pow(10, value.size() - i - 1);\n    }\n    return result;",
    "    long result = 0;\n    long sign = 1;\n    long power = 1;\n    for (auto c : value) {\n        if (c == '-') {\n            sign = -1;\n        } else if (c == '.') {\n            power = 10;\n        } else {\n            result += sign * (c - '0') * power;\n            power *= 10;\n        }\n    }\n    return result;",
    "    long result = 0;\n    long sign = 1;\n    long power = 1;\n    for (int i = value.size() - 1; i >= 0; i--) {\n        if (value[i] == '.') {\n            result += sign * power * (value[i] - '0');\n            sign = -sign;\n            power = 10;\n        } else {\n            result += sign * power * (value[i] - '0');\n            sign = -sign;\n            power = 1;\n        }\n    }\n    return result;",
    "    long result = 0;\n    std::string::iterator it = value.begin();\n    while (it != value.end()) {\n        if (*it == '.') {\n            result = 0;\n            break;\n        }\n        result = result * 10 + *it - '0';\n        ++it;\n    }\n    if (it != value.end()) {\n        if (*it == '.') {\n            result = 0;\n        } else {\n            result = result * 10 + *it - '0';\n        }\n    }\n    return result;",
    "    long result = 0;\n    long sign = 1;\n    long power = 1;\n    long temp = 0;\n    long diff = 0;\n    long diff_sign = 0;\n    long diff_power = 0;\n    long diff_temp = 0;\n    long diff_diff = 0;\n    long diff_diff_sign = 0;\n    long diff_diff_power = 0;\n    long diff_diff_temp = 0;\n    long diff_diff_diff = 0;\n    long diff_diff_diff_sign = 0;\n    long diff_diff_diff_power = 0;\n    long diff_diff_diff_temp = 0;\n    long diff_diff_diff_diff = 0;\n    long diff_diff_diff_diff_sign = 0;\n    long diff_diff_diff_diff_power = 0;\n    long diff_diff_diff_diff_temp = 0;\n    long diff_diff_diff_diff_diff = 0;\n    long diff_diff_diff_diff_diff_sign = 0;\n    long diff_diff_diff_diff_diff_power = 0;\n    long diff_diff_diff_diff_diff_temp = 0;\n    long diff_diff_diff_diff_diff_diff = 0;\n    long diff_diff_diff_diff_diff_diff_sign = 0;\n    long diff_diff_diff_diff_diff_diff_power = 0;\n    long diff_diff_diff_diff_diff_diff_temp = 0;\n    long diff_diff_diff_diff_diff_diff_diff = 0;\n    long diff_diff_diff_diff_diff_diff_diff_sign = 0;\n    long diff_diff_diff_diff_diff_diff_diff_power = 0;\n    long diff_diff_diff_diff_diff_diff_diff_temp = 0;\n    long diff_diff_diff_diff_diff_diff_diff_diff = 0;\n    long diff_diff_diff_diff_diff_diff_diff_diff_sign = 0;\n    long diff_diff_diff_diff_diff_diff_diff_diff_power = 0;\n    long diff_diff_diff_diff_diff",
    "    long result = 0;\n    std::stringstream ss(value);\n    ss >> result;\n    return result;",
    "    long result = 0;\n    long sign = 1;\n    if (value[0] == '-') {\n        sign = -1;\n        value = value.substr(1);\n    }\n    for (int i = value.length() - 1; i >= 0; i--) {\n        if (value[i] >= '0' && value[i] <= '9') {\n            result = result * 10 + value[i] - '0';\n        }\n    }\n    result = result * sign;\n    return result;",
    "    long result = 0;\n    std::stringstream ss(value);\n    ss >> result;\n    return result;",
    "    long result = 0;\n    std::stringstream ss(value);\n    ss >> result;\n    return result;",
    "    long result = 0;\n    long sign = 1;\n    if (value[0] == '-') {\n        sign = -1;\n        value.erase(0, 1);\n    }\n    for (int i = 0; i < value.size(); i++) {\n        if (value[i] >= '0' && value[i] <= '9') {\n            result = result * 10 + value[i] - '0';\n        }\n    }\n    result = result * sign;\n    if (result > INT_MAX) {\n        result = INT_MAX;\n    } else if (result < INT_MIN) {\n        result = INT_MIN;\n    }\n    return result;",
    "    long result = 0;\n    long sign = 1;\n    if (value[0] == '-') {\n        sign = -1;\n        value.erase(0, 1);\n    }\n    for (int i = 0; i < value.size(); i++) {\n        if (value[i] >= '0' && value[i] <= '9') {\n            result = result * 10 + (value[i] - '0');\n        }\n    }\n    result = result * sign;\n    if (result < 0) {\n        result = -result;\n    }\n    return result;",
    "    long result = 0;\n    std::string::size_type i = 0;\n    std::string::size_type j = 0;\n    while (i < value.length() && value[i] == '0') {\n        i++;\n    }\n    while (i < value.length() && value[i] >= '0' && value[i] <= '9') {\n        result = result * 10 + value[i] - '0';\n        i++;\n    }\n    if (i < value.length()) {\n        j = i;\n        while (j < value.length() && value[j] >= '0' && value[j] <= '9') {\n            j++;\n        }\n        if (j - i == 1) {\n            result = result * 10 + value[i] - '0';\n        } else {\n            result = result * 10 + value[i] - '0' + value[j] - '0';\n        }\n    }\n    return result;",
    "    long result = 0;\n    std::stringstream ss(value);\n    ss >> result;\n    return result;",
    "    long result = 0;\n    std::stringstream ss(value);\n    ss >> result;\n    return result;",
    "    long result = 0;\n    long sign = 1;\n    if (value[0] == '-') {\n        sign = -1;\n        value.erase(0, 1);\n    }\n    for (auto it = value.begin(); it != value.end(); ++it) {\n        if (*it == '.') {\n            result = result * 10 + sign * (*it - '0');\n            continue;\n        }\n        result = result * 10 + sign * (*it - '0');\n    }\n    return result;",
    "    long result = 0;\n    std::string::iterator it = value.begin();\n    while (it != value.end() && *it == ' ') {\n        it++;\n    }\n    if (it == value.end()) {\n        return 0;\n    }\n    if (*it == '-') {\n        result = -1;\n        it++;\n    }\n    while (it != value.end() && *it >= '0' && *it <= '9') {\n        result = result * 10 + (*it - '0');\n        it++;\n    }\n    return result;",
    "    long result = 0;\n    std::stringstream ss(value);\n    ss >> result;\n    return result;",
    "    long result = 0;\n    std::string::iterator it = value.begin();\n    while (it != value.end() && std::isdigit(*it)) {\n        result = result * 10 + *it - '0';\n        ++it;\n    }\n    if (it != value.end()) {\n        result = result * 10 + *it - '0';\n    }\n    return result;",
    "    long result = 0;\n    long sign = 1;\n    if (value[0] == '-') {\n        sign = -1;\n        value = value.substr(1);\n    }\n    for (int i = value.length() - 1; i >= 0; i--) {\n        if (value[i] >= '0' && value[i] <= '9') {\n            result = result * 10 + value[i] - '0';\n        }\n    }\n    result = result * sign;\n    if (result < 0) {\n        result = -result;\n    }\n    return result;",
    "    long result = 0;\n    std::stringstream ss(value);\n    ss >> result;\n    return result;",
    "    long result = 0;\n    long sign = 1;\n    if (value[0] == '-') {\n        sign = -1;\n        value = value.substr(1);\n    }\n    for (int i = 0; i < value.length(); i++) {\n        if (value[i] >= '0' && value[i] <= '9') {\n            result = result * 10 + value[i] - '0';\n        }\n    }\n    result = result * sign;\n    return result;",
    "    long result = 0;\n    long sign = 1;\n    if (value[0] == '-') {\n        sign = -1;\n        value = value.substr(1);\n    }\n    for (int i = 0; i < value.size(); i++) {\n        if (value[i] >= '0' && value[i] <= '9') {\n            result = result * 10 + value[i] - '0';\n        }\n    }\n    result = result * sign;\n    if (result > INT_MAX) {\n        result = INT_MAX;\n    } else if (result < INT_MIN) {\n        result = INT_MIN;\n    }\n    return result;",
    "    long result = 0;\n    std::stringstream ss(value);\n    ss >> result;\n    return result;",
    "    long result = 0;\n    std::stringstream ss(value);\n    ss >> result;\n    return result;",
    "    long result = 0;\n    std::stringstream ss(value);\n    ss >> result;\n    return result;",
    "    long result = 0;\n    std::stringstream ss(value);\n    ss >> result;\n    return result;",
    "    long result = 0;\n    std::stringstream ss(value);\n    ss >> result;\n    return result;",
    "    long result = 0;\n    std::stringstream ss(value);\n    ss >> result;\n    return result;",
    "    long result = 0;\n    std::stringstream ss(value);\n    ss >> result;\n    return result;",
    "    long result = 0;\n    std::stringstream ss(value);\n    ss >> result;\n    return result;",
    "    long result = 0;\n    long sign = 1;\n    if (value[0] == '-') {\n        sign = -1;\n        value = value.substr(1);\n    }\n    for (int i = 0; i < value.size(); i++) {\n        if (value[i] >= '0' && value[i] <= '9') {\n            result = result * 10 + (value[i] - '0');\n        }\n    }\n    result = result * sign;\n    return result;",
    "    long result = 0;\n    long sign = 1;\n    if (value[0] == '-') {\n        sign = -1;\n        value = value.substr(1);\n    }\n    for (int i = value.size() - 1; i >= 0; i--) {\n        if (value[i] >= '0' && value[i] <= '9') {\n            result += (value[i] - '0') * sign * pow(10, i);\n        }\n    }\n    return result;",
    "    long result = 0;\n    long sign = 1;\n    if (value[0] == '-') {\n        sign = -1;\n        value = value.substr(1);\n    }\n    for (int i = 0; i < value.length(); i++) {\n        if (value[i] >= '0' && value[i] <= '9') {\n            result = result * 10 + value[i] - '0';\n        }\n    }\n    result = result * sign;\n    return result;",
    "    long result = 0;\n    long sign = 1;\n    long power = 1;\n    for (int i = value.size() - 1; i >= 0; i--) {\n        if (value[i] == '.') {\n            result += sign * power * (value[i] - '0');\n            power *= 10;\n        } else if (value[i] == '-') {\n            sign = -1;\n        } else {\n            result += sign * power * (value[i] - '0');\n            power *= 10;\n        }\n    }\n    return result;",
    "    long result = 0;\n    std::stringstream ss(value);\n    ss >> result;\n    return result;",
    "    long result = 0;\n    std::stringstream ss(value);\n    ss >> result;\n    return result;",
    "    long result = 0;\n    long sign = 1;\n    if (value[0] == '-') {\n        sign = -1;\n        value = value.substr(1);\n    }\n    for (int i = value.size() - 1; i >= 0; i--) {\n        if (value[i] >= '0' && value[i] <= '9') {\n            result = result * 10 + value[i] - '0';\n        }\n    }\n    result = result * sign;\n    return result;",
    "    long result = 0;\n    long sign = 1;\n    if (value[0] == '-') {\n        sign = -1;\n        value.erase(0, 1);\n    }\n    for (int i = 0; i < value.size(); i++) {\n        if (value[i] >= '0' && value[i] <= '9') {\n            result = result * 10 + value[i] - '0';\n        }\n    }\n    result = result * sign;\n    if (result < 0) {\n        result = 0;\n    }\n    return result;",
    "    long result = 0;\n    long sign = 1;\n    if (value[0] == '-') {\n        sign = -1;\n        value.erase(0, 1);\n    }\n    for (auto it = value.begin(); it != value.end(); ++it) {\n        if (*it == '.') {\n            result += sign * std::stoi(value.substr(0, it - value.begin()));\n            value.erase(0, it - value.begin());\n            break;\n        }\n        result += sign * std::stoi(*it - '0');\n    }\n    result += sign * std::stoi(value);\n    return result;",
    "    long result = 0;\n    std::stringstream ss(value);\n    ss >> result;\n    return result;",
    "    long result = 0;\n    std::string::size_type i = 0;\n    while (i < value.length() && value[i] == ' ') {\n        i++;\n    }\n    if (i < value.length()) {\n        if (value[i] == '-') {\n            i++;\n        }\n        while (i < value.length() && value[i] >= '0' && value[i] <= '9') {\n            result = result * 10 + value[i] - '0';\n            i++;\n        }\n    }\n    return result;",
    "    long result = 0;\n    long sign = 1;\n    long power = 1;\n    for (int i = value.size() - 1; i >= 0; i--) {\n        if (value[i] == '.') {\n            result += sign * power * (value[i] - '0');\n            sign = -sign;\n            power = 10;\n        } else {\n            result += sign * power * (value[i] - '0');\n            sign = 1;\n            power = 1;\n        }\n    }\n    return result;",
    "    long result = 0;\n    std::string::size_type i = 0;\n    std::string::size_type j = 0;\n    while (i < value.size() && value[i] == '0') {\n        i++;\n    }\n    if (i == value.size()) {\n        return 0;\n    }\n    while (j < value.size() && value[j] >= '0' && value[j] <= '9') {\n        result = result * 10 + value[j] - '0';\n        j++;\n    }\n    if (i < j) {\n        result = result * 10 + value[i] - '0';\n    }\n    return result;",
    "    long result = 0;\n    std::stringstream ss(value);\n    ss >> result;\n    return result;",
    "    long result = 0;\n    long sign = 1;\n    long power = 1;\n    for (int i = value.length() - 1; i >= 0; i--) {\n        if (value[i] == '.') {\n            break;\n        }\n        if (value[i] == '-') {\n            sign = -1;\n        }\n        else {\n            result += sign * (value[i] - '0') * power;\n        }\n        power *= 10;\n    }\n    return result;",
    "    long result = 0;\n    long sign = 1;\n    if (value[0] == '-') {\n        sign = -1;\n        value = value.substr(1);\n    }\n    for (int i = 0; i < value.length(); i++) {\n        if (value[i] == '.') {\n            result += sign * (value[i + 1] - '0') * (long)pow(10, value.length() - i - 2);\n            break;\n        }\n        result += sign * (value[i] - '0') * (long)pow(10, value.length() - i - 1);\n    }\n    return result;",
    "    long result = 0;\n    long sign = 1;\n    if (value[0] == '-') {\n        sign = -1;\n        value = value.substr(1);\n    }\n    for (int i = 0; i < value.length(); i++) {\n        if (value[i] >= '0' && value[i] <= '9') {\n            result = result * 10 + value[i] - '0';\n        }\n    }\n    result = sign * result;\n    return result;",
    "    long result = 0;\n    long sign = 1;\n    long temp = 0;\n    long diff = 0;\n    long max_diff = 0;\n    long max_diff_sign = 0;\n    long max_diff_temp = 0;\n    long max_diff_sign_temp = 0;\n    for (int i = 0; i < value.size(); i++) {\n        if (value[i] == '-') {\n            sign = -1;\n        } else if (value[i] >= '0' && value[i] <= '9') {\n            temp = temp * 10 + value[i] - '0';\n        } else {\n            continue;\n        }\n    }\n    if (sign == -1) {\n        temp *= -1;\n    }\n    diff = abs(temp);\n    max_diff = abs(temp);\n    max_diff_sign = sign;\n    max_diff_temp = temp;\n    max_diff_sign_temp = sign;\n    for (int i = 0; i < value.size(); i++) {\n        if (value[i] == '-') {\n            sign = -1;\n        } else if (value[i] >= '0' && value[i] <= '9') {\n            temp = temp * 10 + value[i] - '0';\n            diff = abs(temp);\n            if (diff > max_diff) {\n                max_diff = diff;\n                max_diff_sign = sign;\n                max_diff_temp = temp;\n                max_diff_sign_temp = sign;\n            }\n        }\n    }\n    if (max_diff_sign == 1) {\n        result = max_diff_temp;\n    } else {\n        result = max_diff_temp * -1;\n    }\n    return result;",
    "    long result = 0;\n    std::string::iterator it = value.begin();\n    while (it != value.end()) {\n        if (*it == '.') {\n            result = 0;\n            break;\n        }\n        result = result * 10 + (*it - '0');\n        ++it;\n    }\n    if (it == value.end()) {\n        return result;\n    }\n    if (result > 0) {\n        result = result + 5;\n    } else {\n        result = result - 5;\n    }\n    if (result < 0) {\n        result = 0;\n    }\n    return result;",
    "    long result = 0;\n    long sign = 1;\n    if (value[0] == '-') {\n        sign = -1;\n        value.erase(0, 1);\n    }\n    for (int i = 0; i < value.length(); i++) {\n        if (value[i] >= '0' && value[i] <= '9') {\n            result = result * 10 + value[i] - '0';\n        }\n    }\n    result = result * sign;\n    if (result > INT_MAX) {\n        return INT_MAX;\n    } else if (result < INT_MIN) {\n        return INT_MIN;\n    }\n    return result;",
    "    long result = 0;\n    long sign = 1;\n    if (value[0] == '-') {\n        sign = -1;\n        value.erase(0, 1);\n    }\n    for (auto &c : value) {\n        if (c == '.') {\n            result = result * 10 + 0;\n        } else {\n            result = result * 10 + c - '0';\n        }\n    }\n    result = result * sign;\n    return result;",
    "    long result = 0;\n    long sign = 1;\n    long power = 1;\n    long temp = 0;\n    for (int i = value.length() - 1; i >= 0; i--) {\n        if (value[i] == '.') {\n            temp = 0;\n            while (i >= 0) {\n                temp = temp * 10 + value[i] - '0';\n                i--;\n            }\n            result = result + (temp * power);\n            power = power * 10;\n        } else {\n            if (value[i] == '-') {\n                sign = -1;\n            } else {\n                result = result + (value[i] - '0') * power;\n            }\n            power = power * 10;\n        }\n    }\n    result = result * sign;\n    return result;",
    "    long result = 0;\n    std::stringstream ss(value);\n    ss >> result;\n    return result;",
    "    long result = 0;\n    long sign = 1;\n    if (value[0] == '-') {\n        sign = -1;\n        value.erase(0, 1);\n    }\n    for (int i = 0; i < value.length(); i++) {\n        if (value[i] >= '0' && value[i] <= '9') {\n            result = result * 10 + value[i] - '0';\n        }\n    }\n    result = result * sign;\n    if (result > INT_MAX) {\n        return INT_MAX;\n    }\n    if (result < INT_MIN) {\n        return INT_MIN;\n    }\n    return result;",
    "    long result = 0;\n    long sign = 1;\n    long power = 1;\n    long digit = 0;\n    long max_power = 0;\n    long max_digit = 0;\n    long max_value = 0;\n    long min_value = 0;\n    long min_power = 0;\n    long min_digit = 0;\n    long min_value = 0;\n    for (int i = 0; i < value.length(); i++) {\n        if (value[i] == '-') {\n            sign = -1;\n        } else if (value[i] >= '0' && value[i] <= '9') {\n            digit = value[i] - '0';\n            if (power > max_power) {\n                max_power = power;\n                max_digit = digit;\n                max_value = result;\n            }\n            if (power < min_power) {\n                min_power = power;\n                min_digit = digit;\n                min_value = result;\n            }\n            if (digit > max_digit) {\n                max_digit = digit;\n                max_value = result;\n            }\n            if (digit < min_digit) {\n                min_digit = digit;\n                min_value = result;\n            }\n            result = result * 10 + digit;\n            power = power * 10;\n        }\n    }\n    if (sign == -1) {\n        result = -result;\n    }\n    if (result == max_value) {\n        result = max_value + max_power;\n    } else if (result == min_value) {\n        result = min_value - min_power;\n    }\n    return result;",
    "    long result = 0;\n    long sign = 1;\n    if (value[0] == '-') {\n        sign = -1;\n        value.erase(0, 1);\n    }\n    for (auto c : value) {\n        if (c >= '0' && c <= '9') {\n            result = result * 10 + (c - '0');\n        }\n    }\n    result = result * sign;\n    if (result > INT_MAX) {\n        return INT_MAX;\n    }\n    if (result < INT_MIN) {\n        return INT_MIN;\n    }\n    return result;",
    "    long result = 0;\n    std::stringstream ss(value);\n    ss >> result;\n    return result;",
    "    long result = 0;\n    std::stringstream ss(value);\n    ss >> result;\n    return result;",
    "    long result = 0;\n    long sign = 1;\n    long temp = 0;\n    long power = 1;\n    long power_sign = 1;\n    long power_sign_temp = 1;\n    long power_sign_temp_2 = 1;\n    long power_sign_temp_3 = 1;\n    long power_sign_temp_4 = 1;\n    long power_sign_temp_5 = 1;\n    long power_sign_temp_6 = 1;\n    long power_sign_temp_7 = 1;\n    long power_sign_temp_8 = 1;\n    long power_sign_temp_9 = 1;\n    long power_sign_temp_10 = 1;\n    long power_sign_temp_11 = 1;\n    long power_sign_temp_12 = 1;\n    long power_sign_temp_13 = 1;\n    long power_sign_temp_14 = 1;\n    long power_sign_temp_15 = 1;\n    long power_sign_temp_16 = 1;\n    long power_sign_temp_17 = 1;\n    long power_sign_temp_18 = 1;\n    long power_sign_temp_19 = 1;\n    long power_sign_temp_20 = 1;\n    long power_sign_temp_21 = 1;\n    long power_sign_temp_22 = 1;\n    long power_sign_temp_23 = 1;\n    long power_sign_temp_24 = 1;\n    long power_sign_temp_25 = 1;\n    long power_sign_temp_26 = 1;\n    long power_sign_temp_27 = 1;\n    long power_sign_temp_28 = 1;\n    long power_sign_temp_29 = 1;\n    long power_sign_temp_30 = 1;\n    long power_sign_temp_31 = 1;\n    long power_sign_temp_32 = 1;\n    long power_sign_temp_33 = 1;\n    long power_sign_temp_34 = 1;\n    long power_sign_temp_35 = 1;\n    long power_sign_temp_36 = 1;\n    long power_sign_temp_37",
    "    long result = 0;\n    std::stringstream ss(value);\n    ss >> result;\n    return result;",
    "    long result = 0;\n    long sign = 1;\n    if (value[0] == '-') {\n        sign = -1;\n        value.erase(0, 1);\n    }\n    for (auto i = value.begin(); i != value.end(); ++i) {\n        if (*i == '.') {\n            result += sign * std::stoi(value.substr(0, i - value.begin()));\n            value.erase(0, i - value.begin());\n            break;\n        }\n        result += sign * std::stoi(*i - '0');\n    }\n    return result;",
    "    long result = 0;\n    long sign = 1;\n    if (value[0] == '-') {\n        sign = -1;\n        value = value.substr(1);\n    }\n    for (int i = 0; i < value.size(); i++) {\n        if (value[i] >= '0' && value[i] <= '9') {\n            result = result * 10 + value[i] - '0';\n        }\n    }\n    result = result * sign;\n    return result;",
    "    long result = 0;\n    std::string::size_type pos = 0;\n    while (pos < value.length()) {\n        if (value[pos] == '.') {\n            pos++;\n            while (pos < value.length() && value[pos] >= '0' && value[pos] <= '9') {\n                result = result * 10 + value[pos] - '0';\n                pos++;\n            }\n            break;\n        } else {\n            result = result * 10 + value[pos] - '0';\n            pos++;\n        }\n    }\n    if (pos < value.length()) {\n        if (value[pos] == '.') {\n            pos++;\n            while (pos < value.length() && value[pos] >= '0' && value[pos] <= '9') {\n                result = result * 10 + value[pos] - '0';\n                pos++;\n            }\n        } else {\n            result = result * 10 + value[pos] - '0';\n        }\n    }\n    return result;",
    "    long result = 0;\n    std::stringstream ss(value);\n    ss >> result;\n    return result;",
    "    long result = 0;\n    std::stringstream ss(value);\n    ss >> result;\n    return result;",
    "    long result = 0;\n    std::stringstream ss(value);\n    ss >> result;\n    return result;",
    "    long result = 0;\n    long sign = 1;\n    if (value[0] == '-') {\n        sign = -1;\n        value = value.substr(1);\n    }\n    for (int i = 0; i < value.size(); i++) {\n        if (value[i] == '.') {\n            result = sign * (value.substr(0, i) - 0);\n            break;\n        }\n        result = sign * (value[i] - '0') * (long)pow(10, value.size() - i - 1);\n        if (result > INT_MAX) {\n            result = INT_MAX;\n            break;\n        }\n        if (result < INT_MIN) {\n            result = INT_MIN;\n            break;\n        }\n    }\n    return result;",
    "    long result = 0;\n    std::stringstream ss(value);\n    ss >> result;\n    return result;",
    "    long result = 0;\n    long sign = 1;\n    if (value[0] == '-') {\n        sign = -1;\n        value = value.substr(1);\n    }\n    for (int i = 0; i < value.size(); i++) {\n        if (value[i] >= '0' && value[i] <= '9') {\n            result = result * 10 + value[i] - '0';\n        }\n    }\n    result = result * sign;\n    return result;",
    "    long result = 0;\n    long sign = 1;\n    long power = 1;\n    long digit = 0;\n    long max_power = 0;\n    long max_digit = 0;\n    long max_diff = 0;\n    long diff = 0;\n    long max_diff_power = 0;\n    long max_diff_digit = 0;\n    long diff_power = 0;\n    long diff_digit = 0;\n    long diff_sign = 0;\n    long diff_sign_power = 0;\n    long diff_sign_digit = 0;\n    long diff_sign_sign_power = 0;\n    long diff_sign_sign_digit = 0;\n    long diff_sign_sign_sign_power = 0;\n    long diff_sign_sign_sign_digit = 0;\n    long diff_sign_sign_sign_sign_power = 0;\n    long diff_sign_sign_sign_sign_digit = 0;\n    long diff_sign_sign_sign_sign_sign_power = 0;\n    long diff_sign_sign_sign_sign_sign_digit = 0;\n    long diff_sign_sign_sign_sign_sign_sign_power = 0;\n    long diff_sign_sign_sign_sign_sign_sign_digit = 0;\n    long diff_sign_sign_sign_sign_sign_sign_sign_power = 0;\n    long diff_sign_sign_sign_sign_sign_sign_sign_digit = 0;\n    long diff_sign_sign_sign_sign_sign_sign_sign_sign_power = 0;\n    long diff_sign_sign_sign_sign_sign_sign_sign_sign_digit = 0;\n    long diff_sign_sign_sign_sign_sign_sign_sign_sign_sign_power = 0;\n    long diff_sign_sign_sign_sign_sign_sign_sign_sign_sign_digit = 0;\n    long diff_sign_sign_sign_sign_sign_sign_sign_sign_sign_sign_power = 0;\n    long diff_sign_sign_sign_sign_sign_sign_sign_sign_sign_sign_digit = 0;\n    ",
    "    long result = 0;\n    std::stringstream ss(value);\n    ss >> result;\n    return result;",
    "    long result = 0;\n    std::stringstream ss(value);\n    ss >> result;\n    return result;",
    "    long result = 0;\n    long sign = 1;\n    long power = 0;\n    long temp = 0;\n    long max = 0;\n    long min = 0;\n    long diff = 0;\n    long diff_sign = 0;\n    long diff_power = 0;\n    long diff_temp = 0;\n    long diff_max = 0;\n    long diff_min = 0;\n    long diff_diff = 0;\n    long diff_diff_sign = 0;\n    long diff_diff_power = 0;\n    long diff_diff_temp = 0;\n    long diff_diff_max = 0;\n    long diff_diff_min = 0;\n    long diff_diff_diff = 0;\n    long diff_diff_diff_sign = 0;\n    long diff_diff_diff_power = 0;\n    long diff_diff_diff_temp = 0;\n    long diff_diff_diff_max = 0;\n    long diff_diff_diff_min = 0;\n    long diff_diff_diff_diff = 0;\n    long diff_diff_diff_diff_sign = 0;\n    long diff_diff_diff_diff_power = 0;\n    long diff_diff_diff_diff_temp = 0;\n    long diff_diff_diff_diff_max = 0;\n    long diff_diff_diff_diff_min = 0;\n    long diff_diff_diff_diff_diff = 0;\n    long diff_diff_diff_diff_diff_sign = 0;\n    long diff_diff_diff_diff_diff_power = 0;\n    long diff_diff_diff_diff_diff_temp = 0;\n    long diff_diff_diff_diff_diff_max = 0;\n    long diff_diff_diff_diff_diff_min = 0;\n    long diff_diff_diff_diff_diff_diff = 0;\n    long diff_diff_diff_diff_diff_diff_sign = 0;\n    long diff_diff_diff_diff_diff_diff_power = 0;\n    long diff_diff_diff_diff_diff_diff_temp = 0;\n    long diff_diff_diff_diff_diff_diff_max =",
    "    long result = 0;\n    long sign = 1;\n    long power = 1;\n    for (int i = value.length() - 1; i >= 0; i--) {\n        if (value[i] == '.') {\n            power = 10;\n            break;\n        }\n        if (value[i] == '-') {\n            sign = -1;\n            continue;\n        }\n        result += sign * (value[i] - '0') * power;\n        power *= 10;\n    }\n    return result;",
    "    long result = 0;\n    long sign = 1;\n    if (value[0] == '-') {\n        sign = -1;\n        value = value.substr(1);\n    }\n    for (int i = value.size() - 1; i >= 0; i--) {\n        if (value[i] >= '0' && value[i] <= '9') {\n            result = result * 10 + value[i] - '0';\n        }\n    }\n    result = result * sign;\n    if (result < 0) {\n        result = -result;\n    }\n    return result;",
    "    long result = 0;\n    long sign = 1;\n    if (value[0] == '-') {\n        sign = -1;\n        value.erase(0, 1);\n    }\n    for (int i = 0; i < value.size(); i++) {\n        if (value[i] >= '0' && value[i] <= '9') {\n            result = result * 10 + value[i] - '0';\n        }\n    }\n    result = result * sign;\n    return result;",
    "    long result = 0;\n    long sign = 1;\n    if (value[0] == '-') {\n        sign = -1;\n        value.erase(0, 1);\n    }\n    for (int i = 0; i < value.size(); i++) {\n        if (value[i] == '.') {\n            result = sign * (value[i + 1] - '0');\n            break;\n        }\n        result = sign * (value[i] - '0');\n    }\n    return result;",
    "    long result = 0;\n    long sign = 1;\n    if (value[0] == '-') {\n        sign = -1;\n        value.erase(0, 1);\n    }\n    for (int i = 0; i < value.size(); i++) {\n        if (value[i] >= '0' && value[i] <= '9') {\n            result = result * 10 + value[i] - '0';\n        }\n    }\n    result = sign * result;\n    return result;",
    "    long result = 0;\n    long sign = 1;\n    long abs_value = 0;\n    long power = 1;\n    for (int i = value.size() - 1; i >= 0; i--) {\n        if (value[i] == '-') {\n            sign = -1;\n        } else if (value[i] >= '0' && value[i] <= '9') {\n            abs_value = abs_value * 10 + value[i] - '0';\n        } else {\n            break;\n        }\n    }\n    if (abs_value == 0) {\n        return 0;\n    }\n    if (abs_value < 0) {\n        abs_value *= -1;\n    }\n    while (abs_value >= power) {\n        result += power;\n        power *= 10;\n    }\n    result += abs_value / power;\n    result *= sign;\n    return result;",
    "    long result = 0;\n    long sign = 1;\n    if (value[0] == '-') {\n        sign = -1;\n        value.erase(0, 1);\n    }\n    for (auto c : value) {\n        if (c == '.') {\n            result = result * 10 + 0;\n        } else {\n            result = result * 10 + c - '0';\n        }\n    }\n    result = sign * result;\n    return result;",
    "    long result = 0;\n    long sign = 1;\n    if (value[0] == '-') {\n        sign = -1;\n        value.erase(0, 1);\n    }\n    for (auto &c : value) {\n        if (c == '.') {\n            result += sign * (long) std::stod(value);\n            return result;\n        }\n        result = result * 10 + (long) c - '0';\n    }\n    return result * sign;",
    "    long result = 0;\n    long sign = 1;\n    if (value[0] == '-') {\n        sign = -1;\n        value = value.substr(1);\n    }\n    for (int i = 0; i < value.size(); ++i) {\n        if (value[i] >= '0' && value[i] <= '9') {\n            result = result * 10 + value[i] - '0';\n        }\n    }\n    result = result * sign;\n    if (result > INT_MAX) {\n        return INT_MAX;\n    }\n    if (result < INT_MIN) {\n        return INT_MIN;\n    }\n    return result;",
    "    long result = 0;\n    long sign = 1;\n    long power = 1;\n    long digit = 0;\n    long max_power = 0;\n    for (int i = 0; i < value.size(); i++) {\n        if (value[i] == '-') {\n            sign = -1;\n        } else if (value[i] >= '0' && value[i] <= '9') {\n            digit = value[i] - '0';\n            if (power > max_power) {\n                max_power = power;\n            }\n            result += digit * power;\n            power *= 10;\n        }\n    }\n    result = result + (max_power - power) / 2;\n    result *= sign;\n    return result;",
    "    long result = 0;\n    long sign = 1;\n    if (value[0] == '-') {\n        sign = -1;\n        value = value.substr(1);\n    }\n    for (int i = 0; i < value.size(); i++) {\n        if (value[i] >= '0' && value[i] <= '9') {\n            result = result * 10 + value[i] - '0';\n        }\n    }\n    result = result * sign;\n    return result;",
    "    long result = 0;\n    std::stringstream ss(value);\n    ss >> result;\n    return result;",
    "    long result = 0;\n    long sign = 1;\n    if (value[0] == '-') {\n        sign = -1;\n        value = value.substr(1);\n    }\n    for (int i = value.length() - 1; i >= 0; i--) {\n        if (value[i] >= '0' && value[i] <= '9') {\n            result = result * 10 + value[i] - '0';\n        }\n    }\n    result = result * sign;\n    if (result < 0) {\n        result = 0;\n    }\n    return result;",
    "    long result = 0;\n    long sign = 1;\n    if (value[0] == '-') {\n        sign = -1;\n        value.erase(0, 1);\n    }\n    for (int i = 0; i < value.size(); i++) {\n        if (value[i] == '.') {\n            result += sign * (value[i + 1] - '0') / 10;\n            i++;\n        } else {\n            result += sign * (value[i] - '0');\n        }\n    }\n    return result;",
    "    long result = 0;\n    long sign = 1;\n    if (value[0] == '-') {\n        sign = -1;\n        value.erase(0, 1);\n    }\n    for (auto it = value.begin(); it != value.end(); ++it) {\n        if (*it == '.') {\n            result = result * 10 + 0;\n        } else {\n            result = result * 10 + *it - '0';\n        }\n    }\n    result = result * sign;\n    return result;",
    "    long result = 0;\n    long sign = 1;\n    if (value[0] == '-') {\n        sign = -1;\n        value = value.substr(1);\n    }\n    for (int i = 0; i < value.length(); i++) {\n        if (value[i] >= '0' && value[i] <= '9') {\n            result = result * 10 + value[i] - '0';\n        }\n    }\n    result = result * sign;\n    if (result < 0) {\n        result = 0;\n    }\n    return result;",
    "    long result = 0;\n    std::stringstream ss(value);\n    ss >> result;\n    return result;",
    "    long result = 0;\n    std::stringstream ss(value);\n    ss >> result;\n    return result;",
    "    long result = 0;\n    long sign = 1;\n    long power = 1;\n    long digit = 0;\n    long max_power = 0;\n    long max_digit = 0;\n    long max_value = 0;\n    long min_value = 0;\n    long min_digit = 0;\n    long min_power = 0;\n    long min_result = 0;\n    long max_result = 0;\n    long min_result_sign = 0;\n    long max_result_sign = 0;\n    long max_result_power = 0;\n    long max_result_digit = 0;\n    long max_result_value = 0;\n    long min_result_value = 0;\n    long min_result_digit = 0;\n    long min_result_power = 0;\n    long min_result_sign = 0;\n    long max_result_sign = 0;\n    long max_result_power = 0;\n    long max_result_digit = 0;\n    long max_result_value = 0;\n    long min_result_value = 0;\n    long min_result_digit = 0;\n    long min_result_power = 0;\n    long min_result_sign = 0;\n    long max_result_sign = 0;\n    long max_result_power = 0;\n    long max_result_digit = 0;\n    long max_result_value = 0;\n    long min_result_value = 0;\n    long min_result_digit = 0;\n    long min_result_power = 0;\n    long min_result_sign = 0;\n    long max_result_sign = 0;\n    long max_result_power = 0;\n    long max_result_digit = 0;\n    long max_result_value = 0;\n    long min_result_value = 0;\n    long min_result_digit = 0;\n    long min_result_power = 0;\n    long min_result_sign = 0;\n    long max_result_sign = 0;\n    long max_result_power = 0;\n    long max_result_digit = 0;\n    long max_result_value = 0;\n    long min_result",
    "    long result = 0;\n    std::stringstream ss(value);\n    ss >> result;\n    return result;",
    "    long result = 0;\n    long sign = 1;\n    if (value[0] == '-') {\n        sign = -1;\n        value.erase(0, 1);\n    }\n    for (int i = 0; i < value.size(); i++) {\n        if (value[i] >= '0' && value[i] <= '9') {\n            result = result * 10 + value[i] - '0';\n        }\n    }\n    result = sign * result;\n    return result;",
    "    long result = 0;\n    std::string::iterator it = value.begin();\n    while (it != value.end() && *it == ' ') {\n        it++;\n    }\n    if (it == value.end()) {\n        return result;\n    }\n    if (*it == '-') {\n        result = -1;\n        it++;\n    }\n    while (it != value.end() && *it >= '0' && *it <= '9') {\n        result = result * 10 + (*it - '0');\n        it++;\n    }\n    return result;",
    "    long result = 0;\n    long sign = 1;\n    long power = 1;\n    long digit = 0;\n    long max_power = 0;\n    long max_digit = 0;\n    long max_result = 0;\n    long min_result = 0;\n    long min_power = 0;\n    long min_digit = 0;\n    long max_power_digit = 0;\n    long min_power_digit = 0;\n    long min_power_digit_power = 0;\n    long max_power_digit_power = 0;\n    long min_power_digit_power_digit = 0;\n    long max_power_digit_power_digit = 0;\n    long min_power_digit_power_digit_digit = 0;\n    long max_power_digit_power_digit_digit = 0;\n    long min_power_digit_power_digit_digit_digit = 0;\n    long max_power_digit_power_digit_digit_digit = 0;\n    long min_power_digit_power_digit_digit_digit_digit = 0;\n    long max_power_digit_power_digit_digit_digit_digit = 0;\n    long min_power_digit_power_digit_digit_digit_digit_digit = 0;\n    long max_power_digit_power_digit_digit_digit_digit_digit = 0;\n    long min_power_digit_power_digit_digit_digit_digit_digit_digit = 0;\n    long max_power_digit_power_digit_digit_digit_digit_digit_digit = 0;\n    long min_power_digit_power_digit_digit_digit_digit_digit_digit_digit = 0;\n    long max_power_digit_power_digit_digit_digit_digit_digit_digit_digit = 0;\n    long min_power_digit_power_digit_digit_digit_digit_digit_digit_digit_digit = 0;\n    long max_power_digit_power_digit_digit_digit_digit_digit_digit_digit_digit = 0;\n    long min_power_digit_power_digit_digit_digit_digit_digit_digit_digit_digit_digit = 0;",
    "    long result = 0;\n    std::stringstream ss(value);\n    ss >> result;\n    return result;",
    "    long result = 0;\n    std::stringstream ss(value);\n    ss >> result;\n    return result;",
    "    long result = 0;\n    std::stringstream ss(value);\n    ss >> result;\n    return result;",
    "    long result = 0;\n    long sign = 1;\n    long factor = 1;\n    long power = 0;\n    long temp = 0;\n    long temp2 = 0;\n    long temp3 = 0;\n    long temp4 = 0;\n    long temp5 = 0;\n    long temp6 = 0;\n    long temp7 = 0;\n    long temp8 = 0;\n    long temp9 = 0;\n    long temp10 = 0;\n    long temp11 = 0;\n    long temp12 = 0;\n    long temp13 = 0;\n    long temp14 = 0;\n    long temp15 = 0;\n    long temp16 = 0;\n    long temp17 = 0;\n    long temp18 = 0;\n    long temp19 = 0;\n    long temp20 = 0;\n    long temp21 = 0;\n    long temp22 = 0;\n    long temp23 = 0;\n    long temp24 = 0;\n    long temp25 = 0;\n    long temp26 = 0;\n    long temp27 = 0;\n    long temp28 = 0;\n    long temp29 = 0;\n    long temp30 = 0;\n    long temp31 = 0;\n    long temp32 = 0;\n    long temp33 = 0;\n    long temp34 = 0;\n    long temp35 = 0;\n    long temp36 = 0;\n    long temp37 = 0;\n    long temp38 = 0;\n    long temp39 = 0;\n    long temp40 = 0;\n    long temp41 = 0;\n    long temp42 = 0;\n    long temp43 = 0;\n    long temp44 = 0;\n    long temp45 = 0;\n    long temp46 = 0;\n    long temp47 = 0;\n    long temp48 = 0;\n    long temp49 = 0;\n    long temp50 = 0;\n    long temp51 = 0;\n    long temp52 = 0;\n    long temp53 = 0;\n    long temp54 = 0;\n    long temp55 = 0;\n    long temp56 = 0;\n    long temp57 = 0;\n    long temp58 = 0;\n    long temp59 = 0;\n    long temp60 = 0;\n    long temp61 =",
    "    long result = 0;\n    std::stringstream ss(value);\n    ss >> result;\n    return result;",
    "    long result = 0;\n    long sign = 1;\n    if (value[0] == '-') {\n        sign = -1;\n        value.erase(0, 1);\n    }\n    for (int i = 0; i < value.length(); i++) {\n        if (value[i] >= '0' && value[i] <= '9') {\n            result = result * 10 + value[i] - '0';\n        }\n    }\n    result = result * sign;\n    return result;",
    "    long result = 0;\n    long sign = 1;\n    if (value[0] == '-') {\n        sign = -1;\n        value.erase(0, 1);\n    }\n    for (auto it = value.begin(); it != value.end(); ++it) {\n        if (*it == '.') {\n            result += sign * std::stoi(value.substr(0, it - value.begin()));\n            value.erase(0, it - value.begin());\n            break;\n        }\n        result += sign * std::stoi(*it - '0');\n    }\n    if (value.size() > 0) {\n        result += sign * std::stoi(value);\n    }\n    return result;",
    "    long result = 0;\n    std::stringstream ss(value);\n    ss >> result;\n    return result;",
    "    long result = 0;\n    std::stringstream ss(value);\n    ss >> result;\n    return result;",
    "    long result = 0;\n    long sign = 1;\n    if (value[0] == '-') {\n        sign = -1;\n        value.erase(0, 1);\n    }\n    for (auto it = value.begin(); it != value.end(); ++it) {\n        if (*it == '.') {\n            result += sign * std::stoi(value.substr(0, it - value.begin()));\n            value.erase(0, it - value.begin());\n            break;\n        }\n        result += sign * std::stoi(*it - '0');\n    }\n    result += sign * std::stoi(value);\n    return result;",
    "    long result = 0;\n    std::stringstream ss(value);\n    ss >> result;\n    return result;",
    "    long result = 0;\n    std::string::iterator it = value.begin();\n    while (it != value.end()) {\n        if (*it == '.') {\n            result = result * 10 + 0;\n        } else {\n            result = result * 10 + (*it - '0');\n        }\n        it++;\n    }\n    if (result > 0) {\n        result = result / 10;\n    }\n    return result;",
    "    long result = 0;\n    long sign = 1;\n    if (value[0] == '-') {\n        sign = -1;\n        value.erase(0, 1);\n    }\n    for (int i = 0; i < value.size(); i++) {\n        if (value[i] >= '0' && value[i] <= '9') {\n            result = result * 10 + value[i] - '0';\n        }\n    }\n    result = result * sign;\n    if (result > INT_MAX) {\n        return INT_MAX;\n    }\n    if (result < INT_MIN) {\n        return INT_MIN;\n    }\n    return result;",
    "    long result = 0;\n    long sign = 1;\n    if (value[0] == '-') {\n        sign = -1;\n        value.erase(0, 1);\n    }\n    for (char c : value) {\n        if (c == '.') {\n            result = result * 10 + 0;\n        } else {\n            result = result * 10 + (c - '0');\n        }\n    }\n    result = result * sign;\n    return result;",
    "    long result = 0;\n    std::stringstream ss(value);\n    ss >> result;\n    return result;",
    "    long result = 0;\n    long sign = 1;\n    long power = 1;\n    for (int i = value.length() - 1; i >= 0; i--) {\n        if (value[i] == '.') {\n            result += sign * power * (value[i] - '0');\n            sign = -sign;\n            power *= 10;\n        } else {\n            result += sign * power * (value[i] - '0');\n            sign = -sign;\n            power *= 10;\n        }\n    }\n    return result;",
    "    long result = 0;\n    long sign = 1;\n    long power = 1;\n    long digit = 0;\n    long max_power = 0;\n    long max_digit = 0;\n    long max_digit_power = 0;\n    long max_digit_power_value = 0;\n    long max_digit_power_sign = 0;\n    long max_digit_power_sign_value = 0;\n    long max_digit_power_sign_sign = 0;\n    long max_digit_power_sign_sign_value = 0;\n    long max_digit_power_sign_sign_sign = 0;\n    long max_digit_power_sign_sign_sign_value = 0;\n    long max_digit_power_sign_sign_sign_sign = 0;\n    long max_digit_power_sign_sign_sign_sign_value = 0;\n    long max_digit_power_sign_sign_sign_sign_sign = 0;\n    long max_digit_power_sign_sign_sign_sign_sign_value = 0;\n    long max_digit_power_sign_sign_sign_sign_sign_sign = 0;\n    long max_digit_power_sign_sign_sign_sign_sign_sign_value = 0;\n    long max_digit_power_sign_sign_sign_sign_sign_sign_sign = 0;\n    long max_digit_power_sign_sign_sign_sign_sign_sign_sign_value = 0;\n    long max_digit_power_sign_sign_sign_sign_sign_sign_sign_sign = 0;\n    long max_digit_power_sign_sign_sign_sign_sign_sign_sign_sign_value = 0;\n    long max_digit_power_sign_sign_sign_sign_sign_sign_sign_sign_sign = 0;\n    long max_digit_power_sign_sign_sign_sign_sign_sign_sign_sign_sign_value = 0;\n    long max_digit_power_sign_sign_sign_sign_sign_sign_sign_sign_sign_sign = 0;\n    long max_digit_power_sign_sign_sign_sign",
    "    long result = 0;\n    long sign = 1;\n    if (value[0] == '-') {\n        sign = -1;\n        value.erase(0, 1);\n    }\n    for (int i = 0; i < value.length(); i++) {\n        if (value[i] >= '0' && value[i] <= '9') {\n            result = result * 10 + value[i] - '0';\n        }\n    }\n    result = result * sign;\n    if (result < 0) {\n        result = 0;\n    }\n    return result;",
    "    long result = 0;\n    long sign = 1;\n    if (value[0] == '-') {\n        sign = -1;\n        value = value.substr(1);\n    }\n    for (int i = 0; i < value.size(); i++) {\n        if (value[i] >= '0' && value[i] <= '9') {\n            result = result * 10 + value[i] - '0';\n        }\n    }\n    result = result * sign;\n    if (result > INT_MAX) {\n        return INT_MAX;\n    }\n    if (result < INT_MIN) {\n        return INT_MIN;\n    }\n    return result;",
    "    long result = 0;\n    std::stringstream ss(value);\n    ss >> result;\n    return result;",
    "    long result = 0;\n    std::string::size_type i = 0;\n    while (i < value.size() && value[i] == '0') {\n        i++;\n    }\n    if (i < value.size()) {\n        result = std::stol(value.substr(i));\n    }\n    return result;",
    "    long result = 0;\n    long sign = 1;\n    if (value[0] == '-') {\n        sign = -1;\n        value.erase(0, 1);\n    }\n    for (auto c : value) {\n        if (c >= '0' && c <= '9') {\n            result = result * 10 + (c - '0');\n        }\n    }\n    result = result * sign;\n    if (result > INT_MAX) {\n        return INT_MAX;\n    }\n    if (result < INT_MIN) {\n        return INT_MIN;\n    }\n    return result;",
    "    long result = 0;\n    long sign = 1;\n    if (value[0] == '-') {\n        sign = -1;\n        value = value.substr(1);\n    }\n    for (int i = 0; i < value.size(); i++) {\n        if (value[i] >= '0' && value[i] <= '9') {\n            result = result * 10 + value[i] - '0';\n        } else {\n            break;\n        }\n    }\n    result = result * sign;\n    if (result == 0) {\n        return 0;\n    }\n    if (result < 0) {\n        result = -result;\n    }\n    if (result % 2 == 0) {\n        result = result / 2;\n    } else {\n        result = (result + 1) / 2;\n    }\n    return result;",
    "    long result = 0;\n    long sign = 1;\n    if (value[0] == '-') {\n        sign = -1;\n        value.erase(0, 1);\n    }\n    for (int i = 0; i < value.size(); i++) {\n        if (value[i] >= '0' && value[i] <= '9') {\n            result = result * 10 + value[i] - '0';\n        }\n    }\n    result = result * sign;\n    return result;",
    "    long result = 0;\n    std::stringstream ss(value);\n    ss >> result;\n    return result;",
    "    long result = 0;\n    long sign = 1;\n    long power = 1;\n    long temp = 0;\n    long diff = 0;\n    long max = 0;\n    long min = 0;\n    long temp_diff = 0;\n    long temp_max = 0;\n    long temp_min = 0;\n    long temp_diff_sign = 0;\n    long temp_max_sign = 0;\n    long temp_min_sign = 0;\n    long temp_diff_sign_sign = 0;\n    long temp_max_sign_sign = 0;\n    long temp_min_sign_sign = 0;\n    long temp_diff_sign_sign_sign = 0;\n    long temp_max_sign_sign_sign = 0;\n    long temp_min_sign_sign_sign = 0;\n    long temp_diff_sign_sign_sign_sign = 0;\n    long temp_max_sign_sign_sign_sign = 0;\n    long temp_min_sign_sign_sign_sign = 0;\n    long temp_diff_sign_sign_sign_sign_sign = 0;\n    long temp_max_sign_sign_sign_sign_sign = 0;\n    long temp_min_sign_sign_sign_sign_sign = 0;\n    long temp_diff_sign_sign_sign_sign_sign_sign = 0;\n    long temp_max_sign_sign_sign_sign_sign_sign = 0;\n    long temp_min_sign_sign_sign_sign_sign_sign = 0;\n    long temp_diff_sign_sign_sign_sign_sign_sign_sign = 0;\n    long temp_max_sign_sign_sign_sign_sign_sign_sign = 0;\n    long temp_min_sign_sign_sign_sign_sign_sign_sign = 0;\n    long temp_diff_sign_sign_sign_sign_sign_sign_sign_sign = 0;\n    long temp_max_sign_sign_sign_sign_sign_sign_sign_sign = 0;\n    long temp_min_sign_sign_sign_sign_sign_sign_sign_sign = 0;\n    long temp_",
    "    long result = 0;\n    long sign = 1;\n    long factor = 1;\n    long power = 0;\n    long temp = 0;\n    long temp2 = 0;\n    long temp3 = 0;\n    long temp4 = 0;\n    long temp5 = 0;\n    long temp6 = 0;\n    long temp7 = 0;\n    long temp8 = 0;\n    long temp9 = 0;\n    long temp10 = 0;\n    long temp11 = 0;\n    long temp12 = 0;\n    long temp13 = 0;\n    long temp14 = 0;\n    long temp15 = 0;\n    long temp16 = 0;\n    long temp17 = 0;\n    long temp18 = 0;\n    long temp19 = 0;\n    long temp20 = 0;\n    long temp21 = 0;\n    long temp22 = 0;\n    long temp23 = 0;\n    long temp24 = 0;\n    long temp25 = 0;\n    long temp26 = 0;\n    long temp27 = 0;\n    long temp28 = 0;\n    long temp29 = 0;\n    long temp30 = 0;\n    long temp31 = 0;\n    long temp32 = 0;\n    long temp33 = 0;\n    long temp34 = 0;\n    long temp35 = 0;\n    long temp36 = 0;\n    long temp37 = 0;\n    long temp38 = 0;\n    long temp39 = 0;\n    long temp40 = 0;\n    long temp41 = 0;\n    long temp42 = 0;\n    long temp43 = 0;\n    long temp44 = 0;\n    long temp45 = 0;\n    long temp46 = 0;\n    long temp47 = 0;\n    long temp48 = 0;\n    long temp49 = 0;\n    long temp50 = 0;\n    long temp51 = 0;\n    long temp52 = 0;\n    long temp53 = 0;\n    long temp54 = 0;\n    long temp55 = 0;\n    long temp56 = 0;\n    long temp57 = 0;\n    long temp58 = 0;\n    long temp59 = 0;\n    long temp60 = 0;\n    long temp61 =",
    "    long result = 0;\n    std::string::iterator it = value.begin();\n    while (it != value.end()) {\n        if (*it == '.') {\n            it++;\n            while (it != value.end() && *it != '.') {\n                result = result * 10 + (*it - '0');\n                it++;\n            }\n            break;\n        } else {\n            result = result * 10 + (*it - '0');\n            it++;\n        }\n    }\n    if (it != value.end()) {\n        result = result * 10 + (*it - '0');\n    }\n    return result;",
    "    long result = 0;\n    long sign = 1;\n    long num = 0;\n    long num_sign = 1;\n    long num_abs = 0;\n    long num_abs_sign = 1;\n    long num_abs_abs = 0;\n    long num_abs_abs_sign = 1;\n    long num_abs_abs_abs = 0;\n    long num_abs_abs_abs_sign = 1;\n    long num_abs_abs_abs_abs = 0;\n    long num_abs_abs_abs_abs_sign = 1;\n    long num_abs_abs_abs_abs_abs = 0;\n    long num_abs_abs_abs_abs_abs_sign = 1;\n    long num_abs_abs_abs_abs_abs_abs = 0;\n    long num_abs_abs_abs_abs_abs_abs_sign = 1;\n    long num_abs_abs_abs_abs_abs_abs_abs = 0;\n    long num_abs_abs_abs_abs_abs_abs_abs_sign = 1;\n    long num_abs_abs_abs_abs_abs_abs_abs_abs = 0;\n    long num_abs_abs_abs_abs_abs_abs_abs_abs_sign = 1;\n    long num_abs_abs_abs_abs_abs_abs_abs_abs_abs = 0;\n    long num_abs_abs_abs_abs_abs_abs_abs_abs_abs_sign = 1;\n    long num_abs_abs_abs_abs_abs_abs_abs_abs_abs_abs = 0;\n    long num_abs_abs_abs_abs_abs_abs_abs_abs_abs_abs_sign = 1;\n    long num_abs_abs_abs_abs_abs_abs_abs_abs_abs_abs_abs = 0;\n    long num_abs_abs_abs_abs_abs_abs_abs_abs_abs_abs_abs_sign = 1;\n    long num_abs_abs_abs_abs_abs_abs_abs_abs_abs_abs_abs_abs = 0;\n    long num_abs_abs_abs_abs",
    "    long result = 0;\n    long sign = 1;\n    if (value[0] == '-') {\n        sign = -1;\n        value = value.substr(1);\n    }\n    for (int i = 0; i < value.size(); i++) {\n        if (value[i] == '.') {\n            result = result * 10 + sign * (value[i + 1] - '0');\n            i++;\n        } else {\n            result = result * 10 + sign * (value[i] - '0');\n        }\n    }\n    return result;",
    "    long result = 0;\n    long sign = 1;\n    if (value[0] == '-') {\n        sign = -1;\n        value.erase(0, 1);\n    }\n    for (auto it = value.begin(); it != value.end(); ++it) {\n        if (*it == '.') {\n            result = result * 10 + sign * (*it - '0');\n        } else {\n            result = result * 10 + sign * (*it - '0');\n            break;\n        }\n    }\n    return result;",
    "    long result = 0;\n    std::string::iterator it = value.begin();\n    while (it != value.end() && std::isdigit(*it)) {\n        result = result * 10 + *it - '0';\n        ++it;\n    }\n    if (it != value.end()) {\n        result = result * 10 + *it - '0';\n    }\n    return result;",
    "    long result = 0;\n    long sign = 1;\n    if (value[0] == '-') {\n        sign = -1;\n        value = value.substr(1);\n    }\n    for (int i = 0; i < value.size(); i++) {\n        if (value[i] >= '0' && value[i] <= '9') {\n            result = result * 10 + value[i] - '0';\n        }\n    }\n    result = sign * result;\n    return result;",
    "    long result = 0;\n    long sign = 1;\n    long number = 0;\n    long power = 1;\n    for (int i = value.length() - 1; i >= 0; i--) {\n        if (value[i] == '.') {\n            number = 0;\n            power = 1;\n            continue;\n        }\n        number += (value[i] - '0') * power;\n        power *= 10;\n    }\n    if (number < 0) {\n        sign = -1;\n        number *= sign;\n    }\n    result = number / power;\n    if (result * power == number) {\n        result += sign;\n    }\n    return result;",
    "    long result = 0;\n    long sign = 1;\n    if (value[0] == '-') {\n        sign = -1;\n        value = value.substr(1);\n    }\n    for (int i = value.length() - 1; i >= 0; i--) {\n        if (value[i] >= '0' && value[i] <= '9') {\n            result = result * 10 + value[i] - '0';\n        }\n    }\n    result = result * sign;\n    if (result > INT_MAX) {\n        return INT_MAX;\n    }\n    if (result < INT_MIN) {\n        return INT_MIN;\n    }\n    return result;",
    "    long result = 0;\n    long sign = 1;\n    if (value[0] == '-') {\n        sign = -1;\n        value = value.substr(1);\n    }\n    for (int i = 0; i < value.size(); i++) {\n        if (value[i] >= '0' && value[i] <= '9') {\n            result = result * 10 + value[i] - '0';\n        } else {\n            break;\n        }\n    }\n    result = sign * result;\n    if (result == 0) {\n        result = 1;\n    }\n    return result;",
    "    long result = 0;\n    std::stringstream ss(value);\n    ss >> result;\n    return result;",
    "    long result = 0;\n    long sign = 1;\n    if (value[0] == '-') {\n        sign = -1;\n        value.erase(0, 1);\n    }\n    for (int i = 0; i < value.size(); i++) {\n        if (value[i] >= '0' && value[i] <= '9') {\n            result = result * 10 + value[i] - '0';\n        }\n    }\n    result = result * sign;\n    return result;",
    "    long result = 0;\n    std::stringstream ss(value);\n    ss >> result;\n    return result;",
    "    long result = 0;\n    long sign = 1;\n    if (value[0] == '-') {\n        sign = -1;\n        value = value.substr(1);\n    }\n    for (int i = 0; i < value.size(); ++i) {\n        if (value[i] == '.') {\n            result = sign * (value[i] - '0');\n            break;\n        }\n        result = sign * (value[i] - '0') + result * 10;\n    }\n    return result;",
    "    long result = 0;\n    long sign = 1;\n    if (value[0] == '-') {\n        sign = -1;\n        value = value.substr(1);\n    }\n    for (int i = 0; i < value.size(); i++) {\n        if (value[i] >= '0' && value[i] <= '9') {\n            result = result * 10 + value[i] - '0';\n        }\n    }\n    result = result * sign;\n    return result;",
    "    long result = 0;\n    std::string::size_type i = 0;\n    while (i < value.length() && value[i] == ' ') {\n        i++;\n    }\n    if (i < value.length()) {\n        if (value[i] == '-') {\n            result = -1;\n            i++;\n        }\n        while (i < value.length() && value[i] >= '0' && value[i] <= '9') {\n            result = result * 10 + value[i] - '0';\n            i++;\n        }\n    }\n    return result;",
    "    long result = 0;\n    long sign = 1;\n    long power = 1;\n    long max_power = 0;\n    for (auto c : value) {\n        if (c == '-') {\n            sign = -1;\n        } else if (c == '.') {\n            power = 0;\n        } else {\n            if (power == 0) {\n                result = result * 10 + (c - '0');\n            } else {\n                result = result * 10 + (c - '0');\n                max_power = std::max(max_power, power);\n            }\n            power++;\n        }\n    }\n    if (sign == -1) {\n        result = -result;\n    }\n    if (max_power > 0) {\n        result = result / (long)pow(10, max_power);\n    }\n    return result;",
    "    long result = 0;\n    long sign = 1;\n    if (value[0] == '-') {\n        sign = -1;\n        value = value.substr(1);\n    }\n    for (int i = 0; i < value.size(); i++) {\n        if (value[i] == '.') {\n            result += sign * (value[i + 1] - '0') / 10;\n            i++;\n        } else {\n            result += sign * (value[i] - '0');\n        }\n    }\n    return result;",
    "    long result = 0;\n    long sign = 1;\n    long factor = 1;\n    long temp = 0;\n    long temp_sign = 1;\n    long temp_factor = 1;\n    long temp_result = 0;\n    long temp_temp = 0;\n    long temp_temp_sign = 1;\n    long temp_temp_factor = 1;\n    long temp_temp_result = 0;\n    long temp_temp_temp = 0;\n    long temp_temp_temp_sign = 1;\n    long temp_temp_temp_factor = 1;\n    long temp_temp_temp_result = 0;\n    long temp_temp_temp_temp = 0;\n    long temp_temp_temp_temp_sign = 1;\n    long temp_temp_temp_temp_factor = 1;\n    long temp_temp_temp_temp_result = 0;\n    long temp_temp_temp_temp_temp = 0;\n    long temp_temp_temp_temp_temp_sign = 1;\n    long temp_temp_temp_temp_temp_factor = 1;\n    long temp_temp_temp_temp_temp_result = 0;\n    long temp_temp_temp_temp_temp_temp = 0;\n    long temp_temp_temp_temp_temp_temp_sign = 1;\n    long temp_temp_temp_temp_temp_temp_factor = 1;\n    long temp_temp_temp_temp_temp_temp_result = 0;\n    long temp_temp_temp_temp_temp_temp_temp = 0;\n    long temp_temp_temp_temp_temp_temp_temp_sign = 1;\n    long temp_temp_temp_temp_temp_temp_temp_factor = 1;\n    long temp_temp_temp_temp_temp_temp_temp_result = 0;\n    long temp_temp_temp_temp_temp_temp_temp_temp = 0;\n    long temp_temp_temp_temp_temp_temp_temp_temp_sign = 1;\n    long temp_temp_temp_temp_temp_temp_temp_temp_factor = 1;\n    long temp_temp_temp_temp_temp_temp_temp_temp_",
    "    long result = 0;\n    long sign = 1;\n    if (value[0] == '-') {\n        sign = -1;\n        value.erase(0, 1);\n    }\n    for (char &c : value) {\n        if (c >= '0' && c <= '9') {\n            result = result * 10 + c - '0';\n        }\n    }\n    result = result * sign;\n    if (result > INT_MAX) {\n        return INT_MAX;\n    }\n    if (result < INT_MIN) {\n        return INT_MIN;\n    }\n    return result;",
    "    long result = 0;\n    long sign = 1;\n    if (value[0] == '-') {\n        sign = -1;\n        value.erase(0, 1);\n    }\n    for (int i = 0; i < value.size(); ++i) {\n        if (value[i] >= '0' && value[i] <= '9') {\n            result = result * 10 + (value[i] - '0');\n        }\n    }\n    result = result * sign;\n    if (result > INT_MAX) {\n        return INT_MAX;\n    }\n    if (result < INT_MIN) {\n        return INT_MIN;\n    }\n    return result;",
    "    long result = 0;\n    long sign = 1;\n    long power = 1;\n    long temp = 0;\n    long max_power = 0;\n    long max_temp = 0;\n    long min_temp = 0;\n    long min_power = 0;\n    long max_diff = 0;\n    long min_diff = 0;\n    long diff = 0;\n    long temp_diff = 0;\n    long temp_power = 0;\n    long temp_sign = 1;\n    long temp_result = 0;\n    long temp_max_power = 0;\n    long temp_max_temp = 0;\n    long temp_min_temp = 0;\n    long temp_min_power = 0;\n    long temp_max_diff = 0;\n    long temp_min_diff = 0;\n    long temp_diff_sign = 1;\n    long temp_result_sign = 1;\n    long temp_result_power = 0;\n    long temp_result_max_power = 0;\n    long temp_result_max_temp = 0;\n    long temp_result_min_temp = 0;\n    long temp_result_min_power = 0;\n    long temp_result_max_diff = 0;\n    long temp_result_min_diff = 0;\n    long temp_result_diff_sign = 1;\n    long temp_result_result_sign = 1;\n    long temp_result_result_power = 0;\n    long temp_result_result_max_power = 0;\n    long temp_result_result_max_temp = 0;\n    long temp_result_result_min_temp = 0;\n    long temp_result_result_min_power = 0;\n    long temp_result_result_max_diff = 0;\n    long temp_result_result_min_diff = 0;\n    long temp_result_result_diff_sign = 1;\n    long temp_result_result_result_sign = 1;\n    long temp_result_result_result_power = 0;\n    long temp_result_result_result_max_power = 0;\n    long temp_result_result_result_max_temp = 0;\n    long",
    "    long result = 0;\n    long sign = 1;\n    if (value[0] == '-') {\n        sign = -1;\n        value.erase(0, 1);\n    }\n    for (int i = 0; i < value.size(); ++i) {\n        if (value[i] >= '0' && value[i] <= '9') {\n            result = result * 10 + value[i] - '0';\n        }\n    }\n    result = result * sign;\n    if (result < 0) {\n        result = -result;\n    }\n    return result;",
    "    long result = 0;\n    std::stringstream ss(value);\n    ss >> result;\n    return result;",
    "    long result = 0;\n    std::stringstream ss(value);\n    ss >> result;\n    return result;",
    "    long result = 0;\n    std::stringstream ss(value);\n    ss >> result;\n    return result;",
    "    long result = 0;\n    long sign = 1;\n    if (value[0] == '-') {\n        sign = -1;\n        value.erase(0, 1);\n    }\n    for (int i = 0; i < value.size(); i++) {\n        if (value[i] >= '0' && value[i] <= '9') {\n            result = result * 10 + value[i] - '0';\n        }\n    }\n    result = result * sign;\n    return result;",
    "    long result = 0;\n    std::stringstream ss(value);\n    ss >> result;\n    return result;",
    "    long result = 0;\n    long sign = 1;\n    if (value[0] == '-') {\n        sign = -1;\n        value = value.substr(1);\n    }\n    for (int i = 0; i < value.size(); i++) {\n        if (value[i] >= '0' && value[i] <= '9') {\n            result = result * 10 + value[i] - '0';\n        }\n    }\n    result = result * sign;\n    if (result > INT_MAX) {\n        result = INT_MAX;\n    } else if (result < INT_MIN) {\n        result = INT_MIN;\n    }\n    return result;",
    "    long result = 0;\n    std::string::iterator it = value.begin();\n    while (it != value.end() && std::isdigit(*it)) {\n        result = result * 10 + *it - '0';\n        it++;\n    }\n    if (it != value.end()) {\n        result = result * 10 + *it - '0';\n    }\n    return result;",
    "    long result = 0;\n    long sign = 1;\n    if (value[0] == '-') {\n        sign = -1;\n        value.erase(0, 1);\n    }\n    for (int i = 0; i < value.size(); i++) {\n        if (value[i] >= '0' && value[i] <= '9') {\n            result = result * 10 + value[i] - '0';\n        }\n    }\n    result = result * sign;\n    return result;",
    "    long result = 0;\n    long sign = 1;\n    long exponent = 0;\n    long mantissa = 0;\n    long temp = 0;\n    long temp2 = 0;\n    long temp3 = 0;\n    long temp4 = 0;\n    long temp5 = 0;\n    long temp6 = 0;\n    long temp7 = 0;\n    long temp8 = 0;\n    long temp9 = 0;\n    long temp10 = 0;\n    long temp11 = 0;\n    long temp12 = 0;\n    long temp13 = 0;\n    long temp14 = 0;\n    long temp15 = 0;\n    long temp16 = 0;\n    long temp17 = 0;\n    long temp18 = 0;\n    long temp19 = 0;\n    long temp20 = 0;\n    long temp21 = 0;\n    long temp22 = 0;\n    long temp23 = 0;\n    long temp24 = 0;\n    long temp25 = 0;\n    long temp26 = 0;\n    long temp27 = 0;\n    long temp28 = 0;\n    long temp29 = 0;\n    long temp30 = 0;\n    long temp31 = 0;\n    long temp32 = 0;\n    long temp33 = 0;\n    long temp34 = 0;\n    long temp35 = 0;\n    long temp36 = 0;\n    long temp37 = 0;\n    long temp38 = 0;\n    long temp39 = 0;\n    long temp40 = 0;\n    long temp41 = 0;\n    long temp42 = 0;\n    long temp43 = 0;\n    long temp44 = 0;\n    long temp45 = 0;\n    long temp46 = 0;\n    long temp47 = 0;\n    long temp48 = 0;\n    long temp49 = 0;\n    long temp50 = 0;\n    long temp51 = 0;\n    long temp52 = 0;\n    long temp53 = 0;\n    long temp54 = 0;\n    long temp55 = 0;\n    long temp56 = 0;\n    long temp57 = 0;\n    long temp58 = 0;\n    long temp59 = 0;\n    long temp60 = 0;\n    long temp61",
    "    long result = 0;\n    std::stringstream ss(value);\n    ss >> result;\n    return result;",
    "    long result = 0;\n    std::stringstream ss(value);\n    ss >> result;\n    return result;",
    "    long result = 0;\n    std::string::iterator it = value.begin();\n    while (it != value.end() && std::isdigit(*it)) {\n        result = result * 10 + *it - '0';\n        ++it;\n    }\n    if (it != value.end()) {\n        result = result * 10 + *it - '0';\n    }\n    return result;",
    "    long result = 0;\n    long sign = 1;\n    if (value[0] == '-') {\n        sign = -1;\n        value.erase(0, 1);\n    }\n    for (int i = 0; i < value.size(); i++) {\n        if (value[i] >= '0' && value[i] <= '9') {\n            result = result * 10 + value[i] - '0';\n        }\n    }\n    result = result * sign;\n    return result;",
    "    long result = 0;\n    std::stringstream ss(value);\n    ss >> result;\n    return result;",
    "    long result = 0;\n    std::string::iterator it = value.begin();\n    while (it != value.end() && std::isdigit(*it)) {\n        result = result * 10 + *it - '0';\n        ++it;\n    }\n    if (it != value.end()) {\n        result = result * 10 + *it - '0';\n    }\n    return result;",
    "    long result = 0;\n    long sign = 1;\n    if (value[0] == '-') {\n        sign = -1;\n        value.erase(0, 1);\n    }\n    for (int i = 0; i < value.size(); i++) {\n        if (value[i] >= '0' && value[i] <= '9') {\n            result = result * 10 + value[i] - '0';\n        }\n    }\n    result = result * sign;\n    return result;",
    "    long result = 0;\n    long sign = 1;\n    if (value[0] == '-') {\n        sign = -1;\n        value = value.substr(1);\n    }\n    for (int i = 0; i < value.size(); i++) {\n        if (value[i] >= '0' && value[i] <= '9') {\n            result = result * 10 + value[i] - '0';\n        }\n    }\n    result = result * sign;\n    if (result < 0) {\n        result = -result;\n    }\n    return result;",
    "    long result = 0;\n    std::stringstream ss(value);\n    ss >> result;\n    return result;",
    "    long result = 0;\n    std::string::size_type i = 0;\n    while (i < value.length() && value[i] == ' ') {\n        i++;\n    }\n    if (i == value.length()) {\n        return result;\n    }\n    while (i < value.length() && value[i] >= '0' && value[i] <= '9') {\n        result = result * 10 + value[i] - '0';\n        i++;\n    }\n    if (i < value.length()) {\n        result = result * 10 + value[i] - '0';\n    }\n    return result;",
    "    long result = 0;\n    long sign = 1;\n    if (value[0] == '-') {\n        sign = -1;\n        value = value.substr(1);\n    }\n    for (int i = value.length() - 1; i >= 0; i--) {\n        if (value[i] >= '0' && value[i] <= '9') {\n            result = result * 10 + (value[i] - '0');\n        }\n    }\n    result = result * sign;\n    if (result > INT_MAX) {\n        return INT_MAX;\n    }\n    if (result < INT_MIN) {\n        return INT_MIN;\n    }\n    return result;",
    "    long result = 0;\n    long sign = 1;\n    if (value[0] == '-') {\n        sign = -1;\n        value.erase(0, 1);\n    }\n    for (int i = 0; i < value.size(); ++i) {\n        if (value[i] >= '0' && value[i] <= '9') {\n            result = result * 10 + value[i] - '0';\n        }\n    }\n    result = result * sign;\n    return result;",
    "    long result = 0;\n    long sign = 1;\n    if (value[0] == '-') {\n        sign = -1;\n        value = value.substr(1);\n    }\n    for (int i = 0; i < value.size(); ++i) {\n        if (value[i] == '.') {\n            result = sign * (value[i + 1] - '0') + result * 10;\n            i++;\n        } else {\n            result = sign * (value[i] - '0') + result * 10;\n        }\n    }\n    return result;",
    "    long result = 0;\n    long sign = 1;\n    long power = 0;\n    long digit = 0;\n    long max_power = 0;\n    long max_digit = 0;\n    long max_value = 0;\n    long min_value = 0;\n    long diff = 0;\n    long diff_sign = 0;\n    long diff_power = 0;\n    long diff_digit = 0;\n    long diff_max_power = 0;\n    long diff_max_digit = 0;\n    long diff_max_value = 0;\n    long diff_min_value = 0;\n    long diff_diff = 0;\n    long diff_diff_sign = 0;\n    long diff_diff_power = 0;\n    long diff_diff_digit = 0;\n    long diff_diff_max_power = 0;\n    long diff_diff_max_digit = 0;\n    long diff_diff_max_value = 0;\n    long diff_diff_min_value = 0;\n    long diff_diff_diff = 0;\n    long diff_diff_diff_sign = 0;\n    long diff_diff_diff_power = 0;\n    long diff_diff_diff_digit = 0;\n    long diff_diff_diff_max_power = 0;\n    long diff_diff_diff_max_digit = 0;\n    long diff_diff_diff_max_value = 0;\n    long diff_diff_diff_min_value = 0;\n    long diff_diff_diff_diff = 0;\n    long diff_diff_diff_diff_sign = 0;\n    long diff_diff_diff_diff_power = 0;\n    long diff_diff_diff_diff_digit = 0;\n    long diff_diff_diff_diff_max_power = 0;\n    long diff_diff_diff_diff_max_digit = 0;\n    long diff_diff_diff_diff_max_value = 0;\n    long diff_diff_diff_diff_min_value = 0;\n    long diff_diff_diff_diff_diff = 0;\n    long diff_diff_diff_diff_diff_sign = 0;\n    long diff_diff_diff_",
    "    long result = 0;\n    std::string::iterator it = value.begin();\n    while (it != value.end()) {\n        if (*it == '.') {\n            break;\n        }\n        result = result * 10 + (*it - '0');\n        ++it;\n    }\n    if (it != value.end()) {\n        result = result + (*it - '0');\n    }\n    return result;"
  ],
  "stop_tokens": [
    "\n}"
  ]
}