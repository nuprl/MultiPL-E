{
  "name": "HumanEval_95_check_dict_case",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given map is empty.\n// Examples:\n// >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n// True\n// >>> check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n// False\n// >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"})\n// False\n// >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})\n// False\n// >>> check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" })\n// True\nbool check_dict_case(std::map<std::string,std::string> dict) {\n",
  "tests": "}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>())) == (false));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given map is empty.\n// Examples:\n// >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n// True\n// >>> check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n// False\n// >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"})\n// False\n// >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})\n// False\n// >>> check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" })\n// True\nbool check_dict_case(std::map<std::string,std::string> dict) {\n    if(dict.empty())\n        return false;\n    std::string key;\n    for(auto it = dict.begin(); it != dict.end(); ++it) {\n        key = it->first;\n        if(key.length() > 1) {\n            if(std::islower(key[0]) && std::isupper(key[1]))\n                return false;\n            if(std::islower(key[0]) && std::isupper(key[0]))\n                return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>())) == (false));\n}\n",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "tmp4k56_x53: /tmp/tmp4k56_x53.cpp:35: int main(): Assertion `candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given map is empty.\n// Examples:\n// >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n// True\n// >>> check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n// False\n// >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"})\n// False\n// >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})\n// False\n// >>> check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" })\n// True\nbool check_dict_case(std::map<std::string,std::string> dict) {\n    if(dict.empty()) return false;\n    for(auto it = dict.begin(); it != dict.end(); ++it) {\n        if(it->first.size() != it->second.size()) return false;\n        for(int i = 0; i < it->first.size(); ++i) {\n            if(tolower(it->first[i]) != tolower(it->second[i])) return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>())) == (false));\n}\n",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "tmpkrvrzhzc: /tmp/tmpkrvrzhzc.cpp:29: int main(): Assertion `candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given map is empty.\n// Examples:\n// >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n// True\n// >>> check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n// False\n// >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"})\n// False\n// >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})\n// False\n// >>> check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" })\n// True\nbool check_dict_case(std::map<std::string,std::string> dict) {\n    if(dict.empty()) return false;\n    std::string key;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n        key = it->first;\n        if(key.length() > 1) {\n            if(key[0] >= 'A' && key[0] <= 'Z') continue;\n            if(key[0] >= 'a' && key[0] <= 'z') continue;\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>())) == (false));\n}\n",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "tmprd31gju0: /tmp/tmprd31gju0.cpp:33: int main(): Assertion `candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given map is empty.\n// Examples:\n// >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n// True\n// >>> check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n// False\n// >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"})\n// False\n// >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})\n// False\n// >>> check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" })\n// True\nbool check_dict_case(std::map<std::string,std::string> dict) {\n    if(dict.empty()) return false;\n    bool all_lower = true;\n    bool all_upper = true;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(std::isalpha(it->first[0])) {\n            all_lower = false;\n            if(std::islower(it->first[0])) continue;\n        }\n        if(std::isalpha(it->second[0])) {\n            all_upper = false;\n            if(std::isupper(it->second[0])) continue;\n        }\n    }\n    return all_lower || all_upper;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>())) == (false));\n}\n",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "tmpjiio4t52: /tmp/tmpjiio4t52.cpp:39: int main(): Assertion `candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given map is empty.\n// Examples:\n// >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n// True\n// >>> check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n// False\n// >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"})\n// False\n// >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})\n// False\n// >>> check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" })\n// True\nbool check_dict_case(std::map<std::string,std::string> dict) {\n    if(dict.empty()) return false;\n    for(auto it=dict.begin(); it!=dict.end(); ++it) {\n        if(std::isupper(it->first[0])) return false;\n        if(std::islower(it->second[0])) return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>())) == (false));\n}\n",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "tmp682ix014: /tmp/tmp682ix014.cpp:27: int main(): Assertion `candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given map is empty.\n// Examples:\n// >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n// True\n// >>> check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n// False\n// >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"})\n// False\n// >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})\n// False\n// >>> check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" })\n// True\nbool check_dict_case(std::map<std::string,std::string> dict) {\n    if(dict.empty()) return false;\n    for(auto it = dict.begin(); it != dict.end(); ++it) {\n        if(it->first.length() != it->second.length()) return false;\n        if(std::isalpha(it->first[0]) && std::islower(it->first[0])) return true;\n        if(std::isalpha(it->first[0]) && std::isupper(it->first[0])) return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>())) == (false));\n}\n",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "tmpd_mat38o: /tmp/tmpd_mat38o.cpp:28: int main(): Assertion `candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given map is empty.\n// Examples:\n// >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n// True\n// >>> check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n// False\n// >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"})\n// False\n// >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})\n// False\n// >>> check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" })\n// True\nbool check_dict_case(std::map<std::string,std::string> dict) {\n    if(dict.empty()) return false;\n    std::string lower_case_key;\n    std::string upper_case_key;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n        lower_case_key = it->first;\n        upper_case_key = it->first;\n        std::transform(lower_case_key.begin(), lower_case_key.end(), lower_case_key.begin(), ::tolower);\n        std::transform(upper_case_key.begin(), upper_case_key.end(), upper_case_key.begin(), ::toupper);\n        if(lower_case_key != upper_case_key) return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>())) == (false));\n}\n",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "tmp0r_lnhc1: /tmp/tmp0r_lnhc1.cpp:32: int main(): Assertion `candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given map is empty.\n// Examples:\n// >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n// True\n// >>> check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n// False\n// >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"})\n// False\n// >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})\n// False\n// >>> check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" })\n// True\nbool check_dict_case(std::map<std::string,std::string> dict) {\n    if(dict.empty()) return false;\n    for(auto it = dict.begin(); it != dict.end(); ++it) {\n        if(it->first.size() != it->second.size()) return false;\n        for(int i = 0; i < it->first.size(); ++i) {\n            if(tolower(it->first[i]) != tolower(it->second[i])) return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>())) == (false));\n}\n",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "tmpkrvrzhzc: /tmp/tmpkrvrzhzc.cpp:29: int main(): Assertion `candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given map is empty.\n// Examples:\n// >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n// True\n// >>> check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n// False\n// >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"})\n// False\n// >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})\n// False\n// >>> check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" })\n// True\nbool check_dict_case(std::map<std::string,std::string> dict) {\n    if(dict.empty()) return false;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(it->first.empty()) return false;\n        if(it->first[0] >= 'A' && it->first[0] <= 'Z') return false;\n        if(it->first[0] >= 'a' && it->first[0] <= 'z') return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>())) == (false));\n}\n",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "tmp8zk33bws: /tmp/tmp8zk33bws.cpp:28: int main(): Assertion `candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given map is empty.\n// Examples:\n// >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n// True\n// >>> check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n// False\n// >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"})\n// False\n// >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})\n// False\n// >>> check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" })\n// True\nbool check_dict_case(std::map<std::string,std::string> dict) {\n    if(dict.empty())\n        return false;\n    for(auto it = dict.begin(); it != dict.end(); ++it) {\n        if(it->first.size() != it->second.size())\n            return false;\n        for(int i = 0; i < it->first.size(); ++i) {\n            if(tolower(it->first[i]) != tolower(it->second[i]))\n                return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>())) == (false));\n}\n",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "tmpbezjb9_a: /tmp/tmpbezjb9_a.cpp:32: int main(): Assertion `candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given map is empty.\n// Examples:\n// >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n// True\n// >>> check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n// False\n// >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"})\n// False\n// >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})\n// False\n// >>> check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" })\n// True\nbool check_dict_case(std::map<std::string,std::string> dict) {\n    if(dict.empty()) return false;\n    std::string key;\n    for(auto it = dict.begin(); it != dict.end(); ++it) {\n        key = it->first;\n        if(key.length() > 1) {\n            if(key[0] >= 'A' && key[0] <= 'Z') {\n                if(key[1] >= 'a' && key[1] <= 'z') continue;\n                return false;\n            }\n            else if(key[0] >= 'a' && key[0] <= 'z') {\n                if(key[1] >= 'A' && key[1] <= 'Z') continue;\n                return false;\n            }\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>())) == (false));\n}\n",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "tmp13bp0es9: /tmp/tmp13bp0es9.cpp:38: int main(): Assertion `candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given map is empty.\n// Examples:\n// >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n// True\n// >>> check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n// False\n// >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"})\n// False\n// >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})\n// False\n// >>> check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" })\n// True\nbool check_dict_case(std::map<std::string,std::string> dict) {\n    if(dict.empty()) return false;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(it->first.size() != it->second.size()) return false;\n        for(int i = 0; i < it->first.size(); i++) {\n            if(std::tolower(it->first[i]) != it->second[i]) return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>())) == (false));\n}\n",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "tmpgfgf3tyv: /tmp/tmpgfgf3tyv.cpp:29: int main(): Assertion `candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given map is empty.\n// Examples:\n// >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n// True\n// >>> check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n// False\n// >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"})\n// False\n// >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})\n// False\n// >>> check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" })\n// True\nbool check_dict_case(std::map<std::string,std::string> dict) {\n    if(dict.empty())\n        return false;\n    for(auto it = dict.begin(); it != dict.end(); ++it) {\n        if(it->first.empty())\n            return false;\n        if(it->first[0] >= 'A' && it->first[0] <= 'Z')\n            continue;\n        if(it->first[0] >= 'a' && it->first[0] <= 'z')\n            continue;\n        return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>())) == (false));\n}\n",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "tmp3udvc0hq: /tmp/tmp3udvc0hq.cpp:34: int main(): Assertion `candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given map is empty.\n// Examples:\n// >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n// True\n// >>> check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n// False\n// >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"})\n// False\n// >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})\n// False\n// >>> check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" })\n// True\nbool check_dict_case(std::map<std::string,std::string> dict) {\n    if(dict.empty()) return false;\n    for(auto it = dict.begin(); it != dict.end(); ++it) {\n        if(std::isupper(it->first[0])) return false;\n        if(std::islower(it->second[0])) return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>())) == (false));\n}\n",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "tmpawd7qibi: /tmp/tmpawd7qibi.cpp:27: int main(): Assertion `candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given map is empty.\n// Examples:\n// >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n// True\n// >>> check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n// False\n// >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"})\n// False\n// >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})\n// False\n// >>> check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" })\n// True\nbool check_dict_case(std::map<std::string,std::string> dict) {\n    if(dict.empty()) return false;\n    bool all_lower = true;\n    bool all_upper = true;\n    for(auto it = dict.begin(); it != dict.end(); ++it) {\n        if(std::isupper(it->first[0])) {\n            all_lower = false;\n        }\n        if(std::islower(it->first[0])) {\n            all_upper = false;\n        }\n    }\n    return all_lower || all_upper;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>())) == (false));\n}\n",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "tmpmy20y6fn: /tmp/tmpmy20y6fn.cpp:35: int main(): Assertion `candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given map is empty.\n// Examples:\n// >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n// True\n// >>> check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n// False\n// >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"})\n// False\n// >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})\n// False\n// >>> check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" })\n// True\nbool check_dict_case(std::map<std::string,std::string> dict) {\n    if(dict.empty()) return false;\n    for(auto it = dict.begin(); it != dict.end(); ++it) {\n        if(it->first.length() != it->second.length()) return false;\n        if(std::tolower(it->first) != it->first) return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>())) == (false));\n}\n",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "/tmp/tmpjallsa0k.cpp: In function \u2018bool check_dict_case(std::map<std::__cxx11::basic_string<char>, std::__cxx11::basic_string<char> >)\u2019:\n/tmp/tmpjallsa0k.cpp:21:34: error: no matching function for call to \u2018tolower(const std::__cxx11::basic_string<char>&)\u2019\n   21 |         if(std::tolower(it->first) != it->first) return false;\n      |                                  ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cctype:42,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:35,\n                 from /tmp/tmpjallsa0k.cpp:2:\n/usr/include/ctype.h:125:12: note: candidate: \u2018int tolower(int)\u2019\n  125 | extern int tolower (int __c) __THROW;\n      |            ^~~~~~~\n/usr/include/ctype.h:125:25: note:   no known conversion for argument 1 from \u2018const std::__cxx11::basic_string<char>\u2019 to \u2018int\u2019\n  125 | extern int tolower (int __c) __THROW;\n      |                     ~~~~^~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_ios.h:37,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n                 from /tmp/tmpjallsa0k.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_facets.h:2649:5: note: candidate: \u2018template<class _CharT> _CharT std::tolower(_CharT, const std::locale&)\u2019\n 2649 |     tolower(_CharT __c, const locale& __loc)\n      |     ^~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_facets.h:2649:5: note:   template argument deduction/substitution failed:\n/t",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given map is empty.\n// Examples:\n// >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n// True\n// >>> check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n// False\n// >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"})\n// False\n// >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})\n// False\n// >>> check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" })\n// True\nbool check_dict_case(std::map<std::string,std::string> dict) {\n    if(dict.empty()) return false;\n    for(auto it=dict.begin(); it!=dict.end(); ++it) {\n        if(it->first.size() != it->second.size()) return false;\n        for(int i=0; i<it->first.size(); ++i) {\n            if(tolower(it->first[i]) != tolower(it->second[i])) return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>())) == (false));\n}\n",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "tmpq9wj8iur: /tmp/tmpq9wj8iur.cpp:29: int main(): Assertion `candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given map is empty.\n// Examples:\n// >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n// True\n// >>> check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n// False\n// >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"})\n// False\n// >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})\n// False\n// >>> check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" })\n// True\nbool check_dict_case(std::map<std::string,std::string> dict) {\n    if(dict.empty()) return false;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(it->first.length() != it->second.length()) return false;\n        if(std::isupper(it->first[0])) return false;\n        if(std::islower(it->first[0])) return true;\n    }\n    return true;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>())) == (false));\n}\n",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "tmpdh_w94ld: /tmp/tmpdh_w94ld.cpp:28: int main(): Assertion `candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given map is empty.\n// Examples:\n// >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n// True\n// >>> check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n// False\n// >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"})\n// False\n// >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})\n// False\n// >>> check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" })\n// True\nbool check_dict_case(std::map<std::string,std::string> dict) {\n    if(dict.empty())\n        return false;\n    for(auto it = dict.begin(); it != dict.end(); ++it) {\n        if(it->first.size() != it->second.size())\n            return false;\n        for(int i = 0; i < it->first.size(); ++i) {\n            if(tolower(it->first[i]) != tolower(it->second[i]))\n                return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>())) == (false));\n}\n",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "tmpbezjb9_a: /tmp/tmpbezjb9_a.cpp:32: int main(): Assertion `candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given map is empty.\n// Examples:\n// >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n// True\n// >>> check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n// False\n// >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"})\n// False\n// >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})\n// False\n// >>> check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" })\n// True\nbool check_dict_case(std::map<std::string,std::string> dict) {\n    if(dict.empty()) return false;\n    for(auto it = dict.begin(); it != dict.end(); ++it) {\n        if(it->first.length() != it->second.length()) return false;\n        if(std::isalpha(it->first[0]) && std::islower(it->first[0])) return false;\n        if(std::isalpha(it->first[0]) && std::isupper(it->first[0])) return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>())) == (false));\n}\n",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "tmpbh1q8opl: /tmp/tmpbh1q8opl.cpp:28: int main(): Assertion `candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given map is empty.\n// Examples:\n// >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n// True\n// >>> check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n// False\n// >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"})\n// False\n// >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})\n// False\n// >>> check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" })\n// True\nbool check_dict_case(std::map<std::string,std::string> dict) {\n    if(dict.empty()) return false;\n    bool all_lower = true;\n    bool all_upper = true;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(std::isupper(it->first[0])) {\n            all_lower = false;\n        }\n        if(std::islower(it->first[0])) {\n            all_upper = false;\n        }\n    }\n    return all_lower || all_upper;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>())) == (false));\n}\n",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "tmp11xxilib: /tmp/tmp11xxilib.cpp:35: int main(): Assertion `candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given map is empty.\n// Examples:\n// >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n// True\n// >>> check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n// False\n// >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"})\n// False\n// >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})\n// False\n// >>> check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" })\n// True\nbool check_dict_case(std::map<std::string,std::string> dict) {\n    if(dict.empty()) return false;\n    for(auto it = dict.begin(); it != dict.end(); ++it) {\n        if(std::isupper(it->first[0])) return false;\n        if(std::islower(it->second[0])) return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>())) == (false));\n}\n",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "tmpawd7qibi: /tmp/tmpawd7qibi.cpp:27: int main(): Assertion `candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given map is empty.\n// Examples:\n// >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n// True\n// >>> check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n// False\n// >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"})\n// False\n// >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})\n// False\n// >>> check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" })\n// True\nbool check_dict_case(std::map<std::string,std::string> dict) {\n    if(dict.empty()) return false;\n    bool lower = true;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(lower) {\n            if(std::tolower(it->first) != it->first) return false;\n        } else {\n            if(std::toupper(it->first) != it->first) return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>())) == (false));\n}\n",
      "timestamp": 1664293100,
      "stdout": "",
      "stderr": "/tmp/tmpcine1d1q.cpp: In function \u2018bool check_dict_case(std::map<std::__cxx11::basic_string<char>, std::__cxx11::basic_string<char> >)\u2019:\n/tmp/tmpcine1d1q.cpp:22:38: error: no matching function for call to \u2018tolower(const std::__cxx11::basic_string<char>&)\u2019\n   22 |             if(std::tolower(it->first) != it->first) return false;\n      |                                      ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cctype:42,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:35,\n                 from /tmp/tmpcine1d1q.cpp:2:\n/usr/include/ctype.h:125:12: note: candidate: \u2018int tolower(int)\u2019\n  125 | extern int tolower (int __c) __THROW;\n      |            ^~~~~~~\n/usr/include/ctype.h:125:25: note:   no known conversion for argument 1 from \u2018const std::__cxx11::basic_string<char>\u2019 to \u2018int\u2019\n  125 | extern int tolower (int __c) __THROW;\n      |                     ~~~~^~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_ios.h:37,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n                 from /tmp/tmpcine1d1q.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_facets.h:2649:5: note: candidate: \u2018template<class _CharT> _CharT std::tolower(_CharT, const std::locale&)\u2019\n 2649 |     tolower(_CharT __c, const locale& __loc)\n      |     ^~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_facets.h:2649:5: note:   template argument deduction/substitution fa",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given map is empty.\n// Examples:\n// >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n// True\n// >>> check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n// False\n// >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"})\n// False\n// >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})\n// False\n// >>> check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" })\n// True\nbool check_dict_case(std::map<std::string,std::string> dict) {\n    if(dict.empty()) return false;\n    std::string key;\n    for(auto it = dict.begin(); it != dict.end(); ++it) {\n        key = it->first;\n        if(key.size() > 1 && key[0] >= 'A' && key[0] <= 'Z') return false;\n        if(key.size() > 1 && key[0] >= 'a' && key[0] <= 'z') return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>())) == (false));\n}\n",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "tmpc2sf8bxk: /tmp/tmpc2sf8bxk.cpp:30: int main(): Assertion `candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given map is empty.\n// Examples:\n// >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n// True\n// >>> check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n// False\n// >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"})\n// False\n// >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})\n// False\n// >>> check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" })\n// True\nbool check_dict_case(std::map<std::string,std::string> dict) {\n    if(dict.empty()) return false;\n    for(auto it = dict.begin(); it != dict.end(); ++it) {\n        if(it->first.size() != it->second.size()) return false;\n        for(auto it2 = it->first.begin(); it2 != it->first.end(); ++it2) {\n            if(std::tolower(*it2) != *it2) return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>())) == (false));\n}\n",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "tmp3hjhipmk: /tmp/tmp3hjhipmk.cpp:29: int main(): Assertion `candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given map is empty.\n// Examples:\n// >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n// True\n// >>> check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n// False\n// >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"})\n// False\n// >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})\n// False\n// >>> check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" })\n// True\nbool check_dict_case(std::map<std::string,std::string> dict) {\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(std::isupper(it->first[0]))\n            return false;\n        else if(std::islower(it->first[0]))\n            continue;\n        else\n            return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>())) == (false));\n}\n",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "tmp0dllt603: /tmp/tmp0dllt603.cpp:34: int main(): Assertion `candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given map is empty.\n// Examples:\n// >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n// True\n// >>> check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n// False\n// >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"})\n// False\n// >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})\n// False\n// >>> check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" })\n// True\nbool check_dict_case(std::map<std::string,std::string> dict) {\n    if(dict.empty()) return false;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(std::isupper(it->first[0])) return false;\n        if(std::islower(it->first[0])) return true;\n    }\n    return true;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>())) == (false));\n}\n",
      "timestamp": 1664293103,
      "stdout": "",
      "stderr": "tmpln6xu4wv: /tmp/tmpln6xu4wv.cpp:29: int main(): Assertion `candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given map is empty.\n// Examples:\n// >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n// True\n// >>> check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n// False\n// >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"})\n// False\n// >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})\n// False\n// >>> check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" })\n// True\nbool check_dict_case(std::map<std::string,std::string> dict) {\n    if(dict.empty()) return false;\n    std::string key;\n    for(auto it=dict.begin(); it!=dict.end(); ++it) {\n        key = it->first;\n        if(key.size() > 1) {\n            if(key[0] >= 'A' && key[0] <= 'Z') {\n                if(key[1] >= 'a' && key[1] <= 'z') continue;\n            } else if(key[0] >= 'a' && key[0] <= 'z') {\n                if(key[1] >= 'A' && key[1] <= 'Z') continue;\n            }\n        }\n        return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>())) == (false));\n}\n",
      "timestamp": 1664293103,
      "stdout": "",
      "stderr": "tmp8q21smgw: /tmp/tmp8q21smgw.cpp:35: int main(): Assertion `candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given map is empty.\n// Examples:\n// >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n// True\n// >>> check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n// False\n// >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"})\n// False\n// >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})\n// False\n// >>> check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" })\n// True\nbool check_dict_case(std::map<std::string,std::string> dict) {\n    if(dict.empty())\n        return false;\n    for(auto it = dict.begin(); it != dict.end(); ++it) {\n        if(std::isupper(it->first[0]))\n            return false;\n        if(std::islower(it->first[0]))\n            continue;\n        return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>())) == (false));\n}\n",
      "timestamp": 1664293103,
      "stdout": "",
      "stderr": "tmpvlwiawj_: /tmp/tmpvlwiawj_.cpp:35: int main(): Assertion `candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given map is empty.\n// Examples:\n// >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n// True\n// >>> check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n// False\n// >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"})\n// False\n// >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})\n// False\n// >>> check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" })\n// True\nbool check_dict_case(std::map<std::string,std::string> dict) {\n    if(dict.empty()) return false;\n    std::string lower, upper;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n        lower = it->first;\n        upper = it->first;\n        std::transform(lower.begin(), lower.end(), lower.begin(), ::tolower);\n        std::transform(upper.begin(), upper.end(), upper.begin(), ::toupper);\n        if(lower != upper) return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>())) == (false));\n}\n",
      "timestamp": 1664293103,
      "stdout": "",
      "stderr": "tmpzvn1cy6p: /tmp/tmpzvn1cy6p.cpp:31: int main(): Assertion `candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given map is empty.\n// Examples:\n// >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n// True\n// >>> check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n// False\n// >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"})\n// False\n// >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})\n// False\n// >>> check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" })\n// True\nbool check_dict_case(std::map<std::string,std::string> dict) {\n    if(dict.empty()) return false;\n    std::string key;\n    for(auto it=dict.begin(); it!=dict.end(); ++it) {\n        key = it->first;\n        if(key.size()>1) {\n            if(std::islower(key[0]) && std::isupper(key[1])) return false;\n            if(std::isupper(key[0]) && std::islower(key[1])) return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>())) == (false));\n}\n",
      "timestamp": 1664293103,
      "stdout": "",
      "stderr": "tmpdiamqlke: /tmp/tmpdiamqlke.cpp:32: int main(): Assertion `candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given map is empty.\n// Examples:\n// >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n// True\n// >>> check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n// False\n// >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"})\n// False\n// >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})\n// False\n// >>> check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" })\n// True\nbool check_dict_case(std::map<std::string,std::string> dict) {\n    if(dict.empty()) return false;\n    bool all_lower = true;\n    bool all_upper = true;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(std::isupper(it->first[0])) all_upper = false;\n        if(std::islower(it->first[0])) all_lower = false;\n    }\n    return all_lower || all_upper;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>())) == (false));\n}\n",
      "timestamp": 1664293103,
      "stdout": "",
      "stderr": "tmp37w7a4r9: /tmp/tmp37w7a4r9.cpp:31: int main(): Assertion `candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given map is empty.\n// Examples:\n// >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n// True\n// >>> check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n// False\n// >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"})\n// False\n// >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})\n// False\n// >>> check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" })\n// True\nbool check_dict_case(std::map<std::string,std::string> dict) {\n    if(dict.empty()) return false;\n    for(auto it = dict.begin(); it != dict.end(); ++it) {\n        if(it->first.size() != it->second.size()) return false;\n        for(int i = 0; i < it->first.size(); ++i) {\n            if(tolower(it->first[i]) != it->second[i]) return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>())) == (false));\n}\n",
      "timestamp": 1664293103,
      "stdout": "",
      "stderr": "tmptevkp9p9: /tmp/tmptevkp9p9.cpp:29: int main(): Assertion `candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given map is empty.\n// Examples:\n// >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n// True\n// >>> check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n// False\n// >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"})\n// False\n// >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})\n// False\n// >>> check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" })\n// True\nbool check_dict_case(std::map<std::string,std::string> dict) {\n    if(dict.empty()) return false;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(it->first.size() != it->second.size()) return false;\n        for(int i = 0; i < it->first.size(); i++) {\n            if(tolower(it->first[i]) != tolower(it->second[i])) return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>())) == (false));\n}\n",
      "timestamp": 1664293103,
      "stdout": "",
      "stderr": "tmp4si0hwud: /tmp/tmp4si0hwud.cpp:29: int main(): Assertion `candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given map is empty.\n// Examples:\n// >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n// True\n// >>> check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n// False\n// >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"})\n// False\n// >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})\n// False\n// >>> check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" })\n// True\nbool check_dict_case(std::map<std::string,std::string> dict) {\n    if(dict.empty()) return false;\n    bool lower = true;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(lower && !isalpha(it->first[0])) return false;\n        if(!lower && !isalpha(it->first[0])) return false;\n        if(lower && !isalpha(it->second[0])) return false;\n        if(!lower && !isalpha(it->second[0])) return false;\n        lower = !lower;\n    }\n    return true;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>())) == (false));\n}\n",
      "timestamp": 1664293103,
      "stdout": "",
      "stderr": "tmp3pli69qe: /tmp/tmp3pli69qe.cpp:32: int main(): Assertion `candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given map is empty.\n// Examples:\n// >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n// True\n// >>> check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n// False\n// >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"})\n// False\n// >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})\n// False\n// >>> check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" })\n// True\nbool check_dict_case(std::map<std::string,std::string> dict) {\n    if(dict.empty()) return false;\n    for(auto it = dict.begin(); it != dict.end(); ++it) {\n        if(std::isupper(it->first[0])) return false;\n        if(std::islower(it->second[0])) return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>())) == (false));\n}\n",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "tmpawd7qibi: /tmp/tmpawd7qibi.cpp:27: int main(): Assertion `candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given map is empty.\n// Examples:\n// >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n// True\n// >>> check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n// False\n// >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"})\n// False\n// >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})\n// False\n// >>> check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" })\n// True\nbool check_dict_case(std::map<std::string,std::string> dict) {\n    if(dict.empty())\n        return false;\n    std::string key;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n        key = it->first;\n        if(key.empty())\n            return false;\n        if(key.size() > 1) {\n            if(std::islower(key[0]) && std::isupper(key[1]))\n                return false;\n            if(std::islower(key[0]) && std::isupper(key[0]))\n                return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>())) == (false));\n}\n",
      "timestamp": 1664293103,
      "stdout": "",
      "stderr": "tmpsymkre9k: /tmp/tmpsymkre9k.cpp:37: int main(): Assertion `candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given map is empty.\n// Examples:\n// >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n// True\n// >>> check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n// False\n// >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"})\n// False\n// >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})\n// False\n// >>> check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" })\n// True\nbool check_dict_case(std::map<std::string,std::string> dict) {\n    if(dict.empty())\n        return false;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(std::isupper(it->first[0]))\n            return false;\n        if(std::islower(it->second[0]))\n            return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>())) == (false));\n}\n",
      "timestamp": 1664293103,
      "stdout": "",
      "stderr": "tmpewu1u73l: /tmp/tmpewu1u73l.cpp:30: int main(): Assertion `candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given map is empty.\n// Examples:\n// >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n// True\n// >>> check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n// False\n// >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"})\n// False\n// >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})\n// False\n// >>> check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" })\n// True\nbool check_dict_case(std::map<std::string,std::string> dict) {\n    if(dict.empty()) return false;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(it->first.size() != it->second.size()) return false;\n        for(int i = 0; i < it->first.size(); i++) {\n            if(std::tolower(it->first[i]) != std::tolower(it->second[i])) return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>())) == (false));\n}\n",
      "timestamp": 1664293103,
      "stdout": "",
      "stderr": "tmpbez72oyn: /tmp/tmpbez72oyn.cpp:29: int main(): Assertion `candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given map is empty.\n// Examples:\n// >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n// True\n// >>> check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n// False\n// >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"})\n// False\n// >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})\n// False\n// >>> check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" })\n// True\nbool check_dict_case(std::map<std::string,std::string> dict) {\n    if(dict.empty())\n        return false;\n    for(auto it = dict.begin(); it != dict.end(); ++it) {\n        if(it->first.size() != it->second.size())\n            return false;\n        for(int i = 0; i < it->first.size(); ++i) {\n            if(std::tolower(it->first[i]) != it->second[i])\n                return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>())) == (false));\n}\n",
      "timestamp": 1664293103,
      "stdout": "",
      "stderr": "tmpu4_4huk3: /tmp/tmpu4_4huk3.cpp:32: int main(): Assertion `candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given map is empty.\n// Examples:\n// >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n// True\n// >>> check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n// False\n// >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"})\n// False\n// >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})\n// False\n// >>> check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" })\n// True\nbool check_dict_case(std::map<std::string,std::string> dict) {\n    if(dict.empty()) return false;\n    for(auto it = dict.begin(); it != dict.end(); ++it) {\n        if(it->first.empty()) return false;\n        if(it->first[0] >= 'A' && it->first[0] <= 'Z') return false;\n        if(it->first[0] >= 'a' && it->first[0] <= 'z') return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>())) == (false));\n}\n",
      "timestamp": 1664293103,
      "stdout": "",
      "stderr": "tmp4x1x7u4s: /tmp/tmp4x1x7u4s.cpp:28: int main(): Assertion `candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given map is empty.\n// Examples:\n// >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n// True\n// >>> check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n// False\n// >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"})\n// False\n// >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})\n// False\n// >>> check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" })\n// True\nbool check_dict_case(std::map<std::string,std::string> dict) {\n    if(dict.empty()) return false;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(std::isupper(it->first[0])) return false;\n        if(std::islower(it->first[0])) return true;\n    }\n    return true;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>())) == (false));\n}\n",
      "timestamp": 1664293103,
      "stdout": "",
      "stderr": "tmpln6xu4wv: /tmp/tmpln6xu4wv.cpp:29: int main(): Assertion `candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given map is empty.\n// Examples:\n// >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n// True\n// >>> check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n// False\n// >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"})\n// False\n// >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})\n// False\n// >>> check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" })\n// True\nbool check_dict_case(std::map<std::string,std::string> dict) {\n    if(dict.empty()) return false;\n    bool lower = true;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(lower) {\n            if(std::isupper(it->first[0])) return false;\n        }\n        else {\n            if(std::islower(it->first[0])) return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>())) == (false));\n}\n",
      "timestamp": 1664293103,
      "stdout": "",
      "stderr": "tmpx8uadr_m: /tmp/tmpx8uadr_m.cpp:34: int main(): Assertion `candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given map is empty.\n// Examples:\n// >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n// True\n// >>> check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n// False\n// >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"})\n// False\n// >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})\n// False\n// >>> check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" })\n// True\nbool check_dict_case(std::map<std::string,std::string> dict) {\n    if(dict.empty()) return false;\n    std::string key;\n    for(std::map<std::string,std::string>::iterator it = dict.begin(); it != dict.end(); ++it) {\n        key = it->first;\n        if(key.size() == 1) {\n            if(tolower(key[0]) != key[0]) return false;\n        }\n        else if(key.size() == 2) {\n            if(tolower(key[0]) != key[0] || tolower(key[1]) != key[1]) return false;\n        }\n        else return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>())) == (false));\n}\n",
      "timestamp": 1664293103,
      "stdout": "",
      "stderr": "tmpy5jgrxmm: /tmp/tmpy5jgrxmm.cpp:36: int main(): Assertion `candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given map is empty.\n// Examples:\n// >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n// True\n// >>> check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n// False\n// >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"})\n// False\n// >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})\n// False\n// >>> check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" })\n// True\nbool check_dict_case(std::map<std::string,std::string> dict) {\n    if(dict.empty()) return false;\n    for(auto it = dict.begin(); it != dict.end(); ++it) {\n        if(it->first.size() != it->second.size()) return false;\n        for(int i = 0; i < it->first.size(); ++i) {\n            if(tolower(it->first[i]) != tolower(it->second[i])) return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>())) == (false));\n}\n",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "tmpkrvrzhzc: /tmp/tmpkrvrzhzc.cpp:29: int main(): Assertion `candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given map is empty.\n// Examples:\n// >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n// True\n// >>> check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n// False\n// >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"})\n// False\n// >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})\n// False\n// >>> check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" })\n// True\nbool check_dict_case(std::map<std::string,std::string> dict) {\n    if(dict.empty()) return false;\n    for(auto it = dict.begin(); it != dict.end(); ++it) {\n        if(std::isupper(it->first[0])) return false;\n        if(std::islower(it->first[0])) return true;\n    }\n    return true;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>())) == (false));\n}\n",
      "timestamp": 1664293103,
      "stdout": "",
      "stderr": "tmp_zvc4ncv: /tmp/tmp_zvc4ncv.cpp:29: int main(): Assertion `candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given map is empty.\n// Examples:\n// >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n// True\n// >>> check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n// False\n// >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"})\n// False\n// >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})\n// False\n// >>> check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" })\n// True\nbool check_dict_case(std::map<std::string,std::string> dict) {\n    if(dict.empty()) return false;\n    std::string key;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n        key = it->first;\n        if(key.size() > 1) {\n            if(key[0] >= 'A' && key[0] <= 'Z') {\n                if(key[1] >= 'a' && key[1] <= 'z') continue;\n                return false;\n            }\n            if(key[0] >= 'a' && key[0] <= 'z') continue;\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>())) == (false));\n}\n",
      "timestamp": 1664293103,
      "stdout": "",
      "stderr": "tmp27iuobyo: /tmp/tmp27iuobyo.cpp:36: int main(): Assertion `candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given map is empty.\n// Examples:\n// >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n// True\n// >>> check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n// False\n// >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"})\n// False\n// >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})\n// False\n// >>> check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" })\n// True\nbool check_dict_case(std::map<std::string,std::string> dict) {\n    if(dict.empty()) return false;\n    std::string str;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n        str = it->first;\n        if(str.empty()) return false;\n        if(str.length() != 1) return false;\n        if(str[0] >= 'A' && str[0] <= 'Z') continue;\n        if(str[0] >= 'a' && str[0] <= 'z') continue;\n        return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>())) == (false));\n}\n",
      "timestamp": 1664293103,
      "stdout": "",
      "stderr": "tmp87m4po5j: /tmp/tmp87m4po5j.cpp:33: int main(): Assertion `candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given map is empty.\n// Examples:\n// >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n// True\n// >>> check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n// False\n// >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"})\n// False\n// >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})\n// False\n// >>> check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" })\n// True\nbool check_dict_case(std::map<std::string,std::string> dict) {\n    if(dict.empty())\n        return false;\n    std::string lower_case_key;\n    std::string upper_case_key;\n    for(std::map<std::string,std::string>::iterator it = dict.begin(); it != dict.end(); ++it) {\n        lower_case_key = it->first;\n        upper_case_key = it->first;\n        std::transform(lower_case_key.begin(), lower_case_key.end(), lower_case_key.begin(), ::tolower);\n        std::transform(upper_case_key.begin(), upper_case_key.end(), upper_case_key.begin(), ::toupper);\n        if(lower_case_key != upper_case_key)\n            return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>())) == (false));\n}\n",
      "timestamp": 1664293103,
      "stdout": "",
      "stderr": "tmp1wxj6twd: /tmp/tmp1wxj6twd.cpp:34: int main(): Assertion `candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given map is empty.\n// Examples:\n// >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n// True\n// >>> check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n// False\n// >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"})\n// False\n// >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})\n// False\n// >>> check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" })\n// True\nbool check_dict_case(std::map<std::string,std::string> dict) {\n    if(dict.empty()) return false;\n    for(auto it = dict.begin(); it != dict.end(); ++it) {\n        if(it->first.size() != it->second.size()) return false;\n        for(int i = 0; i < it->first.size(); ++i) {\n            if(tolower(it->first[i]) != tolower(it->second[i])) return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>())) == (false));\n}\n",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "tmpkrvrzhzc: /tmp/tmpkrvrzhzc.cpp:29: int main(): Assertion `candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given map is empty.\n// Examples:\n// >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n// True\n// >>> check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n// False\n// >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"})\n// False\n// >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})\n// False\n// >>> check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" })\n// True\nbool check_dict_case(std::map<std::string,std::string> dict) {\n    if(dict.empty()) return false;\n    for(auto it=dict.begin(); it!=dict.end(); ++it) {\n        if(std::isupper(it->first[0])) return false;\n        if(std::islower(it->second[0])) return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>())) == (false));\n}\n",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "tmp682ix014: /tmp/tmp682ix014.cpp:27: int main(): Assertion `candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given map is empty.\n// Examples:\n// >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n// True\n// >>> check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n// False\n// >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"})\n// False\n// >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})\n// False\n// >>> check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" })\n// True\nbool check_dict_case(std::map<std::string,std::string> dict) {\n    if(dict.empty()) return false;\n    for(auto it=dict.begin(); it!=dict.end(); ++it) {\n        if(it->first.size() != it->second.size()) return false;\n        for(int i=0; i<it->first.size(); ++i) {\n            if(tolower(it->first[i]) != tolower(it->second[i])) return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>())) == (false));\n}\n",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "tmpq9wj8iur: /tmp/tmpq9wj8iur.cpp:29: int main(): Assertion `candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given map is empty.\n// Examples:\n// >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n// True\n// >>> check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n// False\n// >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"})\n// False\n// >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})\n// False\n// >>> check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" })\n// True\nbool check_dict_case(std::map<std::string,std::string> dict) {\n    if(dict.empty())\n        return false;\n    bool lower=true;\n    for(auto it=dict.begin(); it!=dict.end(); ++it) {\n        if(lower) {\n            if(std::isupper(it->first[0]))\n                return false;\n        } else {\n            if(std::islower(it->first[0]))\n                return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>())) == (false));\n}\n",
      "timestamp": 1664293103,
      "stdout": "",
      "stderr": "tmps7r45q2j: /tmp/tmps7r45q2j.cpp:36: int main(): Assertion `candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given map is empty.\n// Examples:\n// >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n// True\n// >>> check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n// False\n// >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"})\n// False\n// >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})\n// False\n// >>> check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" })\n// True\nbool check_dict_case(std::map<std::string,std::string> dict) {\n    if(dict.empty()) return false;\n    for(auto it=dict.begin(); it!=dict.end(); ++it) {\n        if(std::isupper(it->first[0])) return false;\n        if(std::islower(it->second[0])) return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>())) == (false));\n}\n",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "tmp682ix014: /tmp/tmp682ix014.cpp:27: int main(): Assertion `candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given map is empty.\n// Examples:\n// >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n// True\n// >>> check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n// False\n// >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"})\n// False\n// >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})\n// False\n// >>> check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" })\n// True\nbool check_dict_case(std::map<std::string,std::string> dict) {\n    if(dict.empty()) return false;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(std::isupper(it->first[0])) return false;\n        if(std::islower(it->first[0])) return true;\n    }\n    return true;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>())) == (false));\n}\n",
      "timestamp": 1664293103,
      "stdout": "",
      "stderr": "tmpln6xu4wv: /tmp/tmpln6xu4wv.cpp:29: int main(): Assertion `candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given map is empty.\n// Examples:\n// >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n// True\n// >>> check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n// False\n// >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"})\n// False\n// >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})\n// False\n// >>> check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" })\n// True\nbool check_dict_case(std::map<std::string,std::string> dict) {\n    if(dict.empty()) return false;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(it->first.size() != it->second.size()) return false;\n        for(int i = 0; i < it->first.size(); i++) {\n            if(tolower(it->first[i]) != tolower(it->second[i])) return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>())) == (false));\n}\n",
      "timestamp": 1664293103,
      "stdout": "",
      "stderr": "tmp4si0hwud: /tmp/tmp4si0hwud.cpp:29: int main(): Assertion `candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given map is empty.\n// Examples:\n// >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n// True\n// >>> check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n// False\n// >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"})\n// False\n// >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})\n// False\n// >>> check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" })\n// True\nbool check_dict_case(std::map<std::string,std::string> dict) {\n    if(dict.empty()) return false;\n    for(auto it=dict.begin(); it!=dict.end(); ++it) {\n        if(it->first.size() != it->second.size()) return false;\n        for(int i=0; i<it->first.size(); ++i) {\n            if(tolower(it->first[i]) != tolower(it->second[i])) return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>())) == (false));\n}\n",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "tmpq9wj8iur: /tmp/tmpq9wj8iur.cpp:29: int main(): Assertion `candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given map is empty.\n// Examples:\n// >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n// True\n// >>> check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n// False\n// >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"})\n// False\n// >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})\n// False\n// >>> check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" })\n// True\nbool check_dict_case(std::map<std::string,std::string> dict) {\n    if(dict.empty())\n        return false;\n    for(auto it=dict.begin(); it!=dict.end(); ++it) {\n        if(it->first.size() != it->second.size())\n            return false;\n        for(int i=0; i<it->first.size(); ++i) {\n            if(tolower(it->first[i]) != it->second[i])\n                return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>())) == (false));\n}\n",
      "timestamp": 1664293103,
      "stdout": "",
      "stderr": "tmp9n3v0zps: /tmp/tmp9n3v0zps.cpp:32: int main(): Assertion `candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given map is empty.\n// Examples:\n// >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n// True\n// >>> check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n// False\n// >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"})\n// False\n// >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})\n// False\n// >>> check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" })\n// True\nbool check_dict_case(std::map<std::string,std::string> dict) {\n    if(dict.empty()) return false;\n    std::string key;\n    for(auto it=dict.begin(); it!=dict.end(); ++it) {\n        key = it->first;\n        if(key.length() > 1 && key[0] >= 'A' && key[0] <= 'Z') return false;\n        if(key.length() > 1 && key[0] >= 'a' && key[0] <= 'z') return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>())) == (false));\n}\n",
      "timestamp": 1664293103,
      "stdout": "",
      "stderr": "tmp3b81b56t: /tmp/tmp3b81b56t.cpp:30: int main(): Assertion `candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given map is empty.\n// Examples:\n// >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n// True\n// >>> check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n// False\n// >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"})\n// False\n// >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})\n// False\n// >>> check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" })\n// True\nbool check_dict_case(std::map<std::string,std::string> dict) {\n    if(dict.empty()) return false;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(it->first.size() != it->second.size()) return false;\n        for(int i = 0; i < it->first.size(); i++) {\n            if(tolower(it->first[i]) != tolower(it->second[i])) return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>())) == (false));\n}\n",
      "timestamp": 1664293103,
      "stdout": "",
      "stderr": "tmp4si0hwud: /tmp/tmp4si0hwud.cpp:29: int main(): Assertion `candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given map is empty.\n// Examples:\n// >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n// True\n// >>> check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n// False\n// >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"})\n// False\n// >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})\n// False\n// >>> check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" })\n// True\nbool check_dict_case(std::map<std::string,std::string> dict) {\n    if(dict.empty()) return false;\n    for(auto it=dict.begin(); it!=dict.end(); ++it) {\n        if(std::isupper(it->first[0])) return false;\n        if(std::islower(it->second[0])) return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>())) == (false));\n}\n",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "tmp682ix014: /tmp/tmp682ix014.cpp:27: int main(): Assertion `candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given map is empty.\n// Examples:\n// >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n// True\n// >>> check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n// False\n// >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"})\n// False\n// >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})\n// False\n// >>> check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" })\n// True\nbool check_dict_case(std::map<std::string,std::string> dict) {\n    if(dict.empty()) return false;\n    std::string key;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n        key = it->first;\n        if(key.size() > 1) {\n            if(std::islower(key[0]) && std::isupper(key[1])) return false;\n            if(std::islower(key[0]) && std::isupper(key[1])) return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>())) == (false));\n}\n",
      "timestamp": 1664293105,
      "stdout": "",
      "stderr": "tmputamx_gt: /tmp/tmputamx_gt.cpp:32: int main(): Assertion `candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given map is empty.\n// Examples:\n// >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n// True\n// >>> check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n// False\n// >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"})\n// False\n// >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})\n// False\n// >>> check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" })\n// True\nbool check_dict_case(std::map<std::string,std::string> dict) {\n    if(dict.empty()) return false;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(std::isupper(it->first[0])) return false;\n        if(std::islower(it->first[0])) return true;\n    }\n    return true;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>())) == (false));\n}\n",
      "timestamp": 1664293103,
      "stdout": "",
      "stderr": "tmpln6xu4wv: /tmp/tmpln6xu4wv.cpp:29: int main(): Assertion `candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given map is empty.\n// Examples:\n// >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n// True\n// >>> check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n// False\n// >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"})\n// False\n// >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})\n// False\n// >>> check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" })\n// True\nbool check_dict_case(std::map<std::string,std::string> dict) {\n    if(dict.empty()) return false;\n    std::string key;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n        key = it->first;\n        if(key.size() > 1) {\n            if(std::islower(key[0]) && std::isupper(key[1])) return false;\n            if(std::islower(key[0]) && std::isupper(key[1])) return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>())) == (false));\n}\n",
      "timestamp": 1664293105,
      "stdout": "",
      "stderr": "tmputamx_gt: /tmp/tmputamx_gt.cpp:32: int main(): Assertion `candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given map is empty.\n// Examples:\n// >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n// True\n// >>> check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n// False\n// >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"})\n// False\n// >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})\n// False\n// >>> check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" })\n// True\nbool check_dict_case(std::map<std::string,std::string> dict) {\n    if(dict.empty())\n        return false;\n    for(std::map<std::string,std::string>::iterator it = dict.begin(); it != dict.end(); ++it) {\n        if(it->first.length() != it->second.length())\n            return false;\n        if(std::tolower(it->first) != it->second)\n            return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>())) == (false));\n}\n",
      "timestamp": 1664293104,
      "stdout": "",
      "stderr": "/tmp/tmpo8fiy7r4.cpp: In function \u2018bool check_dict_case(std::map<std::__cxx11::basic_string<char>, std::__cxx11::basic_string<char> >)\u2019:\n/tmp/tmpo8fiy7r4.cpp:23:34: error: no matching function for call to \u2018tolower(const std::__cxx11::basic_string<char>&)\u2019\n   23 |         if(std::tolower(it->first) != it->second)\n      |                                  ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cctype:42,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:35,\n                 from /tmp/tmpo8fiy7r4.cpp:2:\n/usr/include/ctype.h:125:12: note: candidate: \u2018int tolower(int)\u2019\n  125 | extern int tolower (int __c) __THROW;\n      |            ^~~~~~~\n/usr/include/ctype.h:125:25: note:   no known conversion for argument 1 from \u2018const std::__cxx11::basic_string<char>\u2019 to \u2018int\u2019\n  125 | extern int tolower (int __c) __THROW;\n      |                     ~~~~^~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_ios.h:37,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:44,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n                 from /tmp/tmpo8fiy7r4.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_facets.h:2649:5: note: candidate: \u2018template<class _CharT> _CharT std::tolower(_CharT, const std::locale&)\u2019\n 2649 |     tolower(_CharT __c, const locale& __loc)\n      |     ^~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_facets.h:2649:5: note:   template argument deduction/substitution failed:\n/tmp/tmpo8fiy7r",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given map is empty.\n// Examples:\n// >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n// True\n// >>> check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n// False\n// >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"})\n// False\n// >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})\n// False\n// >>> check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" })\n// True\nbool check_dict_case(std::map<std::string,std::string> dict) {\n    if(dict.empty()) return false;\n    std::string key;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n        key = it->first;\n        if(key.length() > 1 && key[0] >= 'A' && key[0] <= 'Z') return false;\n        if(key.length() > 1 && key[0] >= 'a' && key[0] <= 'z') return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>())) == (false));\n}\n",
      "timestamp": 1664293105,
      "stdout": "",
      "stderr": "tmp879fyb7y: /tmp/tmp879fyb7y.cpp:30: int main(): Assertion `candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given map is empty.\n// Examples:\n// >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n// True\n// >>> check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n// False\n// >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"})\n// False\n// >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})\n// False\n// >>> check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" })\n// True\nbool check_dict_case(std::map<std::string,std::string> dict) {\n    if(dict.empty())\n        return false;\n    for(auto it = dict.begin(); it != dict.end(); ++it) {\n        if(it->first.length() != it->second.length())\n            return false;\n        if(it->first[0] >= 'A' && it->first[0] <= 'Z')\n            return false;\n        if(it->first[0] >= 'a' && it->first[0] <= 'z')\n            return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>())) == (false));\n}\n",
      "timestamp": 1664293105,
      "stdout": "",
      "stderr": "tmps3redgos: /tmp/tmps3redgos.cpp:32: int main(): Assertion `candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given map is empty.\n// Examples:\n// >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n// True\n// >>> check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n// False\n// >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"})\n// False\n// >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})\n// False\n// >>> check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" })\n// True\nbool check_dict_case(std::map<std::string,std::string> dict) {\n    if(dict.empty()) return false;\n    std::string key;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n        key = it->first;\n        if(key.length() > 1) {\n            if(key[0] >= 'A' && key[0] <= 'Z') {\n                if(key[1] >= 'a' && key[1] <= 'z') continue;\n            }\n            else if(key[0] >= 'a' && key[0] <= 'z') {\n                if(key[1] >= 'A' && key[1] <= 'Z') continue;\n            }\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>())) == (false));\n}\n",
      "timestamp": 1664293105,
      "stdout": "",
      "stderr": "tmpgucmn5yn: /tmp/tmpgucmn5yn.cpp:37: int main(): Assertion `candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given map is empty.\n// Examples:\n// >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n// True\n// >>> check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n// False\n// >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"})\n// False\n// >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})\n// False\n// >>> check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" })\n// True\nbool check_dict_case(std::map<std::string,std::string> dict) {\n    if(dict.empty()) return false;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(it->first.size() != it->second.size()) return false;\n        for(int i = 0; i < it->first.size(); i++) {\n            if(tolower(it->first[i]) != tolower(it->second[i])) return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>())) == (false));\n}\n",
      "timestamp": 1664293103,
      "stdout": "",
      "stderr": "tmp4si0hwud: /tmp/tmp4si0hwud.cpp:29: int main(): Assertion `candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given map is empty.\n// Examples:\n// >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n// True\n// >>> check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n// False\n// >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"})\n// False\n// >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})\n// False\n// >>> check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" })\n// True\nbool check_dict_case(std::map<std::string,std::string> dict) {\n    if(dict.empty()) return false;\n    std::string key;\n    for(auto it=dict.begin(); it!=dict.end(); it++) {\n        key = it->first;\n        if(key.length() > 1) {\n            if(key[0] >= 'A' && key[0] <= 'Z') {\n                if(key[1] >= 'a' && key[1] <= 'z') {\n                    continue;\n                }\n            }\n            else if(key[0] >= 'a' && key[0] <= 'z') {\n                if(key[1] >= 'A' && key[1] <= 'Z') {\n                    continue;\n                }\n            }\n            else {\n                return false;\n            }\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>())) == (false));\n}\n",
      "timestamp": 1664293105,
      "stdout": "",
      "stderr": "tmpo5xhi8oz: /tmp/tmpo5xhi8oz.cpp:43: int main(): Assertion `candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given map is empty.\n// Examples:\n// >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n// True\n// >>> check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n// False\n// >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"})\n// False\n// >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})\n// False\n// >>> check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" })\n// True\nbool check_dict_case(std::map<std::string,std::string> dict) {\n    if(dict.empty()) return false;\n    std::string lower, upper;\n    for(auto it = dict.begin(); it != dict.end(); ++it) {\n        lower = it->first;\n        upper = it->first;\n        std::transform(lower.begin(), lower.end(), lower.begin(), ::tolower);\n        std::transform(upper.begin(), upper.end(), upper.begin(), ::toupper);\n        if(lower != upper) return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>())) == (false));\n}\n",
      "timestamp": 1664293105,
      "stdout": "",
      "stderr": "tmpv0i8x8qd: /tmp/tmpv0i8x8qd.cpp:31: int main(): Assertion `candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given map is empty.\n// Examples:\n// >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n// True\n// >>> check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n// False\n// >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"})\n// False\n// >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})\n// False\n// >>> check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" })\n// True\nbool check_dict_case(std::map<std::string,std::string> dict) {\n    if(dict.empty()) return false;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(std::isupper(it->first[0])) return false;\n        if(std::islower(it->first[0])) return true;\n    }\n    return true;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>())) == (false));\n}\n",
      "timestamp": 1664293103,
      "stdout": "",
      "stderr": "tmpln6xu4wv: /tmp/tmpln6xu4wv.cpp:29: int main(): Assertion `candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given map is empty.\n// Examples:\n// >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n// True\n// >>> check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n// False\n// >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"})\n// False\n// >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})\n// False\n// >>> check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" })\n// True\nbool check_dict_case(std::map<std::string,std::string> dict) {\n    if(dict.empty()) return false;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(it->first.length() != it->second.length()) return false;\n        if(it->first.length() == 1) continue;\n        if(it->first[0] != it->second[0]) return false;\n        if(it->first[0] >= 'a' && it->first[0] <= 'z') continue;\n        if(it->first[0] >= 'A' && it->first[0] <= 'Z') continue;\n        return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>())) == (false));\n}\n",
      "timestamp": 1664293105,
      "stdout": "",
      "stderr": "tmp3pg7kjtt: /tmp/tmp3pg7kjtt.cpp:31: int main(): Assertion `candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given map is empty.\n// Examples:\n// >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n// True\n// >>> check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n// False\n// >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"})\n// False\n// >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})\n// False\n// >>> check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" })\n// True\nbool check_dict_case(std::map<std::string,std::string> dict) {\n    if(dict.empty()) return false;\n    std::string lower_case_key;\n    std::string upper_case_key;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n        lower_case_key = it->first;\n        upper_case_key = it->first;\n        std::transform(lower_case_key.begin(), lower_case_key.end(), lower_case_key.begin(), ::tolower);\n        std::transform(upper_case_key.begin(), upper_case_key.end(), upper_case_key.begin(), ::toupper);\n        if(lower_case_key != upper_case_key) return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>())) == (false));\n}\n",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "tmp0r_lnhc1: /tmp/tmp0r_lnhc1.cpp:32: int main(): Assertion `candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given map is empty.\n// Examples:\n// >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n// True\n// >>> check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n// False\n// >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"})\n// False\n// >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})\n// False\n// >>> check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" })\n// True\nbool check_dict_case(std::map<std::string,std::string> dict) {\n    if(dict.empty()) return false;\n    std::string key;\n    for(std::map<std::string,std::string>::iterator it = dict.begin(); it != dict.end(); it++) {\n        key = it->first;\n        if(key.size() > 1) {\n            if(key[0] >= 'A' && key[0] <= 'Z') {\n                if(key[1] >= 'a' && key[1] <= 'z') {\n                    continue;\n                }\n            }\n            else if(key[0] >= 'a' && key[0] <= 'z') {\n                if(key[1] >= 'A' && key[1] <= 'Z') {\n                    continue;\n                }\n            }\n        }\n        return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>())) == (false));\n}\n",
      "timestamp": 1664293105,
      "stdout": "",
      "stderr": "tmp9wd7u3ij: /tmp/tmp9wd7u3ij.cpp:40: int main(): Assertion `candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given map is empty.\n// Examples:\n// >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n// True\n// >>> check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n// False\n// >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"})\n// False\n// >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})\n// False\n// >>> check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" })\n// True\nbool check_dict_case(std::map<std::string,std::string> dict) {\n    if(dict.empty()) return false;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(it->first.empty()) return false;\n        if(it->first[0] >= 'A' && it->first[0] <= 'Z') return false;\n        if(it->first[0] >= 'a' && it->first[0] <= 'z') return true;\n    }\n    return true;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>())) == (false));\n}\n",
      "timestamp": 1664293105,
      "stdout": "",
      "stderr": "tmpd859ylvq: /tmp/tmpd859ylvq.cpp:30: int main(): Assertion `candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given map is empty.\n// Examples:\n// >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n// True\n// >>> check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n// False\n// >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"})\n// False\n// >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})\n// False\n// >>> check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" })\n// True\nbool check_dict_case(std::map<std::string,std::string> dict) {\n    if(dict.empty())\n        return false;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(it->first.size() != it->second.size())\n            return false;\n        for(int i = 0; i < it->first.size(); i++) {\n            if(tolower(it->first[i]) != it->second[i])\n                return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>())) == (false));\n}\n",
      "timestamp": 1664293105,
      "stdout": "",
      "stderr": "tmprn8rfr7q: /tmp/tmprn8rfr7q.cpp:32: int main(): Assertion `candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given map is empty.\n// Examples:\n// >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n// True\n// >>> check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n// False\n// >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"})\n// False\n// >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})\n// False\n// >>> check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" })\n// True\nbool check_dict_case(std::map<std::string,std::string> dict) {\n    if(dict.empty()) return false;\n    for(auto it = dict.begin(); it != dict.end(); ++it) {\n        if(std::isupper(it->first[0])) return false;\n        if(std::islower(it->second[0])) return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>())) == (false));\n}\n",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "tmpawd7qibi: /tmp/tmpawd7qibi.cpp:27: int main(): Assertion `candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given map is empty.\n// Examples:\n// >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n// True\n// >>> check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n// False\n// >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"})\n// False\n// >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})\n// False\n// >>> check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" })\n// True\nbool check_dict_case(std::map<std::string,std::string> dict) {\n    if(dict.empty())\n        return false;\n    for(auto it = dict.begin(); it != dict.end(); ++it) {\n        if(it->first.length() != it->second.length())\n            return false;\n        if(std::isupper(it->first[0]))\n            return false;\n        if(std::islower(it->second[0]))\n            return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>())) == (false));\n}\n",
      "timestamp": 1664293105,
      "stdout": "",
      "stderr": "tmpysgwdy43: /tmp/tmpysgwdy43.cpp:32: int main(): Assertion `candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given map is empty.\n// Examples:\n// >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n// True\n// >>> check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n// False\n// >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"})\n// False\n// >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})\n// False\n// >>> check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" })\n// True\nbool check_dict_case(std::map<std::string,std::string> dict) {\n    if(dict.empty()) return false;\n    for(auto it = dict.begin(); it != dict.end(); ++it) {\n        if(it->first.size() != it->second.size()) return false;\n        for(int i = 0; i < it->first.size(); ++i) {\n            if(std::tolower(it->first[i]) != it->second[i]) return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>())) == (false));\n}\n",
      "timestamp": 1664293105,
      "stdout": "",
      "stderr": "tmpksb9ycam: /tmp/tmpksb9ycam.cpp:29: int main(): Assertion `candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given map is empty.\n// Examples:\n// >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n// True\n// >>> check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n// False\n// >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"})\n// False\n// >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})\n// False\n// >>> check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" })\n// True\nbool check_dict_case(std::map<std::string,std::string> dict) {\n    if(dict.empty())\n        return false;\n    for(auto it = dict.begin(); it != dict.end(); ++it) {\n        if(std::isupper(it->first[0]))\n            return false;\n        if(std::islower(it->second[0]))\n            return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>())) == (false));\n}\n",
      "timestamp": 1664293105,
      "stdout": "",
      "stderr": "tmpbnp6mn1k: /tmp/tmpbnp6mn1k.cpp:30: int main(): Assertion `candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given map is empty.\n// Examples:\n// >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n// True\n// >>> check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n// False\n// >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"})\n// False\n// >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})\n// False\n// >>> check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" })\n// True\nbool check_dict_case(std::map<std::string,std::string> dict) {\n    if(dict.empty()) return false;\n    std::string key;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n        key = it->first;\n        if(key.length() > 1 && key[0] >= 'A' && key[0] <= 'Z') return false;\n        if(key.length() > 1 && key[0] >= 'a' && key[0] <= 'z') return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>())) == (false));\n}\n",
      "timestamp": 1664293105,
      "stdout": "",
      "stderr": "tmp879fyb7y: /tmp/tmp879fyb7y.cpp:30: int main(): Assertion `candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given map is empty.\n// Examples:\n// >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n// True\n// >>> check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n// False\n// >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"})\n// False\n// >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})\n// False\n// >>> check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" })\n// True\nbool check_dict_case(std::map<std::string,std::string> dict) {\n    if(dict.empty())\n        return false;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(std::isupper(it->first[0]))\n            return false;\n        if(std::islower(it->first[0]))\n            return true;\n    }\n    return true;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>())) == (false));\n}\n",
      "timestamp": 1664293105,
      "stdout": "",
      "stderr": "tmpizu1py4d: /tmp/tmpizu1py4d.cpp:32: int main(): Assertion `candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given map is empty.\n// Examples:\n// >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n// True\n// >>> check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n// False\n// >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"})\n// False\n// >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})\n// False\n// >>> check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" })\n// True\nbool check_dict_case(std::map<std::string,std::string> dict) {\n    if(dict.empty()) return false;\n    std::string key;\n    for(auto it=dict.begin(); it!=dict.end(); ++it) {\n        key = it->first;\n        if(key.length() > 1 && key[0] >= 'A' && key[0] <= 'Z') return false;\n        if(key.length() > 1 && key[0] >= 'a' && key[0] <= 'z') return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>())) == (false));\n}\n",
      "timestamp": 1664293103,
      "stdout": "",
      "stderr": "tmp3b81b56t: /tmp/tmp3b81b56t.cpp:30: int main(): Assertion `candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given map is empty.\n// Examples:\n// >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n// True\n// >>> check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n// False\n// >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"})\n// False\n// >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})\n// False\n// >>> check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" })\n// True\nbool check_dict_case(std::map<std::string,std::string> dict) {\n    if(dict.empty()) return false;\n    std::string key;\n    for(auto it = dict.begin(); it != dict.end(); ++it) {\n        key = it->first;\n        if(key.size() > 1) {\n            if(key[0] >= 'A' && key[0] <= 'Z') {\n                if(key[1] >= 'a' && key[1] <= 'z') continue;\n                else return false;\n            }\n            else if(key[0] >= 'a' && key[0] <= 'z') continue;\n            else return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>())) == (false));\n}\n",
      "timestamp": 1664293105,
      "stdout": "",
      "stderr": "tmp0jlgbpq7: /tmp/tmp0jlgbpq7.cpp:36: int main(): Assertion `candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given map is empty.\n// Examples:\n// >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n// True\n// >>> check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n// False\n// >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"})\n// False\n// >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})\n// False\n// >>> check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" })\n// True\nbool check_dict_case(std::map<std::string,std::string> dict) {\n    if(dict.empty()) return false;\n    std::string key;\n    for(auto it = dict.begin(); it != dict.end(); ++it) {\n        key = it->first;\n        if(key.length() > 1) {\n            if(key[0] >= 'A' && key[0] <= 'Z') {\n                if(key[1] >= 'a' && key[1] <= 'z') continue;\n                else return false;\n            }\n            else if(key[0] >= 'a' && key[0] <= 'z') continue;\n            else return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>())) == (false));\n}\n",
      "timestamp": 1664293105,
      "stdout": "",
      "stderr": "tmp0vrvhsgc: /tmp/tmp0vrvhsgc.cpp:36: int main(): Assertion `candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given map is empty.\n// Examples:\n// >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n// True\n// >>> check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n// False\n// >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"})\n// False\n// >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})\n// False\n// >>> check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" })\n// True\nbool check_dict_case(std::map<std::string,std::string> dict) {\n    if(dict.empty())\n        return false;\n    std::string key;\n    for(std::map<std::string,std::string>::iterator it = dict.begin(); it != dict.end(); it++) {\n        key = it->first;\n        if(key.length() > 1 && key[0] >= 'A' && key[0] <= 'Z')\n            return false;\n        if(key.length() > 1 && key[0] >= 'a' && key[0] <= 'z')\n            return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>())) == (false));\n}\n",
      "timestamp": 1664293105,
      "stdout": "",
      "stderr": "tmpjevq0_2i: /tmp/tmpjevq0_2i.cpp:33: int main(): Assertion `candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given map is empty.\n// Examples:\n// >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n// True\n// >>> check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n// False\n// >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"})\n// False\n// >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})\n// False\n// >>> check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" })\n// True\nbool check_dict_case(std::map<std::string,std::string> dict) {\n    if(dict.empty()) return false;\n    for(auto it = dict.begin(); it != dict.end(); ++it) {\n        if(std::isupper(it->first[0])) return false;\n        if(std::islower(it->second[0])) return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>())) == (false));\n}\n",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "tmpawd7qibi: /tmp/tmpawd7qibi.cpp:27: int main(): Assertion `candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given map is empty.\n// Examples:\n// >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n// True\n// >>> check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n// False\n// >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"})\n// False\n// >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})\n// False\n// >>> check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" })\n// True\nbool check_dict_case(std::map<std::string,std::string> dict) {\n    if(dict.empty()) return false;\n    for(auto it = dict.begin(); it != dict.end(); ++it) {\n        if(std::isupper(it->first[0])) return false;\n        if(std::islower(it->first[0])) return true;\n    }\n    return true;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>())) == (false));\n}\n",
      "timestamp": 1664293103,
      "stdout": "",
      "stderr": "tmp_zvc4ncv: /tmp/tmp_zvc4ncv.cpp:29: int main(): Assertion `candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given map is empty.\n// Examples:\n// >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n// True\n// >>> check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n// False\n// >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"})\n// False\n// >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})\n// False\n// >>> check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" })\n// True\nbool check_dict_case(std::map<std::string,std::string> dict) {\n    if(dict.empty())\n        return false;\n    for(auto it = dict.begin(); it != dict.end(); ++it) {\n        if(it->first.size() != it->second.size())\n            return false;\n        for(int i = 0; i < it->first.size(); ++i) {\n            if(tolower(it->first[i]) != tolower(it->second[i]))\n                return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>())) == (false));\n}\n",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "tmpbezjb9_a: /tmp/tmpbezjb9_a.cpp:32: int main(): Assertion `candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given map is empty.\n// Examples:\n// >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n// True\n// >>> check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n// False\n// >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"})\n// False\n// >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})\n// False\n// >>> check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" })\n// True\nbool check_dict_case(std::map<std::string,std::string> dict) {\n    if(dict.empty()) return false;\n    std::string key;\n    for(auto it = dict.begin(); it != dict.end(); ++it) {\n        key = it->first;\n        if(key.length() > 1) {\n            if(std::islower(key[0]) && std::isupper(key[1])) return false;\n            if(std::islower(key[0]) && std::isupper(key[0])) return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>())) == (false));\n}\n",
      "timestamp": 1664293105,
      "stdout": "",
      "stderr": "tmppwg3qi9t: /tmp/tmppwg3qi9t.cpp:32: int main(): Assertion `candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given map is empty.\n// Examples:\n// >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n// True\n// >>> check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n// False\n// >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"})\n// False\n// >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})\n// False\n// >>> check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" })\n// True\nbool check_dict_case(std::map<std::string,std::string> dict) {\n    if(dict.empty())\n        return false;\n    std::string key;\n    for(auto it=dict.begin(); it!=dict.end(); ++it) {\n        key = it->first;\n        if(key.size() > 1) {\n            if(std::islower(key[0]) && std::isupper(key[1]))\n                return false;\n            if(std::islower(key[0]) && std::isupper(key[0]))\n                return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>())) == (false));\n}\n",
      "timestamp": 1664293105,
      "stdout": "",
      "stderr": "tmp3zz1vjpn: /tmp/tmp3zz1vjpn.cpp:35: int main(): Assertion `candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given map is empty.\n// Examples:\n// >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n// True\n// >>> check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n// False\n// >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"})\n// False\n// >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})\n// False\n// >>> check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" })\n// True\nbool check_dict_case(std::map<std::string,std::string> dict) {\n    if(dict.empty()) return false;\n    std::string key;\n    for(auto it=dict.begin(); it!=dict.end(); ++it) {\n        key = it->first;\n        if(key.size() > 1 && key[0] >= 'A' && key[0] <= 'Z') return false;\n        if(key.size() > 1 && key[0] >= 'a' && key[0] <= 'z') return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>())) == (false));\n}\n",
      "timestamp": 1664293105,
      "stdout": "",
      "stderr": "tmpuh1vof8u: /tmp/tmpuh1vof8u.cpp:30: int main(): Assertion `candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given map is empty.\n// Examples:\n// >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n// True\n// >>> check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n// False\n// >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"})\n// False\n// >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})\n// False\n// >>> check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" })\n// True\nbool check_dict_case(std::map<std::string,std::string> dict) {\n    if(dict.empty()) return false;\n    std::string key;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n        key = it->first;\n        if(key.length() > 1 && key[0] >= 'A' && key[0] <= 'Z') return false;\n        if(key.length() > 1 && key[0] >= 'a' && key[0] <= 'z') return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>())) == (false));\n}\n",
      "timestamp": 1664293105,
      "stdout": "",
      "stderr": "tmp879fyb7y: /tmp/tmp879fyb7y.cpp:30: int main(): Assertion `candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given map is empty.\n// Examples:\n// >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n// True\n// >>> check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n// False\n// >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"})\n// False\n// >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})\n// False\n// >>> check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" })\n// True\nbool check_dict_case(std::map<std::string,std::string> dict) {\n    if(dict.empty())\n        return false;\n    bool all_lower = true;\n    bool all_upper = true;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(std::isupper(it->first[0]))\n            all_lower = false;\n        if(std::islower(it->first[0]))\n            all_upper = false;\n    }\n    return all_lower || all_upper;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>())) == (false));\n}\n",
      "timestamp": 1664293105,
      "stdout": "",
      "stderr": "tmps_i3o97n: /tmp/tmps_i3o97n.cpp:34: int main(): Assertion `candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given map is empty.\n// Examples:\n// >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n// True\n// >>> check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n// False\n// >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"})\n// False\n// >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})\n// False\n// >>> check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" })\n// True\nbool check_dict_case(std::map<std::string,std::string> dict) {\n    if(dict.empty()) return false;\n    for(auto it = dict.begin(); it != dict.end(); ++it) {\n        if(it->first.size() != it->second.size()) return false;\n        for(int i = 0; i < it->first.size(); ++i) {\n            if(tolower(it->first[i]) != tolower(it->second[i])) return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>())) == (false));\n}\n",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "tmpkrvrzhzc: /tmp/tmpkrvrzhzc.cpp:29: int main(): Assertion `candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given map is empty.\n// Examples:\n// >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n// True\n// >>> check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n// False\n// >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"})\n// False\n// >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})\n// False\n// >>> check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" })\n// True\nbool check_dict_case(std::map<std::string,std::string> dict) {\n    if(dict.empty()) return false;\n    for(auto it = dict.begin(); it != dict.end(); ++it) {\n        if(it->first.size() != it->second.size()) return false;\n        for(auto it2 = it->first.begin(); it2 != it->first.end(); ++it2) {\n            if(tolower(*it2) != tolower(*it2)) return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>())) == (false));\n}\n",
      "timestamp": 1664293106,
      "stdout": "",
      "stderr": "tmp5rlhox2y: /tmp/tmp5rlhox2y.cpp:29: int main(): Assertion `candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given map is empty.\n// Examples:\n// >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n// True\n// >>> check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n// False\n// >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"})\n// False\n// >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})\n// False\n// >>> check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" })\n// True\nbool check_dict_case(std::map<std::string,std::string> dict) {\n    if(dict.empty()) return false;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(std::isupper(it->first[0])) return false;\n        if(std::islower(it->second[0])) return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>())) == (false));\n}\n",
      "timestamp": 1664293107,
      "stdout": "",
      "stderr": "tmpnsd6pk_x: /tmp/tmpnsd6pk_x.cpp:27: int main(): Assertion `candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given map is empty.\n// Examples:\n// >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n// True\n// >>> check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n// False\n// >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"})\n// False\n// >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})\n// False\n// >>> check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" })\n// True\nbool check_dict_case(std::map<std::string,std::string> dict) {\n    if(dict.empty()) return false;\n    for(auto it = dict.begin(); it != dict.end(); ++it) {\n        if(it->first.empty()) return false;\n        if(it->first[0] >= 'A' && it->first[0] <= 'Z') continue;\n        if(it->first[0] >= 'a' && it->first[0] <= 'z') continue;\n        return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>())) == (false));\n}\n",
      "timestamp": 1664293107,
      "stdout": "",
      "stderr": "tmpctjd055x: /tmp/tmpctjd055x.cpp:30: int main(): Assertion `candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given map is empty.\n// Examples:\n// >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n// True\n// >>> check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n// False\n// >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"})\n// False\n// >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})\n// False\n// >>> check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" })\n// True\nbool check_dict_case(std::map<std::string,std::string> dict) {\n    if(dict.empty()) return false;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(std::isupper(it->first[0])) return false;\n        if(std::islower(it->first[0])) return true;\n    }\n    return true;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>())) == (false));\n}\n",
      "timestamp": 1664293103,
      "stdout": "",
      "stderr": "tmpln6xu4wv: /tmp/tmpln6xu4wv.cpp:29: int main(): Assertion `candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given map is empty.\n// Examples:\n// >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n// True\n// >>> check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n// False\n// >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"})\n// False\n// >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})\n// False\n// >>> check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" })\n// True\nbool check_dict_case(std::map<std::string,std::string> dict) {\n    if(dict.empty()) return false;\n    for(auto it = dict.begin(); it != dict.end(); ++it) {\n        if(it->first.size() != it->second.size()) return false;\n        for(auto it2 = it->first.begin(); it2 != it->first.end(); ++it2) {\n            if(std::tolower(*it2) != *it2) return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>())) == (false));\n}\n",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "tmp3hjhipmk: /tmp/tmp3hjhipmk.cpp:29: int main(): Assertion `candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given map is empty.\n// Examples:\n// >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n// True\n// >>> check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n// False\n// >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"})\n// False\n// >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})\n// False\n// >>> check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" })\n// True\nbool check_dict_case(std::map<std::string,std::string> dict) {\n    if(dict.empty()) return false;\n    for(auto it = dict.begin(); it != dict.end(); ++it) {\n        if(std::isupper(it->first[0])) return false;\n        if(std::islower(it->second[0])) return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>())) == (false));\n}\n",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "tmpawd7qibi: /tmp/tmpawd7qibi.cpp:27: int main(): Assertion `candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given map is empty.\n// Examples:\n// >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n// True\n// >>> check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n// False\n// >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"})\n// False\n// >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})\n// False\n// >>> check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" })\n// True\nbool check_dict_case(std::map<std::string,std::string> dict) {\n    if(dict.empty()) return false;\n    std::string lower_case_key;\n    std::string upper_case_key;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n        lower_case_key = it->first;\n        upper_case_key = it->first;\n        std::transform(lower_case_key.begin(), lower_case_key.end(), lower_case_key.begin(), ::tolower);\n        std::transform(upper_case_key.begin(), upper_case_key.end(), upper_case_key.begin(), ::toupper);\n        if(lower_case_key != upper_case_key) return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>())) == (false));\n}\n",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "tmp0r_lnhc1: /tmp/tmp0r_lnhc1.cpp:32: int main(): Assertion `candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given map is empty.\n// Examples:\n// >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n// True\n// >>> check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n// False\n// >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"})\n// False\n// >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})\n// False\n// >>> check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" })\n// True\nbool check_dict_case(std::map<std::string,std::string> dict) {\n    if(dict.empty()) return false;\n    std::string key;\n    for(auto it=dict.begin(); it!=dict.end(); ++it) {\n        key = it->first;\n        if(key.length() > 1 && key[0] >= 'A' && key[0] <= 'Z') return false;\n        if(key.length() > 1 && key[0] >= 'a' && key[0] <= 'z') return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>())) == (false));\n}\n",
      "timestamp": 1664293103,
      "stdout": "",
      "stderr": "tmp3b81b56t: /tmp/tmp3b81b56t.cpp:30: int main(): Assertion `candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given map is empty.\n// Examples:\n// >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n// True\n// >>> check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n// False\n// >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"})\n// False\n// >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})\n// False\n// >>> check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" })\n// True\nbool check_dict_case(std::map<std::string,std::string> dict) {\n    if(dict.empty()) return false;\n    std::string key;\n    for(auto it=dict.begin(); it!=dict.end(); ++it) {\n        key = it->first;\n        if(key.size()>1) {\n            if(!isalpha(key[0]) && !isalpha(key[1])) return false;\n        }\n        else if(!isalpha(key[0])) return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>())) == (false));\n}\n",
      "timestamp": 1664293107,
      "stdout": "",
      "stderr": "tmpqwo91tyd: /tmp/tmpqwo91tyd.cpp:32: int main(): Assertion `candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given map is empty.\n// Examples:\n// >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n// True\n// >>> check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n// False\n// >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"})\n// False\n// >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})\n// False\n// >>> check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" })\n// True\nbool check_dict_case(std::map<std::string,std::string> dict) {\n    if(dict.empty()) return false;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(std::isupper(it->first[0])) return false;\n        if(std::islower(it->second[0])) return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>())) == (false));\n}\n",
      "timestamp": 1664293107,
      "stdout": "",
      "stderr": "tmpnsd6pk_x: /tmp/tmpnsd6pk_x.cpp:27: int main(): Assertion `candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given map is empty.\n// Examples:\n// >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n// True\n// >>> check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n// False\n// >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"})\n// False\n// >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})\n// False\n// >>> check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" })\n// True\nbool check_dict_case(std::map<std::string,std::string> dict) {\n    if(dict.empty()) return false;\n    std::string key;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n        key = it->first;\n        if(key.size() > 1) {\n            if(key[0] >= 'A' && key[0] <= 'Z') return false;\n            if(key[0] >= 'a' && key[0] <= 'z') return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>())) == (false));\n}\n",
      "timestamp": 1664293107,
      "stdout": "",
      "stderr": "tmpvgemrtlk: /tmp/tmpvgemrtlk.cpp:32: int main(): Assertion `candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given map is empty.\n// Examples:\n// >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n// True\n// >>> check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n// False\n// >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"})\n// False\n// >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})\n// False\n// >>> check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" })\n// True\nbool check_dict_case(std::map<std::string,std::string> dict) {\n    if(dict.empty())\n        return false;\n    std::string key;\n    for(std::map<std::string,std::string>::iterator it = dict.begin(); it != dict.end(); ++it) {\n        key = it->first;\n        if(key.length() > 1 && key[0] >= 'A' && key[0] <= 'Z')\n            return false;\n        if(key.length() > 1 && key[0] >= 'a' && key[0] <= 'z')\n            return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>())) == (false));\n}\n",
      "timestamp": 1664293107,
      "stdout": "",
      "stderr": "tmp0udw9j1k: /tmp/tmp0udw9j1k.cpp:33: int main(): Assertion `candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given map is empty.\n// Examples:\n// >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n// True\n// >>> check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n// False\n// >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"})\n// False\n// >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})\n// False\n// >>> check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" })\n// True\nbool check_dict_case(std::map<std::string,std::string> dict) {\n    if(dict.empty())\n        return false;\n    std::string key;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n        key = it->first;\n        if(key.size() > 1 && key[0] >= 'A' && key[0] <= 'Z')\n            return false;\n        if(key.size() > 1 && key[0] >= 'a' && key[0] <= 'z')\n            return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>())) == (false));\n}\n",
      "timestamp": 1664293107,
      "stdout": "",
      "stderr": "tmpalcmwn1t: /tmp/tmpalcmwn1t.cpp:33: int main(): Assertion `candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given map is empty.\n// Examples:\n// >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n// True\n// >>> check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n// False\n// >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"})\n// False\n// >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})\n// False\n// >>> check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" })\n// True\nbool check_dict_case(std::map<std::string,std::string> dict) {\n    if(dict.empty())\n        return false;\n    for(auto it = dict.begin(); it != dict.end(); ++it) {\n        if(it->first.size() != it->second.size())\n            return false;\n        for(int i = 0; i < it->first.size(); ++i) {\n            if(tolower(it->first[i]) != tolower(it->second[i]))\n                return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>())) == (false));\n}\n",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "tmpbezjb9_a: /tmp/tmpbezjb9_a.cpp:32: int main(): Assertion `candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given map is empty.\n// Examples:\n// >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n// True\n// >>> check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n// False\n// >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"})\n// False\n// >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})\n// False\n// >>> check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" })\n// True\nbool check_dict_case(std::map<std::string,std::string> dict) {\n    for(auto it = dict.begin(); it != dict.end(); ++it) {\n        if(std::isupper(it->first[0])) {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>())) == (false));\n}\n",
      "timestamp": 1664293107,
      "stdout": "",
      "stderr": "tmpdkaec8pk: /tmp/tmpdkaec8pk.cpp:29: int main(): Assertion `candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given map is empty.\n// Examples:\n// >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n// True\n// >>> check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n// False\n// >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"})\n// False\n// >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})\n// False\n// >>> check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" })\n// True\nbool check_dict_case(std::map<std::string,std::string> dict) {\n    if(dict.empty()) return false;\n    std::string key;\n    for(std::map<std::string,std::string>::iterator it = dict.begin(); it != dict.end(); ++it) {\n        key = it->first;\n        if(key.length() == 1) continue;\n        if(key[0] >= 'A' && key[0] <= 'Z') continue;\n        if(key[0] >= 'a' && key[0] <= 'z') continue;\n        return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>())) == (false));\n}\n",
      "timestamp": 1664293107,
      "stdout": "",
      "stderr": "tmp11l4p8p0: /tmp/tmp11l4p8p0.cpp:32: int main(): Assertion `candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given map is empty.\n// Examples:\n// >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n// True\n// >>> check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n// False\n// >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"})\n// False\n// >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})\n// False\n// >>> check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" })\n// True\nbool check_dict_case(std::map<std::string,std::string> dict) {\n    if(dict.empty()) return false;\n    std::string key;\n    for(std::map<std::string,std::string>::iterator it = dict.begin(); it != dict.end(); ++it) {\n        key = it->first;\n        if(key.size() > 1) {\n            if(!isalpha(key[0]) && !isalpha(key[1])) return false;\n            if(!isalpha(key[0]) && !isalpha(key[1])) return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>())) == (false));\n}\n",
      "timestamp": 1664293107,
      "stdout": "",
      "stderr": "tmpknlx2fka: /tmp/tmpknlx2fka.cpp:32: int main(): Assertion `candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given map is empty.\n// Examples:\n// >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n// True\n// >>> check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n// False\n// >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"})\n// False\n// >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})\n// False\n// >>> check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" })\n// True\nbool check_dict_case(std::map<std::string,std::string> dict) {\n    if(dict.empty()) return false;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(std::isupper(it->first[0])) return false;\n        if(std::islower(it->first[0])) return true;\n    }\n    return true;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>())) == (false));\n}\n",
      "timestamp": 1664293103,
      "stdout": "",
      "stderr": "tmpln6xu4wv: /tmp/tmpln6xu4wv.cpp:29: int main(): Assertion `candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given map is empty.\n// Examples:\n// >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n// True\n// >>> check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n// False\n// >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"})\n// False\n// >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})\n// False\n// >>> check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" })\n// True\nbool check_dict_case(std::map<std::string,std::string> dict) {\n    if(dict.empty()) return false;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(std::isupper(it->first[0])) return false;\n        if(std::islower(it->second[0])) return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>())) == (false));\n}\n",
      "timestamp": 1664293107,
      "stdout": "",
      "stderr": "tmpnsd6pk_x: /tmp/tmpnsd6pk_x.cpp:27: int main(): Assertion `candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given map is empty.\n// Examples:\n// >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n// True\n// >>> check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n// False\n// >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"})\n// False\n// >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})\n// False\n// >>> check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" })\n// True\nbool check_dict_case(std::map<std::string,std::string> dict) {\n    if(dict.empty()) return false;\n    for(auto it = dict.begin(); it != dict.end(); ++it) {\n        if(it->first.size() != it->second.size()) return false;\n        for(int i = 0; i < it->first.size(); ++i) {\n            if(tolower(it->first[i]) != tolower(it->second[i])) return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>())) == (false));\n}\n",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "tmpkrvrzhzc: /tmp/tmpkrvrzhzc.cpp:29: int main(): Assertion `candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given map is empty.\n// Examples:\n// >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n// True\n// >>> check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n// False\n// >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"})\n// False\n// >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})\n// False\n// >>> check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" })\n// True\nbool check_dict_case(std::map<std::string,std::string> dict) {\n    if(dict.empty()) return false;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(it->first.size() != it->second.size()) return false;\n        for(int i = 0; i < it->first.size(); i++) {\n            if(tolower(it->first[i]) != tolower(it->second[i])) return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>())) == (false));\n}\n",
      "timestamp": 1664293103,
      "stdout": "",
      "stderr": "tmp4si0hwud: /tmp/tmp4si0hwud.cpp:29: int main(): Assertion `candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given map is empty.\n// Examples:\n// >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n// True\n// >>> check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n// False\n// >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"})\n// False\n// >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})\n// False\n// >>> check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" })\n// True\nbool check_dict_case(std::map<std::string,std::string> dict) {\n    if(dict.empty())\n        return false;\n    std::string key;\n    for(auto it = dict.begin(); it != dict.end(); ++it) {\n        key = it->first;\n        if(key.empty())\n            return false;\n        if(key[0] >= 'A' && key[0] <= 'Z') {\n            if(key[0] != key[0] - 'A' + 'a')\n                return false;\n        } else if(key[0] >= 'a' && key[0] <= 'z') {\n            if(key[0] != key[0] - 'a' + 'A')\n                return false;\n        } else {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>())) == (false));\n}\n",
      "timestamp": 1664293107,
      "stdout": "",
      "stderr": "tmpxar3hlvq: /tmp/tmpxar3hlvq.cpp:39: int main(): Assertion `candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given map is empty.\n// Examples:\n// >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n// True\n// >>> check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n// False\n// >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"})\n// False\n// >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})\n// False\n// >>> check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" })\n// True\nbool check_dict_case(std::map<std::string,std::string> dict) {\n    if(dict.empty()) return false;\n    for(auto it = dict.begin(); it != dict.end(); ++it) {\n        if(std::isupper(it->first[0])) return false;\n        if(std::islower(it->first[0])) return true;\n    }\n    return true;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>())) == (false));\n}\n",
      "timestamp": 1664293103,
      "stdout": "",
      "stderr": "tmp_zvc4ncv: /tmp/tmp_zvc4ncv.cpp:29: int main(): Assertion `candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given map is empty.\n// Examples:\n// >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n// True\n// >>> check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n// False\n// >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"})\n// False\n// >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})\n// False\n// >>> check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" })\n// True\nbool check_dict_case(std::map<std::string,std::string> dict) {\n    if(dict.empty()) return false;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(it->first.size() != it->second.size()) return false;\n        for(int i = 0; i < it->first.size(); i++) {\n            if(tolower(it->first[i]) != tolower(it->second[i])) return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>())) == (false));\n}\n",
      "timestamp": 1664293103,
      "stdout": "",
      "stderr": "tmp4si0hwud: /tmp/tmp4si0hwud.cpp:29: int main(): Assertion `candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given map is empty.\n// Examples:\n// >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n// True\n// >>> check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n// False\n// >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"})\n// False\n// >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})\n// False\n// >>> check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" })\n// True\nbool check_dict_case(std::map<std::string,std::string> dict) {\n    if(dict.empty()) return false;\n    for(auto it = dict.begin(); it != dict.end(); ++it) {\n        if(std::isupper(it->first[0])) return false;\n        if(std::islower(it->second[0])) return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>())) == (false));\n}\n",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "tmpawd7qibi: /tmp/tmpawd7qibi.cpp:27: int main(): Assertion `candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given map is empty.\n// Examples:\n// >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n// True\n// >>> check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n// False\n// >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"})\n// False\n// >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})\n// False\n// >>> check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" })\n// True\nbool check_dict_case(std::map<std::string,std::string> dict) {\n    if(dict.empty()) return false;\n    for(auto it = dict.begin(); it != dict.end(); ++it) {\n        if(it->first.size() != it->second.size()) return false;\n        for(int i = 0; i < it->first.size(); ++i) {\n            if(tolower(it->first[i]) != tolower(it->second[i])) return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>())) == (false));\n}\n",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "tmpkrvrzhzc: /tmp/tmpkrvrzhzc.cpp:29: int main(): Assertion `candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given map is empty.\n// Examples:\n// >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n// True\n// >>> check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n// False\n// >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"})\n// False\n// >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})\n// False\n// >>> check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" })\n// True\nbool check_dict_case(std::map<std::string,std::string> dict) {\n    if(dict.empty())\n        return false;\n    bool all_lower = true;\n    bool all_upper = true;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(std::isupper(it->first[0]))\n            all_lower = false;\n        else\n            all_upper = false;\n    }\n    return all_lower || all_upper;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>())) == (false));\n}\n",
      "timestamp": 1664293107,
      "stdout": "",
      "stderr": "tmprtmq08rr: /tmp/tmprtmq08rr.cpp:34: int main(): Assertion `candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given map is empty.\n// Examples:\n// >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n// True\n// >>> check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n// False\n// >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"})\n// False\n// >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})\n// False\n// >>> check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" })\n// True\nbool check_dict_case(std::map<std::string,std::string> dict) {\n    if(dict.empty()) return false;\n    for(auto it = dict.begin(); it != dict.end(); ++it) {\n        if(std::isupper(it->first[0])) return false;\n        if(std::islower(it->second[0])) return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>())) == (false));\n}\n",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "tmpawd7qibi: /tmp/tmpawd7qibi.cpp:27: int main(): Assertion `candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given map is empty.\n// Examples:\n// >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n// True\n// >>> check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n// False\n// >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"})\n// False\n// >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})\n// False\n// >>> check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" })\n// True\nbool check_dict_case(std::map<std::string,std::string> dict) {\n    if(dict.empty())\n        return false;\n    std::string key;\n    for(auto it=dict.begin(); it!=dict.end(); it++) {\n        key = it->first;\n        if(key.length() > 1) {\n            if(std::islower(key[0]) && std::isupper(key[1]))\n                return false;\n            if(std::islower(key[0]) && std::isupper(key[1]))\n                return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>())) == (false));\n}\n",
      "timestamp": 1664293107,
      "stdout": "",
      "stderr": "tmpyr39f2fc: /tmp/tmpyr39f2fc.cpp:35: int main(): Assertion `candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given map is empty.\n// Examples:\n// >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n// True\n// >>> check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n// False\n// >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"})\n// False\n// >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})\n// False\n// >>> check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" })\n// True\nbool check_dict_case(std::map<std::string,std::string> dict) {\n    if(dict.empty()) return false;\n    for(auto it = dict.begin(); it != dict.end(); ++it) {\n        if(it->first.size() != it->second.size()) return false;\n        for(int i = 0; i < it->first.size(); ++i) {\n            if(tolower(it->first[i]) != tolower(it->second[i])) return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>())) == (false));\n}\n",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "tmpkrvrzhzc: /tmp/tmpkrvrzhzc.cpp:29: int main(): Assertion `candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given map is empty.\n// Examples:\n// >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n// True\n// >>> check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n// False\n// >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"})\n// False\n// >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})\n// False\n// >>> check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" })\n// True\nbool check_dict_case(std::map<std::string,std::string> dict) {\n    if(dict.empty()) return false;\n    for(auto it = dict.begin(); it != dict.end(); ++it) {\n        if(std::isupper(it->first[0])) return false;\n        if(std::islower(it->first[0])) return true;\n    }\n    return true;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>())) == (false));\n}\n",
      "timestamp": 1664293103,
      "stdout": "",
      "stderr": "tmp_zvc4ncv: /tmp/tmp_zvc4ncv.cpp:29: int main(): Assertion `candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given map is empty.\n// Examples:\n// >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n// True\n// >>> check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n// False\n// >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"})\n// False\n// >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})\n// False\n// >>> check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" })\n// True\nbool check_dict_case(std::map<std::string,std::string> dict) {\n    if(dict.empty()) return false;\n    std::string key;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n        key = it->first;\n        if(key.size() > 1) {\n            if(!isalpha(key[0]) && !isalpha(key[1])) return false;\n            if(!isalpha(key[0]) && !isalpha(key[1])) return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>())) == (false));\n}\n",
      "timestamp": 1664293107,
      "stdout": "",
      "stderr": "tmp8opfmwf0: /tmp/tmp8opfmwf0.cpp:32: int main(): Assertion `candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given map is empty.\n// Examples:\n// >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n// True\n// >>> check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n// False\n// >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"})\n// False\n// >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})\n// False\n// >>> check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" })\n// True\nbool check_dict_case(std::map<std::string,std::string> dict) {\n    if(dict.empty()) return false;\n    std::string key;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n        key = it->first;\n        if(key.length() > 1) {\n            if(std::islower(key[0]) && std::isupper(key[1])) return false;\n            if(std::islower(key[0]) && std::isupper(key[0])) return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>())) == (false));\n}\n",
      "timestamp": 1664293107,
      "stdout": "",
      "stderr": "tmp75fhfoox: /tmp/tmp75fhfoox.cpp:32: int main(): Assertion `candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given map is empty.\n// Examples:\n// >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n// True\n// >>> check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n// False\n// >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"})\n// False\n// >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})\n// False\n// >>> check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" })\n// True\nbool check_dict_case(std::map<std::string,std::string> dict) {\n    if(dict.empty()) return false;\n    for(auto it = dict.begin(); it != dict.end(); ++it) {\n        if(std::isupper(it->first[0])) return false;\n        if(std::islower(it->first[0])) return true;\n    }\n    return true;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>())) == (false));\n}\n",
      "timestamp": 1664293103,
      "stdout": "",
      "stderr": "tmp_zvc4ncv: /tmp/tmp_zvc4ncv.cpp:29: int main(): Assertion `candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given map is empty.\n// Examples:\n// >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n// True\n// >>> check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n// False\n// >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"})\n// False\n// >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})\n// False\n// >>> check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" })\n// True\nbool check_dict_case(std::map<std::string,std::string> dict) {\n    if(dict.empty()) return false;\n    for(auto it = dict.begin(); it != dict.end(); ++it) {\n        if(std::isupper(it->first[0])) return false;\n        if(std::islower(it->first[0])) return true;\n    }\n    return true;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>())) == (false));\n}\n",
      "timestamp": 1664293103,
      "stdout": "",
      "stderr": "tmp_zvc4ncv: /tmp/tmp_zvc4ncv.cpp:29: int main(): Assertion `candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given map is empty.\n// Examples:\n// >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n// True\n// >>> check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n// False\n// >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"})\n// False\n// >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})\n// False\n// >>> check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" })\n// True\nbool check_dict_case(std::map<std::string,std::string> dict) {\n    if(dict.empty()) return false;\n    std::string key;\n    for(auto it=dict.begin(); it!=dict.end(); ++it) {\n        key = it->first;\n        if(key.length() > 1 && key[0] >= 'A' && key[0] <= 'Z') return false;\n        if(key.length() > 1 && key[0] >= 'a' && key[0] <= 'z') return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>())) == (false));\n}\n",
      "timestamp": 1664293103,
      "stdout": "",
      "stderr": "tmp3b81b56t: /tmp/tmp3b81b56t.cpp:30: int main(): Assertion `candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given map is empty.\n// Examples:\n// >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n// True\n// >>> check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n// False\n// >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"})\n// False\n// >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})\n// False\n// >>> check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" })\n// True\nbool check_dict_case(std::map<std::string,std::string> dict) {\n    if(dict.empty()) return false;\n    for(auto it = dict.begin(); it != dict.end(); ++it) {\n        if(it->first.length() != it->second.length()) return false;\n        if(std::islower(it->first[0])) {\n            if(std::isupper(it->second[0])) return false;\n        } else {\n            if(std::islower(it->second[0])) return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>())) == (false));\n}\n",
      "timestamp": 1664293107,
      "stdout": "",
      "stderr": "tmprd9wllon: /tmp/tmprd9wllon.cpp:31: int main(): Assertion `candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given map is empty.\n// Examples:\n// >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n// True\n// >>> check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n// False\n// >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"})\n// False\n// >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})\n// False\n// >>> check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" })\n// True\nbool check_dict_case(std::map<std::string,std::string> dict) {\n    if(dict.empty()) return false;\n    for(auto it=dict.begin(); it!=dict.end(); it++) {\n        if(std::isupper(it->first[0])) return false;\n        if(std::islower(it->first[0])) return true;\n    }\n    return true;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>())) == (false));\n}\n",
      "timestamp": 1664293107,
      "stdout": "",
      "stderr": "tmpllk_hq3f: /tmp/tmpllk_hq3f.cpp:29: int main(): Assertion `candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given map is empty.\n// Examples:\n// >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n// True\n// >>> check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n// False\n// >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"})\n// False\n// >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})\n// False\n// >>> check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" })\n// True\nbool check_dict_case(std::map<std::string,std::string> dict) {\n    if(dict.empty()) return false;\n    std::string key;\n    for(std::map<std::string,std::string>::iterator it = dict.begin(); it != dict.end(); it++) {\n        key = it->first;\n        if(key.size() > 1) {\n            if(std::tolower(key[0]) != key[0] && std::toupper(key[0]) != key[0]) return false;\n            for(int i = 1; i < key.size(); i++) {\n                if(std::tolower(key[i]) != key[i] && std::toupper(key[i]) != key[i]) return false;\n            }\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>())) == (false));\n}\n",
      "timestamp": 1664293107,
      "stdout": "",
      "stderr": "tmp_yz6zzam: /tmp/tmp_yz6zzam.cpp:34: int main(): Assertion `candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given map is empty.\n// Examples:\n// >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n// True\n// >>> check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n// False\n// >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"})\n// False\n// >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})\n// False\n// >>> check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" })\n// True\nbool check_dict_case(std::map<std::string,std::string> dict) {\n    for(auto it=dict.begin(); it!=dict.end(); it++) {\n        if(it->first.length() != it->second.length()) {\n            return false;\n        }\n        if(it->first[0] >= 'A' && it->first[0] <= 'Z') {\n            if(it->second[0] >= 'a' && it->second[0] <= 'z') {\n                continue;\n            }\n            else {\n                return false;\n            }\n        }\n        else if(it->first[0] >= 'a' && it->first[0] <= 'z') {\n            if(it->second[0] >= 'A' && it->second[0] <= 'Z') {\n                continue;\n            }\n            else {\n                return false;\n            }\n        }\n        else {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>())) == (false));\n}\n",
      "timestamp": 1664293107,
      "stdout": "",
      "stderr": "tmppuak6q11: /tmp/tmppuak6q11.cpp:46: int main(): Assertion `candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given map is empty.\n// Examples:\n// >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n// True\n// >>> check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n// False\n// >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"})\n// False\n// >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})\n// False\n// >>> check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" })\n// True\nbool check_dict_case(std::map<std::string,std::string> dict) {\n    if(dict.empty()) return false;\n    for(auto it=dict.begin(); it!=dict.end(); ++it) {\n        if(it->first.size() != it->second.size()) return false;\n        for(int i=0; i<it->first.size(); ++i) {\n            if(tolower(it->first[i]) != tolower(it->second[i])) return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>())) == (false));\n}\n",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "tmpq9wj8iur: /tmp/tmpq9wj8iur.cpp:29: int main(): Assertion `candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given map is empty.\n// Examples:\n// >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n// True\n// >>> check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n// False\n// >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"})\n// False\n// >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})\n// False\n// >>> check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" })\n// True\nbool check_dict_case(std::map<std::string,std::string> dict) {\n    if(dict.empty())\n        return false;\n    for(auto it=dict.begin(); it!=dict.end(); ++it) {\n        if(std::isupper(it->first[0]))\n            return false;\n        if(std::islower(it->second[0]))\n            return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>())) == (false));\n}\n",
      "timestamp": 1664293107,
      "stdout": "",
      "stderr": "tmpwkhjmof7: /tmp/tmpwkhjmof7.cpp:30: int main(): Assertion `candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given map is empty.\n// Examples:\n// >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n// True\n// >>> check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n// False\n// >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"})\n// False\n// >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})\n// False\n// >>> check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" })\n// True\nbool check_dict_case(std::map<std::string,std::string> dict) {\n    if(dict.empty()) return false;\n    std::string key;\n    for(std::map<std::string,std::string>::iterator it = dict.begin(); it != dict.end(); it++) {\n        key = it->first;\n        if(key.length() > 1 && key[0] >= 'A' && key[0] <= 'Z') return false;\n        if(key.length() > 1 && key[0] >= 'a' && key[0] <= 'z') return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>())) == (false));\n}\n",
      "timestamp": 1664293107,
      "stdout": "",
      "stderr": "tmpvo_5s6t8: /tmp/tmpvo_5s6t8.cpp:30: int main(): Assertion `candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given map is empty.\n// Examples:\n// >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n// True\n// >>> check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n// False\n// >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"})\n// False\n// >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})\n// False\n// >>> check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" })\n// True\nbool check_dict_case(std::map<std::string,std::string> dict) {\n    if(dict.empty()) return false;\n    for(auto it = dict.begin(); it != dict.end(); ++it) {\n        if(std::isupper(it->first[0])) return false;\n        if(std::islower(it->first[0])) return true;\n    }\n    return true;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>())) == (false));\n}\n",
      "timestamp": 1664293103,
      "stdout": "",
      "stderr": "tmp_zvc4ncv: /tmp/tmp_zvc4ncv.cpp:29: int main(): Assertion `candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given map is empty.\n// Examples:\n// >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n// True\n// >>> check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n// False\n// >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"})\n// False\n// >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})\n// False\n// >>> check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" })\n// True\nbool check_dict_case(std::map<std::string,std::string> dict) {\n    for(auto it = dict.begin(); it != dict.end(); ++it) {\n        if(it->first.size() != it->second.size()) {\n            return false;\n        }\n        for(int i = 0; i < it->first.size(); i++) {\n            if(tolower(it->first[i]) != tolower(it->second[i])) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>())) == (false));\n}\n",
      "timestamp": 1664293107,
      "stdout": "",
      "stderr": "tmp64n55uis: /tmp/tmp64n55uis.cpp:32: int main(): Assertion `candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given map is empty.\n// Examples:\n// >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n// True\n// >>> check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n// False\n// >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"})\n// False\n// >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})\n// False\n// >>> check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" })\n// True\nbool check_dict_case(std::map<std::string,std::string> dict) {\n    if(dict.empty()) return false;\n    for(auto it = dict.begin(); it != dict.end(); ++it) {\n        if(it->first.size() != it->second.size()) return false;\n        for(int i = 0; i < it->first.size(); ++i) {\n            if(tolower(it->first[i]) != it->second[i]) return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>())) == (false));\n}\n",
      "timestamp": 1664293103,
      "stdout": "",
      "stderr": "tmptevkp9p9: /tmp/tmptevkp9p9.cpp:29: int main(): Assertion `candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given map is empty.\n// Examples:\n// >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n// True\n// >>> check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n// False\n// >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"})\n// False\n// >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})\n// False\n// >>> check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" })\n// True\nbool check_dict_case(std::map<std::string,std::string> dict) {\n    if(dict.empty()) return false;\n    for(auto it = dict.begin(); it != dict.end(); ++it) {\n        if(std::isupper(it->first[0])) return false;\n        if(std::islower(it->second[0])) return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>())) == (false));\n}\n",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "tmpawd7qibi: /tmp/tmpawd7qibi.cpp:27: int main(): Assertion `candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given map is empty.\n// Examples:\n// >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n// True\n// >>> check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n// False\n// >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"})\n// False\n// >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})\n// False\n// >>> check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" })\n// True\nbool check_dict_case(std::map<std::string,std::string> dict) {\n    if(dict.empty()) return false;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(it->first.size() != it->second.size()) return false;\n        for(int i = 0; i < it->first.size(); i++) {\n            if(tolower(it->first[i]) != it->second[i]) return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>())) == (false));\n}\n",
      "timestamp": 1664293107,
      "stdout": "",
      "stderr": "tmpyzue_3ib: /tmp/tmpyzue_3ib.cpp:29: int main(): Assertion `candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given map is empty.\n// Examples:\n// >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n// True\n// >>> check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n// False\n// >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"})\n// False\n// >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})\n// False\n// >>> check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" })\n// True\nbool check_dict_case(std::map<std::string,std::string> dict) {\n    if(dict.empty())\n        return false;\n    std::string key;\n    for(auto it=dict.begin(); it!=dict.end(); ++it) {\n        key = it->first;\n        if(key.size() > 1) {\n            if(key[0] >= 'A' && key[0] <= 'Z') {\n                if(key[1] >= 'a' && key[1] <= 'z')\n                    continue;\n                else\n                    return false;\n            }\n            else if(key[0] >= 'a' && key[0] <= 'z') {\n                if(key[1] >= 'A' && key[1] <= 'Z')\n                    continue;\n                else\n                    return false;\n            }\n            else\n                return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>())) == (false));\n}\n",
      "timestamp": 1664293108,
      "stdout": "",
      "stderr": "tmplm8tbx9q: /tmp/tmplm8tbx9q.cpp:45: int main(): Assertion `candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given map is empty.\n// Examples:\n// >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n// True\n// >>> check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n// False\n// >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"})\n// False\n// >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})\n// False\n// >>> check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" })\n// True\nbool check_dict_case(std::map<std::string,std::string> dict) {\n    if(dict.empty()) return false;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(std::isupper(it->first[0])) return false;\n        if(std::islower(it->first[0])) return true;\n    }\n    return true;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>())) == (false));\n}\n",
      "timestamp": 1664293103,
      "stdout": "",
      "stderr": "tmpln6xu4wv: /tmp/tmpln6xu4wv.cpp:29: int main(): Assertion `candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given map is empty.\n// Examples:\n// >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n// True\n// >>> check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n// False\n// >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"})\n// False\n// >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})\n// False\n// >>> check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" })\n// True\nbool check_dict_case(std::map<std::string,std::string> dict) {\n    if(dict.empty())\n        return false;\n    std::string key;\n    for(auto it=dict.begin(); it!=dict.end(); ++it) {\n        key = it->first;\n        if(key.length() > 1 && key[0] >= 'A' && key[0] <= 'Z')\n            return false;\n        if(key.length() > 1 && key[0] >= 'a' && key[0] <= 'z')\n            return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>())) == (false));\n}\n",
      "timestamp": 1664293109,
      "stdout": "",
      "stderr": "tmpafid4q48: /tmp/tmpafid4q48.cpp:33: int main(): Assertion `candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given map is empty.\n// Examples:\n// >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n// True\n// >>> check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n// False\n// >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"})\n// False\n// >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})\n// False\n// >>> check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" })\n// True\nbool check_dict_case(std::map<std::string,std::string> dict) {\n    if(dict.empty())\n        return false;\n    std::string key;\n    for(auto it=dict.begin(); it!=dict.end(); ++it) {\n        key = it->first;\n        if(key.length() > 1 && key[0] >= 'A' && key[0] <= 'Z')\n            return false;\n        if(key.length() > 1 && key[0] >= 'a' && key[0] <= 'z')\n            return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>())) == (false));\n}\n",
      "timestamp": 1664293109,
      "stdout": "",
      "stderr": "tmpafid4q48: /tmp/tmpafid4q48.cpp:33: int main(): Assertion `candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given map is empty.\n// Examples:\n// >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n// True\n// >>> check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n// False\n// >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"})\n// False\n// >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})\n// False\n// >>> check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" })\n// True\nbool check_dict_case(std::map<std::string,std::string> dict) {\n    if(dict.empty()) return false;\n    std::string key;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n        key = it->first;\n        if(key.size() > 1 && key[0] >= 'A' && key[0] <= 'Z') return false;\n        if(key.size() > 1 && key[0] >= 'a' && key[0] <= 'z') return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>())) == (false));\n}\n",
      "timestamp": 1664293109,
      "stdout": "",
      "stderr": "tmp4f5_z4h5: /tmp/tmp4f5_z4h5.cpp:30: int main(): Assertion `candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given map is empty.\n// Examples:\n// >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n// True\n// >>> check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n// False\n// >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"})\n// False\n// >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})\n// False\n// >>> check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" })\n// True\nbool check_dict_case(std::map<std::string,std::string> dict) {\n    if(dict.empty()) return false;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(std::isupper(it->first[0])) return false;\n        if(std::islower(it->first[0])) return true;\n    }\n    return true;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>())) == (false));\n}\n",
      "timestamp": 1664293103,
      "stdout": "",
      "stderr": "tmpln6xu4wv: /tmp/tmpln6xu4wv.cpp:29: int main(): Assertion `candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given map is empty.\n// Examples:\n// >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n// True\n// >>> check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n// False\n// >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"})\n// False\n// >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})\n// False\n// >>> check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" })\n// True\nbool check_dict_case(std::map<std::string,std::string> dict) {\n    if(dict.empty()) return false;\n    for(auto it = dict.begin(); it != dict.end(); ++it) {\n        if(it->first.size() != it->second.size()) return false;\n        for(auto it2 = it->first.begin(); it2 != it->first.end(); ++it2) {\n            if(std::tolower(*it2) != *it2) return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>())) == (false));\n}\n",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "tmp3hjhipmk: /tmp/tmp3hjhipmk.cpp:29: int main(): Assertion `candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given map is empty.\n// Examples:\n// >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n// True\n// >>> check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n// False\n// >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"})\n// False\n// >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})\n// False\n// >>> check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" })\n// True\nbool check_dict_case(std::map<std::string,std::string> dict) {\n    if(dict.empty()) return false;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(std::isupper(it->first[0])) return false;\n        if(std::islower(it->first[0])) return true;\n    }\n    return true;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>())) == (false));\n}\n",
      "timestamp": 1664293103,
      "stdout": "",
      "stderr": "tmpln6xu4wv: /tmp/tmpln6xu4wv.cpp:29: int main(): Assertion `candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given map is empty.\n// Examples:\n// >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n// True\n// >>> check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n// False\n// >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"})\n// False\n// >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})\n// False\n// >>> check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" })\n// True\nbool check_dict_case(std::map<std::string,std::string> dict) {\n    if(dict.empty()) return false;\n    for(auto it = dict.begin(); it != dict.end(); ++it) {\n        if(it->first.size() != it->second.size()) return false;\n        for(int i = 0; i < it->first.size(); ++i) {\n            if(tolower(it->first[i]) != tolower(it->second[i])) return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>())) == (false));\n}\n",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "tmpkrvrzhzc: /tmp/tmpkrvrzhzc.cpp:29: int main(): Assertion `candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given map is empty.\n// Examples:\n// >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n// True\n// >>> check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n// False\n// >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"})\n// False\n// >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})\n// False\n// >>> check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" })\n// True\nbool check_dict_case(std::map<std::string,std::string> dict) {\n    if(dict.empty()) return false;\n    std::string key;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n        key = it->first;\n        if(key.size() > 1) {\n            if(std::islower(key[0]) && std::isupper(key[1])) return false;\n            if(std::isupper(key[0]) && std::islower(key[1])) return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>())) == (false));\n}\n",
      "timestamp": 1664293109,
      "stdout": "",
      "stderr": "tmpbjpyhebv: /tmp/tmpbjpyhebv.cpp:32: int main(): Assertion `candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given map is empty.\n// Examples:\n// >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n// True\n// >>> check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n// False\n// >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"})\n// False\n// >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})\n// False\n// >>> check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" })\n// True\nbool check_dict_case(std::map<std::string,std::string> dict) {\n    if(dict.empty()) return false;\n    for(auto it = dict.begin(); it != dict.end(); ++it) {\n        if(std::isupper(it->first[0])) return false;\n        if(std::islower(it->first[0])) return true;\n    }\n    return true;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>())) == (false));\n}\n",
      "timestamp": 1664293103,
      "stdout": "",
      "stderr": "tmp_zvc4ncv: /tmp/tmp_zvc4ncv.cpp:29: int main(): Assertion `candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given map is empty.\n// Examples:\n// >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n// True\n// >>> check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n// False\n// >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"})\n// False\n// >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})\n// False\n// >>> check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" })\n// True\nbool check_dict_case(std::map<std::string,std::string> dict) {\n    if(dict.empty()) return false;\n    for(auto it = dict.begin(); it != dict.end(); ++it) {\n        if(std::isupper(it->first[0])) return false;\n        if(std::islower(it->first[0])) return true;\n    }\n    return true;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>())) == (false));\n}\n",
      "timestamp": 1664293103,
      "stdout": "",
      "stderr": "tmp_zvc4ncv: /tmp/tmp_zvc4ncv.cpp:29: int main(): Assertion `candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given map is empty.\n// Examples:\n// >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n// True\n// >>> check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n// False\n// >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"})\n// False\n// >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})\n// False\n// >>> check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" })\n// True\nbool check_dict_case(std::map<std::string,std::string> dict) {\n    if(dict.empty()) return false;\n    std::string key;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n        key = it->first;\n        if(key.length() > 1 && key[0] >= 'A' && key[0] <= 'Z') return false;\n        if(key.length() > 1 && key[0] >= 'a' && key[0] <= 'z') return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>())) == (false));\n}\n",
      "timestamp": 1664293105,
      "stdout": "",
      "stderr": "tmp879fyb7y: /tmp/tmp879fyb7y.cpp:30: int main(): Assertion `candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given map is empty.\n// Examples:\n// >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n// True\n// >>> check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n// False\n// >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"})\n// False\n// >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})\n// False\n// >>> check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" })\n// True\nbool check_dict_case(std::map<std::string,std::string> dict) {\n    if(dict.empty())\n        return false;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(std::isupper(it->first[0]))\n            return false;\n        if(std::islower(it->first[0]))\n            continue;\n        return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>())) == (false));\n}\n",
      "timestamp": 1664293109,
      "stdout": "",
      "stderr": "tmpo7tvwv13: /tmp/tmpo7tvwv13.cpp:35: int main(): Assertion `candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given map is empty.\n// Examples:\n// >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n// True\n// >>> check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n// False\n// >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"})\n// False\n// >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})\n// False\n// >>> check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" })\n// True\nbool check_dict_case(std::map<std::string,std::string> dict) {\n    if(dict.empty()) return false;\n    for(auto it = dict.begin(); it != dict.end(); ++it) {\n        if(it->first.empty()) return false;\n        if(it->first[0] >= 'A' && it->first[0] <= 'Z') continue;\n        if(it->first[0] >= 'a' && it->first[0] <= 'z') continue;\n        return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>())) == (false));\n}\n",
      "timestamp": 1664293107,
      "stdout": "",
      "stderr": "tmpctjd055x: /tmp/tmpctjd055x.cpp:30: int main(): Assertion `candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given map is empty.\n// Examples:\n// >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n// True\n// >>> check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n// False\n// >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"})\n// False\n// >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})\n// False\n// >>> check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" })\n// True\nbool check_dict_case(std::map<std::string,std::string> dict) {\n    if(dict.empty()) return false;\n    for(auto it = dict.begin(); it != dict.end(); ++it) {\n        if(it->first.size() != it->second.size()) return false;\n        for(int i = 0; i < it->first.size(); ++i) {\n            if(tolower(it->first[i]) != it->second[i]) return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>())) == (false));\n}\n",
      "timestamp": 1664293103,
      "stdout": "",
      "stderr": "tmptevkp9p9: /tmp/tmptevkp9p9.cpp:29: int main(): Assertion `candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given map is empty.\n// Examples:\n// >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n// True\n// >>> check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n// False\n// >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"})\n// False\n// >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})\n// False\n// >>> check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" })\n// True\nbool check_dict_case(std::map<std::string,std::string> dict) {\n    if(dict.empty()) return false;\n    std::string key;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n        key = it->first;\n        if(key.size() > 1) {\n            if(std::islower(key[0]) && std::isupper(key[1])) return false;\n            if(std::isupper(key[0]) && std::islower(key[1])) return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>())) == (false));\n}\n",
      "timestamp": 1664293109,
      "stdout": "",
      "stderr": "tmpbjpyhebv: /tmp/tmpbjpyhebv.cpp:32: int main(): Assertion `candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given map is empty.\n// Examples:\n// >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n// True\n// >>> check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n// False\n// >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"})\n// False\n// >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})\n// False\n// >>> check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" })\n// True\nbool check_dict_case(std::map<std::string,std::string> dict) {\n    if(dict.empty()) return false;\n    std::string lower_case_key;\n    std::string upper_case_key;\n    for(auto it = dict.begin(); it != dict.end(); ++it) {\n        lower_case_key = it->first;\n        upper_case_key = it->first;\n        std::transform(lower_case_key.begin(), lower_case_key.end(), lower_case_key.begin(), ::tolower);\n        std::transform(upper_case_key.begin(), upper_case_key.end(), upper_case_key.begin(), ::toupper);\n        if(lower_case_key != upper_case_key) return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>())) == (false));\n}\n",
      "timestamp": 1664293109,
      "stdout": "",
      "stderr": "tmpxjokpt5h: /tmp/tmpxjokpt5h.cpp:32: int main(): Assertion `candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given map is empty.\n// Examples:\n// >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n// True\n// >>> check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n// False\n// >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"})\n// False\n// >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})\n// False\n// >>> check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" })\n// True\nbool check_dict_case(std::map<std::string,std::string> dict) {\n    if(dict.empty()) return false;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(it->first.size() != it->second.size()) return false;\n        for(int i = 0; i < it->first.size(); i++) {\n            if(tolower(it->first[i]) != it->second[i]) return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>())) == (false));\n}\n",
      "timestamp": 1664293107,
      "stdout": "",
      "stderr": "tmpyzue_3ib: /tmp/tmpyzue_3ib.cpp:29: int main(): Assertion `candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given map is empty.\n// Examples:\n// >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n// True\n// >>> check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n// False\n// >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"})\n// False\n// >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})\n// False\n// >>> check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" })\n// True\nbool check_dict_case(std::map<std::string,std::string> dict) {\n    if(dict.empty()) return false;\n    for(auto it=dict.begin(); it!=dict.end(); it++) {\n        if(std::isupper(it->first[0])) return false;\n        if(std::islower(it->first[0])) return true;\n    }\n    return true;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>())) == (false));\n}\n",
      "timestamp": 1664293107,
      "stdout": "",
      "stderr": "tmpllk_hq3f: /tmp/tmpllk_hq3f.cpp:29: int main(): Assertion `candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given map is empty.\n// Examples:\n// >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n// True\n// >>> check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n// False\n// >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"})\n// False\n// >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})\n// False\n// >>> check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" })\n// True\nbool check_dict_case(std::map<std::string,std::string> dict) {\n    if(dict.empty())\n        return false;\n    for(auto it=dict.begin(); it!=dict.end(); ++it) {\n        if(std::isupper(it->first[0]))\n            return false;\n        if(std::islower(it->first[0]))\n            return true;\n    }\n    return true;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>())) == (false));\n}\n",
      "timestamp": 1664293109,
      "stdout": "",
      "stderr": "tmpjxse3nt4: /tmp/tmpjxse3nt4.cpp:32: int main(): Assertion `candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given map is empty.\n// Examples:\n// >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n// True\n// >>> check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n// False\n// >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"})\n// False\n// >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})\n// False\n// >>> check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" })\n// True\nbool check_dict_case(std::map<std::string,std::string> dict) {\n    if(dict.empty())\n        return false;\n    std::string lower_case_key;\n    std::string upper_case_key;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n        lower_case_key = it->first;\n        upper_case_key = it->first;\n        std::transform(lower_case_key.begin(), lower_case_key.end(), lower_case_key.begin(), ::tolower);\n        std::transform(upper_case_key.begin(), upper_case_key.end(), upper_case_key.begin(), ::toupper);\n        if(lower_case_key != upper_case_key)\n            return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>())) == (false));\n}\n",
      "timestamp": 1664293109,
      "stdout": "",
      "stderr": "tmpqvl8lo0c: /tmp/tmpqvl8lo0c.cpp:34: int main(): Assertion `candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given map is empty.\n// Examples:\n// >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n// True\n// >>> check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n// False\n// >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"})\n// False\n// >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})\n// False\n// >>> check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" })\n// True\nbool check_dict_case(std::map<std::string,std::string> dict) {\n    if(dict.empty()) return false;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(std::isupper(it->first[0])) return false;\n        if(std::islower(it->first[0])) return true;\n    }\n    return true;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>())) == (false));\n}\n",
      "timestamp": 1664293103,
      "stdout": "",
      "stderr": "tmpln6xu4wv: /tmp/tmpln6xu4wv.cpp:29: int main(): Assertion `candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given map is empty.\n// Examples:\n// >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n// True\n// >>> check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n// False\n// >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"})\n// False\n// >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})\n// False\n// >>> check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" })\n// True\nbool check_dict_case(std::map<std::string,std::string> dict) {\n    if(dict.empty()) return false;\n    for(auto it=dict.begin(); it!=dict.end(); ++it) {\n        if(std::isupper(it->first[0])) return false;\n        if(std::islower(it->second[0])) return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>())) == (false));\n}\n",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "tmp682ix014: /tmp/tmp682ix014.cpp:27: int main(): Assertion `candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given map is empty.\n// Examples:\n// >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n// True\n// >>> check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n// False\n// >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"})\n// False\n// >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})\n// False\n// >>> check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" })\n// True\nbool check_dict_case(std::map<std::string,std::string> dict) {\n    for(auto it = dict.begin(); it != dict.end(); ++it) {\n        if(it->first.length() != it->second.length()) {\n            return false;\n        }\n        if(std::islower(it->first[0])) {\n            continue;\n        }\n        else if(std::isupper(it->first[0])) {\n            return false;\n        }\n        else {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>())) == (false));\n}\n",
      "timestamp": 1664293109,
      "stdout": "",
      "stderr": "tmpay9grbm2: /tmp/tmpay9grbm2.cpp:36: int main(): Assertion `candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given map is empty.\n// Examples:\n// >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n// True\n// >>> check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n// False\n// >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"})\n// False\n// >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})\n// False\n// >>> check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" })\n// True\nbool check_dict_case(std::map<std::string,std::string> dict) {\n    if(dict.empty()) return false;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(it->first.size() != it->second.size()) return false;\n        for(int i = 0; i < it->first.size(); i++) {\n            if(tolower(it->first[i]) != it->second[i]) return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>())) == (false));\n}\n",
      "timestamp": 1664293107,
      "stdout": "",
      "stderr": "tmpyzue_3ib: /tmp/tmpyzue_3ib.cpp:29: int main(): Assertion `candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given map is empty.\n// Examples:\n// >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n// True\n// >>> check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n// False\n// >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"})\n// False\n// >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})\n// False\n// >>> check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" })\n// True\nbool check_dict_case(std::map<std::string,std::string> dict) {\n    if(dict.empty()) return false;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(it->first.size() != it->second.size()) return false;\n        for(int i = 0; i < it->first.size(); i++) {\n            if(tolower(it->first[i]) != tolower(it->second[i])) return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>())) == (false));\n}\n",
      "timestamp": 1664293103,
      "stdout": "",
      "stderr": "tmp4si0hwud: /tmp/tmp4si0hwud.cpp:29: int main(): Assertion `candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given map is empty.\n// Examples:\n// >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n// True\n// >>> check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n// False\n// >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"})\n// False\n// >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})\n// False\n// >>> check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" })\n// True\nbool check_dict_case(std::map<std::string,std::string> dict) {\n    if(dict.empty()) return false;\n    for(auto it = dict.begin(); it != dict.end(); ++it) {\n        if(std::isupper(it->first[0])) return false;\n        if(std::islower(it->first[0])) return true;\n    }\n    return true;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>())) == (false));\n}\n",
      "timestamp": 1664293103,
      "stdout": "",
      "stderr": "tmp_zvc4ncv: /tmp/tmp_zvc4ncv.cpp:29: int main(): Assertion `candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given map is empty.\n// Examples:\n// >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n// True\n// >>> check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n// False\n// >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"})\n// False\n// >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})\n// False\n// >>> check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" })\n// True\nbool check_dict_case(std::map<std::string,std::string> dict) {\n    if(dict.empty()) return false;\n    bool all_lower = true;\n    bool all_upper = true;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(std::isupper(it->first[0])) {\n            all_lower = false;\n        }\n        if(std::islower(it->first[0])) {\n            all_upper = false;\n        }\n    }\n    return all_lower || all_upper;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>())) == (false));\n}\n",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "tmp11xxilib: /tmp/tmp11xxilib.cpp:35: int main(): Assertion `candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given map is empty.\n// Examples:\n// >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n// True\n// >>> check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n// False\n// >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"})\n// False\n// >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})\n// False\n// >>> check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" })\n// True\nbool check_dict_case(std::map<std::string,std::string> dict) {\n    if(dict.empty()) return false;\n    for(auto it = dict.begin(); it != dict.end(); ++it) {\n        if(std::isupper(it->first[0])) return false;\n        if(std::islower(it->first[0])) return true;\n    }\n    return true;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>())) == (false));\n}\n",
      "timestamp": 1664293103,
      "stdout": "",
      "stderr": "tmp_zvc4ncv: /tmp/tmp_zvc4ncv.cpp:29: int main(): Assertion `candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given map is empty.\n// Examples:\n// >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n// True\n// >>> check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n// False\n// >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"})\n// False\n// >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})\n// False\n// >>> check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" })\n// True\nbool check_dict_case(std::map<std::string,std::string> dict) {\n    if(dict.empty()) return false;\n    std::string key;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n        key = it->first;\n        if(key.empty()) return false;\n        if(key.size() > 1) {\n            if(!islower(key[0])) return false;\n            if(!isupper(key[1])) return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>())) == (false));\n}\n",
      "timestamp": 1664293109,
      "stdout": "",
      "stderr": "tmpogzlobkz: /tmp/tmpogzlobkz.cpp:33: int main(): Assertion `candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given map is empty.\n// Examples:\n// >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n// True\n// >>> check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n// False\n// >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"})\n// False\n// >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})\n// False\n// >>> check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" })\n// True\nbool check_dict_case(std::map<std::string,std::string> dict) {\n    if(dict.empty())\n        return false;\n    for(auto it=dict.begin(); it!=dict.end(); it++) {\n        if(std::isupper(it->first[0]))\n            return false;\n        if(std::islower(it->first[0]))\n            return true;\n    }\n    return true;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>())) == (false));\n}\n",
      "timestamp": 1664293109,
      "stdout": "",
      "stderr": "tmpjf1qb0cn: /tmp/tmpjf1qb0cn.cpp:32: int main(): Assertion `candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given map is empty.\n// Examples:\n// >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n// True\n// >>> check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n// False\n// >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"})\n// False\n// >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})\n// False\n// >>> check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" })\n// True\nbool check_dict_case(std::map<std::string,std::string> dict) {\n    if(dict.empty()) return false;\n    bool all_lower = true;\n    bool all_upper = true;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(std::isupper(it->first[0])) all_lower = false;\n        if(std::islower(it->first[0])) all_upper = false;\n    }\n    return all_lower || all_upper;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>())) == (false));\n}\n",
      "timestamp": 1664293109,
      "stdout": "",
      "stderr": "tmpjdnchaqg: /tmp/tmpjdnchaqg.cpp:31: int main(): Assertion `candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given map is empty.\n// Examples:\n// >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n// True\n// >>> check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n// False\n// >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"})\n// False\n// >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})\n// False\n// >>> check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" })\n// True\nbool check_dict_case(std::map<std::string,std::string> dict) {\n    if(dict.empty()) return false;\n    for(auto it = dict.begin(); it != dict.end(); ++it) {\n        if(it->first.size() != it->second.size()) return false;\n        for(int i = 0; i < it->first.size(); ++i) {\n            if(tolower(it->first[i]) != tolower(it->second[i])) return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>())) == (false));\n}\n",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "tmpkrvrzhzc: /tmp/tmpkrvrzhzc.cpp:29: int main(): Assertion `candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given map is empty.\n// Examples:\n// >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n// True\n// >>> check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n// False\n// >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"})\n// False\n// >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})\n// False\n// >>> check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" })\n// True\nbool check_dict_case(std::map<std::string,std::string> dict) {\n    if(dict.empty())\n        return false;\n    for(auto it=dict.begin(); it!=dict.end(); ++it) {\n        if(it->first.size() != it->second.size())\n            return false;\n        for(int i=0; i<it->first.size(); ++i) {\n            if(tolower(it->first[i]) != it->second[i])\n                return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>())) == (false));\n}\n",
      "timestamp": 1664293103,
      "stdout": "",
      "stderr": "tmp9n3v0zps: /tmp/tmp9n3v0zps.cpp:32: int main(): Assertion `candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given map is empty.\n// Examples:\n// >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n// True\n// >>> check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n// False\n// >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"})\n// False\n// >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})\n// False\n// >>> check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" })\n// True\nbool check_dict_case(std::map<std::string,std::string> dict) {\n    if(dict.empty()) return false;\n    for(auto it = dict.begin(); it != dict.end(); ++it) {\n        if(it->first.size() != it->second.size()) return false;\n        for(int i = 0; i < it->first.size(); ++i) {\n            if(tolower(it->first[i]) != tolower(it->second[i])) return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>())) == (false));\n}\n",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "tmpkrvrzhzc: /tmp/tmpkrvrzhzc.cpp:29: int main(): Assertion `candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given map is empty.\n// Examples:\n// >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n// True\n// >>> check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n// False\n// >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"})\n// False\n// >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})\n// False\n// >>> check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" })\n// True\nbool check_dict_case(std::map<std::string,std::string> dict) {\n    if(dict.empty())\n        return false;\n    bool all_lower = true;\n    bool all_upper = true;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(std::isupper(it->first[0]))\n            all_upper = false;\n        else\n            all_lower = false;\n    }\n    return all_lower || all_upper;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>())) == (false));\n}\n",
      "timestamp": 1664293109,
      "stdout": "",
      "stderr": "tmp_0nux9ja: /tmp/tmp_0nux9ja.cpp:34: int main(): Assertion `candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given map is empty.\n// Examples:\n// >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n// True\n// >>> check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n// False\n// >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"})\n// False\n// >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})\n// False\n// >>> check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" })\n// True\nbool check_dict_case(std::map<std::string,std::string> dict) {\n    if(dict.empty())\n        return false;\n    for(auto it = dict.begin(); it != dict.end(); ++it) {\n        if(std::isupper(it->first[0]))\n            return false;\n        if(std::islower(it->first[0]))\n            return true;\n    }\n    return true;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>())) == (false));\n}\n",
      "timestamp": 1664293109,
      "stdout": "",
      "stderr": "tmp_neey87t: /tmp/tmp_neey87t.cpp:32: int main(): Assertion `candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given map is empty.\n// Examples:\n// >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n// True\n// >>> check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n// False\n// >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"})\n// False\n// >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})\n// False\n// >>> check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" })\n// True\nbool check_dict_case(std::map<std::string,std::string> dict) {\n    if(dict.empty()) return false;\n    std::string key;\n    for(auto it = dict.begin(); it != dict.end(); ++it) {\n        key = it->first;\n        if(key.size() > 1) {\n            if(key[0] >= 'A' && key[0] <= 'Z') {\n                if(key[1] >= 'a' && key[1] <= 'z') continue;\n                return false;\n            }\n            else if(key[0] >= 'a' && key[0] <= 'z') {\n                if(key[1] >= 'A' && key[1] <= 'Z') continue;\n                return false;\n            }\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>())) == (false));\n}\n",
      "timestamp": 1664293109,
      "stdout": "",
      "stderr": "tmpgxsuxm13: /tmp/tmpgxsuxm13.cpp:38: int main(): Assertion `candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given map is empty.\n// Examples:\n// >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n// True\n// >>> check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n// False\n// >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"})\n// False\n// >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})\n// False\n// >>> check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" })\n// True\nbool check_dict_case(std::map<std::string,std::string> dict) {\n    if(dict.empty()) return false;\n    std::string key;\n    for(auto it = dict.begin(); it != dict.end(); ++it) {\n        key = it->first;\n        if(key.length() > 1) {\n            if(std::islower(key[0]) && std::isupper(key[1])) return false;\n            if(std::islower(key[0]) && std::isupper(key[1])) return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>())) == (false));\n}\n",
      "timestamp": 1664293109,
      "stdout": "",
      "stderr": "tmpkg8l_o3x: /tmp/tmpkg8l_o3x.cpp:32: int main(): Assertion `candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given map is empty.\n// Examples:\n// >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n// True\n// >>> check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n// False\n// >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"})\n// False\n// >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})\n// False\n// >>> check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" })\n// True\nbool check_dict_case(std::map<std::string,std::string> dict) {\n    if(dict.empty())\n        return false;\n    for(auto it=dict.begin(); it!=dict.end(); it++) {\n        if(std::isupper(it->first[0]))\n            return false;\n        if(std::islower(it->first[0]))\n            return true;\n    }\n    return true;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>())) == (false));\n}\n",
      "timestamp": 1664293109,
      "stdout": "",
      "stderr": "tmpjf1qb0cn: /tmp/tmpjf1qb0cn.cpp:32: int main(): Assertion `candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given map is empty.\n// Examples:\n// >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n// True\n// >>> check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n// False\n// >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"})\n// False\n// >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})\n// False\n// >>> check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" })\n// True\nbool check_dict_case(std::map<std::string,std::string> dict) {\n    for(auto it = dict.begin(); it != dict.end(); ++it) {\n        if(it->first.length() != it->second.length())\n            return false;\n        if(it->first[0] >= 'A' && it->first[0] <= 'Z')\n            continue;\n        if(it->first[0] >= 'a' && it->first[0] <= 'z')\n            continue;\n        return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>())) == (false));\n}\n",
      "timestamp": 1664293109,
      "stdout": "",
      "stderr": "tmpw4tjmkry: /tmp/tmpw4tjmkry.cpp:31: int main(): Assertion `candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given map is empty.\n// Examples:\n// >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n// True\n// >>> check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n// False\n// >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"})\n// False\n// >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})\n// False\n// >>> check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" })\n// True\nbool check_dict_case(std::map<std::string,std::string> dict) {\n    if(dict.empty()) return false;\n    std::string key;\n    for(std::map<std::string,std::string>::iterator it = dict.begin(); it != dict.end(); it++) {\n        key = it->first;\n        if(key.length() > 1 && key[0] >= 'A' && key[0] <= 'Z') return false;\n        if(key.length() > 1 && key[0] >= 'a' && key[0] <= 'z') return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>())) == (false));\n}\n",
      "timestamp": 1664293107,
      "stdout": "",
      "stderr": "tmpvo_5s6t8: /tmp/tmpvo_5s6t8.cpp:30: int main(): Assertion `candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given map is empty.\n// Examples:\n// >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n// True\n// >>> check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n// False\n// >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"})\n// False\n// >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})\n// False\n// >>> check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" })\n// True\nbool check_dict_case(std::map<std::string,std::string> dict) {\n    if(dict.empty()) return false;\n    std::string key;\n    for(auto it = dict.begin(); it != dict.end(); ++it) {\n        key = it->first;\n        if(key.length() > 1 && key[0] >= 'A' && key[0] <= 'Z') return false;\n        if(key.length() > 1 && key[0] >= 'a' && key[0] <= 'z') return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>())) == (false));\n}\n",
      "timestamp": 1664293109,
      "stdout": "",
      "stderr": "tmpilcc_js5: /tmp/tmpilcc_js5.cpp:30: int main(): Assertion `candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given map is empty.\n// Examples:\n// >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n// True\n// >>> check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n// False\n// >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"})\n// False\n// >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})\n// False\n// >>> check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" })\n// True\nbool check_dict_case(std::map<std::string,std::string> dict) {\n    if(dict.empty())\n        return false;\n    for(std::map<std::string,std::string>::iterator it = dict.begin(); it != dict.end(); it++) {\n        if(it->first.size() != it->second.size())\n            return false;\n        for(int i = 0; i < it->first.size(); i++) {\n            if(tolower(it->first[i]) != tolower(it->second[i]))\n                return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>())) == (false));\n}\n",
      "timestamp": 1664293109,
      "stdout": "",
      "stderr": "tmpn4myue2r: /tmp/tmpn4myue2r.cpp:32: int main(): Assertion `candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given map is empty.\n// Examples:\n// >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n// True\n// >>> check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n// False\n// >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"})\n// False\n// >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})\n// False\n// >>> check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" })\n// True\nbool check_dict_case(std::map<std::string,std::string> dict) {\n    if(dict.empty()) return false;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(std::isupper(it->first[0])) return false;\n        if(std::islower(it->second[0])) return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>())) == (false));\n}\n",
      "timestamp": 1664293107,
      "stdout": "",
      "stderr": "tmpnsd6pk_x: /tmp/tmpnsd6pk_x.cpp:27: int main(): Assertion `candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given map is empty.\n// Examples:\n// >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n// True\n// >>> check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n// False\n// >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"})\n// False\n// >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})\n// False\n// >>> check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" })\n// True\nbool check_dict_case(std::map<std::string,std::string> dict) {\n    if(dict.empty())\n        return false;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(std::isupper(it->first[0]))\n            return false;\n        if(std::islower(it->first[0]))\n            return true;\n    }\n    return true;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>())) == (false));\n}\n",
      "timestamp": 1664293105,
      "stdout": "",
      "stderr": "tmpizu1py4d: /tmp/tmpizu1py4d.cpp:32: int main(): Assertion `candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given map is empty.\n// Examples:\n// >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n// True\n// >>> check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n// False\n// >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"})\n// False\n// >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})\n// False\n// >>> check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" })\n// True\nbool check_dict_case(std::map<std::string,std::string> dict) {\n    if(dict.empty())\n        return false;\n    std::string key;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n        key = it->first;\n        if(key.length() > 1) {\n            if(std::islower(key[0]) && std::isupper(key[1]))\n                return false;\n            if(std::islower(key[0]) && std::isupper(key[1]))\n                return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>())) == (false));\n}\n",
      "timestamp": 1664293109,
      "stdout": "",
      "stderr": "tmp91mn08z2: /tmp/tmp91mn08z2.cpp:35: int main(): Assertion `candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given map is empty.\n// Examples:\n// >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n// True\n// >>> check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n// False\n// >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"})\n// False\n// >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})\n// False\n// >>> check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" })\n// True\nbool check_dict_case(std::map<std::string,std::string> dict) {\n    if(dict.empty()) return false;\n    for(auto it = dict.begin(); it != dict.end(); ++it) {\n        if(it->first.size() != it->second.size()) return false;\n        for(int i = 0; i < it->first.size(); ++i) {\n            if(tolower(it->first[i]) != tolower(it->second[i])) return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>())) == (false));\n}\n",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "tmpkrvrzhzc: /tmp/tmpkrvrzhzc.cpp:29: int main(): Assertion `candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given map is empty.\n// Examples:\n// >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n// True\n// >>> check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n// False\n// >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"})\n// False\n// >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})\n// False\n// >>> check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" })\n// True\nbool check_dict_case(std::map<std::string,std::string> dict) {\n    if(dict.empty()) return false;\n    std::string str;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n        str = it->first;\n        if(str.length() > 1) {\n            if(str[0] >= 'A' && str[0] <= 'Z') {\n                if(str[1] >= 'a' && str[1] <= 'z') continue;\n                return false;\n            }\n            else if(str[0] >= 'a' && str[0] <= 'z') {\n                if(str[1] >= 'A' && str[1] <= 'Z') continue;\n                return false;\n            }\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>())) == (false));\n}\n",
      "timestamp": 1664293109,
      "stdout": "",
      "stderr": "tmp429fkk80: /tmp/tmp429fkk80.cpp:38: int main(): Assertion `candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given map is empty.\n// Examples:\n// >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n// True\n// >>> check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n// False\n// >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"})\n// False\n// >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})\n// False\n// >>> check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" })\n// True\nbool check_dict_case(std::map<std::string,std::string> dict) {\n    if(dict.empty()) return false;\n    for(auto it = dict.begin(); it != dict.end(); ++it) {\n        if(std::isupper(it->first[0])) return false;\n        if(std::islower(it->first[0])) return true;\n    }\n    return true;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>())) == (false));\n}\n",
      "timestamp": 1664293103,
      "stdout": "",
      "stderr": "tmp_zvc4ncv: /tmp/tmp_zvc4ncv.cpp:29: int main(): Assertion `candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given map is empty.\n// Examples:\n// >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n// True\n// >>> check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n// False\n// >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"})\n// False\n// >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})\n// False\n// >>> check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" })\n// True\nbool check_dict_case(std::map<std::string,std::string> dict) {\n    if(dict.empty()) return false;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(it->first.size() != it->second.size()) return false;\n        for(int i = 0; i < it->first.size(); i++) {\n            if(tolower(it->first[i]) != tolower(it->second[i])) return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>())) == (false));\n}\n",
      "timestamp": 1664293103,
      "stdout": "",
      "stderr": "tmp4si0hwud: /tmp/tmp4si0hwud.cpp:29: int main(): Assertion `candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given map is empty.\n// Examples:\n// >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n// True\n// >>> check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n// False\n// >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"})\n// False\n// >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})\n// False\n// >>> check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" })\n// True\nbool check_dict_case(std::map<std::string,std::string> dict) {\n    if(dict.empty()) return false;\n    for(auto it = dict.begin(); it != dict.end(); ++it) {\n        if(std::isupper(it->first[0])) return false;\n        if(std::islower(it->first[0])) return true;\n    }\n    return true;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>())) == (false));\n}\n",
      "timestamp": 1664293103,
      "stdout": "",
      "stderr": "tmp_zvc4ncv: /tmp/tmp_zvc4ncv.cpp:29: int main(): Assertion `candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given map is empty.\n// Examples:\n// >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n// True\n// >>> check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n// False\n// >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"})\n// False\n// >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})\n// False\n// >>> check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" })\n// True\nbool check_dict_case(std::map<std::string,std::string> dict) {\n    if(dict.empty()) return false;\n    std::string key;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n        key = it->first;\n        if(key.length() > 1 && key[0] >= 'A' && key[0] <= 'Z') return false;\n        if(key.length() > 1 && key[0] >= 'a' && key[0] <= 'z') return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>())) == (false));\n}\n",
      "timestamp": 1664293105,
      "stdout": "",
      "stderr": "tmp879fyb7y: /tmp/tmp879fyb7y.cpp:30: int main(): Assertion `candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given map is empty.\n// Examples:\n// >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n// True\n// >>> check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n// False\n// >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"})\n// False\n// >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})\n// False\n// >>> check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" })\n// True\nbool check_dict_case(std::map<std::string,std::string> dict) {\n    if(dict.empty()) return false;\n    for(auto it = dict.begin(); it != dict.end(); ++it) {\n        if(std::isupper(it->first[0])) return false;\n        if(std::islower(it->first[0])) return true;\n    }\n    return true;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>())) == (false));\n}\n",
      "timestamp": 1664293103,
      "stdout": "",
      "stderr": "tmp_zvc4ncv: /tmp/tmp_zvc4ncv.cpp:29: int main(): Assertion `candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given map is empty.\n// Examples:\n// >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n// True\n// >>> check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n// False\n// >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"})\n// False\n// >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})\n// False\n// >>> check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" })\n// True\nbool check_dict_case(std::map<std::string,std::string> dict) {\n    if(dict.empty()) return false;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(std::isupper(it->first[0])) return false;\n        if(std::islower(it->first[0])) return true;\n    }\n    return true;\n}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>())) == (false));\n}\n",
      "timestamp": 1664293103,
      "stdout": "",
      "stderr": "tmpln6xu4wv: /tmp/tmpln6xu4wv.cpp:29: int main(): Assertion `candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    }
  ]
}