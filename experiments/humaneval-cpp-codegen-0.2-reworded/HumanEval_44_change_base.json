{
  "name": "HumanEval_44_change_base",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base of input number x to base.\n// return string representation after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long x, long base) {\n",
  "tests": "}\nint main() {\n    auto candidate = change_base;\n    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2)) == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3), (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5), (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7), (8)) == (\"7\"));\n}\n",
  "completions": [
    "    std::string s = \"\";\n    while (x > 0) {\n        s = char(x % base + '0') + s;\n        x /= base;\n    }\n    return s;",
    "    std::stringstream ss;\n    while (x) {\n        int digit = x % base;\n        ss << digit;\n        x /= base;\n    }\n    return ss.str();",
    "    std::stringstream ss;\n    ss << x;\n    std::string s;\n    ss >> s;\n    std::string res;\n    while (s.size() > 0) {\n        int digit = s[0] - '0';\n        s.erase(0, 1);\n        res += (char)(digit + base);\n    }\n    return res;",
    "  std::string s = \"\";\n  while (x) {\n    s += (char)('0' + x % base);\n    x /= base;\n  }\n  return s;",
    "    std::string s = \"\";\n    while (x) {\n        s += (char)(x % base + '0');\n        x /= base;\n    }\n    return s;",
    "    std::string result;\n    while (x != 0) {\n        int digit = x % base;\n        result = (char)(digit + '0') + result;\n        x /= base;\n    }\n    return result;",
    "    std::string s;\n    while (x) {\n        s.push_back(x % base + '0');\n        x /= base;\n    }\n    if (s.empty())\n        s.push_back('0');\n    return s;",
    "  std::string s = \"\";\n  while (x > 0) {\n    s = char(x % base + '0') + s;\n    x /= base;\n  }\n  return s;",
    "    std::string s;\n    while (x) {\n        s.push_back(x % base + '0');\n        x /= base;\n    }\n    std::reverse(s.begin(), s.end());\n    return s;",
    "    std::string s = \"\";\n    while (x != 0) {\n        s = char(x % base + '0') + s;\n        x /= base;\n    }\n    return s;",
    "    std::string s = \"\";\n    while (x > 0) {\n        s = char(x % base + '0') + s;\n        x /= base;\n    }\n    return s;",
    "    std::string s = \"\";\n    while (x > 0) {\n        s = char(x % base + '0') + s;\n        x /= base;\n    }\n    return s;",
    "    std::string result = \"\";\n    while (x > 0) {\n        int digit = x % base;\n        result = char(digit + '0') + result;\n        x /= base;\n    }\n    return result;",
    "    std::string s = \"\";\n    while (x) {\n        s = char(x % base + '0') + s;\n        x /= base;\n    }\n    return s;",
    "    std::string s;\n    while (x) {\n        s += (char)(x % base + '0');\n        x /= base;\n    }\n    return s;",
    "    std::string s;\n    while (x) {\n        s.push_back(x % base + '0');\n        x /= base;\n    }\n    std::reverse(s.begin(), s.end());\n    return s;",
    "    std::string s;\n    while (x) {\n        s.push_back(x % base + '0');\n        x /= base;\n    }\n    if (s.empty())\n        s.push_back('0');\n    return s;",
    "    std::string result;\n    while (x != 0) {\n        int digit = x % base;\n        result = char(digit + '0') + result;\n        x /= base;\n    }\n    return result;",
    "    std::string result;\n    while (x) {\n        result += '0' + x % base;\n        x /= base;\n    }\n    return result;",
    "    std::stringstream ss;\n    while (x) {\n        ss << (char)('0' + x % base);\n        x /= base;\n    }\n    return ss.str();",
    "    std::string s = \"\";\n    while (x) {\n        s += (char)((x % base) + '0');\n        x /= base;\n    }\n    return s;",
    "    std::stringstream ss;\n    ss << x;\n    std::string s = ss.str();\n    std::string res = \"\";\n    for (int i = s.size() - 1; i >= 0; i--) {\n        res += s[i];\n        if (i % base == 0) {\n            res += \" \";\n        }\n    }\n    return res;",
    "    std::string res = \"\";\n    while (x > 0) {\n        res = char(x % base + '0') + res;\n        x /= base;\n    }\n    return res;",
    "    std::string s;\n    while (x) {\n        s = char(x % base + '0') + s;\n        x /= base;\n    }\n    return s;",
    "    std::stringstream ss;\n    while (x) {\n        ss << (char)(x % base + '0');\n        x /= base;\n    }\n    return ss.str();",
    "    std::string s = \"\";\n    while (x) {\n        s = char(x % base + '0') + s;\n        x /= base;\n    }\n    return s;",
    "    std::string s = \"\";\n    while (x > 0) {\n        s = char(x % base + '0') + s;\n        x /= base;\n    }\n    return s;",
    "    std::string result;\n    while (x > 0) {\n        int digit = x % base;\n        result = (char)(digit + '0') + result;\n        x /= base;\n    }\n    return result;",
    "    std::string s = \"\";\n    while (x) {\n        s = char(x % base + '0') + s;\n        x /= base;\n    }\n    return s;",
    "    std::string s = \"\";\n    while (x > 0) {\n        s = char(x % base + '0') + s;\n        x /= base;\n    }\n    return s;",
    "    std::string s;\n    while (x) {\n        s.push_back(x % base + '0');\n        x /= base;\n    }\n    if (s.empty())\n        s.push_back('0');\n    return s;",
    "    std::stringstream ss;\n    while (x) {\n        ss << (char)('0' + (x % base));\n        x /= base;\n    }\n    return ss.str();",
    "    std::string res = \"\";\n    while (x > 0) {\n        int rem = x % base;\n        x /= base;\n        res = char(rem + '0') + res;\n    }\n    return res;",
    "    std::string s;\n    while (x) {\n        s.push_back(x % base + '0');\n        x /= base;\n    }\n    return s;",
    "    std::string result;\n    while (x > 0) {\n        int remainder = x % base;\n        result = char(remainder + '0') + result;\n        x /= base;\n    }\n    return result;",
    "    std::string result;\n    while (x) {\n        int digit = x % base;\n        result = char(digit + '0') + result;\n        x /= base;\n    }\n    return result;",
    "  std::stringstream ss;\n  ss << x;\n  std::string s = ss.str();\n  std::string result = \"\";\n  for (int i = s.length() - 1; i >= 0; i--) {\n    int digit = s[i] - '0';\n    int power = 1;\n    for (int j = 1; j < base; j++) {\n      power *= base;\n    }\n    result += (char)(digit + power);\n  }\n  return result;",
    "    std::stringstream ss;\n    ss << x;\n    std::string s = ss.str();\n    std::string res;\n    for (int i = s.length() - 1; i >= 0; i--) {\n        res += s[i];\n        if (s[i] == '1') {\n            res += '0';\n        }\n    }\n    while (res.length() < base) {\n        res = '0' + res;\n    }\n    return res;",
    "    std::string s;\n    while (x > 0) {\n        s.push_back(x % base + '0');\n        x /= base;\n    }\n    std::reverse(s.begin(), s.end());\n    return s;",
    "  std::stringstream ss;\n  while (x > 0) {\n    ss << (char)('0' + (x % base));\n    x /= base;\n  }\n  return ss.str();",
    "    std::string s = \"\";\n    while (x) {\n        s += (char)((x % base) + '0');\n        x /= base;\n    }\n    return s;",
    "    std::string s = \"\";\n    while (x) {\n        s += (char)(x % base + '0');\n        x /= base;\n    }\n    return s;",
    "    std::stringstream ss;\n    ss << x;\n    std::string s = ss.str();\n    std::string res;\n    for (int i = s.length() - 1; i >= 0; i--) {\n        int d = s[i] - '0';\n        d = d * base + d;\n        res.insert(0, 1, d + '0');\n    }\n    return res;",
    "    std::string s;\n    while (x) {\n        s.push_back(x % base + '0');\n        x /= base;\n    }\n    return s;",
    "    std::string result = \"\";\n    while (x > 0) {\n        int digit = x % base;\n        result = char(digit + '0') + result;\n        x /= base;\n    }\n    return result;",
    "    std::string s = \"\";\n    while (x != 0) {\n        s = char(x % base + '0') + s;\n        x /= base;\n    }\n    return s;",
    "    std::string s;\n    while (x) {\n        s.push_back(x % base + '0');\n        x /= base;\n    }\n    if (s.empty()) {\n        s.push_back('0');\n    }\n    std::reverse(s.begin(), s.end());\n    return s;",
    "    std::string s = \"\";\n    while (x > 0) {\n        s = char(x % base + '0') + s;\n        x /= base;\n    }\n    return s;",
    "    std::string s = \"\";\n    while (x) {\n        s = char(x % base + '0') + s;\n        x /= base;\n    }\n    return s;",
    "    std::string res = \"\";\n    while (x) {\n        int rem = x % base;\n        x /= base;\n        res = (char)(rem + '0') + res;\n    }\n    return res;",
    "    std::stringstream ss;\n    ss << x;\n    std::string s = ss.str();\n    std::string res = \"\";\n    for (int i = s.size() - 1; i >= 0; i--) {\n        res += s[i];\n        if (base == 2) {\n            res += \"0\";\n        }\n        else if (base == 3) {\n            res += \"0\";\n        }\n        else if (base == 4) {\n            res += \"0\";\n        }\n        else if (base == 5) {\n            res += \"0\";\n        }\n        else if (base == 6) {\n            res += \"0\";\n        }\n        else if (base == 7) {\n            res += \"1\";\n        }\n        else if (base == 8) {\n            res += \"1\";\n        }\n        else if (base == 9) {\n            res += \"1\";\n        }\n        else if (base == 10) {\n            res += \"1\";\n        }\n        else if (base == 11) {\n            res += \"1\";\n        }\n        else if (base == 12) {\n            res += \"1\";\n        }\n        else if (base == 13) {\n            res += \"1\";\n        }\n        else if (base == 14) {\n            res += \"1\";\n        }\n        else if (base == 15) {\n            res += \"1\";\n        }\n        else if (base == 16) {\n            res += \"1\";\n        }\n        else if (base == 17) {\n            res += \"1\";\n        }\n        else if (base == 18) {\n            res += \"1\";\n        }\n        else if (base == 19) {\n            res += \"1\";\n        }\n        else if (base == 20) {\n            res += \"1\";\n        }\n        else if (base == 21) {\n            res += \"1\";\n        }\n        else if (base == 22) {\n            res += \"1\";\n        }\n        else if (base == 23) {\n            res += \"1\";\n        }\n        else if (base == 24) {",
    "    std::string s;\n    while (x > 0) {\n        s = char(x % base + '0') + s;\n        x /= base;\n    }\n    return s;",
    "    std::string s;\n    while (x) {\n        s = (char)(x % base + '0') + s;\n        x /= base;\n    }\n    return s;",
    "    std::string s;\n    while (x > 0) {\n        s = (char)(x % base + '0') + s;\n        x /= base;\n    }\n    return s;",
    "    std::string s;\n    while (x) {\n        s += (char)(x % base + '0');\n        x /= base;\n    }\n    return s;",
    "    std::stringstream ss;\n    ss << x;\n    std::string s = ss.str();\n    std::string res = \"\";\n    for (int i = s.size() - 1; i >= 0; i--) {\n        res += s[i];\n        if (base > 10) {\n            res += \" \";\n        }\n        if (base > 10) {\n            res += change_base(s[i] - '0', base / 10);\n        }\n        if (base > 10) {\n            res += change_base(s[i] - '0', base % 10);\n        }\n    }\n    return res;",
    "    std::string s = \"\";\n    while (x) {\n        s = char(x % base + '0') + s;\n        x /= base;\n    }\n    return s;",
    "    std::string s;\n    while (x) {\n        s.push_back(x % base + '0');\n        x /= base;\n    }\n    return s;",
    "    std::string s = \"\";\n    while (x) {\n        s += (char)('0' + (x % base));\n        x /= base;\n    }\n    return s;",
    "    std::string s = \"\";\n    while (x) {\n        s = (char)(x % base + '0') + s;\n        x /= base;\n    }\n    return s;",
    "    std::stringstream ss;\n    while (x) {\n        int digit = x % base;\n        ss << digit;\n        x /= base;\n    }\n    return ss.str();",
    "    std::string result = \"\";\n    while (x > 0) {\n        int digit = x % base;\n        result = digit + result;\n        x /= base;\n    }\n    return result;",
    "    std::string res;\n    while (x) {\n        int digit = x % base;\n        res = char(digit + '0') + res;\n        x /= base;\n    }\n    return res;",
    "    std::string s = \"\";\n    while (x > 0) {\n        s = char(x % base + '0') + s;\n        x /= base;\n    }\n    return s;",
    "    std::string res = \"\";\n    while (x) {\n        res += (char)(x % base + '0');\n        x /= base;\n    }\n    return res;",
    "    std::string s = \"\";\n    while (x) {\n        s = char(x % base + '0') + s;\n        x /= base;\n    }\n    return s;",
    "    std::string s = \"\";\n    while (x > 0) {\n        s = char(x % base + '0') + s;\n        x /= base;\n    }\n    return s;",
    "    std::string s;\n    while (x > 0) {\n        s = char(x % base + '0') + s;\n        x /= base;\n    }\n    return s;",
    "    std::string s = \"\";\n    while (x) {\n        s = char(x % base + '0') + s;\n        x /= base;\n    }\n    return s;",
    "    std::string s = \"\";\n    while (x > 0) {\n        s = char(x % base + '0') + s;\n        x /= base;\n    }\n    return s;",
    "    std::stringstream ss;\n    ss << x;\n    std::string s = ss.str();\n    std::string res = \"\";\n    for (int i = s.length() - 1; i >= 0; i--) {\n        res += s[i] + \"0\";\n    }\n    while (res.length() < base) {\n        res = \"0\" + res;\n    }\n    return res;",
    "    std::string s = \"\";\n    while (x) {\n        s += (char)(x % base + '0');\n        x /= base;\n    }\n    return s;",
    "    std::string s = \"\";\n    while (x) {\n        s += (char)(x % base + '0');\n        x /= base;\n    }\n    return s;",
    "    std::string s = \"\";\n    while (x) {\n        s = char(x % base + '0') + s;\n        x /= base;\n    }\n    return s;",
    "    std::string s;\n    while (x) {\n        s = char(x % base + '0') + s;\n        x /= base;\n    }\n    return s;",
    "    std::string s = \"\";\n    while (x) {\n        s += (char)(x % base + '0');\n        x /= base;\n    }\n    return s;",
    "    std::string s = \"\";\n    while (x > 0) {\n        s = char(x % base + '0') + s;\n        x /= base;\n    }\n    return s;",
    "    std::string result;\n    while (x) {\n        int digit = x % base;\n        result = char(digit + '0') + result;\n        x /= base;\n    }\n    return result;",
    "    std::string result;\n    while (x > 0) {\n        int digit = x % base;\n        result = char(digit + '0') + result;\n        x /= base;\n    }\n    return result;",
    "    std::stringstream ss;\n    ss << x;\n    std::string s = ss.str();\n    std::string res;\n    for (int i = 0; i < s.size(); i++) {\n        int num = s[i] - '0';\n        if (num >= 0 && num < base) {\n            res += std::to_string(num);\n        }\n    }\n    return res;",
    "    std::string s;\n    while (x) {\n        s = (char)('0' + (x % base));\n        x /= base;\n    }\n    return s;",
    "    std::string s;\n    while (x) {\n        s.push_back(x % base + '0');\n        x /= base;\n    }\n    return s;",
    "    std::string s = \"\";\n    while (x) {\n        s += (char)(x % base + '0');\n        x /= base;\n    }\n    return s;",
    "    std::string s;\n    while (x) {\n        s = char(x % base + '0') + s;\n        x /= base;\n    }\n    return s;",
    "    std::string s;\n    while (x) {\n        s += std::to_string(x % base);\n        x /= base;\n    }\n    return s;",
    "    std::string s = \"\";\n    while (x) {\n        s += (char)(x % base + '0');\n        x /= base;\n    }\n    return s;",
    "    std::string s = \"\";\n    while (x) {\n        s = char(x % base + '0') + s;\n        x /= base;\n    }\n    return s;",
    "    std::string s = \"\";\n    while (x) {\n        s = char(x % base + '0') + s;\n        x /= base;\n    }\n    return s;",
    "    std::string s;\n    while (x) {\n        s.push_back(x % base + '0');\n        x /= base;\n    }\n    return s;",
    "    std::string s;\n    while (x) {\n        s.push_back(x % base + '0');\n        x /= base;\n    }\n    if (s.empty()) s.push_back('0');\n    std::reverse(s.begin(), s.end());\n    return s;",
    "    std::string s;\n    while (x) {\n        s = char(x % base + '0') + s;\n        x /= base;\n    }\n    return s;",
    "    std::string s = \"\";\n    while (x != 0) {\n        s = char(x % base + '0') + s;\n        x /= base;\n    }\n    return s;",
    "    std::string s;\n    while (x) {\n        s.push_back(x % base + '0');\n        x /= base;\n    }\n    if (s.empty())\n        s.push_back('0');\n    return s;",
    "    std::string s;\n    while (x) {\n        s.push_back(x % base + '0');\n        x /= base;\n    }\n    return s;",
    "    std::string s;\n    while (x) {\n        s.push_back(x % base + '0');\n        x /= base;\n    }\n    if (s.empty())\n        s.push_back('0');\n    std::reverse(s.begin(), s.end());\n    return s;",
    "  std::string s = \"\";\n  while (x) {\n    s = (char)(x % base + '0') + s;\n    x /= base;\n  }\n  return s;",
    "    std::stringstream ss;\n    while (x) {\n        int digit = x % base;\n        ss << digit;\n        x /= base;\n    }\n    return ss.str();",
    "    std::string s = \"\";\n    while (x) {\n        s = char(x % base + '0') + s;\n        x /= base;\n    }\n    return s;",
    "    std::string s = \"\";\n    while (x > 0) {\n        s = char(x % base + '0') + s;\n        x /= base;\n    }\n    return s;",
    "    std::string s;\n    while (x) {\n        s += (char)('0' + (x % base));\n        x /= base;\n    }\n    return s;",
    "    std::string s;\n    while (x > 0) {\n        s.push_back(x % base + '0');\n        x /= base;\n    }\n    return s;",
    "  std::string s = \"\";\n  while (x) {\n    s = char(x % base + '0') + s;\n    x /= base;\n  }\n  return s;",
    "    std::string s;\n    while (x) {\n        s = char(x % base + '0') + s;\n        x /= base;\n    }\n    return s;",
    "    std::string s;\n    while (x) {\n        s = (char)('0' + x % base) + s;\n        x /= base;\n    }\n    return s;",
    "    std::string s = \"\";\n    while (x != 0) {\n        s = char(x % base + '0') + s;\n        x /= base;\n    }\n    return s;",
    "    std::string s = \"\";\n    while (x != 0) {\n        s = char(x % base + '0') + s;\n        x /= base;\n    }\n    return s;",
    "    std::string s;\n    while (x > 0) {\n        s += std::to_string(x % base);\n        x /= base;\n    }\n    return s;",
    "    std::string result = \"\";\n    while (x > 0) {\n        int digit = x % base;\n        result = char(digit + '0') + result;\n        x /= base;\n    }\n    return result;",
    "    std::string s = \"\";\n    while (x > 0) {\n        s = char(x % base + '0') + s;\n        x /= base;\n    }\n    return s;",
    "    std::string s = \"\";\n    while (x) {\n        s = char(x % base + '0') + s;\n        x /= base;\n    }\n    return s;",
    "    std::string result = \"\";\n    while (x) {\n        result = char(x % base + '0') + result;\n        x /= base;\n    }\n    return result;",
    "    std::string s;\n    while (x > 0) {\n        s.insert(s.begin(), '0' + (x % base));\n        x /= base;\n    }\n    return s;",
    "    std::string s;\n    while (x > 0) {\n        s += (char)('0' + (x % base));\n        x /= base;\n    }\n    return s;",
    "    std::string result = \"\";\n    while (x != 0) {\n        int digit = x % base;\n        result = digit + result;\n        x /= base;\n    }\n    return result;",
    "    std::string s;\n    while (x) {\n        s.push_back(x % base + '0');\n        x /= base;\n    }\n    return s;",
    "  std::stringstream ss;\n  ss << x;\n  std::string s = ss.str();\n  std::string res;\n  for (int i = s.size() - 1; i >= 0; i--) {\n    res += s[i];\n    if (i != 0) {\n      res += \" \";\n    }\n  }\n  std::stringstream ss2;\n  ss2 << base;\n  std::string s2 = ss2.str();\n  std::string res2;\n  for (int i = s2.size() - 1; i >= 0; i--) {\n    res2 += s2[i];\n    if (i != 0) {\n      res2 += \" \";\n    }\n  }\n  std::string res3;\n  for (int i = res2.size() - 1; i >= 0; i--) {\n    res3 += res2[i];\n    if (i != 0) {\n      res3 += \" \";\n    }\n  }\n  return res3;",
    "    std::string s = \"\";\n    while (x > 0) {\n        s += (char)(x % base + '0');\n        x /= base;\n    }\n    return s;",
    "    std::string s;\n    while (x) {\n        s.push_back(x % base + '0');\n        x /= base;\n    }\n    return s;",
    "    std::string s = \"\";\n    while (x) {\n        s = (char)(x % base + '0') + s;\n        x /= base;\n    }\n    return s;",
    "    std::string result;\n    while (x) {\n        result.push_back(x % base + '0');\n        x /= base;\n    }\n    return result;",
    "    std::string s = \"\";\n    while (x > 0) {\n        s = char(x % base + '0') + s;\n        x /= base;\n    }\n    return s;",
    "    std::string s = \"\";\n    while (x > 0) {\n        s = char(x % base + '0') + s;\n        x /= base;\n    }\n    return s;",
    "    std::string s;\n    while (x > 0) {\n        s.push_back(x % base + '0');\n        x /= base;\n    }\n    std::reverse(s.begin(), s.end());\n    return s;",
    "    std::string s;\n    while (x) {\n        s += std::to_string(x % base);\n        x /= base;\n    }\n    return s;",
    "    std::stringstream ss;\n    ss << x;\n    std::string s = ss.str();\n    std::string res;\n    for (int i = s.length() - 1; i >= 0; i--) {\n        int d = s[i] - '0';\n        if (d >= 0 && d < base) {\n            res.push_back(d + '0');\n        }\n    }\n    return res;",
    "    std::string s;\n    while (x > 0) {\n        s.push_back(x % base + '0');\n        x /= base;\n    }\n    if (s.empty())\n        s.push_back('0');\n    std::reverse(s.begin(), s.end());\n    return s;",
    "    std::string result;\n    while (x > 0) {\n        int digit = x % base;\n        result = char(digit + '0') + result;\n        x /= base;\n    }\n    return result;",
    "    std::string s = \"\";\n    while (x > 0) {\n        s = char(x % base + '0') + s;\n        x /= base;\n    }\n    return s;",
    "    std::string s;\n    while (x) {\n        s.push_back(x % base + '0');\n        x /= base;\n    }\n    return s;",
    "    std::string res = \"\";\n    while (x) {\n        res += (char)(x % base + '0');\n        x /= base;\n    }\n    return res;",
    "    std::stringstream ss;\n    ss << x;\n    std::string s = ss.str();\n    std::string res = \"\";\n    for (int i = s.size() - 1; i >= 0; i--) {\n        int num = s[i] - '0';\n        if (num >= 0 && num < base) {\n            res += std::to_string(num);\n        }\n    }\n    return res;",
    "    std::string s;\n    while (x) {\n        s = (char)(x % base + '0') + s;\n        x /= base;\n    }\n    return s;",
    "  std::string s = \"\";\n  while (x != 0) {\n    s = char(x % base + '0') + s;\n    x /= base;\n  }\n  return s;",
    "    std::string s;\n    while (x) {\n        s += '0' + x % base;\n        x /= base;\n    }\n    return s;",
    "    std::string s;\n    while (x) {\n        s.push_back(x % base + '0');\n        x /= base;\n    }\n    if (s.empty())\n        s.push_back('0');\n    std::reverse(s.begin(), s.end());\n    return s;",
    "    std::string s = \"\";\n    while (x) {\n        s = char(x % base + '0') + s;\n        x /= base;\n    }\n    return s;",
    "    std::string s = \"\";\n    while (x) {\n        s += (char)(x % base + '0');\n        x /= base;\n    }\n    return s;",
    "    std::string s = \"\";\n    while (x) {\n        s = char(x % base + '0') + s;\n        x /= base;\n    }\n    return s;",
    "    std::string s;\n    while (x) {\n        s.push_back(x % base + '0');\n        x /= base;\n    }\n    if (s.empty())\n        s.push_back('0');\n    return s;",
    "  std::string s = \"\";\n  while (x) {\n    s += (char)(x % base + '0');\n    x /= base;\n  }\n  return s;",
    "    std::string s = \"\";\n    while (x) {\n        s = char(x % base + '0') + s;\n        x /= base;\n    }\n    return s;",
    "    std::stringstream ss;\n    while (x) {\n        int d = x % base;\n        x /= base;\n        ss << d;\n    }\n    return ss.str();",
    "    std::string s = \"\";\n    while (x > 0) {\n        s = char(x % base + '0') + s;\n        x /= base;\n    }\n    return s;",
    "    std::string s = \"\";\n    while (x) {\n        s = char(x % base + '0') + s;\n        x /= base;\n    }\n    return s;",
    "    std::string s = \"\";\n    while (x) {\n        s = char(x % base + '0') + s;\n        x /= base;\n    }\n    return s;",
    "    std::string s;\n    while (x) {\n        s += (char)('0' + x % base);\n        x /= base;\n    }\n    return s;",
    "    std::string result = \"\";\n    while (x > 0) {\n        int digit = x % base;\n        result = digit + result;\n        x /= base;\n    }\n    return result;",
    "    std::string s = \"\";\n    while (x > 0) {\n        s = char(x % base + '0') + s;\n        x /= base;\n    }\n    return s;",
    "    std::stringstream ss;\n    while (x) {\n        ss << (char)('0' + (x % base));\n        x /= base;\n    }\n    return ss.str();",
    "    std::string s = \"\";\n    while (x > 0) {\n        s = char(x % base + '0') + s;\n        x /= base;\n    }\n    return s;",
    "    std::stringstream ss;\n    if (x < 0) {\n        ss << '-';\n        x = -x;\n    }\n    while (x > 0) {\n        int remainder = x % base;\n        ss << remainder;\n        x /= base;\n    }\n    return ss.str();",
    "    std::string result = \"\";\n    while (x > 0) {\n        int digit = x % base;\n        result = char(digit + '0') + result;\n        x /= base;\n    }\n    return result;",
    "    std::string s = \"\";\n    while (x > 0) {\n        s = char(x % base + '0') + s;\n        x /= base;\n    }\n    return s;",
    "    std::string result = \"\";\n    while (x > 0) {\n        int digit = x % base;\n        result = digit + result;\n        x /= base;\n    }\n    return result;",
    "    std::string s;\n    while (x) {\n        s += '0' + (x % base);\n        x /= base;\n    }\n    return s;",
    "    std::string s;\n    while (x) {\n        s = (char)(x % base + '0') + s;\n        x /= base;\n    }\n    return s;",
    "    std::string s;\n    while (x) {\n        s += (char)('0' + (x % base));\n        x /= base;\n    }\n    return s;",
    "    std::string s;\n    while (x) {\n        s = (char)(x % base + '0') + s;\n        x /= base;\n    }\n    return s;",
    "  std::string s;\n  while (x) {\n    s = char(x % base + '0') + s;\n    x /= base;\n  }\n  return s;",
    "    std::string s;\n    while (x) {\n        s = char(x % base + '0') + s;\n        x /= base;\n    }\n    return s;",
    "    std::stringstream ss;\n    while (x > 0) {\n        int digit = x % base;\n        ss << digit;\n        x /= base;\n    }\n    return ss.str();",
    "    std::string s;\n    while (x) {\n        s.push_back(x % base + '0');\n        x /= base;\n    }\n    if (s.empty())\n        s.push_back('0');\n    return s;",
    "    std::string s;\n    while (x) {\n        s.push_back(x % base + '0');\n        x /= base;\n    }\n    if (s.empty())\n        s.push_back('0');\n    std::reverse(s.begin(), s.end());\n    return s;",
    "    std::string s = \"\";\n    while (x) {\n        s = char(x % base + '0') + s;\n        x /= base;\n    }\n    return s;",
    "    std::string result = \"\";\n    while (x != 0) {\n        int digit = x % base;\n        result = digit + result;\n        x /= base;\n    }\n    return result;",
    "    std::string s = \"\";\n    while (x > 0) {\n        s = char(x % base + '0') + s;\n        x /= base;\n    }\n    return s;",
    "    std::string s = \"\";\n    while (x) {\n        s = char(x % base + '0') + s;\n        x /= base;\n    }\n    return s;",
    "    std::string s;\n    while (x) {\n        s.push_back(x % base + '0');\n        x /= base;\n    }\n    return s;",
    "    std::string s;\n    while (x > 0) {\n        s.push_back(x % base + '0');\n        x /= base;\n    }\n    std::reverse(s.begin(), s.end());\n    return s;",
    "    std::string s;\n    while (x) {\n        s.push_back(x % base + '0');\n        x /= base;\n    }\n    if (s.empty())\n        s.push_back('0');\n    return s;",
    "    std::string s = \"\";\n    while (x != 0) {\n        s = char(x % base + '0') + s;\n        x /= base;\n    }\n    return s;",
    "    std::string res = \"\";\n    while (x != 0) {\n        res = char(x % base + '0') + res;\n        x /= base;\n    }\n    return res;",
    "    std::stringstream ss;\n    ss << x;\n    std::string s = ss.str();\n    std::string res = \"\";\n    for (int i = s.length() - 1; i >= 0; i--) {\n        res += s[i];\n        if (s[i] != '0') {\n            res += s[i] + s[i] + s[i];\n        }\n    }\n    if (base == 10) {\n        return res;\n    }\n    std::string res2 = \"\";\n    for (int i = res.length() - 1; i >= 0; i--) {\n        res2 += res[i];\n        if (res[i] != '0') {\n            res2 += res[i] + res[i] + res[i];\n        }\n    }\n    std::string res3 = \"\";\n    for (int i = res2.length() - 1; i >= 0; i--) {\n        res3 += res2[i];\n        if (res2[i] != '0') {\n            res3 += res2[i] + res2[i] + res2[i];\n        }\n    }\n    std::string res4 = \"\";\n    for (int i = res3.length() - 1; i >= 0; i--) {\n        res4 += res3[i];\n        if (res3[i] != '0') {\n            res4 += res3[i] + res3[i] + res3[i];\n        }\n    }\n    std::string res5 = \"\";\n    for (int i = res4.length() - 1; i >= 0; i--) {\n        res5 += res4[i];\n        if (res4[i] != '0') {\n            res5 += res4[i] + res4[i] + res4[i];\n        }\n    }\n    std::string res6 = \"\";\n    for (int i = res5.length() - 1; i >= 0; i--) {\n        res6 += res5[i];\n        if (res5[i] != '0') {\n            res6",
    "    std::string res = \"\";\n    while (x) {\n        res = char(x % base + '0') + res;\n        x /= base;\n    }\n    return res;",
    "  std::string s;\n  while (x) {\n    s += (char)(x % base + '0');\n    x /= base;\n  }\n  return s;",
    "    std::string s = \"\";\n    while (x) {\n        s += (char)('0' + (x % base));\n        x /= base;\n    }\n    return s;",
    "  std::string s;\n  while (x) {\n    s.push_back(x % base + '0');\n    x /= base;\n  }\n  std::reverse(s.begin(), s.end());\n  return s;",
    "    std::string result = \"\";\n    while (x > 0) {\n        int digit = x % base;\n        result = digit + result;\n        x /= base;\n    }\n    return result;",
    "    std::string s;\n    while (x) {\n        s += (char)('0' + (x % base));\n        x /= base;\n    }\n    return s;",
    "    std::string s;\n    while (x) {\n        s.push_back(x % base + '0');\n        x /= base;\n    }\n    if (s.empty())\n        s = \"0\";\n    std::reverse(s.begin(), s.end());\n    return s;",
    "    std::stringstream ss;\n    ss << x;\n    std::string s = ss.str();\n    std::string result;\n    for (int i = s.size() - 1; i >= 0; i--) {\n        result.push_back(s[i] + s[i] - '0');\n    }\n    std::stringstream ss2;\n    ss2 << result;\n    return ss2.str();",
    "    std::string s;\n    while (x > 0) {\n        s.push_back(x % base + '0');\n        x /= base;\n    }\n    if (s.empty())\n        s.push_back('0');\n    std::reverse(s.begin(), s.end());\n    return s;",
    "    std::string result = \"\";\n    while (x > 0) {\n        int digit = x % base;\n        result = digit + result;\n        x /= base;\n    }\n    return result;",
    "    std::string s;\n    while (x) {\n        s = char(x % base + '0') + s;\n        x /= base;\n    }\n    return s;",
    "    std::string res = \"\";\n    while (x > 0) {\n        res = char(x % base + '0') + res;\n        x /= base;\n    }\n    return res;",
    "    std::stringstream ss;\n    ss << x;\n    std::string s = ss.str();\n    std::string res;\n    for (int i = s.length() - 1; i >= 0; i--) {\n        res += s[i];\n        if (s[i] == '1') {\n            res += \" \";\n        }\n    }\n    return res;",
    "    std::stringstream ss;\n    while (x) {\n        int digit = x % base;\n        ss << digit;\n        x /= base;\n    }\n    return ss.str();",
    "    std::string s = \"\";\n    while (x) {\n        s = char(x % base + '0') + s;\n        x /= base;\n    }\n    return s;",
    "    std::string s;\n    while (x) {\n        s.push_back(x % base + '0');\n        x /= base;\n    }\n    if (s.empty())\n        s.push_back('0');\n    return s;",
    "    std::string result;\n    while (x) {\n        int digit = x % base;\n        result = (char)(digit + '0') + result;\n        x /= base;\n    }\n    return result;",
    "    std::string s;\n    while (x) {\n        s.push_back(x % base + '0');\n        x /= base;\n    }\n    if (s.empty())\n        s.push_back('0');\n    return s;",
    "    std::string s;\n    while (x) {\n        s.push_back(x % base + '0');\n        x /= base;\n    }\n    return s;",
    "    std::string s;\n    while (x) {\n        s.push_back(x % base + '0');\n        x /= base;\n    }\n    if (s.empty()) {\n        s.push_back('0');\n    }\n    std::reverse(s.begin(), s.end());\n    return s;",
    "    std::string s = \"\";\n    while (x) {\n        s = char(x % base + '0') + s;\n        x /= base;\n    }\n    return s;",
    "    std::string s;\n    while (x) {\n        s = (char)(x % base + '0') + s;\n        x /= base;\n    }\n    return s;",
    "    std::string s = \"\";\n    while (x) {\n        s = char(x % base + '0') + s;\n        x /= base;\n    }\n    return s;",
    "    std::string s = \"\";\n    while (x) {\n        s = char(x % base + '0') + s;\n        x /= base;\n    }\n    return s;",
    "    std::string s = \"\";\n    while (x > 0) {\n        s = char(x % base + '0') + s;\n        x /= base;\n    }\n    return s;",
    "    std::string s;\n    while (x > 0) {\n        s += (char)('0' + x % base);\n        x /= base;\n    }\n    return s;",
    "    std::string res = \"\";\n    while (x) {\n        res = char(x % base + '0') + res;\n        x /= base;\n    }\n    return res;"
  ],
  "stop_tokens": [
    "\n}"
  ]
}